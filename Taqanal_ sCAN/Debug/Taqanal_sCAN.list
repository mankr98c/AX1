
Taqanal_sCAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00022004  08000250  08000250  00001250  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000025f8  08022258  08022258  00023258  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08024850  08024850  00026274  2**0
                  CONTENTS
  4 .ARM          00000008  08024850  08024850  00025850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08024858  08024858  00026274  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08024858  08024858  00025858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0802485c  0802485c  0002585c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000274  20000000  08024860  00026000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000155ec  20000278  08024ad4  00026278  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20015864  08024ad4  00026864  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00026274  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003cdbf  00000000  00000000  000262aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008d82  00000000  00000000  00063069  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002ef0  00000000  00000000  0006bdf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000023fd  00000000  00000000  0006ece0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000467ac  00000000  00000000  000710dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00048513  00000000  00000000  000b7889  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001879cb  00000000  00000000  000ffd9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00287767  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000df9c  00000000  00000000  002877ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  00295748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	@ (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	20000278 	.word	0x20000278
 800026c:	00000000 	.word	0x00000000
 8000270:	0802223c 	.word	0x0802223c

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	@ (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	@ (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	@ (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	2000027c 	.word	0x2000027c
 800028c:	0802223c 	.word	0x0802223c

08000290 <strcmp>:
 8000290:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000294:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000298:	2a01      	cmp	r2, #1
 800029a:	bf28      	it	cs
 800029c:	429a      	cmpcs	r2, r3
 800029e:	d0f7      	beq.n	8000290 <strcmp>
 80002a0:	1ad0      	subs	r0, r2, r3
 80002a2:	4770      	bx	lr

080002a4 <strlen>:
 80002a4:	4603      	mov	r3, r0
 80002a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002aa:	2a00      	cmp	r2, #0
 80002ac:	d1fb      	bne.n	80002a6 <strlen+0x2>
 80002ae:	1a18      	subs	r0, r3, r0
 80002b0:	3801      	subs	r0, #1
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_drsub>:
 80002b4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b8:	e002      	b.n	80002c0 <__adddf3>
 80002ba:	bf00      	nop

080002bc <__aeabi_dsub>:
 80002bc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002c0 <__adddf3>:
 80002c0:	b530      	push	{r4, r5, lr}
 80002c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ca:	ea94 0f05 	teq	r4, r5
 80002ce:	bf08      	it	eq
 80002d0:	ea90 0f02 	teqeq	r0, r2
 80002d4:	bf1f      	itttt	ne
 80002d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e6:	f000 80e2 	beq.w	80004ae <__adddf3+0x1ee>
 80002ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f2:	bfb8      	it	lt
 80002f4:	426d      	neglt	r5, r5
 80002f6:	dd0c      	ble.n	8000312 <__adddf3+0x52>
 80002f8:	442c      	add	r4, r5
 80002fa:	ea80 0202 	eor.w	r2, r0, r2
 80002fe:	ea81 0303 	eor.w	r3, r1, r3
 8000302:	ea82 0000 	eor.w	r0, r2, r0
 8000306:	ea83 0101 	eor.w	r1, r3, r1
 800030a:	ea80 0202 	eor.w	r2, r0, r2
 800030e:	ea81 0303 	eor.w	r3, r1, r3
 8000312:	2d36      	cmp	r5, #54	@ 0x36
 8000314:	bf88      	it	hi
 8000316:	bd30      	pophi	{r4, r5, pc}
 8000318:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800031c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000320:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000324:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x70>
 800032a:	4240      	negs	r0, r0
 800032c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000330:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000334:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000338:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x84>
 800033e:	4252      	negs	r2, r2
 8000340:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000344:	ea94 0f05 	teq	r4, r5
 8000348:	f000 80a7 	beq.w	800049a <__adddf3+0x1da>
 800034c:	f1a4 0401 	sub.w	r4, r4, #1
 8000350:	f1d5 0e20 	rsbs	lr, r5, #32
 8000354:	db0d      	blt.n	8000372 <__adddf3+0xb2>
 8000356:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035a:	fa22 f205 	lsr.w	r2, r2, r5
 800035e:	1880      	adds	r0, r0, r2
 8000360:	f141 0100 	adc.w	r1, r1, #0
 8000364:	fa03 f20e 	lsl.w	r2, r3, lr
 8000368:	1880      	adds	r0, r0, r2
 800036a:	fa43 f305 	asr.w	r3, r3, r5
 800036e:	4159      	adcs	r1, r3
 8000370:	e00e      	b.n	8000390 <__adddf3+0xd0>
 8000372:	f1a5 0520 	sub.w	r5, r5, #32
 8000376:	f10e 0e20 	add.w	lr, lr, #32
 800037a:	2a01      	cmp	r2, #1
 800037c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000380:	bf28      	it	cs
 8000382:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	18c0      	adds	r0, r0, r3
 800038c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000390:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000394:	d507      	bpl.n	80003a6 <__adddf3+0xe6>
 8000396:	f04f 0e00 	mov.w	lr, #0
 800039a:	f1dc 0c00 	rsbs	ip, ip, #0
 800039e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003aa:	d31b      	bcc.n	80003e4 <__adddf3+0x124>
 80003ac:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003b0:	d30c      	bcc.n	80003cc <__adddf3+0x10c>
 80003b2:	0849      	lsrs	r1, r1, #1
 80003b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003bc:	f104 0401 	add.w	r4, r4, #1
 80003c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c8:	f080 809a 	bcs.w	8000500 <__adddf3+0x240>
 80003cc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003d0:	bf08      	it	eq
 80003d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d6:	f150 0000 	adcs.w	r0, r0, #0
 80003da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003de:	ea41 0105 	orr.w	r1, r1, r5
 80003e2:	bd30      	pop	{r4, r5, pc}
 80003e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e8:	4140      	adcs	r0, r0
 80003ea:	eb41 0101 	adc.w	r1, r1, r1
 80003ee:	3c01      	subs	r4, #1
 80003f0:	bf28      	it	cs
 80003f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f6:	d2e9      	bcs.n	80003cc <__adddf3+0x10c>
 80003f8:	f091 0f00 	teq	r1, #0
 80003fc:	bf04      	itt	eq
 80003fe:	4601      	moveq	r1, r0
 8000400:	2000      	moveq	r0, #0
 8000402:	fab1 f381 	clz	r3, r1
 8000406:	bf08      	it	eq
 8000408:	3320      	addeq	r3, #32
 800040a:	f1a3 030b 	sub.w	r3, r3, #11
 800040e:	f1b3 0220 	subs.w	r2, r3, #32
 8000412:	da0c      	bge.n	800042e <__adddf3+0x16e>
 8000414:	320c      	adds	r2, #12
 8000416:	dd08      	ble.n	800042a <__adddf3+0x16a>
 8000418:	f102 0c14 	add.w	ip, r2, #20
 800041c:	f1c2 020c 	rsb	r2, r2, #12
 8000420:	fa01 f00c 	lsl.w	r0, r1, ip
 8000424:	fa21 f102 	lsr.w	r1, r1, r2
 8000428:	e00c      	b.n	8000444 <__adddf3+0x184>
 800042a:	f102 0214 	add.w	r2, r2, #20
 800042e:	bfd8      	it	le
 8000430:	f1c2 0c20 	rsble	ip, r2, #32
 8000434:	fa01 f102 	lsl.w	r1, r1, r2
 8000438:	fa20 fc0c 	lsr.w	ip, r0, ip
 800043c:	bfdc      	itt	le
 800043e:	ea41 010c 	orrle.w	r1, r1, ip
 8000442:	4090      	lslle	r0, r2
 8000444:	1ae4      	subs	r4, r4, r3
 8000446:	bfa2      	ittt	ge
 8000448:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800044c:	4329      	orrge	r1, r5
 800044e:	bd30      	popge	{r4, r5, pc}
 8000450:	ea6f 0404 	mvn.w	r4, r4
 8000454:	3c1f      	subs	r4, #31
 8000456:	da1c      	bge.n	8000492 <__adddf3+0x1d2>
 8000458:	340c      	adds	r4, #12
 800045a:	dc0e      	bgt.n	800047a <__adddf3+0x1ba>
 800045c:	f104 0414 	add.w	r4, r4, #20
 8000460:	f1c4 0220 	rsb	r2, r4, #32
 8000464:	fa20 f004 	lsr.w	r0, r0, r4
 8000468:	fa01 f302 	lsl.w	r3, r1, r2
 800046c:	ea40 0003 	orr.w	r0, r0, r3
 8000470:	fa21 f304 	lsr.w	r3, r1, r4
 8000474:	ea45 0103 	orr.w	r1, r5, r3
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	f1c4 040c 	rsb	r4, r4, #12
 800047e:	f1c4 0220 	rsb	r2, r4, #32
 8000482:	fa20 f002 	lsr.w	r0, r0, r2
 8000486:	fa01 f304 	lsl.w	r3, r1, r4
 800048a:	ea40 0003 	orr.w	r0, r0, r3
 800048e:	4629      	mov	r1, r5
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	fa21 f004 	lsr.w	r0, r1, r4
 8000496:	4629      	mov	r1, r5
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	f094 0f00 	teq	r4, #0
 800049e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004a2:	bf06      	itte	eq
 80004a4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a8:	3401      	addeq	r4, #1
 80004aa:	3d01      	subne	r5, #1
 80004ac:	e74e      	b.n	800034c <__adddf3+0x8c>
 80004ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b2:	bf18      	it	ne
 80004b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b8:	d029      	beq.n	800050e <__adddf3+0x24e>
 80004ba:	ea94 0f05 	teq	r4, r5
 80004be:	bf08      	it	eq
 80004c0:	ea90 0f02 	teqeq	r0, r2
 80004c4:	d005      	beq.n	80004d2 <__adddf3+0x212>
 80004c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ca:	bf04      	itt	eq
 80004cc:	4619      	moveq	r1, r3
 80004ce:	4610      	moveq	r0, r2
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	ea91 0f03 	teq	r1, r3
 80004d6:	bf1e      	ittt	ne
 80004d8:	2100      	movne	r1, #0
 80004da:	2000      	movne	r0, #0
 80004dc:	bd30      	popne	{r4, r5, pc}
 80004de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e2:	d105      	bne.n	80004f0 <__adddf3+0x230>
 80004e4:	0040      	lsls	r0, r0, #1
 80004e6:	4149      	adcs	r1, r1
 80004e8:	bf28      	it	cs
 80004ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f4:	bf3c      	itt	cc
 80004f6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004fa:	bd30      	popcc	{r4, r5, pc}
 80004fc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000500:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000504:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000508:	f04f 0000 	mov.w	r0, #0
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000512:	bf1a      	itte	ne
 8000514:	4619      	movne	r1, r3
 8000516:	4610      	movne	r0, r2
 8000518:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800051c:	bf1c      	itt	ne
 800051e:	460b      	movne	r3, r1
 8000520:	4602      	movne	r2, r0
 8000522:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000526:	bf06      	itte	eq
 8000528:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800052c:	ea91 0f03 	teqeq	r1, r3
 8000530:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	bf00      	nop

08000538 <__aeabi_ui2d>:
 8000538:	f090 0f00 	teq	r0, #0
 800053c:	bf04      	itt	eq
 800053e:	2100      	moveq	r1, #0
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000548:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800054c:	f04f 0500 	mov.w	r5, #0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e750      	b.n	80003f8 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_i2d>:
 8000558:	f090 0f00 	teq	r0, #0
 800055c:	bf04      	itt	eq
 800055e:	2100      	moveq	r1, #0
 8000560:	4770      	bxeq	lr
 8000562:	b530      	push	{r4, r5, lr}
 8000564:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000568:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000570:	bf48      	it	mi
 8000572:	4240      	negmi	r0, r0
 8000574:	f04f 0100 	mov.w	r1, #0
 8000578:	e73e      	b.n	80003f8 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_f2d>:
 800057c:	0042      	lsls	r2, r0, #1
 800057e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000582:	ea4f 0131 	mov.w	r1, r1, rrx
 8000586:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058a:	bf1f      	itttt	ne
 800058c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000590:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000594:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000598:	4770      	bxne	lr
 800059a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059e:	bf08      	it	eq
 80005a0:	4770      	bxeq	lr
 80005a2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a6:	bf04      	itt	eq
 80005a8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005bc:	e71c      	b.n	80003f8 <__adddf3+0x138>
 80005be:	bf00      	nop

080005c0 <__aeabi_ul2d>:
 80005c0:	ea50 0201 	orrs.w	r2, r0, r1
 80005c4:	bf08      	it	eq
 80005c6:	4770      	bxeq	lr
 80005c8:	b530      	push	{r4, r5, lr}
 80005ca:	f04f 0500 	mov.w	r5, #0
 80005ce:	e00a      	b.n	80005e6 <__aeabi_l2d+0x16>

080005d0 <__aeabi_l2d>:
 80005d0:	ea50 0201 	orrs.w	r2, r0, r1
 80005d4:	bf08      	it	eq
 80005d6:	4770      	bxeq	lr
 80005d8:	b530      	push	{r4, r5, lr}
 80005da:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005de:	d502      	bpl.n	80005e6 <__aeabi_l2d+0x16>
 80005e0:	4240      	negs	r0, r0
 80005e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005ea:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f2:	f43f aed8 	beq.w	80003a6 <__adddf3+0xe6>
 80005f6:	f04f 0203 	mov.w	r2, #3
 80005fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fe:	bf18      	it	ne
 8000600:	3203      	addne	r2, #3
 8000602:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000606:	bf18      	it	ne
 8000608:	3203      	addne	r2, #3
 800060a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060e:	f1c2 0320 	rsb	r3, r2, #32
 8000612:	fa00 fc03 	lsl.w	ip, r0, r3
 8000616:	fa20 f002 	lsr.w	r0, r0, r2
 800061a:	fa01 fe03 	lsl.w	lr, r1, r3
 800061e:	ea40 000e 	orr.w	r0, r0, lr
 8000622:	fa21 f102 	lsr.w	r1, r1, r2
 8000626:	4414      	add	r4, r2
 8000628:	e6bd      	b.n	80003a6 <__adddf3+0xe6>
 800062a:	bf00      	nop

0800062c <__aeabi_dmul>:
 800062c:	b570      	push	{r4, r5, r6, lr}
 800062e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000632:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000636:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063a:	bf1d      	ittte	ne
 800063c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000640:	ea94 0f0c 	teqne	r4, ip
 8000644:	ea95 0f0c 	teqne	r5, ip
 8000648:	f000 f8de 	bleq	8000808 <__aeabi_dmul+0x1dc>
 800064c:	442c      	add	r4, r5
 800064e:	ea81 0603 	eor.w	r6, r1, r3
 8000652:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000656:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065e:	bf18      	it	ne
 8000660:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800066c:	d038      	beq.n	80006e0 <__aeabi_dmul+0xb4>
 800066e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000672:	f04f 0500 	mov.w	r5, #0
 8000676:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000682:	f04f 0600 	mov.w	r6, #0
 8000686:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068a:	f09c 0f00 	teq	ip, #0
 800068e:	bf18      	it	ne
 8000690:	f04e 0e01 	orrne.w	lr, lr, #1
 8000694:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000698:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800069c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006a0:	d204      	bcs.n	80006ac <__aeabi_dmul+0x80>
 80006a2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a6:	416d      	adcs	r5, r5
 80006a8:	eb46 0606 	adc.w	r6, r6, r6
 80006ac:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006bc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c0:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c4:	bf88      	it	hi
 80006c6:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006ca:	d81e      	bhi.n	800070a <__aeabi_dmul+0xde>
 80006cc:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006d0:	bf08      	it	eq
 80006d2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d6:	f150 0000 	adcs.w	r0, r0, #0
 80006da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e4:	ea46 0101 	orr.w	r1, r6, r1
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	ea81 0103 	eor.w	r1, r1, r3
 80006f0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f4:	bfc2      	ittt	gt
 80006f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000700:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000704:	f04f 0e00 	mov.w	lr, #0
 8000708:	3c01      	subs	r4, #1
 800070a:	f300 80ab 	bgt.w	8000864 <__aeabi_dmul+0x238>
 800070e:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000712:	bfde      	ittt	le
 8000714:	2000      	movle	r0, #0
 8000716:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800071a:	bd70      	pople	{r4, r5, r6, pc}
 800071c:	f1c4 0400 	rsb	r4, r4, #0
 8000720:	3c20      	subs	r4, #32
 8000722:	da35      	bge.n	8000790 <__aeabi_dmul+0x164>
 8000724:	340c      	adds	r4, #12
 8000726:	dc1b      	bgt.n	8000760 <__aeabi_dmul+0x134>
 8000728:	f104 0414 	add.w	r4, r4, #20
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f305 	lsl.w	r3, r0, r5
 8000734:	fa20 f004 	lsr.w	r0, r0, r4
 8000738:	fa01 f205 	lsl.w	r2, r1, r5
 800073c:	ea40 0002 	orr.w	r0, r0, r2
 8000740:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000744:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	fa21 f604 	lsr.w	r6, r1, r4
 8000750:	eb42 0106 	adc.w	r1, r2, r6
 8000754:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000758:	bf08      	it	eq
 800075a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075e:	bd70      	pop	{r4, r5, r6, pc}
 8000760:	f1c4 040c 	rsb	r4, r4, #12
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f304 	lsl.w	r3, r0, r4
 800076c:	fa20 f005 	lsr.w	r0, r0, r5
 8000770:	fa01 f204 	lsl.w	r2, r1, r4
 8000774:	ea40 0002 	orr.w	r0, r0, r2
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000780:	f141 0100 	adc.w	r1, r1, #0
 8000784:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000788:	bf08      	it	eq
 800078a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078e:	bd70      	pop	{r4, r5, r6, pc}
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f205 	lsl.w	r2, r0, r5
 8000798:	ea4e 0e02 	orr.w	lr, lr, r2
 800079c:	fa20 f304 	lsr.w	r3, r0, r4
 80007a0:	fa01 f205 	lsl.w	r2, r1, r5
 80007a4:	ea43 0302 	orr.w	r3, r3, r2
 80007a8:	fa21 f004 	lsr.w	r0, r1, r4
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b0:	fa21 f204 	lsr.w	r2, r1, r4
 80007b4:	ea20 0002 	bic.w	r0, r0, r2
 80007b8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c0:	bf08      	it	eq
 80007c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c6:	bd70      	pop	{r4, r5, r6, pc}
 80007c8:	f094 0f00 	teq	r4, #0
 80007cc:	d10f      	bne.n	80007ee <__aeabi_dmul+0x1c2>
 80007ce:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007d2:	0040      	lsls	r0, r0, #1
 80007d4:	eb41 0101 	adc.w	r1, r1, r1
 80007d8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007dc:	bf08      	it	eq
 80007de:	3c01      	subeq	r4, #1
 80007e0:	d0f7      	beq.n	80007d2 <__aeabi_dmul+0x1a6>
 80007e2:	ea41 0106 	orr.w	r1, r1, r6
 80007e6:	f095 0f00 	teq	r5, #0
 80007ea:	bf18      	it	ne
 80007ec:	4770      	bxne	lr
 80007ee:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007f2:	0052      	lsls	r2, r2, #1
 80007f4:	eb43 0303 	adc.w	r3, r3, r3
 80007f8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007fc:	bf08      	it	eq
 80007fe:	3d01      	subeq	r5, #1
 8000800:	d0f7      	beq.n	80007f2 <__aeabi_dmul+0x1c6>
 8000802:	ea43 0306 	orr.w	r3, r3, r6
 8000806:	4770      	bx	lr
 8000808:	ea94 0f0c 	teq	r4, ip
 800080c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000810:	bf18      	it	ne
 8000812:	ea95 0f0c 	teqne	r5, ip
 8000816:	d00c      	beq.n	8000832 <__aeabi_dmul+0x206>
 8000818:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800081c:	bf18      	it	ne
 800081e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000822:	d1d1      	bne.n	80007c8 <__aeabi_dmul+0x19c>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000836:	bf06      	itte	eq
 8000838:	4610      	moveq	r0, r2
 800083a:	4619      	moveq	r1, r3
 800083c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000840:	d019      	beq.n	8000876 <__aeabi_dmul+0x24a>
 8000842:	ea94 0f0c 	teq	r4, ip
 8000846:	d102      	bne.n	800084e <__aeabi_dmul+0x222>
 8000848:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800084c:	d113      	bne.n	8000876 <__aeabi_dmul+0x24a>
 800084e:	ea95 0f0c 	teq	r5, ip
 8000852:	d105      	bne.n	8000860 <__aeabi_dmul+0x234>
 8000854:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000858:	bf1c      	itt	ne
 800085a:	4610      	movne	r0, r2
 800085c:	4619      	movne	r1, r3
 800085e:	d10a      	bne.n	8000876 <__aeabi_dmul+0x24a>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000868:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800086c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000870:	f04f 0000 	mov.w	r0, #0
 8000874:	bd70      	pop	{r4, r5, r6, pc}
 8000876:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800087a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087e:	bd70      	pop	{r4, r5, r6, pc}

08000880 <__aeabi_ddiv>:
 8000880:	b570      	push	{r4, r5, r6, lr}
 8000882:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000886:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800088a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088e:	bf1d      	ittte	ne
 8000890:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000894:	ea94 0f0c 	teqne	r4, ip
 8000898:	ea95 0f0c 	teqne	r5, ip
 800089c:	f000 f8a7 	bleq	80009ee <__aeabi_ddiv+0x16e>
 80008a0:	eba4 0405 	sub.w	r4, r4, r5
 80008a4:	ea81 0e03 	eor.w	lr, r1, r3
 80008a8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b0:	f000 8088 	beq.w	80009c4 <__aeabi_ddiv+0x144>
 80008b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b8:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008bc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008cc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d4:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d8:	429d      	cmp	r5, r3
 80008da:	bf08      	it	eq
 80008dc:	4296      	cmpeq	r6, r2
 80008de:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008e2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e6:	d202      	bcs.n	80008ee <__aeabi_ddiv+0x6e>
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	1ab6      	subs	r6, r6, r2
 80008f0:	eb65 0503 	sbc.w	r5, r5, r3
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fe:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000902:	ebb6 0e02 	subs.w	lr, r6, r2
 8000906:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090a:	bf22      	ittt	cs
 800090c:	1ab6      	subcs	r6, r6, r2
 800090e:	4675      	movcs	r5, lr
 8000910:	ea40 000c 	orrcs.w	r0, r0, ip
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	ebb6 0e02 	subs.w	lr, r6, r2
 800091e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000922:	bf22      	ittt	cs
 8000924:	1ab6      	subcs	r6, r6, r2
 8000926:	4675      	movcs	r5, lr
 8000928:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800092c:	085b      	lsrs	r3, r3, #1
 800092e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000932:	ebb6 0e02 	subs.w	lr, r6, r2
 8000936:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093a:	bf22      	ittt	cs
 800093c:	1ab6      	subcs	r6, r6, r2
 800093e:	4675      	movcs	r5, lr
 8000940:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000944:	085b      	lsrs	r3, r3, #1
 8000946:	ea4f 0232 	mov.w	r2, r2, rrx
 800094a:	ebb6 0e02 	subs.w	lr, r6, r2
 800094e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000952:	bf22      	ittt	cs
 8000954:	1ab6      	subcs	r6, r6, r2
 8000956:	4675      	movcs	r5, lr
 8000958:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800095c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000960:	d018      	beq.n	8000994 <__aeabi_ddiv+0x114>
 8000962:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000966:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000972:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000976:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097e:	d1c0      	bne.n	8000902 <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	d10b      	bne.n	800099e <__aeabi_ddiv+0x11e>
 8000986:	ea41 0100 	orr.w	r1, r1, r0
 800098a:	f04f 0000 	mov.w	r0, #0
 800098e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000992:	e7b6      	b.n	8000902 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000998:	bf04      	itt	eq
 800099a:	4301      	orreq	r1, r0
 800099c:	2000      	moveq	r0, #0
 800099e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009a2:	bf88      	it	hi
 80009a4:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a8:	f63f aeaf 	bhi.w	800070a <__aeabi_dmul+0xde>
 80009ac:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b0:	bf04      	itt	eq
 80009b2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ba:	f150 0000 	adcs.w	r0, r0, #0
 80009be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c2:	bd70      	pop	{r4, r5, r6, pc}
 80009c4:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009cc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d0:	bfc2      	ittt	gt
 80009d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009da:	bd70      	popgt	{r4, r5, r6, pc}
 80009dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009e0:	f04f 0e00 	mov.w	lr, #0
 80009e4:	3c01      	subs	r4, #1
 80009e6:	e690      	b.n	800070a <__aeabi_dmul+0xde>
 80009e8:	ea45 0e06 	orr.w	lr, r5, r6
 80009ec:	e68d      	b.n	800070a <__aeabi_dmul+0xde>
 80009ee:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f2:	ea94 0f0c 	teq	r4, ip
 80009f6:	bf08      	it	eq
 80009f8:	ea95 0f0c 	teqeq	r5, ip
 80009fc:	f43f af3b 	beq.w	8000876 <__aeabi_dmul+0x24a>
 8000a00:	ea94 0f0c 	teq	r4, ip
 8000a04:	d10a      	bne.n	8000a1c <__aeabi_ddiv+0x19c>
 8000a06:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0a:	f47f af34 	bne.w	8000876 <__aeabi_dmul+0x24a>
 8000a0e:	ea95 0f0c 	teq	r5, ip
 8000a12:	f47f af25 	bne.w	8000860 <__aeabi_dmul+0x234>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e72c      	b.n	8000876 <__aeabi_dmul+0x24a>
 8000a1c:	ea95 0f0c 	teq	r5, ip
 8000a20:	d106      	bne.n	8000a30 <__aeabi_ddiv+0x1b0>
 8000a22:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a26:	f43f aefd 	beq.w	8000824 <__aeabi_dmul+0x1f8>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e722      	b.n	8000876 <__aeabi_dmul+0x24a>
 8000a30:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a34:	bf18      	it	ne
 8000a36:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3a:	f47f aec5 	bne.w	80007c8 <__aeabi_dmul+0x19c>
 8000a3e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a42:	f47f af0d 	bne.w	8000860 <__aeabi_dmul+0x234>
 8000a46:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4a:	f47f aeeb 	bne.w	8000824 <__aeabi_dmul+0x1f8>
 8000a4e:	e712      	b.n	8000876 <__aeabi_dmul+0x24a>

08000a50 <__gedf2>:
 8000a50:	f04f 3cff 	mov.w	ip, #4294967295
 8000a54:	e006      	b.n	8000a64 <__cmpdf2+0x4>
 8000a56:	bf00      	nop

08000a58 <__ledf2>:
 8000a58:	f04f 0c01 	mov.w	ip, #1
 8000a5c:	e002      	b.n	8000a64 <__cmpdf2+0x4>
 8000a5e:	bf00      	nop

08000a60 <__cmpdf2>:
 8000a60:	f04f 0c01 	mov.w	ip, #1
 8000a64:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a68:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a6c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a74:	bf18      	it	ne
 8000a76:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a7a:	d01b      	beq.n	8000ab4 <__cmpdf2+0x54>
 8000a7c:	b001      	add	sp, #4
 8000a7e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a82:	bf0c      	ite	eq
 8000a84:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a88:	ea91 0f03 	teqne	r1, r3
 8000a8c:	bf02      	ittt	eq
 8000a8e:	ea90 0f02 	teqeq	r0, r2
 8000a92:	2000      	moveq	r0, #0
 8000a94:	4770      	bxeq	lr
 8000a96:	f110 0f00 	cmn.w	r0, #0
 8000a9a:	ea91 0f03 	teq	r1, r3
 8000a9e:	bf58      	it	pl
 8000aa0:	4299      	cmppl	r1, r3
 8000aa2:	bf08      	it	eq
 8000aa4:	4290      	cmpeq	r0, r2
 8000aa6:	bf2c      	ite	cs
 8000aa8:	17d8      	asrcs	r0, r3, #31
 8000aaa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aae:	f040 0001 	orr.w	r0, r0, #1
 8000ab2:	4770      	bx	lr
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__cmpdf2+0x64>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d107      	bne.n	8000ad4 <__cmpdf2+0x74>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d1d6      	bne.n	8000a7c <__cmpdf2+0x1c>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d0d3      	beq.n	8000a7c <__cmpdf2+0x1c>
 8000ad4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop

08000adc <__aeabi_cdrcmple>:
 8000adc:	4684      	mov	ip, r0
 8000ade:	4610      	mov	r0, r2
 8000ae0:	4662      	mov	r2, ip
 8000ae2:	468c      	mov	ip, r1
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4663      	mov	r3, ip
 8000ae8:	e000      	b.n	8000aec <__aeabi_cdcmpeq>
 8000aea:	bf00      	nop

08000aec <__aeabi_cdcmpeq>:
 8000aec:	b501      	push	{r0, lr}
 8000aee:	f7ff ffb7 	bl	8000a60 <__cmpdf2>
 8000af2:	2800      	cmp	r0, #0
 8000af4:	bf48      	it	mi
 8000af6:	f110 0f00 	cmnmi.w	r0, #0
 8000afa:	bd01      	pop	{r0, pc}

08000afc <__aeabi_dcmpeq>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff fff4 	bl	8000aec <__aeabi_cdcmpeq>
 8000b04:	bf0c      	ite	eq
 8000b06:	2001      	moveq	r0, #1
 8000b08:	2000      	movne	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmplt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffea 	bl	8000aec <__aeabi_cdcmpeq>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmple>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffe0 	bl	8000aec <__aeabi_cdcmpeq>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpge>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffce 	bl	8000adc <__aeabi_cdrcmple>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpgt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffc4 	bl	8000adc <__aeabi_cdrcmple>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpun>:
 8000b60:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b68:	d102      	bne.n	8000b70 <__aeabi_dcmpun+0x10>
 8000b6a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6e:	d10a      	bne.n	8000b86 <__aeabi_dcmpun+0x26>
 8000b70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b78:	d102      	bne.n	8000b80 <__aeabi_dcmpun+0x20>
 8000b7a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7e:	d102      	bne.n	8000b86 <__aeabi_dcmpun+0x26>
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	f04f 0001 	mov.w	r0, #1
 8000b8a:	4770      	bx	lr

08000b8c <__aeabi_d2iz>:
 8000b8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b90:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b94:	d215      	bcs.n	8000bc2 <__aeabi_d2iz+0x36>
 8000b96:	d511      	bpl.n	8000bbc <__aeabi_d2iz+0x30>
 8000b98:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba0:	d912      	bls.n	8000bc8 <__aeabi_d2iz+0x3c>
 8000ba2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000baa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bae:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bb2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb6:	bf18      	it	ne
 8000bb8:	4240      	negne	r0, r0
 8000bba:	4770      	bx	lr
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc6:	d105      	bne.n	8000bd4 <__aeabi_d2iz+0x48>
 8000bc8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bcc:	bf08      	it	eq
 8000bce:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bd2:	4770      	bx	lr
 8000bd4:	f04f 0000 	mov.w	r0, #0
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop

08000bdc <__aeabi_d2uiz>:
 8000bdc:	004a      	lsls	r2, r1, #1
 8000bde:	d211      	bcs.n	8000c04 <__aeabi_d2uiz+0x28>
 8000be0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000be4:	d211      	bcs.n	8000c0a <__aeabi_d2uiz+0x2e>
 8000be6:	d50d      	bpl.n	8000c04 <__aeabi_d2uiz+0x28>
 8000be8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bf0:	d40e      	bmi.n	8000c10 <__aeabi_d2uiz+0x34>
 8000bf2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bfa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfe:	fa23 f002 	lsr.w	r0, r3, r2
 8000c02:	4770      	bx	lr
 8000c04:	f04f 0000 	mov.w	r0, #0
 8000c08:	4770      	bx	lr
 8000c0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0e:	d102      	bne.n	8000c16 <__aeabi_d2uiz+0x3a>
 8000c10:	f04f 30ff 	mov.w	r0, #4294967295
 8000c14:	4770      	bx	lr
 8000c16:	f04f 0000 	mov.w	r0, #0
 8000c1a:	4770      	bx	lr

08000c1c <__aeabi_d2f>:
 8000c1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c24:	bf24      	itt	cs
 8000c26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c2e:	d90d      	bls.n	8000c4c <__aeabi_d2f+0x30>
 8000c30:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c3c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c44:	bf08      	it	eq
 8000c46:	f020 0001 	biceq.w	r0, r0, #1
 8000c4a:	4770      	bx	lr
 8000c4c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c50:	d121      	bne.n	8000c96 <__aeabi_d2f+0x7a>
 8000c52:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c56:	bfbc      	itt	lt
 8000c58:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c5c:	4770      	bxlt	lr
 8000c5e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c66:	f1c2 0218 	rsb	r2, r2, #24
 8000c6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c72:	fa20 f002 	lsr.w	r0, r0, r2
 8000c76:	bf18      	it	ne
 8000c78:	f040 0001 	orrne.w	r0, r0, #1
 8000c7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c88:	ea40 000c 	orr.w	r0, r0, ip
 8000c8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c94:	e7cc      	b.n	8000c30 <__aeabi_d2f+0x14>
 8000c96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c9a:	d107      	bne.n	8000cac <__aeabi_d2f+0x90>
 8000c9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ca0:	bf1e      	ittt	ne
 8000ca2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ca6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000caa:	4770      	bxne	lr
 8000cac:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cb0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop

08000cbc <__aeabi_uldivmod>:
 8000cbc:	b953      	cbnz	r3, 8000cd4 <__aeabi_uldivmod+0x18>
 8000cbe:	b94a      	cbnz	r2, 8000cd4 <__aeabi_uldivmod+0x18>
 8000cc0:	2900      	cmp	r1, #0
 8000cc2:	bf08      	it	eq
 8000cc4:	2800      	cmpeq	r0, #0
 8000cc6:	bf1c      	itt	ne
 8000cc8:	f04f 31ff 	movne.w	r1, #4294967295
 8000ccc:	f04f 30ff 	movne.w	r0, #4294967295
 8000cd0:	f000 b9b4 	b.w	800103c <__aeabi_idiv0>
 8000cd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cdc:	f000 f83c 	bl	8000d58 <__udivmoddi4>
 8000ce0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce8:	b004      	add	sp, #16
 8000cea:	4770      	bx	lr

08000cec <__aeabi_d2lz>:
 8000cec:	b538      	push	{r3, r4, r5, lr}
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	4604      	mov	r4, r0
 8000cf4:	460d      	mov	r5, r1
 8000cf6:	f7ff ff0b 	bl	8000b10 <__aeabi_dcmplt>
 8000cfa:	b928      	cbnz	r0, 8000d08 <__aeabi_d2lz+0x1c>
 8000cfc:	4620      	mov	r0, r4
 8000cfe:	4629      	mov	r1, r5
 8000d00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d04:	f000 b80a 	b.w	8000d1c <__aeabi_d2ulz>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d0e:	f000 f805 	bl	8000d1c <__aeabi_d2ulz>
 8000d12:	4240      	negs	r0, r0
 8000d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d18:	bd38      	pop	{r3, r4, r5, pc}
 8000d1a:	bf00      	nop

08000d1c <__aeabi_d2ulz>:
 8000d1c:	b5d0      	push	{r4, r6, r7, lr}
 8000d1e:	2200      	movs	r2, #0
 8000d20:	4b0b      	ldr	r3, [pc, #44]	@ (8000d50 <__aeabi_d2ulz+0x34>)
 8000d22:	4606      	mov	r6, r0
 8000d24:	460f      	mov	r7, r1
 8000d26:	f7ff fc81 	bl	800062c <__aeabi_dmul>
 8000d2a:	f7ff ff57 	bl	8000bdc <__aeabi_d2uiz>
 8000d2e:	4604      	mov	r4, r0
 8000d30:	f7ff fc02 	bl	8000538 <__aeabi_ui2d>
 8000d34:	2200      	movs	r2, #0
 8000d36:	4b07      	ldr	r3, [pc, #28]	@ (8000d54 <__aeabi_d2ulz+0x38>)
 8000d38:	f7ff fc78 	bl	800062c <__aeabi_dmul>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	460b      	mov	r3, r1
 8000d40:	4630      	mov	r0, r6
 8000d42:	4639      	mov	r1, r7
 8000d44:	f7ff faba 	bl	80002bc <__aeabi_dsub>
 8000d48:	f7ff ff48 	bl	8000bdc <__aeabi_d2uiz>
 8000d4c:	4621      	mov	r1, r4
 8000d4e:	bdd0      	pop	{r4, r6, r7, pc}
 8000d50:	3df00000 	.word	0x3df00000
 8000d54:	41f00000 	.word	0x41f00000

08000d58 <__udivmoddi4>:
 8000d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d5c:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000d5e:	460c      	mov	r4, r1
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d14d      	bne.n	8000e00 <__udivmoddi4+0xa8>
 8000d64:	428a      	cmp	r2, r1
 8000d66:	460f      	mov	r7, r1
 8000d68:	4684      	mov	ip, r0
 8000d6a:	4696      	mov	lr, r2
 8000d6c:	fab2 f382 	clz	r3, r2
 8000d70:	d960      	bls.n	8000e34 <__udivmoddi4+0xdc>
 8000d72:	b14b      	cbz	r3, 8000d88 <__udivmoddi4+0x30>
 8000d74:	fa02 fe03 	lsl.w	lr, r2, r3
 8000d78:	f1c3 0220 	rsb	r2, r3, #32
 8000d7c:	409f      	lsls	r7, r3
 8000d7e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000d82:	fa20 f202 	lsr.w	r2, r0, r2
 8000d86:	4317      	orrs	r7, r2
 8000d88:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000d8c:	fa1f f48e 	uxth.w	r4, lr
 8000d90:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000d94:	fbb7 f1f6 	udiv	r1, r7, r6
 8000d98:	fb06 7711 	mls	r7, r6, r1, r7
 8000d9c:	fb01 f004 	mul.w	r0, r1, r4
 8000da0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000da4:	4290      	cmp	r0, r2
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x62>
 8000da8:	eb1e 0202 	adds.w	r2, lr, r2
 8000dac:	f101 37ff 	add.w	r7, r1, #4294967295
 8000db0:	d202      	bcs.n	8000db8 <__udivmoddi4+0x60>
 8000db2:	4290      	cmp	r0, r2
 8000db4:	f200 812d 	bhi.w	8001012 <__udivmoddi4+0x2ba>
 8000db8:	4639      	mov	r1, r7
 8000dba:	1a12      	subs	r2, r2, r0
 8000dbc:	fa1f fc8c 	uxth.w	ip, ip
 8000dc0:	fbb2 f0f6 	udiv	r0, r2, r6
 8000dc4:	fb06 2210 	mls	r2, r6, r0, r2
 8000dc8:	fb00 f404 	mul.w	r4, r0, r4
 8000dcc:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000dd0:	4564      	cmp	r4, ip
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x8e>
 8000dd4:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000dd8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ddc:	d202      	bcs.n	8000de4 <__udivmoddi4+0x8c>
 8000dde:	4564      	cmp	r4, ip
 8000de0:	f200 811a 	bhi.w	8001018 <__udivmoddi4+0x2c0>
 8000de4:	4610      	mov	r0, r2
 8000de6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dea:	ebac 0c04 	sub.w	ip, ip, r4
 8000dee:	2100      	movs	r1, #0
 8000df0:	b125      	cbz	r5, 8000dfc <__udivmoddi4+0xa4>
 8000df2:	fa2c f303 	lsr.w	r3, ip, r3
 8000df6:	2200      	movs	r2, #0
 8000df8:	e9c5 3200 	strd	r3, r2, [r5]
 8000dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000e00:	428b      	cmp	r3, r1
 8000e02:	d905      	bls.n	8000e10 <__udivmoddi4+0xb8>
 8000e04:	b10d      	cbz	r5, 8000e0a <__udivmoddi4+0xb2>
 8000e06:	e9c5 0100 	strd	r0, r1, [r5]
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	e7f5      	b.n	8000dfc <__udivmoddi4+0xa4>
 8000e10:	fab3 f183 	clz	r1, r3
 8000e14:	2900      	cmp	r1, #0
 8000e16:	d14d      	bne.n	8000eb4 <__udivmoddi4+0x15c>
 8000e18:	42a3      	cmp	r3, r4
 8000e1a:	f0c0 80f2 	bcc.w	8001002 <__udivmoddi4+0x2aa>
 8000e1e:	4290      	cmp	r0, r2
 8000e20:	f080 80ef 	bcs.w	8001002 <__udivmoddi4+0x2aa>
 8000e24:	4606      	mov	r6, r0
 8000e26:	4623      	mov	r3, r4
 8000e28:	4608      	mov	r0, r1
 8000e2a:	2d00      	cmp	r5, #0
 8000e2c:	d0e6      	beq.n	8000dfc <__udivmoddi4+0xa4>
 8000e2e:	e9c5 6300 	strd	r6, r3, [r5]
 8000e32:	e7e3      	b.n	8000dfc <__udivmoddi4+0xa4>
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	f040 80a2 	bne.w	8000f7e <__udivmoddi4+0x226>
 8000e3a:	1a8a      	subs	r2, r1, r2
 8000e3c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000e40:	fa1f f68e 	uxth.w	r6, lr
 8000e44:	2101      	movs	r1, #1
 8000e46:	fbb2 f4f7 	udiv	r4, r2, r7
 8000e4a:	fb07 2014 	mls	r0, r7, r4, r2
 8000e4e:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000e52:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e56:	fb06 f004 	mul.w	r0, r6, r4
 8000e5a:	4290      	cmp	r0, r2
 8000e5c:	d90f      	bls.n	8000e7e <__udivmoddi4+0x126>
 8000e5e:	eb1e 0202 	adds.w	r2, lr, r2
 8000e62:	f104 38ff 	add.w	r8, r4, #4294967295
 8000e66:	bf2c      	ite	cs
 8000e68:	f04f 0901 	movcs.w	r9, #1
 8000e6c:	f04f 0900 	movcc.w	r9, #0
 8000e70:	4290      	cmp	r0, r2
 8000e72:	d903      	bls.n	8000e7c <__udivmoddi4+0x124>
 8000e74:	f1b9 0f00 	cmp.w	r9, #0
 8000e78:	f000 80c8 	beq.w	800100c <__udivmoddi4+0x2b4>
 8000e7c:	4644      	mov	r4, r8
 8000e7e:	1a12      	subs	r2, r2, r0
 8000e80:	fa1f fc8c 	uxth.w	ip, ip
 8000e84:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e88:	fb07 2210 	mls	r2, r7, r0, r2
 8000e8c:	fb00 f606 	mul.w	r6, r0, r6
 8000e90:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000e94:	4566      	cmp	r6, ip
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x152>
 8000e98:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000e9c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ea0:	d202      	bcs.n	8000ea8 <__udivmoddi4+0x150>
 8000ea2:	4566      	cmp	r6, ip
 8000ea4:	f200 80bb 	bhi.w	800101e <__udivmoddi4+0x2c6>
 8000ea8:	4610      	mov	r0, r2
 8000eaa:	ebac 0c06 	sub.w	ip, ip, r6
 8000eae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000eb2:	e79d      	b.n	8000df0 <__udivmoddi4+0x98>
 8000eb4:	f1c1 0620 	rsb	r6, r1, #32
 8000eb8:	408b      	lsls	r3, r1
 8000eba:	fa04 fe01 	lsl.w	lr, r4, r1
 8000ebe:	fa22 f706 	lsr.w	r7, r2, r6
 8000ec2:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ec6:	40f4      	lsrs	r4, r6
 8000ec8:	408a      	lsls	r2, r1
 8000eca:	431f      	orrs	r7, r3
 8000ecc:	ea4e 030c 	orr.w	r3, lr, ip
 8000ed0:	fa00 fe01 	lsl.w	lr, r0, r1
 8000ed4:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ed8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000edc:	fa1f fc87 	uxth.w	ip, r7
 8000ee0:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ee4:	fb08 4410 	mls	r4, r8, r0, r4
 8000ee8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eec:	fb00 f90c 	mul.w	r9, r0, ip
 8000ef0:	45a1      	cmp	r9, r4
 8000ef2:	d90e      	bls.n	8000f12 <__udivmoddi4+0x1ba>
 8000ef4:	193c      	adds	r4, r7, r4
 8000ef6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000efa:	bf2c      	ite	cs
 8000efc:	f04f 0b01 	movcs.w	fp, #1
 8000f00:	f04f 0b00 	movcc.w	fp, #0
 8000f04:	45a1      	cmp	r9, r4
 8000f06:	d903      	bls.n	8000f10 <__udivmoddi4+0x1b8>
 8000f08:	f1bb 0f00 	cmp.w	fp, #0
 8000f0c:	f000 8093 	beq.w	8001036 <__udivmoddi4+0x2de>
 8000f10:	4650      	mov	r0, sl
 8000f12:	eba4 0409 	sub.w	r4, r4, r9
 8000f16:	fa1f f983 	uxth.w	r9, r3
 8000f1a:	fbb4 f3f8 	udiv	r3, r4, r8
 8000f1e:	fb08 4413 	mls	r4, r8, r3, r4
 8000f22:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f26:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2a:	45a4      	cmp	ip, r4
 8000f2c:	d906      	bls.n	8000f3c <__udivmoddi4+0x1e4>
 8000f2e:	193c      	adds	r4, r7, r4
 8000f30:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f34:	d201      	bcs.n	8000f3a <__udivmoddi4+0x1e2>
 8000f36:	45a4      	cmp	ip, r4
 8000f38:	d87a      	bhi.n	8001030 <__udivmoddi4+0x2d8>
 8000f3a:	4643      	mov	r3, r8
 8000f3c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f40:	eba4 040c 	sub.w	r4, r4, ip
 8000f44:	fba0 9802 	umull	r9, r8, r0, r2
 8000f48:	4544      	cmp	r4, r8
 8000f4a:	46cc      	mov	ip, r9
 8000f4c:	4643      	mov	r3, r8
 8000f4e:	d302      	bcc.n	8000f56 <__udivmoddi4+0x1fe>
 8000f50:	d106      	bne.n	8000f60 <__udivmoddi4+0x208>
 8000f52:	45ce      	cmp	lr, r9
 8000f54:	d204      	bcs.n	8000f60 <__udivmoddi4+0x208>
 8000f56:	3801      	subs	r0, #1
 8000f58:	ebb9 0c02 	subs.w	ip, r9, r2
 8000f5c:	eb68 0307 	sbc.w	r3, r8, r7
 8000f60:	b15d      	cbz	r5, 8000f7a <__udivmoddi4+0x222>
 8000f62:	ebbe 020c 	subs.w	r2, lr, ip
 8000f66:	eb64 0403 	sbc.w	r4, r4, r3
 8000f6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6e:	fa22 f301 	lsr.w	r3, r2, r1
 8000f72:	40cc      	lsrs	r4, r1
 8000f74:	431e      	orrs	r6, r3
 8000f76:	e9c5 6400 	strd	r6, r4, [r5]
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	e73e      	b.n	8000dfc <__udivmoddi4+0xa4>
 8000f7e:	fa02 fe03 	lsl.w	lr, r2, r3
 8000f82:	f1c3 0120 	rsb	r1, r3, #32
 8000f86:	fa04 f203 	lsl.w	r2, r4, r3
 8000f8a:	fa00 fc03 	lsl.w	ip, r0, r3
 8000f8e:	40cc      	lsrs	r4, r1
 8000f90:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000f94:	fa20 f101 	lsr.w	r1, r0, r1
 8000f98:	fa1f f68e 	uxth.w	r6, lr
 8000f9c:	fbb4 f0f7 	udiv	r0, r4, r7
 8000fa0:	430a      	orrs	r2, r1
 8000fa2:	fb07 4410 	mls	r4, r7, r0, r4
 8000fa6:	0c11      	lsrs	r1, r2, #16
 8000fa8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000fac:	fb00 f406 	mul.w	r4, r0, r6
 8000fb0:	428c      	cmp	r4, r1
 8000fb2:	d90e      	bls.n	8000fd2 <__udivmoddi4+0x27a>
 8000fb4:	eb1e 0101 	adds.w	r1, lr, r1
 8000fb8:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fbc:	bf2c      	ite	cs
 8000fbe:	f04f 0901 	movcs.w	r9, #1
 8000fc2:	f04f 0900 	movcc.w	r9, #0
 8000fc6:	428c      	cmp	r4, r1
 8000fc8:	d902      	bls.n	8000fd0 <__udivmoddi4+0x278>
 8000fca:	f1b9 0f00 	cmp.w	r9, #0
 8000fce:	d02c      	beq.n	800102a <__udivmoddi4+0x2d2>
 8000fd0:	4640      	mov	r0, r8
 8000fd2:	1b09      	subs	r1, r1, r4
 8000fd4:	b292      	uxth	r2, r2
 8000fd6:	fbb1 f4f7 	udiv	r4, r1, r7
 8000fda:	fb07 1114 	mls	r1, r7, r4, r1
 8000fde:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fe2:	fb04 f106 	mul.w	r1, r4, r6
 8000fe6:	4291      	cmp	r1, r2
 8000fe8:	d907      	bls.n	8000ffa <__udivmoddi4+0x2a2>
 8000fea:	eb1e 0202 	adds.w	r2, lr, r2
 8000fee:	f104 38ff 	add.w	r8, r4, #4294967295
 8000ff2:	d201      	bcs.n	8000ff8 <__udivmoddi4+0x2a0>
 8000ff4:	4291      	cmp	r1, r2
 8000ff6:	d815      	bhi.n	8001024 <__udivmoddi4+0x2cc>
 8000ff8:	4644      	mov	r4, r8
 8000ffa:	1a52      	subs	r2, r2, r1
 8000ffc:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8001000:	e721      	b.n	8000e46 <__udivmoddi4+0xee>
 8001002:	1a86      	subs	r6, r0, r2
 8001004:	eb64 0303 	sbc.w	r3, r4, r3
 8001008:	2001      	movs	r0, #1
 800100a:	e70e      	b.n	8000e2a <__udivmoddi4+0xd2>
 800100c:	3c02      	subs	r4, #2
 800100e:	4472      	add	r2, lr
 8001010:	e735      	b.n	8000e7e <__udivmoddi4+0x126>
 8001012:	3902      	subs	r1, #2
 8001014:	4472      	add	r2, lr
 8001016:	e6d0      	b.n	8000dba <__udivmoddi4+0x62>
 8001018:	44f4      	add	ip, lr
 800101a:	3802      	subs	r0, #2
 800101c:	e6e3      	b.n	8000de6 <__udivmoddi4+0x8e>
 800101e:	44f4      	add	ip, lr
 8001020:	3802      	subs	r0, #2
 8001022:	e742      	b.n	8000eaa <__udivmoddi4+0x152>
 8001024:	3c02      	subs	r4, #2
 8001026:	4472      	add	r2, lr
 8001028:	e7e7      	b.n	8000ffa <__udivmoddi4+0x2a2>
 800102a:	3802      	subs	r0, #2
 800102c:	4471      	add	r1, lr
 800102e:	e7d0      	b.n	8000fd2 <__udivmoddi4+0x27a>
 8001030:	3b02      	subs	r3, #2
 8001032:	443c      	add	r4, r7
 8001034:	e782      	b.n	8000f3c <__udivmoddi4+0x1e4>
 8001036:	3802      	subs	r0, #2
 8001038:	443c      	add	r4, r7
 800103a:	e76a      	b.n	8000f12 <__udivmoddi4+0x1ba>

0800103c <__aeabi_idiv0>:
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <getCANData>:
extern int sleepcount;
Map canDataMap;
extern FDCAN_HandleTypeDef hfdcan1;
extern FDCAN_HandleTypeDef hfdcan2;

void getCANData(Map *canDataCopy) {
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
    memcpy(canDataCopy, &canDataMap,sizeof(Map));
 8001048:	f44f 720d 	mov.w	r2, #564	@ 0x234
 800104c:	4906      	ldr	r1, [pc, #24]	@ (8001068 <getCANData+0x28>)
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f01e f851 	bl	801f0f6 <memcpy>
    clearBuffer(&canDataMap,sizeof(Map));
 8001054:	f44f 710d 	mov.w	r1, #564	@ 0x234
 8001058:	4803      	ldr	r0, [pc, #12]	@ (8001068 <getCANData+0x28>)
 800105a:	f000 fd35 	bl	8001ac8 <clearBuffer>
}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	200002a4 	.word	0x200002a4

0800106c <initCan>:
	}
}
void processCAN1(uint32_t id,uint8_t *data,uint8_t length){
	addToMap(&canDataMap,id,data,length);
}
void initCan(void){
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
//	TX_DataCAN();
	clearBuffer(&canDataMap,sizeof(Map));
 8001070:	f44f 710d 	mov.w	r1, #564	@ 0x234
 8001074:	4802      	ldr	r0, [pc, #8]	@ (8001080 <initCan+0x14>)
 8001076:	f000 fd27 	bl	8001ac8 <clearBuffer>
}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	200002a4 	.word	0x200002a4

08001084 <processCAN2>:

void processCAN2(FDCAN_RxHeaderTypeDef *rxHeader,uint8_t *data){
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	6039      	str	r1, [r7, #0]
	addToMap(&canDataMap,rxHeader->Identifier,data,rxHeader->DataLength);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6819      	ldr	r1, [r3, #0]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	68db      	ldr	r3, [r3, #12]
 8001096:	683a      	ldr	r2, [r7, #0]
 8001098:	4803      	ldr	r0, [pc, #12]	@ (80010a8 <processCAN2+0x24>)
 800109a:	f000 fdd5 	bl	8001c48 <addToMap>
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	200002a4 	.word	0x200002a4

080010ac <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
  static uint32_t dataIndex = 0;

  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) == SET)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	f003 0301 	and.w	r3, r3, #1
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d015      	beq.n	80010ec <HAL_FDCAN_RxFifo0Callback+0x40>
  { sleepcount =0;
 80010c0:	4b0c      	ldr	r3, [pc, #48]	@ (80010f4 <HAL_FDCAN_RxFifo0Callback+0x48>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
		if(HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxCAN_1_DATA) == HAL_OK){
 80010c6:	4b0c      	ldr	r3, [pc, #48]	@ (80010f8 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 80010c8:	4a0c      	ldr	r2, [pc, #48]	@ (80010fc <HAL_FDCAN_RxFifo0Callback+0x50>)
 80010ca:	2140      	movs	r1, #64	@ 0x40
 80010cc:	480c      	ldr	r0, [pc, #48]	@ (8001100 <HAL_FDCAN_RxFifo0Callback+0x54>)
 80010ce:	f009 fba9 	bl	800a824 <HAL_FDCAN_GetRxMessage>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d103      	bne.n	80010e0 <HAL_FDCAN_RxFifo0Callback+0x34>
			    processCAN2(&RxHeader,&RxCAN_1_DATA);
 80010d8:	4907      	ldr	r1, [pc, #28]	@ (80010f8 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 80010da:	4808      	ldr	r0, [pc, #32]	@ (80010fc <HAL_FDCAN_RxFifo0Callback+0x50>)
 80010dc:	f7ff ffd2 	bl	8001084 <processCAN2>
		}
		if(HAL_FDCAN_GetRxMessage(&hfdcan2, FDCAN_RX_FIFO0, &RxHeader,RxCAN_2_DATA) == HAL_OK){
 80010e0:	4b08      	ldr	r3, [pc, #32]	@ (8001104 <HAL_FDCAN_RxFifo0Callback+0x58>)
 80010e2:	4a06      	ldr	r2, [pc, #24]	@ (80010fc <HAL_FDCAN_RxFifo0Callback+0x50>)
 80010e4:	2140      	movs	r1, #64	@ 0x40
 80010e6:	4808      	ldr	r0, [pc, #32]	@ (8001108 <HAL_FDCAN_RxFifo0Callback+0x5c>)
 80010e8:	f009 fb9c 	bl	800a824 <HAL_FDCAN_GetRxMessage>
				//processCAN2(&RxHeader,&RxCAN_2_DATA);
		}
    }

}
 80010ec:	bf00      	nop
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	20000f5c 	.word	0x20000f5c
 80010f8:	20000294 	.word	0x20000294
 80010fc:	20013a6c 	.word	0x20013a6c
 8001100:	20013adc 	.word	0x20013adc
 8001104:	2000029c 	.word	0x2000029c
 8001108:	20013b40 	.word	0x20013b40

0800110c <wait_for_response>:
int responseIndex=0;
bool enable_Idle = true;
bool FLAG_EC200RESONSE=false;
char tmpbuff[100]={};

bool wait_for_response(char *resBuff,int timeout){
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af02      	add	r7, sp, #8
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6039      	str	r1, [r7, #0]
	bool status=false;
 8001116:	2300      	movs	r3, #0
 8001118:	73fb      	strb	r3, [r7, #15]
	FLAG_EC200RESONSE=false;
 800111a:	4b21      	ldr	r3, [pc, #132]	@ (80011a0 <wait_for_response+0x94>)
 800111c:	2200      	movs	r2, #0
 800111e:	701a      	strb	r2, [r3, #0]
	int count=0;
 8001120:	2300      	movs	r3, #0
 8001122:	60bb      	str	r3, [r7, #8]
	while(!FLAG_EC200RESONSE&&(HAL_GetTick()% timeout)!=0)
 8001124:	e002      	b.n	800112c <wait_for_response+0x20>
	     {
		   count++;
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	3301      	adds	r3, #1
 800112a:	60bb      	str	r3, [r7, #8]
	while(!FLAG_EC200RESONSE&&(HAL_GetTick()% timeout)!=0)
 800112c:	4b1c      	ldr	r3, [pc, #112]	@ (80011a0 <wait_for_response+0x94>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	f083 0301 	eor.w	r3, r3, #1
 8001134:	b2db      	uxtb	r3, r3
 8001136:	2b00      	cmp	r3, #0
 8001138:	d00a      	beq.n	8001150 <wait_for_response+0x44>
 800113a:	f004 fc39 	bl	80059b0 <HAL_GetTick>
 800113e:	4602      	mov	r2, r0
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	fbb2 f1f3 	udiv	r1, r2, r3
 8001146:	fb01 f303 	mul.w	r3, r1, r3
 800114a:	1ad3      	subs	r3, r2, r3
 800114c:	2b00      	cmp	r3, #0
 800114e:	d1ea      	bne.n	8001126 <wait_for_response+0x1a>
//	    	 printc(MinDelay,"Waiting for response %d\n",HAL_GetTick()% EC200MAXRESONSETIME);
	     }
	     if(FLAG_EC200RESONSE){
 8001150:	4b13      	ldr	r3, [pc, #76]	@ (80011a0 <wait_for_response+0x94>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d010      	beq.n	800117a <wait_for_response+0x6e>
	    	 memcpy(resBuff,EC200_ResponseBuff,strlen(EC200_ResponseBuff));
 8001158:	4812      	ldr	r0, [pc, #72]	@ (80011a4 <wait_for_response+0x98>)
 800115a:	f7ff f8a3 	bl	80002a4 <strlen>
 800115e:	4603      	mov	r3, r0
 8001160:	461a      	mov	r2, r3
 8001162:	4910      	ldr	r1, [pc, #64]	@ (80011a4 <wait_for_response+0x98>)
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f01d ffc6 	bl	801f0f6 <memcpy>
	    	 memset(EC200_ResponseBuff,0,RESBUFF_SIZE);
 800116a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800116e:	2100      	movs	r1, #0
 8001170:	480c      	ldr	r0, [pc, #48]	@ (80011a4 <wait_for_response+0x98>)
 8001172:	f01d fe4d 	bl	801ee10 <memset>
	    	 status=true;
 8001176:	2301      	movs	r3, #1
 8001178:	73fb      	strb	r3, [r7, #15]
	     }
	 printc(MinDelay,"wait Response count %d  flag %d status %d\n",count,FLAG_EC200RESONSE,status);
 800117a:	4b09      	ldr	r3, [pc, #36]	@ (80011a0 <wait_for_response+0x94>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	461a      	mov	r2, r3
 8001180:	7bfb      	ldrb	r3, [r7, #15]
 8001182:	9300      	str	r3, [sp, #0]
 8001184:	4613      	mov	r3, r2
 8001186:	68ba      	ldr	r2, [r7, #8]
 8001188:	4907      	ldr	r1, [pc, #28]	@ (80011a8 <wait_for_response+0x9c>)
 800118a:	200a      	movs	r0, #10
 800118c:	f000 fc44 	bl	8001a18 <printc>
	 FLAG_EC200RESONSE=false;
 8001190:	4b03      	ldr	r3, [pc, #12]	@ (80011a0 <wait_for_response+0x94>)
 8001192:	2200      	movs	r2, #0
 8001194:	701a      	strb	r2, [r3, #0]
	 return status;
 8001196:	7bfb      	ldrb	r3, [r7, #15]
}
 8001198:	4618      	mov	r0, r3
 800119a:	3710      	adds	r7, #16
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	20000cdc 	.word	0x20000cdc
 80011a4:	200004dc 	.word	0x200004dc
 80011a8:	08022258 	.word	0x08022258

080011ac <EC200_Transmit>:
bool EC200_Transmit(const char *command,char *resBuff,int timeout){
 80011ac:	b590      	push	{r4, r7, lr}
 80011ae:	b085      	sub	sp, #20
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	60b9      	str	r1, [r7, #8]
 80011b6:	607a      	str	r2, [r7, #4]
	clearBuffer(resBuff, strlen(resBuff));
 80011b8:	68b8      	ldr	r0, [r7, #8]
 80011ba:	f7ff f873 	bl	80002a4 <strlen>
 80011be:	4603      	mov	r3, r0
 80011c0:	4619      	mov	r1, r3
 80011c2:	68b8      	ldr	r0, [r7, #8]
 80011c4:	f000 fc80 	bl	8001ac8 <clearBuffer>
     HAL_UART_Transmit(ec200MqttUart, (uint8_t*)command,strlen(command), 2000);
 80011c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001200 <EC200_Transmit+0x54>)
 80011ca:	681c      	ldr	r4, [r3, #0]
 80011cc:	68f8      	ldr	r0, [r7, #12]
 80011ce:	f7ff f869 	bl	80002a4 <strlen>
 80011d2:	4603      	mov	r3, r0
 80011d4:	b29a      	uxth	r2, r3
 80011d6:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80011da:	68f9      	ldr	r1, [r7, #12]
 80011dc:	4620      	mov	r0, r4
 80011de:	f011 fd49 	bl	8012c74 <HAL_UART_Transmit>
     if(resBuff==NULL)
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d101      	bne.n	80011ec <EC200_Transmit+0x40>
    	 return false;
 80011e8:	2300      	movs	r3, #0
 80011ea:	e004      	b.n	80011f6 <EC200_Transmit+0x4a>
     return wait_for_response(resBuff,timeout);
 80011ec:	6879      	ldr	r1, [r7, #4]
 80011ee:	68b8      	ldr	r0, [r7, #8]
 80011f0:	f7ff ff8c 	bl	800110c <wait_for_response>
 80011f4:	4603      	mov	r3, r0
 }
 80011f6:	4618      	mov	r0, r3
 80011f8:	3714      	adds	r7, #20
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd90      	pop	{r4, r7, pc}
 80011fe:	bf00      	nop
 8001200:	200004d8 	.word	0x200004d8

08001204 <EC200_Init>:
bool EC200_Init(void) {
 8001204:	b580      	push	{r7, lr}
 8001206:	b0e6      	sub	sp, #408	@ 0x198
 8001208:	af00      	add	r7, sp, #0
	int EC200_counter=0;
 800120a:	2300      	movs	r3, #0
 800120c:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
    //Transmit AT commands for EC20 initialization
	uint32_t resbuff[100]={};
 8001210:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8001214:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001218:	4618      	mov	r0, r3
 800121a:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800121e:	461a      	mov	r2, r3
 8001220:	2100      	movs	r1, #0
 8001222:	f01d fdf5 	bl	801ee10 <memset>
    if(EC200_Transmit("AT\r\n",resbuff,EC200MINRESONSETIME))
 8001226:	1d3b      	adds	r3, r7, #4
 8001228:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800122c:	4619      	mov	r1, r3
 800122e:	48be      	ldr	r0, [pc, #760]	@ (8001528 <EC200_Init+0x324>)
 8001230:	f7ff ffbc 	bl	80011ac <EC200_Transmit>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d005      	beq.n	8001246 <EC200_Init+0x42>
    {
    	printc(MinDelay,"Res For At is %s\n",resbuff);
 800123a:	1d3b      	adds	r3, r7, #4
 800123c:	461a      	mov	r2, r3
 800123e:	49bb      	ldr	r1, [pc, #748]	@ (800152c <EC200_Init+0x328>)
 8001240:	200a      	movs	r0, #10
 8001242:	f000 fbe9 	bl	8001a18 <printc>
    }
    memset(resbuff,0,100);
 8001246:	1d3b      	adds	r3, r7, #4
 8001248:	2264      	movs	r2, #100	@ 0x64
 800124a:	2100      	movs	r1, #0
 800124c:	4618      	mov	r0, r3
 800124e:	f01d fddf 	bl	801ee10 <memset>
    if(EC200_Transmit("AT+QURCCFG=\"urcport\",\"uart1\"\r\n",resbuff,EC200MINRESONSETIME))
 8001252:	1d3b      	adds	r3, r7, #4
 8001254:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001258:	4619      	mov	r1, r3
 800125a:	48b5      	ldr	r0, [pc, #724]	@ (8001530 <EC200_Init+0x32c>)
 800125c:	f7ff ffa6 	bl	80011ac <EC200_Transmit>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d005      	beq.n	8001272 <EC200_Init+0x6e>
    {
    	printc(MinDelay,"Res For AT+QURCCFG=\"urcport\",\"uart1\"\r\n is %s\n",resbuff);
 8001266:	1d3b      	adds	r3, r7, #4
 8001268:	461a      	mov	r2, r3
 800126a:	49b2      	ldr	r1, [pc, #712]	@ (8001534 <EC200_Init+0x330>)
 800126c:	200a      	movs	r0, #10
 800126e:	f000 fbd3 	bl	8001a18 <printc>
    }
    memset(resbuff,0,100);
 8001272:	1d3b      	adds	r3, r7, #4
 8001274:	2264      	movs	r2, #100	@ 0x64
 8001276:	2100      	movs	r1, #0
 8001278:	4618      	mov	r0, r3
 800127a:	f01d fdc9 	bl	801ee10 <memset>
    if(EC200_Transmit("AT+IPR=115200\r\n",resbuff,EC200MINRESONSETIME))
 800127e:	1d3b      	adds	r3, r7, #4
 8001280:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001284:	4619      	mov	r1, r3
 8001286:	48ac      	ldr	r0, [pc, #688]	@ (8001538 <EC200_Init+0x334>)
 8001288:	f7ff ff90 	bl	80011ac <EC200_Transmit>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d005      	beq.n	800129e <EC200_Init+0x9a>
	{
		printc(MinDelay,"Res For AT+IPR=115200 is %s\n",resbuff);
 8001292:	1d3b      	adds	r3, r7, #4
 8001294:	461a      	mov	r2, r3
 8001296:	49a9      	ldr	r1, [pc, #676]	@ (800153c <EC200_Init+0x338>)
 8001298:	200a      	movs	r0, #10
 800129a:	f000 fbbd 	bl	8001a18 <printc>
	}
    memset(resbuff,0,100);
 800129e:	1d3b      	adds	r3, r7, #4
 80012a0:	2264      	movs	r2, #100	@ 0x64
 80012a2:	2100      	movs	r1, #0
 80012a4:	4618      	mov	r0, r3
 80012a6:	f01d fdb3 	bl	801ee10 <memset>
    if(EC200_Transmit("ATV1\r\n",resbuff,EC200MINRESONSETIME))
 80012aa:	1d3b      	adds	r3, r7, #4
 80012ac:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80012b0:	4619      	mov	r1, r3
 80012b2:	48a3      	ldr	r0, [pc, #652]	@ (8001540 <EC200_Init+0x33c>)
 80012b4:	f7ff ff7a 	bl	80011ac <EC200_Transmit>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d005      	beq.n	80012ca <EC200_Init+0xc6>
   {
    		printc(MinDelay,"Res For ATV1 is %s\n",resbuff);
 80012be:	1d3b      	adds	r3, r7, #4
 80012c0:	461a      	mov	r2, r3
 80012c2:	49a0      	ldr	r1, [pc, #640]	@ (8001544 <EC200_Init+0x340>)
 80012c4:	200a      	movs	r0, #10
 80012c6:	f000 fba7 	bl	8001a18 <printc>
    }
    memset(resbuff,0,100);
 80012ca:	1d3b      	adds	r3, r7, #4
 80012cc:	2264      	movs	r2, #100	@ 0x64
 80012ce:	2100      	movs	r1, #0
 80012d0:	4618      	mov	r0, r3
 80012d2:	f01d fd9d 	bl	801ee10 <memset>
    if(EC200_Transmit("ATE0\r\n",resbuff,EC200MINRESONSETIME))
 80012d6:	1d3b      	adds	r3, r7, #4
 80012d8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80012dc:	4619      	mov	r1, r3
 80012de:	489a      	ldr	r0, [pc, #616]	@ (8001548 <EC200_Init+0x344>)
 80012e0:	f7ff ff64 	bl	80011ac <EC200_Transmit>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d005      	beq.n	80012f6 <EC200_Init+0xf2>
   {
    		printc(MinDelay,"Res For ATE1 is %s\n",resbuff);
 80012ea:	1d3b      	adds	r3, r7, #4
 80012ec:	461a      	mov	r2, r3
 80012ee:	4997      	ldr	r1, [pc, #604]	@ (800154c <EC200_Init+0x348>)
 80012f0:	200a      	movs	r0, #10
 80012f2:	f000 fb91 	bl	8001a18 <printc>
    }
    memset(resbuff,0,100);
 80012f6:	1d3b      	adds	r3, r7, #4
 80012f8:	2264      	movs	r2, #100	@ 0x64
 80012fa:	2100      	movs	r1, #0
 80012fc:	4618      	mov	r0, r3
 80012fe:	f01d fd87 	bl	801ee10 <memset>
    if(EC200_Transmit("AT+CMEE=2\r\n",resbuff,EC200MINRESONSETIME))
 8001302:	1d3b      	adds	r3, r7, #4
 8001304:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001308:	4619      	mov	r1, r3
 800130a:	4891      	ldr	r0, [pc, #580]	@ (8001550 <EC200_Init+0x34c>)
 800130c:	f7ff ff4e 	bl	80011ac <EC200_Transmit>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d005      	beq.n	8001322 <EC200_Init+0x11e>
     {
      		printc(MinDelay,"Res For AT+CMEE=2 is %s\n",resbuff);
 8001316:	1d3b      	adds	r3, r7, #4
 8001318:	461a      	mov	r2, r3
 800131a:	498e      	ldr	r1, [pc, #568]	@ (8001554 <EC200_Init+0x350>)
 800131c:	200a      	movs	r0, #10
 800131e:	f000 fb7b 	bl	8001a18 <printc>
      }
    memset(resbuff,0,100);
 8001322:	1d3b      	adds	r3, r7, #4
 8001324:	2264      	movs	r2, #100	@ 0x64
 8001326:	2100      	movs	r1, #0
 8001328:	4618      	mov	r0, r3
 800132a:	f01d fd71 	bl	801ee10 <memset>
    if(EC200_Transmit("ATI\r\n",resbuff,EC200MINRESONSETIME))
 800132e:	1d3b      	adds	r3, r7, #4
 8001330:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001334:	4619      	mov	r1, r3
 8001336:	4888      	ldr	r0, [pc, #544]	@ (8001558 <EC200_Init+0x354>)
 8001338:	f7ff ff38 	bl	80011ac <EC200_Transmit>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d005      	beq.n	800134e <EC200_Init+0x14a>
      {
          		printc(MinDelay,"Res For ATI is %s\n",resbuff);
 8001342:	1d3b      	adds	r3, r7, #4
 8001344:	461a      	mov	r2, r3
 8001346:	4985      	ldr	r1, [pc, #532]	@ (800155c <EC200_Init+0x358>)
 8001348:	200a      	movs	r0, #10
 800134a:	f000 fb65 	bl	8001a18 <printc>
        }
    memset(resbuff,0,100);
 800134e:	1d3b      	adds	r3, r7, #4
 8001350:	2264      	movs	r2, #100	@ 0x64
 8001352:	2100      	movs	r1, #0
 8001354:	4618      	mov	r0, r3
 8001356:	f01d fd5b 	bl	801ee10 <memset>
    if (EC200_Transmit("AT+GSN\r\n", resbuff,EC200MINRESONSETIME)) {
 800135a:	1d3b      	adds	r3, r7, #4
 800135c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001360:	4619      	mov	r1, r3
 8001362:	487f      	ldr	r0, [pc, #508]	@ (8001560 <EC200_Init+0x35c>)
 8001364:	f7ff ff22 	bl	80011ac <EC200_Transmit>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d005      	beq.n	800137a <EC200_Init+0x176>
        printc(MinDelay, "Res For GSN is %s\n", resbuff);
 800136e:	1d3b      	adds	r3, r7, #4
 8001370:	461a      	mov	r2, r3
 8001372:	497c      	ldr	r1, [pc, #496]	@ (8001564 <EC200_Init+0x360>)
 8001374:	200a      	movs	r0, #10
 8001376:	f000 fb4f 	bl	8001a18 <printc>
    }

    memset(resbuff,0,sizeof(resbuff));
 800137a:	1d3b      	adds	r3, r7, #4
 800137c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001380:	2100      	movs	r1, #0
 8001382:	4618      	mov	r0, r3
 8001384:	f01d fd44 	bl	801ee10 <memset>
    CPIN:
	EC200_counter=0;
 8001388:	2300      	movs	r3, #0
 800138a:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
    if (EC200_Transmit("AT+CPIN?\r\n", resbuff,EC200MINRESONSETIME)) {
 800138e:	1d3b      	adds	r3, r7, #4
 8001390:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001394:	4619      	mov	r1, r3
 8001396:	4874      	ldr	r0, [pc, #464]	@ (8001568 <EC200_Init+0x364>)
 8001398:	f7ff ff08 	bl	80011ac <EC200_Transmit>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d01d      	beq.n	80013de <EC200_Init+0x1da>
        printc(MinDelay, "Res For CPIN is %s\n", resbuff);
 80013a2:	1d3b      	adds	r3, r7, #4
 80013a4:	461a      	mov	r2, r3
 80013a6:	4971      	ldr	r1, [pc, #452]	@ (800156c <EC200_Init+0x368>)
 80013a8:	200a      	movs	r0, #10
 80013aa:	f000 fb35 	bl	8001a18 <printc>
        if(strstr(resbuff,"+CPIN: READY")==NULL){
 80013ae:	1d3b      	adds	r3, r7, #4
 80013b0:	496f      	ldr	r1, [pc, #444]	@ (8001570 <EC200_Init+0x36c>)
 80013b2:	4618      	mov	r0, r3
 80013b4:	f01d fdec 	bl	801ef90 <strstr>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d10f      	bne.n	80013de <EC200_Init+0x1da>
        	if(EC200_counter<3){
 80013be:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	dc05      	bgt.n	80013d2 <EC200_Init+0x1ce>
        		EC200_counter++;
 80013c6:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80013ca:	3301      	adds	r3, #1
 80013cc:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
        		goto CPIN;
 80013d0:	e7da      	b.n	8001388 <EC200_Init+0x184>
        	}
        	else{
        		printc(MinDelay,"Sim Not Detected");
 80013d2:	4968      	ldr	r1, [pc, #416]	@ (8001574 <EC200_Init+0x370>)
 80013d4:	200a      	movs	r0, #10
 80013d6:	f000 fb1f 	bl	8001a18 <printc>
        		return false;
 80013da:	2300      	movs	r3, #0
 80013dc:	e09f      	b.n	800151e <EC200_Init+0x31a>
        	}
        }
    }
    memset(resbuff,0,sizeof(resbuff));
 80013de:	1d3b      	adds	r3, r7, #4
 80013e0:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80013e4:	2100      	movs	r1, #0
 80013e6:	4618      	mov	r0, r3
 80013e8:	f01d fd12 	bl	801ee10 <memset>
    network:
	EC200_counter=0;
 80013ec:	2300      	movs	r3, #0
 80013ee:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
    if (EC200_Transmit("AT+CSQ\r\n", resbuff,2000)) {
 80013f2:	1d3b      	adds	r3, r7, #4
 80013f4:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80013f8:	4619      	mov	r1, r3
 80013fa:	485f      	ldr	r0, [pc, #380]	@ (8001578 <EC200_Init+0x374>)
 80013fc:	f7ff fed6 	bl	80011ac <EC200_Transmit>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d01d      	beq.n	8001442 <EC200_Init+0x23e>
        printc(MinDelay, "Res For CSQ is %s\n", resbuff);
 8001406:	1d3b      	adds	r3, r7, #4
 8001408:	461a      	mov	r2, r3
 800140a:	495c      	ldr	r1, [pc, #368]	@ (800157c <EC200_Init+0x378>)
 800140c:	200a      	movs	r0, #10
 800140e:	f000 fb03 	bl	8001a18 <printc>
        if(strstr(resbuff,"+CSQ: 99,99")!=NULL){
 8001412:	1d3b      	adds	r3, r7, #4
 8001414:	495a      	ldr	r1, [pc, #360]	@ (8001580 <EC200_Init+0x37c>)
 8001416:	4618      	mov	r0, r3
 8001418:	f01d fdba 	bl	801ef90 <strstr>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d00f      	beq.n	8001442 <EC200_Init+0x23e>
        	if(EC200_counter<3){
 8001422:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001426:	2b02      	cmp	r3, #2
 8001428:	dc05      	bgt.n	8001436 <EC200_Init+0x232>
        		EC200_counter++;
 800142a:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800142e:	3301      	adds	r3, #1
 8001430:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
        		goto network;
 8001434:	e7da      	b.n	80013ec <EC200_Init+0x1e8>

        	}
			else{
				printc(MinDelay,"Signal Not found");
 8001436:	4953      	ldr	r1, [pc, #332]	@ (8001584 <EC200_Init+0x380>)
 8001438:	200a      	movs	r0, #10
 800143a:	f000 faed 	bl	8001a18 <printc>
				return false;
 800143e:	2300      	movs	r3, #0
 8001440:	e06d      	b.n	800151e <EC200_Init+0x31a>
			}
        }


    }
    memset(resbuff,0,100);
 8001442:	1d3b      	adds	r3, r7, #4
 8001444:	2264      	movs	r2, #100	@ 0x64
 8001446:	2100      	movs	r1, #0
 8001448:	4618      	mov	r0, r3
 800144a:	f01d fce1 	bl	801ee10 <memset>

    if (EC200_Transmit("AT+CREG?\r\n", resbuff,EC200MINRESONSETIME)) {
 800144e:	1d3b      	adds	r3, r7, #4
 8001450:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001454:	4619      	mov	r1, r3
 8001456:	484c      	ldr	r0, [pc, #304]	@ (8001588 <EC200_Init+0x384>)
 8001458:	f7ff fea8 	bl	80011ac <EC200_Transmit>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d005      	beq.n	800146e <EC200_Init+0x26a>
        printc(MinDelay, "Res For CREG is %s\n", resbuff);
 8001462:	1d3b      	adds	r3, r7, #4
 8001464:	461a      	mov	r2, r3
 8001466:	4949      	ldr	r1, [pc, #292]	@ (800158c <EC200_Init+0x388>)
 8001468:	200a      	movs	r0, #10
 800146a:	f000 fad5 	bl	8001a18 <printc>
    }
    memset(resbuff,0,100);
 800146e:	1d3b      	adds	r3, r7, #4
 8001470:	2264      	movs	r2, #100	@ 0x64
 8001472:	2100      	movs	r1, #0
 8001474:	4618      	mov	r0, r3
 8001476:	f01d fccb 	bl	801ee10 <memset>

    if (EC200_Transmit("AT+CGREG?\r\n", resbuff,EC200MINRESONSETIME)) {
 800147a:	1d3b      	adds	r3, r7, #4
 800147c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001480:	4619      	mov	r1, r3
 8001482:	4843      	ldr	r0, [pc, #268]	@ (8001590 <EC200_Init+0x38c>)
 8001484:	f7ff fe92 	bl	80011ac <EC200_Transmit>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d005      	beq.n	800149a <EC200_Init+0x296>
        printc(MinDelay, "Res For CGREG is %s\n", resbuff);
 800148e:	1d3b      	adds	r3, r7, #4
 8001490:	461a      	mov	r2, r3
 8001492:	4940      	ldr	r1, [pc, #256]	@ (8001594 <EC200_Init+0x390>)
 8001494:	200a      	movs	r0, #10
 8001496:	f000 fabf 	bl	8001a18 <printc>
    }
    memset(resbuff,0,100);
 800149a:	1d3b      	adds	r3, r7, #4
 800149c:	2264      	movs	r2, #100	@ 0x64
 800149e:	2100      	movs	r1, #0
 80014a0:	4618      	mov	r0, r3
 80014a2:	f01d fcb5 	bl	801ee10 <memset>
    if (EC200_Transmit("AT+COPS?\r\n", resbuff,EC200MINRESONSETIME)) {
 80014a6:	1d3b      	adds	r3, r7, #4
 80014a8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80014ac:	4619      	mov	r1, r3
 80014ae:	483a      	ldr	r0, [pc, #232]	@ (8001598 <EC200_Init+0x394>)
 80014b0:	f7ff fe7c 	bl	80011ac <EC200_Transmit>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d005      	beq.n	80014c6 <EC200_Init+0x2c2>
        printc(MinDelay, "Res For COPS is %s\n", resbuff);
 80014ba:	1d3b      	adds	r3, r7, #4
 80014bc:	461a      	mov	r2, r3
 80014be:	4937      	ldr	r1, [pc, #220]	@ (800159c <EC200_Init+0x398>)
 80014c0:	200a      	movs	r0, #10
 80014c2:	f000 faa9 	bl	8001a18 <printc>
    }
    memset(resbuff,0,100);
 80014c6:	1d3b      	adds	r3, r7, #4
 80014c8:	2264      	movs	r2, #100	@ 0x64
 80014ca:	2100      	movs	r1, #0
 80014cc:	4618      	mov	r0, r3
 80014ce:	f01d fc9f 	bl	801ee10 <memset>
    if (EC200_Transmit("AT+QCCID\r\n", resbuff,EC200MINRESONSETIME)) {
 80014d2:	1d3b      	adds	r3, r7, #4
 80014d4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80014d8:	4619      	mov	r1, r3
 80014da:	4831      	ldr	r0, [pc, #196]	@ (80015a0 <EC200_Init+0x39c>)
 80014dc:	f7ff fe66 	bl	80011ac <EC200_Transmit>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d005      	beq.n	80014f2 <EC200_Init+0x2ee>
        printc(MinDelay, "Res For QCCID is %s\n", resbuff);
 80014e6:	1d3b      	adds	r3, r7, #4
 80014e8:	461a      	mov	r2, r3
 80014ea:	492e      	ldr	r1, [pc, #184]	@ (80015a4 <EC200_Init+0x3a0>)
 80014ec:	200a      	movs	r0, #10
 80014ee:	f000 fa93 	bl	8001a18 <printc>
    }
    memset(resbuff,0,100);
 80014f2:	1d3b      	adds	r3, r7, #4
 80014f4:	2264      	movs	r2, #100	@ 0x64
 80014f6:	2100      	movs	r1, #0
 80014f8:	4618      	mov	r0, r3
 80014fa:	f01d fc89 	bl	801ee10 <memset>
    if (EC200_Transmit("AT+CIMI\r\n", resbuff,EC200MINRESONSETIME)) {
 80014fe:	1d3b      	adds	r3, r7, #4
 8001500:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001504:	4619      	mov	r1, r3
 8001506:	4828      	ldr	r0, [pc, #160]	@ (80015a8 <EC200_Init+0x3a4>)
 8001508:	f7ff fe50 	bl	80011ac <EC200_Transmit>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d005      	beq.n	800151e <EC200_Init+0x31a>
        printc(MinDelay, "Res For CIMI is %s\n", resbuff);
 8001512:	1d3b      	adds	r3, r7, #4
 8001514:	461a      	mov	r2, r3
 8001516:	4925      	ldr	r1, [pc, #148]	@ (80015ac <EC200_Init+0x3a8>)
 8001518:	200a      	movs	r0, #10
 800151a:	f000 fa7d 	bl	8001a18 <printc>
    }

}
 800151e:	4618      	mov	r0, r3
 8001520:	f507 77cc 	add.w	r7, r7, #408	@ 0x198
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	08022284 	.word	0x08022284
 800152c:	0802228c 	.word	0x0802228c
 8001530:	080222a0 	.word	0x080222a0
 8001534:	080222c0 	.word	0x080222c0
 8001538:	080222f0 	.word	0x080222f0
 800153c:	08022300 	.word	0x08022300
 8001540:	08022320 	.word	0x08022320
 8001544:	08022328 	.word	0x08022328
 8001548:	0802233c 	.word	0x0802233c
 800154c:	08022344 	.word	0x08022344
 8001550:	08022358 	.word	0x08022358
 8001554:	08022364 	.word	0x08022364
 8001558:	08022380 	.word	0x08022380
 800155c:	08022388 	.word	0x08022388
 8001560:	0802239c 	.word	0x0802239c
 8001564:	080223a8 	.word	0x080223a8
 8001568:	080223bc 	.word	0x080223bc
 800156c:	080223c8 	.word	0x080223c8
 8001570:	080223dc 	.word	0x080223dc
 8001574:	080223ec 	.word	0x080223ec
 8001578:	08022400 	.word	0x08022400
 800157c:	0802240c 	.word	0x0802240c
 8001580:	08022420 	.word	0x08022420
 8001584:	0802242c 	.word	0x0802242c
 8001588:	08022440 	.word	0x08022440
 800158c:	0802244c 	.word	0x0802244c
 8001590:	08022460 	.word	0x08022460
 8001594:	0802246c 	.word	0x0802246c
 8001598:	08022484 	.word	0x08022484
 800159c:	08022490 	.word	0x08022490
 80015a0:	080224a4 	.word	0x080224a4
 80015a4:	080224b0 	.word	0x080224b0
 80015a8:	080224c8 	.word	0x080224c8
 80015ac:	080224d4 	.word	0x080224d4

080015b0 <getIMEI>:
//will fill the opbuffer if value available else return false
bool getIMEI(char *opbuffer){
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b088      	sub	sp, #32
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
	char tmpIMEI[15]={0};
 80015b8:	2300      	movs	r3, #0
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	f107 0310 	add.w	r3, r7, #16
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	f8c3 2007 	str.w	r2, [r3, #7]
	if(EC200_Transmit("AT+GSN\r\n",opbuffer,EC200MINRESONSETIME))
 80015ca:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80015ce:	6879      	ldr	r1, [r7, #4]
 80015d0:	4817      	ldr	r0, [pc, #92]	@ (8001630 <getIMEI+0x80>)
 80015d2:	f7ff fdeb 	bl	80011ac <EC200_Transmit>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d023      	beq.n	8001624 <getIMEI+0x74>
	 {
//			i have to check why string split function is not working
			int length=(int)(strstr(&opbuffer[2],"\r\n")-(char*)&opbuffer[2]);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	3302      	adds	r3, #2
 80015e0:	4914      	ldr	r1, [pc, #80]	@ (8001634 <getIMEI+0x84>)
 80015e2:	4618      	mov	r0, r3
 80015e4:	f01d fcd4 	bl	801ef90 <strstr>
 80015e8:	4602      	mov	r2, r0
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	3302      	adds	r3, #2
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	61fb      	str	r3, [r7, #28]
			memcpy(tmpIMEI,&opbuffer[2],length);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	1c99      	adds	r1, r3, #2
 80015f6:	69fa      	ldr	r2, [r7, #28]
 80015f8:	f107 030c 	add.w	r3, r7, #12
 80015fc:	4618      	mov	r0, r3
 80015fe:	f01d fd7a 	bl	801f0f6 <memcpy>
			clearBuffer(tmpbuff,sizeof(tmpbuff));
 8001602:	2164      	movs	r1, #100	@ 0x64
 8001604:	480c      	ldr	r0, [pc, #48]	@ (8001638 <getIMEI+0x88>)
 8001606:	f000 fa5f 	bl	8001ac8 <clearBuffer>
			strcpy(opbuffer,tmpIMEI);
 800160a:	f107 030c 	add.w	r3, r7, #12
 800160e:	4619      	mov	r1, r3
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	f01d fd5a 	bl	801f0ca <strcpy>
			printc(MinDelay,"Res For AT+GSN %s\n",opbuffer);
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	4908      	ldr	r1, [pc, #32]	@ (800163c <getIMEI+0x8c>)
 800161a:	200a      	movs	r0, #10
 800161c:	f000 f9fc 	bl	8001a18 <printc>
	    	return true;
 8001620:	2301      	movs	r3, #1
 8001622:	e000      	b.n	8001626 <getIMEI+0x76>
	 }
	return false;
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3720      	adds	r7, #32
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	0802239c 	.word	0x0802239c
 8001634:	080224e8 	.word	0x080224e8
 8001638:	20000ce0 	.word	0x20000ce0
 800163c:	080224ec 	.word	0x080224ec

08001640 <getSignal>:
int getSignal(void){
 8001640:	b580      	push	{r7, lr}
 8001642:	b09a      	sub	sp, #104	@ 0x68
 8001644:	af00      	add	r7, sp, #0
	uint8_t resbuff[100]={};
 8001646:	2300      	movs	r3, #0
 8001648:	607b      	str	r3, [r7, #4]
 800164a:	f107 0308 	add.w	r3, r7, #8
 800164e:	2260      	movs	r2, #96	@ 0x60
 8001650:	2100      	movs	r1, #0
 8001652:	4618      	mov	r0, r3
 8001654:	f01d fbdc 	bl	801ee10 <memset>
	uint8_t signal=-1;
 8001658:	23ff      	movs	r3, #255	@ 0xff
 800165a:	70fb      	strb	r3, [r7, #3]
	memset(resbuff,0,sizeof(resbuff));
 800165c:	1d3b      	adds	r3, r7, #4
 800165e:	2264      	movs	r2, #100	@ 0x64
 8001660:	2100      	movs	r1, #0
 8001662:	4618      	mov	r0, r3
 8001664:	f01d fbd4 	bl	801ee10 <memset>
	if(EC200_Transmit("AT+CSQ\r\n",resbuff,EC200MINRESONSETIME))
 8001668:	1d3b      	adds	r3, r7, #4
 800166a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800166e:	4619      	mov	r1, r3
 8001670:	480c      	ldr	r0, [pc, #48]	@ (80016a4 <getSignal+0x64>)
 8001672:	f7ff fd9b 	bl	80011ac <EC200_Transmit>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d00d      	beq.n	8001698 <getSignal+0x58>
	{
		sscanf(resbuff,"\r\n+CSQ: %d",&signal);
 800167c:	1cfa      	adds	r2, r7, #3
 800167e:	1d3b      	adds	r3, r7, #4
 8001680:	4909      	ldr	r1, [pc, #36]	@ (80016a8 <getSignal+0x68>)
 8001682:	4618      	mov	r0, r3
 8001684:	f01d fa88 	bl	801eb98 <siscanf>
		printc(MinDelay,"RSSI For AT+CSQ %s\n",resbuff);
 8001688:	1d3b      	adds	r3, r7, #4
 800168a:	461a      	mov	r2, r3
 800168c:	4907      	ldr	r1, [pc, #28]	@ (80016ac <getSignal+0x6c>)
 800168e:	200a      	movs	r0, #10
 8001690:	f000 f9c2 	bl	8001a18 <printc>
		return signal;
 8001694:	78fb      	ldrb	r3, [r7, #3]
 8001696:	e001      	b.n	800169c <getSignal+0x5c>
	}
		return -1;
 8001698:	f04f 33ff 	mov.w	r3, #4294967295

}
 800169c:	4618      	mov	r0, r3
 800169e:	3768      	adds	r7, #104	@ 0x68
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	08022400 	.word	0x08022400
 80016a8:	08022500 	.word	0x08022500
 80016ac:	0802250c 	.word	0x0802250c

080016b0 <getOperatorName>:

bool getOperatorName(char *opbuffer){
 80016b0:	b580      	push	{r7, lr}
 80016b2:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80016bc:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80016c0:	6018      	str	r0, [r3, #0]
	uint8_t split[5][100]={};
 80016c2:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80016c6:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80016ca:	4618      	mov	r0, r3
 80016cc:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80016d0:	461a      	mov	r2, r3
 80016d2:	2100      	movs	r1, #0
 80016d4:	f01d fb9c 	bl	801ee10 <memset>
	uint8_t resbuff[100]={};
 80016d8:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80016dc:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	3304      	adds	r3, #4
 80016e6:	2260      	movs	r2, #96	@ 0x60
 80016e8:	2100      	movs	r1, #0
 80016ea:	4618      	mov	r0, r3
 80016ec:	f01d fb90 	bl	801ee10 <memset>
	memset(resbuff,0,sizeof(resbuff));
 80016f0:	f107 0308 	add.w	r3, r7, #8
 80016f4:	2264      	movs	r2, #100	@ 0x64
 80016f6:	2100      	movs	r1, #0
 80016f8:	4618      	mov	r0, r3
 80016fa:	f01d fb89 	bl	801ee10 <memset>
	if(EC200_Transmit("AT+COPS?\r\n",resbuff,2000))
 80016fe:	f107 0308 	add.w	r3, r7, #8
 8001702:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001706:	4619      	mov	r1, r3
 8001708:	481a      	ldr	r0, [pc, #104]	@ (8001774 <getOperatorName+0xc4>)
 800170a:	f7ff fd4f 	bl	80011ac <EC200_Transmit>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d029      	beq.n	8001768 <getOperatorName+0xb8>
	  {
			clearBuffer(split, sizeof(split));
 8001714:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001718:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800171c:	4618      	mov	r0, r3
 800171e:	f000 f9d3 	bl	8001ac8 <clearBuffer>
			splitString(resbuff,",",split);
 8001722:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8001726:	f107 0308 	add.w	r3, r7, #8
 800172a:	4913      	ldr	r1, [pc, #76]	@ (8001778 <getOperatorName+0xc8>)
 800172c:	4618      	mov	r0, r3
 800172e:	f000 f9d9 	bl	8001ae4 <splitString>
			memcpy(opbuffer,split[2],strlen(split[2]));
 8001732:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001736:	33c8      	adds	r3, #200	@ 0xc8
 8001738:	4618      	mov	r0, r3
 800173a:	f7fe fdb3 	bl	80002a4 <strlen>
 800173e:	4602      	mov	r2, r0
 8001740:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001744:	f103 01c8 	add.w	r1, r3, #200	@ 0xc8
 8001748:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800174c:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8001750:	6818      	ldr	r0, [r3, #0]
 8001752:	f01d fcd0 	bl	801f0f6 <memcpy>
			printc(MinDelay,"Res For AT+COPS? %s\n",resbuff);
 8001756:	f107 0308 	add.w	r3, r7, #8
 800175a:	461a      	mov	r2, r3
 800175c:	4907      	ldr	r1, [pc, #28]	@ (800177c <getOperatorName+0xcc>)
 800175e:	200a      	movs	r0, #10
 8001760:	f000 f95a 	bl	8001a18 <printc>
			return true;
 8001764:	2301      	movs	r3, #1
 8001766:	e000      	b.n	800176a <getOperatorName+0xba>
		}
		return false;
 8001768:	2300      	movs	r3, #0
}
 800176a:	4618      	mov	r0, r3
 800176c:	f507 7718 	add.w	r7, r7, #608	@ 0x260
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	08022484 	.word	0x08022484
 8001778:	08022520 	.word	0x08022520
 800177c:	08022524 	.word	0x08022524

08001780 <get_MCC_MNC_CellID>:

bool get_MCC_MNC_CellID(char *opMMC,char *opMNC,char *opCELL,char *CellID){
 8001780:	b590      	push	{r4, r7, lr}
 8001782:	f2ad 7de4 	subw	sp, sp, #2020	@ 0x7e4
 8001786:	af00      	add	r7, sp, #0
 8001788:	f507 64fc 	add.w	r4, r7, #2016	@ 0x7e0
 800178c:	f2a4 74d4 	subw	r4, r4, #2004	@ 0x7d4
 8001790:	6020      	str	r0, [r4, #0]
 8001792:	f507 60fc 	add.w	r0, r7, #2016	@ 0x7e0
 8001796:	f5a0 60fb 	sub.w	r0, r0, #2008	@ 0x7d8
 800179a:	6001      	str	r1, [r0, #0]
 800179c:	f507 61fc 	add.w	r1, r7, #2016	@ 0x7e0
 80017a0:	f2a1 71dc 	subw	r1, r1, #2012	@ 0x7dc
 80017a4:	600a      	str	r2, [r1, #0]
 80017a6:	f507 62fc 	add.w	r2, r7, #2016	@ 0x7e0
 80017aa:	f5a2 62fc 	sub.w	r2, r2, #2016	@ 0x7e0
 80017ae:	6013      	str	r3, [r2, #0]
	    uint8_t split[19][100]={};
 80017b0:	f507 63fc 	add.w	r3, r7, #2016	@ 0x7e0
 80017b4:	f2a3 736c 	subw	r3, r3, #1900	@ 0x76c
 80017b8:	4618      	mov	r0, r3
 80017ba:	f240 736c 	movw	r3, #1900	@ 0x76c
 80017be:	461a      	mov	r2, r3
 80017c0:	2100      	movs	r1, #0
 80017c2:	f01d fb25 	bl	801ee10 <memset>
	    uint8_t resbuff[100]={};
 80017c6:	f507 63fc 	add.w	r3, r7, #2016	@ 0x7e0
 80017ca:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	3304      	adds	r3, #4
 80017d4:	2260      	movs	r2, #96	@ 0x60
 80017d6:	2100      	movs	r1, #0
 80017d8:	4618      	mov	r0, r3
 80017da:	f01d fb19 	bl	801ee10 <memset>
		memset(resbuff,0,sizeof(resbuff));
 80017de:	f107 0310 	add.w	r3, r7, #16
 80017e2:	2264      	movs	r2, #100	@ 0x64
 80017e4:	2100      	movs	r1, #0
 80017e6:	4618      	mov	r0, r3
 80017e8:	f01d fb12 	bl	801ee10 <memset>
		if(EC200_Transmit("AT+QENG=\"servingcell\"\r\n",resbuff,EC200MINRESONSETIME))
 80017ec:	f107 0310 	add.w	r3, r7, #16
 80017f0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80017f4:	4619      	mov	r1, r3
 80017f6:	4823      	ldr	r0, [pc, #140]	@ (8001884 <get_MCC_MNC_CellID+0x104>)
 80017f8:	f7ff fcd8 	bl	80011ac <EC200_Transmit>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d039      	beq.n	8001876 <get_MCC_MNC_CellID+0xf6>
		{
			splitString(resbuff,",",split);
 8001802:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 8001806:	f107 0310 	add.w	r3, r7, #16
 800180a:	491f      	ldr	r1, [pc, #124]	@ (8001888 <get_MCC_MNC_CellID+0x108>)
 800180c:	4618      	mov	r0, r3
 800180e:	f000 f969 	bl	8001ae4 <splitString>
			strcpy(opMMC,split[4]);
 8001812:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001816:	f503 72c8 	add.w	r2, r3, #400	@ 0x190
 800181a:	f507 63fc 	add.w	r3, r7, #2016	@ 0x7e0
 800181e:	f2a3 73d4 	subw	r3, r3, #2004	@ 0x7d4
 8001822:	4611      	mov	r1, r2
 8001824:	6818      	ldr	r0, [r3, #0]
 8001826:	f01d fc50 	bl	801f0ca <strcpy>
			strcpy(opMNC,split[5]);
 800182a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800182e:	f503 72fa 	add.w	r2, r3, #500	@ 0x1f4
 8001832:	f507 63fc 	add.w	r3, r7, #2016	@ 0x7e0
 8001836:	f5a3 63fb 	sub.w	r3, r3, #2008	@ 0x7d8
 800183a:	4611      	mov	r1, r2
 800183c:	6818      	ldr	r0, [r3, #0]
 800183e:	f01d fc44 	bl	801f0ca <strcpy>
			strcpy(opCELL,split[6]);
 8001842:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001846:	f503 7216 	add.w	r2, r3, #600	@ 0x258
 800184a:	f507 63fc 	add.w	r3, r7, #2016	@ 0x7e0
 800184e:	f2a3 73dc 	subw	r3, r3, #2012	@ 0x7dc
 8001852:	4611      	mov	r1, r2
 8001854:	6818      	ldr	r0, [r3, #0]
 8001856:	f01d fc38 	bl	801f0ca <strcpy>
			strcpy(CellID,split[7]);
 800185a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800185e:	f503 722f 	add.w	r2, r3, #700	@ 0x2bc
 8001862:	f507 63fc 	add.w	r3, r7, #2016	@ 0x7e0
 8001866:	f5a3 63fc 	sub.w	r3, r3, #2016	@ 0x7e0
 800186a:	4611      	mov	r1, r2
 800186c:	6818      	ldr	r0, [r3, #0]
 800186e:	f01d fc2c 	bl	801f0ca <strcpy>
//			printc(MinDelay,"Res For AT+QENG? %s\n",resbuff);
			return true;
 8001872:	2301      	movs	r3, #1
 8001874:	e000      	b.n	8001878 <get_MCC_MNC_CellID+0xf8>
		}
		return false;
 8001876:	2300      	movs	r3, #0
}
 8001878:	4618      	mov	r0, r3
 800187a:	f207 77e4 	addw	r7, r7, #2020	@ 0x7e4
 800187e:	46bd      	mov	sp, r7
 8001880:	bd90      	pop	{r4, r7, pc}
 8001882:	bf00      	nop
 8001884:	0802253c 	.word	0x0802253c
 8001888:	08022520 	.word	0x08022520

0800188c <setupEc200>:

bool setupEc200(UART_HandleTypeDef *uart){
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
	  ec200MqttUart=uart;
 8001894:	4a23      	ldr	r2, [pc, #140]	@ (8001924 <setupEc200+0x98>)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6013      	str	r3, [r2, #0]
	  GNSS_ON();
 800189a:	2200      	movs	r2, #0
 800189c:	2104      	movs	r1, #4
 800189e:	4822      	ldr	r0, [pc, #136]	@ (8001928 <setupEc200+0x9c>)
 80018a0:	f009 ffd8 	bl	800b854 <HAL_GPIO_WritePin>
	  GPIO_LTE_ON();
 80018a4:	2201      	movs	r2, #1
 80018a6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018aa:	4820      	ldr	r0, [pc, #128]	@ (800192c <setupEc200+0xa0>)
 80018ac:	f009 ffd2 	bl	800b854 <HAL_GPIO_WritePin>
	  GPIO_3V3_ON();
 80018b0:	2200      	movs	r2, #0
 80018b2:	2108      	movs	r1, #8
 80018b4:	481e      	ldr	r0, [pc, #120]	@ (8001930 <setupEc200+0xa4>)
 80018b6:	f009 ffcd 	bl	800b854 <HAL_GPIO_WritePin>
	  GPS_LIGHT_ON();
 80018ba:	2200      	movs	r2, #0
 80018bc:	2110      	movs	r1, #16
 80018be:	481c      	ldr	r0, [pc, #112]	@ (8001930 <setupEc200+0xa4>)
 80018c0:	f009 ffc8 	bl	800b854 <HAL_GPIO_WritePin>
	  enableIdle();
 80018c4:	f000 f878 	bl	80019b8 <enableIdle>
	  ec200start:
	  if(EC200_Transmit("AT\r\n",tmpbuff,EC200MINRESONSETIME)){
 80018c8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80018cc:	4919      	ldr	r1, [pc, #100]	@ (8001934 <setupEc200+0xa8>)
 80018ce:	481a      	ldr	r0, [pc, #104]	@ (8001938 <setupEc200+0xac>)
 80018d0:	f7ff fc6c 	bl	80011ac <EC200_Transmit>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d0f6      	beq.n	80018c8 <setupEc200+0x3c>
		  printc(MinDelay,"%s",tmpbuff);
 80018da:	4a16      	ldr	r2, [pc, #88]	@ (8001934 <setupEc200+0xa8>)
 80018dc:	4917      	ldr	r1, [pc, #92]	@ (800193c <setupEc200+0xb0>)
 80018de:	200a      	movs	r0, #10
 80018e0:	f000 f89a 	bl	8001a18 <printc>
	  }
	  else{
		 goto ec200start;
	  }
	  HAL_Delay(5000);
 80018e4:	f241 3088 	movw	r0, #5000	@ 0x1388
 80018e8:	f004 f86e 	bl	80059c8 <HAL_Delay>
	  EC200_Init();
 80018ec:	f7ff fc8a 	bl	8001204 <EC200_Init>
	  gsmParameterUpdate();
 80018f0:	f001 f926 	bl	8002b40 <gsmParameterUpdate>
	  clearBuffer(tmpbuff,sizeof(tmpbuff));
 80018f4:	2164      	movs	r1, #100	@ 0x64
 80018f6:	480f      	ldr	r0, [pc, #60]	@ (8001934 <setupEc200+0xa8>)
 80018f8:	f000 f8e6 	bl	8001ac8 <clearBuffer>
	  if(getIMEI(tmpbuff)){
 80018fc:	480d      	ldr	r0, [pc, #52]	@ (8001934 <setupEc200+0xa8>)
 80018fe:	f7ff fe57 	bl	80015b0 <getIMEI>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d004      	beq.n	8001912 <setupEc200+0x86>
		   setIMEI(tmpbuff);
 8001908:	480a      	ldr	r0, [pc, #40]	@ (8001934 <setupEc200+0xa8>)
 800190a:	f001 f899 	bl	8002a40 <setIMEI>
	  }
	  else{
		  printc(MinDelay,"Don't get IMEI\n");
		  return false;
	  }
	  return true;
 800190e:	2301      	movs	r3, #1
 8001910:	e004      	b.n	800191c <setupEc200+0x90>
		  printc(MinDelay,"Don't get IMEI\n");
 8001912:	490b      	ldr	r1, [pc, #44]	@ (8001940 <setupEc200+0xb4>)
 8001914:	200a      	movs	r0, #10
 8001916:	f000 f87f 	bl	8001a18 <printc>
		  return false;
 800191a:	2300      	movs	r3, #0

}
 800191c:	4618      	mov	r0, r3
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	200004d8 	.word	0x200004d8
 8001928:	42020c00 	.word	0x42020c00
 800192c:	42020800 	.word	0x42020800
 8001930:	42020400 	.word	0x42020400
 8001934:	20000ce0 	.word	0x20000ce0
 8001938:	08022284 	.word	0x08022284
 800193c:	08022554 	.word	0x08022554
 8001940:	08022558 	.word	0x08022558

08001944 <E200_RxHAlfCpltCallback>:


 void E200_RxHAlfCpltCallback(void){
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
	 printc(MinDelay,"Half Callback\n %s \n",EC200_ResponseBuff);
 8001948:	4a03      	ldr	r2, [pc, #12]	@ (8001958 <E200_RxHAlfCpltCallback+0x14>)
 800194a:	4904      	ldr	r1, [pc, #16]	@ (800195c <E200_RxHAlfCpltCallback+0x18>)
 800194c:	200a      	movs	r0, #10
 800194e:	f000 f863 	bl	8001a18 <printc>
 }
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	200004dc 	.word	0x200004dc
 800195c:	08022568 	.word	0x08022568

08001960 <Ec200_RxEventCallback>:

 void Ec200_RxEventCallback(uint16_t size){
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	80fb      	strh	r3, [r7, #6]
	 printc(MinDelay,"Event Callback %d %s\n",size,EC200_ResponseBuff);
 800196a:	88fa      	ldrh	r2, [r7, #6]
 800196c:	4b05      	ldr	r3, [pc, #20]	@ (8001984 <Ec200_RxEventCallback+0x24>)
 800196e:	4906      	ldr	r1, [pc, #24]	@ (8001988 <Ec200_RxEventCallback+0x28>)
 8001970:	200a      	movs	r0, #10
 8001972:	f000 f851 	bl	8001a18 <printc>
	 FLAG_EC200RESONSE=true;
 8001976:	4b05      	ldr	r3, [pc, #20]	@ (800198c <Ec200_RxEventCallback+0x2c>)
 8001978:	2201      	movs	r2, #1
 800197a:	701a      	strb	r2, [r3, #0]
 }
 800197c:	bf00      	nop
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	200004dc 	.word	0x200004dc
 8001988:	0802257c 	.word	0x0802257c
 800198c:	20000cdc 	.word	0x20000cdc

08001990 <switchIdle>:
 void E200_RXCpltCallback(void){
	 printc(MinDelay,"Complete Callback %s \n",EC200_ResponseBuff);
 }
void switchIdle()
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
	if(enable_Idle)
 8001994:	4b07      	ldr	r3, [pc, #28]	@ (80019b4 <switchIdle+0x24>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d003      	beq.n	80019a4 <switchIdle+0x14>
		enable_Idle = false;
 800199c:	4b05      	ldr	r3, [pc, #20]	@ (80019b4 <switchIdle+0x24>)
 800199e:	2200      	movs	r2, #0
 80019a0:	701a      	strb	r2, [r3, #0]
	else
		enable_Idle = true;


}
 80019a2:	e002      	b.n	80019aa <switchIdle+0x1a>
		enable_Idle = true;
 80019a4:	4b03      	ldr	r3, [pc, #12]	@ (80019b4 <switchIdle+0x24>)
 80019a6:	2201      	movs	r2, #1
 80019a8:	701a      	strb	r2, [r3, #0]
}
 80019aa:	bf00      	nop
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr
 80019b4:	20000000 	.word	0x20000000

080019b8 <enableIdle>:
void enableIdle(){
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
	if(enable_Idle)
 80019bc:	4b06      	ldr	r3, [pc, #24]	@ (80019d8 <enableIdle+0x20>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d007      	beq.n	80019d4 <enableIdle+0x1c>
    	HAL_UARTEx_ReceiveToIdle_IT(ec200MqttUart,EC200_ResponseBuff,RESBUFF_SIZE);
 80019c4:	4b05      	ldr	r3, [pc, #20]	@ (80019dc <enableIdle+0x24>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80019cc:	4904      	ldr	r1, [pc, #16]	@ (80019e0 <enableIdle+0x28>)
 80019ce:	4618      	mov	r0, r3
 80019d0:	f013 fbc8 	bl	8015164 <HAL_UARTEx_ReceiveToIdle_IT>
}
 80019d4:	bf00      	nop
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	20000000 	.word	0x20000000
 80019dc:	200004d8 	.word	0x200004d8
 80019e0:	200004dc 	.word	0x200004dc

080019e4 <setupPrintUart>:

UART_HandleTypeDef *printUart;
int printUartSet=0;
bool enablePrintUartIdle=true;
uint8_t printUart_ResponseBuff[PRINT_RESBUFF_SIZE]={};
void setupPrintUart(UART_HandleTypeDef *uart,bool debug){
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	460b      	mov	r3, r1
 80019ee:	70fb      	strb	r3, [r7, #3]
	printUart=uart;
 80019f0:	4a07      	ldr	r2, [pc, #28]	@ (8001a10 <setupPrintUart+0x2c>)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6013      	str	r3, [r2, #0]
	if(debug)
 80019f6:	78fb      	ldrb	r3, [r7, #3]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d002      	beq.n	8001a02 <setupPrintUart+0x1e>
		printUartSet=1;
 80019fc:	4b05      	ldr	r3, [pc, #20]	@ (8001a14 <setupPrintUart+0x30>)
 80019fe:	2201      	movs	r2, #1
 8001a00:	601a      	str	r2, [r3, #0]
//	openPrintUartIdle();
}
 8001a02:	bf00      	nop
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	20000d44 	.word	0x20000d44
 8001a14:	20000d48 	.word	0x20000d48

08001a18 <printc>:
void printc(uint8_t delay,const char* msg, ...) {
 8001a18:	b40e      	push	{r1, r2, r3}
 8001a1a:	b590      	push	{r4, r7, lr}
 8001a1c:	f5ad 6dff 	sub.w	sp, sp, #2040	@ 0x7f8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	4602      	mov	r2, r0
 8001a24:	f507 63ff 	add.w	r3, r7, #2040	@ 0x7f8
 8001a28:	f2a3 73f1 	subw	r3, r3, #2033	@ 0x7f1
 8001a2c:	701a      	strb	r2, [r3, #0]
	if(printUartSet){
 8001a2e:	4b16      	ldr	r3, [pc, #88]	@ (8001a88 <printc+0x70>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d020      	beq.n	8001a78 <printc+0x60>
			char message[2024];
			va_list args;
			va_start(args, msg);
 8001a36:	f607 0308 	addw	r3, r7, #2056	@ 0x808
 8001a3a:	f8c7 37f4 	str.w	r3, [r7, #2036]	@ 0x7f4
			vsnprintf(message, sizeof(message), msg, args);
 8001a3e:	f107 000c 	add.w	r0, r7, #12
 8001a42:	f8d7 37f4 	ldr.w	r3, [r7, #2036]	@ 0x7f4
 8001a46:	f8d7 2804 	ldr.w	r2, [r7, #2052]	@ 0x804
 8001a4a:	f44f 61fd 	mov.w	r1, #2024	@ 0x7e8
 8001a4e:	f01d f93d 	bl	801eccc <vsniprintf>
			va_end(args);
			HAL_UART_Transmit(printUart, (uint8_t*)message, strlen(message), delay);
 8001a52:	4b0e      	ldr	r3, [pc, #56]	@ (8001a8c <printc+0x74>)
 8001a54:	681c      	ldr	r4, [r3, #0]
 8001a56:	f107 030c 	add.w	r3, r7, #12
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7fe fc22 	bl	80002a4 <strlen>
 8001a60:	4603      	mov	r3, r0
 8001a62:	b29a      	uxth	r2, r3
 8001a64:	f507 63ff 	add.w	r3, r7, #2040	@ 0x7f8
 8001a68:	f2a3 73f1 	subw	r3, r3, #2033	@ 0x7f1
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	f107 010c 	add.w	r1, r7, #12
 8001a72:	4620      	mov	r0, r4
 8001a74:	f011 f8fe 	bl	8012c74 <HAL_UART_Transmit>
	}
}
 8001a78:	bf00      	nop
 8001a7a:	f507 67ff 	add.w	r7, r7, #2040	@ 0x7f8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001a84:	b003      	add	sp, #12
 8001a86:	4770      	bx	lr
 8001a88:	20000d48 	.word	0x20000d48
 8001a8c:	20000d44 	.word	0x20000d44

08001a90 <print>:
void print(uint8_t delay,uint8_t* data,int size){
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	60b9      	str	r1, [r7, #8]
 8001a9a:	607a      	str	r2, [r7, #4]
 8001a9c:	73fb      	strb	r3, [r7, #15]
	if(printUartSet){
 8001a9e:	4b08      	ldr	r3, [pc, #32]	@ (8001ac0 <print+0x30>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d007      	beq.n	8001ab6 <print+0x26>
		HAL_UART_Transmit(printUart,data,size, delay);
 8001aa6:	4b07      	ldr	r3, [pc, #28]	@ (8001ac4 <print+0x34>)
 8001aa8:	6818      	ldr	r0, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	b29a      	uxth	r2, r3
 8001aae:	7bfb      	ldrb	r3, [r7, #15]
 8001ab0:	68b9      	ldr	r1, [r7, #8]
 8001ab2:	f011 f8df 	bl	8012c74 <HAL_UART_Transmit>
	}
}
 8001ab6:	bf00      	nop
 8001ab8:	3710      	adds	r7, #16
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	20000d48 	.word	0x20000d48
 8001ac4:	20000d44 	.word	0x20000d44

08001ac8 <clearBuffer>:
void clearBuffer(uint8_t* buffer, size_t size) {
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
    // Use memset to fill the buffer with zeros
    memset(buffer, 0, size);
 8001ad2:	683a      	ldr	r2, [r7, #0]
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f01d f99a 	bl	801ee10 <memset>
}
 8001adc:	bf00      	nop
 8001ade:	3708      	adds	r7, #8
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <splitString>:
				sprintf(hex, "%02X ", data[i]);  // Format each byte as a two-digit hexadecimal number
				HAL_UART_Transmit(printUart, (uint8_t*)hex, strlen(hex), delay);
			}
	}
}
bool splitString(uint8_t *string,char *spliter,uint8_t opbuffer[][100]){
 8001ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ae8:	b08a      	sub	sp, #40	@ 0x28
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	60f8      	str	r0, [r7, #12]
 8001aee:	60b9      	str	r1, [r7, #8]
 8001af0:	607a      	str	r2, [r7, #4]
	uint8_t *line=strstr(string,spliter);
 8001af2:	68b9      	ldr	r1, [r7, #8]
 8001af4:	68f8      	ldr	r0, [r7, #12]
 8001af6:	f01d fa4b 	bl	801ef90 <strstr>
 8001afa:	6278      	str	r0, [r7, #36]	@ 0x24
	int i=0;
 8001afc:	2300      	movs	r3, #0
 8001afe:	623b      	str	r3, [r7, #32]
	if(line==NULL){
 8001b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d17b      	bne.n	8001bfe <splitString+0x11a>
		memcpy(opbuffer[i++],string,strlen(string));
 8001b06:	6a3b      	ldr	r3, [r7, #32]
 8001b08:	1c5a      	adds	r2, r3, #1
 8001b0a:	623a      	str	r2, [r7, #32]
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	2364      	movs	r3, #100	@ 0x64
 8001b10:	fb02 f303 	mul.w	r3, r2, r3
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	18d6      	adds	r6, r2, r3
 8001b18:	68f8      	ldr	r0, [r7, #12]
 8001b1a:	f7fe fbc3 	bl	80002a4 <strlen>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	461a      	mov	r2, r3
 8001b22:	68f9      	ldr	r1, [r7, #12]
 8001b24:	4630      	mov	r0, r6
 8001b26:	f01d fae6 	bl	801f0f6 <memcpy>
	}
	while(line!=NULL){
 8001b2a:	e068      	b.n	8001bfe <splitString+0x11a>
 8001b2c:	466b      	mov	r3, sp
 8001b2e:	469a      	mov	sl, r3
		uint8_t length = line - string;
 8001b30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	77fb      	strb	r3, [r7, #31]
		char substring[length];
 8001b38:	7ff9      	ldrb	r1, [r7, #31]
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	3b01      	subs	r3, #1
 8001b3e:	61bb      	str	r3, [r7, #24]
 8001b40:	b2cb      	uxtb	r3, r1
 8001b42:	2200      	movs	r2, #0
 8001b44:	461c      	mov	r4, r3
 8001b46:	4615      	mov	r5, r2
 8001b48:	f04f 0200 	mov.w	r2, #0
 8001b4c:	f04f 0300 	mov.w	r3, #0
 8001b50:	00eb      	lsls	r3, r5, #3
 8001b52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b56:	00e2      	lsls	r2, r4, #3
 8001b58:	b2cb      	uxtb	r3, r1
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	4698      	mov	r8, r3
 8001b5e:	4691      	mov	r9, r2
 8001b60:	f04f 0200 	mov.w	r2, #0
 8001b64:	f04f 0300 	mov.w	r3, #0
 8001b68:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b6c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b70:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b74:	460b      	mov	r3, r1
 8001b76:	3307      	adds	r3, #7
 8001b78:	08db      	lsrs	r3, r3, #3
 8001b7a:	00db      	lsls	r3, r3, #3
 8001b7c:	ebad 0d03 	sub.w	sp, sp, r3
 8001b80:	466b      	mov	r3, sp
 8001b82:	3300      	adds	r3, #0
 8001b84:	617b      	str	r3, [r7, #20]
		memset(substring,0,length);
 8001b86:	7ffb      	ldrb	r3, [r7, #31]
 8001b88:	461a      	mov	r2, r3
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	6978      	ldr	r0, [r7, #20]
 8001b8e:	f01d f93f 	bl	801ee10 <memset>
		if (substring == NULL) {
				printc(MinDelay,"Memory allocation failed\n");
				return false;
		}
		memcpy(substring,string,length);
 8001b92:	7ffb      	ldrb	r3, [r7, #31]
 8001b94:	461a      	mov	r2, r3
 8001b96:	68f9      	ldr	r1, [r7, #12]
 8001b98:	6978      	ldr	r0, [r7, #20]
 8001b9a:	f01d faac 	bl	801f0f6 <memcpy>
		string=line+strlen(spliter);
 8001b9e:	68b8      	ldr	r0, [r7, #8]
 8001ba0:	f7fe fb80 	bl	80002a4 <strlen>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba8:	4413      	add	r3, r2
 8001baa:	60fb      	str	r3, [r7, #12]
//		printc(MinDelay,"sub string \n %s\n",substring);
		if(substring==NULL)
			return false;
		memcpy((uint8_t*)opbuffer[i++],substring,length);
 8001bac:	6a3b      	ldr	r3, [r7, #32]
 8001bae:	1c5a      	adds	r2, r3, #1
 8001bb0:	623a      	str	r2, [r7, #32]
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	2364      	movs	r3, #100	@ 0x64
 8001bb6:	fb02 f303 	mul.w	r3, r2, r3
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	7ffa      	ldrb	r2, [r7, #31]
 8001bc0:	6979      	ldr	r1, [r7, #20]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f01d fa97 	bl	801f0f6 <memcpy>
		line=strstr(string,spliter);
 8001bc8:	68b9      	ldr	r1, [r7, #8]
 8001bca:	68f8      	ldr	r0, [r7, #12]
 8001bcc:	f01d f9e0 	bl	801ef90 <strstr>
 8001bd0:	6278      	str	r0, [r7, #36]	@ 0x24
		if(line==NULL){
 8001bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d111      	bne.n	8001bfc <splitString+0x118>
//			printc(MinDelay,"last line %s\n",string);
			memcpy(opbuffer[i++],string,strlen(string));
 8001bd8:	6a3b      	ldr	r3, [r7, #32]
 8001bda:	1c5a      	adds	r2, r3, #1
 8001bdc:	623a      	str	r2, [r7, #32]
 8001bde:	461a      	mov	r2, r3
 8001be0:	2364      	movs	r3, #100	@ 0x64
 8001be2:	fb02 f303 	mul.w	r3, r2, r3
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	18d6      	adds	r6, r2, r3
 8001bea:	68f8      	ldr	r0, [r7, #12]
 8001bec:	f7fe fb5a 	bl	80002a4 <strlen>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	68f9      	ldr	r1, [r7, #12]
 8001bf6:	4630      	mov	r0, r6
 8001bf8:	f01d fa7d 	bl	801f0f6 <memcpy>
 8001bfc:	46d5      	mov	sp, sl
	while(line!=NULL){
 8001bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d193      	bne.n	8001b2c <splitString+0x48>
		}
	}
	return true;
 8001c04:	2301      	movs	r3, #1
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3728      	adds	r7, #40	@ 0x28
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08001c10 <print_RxEventCallback>:
}
void openPrintUartIdle(){
//	if(enablePrintUartIdle)
    	//HAL_UARTEx_ReceiveToIdle_IT(printUart,printUart_ResponseBuff,PRINT_RESBUFF_SIZE);
}
void print_RxEventCallback(uint16_t size){
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	4603      	mov	r3, r0
 8001c18:	80fb      	strh	r3, [r7, #6]
	 printc(MinDelay,"Callback From Print Uart %d %s\n",size,printUart_ResponseBuff);
 8001c1a:	88fa      	ldrh	r2, [r7, #6]
 8001c1c:	4b08      	ldr	r3, [pc, #32]	@ (8001c40 <print_RxEventCallback+0x30>)
 8001c1e:	4909      	ldr	r1, [pc, #36]	@ (8001c44 <print_RxEventCallback+0x34>)
 8001c20:	200a      	movs	r0, #10
 8001c22:	f7ff fef9 	bl	8001a18 <printc>
	 onPrintUartCmd(printUart_ResponseBuff);
 8001c26:	4806      	ldr	r0, [pc, #24]	@ (8001c40 <print_RxEventCallback+0x30>)
 8001c28:	f000 ff74 	bl	8002b14 <onPrintUartCmd>
	 clearBuffer(printUart_ResponseBuff,PRINT_RESBUFF_SIZE);
 8001c2c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001c30:	4803      	ldr	r0, [pc, #12]	@ (8001c40 <print_RxEventCallback+0x30>)
 8001c32:	f7ff ff49 	bl	8001ac8 <clearBuffer>
 }
 8001c36:	bf00      	nop
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	20000d4c 	.word	0x20000d4c
 8001c44:	080225b4 	.word	0x080225b4

08001c48 <addToMap>:


// Function to create a new ma

// Function to add a key-value pair to the map
void addToMap(Map* map, const uint32_t key, uint8_t *value,uint32_t size) {
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	60b9      	str	r1, [r7, #8]
 8001c52:	607a      	str	r2, [r7, #4]
 8001c54:	603b      	str	r3, [r7, #0]
    // Find an empty slot in the map
    int i;
    for (i = 0; i < map->size; i++) {
 8001c56:	2300      	movs	r3, #0
 8001c58:	617b      	str	r3, [r7, #20]
 8001c5a:	e01e      	b.n	8001c9a <addToMap+0x52>
        if (map->pairs[i].key==key ) {
 8001c5c:	68fa      	ldr	r2, [r7, #12]
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	011b      	lsls	r3, r3, #4
 8001c62:	4413      	add	r3, r2
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	68ba      	ldr	r2, [r7, #8]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d113      	bne.n	8001c94 <addToMap+0x4c>
            clearBuffer(map->pairs[i].value, sizeof(map->pairs[i].value));
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	011b      	lsls	r3, r3, #4
 8001c70:	68fa      	ldr	r2, [r7, #12]
 8001c72:	4413      	add	r3, r2
 8001c74:	3304      	adds	r3, #4
 8001c76:	2109      	movs	r1, #9
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff ff25 	bl	8001ac8 <clearBuffer>
            memcpy(map->pairs[i].value,value,size);
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	011b      	lsls	r3, r3, #4
 8001c82:	68fa      	ldr	r2, [r7, #12]
 8001c84:	4413      	add	r3, r2
 8001c86:	3304      	adds	r3, #4
 8001c88:	683a      	ldr	r2, [r7, #0]
 8001c8a:	6879      	ldr	r1, [r7, #4]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f01d fa32 	bl	801f0f6 <memcpy>
            return;
 8001c92:	e038      	b.n	8001d06 <addToMap+0xbe>
    for (i = 0; i < map->size; i++) {
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	3301      	adds	r3, #1
 8001c98:	617b      	str	r3, [r7, #20]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	f8d3 3230 	ldr.w	r3, [r3, #560]	@ 0x230
 8001ca0:	697a      	ldr	r2, [r7, #20]
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	dbda      	blt.n	8001c5c <addToMap+0x14>
        }
    }
    if(map->size >=MAX_MAP_DATA){
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	f8d3 3230 	ldr.w	r3, [r3, #560]	@ 0x230
 8001cac:	2b22      	cmp	r3, #34	@ 0x22
 8001cae:	dd04      	ble.n	8001cba <addToMap+0x72>
    	printc(MinDelay,"Map is full\n");
 8001cb0:	4916      	ldr	r1, [pc, #88]	@ (8001d0c <addToMap+0xc4>)
 8001cb2:	200a      	movs	r0, #10
 8001cb4:	f7ff feb0 	bl	8001a18 <printc>
 8001cb8:	e025      	b.n	8001d06 <addToMap+0xbe>
    }
    else{
    	clearBuffer(map->pairs[map->size].value, sizeof(map->pairs[map->size].value));
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	f8d3 3230 	ldr.w	r3, [r3, #560]	@ 0x230
 8001cc0:	011b      	lsls	r3, r3, #4
 8001cc2:	68fa      	ldr	r2, [r7, #12]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	3304      	adds	r3, #4
 8001cc8:	2109      	movs	r1, #9
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff fefc 	bl	8001ac8 <clearBuffer>
    	map->pairs[map->size].key=key;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f8d3 3230 	ldr.w	r3, [r3, #560]	@ 0x230
 8001cd6:	68fa      	ldr	r2, [r7, #12]
 8001cd8:	011b      	lsls	r3, r3, #4
 8001cda:	4413      	add	r3, r2
 8001cdc:	68ba      	ldr	r2, [r7, #8]
 8001cde:	601a      	str	r2, [r3, #0]
    	memcpy(map->pairs[map->size].value,value,size);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	f8d3 3230 	ldr.w	r3, [r3, #560]	@ 0x230
 8001ce6:	011b      	lsls	r3, r3, #4
 8001ce8:	68fa      	ldr	r2, [r7, #12]
 8001cea:	4413      	add	r3, r2
 8001cec:	3304      	adds	r3, #4
 8001cee:	683a      	ldr	r2, [r7, #0]
 8001cf0:	6879      	ldr	r1, [r7, #4]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f01d f9ff 	bl	801f0f6 <memcpy>
    	map->size++;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f8d3 3230 	ldr.w	r3, [r3, #560]	@ 0x230
 8001cfe:	1c5a      	adds	r2, r3, #1
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
    }

}
 8001d06:	3718      	adds	r7, #24
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	080225d4 	.word	0x080225d4

08001d10 <initializeStack>:
 *      Author: CEINFO
 */
#include <stack.h>

// Function to initialize the stack
void initializeStack(Stack *stack) {
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
    stack->top = -1; // Initialize top index to -1 (empty stack)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8001d1e:	461a      	mov	r2, r3
 8001d20:	f04f 33ff 	mov.w	r3, #4294967295
 8001d24:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
}
 8001d28:	bf00      	nop
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <full>:

// Function to check if the stack is full
int full(Stack *stack) {
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
    return stack->top == MAX_STACK_DATA - 1; // Stack is full if top is at max index
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8001d42:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	@ 0xc00
 8001d46:	2b22      	cmp	r3, #34	@ 0x22
 8001d48:	bf0c      	ite	eq
 8001d4a:	2301      	moveq	r3, #1
 8001d4c:	2300      	movne	r3, #0
 8001d4e:	b2db      	uxtb	r3, r3
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <empty>:

// Function to check if the stack is empty
int empty(Stack *stack) {
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
    return stack->top == -1; // Stack is empty if top is -1
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8001d6a:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	@ 0xc00
 8001d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d72:	bf0c      	ite	eq
 8001d74:	2301      	moveq	r3, #1
 8001d76:	2300      	movne	r3, #0
 8001d78:	b2db      	uxtb	r3, r3
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
	...

08001d88 <push>:

// Function to push an array onto the stack
bool push(Stack *stack, const uint8_t *array,uint32_t size) {
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
    if (full(stack)) {
 8001d94:	68f8      	ldr	r0, [r7, #12]
 8001d96:	f7ff ffcd 	bl	8001d34 <full>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d005      	beq.n	8001dac <push+0x24>
        printc(MinDelay,"Error: Stack overflow\n");
 8001da0:	4917      	ldr	r1, [pc, #92]	@ (8001e00 <push+0x78>)
 8001da2:	200a      	movs	r0, #10
 8001da4:	f7ff fe38 	bl	8001a18 <printc>
        return false; // Exit function if stack is full
 8001da8:	2300      	movs	r3, #0
 8001daa:	e025      	b.n	8001df8 <push+0x70>
    }

    stack->top++; // Increment top index
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8001db2:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	@ 0xc00
 8001db6:	3301      	adds	r3, #1
 8001db8:	68fa      	ldr	r2, [r7, #12]
 8001dba:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8001dbe:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
    clearBuffer(stack->data[stack->top],sizeof(stack->data[stack->top]));
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8001dc8:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	@ 0xc00
 8001dcc:	029b      	lsls	r3, r3, #10
 8001dce:	68fa      	ldr	r2, [r7, #12]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7ff fe76 	bl	8001ac8 <clearBuffer>
    memcpy(stack->data[stack->top], array, size); // Copy array to stack
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8001de2:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	@ 0xc00
 8001de6:	029b      	lsls	r3, r3, #10
 8001de8:	68fa      	ldr	r2, [r7, #12]
 8001dea:	4413      	add	r3, r2
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	68b9      	ldr	r1, [r7, #8]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f01d f980 	bl	801f0f6 <memcpy>
//    print("Pushed array onto the stack\n");
    return true;
 8001df6:	2301      	movs	r3, #1
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3710      	adds	r7, #16
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	080225f4 	.word	0x080225f4

08001e04 <pop>:

// Function to pop an array from the stack
bool pop(Stack *stack, uint8_t *result) {
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
    if (empty(stack)) {
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f7ff ffa4 	bl	8001d5c <empty>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d005      	beq.n	8001e26 <pop+0x22>
        printc(MinDelay,"Error: Stack underflow\n");
 8001e1a:	4911      	ldr	r1, [pc, #68]	@ (8001e60 <pop+0x5c>)
 8001e1c:	200a      	movs	r0, #10
 8001e1e:	f7ff fdfb 	bl	8001a18 <printc>
        return false; // Exit function if stack is empty
 8001e22:	2300      	movs	r3, #0
 8001e24:	e017      	b.n	8001e56 <pop+0x52>
    }
    strcpy(result,stack->data[stack->top]);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8001e2c:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	@ 0xc00
 8001e30:	029b      	lsls	r3, r3, #10
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	4413      	add	r3, r2
 8001e36:	4619      	mov	r1, r3
 8001e38:	6838      	ldr	r0, [r7, #0]
 8001e3a:	f01d f946 	bl	801f0ca <strcpy>
    //memcpy(result, stack->data[stack->top], size); // Copy array from stack
    stack->top--; // Decrement top index
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8001e44:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	@ 0xc00
 8001e48:	3b01      	subs	r3, #1
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8001e50:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
    return true;
 8001e54:	2301      	movs	r3, #1
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	0802260c 	.word	0x0802260c

08001e64 <encrypt>:
 */
#include "main.h"

extern CRYP_HandleTypeDef hcryp;

int encrypt(char *Data, uint8_t En_data[]) {
 8001e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e68:	b091      	sub	sp, #68	@ 0x44
 8001e6a:	af02      	add	r7, sp, #8
 8001e6c:	60f8      	str	r0, [r7, #12]
 8001e6e:	60b9      	str	r1, [r7, #8]
 8001e70:	466b      	mov	r3, sp
 8001e72:	461e      	mov	r6, r3
	size_t string_length = strlen(Data);
 8001e74:	68f8      	ldr	r0, [r7, #12]
 8001e76:	f7fe fa15 	bl	80002a4 <strlen>
 8001e7a:	62b8      	str	r0, [r7, #40]	@ 0x28

	addPadding((uint8_t*) Data, string_length);
 8001e7c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001e7e:	68f8      	ldr	r0, [r7, #12]
 8001e80:	f000 fb70 	bl	8002564 <addPadding>
//	printc(MinDelay,"padded data = %s,%d \r\n", &Data, strlen(Data));
	string_length = strlen(Data);
 8001e84:	68f8      	ldr	r0, [r7, #12]
 8001e86:	f7fe fa0d 	bl	80002a4 <strlen>
 8001e8a:	62b8      	str	r0, [r7, #40]	@ 0x28
	size_t num_uint32 = (string_length + 3) / 4;
 8001e8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e8e:	3303      	adds	r3, #3
 8001e90:	089b      	lsrs	r3, r3, #2
 8001e92:	627b      	str	r3, [r7, #36]	@ 0x24

	uint32_t SWData[num_uint32];
 8001e94:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001e96:	460b      	mov	r3, r1
 8001e98:	3b01      	subs	r3, #1
 8001e9a:	623b      	str	r3, [r7, #32]
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	6039      	str	r1, [r7, #0]
 8001ea0:	607b      	str	r3, [r7, #4]
 8001ea2:	f04f 0200 	mov.w	r2, #0
 8001ea6:	f04f 0300 	mov.w	r3, #0
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	0143      	lsls	r3, r0, #5
 8001eae:	6838      	ldr	r0, [r7, #0]
 8001eb0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001eb4:	6838      	ldr	r0, [r7, #0]
 8001eb6:	0142      	lsls	r2, r0, #5
 8001eb8:	2300      	movs	r3, #0
 8001eba:	468a      	mov	sl, r1
 8001ebc:	469b      	mov	fp, r3
 8001ebe:	f04f 0200 	mov.w	r2, #0
 8001ec2:	f04f 0300 	mov.w	r3, #0
 8001ec6:	ea4f 134b 	mov.w	r3, fp, lsl #5
 8001eca:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8001ece:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8001ed2:	008b      	lsls	r3, r1, #2
 8001ed4:	3307      	adds	r3, #7
 8001ed6:	08db      	lsrs	r3, r3, #3
 8001ed8:	00db      	lsls	r3, r3, #3
 8001eda:	ebad 0d03 	sub.w	sp, sp, r3
 8001ede:	ab02      	add	r3, sp, #8
 8001ee0:	3303      	adds	r3, #3
 8001ee2:	089b      	lsrs	r3, r3, #2
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	61fb      	str	r3, [r7, #28]
	for (size_t i = 0; i < num_uint32; i++) {
 8001ee8:	2300      	movs	r3, #0
 8001eea:	637b      	str	r3, [r7, #52]	@ 0x34
 8001eec:	e026      	b.n	8001f3c <encrypt+0xd8>
		SWData[i] = (uint32_t) (Data[i * 4 + 3])
 8001eee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	3303      	adds	r3, #3
 8001ef4:	68fa      	ldr	r2, [r7, #12]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	4619      	mov	r1, r3
				| (uint32_t) (Data[i * 4 + 2]) << 8
 8001efc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	3302      	adds	r3, #2
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	4413      	add	r3, r2
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	021b      	lsls	r3, r3, #8
 8001f0a:	ea41 0203 	orr.w	r2, r1, r3
				| (uint32_t) (Data[i * 4 + 1]) << 16
 8001f0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	3301      	adds	r3, #1
 8001f14:	68f9      	ldr	r1, [r7, #12]
 8001f16:	440b      	add	r3, r1
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	041b      	lsls	r3, r3, #16
 8001f1c:	431a      	orrs	r2, r3
				| (uint32_t) (Data[i * 4 + 0]) << 24;
 8001f1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	68f9      	ldr	r1, [r7, #12]
 8001f24:	440b      	add	r3, r1
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	061b      	lsls	r3, r3, #24
 8001f2a:	ea42 0103 	orr.w	r1, r2, r3
		SWData[i] = (uint32_t) (Data[i * 4 + 3])
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001f32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (size_t i = 0; i < num_uint32; i++) {
 8001f36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f38:	3301      	adds	r3, #1
 8001f3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f3c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d3d4      	bcc.n	8001eee <encrypt+0x8a>
	}

	// Encrypt the string
	uint32_t encryptedStr[num_uint32]; // Declaration
 8001f44:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001f46:	460b      	mov	r3, r1
 8001f48:	3b01      	subs	r3, #1
 8001f4a:	61bb      	str	r3, [r7, #24]
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	4688      	mov	r8, r1
 8001f50:	4699      	mov	r9, r3
 8001f52:	f04f 0200 	mov.w	r2, #0
 8001f56:	f04f 0300 	mov.w	r3, #0
 8001f5a:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8001f5e:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8001f62:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8001f66:	2300      	movs	r3, #0
 8001f68:	460c      	mov	r4, r1
 8001f6a:	461d      	mov	r5, r3
 8001f6c:	f04f 0200 	mov.w	r2, #0
 8001f70:	f04f 0300 	mov.w	r3, #0
 8001f74:	016b      	lsls	r3, r5, #5
 8001f76:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8001f7a:	0162      	lsls	r2, r4, #5
 8001f7c:	008b      	lsls	r3, r1, #2
 8001f7e:	3307      	adds	r3, #7
 8001f80:	08db      	lsrs	r3, r3, #3
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	ebad 0d03 	sub.w	sp, sp, r3
 8001f88:	ab02      	add	r3, sp, #8
 8001f8a:	3303      	adds	r3, #3
 8001f8c:	089b      	lsrs	r3, r3, #2
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	617b      	str	r3, [r7, #20]
	memset(encryptedStr, 0, num_uint32 * sizeof(uint32_t)); // Initialization
 8001f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	461a      	mov	r2, r3
 8001f98:	2100      	movs	r1, #0
 8001f9a:	6978      	ldr	r0, [r7, #20]
 8001f9c:	f01c ff38 	bl	801ee10 <memset>
	memset(En_data, 0, sizeof(En_data));
 8001fa0:	2204      	movs	r2, #4
 8001fa2:	2100      	movs	r1, #0
 8001fa4:	68b8      	ldr	r0, [r7, #8]
 8001fa6:	f01c ff33 	bl	801ee10 <memset>
	HAL_CRYP_Encrypt(&hcryp, SWData, num_uint32, encryptedStr, 2000);
 8001faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fac:	b29a      	uxth	r2, r3
 8001fae:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001fb2:	9300      	str	r3, [sp, #0]
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	69f9      	ldr	r1, [r7, #28]
 8001fb8:	482e      	ldr	r0, [pc, #184]	@ (8002074 <encrypt+0x210>)
 8001fba:	f005 fd31 	bl	8007a20 <HAL_CRYP_Encrypt>

	// Convert encryptedStr to char array
	for (int i = 0; i < num_uint32; i++) {
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	633b      	str	r3, [r7, #48]	@ 0x30
 8001fc2:	e031      	b.n	8002028 <encrypt+0x1c4>
		En_data[i * 4 + 0] = (encryptedStr[i] >> 24) & 0xFF;
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001fc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fcc:	0e1a      	lsrs	r2, r3, #24
 8001fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	440b      	add	r3, r1
 8001fd8:	b2d2      	uxtb	r2, r2
 8001fda:	701a      	strb	r2, [r3, #0]
		En_data[i * 4 + 1] = (encryptedStr[i] >> 16) & 0xFF;
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001fe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fe4:	0c19      	lsrs	r1, r3, #16
 8001fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	3301      	adds	r3, #1
 8001fec:	68ba      	ldr	r2, [r7, #8]
 8001fee:	4413      	add	r3, r2
 8001ff0:	b2ca      	uxtb	r2, r1
 8001ff2:	701a      	strb	r2, [r3, #0]
		En_data[i * 4 + 2] = (encryptedStr[i] >> 8) & 0xFF;
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001ff8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ffc:	0a19      	lsrs	r1, r3, #8
 8001ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	3302      	adds	r3, #2
 8002004:	68ba      	ldr	r2, [r7, #8]
 8002006:	4413      	add	r3, r2
 8002008:	b2ca      	uxtb	r2, r1
 800200a:	701a      	strb	r2, [r3, #0]
		En_data[i * 4 + 3] = encryptedStr[i] & 0xFF;
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002010:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	3303      	adds	r3, #3
 800201a:	68ba      	ldr	r2, [r7, #8]
 800201c:	4413      	add	r3, r2
 800201e:	b2ca      	uxtb	r2, r1
 8002020:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < num_uint32; i++) {
 8002022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002024:	3301      	adds	r3, #1
 8002026:	633b      	str	r3, [r7, #48]	@ 0x30
 8002028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800202a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800202c:	429a      	cmp	r2, r3
 800202e:	d8c9      	bhi.n	8001fc4 <encrypt+0x160>
	}

	printc(MinDelay,"Encrypted data String: ");
 8002030:	4911      	ldr	r1, [pc, #68]	@ (8002078 <encrypt+0x214>)
 8002032:	200a      	movs	r0, #10
 8002034:	f7ff fcf0 	bl	8001a18 <printc>
	for (int i = 0; i < string_length; i++) {
 8002038:	2300      	movs	r3, #0
 800203a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800203c:	e00b      	b.n	8002056 <encrypt+0x1f2>
		printc(MinDelay,"%02X", En_data[i]);
 800203e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002040:	68ba      	ldr	r2, [r7, #8]
 8002042:	4413      	add	r3, r2
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	461a      	mov	r2, r3
 8002048:	490c      	ldr	r1, [pc, #48]	@ (800207c <encrypt+0x218>)
 800204a:	200a      	movs	r0, #10
 800204c:	f7ff fce4 	bl	8001a18 <printc>
	for (int i = 0; i < string_length; i++) {
 8002050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002052:	3301      	adds	r3, #1
 8002054:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002058:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800205a:	429a      	cmp	r2, r3
 800205c:	d8ef      	bhi.n	800203e <encrypt+0x1da>
	}
	printc(MinDelay,"\n\r");
 800205e:	4908      	ldr	r1, [pc, #32]	@ (8002080 <encrypt+0x21c>)
 8002060:	200a      	movs	r0, #10
 8002062:	f7ff fcd9 	bl	8001a18 <printc>
	return string_length;
 8002066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002068:	46b5      	mov	sp, r6
}
 800206a:	4618      	mov	r0, r3
 800206c:	373c      	adds	r7, #60	@ 0x3c
 800206e:	46bd      	mov	sp, r7
 8002070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002074:	200139c0 	.word	0x200139c0
 8002078:	08022624 	.word	0x08022624
 800207c:	0802263c 	.word	0x0802263c
 8002080:	08022644 	.word	0x08022644

08002084 <Decrypt>:

/*******************De-cryption Function************************/

void Decrypt(char *Data, uint8_t *De_data, int Key) {
 8002084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002088:	b097      	sub	sp, #92	@ 0x5c
 800208a:	af02      	add	r7, sp, #8
 800208c:	6278      	str	r0, [r7, #36]	@ 0x24
 800208e:	6239      	str	r1, [r7, #32]
 8002090:	61fa      	str	r2, [r7, #28]
 8002092:	466b      	mov	r3, sp
 8002094:	461e      	mov	r6, r3
	printc(100,"%s\n",Data);
 8002096:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002098:	4990      	ldr	r1, [pc, #576]	@ (80022dc <Decrypt+0x258>)
 800209a:	2064      	movs	r0, #100	@ 0x64
 800209c:	f7ff fcbc 	bl	8001a18 <printc>
	size_t string_length = strlen(Data);
 80020a0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80020a2:	f7fe f8ff 	bl	80002a4 <strlen>
 80020a6:	6478      	str	r0, [r7, #68]	@ 0x44
	size_t num_uint32 = ((string_length /2) + 3) / 4;
 80020a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020aa:	085b      	lsrs	r3, r3, #1
 80020ac:	3303      	adds	r3, #3
 80020ae:	089b      	lsrs	r3, r3, #2
 80020b0:	643b      	str	r3, [r7, #64]	@ 0x40
	uint8_t E_Data[string_length/2];
 80020b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020b4:	0859      	lsrs	r1, r3, #1
 80020b6:	460b      	mov	r3, r1
 80020b8:	3b01      	subs	r3, #1
 80020ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80020bc:	2300      	movs	r3, #0
 80020be:	460c      	mov	r4, r1
 80020c0:	461d      	mov	r5, r3
 80020c2:	f04f 0200 	mov.w	r2, #0
 80020c6:	f04f 0300 	mov.w	r3, #0
 80020ca:	00eb      	lsls	r3, r5, #3
 80020cc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80020d0:	00e2      	lsls	r2, r4, #3
 80020d2:	2300      	movs	r3, #0
 80020d4:	6139      	str	r1, [r7, #16]
 80020d6:	617b      	str	r3, [r7, #20]
 80020d8:	f04f 0200 	mov.w	r2, #0
 80020dc:	f04f 0300 	mov.w	r3, #0
 80020e0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80020e4:	4628      	mov	r0, r5
 80020e6:	00c3      	lsls	r3, r0, #3
 80020e8:	4620      	mov	r0, r4
 80020ea:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80020ee:	4620      	mov	r0, r4
 80020f0:	00c2      	lsls	r2, r0, #3
 80020f2:	1dcb      	adds	r3, r1, #7
 80020f4:	08db      	lsrs	r3, r3, #3
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	ebad 0d03 	sub.w	sp, sp, r3
 80020fc:	ab02      	add	r3, sp, #8
 80020fe:	3300      	adds	r3, #0
 8002100:	63bb      	str	r3, [r7, #56]	@ 0x38
	ReadF_Loc(2, Key);
 8002102:	69f9      	ldr	r1, [r7, #28]
 8002104:	2002      	movs	r0, #2
 8002106:	f018 fc1f 	bl	801a948 <ReadF_Loc>
	cKey_update(Key - 1);
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	3b01      	subs	r3, #1
 800210e:	4618      	mov	r0, r3
 8002110:	f001 fc54 	bl	80039bc <cKey_update>
	// Convert Data to uint32_t array
 	string_to_hex_array(Data, E_Data);
 8002114:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002116:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002118:	f000 fa4c 	bl	80025b4 <string_to_hex_array>
	uint32_t encryptedStr[num_uint32];
 800211c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800211e:	460b      	mov	r3, r1
 8002120:	3b01      	subs	r3, #1
 8002122:	637b      	str	r3, [r7, #52]	@ 0x34
 8002124:	2300      	movs	r3, #0
 8002126:	60b9      	str	r1, [r7, #8]
 8002128:	60fb      	str	r3, [r7, #12]
 800212a:	f04f 0200 	mov.w	r2, #0
 800212e:	f04f 0300 	mov.w	r3, #0
 8002132:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002136:	4628      	mov	r0, r5
 8002138:	0143      	lsls	r3, r0, #5
 800213a:	4620      	mov	r0, r4
 800213c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002140:	4620      	mov	r0, r4
 8002142:	0142      	lsls	r2, r0, #5
 8002144:	2300      	movs	r3, #0
 8002146:	6039      	str	r1, [r7, #0]
 8002148:	607b      	str	r3, [r7, #4]
 800214a:	f04f 0200 	mov.w	r2, #0
 800214e:	f04f 0300 	mov.w	r3, #0
 8002152:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002156:	4628      	mov	r0, r5
 8002158:	0143      	lsls	r3, r0, #5
 800215a:	4620      	mov	r0, r4
 800215c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002160:	4620      	mov	r0, r4
 8002162:	0142      	lsls	r2, r0, #5
 8002164:	008b      	lsls	r3, r1, #2
 8002166:	3307      	adds	r3, #7
 8002168:	08db      	lsrs	r3, r3, #3
 800216a:	00db      	lsls	r3, r3, #3
 800216c:	ebad 0d03 	sub.w	sp, sp, r3
 8002170:	ab02      	add	r3, sp, #8
 8002172:	3303      	adds	r3, #3
 8002174:	089b      	lsrs	r3, r3, #2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	633b      	str	r3, [r7, #48]	@ 0x30
	memset(encryptedStr,0,num_uint32*sizeof(uint32_t));
 800217a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	461a      	mov	r2, r3
 8002180:	2100      	movs	r1, #0
 8002182:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002184:	f01c fe44 	bl	801ee10 <memset>
	for (int i = 0; i < num_uint32; i++) {
 8002188:	2300      	movs	r3, #0
 800218a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800218c:	e020      	b.n	80021d0 <Decrypt+0x14c>
		encryptedStr[i] = (uint32_t) (E_Data[i * 4 + 0]) << 24
 800218e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002194:	5cd3      	ldrb	r3, [r2, r3]
 8002196:	061a      	lsls	r2, r3, #24
				| (uint32_t) (E_Data[i * 4 + 1]) << 16
 8002198:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	3301      	adds	r3, #1
 800219e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80021a0:	5ccb      	ldrb	r3, [r1, r3]
 80021a2:	041b      	lsls	r3, r3, #16
 80021a4:	431a      	orrs	r2, r3
				| (uint32_t) (E_Data[i * 4 + 2]) << 8
 80021a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	3302      	adds	r3, #2
 80021ac:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80021ae:	5ccb      	ldrb	r3, [r1, r3]
 80021b0:	021b      	lsls	r3, r3, #8
 80021b2:	4313      	orrs	r3, r2
				| (uint32_t) (E_Data[i * 4 + 3]);
 80021b4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80021b6:	0092      	lsls	r2, r2, #2
 80021b8:	3203      	adds	r2, #3
 80021ba:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80021bc:	5c8a      	ldrb	r2, [r1, r2]
 80021be:	ea43 0102 	orr.w	r1, r3, r2
		encryptedStr[i] = (uint32_t) (E_Data[i * 4 + 0]) << 24
 80021c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021c4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80021c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (int i = 0; i < num_uint32; i++) {
 80021ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80021cc:	3301      	adds	r3, #1
 80021ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80021d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80021d2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d8da      	bhi.n	800218e <Decrypt+0x10a>
	}

	// Decrypt the string
	uint32_t decryptedStr[num_uint32]; // Declaration
 80021d8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80021da:	460b      	mov	r3, r1
 80021dc:	3b01      	subs	r3, #1
 80021de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80021e0:	2300      	movs	r3, #0
 80021e2:	468a      	mov	sl, r1
 80021e4:	469b      	mov	fp, r3
 80021e6:	f04f 0200 	mov.w	r2, #0
 80021ea:	f04f 0300 	mov.w	r3, #0
 80021ee:	ea4f 134b 	mov.w	r3, fp, lsl #5
 80021f2:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 80021f6:	ea4f 124a 	mov.w	r2, sl, lsl #5
 80021fa:	2300      	movs	r3, #0
 80021fc:	4688      	mov	r8, r1
 80021fe:	4699      	mov	r9, r3
 8002200:	f04f 0200 	mov.w	r2, #0
 8002204:	f04f 0300 	mov.w	r3, #0
 8002208:	ea4f 1349 	mov.w	r3, r9, lsl #5
 800220c:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8002210:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8002214:	008b      	lsls	r3, r1, #2
 8002216:	3307      	adds	r3, #7
 8002218:	08db      	lsrs	r3, r3, #3
 800221a:	00db      	lsls	r3, r3, #3
 800221c:	ebad 0d03 	sub.w	sp, sp, r3
 8002220:	ab02      	add	r3, sp, #8
 8002222:	3303      	adds	r3, #3
 8002224:	089b      	lsrs	r3, r3, #2
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	62bb      	str	r3, [r7, #40]	@ 0x28
	memset(decryptedStr, 0, num_uint32 * sizeof(uint32_t)); // Initialization
 800222a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	461a      	mov	r2, r3
 8002230:	2100      	movs	r1, #0
 8002232:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002234:	f01c fdec 	bl	801ee10 <memset>
	HAL_CRYP_Decrypt(&hcryp, encryptedStr, num_uint32, decryptedStr, 2000);
 8002238:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800223a:	b29a      	uxth	r2, r3
 800223c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002240:	9300      	str	r3, [sp, #0]
 8002242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002244:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002246:	4826      	ldr	r0, [pc, #152]	@ (80022e0 <Decrypt+0x25c>)
 8002248:	f005 fc98 	bl	8007b7c <HAL_CRYP_Decrypt>

	// Convert decryptedStr to char array
	for (int i = 0; i < num_uint32; i++) {
 800224c:	2300      	movs	r3, #0
 800224e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002250:	e031      	b.n	80022b6 <Decrypt+0x232>
		// Since char is 8 bits and uint32_t is 32 bits,
		// we can use bitwise AND operations to extract
		// individual bytes from the uint32_t and store them in De_data
		De_data[i * 4 + 0] = (decryptedStr[i] >> 24) & 0xFF;
 8002252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002254:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800225a:	0e1a      	lsrs	r2, r3, #24
 800225c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	4619      	mov	r1, r3
 8002262:	6a3b      	ldr	r3, [r7, #32]
 8002264:	440b      	add	r3, r1
 8002266:	b2d2      	uxtb	r2, r2
 8002268:	701a      	strb	r2, [r3, #0]
		De_data[i * 4 + 1] = (decryptedStr[i] >> 16) & 0xFF;
 800226a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800226c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800226e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002272:	0c19      	lsrs	r1, r3, #16
 8002274:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	3301      	adds	r3, #1
 800227a:	6a3a      	ldr	r2, [r7, #32]
 800227c:	4413      	add	r3, r2
 800227e:	b2ca      	uxtb	r2, r1
 8002280:	701a      	strb	r2, [r3, #0]
		De_data[i * 4 + 2] = (decryptedStr[i] >> 8) & 0xFF;
 8002282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002284:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002286:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800228a:	0a19      	lsrs	r1, r3, #8
 800228c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	3302      	adds	r3, #2
 8002292:	6a3a      	ldr	r2, [r7, #32]
 8002294:	4413      	add	r3, r2
 8002296:	b2ca      	uxtb	r2, r1
 8002298:	701a      	strb	r2, [r3, #0]
		De_data[i * 4 + 3] = decryptedStr[i] & 0xFF;
 800229a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800229c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800229e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80022a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	3303      	adds	r3, #3
 80022a8:	6a3a      	ldr	r2, [r7, #32]
 80022aa:	4413      	add	r3, r2
 80022ac:	b2ca      	uxtb	r2, r1
 80022ae:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < num_uint32; i++) {
 80022b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80022b2:	3301      	adds	r3, #1
 80022b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80022b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80022b8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d8c9      	bhi.n	8002252 <Decrypt+0x1ce>
	}
	string_length = strlen(De_data);
 80022be:	6a38      	ldr	r0, [r7, #32]
 80022c0:	f7fd fff0 	bl	80002a4 <strlen>
 80022c4:	6478      	str	r0, [r7, #68]	@ 0x44
	// Null-terminate the decrypted string to print it properly
	De_data[string_length] = '\0';
 80022c6:	6a3a      	ldr	r2, [r7, #32]
 80022c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022ca:	4413      	add	r3, r2
 80022cc:	2200      	movs	r2, #0
 80022ce:	701a      	strb	r2, [r3, #0]
 80022d0:	46b5      	mov	sp, r6
//	printc(MinDelay,"Decrypted data String: ");
////	for (int i = 0; i < string_length; i++) {
//	print(1000,De_data,sizeof(De_data));
////	}
//	printc(MinDelay,"\n\r");
}
 80022d2:	bf00      	nop
 80022d4:	3754      	adds	r7, #84	@ 0x54
 80022d6:	46bd      	mov	sp, r7
 80022d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80022dc:	08022648 	.word	0x08022648
 80022e0:	200139c0 	.word	0x200139c0

080022e4 <k_Decrypt>:
void k_Decrypt(char *Data, uint8_t *De_data, int Key) {
 80022e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022e8:	b097      	sub	sp, #92	@ 0x5c
 80022ea:	af02      	add	r7, sp, #8
 80022ec:	6278      	str	r0, [r7, #36]	@ 0x24
 80022ee:	6239      	str	r1, [r7, #32]
 80022f0:	61fa      	str	r2, [r7, #28]
 80022f2:	466b      	mov	r3, sp
 80022f4:	461e      	mov	r6, r3
	printc(100,"%s\n",Data);
 80022f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022f8:	4995      	ldr	r1, [pc, #596]	@ (8002550 <k_Decrypt+0x26c>)
 80022fa:	2064      	movs	r0, #100	@ 0x64
 80022fc:	f7ff fb8c 	bl	8001a18 <printc>
	size_t string_length = strlen(Data);
 8002300:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002302:	f7fd ffcf 	bl	80002a4 <strlen>
 8002306:	6478      	str	r0, [r7, #68]	@ 0x44
	size_t num_uint32 = ((string_length /2) + 3) / 4;
 8002308:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800230a:	085b      	lsrs	r3, r3, #1
 800230c:	3303      	adds	r3, #3
 800230e:	089b      	lsrs	r3, r3, #2
 8002310:	643b      	str	r3, [r7, #64]	@ 0x40
	uint8_t E_Data[string_length/2];
 8002312:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002314:	0859      	lsrs	r1, r3, #1
 8002316:	460b      	mov	r3, r1
 8002318:	3b01      	subs	r3, #1
 800231a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800231c:	2300      	movs	r3, #0
 800231e:	460c      	mov	r4, r1
 8002320:	461d      	mov	r5, r3
 8002322:	f04f 0200 	mov.w	r2, #0
 8002326:	f04f 0300 	mov.w	r3, #0
 800232a:	00eb      	lsls	r3, r5, #3
 800232c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002330:	00e2      	lsls	r2, r4, #3
 8002332:	2300      	movs	r3, #0
 8002334:	6139      	str	r1, [r7, #16]
 8002336:	617b      	str	r3, [r7, #20]
 8002338:	f04f 0200 	mov.w	r2, #0
 800233c:	f04f 0300 	mov.w	r3, #0
 8002340:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002344:	4628      	mov	r0, r5
 8002346:	00c3      	lsls	r3, r0, #3
 8002348:	4620      	mov	r0, r4
 800234a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800234e:	4620      	mov	r0, r4
 8002350:	00c2      	lsls	r2, r0, #3
 8002352:	1dcb      	adds	r3, r1, #7
 8002354:	08db      	lsrs	r3, r3, #3
 8002356:	00db      	lsls	r3, r3, #3
 8002358:	ebad 0d03 	sub.w	sp, sp, r3
 800235c:	ab02      	add	r3, sp, #8
 800235e:	3300      	adds	r3, #0
 8002360:	63bb      	str	r3, [r7, #56]	@ 0x38
	sKey_update(Key - 1);
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	3b01      	subs	r3, #1
 8002366:	4618      	mov	r0, r3
 8002368:	f001 fb00 	bl	800396c <sKey_update>
	// Convert Data to uint32_t array
 	string_to_hex_array(Data, E_Data);
 800236c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800236e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002370:	f000 f920 	bl	80025b4 <string_to_hex_array>
	uint32_t encryptedStr[num_uint32];
 8002374:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002376:	460b      	mov	r3, r1
 8002378:	3b01      	subs	r3, #1
 800237a:	637b      	str	r3, [r7, #52]	@ 0x34
 800237c:	2300      	movs	r3, #0
 800237e:	60b9      	str	r1, [r7, #8]
 8002380:	60fb      	str	r3, [r7, #12]
 8002382:	f04f 0200 	mov.w	r2, #0
 8002386:	f04f 0300 	mov.w	r3, #0
 800238a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800238e:	4628      	mov	r0, r5
 8002390:	0143      	lsls	r3, r0, #5
 8002392:	4620      	mov	r0, r4
 8002394:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002398:	4620      	mov	r0, r4
 800239a:	0142      	lsls	r2, r0, #5
 800239c:	2300      	movs	r3, #0
 800239e:	6039      	str	r1, [r7, #0]
 80023a0:	607b      	str	r3, [r7, #4]
 80023a2:	f04f 0200 	mov.w	r2, #0
 80023a6:	f04f 0300 	mov.w	r3, #0
 80023aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023ae:	4628      	mov	r0, r5
 80023b0:	0143      	lsls	r3, r0, #5
 80023b2:	4620      	mov	r0, r4
 80023b4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80023b8:	4620      	mov	r0, r4
 80023ba:	0142      	lsls	r2, r0, #5
 80023bc:	008b      	lsls	r3, r1, #2
 80023be:	3307      	adds	r3, #7
 80023c0:	08db      	lsrs	r3, r3, #3
 80023c2:	00db      	lsls	r3, r3, #3
 80023c4:	ebad 0d03 	sub.w	sp, sp, r3
 80023c8:	ab02      	add	r3, sp, #8
 80023ca:	3303      	adds	r3, #3
 80023cc:	089b      	lsrs	r3, r3, #2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	633b      	str	r3, [r7, #48]	@ 0x30
	memset(encryptedStr,0,num_uint32*sizeof(uint32_t));
 80023d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	461a      	mov	r2, r3
 80023d8:	2100      	movs	r1, #0
 80023da:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80023dc:	f01c fd18 	bl	801ee10 <memset>
	for (int i = 0; i < num_uint32; i++) {
 80023e0:	2300      	movs	r3, #0
 80023e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80023e4:	e020      	b.n	8002428 <k_Decrypt+0x144>
		encryptedStr[i] = (uint32_t) (E_Data[i * 4 + 0]) << 24
 80023e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80023ec:	5cd3      	ldrb	r3, [r2, r3]
 80023ee:	061a      	lsls	r2, r3, #24
				| (uint32_t) (E_Data[i * 4 + 1]) << 16
 80023f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	3301      	adds	r3, #1
 80023f6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80023f8:	5ccb      	ldrb	r3, [r1, r3]
 80023fa:	041b      	lsls	r3, r3, #16
 80023fc:	431a      	orrs	r2, r3
				| (uint32_t) (E_Data[i * 4 + 2]) << 8
 80023fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	3302      	adds	r3, #2
 8002404:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002406:	5ccb      	ldrb	r3, [r1, r3]
 8002408:	021b      	lsls	r3, r3, #8
 800240a:	4313      	orrs	r3, r2
				| (uint32_t) (E_Data[i * 4 + 3]);
 800240c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800240e:	0092      	lsls	r2, r2, #2
 8002410:	3203      	adds	r2, #3
 8002412:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002414:	5c8a      	ldrb	r2, [r1, r2]
 8002416:	ea43 0102 	orr.w	r1, r3, r2
		encryptedStr[i] = (uint32_t) (E_Data[i * 4 + 0]) << 24
 800241a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800241c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800241e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (int i = 0; i < num_uint32; i++) {
 8002422:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002424:	3301      	adds	r3, #1
 8002426:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002428:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800242a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800242c:	429a      	cmp	r2, r3
 800242e:	d8da      	bhi.n	80023e6 <k_Decrypt+0x102>
	}

	// Decrypt the string
	uint32_t decryptedStr[num_uint32]; // Declaration
 8002430:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002432:	460b      	mov	r3, r1
 8002434:	3b01      	subs	r3, #1
 8002436:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002438:	2300      	movs	r3, #0
 800243a:	468a      	mov	sl, r1
 800243c:	469b      	mov	fp, r3
 800243e:	f04f 0200 	mov.w	r2, #0
 8002442:	f04f 0300 	mov.w	r3, #0
 8002446:	ea4f 134b 	mov.w	r3, fp, lsl #5
 800244a:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 800244e:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8002452:	2300      	movs	r3, #0
 8002454:	4688      	mov	r8, r1
 8002456:	4699      	mov	r9, r3
 8002458:	f04f 0200 	mov.w	r2, #0
 800245c:	f04f 0300 	mov.w	r3, #0
 8002460:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8002464:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8002468:	ea4f 1248 	mov.w	r2, r8, lsl #5
 800246c:	008b      	lsls	r3, r1, #2
 800246e:	3307      	adds	r3, #7
 8002470:	08db      	lsrs	r3, r3, #3
 8002472:	00db      	lsls	r3, r3, #3
 8002474:	ebad 0d03 	sub.w	sp, sp, r3
 8002478:	ab02      	add	r3, sp, #8
 800247a:	3303      	adds	r3, #3
 800247c:	089b      	lsrs	r3, r3, #2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	62bb      	str	r3, [r7, #40]	@ 0x28
	memset(decryptedStr, 0, num_uint32 * sizeof(uint32_t)); // Initialization
 8002482:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	461a      	mov	r2, r3
 8002488:	2100      	movs	r1, #0
 800248a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800248c:	f01c fcc0 	bl	801ee10 <memset>
	HAL_CRYP_Decrypt(&hcryp, encryptedStr, num_uint32, decryptedStr, 2000);
 8002490:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002492:	b29a      	uxth	r2, r3
 8002494:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002498:	9300      	str	r3, [sp, #0]
 800249a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800249c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800249e:	482d      	ldr	r0, [pc, #180]	@ (8002554 <k_Decrypt+0x270>)
 80024a0:	f005 fb6c 	bl	8007b7c <HAL_CRYP_Decrypt>

	// Convert decryptedStr to char array
	for (int i = 0; i < num_uint32; i++) {
 80024a4:	2300      	movs	r3, #0
 80024a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80024a8:	e031      	b.n	800250e <k_Decrypt+0x22a>
		// Since char is 8 bits and uint32_t is 32 bits,
		// we can use bitwise AND operations to extract
		// individual bytes from the uint32_t and store them in De_data
		De_data[i * 4 + 0] = (decryptedStr[i] >> 24) & 0xFF;
 80024aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80024ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024b2:	0e1a      	lsrs	r2, r3, #24
 80024b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	4619      	mov	r1, r3
 80024ba:	6a3b      	ldr	r3, [r7, #32]
 80024bc:	440b      	add	r3, r1
 80024be:	b2d2      	uxtb	r2, r2
 80024c0:	701a      	strb	r2, [r3, #0]
		De_data[i * 4 + 1] = (decryptedStr[i] >> 16) & 0xFF;
 80024c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80024c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024ca:	0c19      	lsrs	r1, r3, #16
 80024cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	3301      	adds	r3, #1
 80024d2:	6a3a      	ldr	r2, [r7, #32]
 80024d4:	4413      	add	r3, r2
 80024d6:	b2ca      	uxtb	r2, r1
 80024d8:	701a      	strb	r2, [r3, #0]
		De_data[i * 4 + 2] = (decryptedStr[i] >> 8) & 0xFF;
 80024da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80024de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024e2:	0a19      	lsrs	r1, r3, #8
 80024e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	3302      	adds	r3, #2
 80024ea:	6a3a      	ldr	r2, [r7, #32]
 80024ec:	4413      	add	r3, r2
 80024ee:	b2ca      	uxtb	r2, r1
 80024f0:	701a      	strb	r2, [r3, #0]
		De_data[i * 4 + 3] = decryptedStr[i] & 0xFF;
 80024f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80024f6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80024fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	3303      	adds	r3, #3
 8002500:	6a3a      	ldr	r2, [r7, #32]
 8002502:	4413      	add	r3, r2
 8002504:	b2ca      	uxtb	r2, r1
 8002506:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < num_uint32; i++) {
 8002508:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800250a:	3301      	adds	r3, #1
 800250c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800250e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002510:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002512:	429a      	cmp	r2, r3
 8002514:	d8c9      	bhi.n	80024aa <k_Decrypt+0x1c6>
	}
	string_length = strlen(De_data);
 8002516:	6a38      	ldr	r0, [r7, #32]
 8002518:	f7fd fec4 	bl	80002a4 <strlen>
 800251c:	6478      	str	r0, [r7, #68]	@ 0x44
	// Null-terminate the decrypted string to print it properly
	De_data[string_length] = '\0';
 800251e:	6a3a      	ldr	r2, [r7, #32]
 8002520:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002522:	4413      	add	r3, r2
 8002524:	2200      	movs	r2, #0
 8002526:	701a      	strb	r2, [r3, #0]

//	 Print the decrypted string
	printc(MinDelay,"Decrypted data String: ");
 8002528:	490b      	ldr	r1, [pc, #44]	@ (8002558 <k_Decrypt+0x274>)
 800252a:	200a      	movs	r0, #10
 800252c:	f7ff fa74 	bl	8001a18 <printc>
//	for (int i = 0; i < string_length; i++) {
	printc(MinDelay,"%s", De_data);
 8002530:	6a3a      	ldr	r2, [r7, #32]
 8002532:	490a      	ldr	r1, [pc, #40]	@ (800255c <k_Decrypt+0x278>)
 8002534:	200a      	movs	r0, #10
 8002536:	f7ff fa6f 	bl	8001a18 <printc>
//	}
	printc(MinDelay,"\n\r");
 800253a:	4909      	ldr	r1, [pc, #36]	@ (8002560 <k_Decrypt+0x27c>)
 800253c:	200a      	movs	r0, #10
 800253e:	f7ff fa6b 	bl	8001a18 <printc>
 8002542:	46b5      	mov	sp, r6
}
 8002544:	bf00      	nop
 8002546:	3754      	adds	r7, #84	@ 0x54
 8002548:	46bd      	mov	sp, r7
 800254a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800254e:	bf00      	nop
 8002550:	08022648 	.word	0x08022648
 8002554:	200139c0 	.word	0x200139c0
 8002558:	0802264c 	.word	0x0802264c
 800255c:	08022664 	.word	0x08022664
 8002560:	08022644 	.word	0x08022644

08002564 <addPadding>:
		dataBuffer++;
	}
	return checksum;
}

void addPadding(uint8_t *dataBody, size_t num_elements) {
 8002564:	b480      	push	{r7}
 8002566:	b085      	sub	sp, #20
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]
	uint8_t padding_size = 16 - (num_elements % 16);
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	b2db      	uxtb	r3, r3
 8002572:	f003 030f 	and.w	r3, r3, #15
 8002576:	b2db      	uxtb	r3, r3
 8002578:	f1c3 0310 	rsb	r3, r3, #16
 800257c:	72fb      	strb	r3, [r7, #11]
	if (padding_size < 16) {
 800257e:	7afb      	ldrb	r3, [r7, #11]
 8002580:	2b0f      	cmp	r3, #15
 8002582:	d810      	bhi.n	80025a6 <addPadding+0x42>
		for (size_t i = num_elements; i < num_elements + padding_size; i++) {
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	60fb      	str	r3, [r7, #12]
 8002588:	e007      	b.n	800259a <addPadding+0x36>
			dataBody[i] = padding_size;
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	4413      	add	r3, r2
 8002590:	7afa      	ldrb	r2, [r7, #11]
 8002592:	701a      	strb	r2, [r3, #0]
		for (size_t i = num_elements; i < num_elements + padding_size; i++) {
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	3301      	adds	r3, #1
 8002598:	60fb      	str	r3, [r7, #12]
 800259a:	7afa      	ldrb	r2, [r7, #11]
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	4413      	add	r3, r2
 80025a0:	68fa      	ldr	r2, [r7, #12]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d3f1      	bcc.n	800258a <addPadding+0x26>
		}
	}
}
 80025a6:	bf00      	nop
 80025a8:	3714      	adds	r7, #20
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
	...

080025b4 <string_to_hex_array>:

void string_to_hex_array(const char hex_string [],uint8_t hex_array[]) {
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b086      	sub	sp, #24
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
	// Calculate the length of the hex string
	size_t hex_string_length = strlen(hex_string);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f7fd fe70 	bl	80002a4 <strlen>
 80025c4:	6138      	str	r0, [r7, #16]
	size_t array_length1;

	// Check if the length is even
	if (hex_string_length % 2 != 0) {
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	f003 0301 	and.w	r3, r3, #1
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d008      	beq.n	80025e2 <string_to_hex_array+0x2e>
		fprintf(stderr, "Input string length must be even.\n");
 80025d0:	4b11      	ldr	r3, [pc, #68]	@ (8002618 <string_to_hex_array+0x64>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	2222      	movs	r2, #34	@ 0x22
 80025d8:	2101      	movs	r1, #1
 80025da:	4810      	ldr	r0, [pc, #64]	@ (800261c <string_to_hex_array+0x68>)
 80025dc:	f01c fa7a 	bl	801ead4 <fwrite>
		return NULL;
 80025e0:	e017      	b.n	8002612 <string_to_hex_array+0x5e>
	}

	// Calculate the length of the resulting array
	array_length1 = hex_string_length / 2;
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	085b      	lsrs	r3, r3, #1
 80025e6:	60fb      	str	r3, [r7, #12]

	// Allocate memory for the array

	// Convert the hex string to hex values and store in the array
	for (size_t i = 0; i < array_length1; ++i) {
 80025e8:	2300      	movs	r3, #0
 80025ea:	617b      	str	r3, [r7, #20]
 80025ec:	e00d      	b.n	800260a <string_to_hex_array+0x56>
		sscanf(hex_string + 2 * i, "%2X", &hex_array[i]);
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	005b      	lsls	r3, r3, #1
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	18d0      	adds	r0, r2, r3
 80025f6:	683a      	ldr	r2, [r7, #0]
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	4413      	add	r3, r2
 80025fc:	461a      	mov	r2, r3
 80025fe:	4908      	ldr	r1, [pc, #32]	@ (8002620 <string_to_hex_array+0x6c>)
 8002600:	f01c faca 	bl	801eb98 <siscanf>
	for (size_t i = 0; i < array_length1; ++i) {
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	3301      	adds	r3, #1
 8002608:	617b      	str	r3, [r7, #20]
 800260a:	697a      	ldr	r2, [r7, #20]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	429a      	cmp	r2, r3
 8002610:	d3ed      	bcc.n	80025ee <string_to_hex_array+0x3a>
	}
}
 8002612:	3718      	adds	r7, #24
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	20000224 	.word	0x20000224
 800261c:	08022668 	.word	0x08022668
 8002620:	0802268c 	.word	0x0802268c

08002624 <MX_FLASH_Init>:

/* USER CODE END 0 */

/* FLASH init function */
void MX_FLASH_Init(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b090      	sub	sp, #64	@ 0x40
 8002628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FLASH_Init 0 */

  /* USER CODE END FLASH_Init 0 */

  FLASH_OBProgramInitTypeDef pOBInit = {0};
 800262a:	1d3b      	adds	r3, r7, #4
 800262c:	223c      	movs	r2, #60	@ 0x3c
 800262e:	2100      	movs	r1, #0
 8002630:	4618      	mov	r0, r3
 8002632:	f01c fbed 	bl	801ee10 <memset>

  /* USER CODE BEGIN FLASH_Init 1 */

  /* USER CODE END FLASH_Init 1 */
  if (HAL_FLASH_Unlock() != HAL_OK)
 8002636:	f008 fd4b 	bl	800b0d0 <HAL_FLASH_Unlock>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <MX_FLASH_Init+0x20>
  {
    Error_Handler();
 8002640:	f002 f88d 	bl	800475e <Error_Handler>
  }

  /* Option Bytes settings */

  if (HAL_FLASH_OB_Unlock() != HAL_OK)
 8002644:	f008 fd86 	bl	800b154 <HAL_FLASH_OB_Unlock>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <MX_FLASH_Init+0x2e>
  {
    Error_Handler();
 800264e:	f002 f886 	bl	800475e <Error_Handler>
   //!!! HAL_FLASHEx_OBProgram is commented because some parameters are missing
  //pOBInit.OptionType = OPTIONBYTE_PROD_STATE|OPTIONBYTE_USER;
  //pOBInit.USERType = ;
  //pOBInit.USERConfig = ;
    //HAL_FLASHEx_OBProgram(&pOBInit);
  if (HAL_FLASH_OB_Lock() != HAL_OK)
 8002652:	f008 fda1 	bl	800b198 <HAL_FLASH_OB_Lock>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <MX_FLASH_Init+0x3c>
  {
    Error_Handler();
 800265c:	f002 f87f 	bl	800475e <Error_Handler>
  }
  if (HAL_FLASH_Lock() != HAL_OK)
 8002660:	f008 fd5c 	bl	800b11c <HAL_FLASH_Lock>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <MX_FLASH_Init+0x4a>
  {
    Error_Handler();
 800266a:	f002 f878 	bl	800475e <Error_Handler>

  /* USER CODE BEGIN FLASH_Init 2 */

  /* USER CODE END FLASH_Init 2 */

}
 800266e:	bf00      	nop
 8002670:	3740      	adds	r7, #64	@ 0x40
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
	...

08002678 <init>:
		"NA", temper = 'C';
extern uint64_t CP, CD;
char CP_Data[8] = { 0 };
char tmpSplit[5][100];
char PHnum[10] = { 0 };
void init() {
 8002678:	b5b0      	push	{r4, r5, r7, lr}
 800267a:	b088      	sub	sp, #32
 800267c:	af02      	add	r7, sp, #8
	init_GPSData(&L86Data);
 800267e:	483b      	ldr	r0, [pc, #236]	@ (800276c <init+0xf4>)
 8002680:	f019 f96a 	bl	801b958 <init_GPSData>
	initRTC(&hrtc);
 8002684:	483a      	ldr	r0, [pc, #232]	@ (8002770 <init+0xf8>)
 8002686:	f018 fbc9 	bl	801ae1c <initRTC>
	setupPrintUart(&huart6, true);
 800268a:	2101      	movs	r1, #1
 800268c:	4839      	ldr	r0, [pc, #228]	@ (8002774 <init+0xfc>)
 800268e:	f7ff f9a9 	bl	80019e4 <setupPrintUart>
	clear_RConfiguration();
 8002692:	f015 fac5 	bl	8017c20 <clear_RConfiguration>
	getAllConfig();
 8002696:	f016 fd11 	bl	80190bc <getAllConfig>
	SGET_LAT(&latHitory);
 800269a:	4837      	ldr	r0, [pc, #220]	@ (8002778 <init+0x100>)
 800269c:	f015 ffc4 	bl	8018628 <SGET_LAT>
	SGET_LON(&lonHistory);
 80026a0:	4836      	ldr	r0, [pc, #216]	@ (800277c <init+0x104>)
 80026a2:	f015 ffd5 	bl	8018650 <SGET_LON>
	initializeStack(&dataQueue);
 80026a6:	4836      	ldr	r0, [pc, #216]	@ (8002780 <init+0x108>)
 80026a8:	f7ff fb32 	bl	8001d10 <initializeStack>
	initializeStack(&packetHistoryQueue);
 80026ac:	4835      	ldr	r0, [pc, #212]	@ (8002784 <init+0x10c>)
 80026ae:	f7ff fb2f 	bl	8001d10 <initializeStack>
	HAL_TIM_Base_Start_IT(&htim6);
 80026b2:	4835      	ldr	r0, [pc, #212]	@ (8002788 <init+0x110>)
 80026b4:	f00f fe28 	bl	8012308 <HAL_TIM_Base_Start_IT>
	initEvb(&hadc1);
 80026b8:	4834      	ldr	r0, [pc, #208]	@ (800278c <init+0x114>)
 80026ba:	f018 fab9 	bl	801ac30 <initEvb>
	initIvb(&hadc2);
 80026be:	4834      	ldr	r0, [pc, #208]	@ (8002790 <init+0x118>)
 80026c0:	f018 fac6 	bl	801ac50 <initIvb>

	printc(MinDelay, "\nTML Set Up Started.....\n\r Version %s",
 80026c4:	4a33      	ldr	r2, [pc, #204]	@ (8002794 <init+0x11c>)
 80026c6:	4934      	ldr	r1, [pc, #208]	@ (8002798 <init+0x120>)
 80026c8:	200a      	movs	r0, #10
 80026ca:	f7ff f9a5 	bl	8001a18 <printc>
			Firmware_Version);
	resetEC200: if (setupEc200(&huart1)) {
 80026ce:	4833      	ldr	r0, [pc, #204]	@ (800279c <init+0x124>)
 80026d0:	f7ff f8dc 	bl	800188c <setupEc200>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d014      	beq.n	8002704 <init+0x8c>
		printc(MinDelay, "SetupEc200Done\n");
 80026da:	4931      	ldr	r1, [pc, #196]	@ (80027a0 <init+0x128>)
 80026dc:	200a      	movs	r0, #10
 80026de:	f7ff f99b 	bl	8001a18 <printc>
	} else {
		printc(MinDelay, "SetupEc200 Failed\n");
		goto resetEC200;
	}
	SET_FOTA_SIZE("155");
 80026e2:	4830      	ldr	r0, [pc, #192]	@ (80027a4 <init+0x12c>)
 80026e4:	f016 fc6a 	bl	8018fbc <SET_FOTA_SIZE>

	SET_FOTA_UPDATE("5.0.9");
 80026e8:	482f      	ldr	r0, [pc, #188]	@ (80027a8 <init+0x130>)
 80026ea:	f016 fcab 	bl	8019044 <SET_FOTA_UPDATE>
//	updateStatus = true;
//		SET_SKEY3("1D68A17E0EE8525CC9876BD573C9CDCC");
//		SET_SKEY2("967B9E42EC8F3E5F3D2DE0A5003F9129");
//		SET_SKEY1("0F402D78266379087F7C1E0A02AD1D6D");

	SMS_Init();
 80026ee:	f019 ff51 	bl	801c594 <SMS_Init>
	Check_USMS();
 80026f2:	f000 fef9 	bl	80034e8 <Check_USMS>
	if (SP == 1) {
 80026f6:	4b2d      	ldr	r3, [pc, #180]	@ (80027ac <init+0x134>)
 80026f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026fc:	1e51      	subs	r1, r2, #1
 80026fe:	430b      	orrs	r3, r1
 8002700:	d124      	bne.n	800274c <init+0xd4>
 8002702:	e004      	b.n	800270e <init+0x96>
		printc(MinDelay, "SetupEc200 Failed\n");
 8002704:	492a      	ldr	r1, [pc, #168]	@ (80027b0 <init+0x138>)
 8002706:	200a      	movs	r0, #10
 8002708:	f7ff f986 	bl	8001a18 <printc>
		goto resetEC200;
 800270c:	e7df      	b.n	80026ce <init+0x56>
		if (PHnum != NULL) {
			char SmBuff[] = { "FOTA Update Complete" };
 800270e:	4b29      	ldr	r3, [pc, #164]	@ (80027b4 <init+0x13c>)
 8002710:	463c      	mov	r4, r7
 8002712:	461d      	mov	r5, r3
 8002714:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002716:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002718:	e895 0003 	ldmia.w	r5, {r0, r1}
 800271c:	6020      	str	r0, [r4, #0]
 800271e:	3404      	adds	r4, #4
 8002720:	7021      	strb	r1, [r4, #0]
			SMS_FSend(PHnum, SmBuff);
 8002722:	463b      	mov	r3, r7
 8002724:	4619      	mov	r1, r3
 8002726:	4824      	ldr	r0, [pc, #144]	@ (80027b8 <init+0x140>)
 8002728:	f01a f884 	bl	801c834 <SMS_FSend>
			writeF_CP((uint64_t) 1, (uint64_t) 0, (uint64_t) 0);
 800272c:	f04f 0200 	mov.w	r2, #0
 8002730:	f04f 0300 	mov.w	r3, #0
 8002734:	e9cd 2300 	strd	r2, r3, [sp]
 8002738:	f04f 0200 	mov.w	r2, #0
 800273c:	f04f 0300 	mov.w	r3, #0
 8002740:	f04f 0001 	mov.w	r0, #1
 8002744:	f04f 0100 	mov.w	r1, #0
 8002748:	f014 f814 	bl	8016774 <writeF_CP>
		}
	}
	TCP_init();
 800274c:	f01a f90a 	bl	801c964 <TCP_init>
	initCan();
 8002750:	f7fe fc8c 	bl	800106c <initCan>
	L86_setup(&huart5);
 8002754:	4819      	ldr	r0, [pc, #100]	@ (80027bc <init+0x144>)
 8002756:	f018 fedd 	bl	801b514 <L86_setup>

	printc(MinDelay, "\nTML Set Up Done.....\n\r");
 800275a:	4919      	ldr	r1, [pc, #100]	@ (80027c0 <init+0x148>)
 800275c:	200a      	movs	r0, #10
 800275e:	f7ff f95b 	bl	8001a18 <printc>
}
 8002762:	bf00      	nop
 8002764:	3718      	adds	r7, #24
 8002766:	46bd      	mov	sp, r7
 8002768:	bdb0      	pop	{r4, r5, r7, pc}
 800276a:	bf00      	nop
 800276c:	20000f60 	.word	0x20000f60
 8002770:	20013bbc 	.word	0x20013bbc
 8002774:	20013d68 	.word	0x20013d68
 8002778:	20000f48 	.word	0x20000f48
 800277c:	20000f50 	.word	0x20000f50
 8002780:	200017ac 	.word	0x200017ac
 8002784:	2000a3b0 	.word	0x2000a3b0
 8002788:	20013bf4 	.word	0x20013bf4
 800278c:	200138dc 	.word	0x200138dc
 8002790:	20013944 	.word	0x20013944
 8002794:	2000001c 	.word	0x2000001c
 8002798:	08022690 	.word	0x08022690
 800279c:	20013cd4 	.word	0x20013cd4
 80027a0:	080226b8 	.word	0x080226b8
 80027a4:	080226dc 	.word	0x080226dc
 80027a8:	080226e0 	.word	0x080226e0
 80027ac:	200017a0 	.word	0x200017a0
 80027b0:	080226c8 	.word	0x080226c8
 80027b4:	08022700 	.word	0x08022700
 80027b8:	200138d0 	.word	0x200138d0
 80027bc:	20013c40 	.word	0x20013c40
 80027c0:	080226e8 	.word	0x080226e8

080027c4 <loop>:
float internal = 0;
void loop() {
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b0b2      	sub	sp, #200	@ 0xc8
 80027c8:	af00      	add	r7, sp, #0

//	Every 1 minute will check for gsmParameter and Go to sleep when ignition is off
	if (HAL_GetTick() % 10000 == 0) {
 80027ca:	f003 f8f1 	bl	80059b0 <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	4b3a      	ldr	r3, [pc, #232]	@ (80028bc <loop+0xf8>)
 80027d2:	fba3 1302 	umull	r1, r3, r3, r2
 80027d6:	0b5b      	lsrs	r3, r3, #13
 80027d8:	f242 7110 	movw	r1, #10000	@ 0x2710
 80027dc:	fb01 f303 	mul.w	r3, r1, r3
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d111      	bne.n	800280a <loop+0x46>
		if (count >= 6) {
 80027e6:	4b36      	ldr	r3, [pc, #216]	@ (80028c0 <loop+0xfc>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2b05      	cmp	r3, #5
 80027ec:	dd08      	ble.n	8002800 <loop+0x3c>
			printc(MinDelay, "Came inside for gsm update ");
 80027ee:	4935      	ldr	r1, [pc, #212]	@ (80028c4 <loop+0x100>)
 80027f0:	200a      	movs	r0, #10
 80027f2:	f7ff f911 	bl	8001a18 <printc>
			gsmParameterUpdate();
 80027f6:	f000 f9a3 	bl	8002b40 <gsmParameterUpdate>
			count = 0;
 80027fa:	4b31      	ldr	r3, [pc, #196]	@ (80028c0 <loop+0xfc>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	601a      	str	r2, [r3, #0]

			//will
		}

		count++;
 8002800:	4b2f      	ldr	r3, [pc, #188]	@ (80028c0 <loop+0xfc>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	3301      	adds	r3, #1
 8002806:	4a2e      	ldr	r2, [pc, #184]	@ (80028c0 <loop+0xfc>)
 8002808:	6013      	str	r3, [r2, #0]
	}
	if (sleepcount > 6) {
 800280a:	4b2f      	ldr	r3, [pc, #188]	@ (80028c8 <loop+0x104>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2b06      	cmp	r3, #6
 8002810:	dd04      	ble.n	800281c <loop+0x58>
		GO_TO_SLEEP();
 8002812:	f018 fc75 	bl	801b100 <GO_TO_SLEEP>
		sleepcount = 0;
 8002816:	4b2c      	ldr	r3, [pc, #176]	@ (80028c8 <loop+0x104>)
 8002818:	2200      	movs	r2, #0
 800281a:	601a      	str	r2, [r3, #0]
	}
	if (FLAG_IGN == 1) {
 800281c:	4b2b      	ldr	r3, [pc, #172]	@ (80028cc <loop+0x108>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2b01      	cmp	r3, #1
 8002822:	d10a      	bne.n	800283a <loop+0x76>
		generateData("IN");
 8002824:	482a      	ldr	r0, [pc, #168]	@ (80028d0 <loop+0x10c>)
 8002826:	f000 fbf1 	bl	800300c <generateData>
		sendPDDataFlag = true;
 800282a:	4b2a      	ldr	r3, [pc, #168]	@ (80028d4 <loop+0x110>)
 800282c:	2201      	movs	r2, #1
 800282e:	701a      	strb	r2, [r3, #0]
		task2();
 8002830:	f000 fb5c 	bl	8002eec <task2>
		FLAG_IGN = 0;
 8002834:	4b25      	ldr	r3, [pc, #148]	@ (80028cc <loop+0x108>)
 8002836:	2200      	movs	r2, #0
 8002838:	601a      	str	r2, [r3, #0]
	}
// Read uart Cmd for cota and handle it
	if (getPrintUartCmdStatus()) {
 800283a:	f000 f95f 	bl	8002afc <getPrintUartCmdStatus>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d01d      	beq.n	8002880 <loop+0xbc>
		char cotaResp[200] = { };
 8002844:	2300      	movs	r3, #0
 8002846:	603b      	str	r3, [r7, #0]
 8002848:	1d3b      	adds	r3, r7, #4
 800284a:	22c4      	movs	r2, #196	@ 0xc4
 800284c:	2100      	movs	r1, #0
 800284e:	4618      	mov	r0, r3
 8002850:	f01c fade 	bl	801ee10 <memset>
		if (SMS_COTA(CMD_Buf, cotaResp)) {
 8002854:	463b      	mov	r3, r7
 8002856:	4619      	mov	r1, r3
 8002858:	481f      	ldr	r0, [pc, #124]	@ (80028d8 <loop+0x114>)
 800285a:	f015 f9eb 	bl	8017c34 <SMS_COTA>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d006      	beq.n	8002872 <loop+0xae>
			printc(MinDelay, "SMS COTA Success %s\n", cotaResp);
 8002864:	463b      	mov	r3, r7
 8002866:	461a      	mov	r2, r3
 8002868:	491c      	ldr	r1, [pc, #112]	@ (80028dc <loop+0x118>)
 800286a:	200a      	movs	r0, #10
 800286c:	f7ff f8d4 	bl	8001a18 <printc>
 8002870:	e003      	b.n	800287a <loop+0xb6>
		} else {
			printc(MinDelay, "SMS COTA Fail\n");
 8002872:	491b      	ldr	r1, [pc, #108]	@ (80028e0 <loop+0x11c>)
 8002874:	200a      	movs	r0, #10
 8002876:	f7ff f8cf 	bl	8001a18 <printc>
		}
		setPrintUartCmdStatus(false);
 800287a:	2000      	movs	r0, #0
 800287c:	f000 f92e 	bl	8002adc <setPrintUartCmdStatus>
	}
// Handle When any SMS come for get information
	if (getMessageStatus())
 8002880:	f019 ffbc 	bl	801c7fc <getMessageStatus>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <loop+0xca>
		handleCotaSMS();
 800288a:	f000 f837 	bl	80028fc <handleCotaSMS>
//When update is available it will update the device
	if (getUpdateStatus()) {
 800288e:	f015 f9ab 	bl	8017be8 <getUpdateStatus>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d00a      	beq.n	80028ae <loop+0xea>
		GNSS_OFF();
 8002898:	2201      	movs	r2, #1
 800289a:	2104      	movs	r1, #4
 800289c:	4811      	ldr	r0, [pc, #68]	@ (80028e4 <loop+0x120>)
 800289e:	f008 ffd9 	bl	800b854 <HAL_GPIO_WritePin>
		update();
 80028a2:	f018 f809 	bl	801a8b8 <update>
//		char SBf[]={"FOTA_Updated"};
//		SMS_Send(PHnum,SBf );
		setUpdateStaus(false);
 80028a6:	2000      	movs	r0, #0
 80028a8:	f015 f9aa 	bl	8017c00 <setUpdateStaus>

	} else {
		task2();
	}

}
 80028ac:	e001      	b.n	80028b2 <loop+0xee>
		task2();
 80028ae:	f000 fb1d 	bl	8002eec <task2>
}
 80028b2:	bf00      	nop
 80028b4:	37c8      	adds	r7, #200	@ 0xc8
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	d1b71759 	.word	0xd1b71759
 80028c0:	20000f58 	.word	0x20000f58
 80028c4:	08022718 	.word	0x08022718
 80028c8:	20000f5c 	.word	0x20000f5c
 80028cc:	20012fb8 	.word	0x20012fb8
 80028d0:	08022734 	.word	0x08022734
 80028d4:	20012fb5 	.word	0x20012fb5
 80028d8:	20012fc8 	.word	0x20012fc8
 80028dc:	08022738 	.word	0x08022738
 80028e0:	08022750 	.word	0x08022750
 80028e4:	42020c00 	.word	0x42020c00

080028e8 <onTemperCallback>:
void onTemperCallback() {
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
	generateData("TA");
 80028ec:	4802      	ldr	r0, [pc, #8]	@ (80028f8 <onTemperCallback+0x10>)
 80028ee:	f000 fb8d 	bl	800300c <generateData>
}
 80028f2:	bf00      	nop
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	08022760 	.word	0x08022760

080028fc <handleCotaSMS>:
void handleCotaSMS() {
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
	clearBuffer(CMD_Buf, sizeof(CMD_Buf));
 8002902:	21c8      	movs	r1, #200	@ 0xc8
 8002904:	483a      	ldr	r0, [pc, #232]	@ (80029f0 <handleCotaSMS+0xf4>)
 8002906:	f7ff f8df 	bl	8001ac8 <clearBuffer>
	SMS_Read(0, CMD_Buf);
 800290a:	4939      	ldr	r1, [pc, #228]	@ (80029f0 <handleCotaSMS+0xf4>)
 800290c:	2000      	movs	r0, #0
 800290e:	f019 feb1 	bl	801c674 <SMS_Read>
	if (strlen(CMD_Buf) > 6) {
 8002912:	4837      	ldr	r0, [pc, #220]	@ (80029f0 <handleCotaSMS+0xf4>)
 8002914:	f7fd fcc6 	bl	80002a4 <strlen>
 8002918:	4603      	mov	r3, r0
 800291a:	2b06      	cmp	r3, #6
 800291c:	d957      	bls.n	80029ce <handleCotaSMS+0xd2>
		clearBuffer(tmpSplit, sizeof(tmpSplit));
 800291e:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8002922:	4834      	ldr	r0, [pc, #208]	@ (80029f4 <handleCotaSMS+0xf8>)
 8002924:	f7ff f8d0 	bl	8001ac8 <clearBuffer>
		splitString(CMD_Buf, "\r\n", tmpSplit);
 8002928:	4a32      	ldr	r2, [pc, #200]	@ (80029f4 <handleCotaSMS+0xf8>)
 800292a:	4933      	ldr	r1, [pc, #204]	@ (80029f8 <handleCotaSMS+0xfc>)
 800292c:	4830      	ldr	r0, [pc, #192]	@ (80029f0 <handleCotaSMS+0xf4>)
 800292e:	f7ff f8d9 	bl	8001ae4 <splitString>
		clearBuffer(CMD_Buf, sizeof(CMD_Buf));
 8002932:	21c8      	movs	r1, #200	@ 0xc8
 8002934:	482e      	ldr	r0, [pc, #184]	@ (80029f0 <handleCotaSMS+0xf4>)
 8002936:	f7ff f8c7 	bl	8001ac8 <clearBuffer>
			printc(MinDelay, "Failed to Parse Message");
			clearBuffer(CMD_Buf, sizeof(CMD_Buf));
			strcpy(CMD_Buf, "Failed to Parse Message\n");
			goto sendMsg;
		}
		printc(MinDelay, "Received MSG %s", CMD_Buf);
 800293a:	4a2d      	ldr	r2, [pc, #180]	@ (80029f0 <handleCotaSMS+0xf4>)
 800293c:	492f      	ldr	r1, [pc, #188]	@ (80029fc <handleCotaSMS+0x100>)
 800293e:	200a      	movs	r0, #10
 8002940:	f7ff f86a 	bl	8001a18 <printc>
		if (!SMS_COTA(tmpSplit[2], CMD_Buf)) {
 8002944:	492a      	ldr	r1, [pc, #168]	@ (80029f0 <handleCotaSMS+0xf4>)
 8002946:	482e      	ldr	r0, [pc, #184]	@ (8002a00 <handleCotaSMS+0x104>)
 8002948:	f015 f974 	bl	8017c34 <SMS_COTA>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d109      	bne.n	8002966 <handleCotaSMS+0x6a>
			clearBuffer(CMD_Buf, sizeof(CMD_Buf));
 8002952:	21c8      	movs	r1, #200	@ 0xc8
 8002954:	4826      	ldr	r0, [pc, #152]	@ (80029f0 <handleCotaSMS+0xf4>)
 8002956:	f7ff f8b7 	bl	8001ac8 <clearBuffer>
			strcpy(CMD_Buf, "INVALID CMD");
 800295a:	4b25      	ldr	r3, [pc, #148]	@ (80029f0 <handleCotaSMS+0xf4>)
 800295c:	4a29      	ldr	r2, [pc, #164]	@ (8002a04 <handleCotaSMS+0x108>)
 800295e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002960:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002964:	e00a      	b.n	800297c <handleCotaSMS+0x80>
		} else {
			char *tmpData = strdup(CMD_Buf);
 8002966:	4822      	ldr	r0, [pc, #136]	@ (80029f0 <handleCotaSMS+0xf4>)
 8002968:	f01c fa76 	bl	801ee58 <strdup>
 800296c:	4603      	mov	r3, r0
 800296e:	607b      	str	r3, [r7, #4]
			sprintf(CMD_Buf, "Device-%s %s", IMEI, tmpData);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	4a25      	ldr	r2, [pc, #148]	@ (8002a08 <handleCotaSMS+0x10c>)
 8002974:	4925      	ldr	r1, [pc, #148]	@ (8002a0c <handleCotaSMS+0x110>)
 8002976:	481e      	ldr	r0, [pc, #120]	@ (80029f0 <handleCotaSMS+0xf4>)
 8002978:	f01c f8ee 	bl	801eb58 <siprintf>
		}
		sendMsg: char *number = strdup(tmpSplit[1]);
 800297c:	4824      	ldr	r0, [pc, #144]	@ (8002a10 <handleCotaSMS+0x114>)
 800297e:	f01c fa6b 	bl	801ee58 <strdup>
 8002982:	4603      	mov	r3, r0
 8002984:	603b      	str	r3, [r7, #0]

		clearBuffer(tmpSplit, sizeof(tmpSplit));
 8002986:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800298a:	481a      	ldr	r0, [pc, #104]	@ (80029f4 <handleCotaSMS+0xf8>)
 800298c:	f7ff f89c 	bl	8001ac8 <clearBuffer>
		splitString(number, ",", tmpSplit);
 8002990:	4a18      	ldr	r2, [pc, #96]	@ (80029f4 <handleCotaSMS+0xf8>)
 8002992:	4920      	ldr	r1, [pc, #128]	@ (8002a14 <handleCotaSMS+0x118>)
 8002994:	6838      	ldr	r0, [r7, #0]
 8002996:	f7ff f8a5 	bl	8001ae4 <splitString>
		SMS_Send(&tmpSplit[1][4], CMD_Buf);
 800299a:	4915      	ldr	r1, [pc, #84]	@ (80029f0 <handleCotaSMS+0xf4>)
 800299c:	481e      	ldr	r0, [pc, #120]	@ (8002a18 <handleCotaSMS+0x11c>)
 800299e:	f019 fe99 	bl	801c6d4 <SMS_Send>
		if (tmpSplit[1][2] != NULL) {
 80029a2:	4b14      	ldr	r3, [pc, #80]	@ (80029f4 <handleCotaSMS+0xf8>)
 80029a4:	f893 3066 	ldrb.w	r3, [r3, #102]	@ 0x66
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00a      	beq.n	80029c2 <handleCotaSMS+0xc6>
			memset(PHnum, 0, sizeof(PHnum));
 80029ac:	220a      	movs	r2, #10
 80029ae:	2100      	movs	r1, #0
 80029b0:	481a      	ldr	r0, [pc, #104]	@ (8002a1c <handleCotaSMS+0x120>)
 80029b2:	f01c fa2d 	bl	801ee10 <memset>
			memcpy(PHnum, &tmpSplit[1][4], 10);
 80029b6:	4b19      	ldr	r3, [pc, #100]	@ (8002a1c <handleCotaSMS+0x120>)
 80029b8:	4a0e      	ldr	r2, [pc, #56]	@ (80029f4 <handleCotaSMS+0xf8>)
 80029ba:	3268      	adds	r2, #104	@ 0x68
 80029bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80029be:	c303      	stmia	r3!, {r0, r1}
 80029c0:	801a      	strh	r2, [r3, #0]
		}
		printc(MinDelay, "\n phone No is: %s\n", tmpSplit[1]);
 80029c2:	4a13      	ldr	r2, [pc, #76]	@ (8002a10 <handleCotaSMS+0x114>)
 80029c4:	4916      	ldr	r1, [pc, #88]	@ (8002a20 <handleCotaSMS+0x124>)
 80029c6:	200a      	movs	r0, #10
 80029c8:	f7ff f826 	bl	8001a18 <printc>
 80029cc:	e003      	b.n	80029d6 <handleCotaSMS+0xda>

	} else {
		printc(MinDelay, "UNABLE TO Parse Message");
 80029ce:	4915      	ldr	r1, [pc, #84]	@ (8002a24 <handleCotaSMS+0x128>)
 80029d0:	200a      	movs	r0, #10
 80029d2:	f7ff f821 	bl	8001a18 <printc>
	}
	setMessageStatus(false);
 80029d6:	2000      	movs	r0, #0
 80029d8:	f019 ff1c 	bl	801c814 <setMessageStatus>
	if (SRESET_FLAG == true) {
 80029dc:	4b12      	ldr	r3, [pc, #72]	@ (8002a28 <handleCotaSMS+0x12c>)
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d001      	beq.n	80029e8 <handleCotaSMS+0xec>
		SET_RESET();
 80029e4:	f016 fa14 	bl	8018e10 <SET_RESET>
	}

}
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	20012fc8 	.word	0x20012fc8
 80029f4:	200136dc 	.word	0x200136dc
 80029f8:	08022764 	.word	0x08022764
 80029fc:	08022768 	.word	0x08022768
 8002a00:	200137a4 	.word	0x200137a4
 8002a04:	08022778 	.word	0x08022778
 8002a08:	2000002c 	.word	0x2000002c
 8002a0c:	08022784 	.word	0x08022784
 8002a10:	20013740 	.word	0x20013740
 8002a14:	08022794 	.word	0x08022794
 8002a18:	20013744 	.word	0x20013744
 8002a1c:	200138d0 	.word	0x200138d0
 8002a20:	08022798 	.word	0x08022798
 8002a24:	080227ac 	.word	0x080227ac
 8002a28:	20014e1c 	.word	0x20014e1c

08002a2c <getUpdateVersion>:

char* getUpdateVersion() {
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
	return updateVersion;
 8002a30:	4b02      	ldr	r3, [pc, #8]	@ (8002a3c <getUpdateVersion+0x10>)
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr
 8002a3c:	20013090 	.word	0x20013090

08002a40 <setIMEI>:
void setIMEI(char *imei) {
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
	if (imei == NULL)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d008      	beq.n	8002a60 <setIMEI+0x20>
		return;
	clearBuffer(IMEI, sizeof(IMEI));
 8002a4e:	2110      	movs	r1, #16
 8002a50:	4805      	ldr	r0, [pc, #20]	@ (8002a68 <setIMEI+0x28>)
 8002a52:	f7ff f839 	bl	8001ac8 <clearBuffer>
	strcpy(IMEI, imei);
 8002a56:	6879      	ldr	r1, [r7, #4]
 8002a58:	4803      	ldr	r0, [pc, #12]	@ (8002a68 <setIMEI+0x28>)
 8002a5a:	f01c fb36 	bl	801f0ca <strcpy>
 8002a5e:	e000      	b.n	8002a62 <setIMEI+0x22>
		return;
 8002a60:	bf00      	nop
}
 8002a62:	3708      	adds	r7, #8
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	2000002c 	.word	0x2000002c

08002a6c <Sleep_routine>:
void Sleep_routine() {
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b088      	sub	sp, #32
 8002a70:	af00      	add	r7, sp, #0
//	ledHendler.pwrLedState=OFF;
//	ledHendler.gsmLedState=OFF;
//	ledHendler.gpsLedState=OFF;
	char tmpVal[15] = { };
 8002a72:	2300      	movs	r3, #0
 8002a74:	613b      	str	r3, [r7, #16]
 8002a76:	f107 0314 	add.w	r3, r7, #20
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	601a      	str	r2, [r3, #0]
 8002a7e:	605a      	str	r2, [r3, #4]
 8002a80:	f8c3 2007 	str.w	r2, [r3, #7]
		char tmpVal1[15] = { };
 8002a84:	2300      	movs	r3, #0
 8002a86:	603b      	str	r3, [r7, #0]
 8002a88:	1d3b      	adds	r3, r7, #4
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	601a      	str	r2, [r3, #0]
 8002a8e:	605a      	str	r2, [r3, #4]
 8002a90:	f8c3 2007 	str.w	r2, [r3, #7]
		sprintf(tmpVal1, "%.6f", latHitory);
 8002a94:	4b0e      	ldr	r3, [pc, #56]	@ (8002ad0 <Sleep_routine+0x64>)
 8002a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a9a:	4638      	mov	r0, r7
 8002a9c:	490d      	ldr	r1, [pc, #52]	@ (8002ad4 <Sleep_routine+0x68>)
 8002a9e:	f01c f85b 	bl	801eb58 <siprintf>
		sprintf(tmpVal, "%.6f", lonHistory);
 8002aa2:	4b0d      	ldr	r3, [pc, #52]	@ (8002ad8 <Sleep_routine+0x6c>)
 8002aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aa8:	f107 0010 	add.w	r0, r7, #16
 8002aac:	4909      	ldr	r1, [pc, #36]	@ (8002ad4 <Sleep_routine+0x68>)
 8002aae:	f01c f853 	bl	801eb58 <siprintf>
		SET_LAT_LON(tmpVal1,tmpVal);
 8002ab2:	f107 0210 	add.w	r2, r7, #16
 8002ab6:	463b      	mov	r3, r7
 8002ab8:	4611      	mov	r1, r2
 8002aba:	4618      	mov	r0, r3
 8002abc:	f016 f950 	bl	8018d60 <SET_LAT_LON>
	FeedAllConfig();
 8002ac0:	f016 fbac 	bl	801921c <FeedAllConfig>

	task2();
 8002ac4:	f000 fa12 	bl	8002eec <task2>
//	GNSS_OFF();
//	sendPDDataFlag = true;
//	setSleppStatus(true);

}
 8002ac8:	bf00      	nop
 8002aca:	3720      	adds	r7, #32
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	20000f48 	.word	0x20000f48
 8002ad4:	080227c4 	.word	0x080227c4
 8002ad8:	20000f50 	.word	0x20000f50

08002adc <setPrintUartCmdStatus>:
//		task2();
//		FLAG_IGN = 0;
//	}
//
//}
void setPrintUartCmdStatus(bool tmpStatus) {
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	71fb      	strb	r3, [r7, #7]
	uartCmdStatus = tmpStatus;
 8002ae6:	4a04      	ldr	r2, [pc, #16]	@ (8002af8 <setPrintUartCmdStatus+0x1c>)
 8002ae8:	79fb      	ldrb	r3, [r7, #7]
 8002aea:	7013      	strb	r3, [r2, #0]
}
 8002aec:	bf00      	nop
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr
 8002af8:	20012fc5 	.word	0x20012fc5

08002afc <getPrintUartCmdStatus>:
bool getPrintUartCmdStatus() {
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0
	return uartCmdStatus;
 8002b00:	4b03      	ldr	r3, [pc, #12]	@ (8002b10 <getPrintUartCmdStatus+0x14>)
 8002b02:	781b      	ldrb	r3, [r3, #0]
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	20012fc5 	.word	0x20012fc5

08002b14 <onPrintUartCmd>:
void onPrintUartCmd(char *cmd) {
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
	clearBuffer(CMD_Buf, sizeof(CMD_Buf));
 8002b1c:	21c8      	movs	r1, #200	@ 0xc8
 8002b1e:	4807      	ldr	r0, [pc, #28]	@ (8002b3c <onPrintUartCmd+0x28>)
 8002b20:	f7fe ffd2 	bl	8001ac8 <clearBuffer>
	strcpy(CMD_Buf, cmd);
 8002b24:	6879      	ldr	r1, [r7, #4]
 8002b26:	4805      	ldr	r0, [pc, #20]	@ (8002b3c <onPrintUartCmd+0x28>)
 8002b28:	f01c facf 	bl	801f0ca <strcpy>
	setPrintUartCmdStatus(true);
 8002b2c:	2001      	movs	r0, #1
 8002b2e:	f7ff ffd5 	bl	8002adc <setPrintUartCmdStatus>
}
 8002b32:	bf00      	nop
 8002b34:	3708      	adds	r7, #8
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	20012fc8 	.word	0x20012fc8

08002b40 <gsmParameterUpdate>:
void gsmParameterUpdate() {
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
	signalStrength = getSignal();
 8002b46:	f7fe fd7b 	bl	8001640 <getSignal>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	b25a      	sxtb	r2, r3
 8002b4e:	4b41      	ldr	r3, [pc, #260]	@ (8002c54 <gsmParameterUpdate+0x114>)
 8002b50:	701a      	strb	r2, [r3, #0]
	if (signalStrength == -1) {
 8002b52:	4b40      	ldr	r3, [pc, #256]	@ (8002c54 <gsmParameterUpdate+0x114>)
 8002b54:	f993 3000 	ldrsb.w	r3, [r3]
 8002b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b5c:	d106      	bne.n	8002b6c <gsmParameterUpdate+0x2c>
		printc(MinDelay, "Fail to get Signal");
 8002b5e:	493e      	ldr	r1, [pc, #248]	@ (8002c58 <gsmParameterUpdate+0x118>)
 8002b60:	200a      	movs	r0, #10
 8002b62:	f7fe ff59 	bl	8001a18 <printc>
		signalStrength = 0;
 8002b66:	4b3b      	ldr	r3, [pc, #236]	@ (8002c54 <gsmParameterUpdate+0x114>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	701a      	strb	r2, [r3, #0]
	}
	clearBuffer(MCC, sizeof(MCC));
 8002b6c:	2114      	movs	r1, #20
 8002b6e:	483b      	ldr	r0, [pc, #236]	@ (8002c5c <gsmParameterUpdate+0x11c>)
 8002b70:	f7fe ffaa 	bl	8001ac8 <clearBuffer>
	clearBuffer(MNC, sizeof(MNC));
 8002b74:	2114      	movs	r1, #20
 8002b76:	483a      	ldr	r0, [pc, #232]	@ (8002c60 <gsmParameterUpdate+0x120>)
 8002b78:	f7fe ffa6 	bl	8001ac8 <clearBuffer>
	clearBuffer(LAC, sizeof(LAC));
 8002b7c:	2114      	movs	r1, #20
 8002b7e:	4839      	ldr	r0, [pc, #228]	@ (8002c64 <gsmParameterUpdate+0x124>)
 8002b80:	f7fe ffa2 	bl	8001ac8 <clearBuffer>
	clearBuffer(Celid, sizeof(Celid));
 8002b84:	2114      	movs	r1, #20
 8002b86:	4838      	ldr	r0, [pc, #224]	@ (8002c68 <gsmParameterUpdate+0x128>)
 8002b88:	f7fe ff9e 	bl	8001ac8 <clearBuffer>
	bool tmpStatus = get_MCC_MNC_CellID(MCC, MNC, LAC, Celid);
 8002b8c:	4b36      	ldr	r3, [pc, #216]	@ (8002c68 <gsmParameterUpdate+0x128>)
 8002b8e:	4a35      	ldr	r2, [pc, #212]	@ (8002c64 <gsmParameterUpdate+0x124>)
 8002b90:	4933      	ldr	r1, [pc, #204]	@ (8002c60 <gsmParameterUpdate+0x120>)
 8002b92:	4832      	ldr	r0, [pc, #200]	@ (8002c5c <gsmParameterUpdate+0x11c>)
 8002b94:	f7fe fdf4 	bl	8001780 <get_MCC_MNC_CellID>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	71fb      	strb	r3, [r7, #7]
	if (!tmpStatus) {
 8002b9c:	79fb      	ldrb	r3, [r7, #7]
 8002b9e:	f083 0301 	eor.w	r3, r3, #1
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d023      	beq.n	8002bf0 <gsmParameterUpdate+0xb0>
		printc(MinDelay, "Don't get MMC  MNC Celid \n");
 8002ba8:	4930      	ldr	r1, [pc, #192]	@ (8002c6c <gsmParameterUpdate+0x12c>)
 8002baa:	200a      	movs	r0, #10
 8002bac:	f7fe ff34 	bl	8001a18 <printc>
		strcpy(MCC, "NA");
 8002bb0:	4b2a      	ldr	r3, [pc, #168]	@ (8002c5c <gsmParameterUpdate+0x11c>)
 8002bb2:	4a2f      	ldr	r2, [pc, #188]	@ (8002c70 <gsmParameterUpdate+0x130>)
 8002bb4:	6812      	ldr	r2, [r2, #0]
 8002bb6:	4611      	mov	r1, r2
 8002bb8:	8019      	strh	r1, [r3, #0]
 8002bba:	3302      	adds	r3, #2
 8002bbc:	0c12      	lsrs	r2, r2, #16
 8002bbe:	701a      	strb	r2, [r3, #0]
		strcpy(MNC, "NA");
 8002bc0:	4b27      	ldr	r3, [pc, #156]	@ (8002c60 <gsmParameterUpdate+0x120>)
 8002bc2:	4a2b      	ldr	r2, [pc, #172]	@ (8002c70 <gsmParameterUpdate+0x130>)
 8002bc4:	6812      	ldr	r2, [r2, #0]
 8002bc6:	4611      	mov	r1, r2
 8002bc8:	8019      	strh	r1, [r3, #0]
 8002bca:	3302      	adds	r3, #2
 8002bcc:	0c12      	lsrs	r2, r2, #16
 8002bce:	701a      	strb	r2, [r3, #0]
		strcpy(LAC, "NA");
 8002bd0:	4b24      	ldr	r3, [pc, #144]	@ (8002c64 <gsmParameterUpdate+0x124>)
 8002bd2:	4a27      	ldr	r2, [pc, #156]	@ (8002c70 <gsmParameterUpdate+0x130>)
 8002bd4:	6812      	ldr	r2, [r2, #0]
 8002bd6:	4611      	mov	r1, r2
 8002bd8:	8019      	strh	r1, [r3, #0]
 8002bda:	3302      	adds	r3, #2
 8002bdc:	0c12      	lsrs	r2, r2, #16
 8002bde:	701a      	strb	r2, [r3, #0]
		strcpy(Celid, "NA");
 8002be0:	4b21      	ldr	r3, [pc, #132]	@ (8002c68 <gsmParameterUpdate+0x128>)
 8002be2:	4a23      	ldr	r2, [pc, #140]	@ (8002c70 <gsmParameterUpdate+0x130>)
 8002be4:	6812      	ldr	r2, [r2, #0]
 8002be6:	4611      	mov	r1, r2
 8002be8:	8019      	strh	r1, [r3, #0]
 8002bea:	3302      	adds	r3, #2
 8002bec:	0c12      	lsrs	r2, r2, #16
 8002bee:	701a      	strb	r2, [r3, #0]
	}
	clearBuffer(Network, sizeof(Network));
 8002bf0:	211e      	movs	r1, #30
 8002bf2:	4820      	ldr	r0, [pc, #128]	@ (8002c74 <gsmParameterUpdate+0x134>)
 8002bf4:	f7fe ff68 	bl	8001ac8 <clearBuffer>
	tmpStatus = getOperatorName(Network);
 8002bf8:	481e      	ldr	r0, [pc, #120]	@ (8002c74 <gsmParameterUpdate+0x134>)
 8002bfa:	f7fe fd59 	bl	80016b0 <getOperatorName>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	bf14      	ite	ne
 8002c04:	2301      	movne	r3, #1
 8002c06:	2300      	moveq	r3, #0
 8002c08:	71fb      	strb	r3, [r7, #7]
	Network[strlen(Network) - 1] = '\0';
 8002c0a:	481a      	ldr	r0, [pc, #104]	@ (8002c74 <gsmParameterUpdate+0x134>)
 8002c0c:	f7fd fb4a 	bl	80002a4 <strlen>
 8002c10:	4603      	mov	r3, r0
 8002c12:	3b01      	subs	r3, #1
 8002c14:	4a17      	ldr	r2, [pc, #92]	@ (8002c74 <gsmParameterUpdate+0x134>)
 8002c16:	2100      	movs	r1, #0
 8002c18:	54d1      	strb	r1, [r2, r3]
	if (!tmpStatus) {
 8002c1a:	79fb      	ldrb	r3, [r7, #7]
 8002c1c:	f083 0301 	eor.w	r3, r3, #1
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d00f      	beq.n	8002c46 <gsmParameterUpdate+0x106>
		printc(MinDelay, "Don't get NETWRORK \n");
 8002c26:	4914      	ldr	r1, [pc, #80]	@ (8002c78 <gsmParameterUpdate+0x138>)
 8002c28:	200a      	movs	r0, #10
 8002c2a:	f7fe fef5 	bl	8001a18 <printc>
		strcpy(Network, "NA");
 8002c2e:	4b11      	ldr	r3, [pc, #68]	@ (8002c74 <gsmParameterUpdate+0x134>)
 8002c30:	4a0f      	ldr	r2, [pc, #60]	@ (8002c70 <gsmParameterUpdate+0x130>)
 8002c32:	6812      	ldr	r2, [r2, #0]
 8002c34:	4611      	mov	r1, r2
 8002c36:	8019      	strh	r1, [r3, #0]
 8002c38:	3302      	adds	r3, #2
 8002c3a:	0c12      	lsrs	r2, r2, #16
 8002c3c:	701a      	strb	r2, [r3, #0]
		ledHendler.gsmLedState = LOW;
 8002c3e:	4b0f      	ldr	r3, [pc, #60]	@ (8002c7c <gsmParameterUpdate+0x13c>)
 8002c40:	2201      	movs	r2, #1
 8002c42:	705a      	strb	r2, [r3, #1]
	} else {
		ledHendler.gsmLedState = HEIGH;
	}
}
 8002c44:	e002      	b.n	8002c4c <gsmParameterUpdate+0x10c>
		ledHendler.gsmLedState = HEIGH;
 8002c46:	4b0d      	ldr	r3, [pc, #52]	@ (8002c7c <gsmParameterUpdate+0x13c>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	705a      	strb	r2, [r3, #1]
}
 8002c4c:	bf00      	nop
 8002c4e:	3708      	adds	r7, #8
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	20013688 	.word	0x20013688
 8002c58:	080227cc 	.word	0x080227cc
 8002c5c:	200136a0 	.word	0x200136a0
 8002c60:	2001368c 	.word	0x2001368c
 8002c64:	200136b4 	.word	0x200136b4
 8002c68:	200136c8 	.word	0x200136c8
 8002c6c:	080227e0 	.word	0x080227e0
 8002c70:	080227fc 	.word	0x080227fc
 8002c74:	20000048 	.word	0x20000048
 8002c78:	08022800 	.word	0x08022800
 8002c7c:	200000a4 	.word	0x200000a4

08002c80 <makeMessageHeader>:

void makeMessageHeader(char *mqttString, char *Packet_Type) {
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b088      	sub	sp, #32
 8002c84:	af06      	add	r7, sp, #24
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	6039      	str	r1, [r7, #0]
	sprintf(mqttString, "$%s,%s,%s,%s,%s,%s,%s,%s", Packet_Header,
 8002c8a:	4b0b      	ldr	r3, [pc, #44]	@ (8002cb8 <makeMessageHeader+0x38>)
 8002c8c:	9305      	str	r3, [sp, #20]
 8002c8e:	4b0b      	ldr	r3, [pc, #44]	@ (8002cbc <makeMessageHeader+0x3c>)
 8002c90:	9304      	str	r3, [sp, #16]
 8002c92:	4b0b      	ldr	r3, [pc, #44]	@ (8002cc0 <makeMessageHeader+0x40>)
 8002c94:	9303      	str	r3, [sp, #12]
 8002c96:	4b0b      	ldr	r3, [pc, #44]	@ (8002cc4 <makeMessageHeader+0x44>)
 8002c98:	9302      	str	r3, [sp, #8]
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	9301      	str	r3, [sp, #4]
 8002c9e:	4b0a      	ldr	r3, [pc, #40]	@ (8002cc8 <makeMessageHeader+0x48>)
 8002ca0:	9300      	str	r3, [sp, #0]
 8002ca2:	4b0a      	ldr	r3, [pc, #40]	@ (8002ccc <makeMessageHeader+0x4c>)
 8002ca4:	4a0a      	ldr	r2, [pc, #40]	@ (8002cd0 <makeMessageHeader+0x50>)
 8002ca6:	490b      	ldr	r1, [pc, #44]	@ (8002cd4 <makeMessageHeader+0x54>)
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f01b ff55 	bl	801eb58 <siprintf>
			Hardware_Version, Firmware_Version, Packet_Type, Message_ID,
			Packet_Status, IMEI, Vehicle_Reg_No);
}
 8002cae:	bf00      	nop
 8002cb0:	3708      	adds	r7, #8
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	2000003c 	.word	0x2000003c
 8002cbc:	2000002c 	.word	0x2000002c
 8002cc0:	20000028 	.word	0x20000028
 8002cc4:	20000024 	.word	0x20000024
 8002cc8:	2000001c 	.word	0x2000001c
 8002ccc:	20000014 	.word	0x20000014
 8002cd0:	2000000c 	.word	0x2000000c
 8002cd4:	08022818 	.word	0x08022818

08002cd8 <addGSMData>:
void addGSMData(char *tmp_str) {
 8002cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cda:	b095      	sub	sp, #84	@ 0x54
 8002cdc:	af10      	add	r7, sp, #64	@ 0x40
 8002cde:	60f8      	str	r0, [r7, #12]

	temper = 'C';
 8002ce0:	4b24      	ldr	r3, [pc, #144]	@ (8002d74 <addGSMData+0x9c>)
 8002ce2:	2243      	movs	r2, #67	@ 0x43
 8002ce4:	701a      	strb	r2, [r3, #0]
	if (getTemperStatus()) {
 8002ce6:	f018 f887 	bl	801adf8 <getTemperStatus>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d002      	beq.n	8002cf6 <addGSMData+0x1e>
		temper = 'O';
 8002cf0:	4b20      	ldr	r3, [pc, #128]	@ (8002d74 <addGSMData+0x9c>)
 8002cf2:	224f      	movs	r2, #79	@ 0x4f
 8002cf4:	701a      	strb	r2, [r3, #0]
	}
	sprintf(tmp_str, "%s,%d,%d,%.2f,%.2f,%c,%d,%s,%s,%s,%s,%s,%s,%s,%s",
 8002cf6:	f018 f86f 	bl	801add8 <getIgnition>
 8002cfa:	4606      	mov	r6, r0
 8002cfc:	4b1e      	ldr	r3, [pc, #120]	@ (8002d78 <addGSMData+0xa0>)
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	60bb      	str	r3, [r7, #8]
 8002d02:	4b1e      	ldr	r3, [pc, #120]	@ (8002d7c <addGSMData+0xa4>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7fd fc38 	bl	800057c <__aeabi_f2d>
 8002d0c:	4604      	mov	r4, r0
 8002d0e:	460d      	mov	r5, r1
 8002d10:	4b1b      	ldr	r3, [pc, #108]	@ (8002d80 <addGSMData+0xa8>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4618      	mov	r0, r3
 8002d16:	f7fd fc31 	bl	800057c <__aeabi_f2d>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	4915      	ldr	r1, [pc, #84]	@ (8002d74 <addGSMData+0x9c>)
 8002d20:	7809      	ldrb	r1, [r1, #0]
 8002d22:	4608      	mov	r0, r1
 8002d24:	4917      	ldr	r1, [pc, #92]	@ (8002d84 <addGSMData+0xac>)
 8002d26:	f991 1000 	ldrsb.w	r1, [r1]
 8002d2a:	6079      	str	r1, [r7, #4]
 8002d2c:	4916      	ldr	r1, [pc, #88]	@ (8002d88 <addGSMData+0xb0>)
 8002d2e:	910f      	str	r1, [sp, #60]	@ 0x3c
 8002d30:	4916      	ldr	r1, [pc, #88]	@ (8002d8c <addGSMData+0xb4>)
 8002d32:	910e      	str	r1, [sp, #56]	@ 0x38
 8002d34:	4916      	ldr	r1, [pc, #88]	@ (8002d90 <addGSMData+0xb8>)
 8002d36:	910d      	str	r1, [sp, #52]	@ 0x34
 8002d38:	4916      	ldr	r1, [pc, #88]	@ (8002d94 <addGSMData+0xbc>)
 8002d3a:	910c      	str	r1, [sp, #48]	@ 0x30
 8002d3c:	4916      	ldr	r1, [pc, #88]	@ (8002d98 <addGSMData+0xc0>)
 8002d3e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8002d40:	4916      	ldr	r1, [pc, #88]	@ (8002d9c <addGSMData+0xc4>)
 8002d42:	910a      	str	r1, [sp, #40]	@ 0x28
 8002d44:	4916      	ldr	r1, [pc, #88]	@ (8002da0 <addGSMData+0xc8>)
 8002d46:	9109      	str	r1, [sp, #36]	@ 0x24
 8002d48:	4916      	ldr	r1, [pc, #88]	@ (8002da4 <addGSMData+0xcc>)
 8002d4a:	9108      	str	r1, [sp, #32]
 8002d4c:	6879      	ldr	r1, [r7, #4]
 8002d4e:	9107      	str	r1, [sp, #28]
 8002d50:	9006      	str	r0, [sp, #24]
 8002d52:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002d56:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	9300      	str	r3, [sp, #0]
 8002d5e:	4633      	mov	r3, r6
 8002d60:	4a11      	ldr	r2, [pc, #68]	@ (8002da8 <addGSMData+0xd0>)
 8002d62:	4912      	ldr	r1, [pc, #72]	@ (8002dac <addGSMData+0xd4>)
 8002d64:	68f8      	ldr	r0, [r7, #12]
 8002d66:	f01b fef7 	bl	801eb58 <siprintf>
			"1000",	//"Digital Input",
			"10",	//"Digital Output",
			"0.3",	//"Analog Input 1",
			"0.3,"	//"Analog Input 2,"
			);
}
 8002d6a:	bf00      	nop
 8002d6c:	3714      	adds	r7, #20
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d72:	bf00      	nop
 8002d74:	20000066 	.word	0x20000066
 8002d78:	20012fc4 	.word	0x20012fc4
 8002d7c:	20012fbc 	.word	0x20012fbc
 8002d80:	20012fc0 	.word	0x20012fc0
 8002d84:	20013688 	.word	0x20013688
 8002d88:	08022868 	.word	0x08022868
 8002d8c:	08022870 	.word	0x08022870
 8002d90:	08022874 	.word	0x08022874
 8002d94:	08022878 	.word	0x08022878
 8002d98:	200136c8 	.word	0x200136c8
 8002d9c:	200136b4 	.word	0x200136b4
 8002da0:	2001368c 	.word	0x2001368c
 8002da4:	200136a0 	.word	0x200136a0
 8002da8:	20000049 	.word	0x20000049
 8002dac:	08022834 	.word	0x08022834

08002db0 <addGPSData>:

void addGPSData(GPSData *data, char *tmp_str, char *tmpTime, char *tmpDate) {
 8002db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002db4:	b0a1      	sub	sp, #132	@ 0x84
 8002db6:	af14      	add	r7, sp, #80	@ 0x50
 8002db8:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8002dba:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002dbc:	627a      	str	r2, [r7, #36]	@ 0x24
 8002dbe:	623b      	str	r3, [r7, #32]
	if (data->latitude != 0 && data->longitude != 0) {
 8002dc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dc2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002dc6:	f04f 0200 	mov.w	r2, #0
 8002dca:	f04f 0300 	mov.w	r3, #0
 8002dce:	f7fd fe95 	bl	8000afc <__aeabi_dcmpeq>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d118      	bne.n	8002e0a <addGPSData+0x5a>
 8002dd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dda:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002dde:	f04f 0200 	mov.w	r2, #0
 8002de2:	f04f 0300 	mov.w	r3, #0
 8002de6:	f7fd fe89 	bl	8000afc <__aeabi_dcmpeq>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d10c      	bne.n	8002e0a <addGPSData+0x5a>
		latHitory = data->latitude;
 8002df0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002df6:	492f      	ldr	r1, [pc, #188]	@ (8002eb4 <addGPSData+0x104>)
 8002df8:	e9c1 2300 	strd	r2, r3, [r1]
		lonHistory = data->longitude;
 8002dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dfe:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002e02:	492d      	ldr	r1, [pc, #180]	@ (8002eb8 <addGPSData+0x108>)
 8002e04:	e9c1 2300 	strd	r2, r3, [r1]
 8002e08:	e004      	b.n	8002e14 <addGPSData+0x64>
	}
	else{
		printc(MinDelay,"geting lat 0 long 0 at time %s\n",tmpTime);
 8002e0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e0c:	492b      	ldr	r1, [pc, #172]	@ (8002ebc <addGPSData+0x10c>)
 8002e0e:	200a      	movs	r0, #10
 8002e10:	f7fe fe02 	bl	8001a18 <printc>
	}
	sprintf(tmp_str, ",%d,%s,%s,%.6f,%c,%.6f,%c,%.2f,%d,%d,%d,%.2f,%.2f,",
			data->gps_fix, // Convert bool to int
 8002e14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e16:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
	sprintf(tmp_str, ",%d,%s,%s,%.6f,%c,%.6f,%c,%.2f,%d,%d,%d,%.2f,%.2f,",
 8002e1a:	61fb      	str	r3, [r7, #28]
 8002e1c:	4b25      	ldr	r3, [pc, #148]	@ (8002eb4 <addGPSData+0x104>)
 8002e1e:	e9d3 8900 	ldrd	r8, r9, [r3]
			tmpDate, tmpTime, latHitory, data->lat_dir, lonHistory,
 8002e22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e24:	7a1b      	ldrb	r3, [r3, #8]
	sprintf(tmp_str, ",%d,%s,%s,%.6f,%c,%.6f,%c,%.2f,%d,%d,%d,%.2f,%.2f,",
 8002e26:	61bb      	str	r3, [r7, #24]
 8002e28:	4b23      	ldr	r3, [pc, #140]	@ (8002eb8 <addGPSData+0x108>)
 8002e2a:	e9d3 ab00 	ldrd	sl, fp, [r3]
			data->lon_dir, data->speed, data->heading, data->sat_num, data->alt,
 8002e2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e30:	7e1b      	ldrb	r3, [r3, #24]
	sprintf(tmp_str, ",%d,%s,%s,%.6f,%c,%.6f,%c,%.2f,%d,%d,%d,%.2f,%.2f,",
 8002e32:	617b      	str	r3, [r7, #20]
			data->lon_dir, data->speed, data->heading, data->sat_num, data->alt,
 8002e34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e36:	69db      	ldr	r3, [r3, #28]
	sprintf(tmp_str, ",%d,%s,%s,%.6f,%c,%.6f,%c,%.2f,%d,%d,%d,%.2f,%.2f,",
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7fd fb9f 	bl	800057c <__aeabi_f2d>
 8002e3e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002e42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e44:	6a1e      	ldr	r6, [r3, #32]
			data->lon_dir, data->speed, data->heading, data->sat_num, data->alt,
 8002e46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e48:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
	sprintf(tmp_str, ",%d,%s,%s,%.6f,%c,%.6f,%c,%.2f,%d,%d,%d,%.2f,%.2f,",
 8002e4c:	613b      	str	r3, [r7, #16]
 8002e4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e50:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8002e52:	6079      	str	r1, [r7, #4]
			data->PDOP, data->HDOP);
 8002e54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
	sprintf(tmp_str, ",%d,%s,%s,%.6f,%c,%.6f,%c,%.2f,%d,%d,%d,%.2f,%.2f,",
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7fd fb8f 	bl	800057c <__aeabi_f2d>
 8002e5e:	4604      	mov	r4, r0
 8002e60:	460d      	mov	r5, r1
			data->PDOP, data->HDOP);
 8002e62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
	sprintf(tmp_str, ",%d,%s,%s,%.6f,%c,%.6f,%c,%.2f,%d,%d,%d,%.2f,%.2f,",
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7fd fb88 	bl	800057c <__aeabi_f2d>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	460b      	mov	r3, r1
 8002e70:	e9cd 2312 	strd	r2, r3, [sp, #72]	@ 0x48
 8002e74:	e9cd 4510 	strd	r4, r5, [sp, #64]	@ 0x40
 8002e78:	6879      	ldr	r1, [r7, #4]
 8002e7a:	910e      	str	r1, [sp, #56]	@ 0x38
 8002e7c:	6939      	ldr	r1, [r7, #16]
 8002e7e:	910d      	str	r1, [sp, #52]	@ 0x34
 8002e80:	960c      	str	r6, [sp, #48]	@ 0x30
 8002e82:	ed97 7b02 	vldr	d7, [r7, #8]
 8002e86:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8002e8a:	6979      	ldr	r1, [r7, #20]
 8002e8c:	9108      	str	r1, [sp, #32]
 8002e8e:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8002e92:	69b9      	ldr	r1, [r7, #24]
 8002e94:	9104      	str	r1, [sp, #16]
 8002e96:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e9c:	9300      	str	r3, [sp, #0]
 8002e9e:	6a3b      	ldr	r3, [r7, #32]
 8002ea0:	69fa      	ldr	r2, [r7, #28]
 8002ea2:	4907      	ldr	r1, [pc, #28]	@ (8002ec0 <addGPSData+0x110>)
 8002ea4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002ea6:	f01b fe57 	bl	801eb58 <siprintf>
}
 8002eaa:	bf00      	nop
 8002eac:	3734      	adds	r7, #52	@ 0x34
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002eb4:	20000f48 	.word	0x20000f48
 8002eb8:	20000f50 	.word	0x20000f50
 8002ebc:	08022880 	.word	0x08022880
 8002ec0:	080228a0 	.word	0x080228a0

08002ec4 <GPSDataCallback>:

void GPSDataCallback(GPSData *gpsData) {
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
	clearBuffer(&L86Data, sizeof(GPSData));
 8002ecc:	2140      	movs	r1, #64	@ 0x40
 8002ece:	4806      	ldr	r0, [pc, #24]	@ (8002ee8 <GPSDataCallback+0x24>)
 8002ed0:	f7fe fdfa 	bl	8001ac8 <clearBuffer>
	memcpy(&L86Data, gpsData, sizeof(GPSData));
 8002ed4:	2240      	movs	r2, #64	@ 0x40
 8002ed6:	6879      	ldr	r1, [r7, #4]
 8002ed8:	4803      	ldr	r0, [pc, #12]	@ (8002ee8 <GPSDataCallback+0x24>)
 8002eda:	f01c f90c 	bl	801f0f6 <memcpy>
}
 8002ede:	bf00      	nop
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	20000f60 	.word	0x20000f60

08002eec <task2>:
void task2() {
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0

	int Flen = strlen(Firmware_Version);
 8002ef2:	483f      	ldr	r0, [pc, #252]	@ (8002ff0 <task2+0x104>)
 8002ef4:	f7fd f9d6 	bl	80002a4 <strlen>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	607b      	str	r3, [r7, #4]
	if (sendPDDataFlag) {
 8002efc:	4b3d      	ldr	r3, [pc, #244]	@ (8002ff4 <task2+0x108>)
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d045      	beq.n	8002f90 <task2+0xa4>
		clearBuffer(finalData, sizeof(finalData));
 8002f04:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002f08:	483b      	ldr	r0, [pc, #236]	@ (8002ff8 <task2+0x10c>)
 8002f0a:	f7fe fddd 	bl	8001ac8 <clearBuffer>
		if (dataQueue.top >= 0) {
 8002f0e:	4b3b      	ldr	r3, [pc, #236]	@ (8002ffc <task2+0x110>)
 8002f10:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8002f14:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	@ 0xc00
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	db39      	blt.n	8002f90 <task2+0xa4>
			pop(&dataQueue, finalData);
 8002f1c:	4936      	ldr	r1, [pc, #216]	@ (8002ff8 <task2+0x10c>)
 8002f1e:	4837      	ldr	r0, [pc, #220]	@ (8002ffc <task2+0x110>)
 8002f20:	f7fe ff70 	bl	8001e04 <pop>

			//send the rest of the data in the dataqueue to history queue
			while (dataQueue.top >= 0) {
 8002f24:	e016      	b.n	8002f54 <task2+0x68>
				clearBuffer(historyData, sizeof(historyData));
 8002f26:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002f2a:	4835      	ldr	r0, [pc, #212]	@ (8003000 <task2+0x114>)
 8002f2c:	f7fe fdcc 	bl	8001ac8 <clearBuffer>
				pop(&dataQueue, historyData);
 8002f30:	4933      	ldr	r1, [pc, #204]	@ (8003000 <task2+0x114>)
 8002f32:	4832      	ldr	r0, [pc, #200]	@ (8002ffc <task2+0x110>)
 8002f34:	f7fe ff66 	bl	8001e04 <pop>
				historyData[20 + Flen] = 'H';
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	3314      	adds	r3, #20
 8002f3c:	4a30      	ldr	r2, [pc, #192]	@ (8003000 <task2+0x114>)
 8002f3e:	2148      	movs	r1, #72	@ 0x48
 8002f40:	54d1      	strb	r1, [r2, r3]
				push(&packetHistoryQueue, historyData, strlen(historyData));
 8002f42:	482f      	ldr	r0, [pc, #188]	@ (8003000 <task2+0x114>)
 8002f44:	f7fd f9ae 	bl	80002a4 <strlen>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	492c      	ldr	r1, [pc, #176]	@ (8003000 <task2+0x114>)
 8002f4e:	482d      	ldr	r0, [pc, #180]	@ (8003004 <task2+0x118>)
 8002f50:	f7fe ff1a 	bl	8001d88 <push>
			while (dataQueue.top >= 0) {
 8002f54:	4b29      	ldr	r3, [pc, #164]	@ (8002ffc <task2+0x110>)
 8002f56:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8002f5a:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	@ 0xc00
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	dae1      	bge.n	8002f26 <task2+0x3a>
				//writeL86Data(finalData, strlen(finalData));

			}
			if (!TCP_Send(finalData)) {
 8002f62:	4825      	ldr	r0, [pc, #148]	@ (8002ff8 <task2+0x10c>)
 8002f64:	f019 fe56 	bl	801cc14 <TCP_Send>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d10d      	bne.n	8002f8a <task2+0x9e>
				finalData[20 + Flen] = 'H';
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	3314      	adds	r3, #20
 8002f72:	4a21      	ldr	r2, [pc, #132]	@ (8002ff8 <task2+0x10c>)
 8002f74:	2148      	movs	r1, #72	@ 0x48
 8002f76:	54d1      	strb	r1, [r2, r3]
				push(&packetHistoryQueue, finalData, strlen(finalData));
 8002f78:	481f      	ldr	r0, [pc, #124]	@ (8002ff8 <task2+0x10c>)
 8002f7a:	f7fd f993 	bl	80002a4 <strlen>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	461a      	mov	r2, r3
 8002f82:	491d      	ldr	r1, [pc, #116]	@ (8002ff8 <task2+0x10c>)
 8002f84:	481f      	ldr	r0, [pc, #124]	@ (8003004 <task2+0x118>)
 8002f86:	f7fe feff 	bl	8001d88 <push>
				//writeL86Data(finalData, strlen(finalData));

			}

			sendPDDataFlag = false;
 8002f8a:	4b1a      	ldr	r3, [pc, #104]	@ (8002ff4 <task2+0x108>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (interflag) {
 8002f90:	4b1d      	ldr	r3, [pc, #116]	@ (8003008 <task2+0x11c>)
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d026      	beq.n	8002fe6 <task2+0xfa>

		if (packetHistoryQueue.top >= 0) {
 8002f98:	4b1a      	ldr	r3, [pc, #104]	@ (8003004 <task2+0x118>)
 8002f9a:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8002f9e:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	@ 0xc00
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	db1f      	blt.n	8002fe6 <task2+0xfa>
			clearBuffer(finalData, sizeof(finalData));
 8002fa6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002faa:	4813      	ldr	r0, [pc, #76]	@ (8002ff8 <task2+0x10c>)
 8002fac:	f7fe fd8c 	bl	8001ac8 <clearBuffer>
			pop(&packetHistoryQueue, finalData);
 8002fb0:	4911      	ldr	r1, [pc, #68]	@ (8002ff8 <task2+0x10c>)
 8002fb2:	4814      	ldr	r0, [pc, #80]	@ (8003004 <task2+0x118>)
 8002fb4:	f7fe ff26 	bl	8001e04 <pop>
			if (!TCP_Send(finalData)) {
 8002fb8:	480f      	ldr	r0, [pc, #60]	@ (8002ff8 <task2+0x10c>)
 8002fba:	f019 fe2b 	bl	801cc14 <TCP_Send>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d10d      	bne.n	8002fe0 <task2+0xf4>
				finalData[20 + Flen] = 'H';
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	3314      	adds	r3, #20
 8002fc8:	4a0b      	ldr	r2, [pc, #44]	@ (8002ff8 <task2+0x10c>)
 8002fca:	2148      	movs	r1, #72	@ 0x48
 8002fcc:	54d1      	strb	r1, [r2, r3]
				push(&packetHistoryQueue, finalData, strlen(finalData));
 8002fce:	480a      	ldr	r0, [pc, #40]	@ (8002ff8 <task2+0x10c>)
 8002fd0:	f7fd f968 	bl	80002a4 <strlen>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	4907      	ldr	r1, [pc, #28]	@ (8002ff8 <task2+0x10c>)
 8002fda:	480a      	ldr	r0, [pc, #40]	@ (8003004 <task2+0x118>)
 8002fdc:	f7fe fed4 	bl	8001d88 <push>

				//check for historyqueue overflow

			}

			interflag = false;
 8002fe0:	4b09      	ldr	r3, [pc, #36]	@ (8003008 <task2+0x11c>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	701a      	strb	r2, [r3, #0]
		}

	}

}
 8002fe6:	bf00      	nop
 8002fe8:	3708      	adds	r7, #8
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	2000001c 	.word	0x2000001c
 8002ff4:	20012fb5 	.word	0x20012fb5
 8002ff8:	20000fa0 	.word	0x20000fa0
 8002ffc:	200017ac 	.word	0x200017ac
 8003000:	200013a0 	.word	0x200013a0
 8003004:	2000a3b0 	.word	0x2000a3b0
 8003008:	20012fb4 	.word	0x20012fb4

0800300c <generateData>:

void generateData(char *packetType) {
 800300c:	b580      	push	{r7, lr}
 800300e:	f6ad 3d38 	subw	sp, sp, #2872	@ 0xb38
 8003012:	af00      	add	r7, sp, #0
 8003014:	f607 3338 	addw	r3, r7, #2872	@ 0xb38
 8003018:	f6a3 3334 	subw	r3, r3, #2868	@ 0xb34
 800301c:	6018      	str	r0, [r3, #0]
	memset(mqttString, 0, sizeof(mqttString));
 800301e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003022:	2100      	movs	r1, #0
 8003024:	48a0      	ldr	r0, [pc, #640]	@ (80032a8 <generateData+0x29c>)
 8003026:	f01b fef3 	bl	801ee10 <memset>
	makeMessageHeader(mqttString, packetType);
 800302a:	f607 3338 	addw	r3, r7, #2872	@ 0xb38
 800302e:	f6a3 3334 	subw	r3, r3, #2868	@ 0xb34
 8003032:	6819      	ldr	r1, [r3, #0]
 8003034:	489c      	ldr	r0, [pc, #624]	@ (80032a8 <generateData+0x29c>)
 8003036:	f7ff fe23 	bl	8002c80 <makeMessageHeader>
	char tmpTime[7] = { 0 };
 800303a:	2300      	movs	r3, #0
 800303c:	f8c7 3b28 	str.w	r3, [r7, #2856]	@ 0xb28
 8003040:	f607 332c 	addw	r3, r7, #2860	@ 0xb2c
 8003044:	2100      	movs	r1, #0
 8003046:	460a      	mov	r2, r1
 8003048:	801a      	strh	r2, [r3, #0]
 800304a:	460a      	mov	r2, r1
 800304c:	709a      	strb	r2, [r3, #2]
	char tmpDate[9] = { 0 };
 800304e:	2300      	movs	r3, #0
 8003050:	f8c7 3b1c 	str.w	r3, [r7, #2844]	@ 0xb1c
 8003054:	f507 6332 	add.w	r3, r7, #2848	@ 0xb20
 8003058:	2200      	movs	r2, #0
 800305a:	601a      	str	r2, [r3, #0]
 800305c:	711a      	strb	r2, [r3, #4]
	getDateTime(tmpDate, tmpTime);
 800305e:	f607 3228 	addw	r2, r7, #2856	@ 0xb28
 8003062:	f607 331c 	addw	r3, r7, #2844	@ 0xb1c
 8003066:	4611      	mov	r1, r2
 8003068:	4618      	mov	r0, r3
 800306a:	f017 ff3f 	bl	801aeec <getDateTime>
//add GPS DATA
	clearBuffer(tmp_str, sizeof(tmp_str));
 800306e:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8003072:	488e      	ldr	r0, [pc, #568]	@ (80032ac <generateData+0x2a0>)
 8003074:	f7fe fd28 	bl	8001ac8 <clearBuffer>
	addGPSData(&L86Data, tmp_str, tmpTime, tmpDate);
 8003078:	f607 331c 	addw	r3, r7, #2844	@ 0xb1c
 800307c:	f607 3228 	addw	r2, r7, #2856	@ 0xb28
 8003080:	498a      	ldr	r1, [pc, #552]	@ (80032ac <generateData+0x2a0>)
 8003082:	488b      	ldr	r0, [pc, #556]	@ (80032b0 <generateData+0x2a4>)
 8003084:	f7ff fe94 	bl	8002db0 <addGPSData>
	strcat(mqttString, tmp_str);
 8003088:	4988      	ldr	r1, [pc, #544]	@ (80032ac <generateData+0x2a0>)
 800308a:	4887      	ldr	r0, [pc, #540]	@ (80032a8 <generateData+0x29c>)
 800308c:	f01b fec8 	bl	801ee20 <strcat>

	memset(tmp_str, 0, sizeof(tmp_str));
 8003090:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8003094:	2100      	movs	r1, #0
 8003096:	4885      	ldr	r0, [pc, #532]	@ (80032ac <generateData+0x2a0>)
 8003098:	f01b feba 	bl	801ee10 <memset>
	inputVoltage = 0;
 800309c:	4b85      	ldr	r3, [pc, #532]	@ (80032b4 <generateData+0x2a8>)
 800309e:	f04f 0200 	mov.w	r2, #0
 80030a2:	601a      	str	r2, [r3, #0]
	vehicalBatteryStatus = false;
 80030a4:	4b84      	ldr	r3, [pc, #528]	@ (80032b8 <generateData+0x2ac>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	701a      	strb	r2, [r3, #0]
	if (getInputVoltage(&inputVoltage)) {
 80030aa:	4882      	ldr	r0, [pc, #520]	@ (80032b4 <generateData+0x2a8>)
 80030ac:	f017 fde0 	bl	801ac70 <getInputVoltage>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00c      	beq.n	80030d0 <generateData+0xc4>
		if (inputVoltage > 7) {
 80030b6:	4b7f      	ldr	r3, [pc, #508]	@ (80032b4 <generateData+0x2a8>)
 80030b8:	edd3 7a00 	vldr	s15, [r3]
 80030bc:	eeb1 7a0c 	vmov.f32	s14, #28	@ 0x40e00000  7.0
 80030c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030c8:	dd02      	ble.n	80030d0 <generateData+0xc4>
			vehicalBatteryStatus = true;
 80030ca:	4b7b      	ldr	r3, [pc, #492]	@ (80032b8 <generateData+0x2ac>)
 80030cc:	2201      	movs	r2, #1
 80030ce:	701a      	strb	r2, [r3, #0]
		}
	}
	internalVoltage = 0;
 80030d0:	4b7a      	ldr	r3, [pc, #488]	@ (80032bc <generateData+0x2b0>)
 80030d2:	f04f 0200 	mov.w	r2, #0
 80030d6:	601a      	str	r2, [r3, #0]
	getInternalBattery(&internalVoltage);
 80030d8:	4878      	ldr	r0, [pc, #480]	@ (80032bc <generateData+0x2b0>)
 80030da:	f017 fe21 	bl	801ad20 <getInternalBattery>
	addGSMData(tmp_str);
 80030de:	4873      	ldr	r0, [pc, #460]	@ (80032ac <generateData+0x2a0>)
 80030e0:	f7ff fdfa 	bl	8002cd8 <addGSMData>
	strcat(mqttString, tmp_str);
 80030e4:	4971      	ldr	r1, [pc, #452]	@ (80032ac <generateData+0x2a0>)
 80030e6:	4870      	ldr	r0, [pc, #448]	@ (80032a8 <generateData+0x29c>)
 80030e8:	f01b fe9a 	bl	801ee20 <strcat>
	memset(tmp_str, 0, sizeof(tmp_str));
 80030ec:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80030f0:	2100      	movs	r1, #0
 80030f2:	486e      	ldr	r0, [pc, #440]	@ (80032ac <generateData+0x2a0>)
 80030f4:	f01b fe8c 	bl	801ee10 <memset>
	Map copyCanData;
	getCANData(&copyCanData);
 80030f8:	f607 03e8 	addw	r3, r7, #2280	@ 0x8e8
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7fd ff9f 	bl	8001040 <getCANData>
	char canStr[NUM_PID * 8 * 8] = { };
 8003102:	f607 3338 	addw	r3, r7, #2872	@ 0xb38
 8003106:	f5a3 6331 	sub.w	r3, r3, #2832	@ 0xb10
 800310a:	2200      	movs	r2, #0
 800310c:	601a      	str	r2, [r3, #0]
 800310e:	3304      	adds	r3, #4
 8003110:	f640 02bc 	movw	r2, #2236	@ 0x8bc
 8003114:	2100      	movs	r1, #0
 8003116:	4618      	mov	r0, r3
 8003118:	f01b fe7a 	bl	801ee10 <memset>
	for (int i = 0; i < copyCanData.size; i++) {
 800311c:	2300      	movs	r3, #0
 800311e:	f8c7 3b34 	str.w	r3, [r7, #2868]	@ 0xb34
 8003122:	e06b      	b.n	80031fc <generateData+0x1f0>
		char tmpCan[32] = { };
 8003124:	f607 3338 	addw	r3, r7, #2872	@ 0xb38
 8003128:	f5a3 6333 	sub.w	r3, r3, #2864	@ 0xb30
 800312c:	2200      	movs	r2, #0
 800312e:	601a      	str	r2, [r3, #0]
 8003130:	3304      	adds	r3, #4
 8003132:	2200      	movs	r2, #0
 8003134:	601a      	str	r2, [r3, #0]
 8003136:	605a      	str	r2, [r3, #4]
 8003138:	609a      	str	r2, [r3, #8]
 800313a:	60da      	str	r2, [r3, #12]
 800313c:	611a      	str	r2, [r3, #16]
 800313e:	615a      	str	r2, [r3, #20]
 8003140:	619a      	str	r2, [r3, #24]
		sprintf(tmpCan, "%08X:", copyCanData.pairs[i].key);
 8003142:	f607 3338 	addw	r3, r7, #2872	@ 0xb38
 8003146:	f5a3 7214 	sub.w	r2, r3, #592	@ 0x250
 800314a:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 800314e:	011b      	lsls	r3, r3, #4
 8003150:	4413      	add	r3, r2
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	f107 0308 	add.w	r3, r7, #8
 8003158:	4959      	ldr	r1, [pc, #356]	@ (80032c0 <generateData+0x2b4>)
 800315a:	4618      	mov	r0, r3
 800315c:	f01b fcfc 	bl	801eb58 <siprintf>
		for (uint8_t x = 0; x < 8; x++)
 8003160:	2300      	movs	r3, #0
 8003162:	f887 3b33 	strb.w	r3, [r7, #2867]	@ 0xb33
 8003166:	e01e      	b.n	80031a6 <generateData+0x19a>
			sprintf(tmpCan + strlen(tmpCan), "%02X",
 8003168:	f107 0308 	add.w	r3, r7, #8
 800316c:	4618      	mov	r0, r3
 800316e:	f7fd f899 	bl	80002a4 <strlen>
 8003172:	4602      	mov	r2, r0
 8003174:	f107 0308 	add.w	r3, r7, #8
 8003178:	1898      	adds	r0, r3, r2
					copyCanData.pairs[i].value[x]);
 800317a:	f897 3b33 	ldrb.w	r3, [r7, #2867]	@ 0xb33
 800317e:	f607 3238 	addw	r2, r7, #2872	@ 0xb38
 8003182:	f5a2 7114 	sub.w	r1, r2, #592	@ 0x250
 8003186:	f8d7 2b34 	ldr.w	r2, [r7, #2868]	@ 0xb34
 800318a:	0112      	lsls	r2, r2, #4
 800318c:	440a      	add	r2, r1
 800318e:	4413      	add	r3, r2
 8003190:	3304      	adds	r3, #4
 8003192:	781b      	ldrb	r3, [r3, #0]
			sprintf(tmpCan + strlen(tmpCan), "%02X",
 8003194:	461a      	mov	r2, r3
 8003196:	494b      	ldr	r1, [pc, #300]	@ (80032c4 <generateData+0x2b8>)
 8003198:	f01b fcde 	bl	801eb58 <siprintf>
		for (uint8_t x = 0; x < 8; x++)
 800319c:	f897 3b33 	ldrb.w	r3, [r7, #2867]	@ 0xb33
 80031a0:	3301      	adds	r3, #1
 80031a2:	f887 3b33 	strb.w	r3, [r7, #2867]	@ 0xb33
 80031a6:	f897 3b33 	ldrb.w	r3, [r7, #2867]	@ 0xb33
 80031aa:	2b07      	cmp	r3, #7
 80031ac:	d9dc      	bls.n	8003168 <generateData+0x15c>
		if (i + 1 != copyCanData.size) {
 80031ae:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 80031b2:	1c5a      	adds	r2, r3, #1
 80031b4:	f607 3338 	addw	r3, r7, #2872	@ 0xb38
 80031b8:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 80031bc:	f8d3 3230 	ldr.w	r3, [r3, #560]	@ 0x230
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d00e      	beq.n	80031e2 <generateData+0x1d6>
			strcat(tmpCan, ";");
 80031c4:	f107 0308 	add.w	r3, r7, #8
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7fd f86b 	bl	80002a4 <strlen>
 80031ce:	4603      	mov	r3, r0
 80031d0:	461a      	mov	r2, r3
 80031d2:	f107 0308 	add.w	r3, r7, #8
 80031d6:	4413      	add	r3, r2
 80031d8:	493b      	ldr	r1, [pc, #236]	@ (80032c8 <generateData+0x2bc>)
 80031da:	461a      	mov	r2, r3
 80031dc:	460b      	mov	r3, r1
 80031de:	881b      	ldrh	r3, [r3, #0]
 80031e0:	8013      	strh	r3, [r2, #0]
		}
		strcat(canStr, tmpCan);
 80031e2:	f107 0208 	add.w	r2, r7, #8
 80031e6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80031ea:	4611      	mov	r1, r2
 80031ec:	4618      	mov	r0, r3
 80031ee:	f01b fe17 	bl	801ee20 <strcat>
	for (int i = 0; i < copyCanData.size; i++) {
 80031f2:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 80031f6:	3301      	adds	r3, #1
 80031f8:	f8c7 3b34 	str.w	r3, [r7, #2868]	@ 0xb34
 80031fc:	f607 3338 	addw	r3, r7, #2872	@ 0xb38
 8003200:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8003204:	f8d3 3230 	ldr.w	r3, [r3, #560]	@ 0x230
 8003208:	f8d7 2b34 	ldr.w	r2, [r7, #2868]	@ 0xb34
 800320c:	429a      	cmp	r2, r3
 800320e:	db89      	blt.n	8003124 <generateData+0x118>
	}
	strcat(mqttString, canStr);
 8003210:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003214:	4619      	mov	r1, r3
 8003216:	4824      	ldr	r0, [pc, #144]	@ (80032a8 <generateData+0x29c>)
 8003218:	f01b fe02 	bl	801ee20 <strcat>
	strcat(mqttString, ",()"); //OTA
 800321c:	4822      	ldr	r0, [pc, #136]	@ (80032a8 <generateData+0x29c>)
 800321e:	f7fd f841 	bl	80002a4 <strlen>
 8003222:	4603      	mov	r3, r0
 8003224:	461a      	mov	r2, r3
 8003226:	4b20      	ldr	r3, [pc, #128]	@ (80032a8 <generateData+0x29c>)
 8003228:	4413      	add	r3, r2
 800322a:	4a28      	ldr	r2, [pc, #160]	@ (80032cc <generateData+0x2c0>)
 800322c:	6810      	ldr	r0, [r2, #0]
 800322e:	6018      	str	r0, [r3, #0]
	sprintf(mqttString + strlen(mqttString), ",%d", FRAME_NUMBER);
 8003230:	481d      	ldr	r0, [pc, #116]	@ (80032a8 <generateData+0x29c>)
 8003232:	f7fd f837 	bl	80002a4 <strlen>
 8003236:	4603      	mov	r3, r0
 8003238:	4a1b      	ldr	r2, [pc, #108]	@ (80032a8 <generateData+0x29c>)
 800323a:	4413      	add	r3, r2
 800323c:	4a24      	ldr	r2, [pc, #144]	@ (80032d0 <generateData+0x2c4>)
 800323e:	6812      	ldr	r2, [r2, #0]
 8003240:	4924      	ldr	r1, [pc, #144]	@ (80032d4 <generateData+0x2c8>)
 8003242:	4618      	mov	r0, r3
 8003244:	f01b fc88 	bl	801eb58 <siprintf>
	uint8_t checksum = Calculate_CRC8(&mqttString[1], strlen(mqttString) - 1);
 8003248:	4817      	ldr	r0, [pc, #92]	@ (80032a8 <generateData+0x29c>)
 800324a:	f7fd f82b 	bl	80002a4 <strlen>
 800324e:	4603      	mov	r3, r0
 8003250:	3b01      	subs	r3, #1
 8003252:	4619      	mov	r1, r3
 8003254:	4820      	ldr	r0, [pc, #128]	@ (80032d8 <generateData+0x2cc>)
 8003256:	f014 fc81 	bl	8017b5c <Calculate_CRC8>
 800325a:	4603      	mov	r3, r0
 800325c:	f887 3b32 	strb.w	r3, [r7, #2866]	@ 0xb32
	sprintf(mqttString + strlen(mqttString), "*%02X", checksum);
 8003260:	4811      	ldr	r0, [pc, #68]	@ (80032a8 <generateData+0x29c>)
 8003262:	f7fd f81f 	bl	80002a4 <strlen>
 8003266:	4603      	mov	r3, r0
 8003268:	4a0f      	ldr	r2, [pc, #60]	@ (80032a8 <generateData+0x29c>)
 800326a:	4413      	add	r3, r2
 800326c:	f897 2b32 	ldrb.w	r2, [r7, #2866]	@ 0xb32
 8003270:	491a      	ldr	r1, [pc, #104]	@ (80032dc <generateData+0x2d0>)
 8003272:	4618      	mov	r0, r3
 8003274:	f01b fc70 	bl	801eb58 <siprintf>
	printc(1000, "Data To Send\n%s\n", mqttString);
 8003278:	4a0b      	ldr	r2, [pc, #44]	@ (80032a8 <generateData+0x29c>)
 800327a:	4919      	ldr	r1, [pc, #100]	@ (80032e0 <generateData+0x2d4>)
 800327c:	20e8      	movs	r0, #232	@ 0xe8
 800327e:	f7fe fbcb 	bl	8001a18 <printc>
	//enqueue(&dataQueue, mqttString);
	push(&dataQueue, mqttString, strlen(mqttString));
 8003282:	4809      	ldr	r0, [pc, #36]	@ (80032a8 <generateData+0x29c>)
 8003284:	f7fd f80e 	bl	80002a4 <strlen>
 8003288:	4603      	mov	r3, r0
 800328a:	461a      	mov	r2, r3
 800328c:	4906      	ldr	r1, [pc, #24]	@ (80032a8 <generateData+0x29c>)
 800328e:	4815      	ldr	r0, [pc, #84]	@ (80032e4 <generateData+0x2d8>)
 8003290:	f7fe fd7a 	bl	8001d88 <push>
	FRAME_NUMBER++;
 8003294:	4b0e      	ldr	r3, [pc, #56]	@ (80032d0 <generateData+0x2c4>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	3301      	adds	r3, #1
 800329a:	4a0d      	ldr	r2, [pc, #52]	@ (80032d0 <generateData+0x2c4>)
 800329c:	6013      	str	r3, [r2, #0]

}
 800329e:	bf00      	nop
 80032a0:	f607 3738 	addw	r7, r7, #2872	@ 0xb38
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	20013288 	.word	0x20013288
 80032ac:	20013094 	.word	0x20013094
 80032b0:	20000f60 	.word	0x20000f60
 80032b4:	20012fbc 	.word	0x20012fbc
 80032b8:	20012fc4 	.word	0x20012fc4
 80032bc:	20012fc0 	.word	0x20012fc0
 80032c0:	080228d4 	.word	0x080228d4
 80032c4:	080228dc 	.word	0x080228dc
 80032c8:	080228e4 	.word	0x080228e4
 80032cc:	080228e8 	.word	0x080228e8
 80032d0:	20000004 	.word	0x20000004
 80032d4:	080228ec 	.word	0x080228ec
 80032d8:	20013289 	.word	0x20013289
 80032dc:	080228f0 	.word	0x080228f0
 80032e0:	080228f8 	.word	0x080228f8
 80032e4:	200017ac 	.word	0x200017ac

080032e8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim6) {
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]

	if (htim6->Instance == TIM6) {
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a3e      	ldr	r2, [pc, #248]	@ (80033f0 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d109      	bne.n	800330e <HAL_TIM_PeriodElapsedCallback+0x26>
		seconds++;
 80032fa:	4b3e      	ldr	r3, [pc, #248]	@ (80033f4 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	3301      	adds	r3, #1
 8003300:	4a3c      	ldr	r2, [pc, #240]	@ (80033f4 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8003302:	6013      	str	r3, [r2, #0]
		nsam_seconds++;
 8003304:	4b3c      	ldr	r3, [pc, #240]	@ (80033f8 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	3301      	adds	r3, #1
 800330a:	4a3b      	ldr	r2, [pc, #236]	@ (80033f8 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800330c:	6013      	str	r3, [r2, #0]
	}

	blinkLed(seconds);
 800330e:	4b39      	ldr	r3, [pc, #228]	@ (80033f4 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4618      	mov	r0, r3
 8003314:	f018 f83c 	bl	801b390 <blinkLed>
	if (getSleepStatus())
 8003318:	f017 fc7e 	bl	801ac18 <getSleepStatus>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d162      	bne.n	80033e8 <HAL_TIM_PeriodElapsedCallback+0x100>
		return;
//	Setting Up sampling frequency if we have latitude and longitude
	if ((seconds / (100 * SAMPLIMG_FREQUENCY)) > 0) {
 8003322:	4b34      	ldr	r3, [pc, #208]	@ (80033f4 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	4b35      	ldr	r3, [pc, #212]	@ (80033fc <HAL_TIM_PeriodElapsedCallback+0x114>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2164      	movs	r1, #100	@ 0x64
 800332c:	fb01 f303 	mul.w	r3, r1, r3
 8003330:	fb92 f3f3 	sdiv	r3, r2, r3
 8003334:	2b00      	cmp	r3, #0
 8003336:	dd2a      	ble.n	800338e <HAL_TIM_PeriodElapsedCallback+0xa6>
		//generateData("NR");
		if (!getUpdateStatus()) {
 8003338:	f014 fc56 	bl	8017be8 <getUpdateStatus>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d106      	bne.n	8003350 <HAL_TIM_PeriodElapsedCallback+0x68>
			ledHendler.gpsLedState = HEIGH;
 8003342:	4b2f      	ldr	r3, [pc, #188]	@ (8003400 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8003344:	2200      	movs	r2, #0
 8003346:	701a      	strb	r2, [r3, #0]
			generateData("NR");
 8003348:	482e      	ldr	r0, [pc, #184]	@ (8003404 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800334a:	f7ff fe5f 	bl	800300c <generateData>
 800334e:	e002      	b.n	8003356 <HAL_TIM_PeriodElapsedCallback+0x6e>
		} else {
			ledHendler.gpsLedState = LOW;
 8003350:	4b2b      	ldr	r3, [pc, #172]	@ (8003400 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8003352:	2201      	movs	r2, #1
 8003354:	701a      	strb	r2, [r3, #0]

		}
		seconds = 0;
 8003356:	4b27      	ldr	r3, [pc, #156]	@ (80033f4 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8003358:	2200      	movs	r2, #0
 800335a:	601a      	str	r2, [r3, #0]
		if (!getIgnition()) {
 800335c:	f017 fd3c 	bl	801add8 <getIgnition>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d110      	bne.n	8003388 <HAL_TIM_PeriodElapsedCallback+0xa0>
			if (sleepcount == 0 && SendIFDataFlag) {
 8003366:	4b28      	ldr	r3, [pc, #160]	@ (8003408 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d106      	bne.n	800337c <HAL_TIM_PeriodElapsedCallback+0x94>
 800336e:	4b27      	ldr	r3, [pc, #156]	@ (800340c <HAL_TIM_PeriodElapsedCallback+0x124>)
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d002      	beq.n	800337c <HAL_TIM_PeriodElapsedCallback+0x94>
				generateData("IF");
 8003376:	4826      	ldr	r0, [pc, #152]	@ (8003410 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8003378:	f7ff fe48 	bl	800300c <generateData>
				SendIFDataFlag == false;
			}
			sleepcount++;
 800337c:	4b22      	ldr	r3, [pc, #136]	@ (8003408 <HAL_TIM_PeriodElapsedCallback+0x120>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	3301      	adds	r3, #1
 8003382:	4a21      	ldr	r2, [pc, #132]	@ (8003408 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8003384:	6013      	str	r3, [r2, #0]
 8003386:	e002      	b.n	800338e <HAL_TIM_PeriodElapsedCallback+0xa6>
		} else {
			sleepcount = 0;
 8003388:	4b1f      	ldr	r3, [pc, #124]	@ (8003408 <HAL_TIM_PeriodElapsedCallback+0x120>)
 800338a:	2200      	movs	r2, #0
 800338c:	601a      	str	r2, [r3, #0]
			SendIFDataFlag == true;
		}
	}
	//gen data greater than, right now considering same sampling freq
	if ((nsam_seconds / (100 * SAMPLIMG_FREQUENCY)) > 0) {
 800338e:	4b1a      	ldr	r3, [pc, #104]	@ (80033f8 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	4b1a      	ldr	r3, [pc, #104]	@ (80033fc <HAL_TIM_PeriodElapsedCallback+0x114>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2164      	movs	r1, #100	@ 0x64
 8003398:	fb01 f303 	mul.w	r3, r1, r3
 800339c:	fb92 f3f3 	sdiv	r3, r2, r3
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	dd08      	ble.n	80033b6 <HAL_TIM_PeriodElapsedCallback+0xce>
		sendPDDataFlag = true;
 80033a4:	4b1b      	ldr	r3, [pc, #108]	@ (8003414 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80033a6:	2201      	movs	r2, #1
 80033a8:	701a      	strb	r2, [r3, #0]
		interflag = false;
 80033aa:	4b1b      	ldr	r3, [pc, #108]	@ (8003418 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	701a      	strb	r2, [r3, #0]
		nsam_seconds = 0;
 80033b0:	4b11      	ldr	r3, [pc, #68]	@ (80033f8 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	601a      	str	r2, [r3, #0]
	}
	if (!((nsam_seconds > ((SAMPLIMG_FREQUENCY - 3) * 100)) || (sendPDDataFlag))) {
 80033b6:	4b11      	ldr	r3, [pc, #68]	@ (80033fc <HAL_TIM_PeriodElapsedCallback+0x114>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	3b03      	subs	r3, #3
 80033bc:	2264      	movs	r2, #100	@ 0x64
 80033be:	fb03 f202 	mul.w	r2, r3, r2
 80033c2:	4b0d      	ldr	r3, [pc, #52]	@ (80033f8 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	db0a      	blt.n	80033e0 <HAL_TIM_PeriodElapsedCallback+0xf8>
 80033ca:	4b12      	ldr	r3, [pc, #72]	@ (8003414 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	f083 0301 	eor.w	r3, r3, #1
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d003      	beq.n	80033e0 <HAL_TIM_PeriodElapsedCallback+0xf8>
		interflag = true;
 80033d8:	4b0f      	ldr	r3, [pc, #60]	@ (8003418 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80033da:	2201      	movs	r2, #1
 80033dc:	701a      	strb	r2, [r3, #0]
 80033de:	e004      	b.n	80033ea <HAL_TIM_PeriodElapsedCallback+0x102>
	} else {
		interflag = false;
 80033e0:	4b0d      	ldr	r3, [pc, #52]	@ (8003418 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	701a      	strb	r2, [r3, #0]
 80033e6:	e000      	b.n	80033ea <HAL_TIM_PeriodElapsedCallback+0x102>
		return;
 80033e8:	bf00      	nop
	}

}
 80033ea:	3708      	adds	r7, #8
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	40001000 	.word	0x40001000
 80033f4:	20000f40 	.word	0x20000f40
 80033f8:	20000f44 	.word	0x20000f44
 80033fc:	20000008 	.word	0x20000008
 8003400:	200000a4 	.word	0x200000a4
 8003404:	0802290c 	.word	0x0802290c
 8003408:	20000f5c 	.word	0x20000f5c
 800340c:	200017a8 	.word	0x200017a8
 8003410:	08022910 	.word	0x08022910
 8003414:	20012fb5 	.word	0x20012fb5
 8003418:	20012fb4 	.word	0x20012fb4

0800341c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]

	if (huart->Instance == UART5) {
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a04      	ldr	r2, [pc, #16]	@ (800343c <HAL_UART_RxCpltCallback+0x20>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d101      	bne.n	8003432 <HAL_UART_RxCpltCallback+0x16>
		L86_RxCpltCallback();
 800342e:	f019 f88b 	bl	801c548 <L86_RxCpltCallback>
	} else if (huart->Instance == USART1) {
		void E200_RXCpltCallback();
	}
}
 8003432:	bf00      	nop
 8003434:	3708      	adds	r7, #8
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	40005000 	.word	0x40005000

08003440 <HAL_UART_RxHalfCpltCallback>:
void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart) {
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
	if (huart->Instance == UART5) {
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a08      	ldr	r2, [pc, #32]	@ (8003470 <HAL_UART_RxHalfCpltCallback+0x30>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d102      	bne.n	8003458 <HAL_UART_RxHalfCpltCallback+0x18>
		L86_RxHalfCpltCallback();
 8003452:	f019 f85d 	bl	801c510 <L86_RxHalfCpltCallback>
	} else if (huart->Instance == USART1) {
		E200_RxHAlfCpltCallback();
	}
}
 8003456:	e006      	b.n	8003466 <HAL_UART_RxHalfCpltCallback+0x26>
	} else if (huart->Instance == USART1) {
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a05      	ldr	r2, [pc, #20]	@ (8003474 <HAL_UART_RxHalfCpltCallback+0x34>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d101      	bne.n	8003466 <HAL_UART_RxHalfCpltCallback+0x26>
		E200_RxHAlfCpltCallback();
 8003462:	f7fe fa6f 	bl	8001944 <E200_RxHAlfCpltCallback>
}
 8003466:	bf00      	nop
 8003468:	3708      	adds	r7, #8
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	40005000 	.word	0x40005000
 8003474:	40013800 	.word	0x40013800

08003478 <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	460b      	mov	r3, r1
 8003482:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == UART5) {
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a0c      	ldr	r2, [pc, #48]	@ (80034bc <HAL_UARTEx_RxEventCallback+0x44>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d012      	beq.n	80034b4 <HAL_UARTEx_RxEventCallback+0x3c>
//			L86_RxCpltCallback();
	} else if (huart->Instance == USART1) {
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a0b      	ldr	r2, [pc, #44]	@ (80034c0 <HAL_UARTEx_RxEventCallback+0x48>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d104      	bne.n	80034a2 <HAL_UARTEx_RxEventCallback+0x2a>
		Ec200_RxEventCallback(Size);
 8003498:	887b      	ldrh	r3, [r7, #2]
 800349a:	4618      	mov	r0, r3
 800349c:	f7fe fa60 	bl	8001960 <Ec200_RxEventCallback>
	} else if (huart->Instance == USART6) {
		print_RxEventCallback(Size);
	}

}
 80034a0:	e008      	b.n	80034b4 <HAL_UARTEx_RxEventCallback+0x3c>
	} else if (huart->Instance == USART6) {
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a07      	ldr	r2, [pc, #28]	@ (80034c4 <HAL_UARTEx_RxEventCallback+0x4c>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d103      	bne.n	80034b4 <HAL_UARTEx_RxEventCallback+0x3c>
		print_RxEventCallback(Size);
 80034ac:	887b      	ldrh	r3, [r7, #2]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7fe fbae 	bl	8001c10 <print_RxEventCallback>
}
 80034b4:	bf00      	nop
 80034b6:	3708      	adds	r7, #8
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	40005000 	.word	0x40005000
 80034c0:	40013800 	.word	0x40013800
 80034c4:	40006400 	.word	0x40006400

080034c8 <setSampling>:
void setSampling(int sampling) {
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
	SAMPLIMG_FREQUENCY = sampling;
 80034d0:	4a04      	ldr	r2, [pc, #16]	@ (80034e4 <setSampling+0x1c>)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6013      	str	r3, [r2, #0]
}
 80034d6:	bf00      	nop
 80034d8:	370c      	adds	r7, #12
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	20000008 	.word	0x20000008

080034e8 <Check_USMS>:

void Check_USMS() {
 80034e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034ec:	b086      	sub	sp, #24
 80034ee:	af00      	add	r7, sp, #0
	char CP_Data[8] = { 0 };
 80034f0:	2300      	movs	r3, #0
 80034f2:	613b      	str	r3, [r7, #16]
 80034f4:	2300      	movs	r3, #0
 80034f6:	617b      	str	r3, [r7, #20]
	char CD_Data[8] = { 0 };
 80034f8:	2300      	movs	r3, #0
 80034fa:	60bb      	str	r3, [r7, #8]
 80034fc:	2300      	movs	r3, #0
 80034fe:	60fb      	str	r3, [r7, #12]
	char Sp_Data[8] = { 0 };
 8003500:	2300      	movs	r3, #0
 8003502:	603b      	str	r3, [r7, #0]
 8003504:	2300      	movs	r3, #0
 8003506:	607b      	str	r3, [r7, #4]
	FLASH_Read_Buff(Current_App_LOC, CP_Data, 8);
 8003508:	f107 0310 	add.w	r3, r7, #16
 800350c:	2208      	movs	r2, #8
 800350e:	4619      	mov	r1, r3
 8003510:	4816      	ldr	r0, [pc, #88]	@ (800356c <Check_USMS+0x84>)
 8003512:	f013 f87d 	bl	8016610 <FLASH_Read_Buff>
	FLASH_Read_Buff(Current_App_LOC + 16, CD_Data, 8);
 8003516:	f107 0308 	add.w	r3, r7, #8
 800351a:	2208      	movs	r2, #8
 800351c:	4619      	mov	r1, r3
 800351e:	4814      	ldr	r0, [pc, #80]	@ (8003570 <Check_USMS+0x88>)
 8003520:	f013 f876 	bl	8016610 <FLASH_Read_Buff>
	FLASH_Read_Buff(Current_App_LOC + 32, Sp_Data, 8);
 8003524:	463b      	mov	r3, r7
 8003526:	2208      	movs	r2, #8
 8003528:	4619      	mov	r1, r3
 800352a:	4812      	ldr	r0, [pc, #72]	@ (8003574 <Check_USMS+0x8c>)
 800352c:	f013 f870 	bl	8016610 <FLASH_Read_Buff>
	CP = CP_Data[0];
 8003530:	7c3b      	ldrb	r3, [r7, #16]
 8003532:	b2db      	uxtb	r3, r3
 8003534:	2200      	movs	r2, #0
 8003536:	469a      	mov	sl, r3
 8003538:	4693      	mov	fp, r2
 800353a:	4b0f      	ldr	r3, [pc, #60]	@ (8003578 <Check_USMS+0x90>)
 800353c:	e9c3 ab00 	strd	sl, fp, [r3]
	CD = CD_Data[0];
 8003540:	7a3b      	ldrb	r3, [r7, #8]
 8003542:	b2db      	uxtb	r3, r3
 8003544:	2200      	movs	r2, #0
 8003546:	4698      	mov	r8, r3
 8003548:	4691      	mov	r9, r2
 800354a:	4b0c      	ldr	r3, [pc, #48]	@ (800357c <Check_USMS+0x94>)
 800354c:	e9c3 8900 	strd	r8, r9, [r3]
	SP = Sp_Data[0];
 8003550:	783b      	ldrb	r3, [r7, #0]
 8003552:	b2db      	uxtb	r3, r3
 8003554:	2200      	movs	r2, #0
 8003556:	461c      	mov	r4, r3
 8003558:	4615      	mov	r5, r2
 800355a:	4b09      	ldr	r3, [pc, #36]	@ (8003580 <Check_USMS+0x98>)
 800355c:	e9c3 4500 	strd	r4, r5, [r3]
}
 8003560:	bf00      	nop
 8003562:	3718      	adds	r7, #24
 8003564:	46bd      	mov	sp, r7
 8003566:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800356a:	bf00      	nop
 800356c:	08168000 	.word	0x08168000
 8003570:	08168010 	.word	0x08168010
 8003574:	08168020 	.word	0x08168020
 8003578:	20013a38 	.word	0x20013a38
 800357c:	20013a40 	.word	0x20013a40
 8003580:	200017a0 	.word	0x200017a0

08003584 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b088      	sub	sp, #32
 8003588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800358a:	463b      	mov	r3, r7
 800358c:	2220      	movs	r2, #32
 800358e:	2100      	movs	r1, #0
 8003590:	4618      	mov	r0, r3
 8003592:	f01b fc3d 	bl	801ee10 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8003596:	4b2b      	ldr	r3, [pc, #172]	@ (8003644 <MX_ADC1_Init+0xc0>)
 8003598:	4a2b      	ldr	r2, [pc, #172]	@ (8003648 <MX_ADC1_Init+0xc4>)
 800359a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800359c:	4b29      	ldr	r3, [pc, #164]	@ (8003644 <MX_ADC1_Init+0xc0>)
 800359e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80035a2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80035a4:	4b27      	ldr	r3, [pc, #156]	@ (8003644 <MX_ADC1_Init+0xc0>)
 80035a6:	2200      	movs	r2, #0
 80035a8:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80035aa:	4b26      	ldr	r3, [pc, #152]	@ (8003644 <MX_ADC1_Init+0xc0>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80035b0:	4b24      	ldr	r3, [pc, #144]	@ (8003644 <MX_ADC1_Init+0xc0>)
 80035b2:	2200      	movs	r2, #0
 80035b4:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80035b6:	4b23      	ldr	r3, [pc, #140]	@ (8003644 <MX_ADC1_Init+0xc0>)
 80035b8:	2204      	movs	r2, #4
 80035ba:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80035bc:	4b21      	ldr	r3, [pc, #132]	@ (8003644 <MX_ADC1_Init+0xc0>)
 80035be:	2200      	movs	r2, #0
 80035c0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80035c2:	4b20      	ldr	r3, [pc, #128]	@ (8003644 <MX_ADC1_Init+0xc0>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80035c8:	4b1e      	ldr	r3, [pc, #120]	@ (8003644 <MX_ADC1_Init+0xc0>)
 80035ca:	2201      	movs	r2, #1
 80035cc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80035ce:	4b1d      	ldr	r3, [pc, #116]	@ (8003644 <MX_ADC1_Init+0xc0>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80035d6:	4b1b      	ldr	r3, [pc, #108]	@ (8003644 <MX_ADC1_Init+0xc0>)
 80035d8:	2200      	movs	r2, #0
 80035da:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80035dc:	4b19      	ldr	r3, [pc, #100]	@ (8003644 <MX_ADC1_Init+0xc0>)
 80035de:	2200      	movs	r2, #0
 80035e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80035e2:	4b18      	ldr	r3, [pc, #96]	@ (8003644 <MX_ADC1_Init+0xc0>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 80035ea:	4b16      	ldr	r3, [pc, #88]	@ (8003644 <MX_ADC1_Init+0xc0>)
 80035ec:	2200      	movs	r2, #0
 80035ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80035f0:	4b14      	ldr	r3, [pc, #80]	@ (8003644 <MX_ADC1_Init+0xc0>)
 80035f2:	2200      	movs	r2, #0
 80035f4:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80035f6:	4b13      	ldr	r3, [pc, #76]	@ (8003644 <MX_ADC1_Init+0xc0>)
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80035fe:	4811      	ldr	r0, [pc, #68]	@ (8003644 <MX_ADC1_Init+0xc0>)
 8003600:	f002 fca6 	bl	8005f50 <HAL_ADC_Init>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d001      	beq.n	800360e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800360a:	f001 f8a8 	bl	800475e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800360e:	4b0f      	ldr	r3, [pc, #60]	@ (800364c <MX_ADC1_Init+0xc8>)
 8003610:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003612:	2306      	movs	r3, #6
 8003614:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8003616:	2300      	movs	r3, #0
 8003618:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800361a:	237f      	movs	r3, #127	@ 0x7f
 800361c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800361e:	2304      	movs	r3, #4
 8003620:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8003622:	2300      	movs	r3, #0
 8003624:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003626:	463b      	mov	r3, r7
 8003628:	4619      	mov	r1, r3
 800362a:	4806      	ldr	r0, [pc, #24]	@ (8003644 <MX_ADC1_Init+0xc0>)
 800362c:	f002 ffb8 	bl	80065a0 <HAL_ADC_ConfigChannel>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d001      	beq.n	800363a <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8003636:	f001 f892 	bl	800475e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800363a:	bf00      	nop
 800363c:	3720      	adds	r7, #32
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	200138dc 	.word	0x200138dc
 8003648:	42028000 	.word	0x42028000
 800364c:	04300002 	.word	0x04300002

08003650 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b088      	sub	sp, #32
 8003654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003656:	463b      	mov	r3, r7
 8003658:	2220      	movs	r2, #32
 800365a:	2100      	movs	r1, #0
 800365c:	4618      	mov	r0, r3
 800365e:	f01b fbd7 	bl	801ee10 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8003662:	4b2b      	ldr	r3, [pc, #172]	@ (8003710 <MX_ADC2_Init+0xc0>)
 8003664:	4a2b      	ldr	r2, [pc, #172]	@ (8003714 <MX_ADC2_Init+0xc4>)
 8003666:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8003668:	4b29      	ldr	r3, [pc, #164]	@ (8003710 <MX_ADC2_Init+0xc0>)
 800366a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800366e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003670:	4b27      	ldr	r3, [pc, #156]	@ (8003710 <MX_ADC2_Init+0xc0>)
 8003672:	2200      	movs	r2, #0
 8003674:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003676:	4b26      	ldr	r3, [pc, #152]	@ (8003710 <MX_ADC2_Init+0xc0>)
 8003678:	2200      	movs	r2, #0
 800367a:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800367c:	4b24      	ldr	r3, [pc, #144]	@ (8003710 <MX_ADC2_Init+0xc0>)
 800367e:	2200      	movs	r2, #0
 8003680:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003682:	4b23      	ldr	r3, [pc, #140]	@ (8003710 <MX_ADC2_Init+0xc0>)
 8003684:	2204      	movs	r2, #4
 8003686:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8003688:	4b21      	ldr	r3, [pc, #132]	@ (8003710 <MX_ADC2_Init+0xc0>)
 800368a:	2200      	movs	r2, #0
 800368c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800368e:	4b20      	ldr	r3, [pc, #128]	@ (8003710 <MX_ADC2_Init+0xc0>)
 8003690:	2200      	movs	r2, #0
 8003692:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8003694:	4b1e      	ldr	r3, [pc, #120]	@ (8003710 <MX_ADC2_Init+0xc0>)
 8003696:	2201      	movs	r2, #1
 8003698:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800369a:	4b1d      	ldr	r3, [pc, #116]	@ (8003710 <MX_ADC2_Init+0xc0>)
 800369c:	2200      	movs	r2, #0
 800369e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80036a2:	4b1b      	ldr	r3, [pc, #108]	@ (8003710 <MX_ADC2_Init+0xc0>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80036a8:	4b19      	ldr	r3, [pc, #100]	@ (8003710 <MX_ADC2_Init+0xc0>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80036ae:	4b18      	ldr	r3, [pc, #96]	@ (8003710 <MX_ADC2_Init+0xc0>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hadc2.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 80036b6:	4b16      	ldr	r3, [pc, #88]	@ (8003710 <MX_ADC2_Init+0xc0>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80036bc:	4b14      	ldr	r3, [pc, #80]	@ (8003710 <MX_ADC2_Init+0xc0>)
 80036be:	2200      	movs	r2, #0
 80036c0:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc2.Init.OversamplingMode = DISABLE;
 80036c2:	4b13      	ldr	r3, [pc, #76]	@ (8003710 <MX_ADC2_Init+0xc0>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80036ca:	4811      	ldr	r0, [pc, #68]	@ (8003710 <MX_ADC2_Init+0xc0>)
 80036cc:	f002 fc40 	bl	8005f50 <HAL_ADC_Init>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d001      	beq.n	80036da <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80036d6:	f001 f842 	bl	800475e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80036da:	4b0f      	ldr	r3, [pc, #60]	@ (8003718 <MX_ADC2_Init+0xc8>)
 80036dc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80036de:	2306      	movs	r3, #6
 80036e0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80036e2:	2300      	movs	r3, #0
 80036e4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80036e6:	237f      	movs	r3, #127	@ 0x7f
 80036e8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80036ea:	2304      	movs	r3, #4
 80036ec:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80036ee:	2300      	movs	r3, #0
 80036f0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80036f2:	463b      	mov	r3, r7
 80036f4:	4619      	mov	r1, r3
 80036f6:	4806      	ldr	r0, [pc, #24]	@ (8003710 <MX_ADC2_Init+0xc0>)
 80036f8:	f002 ff52 	bl	80065a0 <HAL_ADC_ConfigChannel>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d001      	beq.n	8003706 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8003702:	f001 f82c 	bl	800475e <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8003706:	bf00      	nop
 8003708:	3720      	adds	r7, #32
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	20013944 	.word	0x20013944
 8003714:	42028100 	.word	0x42028100
 8003718:	2a000400 	.word	0x2a000400

0800371c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b0d0      	sub	sp, #320	@ 0x140
 8003720:	af00      	add	r7, sp, #0
 8003722:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003726:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800372a:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800372c:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8003730:	2200      	movs	r2, #0
 8003732:	601a      	str	r2, [r3, #0]
 8003734:	605a      	str	r2, [r3, #4]
 8003736:	609a      	str	r2, [r3, #8]
 8003738:	60da      	str	r2, [r3, #12]
 800373a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800373c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003740:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003744:	4618      	mov	r0, r3
 8003746:	f44f 7384 	mov.w	r3, #264	@ 0x108
 800374a:	461a      	mov	r2, r3
 800374c:	2100      	movs	r1, #0
 800374e:	f01b fb5f 	bl	801ee10 <memset>
  if(adcHandle->Instance==ADC1)
 8003752:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003756:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a7d      	ldr	r2, [pc, #500]	@ (8003954 <HAL_ADC_MspInit+0x238>)
 8003760:	4293      	cmp	r3, r2
 8003762:	f040 8088 	bne.w	8003876 <HAL_ADC_MspInit+0x15a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8003766:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800376a:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 800376e:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003772:	f04f 0300 	mov.w	r3, #0
 8003776:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HCLK;
 800377a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800377e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003782:	2200      	movs	r2, #0
 8003784:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003788:	f107 0320 	add.w	r3, r7, #32
 800378c:	4618      	mov	r0, r3
 800378e:	f009 f8f7 	bl	800c980 <HAL_RCCEx_PeriphCLKConfig>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d001      	beq.n	800379c <HAL_ADC_MspInit+0x80>
    {
      Error_Handler();
 8003798:	f000 ffe1 	bl	800475e <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 800379c:	4b6e      	ldr	r3, [pc, #440]	@ (8003958 <HAL_ADC_MspInit+0x23c>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	3301      	adds	r3, #1
 80037a2:	4a6d      	ldr	r2, [pc, #436]	@ (8003958 <HAL_ADC_MspInit+0x23c>)
 80037a4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80037a6:	4b6c      	ldr	r3, [pc, #432]	@ (8003958 <HAL_ADC_MspInit+0x23c>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d116      	bne.n	80037dc <HAL_ADC_MspInit+0xc0>
      __HAL_RCC_ADC_CLK_ENABLE();
 80037ae:	4b6b      	ldr	r3, [pc, #428]	@ (800395c <HAL_ADC_MspInit+0x240>)
 80037b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80037b4:	4a69      	ldr	r2, [pc, #420]	@ (800395c <HAL_ADC_MspInit+0x240>)
 80037b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80037ba:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80037be:	4b67      	ldr	r3, [pc, #412]	@ (800395c <HAL_ADC_MspInit+0x240>)
 80037c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80037c4:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 80037c8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80037cc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80037d0:	601a      	str	r2, [r3, #0]
 80037d2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80037d6:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80037da:	681b      	ldr	r3, [r3, #0]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80037dc:	4b5f      	ldr	r3, [pc, #380]	@ (800395c <HAL_ADC_MspInit+0x240>)
 80037de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80037e2:	4a5e      	ldr	r2, [pc, #376]	@ (800395c <HAL_ADC_MspInit+0x240>)
 80037e4:	f043 0304 	orr.w	r3, r3, #4
 80037e8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80037ec:	4b5b      	ldr	r3, [pc, #364]	@ (800395c <HAL_ADC_MspInit+0x240>)
 80037ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80037f2:	f003 0204 	and.w	r2, r3, #4
 80037f6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80037fa:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80037fe:	601a      	str	r2, [r3, #0]
 8003800:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003804:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003808:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800380a:	4b54      	ldr	r3, [pc, #336]	@ (800395c <HAL_ADC_MspInit+0x240>)
 800380c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003810:	4a52      	ldr	r2, [pc, #328]	@ (800395c <HAL_ADC_MspInit+0x240>)
 8003812:	f043 0301 	orr.w	r3, r3, #1
 8003816:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800381a:	4b50      	ldr	r3, [pc, #320]	@ (800395c <HAL_ADC_MspInit+0x240>)
 800381c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003820:	f003 0201 	and.w	r2, r3, #1
 8003824:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003828:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800382c:	601a      	str	r2, [r3, #0]
 800382e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003832:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003836:	681b      	ldr	r3, [r3, #0]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    PA1     ------> ADC1_INP1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003838:	2301      	movs	r3, #1
 800383a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800383e:	2303      	movs	r3, #3
 8003840:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003844:	2300      	movs	r3, #0
 8003846:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800384a:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 800384e:	4619      	mov	r1, r3
 8003850:	4843      	ldr	r0, [pc, #268]	@ (8003960 <HAL_ADC_MspInit+0x244>)
 8003852:	f007 fead 	bl	800b5b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003856:	2302      	movs	r3, #2
 8003858:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800385c:	2303      	movs	r3, #3
 800385e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003862:	2300      	movs	r3, #0
 8003864:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003868:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 800386c:	4619      	mov	r1, r3
 800386e:	483d      	ldr	r0, [pc, #244]	@ (8003964 <HAL_ADC_MspInit+0x248>)
 8003870:	f007 fe9e 	bl	800b5b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8003874:	e069      	b.n	800394a <HAL_ADC_MspInit+0x22e>
  else if(adcHandle->Instance==ADC2)
 8003876:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800387a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a39      	ldr	r2, [pc, #228]	@ (8003968 <HAL_ADC_MspInit+0x24c>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d160      	bne.n	800394a <HAL_ADC_MspInit+0x22e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8003888:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800388c:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8003890:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003894:	f04f 0300 	mov.w	r3, #0
 8003898:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HCLK;
 800389c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80038a0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80038a4:	2200      	movs	r2, #0
 80038a6:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80038aa:	f107 0320 	add.w	r3, r7, #32
 80038ae:	4618      	mov	r0, r3
 80038b0:	f009 f866 	bl	800c980 <HAL_RCCEx_PeriphCLKConfig>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d001      	beq.n	80038be <HAL_ADC_MspInit+0x1a2>
      Error_Handler();
 80038ba:	f000 ff50 	bl	800475e <Error_Handler>
    HAL_RCC_ADC_CLK_ENABLED++;
 80038be:	4b26      	ldr	r3, [pc, #152]	@ (8003958 <HAL_ADC_MspInit+0x23c>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	3301      	adds	r3, #1
 80038c4:	4a24      	ldr	r2, [pc, #144]	@ (8003958 <HAL_ADC_MspInit+0x23c>)
 80038c6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80038c8:	4b23      	ldr	r3, [pc, #140]	@ (8003958 <HAL_ADC_MspInit+0x23c>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d116      	bne.n	80038fe <HAL_ADC_MspInit+0x1e2>
      __HAL_RCC_ADC_CLK_ENABLE();
 80038d0:	4b22      	ldr	r3, [pc, #136]	@ (800395c <HAL_ADC_MspInit+0x240>)
 80038d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80038d6:	4a21      	ldr	r2, [pc, #132]	@ (800395c <HAL_ADC_MspInit+0x240>)
 80038d8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80038dc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80038e0:	4b1e      	ldr	r3, [pc, #120]	@ (800395c <HAL_ADC_MspInit+0x240>)
 80038e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80038e6:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 80038ea:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80038ee:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80038f2:	601a      	str	r2, [r3, #0]
 80038f4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80038f8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80038fc:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038fe:	4b17      	ldr	r3, [pc, #92]	@ (800395c <HAL_ADC_MspInit+0x240>)
 8003900:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003904:	4a15      	ldr	r2, [pc, #84]	@ (800395c <HAL_ADC_MspInit+0x240>)
 8003906:	f043 0304 	orr.w	r3, r3, #4
 800390a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800390e:	4b13      	ldr	r3, [pc, #76]	@ (800395c <HAL_ADC_MspInit+0x240>)
 8003910:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003914:	f003 0204 	and.w	r2, r3, #4
 8003918:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800391c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003920:	601a      	str	r2, [r3, #0]
 8003922:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003926:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800392a:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800392c:	2301      	movs	r3, #1
 800392e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003932:	2303      	movs	r3, #3
 8003934:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003938:	2300      	movs	r3, #0
 800393a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800393e:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8003942:	4619      	mov	r1, r3
 8003944:	4806      	ldr	r0, [pc, #24]	@ (8003960 <HAL_ADC_MspInit+0x244>)
 8003946:	f007 fe33 	bl	800b5b0 <HAL_GPIO_Init>
}
 800394a:	bf00      	nop
 800394c:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	42028000 	.word	0x42028000
 8003958:	200139ac 	.word	0x200139ac
 800395c:	44020c00 	.word	0x44020c00
 8003960:	42020800 	.word	0x42020800
 8003964:	42020000 	.word	0x42020000
 8003968:	42028100 	.word	0x42028100

0800396c <sKey_update>:
#include "main.h"
uint32_t pKeyAES1[4];
extern char ComKeys [8][33];
extern char StatKeys[3][33];
void sKey_update(int key)   // update the key based input
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
	 hexStringToUint32Array(StatKeys[key], pKeyAES1);
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	4613      	mov	r3, r2
 8003978:	015b      	lsls	r3, r3, #5
 800397a:	4413      	add	r3, r2
 800397c:	4a0b      	ldr	r2, [pc, #44]	@ (80039ac <sKey_update+0x40>)
 800397e:	4413      	add	r3, r2
 8003980:	490b      	ldr	r1, [pc, #44]	@ (80039b0 <sKey_update+0x44>)
 8003982:	4618      	mov	r0, r3
 8003984:	f000 f842 	bl	8003a0c <hexStringToUint32Array>
	 hcryp.Init.pKey = (uint32_t *)pKeyAES1;
 8003988:	4b0a      	ldr	r3, [pc, #40]	@ (80039b4 <sKey_update+0x48>)
 800398a:	4a09      	ldr	r2, [pc, #36]	@ (80039b0 <sKey_update+0x44>)
 800398c:	60da      	str	r2, [r3, #12]

	    // Print the converted values
	    printc(100,"staticKey[]: %s\n", StatKeys[key]);
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	4613      	mov	r3, r2
 8003992:	015b      	lsls	r3, r3, #5
 8003994:	4413      	add	r3, r2
 8003996:	4a05      	ldr	r2, [pc, #20]	@ (80039ac <sKey_update+0x40>)
 8003998:	4413      	add	r3, r2
 800399a:	461a      	mov	r2, r3
 800399c:	4906      	ldr	r1, [pc, #24]	@ (80039b8 <sKey_update+0x4c>)
 800399e:	2064      	movs	r0, #100	@ 0x64
 80039a0:	f7fe f83a 	bl	8001a18 <printc>
//	    printc(100,("pKeyAES[0]: 0x%08X\n", pKeyAES1[0]);
//	    printc(100,("pKeyAES[1]: 0x%08X\n", pKeyAES1[1]);
//	    printc(100,("pKeyAES[2]: 0x%08X\n", pKeyAES1[2]);
//	    printc(100,("pKeyAES[3]: 0x%08X\n", pKeyAES1[3]);
}
 80039a4:	bf00      	nop
 80039a6:	3708      	adds	r7, #8
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	20014af0 	.word	0x20014af0
 80039b0:	200139b0 	.word	0x200139b0
 80039b4:	200139c0 	.word	0x200139c0
 80039b8:	08022914 	.word	0x08022914

080039bc <cKey_update>:
void cKey_update(int key)   // update the key based input
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
	 hexStringToUint32Array(ComKeys[key], pKeyAES1);
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	4613      	mov	r3, r2
 80039c8:	015b      	lsls	r3, r3, #5
 80039ca:	4413      	add	r3, r2
 80039cc:	4a0b      	ldr	r2, [pc, #44]	@ (80039fc <cKey_update+0x40>)
 80039ce:	4413      	add	r3, r2
 80039d0:	490b      	ldr	r1, [pc, #44]	@ (8003a00 <cKey_update+0x44>)
 80039d2:	4618      	mov	r0, r3
 80039d4:	f000 f81a 	bl	8003a0c <hexStringToUint32Array>
	 hcryp.Init.pKey = (uint32_t *)pKeyAES1;
 80039d8:	4b0a      	ldr	r3, [pc, #40]	@ (8003a04 <cKey_update+0x48>)
 80039da:	4a09      	ldr	r2, [pc, #36]	@ (8003a00 <cKey_update+0x44>)
 80039dc:	60da      	str	r2, [r3, #12]
    // Print the converted values
	    printc(100,"ComKeys[]: %s\n", ComKeys[key]);
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	4613      	mov	r3, r2
 80039e2:	015b      	lsls	r3, r3, #5
 80039e4:	4413      	add	r3, r2
 80039e6:	4a05      	ldr	r2, [pc, #20]	@ (80039fc <cKey_update+0x40>)
 80039e8:	4413      	add	r3, r2
 80039ea:	461a      	mov	r2, r3
 80039ec:	4906      	ldr	r1, [pc, #24]	@ (8003a08 <cKey_update+0x4c>)
 80039ee:	2064      	movs	r0, #100	@ 0x64
 80039f0:	f7fe f812 	bl	8001a18 <printc>
//	    printc(100,"pKeyAES[0]: 0x%08X\n", pKeyAES1[0]);
//	    printc(100,"pKeyAES[1]: 0x%08X\n", pKeyAES1[1]);
//	    printc(100,"pKeyAES[2]: 0x%08X\n", pKeyAES1[2]);
//	    printc(100,"pKeyAES[3]: 0x%08X\n", pKeyAES1[3]);
}
 80039f4:	bf00      	nop
 80039f6:	3708      	adds	r7, #8
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	20014b54 	.word	0x20014b54
 8003a00:	200139b0 	.word	0x200139b0
 8003a04:	200139c0 	.word	0x200139c0
 8003a08:	08022928 	.word	0x08022928

08003a0c <hexStringToUint32Array>:
void hexStringToUint32Array(const char *hexString, uint32_t *uintArray) {
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b086      	sub	sp, #24
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	6039      	str	r1, [r7, #0]
    int len = strlen(hexString);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f7fc fc44 	bl	80002a4 <strlen>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	60fb      	str	r3, [r7, #12]
    int i, j;

    for (i = 0, j = 0; i < len; i += 8, j++) {
 8003a20:	2300      	movs	r3, #0
 8003a22:	617b      	str	r3, [r7, #20]
 8003a24:	2300      	movs	r3, #0
 8003a26:	613b      	str	r3, [r7, #16]
 8003a28:	e010      	b.n	8003a4c <hexStringToUint32Array+0x40>
        sscanf(hexString + i, "%8x", &uintArray[j]);
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	18d0      	adds	r0, r2, r3
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	683a      	ldr	r2, [r7, #0]
 8003a36:	4413      	add	r3, r2
 8003a38:	461a      	mov	r2, r3
 8003a3a:	4909      	ldr	r1, [pc, #36]	@ (8003a60 <hexStringToUint32Array+0x54>)
 8003a3c:	f01b f8ac 	bl	801eb98 <siscanf>
    for (i = 0, j = 0; i < len; i += 8, j++) {
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	3308      	adds	r3, #8
 8003a44:	617b      	str	r3, [r7, #20]
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	3301      	adds	r3, #1
 8003a4a:	613b      	str	r3, [r7, #16]
 8003a4c:	697a      	ldr	r2, [r7, #20]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	dbea      	blt.n	8003a2a <hexStringToUint32Array+0x1e>
    }
}
 8003a54:	bf00      	nop
 8003a56:	bf00      	nop
 8003a58:	3718      	adds	r7, #24
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	08022938 	.word	0x08022938

08003a64 <MX_AES_Init>:
CRYP_HandleTypeDef hcryp;
uint32_t pKeyAES[4] = {0x00000000,0x00000000,0x00000000,0x00000000};

/* AES init function */
void MX_AES_Init(void)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	af00      	add	r7, sp, #0
  /* USER CODE END AES_Init 0 */

  /* USER CODE BEGIN AES_Init 1 */

  /* USER CODE END AES_Init 1 */
  hcryp.Instance = AES;
 8003a68:	4b12      	ldr	r3, [pc, #72]	@ (8003ab4 <MX_AES_Init+0x50>)
 8003a6a:	4a13      	ldr	r2, [pc, #76]	@ (8003ab8 <MX_AES_Init+0x54>)
 8003a6c:	601a      	str	r2, [r3, #0]
  hcryp.Init.DataType = CRYP_NO_SWAP;
 8003a6e:	4b11      	ldr	r3, [pc, #68]	@ (8003ab4 <MX_AES_Init+0x50>)
 8003a70:	2200      	movs	r2, #0
 8003a72:	605a      	str	r2, [r3, #4]
  hcryp.Init.KeySize = CRYP_KEYSIZE_128B;
 8003a74:	4b0f      	ldr	r3, [pc, #60]	@ (8003ab4 <MX_AES_Init+0x50>)
 8003a76:	2200      	movs	r2, #0
 8003a78:	609a      	str	r2, [r3, #8]
  hcryp.Init.pKey = (uint32_t *)pKeyAES;
 8003a7a:	4b0e      	ldr	r3, [pc, #56]	@ (8003ab4 <MX_AES_Init+0x50>)
 8003a7c:	4a0f      	ldr	r2, [pc, #60]	@ (8003abc <MX_AES_Init+0x58>)
 8003a7e:	60da      	str	r2, [r3, #12]
  hcryp.Init.Algorithm = CRYP_AES_ECB;
 8003a80:	4b0c      	ldr	r3, [pc, #48]	@ (8003ab4 <MX_AES_Init+0x50>)
 8003a82:	2200      	movs	r2, #0
 8003a84:	615a      	str	r2, [r3, #20]
  hcryp.Init.DataWidthUnit = CRYP_DATAWIDTHUNIT_WORD;
 8003a86:	4b0b      	ldr	r3, [pc, #44]	@ (8003ab4 <MX_AES_Init+0x50>)
 8003a88:	2200      	movs	r2, #0
 8003a8a:	625a      	str	r2, [r3, #36]	@ 0x24
  hcryp.Init.HeaderWidthUnit = CRYP_HEADERWIDTHUNIT_WORD;
 8003a8c:	4b09      	ldr	r3, [pc, #36]	@ (8003ab4 <MX_AES_Init+0x50>)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	629a      	str	r2, [r3, #40]	@ 0x28
  hcryp.Init.KeyIVConfigSkip = CRYP_KEYIVCONFIG_ALWAYS;
 8003a92:	4b08      	ldr	r3, [pc, #32]	@ (8003ab4 <MX_AES_Init+0x50>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	62da      	str	r2, [r3, #44]	@ 0x2c
  hcryp.Init.KeyMode = CRYP_KEYMODE_NORMAL;
 8003a98:	4b06      	ldr	r3, [pc, #24]	@ (8003ab4 <MX_AES_Init+0x50>)
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_CRYP_Init(&hcryp) != HAL_OK)
 8003a9e:	4805      	ldr	r0, [pc, #20]	@ (8003ab4 <MX_AES_Init+0x50>)
 8003aa0:	f003 ff02 	bl	80078a8 <HAL_CRYP_Init>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d001      	beq.n	8003aae <MX_AES_Init+0x4a>
  {
    Error_Handler();
 8003aaa:	f000 fe58 	bl	800475e <Error_Handler>
  }
  /* USER CODE BEGIN AES_Init 2 */

  /* USER CODE END AES_Init 2 */

}
 8003aae:	bf00      	nop
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	200139c0 	.word	0x200139c0
 8003ab8:	420c0000 	.word	0x420c0000
 8003abc:	20013a28 	.word	0x20013a28

08003ac0 <HAL_CRYP_MspInit>:

void HAL_CRYP_MspInit(CRYP_HandleTypeDef* crypHandle)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b085      	sub	sp, #20
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]

  if(crypHandle->Instance==AES)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a0b      	ldr	r2, [pc, #44]	@ (8003afc <HAL_CRYP_MspInit+0x3c>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d10e      	bne.n	8003af0 <HAL_CRYP_MspInit+0x30>
  {
  /* USER CODE BEGIN AES_MspInit 0 */

  /* USER CODE END AES_MspInit 0 */
    /* AES clock enable */
    __HAL_RCC_AES_CLK_ENABLE();
 8003ad2:	4b0b      	ldr	r3, [pc, #44]	@ (8003b00 <HAL_CRYP_MspInit+0x40>)
 8003ad4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ad8:	4a09      	ldr	r2, [pc, #36]	@ (8003b00 <HAL_CRYP_MspInit+0x40>)
 8003ada:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ade:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003ae2:	4b07      	ldr	r3, [pc, #28]	@ (8003b00 <HAL_CRYP_MspInit+0x40>)
 8003ae4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ae8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003aec:	60fb      	str	r3, [r7, #12]
 8003aee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN AES_MspInit 1 */

  /* USER CODE END AES_MspInit 1 */
  }
}
 8003af0:	bf00      	nop
 8003af2:	3714      	adds	r7, #20
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr
 8003afc:	420c0000 	.word	0x420c0000
 8003b00:	44020c00 	.word	0x44020c00

08003b04 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8003b08:	4b12      	ldr	r3, [pc, #72]	@ (8003b54 <MX_CRC_Init+0x50>)
 8003b0a:	4a13      	ldr	r2, [pc, #76]	@ (8003b58 <MX_CRC_Init+0x54>)
 8003b0c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 8003b0e:	4b11      	ldr	r3, [pc, #68]	@ (8003b54 <MX_CRC_Init+0x50>)
 8003b10:	2201      	movs	r2, #1
 8003b12:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8003b14:	4b0f      	ldr	r3, [pc, #60]	@ (8003b54 <MX_CRC_Init+0x50>)
 8003b16:	2201      	movs	r2, #1
 8003b18:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 7;
 8003b1a:	4b0e      	ldr	r3, [pc, #56]	@ (8003b54 <MX_CRC_Init+0x50>)
 8003b1c:	2207      	movs	r2, #7
 8003b1e:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;
 8003b20:	4b0c      	ldr	r3, [pc, #48]	@ (8003b54 <MX_CRC_Init+0x50>)
 8003b22:	2210      	movs	r2, #16
 8003b24:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0;
 8003b26:	4b0b      	ldr	r3, [pc, #44]	@ (8003b54 <MX_CRC_Init+0x50>)
 8003b28:	2200      	movs	r2, #0
 8003b2a:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8003b2c:	4b09      	ldr	r3, [pc, #36]	@ (8003b54 <MX_CRC_Init+0x50>)
 8003b2e:	2200      	movs	r2, #0
 8003b30:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8003b32:	4b08      	ldr	r3, [pc, #32]	@ (8003b54 <MX_CRC_Init+0x50>)
 8003b34:	2200      	movs	r2, #0
 8003b36:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8003b38:	4b06      	ldr	r3, [pc, #24]	@ (8003b54 <MX_CRC_Init+0x50>)
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8003b3e:	4805      	ldr	r0, [pc, #20]	@ (8003b54 <MX_CRC_Init+0x50>)
 8003b40:	f003 fcac 	bl	800749c <HAL_CRC_Init>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d001      	beq.n	8003b4e <MX_CRC_Init+0x4a>
  {
    Error_Handler();
 8003b4a:	f000 fe08 	bl	800475e <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8003b4e:	bf00      	nop
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	20013a48 	.word	0x20013a48
 8003b58:	40023000 	.word	0x40023000

08003b5c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b085      	sub	sp, #20
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a0b      	ldr	r2, [pc, #44]	@ (8003b98 <HAL_CRC_MspInit+0x3c>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d10e      	bne.n	8003b8c <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8003b6e:	4b0b      	ldr	r3, [pc, #44]	@ (8003b9c <HAL_CRC_MspInit+0x40>)
 8003b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b74:	4a09      	ldr	r2, [pc, #36]	@ (8003b9c <HAL_CRC_MspInit+0x40>)
 8003b76:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003b7a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8003b7e:	4b07      	ldr	r3, [pc, #28]	@ (8003b9c <HAL_CRC_MspInit+0x40>)
 8003b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b84:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b88:	60fb      	str	r3, [r7, #12]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8003b8c:	bf00      	nop
 8003b8e:	3714      	adds	r7, #20
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr
 8003b98:	40023000 	.word	0x40023000
 8003b9c:	44020c00 	.word	0x44020c00

08003ba0 <MX_FDCAN1_Init>:
FDCAN_HandleTypeDef hfdcan1;
FDCAN_HandleTypeDef hfdcan2;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b088      	sub	sp, #32
 8003ba4:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8003ba6:	4b54      	ldr	r3, [pc, #336]	@ (8003cf8 <MX_FDCAN1_Init+0x158>)
 8003ba8:	4a54      	ldr	r2, [pc, #336]	@ (8003cfc <MX_FDCAN1_Init+0x15c>)
 8003baa:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8003bac:	4b52      	ldr	r3, [pc, #328]	@ (8003cf8 <MX_FDCAN1_Init+0x158>)
 8003bae:	2200      	movs	r2, #0
 8003bb0:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8003bb2:	4b51      	ldr	r3, [pc, #324]	@ (8003cf8 <MX_FDCAN1_Init+0x158>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8003bb8:	4b4f      	ldr	r3, [pc, #316]	@ (8003cf8 <MX_FDCAN1_Init+0x158>)
 8003bba:	2200      	movs	r2, #0
 8003bbc:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8003bbe:	4b4e      	ldr	r3, [pc, #312]	@ (8003cf8 <MX_FDCAN1_Init+0x158>)
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8003bc4:	4b4c      	ldr	r3, [pc, #304]	@ (8003cf8 <MX_FDCAN1_Init+0x158>)
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = ENABLE;
 8003bca:	4b4b      	ldr	r3, [pc, #300]	@ (8003cf8 <MX_FDCAN1_Init+0x158>)
 8003bcc:	2201      	movs	r2, #1
 8003bce:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8003bd0:	4b49      	ldr	r3, [pc, #292]	@ (8003cf8 <MX_FDCAN1_Init+0x158>)
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 13;
 8003bd6:	4b48      	ldr	r3, [pc, #288]	@ (8003cf8 <MX_FDCAN1_Init+0x158>)
 8003bd8:	220d      	movs	r2, #13
 8003bda:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 86;
 8003bdc:	4b46      	ldr	r3, [pc, #280]	@ (8003cf8 <MX_FDCAN1_Init+0x158>)
 8003bde:	2256      	movs	r2, #86	@ 0x56
 8003be0:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 13;
 8003be2:	4b45      	ldr	r3, [pc, #276]	@ (8003cf8 <MX_FDCAN1_Init+0x158>)
 8003be4:	220d      	movs	r2, #13
 8003be6:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 4;
 8003be8:	4b43      	ldr	r3, [pc, #268]	@ (8003cf8 <MX_FDCAN1_Init+0x158>)
 8003bea:	2204      	movs	r2, #4
 8003bec:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 9;
 8003bee:	4b42      	ldr	r3, [pc, #264]	@ (8003cf8 <MX_FDCAN1_Init+0x158>)
 8003bf0:	2209      	movs	r2, #9
 8003bf2:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 15;
 8003bf4:	4b40      	ldr	r3, [pc, #256]	@ (8003cf8 <MX_FDCAN1_Init+0x158>)
 8003bf6:	220f      	movs	r2, #15
 8003bf8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 9;
 8003bfa:	4b3f      	ldr	r3, [pc, #252]	@ (8003cf8 <MX_FDCAN1_Init+0x158>)
 8003bfc:	2209      	movs	r2, #9
 8003bfe:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8003c00:	4b3d      	ldr	r3, [pc, #244]	@ (8003cf8 <MX_FDCAN1_Init+0x158>)
 8003c02:	2200      	movs	r2, #0
 8003c04:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8003c06:	4b3c      	ldr	r3, [pc, #240]	@ (8003cf8 <MX_FDCAN1_Init+0x158>)
 8003c08:	2200      	movs	r2, #0
 8003c0a:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8003c0c:	4b3a      	ldr	r3, [pc, #232]	@ (8003cf8 <MX_FDCAN1_Init+0x158>)
 8003c0e:	2200      	movs	r2, #0
 8003c10:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8003c12:	4839      	ldr	r0, [pc, #228]	@ (8003cf8 <MX_FDCAN1_Init+0x158>)
 8003c14:	f006 fc2a 	bl	800a46c <HAL_FDCAN_Init>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d001      	beq.n	8003c22 <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8003c1e:	f000 fd9e 	bl	800475e <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig = {0};              /* clearing all the filter configuration */
 8003c22:	1d3b      	adds	r3, r7, #4
 8003c24:	2200      	movs	r2, #0
 8003c26:	601a      	str	r2, [r3, #0]
 8003c28:	605a      	str	r2, [r3, #4]
 8003c2a:	609a      	str	r2, [r3, #8]
 8003c2c:	60da      	str	r2, [r3, #12]
 8003c2e:	611a      	str	r2, [r3, #16]
 8003c30:	615a      	str	r2, [r3, #20]

  	    /* FDCAN Tx header structure configuration */
  	  TxHeader.Identifier          = 0x123;                /*  taking default identifier  */
 8003c32:	4b33      	ldr	r3, [pc, #204]	@ (8003d00 <MX_FDCAN1_Init+0x160>)
 8003c34:	f240 1223 	movw	r2, #291	@ 0x123
 8003c38:	601a      	str	r2, [r3, #0]
  	  TxHeader.IdType              = FDCAN_EXTENDED_ID;    /*  0 and 0x7FF, if IdType is FDCAN_STANDARD_ID , 0 and 0x1FFFFFFF, if IdType is FDCAN_EXTENDED_ID  */
 8003c3a:	4b31      	ldr	r3, [pc, #196]	@ (8003d00 <MX_FDCAN1_Init+0x160>)
 8003c3c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003c40:	605a      	str	r2, [r3, #4]
  	  TxHeader.TxFrameType         = FDCAN_DATA_FRAME;     /*  Specifies the frame type of the message that will be transmitted.  */
 8003c42:	4b2f      	ldr	r3, [pc, #188]	@ (8003d00 <MX_FDCAN1_Init+0x160>)
 8003c44:	2200      	movs	r2, #0
 8003c46:	609a      	str	r2, [r3, #8]
  	  TxHeader.DataLength          = FDCAN_DLC_BYTES_8;    /*  the length of the transmitted frame 8 bytes.  */
 8003c48:	4b2d      	ldr	r3, [pc, #180]	@ (8003d00 <MX_FDCAN1_Init+0x160>)
 8003c4a:	2208      	movs	r2, #8
 8003c4c:	60da      	str	r2, [r3, #12]
  	  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;     /*  FDCAN_error_state_indicator,node is error active  */
 8003c4e:	4b2c      	ldr	r3, [pc, #176]	@ (8003d00 <MX_FDCAN1_Init+0x160>)
 8003c50:	2200      	movs	r2, #0
 8003c52:	611a      	str	r2, [r3, #16]
  	  TxHeader.BitRateSwitch       = FDCAN_BRS_OFF;        /*  frames transmitted/received without bit rate switching  */
 8003c54:	4b2a      	ldr	r3, [pc, #168]	@ (8003d00 <MX_FDCAN1_Init+0x160>)
 8003c56:	2200      	movs	r2, #0
 8003c58:	615a      	str	r2, [r3, #20]
  	  TxHeader.FDFormat            = FDCAN_CLASSIC_CAN;    /*  Frame transmitted/received in Classic CAN format  */
 8003c5a:	4b29      	ldr	r3, [pc, #164]	@ (8003d00 <MX_FDCAN1_Init+0x160>)
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	619a      	str	r2, [r3, #24]
  	  TxHeader.TxEventFifoControl  = FDCAN_NO_TX_EVENTS;   /*  Do not store Tx events */
 8003c60:	4b27      	ldr	r3, [pc, #156]	@ (8003d00 <MX_FDCAN1_Init+0x160>)
 8003c62:	2200      	movs	r2, #0
 8003c64:	61da      	str	r2, [r3, #28]
  	  TxHeader.MessageMarker       = 0;
 8003c66:	4b26      	ldr	r3, [pc, #152]	@ (8003d00 <MX_FDCAN1_Init+0x160>)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	621a      	str	r2, [r3, #32]

  	  // Configure each filter for the specified CAN IDs
  	    for (int i = 1; i < TOTAL_IDS; i++)
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	61fb      	str	r3, [r7, #28]
 8003c70:	e01d      	b.n	8003cae <MX_FDCAN1_Init+0x10e>
  	    {
  	        sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8003c72:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003c76:	607b      	str	r3, [r7, #4]
  	        sFilterConfig.FilterIndex = i; // Filter index must be unique for each filter
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	60bb      	str	r3, [r7, #8]
  	        sFilterConfig.FilterType = FDCAN_FILTER_DUAL;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	60fb      	str	r3, [r7, #12]
  	        sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8003c80:	2301      	movs	r3, #1
 8003c82:	613b      	str	r3, [r7, #16]
  	        sFilterConfig.FilterID1 = can_ids[i];
 8003c84:	4a1f      	ldr	r2, [pc, #124]	@ (8003d04 <MX_FDCAN1_Init+0x164>)
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c8c:	617b      	str	r3, [r7, #20]
  	        sFilterConfig.FilterID2 = 0x1FFFFFFF; // Mask to match exactly the ID1
 8003c8e:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 8003c92:	61bb      	str	r3, [r7, #24]

  	        if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8003c94:	1d3b      	adds	r3, r7, #4
 8003c96:	4619      	mov	r1, r3
 8003c98:	4817      	ldr	r0, [pc, #92]	@ (8003cf8 <MX_FDCAN1_Init+0x158>)
 8003c9a:	f006 fd41 	bl	800a720 <HAL_FDCAN_ConfigFilter>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d001      	beq.n	8003ca8 <MX_FDCAN1_Init+0x108>
  	        {
  	            // Filter configuration Error
  	            Error_Handler();
 8003ca4:	f000 fd5b 	bl	800475e <Error_Handler>
  	    for (int i = 1; i < TOTAL_IDS; i++)
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	3301      	adds	r3, #1
 8003cac:	61fb      	str	r3, [r7, #28]
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	2b09      	cmp	r3, #9
 8003cb2:	ddde      	ble.n	8003c72 <MX_FDCAN1_Init+0xd2>
  	        }
  	    }

  	  /* Start the FDCAN module */
  	  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 8003cb4:	4810      	ldr	r0, [pc, #64]	@ (8003cf8 <MX_FDCAN1_Init+0x158>)
 8003cb6:	f006 fd8d 	bl	800a7d4 <HAL_FDCAN_Start>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d001      	beq.n	8003cc4 <MX_FDCAN1_Init+0x124>
  	  {
  	    Error_Handler();
 8003cc0:	f000 fd4d 	bl	800475e <Error_Handler>
  	  }
  	  /* Enable interrupts */
  	  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	2101      	movs	r1, #1
 8003cc8:	480b      	ldr	r0, [pc, #44]	@ (8003cf8 <MX_FDCAN1_Init+0x158>)
 8003cca:	f006 feb3 	bl	800aa34 <HAL_FDCAN_ActivateNotification>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d001      	beq.n	8003cd8 <MX_FDCAN1_Init+0x138>
  	  {
  	    Error_Handler();
 8003cd4:	f000 fd43 	bl	800475e <Error_Handler>
  	  }
  	  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_TX_FIFO_EMPTY, 0) != HAL_OK) {
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003cde:	4806      	ldr	r0, [pc, #24]	@ (8003cf8 <MX_FDCAN1_Init+0x158>)
 8003ce0:	f006 fea8 	bl	800aa34 <HAL_FDCAN_ActivateNotification>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d001      	beq.n	8003cee <MX_FDCAN1_Init+0x14e>
  	  		/* Notification Error */
  	  		Error_Handler();
 8003cea:	f000 fd38 	bl	800475e <Error_Handler>
  	  	}
  /* USER CODE END FDCAN1_Init 2 */

}
 8003cee:	bf00      	nop
 8003cf0:	3720      	adds	r7, #32
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	20013adc 	.word	0x20013adc
 8003cfc:	4000a400 	.word	0x4000a400
 8003d00:	20013a94 	.word	0x20013a94
 8003d04:	0802432c 	.word	0x0802432c

08003d08 <MX_FDCAN2_Init>:
/* FDCAN2 init function */
void MX_FDCAN2_Init(void)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b086      	sub	sp, #24
 8003d0c:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8003d0e:	4b4e      	ldr	r3, [pc, #312]	@ (8003e48 <MX_FDCAN2_Init+0x140>)
 8003d10:	4a4e      	ldr	r2, [pc, #312]	@ (8003e4c <MX_FDCAN2_Init+0x144>)
 8003d12:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8003d14:	4b4c      	ldr	r3, [pc, #304]	@ (8003e48 <MX_FDCAN2_Init+0x140>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8003d1a:	4b4b      	ldr	r3, [pc, #300]	@ (8003e48 <MX_FDCAN2_Init+0x140>)
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8003d20:	4b49      	ldr	r3, [pc, #292]	@ (8003e48 <MX_FDCAN2_Init+0x140>)
 8003d22:	2200      	movs	r2, #0
 8003d24:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = ENABLE;
 8003d26:	4b48      	ldr	r3, [pc, #288]	@ (8003e48 <MX_FDCAN2_Init+0x140>)
 8003d28:	2201      	movs	r2, #1
 8003d2a:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8003d2c:	4b46      	ldr	r3, [pc, #280]	@ (8003e48 <MX_FDCAN2_Init+0x140>)
 8003d2e:	2200      	movs	r2, #0
 8003d30:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = ENABLE;
 8003d32:	4b45      	ldr	r3, [pc, #276]	@ (8003e48 <MX_FDCAN2_Init+0x140>)
 8003d34:	2201      	movs	r2, #1
 8003d36:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8003d38:	4b43      	ldr	r3, [pc, #268]	@ (8003e48 <MX_FDCAN2_Init+0x140>)
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 13;
 8003d3e:	4b42      	ldr	r3, [pc, #264]	@ (8003e48 <MX_FDCAN2_Init+0x140>)
 8003d40:	220d      	movs	r2, #13
 8003d42:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 86;
 8003d44:	4b40      	ldr	r3, [pc, #256]	@ (8003e48 <MX_FDCAN2_Init+0x140>)
 8003d46:	2256      	movs	r2, #86	@ 0x56
 8003d48:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 13;
 8003d4a:	4b3f      	ldr	r3, [pc, #252]	@ (8003e48 <MX_FDCAN2_Init+0x140>)
 8003d4c:	220d      	movs	r2, #13
 8003d4e:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 4;
 8003d50:	4b3d      	ldr	r3, [pc, #244]	@ (8003e48 <MX_FDCAN2_Init+0x140>)
 8003d52:	2204      	movs	r2, #4
 8003d54:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 9;
 8003d56:	4b3c      	ldr	r3, [pc, #240]	@ (8003e48 <MX_FDCAN2_Init+0x140>)
 8003d58:	2209      	movs	r2, #9
 8003d5a:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 15;
 8003d5c:	4b3a      	ldr	r3, [pc, #232]	@ (8003e48 <MX_FDCAN2_Init+0x140>)
 8003d5e:	220f      	movs	r2, #15
 8003d60:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 9;
 8003d62:	4b39      	ldr	r3, [pc, #228]	@ (8003e48 <MX_FDCAN2_Init+0x140>)
 8003d64:	2209      	movs	r2, #9
 8003d66:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 8003d68:	4b37      	ldr	r3, [pc, #220]	@ (8003e48 <MX_FDCAN2_Init+0x140>)
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8003d6e:	4b36      	ldr	r3, [pc, #216]	@ (8003e48 <MX_FDCAN2_Init+0x140>)
 8003d70:	2200      	movs	r2, #0
 8003d72:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8003d74:	4b34      	ldr	r3, [pc, #208]	@ (8003e48 <MX_FDCAN2_Init+0x140>)
 8003d76:	2200      	movs	r2, #0
 8003d78:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8003d7a:	4833      	ldr	r0, [pc, #204]	@ (8003e48 <MX_FDCAN2_Init+0x140>)
 8003d7c:	f006 fb76 	bl	800a46c <HAL_FDCAN_Init>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d001      	beq.n	8003d8a <MX_FDCAN2_Init+0x82>
  {
    Error_Handler();
 8003d86:	f000 fcea 	bl	800475e <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig = {0};              /* clearing all the filter configuration */
 8003d8a:	463b      	mov	r3, r7
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	601a      	str	r2, [r3, #0]
 8003d90:	605a      	str	r2, [r3, #4]
 8003d92:	609a      	str	r2, [r3, #8]
 8003d94:	60da      	str	r2, [r3, #12]
 8003d96:	611a      	str	r2, [r3, #16]
 8003d98:	615a      	str	r2, [r3, #20]

  	    /* FDCAN Tx header structure configuration */
  	  TxHeader1.Identifier          = 0x234;                /*  taking default identifier  */
 8003d9a:	4b2d      	ldr	r3, [pc, #180]	@ (8003e50 <MX_FDCAN2_Init+0x148>)
 8003d9c:	f44f 720d 	mov.w	r2, #564	@ 0x234
 8003da0:	601a      	str	r2, [r3, #0]
  	  TxHeader1.IdType              = FDCAN_EXTENDED_ID;    /*  0 and 0x7FF, if IdType is FDCAN_STANDARD_ID , 0 and 0x1FFFFFFF, if IdType is FDCAN_EXTENDED_ID  */
 8003da2:	4b2b      	ldr	r3, [pc, #172]	@ (8003e50 <MX_FDCAN2_Init+0x148>)
 8003da4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003da8:	605a      	str	r2, [r3, #4]
  	  TxHeader1.TxFrameType         = FDCAN_DATA_FRAME;     /*  Specifies the frame type of the message that will be transmitted.  */
 8003daa:	4b29      	ldr	r3, [pc, #164]	@ (8003e50 <MX_FDCAN2_Init+0x148>)
 8003dac:	2200      	movs	r2, #0
 8003dae:	609a      	str	r2, [r3, #8]
  	  TxHeader1.DataLength          = FDCAN_DLC_BYTES_8;    /*  the length of the transmitted frame 8 bytes.  */
 8003db0:	4b27      	ldr	r3, [pc, #156]	@ (8003e50 <MX_FDCAN2_Init+0x148>)
 8003db2:	2208      	movs	r2, #8
 8003db4:	60da      	str	r2, [r3, #12]
  	  TxHeader1.ErrorStateIndicator = FDCAN_ESI_ACTIVE;     /*  FDCAN_error_state_indicator,node is error active  */
 8003db6:	4b26      	ldr	r3, [pc, #152]	@ (8003e50 <MX_FDCAN2_Init+0x148>)
 8003db8:	2200      	movs	r2, #0
 8003dba:	611a      	str	r2, [r3, #16]
  	  TxHeader1.BitRateSwitch       = FDCAN_BRS_OFF;        /*  frames transmitted/received without bit rate switching  */
 8003dbc:	4b24      	ldr	r3, [pc, #144]	@ (8003e50 <MX_FDCAN2_Init+0x148>)
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	615a      	str	r2, [r3, #20]
  	  TxHeader1.FDFormat            = FDCAN_CLASSIC_CAN;    /*  Frame transmitted/received in Classic CAN format  */
 8003dc2:	4b23      	ldr	r3, [pc, #140]	@ (8003e50 <MX_FDCAN2_Init+0x148>)
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	619a      	str	r2, [r3, #24]
  	  TxHeader1.TxEventFifoControl  = FDCAN_NO_TX_EVENTS;   /*  Do not store Tx events */
 8003dc8:	4b21      	ldr	r3, [pc, #132]	@ (8003e50 <MX_FDCAN2_Init+0x148>)
 8003dca:	2200      	movs	r2, #0
 8003dcc:	61da      	str	r2, [r3, #28]
  	  TxHeader1.MessageMarker       = 0;
 8003dce:	4b20      	ldr	r3, [pc, #128]	@ (8003e50 <MX_FDCAN2_Init+0x148>)
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	621a      	str	r2, [r3, #32]

  	//  /* Configure Rx filter */
  	  sFilterConfig.IdType       = FDCAN_EXTENDED_ID;
 8003dd4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003dd8:	603b      	str	r3, [r7, #0]
  	  sFilterConfig.FilterIndex  = 1;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	607b      	str	r3, [r7, #4]
  	  sFilterConfig.FilterType   = FDCAN_FILTER_RANGE;//
 8003dde:	2300      	movs	r3, #0
 8003de0:	60bb      	str	r3, [r7, #8]
  	  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8003de2:	2301      	movs	r3, #1
 8003de4:	60fb      	str	r3, [r7, #12]
  	  sFilterConfig.FilterID1    = 0x800;
 8003de6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003dea:	613b      	str	r3, [r7, #16]
  	  sFilterConfig.FilterID2    = 0x835;
 8003dec:	f640 0335 	movw	r3, #2101	@ 0x835
 8003df0:	617b      	str	r3, [r7, #20]


  	  /* Configure the FDCAN reception filter */
  	  if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK)
 8003df2:	463b      	mov	r3, r7
 8003df4:	4619      	mov	r1, r3
 8003df6:	4814      	ldr	r0, [pc, #80]	@ (8003e48 <MX_FDCAN2_Init+0x140>)
 8003df8:	f006 fc92 	bl	800a720 <HAL_FDCAN_ConfigFilter>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d001      	beq.n	8003e06 <MX_FDCAN2_Init+0xfe>
  	  {
  	    Error_Handler();
 8003e02:	f000 fcac 	bl	800475e <Error_Handler>
  	  }

  	  /* Start the FDCAN module */
  	  if (HAL_FDCAN_Start(&hfdcan2) != HAL_OK)
 8003e06:	4810      	ldr	r0, [pc, #64]	@ (8003e48 <MX_FDCAN2_Init+0x140>)
 8003e08:	f006 fce4 	bl	800a7d4 <HAL_FDCAN_Start>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d001      	beq.n	8003e16 <MX_FDCAN2_Init+0x10e>
  	  {
  	    Error_Handler();
 8003e12:	f000 fca4 	bl	800475e <Error_Handler>
  	  }
  	  /* Enable interrupts */
  	  if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8003e16:	2200      	movs	r2, #0
 8003e18:	2101      	movs	r1, #1
 8003e1a:	480b      	ldr	r0, [pc, #44]	@ (8003e48 <MX_FDCAN2_Init+0x140>)
 8003e1c:	f006 fe0a 	bl	800aa34 <HAL_FDCAN_ActivateNotification>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d001      	beq.n	8003e2a <MX_FDCAN2_Init+0x122>
  	  {
  	    Error_Handler();
 8003e26:	f000 fc9a 	bl	800475e <Error_Handler>
  	  }
  	  if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_TX_FIFO_EMPTY, 0) != HAL_OK) {
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003e30:	4805      	ldr	r0, [pc, #20]	@ (8003e48 <MX_FDCAN2_Init+0x140>)
 8003e32:	f006 fdff 	bl	800aa34 <HAL_FDCAN_ActivateNotification>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d001      	beq.n	8003e40 <MX_FDCAN2_Init+0x138>
  	  		/* Notification Error */
  	  		Error_Handler();
 8003e3c:	f000 fc8f 	bl	800475e <Error_Handler>
  	  	}
  /* USER CODE END FDCAN2_Init 2 */

}
 8003e40:	bf00      	nop
 8003e42:	3718      	adds	r7, #24
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	20013b40 	.word	0x20013b40
 8003e4c:	4000a800 	.word	0x4000a800
 8003e50:	20013ab8 	.word	0x20013ab8

08003e54 <HAL_FDCAN_MspInit>:

static uint32_t HAL_RCC_FDCAN_CLK_ENABLED=0;

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b08c      	sub	sp, #48	@ 0x30
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e5c:	f107 031c 	add.w	r3, r7, #28
 8003e60:	2200      	movs	r2, #0
 8003e62:	601a      	str	r2, [r3, #0]
 8003e64:	605a      	str	r2, [r3, #4]
 8003e66:	609a      	str	r2, [r3, #8]
 8003e68:	60da      	str	r2, [r3, #12]
 8003e6a:	611a      	str	r2, [r3, #16]
  if(fdcanHandle->Instance==FDCAN1)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a46      	ldr	r2, [pc, #280]	@ (8003f8c <HAL_FDCAN_MspInit+0x138>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d140      	bne.n	8003ef8 <HAL_FDCAN_MspInit+0xa4>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* FDCAN1 clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8003e76:	4b46      	ldr	r3, [pc, #280]	@ (8003f90 <HAL_FDCAN_MspInit+0x13c>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	4a44      	ldr	r2, [pc, #272]	@ (8003f90 <HAL_FDCAN_MspInit+0x13c>)
 8003e7e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8003e80:	4b43      	ldr	r3, [pc, #268]	@ (8003f90 <HAL_FDCAN_MspInit+0x13c>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d10e      	bne.n	8003ea6 <HAL_FDCAN_MspInit+0x52>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8003e88:	4b42      	ldr	r3, [pc, #264]	@ (8003f94 <HAL_FDCAN_MspInit+0x140>)
 8003e8a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003e8e:	4a41      	ldr	r2, [pc, #260]	@ (8003f94 <HAL_FDCAN_MspInit+0x140>)
 8003e90:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003e94:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 8003e98:	4b3e      	ldr	r3, [pc, #248]	@ (8003f94 <HAL_FDCAN_MspInit+0x140>)
 8003e9a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003e9e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ea2:	61bb      	str	r3, [r7, #24]
 8003ea4:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ea6:	4b3b      	ldr	r3, [pc, #236]	@ (8003f94 <HAL_FDCAN_MspInit+0x140>)
 8003ea8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003eac:	4a39      	ldr	r2, [pc, #228]	@ (8003f94 <HAL_FDCAN_MspInit+0x140>)
 8003eae:	f043 0301 	orr.w	r3, r3, #1
 8003eb2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003eb6:	4b37      	ldr	r3, [pc, #220]	@ (8003f94 <HAL_FDCAN_MspInit+0x140>)
 8003eb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ebc:	f003 0301 	and.w	r3, r3, #1
 8003ec0:	617b      	str	r3, [r7, #20]
 8003ec2:	697b      	ldr	r3, [r7, #20]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003ec4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8003ec8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eca:	2302      	movs	r3, #2
 8003ecc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8003ed6:	2309      	movs	r3, #9
 8003ed8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003eda:	f107 031c 	add.w	r3, r7, #28
 8003ede:	4619      	mov	r1, r3
 8003ee0:	482d      	ldr	r0, [pc, #180]	@ (8003f98 <HAL_FDCAN_MspInit+0x144>)
 8003ee2:	f007 fb65 	bl	800b5b0 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	2100      	movs	r1, #0
 8003eea:	2027      	movs	r0, #39	@ 0x27
 8003eec:	f003 f9eb 	bl	80072c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8003ef0:	2027      	movs	r0, #39	@ 0x27
 8003ef2:	f003 fa02 	bl	80072fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 8003ef6:	e044      	b.n	8003f82 <HAL_FDCAN_MspInit+0x12e>
  else if(fdcanHandle->Instance==FDCAN2)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a27      	ldr	r2, [pc, #156]	@ (8003f9c <HAL_FDCAN_MspInit+0x148>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d13f      	bne.n	8003f82 <HAL_FDCAN_MspInit+0x12e>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8003f02:	4b23      	ldr	r3, [pc, #140]	@ (8003f90 <HAL_FDCAN_MspInit+0x13c>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	3301      	adds	r3, #1
 8003f08:	4a21      	ldr	r2, [pc, #132]	@ (8003f90 <HAL_FDCAN_MspInit+0x13c>)
 8003f0a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8003f0c:	4b20      	ldr	r3, [pc, #128]	@ (8003f90 <HAL_FDCAN_MspInit+0x13c>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d10e      	bne.n	8003f32 <HAL_FDCAN_MspInit+0xde>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8003f14:	4b1f      	ldr	r3, [pc, #124]	@ (8003f94 <HAL_FDCAN_MspInit+0x140>)
 8003f16:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003f1a:	4a1e      	ldr	r2, [pc, #120]	@ (8003f94 <HAL_FDCAN_MspInit+0x140>)
 8003f1c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003f20:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 8003f24:	4b1b      	ldr	r3, [pc, #108]	@ (8003f94 <HAL_FDCAN_MspInit+0x140>)
 8003f26:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003f2a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f2e:	613b      	str	r3, [r7, #16]
 8003f30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f32:	4b18      	ldr	r3, [pc, #96]	@ (8003f94 <HAL_FDCAN_MspInit+0x140>)
 8003f34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f38:	4a16      	ldr	r2, [pc, #88]	@ (8003f94 <HAL_FDCAN_MspInit+0x140>)
 8003f3a:	f043 0302 	orr.w	r3, r3, #2
 8003f3e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003f42:	4b14      	ldr	r3, [pc, #80]	@ (8003f94 <HAL_FDCAN_MspInit+0x140>)
 8003f44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f48:	f003 0302 	and.w	r3, r3, #2
 8003f4c:	60fb      	str	r3, [r7, #12]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003f50:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8003f54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f56:	2302      	movs	r3, #2
 8003f58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8003f62:	2309      	movs	r3, #9
 8003f64:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f66:	f107 031c 	add.w	r3, r7, #28
 8003f6a:	4619      	mov	r1, r3
 8003f6c:	480c      	ldr	r0, [pc, #48]	@ (8003fa0 <HAL_FDCAN_MspInit+0x14c>)
 8003f6e:	f007 fb1f 	bl	800b5b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 0, 0);
 8003f72:	2200      	movs	r2, #0
 8003f74:	2100      	movs	r1, #0
 8003f76:	206d      	movs	r0, #109	@ 0x6d
 8003f78:	f003 f9a5 	bl	80072c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 8003f7c:	206d      	movs	r0, #109	@ 0x6d
 8003f7e:	f003 f9bc 	bl	80072fa <HAL_NVIC_EnableIRQ>
}
 8003f82:	bf00      	nop
 8003f84:	3730      	adds	r7, #48	@ 0x30
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	4000a400 	.word	0x4000a400
 8003f90:	20013ba4 	.word	0x20013ba4
 8003f94:	44020c00 	.word	0x44020c00
 8003f98:	42020000 	.word	0x42020000
 8003f9c:	4000a800 	.word	0x4000a800
 8003fa0:	42020400 	.word	0x42020400

08003fa4 <MX_GPDMA1_Init>:

/* USER CODE END 0 */

/* GPDMA1 init function */
void MX_GPDMA1_Init(void)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8003faa:	4b0d      	ldr	r3, [pc, #52]	@ (8003fe0 <MX_GPDMA1_Init+0x3c>)
 8003fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fb0:	4a0b      	ldr	r2, [pc, #44]	@ (8003fe0 <MX_GPDMA1_Init+0x3c>)
 8003fb2:	f043 0301 	orr.w	r3, r3, #1
 8003fb6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8003fba:	4b09      	ldr	r3, [pc, #36]	@ (8003fe0 <MX_GPDMA1_Init+0x3c>)
 8003fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fc0:	f003 0301 	and.w	r3, r3, #1
 8003fc4:	607b      	str	r3, [r7, #4]
 8003fc6:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel4_IRQn, 0, 0);
 8003fc8:	2200      	movs	r2, #0
 8003fca:	2100      	movs	r1, #0
 8003fcc:	201f      	movs	r0, #31
 8003fce:	f003 f97a 	bl	80072c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel4_IRQn);
 8003fd2:	201f      	movs	r0, #31
 8003fd4:	f003 f991 	bl	80072fa <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8003fd8:	bf00      	nop
 8003fda:	3708      	adds	r7, #8
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	44020c00 	.word	0x44020c00

08003fe4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003fe8:	4b04      	ldr	r3, [pc, #16]	@ (8003ffc <__NVIC_GetPriorityGrouping+0x18>)
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	0a1b      	lsrs	r3, r3, #8
 8003fee:	f003 0307 	and.w	r3, r3, #7
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr
 8003ffc:	e000ed00 	.word	0xe000ed00

08004000 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	4603      	mov	r3, r0
 8004008:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800400a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800400e:	2b00      	cmp	r3, #0
 8004010:	db0b      	blt.n	800402a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004012:	88fb      	ldrh	r3, [r7, #6]
 8004014:	f003 021f 	and.w	r2, r3, #31
 8004018:	4907      	ldr	r1, [pc, #28]	@ (8004038 <__NVIC_EnableIRQ+0x38>)
 800401a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800401e:	095b      	lsrs	r3, r3, #5
 8004020:	2001      	movs	r0, #1
 8004022:	fa00 f202 	lsl.w	r2, r0, r2
 8004026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800402a:	bf00      	nop
 800402c:	370c      	adds	r7, #12
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr
 8004036:	bf00      	nop
 8004038:	e000e100 	.word	0xe000e100

0800403c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	4603      	mov	r3, r0
 8004044:	6039      	str	r1, [r7, #0]
 8004046:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004048:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800404c:	2b00      	cmp	r3, #0
 800404e:	db0a      	blt.n	8004066 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	b2da      	uxtb	r2, r3
 8004054:	490c      	ldr	r1, [pc, #48]	@ (8004088 <__NVIC_SetPriority+0x4c>)
 8004056:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800405a:	0112      	lsls	r2, r2, #4
 800405c:	b2d2      	uxtb	r2, r2
 800405e:	440b      	add	r3, r1
 8004060:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004064:	e00a      	b.n	800407c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	b2da      	uxtb	r2, r3
 800406a:	4908      	ldr	r1, [pc, #32]	@ (800408c <__NVIC_SetPriority+0x50>)
 800406c:	88fb      	ldrh	r3, [r7, #6]
 800406e:	f003 030f 	and.w	r3, r3, #15
 8004072:	3b04      	subs	r3, #4
 8004074:	0112      	lsls	r2, r2, #4
 8004076:	b2d2      	uxtb	r2, r2
 8004078:	440b      	add	r3, r1
 800407a:	761a      	strb	r2, [r3, #24]
}
 800407c:	bf00      	nop
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr
 8004088:	e000e100 	.word	0xe000e100
 800408c:	e000ed00 	.word	0xe000ed00

08004090 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004090:	b480      	push	{r7}
 8004092:	b089      	sub	sp, #36	@ 0x24
 8004094:	af00      	add	r7, sp, #0
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	60b9      	str	r1, [r7, #8]
 800409a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f003 0307 	and.w	r3, r3, #7
 80040a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	f1c3 0307 	rsb	r3, r3, #7
 80040aa:	2b04      	cmp	r3, #4
 80040ac:	bf28      	it	cs
 80040ae:	2304      	movcs	r3, #4
 80040b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	3304      	adds	r3, #4
 80040b6:	2b06      	cmp	r3, #6
 80040b8:	d902      	bls.n	80040c0 <NVIC_EncodePriority+0x30>
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	3b03      	subs	r3, #3
 80040be:	e000      	b.n	80040c2 <NVIC_EncodePriority+0x32>
 80040c0:	2300      	movs	r3, #0
 80040c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040c4:	f04f 32ff 	mov.w	r2, #4294967295
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	fa02 f303 	lsl.w	r3, r2, r3
 80040ce:	43da      	mvns	r2, r3
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	401a      	ands	r2, r3
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040d8:	f04f 31ff 	mov.w	r1, #4294967295
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	fa01 f303 	lsl.w	r3, r1, r3
 80040e2:	43d9      	mvns	r1, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040e8:	4313      	orrs	r3, r2
         );
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3724      	adds	r7, #36	@ 0x24
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr

080040f6 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80040f6:	b480      	push	{r7}
 80040f8:	b08b      	sub	sp, #44	@ 0x2c
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	60f8      	str	r0, [r7, #12]
 80040fe:	60b9      	str	r1, [r7, #8]
 8004100:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * GPIO_MODER_MODE1_Pos)),
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	fa93 f3a3 	rbit	r3, r3
 8004110:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d101      	bne.n	8004120 <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 800411c:	2320      	movs	r3, #32
 800411e:	e003      	b.n	8004128 <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 8004120:	69bb      	ldr	r3, [r7, #24]
 8004122:	fab3 f383 	clz	r3, r3
 8004126:	b2db      	uxtb	r3, r3
 8004128:	005b      	lsls	r3, r3, #1
 800412a:	2103      	movs	r1, #3
 800412c:	fa01 f303 	lsl.w	r3, r1, r3
 8004130:	43db      	mvns	r3, r3
 8004132:	401a      	ands	r2, r3
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004138:	6a3b      	ldr	r3, [r7, #32]
 800413a:	fa93 f3a3 	rbit	r3, r3
 800413e:	61fb      	str	r3, [r7, #28]
  return result;
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004146:	2b00      	cmp	r3, #0
 8004148:	d101      	bne.n	800414e <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800414a:	2320      	movs	r3, #32
 800414c:	e003      	b.n	8004156 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800414e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004150:	fab3 f383 	clz	r3, r3
 8004154:	b2db      	uxtb	r3, r3
 8004156:	005b      	lsls	r3, r3, #1
 8004158:	6879      	ldr	r1, [r7, #4]
 800415a:	fa01 f303 	lsl.w	r3, r1, r3
 800415e:	431a      	orrs	r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	601a      	str	r2, [r3, #0]
             (Mode << (POSITION_VAL(Pin) * GPIO_MODER_MODE1_Pos)));
}
 8004164:	bf00      	nop
 8004166:	372c      	adds	r7, #44	@ 0x2c
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr

08004170 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8004170:	b480      	push	{r7}
 8004172:	b08b      	sub	sp, #44	@ 0x2c
 8004174:	af00      	add	r7, sp, #0
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	60b9      	str	r1, [r7, #8]
 800417a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * GPIO_PUPDR_PUPD1_Pos)),
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	68da      	ldr	r2, [r3, #12]
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	fa93 f3a3 	rbit	r3, r3
 800418a:	613b      	str	r3, [r7, #16]
  return result;
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d101      	bne.n	800419a <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8004196:	2320      	movs	r3, #32
 8004198:	e003      	b.n	80041a2 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800419a:	69bb      	ldr	r3, [r7, #24]
 800419c:	fab3 f383 	clz	r3, r3
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	005b      	lsls	r3, r3, #1
 80041a4:	2103      	movs	r1, #3
 80041a6:	fa01 f303 	lsl.w	r3, r1, r3
 80041aa:	43db      	mvns	r3, r3
 80041ac:	401a      	ands	r2, r3
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041b2:	6a3b      	ldr	r3, [r7, #32]
 80041b4:	fa93 f3a3 	rbit	r3, r3
 80041b8:	61fb      	str	r3, [r7, #28]
  return result;
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80041be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d101      	bne.n	80041c8 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80041c4:	2320      	movs	r3, #32
 80041c6:	e003      	b.n	80041d0 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80041c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ca:	fab3 f383 	clz	r3, r3
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	005b      	lsls	r3, r3, #1
 80041d2:	6879      	ldr	r1, [r7, #4]
 80041d4:	fa01 f303 	lsl.w	r3, r1, r3
 80041d8:	431a      	orrs	r2, r3
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	60da      	str	r2, [r3, #12]
             (Pull << (POSITION_VAL(Pin) * GPIO_PUPDR_PUPD1_Pos)));
}
 80041de:	bf00      	nop
 80041e0:	372c      	adds	r7, #44	@ 0x2c
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr

080041ea <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80041ea:	b480      	push	{r7}
 80041ec:	b083      	sub	sp, #12
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
 80041f2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	683a      	ldr	r2, [r7, #0]
 80041f8:	619a      	str	r2, [r3, #24]
}
 80041fa:	bf00      	nop
 80041fc:	370c      	adds	r7, #12
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr

08004206 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8004206:	b480      	push	{r7}
 8004208:	b083      	sub	sp, #12
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
 800420e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	683a      	ldr	r2, [r7, #0]
 8004214:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004216:	bf00      	nop
 8004218:	370c      	adds	r7, #12
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr
	...

08004224 <LL_EXTI_SetEXTISource>:
  *         @arg @ref LL_EXTI_EXTI_LINE14
  *         @arg @ref LL_EXTI_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(EXTI->EXTICR[Line & 0x03U], EXTI_EXTICR1_EXTI0 << (Line >> LL_EXTI_REGISTER_PINPOS_SHFT), \
 800422e:	4a10      	ldr	r2, [pc, #64]	@ (8004270 <LL_EXTI_SetEXTISource+0x4c>)
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	f003 0303 	and.w	r3, r3, #3
 8004236:	3318      	adds	r3, #24
 8004238:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	0c1b      	lsrs	r3, r3, #16
 8004240:	210f      	movs	r1, #15
 8004242:	fa01 f303 	lsl.w	r3, r1, r3
 8004246:	43db      	mvns	r3, r3
 8004248:	ea02 0103 	and.w	r1, r2, r3
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	0c1b      	lsrs	r3, r3, #16
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	409a      	lsls	r2, r3
 8004254:	4806      	ldr	r0, [pc, #24]	@ (8004270 <LL_EXTI_SetEXTISource+0x4c>)
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	f003 0303 	and.w	r3, r3, #3
 800425c:	430a      	orrs	r2, r1
 800425e:	3318      	adds	r3, #24
 8004260:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
             Port << (Line >> LL_EXTI_REGISTER_PINPOS_SHFT));
}
 8004264:	bf00      	nop
 8004266:	370c      	adds	r7, #12
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr
 8004270:	44022000 	.word	0x44022000

08004274 <LL_AHB2_GRP1_EnableClock>:
  *
  *  (*)  : Not available for all stm32h5xxxx family lines.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8004274:	b480      	push	{r7}
 8004276:	b085      	sub	sp, #20
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800427c:	4b0a      	ldr	r3, [pc, #40]	@ (80042a8 <LL_AHB2_GRP1_EnableClock+0x34>)
 800427e:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004282:	4909      	ldr	r1, [pc, #36]	@ (80042a8 <LL_AHB2_GRP1_EnableClock+0x34>)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	4313      	orrs	r3, r2
 8004288:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800428c:	4b06      	ldr	r3, [pc, #24]	@ (80042a8 <LL_AHB2_GRP1_EnableClock+0x34>)
 800428e:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4013      	ands	r3, r2
 8004296:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004298:	68fb      	ldr	r3, [r7, #12]
}
 800429a:	bf00      	nop
 800429c:	3714      	adds	r7, #20
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr
 80042a6:	bf00      	nop
 80042a8:	44020c00 	.word	0x44020c00

080042ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b08a      	sub	sp, #40	@ 0x28
 80042b0:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80042b2:	f107 031c 	add.w	r3, r7, #28
 80042b6:	2200      	movs	r2, #0
 80042b8:	601a      	str	r2, [r3, #0]
 80042ba:	605a      	str	r2, [r3, #4]
 80042bc:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042be:	1d3b      	adds	r3, r7, #4
 80042c0:	2200      	movs	r2, #0
 80042c2:	601a      	str	r2, [r3, #0]
 80042c4:	605a      	str	r2, [r3, #4]
 80042c6:	609a      	str	r2, [r3, #8]
 80042c8:	60da      	str	r2, [r3, #12]
 80042ca:	611a      	str	r2, [r3, #16]
 80042cc:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 80042ce:	2004      	movs	r0, #4
 80042d0:	f7ff ffd0 	bl	8004274 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80042d4:	2001      	movs	r0, #1
 80042d6:	f7ff ffcd 	bl	8004274 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80042da:	2002      	movs	r0, #2
 80042dc:	f7ff ffca 	bl	8004274 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);
 80042e0:	2008      	movs	r0, #8
 80042e2:	f7ff ffc7 	bl	8004274 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_1);
 80042e6:	2102      	movs	r1, #2
 80042e8:	486e      	ldr	r0, [pc, #440]	@ (80044a4 <MX_GPIO_Init+0x1f8>)
 80042ea:	f7ff ff7e 	bl	80041ea <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(SPI3_CS_GPIO_Port, SPI3_CS_Pin);
 80042ee:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80042f2:	486d      	ldr	r0, [pc, #436]	@ (80044a8 <MX_GPIO_Init+0x1fc>)
 80042f4:	f7ff ff79 	bl	80041ea <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_2);
 80042f8:	2104      	movs	r1, #4
 80042fa:	486b      	ldr	r0, [pc, #428]	@ (80044a8 <MX_GPIO_Init+0x1fc>)
 80042fc:	f7ff ff83 	bl	8004206 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_10|LL_GPIO_PIN_14|ON_OFF_3_3_Pin|LED_GPS_Pin
 8004300:	f244 5198 	movw	r1, #17816	@ 0x4598
 8004304:	4869      	ldr	r0, [pc, #420]	@ (80044ac <MX_GPIO_Init+0x200>)
 8004306:	f7ff ff7e 	bl	8004206 <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_7|LL_GPIO_PIN_8);

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_8|LL_GPIO_PIN_9);
 800430a:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800430e:	4865      	ldr	r0, [pc, #404]	@ (80044a4 <MX_GPIO_Init+0x1f8>)
 8004310:	f7ff ff79 	bl	8004206 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LC86_ON_OFF_GPIO_Port, LC86_ON_OFF_Pin);
 8004314:	2104      	movs	r1, #4
 8004316:	4866      	ldr	r0, [pc, #408]	@ (80044b0 <MX_GPIO_Init+0x204>)
 8004318:	f7ff ff75 	bl	8004206 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1|LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 800431c:	f240 3302 	movw	r3, #770	@ 0x302
 8004320:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004322:	2301      	movs	r3, #1
 8004324:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004326:	2300      	movs	r3, #0
 8004328:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800432a:	2300      	movs	r3, #0
 800432c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800432e:	2300      	movs	r3, #0
 8004330:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004332:	1d3b      	adds	r3, r7, #4
 8004334:	4619      	mov	r1, r3
 8004336:	485b      	ldr	r0, [pc, #364]	@ (80044a4 <MX_GPIO_Init+0x1f8>)
 8004338:	f011 fb2d 	bl	8015996 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 800433c:	2301      	movs	r3, #1
 800433e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8004340:	2300      	movs	r3, #0
 8004342:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004344:	2300      	movs	r3, #0
 8004346:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004348:	1d3b      	adds	r3, r7, #4
 800434a:	4619      	mov	r1, r3
 800434c:	4856      	ldr	r0, [pc, #344]	@ (80044a8 <MX_GPIO_Init+0x1fc>)
 800434e:	f011 fb22 	bl	8015996 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8004352:	2304      	movs	r3, #4
 8004354:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004356:	2301      	movs	r3, #1
 8004358:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800435a:	2300      	movs	r3, #0
 800435c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800435e:	2300      	movs	r3, #0
 8004360:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004362:	2300      	movs	r3, #0
 8004364:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004366:	1d3b      	adds	r3, r7, #4
 8004368:	4619      	mov	r1, r3
 800436a:	484f      	ldr	r0, [pc, #316]	@ (80044a8 <MX_GPIO_Init+0x1fc>)
 800436c:	f011 fb13 	bl	8015996 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_14|ON_OFF_3_3_Pin|LED_GPS_Pin
 8004370:	f244 5398 	movw	r3, #17816	@ 0x4598
 8004374:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_7|LL_GPIO_PIN_8;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004376:	2301      	movs	r3, #1
 8004378:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800437a:	2300      	movs	r3, #0
 800437c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800437e:	2300      	movs	r3, #0
 8004380:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004382:	2300      	movs	r3, #0
 8004384:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004386:	1d3b      	adds	r3, r7, #4
 8004388:	4619      	mov	r1, r3
 800438a:	4848      	ldr	r0, [pc, #288]	@ (80044ac <MX_GPIO_Init+0x200>)
 800438c:	f011 fb03 	bl	8015996 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 8004390:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004394:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004396:	2301      	movs	r3, #1
 8004398:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800439a:	2303      	movs	r3, #3
 800439c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800439e:	2300      	movs	r3, #0
 80043a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80043a2:	2300      	movs	r3, #0
 80043a4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 80043a6:	1d3b      	adds	r3, r7, #4
 80043a8:	4619      	mov	r1, r3
 80043aa:	483f      	ldr	r0, [pc, #252]	@ (80044a8 <MX_GPIO_Init+0x1fc>)
 80043ac:	f011 faf3 	bl	8015996 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LC86_ON_OFF_Pin;
 80043b0:	2304      	movs	r3, #4
 80043b2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80043b4:	2301      	movs	r3, #1
 80043b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80043b8:	2300      	movs	r3, #0
 80043ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80043bc:	2300      	movs	r3, #0
 80043be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80043c0:	2300      	movs	r3, #0
 80043c2:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(LC86_ON_OFF_GPIO_Port, &GPIO_InitStruct);
 80043c4:	1d3b      	adds	r3, r7, #4
 80043c6:	4619      	mov	r1, r3
 80043c8:	4839      	ldr	r0, [pc, #228]	@ (80044b0 <MX_GPIO_Init+0x204>)
 80043ca:	f011 fae4 	bl	8015996 <LL_GPIO_Init>

  /**/
  LL_EXTI_SetEXTISource(LL_EXTI_EXTI_PORTB, LL_EXTI_EXTI_LINE15);
 80043ce:	4939      	ldr	r1, [pc, #228]	@ (80044b4 <MX_GPIO_Init+0x208>)
 80043d0:	2001      	movs	r0, #1
 80043d2:	f7ff ff27 	bl	8004224 <LL_EXTI_SetEXTISource>

  /**/
  LL_EXTI_SetEXTISource(LL_EXTI_EXTI_PORTA, LL_EXTI_EXTI_LINE8);
 80043d6:	2102      	movs	r1, #2
 80043d8:	2000      	movs	r0, #0
 80043da:	f7ff ff23 	bl	8004224 <LL_EXTI_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 80043de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043e2:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 80043e4:	2300      	movs	r3, #0
 80043e6:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 80043e8:	2301      	movs	r3, #1
 80043ea:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80043ee:	2300      	movs	r3, #0
 80043f0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80043f4:	2302      	movs	r3, #2
 80043f6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80043fa:	f107 031c 	add.w	r3, r7, #28
 80043fe:	4618      	mov	r0, r3
 8004400:	f011 f88e 	bl	8015520 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_8;
 8004404:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004408:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 800440a:	2300      	movs	r3, #0
 800440c:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 800440e:	2301      	movs	r3, #1
 8004410:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8004414:	2300      	movs	r3, #0
 8004416:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 800441a:	2302      	movs	r3, #2
 800441c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8004420:	f107 031c 	add.w	r3, r7, #28
 8004424:	4618      	mov	r0, r3
 8004426:	f011 f87b 	bl	8015520 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_15, LL_GPIO_PULL_NO);
 800442a:	2200      	movs	r2, #0
 800442c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004430:	481e      	ldr	r0, [pc, #120]	@ (80044ac <MX_GPIO_Init+0x200>)
 8004432:	f7ff fe9d 	bl	8004170 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(RingIndicator_GPIO_Port, RingIndicator_Pin, LL_GPIO_PULL_NO);
 8004436:	2200      	movs	r2, #0
 8004438:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800443c:	481a      	ldr	r0, [pc, #104]	@ (80044a8 <MX_GPIO_Init+0x1fc>)
 800443e:	f7ff fe97 	bl	8004170 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_15, LL_GPIO_MODE_INPUT);
 8004442:	2200      	movs	r2, #0
 8004444:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004448:	4818      	ldr	r0, [pc, #96]	@ (80044ac <MX_GPIO_Init+0x200>)
 800444a:	f7ff fe54 	bl	80040f6 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(RingIndicator_GPIO_Port, RingIndicator_Pin, LL_GPIO_MODE_INPUT);
 800444e:	2200      	movs	r2, #0
 8004450:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004454:	4814      	ldr	r0, [pc, #80]	@ (80044a8 <MX_GPIO_Init+0x1fc>)
 8004456:	f7ff fe4e 	bl	80040f6 <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI8_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800445a:	f7ff fdc3 	bl	8003fe4 <__NVIC_GetPriorityGrouping>
 800445e:	4603      	mov	r3, r0
 8004460:	2200      	movs	r2, #0
 8004462:	2100      	movs	r1, #0
 8004464:	4618      	mov	r0, r3
 8004466:	f7ff fe13 	bl	8004090 <NVIC_EncodePriority>
 800446a:	4603      	mov	r3, r0
 800446c:	4619      	mov	r1, r3
 800446e:	2013      	movs	r0, #19
 8004470:	f7ff fde4 	bl	800403c <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI8_IRQn);
 8004474:	2013      	movs	r0, #19
 8004476:	f7ff fdc3 	bl	8004000 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800447a:	f7ff fdb3 	bl	8003fe4 <__NVIC_GetPriorityGrouping>
 800447e:	4603      	mov	r3, r0
 8004480:	2200      	movs	r2, #0
 8004482:	2100      	movs	r1, #0
 8004484:	4618      	mov	r0, r3
 8004486:	f7ff fe03 	bl	8004090 <NVIC_EncodePriority>
 800448a:	4603      	mov	r3, r0
 800448c:	4619      	mov	r1, r3
 800448e:	201a      	movs	r0, #26
 8004490:	f7ff fdd4 	bl	800403c <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_IRQn);
 8004494:	201a      	movs	r0, #26
 8004496:	f7ff fdb3 	bl	8004000 <__NVIC_EnableIRQ>

}
 800449a:	bf00      	nop
 800449c:	3728      	adds	r7, #40	@ 0x28
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	42020800 	.word	0x42020800
 80044a8:	42020000 	.word	0x42020000
 80044ac:	42020400 	.word	0x42020400
 80044b0:	42020c00 	.word	0x42020c00
 80044b4:	00180003 	.word	0x00180003

080044b8 <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80044bc:	2000      	movs	r0, #0
 80044be:	f007 f9e1 	bl	800b884 <HAL_ICACHE_ConfigAssociativityMode>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d001      	beq.n	80044cc <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80044c8:	f000 f949 	bl	800475e <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80044cc:	f007 f9fa 	bl	800b8c4 <HAL_ICACHE_Enable>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d001      	beq.n	80044da <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80044d6:	f000 f942 	bl	800475e <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80044da:	bf00      	nop
 80044dc:	bd80      	pop	{r7, pc}
	...

080044e0 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	af00      	add	r7, sp, #0
//	  hiwdg.Init.Prescaler = IWDG_PRESCALER_1024;
//	  hiwdg.Init.Window = IWDG_WINDOW_DISABLE;
//	  hiwdg.Init.Reload = 3749;
//	  hiwdg.Init.EWI = IWDG_EWI_DISABLE;
  /* USER CODE END IWDG_Init 1 */
		  hiwdg.Instance = IWDG;
 80044e4:	4b0d      	ldr	r3, [pc, #52]	@ (800451c <MX_IWDG_Init+0x3c>)
 80044e6:	4a0e      	ldr	r2, [pc, #56]	@ (8004520 <MX_IWDG_Init+0x40>)
 80044e8:	601a      	str	r2, [r3, #0]
		  hiwdg.Init.Prescaler = IWDG_PRESCALER_1024;
 80044ea:	4b0c      	ldr	r3, [pc, #48]	@ (800451c <MX_IWDG_Init+0x3c>)
 80044ec:	2208      	movs	r2, #8
 80044ee:	605a      	str	r2, [r3, #4]
		  hiwdg.Init.Window = IWDG_WINDOW_DISABLE;
 80044f0:	4b0a      	ldr	r3, [pc, #40]	@ (800451c <MX_IWDG_Init+0x3c>)
 80044f2:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80044f6:	60da      	str	r2, [r3, #12]
		  hiwdg.Init.Reload = 3749;
 80044f8:	4b08      	ldr	r3, [pc, #32]	@ (800451c <MX_IWDG_Init+0x3c>)
 80044fa:	f640 62a5 	movw	r2, #3749	@ 0xea5
 80044fe:	609a      	str	r2, [r3, #8]
		  hiwdg.Init.EWI = IWDG_EWI_DISABLE;
 8004500:	4b06      	ldr	r3, [pc, #24]	@ (800451c <MX_IWDG_Init+0x3c>)
 8004502:	2200      	movs	r2, #0
 8004504:	611a      	str	r2, [r3, #16]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8004506:	4805      	ldr	r0, [pc, #20]	@ (800451c <MX_IWDG_Init+0x3c>)
 8004508:	f007 f9ec 	bl	800b8e4 <HAL_IWDG_Init>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d001      	beq.n	8004516 <MX_IWDG_Init+0x36>
  {
    Error_Handler();
 8004512:	f000 f924 	bl	800475e <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8004516:	bf00      	nop
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	20013ba8 	.word	0x20013ba8
 8004520:	40003000 	.word	0x40003000

08004524 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8004524:	b580      	push	{r7, lr}
 8004526:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN 1 */
	SCB->VTOR = 0x08000000;
 8004528:	4b1c      	ldr	r3, [pc, #112]	@ (800459c <main+0x78>)
 800452a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800452e:	609a      	str	r2, [r3, #8]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8004530:	f001 f98c 	bl	800584c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8004534:	f000 f836 	bl	80045a4 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 8004538:	f000 f8a6 	bl	8004688 <PeriphCommonClock_Config>

	/* USER CODE BEGIN SysInit */
	MX_GPIO_Init();
 800453c:	f7ff feb6 	bl	80042ac <MX_GPIO_Init>
	MX_FDCAN1_Init();
 8004540:	f7ff fb2e 	bl	8003ba0 <MX_FDCAN1_Init>
	MX_RTC_Init();
 8004544:	f000 f912 	bl	800476c <MX_RTC_Init>

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */

	MX_GPDMA1_Init();
 8004548:	f7ff fd2c 	bl	8003fa4 <MX_GPDMA1_Init>
	MX_UART5_Init();
 800454c:	f000 fe54 	bl	80051f8 <MX_UART5_Init>
	MX_ICACHE_Init();
 8004550:	f7ff ffb2 	bl	80044b8 <MX_ICACHE_Init>
	MX_USART6_UART_Init();
 8004554:	f000 fee8 	bl	8005328 <MX_USART6_UART_Init>
	MX_USART1_UART_Init();
 8004558:	f000 fe9a 	bl	8005290 <MX_USART1_UART_Init>
	MX_FDCAN2_Init();
 800455c:	f7ff fbd4 	bl	8003d08 <MX_FDCAN2_Init>
	MX_TIM6_Init();
 8004560:	f000 fdec 	bl	800513c <MX_TIM6_Init>
	MX_AES_Init();
 8004564:	f7ff fa7e 	bl	8003a64 <MX_AES_Init>
	MX_CRC_Init();
 8004568:	f7ff facc 	bl	8003b04 <MX_CRC_Init>
	MX_SPI3_Init();
 800456c:	f000 fa30 	bl	80049d0 <MX_SPI3_Init>
	MX_FLASH_Init();
 8004570:	f7fe f858 	bl	8002624 <MX_FLASH_Init>
	MX_ADC1_Init();
 8004574:	f7ff f806 	bl	8003584 <MX_ADC1_Init>

	MX_ADC2_Init();
 8004578:	f7ff f86a 	bl	8003650 <MX_ADC2_Init>

	/* USER CODE BEGIN 2 */

	Sleep_Mode();
 800457c:	f016 fe50 	bl	801b220 <Sleep_Mode>
	MX_IWDG_Init();
 8004580:	f7ff ffae 	bl	80044e0 <MX_IWDG_Init>
	On_Wakeup_Config();
 8004584:	f016 fd56 	bl	801b034 <On_Wakeup_Config>
	init();
 8004588:	f7fe f876 	bl	8002678 <init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		HAL_IWDG_Refresh(&hiwdg);
 800458c:	4804      	ldr	r0, [pc, #16]	@ (80045a0 <main+0x7c>)
 800458e:	f007 fa31 	bl	800b9f4 <HAL_IWDG_Refresh>
		loop();
 8004592:	f7fe f917 	bl	80027c4 <loop>
		HAL_IWDG_Refresh(&hiwdg);
 8004596:	bf00      	nop
 8004598:	e7f8      	b.n	800458c <main+0x68>
 800459a:	bf00      	nop
 800459c:	e000ed00 	.word	0xe000ed00
 80045a0:	20013ba8 	.word	0x20013ba8

080045a4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b09c      	sub	sp, #112	@ 0x70
 80045a8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80045aa:	f107 0320 	add.w	r3, r7, #32
 80045ae:	2250      	movs	r2, #80	@ 0x50
 80045b0:	2100      	movs	r1, #0
 80045b2:	4618      	mov	r0, r3
 80045b4:	f01a fc2c 	bl	801ee10 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80045b8:	f107 0308 	add.w	r3, r7, #8
 80045bc:	2200      	movs	r2, #0
 80045be:	601a      	str	r2, [r3, #0]
 80045c0:	605a      	str	r2, [r3, #4]
 80045c2:	609a      	str	r2, [r3, #8]
 80045c4:	60da      	str	r2, [r3, #12]
 80045c6:	611a      	str	r2, [r3, #16]
 80045c8:	615a      	str	r2, [r3, #20]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80045ca:	4b2e      	ldr	r3, [pc, #184]	@ (8004684 <SystemClock_Config+0xe0>)
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	4a2d      	ldr	r2, [pc, #180]	@ (8004684 <SystemClock_Config+0xe0>)
 80045d0:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80045d4:	6113      	str	r3, [r2, #16]
 80045d6:	4b2b      	ldr	r3, [pc, #172]	@ (8004684 <SystemClock_Config+0xe0>)
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80045de:	607b      	str	r3, [r7, #4]
 80045e0:	687b      	ldr	r3, [r7, #4]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 80045e2:	bf00      	nop
 80045e4:	4b27      	ldr	r3, [pc, #156]	@ (8004684 <SystemClock_Config+0xe0>)
 80045e6:	695b      	ldr	r3, [r3, #20]
 80045e8:	f003 0308 	and.w	r3, r3, #8
 80045ec:	2b08      	cmp	r3, #8
 80045ee:	d1f9      	bne.n	80045e4 <SystemClock_Config+0x40>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 80045f0:	231a      	movs	r3, #26
 80045f2:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_CSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80045f4:	2301      	movs	r3, #1
 80045f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80045f8:	2300      	movs	r3, #0
 80045fa:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80045fc:	2340      	movs	r3, #64	@ 0x40
 80045fe:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004600:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004604:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8004606:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800460a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 800460c:	2320      	movs	r3, #32
 800460e:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004610:	2302      	movs	r3, #2
 8004612:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSI;
 8004614:	2301      	movs	r3, #1
 8004616:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8004618:	2304      	movs	r3, #4
 800461a:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLN = 8;
 800461c:	2308      	movs	r3, #8
 800461e:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 8004620:	2302      	movs	r3, #2
 8004622:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8004624:	2302      	movs	r3, #2
 8004626:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8004628:	2302      	movs	r3, #2
 800462a:	663b      	str	r3, [r7, #96]	@ 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 800462c:	230c      	movs	r3, #12
 800462e:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8004630:	2300      	movs	r3, #0
 8004632:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8004634:	2300      	movs	r3, #0
 8004636:	66fb      	str	r3, [r7, #108]	@ 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8004638:	f107 0320 	add.w	r3, r7, #32
 800463c:	4618      	mov	r0, r3
 800463e:	f007 fa25 	bl	800ba8c <HAL_RCC_OscConfig>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d001      	beq.n	800464c <SystemClock_Config+0xa8>
		Error_Handler();
 8004648:	f000 f889 	bl	800475e <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800464c:	231f      	movs	r3, #31
 800464e:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004650:	2303      	movs	r3, #3
 8004652:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8004654:	2308      	movs	r3, #8
 8004656:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004658:	2300      	movs	r3, #0
 800465a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800465c:	2300      	movs	r3, #0
 800465e:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8004660:	2300      	movs	r3, #0
 8004662:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 8004664:	f107 0308 	add.w	r3, r7, #8
 8004668:	2103      	movs	r1, #3
 800466a:	4618      	mov	r0, r3
 800466c:	f007 fe46 	bl	800c2fc <HAL_RCC_ClockConfig>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d001      	beq.n	800467a <SystemClock_Config+0xd6>
		Error_Handler();
 8004676:	f000 f872 	bl	800475e <Error_Handler>
	}
}
 800467a:	bf00      	nop
 800467c:	3770      	adds	r7, #112	@ 0x70
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	44020800 	.word	0x44020800

08004688 <PeriphCommonClock_Config>:

/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void) {
 8004688:	b580      	push	{r7, lr}
 800468a:	b0c2      	sub	sp, #264	@ 0x108
 800468c:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 800468e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004692:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004696:	4618      	mov	r0, r3
 8004698:	f44f 7384 	mov.w	r3, #264	@ 0x108
 800469c:	461a      	mov	r2, r3
 800469e:	2100      	movs	r1, #0
 80046a0:	f01a fbb6 	bl	801ee10 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC
 80046a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80046a8:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 80046ac:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80046b0:	f04f 0304 	mov.w	r3, #4
 80046b4:	e9c1 2300 	strd	r2, r3, [r1]
			| RCC_PERIPHCLK_FDCAN;
	PeriphClkInitStruct.PLL2.PLL2Source = RCC_PLL2_SOURCE_CSI;
 80046b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80046bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80046c0:	2202      	movs	r2, #2
 80046c2:	609a      	str	r2, [r3, #8]
	PeriphClkInitStruct.PLL2.PLL2M = 1;
 80046c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80046c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80046cc:	2201      	movs	r2, #1
 80046ce:	60da      	str	r2, [r3, #12]
	PeriphClkInitStruct.PLL2.PLL2N = 50;
 80046d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80046d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80046d8:	2232      	movs	r2, #50	@ 0x32
 80046da:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLL2.PLL2P = 2;
 80046dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80046e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80046e4:	2202      	movs	r2, #2
 80046e6:	615a      	str	r2, [r3, #20]
	PeriphClkInitStruct.PLL2.PLL2Q = 4;
 80046e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80046ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80046f0:	2204      	movs	r2, #4
 80046f2:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLL2.PLL2R = 2;
 80046f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80046f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80046fc:	2202      	movs	r2, #2
 80046fe:	61da      	str	r2, [r3, #28]
	PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2_VCIRANGE_2;
 8004700:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004704:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004708:	2208      	movs	r2, #8
 800470a:	621a      	str	r2, [r3, #32]
	PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2_VCORANGE_WIDE;
 800470c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004710:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004714:	2200      	movs	r2, #0
 8004716:	625a      	str	r2, [r3, #36]	@ 0x24
	PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8004718:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800471c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004720:	2200      	movs	r2, #0
 8004722:	629a      	str	r2, [r3, #40]	@ 0x28
	PeriphClkInitStruct.PLL2.PLL2ClockOut = RCC_PLL2_DIVQ;
 8004724:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004728:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800472c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004730:	62da      	str	r2, [r3, #44]	@ 0x2c
	PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2Q;
 8004732:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004736:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800473a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800473e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8004742:	463b      	mov	r3, r7
 8004744:	4618      	mov	r0, r3
 8004746:	f008 f91b 	bl	800c980 <HAL_RCCEx_PeriphCLKConfig>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d001      	beq.n	8004754 <PeriphCommonClock_Config+0xcc>
		Error_Handler();
 8004750:	f000 f805 	bl	800475e <Error_Handler>
	}
}
 8004754:	bf00      	nop
 8004756:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}

0800475e <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800475e:	b480      	push	{r7}
 8004760:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004762:	b672      	cpsid	i
}
 8004764:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8004766:	bf00      	nop
 8004768:	e7fd      	b.n	8004766 <Error_Handler+0x8>
	...

0800476c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b088      	sub	sp, #32
 8004770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8004772:	1d3b      	adds	r3, r7, #4
 8004774:	2200      	movs	r2, #0
 8004776:	601a      	str	r2, [r3, #0]
 8004778:	605a      	str	r2, [r3, #4]
 800477a:	609a      	str	r2, [r3, #8]
 800477c:	60da      	str	r2, [r3, #12]
 800477e:	611a      	str	r2, [r3, #16]
 8004780:	615a      	str	r2, [r3, #20]
 8004782:	619a      	str	r2, [r3, #24]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8004784:	4b1e      	ldr	r3, [pc, #120]	@ (8004800 <MX_RTC_Init+0x94>)
 8004786:	4a1f      	ldr	r2, [pc, #124]	@ (8004804 <MX_RTC_Init+0x98>)
 8004788:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800478a:	4b1d      	ldr	r3, [pc, #116]	@ (8004800 <MX_RTC_Init+0x94>)
 800478c:	2200      	movs	r2, #0
 800478e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8004790:	4b1b      	ldr	r3, [pc, #108]	@ (8004800 <MX_RTC_Init+0x94>)
 8004792:	227f      	movs	r2, #127	@ 0x7f
 8004794:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8004796:	4b1a      	ldr	r3, [pc, #104]	@ (8004800 <MX_RTC_Init+0x94>)
 8004798:	22ff      	movs	r2, #255	@ 0xff
 800479a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800479c:	4b18      	ldr	r3, [pc, #96]	@ (8004800 <MX_RTC_Init+0x94>)
 800479e:	2200      	movs	r2, #0
 80047a0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80047a2:	4b17      	ldr	r3, [pc, #92]	@ (8004800 <MX_RTC_Init+0x94>)
 80047a4:	2200      	movs	r2, #0
 80047a6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80047a8:	4b15      	ldr	r3, [pc, #84]	@ (8004800 <MX_RTC_Init+0x94>)
 80047aa:	2200      	movs	r2, #0
 80047ac:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80047ae:	4b14      	ldr	r3, [pc, #80]	@ (8004800 <MX_RTC_Init+0x94>)
 80047b0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80047b4:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80047b6:	4b12      	ldr	r3, [pc, #72]	@ (8004800 <MX_RTC_Init+0x94>)
 80047b8:	2200      	movs	r2, #0
 80047ba:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 80047bc:	4b10      	ldr	r3, [pc, #64]	@ (8004800 <MX_RTC_Init+0x94>)
 80047be:	2200      	movs	r2, #0
 80047c0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80047c2:	480f      	ldr	r0, [pc, #60]	@ (8004800 <MX_RTC_Init+0x94>)
 80047c4:	f00d f92e 	bl	8011a24 <HAL_RTC_Init>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d001      	beq.n	80047d2 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 80047ce:	f7ff ffc6 	bl	800475e <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 80047d2:	2300      	movs	r3, #0
 80047d4:	607b      	str	r3, [r7, #4]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 80047d6:	2300      	movs	r3, #0
 80047d8:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 80047da:	2300      	movs	r3, #0
 80047dc:	617b      	str	r3, [r7, #20]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 80047de:	2300      	movs	r3, #0
 80047e0:	61bb      	str	r3, [r7, #24]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 80047e2:	1d3b      	adds	r3, r7, #4
 80047e4:	4619      	mov	r1, r3
 80047e6:	4806      	ldr	r0, [pc, #24]	@ (8004800 <MX_RTC_Init+0x94>)
 80047e8:	f00d fd08 	bl	80121fc <HAL_RTCEx_PrivilegeModeSet>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d001      	beq.n	80047f6 <MX_RTC_Init+0x8a>
  {
    Error_Handler();
 80047f2:	f7ff ffb4 	bl	800475e <Error_Handler>
//  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80047f6:	bf00      	nop
 80047f8:	3720      	adds	r7, #32
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	20013bbc 	.word	0x20013bbc
 8004804:	44007800 	.word	0x44007800

08004808 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b0c6      	sub	sp, #280	@ 0x118
 800480c:	af00      	add	r7, sp, #0
 800480e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004812:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004816:	6018      	str	r0, [r3, #0]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004818:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800481c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004820:	4618      	mov	r0, r3
 8004822:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8004826:	461a      	mov	r2, r3
 8004828:	2100      	movs	r1, #0
 800482a:	f01a faf1 	bl	801ee10 <memset>
  if(rtcHandle->Instance==RTC)
 800482e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004832:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a25      	ldr	r2, [pc, #148]	@ (80048d0 <HAL_RTC_MspInit+0xc8>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d142      	bne.n	80048c6 <HAL_RTC_MspInit+0xbe>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004840:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004844:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 8004848:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800484c:	f04f 0300 	mov.w	r3, #0
 8004850:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004854:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004858:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800485c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004860:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004864:	f107 0310 	add.w	r3, r7, #16
 8004868:	4618      	mov	r0, r3
 800486a:	f008 f889 	bl	800c980 <HAL_RCCEx_PeriphCLKConfig>
 800486e:	4603      	mov	r3, r0
 8004870:	2b00      	cmp	r3, #0
 8004872:	d001      	beq.n	8004878 <HAL_RTC_MspInit+0x70>
    {
      Error_Handler();
 8004874:	f7ff ff73 	bl	800475e <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004878:	4b16      	ldr	r3, [pc, #88]	@ (80048d4 <HAL_RTC_MspInit+0xcc>)
 800487a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800487e:	4a15      	ldr	r2, [pc, #84]	@ (80048d4 <HAL_RTC_MspInit+0xcc>)
 8004880:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004884:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8004888:	4b12      	ldr	r3, [pc, #72]	@ (80048d4 <HAL_RTC_MspInit+0xcc>)
 800488a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800488e:	4a11      	ldr	r2, [pc, #68]	@ (80048d4 <HAL_RTC_MspInit+0xcc>)
 8004890:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004894:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8004898:	4b0e      	ldr	r3, [pc, #56]	@ (80048d4 <HAL_RTC_MspInit+0xcc>)
 800489a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800489e:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80048a2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80048a6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80048aa:	601a      	str	r2, [r3, #0]
 80048ac:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80048b0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80048b4:	681b      	ldr	r3, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80048b6:	2200      	movs	r2, #0
 80048b8:	2100      	movs	r1, #0
 80048ba:	2002      	movs	r0, #2
 80048bc:	f002 fd03 	bl	80072c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 80048c0:	2002      	movs	r0, #2
 80048c2:	f002 fd1a 	bl	80072fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80048c6:	bf00      	nop
 80048c8:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	44007800 	.word	0x44007800
 80048d4:	44020c00 	.word	0x44020c00

080048d8 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 80048d8:	b480      	push	{r7}
 80048da:	b083      	sub	sp, #12
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f043 0201 	orr.w	r2, r3, #1
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	601a      	str	r2, [r3, #0]
}
 80048ec:	bf00      	nop
 80048ee:	370c      	adds	r7, #12
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr

080048f8 <LL_SPI_StartMasterTransfer>:
  * @rmtoll CR1          CSTART        LL_SPI_StartMasterTransfer
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_StartMasterTransfer(SPI_TypeDef *SPIx)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_CSTART);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	601a      	str	r2, [r3, #0]
}
 800490c:	bf00      	nop
 800490e:	370c      	adds	r7, #12
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CFG2, SPI_CFG2_SP, Standard);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	f423 1260 	bic.w	r2, r3, #3670016	@ 0x380000
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	431a      	orrs	r2, r3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	60da      	str	r2, [r3, #12]
}
 8004932:	bf00      	nop
 8004934:	370c      	adds	r7, #12
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr

0800493e <LL_SPI_DisableNSSPulseMgt>:
  * @rmtoll CFG2         SSOM          LL_SPI_DisableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 800493e:	b480      	push	{r7}
 8004940:	b083      	sub	sp, #12
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CFG2, SPI_CFG2_SSOM);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	60da      	str	r2, [r3, #12]
}
 8004952:	bf00      	nop
 8004954:	370c      	adds	r7, #12
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr
	...

08004960 <LL_AHB2_GRP1_EnableClock>:
{
 8004960:	b480      	push	{r7}
 8004962:	b085      	sub	sp, #20
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004968:	4b0a      	ldr	r3, [pc, #40]	@ (8004994 <LL_AHB2_GRP1_EnableClock+0x34>)
 800496a:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800496e:	4909      	ldr	r1, [pc, #36]	@ (8004994 <LL_AHB2_GRP1_EnableClock+0x34>)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4313      	orrs	r3, r2
 8004974:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004978:	4b06      	ldr	r3, [pc, #24]	@ (8004994 <LL_AHB2_GRP1_EnableClock+0x34>)
 800497a:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4013      	ands	r3, r2
 8004982:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004984:	68fb      	ldr	r3, [r7, #12]
}
 8004986:	bf00      	nop
 8004988:	3714      	adds	r7, #20
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr
 8004992:	bf00      	nop
 8004994:	44020c00 	.word	0x44020c00

08004998 <LL_APB1_GRP1_EnableClock>:
  *
  *  (*)  : Not available for all stm32h5xxxx family lines.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8004998:	b480      	push	{r7}
 800499a:	b085      	sub	sp, #20
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1LENR, Periphs);
 80049a0:	4b0a      	ldr	r3, [pc, #40]	@ (80049cc <LL_APB1_GRP1_EnableClock+0x34>)
 80049a2:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80049a6:	4909      	ldr	r1, [pc, #36]	@ (80049cc <LL_APB1_GRP1_EnableClock+0x34>)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1LENR, Periphs);
 80049b0:	4b06      	ldr	r3, [pc, #24]	@ (80049cc <LL_APB1_GRP1_EnableClock+0x34>)
 80049b2:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4013      	ands	r3, r2
 80049ba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80049bc:	68fb      	ldr	r3, [r7, #12]
}
 80049be:	bf00      	nop
 80049c0:	3714      	adds	r7, #20
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr
 80049ca:	bf00      	nop
 80049cc:	44020c00 	.word	0x44020c00

080049d0 <MX_SPI3_Init>:

/* USER CODE END 0 */

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b0d2      	sub	sp, #328	@ 0x148
 80049d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80049d6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80049da:	2228      	movs	r2, #40	@ 0x28
 80049dc:	2100      	movs	r1, #0
 80049de:	4618      	mov	r0, r3
 80049e0:	f01a fa16 	bl	801ee10 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80049e8:	2200      	movs	r2, #0
 80049ea:	601a      	str	r2, [r3, #0]
 80049ec:	605a      	str	r2, [r3, #4]
 80049ee:	609a      	str	r2, [r3, #8]
 80049f0:	60da      	str	r2, [r3, #12]
 80049f2:	611a      	str	r2, [r3, #16]
 80049f4:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80049f6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80049fa:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80049fe:	4618      	mov	r0, r3
 8004a00:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8004a04:	461a      	mov	r2, r3
 8004a06:	2100      	movs	r1, #0
 8004a08:	f01a fa02 	bl	801ee10 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8004a0c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004a10:	f5a3 71a4 	sub.w	r1, r3, #328	@ 0x148
 8004a14:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8004a18:	f04f 0300 	mov.w	r3, #0
 8004a1c:	e9c1 2300 	strd	r2, r3, [r1]
  PeriphClkInitStruct.Spi3ClockSelection = RCC_SPI3CLKSOURCE_PLL1Q;
 8004a20:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004a24:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004a2e:	463b      	mov	r3, r7
 8004a30:	4618      	mov	r0, r3
 8004a32:	f007 ffa5 	bl	800c980 <HAL_RCCEx_PeriphCLKConfig>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d001      	beq.n	8004a40 <MX_SPI3_Init+0x70>
  {
    Error_Handler();
 8004a3c:	f7ff fe8f 	bl	800475e <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8004a40:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8004a44:	f7ff ffa8 	bl	8004998 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8004a48:	2004      	movs	r0, #4
 8004a4a:	f7ff ff89 	bl	8004960 <LL_AHB2_GRP1_EnableClock>
  /**SPI3 GPIO Configuration
  PC10   ------> SPI3_SCK
  PC11   ------> SPI3_MISO
  PC12   ------> SPI3_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 8004a4e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8004a52:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004a56:	2302      	movs	r3, #2
 8004a58:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004a62:	2300      	movs	r3, #0
 8004a64:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8004a6e:	2306      	movs	r3, #6
 8004a70:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a78:	4619      	mov	r1, r3
 8004a7a:	481f      	ldr	r0, [pc, #124]	@ (8004af8 <MX_SPI3_Init+0x128>)
 8004a7c:	f010 ff8b 	bl	8015996 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8004a80:	2300      	movs	r3, #0
 8004a82:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8004a86:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004a8a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8004a8e:	2307      	movs	r3, #7
 8004a90:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8004a94:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004a98:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8004a9c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004aa0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8004aa4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004aa8:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV128;
 8004aac:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 8004ab0:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8004aba:	2300      	movs	r3, #0
 8004abc:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
  SPI_InitStruct.CRCPoly = 0x7;
 8004ac0:	2307      	movs	r3, #7
 8004ac2:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 8004ac6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004aca:	4619      	mov	r1, r3
 8004acc:	480b      	ldr	r0, [pc, #44]	@ (8004afc <MX_SPI3_Init+0x12c>)
 8004ace:	f011 f823 	bl	8015b18 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 8004ad2:	2100      	movs	r1, #0
 8004ad4:	4809      	ldr	r0, [pc, #36]	@ (8004afc <MX_SPI3_Init+0x12c>)
 8004ad6:	f7ff ff1f 	bl	8004918 <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI3);
 8004ada:	4808      	ldr	r0, [pc, #32]	@ (8004afc <MX_SPI3_Init+0x12c>)
 8004adc:	f7ff ff2f 	bl	800493e <LL_SPI_DisableNSSPulseMgt>
  /* USER CODE BEGIN SPI3_Init 2 */
  	LL_SPI_Enable(SPI3);
 8004ae0:	4806      	ldr	r0, [pc, #24]	@ (8004afc <MX_SPI3_Init+0x12c>)
 8004ae2:	f7ff fef9 	bl	80048d8 <LL_SPI_Enable>

  	LL_SPI_StartMasterTransfer(SPI3);
 8004ae6:	4805      	ldr	r0, [pc, #20]	@ (8004afc <MX_SPI3_Init+0x12c>)
 8004ae8:	f7ff ff06 	bl	80048f8 <LL_SPI_StartMasterTransfer>
  /* USER CODE END SPI3_Init 2 */

}
 8004aec:	bf00      	nop
 8004aee:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop
 8004af8:	42020800 	.word	0x42020800
 8004afc:	40003c00 	.word	0x40003c00

08004b00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004b00:	b480      	push	{r7}
 8004b02:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004b04:	bf00      	nop
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr
	...

08004b10 <LL_EXTI_IsActiveFallingFlag_0_31>:
{
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->FPR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8004b18:	4b07      	ldr	r3, [pc, #28]	@ (8004b38 <LL_EXTI_IsActiveFallingFlag_0_31+0x28>)
 8004b1a:	691a      	ldr	r2, [r3, #16]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4013      	ands	r3, r2
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d101      	bne.n	8004b2a <LL_EXTI_IsActiveFallingFlag_0_31+0x1a>
 8004b26:	2301      	movs	r3, #1
 8004b28:	e000      	b.n	8004b2c <LL_EXTI_IsActiveFallingFlag_0_31+0x1c>
 8004b2a:	2300      	movs	r3, #0
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	370c      	adds	r7, #12
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr
 8004b38:	44022000 	.word	0x44022000

08004b3c <LL_EXTI_ClearFallingFlag_0_31>:
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->FPR1, ExtiLine);
 8004b44:	4a04      	ldr	r2, [pc, #16]	@ (8004b58 <LL_EXTI_ClearFallingFlag_0_31+0x1c>)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6113      	str	r3, [r2, #16]
}
 8004b4a:	bf00      	nop
 8004b4c:	370c      	adds	r7, #12
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop
 8004b58:	44022000 	.word	0x44022000

08004b5c <LL_EXTI_IsActiveRisingFlag_0_31>:
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->RPR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8004b64:	4b07      	ldr	r3, [pc, #28]	@ (8004b84 <LL_EXTI_IsActiveRisingFlag_0_31+0x28>)
 8004b66:	68da      	ldr	r2, [r3, #12]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d101      	bne.n	8004b76 <LL_EXTI_IsActiveRisingFlag_0_31+0x1a>
 8004b72:	2301      	movs	r3, #1
 8004b74:	e000      	b.n	8004b78 <LL_EXTI_IsActiveRisingFlag_0_31+0x1c>
 8004b76:	2300      	movs	r3, #0
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr
 8004b84:	44022000 	.word	0x44022000

08004b88 <LL_EXTI_ClearRisingFlag_0_31>:
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->RPR1, ExtiLine);
 8004b90:	4a04      	ldr	r2, [pc, #16]	@ (8004ba4 <LL_EXTI_ClearRisingFlag_0_31+0x1c>)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	60d3      	str	r3, [r2, #12]
}
 8004b96:	bf00      	nop
 8004b98:	370c      	adds	r7, #12
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr
 8004ba2:	bf00      	nop
 8004ba4:	44022000 	.word	0x44022000

08004ba8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004bac:	bf00      	nop
 8004bae:	e7fd      	b.n	8004bac <NMI_Handler+0x4>

08004bb0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b0ca      	sub	sp, #296	@ 0x128
 8004bb4:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN HardFault_IRQn 0 */
	uint32_t hfsr = SCB->HFSR;
 8004bb6:	4b1e      	ldr	r3, [pc, #120]	@ (8004c30 <HardFault_Handler+0x80>)
 8004bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bba:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
	uint32_t mmfsr = SCB->CFSR & 0xFF;       // Memory Management Fault Status
 8004bbe:	4b1c      	ldr	r3, [pc, #112]	@ (8004c30 <HardFault_Handler+0x80>)
 8004bc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
	uint32_t bfsr = (SCB->CFSR >> 8) & 0xFF; // Bus Fault Status
 8004bc8:	4b19      	ldr	r3, [pc, #100]	@ (8004c30 <HardFault_Handler+0x80>)
 8004bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bcc:	0a1b      	lsrs	r3, r3, #8
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
	uint32_t ufsr = (SCB->CFSR >> 16) & 0xFF; // Usage Fault Status
 8004bd4:	4b16      	ldr	r3, [pc, #88]	@ (8004c30 <HardFault_Handler+0x80>)
 8004bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bd8:	0c1b      	lsrs	r3, r3, #16
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108

	 char buffer[256] = {0};
 8004be0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004be4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004be8:	2200      	movs	r2, #0
 8004bea:	601a      	str	r2, [r3, #0]
 8004bec:	3304      	adds	r3, #4
 8004bee:	22fc      	movs	r2, #252	@ 0xfc
 8004bf0:	2100      	movs	r1, #0
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f01a f90c 	bl	801ee10 <memset>
	    int len = snprintf(buffer, sizeof(buffer),
 8004bf8:	1d38      	adds	r0, r7, #4
 8004bfa:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8004bfe:	9302      	str	r3, [sp, #8]
 8004c00:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c04:	9301      	str	r3, [sp, #4]
 8004c06:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004c0a:	9300      	str	r3, [sp, #0]
 8004c0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c10:	4a08      	ldr	r2, [pc, #32]	@ (8004c34 <HardFault_Handler+0x84>)
 8004c12:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004c16:	f019 ff6b 	bl	801eaf0 <sniprintf>
 8004c1a:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
	                       "HardFault detected!\nHFSR: 0x%08lX\nMMFSR: 0x%02lX\nBFSR: 0x%02lX\nUFSR: 0x%02lX\n\n\r",
	                       hfsr, mmfsr, bfsr, ufsr);
	    printc(MinDelay,buffer);
 8004c1e:	1d3b      	adds	r3, r7, #4
 8004c20:	4619      	mov	r1, r3
 8004c22:	200a      	movs	r0, #10
 8004c24:	f7fc fef8 	bl	8001a18 <printc>

	    HAL_NVIC_SystemReset();
 8004c28:	f002 fb83 	bl	8007332 <HAL_NVIC_SystemReset>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004c2c:	bf00      	nop
 8004c2e:	e7fd      	b.n	8004c2c <HardFault_Handler+0x7c>
 8004c30:	e000ed00 	.word	0xe000ed00
 8004c34:	0802293c 	.word	0x0802293c

08004c38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b0c2      	sub	sp, #264	@ 0x108
 8004c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	uint32_t mmfsr = SCB->CFSR & 0xFF; // Memory Management Fault Status
 8004c3e:	4b11      	ldr	r3, [pc, #68]	@ (8004c84 <MemManage_Handler+0x4c>)
 8004c40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

	    char buffer[256] = {0};
 8004c48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c4c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004c50:	2200      	movs	r2, #0
 8004c52:	601a      	str	r2, [r3, #0]
 8004c54:	3304      	adds	r3, #4
 8004c56:	22fc      	movs	r2, #252	@ 0xfc
 8004c58:	2100      	movs	r1, #0
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f01a f8d8 	bl	801ee10 <memset>
	    snprintf(buffer, sizeof(buffer),
 8004c60:	1d38      	adds	r0, r7, #4
 8004c62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c66:	4a08      	ldr	r2, [pc, #32]	@ (8004c88 <MemManage_Handler+0x50>)
 8004c68:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004c6c:	f019 ff40 	bl	801eaf0 <sniprintf>
	             "Memory Management Fault detected!\nMMFSR: 0x%02lX\n\n\r",
	             mmfsr);
	    printc(MinDelay, buffer);
 8004c70:	1d3b      	adds	r3, r7, #4
 8004c72:	4619      	mov	r1, r3
 8004c74:	200a      	movs	r0, #10
 8004c76:	f7fc fecf 	bl	8001a18 <printc>
	HAL_NVIC_SystemReset();
 8004c7a:	f002 fb5a 	bl	8007332 <HAL_NVIC_SystemReset>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004c7e:	bf00      	nop
 8004c80:	e7fd      	b.n	8004c7e <MemManage_Handler+0x46>
 8004c82:	bf00      	nop
 8004c84:	e000ed00 	.word	0xe000ed00
 8004c88:	0802298c 	.word	0x0802298c

08004c8c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b0c2      	sub	sp, #264	@ 0x108
 8004c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	 uint32_t bfsr = (SCB->CFSR >> 8) & 0xFF; // Bus Fault Status
 8004c92:	4b11      	ldr	r3, [pc, #68]	@ (8004cd8 <BusFault_Handler+0x4c>)
 8004c94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c96:	0a1b      	lsrs	r3, r3, #8
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

	    char buffer[256] = {0};
 8004c9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ca2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	601a      	str	r2, [r3, #0]
 8004caa:	3304      	adds	r3, #4
 8004cac:	22fc      	movs	r2, #252	@ 0xfc
 8004cae:	2100      	movs	r1, #0
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f01a f8ad 	bl	801ee10 <memset>
	    snprintf(buffer, sizeof(buffer),
 8004cb6:	1d38      	adds	r0, r7, #4
 8004cb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cbc:	4a07      	ldr	r2, [pc, #28]	@ (8004cdc <BusFault_Handler+0x50>)
 8004cbe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004cc2:	f019 ff15 	bl	801eaf0 <sniprintf>
	             "Bus Fault detected!\nBFSR: 0x%02lX\n\n\r",
	             bfsr);
	    printc(MinDelay, buffer);
 8004cc6:	1d3b      	adds	r3, r7, #4
 8004cc8:	4619      	mov	r1, r3
 8004cca:	200a      	movs	r0, #10
 8004ccc:	f7fc fea4 	bl	8001a18 <printc>
	HAL_NVIC_SystemReset();
 8004cd0:	f002 fb2f 	bl	8007332 <HAL_NVIC_SystemReset>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004cd4:	bf00      	nop
 8004cd6:	e7fd      	b.n	8004cd4 <BusFault_Handler+0x48>
 8004cd8:	e000ed00 	.word	0xe000ed00
 8004cdc:	080229c0 	.word	0x080229c0

08004ce0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b0c2      	sub	sp, #264	@ 0x108
 8004ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

    uint32_t ufsr = (SCB->CFSR >> 16) & 0xFF; // Usage Fault Status
 8004ce6:	4b11      	ldr	r3, [pc, #68]	@ (8004d2c <UsageFault_Handler+0x4c>)
 8004ce8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cea:	0c1b      	lsrs	r3, r3, #16
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

    char buffer[256] = {0};
 8004cf2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cf6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	601a      	str	r2, [r3, #0]
 8004cfe:	3304      	adds	r3, #4
 8004d00:	22fc      	movs	r2, #252	@ 0xfc
 8004d02:	2100      	movs	r1, #0
 8004d04:	4618      	mov	r0, r3
 8004d06:	f01a f883 	bl	801ee10 <memset>
    snprintf(buffer, sizeof(buffer),
 8004d0a:	1d38      	adds	r0, r7, #4
 8004d0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d10:	4a07      	ldr	r2, [pc, #28]	@ (8004d30 <UsageFault_Handler+0x50>)
 8004d12:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004d16:	f019 feeb 	bl	801eaf0 <sniprintf>
             "Usage Fault detected!\nUFSR: 0x%02lX\n\n\r",
             ufsr);
    printc(MinDelay, buffer);
 8004d1a:	1d3b      	adds	r3, r7, #4
 8004d1c:	4619      	mov	r1, r3
 8004d1e:	200a      	movs	r0, #10
 8004d20:	f7fc fe7a 	bl	8001a18 <printc>
	HAL_NVIC_SystemReset();
 8004d24:	f002 fb05 	bl	8007332 <HAL_NVIC_SystemReset>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004d28:	bf00      	nop
 8004d2a:	e7fd      	b.n	8004d28 <UsageFault_Handler+0x48>
 8004d2c:	e000ed00 	.word	0xe000ed00
 8004d30:	080229e8 	.word	0x080229e8

08004d34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004d34:	b480      	push	{r7}
 8004d36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004d38:	bf00      	nop
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr

08004d42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004d42:	b480      	push	{r7}
 8004d44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004d46:	bf00      	nop
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr

08004d50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004d50:	b480      	push	{r7}
 8004d52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004d54:	bf00      	nop
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr

08004d5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004d5e:	b580      	push	{r7, lr}
 8004d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004d62:	f000 fe11 	bl	8005988 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */
}
 8004d66:	bf00      	nop
 8004d68:	bd80      	pop	{r7, pc}
	...

08004d6c <RTC_IRQHandler>:

/**
  * @brief This function handles RTC non-secure interrupt.
  */
void RTC_IRQHandler(void)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8004d70:	4804      	ldr	r0, [pc, #16]	@ (8004d84 <RTC_IRQHandler+0x18>)
 8004d72:	f00d fa1f 	bl	80121b4 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */
	HAL_PWR_DisableSleepOnExit();
 8004d76:	f006 fe79 	bl	800ba6c <HAL_PWR_DisableSleepOnExit>
	HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8004d7a:	4802      	ldr	r0, [pc, #8]	@ (8004d84 <RTC_IRQHandler+0x18>)
 8004d7c:	f00d f9f0 	bl	8012160 <HAL_RTCEx_DeactivateWakeUpTimer>
  /* USER CODE END RTC_IRQn 1 */
}
 8004d80:	bf00      	nop
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	20013bbc 	.word	0x20013bbc

08004d88 <EXTI8_IRQHandler>:

/**
  * @brief This function handles EXTI Line8 interrupt.
  */
void EXTI8_IRQHandler(void)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI8_IRQn 0 */
	  onMessage();
 8004d8c:	f017 fcf4 	bl	801c778 <onMessage>
  /* USER CODE END EXTI8_IRQn 0 */
  if (LL_EXTI_IsActiveFallingFlag_0_31(LL_EXTI_LINE_8) != RESET)
 8004d90:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8004d94:	f7ff febc 	bl	8004b10 <LL_EXTI_IsActiveFallingFlag_0_31>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d003      	beq.n	8004da6 <EXTI8_IRQHandler+0x1e>
  {
    LL_EXTI_ClearFallingFlag_0_31(LL_EXTI_LINE_8);
 8004d9e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8004da2:	f7ff fecb 	bl	8004b3c <LL_EXTI_ClearFallingFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_8_FALLING */
  }
  /* USER CODE BEGIN EXTI8_IRQn 1 */

  /* USER CODE END EXTI8_IRQn 1 */
}
 8004da6:	bf00      	nop
 8004da8:	bd80      	pop	{r7, pc}

08004daa <EXTI15_IRQHandler>:

/**
  * @brief This function handles EXTI Line15 interrupt.
  */
void EXTI15_IRQHandler(void)
{
 8004daa:	b580      	push	{r7, lr}
 8004dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_IRQn 0 */

  /* USER CODE END EXTI15_IRQn 0 */
  if (LL_EXTI_IsActiveFallingFlag_0_31(LL_EXTI_LINE_15) != RESET)
 8004dae:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8004db2:	f7ff fead 	bl	8004b10 <LL_EXTI_IsActiveFallingFlag_0_31>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d003      	beq.n	8004dc4 <EXTI15_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFallingFlag_0_31(LL_EXTI_LINE_15);
 8004dbc:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8004dc0:	f7ff febc 	bl	8004b3c <LL_EXTI_ClearFallingFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_15_FALLING */

    /* USER CODE END LL_EXTI_LINE_15_FALLING */
  }
  /* USER CODE BEGIN EXTI15_IRQn 1 */
  onTemperCallback();
 8004dc4:	f7fd fd90 	bl	80028e8 <onTemperCallback>
  /* USER CODE END EXTI15_IRQn 1 */
}
 8004dc8:	bf00      	nop
 8004dca:	bd80      	pop	{r7, pc}

08004dcc <GPDMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 4 global interrupt.
  */
void GPDMA1_Channel4_IRQHandler(void)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel4_IRQn 0 */

  /* USER CODE END GPDMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel4);
 8004dd0:	4802      	ldr	r0, [pc, #8]	@ (8004ddc <GPDMA1_Channel4_IRQHandler+0x10>)
 8004dd2:	f004 fa07 	bl	80091e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel4_IRQn 1 */

  /* USER CODE END GPDMA1_Channel4_IRQn 1 */
}
 8004dd6:	bf00      	nop
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	bf00      	nop
 8004ddc:	20013e38 	.word	0x20013e38

08004de0 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */
sleepcount =0;
 8004de4:	4b04      	ldr	r3, [pc, #16]	@ (8004df8 <FDCAN1_IT0_IRQHandler+0x18>)
 8004de6:	2200      	movs	r2, #0
 8004de8:	601a      	str	r2, [r3, #0]
  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8004dea:	4804      	ldr	r0, [pc, #16]	@ (8004dfc <FDCAN1_IT0_IRQHandler+0x1c>)
 8004dec:	f005 ff08 	bl	800ac00 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */
	HAL_PWR_DisableSleepOnExit();
 8004df0:	f006 fe3c 	bl	800ba6c <HAL_PWR_DisableSleepOnExit>
  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8004df4:	bf00      	nop
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	20000f5c 	.word	0x20000f5c
 8004dfc:	20013adc 	.word	0x20013adc

08004e00 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004e04:	4802      	ldr	r0, [pc, #8]	@ (8004e10 <TIM6_IRQHandler+0x10>)
 8004e06:	f00d fb2d 	bl	8012464 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8004e0a:	bf00      	nop
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	20013bf4 	.word	0x20013bf4

08004e14 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004e18:	4803      	ldr	r0, [pc, #12]	@ (8004e28 <USART1_IRQHandler+0x14>)
 8004e1a:	f00e f8f3 	bl	8013004 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  enableIdle();
 8004e1e:	f7fc fdcb 	bl	80019b8 <enableIdle>

  /* USER CODE END USART1_IRQn 1 */
}
 8004e22:	bf00      	nop
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	20013cd4 	.word	0x20013cd4

08004e2c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8004e30:	4802      	ldr	r0, [pc, #8]	@ (8004e3c <UART5_IRQHandler+0x10>)
 8004e32:	f00e f8e7 	bl	8013004 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8004e36:	bf00      	nop
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	20013c40 	.word	0x20013c40

08004e40 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8004e44:	4802      	ldr	r0, [pc, #8]	@ (8004e50 <USART6_IRQHandler+0x10>)
 8004e46:	f00e f8dd 	bl	8013004 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */
  //openPrintUartIdle();
  /* USER CODE END USART6_IRQn 1 */
}
 8004e4a:	bf00      	nop
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	20013d68 	.word	0x20013d68

08004e54 <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8004e58:	4802      	ldr	r0, [pc, #8]	@ (8004e64 <FDCAN2_IT0_IRQHandler+0x10>)
 8004e5a:	f005 fed1 	bl	800ac00 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 8004e5e:	bf00      	nop
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	bf00      	nop
 8004e64:	20013b40 	.word	0x20013b40

08004e68 <EXTI0_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI0_IRQHandler(void) {
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	af00      	add	r7, sp, #0
	printc(MinDelay, "WokeBY 1");
 8004e6c:	490d      	ldr	r1, [pc, #52]	@ (8004ea4 <EXTI0_IRQHandler+0x3c>)
 8004e6e:	200a      	movs	r0, #10
 8004e70:	f7fc fdd2 	bl	8001a18 <printc>
	if (LL_EXTI_IsActiveRisingFlag_0_31(LL_EXTI_LINE_0) != RESET) {
 8004e74:	2001      	movs	r0, #1
 8004e76:	f7ff fe71 	bl	8004b5c <LL_EXTI_IsActiveRisingFlag_0_31>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d00e      	beq.n	8004e9e <EXTI0_IRQHandler+0x36>
		// Clear the EXTI line 0 interrupt flag
		LL_EXTI_ClearRisingFlag_0_31(LL_EXTI_LINE_0);
 8004e80:	2001      	movs	r0, #1
 8004e82:	f7ff fe81 	bl	8004b88 <LL_EXTI_ClearRisingFlag_0_31>

		FLAG_IGN =1;
 8004e86:	4b08      	ldr	r3, [pc, #32]	@ (8004ea8 <EXTI0_IRQHandler+0x40>)
 8004e88:	2201      	movs	r2, #1
 8004e8a:	601a      	str	r2, [r3, #0]
		// Disable sleep on exit
		HAL_PWR_DisableSleepOnExit();
 8004e8c:	f006 fdee 	bl	800ba6c <HAL_PWR_DisableSleepOnExit>

		// Disable EXTI line 0 interrupt to avoid re-entering the interrupt handler
		HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8004e90:	200b      	movs	r0, #11
 8004e92:	f002 fa40 	bl	8007316 <HAL_NVIC_DisableIRQ>

		printc(MinDelay, "Wakeby EXTI");
 8004e96:	4905      	ldr	r1, [pc, #20]	@ (8004eac <EXTI0_IRQHandler+0x44>)
 8004e98:	200a      	movs	r0, #10
 8004e9a:	f7fc fdbd 	bl	8001a18 <printc>

		// Perform wakeup routine
//        WAKEUP();
	}
}
 8004e9e:	bf00      	nop
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	bf00      	nop
 8004ea4:	08022a10 	.word	0x08022a10
 8004ea8:	20012fb8 	.word	0x20012fb8
 8004eac:	08022a1c 	.word	0x08022a1c

08004eb0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	af00      	add	r7, sp, #0
  return 1;
 8004eb4:	2301      	movs	r3, #1
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr

08004ec0 <_kill>:

int _kill(int pid, int sig)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b082      	sub	sp, #8
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004eca:	f01a f8d1 	bl	801f070 <__errno>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2216      	movs	r2, #22
 8004ed2:	601a      	str	r2, [r3, #0]
  return -1;
 8004ed4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3708      	adds	r7, #8
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}

08004ee0 <_exit>:

void _exit (int status)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b082      	sub	sp, #8
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004ee8:	f04f 31ff 	mov.w	r1, #4294967295
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f7ff ffe7 	bl	8004ec0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004ef2:	bf00      	nop
 8004ef4:	e7fd      	b.n	8004ef2 <_exit+0x12>

08004ef6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004ef6:	b580      	push	{r7, lr}
 8004ef8:	b086      	sub	sp, #24
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	60f8      	str	r0, [r7, #12]
 8004efe:	60b9      	str	r1, [r7, #8]
 8004f00:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f02:	2300      	movs	r3, #0
 8004f04:	617b      	str	r3, [r7, #20]
 8004f06:	e00a      	b.n	8004f1e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004f08:	f3af 8000 	nop.w
 8004f0c:	4601      	mov	r1, r0
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	1c5a      	adds	r2, r3, #1
 8004f12:	60ba      	str	r2, [r7, #8]
 8004f14:	b2ca      	uxtb	r2, r1
 8004f16:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	3301      	adds	r3, #1
 8004f1c:	617b      	str	r3, [r7, #20]
 8004f1e:	697a      	ldr	r2, [r7, #20]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	429a      	cmp	r2, r3
 8004f24:	dbf0      	blt.n	8004f08 <_read+0x12>
  }

  return len;
 8004f26:	687b      	ldr	r3, [r7, #4]
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3718      	adds	r7, #24
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}

08004f30 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b086      	sub	sp, #24
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	60b9      	str	r1, [r7, #8]
 8004f3a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	617b      	str	r3, [r7, #20]
 8004f40:	e009      	b.n	8004f56 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	1c5a      	adds	r2, r3, #1
 8004f46:	60ba      	str	r2, [r7, #8]
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	3301      	adds	r3, #1
 8004f54:	617b      	str	r3, [r7, #20]
 8004f56:	697a      	ldr	r2, [r7, #20]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	dbf1      	blt.n	8004f42 <_write+0x12>
  }
  return len;
 8004f5e:	687b      	ldr	r3, [r7, #4]
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3718      	adds	r7, #24
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <_close>:

int _close(int file)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004f70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	370c      	adds	r7, #12
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004f90:	605a      	str	r2, [r3, #4]
  return 0;
 8004f92:	2300      	movs	r3, #0
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	370c      	adds	r7, #12
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr

08004fa0 <_isatty>:

int _isatty(int file)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b083      	sub	sp, #12
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004fa8:	2301      	movs	r3, #1
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	370c      	adds	r7, #12
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr

08004fb6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004fb6:	b480      	push	{r7}
 8004fb8:	b085      	sub	sp, #20
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	60f8      	str	r0, [r7, #12]
 8004fbe:	60b9      	str	r1, [r7, #8]
 8004fc0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004fc2:	2300      	movs	r3, #0
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3714      	adds	r7, #20
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b086      	sub	sp, #24
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004fd8:	4a14      	ldr	r2, [pc, #80]	@ (800502c <_sbrk+0x5c>)
 8004fda:	4b15      	ldr	r3, [pc, #84]	@ (8005030 <_sbrk+0x60>)
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004fe4:	4b13      	ldr	r3, [pc, #76]	@ (8005034 <_sbrk+0x64>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d102      	bne.n	8004ff2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004fec:	4b11      	ldr	r3, [pc, #68]	@ (8005034 <_sbrk+0x64>)
 8004fee:	4a12      	ldr	r2, [pc, #72]	@ (8005038 <_sbrk+0x68>)
 8004ff0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004ff2:	4b10      	ldr	r3, [pc, #64]	@ (8005034 <_sbrk+0x64>)
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4413      	add	r3, r2
 8004ffa:	693a      	ldr	r2, [r7, #16]
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d207      	bcs.n	8005010 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005000:	f01a f836 	bl	801f070 <__errno>
 8005004:	4603      	mov	r3, r0
 8005006:	220c      	movs	r2, #12
 8005008:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800500a:	f04f 33ff 	mov.w	r3, #4294967295
 800500e:	e009      	b.n	8005024 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005010:	4b08      	ldr	r3, [pc, #32]	@ (8005034 <_sbrk+0x64>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005016:	4b07      	ldr	r3, [pc, #28]	@ (8005034 <_sbrk+0x64>)
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4413      	add	r3, r2
 800501e:	4a05      	ldr	r2, [pc, #20]	@ (8005034 <_sbrk+0x64>)
 8005020:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005022:	68fb      	ldr	r3, [r7, #12]
}
 8005024:	4618      	mov	r0, r3
 8005026:	3718      	adds	r7, #24
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}
 800502c:	200a0000 	.word	0x200a0000
 8005030:	00000400 	.word	0x00000400
 8005034:	20013bec 	.word	0x20013bec
 8005038:	20015868 	.word	0x20015868

0800503c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8005042:	4b36      	ldr	r3, [pc, #216]	@ (800511c <SystemInit+0xe0>)
 8005044:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005048:	4a34      	ldr	r2, [pc, #208]	@ (800511c <SystemInit+0xe0>)
 800504a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800504e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8005052:	4b33      	ldr	r3, [pc, #204]	@ (8005120 <SystemInit+0xe4>)
 8005054:	2201      	movs	r2, #1
 8005056:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8005058:	4b31      	ldr	r3, [pc, #196]	@ (8005120 <SystemInit+0xe4>)
 800505a:	2200      	movs	r2, #0
 800505c:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 800505e:	4b30      	ldr	r3, [pc, #192]	@ (8005120 <SystemInit+0xe4>)
 8005060:	2200      	movs	r2, #0
 8005062:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8005064:	4b2e      	ldr	r3, [pc, #184]	@ (8005120 <SystemInit+0xe4>)
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	492d      	ldr	r1, [pc, #180]	@ (8005120 <SystemInit+0xe4>)
 800506a:	4b2e      	ldr	r3, [pc, #184]	@ (8005124 <SystemInit+0xe8>)
 800506c:	4013      	ands	r3, r2
 800506e:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8005070:	4b2b      	ldr	r3, [pc, #172]	@ (8005120 <SystemInit+0xe4>)
 8005072:	2200      	movs	r2, #0
 8005074:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8005076:	4b2a      	ldr	r3, [pc, #168]	@ (8005120 <SystemInit+0xe4>)
 8005078:	2200      	movs	r2, #0
 800507a:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 800507c:	4b28      	ldr	r3, [pc, #160]	@ (8005120 <SystemInit+0xe4>)
 800507e:	2200      	movs	r2, #0
 8005080:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8005082:	4b27      	ldr	r3, [pc, #156]	@ (8005120 <SystemInit+0xe4>)
 8005084:	4a28      	ldr	r2, [pc, #160]	@ (8005128 <SystemInit+0xec>)
 8005086:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8005088:	4b25      	ldr	r3, [pc, #148]	@ (8005120 <SystemInit+0xe4>)
 800508a:	2200      	movs	r2, #0
 800508c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 800508e:	4b24      	ldr	r3, [pc, #144]	@ (8005120 <SystemInit+0xe4>)
 8005090:	4a25      	ldr	r2, [pc, #148]	@ (8005128 <SystemInit+0xec>)
 8005092:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8005094:	4b22      	ldr	r3, [pc, #136]	@ (8005120 <SystemInit+0xe4>)
 8005096:	2200      	movs	r2, #0
 8005098:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 800509a:	4b21      	ldr	r3, [pc, #132]	@ (8005120 <SystemInit+0xe4>)
 800509c:	4a22      	ldr	r2, [pc, #136]	@ (8005128 <SystemInit+0xec>)
 800509e:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 80050a0:	4b1f      	ldr	r3, [pc, #124]	@ (8005120 <SystemInit+0xe4>)
 80050a2:	2200      	movs	r2, #0
 80050a4:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80050a6:	4b1e      	ldr	r3, [pc, #120]	@ (8005120 <SystemInit+0xe4>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a1d      	ldr	r2, [pc, #116]	@ (8005120 <SystemInit+0xe4>)
 80050ac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80050b0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80050b2:	4b1b      	ldr	r3, [pc, #108]	@ (8005120 <SystemInit+0xe4>)
 80050b4:	2200      	movs	r2, #0
 80050b6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET ; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VT_OFF; /* Vector Table Relocation in Internal FLASH */
 80050b8:	4b1c      	ldr	r3, [pc, #112]	@ (800512c <SystemInit+0xf0>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a17      	ldr	r2, [pc, #92]	@ (800511c <SystemInit+0xe0>)
 80050be:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80050c2:	6093      	str	r3, [r2, #8]
#endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 80050c4:	4b1a      	ldr	r3, [pc, #104]	@ (8005130 <SystemInit+0xf4>)
 80050c6:	699b      	ldr	r3, [r3, #24]
 80050c8:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 80050cc:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 80050d4:	d003      	beq.n	80050de <SystemInit+0xa2>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80050dc:	d117      	bne.n	800510e <SystemInit+0xd2>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 80050de:	4b14      	ldr	r3, [pc, #80]	@ (8005130 <SystemInit+0xf4>)
 80050e0:	69db      	ldr	r3, [r3, #28]
 80050e2:	f003 0301 	and.w	r3, r3, #1
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d005      	beq.n	80050f6 <SystemInit+0xba>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 80050ea:	4b11      	ldr	r3, [pc, #68]	@ (8005130 <SystemInit+0xf4>)
 80050ec:	4a11      	ldr	r2, [pc, #68]	@ (8005134 <SystemInit+0xf8>)
 80050ee:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 80050f0:	4b0f      	ldr	r3, [pc, #60]	@ (8005130 <SystemInit+0xf4>)
 80050f2:	4a11      	ldr	r2, [pc, #68]	@ (8005138 <SystemInit+0xfc>)
 80050f4:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 80050f6:	4b0e      	ldr	r3, [pc, #56]	@ (8005130 <SystemInit+0xf4>)
 80050f8:	69db      	ldr	r3, [r3, #28]
 80050fa:	4a0d      	ldr	r2, [pc, #52]	@ (8005130 <SystemInit+0xf4>)
 80050fc:	f043 0302 	orr.w	r3, r3, #2
 8005100:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8005102:	4b0b      	ldr	r3, [pc, #44]	@ (8005130 <SystemInit+0xf4>)
 8005104:	69db      	ldr	r3, [r3, #28]
 8005106:	4a0a      	ldr	r2, [pc, #40]	@ (8005130 <SystemInit+0xf4>)
 8005108:	f043 0301 	orr.w	r3, r3, #1
 800510c:	61d3      	str	r3, [r2, #28]
  }
}
 800510e:	bf00      	nop
 8005110:	370c      	adds	r7, #12
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr
 800511a:	bf00      	nop
 800511c:	e000ed00 	.word	0xe000ed00
 8005120:	44020c00 	.word	0x44020c00
 8005124:	eae2eae3 	.word	0xeae2eae3
 8005128:	01010280 	.word	0x01010280
 800512c:	20013bf0 	.word	0x20013bf0
 8005130:	40022000 	.word	0x40022000
 8005134:	08192a3b 	.word	0x08192a3b
 8005138:	4c5d6e7f 	.word	0x4c5d6e7f

0800513c <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b084      	sub	sp, #16
 8005140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005142:	1d3b      	adds	r3, r7, #4
 8005144:	2200      	movs	r2, #0
 8005146:	601a      	str	r2, [r3, #0]
 8005148:	605a      	str	r2, [r3, #4]
 800514a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800514c:	4b14      	ldr	r3, [pc, #80]	@ (80051a0 <MX_TIM6_Init+0x64>)
 800514e:	4a15      	ldr	r2, [pc, #84]	@ (80051a4 <MX_TIM6_Init+0x68>)
 8005150:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7;
 8005152:	4b13      	ldr	r3, [pc, #76]	@ (80051a0 <MX_TIM6_Init+0x64>)
 8005154:	2207      	movs	r2, #7
 8005156:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005158:	4b11      	ldr	r3, [pc, #68]	@ (80051a0 <MX_TIM6_Init+0x64>)
 800515a:	2200      	movs	r2, #0
 800515c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 49999;
 800515e:	4b10      	ldr	r3, [pc, #64]	@ (80051a0 <MX_TIM6_Init+0x64>)
 8005160:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8005164:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005166:	4b0e      	ldr	r3, [pc, #56]	@ (80051a0 <MX_TIM6_Init+0x64>)
 8005168:	2280      	movs	r2, #128	@ 0x80
 800516a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800516c:	480c      	ldr	r0, [pc, #48]	@ (80051a0 <MX_TIM6_Init+0x64>)
 800516e:	f00d f873 	bl	8012258 <HAL_TIM_Base_Init>
 8005172:	4603      	mov	r3, r0
 8005174:	2b00      	cmp	r3, #0
 8005176:	d001      	beq.n	800517c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8005178:	f7ff faf1 	bl	800475e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800517c:	2300      	movs	r3, #0
 800517e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005180:	2300      	movs	r3, #0
 8005182:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8005184:	1d3b      	adds	r3, r7, #4
 8005186:	4619      	mov	r1, r3
 8005188:	4805      	ldr	r0, [pc, #20]	@ (80051a0 <MX_TIM6_Init+0x64>)
 800518a:	f00d fc0d 	bl	80129a8 <HAL_TIMEx_MasterConfigSynchronization>
 800518e:	4603      	mov	r3, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d001      	beq.n	8005198 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8005194:	f7ff fae3 	bl	800475e <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8005198:	bf00      	nop
 800519a:	3710      	adds	r7, #16
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	20013bf4 	.word	0x20013bf4
 80051a4:	40001000 	.word	0x40001000

080051a8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b084      	sub	sp, #16
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a0e      	ldr	r2, [pc, #56]	@ (80051f0 <HAL_TIM_Base_MspInit+0x48>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d116      	bne.n	80051e8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80051ba:	4b0e      	ldr	r3, [pc, #56]	@ (80051f4 <HAL_TIM_Base_MspInit+0x4c>)
 80051bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80051c0:	4a0c      	ldr	r2, [pc, #48]	@ (80051f4 <HAL_TIM_Base_MspInit+0x4c>)
 80051c2:	f043 0310 	orr.w	r3, r3, #16
 80051c6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80051ca:	4b0a      	ldr	r3, [pc, #40]	@ (80051f4 <HAL_TIM_Base_MspInit+0x4c>)
 80051cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80051d0:	f003 0310 	and.w	r3, r3, #16
 80051d4:	60fb      	str	r3, [r7, #12]
 80051d6:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 80051d8:	2200      	movs	r2, #0
 80051da:	2100      	movs	r1, #0
 80051dc:	2031      	movs	r0, #49	@ 0x31
 80051de:	f002 f872 	bl	80072c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80051e2:	2031      	movs	r0, #49	@ 0x31
 80051e4:	f002 f889 	bl	80072fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80051e8:	bf00      	nop
 80051ea:	3710      	adds	r7, #16
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	40001000 	.word	0x40001000
 80051f4:	44020c00 	.word	0x44020c00

080051f8 <MX_UART5_Init>:
DMA_QListTypeDef List_GPDMA1_Channel4;
DMA_HandleTypeDef handle_GPDMA1_Channel4;

/* UART5 init function */
void MX_UART5_Init(void)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80051fc:	4b22      	ldr	r3, [pc, #136]	@ (8005288 <MX_UART5_Init+0x90>)
 80051fe:	4a23      	ldr	r2, [pc, #140]	@ (800528c <MX_UART5_Init+0x94>)
 8005200:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8005202:	4b21      	ldr	r3, [pc, #132]	@ (8005288 <MX_UART5_Init+0x90>)
 8005204:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005208:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800520a:	4b1f      	ldr	r3, [pc, #124]	@ (8005288 <MX_UART5_Init+0x90>)
 800520c:	2200      	movs	r2, #0
 800520e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8005210:	4b1d      	ldr	r3, [pc, #116]	@ (8005288 <MX_UART5_Init+0x90>)
 8005212:	2200      	movs	r2, #0
 8005214:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8005216:	4b1c      	ldr	r3, [pc, #112]	@ (8005288 <MX_UART5_Init+0x90>)
 8005218:	2200      	movs	r2, #0
 800521a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800521c:	4b1a      	ldr	r3, [pc, #104]	@ (8005288 <MX_UART5_Init+0x90>)
 800521e:	220c      	movs	r2, #12
 8005220:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005222:	4b19      	ldr	r3, [pc, #100]	@ (8005288 <MX_UART5_Init+0x90>)
 8005224:	2200      	movs	r2, #0
 8005226:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8005228:	4b17      	ldr	r3, [pc, #92]	@ (8005288 <MX_UART5_Init+0x90>)
 800522a:	2200      	movs	r2, #0
 800522c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800522e:	4b16      	ldr	r3, [pc, #88]	@ (8005288 <MX_UART5_Init+0x90>)
 8005230:	2200      	movs	r2, #0
 8005232:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005234:	4b14      	ldr	r3, [pc, #80]	@ (8005288 <MX_UART5_Init+0x90>)
 8005236:	2200      	movs	r2, #0
 8005238:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800523a:	4b13      	ldr	r3, [pc, #76]	@ (8005288 <MX_UART5_Init+0x90>)
 800523c:	2200      	movs	r2, #0
 800523e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8005240:	4811      	ldr	r0, [pc, #68]	@ (8005288 <MX_UART5_Init+0x90>)
 8005242:	f00d fcc7 	bl	8012bd4 <HAL_UART_Init>
 8005246:	4603      	mov	r3, r0
 8005248:	2b00      	cmp	r3, #0
 800524a:	d001      	beq.n	8005250 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 800524c:	f7ff fa87 	bl	800475e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005250:	2100      	movs	r1, #0
 8005252:	480d      	ldr	r0, [pc, #52]	@ (8005288 <MX_UART5_Init+0x90>)
 8005254:	f00f ff0a 	bl	801506c <HAL_UARTEx_SetTxFifoThreshold>
 8005258:	4603      	mov	r3, r0
 800525a:	2b00      	cmp	r3, #0
 800525c:	d001      	beq.n	8005262 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 800525e:	f7ff fa7e 	bl	800475e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005262:	2100      	movs	r1, #0
 8005264:	4808      	ldr	r0, [pc, #32]	@ (8005288 <MX_UART5_Init+0x90>)
 8005266:	f00f ff3f 	bl	80150e8 <HAL_UARTEx_SetRxFifoThreshold>
 800526a:	4603      	mov	r3, r0
 800526c:	2b00      	cmp	r3, #0
 800526e:	d001      	beq.n	8005274 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8005270:	f7ff fa75 	bl	800475e <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart5) != HAL_OK)
 8005274:	4804      	ldr	r0, [pc, #16]	@ (8005288 <MX_UART5_Init+0x90>)
 8005276:	f00f fe85 	bl	8014f84 <HAL_UARTEx_EnableFifoMode>
 800527a:	4603      	mov	r3, r0
 800527c:	2b00      	cmp	r3, #0
 800527e:	d001      	beq.n	8005284 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8005280:	f7ff fa6d 	bl	800475e <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8005284:	bf00      	nop
 8005286:	bd80      	pop	{r7, pc}
 8005288:	20013c40 	.word	0x20013c40
 800528c:	40005000 	.word	0x40005000

08005290 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005294:	4b22      	ldr	r3, [pc, #136]	@ (8005320 <MX_USART1_UART_Init+0x90>)
 8005296:	4a23      	ldr	r2, [pc, #140]	@ (8005324 <MX_USART1_UART_Init+0x94>)
 8005298:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800529a:	4b21      	ldr	r3, [pc, #132]	@ (8005320 <MX_USART1_UART_Init+0x90>)
 800529c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80052a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80052a2:	4b1f      	ldr	r3, [pc, #124]	@ (8005320 <MX_USART1_UART_Init+0x90>)
 80052a4:	2200      	movs	r2, #0
 80052a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80052a8:	4b1d      	ldr	r3, [pc, #116]	@ (8005320 <MX_USART1_UART_Init+0x90>)
 80052aa:	2200      	movs	r2, #0
 80052ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80052ae:	4b1c      	ldr	r3, [pc, #112]	@ (8005320 <MX_USART1_UART_Init+0x90>)
 80052b0:	2200      	movs	r2, #0
 80052b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80052b4:	4b1a      	ldr	r3, [pc, #104]	@ (8005320 <MX_USART1_UART_Init+0x90>)
 80052b6:	220c      	movs	r2, #12
 80052b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80052ba:	4b19      	ldr	r3, [pc, #100]	@ (8005320 <MX_USART1_UART_Init+0x90>)
 80052bc:	2200      	movs	r2, #0
 80052be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80052c0:	4b17      	ldr	r3, [pc, #92]	@ (8005320 <MX_USART1_UART_Init+0x90>)
 80052c2:	2200      	movs	r2, #0
 80052c4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80052c6:	4b16      	ldr	r3, [pc, #88]	@ (8005320 <MX_USART1_UART_Init+0x90>)
 80052c8:	2200      	movs	r2, #0
 80052ca:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80052cc:	4b14      	ldr	r3, [pc, #80]	@ (8005320 <MX_USART1_UART_Init+0x90>)
 80052ce:	2200      	movs	r2, #0
 80052d0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80052d2:	4b13      	ldr	r3, [pc, #76]	@ (8005320 <MX_USART1_UART_Init+0x90>)
 80052d4:	2200      	movs	r2, #0
 80052d6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80052d8:	4811      	ldr	r0, [pc, #68]	@ (8005320 <MX_USART1_UART_Init+0x90>)
 80052da:	f00d fc7b 	bl	8012bd4 <HAL_UART_Init>
 80052de:	4603      	mov	r3, r0
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d001      	beq.n	80052e8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80052e4:	f7ff fa3b 	bl	800475e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80052e8:	2100      	movs	r1, #0
 80052ea:	480d      	ldr	r0, [pc, #52]	@ (8005320 <MX_USART1_UART_Init+0x90>)
 80052ec:	f00f febe 	bl	801506c <HAL_UARTEx_SetTxFifoThreshold>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d001      	beq.n	80052fa <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80052f6:	f7ff fa32 	bl	800475e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80052fa:	2100      	movs	r1, #0
 80052fc:	4808      	ldr	r0, [pc, #32]	@ (8005320 <MX_USART1_UART_Init+0x90>)
 80052fe:	f00f fef3 	bl	80150e8 <HAL_UARTEx_SetRxFifoThreshold>
 8005302:	4603      	mov	r3, r0
 8005304:	2b00      	cmp	r3, #0
 8005306:	d001      	beq.n	800530c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8005308:	f7ff fa29 	bl	800475e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800530c:	4804      	ldr	r0, [pc, #16]	@ (8005320 <MX_USART1_UART_Init+0x90>)
 800530e:	f00f fe74 	bl	8014ffa <HAL_UARTEx_DisableFifoMode>
 8005312:	4603      	mov	r3, r0
 8005314:	2b00      	cmp	r3, #0
 8005316:	d001      	beq.n	800531c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8005318:	f7ff fa21 	bl	800475e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800531c:	bf00      	nop
 800531e:	bd80      	pop	{r7, pc}
 8005320:	20013cd4 	.word	0x20013cd4
 8005324:	40013800 	.word	0x40013800

08005328 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800532c:	4b23      	ldr	r3, [pc, #140]	@ (80053bc <MX_USART6_UART_Init+0x94>)
 800532e:	4a24      	ldr	r2, [pc, #144]	@ (80053c0 <MX_USART6_UART_Init+0x98>)
 8005330:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8005332:	4b22      	ldr	r3, [pc, #136]	@ (80053bc <MX_USART6_UART_Init+0x94>)
 8005334:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005338:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800533a:	4b20      	ldr	r3, [pc, #128]	@ (80053bc <MX_USART6_UART_Init+0x94>)
 800533c:	2200      	movs	r2, #0
 800533e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8005340:	4b1e      	ldr	r3, [pc, #120]	@ (80053bc <MX_USART6_UART_Init+0x94>)
 8005342:	2200      	movs	r2, #0
 8005344:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8005346:	4b1d      	ldr	r3, [pc, #116]	@ (80053bc <MX_USART6_UART_Init+0x94>)
 8005348:	2200      	movs	r2, #0
 800534a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800534c:	4b1b      	ldr	r3, [pc, #108]	@ (80053bc <MX_USART6_UART_Init+0x94>)
 800534e:	220c      	movs	r2, #12
 8005350:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005352:	4b1a      	ldr	r3, [pc, #104]	@ (80053bc <MX_USART6_UART_Init+0x94>)
 8005354:	2200      	movs	r2, #0
 8005356:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8005358:	4b18      	ldr	r3, [pc, #96]	@ (80053bc <MX_USART6_UART_Init+0x94>)
 800535a:	2200      	movs	r2, #0
 800535c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800535e:	4b17      	ldr	r3, [pc, #92]	@ (80053bc <MX_USART6_UART_Init+0x94>)
 8005360:	2200      	movs	r2, #0
 8005362:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005364:	4b15      	ldr	r3, [pc, #84]	@ (80053bc <MX_USART6_UART_Init+0x94>)
 8005366:	2200      	movs	r2, #0
 8005368:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800536a:	4b14      	ldr	r3, [pc, #80]	@ (80053bc <MX_USART6_UART_Init+0x94>)
 800536c:	2200      	movs	r2, #0
 800536e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8005370:	4812      	ldr	r0, [pc, #72]	@ (80053bc <MX_USART6_UART_Init+0x94>)
 8005372:	f00d fc2f 	bl	8012bd4 <HAL_UART_Init>
 8005376:	4603      	mov	r3, r0
 8005378:	2b00      	cmp	r3, #0
 800537a:	d001      	beq.n	8005380 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 800537c:	f7ff f9ef 	bl	800475e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005380:	2100      	movs	r1, #0
 8005382:	480e      	ldr	r0, [pc, #56]	@ (80053bc <MX_USART6_UART_Init+0x94>)
 8005384:	f00f fe72 	bl	801506c <HAL_UARTEx_SetTxFifoThreshold>
 8005388:	4603      	mov	r3, r0
 800538a:	2b00      	cmp	r3, #0
 800538c:	d001      	beq.n	8005392 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 800538e:	f7ff f9e6 	bl	800475e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8005392:	f04f 6120 	mov.w	r1, #167772160	@ 0xa000000
 8005396:	4809      	ldr	r0, [pc, #36]	@ (80053bc <MX_USART6_UART_Init+0x94>)
 8005398:	f00f fea6 	bl	80150e8 <HAL_UARTEx_SetRxFifoThreshold>
 800539c:	4603      	mov	r3, r0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d001      	beq.n	80053a6 <MX_USART6_UART_Init+0x7e>
  {
    Error_Handler();
 80053a2:	f7ff f9dc 	bl	800475e <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart6) != HAL_OK)
 80053a6:	4805      	ldr	r0, [pc, #20]	@ (80053bc <MX_USART6_UART_Init+0x94>)
 80053a8:	f00f fdec 	bl	8014f84 <HAL_UARTEx_EnableFifoMode>
 80053ac:	4603      	mov	r3, r0
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d001      	beq.n	80053b6 <MX_USART6_UART_Init+0x8e>
  {
    Error_Handler();
 80053b2:	f7ff f9d4 	bl	800475e <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80053b6:	bf00      	nop
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	bf00      	nop
 80053bc:	20013d68 	.word	0x20013d68
 80053c0:	40006400 	.word	0x40006400

080053c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b0ea      	sub	sp, #424	@ 0x1a8
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 80053ce:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 80053d2:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053d4:	f507 73ca 	add.w	r3, r7, #404	@ 0x194
 80053d8:	2200      	movs	r2, #0
 80053da:	601a      	str	r2, [r3, #0]
 80053dc:	605a      	str	r2, [r3, #4]
 80053de:	609a      	str	r2, [r3, #8]
 80053e0:	60da      	str	r2, [r3, #12]
 80053e2:	611a      	str	r2, [r3, #16]
  DMA_NodeConfTypeDef NodeConfig= {0};
 80053e4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80053e8:	226c      	movs	r2, #108	@ 0x6c
 80053ea:	2100      	movs	r1, #0
 80053ec:	4618      	mov	r0, r3
 80053ee:	f019 fd0f 	bl	801ee10 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80053f2:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 80053f6:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80053fa:	4618      	mov	r0, r3
 80053fc:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8005400:	461a      	mov	r2, r3
 8005402:	2100      	movs	r1, #0
 8005404:	f019 fd04 	bl	801ee10 <memset>
  if(uartHandle->Instance==UART5)
 8005408:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 800540c:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4ab2      	ldr	r2, [pc, #712]	@ (80056e0 <HAL_UART_MspInit+0x31c>)
 8005416:	4293      	cmp	r3, r2
 8005418:	f040 80f1 	bne.w	80055fe <HAL_UART_MspInit+0x23a>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 800541c:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8005420:	f5a3 71c4 	sub.w	r1, r3, #392	@ 0x188
 8005424:	f04f 0210 	mov.w	r2, #16
 8005428:	f04f 0300 	mov.w	r3, #0
 800542c:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_HSI;
 8005430:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8005434:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8005438:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 800543c:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800543e:	f107 0320 	add.w	r3, r7, #32
 8005442:	4618      	mov	r0, r3
 8005444:	f007 fa9c 	bl	800c980 <HAL_RCCEx_PeriphCLKConfig>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d001      	beq.n	8005452 <HAL_UART_MspInit+0x8e>
    {
      Error_Handler();
 800544e:	f7ff f986 	bl	800475e <Error_Handler>
    }

    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8005452:	4ba4      	ldr	r3, [pc, #656]	@ (80056e4 <HAL_UART_MspInit+0x320>)
 8005454:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005458:	4aa2      	ldr	r2, [pc, #648]	@ (80056e4 <HAL_UART_MspInit+0x320>)
 800545a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800545e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8005462:	4ba0      	ldr	r3, [pc, #640]	@ (80056e4 <HAL_UART_MspInit+0x320>)
 8005464:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005468:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 800546c:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8005470:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8005474:	601a      	str	r2, [r3, #0]
 8005476:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 800547a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800547e:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005480:	4b98      	ldr	r3, [pc, #608]	@ (80056e4 <HAL_UART_MspInit+0x320>)
 8005482:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005486:	4a97      	ldr	r2, [pc, #604]	@ (80056e4 <HAL_UART_MspInit+0x320>)
 8005488:	f043 0302 	orr.w	r3, r3, #2
 800548c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8005490:	4b94      	ldr	r3, [pc, #592]	@ (80056e4 <HAL_UART_MspInit+0x320>)
 8005492:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005496:	f003 0202 	and.w	r2, r3, #2
 800549a:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 800549e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80054a2:	601a      	str	r2, [r3, #0]
 80054a4:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 80054a8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80054ac:	681b      	ldr	r3, [r3, #0]
    /**UART5 GPIO Configuration
    PB5     ------> UART5_RX
    PB6     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80054ae:	2360      	movs	r3, #96	@ 0x60
 80054b0:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054b4:	2302      	movs	r3, #2
 80054b6:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054ba:	2300      	movs	r3, #0
 80054bc:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054c0:	2300      	movs	r3, #0
 80054c2:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 80054c6:	230e      	movs	r3, #14
 80054c8:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054cc:	f507 73ca 	add.w	r3, r7, #404	@ 0x194
 80054d0:	4619      	mov	r1, r3
 80054d2:	4885      	ldr	r0, [pc, #532]	@ (80056e8 <HAL_UART_MspInit+0x324>)
 80054d4:	f006 f86c 	bl	800b5b0 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* GPDMA1_REQUEST_UART5_RX Init */
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 80054d8:	2321      	movs	r3, #33	@ 0x21
 80054da:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    NodeConfig.Init.Request = GPDMA1_REQUEST_UART5_RX;
 80054de:	231d      	movs	r3, #29
 80054e0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80054e4:	2300      	movs	r3, #0
 80054e6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80054ea:	2300      	movs	r3, #0
 80054ec:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 80054f0:	2300      	movs	r3, #0
 80054f2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 80054f6:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80054fa:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 80054fe:	2300      	movs	r3, #0
 8005500:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8005504:	2300      	movs	r3, #0
 8005506:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    NodeConfig.Init.SrcBurstLength = 1;
 800550a:	2301      	movs	r3, #1
 800550c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
    NodeConfig.Init.DestBurstLength = 1;
 8005510:	2301      	movs	r3, #1
 8005512:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8005516:	2300      	movs	r3, #0
 8005518:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800551c:	2300      	movs	r3, #0
 800551e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
    NodeConfig.Init.Mode = DMA_NORMAL;
 8005522:	2300      	movs	r3, #0
 8005524:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 8005528:	2300      	movs	r3, #0
 800552a:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 800552e:	2300      	movs	r3, #0
 8005530:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 8005534:	2300      	movs	r3, #0
 8005536:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel4) != HAL_OK)
 800553a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800553e:	496b      	ldr	r1, [pc, #428]	@ (80056ec <HAL_UART_MspInit+0x328>)
 8005540:	4618      	mov	r0, r3
 8005542:	f004 f9d1 	bl	80098e8 <HAL_DMAEx_List_BuildNode>
 8005546:	4603      	mov	r3, r0
 8005548:	2b00      	cmp	r3, #0
 800554a:	d001      	beq.n	8005550 <HAL_UART_MspInit+0x18c>
    {
      Error_Handler();
 800554c:	f7ff f907 	bl	800475e <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel4, NULL, &Node_GPDMA1_Channel4) != HAL_OK)
 8005550:	4a66      	ldr	r2, [pc, #408]	@ (80056ec <HAL_UART_MspInit+0x328>)
 8005552:	2100      	movs	r1, #0
 8005554:	4866      	ldr	r0, [pc, #408]	@ (80056f0 <HAL_UART_MspInit+0x32c>)
 8005556:	f004 f9dd 	bl	8009914 <HAL_DMAEx_List_InsertNode>
 800555a:	4603      	mov	r3, r0
 800555c:	2b00      	cmp	r3, #0
 800555e:	d001      	beq.n	8005564 <HAL_UART_MspInit+0x1a0>
    {
      Error_Handler();
 8005560:	f7ff f8fd 	bl	800475e <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel4) != HAL_OK)
 8005564:	4862      	ldr	r0, [pc, #392]	@ (80056f0 <HAL_UART_MspInit+0x32c>)
 8005566:	f004 fa9e 	bl	8009aa6 <HAL_DMAEx_List_SetCircularMode>
 800556a:	4603      	mov	r3, r0
 800556c:	2b00      	cmp	r3, #0
 800556e:	d001      	beq.n	8005574 <HAL_UART_MspInit+0x1b0>
    {
      Error_Handler();
 8005570:	f7ff f8f5 	bl	800475e <Error_Handler>
    }

    handle_GPDMA1_Channel4.Instance = GPDMA1_Channel4;
 8005574:	4b5f      	ldr	r3, [pc, #380]	@ (80056f4 <HAL_UART_MspInit+0x330>)
 8005576:	4a60      	ldr	r2, [pc, #384]	@ (80056f8 <HAL_UART_MspInit+0x334>)
 8005578:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel4.InitLinkedList.Priority = DMA_HIGH_PRIORITY;
 800557a:	4b5e      	ldr	r3, [pc, #376]	@ (80056f4 <HAL_UART_MspInit+0x330>)
 800557c:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8005580:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel4.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8005582:	4b5c      	ldr	r3, [pc, #368]	@ (80056f4 <HAL_UART_MspInit+0x330>)
 8005584:	2200      	movs	r2, #0
 8005586:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel4.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 8005588:	4b5a      	ldr	r3, [pc, #360]	@ (80056f4 <HAL_UART_MspInit+0x330>)
 800558a:	2200      	movs	r2, #0
 800558c:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel4.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800558e:	4b59      	ldr	r3, [pc, #356]	@ (80056f4 <HAL_UART_MspInit+0x330>)
 8005590:	2200      	movs	r2, #0
 8005592:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel4.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 8005594:	4b57      	ldr	r3, [pc, #348]	@ (80056f4 <HAL_UART_MspInit+0x330>)
 8005596:	2281      	movs	r2, #129	@ 0x81
 8005598:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel4) != HAL_OK)
 800559a:	4856      	ldr	r0, [pc, #344]	@ (80056f4 <HAL_UART_MspInit+0x330>)
 800559c:	f003 ffe4 	bl	8009568 <HAL_DMAEx_List_Init>
 80055a0:	4603      	mov	r3, r0
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d001      	beq.n	80055aa <HAL_UART_MspInit+0x1e6>
    {
      Error_Handler();
 80055a6:	f7ff f8da 	bl	800475e <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel4, &List_GPDMA1_Channel4) != HAL_OK)
 80055aa:	4951      	ldr	r1, [pc, #324]	@ (80056f0 <HAL_UART_MspInit+0x32c>)
 80055ac:	4851      	ldr	r0, [pc, #324]	@ (80056f4 <HAL_UART_MspInit+0x330>)
 80055ae:	f004 fadb 	bl	8009b68 <HAL_DMAEx_List_LinkQ>
 80055b2:	4603      	mov	r3, r0
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d001      	beq.n	80055bc <HAL_UART_MspInit+0x1f8>
    {
      Error_Handler();
 80055b8:	f7ff f8d1 	bl	800475e <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle, hdmarx, handle_GPDMA1_Channel4);
 80055bc:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 80055c0:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a4b      	ldr	r2, [pc, #300]	@ (80056f4 <HAL_UART_MspInit+0x330>)
 80055c8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80055cc:	4a49      	ldr	r2, [pc, #292]	@ (80056f4 <HAL_UART_MspInit+0x330>)
 80055ce:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 80055d2:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel4, DMA_CHANNEL_NPRIV) != HAL_OK)
 80055da:	2110      	movs	r1, #16
 80055dc:	4845      	ldr	r0, [pc, #276]	@ (80056f4 <HAL_UART_MspInit+0x330>)
 80055de:	f003 ff62 	bl	80094a6 <HAL_DMA_ConfigChannelAttributes>
 80055e2:	4603      	mov	r3, r0
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d001      	beq.n	80055ec <HAL_UART_MspInit+0x228>
    {
      Error_Handler();
 80055e8:	f7ff f8b9 	bl	800475e <Error_Handler>
    }

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80055ec:	2200      	movs	r2, #0
 80055ee:	2100      	movs	r1, #0
 80055f0:	203e      	movs	r0, #62	@ 0x3e
 80055f2:	f001 fe68 	bl	80072c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80055f6:	203e      	movs	r0, #62	@ 0x3e
 80055f8:	f001 fe7f 	bl	80072fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80055fc:	e0f1      	b.n	80057e2 <HAL_UART_MspInit+0x41e>
  else if(uartHandle->Instance==USART1)
 80055fe:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8005602:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a3c      	ldr	r2, [pc, #240]	@ (80056fc <HAL_UART_MspInit+0x338>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d179      	bne.n	8005704 <HAL_UART_MspInit+0x340>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005610:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8005614:	f5a3 71c4 	sub.w	r1, r3, #392	@ 0x188
 8005618:	f04f 0201 	mov.w	r2, #1
 800561c:	f04f 0300 	mov.w	r3, #0
 8005620:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 8005624:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8005628:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800562c:	2203      	movs	r2, #3
 800562e:	65da      	str	r2, [r3, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005630:	f107 0320 	add.w	r3, r7, #32
 8005634:	4618      	mov	r0, r3
 8005636:	f007 f9a3 	bl	800c980 <HAL_RCCEx_PeriphCLKConfig>
 800563a:	4603      	mov	r3, r0
 800563c:	2b00      	cmp	r3, #0
 800563e:	d001      	beq.n	8005644 <HAL_UART_MspInit+0x280>
      Error_Handler();
 8005640:	f7ff f88d 	bl	800475e <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8005644:	4b27      	ldr	r3, [pc, #156]	@ (80056e4 <HAL_UART_MspInit+0x320>)
 8005646:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800564a:	4a26      	ldr	r2, [pc, #152]	@ (80056e4 <HAL_UART_MspInit+0x320>)
 800564c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005650:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8005654:	4b23      	ldr	r3, [pc, #140]	@ (80056e4 <HAL_UART_MspInit+0x320>)
 8005656:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800565a:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 800565e:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8005662:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8005666:	601a      	str	r2, [r3, #0]
 8005668:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 800566c:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8005670:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005672:	4b1c      	ldr	r3, [pc, #112]	@ (80056e4 <HAL_UART_MspInit+0x320>)
 8005674:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005678:	4a1a      	ldr	r2, [pc, #104]	@ (80056e4 <HAL_UART_MspInit+0x320>)
 800567a:	f043 0301 	orr.w	r3, r3, #1
 800567e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8005682:	4b18      	ldr	r3, [pc, #96]	@ (80056e4 <HAL_UART_MspInit+0x320>)
 8005684:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005688:	f003 0201 	and.w	r2, r3, #1
 800568c:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8005690:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8005694:	601a      	str	r2, [r3, #0]
 8005696:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 800569a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800569e:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80056a0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80056a4:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056a8:	2302      	movs	r3, #2
 80056aa:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056ae:	2300      	movs	r3, #0
 80056b0:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056b4:	2300      	movs	r3, #0
 80056b6:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80056ba:	2307      	movs	r3, #7
 80056bc:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056c0:	f507 73ca 	add.w	r3, r7, #404	@ 0x194
 80056c4:	4619      	mov	r1, r3
 80056c6:	480e      	ldr	r0, [pc, #56]	@ (8005700 <HAL_UART_MspInit+0x33c>)
 80056c8:	f005 ff72 	bl	800b5b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80056cc:	2200      	movs	r2, #0
 80056ce:	2100      	movs	r1, #0
 80056d0:	203a      	movs	r0, #58	@ 0x3a
 80056d2:	f001 fdf8 	bl	80072c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80056d6:	203a      	movs	r0, #58	@ 0x3a
 80056d8:	f001 fe0f 	bl	80072fa <HAL_NVIC_EnableIRQ>
}
 80056dc:	e081      	b.n	80057e2 <HAL_UART_MspInit+0x41e>
 80056de:	bf00      	nop
 80056e0:	40005000 	.word	0x40005000
 80056e4:	44020c00 	.word	0x44020c00
 80056e8:	42020400 	.word	0x42020400
 80056ec:	20013dfc 	.word	0x20013dfc
 80056f0:	20013e20 	.word	0x20013e20
 80056f4:	20013e38 	.word	0x20013e38
 80056f8:	40020250 	.word	0x40020250
 80056fc:	40013800 	.word	0x40013800
 8005700:	42020000 	.word	0x42020000
  else if(uartHandle->Instance==USART6)
 8005704:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8005708:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a36      	ldr	r2, [pc, #216]	@ (80057ec <HAL_UART_MspInit+0x428>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d165      	bne.n	80057e2 <HAL_UART_MspInit+0x41e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8005716:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 800571a:	f5a3 71c4 	sub.w	r1, r3, #392	@ 0x188
 800571e:	f04f 0220 	mov.w	r2, #32
 8005722:	f04f 0300 	mov.w	r3, #0
 8005726:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_HSI;
 800572a:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 800572e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8005732:	f44f 32c0 	mov.w	r2, #98304	@ 0x18000
 8005736:	671a      	str	r2, [r3, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005738:	f107 0320 	add.w	r3, r7, #32
 800573c:	4618      	mov	r0, r3
 800573e:	f007 f91f 	bl	800c980 <HAL_RCCEx_PeriphCLKConfig>
 8005742:	4603      	mov	r3, r0
 8005744:	2b00      	cmp	r3, #0
 8005746:	d001      	beq.n	800574c <HAL_UART_MspInit+0x388>
      Error_Handler();
 8005748:	f7ff f809 	bl	800475e <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 800574c:	4b28      	ldr	r3, [pc, #160]	@ (80057f0 <HAL_UART_MspInit+0x42c>)
 800574e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005752:	4a27      	ldr	r2, [pc, #156]	@ (80057f0 <HAL_UART_MspInit+0x42c>)
 8005754:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005758:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800575c:	4b24      	ldr	r3, [pc, #144]	@ (80057f0 <HAL_UART_MspInit+0x42c>)
 800575e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005762:	f003 7200 	and.w	r2, r3, #33554432	@ 0x2000000
 8005766:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 800576a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800576e:	601a      	str	r2, [r3, #0]
 8005770:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8005774:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8005778:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800577a:	4b1d      	ldr	r3, [pc, #116]	@ (80057f0 <HAL_UART_MspInit+0x42c>)
 800577c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005780:	4a1b      	ldr	r2, [pc, #108]	@ (80057f0 <HAL_UART_MspInit+0x42c>)
 8005782:	f043 0304 	orr.w	r3, r3, #4
 8005786:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800578a:	4b19      	ldr	r3, [pc, #100]	@ (80057f0 <HAL_UART_MspInit+0x42c>)
 800578c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005790:	f003 0204 	and.w	r2, r3, #4
 8005794:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8005798:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 800579c:	601a      	str	r2, [r3, #0]
 800579e:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 80057a2:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80057a6:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80057a8:	23c0      	movs	r3, #192	@ 0xc0
 80057aa:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057ae:	2302      	movs	r3, #2
 80057b0:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057b4:	2300      	movs	r3, #0
 80057b6:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057ba:	2300      	movs	r3, #0
 80057bc:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 80057c0:	2307      	movs	r3, #7
 80057c2:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80057c6:	f507 73ca 	add.w	r3, r7, #404	@ 0x194
 80057ca:	4619      	mov	r1, r3
 80057cc:	4809      	ldr	r0, [pc, #36]	@ (80057f4 <HAL_UART_MspInit+0x430>)
 80057ce:	f005 feef 	bl	800b5b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80057d2:	2200      	movs	r2, #0
 80057d4:	2100      	movs	r1, #0
 80057d6:	2055      	movs	r0, #85	@ 0x55
 80057d8:	f001 fd75 	bl	80072c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80057dc:	2055      	movs	r0, #85	@ 0x55
 80057de:	f001 fd8c 	bl	80072fa <HAL_NVIC_EnableIRQ>
}
 80057e2:	bf00      	nop
 80057e4:	f507 77d4 	add.w	r7, r7, #424	@ 0x1a8
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	40006400 	.word	0x40006400
 80057f0:	44020c00 	.word	0x44020c00
 80057f4:	42020800 	.word	0x42020800

080057f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80057f8:	480d      	ldr	r0, [pc, #52]	@ (8005830 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80057fa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80057fc:	f7ff fc1e 	bl	800503c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005800:	480c      	ldr	r0, [pc, #48]	@ (8005834 <LoopForever+0x6>)
  ldr r1, =_edata
 8005802:	490d      	ldr	r1, [pc, #52]	@ (8005838 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005804:	4a0d      	ldr	r2, [pc, #52]	@ (800583c <LoopForever+0xe>)
  movs r3, #0
 8005806:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005808:	e002      	b.n	8005810 <LoopCopyDataInit>

0800580a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800580a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800580c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800580e:	3304      	adds	r3, #4

08005810 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005810:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005812:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005814:	d3f9      	bcc.n	800580a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005816:	4a0a      	ldr	r2, [pc, #40]	@ (8005840 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005818:	4c0a      	ldr	r4, [pc, #40]	@ (8005844 <LoopForever+0x16>)
  movs r3, #0
 800581a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800581c:	e001      	b.n	8005822 <LoopFillZerobss>

0800581e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800581e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005820:	3204      	adds	r2, #4

08005822 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005822:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005824:	d3fb      	bcc.n	800581e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8005826:	f019 fc29 	bl	801f07c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800582a:	f7fe fe7b 	bl	8004524 <main>

0800582e <LoopForever>:

LoopForever:
    b LoopForever
 800582e:	e7fe      	b.n	800582e <LoopForever>
  ldr   r0, =_estack
 8005830:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8005834:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005838:	20000274 	.word	0x20000274
  ldr r2, =_sidata
 800583c:	08024860 	.word	0x08024860
  ldr r2, =_sbss
 8005840:	20000278 	.word	0x20000278
  ldr r4, =_ebss
 8005844:	20015864 	.word	0x20015864

08005848 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005848:	e7fe      	b.n	8005848 <ADC1_IRQHandler>
	...

0800584c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005850:	2003      	movs	r0, #3
 8005852:	f001 fd2d 	bl	80072b0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005856:	f006 ff09 	bl	800c66c <HAL_RCC_GetSysClockFreq>
 800585a:	4602      	mov	r2, r0
 800585c:	4b0c      	ldr	r3, [pc, #48]	@ (8005890 <HAL_Init+0x44>)
 800585e:	6a1b      	ldr	r3, [r3, #32]
 8005860:	f003 030f 	and.w	r3, r3, #15
 8005864:	490b      	ldr	r1, [pc, #44]	@ (8005894 <HAL_Init+0x48>)
 8005866:	5ccb      	ldrb	r3, [r1, r3]
 8005868:	fa22 f303 	lsr.w	r3, r2, r3
 800586c:	4a0a      	ldr	r2, [pc, #40]	@ (8005898 <HAL_Init+0x4c>)
 800586e:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8005870:	2004      	movs	r0, #4
 8005872:	f001 fd85 	bl	8007380 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005876:	200f      	movs	r0, #15
 8005878:	f000 f810 	bl	800589c <HAL_InitTick>
 800587c:	4603      	mov	r3, r0
 800587e:	2b00      	cmp	r3, #0
 8005880:	d001      	beq.n	8005886 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	e002      	b.n	800588c <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8005886:	f7ff f93b 	bl	8004b00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800588a:	2300      	movs	r3, #0
}
 800588c:	4618      	mov	r0, r3
 800588e:	bd80      	pop	{r7, pc}
 8005890:	44020c00 	.word	0x44020c00
 8005894:	08024354 	.word	0x08024354
 8005898:	20000074 	.word	0x20000074

0800589c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 80058a4:	2300      	movs	r3, #0
 80058a6:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80058a8:	4b33      	ldr	r3, [pc, #204]	@ (8005978 <HAL_InitTick+0xdc>)
 80058aa:	781b      	ldrb	r3, [r3, #0]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d101      	bne.n	80058b4 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	e05c      	b.n	800596e <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80058b4:	4b31      	ldr	r3, [pc, #196]	@ (800597c <HAL_InitTick+0xe0>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 0304 	and.w	r3, r3, #4
 80058bc:	2b04      	cmp	r3, #4
 80058be:	d10c      	bne.n	80058da <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80058c0:	4b2f      	ldr	r3, [pc, #188]	@ (8005980 <HAL_InitTick+0xe4>)
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	4b2c      	ldr	r3, [pc, #176]	@ (8005978 <HAL_InitTick+0xdc>)
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	4619      	mov	r1, r3
 80058ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80058ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80058d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80058d6:	60fb      	str	r3, [r7, #12]
 80058d8:	e037      	b.n	800594a <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80058da:	f001 fda9 	bl	8007430 <HAL_SYSTICK_GetCLKSourceConfig>
 80058de:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	2b02      	cmp	r3, #2
 80058e4:	d023      	beq.n	800592e <HAL_InitTick+0x92>
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	2b02      	cmp	r3, #2
 80058ea:	d82d      	bhi.n	8005948 <HAL_InitTick+0xac>
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d003      	beq.n	80058fa <HAL_InitTick+0x5e>
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d00d      	beq.n	8005914 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 80058f8:	e026      	b.n	8005948 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 80058fa:	4b21      	ldr	r3, [pc, #132]	@ (8005980 <HAL_InitTick+0xe4>)
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	4b1e      	ldr	r3, [pc, #120]	@ (8005978 <HAL_InitTick+0xdc>)
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	4619      	mov	r1, r3
 8005904:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8005908:	fbb3 f3f1 	udiv	r3, r3, r1
 800590c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005910:	60fb      	str	r3, [r7, #12]
        break;
 8005912:	e01a      	b.n	800594a <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8005914:	4b18      	ldr	r3, [pc, #96]	@ (8005978 <HAL_InitTick+0xdc>)
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	461a      	mov	r2, r3
 800591a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800591e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005922:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8005926:	fbb2 f3f3 	udiv	r3, r2, r3
 800592a:	60fb      	str	r3, [r7, #12]
        break;
 800592c:	e00d      	b.n	800594a <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800592e:	4b12      	ldr	r3, [pc, #72]	@ (8005978 <HAL_InitTick+0xdc>)
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	461a      	mov	r2, r3
 8005934:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005938:	fbb3 f3f2 	udiv	r3, r3, r2
 800593c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8005940:	fbb2 f3f3 	udiv	r3, r2, r3
 8005944:	60fb      	str	r3, [r7, #12]
        break;
 8005946:	e000      	b.n	800594a <HAL_InitTick+0xae>
        break;
 8005948:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 800594a:	68f8      	ldr	r0, [r7, #12]
 800594c:	f001 fcf6 	bl	800733c <HAL_SYSTICK_Config>
 8005950:	4603      	mov	r3, r0
 8005952:	2b00      	cmp	r3, #0
 8005954:	d001      	beq.n	800595a <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	e009      	b.n	800596e <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800595a:	2200      	movs	r2, #0
 800595c:	6879      	ldr	r1, [r7, #4]
 800595e:	f04f 30ff 	mov.w	r0, #4294967295
 8005962:	f001 fcb0 	bl	80072c6 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8005966:	4a07      	ldr	r2, [pc, #28]	@ (8005984 <HAL_InitTick+0xe8>)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800596c:	2300      	movs	r3, #0
}
 800596e:	4618      	mov	r0, r3
 8005970:	3710      	adds	r7, #16
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
 8005976:	bf00      	nop
 8005978:	2000007c 	.word	0x2000007c
 800597c:	e000e010 	.word	0xe000e010
 8005980:	20000074 	.word	0x20000074
 8005984:	20000078 	.word	0x20000078

08005988 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005988:	b480      	push	{r7}
 800598a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800598c:	4b06      	ldr	r3, [pc, #24]	@ (80059a8 <HAL_IncTick+0x20>)
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	461a      	mov	r2, r3
 8005992:	4b06      	ldr	r3, [pc, #24]	@ (80059ac <HAL_IncTick+0x24>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4413      	add	r3, r2
 8005998:	4a04      	ldr	r2, [pc, #16]	@ (80059ac <HAL_IncTick+0x24>)
 800599a:	6013      	str	r3, [r2, #0]
}
 800599c:	bf00      	nop
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr
 80059a6:	bf00      	nop
 80059a8:	2000007c 	.word	0x2000007c
 80059ac:	20013eb0 	.word	0x20013eb0

080059b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80059b0:	b480      	push	{r7}
 80059b2:	af00      	add	r7, sp, #0
  return uwTick;
 80059b4:	4b03      	ldr	r3, [pc, #12]	@ (80059c4 <HAL_GetTick+0x14>)
 80059b6:	681b      	ldr	r3, [r3, #0]
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr
 80059c2:	bf00      	nop
 80059c4:	20013eb0 	.word	0x20013eb0

080059c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b084      	sub	sp, #16
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80059d0:	f7ff ffee 	bl	80059b0 <HAL_GetTick>
 80059d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059e0:	d005      	beq.n	80059ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80059e2:	4b0a      	ldr	r3, [pc, #40]	@ (8005a0c <HAL_Delay+0x44>)
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	461a      	mov	r2, r3
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	4413      	add	r3, r2
 80059ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80059ee:	bf00      	nop
 80059f0:	f7ff ffde 	bl	80059b0 <HAL_GetTick>
 80059f4:	4602      	mov	r2, r0
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	1ad3      	subs	r3, r2, r3
 80059fa:	68fa      	ldr	r2, [r7, #12]
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d8f7      	bhi.n	80059f0 <HAL_Delay+0x28>
  {
  }
}
 8005a00:	bf00      	nop
 8005a02:	bf00      	nop
 8005a04:	3710      	adds	r7, #16
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
 8005a0a:	bf00      	nop
 8005a0c:	2000007c 	.word	0x2000007c

08005a10 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b083      	sub	sp, #12
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	431a      	orrs	r2, r3
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	609a      	str	r2, [r3, #8]
}
 8005a2a:	bf00      	nop
 8005a2c:	370c      	adds	r7, #12
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr

08005a36 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005a36:	b480      	push	{r7}
 8005a38:	b083      	sub	sp, #12
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	6078      	str	r0, [r7, #4]
 8005a3e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	431a      	orrs	r2, r3
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	609a      	str	r2, [r3, #8]
}
 8005a50:	bf00      	nop
 8005a52:	370c      	adds	r7, #12
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	370c      	adds	r7, #12
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <LL_ADC_EnableChannelVDDcore>:
  * @rmtoll OR       OP0       LL_ADC_EnableChannelVDDcore
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableChannelVDDcore(ADC_TypeDef *ADCx)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->OR, ADC_OR_OP0);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8005a86:	f043 0201 	orr.w	r2, r3, #1
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8005a90:	bf00      	nop
 8005a92:	370c      	adds	r7, #12
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr

08005a9c <LL_ADC_EnableChannel0_GPIO>:
  * @rmtoll OR       OP0       LL_ADC_EnableChannel0_GPIO
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableChannel0_GPIO(const ADC_TypeDef *ADCx)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b083      	sub	sp, #12
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(ADCx);
  SET_BIT(ADC1->OR, ADC_OR_OP0);
 8005aa4:	4b06      	ldr	r3, [pc, #24]	@ (8005ac0 <LL_ADC_EnableChannel0_GPIO+0x24>)
 8005aa6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8005aaa:	4a05      	ldr	r2, [pc, #20]	@ (8005ac0 <LL_ADC_EnableChannel0_GPIO+0x24>)
 8005aac:	f043 0301 	orr.w	r3, r3, #1
 8005ab0:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
}
 8005ab4:	bf00      	nop
 8005ab6:	370c      	adds	r7, #12
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr
 8005ac0:	42028000 	.word	0x42028000

08005ac4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b087      	sub	sp, #28
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	60f8      	str	r0, [r7, #12]
 8005acc:	60b9      	str	r1, [r7, #8]
 8005ace:	607a      	str	r2, [r7, #4]
 8005ad0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	3360      	adds	r3, #96	@ 0x60
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	009b      	lsls	r3, r3, #2
 8005adc:	4413      	add	r3, r2
 8005ade:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	4b08      	ldr	r3, [pc, #32]	@ (8005b08 <LL_ADC_SetOffset+0x44>)
 8005ae6:	4013      	ands	r3, r2
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8005aee:	683a      	ldr	r2, [r7, #0]
 8005af0:	430a      	orrs	r2, r1
 8005af2:	4313      	orrs	r3, r2
 8005af4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005afc:	bf00      	nop
 8005afe:	371c      	adds	r7, #28
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr
 8005b08:	03fff000 	.word	0x03fff000

08005b0c <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b085      	sub	sp, #20
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	3360      	adds	r3, #96	@ 0x60
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	4413      	add	r3, r2
 8005b22:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3714      	adds	r7, #20
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr

08005b38 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b087      	sub	sp, #28
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	60b9      	str	r1, [r7, #8]
 8005b42:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	3360      	adds	r3, #96	@ 0x60
 8005b48:	461a      	mov	r2, r3
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	4413      	add	r3, r2
 8005b50:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	431a      	orrs	r2, r3
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8005b62:	bf00      	nop
 8005b64:	371c      	adds	r7, #28
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr

08005b6e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8005b6e:	b480      	push	{r7}
 8005b70:	b087      	sub	sp, #28
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	60f8      	str	r0, [r7, #12]
 8005b76:	60b9      	str	r1, [r7, #8]
 8005b78:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	3360      	adds	r3, #96	@ 0x60
 8005b7e:	461a      	mov	r2, r3
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	009b      	lsls	r3, r3, #2
 8005b84:	4413      	add	r3, r2
 8005b86:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	431a      	orrs	r2, r3
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8005b98:	bf00      	nop
 8005b9a:	371c      	adds	r7, #28
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr

08005ba4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b087      	sub	sp, #28
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	60b9      	str	r1, [r7, #8]
 8005bae:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	3360      	adds	r3, #96	@ 0x60
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	4413      	add	r3, r2
 8005bbc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	431a      	orrs	r2, r3
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8005bce:	bf00      	nop
 8005bd0:	371c      	adds	r7, #28
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr

08005bda <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8005bda:	b480      	push	{r7}
 8005bdc:	b083      	sub	sp, #12
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]
 8005be2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	695b      	ldr	r3, [r3, #20]
 8005be8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	431a      	orrs	r2, r3
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	615a      	str	r2, [r3, #20]
}
 8005bf4:	bf00      	nop
 8005bf6:	370c      	adds	r7, #12
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr

08005c00 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d101      	bne.n	8005c18 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005c14:	2301      	movs	r3, #1
 8005c16:	e000      	b.n	8005c1a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005c18:	2300      	movs	r3, #0
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	370c      	adds	r7, #12
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr

08005c26 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H5, fast channel allows: 2.5 (sampling) + 12.5 (conversion 12b) = 15 ADC clock cycles (fADC)
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005c26:	b480      	push	{r7}
 8005c28:	b087      	sub	sp, #28
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	60f8      	str	r0, [r7, #12]
 8005c2e:	60b9      	str	r1, [r7, #8]
 8005c30:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	3330      	adds	r3, #48	@ 0x30
 8005c36:	461a      	mov	r2, r3
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	0a1b      	lsrs	r3, r3, #8
 8005c3c:	009b      	lsls	r3, r3, #2
 8005c3e:	f003 030c 	and.w	r3, r3, #12
 8005c42:	4413      	add	r3, r2
 8005c44:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	f003 031f 	and.w	r3, r3, #31
 8005c50:	211f      	movs	r1, #31
 8005c52:	fa01 f303 	lsl.w	r3, r1, r3
 8005c56:	43db      	mvns	r3, r3
 8005c58:	401a      	ands	r2, r3
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	0e9b      	lsrs	r3, r3, #26
 8005c5e:	f003 011f 	and.w	r1, r3, #31
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	f003 031f 	and.w	r3, r3, #31
 8005c68:	fa01 f303 	lsl.w	r3, r1, r3
 8005c6c:	431a      	orrs	r2, r3
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005c72:	bf00      	nop
 8005c74:	371c      	adds	r7, #28
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr

08005c7e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005c7e:	b480      	push	{r7}
 8005c80:	b087      	sub	sp, #28
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	60f8      	str	r0, [r7, #12]
 8005c86:	60b9      	str	r1, [r7, #8]
 8005c88:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	3314      	adds	r3, #20
 8005c8e:	461a      	mov	r2, r3
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	0e5b      	lsrs	r3, r3, #25
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	f003 0304 	and.w	r3, r3, #4
 8005c9a:	4413      	add	r3, r2
 8005c9c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	0d1b      	lsrs	r3, r3, #20
 8005ca6:	f003 031f 	and.w	r3, r3, #31
 8005caa:	2107      	movs	r1, #7
 8005cac:	fa01 f303 	lsl.w	r3, r1, r3
 8005cb0:	43db      	mvns	r3, r3
 8005cb2:	401a      	ands	r2, r3
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	0d1b      	lsrs	r3, r3, #20
 8005cb8:	f003 031f 	and.w	r3, r3, #31
 8005cbc:	6879      	ldr	r1, [r7, #4]
 8005cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8005cc2:	431a      	orrs	r2, r3
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005cc8:	bf00      	nop
 8005cca:	371c      	adds	r7, #28
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr

08005cd4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b085      	sub	sp, #20
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	60f8      	str	r0, [r7, #12]
 8005cdc:	60b9      	str	r1, [r7, #8]
 8005cde:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005cec:	43db      	mvns	r3, r3
 8005cee:	401a      	ands	r2, r3
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f003 0318 	and.w	r3, r3, #24
 8005cf6:	4908      	ldr	r1, [pc, #32]	@ (8005d18 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005cf8:	40d9      	lsrs	r1, r3
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	400b      	ands	r3, r1
 8005cfe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d02:	431a      	orrs	r2, r3
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8005d0a:	bf00      	nop
 8005d0c:	3714      	adds	r7, #20
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr
 8005d16:	bf00      	nop
 8005d18:	000fffff 	.word	0x000fffff

08005d1c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b083      	sub	sp, #12
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	f003 031f 	and.w	r3, r3, #31
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	370c      	adds	r7, #12
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr

08005d38 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b083      	sub	sp, #12
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	370c      	adds	r7, #12
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr

08005d54 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b083      	sub	sp, #12
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8005d64:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005d68:	687a      	ldr	r2, [r7, #4]
 8005d6a:	6093      	str	r3, [r2, #8]
}
 8005d6c:	bf00      	nop
 8005d6e:	370c      	adds	r7, #12
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr

08005d78 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005d88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d8c:	d101      	bne.n	8005d92 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e000      	b.n	8005d94 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005d92:	2300      	movs	r3, #0
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	370c      	adds	r7, #12
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr

08005da0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b083      	sub	sp, #12
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8005db0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005db4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005dbc:	bf00      	nop
 8005dbe:	370c      	adds	r7, #12
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b083      	sub	sp, #12
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005dd8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005ddc:	d101      	bne.n	8005de2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005dde:	2301      	movs	r3, #1
 8005de0:	e000      	b.n	8005de4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005de2:	2300      	movs	r3, #0
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	370c      	adds	r7, #12
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr

08005df0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b083      	sub	sp, #12
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005e00:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005e04:	f043 0201 	orr.w	r2, r3, #1
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005e0c:	bf00      	nop
 8005e0e:	370c      	adds	r7, #12
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr

08005e18 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b083      	sub	sp, #12
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005e28:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005e2c:	f043 0202 	orr.w	r2, r3, #2
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8005e34:	bf00      	nop
 8005e36:	370c      	adds	r7, #12
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b083      	sub	sp, #12
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	f003 0301 	and.w	r3, r3, #1
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d101      	bne.n	8005e58 <LL_ADC_IsEnabled+0x18>
 8005e54:	2301      	movs	r3, #1
 8005e56:	e000      	b.n	8005e5a <LL_ADC_IsEnabled+0x1a>
 8005e58:	2300      	movs	r3, #0
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	370c      	adds	r7, #12
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr

08005e66 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8005e66:	b480      	push	{r7}
 8005e68:	b083      	sub	sp, #12
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	f003 0302 	and.w	r3, r3, #2
 8005e76:	2b02      	cmp	r3, #2
 8005e78:	d101      	bne.n	8005e7e <LL_ADC_IsDisableOngoing+0x18>
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e000      	b.n	8005e80 <LL_ADC_IsDisableOngoing+0x1a>
 8005e7e:	2300      	movs	r3, #0
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	370c      	adds	r7, #12
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr

08005e8c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005e9c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005ea0:	f043 0204 	orr.w	r2, r3, #4
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005ea8:	bf00      	nop
 8005eaa:	370c      	adds	r7, #12
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr

08005eb4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005ec4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005ec8:	f043 0210 	orr.w	r2, r3, #16
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8005ed0:	bf00      	nop
 8005ed2:	370c      	adds	r7, #12
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr

08005edc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b083      	sub	sp, #12
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	f003 0304 	and.w	r3, r3, #4
 8005eec:	2b04      	cmp	r3, #4
 8005eee:	d101      	bne.n	8005ef4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	e000      	b.n	8005ef6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005ef4:	2300      	movs	r3, #0
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	370c      	adds	r7, #12
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr

08005f02 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8005f02:	b480      	push	{r7}
 8005f04:	b083      	sub	sp, #12
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005f12:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005f16:	f043 0220 	orr.w	r2, r3, #32
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8005f1e:	bf00      	nop
 8005f20:	370c      	adds	r7, #12
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr

08005f2a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005f2a:	b480      	push	{r7}
 8005f2c:	b083      	sub	sp, #12
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	f003 0308 	and.w	r3, r3, #8
 8005f3a:	2b08      	cmp	r3, #8
 8005f3c:	d101      	bne.n	8005f42 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e000      	b.n	8005f44 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005f42:	2300      	movs	r3, #0
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	370c      	adds	r7, #12
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005f50:	b590      	push	{r4, r7, lr}
 8005f52:	b089      	sub	sp, #36	@ 0x24
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d101      	bne.n	8005f6a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e136      	b.n	80061d8 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	691b      	ldr	r3, [r3, #16]
 8005f6e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d109      	bne.n	8005f8c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f7fd fbcf 	bl	800371c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2200      	movs	r2, #0
 8005f88:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4618      	mov	r0, r3
 8005f92:	f7ff fef1 	bl	8005d78 <LL_ADC_IsDeepPowerDownEnabled>
 8005f96:	4603      	mov	r3, r0
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d004      	beq.n	8005fa6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f7ff fed7 	bl	8005d54 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4618      	mov	r0, r3
 8005fac:	f7ff ff0c 	bl	8005dc8 <LL_ADC_IsInternalRegulatorEnabled>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d115      	bne.n	8005fe2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f7ff fef0 	bl	8005da0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005fc0:	4b87      	ldr	r3, [pc, #540]	@ (80061e0 <HAL_ADC_Init+0x290>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	099b      	lsrs	r3, r3, #6
 8005fc6:	4a87      	ldr	r2, [pc, #540]	@ (80061e4 <HAL_ADC_Init+0x294>)
 8005fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8005fcc:	099b      	lsrs	r3, r3, #6
 8005fce:	3301      	adds	r3, #1
 8005fd0:	005b      	lsls	r3, r3, #1
 8005fd2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005fd4:	e002      	b.n	8005fdc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	3b01      	subs	r3, #1
 8005fda:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d1f9      	bne.n	8005fd6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f7ff feee 	bl	8005dc8 <LL_ADC_IsInternalRegulatorEnabled>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d10d      	bne.n	800600e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ff6:	f043 0210 	orr.w	r2, r3, #16
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006002:	f043 0201 	orr.w	r2, r3, #1
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4618      	mov	r0, r3
 8006014:	f7ff ff62 	bl	8005edc <LL_ADC_REG_IsConversionOngoing>
 8006018:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800601e:	f003 0310 	and.w	r3, r3, #16
 8006022:	2b00      	cmp	r3, #0
 8006024:	f040 80cf 	bne.w	80061c6 <HAL_ADC_Init+0x276>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	2b00      	cmp	r3, #0
 800602c:	f040 80cb 	bne.w	80061c6 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006034:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8006038:	f043 0202 	orr.w	r2, r3, #2
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4618      	mov	r0, r3
 8006046:	f7ff fefb 	bl	8005e40 <LL_ADC_IsEnabled>
 800604a:	4603      	mov	r3, r0
 800604c:	2b00      	cmp	r3, #0
 800604e:	d110      	bne.n	8006072 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006050:	4865      	ldr	r0, [pc, #404]	@ (80061e8 <HAL_ADC_Init+0x298>)
 8006052:	f7ff fef5 	bl	8005e40 <LL_ADC_IsEnabled>
 8006056:	4604      	mov	r4, r0
 8006058:	4864      	ldr	r0, [pc, #400]	@ (80061ec <HAL_ADC_Init+0x29c>)
 800605a:	f7ff fef1 	bl	8005e40 <LL_ADC_IsEnabled>
 800605e:	4603      	mov	r3, r0
 8006060:	4323      	orrs	r3, r4
 8006062:	2b00      	cmp	r3, #0
 8006064:	d105      	bne.n	8006072 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	4619      	mov	r1, r3
 800606c:	4860      	ldr	r0, [pc, #384]	@ (80061f0 <HAL_ADC_Init+0x2a0>)
 800606e:	f7ff fccf 	bl	8005a10 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	7e5b      	ldrb	r3, [r3, #25]
 8006076:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800607c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8006082:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8006088:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006090:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006092:	4313      	orrs	r3, r2
 8006094:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f893 3020 	ldrb.w	r3, [r3, #32]
 800609c:	2b01      	cmp	r3, #1
 800609e:	d106      	bne.n	80060ae <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060a4:	3b01      	subs	r3, #1
 80060a6:	045b      	lsls	r3, r3, #17
 80060a8:	69ba      	ldr	r2, [r7, #24]
 80060aa:	4313      	orrs	r3, r2
 80060ac:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d009      	beq.n	80060ca <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060ba:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060c2:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80060c4:	69ba      	ldr	r2, [r7, #24]
 80060c6:	4313      	orrs	r3, r2
 80060c8:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	68da      	ldr	r2, [r3, #12]
 80060d0:	4b48      	ldr	r3, [pc, #288]	@ (80061f4 <HAL_ADC_Init+0x2a4>)
 80060d2:	4013      	ands	r3, r2
 80060d4:	687a      	ldr	r2, [r7, #4]
 80060d6:	6812      	ldr	r2, [r2, #0]
 80060d8:	69b9      	ldr	r1, [r7, #24]
 80060da:	430b      	orrs	r3, r1
 80060dc:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	691b      	ldr	r3, [r3, #16]
 80060e4:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	430a      	orrs	r2, r1
 80060f2:	611a      	str	r2, [r3, #16]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4618      	mov	r0, r3
 80060fa:	f7ff ff16 	bl	8005f2a <LL_ADC_INJ_IsConversionOngoing>
 80060fe:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d13d      	bne.n	8006182 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d13a      	bne.n	8006182 <HAL_ADC_Init+0x232>
       )
    {
      tmp_cfgr = (
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	7e1b      	ldrb	r3, [r3, #24]
 8006110:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006118:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (
 800611a:	4313      	orrs	r3, r2
 800611c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	68db      	ldr	r3, [r3, #12]
 8006124:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006128:	f023 0302 	bic.w	r3, r3, #2
 800612c:	687a      	ldr	r2, [r7, #4]
 800612e:	6812      	ldr	r2, [r2, #0]
 8006130:	69b9      	ldr	r1, [r7, #24]
 8006132:	430b      	orrs	r3, r1
 8006134:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800613c:	2b01      	cmp	r3, #1
 800613e:	d118      	bne.n	8006172 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	691b      	ldr	r3, [r3, #16]
 8006146:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800614a:	f023 0304 	bic.w	r3, r3, #4
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8006156:	4311      	orrs	r1, r2
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800615c:	4311      	orrs	r1, r2
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8006162:	430a      	orrs	r2, r1
 8006164:	431a      	orrs	r2, r3
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f042 0201 	orr.w	r2, r2, #1
 800616e:	611a      	str	r2, [r3, #16]
 8006170:	e007      	b.n	8006182 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	691a      	ldr	r2, [r3, #16]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f022 0201 	bic.w	r2, r2, #1
 8006180:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	691b      	ldr	r3, [r3, #16]
 8006186:	2b01      	cmp	r3, #1
 8006188:	d10c      	bne.n	80061a4 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006190:	f023 010f 	bic.w	r1, r3, #15
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	69db      	ldr	r3, [r3, #28]
 8006198:	1e5a      	subs	r2, r3, #1
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	430a      	orrs	r2, r1
 80061a0:	631a      	str	r2, [r3, #48]	@ 0x30
 80061a2:	e007      	b.n	80061b4 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f022 020f 	bic.w	r2, r2, #15
 80061b2:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061b8:	f023 0303 	bic.w	r3, r3, #3
 80061bc:	f043 0201 	orr.w	r2, r3, #1
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	659a      	str	r2, [r3, #88]	@ 0x58
 80061c4:	e007      	b.n	80061d6 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061ca:	f043 0210 	orr.w	r2, r3, #16
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80061d6:	7ffb      	ldrb	r3, [r7, #31]
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3724      	adds	r7, #36	@ 0x24
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd90      	pop	{r4, r7, pc}
 80061e0:	20000074 	.word	0x20000074
 80061e4:	053e2d63 	.word	0x053e2d63
 80061e8:	42028000 	.word	0x42028000
 80061ec:	42028100 	.word	0x42028100
 80061f0:	42028300 	.word	0x42028300
 80061f4:	fff04007 	.word	0xfff04007

080061f8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b086      	sub	sp, #24
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006200:	4857      	ldr	r0, [pc, #348]	@ (8006360 <HAL_ADC_Start+0x168>)
 8006202:	f7ff fd8b 	bl	8005d1c <LL_ADC_GetMultimode>
 8006206:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4618      	mov	r0, r3
 800620e:	f7ff fe65 	bl	8005edc <LL_ADC_REG_IsConversionOngoing>
 8006212:	4603      	mov	r3, r0
 8006214:	2b00      	cmp	r3, #0
 8006216:	f040 809c 	bne.w	8006352 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006220:	2b01      	cmp	r3, #1
 8006222:	d101      	bne.n	8006228 <HAL_ADC_Start+0x30>
 8006224:	2302      	movs	r3, #2
 8006226:	e097      	b.n	8006358 <HAL_ADC_Start+0x160>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2201      	movs	r2, #1
 800622c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f000 fe73 	bl	8006f1c <ADC_Enable>
 8006236:	4603      	mov	r3, r0
 8006238:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800623a:	7dfb      	ldrb	r3, [r7, #23]
 800623c:	2b00      	cmp	r3, #0
 800623e:	f040 8083 	bne.w	8006348 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006246:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800624a:	f023 0301 	bic.w	r3, r3, #1
 800624e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	659a      	str	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a42      	ldr	r2, [pc, #264]	@ (8006364 <HAL_ADC_Start+0x16c>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d002      	beq.n	8006266 <HAL_ADC_Start+0x6e>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	e000      	b.n	8006268 <HAL_ADC_Start+0x70>
 8006266:	4b40      	ldr	r3, [pc, #256]	@ (8006368 <HAL_ADC_Start+0x170>)
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	6812      	ldr	r2, [r2, #0]
 800626c:	4293      	cmp	r3, r2
 800626e:	d002      	beq.n	8006276 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d105      	bne.n	8006282 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800627a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006286:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800628a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800628e:	d106      	bne.n	800629e <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006294:	f023 0206 	bic.w	r2, r3, #6
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800629c:	e002      	b.n	80062a4 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	221c      	movs	r2, #28
 80062aa:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a2a      	ldr	r2, [pc, #168]	@ (8006364 <HAL_ADC_Start+0x16c>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d002      	beq.n	80062c4 <HAL_ADC_Start+0xcc>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	e000      	b.n	80062c6 <HAL_ADC_Start+0xce>
 80062c4:	4b28      	ldr	r3, [pc, #160]	@ (8006368 <HAL_ADC_Start+0x170>)
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	6812      	ldr	r2, [r2, #0]
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d008      	beq.n	80062e0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d005      	beq.n	80062e0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	2b05      	cmp	r3, #5
 80062d8:	d002      	beq.n	80062e0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	2b09      	cmp	r3, #9
 80062de:	d114      	bne.n	800630a <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	68db      	ldr	r3, [r3, #12]
 80062e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d007      	beq.n	80062fe <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062f2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80062f6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4618      	mov	r0, r3
 8006304:	f7ff fdc2 	bl	8005e8c <LL_ADC_REG_StartConversion>
 8006308:	e025      	b.n	8006356 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800630e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	659a      	str	r2, [r3, #88]	@ 0x58
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a12      	ldr	r2, [pc, #72]	@ (8006364 <HAL_ADC_Start+0x16c>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d002      	beq.n	8006326 <HAL_ADC_Start+0x12e>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	e000      	b.n	8006328 <HAL_ADC_Start+0x130>
 8006326:	4b10      	ldr	r3, [pc, #64]	@ (8006368 <HAL_ADC_Start+0x170>)
 8006328:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	68db      	ldr	r3, [r3, #12]
 800632e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006332:	2b00      	cmp	r3, #0
 8006334:	d00f      	beq.n	8006356 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800633a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800633e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	659a      	str	r2, [r3, #88]	@ 0x58
 8006346:	e006      	b.n	8006356 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2200      	movs	r2, #0
 800634c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8006350:	e001      	b.n	8006356 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006352:	2302      	movs	r3, #2
 8006354:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8006356:	7dfb      	ldrb	r3, [r7, #23]
}
 8006358:	4618      	mov	r0, r3
 800635a:	3718      	adds	r7, #24
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}
 8006360:	42028300 	.word	0x42028300
 8006364:	42028100 	.word	0x42028100
 8006368:	42028000 	.word	0x42028000

0800636c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b084      	sub	sp, #16
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800637a:	2b01      	cmp	r3, #1
 800637c:	d101      	bne.n	8006382 <HAL_ADC_Stop+0x16>
 800637e:	2302      	movs	r3, #2
 8006380:	e023      	b.n	80063ca <HAL_ADC_Stop+0x5e>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2201      	movs	r2, #1
 8006386:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800638a:	2103      	movs	r1, #3
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f000 fd09 	bl	8006da4 <ADC_ConversionStop>
 8006392:	4603      	mov	r3, r0
 8006394:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8006396:	7bfb      	ldrb	r3, [r7, #15]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d111      	bne.n	80063c0 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f000 fe3f 	bl	8007020 <ADC_Disable>
 80063a2:	4603      	mov	r3, r0
 80063a4:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80063a6:	7bfb      	ldrb	r3, [r7, #15]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d109      	bne.n	80063c0 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063b0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80063b4:	f023 0301 	bic.w	r3, r3, #1
 80063b8:	f043 0201 	orr.w	r2, r3, #1
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80063c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3710      	adds	r7, #16
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}
	...

080063d4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b088      	sub	sp, #32
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80063de:	4866      	ldr	r0, [pc, #408]	@ (8006578 <HAL_ADC_PollForConversion+0x1a4>)
 80063e0:	f7ff fc9c 	bl	8005d1c <LL_ADC_GetMultimode>
 80063e4:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	695b      	ldr	r3, [r3, #20]
 80063ea:	2b08      	cmp	r3, #8
 80063ec:	d102      	bne.n	80063f4 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80063ee:	2308      	movs	r3, #8
 80063f0:	61fb      	str	r3, [r7, #28]
 80063f2:	e02a      	b.n	800644a <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d005      	beq.n	8006406 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	2b05      	cmp	r3, #5
 80063fe:	d002      	beq.n	8006406 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	2b09      	cmp	r3, #9
 8006404:	d111      	bne.n	800642a <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	68db      	ldr	r3, [r3, #12]
 800640c:	f003 0301 	and.w	r3, r3, #1
 8006410:	2b00      	cmp	r3, #0
 8006412:	d007      	beq.n	8006424 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006418:	f043 0220 	orr.w	r2, r3, #32
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	659a      	str	r2, [r3, #88]	@ 0x58
        return HAL_ERROR;
 8006420:	2301      	movs	r3, #1
 8006422:	e0a4      	b.n	800656e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8006424:	2304      	movs	r3, #4
 8006426:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8006428:	e00f      	b.n	800644a <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800642a:	4853      	ldr	r0, [pc, #332]	@ (8006578 <HAL_ADC_PollForConversion+0x1a4>)
 800642c:	f7ff fc84 	bl	8005d38 <LL_ADC_GetMultiDMATransfer>
 8006430:	4603      	mov	r3, r0
 8006432:	2b00      	cmp	r3, #0
 8006434:	d007      	beq.n	8006446 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800643a:	f043 0220 	orr.w	r2, r3, #32
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	659a      	str	r2, [r3, #88]	@ 0x58
        return HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	e093      	b.n	800656e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8006446:	2304      	movs	r3, #4
 8006448:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800644a:	f7ff fab1 	bl	80059b0 <HAL_GetTick>
 800644e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8006450:	e021      	b.n	8006496 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006458:	d01d      	beq.n	8006496 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800645a:	f7ff faa9 	bl	80059b0 <HAL_GetTick>
 800645e:	4602      	mov	r2, r0
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	1ad3      	subs	r3, r2, r3
 8006464:	683a      	ldr	r2, [r7, #0]
 8006466:	429a      	cmp	r2, r3
 8006468:	d302      	bcc.n	8006470 <HAL_ADC_PollForConversion+0x9c>
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d112      	bne.n	8006496 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	69fb      	ldr	r3, [r7, #28]
 8006478:	4013      	ands	r3, r2
 800647a:	2b00      	cmp	r3, #0
 800647c:	d10b      	bne.n	8006496 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006482:	f043 0204 	orr.w	r2, r3, #4
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2200      	movs	r2, #0
 800648e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 8006492:	2303      	movs	r3, #3
 8006494:	e06b      	b.n	800656e <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	681a      	ldr	r2, [r3, #0]
 800649c:	69fb      	ldr	r3, [r7, #28]
 800649e:	4013      	ands	r3, r2
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d0d6      	beq.n	8006452 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064a8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4618      	mov	r0, r3
 80064b6:	f7ff fba3 	bl	8005c00 <LL_ADC_REG_IsTriggerSourceSWStart>
 80064ba:	4603      	mov	r3, r0
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d01c      	beq.n	80064fa <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	7e5b      	ldrb	r3, [r3, #25]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d118      	bne.n	80064fa <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f003 0308 	and.w	r3, r3, #8
 80064d2:	2b08      	cmp	r3, #8
 80064d4:	d111      	bne.n	80064fa <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064da:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	659a      	str	r2, [r3, #88]	@ 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d105      	bne.n	80064fa <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064f2:	f043 0201 	orr.w	r2, r3, #1
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a1f      	ldr	r2, [pc, #124]	@ (800657c <HAL_ADC_PollForConversion+0x1a8>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d002      	beq.n	800650a <HAL_ADC_PollForConversion+0x136>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	e000      	b.n	800650c <HAL_ADC_PollForConversion+0x138>
 800650a:	4b1d      	ldr	r3, [pc, #116]	@ (8006580 <HAL_ADC_PollForConversion+0x1ac>)
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	6812      	ldr	r2, [r2, #0]
 8006510:	4293      	cmp	r3, r2
 8006512:	d008      	beq.n	8006526 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d005      	beq.n	8006526 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	2b05      	cmp	r3, #5
 800651e:	d002      	beq.n	8006526 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	2b09      	cmp	r3, #9
 8006524:	d104      	bne.n	8006530 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	68db      	ldr	r3, [r3, #12]
 800652c:	61bb      	str	r3, [r7, #24]
 800652e:	e00c      	b.n	800654a <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a11      	ldr	r2, [pc, #68]	@ (800657c <HAL_ADC_PollForConversion+0x1a8>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d002      	beq.n	8006540 <HAL_ADC_PollForConversion+0x16c>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	e000      	b.n	8006542 <HAL_ADC_PollForConversion+0x16e>
 8006540:	4b0f      	ldr	r3, [pc, #60]	@ (8006580 <HAL_ADC_PollForConversion+0x1ac>)
 8006542:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	68db      	ldr	r3, [r3, #12]
 8006548:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800654a:	69fb      	ldr	r3, [r7, #28]
 800654c:	2b08      	cmp	r3, #8
 800654e:	d104      	bne.n	800655a <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	2208      	movs	r2, #8
 8006556:	601a      	str	r2, [r3, #0]
 8006558:	e008      	b.n	800656c <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800655a:	69bb      	ldr	r3, [r7, #24]
 800655c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006560:	2b00      	cmp	r3, #0
 8006562:	d103      	bne.n	800656c <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	220c      	movs	r2, #12
 800656a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800656c:	2300      	movs	r3, #0
}
 800656e:	4618      	mov	r0, r3
 8006570:	3720      	adds	r7, #32
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
 8006576:	bf00      	nop
 8006578:	42028300 	.word	0x42028300
 800657c:	42028100 	.word	0x42028100
 8006580:	42028000 	.word	0x42028000

08006584 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8006584:	b480      	push	{r7}
 8006586:	b083      	sub	sp, #12
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8006592:	4618      	mov	r0, r3
 8006594:	370c      	adds	r7, #12
 8006596:	46bd      	mov	sp, r7
 8006598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659c:	4770      	bx	lr
	...

080065a0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b0b6      	sub	sp, #216	@ 0xd8
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80065aa:	2300      	movs	r3, #0
 80065ac:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80065b0:	2300      	movs	r3, #0
 80065b2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d101      	bne.n	80065c2 <HAL_ADC_ConfigChannel+0x22>
 80065be:	2302      	movs	r3, #2
 80065c0:	e3d8      	b.n	8006d74 <HAL_ADC_ConfigChannel+0x7d4>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2201      	movs	r2, #1
 80065c6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4618      	mov	r0, r3
 80065d0:	f7ff fc84 	bl	8005edc <LL_ADC_REG_IsConversionOngoing>
 80065d4:	4603      	mov	r3, r0
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	f040 83bd 	bne.w	8006d56 <HAL_ADC_ConfigChannel+0x7b6>
  {
    if (pConfig->Channel == ADC_CHANNEL_0)
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d104      	bne.n	80065ee <HAL_ADC_ConfigChannel+0x4e>
    {
      LL_ADC_EnableChannel0_GPIO(hadc->Instance);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4618      	mov	r0, r3
 80065ea:	f7ff fa57 	bl	8005a9c <LL_ADC_EnableChannel0_GPIO>
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6818      	ldr	r0, [r3, #0]
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	6859      	ldr	r1, [r3, #4]
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	461a      	mov	r2, r3
 80065fc:	f7ff fb13 	bl	8005c26 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4618      	mov	r0, r3
 8006606:	f7ff fc69 	bl	8005edc <LL_ADC_REG_IsConversionOngoing>
 800660a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4618      	mov	r0, r3
 8006614:	f7ff fc89 	bl	8005f2a <LL_ADC_INJ_IsConversionOngoing>
 8006618:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800661c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006620:	2b00      	cmp	r3, #0
 8006622:	f040 81d9 	bne.w	80069d8 <HAL_ADC_ConfigChannel+0x438>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006626:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800662a:	2b00      	cmp	r3, #0
 800662c:	f040 81d4 	bne.w	80069d8 <HAL_ADC_ConfigChannel+0x438>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006638:	d10f      	bne.n	800665a <HAL_ADC_ConfigChannel+0xba>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6818      	ldr	r0, [r3, #0]
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	2200      	movs	r2, #0
 8006644:	4619      	mov	r1, r3
 8006646:	f7ff fb1a 	bl	8005c7e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8006652:	4618      	mov	r0, r3
 8006654:	f7ff fac1 	bl	8005bda <LL_ADC_SetSamplingTimeCommonConfig>
 8006658:	e00e      	b.n	8006678 <HAL_ADC_ConfigChannel+0xd8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6818      	ldr	r0, [r3, #0]
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	6819      	ldr	r1, [r3, #0]
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	461a      	mov	r2, r3
 8006668:	f7ff fb09 	bl	8005c7e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	2100      	movs	r1, #0
 8006672:	4618      	mov	r0, r3
 8006674:	f7ff fab1 	bl	8005bda <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	695a      	ldr	r2, [r3, #20]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	68db      	ldr	r3, [r3, #12]
 8006682:	08db      	lsrs	r3, r3, #3
 8006684:	f003 0303 	and.w	r3, r3, #3
 8006688:	005b      	lsls	r3, r3, #1
 800668a:	fa02 f303 	lsl.w	r3, r2, r3
 800668e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	691b      	ldr	r3, [r3, #16]
 8006696:	2b04      	cmp	r3, #4
 8006698:	d022      	beq.n	80066e0 <HAL_ADC_ConfigChannel+0x140>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6818      	ldr	r0, [r3, #0]
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	6919      	ldr	r1, [r3, #16]
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80066aa:	f7ff fa0b 	bl	8005ac4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6818      	ldr	r0, [r3, #0]
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	6919      	ldr	r1, [r3, #16]
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	699b      	ldr	r3, [r3, #24]
 80066ba:	461a      	mov	r2, r3
 80066bc:	f7ff fa57 	bl	8005b6e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6818      	ldr	r0, [r3, #0]
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d102      	bne.n	80066d6 <HAL_ADC_ConfigChannel+0x136>
 80066d0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80066d4:	e000      	b.n	80066d8 <HAL_ADC_ConfigChannel+0x138>
 80066d6:	2300      	movs	r3, #0
 80066d8:	461a      	mov	r2, r3
 80066da:	f7ff fa63 	bl	8005ba4 <LL_ADC_SetOffsetSaturation>
 80066de:	e17b      	b.n	80069d8 <HAL_ADC_ConfigChannel+0x438>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	2100      	movs	r1, #0
 80066e6:	4618      	mov	r0, r3
 80066e8:	f7ff fa10 	bl	8005b0c <LL_ADC_GetOffsetChannel>
 80066ec:	4603      	mov	r3, r0
 80066ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d10a      	bne.n	800670c <HAL_ADC_ConfigChannel+0x16c>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	2100      	movs	r1, #0
 80066fc:	4618      	mov	r0, r3
 80066fe:	f7ff fa05 	bl	8005b0c <LL_ADC_GetOffsetChannel>
 8006702:	4603      	mov	r3, r0
 8006704:	0e9b      	lsrs	r3, r3, #26
 8006706:	f003 021f 	and.w	r2, r3, #31
 800670a:	e01e      	b.n	800674a <HAL_ADC_ConfigChannel+0x1aa>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	2100      	movs	r1, #0
 8006712:	4618      	mov	r0, r3
 8006714:	f7ff f9fa 	bl	8005b0c <LL_ADC_GetOffsetChannel>
 8006718:	4603      	mov	r3, r0
 800671a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800671e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006722:	fa93 f3a3 	rbit	r3, r3
 8006726:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  return result;
 800672a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800672e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  if (value == 0U)
 8006732:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006736:	2b00      	cmp	r3, #0
 8006738:	d101      	bne.n	800673e <HAL_ADC_ConfigChannel+0x19e>
    return 32U;
 800673a:	2320      	movs	r3, #32
 800673c:	e004      	b.n	8006748 <HAL_ADC_ConfigChannel+0x1a8>
  return __builtin_clz(value);
 800673e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006742:	fab3 f383 	clz	r3, r3
 8006746:	b2db      	uxtb	r3, r3
 8006748:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006752:	2b00      	cmp	r3, #0
 8006754:	d105      	bne.n	8006762 <HAL_ADC_ConfigChannel+0x1c2>
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	0e9b      	lsrs	r3, r3, #26
 800675c:	f003 031f 	and.w	r3, r3, #31
 8006760:	e018      	b.n	8006794 <HAL_ADC_ConfigChannel+0x1f4>
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800676a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800676e:	fa93 f3a3 	rbit	r3, r3
 8006772:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8006776:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800677a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800677e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006782:	2b00      	cmp	r3, #0
 8006784:	d101      	bne.n	800678a <HAL_ADC_ConfigChannel+0x1ea>
    return 32U;
 8006786:	2320      	movs	r3, #32
 8006788:	e004      	b.n	8006794 <HAL_ADC_ConfigChannel+0x1f4>
  return __builtin_clz(value);
 800678a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800678e:	fab3 f383 	clz	r3, r3
 8006792:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006794:	429a      	cmp	r2, r3
 8006796:	d106      	bne.n	80067a6 <HAL_ADC_ConfigChannel+0x206>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	2200      	movs	r2, #0
 800679e:	2100      	movs	r1, #0
 80067a0:	4618      	mov	r0, r3
 80067a2:	f7ff f9c9 	bl	8005b38 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	2101      	movs	r1, #1
 80067ac:	4618      	mov	r0, r3
 80067ae:	f7ff f9ad 	bl	8005b0c <LL_ADC_GetOffsetChannel>
 80067b2:	4603      	mov	r3, r0
 80067b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d10a      	bne.n	80067d2 <HAL_ADC_ConfigChannel+0x232>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	2101      	movs	r1, #1
 80067c2:	4618      	mov	r0, r3
 80067c4:	f7ff f9a2 	bl	8005b0c <LL_ADC_GetOffsetChannel>
 80067c8:	4603      	mov	r3, r0
 80067ca:	0e9b      	lsrs	r3, r3, #26
 80067cc:	f003 021f 	and.w	r2, r3, #31
 80067d0:	e01e      	b.n	8006810 <HAL_ADC_ConfigChannel+0x270>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	2101      	movs	r1, #1
 80067d8:	4618      	mov	r0, r3
 80067da:	f7ff f997 	bl	8005b0c <LL_ADC_GetOffsetChannel>
 80067de:	4603      	mov	r3, r0
 80067e0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067e4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80067e8:	fa93 f3a3 	rbit	r3, r3
 80067ec:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80067f0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80067f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80067f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d101      	bne.n	8006804 <HAL_ADC_ConfigChannel+0x264>
    return 32U;
 8006800:	2320      	movs	r3, #32
 8006802:	e004      	b.n	800680e <HAL_ADC_ConfigChannel+0x26e>
  return __builtin_clz(value);
 8006804:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006808:	fab3 f383 	clz	r3, r3
 800680c:	b2db      	uxtb	r3, r3
 800680e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006818:	2b00      	cmp	r3, #0
 800681a:	d105      	bne.n	8006828 <HAL_ADC_ConfigChannel+0x288>
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	0e9b      	lsrs	r3, r3, #26
 8006822:	f003 031f 	and.w	r3, r3, #31
 8006826:	e018      	b.n	800685a <HAL_ADC_ConfigChannel+0x2ba>
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006830:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006834:	fa93 f3a3 	rbit	r3, r3
 8006838:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800683c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006840:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8006844:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006848:	2b00      	cmp	r3, #0
 800684a:	d101      	bne.n	8006850 <HAL_ADC_ConfigChannel+0x2b0>
    return 32U;
 800684c:	2320      	movs	r3, #32
 800684e:	e004      	b.n	800685a <HAL_ADC_ConfigChannel+0x2ba>
  return __builtin_clz(value);
 8006850:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006854:	fab3 f383 	clz	r3, r3
 8006858:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800685a:	429a      	cmp	r2, r3
 800685c:	d106      	bne.n	800686c <HAL_ADC_ConfigChannel+0x2cc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	2200      	movs	r2, #0
 8006864:	2101      	movs	r1, #1
 8006866:	4618      	mov	r0, r3
 8006868:	f7ff f966 	bl	8005b38 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	2102      	movs	r1, #2
 8006872:	4618      	mov	r0, r3
 8006874:	f7ff f94a 	bl	8005b0c <LL_ADC_GetOffsetChannel>
 8006878:	4603      	mov	r3, r0
 800687a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800687e:	2b00      	cmp	r3, #0
 8006880:	d10a      	bne.n	8006898 <HAL_ADC_ConfigChannel+0x2f8>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	2102      	movs	r1, #2
 8006888:	4618      	mov	r0, r3
 800688a:	f7ff f93f 	bl	8005b0c <LL_ADC_GetOffsetChannel>
 800688e:	4603      	mov	r3, r0
 8006890:	0e9b      	lsrs	r3, r3, #26
 8006892:	f003 021f 	and.w	r2, r3, #31
 8006896:	e01e      	b.n	80068d6 <HAL_ADC_ConfigChannel+0x336>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	2102      	movs	r1, #2
 800689e:	4618      	mov	r0, r3
 80068a0:	f7ff f934 	bl	8005b0c <LL_ADC_GetOffsetChannel>
 80068a4:	4603      	mov	r3, r0
 80068a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80068ae:	fa93 f3a3 	rbit	r3, r3
 80068b2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80068b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80068ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80068be:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d101      	bne.n	80068ca <HAL_ADC_ConfigChannel+0x32a>
    return 32U;
 80068c6:	2320      	movs	r3, #32
 80068c8:	e004      	b.n	80068d4 <HAL_ADC_ConfigChannel+0x334>
  return __builtin_clz(value);
 80068ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80068ce:	fab3 f383 	clz	r3, r3
 80068d2:	b2db      	uxtb	r3, r3
 80068d4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d105      	bne.n	80068ee <HAL_ADC_ConfigChannel+0x34e>
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	0e9b      	lsrs	r3, r3, #26
 80068e8:	f003 031f 	and.w	r3, r3, #31
 80068ec:	e016      	b.n	800691c <HAL_ADC_ConfigChannel+0x37c>
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80068fa:	fa93 f3a3 	rbit	r3, r3
 80068fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8006900:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006902:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8006906:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800690a:	2b00      	cmp	r3, #0
 800690c:	d101      	bne.n	8006912 <HAL_ADC_ConfigChannel+0x372>
    return 32U;
 800690e:	2320      	movs	r3, #32
 8006910:	e004      	b.n	800691c <HAL_ADC_ConfigChannel+0x37c>
  return __builtin_clz(value);
 8006912:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006916:	fab3 f383 	clz	r3, r3
 800691a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800691c:	429a      	cmp	r2, r3
 800691e:	d106      	bne.n	800692e <HAL_ADC_ConfigChannel+0x38e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	2200      	movs	r2, #0
 8006926:	2102      	movs	r1, #2
 8006928:	4618      	mov	r0, r3
 800692a:	f7ff f905 	bl	8005b38 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	2103      	movs	r1, #3
 8006934:	4618      	mov	r0, r3
 8006936:	f7ff f8e9 	bl	8005b0c <LL_ADC_GetOffsetChannel>
 800693a:	4603      	mov	r3, r0
 800693c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006940:	2b00      	cmp	r3, #0
 8006942:	d10a      	bne.n	800695a <HAL_ADC_ConfigChannel+0x3ba>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	2103      	movs	r1, #3
 800694a:	4618      	mov	r0, r3
 800694c:	f7ff f8de 	bl	8005b0c <LL_ADC_GetOffsetChannel>
 8006950:	4603      	mov	r3, r0
 8006952:	0e9b      	lsrs	r3, r3, #26
 8006954:	f003 021f 	and.w	r2, r3, #31
 8006958:	e017      	b.n	800698a <HAL_ADC_ConfigChannel+0x3ea>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	2103      	movs	r1, #3
 8006960:	4618      	mov	r0, r3
 8006962:	f7ff f8d3 	bl	8005b0c <LL_ADC_GetOffsetChannel>
 8006966:	4603      	mov	r3, r0
 8006968:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800696a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800696c:	fa93 f3a3 	rbit	r3, r3
 8006970:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8006972:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006974:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8006976:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006978:	2b00      	cmp	r3, #0
 800697a:	d101      	bne.n	8006980 <HAL_ADC_ConfigChannel+0x3e0>
    return 32U;
 800697c:	2320      	movs	r3, #32
 800697e:	e003      	b.n	8006988 <HAL_ADC_ConfigChannel+0x3e8>
  return __builtin_clz(value);
 8006980:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006982:	fab3 f383 	clz	r3, r3
 8006986:	b2db      	uxtb	r3, r3
 8006988:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006992:	2b00      	cmp	r3, #0
 8006994:	d105      	bne.n	80069a2 <HAL_ADC_ConfigChannel+0x402>
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	0e9b      	lsrs	r3, r3, #26
 800699c:	f003 031f 	and.w	r3, r3, #31
 80069a0:	e011      	b.n	80069c6 <HAL_ADC_ConfigChannel+0x426>
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80069aa:	fa93 f3a3 	rbit	r3, r3
 80069ae:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80069b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80069b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80069b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d101      	bne.n	80069be <HAL_ADC_ConfigChannel+0x41e>
    return 32U;
 80069ba:	2320      	movs	r3, #32
 80069bc:	e003      	b.n	80069c6 <HAL_ADC_ConfigChannel+0x426>
  return __builtin_clz(value);
 80069be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80069c0:	fab3 f383 	clz	r3, r3
 80069c4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80069c6:	429a      	cmp	r2, r3
 80069c8:	d106      	bne.n	80069d8 <HAL_ADC_ConfigChannel+0x438>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	2200      	movs	r2, #0
 80069d0:	2103      	movs	r1, #3
 80069d2:	4618      	mov	r0, r3
 80069d4:	f7ff f8b0 	bl	8005b38 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4618      	mov	r0, r3
 80069de:	f7ff fa2f 	bl	8005e40 <LL_ADC_IsEnabled>
 80069e2:	4603      	mov	r3, r0
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	f040 813f 	bne.w	8006c68 <HAL_ADC_ConfigChannel+0x6c8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6818      	ldr	r0, [r3, #0]
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	6819      	ldr	r1, [r3, #0]
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	68db      	ldr	r3, [r3, #12]
 80069f6:	461a      	mov	r2, r3
 80069f8:	f7ff f96c 	bl	8005cd4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	68db      	ldr	r3, [r3, #12]
 8006a00:	4a8e      	ldr	r2, [pc, #568]	@ (8006c3c <HAL_ADC_ConfigChannel+0x69c>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	f040 8130 	bne.w	8006c68 <HAL_ADC_ConfigChannel+0x6c8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d10b      	bne.n	8006a30 <HAL_ADC_ConfigChannel+0x490>
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	0e9b      	lsrs	r3, r3, #26
 8006a1e:	3301      	adds	r3, #1
 8006a20:	f003 031f 	and.w	r3, r3, #31
 8006a24:	2b09      	cmp	r3, #9
 8006a26:	bf94      	ite	ls
 8006a28:	2301      	movls	r3, #1
 8006a2a:	2300      	movhi	r3, #0
 8006a2c:	b2db      	uxtb	r3, r3
 8006a2e:	e019      	b.n	8006a64 <HAL_ADC_ConfigChannel+0x4c4>
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006a38:	fa93 f3a3 	rbit	r3, r3
 8006a3c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8006a3e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006a40:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8006a42:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d101      	bne.n	8006a4c <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8006a48:	2320      	movs	r3, #32
 8006a4a:	e003      	b.n	8006a54 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8006a4c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006a4e:	fab3 f383 	clz	r3, r3
 8006a52:	b2db      	uxtb	r3, r3
 8006a54:	3301      	adds	r3, #1
 8006a56:	f003 031f 	and.w	r3, r3, #31
 8006a5a:	2b09      	cmp	r3, #9
 8006a5c:	bf94      	ite	ls
 8006a5e:	2301      	movls	r3, #1
 8006a60:	2300      	movhi	r3, #0
 8006a62:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d079      	beq.n	8006b5c <HAL_ADC_ConfigChannel+0x5bc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d107      	bne.n	8006a84 <HAL_ADC_ConfigChannel+0x4e4>
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	0e9b      	lsrs	r3, r3, #26
 8006a7a:	3301      	adds	r3, #1
 8006a7c:	069b      	lsls	r3, r3, #26
 8006a7e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006a82:	e015      	b.n	8006ab0 <HAL_ADC_ConfigChannel+0x510>
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a8c:	fa93 f3a3 	rbit	r3, r3
 8006a90:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8006a92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a94:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8006a96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d101      	bne.n	8006aa0 <HAL_ADC_ConfigChannel+0x500>
    return 32U;
 8006a9c:	2320      	movs	r3, #32
 8006a9e:	e003      	b.n	8006aa8 <HAL_ADC_ConfigChannel+0x508>
  return __builtin_clz(value);
 8006aa0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006aa2:	fab3 f383 	clz	r3, r3
 8006aa6:	b2db      	uxtb	r3, r3
 8006aa8:	3301      	adds	r3, #1
 8006aaa:	069b      	lsls	r3, r3, #26
 8006aac:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d109      	bne.n	8006ad0 <HAL_ADC_ConfigChannel+0x530>
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	0e9b      	lsrs	r3, r3, #26
 8006ac2:	3301      	adds	r3, #1
 8006ac4:	f003 031f 	and.w	r3, r3, #31
 8006ac8:	2101      	movs	r1, #1
 8006aca:	fa01 f303 	lsl.w	r3, r1, r3
 8006ace:	e017      	b.n	8006b00 <HAL_ADC_ConfigChannel+0x560>
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ad6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ad8:	fa93 f3a3 	rbit	r3, r3
 8006adc:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8006ade:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ae0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8006ae2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d101      	bne.n	8006aec <HAL_ADC_ConfigChannel+0x54c>
    return 32U;
 8006ae8:	2320      	movs	r3, #32
 8006aea:	e003      	b.n	8006af4 <HAL_ADC_ConfigChannel+0x554>
  return __builtin_clz(value);
 8006aec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006aee:	fab3 f383 	clz	r3, r3
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	3301      	adds	r3, #1
 8006af6:	f003 031f 	and.w	r3, r3, #31
 8006afa:	2101      	movs	r1, #1
 8006afc:	fa01 f303 	lsl.w	r3, r1, r3
 8006b00:	ea42 0103 	orr.w	r1, r2, r3
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d10a      	bne.n	8006b26 <HAL_ADC_ConfigChannel+0x586>
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	0e9b      	lsrs	r3, r3, #26
 8006b16:	3301      	adds	r3, #1
 8006b18:	f003 021f 	and.w	r2, r3, #31
 8006b1c:	4613      	mov	r3, r2
 8006b1e:	005b      	lsls	r3, r3, #1
 8006b20:	4413      	add	r3, r2
 8006b22:	051b      	lsls	r3, r3, #20
 8006b24:	e018      	b.n	8006b58 <HAL_ADC_ConfigChannel+0x5b8>
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b2e:	fa93 f3a3 	rbit	r3, r3
 8006b32:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8006b34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b36:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8006b38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d101      	bne.n	8006b42 <HAL_ADC_ConfigChannel+0x5a2>
    return 32U;
 8006b3e:	2320      	movs	r3, #32
 8006b40:	e003      	b.n	8006b4a <HAL_ADC_ConfigChannel+0x5aa>
  return __builtin_clz(value);
 8006b42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b44:	fab3 f383 	clz	r3, r3
 8006b48:	b2db      	uxtb	r3, r3
 8006b4a:	3301      	adds	r3, #1
 8006b4c:	f003 021f 	and.w	r2, r3, #31
 8006b50:	4613      	mov	r3, r2
 8006b52:	005b      	lsls	r3, r3, #1
 8006b54:	4413      	add	r3, r2
 8006b56:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006b58:	430b      	orrs	r3, r1
 8006b5a:	e080      	b.n	8006c5e <HAL_ADC_ConfigChannel+0x6be>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d107      	bne.n	8006b78 <HAL_ADC_ConfigChannel+0x5d8>
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	0e9b      	lsrs	r3, r3, #26
 8006b6e:	3301      	adds	r3, #1
 8006b70:	069b      	lsls	r3, r3, #26
 8006b72:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006b76:	e015      	b.n	8006ba4 <HAL_ADC_ConfigChannel+0x604>
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b80:	fa93 f3a3 	rbit	r3, r3
 8006b84:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8006b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b88:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8006b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d101      	bne.n	8006b94 <HAL_ADC_ConfigChannel+0x5f4>
    return 32U;
 8006b90:	2320      	movs	r3, #32
 8006b92:	e003      	b.n	8006b9c <HAL_ADC_ConfigChannel+0x5fc>
  return __builtin_clz(value);
 8006b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b96:	fab3 f383 	clz	r3, r3
 8006b9a:	b2db      	uxtb	r3, r3
 8006b9c:	3301      	adds	r3, #1
 8006b9e:	069b      	lsls	r3, r3, #26
 8006ba0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d109      	bne.n	8006bc4 <HAL_ADC_ConfigChannel+0x624>
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	0e9b      	lsrs	r3, r3, #26
 8006bb6:	3301      	adds	r3, #1
 8006bb8:	f003 031f 	and.w	r3, r3, #31
 8006bbc:	2101      	movs	r1, #1
 8006bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8006bc2:	e017      	b.n	8006bf4 <HAL_ADC_ConfigChannel+0x654>
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bca:	6a3b      	ldr	r3, [r7, #32]
 8006bcc:	fa93 f3a3 	rbit	r3, r3
 8006bd0:	61fb      	str	r3, [r7, #28]
  return result;
 8006bd2:	69fb      	ldr	r3, [r7, #28]
 8006bd4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8006bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d101      	bne.n	8006be0 <HAL_ADC_ConfigChannel+0x640>
    return 32U;
 8006bdc:	2320      	movs	r3, #32
 8006bde:	e003      	b.n	8006be8 <HAL_ADC_ConfigChannel+0x648>
  return __builtin_clz(value);
 8006be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be2:	fab3 f383 	clz	r3, r3
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	3301      	adds	r3, #1
 8006bea:	f003 031f 	and.w	r3, r3, #31
 8006bee:	2101      	movs	r1, #1
 8006bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8006bf4:	ea42 0103 	orr.w	r1, r2, r3
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d10d      	bne.n	8006c20 <HAL_ADC_ConfigChannel+0x680>
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	0e9b      	lsrs	r3, r3, #26
 8006c0a:	3301      	adds	r3, #1
 8006c0c:	f003 021f 	and.w	r2, r3, #31
 8006c10:	4613      	mov	r3, r2
 8006c12:	005b      	lsls	r3, r3, #1
 8006c14:	4413      	add	r3, r2
 8006c16:	3b1e      	subs	r3, #30
 8006c18:	051b      	lsls	r3, r3, #20
 8006c1a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006c1e:	e01d      	b.n	8006c5c <HAL_ADC_ConfigChannel+0x6bc>
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	fa93 f3a3 	rbit	r3, r3
 8006c2c:	613b      	str	r3, [r7, #16]
  return result;
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006c32:	69bb      	ldr	r3, [r7, #24]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d103      	bne.n	8006c40 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8006c38:	2320      	movs	r3, #32
 8006c3a:	e005      	b.n	8006c48 <HAL_ADC_ConfigChannel+0x6a8>
 8006c3c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8006c40:	69bb      	ldr	r3, [r7, #24]
 8006c42:	fab3 f383 	clz	r3, r3
 8006c46:	b2db      	uxtb	r3, r3
 8006c48:	3301      	adds	r3, #1
 8006c4a:	f003 021f 	and.w	r2, r3, #31
 8006c4e:	4613      	mov	r3, r2
 8006c50:	005b      	lsls	r3, r3, #1
 8006c52:	4413      	add	r3, r2
 8006c54:	3b1e      	subs	r3, #30
 8006c56:	051b      	lsls	r3, r3, #20
 8006c58:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006c5c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8006c5e:	683a      	ldr	r2, [r7, #0]
 8006c60:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006c62:	4619      	mov	r1, r3
 8006c64:	f7ff f80b 	bl	8005c7e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	681a      	ldr	r2, [r3, #0]
 8006c6c:	4b43      	ldr	r3, [pc, #268]	@ (8006d7c <HAL_ADC_ConfigChannel+0x7dc>)
 8006c6e:	4013      	ands	r3, r2
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d079      	beq.n	8006d68 <HAL_ADC_ConfigChannel+0x7c8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006c74:	4842      	ldr	r0, [pc, #264]	@ (8006d80 <HAL_ADC_ConfigChannel+0x7e0>)
 8006c76:	f7fe fef1 	bl	8005a5c <LL_ADC_GetCommonPathInternalCh>
 8006c7a:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a40      	ldr	r2, [pc, #256]	@ (8006d84 <HAL_ADC_ConfigChannel+0x7e4>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d124      	bne.n	8006cd2 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006c88:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006c8c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d11e      	bne.n	8006cd2 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a3b      	ldr	r2, [pc, #236]	@ (8006d88 <HAL_ADC_ConfigChannel+0x7e8>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d164      	bne.n	8006d68 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006c9e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006ca2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006ca6:	4619      	mov	r1, r3
 8006ca8:	4835      	ldr	r0, [pc, #212]	@ (8006d80 <HAL_ADC_ConfigChannel+0x7e0>)
 8006caa:	f7fe fec4 	bl	8005a36 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006cae:	4b37      	ldr	r3, [pc, #220]	@ (8006d8c <HAL_ADC_ConfigChannel+0x7ec>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	099b      	lsrs	r3, r3, #6
 8006cb4:	4a36      	ldr	r2, [pc, #216]	@ (8006d90 <HAL_ADC_ConfigChannel+0x7f0>)
 8006cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8006cba:	099b      	lsrs	r3, r3, #6
 8006cbc:	3301      	adds	r3, #1
 8006cbe:	005b      	lsls	r3, r3, #1
 8006cc0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006cc2:	e002      	b.n	8006cca <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	3b01      	subs	r3, #1
 8006cc8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d1f9      	bne.n	8006cc4 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006cd0:	e04a      	b.n	8006d68 <HAL_ADC_ConfigChannel+0x7c8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a2f      	ldr	r2, [pc, #188]	@ (8006d94 <HAL_ADC_ConfigChannel+0x7f4>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d113      	bne.n	8006d04 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006cdc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006ce0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d10d      	bne.n	8006d04 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a2a      	ldr	r2, [pc, #168]	@ (8006d98 <HAL_ADC_ConfigChannel+0x7f8>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d13a      	bne.n	8006d68 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006cf2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006cf6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006cfa:	4619      	mov	r1, r3
 8006cfc:	4820      	ldr	r0, [pc, #128]	@ (8006d80 <HAL_ADC_ConfigChannel+0x7e0>)
 8006cfe:	f7fe fe9a 	bl	8005a36 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006d02:	e031      	b.n	8006d68 <HAL_ADC_ConfigChannel+0x7c8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a24      	ldr	r2, [pc, #144]	@ (8006d9c <HAL_ADC_ConfigChannel+0x7fc>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d113      	bne.n	8006d36 <HAL_ADC_ConfigChannel+0x796>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006d0e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006d12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d10d      	bne.n	8006d36 <HAL_ADC_ConfigChannel+0x796>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a1a      	ldr	r2, [pc, #104]	@ (8006d88 <HAL_ADC_ConfigChannel+0x7e8>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d121      	bne.n	8006d68 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006d24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006d28:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006d2c:	4619      	mov	r1, r3
 8006d2e:	4814      	ldr	r0, [pc, #80]	@ (8006d80 <HAL_ADC_ConfigChannel+0x7e0>)
 8006d30:	f7fe fe81 	bl	8005a36 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_VREFINT_INSTANCE(hadc))
 8006d34:	e018      	b.n	8006d68 <HAL_ADC_ConfigChannel+0x7c8>
                                         LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
        }
      }
      else if (pConfig->Channel == ADC_CHANNEL_VDDCORE)
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a19      	ldr	r2, [pc, #100]	@ (8006da0 <HAL_ADC_ConfigChannel+0x800>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d113      	bne.n	8006d68 <HAL_ADC_ConfigChannel+0x7c8>
      {
        if (ADC_VDDCORE_INSTANCE(hadc))
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a10      	ldr	r2, [pc, #64]	@ (8006d88 <HAL_ADC_ConfigChannel+0x7e8>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d00e      	beq.n	8006d68 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_EnableChannelVDDcore(hadc->Instance);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f7fe fe92 	bl	8005a78 <LL_ADC_EnableChannelVDDcore>
 8006d54:	e008      	b.n	8006d68 <HAL_ADC_ConfigChannel+0x7c8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d5a:	f043 0220 	orr.w	r2, r3, #32
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8006d70:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	37d8      	adds	r7, #216	@ 0xd8
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}
 8006d7c:	80080000 	.word	0x80080000
 8006d80:	42028300 	.word	0x42028300
 8006d84:	c3210000 	.word	0xc3210000
 8006d88:	42028000 	.word	0x42028000
 8006d8c:	20000074 	.word	0x20000074
 8006d90:	053e2d63 	.word	0x053e2d63
 8006d94:	43290000 	.word	0x43290000
 8006d98:	42028100 	.word	0x42028100
 8006d9c:	c7520000 	.word	0xc7520000
 8006da0:	475a0000 	.word	0x475a0000

08006da4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b088      	sub	sp, #32
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8006dae:	2300      	movs	r3, #0
 8006db0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f7ff f88e 	bl	8005edc <LL_ADC_REG_IsConversionOngoing>
 8006dc0:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f7ff f8af 	bl	8005f2a <LL_ADC_INJ_IsConversionOngoing>
 8006dcc:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d103      	bne.n	8006ddc <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	f000 8098 	beq.w	8006f0c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	68db      	ldr	r3, [r3, #12]
 8006de2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d02a      	beq.n	8006e40 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	7e5b      	ldrb	r3, [r3, #25]
 8006dee:	2b01      	cmp	r3, #1
 8006df0:	d126      	bne.n	8006e40 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	7e1b      	ldrb	r3, [r3, #24]
 8006df6:	2b01      	cmp	r3, #1
 8006df8:	d122      	bne.n	8006e40 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8006dfe:	e014      	b.n	8006e2a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8006e00:	69fb      	ldr	r3, [r7, #28]
 8006e02:	4a45      	ldr	r2, [pc, #276]	@ (8006f18 <ADC_ConversionStop+0x174>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d90d      	bls.n	8006e24 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e0c:	f043 0210 	orr.w	r2, r3, #16
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e18:	f043 0201 	orr.w	r2, r3, #1
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8006e20:	2301      	movs	r3, #1
 8006e22:	e074      	b.n	8006f0e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8006e24:	69fb      	ldr	r3, [r7, #28]
 8006e26:	3301      	adds	r3, #1
 8006e28:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e34:	2b40      	cmp	r3, #64	@ 0x40
 8006e36:	d1e3      	bne.n	8006e00 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	2240      	movs	r2, #64	@ 0x40
 8006e3e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8006e40:	69bb      	ldr	r3, [r7, #24]
 8006e42:	2b02      	cmp	r3, #2
 8006e44:	d014      	beq.n	8006e70 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f7ff f846 	bl	8005edc <LL_ADC_REG_IsConversionOngoing>
 8006e50:	4603      	mov	r3, r0
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d00c      	beq.n	8006e70 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f7ff f803 	bl	8005e66 <LL_ADC_IsDisableOngoing>
 8006e60:	4603      	mov	r3, r0
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d104      	bne.n	8006e70 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f7ff f822 	bl	8005eb4 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8006e70:	69bb      	ldr	r3, [r7, #24]
 8006e72:	2b01      	cmp	r3, #1
 8006e74:	d014      	beq.n	8006ea0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f7ff f855 	bl	8005f2a <LL_ADC_INJ_IsConversionOngoing>
 8006e80:	4603      	mov	r3, r0
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d00c      	beq.n	8006ea0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f7fe ffeb 	bl	8005e66 <LL_ADC_IsDisableOngoing>
 8006e90:	4603      	mov	r3, r0
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d104      	bne.n	8006ea0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f7ff f831 	bl	8005f02 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8006ea0:	69bb      	ldr	r3, [r7, #24]
 8006ea2:	2b02      	cmp	r3, #2
 8006ea4:	d005      	beq.n	8006eb2 <ADC_ConversionStop+0x10e>
 8006ea6:	69bb      	ldr	r3, [r7, #24]
 8006ea8:	2b03      	cmp	r3, #3
 8006eaa:	d105      	bne.n	8006eb8 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8006eac:	230c      	movs	r3, #12
 8006eae:	617b      	str	r3, [r7, #20]
        break;
 8006eb0:	e005      	b.n	8006ebe <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8006eb2:	2308      	movs	r3, #8
 8006eb4:	617b      	str	r3, [r7, #20]
        break;
 8006eb6:	e002      	b.n	8006ebe <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8006eb8:	2304      	movs	r3, #4
 8006eba:	617b      	str	r3, [r7, #20]
        break;
 8006ebc:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8006ebe:	f7fe fd77 	bl	80059b0 <HAL_GetTick>
 8006ec2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8006ec4:	e01b      	b.n	8006efe <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8006ec6:	f7fe fd73 	bl	80059b0 <HAL_GetTick>
 8006eca:	4602      	mov	r2, r0
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	1ad3      	subs	r3, r2, r3
 8006ed0:	2b05      	cmp	r3, #5
 8006ed2:	d914      	bls.n	8006efe <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	689a      	ldr	r2, [r3, #8]
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	4013      	ands	r3, r2
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d00d      	beq.n	8006efe <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ee6:	f043 0210 	orr.w	r2, r3, #16
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ef2:	f043 0201 	orr.w	r2, r3, #1
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8006efa:	2301      	movs	r3, #1
 8006efc:	e007      	b.n	8006f0e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	689a      	ldr	r2, [r3, #8]
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	4013      	ands	r3, r2
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d1dc      	bne.n	8006ec6 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8006f0c:	2300      	movs	r3, #0
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3720      	adds	r7, #32
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}
 8006f16:	bf00      	nop
 8006f18:	a33fffff 	.word	0xa33fffff

08006f1c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b084      	sub	sp, #16
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8006f24:	2300      	movs	r3, #0
 8006f26:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f7fe ff87 	bl	8005e40 <LL_ADC_IsEnabled>
 8006f32:	4603      	mov	r3, r0
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d166      	bne.n	8007006 <ADC_Enable+0xea>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	689a      	ldr	r2, [r3, #8]
 8006f3e:	4b34      	ldr	r3, [pc, #208]	@ (8007010 <ADC_Enable+0xf4>)
 8006f40:	4013      	ands	r3, r2
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d00d      	beq.n	8006f62 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f4a:	f043 0210 	orr.w	r2, r3, #16
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f56:	f043 0201 	orr.w	r2, r3, #1
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	e052      	b.n	8007008 <ADC_Enable+0xec>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4618      	mov	r0, r3
 8006f68:	f7fe ff42 	bl	8005df0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8006f6c:	4829      	ldr	r0, [pc, #164]	@ (8007014 <ADC_Enable+0xf8>)
 8006f6e:	f7fe fd75 	bl	8005a5c <LL_ADC_GetCommonPathInternalCh>
 8006f72:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8006f74:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d010      	beq.n	8006f9e <ADC_Enable+0x82>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006f7c:	4b26      	ldr	r3, [pc, #152]	@ (8007018 <ADC_Enable+0xfc>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	099b      	lsrs	r3, r3, #6
 8006f82:	4a26      	ldr	r2, [pc, #152]	@ (800701c <ADC_Enable+0x100>)
 8006f84:	fba2 2303 	umull	r2, r3, r2, r3
 8006f88:	099b      	lsrs	r3, r3, #6
 8006f8a:	3301      	adds	r3, #1
 8006f8c:	005b      	lsls	r3, r3, #1
 8006f8e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006f90:	e002      	b.n	8006f98 <ADC_Enable+0x7c>
      {
        wait_loop_index--;
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	3b01      	subs	r3, #1
 8006f96:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d1f9      	bne.n	8006f92 <ADC_Enable+0x76>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006f9e:	f7fe fd07 	bl	80059b0 <HAL_GetTick>
 8006fa2:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006fa4:	e028      	b.n	8006ff8 <ADC_Enable+0xdc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4618      	mov	r0, r3
 8006fac:	f7fe ff48 	bl	8005e40 <LL_ADC_IsEnabled>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d104      	bne.n	8006fc0 <ADC_Enable+0xa4>
      {
        LL_ADC_Enable(hadc->Instance);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f7fe ff18 	bl	8005df0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006fc0:	f7fe fcf6 	bl	80059b0 <HAL_GetTick>
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	1ad3      	subs	r3, r2, r3
 8006fca:	2b02      	cmp	r3, #2
 8006fcc:	d914      	bls.n	8006ff8 <ADC_Enable+0xdc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f003 0301 	and.w	r3, r3, #1
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d00d      	beq.n	8006ff8 <ADC_Enable+0xdc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fe0:	f043 0210 	orr.w	r2, r3, #16
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006fec:	f043 0201 	orr.w	r2, r3, #1
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	e007      	b.n	8007008 <ADC_Enable+0xec>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f003 0301 	and.w	r3, r3, #1
 8007002:	2b01      	cmp	r3, #1
 8007004:	d1cf      	bne.n	8006fa6 <ADC_Enable+0x8a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007006:	2300      	movs	r3, #0
}
 8007008:	4618      	mov	r0, r3
 800700a:	3710      	adds	r7, #16
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}
 8007010:	8000003f 	.word	0x8000003f
 8007014:	42028300 	.word	0x42028300
 8007018:	20000074 	.word	0x20000074
 800701c:	053e2d63 	.word	0x053e2d63

08007020 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b084      	sub	sp, #16
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4618      	mov	r0, r3
 800702e:	f7fe ff1a 	bl	8005e66 <LL_ADC_IsDisableOngoing>
 8007032:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4618      	mov	r0, r3
 800703a:	f7fe ff01 	bl	8005e40 <LL_ADC_IsEnabled>
 800703e:	4603      	mov	r3, r0
 8007040:	2b00      	cmp	r3, #0
 8007042:	d047      	beq.n	80070d4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d144      	bne.n	80070d4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	f003 030d 	and.w	r3, r3, #13
 8007054:	2b01      	cmp	r3, #1
 8007056:	d10c      	bne.n	8007072 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4618      	mov	r0, r3
 800705e:	f7fe fedb 	bl	8005e18 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	2203      	movs	r2, #3
 8007068:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800706a:	f7fe fca1 	bl	80059b0 <HAL_GetTick>
 800706e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007070:	e029      	b.n	80070c6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007076:	f043 0210 	orr.w	r2, r3, #16
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007082:	f043 0201 	orr.w	r2, r3, #1
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 800708a:	2301      	movs	r3, #1
 800708c:	e023      	b.n	80070d6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800708e:	f7fe fc8f 	bl	80059b0 <HAL_GetTick>
 8007092:	4602      	mov	r2, r0
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	1ad3      	subs	r3, r2, r3
 8007098:	2b02      	cmp	r3, #2
 800709a:	d914      	bls.n	80070c6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	f003 0301 	and.w	r3, r3, #1
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d00d      	beq.n	80070c6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070ae:	f043 0210 	orr.w	r2, r3, #16
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070ba:	f043 0201 	orr.w	r2, r3, #1
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80070c2:	2301      	movs	r3, #1
 80070c4:	e007      	b.n	80070d6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	689b      	ldr	r3, [r3, #8]
 80070cc:	f003 0301 	and.w	r3, r3, #1
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d1dc      	bne.n	800708e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80070d4:	2300      	movs	r3, #0
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3710      	adds	r7, #16
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}
	...

080070e0 <__NVIC_SetPriorityGrouping>:
{
 80070e0:	b480      	push	{r7}
 80070e2:	b085      	sub	sp, #20
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f003 0307 	and.w	r3, r3, #7
 80070ee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80070f0:	4b0c      	ldr	r3, [pc, #48]	@ (8007124 <__NVIC_SetPriorityGrouping+0x44>)
 80070f2:	68db      	ldr	r3, [r3, #12]
 80070f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80070f6:	68ba      	ldr	r2, [r7, #8]
 80070f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80070fc:	4013      	ands	r3, r2
 80070fe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007108:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800710c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007110:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007112:	4a04      	ldr	r2, [pc, #16]	@ (8007124 <__NVIC_SetPriorityGrouping+0x44>)
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	60d3      	str	r3, [r2, #12]
}
 8007118:	bf00      	nop
 800711a:	3714      	adds	r7, #20
 800711c:	46bd      	mov	sp, r7
 800711e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007122:	4770      	bx	lr
 8007124:	e000ed00 	.word	0xe000ed00

08007128 <__NVIC_GetPriorityGrouping>:
{
 8007128:	b480      	push	{r7}
 800712a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800712c:	4b04      	ldr	r3, [pc, #16]	@ (8007140 <__NVIC_GetPriorityGrouping+0x18>)
 800712e:	68db      	ldr	r3, [r3, #12]
 8007130:	0a1b      	lsrs	r3, r3, #8
 8007132:	f003 0307 	and.w	r3, r3, #7
}
 8007136:	4618      	mov	r0, r3
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr
 8007140:	e000ed00 	.word	0xe000ed00

08007144 <__NVIC_EnableIRQ>:
{
 8007144:	b480      	push	{r7}
 8007146:	b083      	sub	sp, #12
 8007148:	af00      	add	r7, sp, #0
 800714a:	4603      	mov	r3, r0
 800714c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800714e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007152:	2b00      	cmp	r3, #0
 8007154:	db0b      	blt.n	800716e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007156:	88fb      	ldrh	r3, [r7, #6]
 8007158:	f003 021f 	and.w	r2, r3, #31
 800715c:	4907      	ldr	r1, [pc, #28]	@ (800717c <__NVIC_EnableIRQ+0x38>)
 800715e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007162:	095b      	lsrs	r3, r3, #5
 8007164:	2001      	movs	r0, #1
 8007166:	fa00 f202 	lsl.w	r2, r0, r2
 800716a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800716e:	bf00      	nop
 8007170:	370c      	adds	r7, #12
 8007172:	46bd      	mov	sp, r7
 8007174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007178:	4770      	bx	lr
 800717a:	bf00      	nop
 800717c:	e000e100 	.word	0xe000e100

08007180 <__NVIC_DisableIRQ>:
{
 8007180:	b480      	push	{r7}
 8007182:	b083      	sub	sp, #12
 8007184:	af00      	add	r7, sp, #0
 8007186:	4603      	mov	r3, r0
 8007188:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800718a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800718e:	2b00      	cmp	r3, #0
 8007190:	db12      	blt.n	80071b8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007192:	88fb      	ldrh	r3, [r7, #6]
 8007194:	f003 021f 	and.w	r2, r3, #31
 8007198:	490a      	ldr	r1, [pc, #40]	@ (80071c4 <__NVIC_DisableIRQ+0x44>)
 800719a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800719e:	095b      	lsrs	r3, r3, #5
 80071a0:	2001      	movs	r0, #1
 80071a2:	fa00 f202 	lsl.w	r2, r0, r2
 80071a6:	3320      	adds	r3, #32
 80071a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80071ac:	f3bf 8f4f 	dsb	sy
}
 80071b0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80071b2:	f3bf 8f6f 	isb	sy
}
 80071b6:	bf00      	nop
}
 80071b8:	bf00      	nop
 80071ba:	370c      	adds	r7, #12
 80071bc:	46bd      	mov	sp, r7
 80071be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c2:	4770      	bx	lr
 80071c4:	e000e100 	.word	0xe000e100

080071c8 <__NVIC_SetPriority>:
{
 80071c8:	b480      	push	{r7}
 80071ca:	b083      	sub	sp, #12
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	4603      	mov	r3, r0
 80071d0:	6039      	str	r1, [r7, #0]
 80071d2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80071d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	db0a      	blt.n	80071f2 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	b2da      	uxtb	r2, r3
 80071e0:	490c      	ldr	r1, [pc, #48]	@ (8007214 <__NVIC_SetPriority+0x4c>)
 80071e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80071e6:	0112      	lsls	r2, r2, #4
 80071e8:	b2d2      	uxtb	r2, r2
 80071ea:	440b      	add	r3, r1
 80071ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80071f0:	e00a      	b.n	8007208 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	b2da      	uxtb	r2, r3
 80071f6:	4908      	ldr	r1, [pc, #32]	@ (8007218 <__NVIC_SetPriority+0x50>)
 80071f8:	88fb      	ldrh	r3, [r7, #6]
 80071fa:	f003 030f 	and.w	r3, r3, #15
 80071fe:	3b04      	subs	r3, #4
 8007200:	0112      	lsls	r2, r2, #4
 8007202:	b2d2      	uxtb	r2, r2
 8007204:	440b      	add	r3, r1
 8007206:	761a      	strb	r2, [r3, #24]
}
 8007208:	bf00      	nop
 800720a:	370c      	adds	r7, #12
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr
 8007214:	e000e100 	.word	0xe000e100
 8007218:	e000ed00 	.word	0xe000ed00

0800721c <NVIC_EncodePriority>:
{
 800721c:	b480      	push	{r7}
 800721e:	b089      	sub	sp, #36	@ 0x24
 8007220:	af00      	add	r7, sp, #0
 8007222:	60f8      	str	r0, [r7, #12]
 8007224:	60b9      	str	r1, [r7, #8]
 8007226:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f003 0307 	and.w	r3, r3, #7
 800722e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007230:	69fb      	ldr	r3, [r7, #28]
 8007232:	f1c3 0307 	rsb	r3, r3, #7
 8007236:	2b04      	cmp	r3, #4
 8007238:	bf28      	it	cs
 800723a:	2304      	movcs	r3, #4
 800723c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800723e:	69fb      	ldr	r3, [r7, #28]
 8007240:	3304      	adds	r3, #4
 8007242:	2b06      	cmp	r3, #6
 8007244:	d902      	bls.n	800724c <NVIC_EncodePriority+0x30>
 8007246:	69fb      	ldr	r3, [r7, #28]
 8007248:	3b03      	subs	r3, #3
 800724a:	e000      	b.n	800724e <NVIC_EncodePriority+0x32>
 800724c:	2300      	movs	r3, #0
 800724e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007250:	f04f 32ff 	mov.w	r2, #4294967295
 8007254:	69bb      	ldr	r3, [r7, #24]
 8007256:	fa02 f303 	lsl.w	r3, r2, r3
 800725a:	43da      	mvns	r2, r3
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	401a      	ands	r2, r3
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007264:	f04f 31ff 	mov.w	r1, #4294967295
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	fa01 f303 	lsl.w	r3, r1, r3
 800726e:	43d9      	mvns	r1, r3
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007274:	4313      	orrs	r3, r2
}
 8007276:	4618      	mov	r0, r3
 8007278:	3724      	adds	r7, #36	@ 0x24
 800727a:	46bd      	mov	sp, r7
 800727c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007280:	4770      	bx	lr
	...

08007284 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8007284:	b480      	push	{r7}
 8007286:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8007288:	f3bf 8f4f 	dsb	sy
}
 800728c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800728e:	4b06      	ldr	r3, [pc, #24]	@ (80072a8 <__NVIC_SystemReset+0x24>)
 8007290:	68db      	ldr	r3, [r3, #12]
 8007292:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8007296:	4904      	ldr	r1, [pc, #16]	@ (80072a8 <__NVIC_SystemReset+0x24>)
 8007298:	4b04      	ldr	r3, [pc, #16]	@ (80072ac <__NVIC_SystemReset+0x28>)
 800729a:	4313      	orrs	r3, r2
 800729c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800729e:	f3bf 8f4f 	dsb	sy
}
 80072a2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80072a4:	bf00      	nop
 80072a6:	e7fd      	b.n	80072a4 <__NVIC_SystemReset+0x20>
 80072a8:	e000ed00 	.word	0xe000ed00
 80072ac:	05fa0004 	.word	0x05fa0004

080072b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b082      	sub	sp, #8
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f7ff ff11 	bl	80070e0 <__NVIC_SetPriorityGrouping>
}
 80072be:	bf00      	nop
 80072c0:	3708      	adds	r7, #8
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}

080072c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80072c6:	b580      	push	{r7, lr}
 80072c8:	b086      	sub	sp, #24
 80072ca:	af00      	add	r7, sp, #0
 80072cc:	4603      	mov	r3, r0
 80072ce:	60b9      	str	r1, [r7, #8]
 80072d0:	607a      	str	r2, [r7, #4]
 80072d2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80072d4:	f7ff ff28 	bl	8007128 <__NVIC_GetPriorityGrouping>
 80072d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80072da:	687a      	ldr	r2, [r7, #4]
 80072dc:	68b9      	ldr	r1, [r7, #8]
 80072de:	6978      	ldr	r0, [r7, #20]
 80072e0:	f7ff ff9c 	bl	800721c <NVIC_EncodePriority>
 80072e4:	4602      	mov	r2, r0
 80072e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80072ea:	4611      	mov	r1, r2
 80072ec:	4618      	mov	r0, r3
 80072ee:	f7ff ff6b 	bl	80071c8 <__NVIC_SetPriority>
}
 80072f2:	bf00      	nop
 80072f4:	3718      	adds	r7, #24
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}

080072fa <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80072fa:	b580      	push	{r7, lr}
 80072fc:	b082      	sub	sp, #8
 80072fe:	af00      	add	r7, sp, #0
 8007300:	4603      	mov	r3, r0
 8007302:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007304:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007308:	4618      	mov	r0, r3
 800730a:	f7ff ff1b 	bl	8007144 <__NVIC_EnableIRQ>
}
 800730e:	bf00      	nop
 8007310:	3708      	adds	r7, #8
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}

08007316 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007316:	b580      	push	{r7, lr}
 8007318:	b082      	sub	sp, #8
 800731a:	af00      	add	r7, sp, #0
 800731c:	4603      	mov	r3, r0
 800731e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8007320:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007324:	4618      	mov	r0, r3
 8007326:	f7ff ff2b 	bl	8007180 <__NVIC_DisableIRQ>
}
 800732a:	bf00      	nop
 800732c:	3708      	adds	r7, #8
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}

08007332 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8007332:	b580      	push	{r7, lr}
 8007334:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8007336:	f7ff ffa5 	bl	8007284 <__NVIC_SystemReset>
	...

0800733c <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800733c:	b480      	push	{r7}
 800733e:	b083      	sub	sp, #12
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	3b01      	subs	r3, #1
 8007348:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800734c:	d301      	bcc.n	8007352 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 800734e:	2301      	movs	r3, #1
 8007350:	e00d      	b.n	800736e <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8007352:	4a0a      	ldr	r2, [pc, #40]	@ (800737c <HAL_SYSTICK_Config+0x40>)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	3b01      	subs	r3, #1
 8007358:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 800735a:	4b08      	ldr	r3, [pc, #32]	@ (800737c <HAL_SYSTICK_Config+0x40>)
 800735c:	2200      	movs	r2, #0
 800735e:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8007360:	4b06      	ldr	r3, [pc, #24]	@ (800737c <HAL_SYSTICK_Config+0x40>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a05      	ldr	r2, [pc, #20]	@ (800737c <HAL_SYSTICK_Config+0x40>)
 8007366:	f043 0303 	orr.w	r3, r3, #3
 800736a:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 800736c:	2300      	movs	r3, #0
}
 800736e:	4618      	mov	r0, r3
 8007370:	370c      	adds	r7, #12
 8007372:	46bd      	mov	sp, r7
 8007374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007378:	4770      	bx	lr
 800737a:	bf00      	nop
 800737c:	e000e010 	.word	0xe000e010

08007380 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8007380:	b480      	push	{r7}
 8007382:	b083      	sub	sp, #12
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2b04      	cmp	r3, #4
 800738c:	d844      	bhi.n	8007418 <HAL_SYSTICK_CLKSourceConfig+0x98>
 800738e:	a201      	add	r2, pc, #4	@ (adr r2, 8007394 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8007390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007394:	080073b7 	.word	0x080073b7
 8007398:	080073d5 	.word	0x080073d5
 800739c:	080073f7 	.word	0x080073f7
 80073a0:	08007419 	.word	0x08007419
 80073a4:	080073a9 	.word	0x080073a9
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80073a8:	4b1f      	ldr	r3, [pc, #124]	@ (8007428 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a1e      	ldr	r2, [pc, #120]	@ (8007428 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80073ae:	f043 0304 	orr.w	r3, r3, #4
 80073b2:	6013      	str	r3, [r2, #0]
      break;
 80073b4:	e031      	b.n	800741a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80073b6:	4b1c      	ldr	r3, [pc, #112]	@ (8007428 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a1b      	ldr	r2, [pc, #108]	@ (8007428 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80073bc:	f023 0304 	bic.w	r3, r3, #4
 80073c0:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 80073c2:	4b1a      	ldr	r3, [pc, #104]	@ (800742c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80073c4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80073c8:	4a18      	ldr	r2, [pc, #96]	@ (800742c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80073ca:	f023 030c 	bic.w	r3, r3, #12
 80073ce:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80073d2:	e022      	b.n	800741a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80073d4:	4b14      	ldr	r3, [pc, #80]	@ (8007428 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a13      	ldr	r2, [pc, #76]	@ (8007428 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80073da:	f023 0304 	bic.w	r3, r3, #4
 80073de:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 80073e0:	4b12      	ldr	r3, [pc, #72]	@ (800742c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80073e2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80073e6:	f023 030c 	bic.w	r3, r3, #12
 80073ea:	4a10      	ldr	r2, [pc, #64]	@ (800742c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80073ec:	f043 0304 	orr.w	r3, r3, #4
 80073f0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80073f4:	e011      	b.n	800741a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80073f6:	4b0c      	ldr	r3, [pc, #48]	@ (8007428 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a0b      	ldr	r2, [pc, #44]	@ (8007428 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80073fc:	f023 0304 	bic.w	r3, r3, #4
 8007400:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8007402:	4b0a      	ldr	r3, [pc, #40]	@ (800742c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8007404:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007408:	f023 030c 	bic.w	r3, r3, #12
 800740c:	4a07      	ldr	r2, [pc, #28]	@ (800742c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800740e:	f043 0308 	orr.w	r3, r3, #8
 8007412:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8007416:	e000      	b.n	800741a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8007418:	bf00      	nop
  }
}
 800741a:	bf00      	nop
 800741c:	370c      	adds	r7, #12
 800741e:	46bd      	mov	sp, r7
 8007420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007424:	4770      	bx	lr
 8007426:	bf00      	nop
 8007428:	e000e010 	.word	0xe000e010
 800742c:	44020c00 	.word	0x44020c00

08007430 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8007430:	b480      	push	{r7}
 8007432:	b083      	sub	sp, #12
 8007434:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8007436:	4b17      	ldr	r3, [pc, #92]	@ (8007494 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f003 0304 	and.w	r3, r3, #4
 800743e:	2b00      	cmp	r3, #0
 8007440:	d002      	beq.n	8007448 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8007442:	2304      	movs	r3, #4
 8007444:	607b      	str	r3, [r7, #4]
 8007446:	e01e      	b.n	8007486 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8007448:	4b13      	ldr	r3, [pc, #76]	@ (8007498 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 800744a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800744e:	f003 030c 	and.w	r3, r3, #12
 8007452:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	2b08      	cmp	r3, #8
 8007458:	d00f      	beq.n	800747a <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	2b08      	cmp	r3, #8
 800745e:	d80f      	bhi.n	8007480 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d003      	beq.n	800746e <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	2b04      	cmp	r3, #4
 800746a:	d003      	beq.n	8007474 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 800746c:	e008      	b.n	8007480 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800746e:	2300      	movs	r3, #0
 8007470:	607b      	str	r3, [r7, #4]
        break;
 8007472:	e008      	b.n	8007486 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8007474:	2301      	movs	r3, #1
 8007476:	607b      	str	r3, [r7, #4]
        break;
 8007478:	e005      	b.n	8007486 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 800747a:	2302      	movs	r3, #2
 800747c:	607b      	str	r3, [r7, #4]
        break;
 800747e:	e002      	b.n	8007486 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8007480:	2300      	movs	r3, #0
 8007482:	607b      	str	r3, [r7, #4]
        break;
 8007484:	bf00      	nop
    }
  }
  return systick_source;
 8007486:	687b      	ldr	r3, [r7, #4]
}
 8007488:	4618      	mov	r0, r3
 800748a:	370c      	adds	r7, #12
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr
 8007494:	e000e010 	.word	0xe000e010
 8007498:	44020c00 	.word	0x44020c00

0800749c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b082      	sub	sp, #8
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d101      	bne.n	80074ae <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80074aa:	2301      	movs	r3, #1
 80074ac:	e054      	b.n	8007558 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	7f5b      	ldrb	r3, [r3, #29]
 80074b2:	b2db      	uxtb	r3, r3
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d105      	bne.n	80074c4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2200      	movs	r2, #0
 80074bc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f7fc fb4c 	bl	8003b5c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2202      	movs	r2, #2
 80074c8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	791b      	ldrb	r3, [r3, #4]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d10c      	bne.n	80074ec <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a22      	ldr	r2, [pc, #136]	@ (8007560 <HAL_CRC_Init+0xc4>)
 80074d8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	689a      	ldr	r2, [r3, #8]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f022 0218 	bic.w	r2, r2, #24
 80074e8:	609a      	str	r2, [r3, #8]
 80074ea:	e00c      	b.n	8007506 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6899      	ldr	r1, [r3, #8]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	68db      	ldr	r3, [r3, #12]
 80074f4:	461a      	mov	r2, r3
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f000 f948 	bl	800778c <HAL_CRCEx_Polynomial_Set>
 80074fc:	4603      	mov	r3, r0
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d001      	beq.n	8007506 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8007502:	2301      	movs	r3, #1
 8007504:	e028      	b.n	8007558 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	795b      	ldrb	r3, [r3, #5]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d105      	bne.n	800751a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f04f 32ff 	mov.w	r2, #4294967295
 8007516:	611a      	str	r2, [r3, #16]
 8007518:	e004      	b.n	8007524 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	687a      	ldr	r2, [r7, #4]
 8007520:	6912      	ldr	r2, [r2, #16]
 8007522:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	689b      	ldr	r3, [r3, #8]
 800752a:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	695a      	ldr	r2, [r3, #20]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	430a      	orrs	r2, r1
 8007538:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	689b      	ldr	r3, [r3, #8]
 8007540:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	699a      	ldr	r2, [r3, #24]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	430a      	orrs	r2, r1
 800754e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2201      	movs	r2, #1
 8007554:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8007556:	2300      	movs	r3, #0
}
 8007558:	4618      	mov	r0, r3
 800755a:	3708      	adds	r7, #8
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}
 8007560:	04c11db7 	.word	0x04c11db7

08007564 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b086      	sub	sp, #24
 8007568:	af00      	add	r7, sp, #0
 800756a:	60f8      	str	r0, [r7, #12]
 800756c:	60b9      	str	r1, [r7, #8]
 800756e:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8007570:	2300      	movs	r3, #0
 8007572:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2202      	movs	r2, #2
 8007578:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	689a      	ldr	r2, [r3, #8]
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f042 0201 	orr.w	r2, r2, #1
 8007588:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	6a1b      	ldr	r3, [r3, #32]
 800758e:	2b03      	cmp	r3, #3
 8007590:	d006      	beq.n	80075a0 <HAL_CRC_Calculate+0x3c>
 8007592:	2b03      	cmp	r3, #3
 8007594:	d829      	bhi.n	80075ea <HAL_CRC_Calculate+0x86>
 8007596:	2b01      	cmp	r3, #1
 8007598:	d019      	beq.n	80075ce <HAL_CRC_Calculate+0x6a>
 800759a:	2b02      	cmp	r3, #2
 800759c:	d01e      	beq.n	80075dc <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 800759e:	e024      	b.n	80075ea <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 80075a0:	2300      	movs	r3, #0
 80075a2:	617b      	str	r3, [r7, #20]
 80075a4:	e00a      	b.n	80075bc <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	009b      	lsls	r3, r3, #2
 80075aa:	68ba      	ldr	r2, [r7, #8]
 80075ac:	441a      	add	r2, r3
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	6812      	ldr	r2, [r2, #0]
 80075b4:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	3301      	adds	r3, #1
 80075ba:	617b      	str	r3, [r7, #20]
 80075bc:	697a      	ldr	r2, [r7, #20]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	429a      	cmp	r2, r3
 80075c2:	d3f0      	bcc.n	80075a6 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	613b      	str	r3, [r7, #16]
      break;
 80075cc:	e00e      	b.n	80075ec <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 80075ce:	687a      	ldr	r2, [r7, #4]
 80075d0:	68b9      	ldr	r1, [r7, #8]
 80075d2:	68f8      	ldr	r0, [r7, #12]
 80075d4:	f000 f812 	bl	80075fc <CRC_Handle_8>
 80075d8:	6138      	str	r0, [r7, #16]
      break;
 80075da:	e007      	b.n	80075ec <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 80075dc:	687a      	ldr	r2, [r7, #4]
 80075de:	68b9      	ldr	r1, [r7, #8]
 80075e0:	68f8      	ldr	r0, [r7, #12]
 80075e2:	f000 f899 	bl	8007718 <CRC_Handle_16>
 80075e6:	6138      	str	r0, [r7, #16]
      break;
 80075e8:	e000      	b.n	80075ec <HAL_CRC_Calculate+0x88>
      break;
 80075ea:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	2201      	movs	r2, #1
 80075f0:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 80075f2:	693b      	ldr	r3, [r7, #16]
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	3718      	adds	r7, #24
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}

080075fc <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b089      	sub	sp, #36	@ 0x24
 8007600:	af00      	add	r7, sp, #0
 8007602:	60f8      	str	r0, [r7, #12]
 8007604:	60b9      	str	r1, [r7, #8]
 8007606:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8007608:	2300      	movs	r3, #0
 800760a:	61fb      	str	r3, [r7, #28]
 800760c:	e023      	b.n	8007656 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800760e:	69fb      	ldr	r3, [r7, #28]
 8007610:	009b      	lsls	r3, r3, #2
 8007612:	68ba      	ldr	r2, [r7, #8]
 8007614:	4413      	add	r3, r2
 8007616:	781b      	ldrb	r3, [r3, #0]
 8007618:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800761a:	69fb      	ldr	r3, [r7, #28]
 800761c:	009b      	lsls	r3, r3, #2
 800761e:	3301      	adds	r3, #1
 8007620:	68b9      	ldr	r1, [r7, #8]
 8007622:	440b      	add	r3, r1
 8007624:	781b      	ldrb	r3, [r3, #0]
 8007626:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8007628:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800762a:	69fb      	ldr	r3, [r7, #28]
 800762c:	009b      	lsls	r3, r3, #2
 800762e:	3302      	adds	r3, #2
 8007630:	68b9      	ldr	r1, [r7, #8]
 8007632:	440b      	add	r3, r1
 8007634:	781b      	ldrb	r3, [r3, #0]
 8007636:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8007638:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 800763a:	69fb      	ldr	r3, [r7, #28]
 800763c:	009b      	lsls	r3, r3, #2
 800763e:	3303      	adds	r3, #3
 8007640:	68b9      	ldr	r1, [r7, #8]
 8007642:	440b      	add	r3, r1
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800764c:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800764e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8007650:	69fb      	ldr	r3, [r7, #28]
 8007652:	3301      	adds	r3, #1
 8007654:	61fb      	str	r3, [r7, #28]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	089b      	lsrs	r3, r3, #2
 800765a:	69fa      	ldr	r2, [r7, #28]
 800765c:	429a      	cmp	r2, r3
 800765e:	d3d6      	bcc.n	800760e <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f003 0303 	and.w	r3, r3, #3
 8007666:	2b00      	cmp	r3, #0
 8007668:	d04d      	beq.n	8007706 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f003 0303 	and.w	r3, r3, #3
 8007670:	2b01      	cmp	r3, #1
 8007672:	d107      	bne.n	8007684 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8007674:	69fb      	ldr	r3, [r7, #28]
 8007676:	009b      	lsls	r3, r3, #2
 8007678:	68ba      	ldr	r2, [r7, #8]
 800767a:	4413      	add	r3, r2
 800767c:	68fa      	ldr	r2, [r7, #12]
 800767e:	6812      	ldr	r2, [r2, #0]
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f003 0303 	and.w	r3, r3, #3
 800768a:	2b02      	cmp	r3, #2
 800768c:	d116      	bne.n	80076bc <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800768e:	69fb      	ldr	r3, [r7, #28]
 8007690:	009b      	lsls	r3, r3, #2
 8007692:	68ba      	ldr	r2, [r7, #8]
 8007694:	4413      	add	r3, r2
 8007696:	781b      	ldrb	r3, [r3, #0]
 8007698:	021b      	lsls	r3, r3, #8
 800769a:	b21a      	sxth	r2, r3
 800769c:	69fb      	ldr	r3, [r7, #28]
 800769e:	009b      	lsls	r3, r3, #2
 80076a0:	3301      	adds	r3, #1
 80076a2:	68b9      	ldr	r1, [r7, #8]
 80076a4:	440b      	add	r3, r1
 80076a6:	781b      	ldrb	r3, [r3, #0]
 80076a8:	b21b      	sxth	r3, r3
 80076aa:	4313      	orrs	r3, r2
 80076ac:	b21b      	sxth	r3, r3
 80076ae:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	8b7a      	ldrh	r2, [r7, #26]
 80076ba:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f003 0303 	and.w	r3, r3, #3
 80076c2:	2b03      	cmp	r3, #3
 80076c4:	d11f      	bne.n	8007706 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80076c6:	69fb      	ldr	r3, [r7, #28]
 80076c8:	009b      	lsls	r3, r3, #2
 80076ca:	68ba      	ldr	r2, [r7, #8]
 80076cc:	4413      	add	r3, r2
 80076ce:	781b      	ldrb	r3, [r3, #0]
 80076d0:	021b      	lsls	r3, r3, #8
 80076d2:	b21a      	sxth	r2, r3
 80076d4:	69fb      	ldr	r3, [r7, #28]
 80076d6:	009b      	lsls	r3, r3, #2
 80076d8:	3301      	adds	r3, #1
 80076da:	68b9      	ldr	r1, [r7, #8]
 80076dc:	440b      	add	r3, r1
 80076de:	781b      	ldrb	r3, [r3, #0]
 80076e0:	b21b      	sxth	r3, r3
 80076e2:	4313      	orrs	r3, r2
 80076e4:	b21b      	sxth	r3, r3
 80076e6:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	8b7a      	ldrh	r2, [r7, #26]
 80076f2:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 80076f4:	69fb      	ldr	r3, [r7, #28]
 80076f6:	009b      	lsls	r3, r3, #2
 80076f8:	3302      	adds	r3, #2
 80076fa:	68ba      	ldr	r2, [r7, #8]
 80076fc:	4413      	add	r3, r2
 80076fe:	68fa      	ldr	r2, [r7, #12]
 8007700:	6812      	ldr	r2, [r2, #0]
 8007702:	781b      	ldrb	r3, [r3, #0]
 8007704:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	681b      	ldr	r3, [r3, #0]
}
 800770c:	4618      	mov	r0, r3
 800770e:	3724      	adds	r7, #36	@ 0x24
 8007710:	46bd      	mov	sp, r7
 8007712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007716:	4770      	bx	lr

08007718 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8007718:	b480      	push	{r7}
 800771a:	b087      	sub	sp, #28
 800771c:	af00      	add	r7, sp, #0
 800771e:	60f8      	str	r0, [r7, #12]
 8007720:	60b9      	str	r1, [r7, #8]
 8007722:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8007724:	2300      	movs	r3, #0
 8007726:	617b      	str	r3, [r7, #20]
 8007728:	e013      	b.n	8007752 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	009b      	lsls	r3, r3, #2
 800772e:	68ba      	ldr	r2, [r7, #8]
 8007730:	4413      	add	r3, r2
 8007732:	881b      	ldrh	r3, [r3, #0]
 8007734:	041a      	lsls	r2, r3, #16
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	009b      	lsls	r3, r3, #2
 800773a:	3302      	adds	r3, #2
 800773c:	68b9      	ldr	r1, [r7, #8]
 800773e:	440b      	add	r3, r1
 8007740:	881b      	ldrh	r3, [r3, #0]
 8007742:	4619      	mov	r1, r3
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	430a      	orrs	r2, r1
 800774a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	3301      	adds	r3, #1
 8007750:	617b      	str	r3, [r7, #20]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	085b      	lsrs	r3, r3, #1
 8007756:	697a      	ldr	r2, [r7, #20]
 8007758:	429a      	cmp	r2, r3
 800775a:	d3e6      	bcc.n	800772a <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f003 0301 	and.w	r3, r3, #1
 8007762:	2b00      	cmp	r3, #0
 8007764:	d009      	beq.n	800777a <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	009b      	lsls	r3, r3, #2
 8007770:	68ba      	ldr	r2, [r7, #8]
 8007772:	4413      	add	r3, r2
 8007774:	881a      	ldrh	r2, [r3, #0]
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	681b      	ldr	r3, [r3, #0]
}
 8007780:	4618      	mov	r0, r3
 8007782:	371c      	adds	r7, #28
 8007784:	46bd      	mov	sp, r7
 8007786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778a:	4770      	bx	lr

0800778c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800778c:	b480      	push	{r7}
 800778e:	b087      	sub	sp, #28
 8007790:	af00      	add	r7, sp, #0
 8007792:	60f8      	str	r0, [r7, #12]
 8007794:	60b9      	str	r1, [r7, #8]
 8007796:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007798:	2300      	movs	r3, #0
 800779a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800779c:	231f      	movs	r3, #31
 800779e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	f003 0301 	and.w	r3, r3, #1
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d102      	bne.n	80077b0 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80077aa:	2301      	movs	r3, #1
 80077ac:	75fb      	strb	r3, [r7, #23]
 80077ae:	e063      	b.n	8007878 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80077b0:	bf00      	nop
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	1e5a      	subs	r2, r3, #1
 80077b6:	613a      	str	r2, [r7, #16]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d009      	beq.n	80077d0 <HAL_CRCEx_Polynomial_Set+0x44>
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	f003 031f 	and.w	r3, r3, #31
 80077c2:	68ba      	ldr	r2, [r7, #8]
 80077c4:	fa22 f303 	lsr.w	r3, r2, r3
 80077c8:	f003 0301 	and.w	r3, r3, #1
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d0f0      	beq.n	80077b2 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2b18      	cmp	r3, #24
 80077d4:	d846      	bhi.n	8007864 <HAL_CRCEx_Polynomial_Set+0xd8>
 80077d6:	a201      	add	r2, pc, #4	@ (adr r2, 80077dc <HAL_CRCEx_Polynomial_Set+0x50>)
 80077d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077dc:	0800786b 	.word	0x0800786b
 80077e0:	08007865 	.word	0x08007865
 80077e4:	08007865 	.word	0x08007865
 80077e8:	08007865 	.word	0x08007865
 80077ec:	08007865 	.word	0x08007865
 80077f0:	08007865 	.word	0x08007865
 80077f4:	08007865 	.word	0x08007865
 80077f8:	08007865 	.word	0x08007865
 80077fc:	08007859 	.word	0x08007859
 8007800:	08007865 	.word	0x08007865
 8007804:	08007865 	.word	0x08007865
 8007808:	08007865 	.word	0x08007865
 800780c:	08007865 	.word	0x08007865
 8007810:	08007865 	.word	0x08007865
 8007814:	08007865 	.word	0x08007865
 8007818:	08007865 	.word	0x08007865
 800781c:	0800784d 	.word	0x0800784d
 8007820:	08007865 	.word	0x08007865
 8007824:	08007865 	.word	0x08007865
 8007828:	08007865 	.word	0x08007865
 800782c:	08007865 	.word	0x08007865
 8007830:	08007865 	.word	0x08007865
 8007834:	08007865 	.word	0x08007865
 8007838:	08007865 	.word	0x08007865
 800783c:	08007841 	.word	0x08007841
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	2b06      	cmp	r3, #6
 8007844:	d913      	bls.n	800786e <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8007846:	2301      	movs	r3, #1
 8007848:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800784a:	e010      	b.n	800786e <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	2b07      	cmp	r3, #7
 8007850:	d90f      	bls.n	8007872 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8007852:	2301      	movs	r3, #1
 8007854:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8007856:	e00c      	b.n	8007872 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	2b0f      	cmp	r3, #15
 800785c:	d90b      	bls.n	8007876 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800785e:	2301      	movs	r3, #1
 8007860:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8007862:	e008      	b.n	8007876 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8007864:	2301      	movs	r3, #1
 8007866:	75fb      	strb	r3, [r7, #23]
        break;
 8007868:	e006      	b.n	8007878 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800786a:	bf00      	nop
 800786c:	e004      	b.n	8007878 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800786e:	bf00      	nop
 8007870:	e002      	b.n	8007878 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8007872:	bf00      	nop
 8007874:	e000      	b.n	8007878 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8007876:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8007878:	7dfb      	ldrb	r3, [r7, #23]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d10d      	bne.n	800789a <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	68ba      	ldr	r2, [r7, #8]
 8007884:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	689b      	ldr	r3, [r3, #8]
 800788c:	f023 0118 	bic.w	r1, r3, #24
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	687a      	ldr	r2, [r7, #4]
 8007896:	430a      	orrs	r2, r1
 8007898:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800789a:	7dfb      	ldrb	r3, [r7, #23]
}
 800789c:	4618      	mov	r0, r3
 800789e:	371c      	adds	r7, #28
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr

080078a8 <HAL_CRYP_Init>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYP_Init(CRYP_HandleTypeDef *hcryp)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b084      	sub	sp, #16
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
#if defined(SAES)
  uint32_t tickstart;
#endif /* SAES */

  /* Check the CRYP handle allocation */
  if (hcryp == NULL)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d101      	bne.n	80078ba <HAL_CRYP_Init+0x12>
  {
    return HAL_ERROR;
 80078b6:	2301      	movs	r3, #1
 80078b8:	e0a7      	b.n	8007a0a <HAL_CRYP_Init+0x162>

    /* Init the low level hardware */
    hcryp->MspInitCallback(hcryp);
  }
#else
  if (hcryp->State == HAL_CRYP_STATE_RESET)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80078c0:	b2db      	uxtb	r3, r3
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d106      	bne.n	80078d4 <HAL_CRYP_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcryp->Lock = HAL_UNLOCKED;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2200      	movs	r2, #0
 80078ca:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Init the low level hardware */
    HAL_CRYP_MspInit(hcryp);
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f7fc f8f6 	bl	8003ac0 <HAL_CRYP_MspInit>
  }
#endif /* (USE_HAL_CRYP_REGISTER_CALLBACKS) */

  if (hcryp->Instance == AES)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4a4e      	ldr	r2, [pc, #312]	@ (8007a14 <HAL_CRYP_Init+0x16c>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d116      	bne.n	800790c <HAL_CRYP_Init+0x64>
  {
    /* Set the key size, data type and Algorithm */
    cr_value = (uint32_t)(hcryp->Init.DataType | hcryp->Init.KeySize | hcryp->Init.Algorithm | hcryp->Init.KeyMode);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	685a      	ldr	r2, [r3, #4]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	689b      	ldr	r3, [r3, #8]
 80078e6:	431a      	orrs	r2, r3
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	695b      	ldr	r3, [r3, #20]
 80078ec:	431a      	orrs	r2, r3
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078f2:	4313      	orrs	r3, r2
 80078f4:	60bb      	str	r3, [r7, #8]
    /* Set the key size, data type, algorithm and mode */
    MODIFY_REG(hcryp->Instance->CR, AES_CR_KMOD | AES_CR_DATATYPE | AES_CR_KEYSIZE | AES_CR_CHMOD, cr_value);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	681a      	ldr	r2, [r3, #0]
 80078fc:	4b46      	ldr	r3, [pc, #280]	@ (8007a18 <HAL_CRYP_Init+0x170>)
 80078fe:	4013      	ands	r3, r2
 8007900:	687a      	ldr	r2, [r7, #4]
 8007902:	6812      	ldr	r2, [r2, #0]
 8007904:	68b9      	ldr	r1, [r7, #8]
 8007906:	430b      	orrs	r3, r1
 8007908:	6013      	str	r3, [r2, #0]
 800790a:	e070      	b.n	80079ee <HAL_CRYP_Init+0x146>
  }
  else
  {
    /* SAES is initializing, fetching random number from the RNG */
    tickstart = HAL_GetTick();
 800790c:	f7fe f850 	bl	80059b0 <HAL_GetTick>
 8007910:	60f8      	str	r0, [r7, #12]
    while (HAL_IS_BIT_SET(hcryp->Instance->SR, CRYP_FLAG_BUSY))
 8007912:	e01e      	b.n	8007952 <HAL_CRYP_Init+0xaa>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CRYP_GENERAL_TIMEOUT)
 8007914:	f7fe f84c 	bl	80059b0 <HAL_GetTick>
 8007918:	4602      	mov	r2, r0
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	1ad3      	subs	r3, r2, r3
 800791e:	2b52      	cmp	r3, #82	@ 0x52
 8007920:	d917      	bls.n	8007952 <HAL_CRYP_Init+0xaa>
      {
        __HAL_CRYP_DISABLE(hcryp);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	681a      	ldr	r2, [r3, #0]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f022 0201 	bic.w	r2, r2, #1
 8007930:	601a      	str	r2, [r3, #0]
        hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007936:	f043 0210 	orr.w	r2, r3, #16
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	65da      	str	r2, [r3, #92]	@ 0x5c
        hcryp->State = HAL_CRYP_STATE_READY;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2201      	movs	r2, #1
 8007942:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
        __HAL_UNLOCK(hcryp);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2200      	movs	r2, #0
 800794a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
        return HAL_ERROR;
 800794e:	2301      	movs	r3, #1
 8007950:	e05b      	b.n	8007a0a <HAL_CRYP_Init+0x162>
    while (HAL_IS_BIT_SET(hcryp->Instance->SR, CRYP_FLAG_BUSY))
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	f003 0308 	and.w	r3, r3, #8
 800795c:	2b08      	cmp	r3, #8
 800795e:	d0d9      	beq.n	8007914 <HAL_CRYP_Init+0x6c>
      }
    }
    /* SAES is initializing, no random number fetching error flagged */
    tickstart = HAL_GetTick();
 8007960:	f7fe f826 	bl	80059b0 <HAL_GetTick>
 8007964:	60f8      	str	r0, [r7, #12]
    while (HAL_IS_BIT_SET(hcryp->Instance->ISR, CRYP_FLAG_RNGEIF))
 8007966:	e01e      	b.n	80079a6 <HAL_CRYP_Init+0xfe>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CRYP_GENERAL_TIMEOUT)
 8007968:	f7fe f822 	bl	80059b0 <HAL_GetTick>
 800796c:	4602      	mov	r2, r0
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	1ad3      	subs	r3, r2, r3
 8007972:	2b52      	cmp	r3, #82	@ 0x52
 8007974:	d917      	bls.n	80079a6 <HAL_CRYP_Init+0xfe>
      {
        __HAL_CRYP_DISABLE(hcryp);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	681a      	ldr	r2, [r3, #0]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f022 0201 	bic.w	r2, r2, #1
 8007984:	601a      	str	r2, [r3, #0]
        hcryp->ErrorCode |= HAL_CRYP_ERROR_RNG;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800798a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	65da      	str	r2, [r3, #92]	@ 0x5c
        hcryp->State = HAL_CRYP_STATE_READY;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2201      	movs	r2, #1
 8007996:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
        __HAL_UNLOCK(hcryp);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2200      	movs	r2, #0
 800799e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
        return HAL_ERROR;
 80079a2:	2301      	movs	r3, #1
 80079a4:	e031      	b.n	8007a0a <HAL_CRYP_Init+0x162>
    while (HAL_IS_BIT_SET(hcryp->Instance->ISR, CRYP_FLAG_RNGEIF))
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f8d3 3304 	ldr.w	r3, [r3, #772]	@ 0x304
 80079ae:	f003 0308 	and.w	r3, r3, #8
 80079b2:	2b08      	cmp	r3, #8
 80079b4:	d0d8      	beq.n	8007968 <HAL_CRYP_Init+0xc0>
      }
    }
    cr_value = (uint32_t)(hcryp->Init.KeyMode | hcryp->Init.DataType | hcryp->Init.KeySize | \
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	431a      	orrs	r2, r3
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	689b      	ldr	r3, [r3, #8]
 80079c4:	431a      	orrs	r2, r3
                          hcryp->Init.Algorithm | hcryp->Init.KeySelect | hcryp->Init.KeyProtection);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	695b      	ldr	r3, [r3, #20]
    cr_value = (uint32_t)(hcryp->Init.KeyMode | hcryp->Init.DataType | hcryp->Init.KeySize | \
 80079ca:	431a      	orrs	r2, r3
                          hcryp->Init.Algorithm | hcryp->Init.KeySelect | hcryp->Init.KeyProtection);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079d0:	431a      	orrs	r2, r3
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
    cr_value = (uint32_t)(hcryp->Init.KeyMode | hcryp->Init.DataType | hcryp->Init.KeySize | \
 80079d6:	4313      	orrs	r3, r2
 80079d8:	60bb      	str	r3, [r7, #8]
    /* Set the key size, data type, algorithm, Key selection and key protection */
    MODIFY_REG(hcryp->Instance->CR, AES_CR_KMOD | AES_CR_DATATYPE | AES_CR_KEYSIZE | AES_CR_CHMOD | AES_CR_KEYSEL |
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	681a      	ldr	r2, [r3, #0]
 80079e0:	4b0e      	ldr	r3, [pc, #56]	@ (8007a1c <HAL_CRYP_Init+0x174>)
 80079e2:	4013      	ands	r3, r2
 80079e4:	687a      	ldr	r2, [r7, #4]
 80079e6:	6812      	ldr	r2, [r2, #0]
 80079e8:	68b9      	ldr	r1, [r7, #8]
 80079ea:	430b      	orrs	r3, r1
 80079ec:	6013      	str	r3, [r2, #0]
               AES_CR_KEYPROT, cr_value);
  }
  /* Reset Error Code field */
  hcryp->ErrorCode = HAL_CRYP_ERROR_NONE;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2200      	movs	r2, #0
 80079f2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Reset peripheral Key and IV configuration flag */
  hcryp->KeyIVConfig = 0U;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2200      	movs	r2, #0
 80079f8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_READY;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2201      	movs	r2, #1
 80079fe:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Set the default CRYP phase */
  hcryp->Phase = CRYP_PHASE_READY;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2201      	movs	r2, #1
 8007a06:	64da      	str	r2, [r3, #76]	@ 0x4c

  return HAL_OK;
 8007a08:	2300      	movs	r3, #0
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3710      	adds	r7, #16
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}
 8007a12:	bf00      	nop
 8007a14:	420c0000 	.word	0x420c0000
 8007a18:	fcfaff99 	.word	0xfcfaff99
 8007a1c:	8cf2ff99 	.word	0x8cf2ff99

08007a20 <HAL_CRYP_Encrypt>:
  * @param  Timeout Specify Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYP_Encrypt(CRYP_HandleTypeDef *hcryp, uint32_t *pInput, uint16_t Size, uint32_t *pOutput,
                                   uint32_t Timeout)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b086      	sub	sp, #24
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	60f8      	str	r0, [r7, #12]
 8007a28:	60b9      	str	r1, [r7, #8]
 8007a2a:	603b      	str	r3, [r7, #0]
 8007a2c:	4613      	mov	r3, r2
 8007a2e:	80fb      	strh	r3, [r7, #6]

  /* Check input buffer size */
  assert_param(IS_CRYP_BUFFERSIZE(algo_assert, hcryp->Init.DataWidthUnit, Size));
#endif /* USE_FULL_ASSERT */

  if (hcryp->State == HAL_CRYP_STATE_READY)
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007a36:	b2db      	uxtb	r3, r3
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	f040 808e 	bne.w	8007b5a <HAL_CRYP_Encrypt+0x13a>
  {
    /* Change state Busy */
    hcryp->State = HAL_CRYP_STATE_BUSY;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	2202      	movs	r2, #2
 8007a42:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
    __HAL_LOCK(hcryp);
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	d101      	bne.n	8007a54 <HAL_CRYP_Encrypt+0x34>
 8007a50:	2302      	movs	r3, #2
 8007a52:	e08b      	b.n	8007b6c <HAL_CRYP_Encrypt+0x14c>
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	2201      	movs	r2, #1
 8007a58:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Reset CrypInCount, CrypOutCount and Initialize pCrypInBuffPtr and pCrypOutBuffPtr parameters */
    hcryp->CrypInCount = 0U;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hcryp->CrypOutCount = 0U;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	2200      	movs	r2, #0
 8007a68:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    hcryp->pCrypInBuffPtr = pInput;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	68ba      	ldr	r2, [r7, #8]
 8007a70:	63da      	str	r2, [r3, #60]	@ 0x3c
    hcryp->pCrypOutBuffPtr = pOutput;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	683a      	ldr	r2, [r7, #0]
 8007a76:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Calculate Size parameter in Byte */
    if (hcryp->Init.DataWidthUnit == CRYP_DATAWIDTHUNIT_WORD)
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d106      	bne.n	8007a8e <HAL_CRYP_Encrypt+0x6e>
    {
      hcryp->Size = Size * 4U;
 8007a80:	88fb      	ldrh	r3, [r7, #6]
 8007a82:	009b      	lsls	r3, r3, #2
 8007a84:	b29a      	uxth	r2, r3
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
 8007a8c:	e003      	b.n	8007a96 <HAL_CRYP_Encrypt+0x76>
    }
    else
    {
      hcryp->Size = Size;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	88fa      	ldrh	r2, [r7, #6]
 8007a92:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
    }

    if (hcryp->Instance == AES)
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4a36      	ldr	r2, [pc, #216]	@ (8007b74 <HAL_CRYP_Encrypt+0x154>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d108      	bne.n	8007ab2 <HAL_CRYP_Encrypt+0x92>
    {
      /* Set the operating mode */
      MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_ENCRYPT);
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	681a      	ldr	r2, [r3, #0]
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f022 0218 	bic.w	r2, r2, #24
 8007aae:	601a      	str	r2, [r3, #0]
 8007ab0:	e009      	b.n	8007ac6 <HAL_CRYP_Encrypt+0xa6>
    }
    else
    {
      /* Set the operating mode and normal key selection */
      MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE | AES_CR_KMOD, CRYP_OPERATINGMODE_ENCRYPT | CRYP_KEYMODE_NORMAL);
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	68fa      	ldr	r2, [r7, #12]
 8007aba:	6812      	ldr	r2, [r2, #0]
 8007abc:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8007ac0:	f023 0318 	bic.w	r3, r3, #24
 8007ac4:	6013      	str	r3, [r2, #0]
    }
    /* Algo get algorithm selected */
    algo = hcryp->Instance->CR & AES_CR_CHMOD;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	681a      	ldr	r2, [r3, #0]
 8007acc:	4b2a      	ldr	r3, [pc, #168]	@ (8007b78 <HAL_CRYP_Encrypt+0x158>)
 8007ace:	4013      	ands	r3, r2
 8007ad0:	613b      	str	r3, [r7, #16]

    switch (algo)
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ad8:	d023      	beq.n	8007b22 <HAL_CRYP_Encrypt+0x102>
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ae0:	d826      	bhi.n	8007b30 <HAL_CRYP_Encrypt+0x110>
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	2b60      	cmp	r3, #96	@ 0x60
 8007ae6:	d015      	beq.n	8007b14 <HAL_CRYP_Encrypt+0xf4>
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	2b60      	cmp	r3, #96	@ 0x60
 8007aec:	d820      	bhi.n	8007b30 <HAL_CRYP_Encrypt+0x110>
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	2b40      	cmp	r3, #64	@ 0x40
 8007af2:	d008      	beq.n	8007b06 <HAL_CRYP_Encrypt+0xe6>
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	2b40      	cmp	r3, #64	@ 0x40
 8007af8:	d81a      	bhi.n	8007b30 <HAL_CRYP_Encrypt+0x110>
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d002      	beq.n	8007b06 <HAL_CRYP_Encrypt+0xe6>
 8007b00:	693b      	ldr	r3, [r7, #16]
 8007b02:	2b20      	cmp	r3, #32
 8007b04:	d114      	bne.n	8007b30 <HAL_CRYP_Encrypt+0x110>
    {
      case CRYP_AES_ECB:
      case CRYP_AES_CBC:
      case CRYP_AES_CTR:
        /* AES encryption */
        status = CRYP_AES_Encrypt(hcryp, Timeout);
 8007b06:	6a39      	ldr	r1, [r7, #32]
 8007b08:	68f8      	ldr	r0, [r7, #12]
 8007b0a:	f000 f8df 	bl	8007ccc <CRYP_AES_Encrypt>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	75fb      	strb	r3, [r7, #23]
        break;
 8007b12:	e016      	b.n	8007b42 <HAL_CRYP_Encrypt+0x122>

      case CRYP_AES_GCM_GMAC:
        /* AES GCM encryption */
        status = CRYP_AESGCM_Process(hcryp, Timeout);
 8007b14:	6a39      	ldr	r1, [r7, #32]
 8007b16:	68f8      	ldr	r0, [r7, #12]
 8007b18:	f000 fc94 	bl	8008444 <CRYP_AESGCM_Process>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	75fb      	strb	r3, [r7, #23]
        break;
 8007b20:	e00f      	b.n	8007b42 <HAL_CRYP_Encrypt+0x122>

      case CRYP_AES_CCM:
        /* AES CCM encryption */
        status = CRYP_AESCCM_Process(hcryp, Timeout);
 8007b22:	6a39      	ldr	r1, [r7, #32]
 8007b24:	68f8      	ldr	r0, [r7, #12]
 8007b26:	f000 fe6f 	bl	8008808 <CRYP_AESCCM_Process>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	75fb      	strb	r3, [r7, #23]
        break;
 8007b2e:	e008      	b.n	8007b42 <HAL_CRYP_Encrypt+0x122>

      default:
        hcryp->ErrorCode |= HAL_CRYP_ERROR_NOT_SUPPORTED;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b34:	f043 0220 	orr.w	r2, r3, #32
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	65da      	str	r2, [r3, #92]	@ 0x5c
        status = HAL_ERROR;
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	75fb      	strb	r3, [r7, #23]
        break;
 8007b40:	bf00      	nop
    }

    if (status == HAL_OK)
 8007b42:	7dfb      	ldrb	r3, [r7, #23]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d110      	bne.n	8007b6a <HAL_CRYP_Encrypt+0x14a>
    {
      /* Change the CRYP peripheral state */
      hcryp->State = HAL_CRYP_STATE_READY;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
      __HAL_UNLOCK(hcryp);
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2200      	movs	r2, #0
 8007b54:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8007b58:	e007      	b.n	8007b6a <HAL_CRYP_Encrypt+0x14a>
    }
  }
  else
  {
    /* Busy error code field */
    hcryp->ErrorCode |= HAL_CRYP_ERROR_BUSY;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b5e:	f043 0208 	orr.w	r2, r3, #8
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	65da      	str	r2, [r3, #92]	@ 0x5c
    status = HAL_ERROR;
 8007b66:	2301      	movs	r3, #1
 8007b68:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007b6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3718      	adds	r7, #24
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}
 8007b74:	420c0000 	.word	0x420c0000
 8007b78:	00010060 	.word	0x00010060

08007b7c <HAL_CRYP_Decrypt>:
  * @param  Timeout Specify Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYP_Decrypt(CRYP_HandleTypeDef *hcryp, uint32_t *pInput, uint16_t Size, uint32_t *pOutput,
                                   uint32_t Timeout)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b086      	sub	sp, #24
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	60f8      	str	r0, [r7, #12]
 8007b84:	60b9      	str	r1, [r7, #8]
 8007b86:	603b      	str	r3, [r7, #0]
 8007b88:	4613      	mov	r3, r2
 8007b8a:	80fb      	strh	r3, [r7, #6]

  /* Check input buffer size */
  assert_param(IS_CRYP_BUFFERSIZE(algo_assert, hcryp->Init.DataWidthUnit, Size));
#endif /* USE_FULL_ASSERT */

  if (hcryp->State == HAL_CRYP_STATE_READY)
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007b92:	b2db      	uxtb	r3, r3
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d17f      	bne.n	8007c98 <HAL_CRYP_Decrypt+0x11c>
  {
    /* Change state Busy */
    hcryp->State = HAL_CRYP_STATE_BUSY;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2202      	movs	r2, #2
 8007b9c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
    __HAL_LOCK(hcryp);
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8007ba6:	2b01      	cmp	r3, #1
 8007ba8:	d101      	bne.n	8007bae <HAL_CRYP_Decrypt+0x32>
 8007baa:	2302      	movs	r3, #2
 8007bac:	e07d      	b.n	8007caa <HAL_CRYP_Decrypt+0x12e>
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	2201      	movs	r2, #1
 8007bb2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /*  Reset CrypInCount, CrypOutCount and Initialize pCrypInBuffPtr and pCrypOutBuffPtr  parameters*/
    hcryp->CrypInCount = 0U;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hcryp->CrypOutCount = 0U;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    hcryp->pCrypInBuffPtr = pInput;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	68ba      	ldr	r2, [r7, #8]
 8007bca:	63da      	str	r2, [r3, #60]	@ 0x3c
    hcryp->pCrypOutBuffPtr = pOutput;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	683a      	ldr	r2, [r7, #0]
 8007bd0:	641a      	str	r2, [r3, #64]	@ 0x40

    /*  Calculate Size parameter in Byte*/
    if (hcryp->Init.DataWidthUnit == CRYP_DATAWIDTHUNIT_WORD)
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d106      	bne.n	8007be8 <HAL_CRYP_Decrypt+0x6c>
    {
      hcryp->Size = Size * 4U;
 8007bda:	88fb      	ldrh	r3, [r7, #6]
 8007bdc:	009b      	lsls	r3, r3, #2
 8007bde:	b29a      	uxth	r2, r3
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
 8007be6:	e003      	b.n	8007bf0 <HAL_CRYP_Decrypt+0x74>
    }
    else
    {
      hcryp->Size = Size;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	88fa      	ldrh	r2, [r7, #6]
 8007bec:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
    }

    /* Set Decryption operating mode*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_DECRYPT);
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f023 0218 	bic.w	r2, r3, #24
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f042 0210 	orr.w	r2, r2, #16
 8007c02:	601a      	str	r2, [r3, #0]

    /* algo get algorithm selected */
    algo = hcryp->Instance->CR & AES_CR_CHMOD;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	681a      	ldr	r2, [r3, #0]
 8007c0a:	4b2a      	ldr	r3, [pc, #168]	@ (8007cb4 <HAL_CRYP_Decrypt+0x138>)
 8007c0c:	4013      	ands	r3, r2
 8007c0e:	613b      	str	r3, [r7, #16]

    switch (algo)
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c16:	d023      	beq.n	8007c60 <HAL_CRYP_Decrypt+0xe4>
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c1e:	d826      	bhi.n	8007c6e <HAL_CRYP_Decrypt+0xf2>
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	2b60      	cmp	r3, #96	@ 0x60
 8007c24:	d015      	beq.n	8007c52 <HAL_CRYP_Decrypt+0xd6>
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	2b60      	cmp	r3, #96	@ 0x60
 8007c2a:	d820      	bhi.n	8007c6e <HAL_CRYP_Decrypt+0xf2>
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	2b40      	cmp	r3, #64	@ 0x40
 8007c30:	d008      	beq.n	8007c44 <HAL_CRYP_Decrypt+0xc8>
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	2b40      	cmp	r3, #64	@ 0x40
 8007c36:	d81a      	bhi.n	8007c6e <HAL_CRYP_Decrypt+0xf2>
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d002      	beq.n	8007c44 <HAL_CRYP_Decrypt+0xc8>
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	2b20      	cmp	r3, #32
 8007c42:	d114      	bne.n	8007c6e <HAL_CRYP_Decrypt+0xf2>
    {
      case CRYP_AES_ECB:
      case CRYP_AES_CBC:
      case CRYP_AES_CTR:
        /* AES decryption */
        status = CRYP_AES_Decrypt(hcryp, Timeout);
 8007c44:	6a39      	ldr	r1, [r7, #32]
 8007c46:	68f8      	ldr	r0, [r7, #12]
 8007c48:	f000 f930 	bl	8007eac <CRYP_AES_Decrypt>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	75fb      	strb	r3, [r7, #23]
        break;
 8007c50:	e016      	b.n	8007c80 <HAL_CRYP_Decrypt+0x104>

      case CRYP_AES_GCM_GMAC:
        /* AES GCM decryption */
        status = CRYP_AESGCM_Process(hcryp, Timeout);
 8007c52:	6a39      	ldr	r1, [r7, #32]
 8007c54:	68f8      	ldr	r0, [r7, #12]
 8007c56:	f000 fbf5 	bl	8008444 <CRYP_AESGCM_Process>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	75fb      	strb	r3, [r7, #23]
        break;
 8007c5e:	e00f      	b.n	8007c80 <HAL_CRYP_Decrypt+0x104>

      case CRYP_AES_CCM:
        /* AES CCM decryption */
        status = CRYP_AESCCM_Process(hcryp, Timeout);
 8007c60:	6a39      	ldr	r1, [r7, #32]
 8007c62:	68f8      	ldr	r0, [r7, #12]
 8007c64:	f000 fdd0 	bl	8008808 <CRYP_AESCCM_Process>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	75fb      	strb	r3, [r7, #23]
        break;
 8007c6c:	e008      	b.n	8007c80 <HAL_CRYP_Decrypt+0x104>

      default:
        hcryp->ErrorCode |= HAL_CRYP_ERROR_NOT_SUPPORTED;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c72:	f043 0220 	orr.w	r2, r3, #32
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	65da      	str	r2, [r3, #92]	@ 0x5c
        status = HAL_ERROR;
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	75fb      	strb	r3, [r7, #23]
        break;
 8007c7e:	bf00      	nop
    }

    if (status == HAL_OK)
 8007c80:	7dfb      	ldrb	r3, [r7, #23]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d110      	bne.n	8007ca8 <HAL_CRYP_Decrypt+0x12c>
    {
      /* Change the CRYP peripheral state */
      hcryp->State = HAL_CRYP_STATE_READY;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	2201      	movs	r2, #1
 8007c8a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
      __HAL_UNLOCK(hcryp);
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2200      	movs	r2, #0
 8007c92:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8007c96:	e007      	b.n	8007ca8 <HAL_CRYP_Decrypt+0x12c>
    }
  }
  else
  {
    /* Busy error code field */
    hcryp->ErrorCode |= HAL_CRYP_ERROR_BUSY;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c9c:	f043 0208 	orr.w	r2, r3, #8
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	65da      	str	r2, [r3, #92]	@ 0x5c
    status = HAL_ERROR;
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007ca8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3718      	adds	r7, #24
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}
 8007cb2:	bf00      	nop
 8007cb4:	00010060 	.word	0x00010060

08007cb8 <HAL_CRYP_ErrorCallback>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module.
  * @retval None
  */
__weak void HAL_CRYP_ErrorCallback(CRYP_HandleTypeDef *hcryp)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b083      	sub	sp, #12
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  UNUSED(hcryp);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_CRYP_ErrorCallback can be implemented in the user file
   */
}
 8007cc0:	bf00      	nop
 8007cc2:	370c      	adds	r7, #12
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr

08007ccc <CRYP_AES_Encrypt>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure
  * @param  Timeout specify Timeout value
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_AES_Encrypt(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b086      	sub	sp, #24
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
 8007cd4:	6039      	str	r1, [r7, #0]
  uint16_t incount;  /* Temporary CrypInCount Value */
  uint16_t outcount;  /* Temporary CrypOutCount Value */
  uint32_t dokeyivconfig = 1U; /* By default, carry out peripheral Key and IV configuration */
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	613b      	str	r3, [r7, #16]
  uint32_t tickstart;

  if ((hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE) || (hcryp->Init.KeyIVConfigSkip == CRYP_IVCONFIG_ONCE))
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cde:	2b01      	cmp	r3, #1
 8007ce0:	d003      	beq.n	8007cea <CRYP_AES_Encrypt+0x1e>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ce6:	2b04      	cmp	r3, #4
 8007ce8:	d109      	bne.n	8007cfe <CRYP_AES_Encrypt+0x32>
  {
    if (hcryp->KeyIVConfig == 1U)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007cee:	2b01      	cmp	r3, #1
 8007cf0:	d102      	bne.n	8007cf8 <CRYP_AES_Encrypt+0x2c>
    {
      /* If the Key and IV configuration has to be done only once
         and if it has already been done, skip it */
      dokeyivconfig = 0U;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	613b      	str	r3, [r7, #16]
 8007cf6:	e002      	b.n	8007cfe <CRYP_AES_Encrypt+0x32>
    else
    {
      /* If the Key and IV configuration has to be done only once
         and if it has not been done already, do it and set KeyIVConfig
         to keep track it won't have to be done again next time */
      hcryp->KeyIVConfig = 1U;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  if (dokeyivconfig == 1U)
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	d17a      	bne.n	8007dfa <CRYP_AES_Encrypt+0x12e>
  {
    if ((hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE) || \
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d08:	2b01      	cmp	r3, #1
 8007d0a:	d003      	beq.n	8007d14 <CRYP_AES_Encrypt+0x48>
        (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ALWAYS))
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    if ((hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE) || \
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d160      	bne.n	8007dd6 <CRYP_AES_Encrypt+0x10a>
    {
      if (hcryp->Instance == AES)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a63      	ldr	r2, [pc, #396]	@ (8007ea8 <CRYP_AES_Encrypt+0x1dc>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d114      	bne.n	8007d48 <CRYP_AES_Encrypt+0x7c>
      {
        /* Set the Key */
        if (hcryp->Init.KeyMode != CRYP_KEYMODE_SHARED)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d22:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007d26:	d006      	beq.n	8007d36 <CRYP_AES_Encrypt+0x6a>
        {
          CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	689b      	ldr	r3, [r3, #8]
 8007d2c:	4619      	mov	r1, r3
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f000 fb00 	bl	8008334 <CRYP_SetKey>
 8007d34:	e048      	b.n	8007dc8 <CRYP_AES_Encrypt+0xfc>
        }
        else /* After sharing the key, AES should set KMOD[1:0] to 00.*/
        {
          hcryp->Instance->CR &=  ~CRYP_KEYMODE_SHARED;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	681a      	ldr	r2, [r3, #0]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 8007d44:	601a      	str	r2, [r3, #0]
 8007d46:	e03f      	b.n	8007dc8 <CRYP_AES_Encrypt+0xfc>
        }
      }
      else
      {
        /* We should re-write Key, in the case where we change key after first operation */
        if ((hcryp->Init.KeySelect == CRYP_KEYSEL_NORMAL) && (hcryp->Init.KeyMode == CRYP_KEYMODE_NORMAL))
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d109      	bne.n	8007d64 <CRYP_AES_Encrypt+0x98>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d105      	bne.n	8007d64 <CRYP_AES_Encrypt+0x98>
        {
          /* Set the Key */
          CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	689b      	ldr	r3, [r3, #8]
 8007d5c:	4619      	mov	r1, r3
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f000 fae8 	bl	8008334 <CRYP_SetKey>
        }
        /* Get tick */
        tickstart = HAL_GetTick();
 8007d64:	f7fd fe24 	bl	80059b0 <HAL_GetTick>
 8007d68:	60f8      	str	r0, [r7, #12]

        while (HAL_IS_BIT_CLR(hcryp->Instance->SR, CRYP_FLAG_KEYVALID))
 8007d6a:	e026      	b.n	8007dba <CRYP_AES_Encrypt+0xee>
        {
          /* Check for the Timeout */
          if (Timeout != HAL_MAX_DELAY)
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d72:	d022      	beq.n	8007dba <CRYP_AES_Encrypt+0xee>
          {
            if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007d74:	f7fd fe1c 	bl	80059b0 <HAL_GetTick>
 8007d78:	4602      	mov	r2, r0
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	1ad3      	subs	r3, r2, r3
 8007d7e:	683a      	ldr	r2, [r7, #0]
 8007d80:	429a      	cmp	r2, r3
 8007d82:	d302      	bcc.n	8007d8a <CRYP_AES_Encrypt+0xbe>
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d117      	bne.n	8007dba <CRYP_AES_Encrypt+0xee>
            {
              /* Disable the CRYP peripheral clock */
              __HAL_CRYP_DISABLE(hcryp);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	681a      	ldr	r2, [r3, #0]
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f022 0201 	bic.w	r2, r2, #1
 8007d98:	601a      	str	r2, [r3, #0]

              /* Change state */
              hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d9e:	f043 0210 	orr.w	r2, r3, #16
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	65da      	str	r2, [r3, #92]	@ 0x5c
              hcryp->State = HAL_CRYP_STATE_READY;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2201      	movs	r2, #1
 8007daa:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
              __HAL_UNLOCK(hcryp);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2200      	movs	r2, #0
 8007db2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
              return HAL_ERROR;
 8007db6:	2301      	movs	r3, #1
 8007db8:	e071      	b.n	8007e9e <CRYP_AES_Encrypt+0x1d2>
        while (HAL_IS_BIT_CLR(hcryp->Instance->SR, CRYP_FLAG_KEYVALID))
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	685b      	ldr	r3, [r3, #4]
 8007dc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d0d1      	beq.n	8007d6c <CRYP_AES_Encrypt+0xa0>
            }
          }
        }
      }
      if (hcryp->Init.Algorithm != CRYP_AES_ECB)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	695b      	ldr	r3, [r3, #20]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d002      	beq.n	8007dd6 <CRYP_AES_Encrypt+0x10a>
      {
        /* Set the Initialization Vector */
        CRYP_SetIV(hcryp);
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f000 fb10 	bl	80083f6 <CRYP_SetIV>
      }
    }
    /* key & IV configuration for CBC and CTR in interleave mode */
    if (hcryp->Init.KeyIVConfigSkip == CRYP_IVCONFIG_ONCE)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dda:	2b04      	cmp	r3, #4
 8007ddc:	d117      	bne.n	8007e0e <CRYP_AES_Encrypt+0x142>
    {
      /* Set the Key */
      CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	689b      	ldr	r3, [r3, #8]
 8007de2:	4619      	mov	r1, r3
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f000 faa5 	bl	8008334 <CRYP_SetKey>
      if (hcryp->Init.Algorithm != CRYP_AES_ECB)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	695b      	ldr	r3, [r3, #20]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d00d      	beq.n	8007e0e <CRYP_AES_Encrypt+0x142>
      {
        /* Set the Initialization Vector*/
        CRYP_SetIV(hcryp);
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f000 faff 	bl	80083f6 <CRYP_SetIV>
 8007df8:	e009      	b.n	8007e0e <CRYP_AES_Encrypt+0x142>
    }
  } /* If (dokeyivconfig == 1U) */
  else
  {
    /* interleave mode Key configuration  */
    if (hcryp->Init.KeyIVConfigSkip == CRYP_IVCONFIG_ONCE)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dfe:	2b04      	cmp	r3, #4
 8007e00:	d105      	bne.n	8007e0e <CRYP_AES_Encrypt+0x142>
    {
      /* Set the Key */
      CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	689b      	ldr	r3, [r3, #8]
 8007e06:	4619      	mov	r1, r3
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f000 fa93 	bl	8008334 <CRYP_SetKey>
    }
  }
  /* Peripheral Key configuration to not do, IV to configure for CBC */
  if (hcryp->Init.KeyIVConfigSkip == CRYP_KEYNOCONFIG)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e12:	2b02      	cmp	r3, #2
 8007e14:	d106      	bne.n	8007e24 <CRYP_AES_Encrypt+0x158>
  {
    if (hcryp->Init.Algorithm != CRYP_AES_ECB)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	695b      	ldr	r3, [r3, #20]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d002      	beq.n	8007e24 <CRYP_AES_Encrypt+0x158>
    {
      /* Set the Initialization Vector*/
      CRYP_SetIV(hcryp);
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f000 fae9 	bl	80083f6 <CRYP_SetIV>
    }
  }

  /* Set the phase */
  hcryp->Phase = CRYP_PHASE_PROCESS;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2202      	movs	r2, #2
 8007e28:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable CRYP */
  __HAL_CRYP_ENABLE(hcryp);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	681a      	ldr	r2, [r3, #0]
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f042 0201 	orr.w	r2, r2, #1
 8007e38:	601a      	str	r2, [r3, #0]

  incount = hcryp->CrypInCount;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007e40:	82fb      	strh	r3, [r7, #22]
  outcount = hcryp->CrypOutCount;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8007e48:	82bb      	strh	r3, [r7, #20]
  while ((incount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 8007e4a:	e00b      	b.n	8007e64 <CRYP_AES_Encrypt+0x198>
  {
    /* Write plain data and get cipher data */
    CRYP_AES_ProcessData(hcryp, Timeout);
 8007e4c:	6839      	ldr	r1, [r7, #0]
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f000 f9c0 	bl	80081d4 <CRYP_AES_ProcessData>
    incount = hcryp->CrypInCount;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007e5a:	82fb      	strh	r3, [r7, #22]
    outcount = hcryp->CrypOutCount;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8007e62:	82bb      	strh	r3, [r7, #20]
  while ((incount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8007e6a:	089b      	lsrs	r3, r3, #2
 8007e6c:	b29b      	uxth	r3, r3
 8007e6e:	8afa      	ldrh	r2, [r7, #22]
 8007e70:	429a      	cmp	r2, r3
 8007e72:	d207      	bcs.n	8007e84 <CRYP_AES_Encrypt+0x1b8>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8007e7a:	089b      	lsrs	r3, r3, #2
 8007e7c:	b29b      	uxth	r3, r3
 8007e7e:	8aba      	ldrh	r2, [r7, #20]
 8007e80:	429a      	cmp	r2, r3
 8007e82:	d3e3      	bcc.n	8007e4c <CRYP_AES_Encrypt+0x180>
  }

  /* Disable CRYP */
  __HAL_CRYP_DISABLE(hcryp);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	681a      	ldr	r2, [r3, #0]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f022 0201 	bic.w	r2, r2, #1
 8007e92:	601a      	str	r2, [r3, #0]

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_READY;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2201      	movs	r2, #1
 8007e98:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  return HAL_OK;
 8007e9c:	2300      	movs	r3, #0
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3718      	adds	r7, #24
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}
 8007ea6:	bf00      	nop
 8007ea8:	420c0000 	.word	0x420c0000

08007eac <CRYP_AES_Decrypt>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure
  * @param  Timeout Specify Timeout value
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_AES_Decrypt(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b084      	sub	sp, #16
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
 8007eb4:	6039      	str	r1, [r7, #0]
  uint16_t incount;  /* Temporary CrypInCount Value */
  uint16_t outcount;  /* Temporary CrypOutCount Value */
  uint32_t dokeyivconfig = 1U; /* By default, carry out peripheral Key and IV configuration */
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	60bb      	str	r3, [r7, #8]

  if ((hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE) || (hcryp->Init.KeyIVConfigSkip == CRYP_IVCONFIG_ONCE))
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ebe:	2b01      	cmp	r3, #1
 8007ec0:	d003      	beq.n	8007eca <CRYP_AES_Decrypt+0x1e>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ec6:	2b04      	cmp	r3, #4
 8007ec8:	d109      	bne.n	8007ede <CRYP_AES_Decrypt+0x32>
  {
    if (hcryp->KeyIVConfig == 1U)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ece:	2b01      	cmp	r3, #1
 8007ed0:	d102      	bne.n	8007ed8 <CRYP_AES_Decrypt+0x2c>
    {
      /* If the Key and IV configuration has to be done only once
         and if it has already been done, skip it */
      dokeyivconfig = 0U;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	60bb      	str	r3, [r7, #8]
 8007ed6:	e002      	b.n	8007ede <CRYP_AES_Decrypt+0x32>
    else
    {
      /* If the Key and IV configuration has to be done only once
         and if it has not been done already, do it and set KeyIVConfig
         to keep track it won't have to be done again next time */
      hcryp->KeyIVConfig = 1U;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2201      	movs	r2, #1
 8007edc:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  if (dokeyivconfig == 1U)
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	2b01      	cmp	r3, #1
 8007ee2:	f040 80e1 	bne.w	80080a8 <CRYP_AES_Decrypt+0x1fc>
  {
    if (hcryp->Instance == AES)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4a95      	ldr	r2, [pc, #596]	@ (8008140 <CRYP_AES_Decrypt+0x294>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d17b      	bne.n	8007fe8 <CRYP_AES_Decrypt+0x13c>
    {
      /*  Key preparation for ECB/CBC */
      if (hcryp->Init.Algorithm != CRYP_AES_CTR)   /*ECB or CBC*/
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	695b      	ldr	r3, [r3, #20]
 8007ef4:	2b40      	cmp	r3, #64	@ 0x40
 8007ef6:	d05e      	beq.n	8007fb6 <CRYP_AES_Decrypt+0x10a>
      {
        /* key preparation for decryption, operating mode 2*/
        MODIFY_REG(hcryp->Instance->CR, AES_CR_KMOD, CRYP_KEYMODE_NORMAL);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	681a      	ldr	r2, [r3, #0]
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8007f06:	601a      	str	r2, [r3, #0]
        MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_KEYDERIVATION);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f023 0218 	bic.w	r2, r3, #24
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f042 0208 	orr.w	r2, r2, #8
 8007f1a:	601a      	str	r2, [r3, #0]

        /* Set the Key */
        if ((hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE) || \
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	d003      	beq.n	8007f2c <CRYP_AES_Decrypt+0x80>
            (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ALWAYS))
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if ((hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE) || \
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d114      	bne.n	8007f56 <CRYP_AES_Decrypt+0xaa>
        {
          if (hcryp->Init.KeyMode != CRYP_KEYMODE_SHARED)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f30:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007f34:	d006      	beq.n	8007f44 <CRYP_AES_Decrypt+0x98>
          {
            CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	689b      	ldr	r3, [r3, #8]
 8007f3a:	4619      	mov	r1, r3
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f000 f9f9 	bl	8008334 <CRYP_SetKey>
          if (hcryp->Init.KeyMode != CRYP_KEYMODE_SHARED)
 8007f42:	e012      	b.n	8007f6a <CRYP_AES_Decrypt+0xbe>
          }
          else /*after sharing the key, AES should set KMOD[1:0] to 00.*/
          {
            hcryp->Instance->CR &=  ~CRYP_KEYMODE_SHARED;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	681a      	ldr	r2, [r3, #0]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 8007f52:	601a      	str	r2, [r3, #0]
          if (hcryp->Init.KeyMode != CRYP_KEYMODE_SHARED)
 8007f54:	e009      	b.n	8007f6a <CRYP_AES_Decrypt+0xbe>
          }
        }

        /* interleave mode Key configuration  */
        else if (hcryp->Init.KeyIVConfigSkip == CRYP_IVCONFIG_ONCE)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f5a:	2b04      	cmp	r3, #4
 8007f5c:	d105      	bne.n	8007f6a <CRYP_AES_Decrypt+0xbe>
        {
          /* Set the Key */
          CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	689b      	ldr	r3, [r3, #8]
 8007f62:	4619      	mov	r1, r3
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f000 f9e5 	bl	8008334 <CRYP_SetKey>
        {
          /* Nothing to do */
        }

        /* Enable CRYP */
        __HAL_CRYP_ENABLE(hcryp);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	681a      	ldr	r2, [r3, #0]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f042 0201 	orr.w	r2, r2, #1
 8007f78:	601a      	str	r2, [r3, #0]

        /* Wait for CCF flag to be raised */
        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8007f7a:	6839      	ldr	r1, [r7, #0]
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f000 ffef 	bl	8008f60 <CRYP_WaitOnCCFlag>
 8007f82:	4603      	mov	r3, r0
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d001      	beq.n	8007f8c <CRYP_AES_Decrypt+0xe0>
        {
          return HAL_ERROR;
 8007f88:	2301      	movs	r3, #1
 8007f8a:	e11e      	b.n	80081ca <CRYP_AES_Decrypt+0x31e>
        }
        /* Clear CCF Flag */
        __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CLEAR_CCF);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f8d3 2308 	ldr.w	r2, [r3, #776]	@ 0x308
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f042 0201 	orr.w	r2, r2, #1
 8007f9c:	f8c3 2308 	str.w	r2, [r3, #776]	@ 0x308

        /* Return to decryption operating mode(Mode 3)*/
        MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_DECRYPT);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f023 0218 	bic.w	r2, r3, #24
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f042 0210 	orr.w	r2, r2, #16
 8007fb2:	601a      	str	r2, [r3, #0]
 8007fb4:	e070      	b.n	8008098 <CRYP_AES_Decrypt+0x1ec>
      }
      else  /*Algorithm CTR */
      {
        /* Set the Key */
        if (hcryp->Init.KeyIVConfigSkip != CRYP_KEYNOCONFIG)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fba:	2b02      	cmp	r3, #2
 8007fbc:	d06c      	beq.n	8008098 <CRYP_AES_Decrypt+0x1ec>
        {
          if (hcryp->Init.KeyMode != CRYP_KEYMODE_SHARED)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fc2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007fc6:	d006      	beq.n	8007fd6 <CRYP_AES_Decrypt+0x12a>
          {
            CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	689b      	ldr	r3, [r3, #8]
 8007fcc:	4619      	mov	r1, r3
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f000 f9b0 	bl	8008334 <CRYP_SetKey>
 8007fd4:	e060      	b.n	8008098 <CRYP_AES_Decrypt+0x1ec>
          }
          else /*after sharing the key, AES should set KMOD[1:0] to 00.*/
          {
            hcryp->Instance->CR &=  ~CRYP_KEYMODE_SHARED;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	681a      	ldr	r2, [r3, #0]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 8007fe4:	601a      	str	r2, [r3, #0]
 8007fe6:	e057      	b.n	8008098 <CRYP_AES_Decrypt+0x1ec>
        }
      }
    }
    else /*SAES*/
    {
      if (hcryp->Init.Algorithm != CRYP_AES_CTR)   /*ECB or CBC*/
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	695b      	ldr	r3, [r3, #20]
 8007fec:	2b40      	cmp	r3, #64	@ 0x40
 8007fee:	d041      	beq.n	8008074 <CRYP_AES_Decrypt+0x1c8>
      {
        /* key preparation for decryption, operating mode 2*/
        MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_KEYDERIVATION);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f023 0218 	bic.w	r2, r3, #24
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f042 0208 	orr.w	r2, r2, #8
 8008002:	601a      	str	r2, [r3, #0]

        /* we should re-write Key, in the case where we change key after first operation*/
        if ((hcryp->Init.KeySelect == CRYP_KEYSEL_NORMAL) && (hcryp->Init.KeyMode == CRYP_KEYMODE_NORMAL))
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008008:	2b00      	cmp	r3, #0
 800800a:	d10d      	bne.n	8008028 <CRYP_AES_Decrypt+0x17c>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008010:	2b00      	cmp	r3, #0
 8008012:	d109      	bne.n	8008028 <CRYP_AES_Decrypt+0x17c>
        {
          if (hcryp->Init.KeyIVConfigSkip != CRYP_KEYNOCONFIG)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008018:	2b02      	cmp	r3, #2
 800801a:	d005      	beq.n	8008028 <CRYP_AES_Decrypt+0x17c>
          {
            CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	689b      	ldr	r3, [r3, #8]
 8008020:	4619      	mov	r1, r3
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f000 f986 	bl	8008334 <CRYP_SetKey>
          }
        }

        /* Enable SAES */
        __HAL_CRYP_ENABLE(hcryp);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	681a      	ldr	r2, [r3, #0]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f042 0201 	orr.w	r2, r2, #1
 8008036:	601a      	str	r2, [r3, #0]

        /* Wait for CCF flag to be raised */
        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8008038:	6839      	ldr	r1, [r7, #0]
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 ff90 	bl	8008f60 <CRYP_WaitOnCCFlag>
 8008040:	4603      	mov	r3, r0
 8008042:	2b00      	cmp	r3, #0
 8008044:	d001      	beq.n	800804a <CRYP_AES_Decrypt+0x19e>
        {
          return HAL_ERROR;
 8008046:	2301      	movs	r3, #1
 8008048:	e0bf      	b.n	80081ca <CRYP_AES_Decrypt+0x31e>
        }
        /* Clear CCF Flag */
        __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CLEAR_CCF);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f8d3 2308 	ldr.w	r2, [r3, #776]	@ 0x308
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f042 0201 	orr.w	r2, r2, #1
 800805a:	f8c3 2308 	str.w	r2, [r3, #776]	@ 0x308

        /*  End of Key preparation for ECB/CBC */
        /* Return to decryption operating mode(Mode 3)*/
        MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_DECRYPT);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f023 0218 	bic.w	r2, r3, #24
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f042 0210 	orr.w	r2, r2, #16
 8008070:	601a      	str	r2, [r3, #0]
 8008072:	e011      	b.n	8008098 <CRYP_AES_Decrypt+0x1ec>
      }
      else  /*Algorithm CTR */
      {
        /* we should re-write Key, in the case where we change key after first operation*/
        if ((hcryp->Init.KeySelect == CRYP_KEYSEL_NORMAL) && (hcryp->Init.KeyMode == CRYP_KEYMODE_NORMAL))
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008078:	2b00      	cmp	r3, #0
 800807a:	d10d      	bne.n	8008098 <CRYP_AES_Decrypt+0x1ec>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008080:	2b00      	cmp	r3, #0
 8008082:	d109      	bne.n	8008098 <CRYP_AES_Decrypt+0x1ec>
        {
          if (hcryp->Init.KeyIVConfigSkip != CRYP_KEYNOCONFIG)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008088:	2b02      	cmp	r3, #2
 800808a:	d005      	beq.n	8008098 <CRYP_AES_Decrypt+0x1ec>
          {
            CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	689b      	ldr	r3, [r3, #8]
 8008090:	4619      	mov	r1, r3
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f000 f94e 	bl	8008334 <CRYP_SetKey>
          }
        }
      }
    }
    /* Set IV */
    if (hcryp->Init.Algorithm != CRYP_AES_ECB)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	695b      	ldr	r3, [r3, #20]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d057      	beq.n	8008150 <CRYP_AES_Decrypt+0x2a4>
    {
      /* Set the Initialization Vector*/
      CRYP_SetIV(hcryp);
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f000 f9a8 	bl	80083f6 <CRYP_SetIV>
 80080a6:	e053      	b.n	8008150 <CRYP_AES_Decrypt+0x2a4>
  } /* if (dokeyivconfig == 1U) */

  else /* if (dokeyivconfig == 0U) */
  {
    /* interleave mode Key configuration  */
    if (hcryp->Init.KeyIVConfigSkip == CRYP_IVCONFIG_ONCE)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080ac:	2b04      	cmp	r3, #4
 80080ae:	d14f      	bne.n	8008150 <CRYP_AES_Decrypt+0x2a4>
    {
      if (hcryp->Instance == AES)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4a22      	ldr	r2, [pc, #136]	@ (8008140 <CRYP_AES_Decrypt+0x294>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d14a      	bne.n	8008150 <CRYP_AES_Decrypt+0x2a4>
      {
        /*  Key preparation for ECB/CBC */
        if (hcryp->Init.Algorithm != CRYP_AES_CTR)   /*ECB or CBC*/
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	695b      	ldr	r3, [r3, #20]
 80080be:	2b40      	cmp	r3, #64	@ 0x40
 80080c0:	d040      	beq.n	8008144 <CRYP_AES_Decrypt+0x298>
        {
          /* key preparation for decryption, operating mode 2*/
          MODIFY_REG(hcryp->Instance->CR, AES_CR_KMOD, CRYP_KEYMODE_NORMAL);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	681a      	ldr	r2, [r3, #0]
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80080d0:	601a      	str	r2, [r3, #0]
          MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_KEYDERIVATION);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f023 0218 	bic.w	r2, r3, #24
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f042 0208 	orr.w	r2, r2, #8
 80080e4:	601a      	str	r2, [r3, #0]

          /* Set the Key */
          CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	689b      	ldr	r3, [r3, #8]
 80080ea:	4619      	mov	r1, r3
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f000 f921 	bl	8008334 <CRYP_SetKey>

          /* Enable CRYP */
          __HAL_CRYP_ENABLE(hcryp);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	681a      	ldr	r2, [r3, #0]
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f042 0201 	orr.w	r2, r2, #1
 8008100:	601a      	str	r2, [r3, #0]

          /* Wait for CCF flag to be raised */
          if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8008102:	6839      	ldr	r1, [r7, #0]
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f000 ff2b 	bl	8008f60 <CRYP_WaitOnCCFlag>
 800810a:	4603      	mov	r3, r0
 800810c:	2b00      	cmp	r3, #0
 800810e:	d001      	beq.n	8008114 <CRYP_AES_Decrypt+0x268>
          {
            return HAL_ERROR;
 8008110:	2301      	movs	r3, #1
 8008112:	e05a      	b.n	80081ca <CRYP_AES_Decrypt+0x31e>
          }
          /* Clear CCF Flag */
          __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CLEAR_CCF);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f8d3 2308 	ldr.w	r2, [r3, #776]	@ 0x308
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f042 0201 	orr.w	r2, r2, #1
 8008124:	f8c3 2308 	str.w	r2, [r3, #776]	@ 0x308

          /* Return to decryption operating mode(Mode 3)*/
          MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_DECRYPT);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f023 0218 	bic.w	r2, r3, #24
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f042 0210 	orr.w	r2, r2, #16
 800813a:	601a      	str	r2, [r3, #0]
 800813c:	e008      	b.n	8008150 <CRYP_AES_Decrypt+0x2a4>
 800813e:	bf00      	nop
 8008140:	420c0000 	.word	0x420c0000
        }
        else  /*Algorithm CTR */
        {
          /* Set the Key */
          CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	689b      	ldr	r3, [r3, #8]
 8008148:	4619      	mov	r1, r3
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f000 f8f2 	bl	8008334 <CRYP_SetKey>
      }
    }

  }
  /* Set the phase */
  hcryp->Phase = CRYP_PHASE_PROCESS;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2202      	movs	r2, #2
 8008154:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable CRYP */
  __HAL_CRYP_ENABLE(hcryp);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	681a      	ldr	r2, [r3, #0]
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f042 0201 	orr.w	r2, r2, #1
 8008164:	601a      	str	r2, [r3, #0]

  incount = hcryp->CrypInCount;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800816c:	81fb      	strh	r3, [r7, #14]
  outcount = hcryp->CrypOutCount;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8008174:	81bb      	strh	r3, [r7, #12]
  while ((incount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 8008176:	e00b      	b.n	8008190 <CRYP_AES_Decrypt+0x2e4>
  {
    /* Write plain data and get cipher data */
    CRYP_AES_ProcessData(hcryp, Timeout);
 8008178:	6839      	ldr	r1, [r7, #0]
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f000 f82a 	bl	80081d4 <CRYP_AES_ProcessData>
    incount = hcryp->CrypInCount;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008186:	81fb      	strh	r3, [r7, #14]
    outcount = hcryp->CrypOutCount;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800818e:	81bb      	strh	r3, [r7, #12]
  while ((incount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8008196:	089b      	lsrs	r3, r3, #2
 8008198:	b29b      	uxth	r3, r3
 800819a:	89fa      	ldrh	r2, [r7, #14]
 800819c:	429a      	cmp	r2, r3
 800819e:	d207      	bcs.n	80081b0 <CRYP_AES_Decrypt+0x304>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80081a6:	089b      	lsrs	r3, r3, #2
 80081a8:	b29b      	uxth	r3, r3
 80081aa:	89ba      	ldrh	r2, [r7, #12]
 80081ac:	429a      	cmp	r2, r3
 80081ae:	d3e3      	bcc.n	8008178 <CRYP_AES_Decrypt+0x2cc>
  }
  /* Disable CRYP */
  __HAL_CRYP_DISABLE(hcryp);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	681a      	ldr	r2, [r3, #0]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f022 0201 	bic.w	r2, r2, #1
 80081be:	601a      	str	r2, [r3, #0]

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_READY;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2201      	movs	r2, #1
 80081c4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  return HAL_OK;
 80081c8:	2300      	movs	r3, #0
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3710      	adds	r7, #16
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}
 80081d2:	bf00      	nop

080081d4 <CRYP_AES_ProcessData>:
  *         the configuration information for CRYP module
  * @param  Timeout Specify Timeout value
  * @retval None
  */
static void CRYP_AES_ProcessData(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b088      	sub	sp, #32
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	6039      	str	r1, [r7, #0]

  uint32_t temp[4];  /* Temporary CrypOutBuff */
  uint32_t i;

  /* Write the input block in the IN FIFO */
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80081e8:	b29b      	uxth	r3, r3
 80081ea:	009b      	lsls	r3, r3, #2
 80081ec:	441a      	add	r2, r3
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	6812      	ldr	r2, [r2, #0]
 80081f4:	609a      	str	r2, [r3, #8]
  hcryp->CrypInCount++;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80081fc:	b29b      	uxth	r3, r3
 80081fe:	3301      	adds	r3, #1
 8008200:	b29a      	uxth	r2, r3
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008212:	b29b      	uxth	r3, r3
 8008214:	009b      	lsls	r3, r3, #2
 8008216:	441a      	add	r2, r3
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	6812      	ldr	r2, [r2, #0]
 800821e:	609a      	str	r2, [r3, #8]
  hcryp->CrypInCount++;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008226:	b29b      	uxth	r3, r3
 8008228:	3301      	adds	r3, #1
 800822a:	b29a      	uxth	r2, r3
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800823c:	b29b      	uxth	r3, r3
 800823e:	009b      	lsls	r3, r3, #2
 8008240:	441a      	add	r2, r3
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	6812      	ldr	r2, [r2, #0]
 8008248:	609a      	str	r2, [r3, #8]
  hcryp->CrypInCount++;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008250:	b29b      	uxth	r3, r3
 8008252:	3301      	adds	r3, #1
 8008254:	b29a      	uxth	r2, r3
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008266:	b29b      	uxth	r3, r3
 8008268:	009b      	lsls	r3, r3, #2
 800826a:	441a      	add	r2, r3
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	6812      	ldr	r2, [r2, #0]
 8008272:	609a      	str	r2, [r3, #8]
  hcryp->CrypInCount++;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800827a:	b29b      	uxth	r3, r3
 800827c:	3301      	adds	r3, #1
 800827e:	b29a      	uxth	r2, r3
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Wait for CCF flag to be raised */
  if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8008286:	6839      	ldr	r1, [r7, #0]
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f000 fe69 	bl	8008f60 <CRYP_WaitOnCCFlag>
 800828e:	4603      	mov	r3, r0
 8008290:	2b00      	cmp	r3, #0
 8008292:	d002      	beq.n	800829a <CRYP_AES_ProcessData+0xc6>
    /*Call registered error callback*/
#if (USE_HAL_CRYP_REGISTER_CALLBACKS == 1U)
    hcryp->ErrorCallback(hcryp);
#else
    /*Call legacy weak error callback*/
    HAL_CRYP_ErrorCallback(hcryp);
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f7ff fd0f 	bl	8007cb8 <HAL_CRYP_ErrorCallback>
#endif /* USE_HAL_CRYP_REGISTER_CALLBACKS */
  }

  /* Clear CCF Flag */
  __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CLEAR_CCF);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f8d3 2308 	ldr.w	r2, [r3, #776]	@ 0x308
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f042 0201 	orr.w	r2, r2, #1
 80082aa:	f8c3 2308 	str.w	r2, [r3, #776]	@ 0x308

  /* Read the output block from the output FIFO and put them in temporary buffer then
     get CrypOutBuff from temporary buffer*/
  for (i = 0U; i < 4U; i++)
 80082ae:	2300      	movs	r3, #0
 80082b0:	61fb      	str	r3, [r7, #28]
 80082b2:	e00b      	b.n	80082cc <CRYP_AES_ProcessData+0xf8>
  {
    temp[i] = hcryp->Instance->DOUTR;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	68da      	ldr	r2, [r3, #12]
 80082ba:	69fb      	ldr	r3, [r7, #28]
 80082bc:	009b      	lsls	r3, r3, #2
 80082be:	3320      	adds	r3, #32
 80082c0:	443b      	add	r3, r7
 80082c2:	f843 2c14 	str.w	r2, [r3, #-20]
  for (i = 0U; i < 4U; i++)
 80082c6:	69fb      	ldr	r3, [r7, #28]
 80082c8:	3301      	adds	r3, #1
 80082ca:	61fb      	str	r3, [r7, #28]
 80082cc:	69fb      	ldr	r3, [r7, #28]
 80082ce:	2b03      	cmp	r3, #3
 80082d0:	d9f0      	bls.n	80082b4 <CRYP_AES_ProcessData+0xe0>
  }
  i = 0U;
 80082d2:	2300      	movs	r3, #0
 80082d4:	61fb      	str	r3, [r7, #28]
  while ((hcryp->CrypOutCount < ((hcryp->Size + 3U) / 4U)) && (i < 4U))
 80082d6:	e01a      	b.n	800830e <CRYP_AES_ProcessData+0x13a>
  {
    *(uint32_t *)(hcryp->pCrypOutBuffPtr + hcryp->CrypOutCount) = temp[i];
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80082e2:	b29b      	uxth	r3, r3
 80082e4:	009b      	lsls	r3, r3, #2
 80082e6:	441a      	add	r2, r3
 80082e8:	69fb      	ldr	r3, [r7, #28]
 80082ea:	009b      	lsls	r3, r3, #2
 80082ec:	3320      	adds	r3, #32
 80082ee:	443b      	add	r3, r7
 80082f0:	f853 3c14 	ldr.w	r3, [r3, #-20]
 80082f4:	6013      	str	r3, [r2, #0]
    hcryp->CrypOutCount++;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80082fc:	b29b      	uxth	r3, r3
 80082fe:	3301      	adds	r3, #1
 8008300:	b29a      	uxth	r2, r3
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    i++;
 8008308:	69fb      	ldr	r3, [r7, #28]
 800830a:	3301      	adds	r3, #1
 800830c:	61fb      	str	r3, [r7, #28]
  while ((hcryp->CrypOutCount < ((hcryp->Size + 3U) / 4U)) && (i < 4U))
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8008314:	b29b      	uxth	r3, r3
 8008316:	461a      	mov	r2, r3
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800831e:	3303      	adds	r3, #3
 8008320:	089b      	lsrs	r3, r3, #2
 8008322:	429a      	cmp	r2, r3
 8008324:	d202      	bcs.n	800832c <CRYP_AES_ProcessData+0x158>
 8008326:	69fb      	ldr	r3, [r7, #28]
 8008328:	2b03      	cmp	r3, #3
 800832a:	d9d5      	bls.n	80082d8 <CRYP_AES_ProcessData+0x104>
  }
}
 800832c:	bf00      	nop
 800832e:	3720      	adds	r7, #32
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}

08008334 <CRYP_SetKey>:
  * @param  KeySize Size of Key
  * @note   If pKey is NULL, the Key registers are not written.
  * @retval None
  */
static void CRYP_SetKey(CRYP_HandleTypeDef *hcryp, uint32_t KeySize)
{
 8008334:	b480      	push	{r7}
 8008336:	b083      	sub	sp, #12
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
 800833c:	6039      	str	r1, [r7, #0]
  if (hcryp->Init.pKey != NULL)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	68db      	ldr	r3, [r3, #12]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d051      	beq.n	80083ea <CRYP_SetKey+0xb6>
  {
    switch (KeySize)
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d034      	beq.n	80083b6 <CRYP_SetKey+0x82>
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008352:	d149      	bne.n	80083e8 <CRYP_SetKey+0xb4>
    {
      case CRYP_KEYSIZE_256B:
        hcryp->Instance->KEYR7 = *(uint32_t *)(hcryp->Init.pKey);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	68da      	ldr	r2, [r3, #12]
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	6812      	ldr	r2, [r2, #0]
 800835e:	63da      	str	r2, [r3, #60]	@ 0x3c
        hcryp->Instance->KEYR6 = *(uint32_t *)(hcryp->Init.pKey + 1U);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	68da      	ldr	r2, [r3, #12]
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	6852      	ldr	r2, [r2, #4]
 800836a:	639a      	str	r2, [r3, #56]	@ 0x38
        hcryp->Instance->KEYR5 = *(uint32_t *)(hcryp->Init.pKey + 2U);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	68da      	ldr	r2, [r3, #12]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	6892      	ldr	r2, [r2, #8]
 8008376:	635a      	str	r2, [r3, #52]	@ 0x34
        hcryp->Instance->KEYR4 = *(uint32_t *)(hcryp->Init.pKey + 3U);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	68da      	ldr	r2, [r3, #12]
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	68d2      	ldr	r2, [r2, #12]
 8008382:	631a      	str	r2, [r3, #48]	@ 0x30
        hcryp->Instance->KEYR3 = *(uint32_t *)(hcryp->Init.pKey + 4U);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	68da      	ldr	r2, [r3, #12]
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	6912      	ldr	r2, [r2, #16]
 800838e:	61da      	str	r2, [r3, #28]
        hcryp->Instance->KEYR2 = *(uint32_t *)(hcryp->Init.pKey + 5U);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	68da      	ldr	r2, [r3, #12]
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	6952      	ldr	r2, [r2, #20]
 800839a:	619a      	str	r2, [r3, #24]
        hcryp->Instance->KEYR1 = *(uint32_t *)(hcryp->Init.pKey + 6U);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	68da      	ldr	r2, [r3, #12]
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	6992      	ldr	r2, [r2, #24]
 80083a6:	615a      	str	r2, [r3, #20]
        hcryp->Instance->KEYR0 = *(uint32_t *)(hcryp->Init.pKey + 7U);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	68da      	ldr	r2, [r3, #12]
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	69d2      	ldr	r2, [r2, #28]
 80083b2:	611a      	str	r2, [r3, #16]
        break;
 80083b4:	e019      	b.n	80083ea <CRYP_SetKey+0xb6>
      case CRYP_KEYSIZE_128B:
        hcryp->Instance->KEYR3 = *(uint32_t *)(hcryp->Init.pKey);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	68da      	ldr	r2, [r3, #12]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	6812      	ldr	r2, [r2, #0]
 80083c0:	61da      	str	r2, [r3, #28]
        hcryp->Instance->KEYR2 = *(uint32_t *)(hcryp->Init.pKey + 1U);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	68da      	ldr	r2, [r3, #12]
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	6852      	ldr	r2, [r2, #4]
 80083cc:	619a      	str	r2, [r3, #24]
        hcryp->Instance->KEYR1 = *(uint32_t *)(hcryp->Init.pKey + 2U);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	68da      	ldr	r2, [r3, #12]
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	6892      	ldr	r2, [r2, #8]
 80083d8:	615a      	str	r2, [r3, #20]
        hcryp->Instance->KEYR0 = *(uint32_t *)(hcryp->Init.pKey + 3U);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	68da      	ldr	r2, [r3, #12]
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	68d2      	ldr	r2, [r2, #12]
 80083e4:	611a      	str	r2, [r3, #16]
        break;
 80083e6:	e000      	b.n	80083ea <CRYP_SetKey+0xb6>
      default:
        break;
 80083e8:	bf00      	nop
    }
  }
}
 80083ea:	bf00      	nop
 80083ec:	370c      	adds	r7, #12
 80083ee:	46bd      	mov	sp, r7
 80083f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f4:	4770      	bx	lr

080083f6 <CRYP_SetIV>:
  *         the configuration information for CRYP module
  * @note   If IV is NULL, the IV registers are not written.
  * @retval None
  */
static void CRYP_SetIV(CRYP_HandleTypeDef *hcryp)
{
 80083f6:	b480      	push	{r7}
 80083f8:	b083      	sub	sp, #12
 80083fa:	af00      	add	r7, sp, #0
 80083fc:	6078      	str	r0, [r7, #4]
  if (hcryp->Init.pInitVect != NULL)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	691b      	ldr	r3, [r3, #16]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d017      	beq.n	8008436 <CRYP_SetIV+0x40>
  {
    /* Set the Initialization Vector*/
    hcryp->Instance->IVR3 = *(uint32_t *)(hcryp->Init.pInitVect);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	691a      	ldr	r2, [r3, #16]
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	6812      	ldr	r2, [r2, #0]
 8008410:	62da      	str	r2, [r3, #44]	@ 0x2c
    hcryp->Instance->IVR2 = *(uint32_t *)(hcryp->Init.pInitVect + 1U);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	691a      	ldr	r2, [r3, #16]
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	6852      	ldr	r2, [r2, #4]
 800841c:	629a      	str	r2, [r3, #40]	@ 0x28
    hcryp->Instance->IVR1 = *(uint32_t *)(hcryp->Init.pInitVect + 2U);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	691a      	ldr	r2, [r3, #16]
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	6892      	ldr	r2, [r2, #8]
 8008428:	625a      	str	r2, [r3, #36]	@ 0x24
    hcryp->Instance->IVR0 = *(uint32_t *)(hcryp->Init.pInitVect + 3U);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	691a      	ldr	r2, [r3, #16]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	68d2      	ldr	r2, [r2, #12]
 8008434:	621a      	str	r2, [r3, #32]
  }
}
 8008436:	bf00      	nop
 8008438:	370c      	adds	r7, #12
 800843a:	46bd      	mov	sp, r7
 800843c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008440:	4770      	bx	lr
	...

08008444 <CRYP_AESGCM_Process>:
  *         the configuration information for CRYP module
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_AESGCM_Process(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b08e      	sub	sp, #56	@ 0x38
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
 800844c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t wordsize = ((uint32_t)hcryp->Size / 4U);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8008454:	089b      	lsrs	r3, r3, #2
 8008456:	b29b      	uxth	r3, r3
 8008458:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t temp[4];  /* Temporary CrypOutBuff */
  uint32_t index;
  uint32_t lastwordsize;
  uint32_t incount;  /* Temporary CrypInCount Value */
  uint32_t outcount;  /* Temporary CrypOutCount Value */
  uint32_t dokeyivconfig = 1U; /* By default, carry out peripheral Key and IV configuration */
 800845a:	2301      	movs	r3, #1
 800845c:	623b      	str	r3, [r7, #32]

  if (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008462:	2b01      	cmp	r3, #1
 8008464:	d118      	bne.n	8008498 <CRYP_AESGCM_Process+0x54>
  {
    if (hcryp->KeyIVConfig == 1U)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800846a:	2b01      	cmp	r3, #1
 800846c:	d10a      	bne.n	8008484 <CRYP_AESGCM_Process+0x40>
    {
      /* If the Key and IV configuration has to be done only once
         and if it has already been done, skip it */
      dokeyivconfig = 0U;
 800846e:	2300      	movs	r3, #0
 8008470:	623b      	str	r3, [r7, #32]
      hcryp->SizesSum += hcryp->Size; /* Compute message total payload length */
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008476:	687a      	ldr	r2, [r7, #4]
 8008478:	f8b2 204a 	ldrh.w	r2, [r2, #74]	@ 0x4a
 800847c:	441a      	add	r2, r3
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	665a      	str	r2, [r3, #100]	@ 0x64
 8008482:	e00f      	b.n	80084a4 <CRYP_AESGCM_Process+0x60>
    else
    {
      /* If the Key and IV configuration has to be done only once
         and if it has not been done already, do it and set KeyIVConfig
         to keep track it won't have to be done again next time */
      hcryp->KeyIVConfig = 1U;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2201      	movs	r2, #1
 8008488:	661a      	str	r2, [r3, #96]	@ 0x60
      hcryp->SizesSum = hcryp->Size; /* Merely store payload length */
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8008490:	461a      	mov	r2, r3
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	665a      	str	r2, [r3, #100]	@ 0x64
 8008496:	e005      	b.n	80084a4 <CRYP_AESGCM_Process+0x60>
    }
  }
  else
  {
    hcryp->SizesSum = hcryp->Size;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800849e:	461a      	mov	r2, r3
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	665a      	str	r2, [r3, #100]	@ 0x64
  }

  if (dokeyivconfig == 1U)
 80084a4:	6a3b      	ldr	r3, [r7, #32]
 80084a6:	2b01      	cmp	r3, #1
 80084a8:	f040 80a6 	bne.w	80085f8 <CRYP_AESGCM_Process+0x1b4>
  {

    /*  Reset CrypHeaderCount */
    hcryp->CrypHeaderCount = 0U;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2200      	movs	r2, #0
 80084b0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /****************************** Init phase **********************************/

    CRYP_SET_PHASE(hcryp, CRYP_PHASE_INIT);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	681a      	ldr	r2, [r3, #0]
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 80084c2:	601a      	str	r2, [r3, #0]
    /* Set the Key */
    if (hcryp->Init.KeyIVConfigSkip != CRYP_KEYNOCONFIG)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084c8:	2b02      	cmp	r3, #2
 80084ca:	d059      	beq.n	8008580 <CRYP_AESGCM_Process+0x13c>
    {
      if (hcryp->Instance == AES)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a92      	ldr	r2, [pc, #584]	@ (800871c <CRYP_AESGCM_Process+0x2d8>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d114      	bne.n	8008500 <CRYP_AESGCM_Process+0xbc>
      {
        if (hcryp->Init.KeyMode != CRYP_KEYMODE_SHARED)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084da:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80084de:	d006      	beq.n	80084ee <CRYP_AESGCM_Process+0xaa>
        {
          CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	689b      	ldr	r3, [r3, #8]
 80084e4:	4619      	mov	r1, r3
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f7ff ff24 	bl	8008334 <CRYP_SetKey>
 80084ec:	e048      	b.n	8008580 <CRYP_AESGCM_Process+0x13c>
        }
        else /*after sharing the key, AES should set KMOD[1:0] to 00.*/
        {
          hcryp->Instance->CR &=  ~CRYP_KEYMODE_SHARED;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	681a      	ldr	r2, [r3, #0]
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 80084fc:	601a      	str	r2, [r3, #0]
 80084fe:	e03f      	b.n	8008580 <CRYP_AESGCM_Process+0x13c>
        }
      }
      else /*SAES*/
      {
        /* We should re-write Key, in the case where we change key after first operation */
        if ((hcryp->Init.KeySelect == CRYP_KEYSEL_NORMAL) && (hcryp->Init.KeyMode == CRYP_KEYMODE_NORMAL))
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008504:	2b00      	cmp	r3, #0
 8008506:	d109      	bne.n	800851c <CRYP_AESGCM_Process+0xd8>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800850c:	2b00      	cmp	r3, #0
 800850e:	d105      	bne.n	800851c <CRYP_AESGCM_Process+0xd8>
        {
          /* Set the Key */
          CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	689b      	ldr	r3, [r3, #8]
 8008514:	4619      	mov	r1, r3
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f7ff ff0c 	bl	8008334 <CRYP_SetKey>
        }
        /* Get tick */
        tickstart = HAL_GetTick();
 800851c:	f7fd fa48 	bl	80059b0 <HAL_GetTick>
 8008520:	61f8      	str	r0, [r7, #28]

        while (HAL_IS_BIT_CLR(hcryp->Instance->SR, CRYP_FLAG_KEYVALID))
 8008522:	e026      	b.n	8008572 <CRYP_AESGCM_Process+0x12e>
        {
          /* Check for the Timeout */
          if (Timeout != HAL_MAX_DELAY)
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800852a:	d022      	beq.n	8008572 <CRYP_AESGCM_Process+0x12e>
          {
            if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800852c:	f7fd fa40 	bl	80059b0 <HAL_GetTick>
 8008530:	4602      	mov	r2, r0
 8008532:	69fb      	ldr	r3, [r7, #28]
 8008534:	1ad3      	subs	r3, r2, r3
 8008536:	683a      	ldr	r2, [r7, #0]
 8008538:	429a      	cmp	r2, r3
 800853a:	d302      	bcc.n	8008542 <CRYP_AESGCM_Process+0xfe>
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d117      	bne.n	8008572 <CRYP_AESGCM_Process+0x12e>
            {
              /* Disable the CRYP peripheral clock */
              __HAL_CRYP_DISABLE(hcryp);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	681a      	ldr	r2, [r3, #0]
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f022 0201 	bic.w	r2, r2, #1
 8008550:	601a      	str	r2, [r3, #0]

              /* Change state */
              hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008556:	f043 0210 	orr.w	r2, r3, #16
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	65da      	str	r2, [r3, #92]	@ 0x5c
              hcryp->State = HAL_CRYP_STATE_READY;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2201      	movs	r2, #1
 8008562:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
              __HAL_UNLOCK(hcryp);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2200      	movs	r2, #0
 800856a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
              return HAL_ERROR;
 800856e:	2301      	movs	r3, #1
 8008570:	e146      	b.n	8008800 <CRYP_AESGCM_Process+0x3bc>
        while (HAL_IS_BIT_CLR(hcryp->Instance->SR, CRYP_FLAG_KEYVALID))
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	685b      	ldr	r3, [r3, #4]
 8008578:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800857c:	2b00      	cmp	r3, #0
 800857e:	d0d1      	beq.n	8008524 <CRYP_AESGCM_Process+0xe0>
          }
        }
      }
    }
    /* Set the initialization vector and the counter : Initial Counter Block (ICB)*/
    CRYP_SetIV(hcryp);
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f7ff ff38 	bl	80083f6 <CRYP_SetIV>

    /* Enable the CRYP peripheral */
    __HAL_CRYP_ENABLE(hcryp);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	681a      	ldr	r2, [r3, #0]
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f042 0201 	orr.w	r2, r2, #1
 8008594:	601a      	str	r2, [r3, #0]

    /* just wait for hash computation */
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8008596:	6839      	ldr	r1, [r7, #0]
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f000 fce1 	bl	8008f60 <CRYP_WaitOnCCFlag>
 800859e:	4603      	mov	r3, r0
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d001      	beq.n	80085a8 <CRYP_AESGCM_Process+0x164>
    {
      return HAL_ERROR;
 80085a4:	2301      	movs	r3, #1
 80085a6:	e12b      	b.n	8008800 <CRYP_AESGCM_Process+0x3bc>
    }
    /* Clear CCF flag */
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CLEAR_CCF);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f8d3 2308 	ldr.w	r2, [r3, #776]	@ 0x308
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f042 0201 	orr.w	r2, r2, #1
 80085b8:	f8c3 2308 	str.w	r2, [r3, #776]	@ 0x308

    /************************ Header phase *************************************/

    if (CRYP_GCMCCM_SetHeaderPhase(hcryp,  Timeout) != HAL_OK)
 80085bc:	6839      	ldr	r1, [r7, #0]
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f000 fb18 	bl	8008bf4 <CRYP_GCMCCM_SetHeaderPhase>
 80085c4:	4603      	mov	r3, r0
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d001      	beq.n	80085ce <CRYP_AESGCM_Process+0x18a>
    {
      return HAL_ERROR;
 80085ca:	2301      	movs	r3, #1
 80085cc:	e118      	b.n	8008800 <CRYP_AESGCM_Process+0x3bc>
    }

    /*************************Payload phase ************************************/

    /* Set the phase */
    hcryp->Phase = CRYP_PHASE_PROCESS;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2202      	movs	r2, #2
 80085d2:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Select payload phase once the header phase is performed */
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_PAYLOAD);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f423 42c0 	bic.w	r2, r3, #24576	@ 0x6000
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80085e6:	601a      	str	r2, [r3, #0]

    /* Set to 0 the number of non-valid bytes using NPBLB register*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, 0U);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	681a      	ldr	r2, [r3, #0]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80085f6:	601a      	str	r2, [r3, #0]

  } /* if (dokeyivconfig == 1U) */

  if ((hcryp->Size % 16U) != 0U)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80085fe:	f003 030f 	and.w	r3, r3, #15
 8008602:	b29b      	uxth	r3, r3
 8008604:	2b00      	cmp	r3, #0
 8008606:	d003      	beq.n	8008610 <CRYP_AESGCM_Process+0x1cc>
  {
    /* recalculate  wordsize */
    wordsize = ((wordsize / 4U) * 4U);
 8008608:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800860a:	f023 0303 	bic.w	r3, r3, #3
 800860e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8008610:	f7fd f9ce 	bl	80059b0 <HAL_GetTick>
 8008614:	61f8      	str	r0, [r7, #28]

  /* Write input data and get output Data */
  incount = hcryp->CrypInCount;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800861c:	b29b      	uxth	r3, r3
 800861e:	62bb      	str	r3, [r7, #40]	@ 0x28
  outcount = hcryp->CrypOutCount;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8008626:	b29b      	uxth	r3, r3
 8008628:	627b      	str	r3, [r7, #36]	@ 0x24
  while ((incount < wordsize) && (outcount < wordsize))
 800862a:	e034      	b.n	8008696 <CRYP_AESGCM_Process+0x252>
  {
    /* Write plain data and get cipher data */
    CRYP_AES_ProcessData(hcryp, Timeout);
 800862c:	6839      	ldr	r1, [r7, #0]
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f7ff fdd0 	bl	80081d4 <CRYP_AES_ProcessData>

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800863a:	d022      	beq.n	8008682 <CRYP_AESGCM_Process+0x23e>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800863c:	f7fd f9b8 	bl	80059b0 <HAL_GetTick>
 8008640:	4602      	mov	r2, r0
 8008642:	69fb      	ldr	r3, [r7, #28]
 8008644:	1ad3      	subs	r3, r2, r3
 8008646:	683a      	ldr	r2, [r7, #0]
 8008648:	429a      	cmp	r2, r3
 800864a:	d302      	bcc.n	8008652 <CRYP_AESGCM_Process+0x20e>
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d117      	bne.n	8008682 <CRYP_AESGCM_Process+0x23e>
      {
        /* Disable the CRYP peripheral clock */
        __HAL_CRYP_DISABLE(hcryp);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	681a      	ldr	r2, [r3, #0]
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f022 0201 	bic.w	r2, r2, #1
 8008660:	601a      	str	r2, [r3, #0]

        /* Change state & error code */
        hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008666:	f043 0210 	orr.w	r2, r3, #16
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	65da      	str	r2, [r3, #92]	@ 0x5c
        hcryp->State = HAL_CRYP_STATE_READY;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2201      	movs	r2, #1
 8008672:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
        __HAL_UNLOCK(hcryp);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2200      	movs	r2, #0
 800867a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
        return HAL_ERROR;
 800867e:	2301      	movs	r3, #1
 8008680:	e0be      	b.n	8008800 <CRYP_AESGCM_Process+0x3bc>
      }
    }
    incount = hcryp->CrypInCount;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008688:	b29b      	uxth	r3, r3
 800868a:	62bb      	str	r3, [r7, #40]	@ 0x28
    outcount = hcryp->CrypOutCount;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8008692:	b29b      	uxth	r3, r3
 8008694:	627b      	str	r3, [r7, #36]	@ 0x24
  while ((incount < wordsize) && (outcount < wordsize))
 8008696:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008698:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800869a:	429a      	cmp	r2, r3
 800869c:	d203      	bcs.n	80086a6 <CRYP_AESGCM_Process+0x262>
 800869e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086a2:	429a      	cmp	r2, r3
 80086a4:	d3c2      	bcc.n	800862c <CRYP_AESGCM_Process+0x1e8>
  }

  if ((hcryp->Size % 16U) != 0U)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80086ac:	f003 030f 	and.w	r3, r3, #15
 80086b0:	b29b      	uxth	r3, r3
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	f000 80a3 	beq.w	80087fe <CRYP_AESGCM_Process+0x3ba>
  {
    /* Compute the number of padding bytes in last block of payload */
    npblb = ((((uint32_t)hcryp->Size / 16U) + 1U) * 16U) - ((uint32_t)hcryp->Size);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80086be:	091b      	lsrs	r3, r3, #4
 80086c0:	b29b      	uxth	r3, r3
 80086c2:	3301      	adds	r3, #1
 80086c4:	011b      	lsls	r3, r3, #4
 80086c6:	687a      	ldr	r2, [r7, #4]
 80086c8:	f8b2 204a 	ldrh.w	r2, [r2, #74]	@ 0x4a
 80086cc:	1a9b      	subs	r3, r3, r2
 80086ce:	61bb      	str	r3, [r7, #24]

    /*  Set Npblb in case of AES GCM payload encryption to get right tag*/
    if ((hcryp->Instance->CR & AES_CR_MODE) == CRYP_OPERATINGMODE_ENCRYPT)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f003 0318 	and.w	r3, r3, #24
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d10a      	bne.n	80086f4 <CRYP_AESGCM_Process+0x2b0>
    {
      /* Set to 0 the number of non-valid bytes using NPBLB register*/
      MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, npblb << 20U);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80086e8:	69bb      	ldr	r3, [r7, #24]
 80086ea:	051a      	lsls	r2, r3, #20
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	430a      	orrs	r2, r1
 80086f2:	601a      	str	r2, [r3, #0]
    }
    /* Number of valid words (lastwordsize) in last block */
    if ((npblb % 4U) == 0U)
 80086f4:	69bb      	ldr	r3, [r7, #24]
 80086f6:	f003 0303 	and.w	r3, r3, #3
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d105      	bne.n	800870a <CRYP_AESGCM_Process+0x2c6>
    {
      lastwordsize = (16U - npblb) / 4U;
 80086fe:	69bb      	ldr	r3, [r7, #24]
 8008700:	f1c3 0310 	rsb	r3, r3, #16
 8008704:	089b      	lsrs	r3, r3, #2
 8008706:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008708:	e005      	b.n	8008716 <CRYP_AESGCM_Process+0x2d2>
    }
    else
    {
      lastwordsize = ((16U - npblb) / 4U) + 1U;
 800870a:	69bb      	ldr	r3, [r7, #24]
 800870c:	f1c3 0310 	rsb	r3, r3, #16
 8008710:	089b      	lsrs	r3, r3, #2
 8008712:	3301      	adds	r3, #1
 8008714:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /*  last block optionally pad the data with zeros*/
    for (index = 0U; index < lastwordsize; index ++)
 8008716:	2300      	movs	r3, #0
 8008718:	633b      	str	r3, [r7, #48]	@ 0x30
 800871a:	e019      	b.n	8008750 <CRYP_AESGCM_Process+0x30c>
 800871c:	420c0000 	.word	0x420c0000
    {
      /* Write the last Input block in the IN FIFO */
      hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800872a:	b29b      	uxth	r3, r3
 800872c:	009b      	lsls	r3, r3, #2
 800872e:	441a      	add	r2, r3
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	6812      	ldr	r2, [r2, #0]
 8008736:	609a      	str	r2, [r3, #8]
      hcryp->CrypInCount++;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800873e:	b29b      	uxth	r3, r3
 8008740:	3301      	adds	r3, #1
 8008742:	b29a      	uxth	r2, r3
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    for (index = 0U; index < lastwordsize; index ++)
 800874a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800874c:	3301      	adds	r3, #1
 800874e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008750:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008754:	429a      	cmp	r2, r3
 8008756:	d3e3      	bcc.n	8008720 <CRYP_AESGCM_Process+0x2dc>
    }
    while (index < 4U)
 8008758:	e006      	b.n	8008768 <CRYP_AESGCM_Process+0x324>
    {
      /* pad the data with zeros to have a complete block */
      hcryp->Instance->DINR  = 0U;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	2200      	movs	r2, #0
 8008760:	609a      	str	r2, [r3, #8]
      index++;
 8008762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008764:	3301      	adds	r3, #1
 8008766:	633b      	str	r3, [r7, #48]	@ 0x30
    while (index < 4U)
 8008768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800876a:	2b03      	cmp	r3, #3
 800876c:	d9f5      	bls.n	800875a <CRYP_AESGCM_Process+0x316>
    }
    /* Wait for CCF flag to be raised */
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 800876e:	6839      	ldr	r1, [r7, #0]
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f000 fbf5 	bl	8008f60 <CRYP_WaitOnCCFlag>
 8008776:	4603      	mov	r3, r0
 8008778:	2b00      	cmp	r3, #0
 800877a:	d002      	beq.n	8008782 <CRYP_AESGCM_Process+0x33e>
#if (USE_HAL_CRYP_REGISTER_CALLBACKS == 1U)
      /*Call registered error callback*/
      hcryp->ErrorCallback(hcryp);
#else
      /*Call legacy weak error callback*/
      HAL_CRYP_ErrorCallback(hcryp);
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f7ff fa9b 	bl	8007cb8 <HAL_CRYP_ErrorCallback>
#endif /* USE_HAL_CRYP_REGISTER_CALLBACKS */
    }

    /* Clear CCF Flag */
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CLEAR_CCF);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f8d3 2308 	ldr.w	r2, [r3, #776]	@ 0x308
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f042 0201 	orr.w	r2, r2, #1
 8008792:	f8c3 2308 	str.w	r2, [r3, #776]	@ 0x308

    /*Read the output block from the output FIFO */
    for (index = 0U; index < 4U; index++)
 8008796:	2300      	movs	r3, #0
 8008798:	633b      	str	r3, [r7, #48]	@ 0x30
 800879a:	e00b      	b.n	80087b4 <CRYP_AESGCM_Process+0x370>
    {
      /* Read the output block from the output FIFO and put them in temporary buffer then
         get CrypOutBuff from temporary buffer */
      temp[index] = hcryp->Instance->DOUTR;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	68da      	ldr	r2, [r3, #12]
 80087a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087a4:	009b      	lsls	r3, r3, #2
 80087a6:	3338      	adds	r3, #56	@ 0x38
 80087a8:	443b      	add	r3, r7
 80087aa:	f843 2c30 	str.w	r2, [r3, #-48]
    for (index = 0U; index < 4U; index++)
 80087ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087b0:	3301      	adds	r3, #1
 80087b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80087b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087b6:	2b03      	cmp	r3, #3
 80087b8:	d9f0      	bls.n	800879c <CRYP_AESGCM_Process+0x358>
    }
    for (index = 0U; index < lastwordsize; index++)
 80087ba:	2300      	movs	r3, #0
 80087bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80087be:	e01a      	b.n	80087f6 <CRYP_AESGCM_Process+0x3b2>
    {
      *(uint32_t *)(hcryp->pCrypOutBuffPtr + (hcryp->CrypOutCount)) = temp[index];
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80087ca:	b29b      	uxth	r3, r3
 80087cc:	009b      	lsls	r3, r3, #2
 80087ce:	441a      	add	r2, r3
 80087d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087d2:	009b      	lsls	r3, r3, #2
 80087d4:	3338      	adds	r3, #56	@ 0x38
 80087d6:	443b      	add	r3, r7
 80087d8:	f853 3c30 	ldr.w	r3, [r3, #-48]
 80087dc:	6013      	str	r3, [r2, #0]
      hcryp->CrypOutCount++;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80087e4:	b29b      	uxth	r3, r3
 80087e6:	3301      	adds	r3, #1
 80087e8:	b29a      	uxth	r2, r3
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    for (index = 0U; index < lastwordsize; index++)
 80087f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087f2:	3301      	adds	r3, #1
 80087f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80087f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087fa:	429a      	cmp	r2, r3
 80087fc:	d3e0      	bcc.n	80087c0 <CRYP_AESGCM_Process+0x37c>
    }
  }

  return HAL_OK;
 80087fe:	2300      	movs	r3, #0
}
 8008800:	4618      	mov	r0, r3
 8008802:	3738      	adds	r7, #56	@ 0x38
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}

08008808 <CRYP_AESCCM_Process>:
  *         the configuration information for CRYP module
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_AESCCM_Process(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b08e      	sub	sp, #56	@ 0x38
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
 8008810:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t wordsize = ((uint32_t)hcryp->Size / 4U);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8008818:	089b      	lsrs	r3, r3, #2
 800881a:	b29b      	uxth	r3, r3
 800881c:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t npblb;
  uint32_t lastwordsize;
  uint32_t temp[4];  /* Temporary CrypOutBuff */
  uint32_t incount;  /* Temporary CrypInCount Value */
  uint32_t outcount;  /* Temporary CrypOutCount Value */
  uint32_t dokeyivconfig = 1U; /* By default, carry out peripheral Key and IV configuration */
 800881e:	2301      	movs	r3, #1
 8008820:	623b      	str	r3, [r7, #32]

  if (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008826:	2b01      	cmp	r3, #1
 8008828:	d118      	bne.n	800885c <CRYP_AESCCM_Process+0x54>
  {
    if (hcryp->KeyIVConfig == 1U)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800882e:	2b01      	cmp	r3, #1
 8008830:	d10a      	bne.n	8008848 <CRYP_AESCCM_Process+0x40>
    {
      /* If the Key and IV configuration has to be done only once
         and if it has already been done, skip it */
      dokeyivconfig = 0U;
 8008832:	2300      	movs	r3, #0
 8008834:	623b      	str	r3, [r7, #32]
      hcryp->SizesSum += hcryp->Size; /* Compute message total payload length */
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800883a:	687a      	ldr	r2, [r7, #4]
 800883c:	f8b2 204a 	ldrh.w	r2, [r2, #74]	@ 0x4a
 8008840:	441a      	add	r2, r3
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	665a      	str	r2, [r3, #100]	@ 0x64
 8008846:	e00f      	b.n	8008868 <CRYP_AESCCM_Process+0x60>
    else
    {
      /* If the Key and IV configuration has to be done only once
         and if it has not been done already, do it and set KeyIVConfig
         to keep track it won't have to be done again next time */
      hcryp->KeyIVConfig = 1U;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2201      	movs	r2, #1
 800884c:	661a      	str	r2, [r3, #96]	@ 0x60
      hcryp->SizesSum = hcryp->Size; /* Merely store payload length */
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8008854:	461a      	mov	r2, r3
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	665a      	str	r2, [r3, #100]	@ 0x64
 800885a:	e005      	b.n	8008868 <CRYP_AESCCM_Process+0x60>
    }
  }
  else
  {
    hcryp->SizesSum = hcryp->Size;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8008862:	461a      	mov	r2, r3
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	665a      	str	r2, [r3, #100]	@ 0x64
  }

  if (dokeyivconfig == 1U)
 8008868:	6a3b      	ldr	r3, [r7, #32]
 800886a:	2b01      	cmp	r3, #1
 800886c:	f040 80bb 	bne.w	80089e6 <CRYP_AESCCM_Process+0x1de>
  {
    /*  Reset CrypHeaderCount */
    hcryp->CrypHeaderCount = 0U;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2200      	movs	r2, #0
 8008874:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /********************** Init phase ******************************************/

    CRYP_SET_PHASE(hcryp, CRYP_PHASE_INIT);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	681a      	ldr	r2, [r3, #0]
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 8008886:	601a      	str	r2, [r3, #0]
    /* Set the Key */
    if (hcryp->Init.KeyIVConfigSkip != CRYP_KEYNOCONFIG)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800888c:	2b02      	cmp	r3, #2
 800888e:	d059      	beq.n	8008944 <CRYP_AESCCM_Process+0x13c>
    {
      if (hcryp->Instance == AES)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	4a98      	ldr	r2, [pc, #608]	@ (8008af8 <CRYP_AESCCM_Process+0x2f0>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d114      	bne.n	80088c4 <CRYP_AESCCM_Process+0xbc>
      {
        if (hcryp->Init.KeyMode != CRYP_KEYMODE_SHARED)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800889e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80088a2:	d006      	beq.n	80088b2 <CRYP_AESCCM_Process+0xaa>
        {
          CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	689b      	ldr	r3, [r3, #8]
 80088a8:	4619      	mov	r1, r3
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f7ff fd42 	bl	8008334 <CRYP_SetKey>
 80088b0:	e048      	b.n	8008944 <CRYP_AESCCM_Process+0x13c>
        }
        else /*after sharing the key, AES should set KMOD[1:0] to 00.*/
        {
          hcryp->Instance->CR &=  ~CRYP_KEYMODE_SHARED;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	681a      	ldr	r2, [r3, #0]
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 80088c0:	601a      	str	r2, [r3, #0]
 80088c2:	e03f      	b.n	8008944 <CRYP_AESCCM_Process+0x13c>
        }
      }
      else /*SAES*/
      {
        /* We should re-write Key, in the case where we change key after first operation */
        if ((hcryp->Init.KeySelect == CRYP_KEYSEL_NORMAL) && (hcryp->Init.KeyMode == CRYP_KEYMODE_NORMAL))
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d109      	bne.n	80088e0 <CRYP_AESCCM_Process+0xd8>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d105      	bne.n	80088e0 <CRYP_AESCCM_Process+0xd8>
        {
          /* Set the Key */
          CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	689b      	ldr	r3, [r3, #8]
 80088d8:	4619      	mov	r1, r3
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f7ff fd2a 	bl	8008334 <CRYP_SetKey>
        }
        /* Get tick */
        tickstart = HAL_GetTick();
 80088e0:	f7fd f866 	bl	80059b0 <HAL_GetTick>
 80088e4:	61f8      	str	r0, [r7, #28]

        while (HAL_IS_BIT_CLR(hcryp->Instance->SR, CRYP_FLAG_KEYVALID))
 80088e6:	e026      	b.n	8008936 <CRYP_AESCCM_Process+0x12e>
        {
          /* Check for the Timeout */
          if (Timeout != HAL_MAX_DELAY)
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088ee:	d022      	beq.n	8008936 <CRYP_AESCCM_Process+0x12e>
          {
            if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80088f0:	f7fd f85e 	bl	80059b0 <HAL_GetTick>
 80088f4:	4602      	mov	r2, r0
 80088f6:	69fb      	ldr	r3, [r7, #28]
 80088f8:	1ad3      	subs	r3, r2, r3
 80088fa:	683a      	ldr	r2, [r7, #0]
 80088fc:	429a      	cmp	r2, r3
 80088fe:	d302      	bcc.n	8008906 <CRYP_AESCCM_Process+0xfe>
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d117      	bne.n	8008936 <CRYP_AESCCM_Process+0x12e>
            {
              /* Disable the CRYP peripheral clock */
              __HAL_CRYP_DISABLE(hcryp);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	681a      	ldr	r2, [r3, #0]
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f022 0201 	bic.w	r2, r2, #1
 8008914:	601a      	str	r2, [r3, #0]

              /* Change state */
              hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800891a:	f043 0210 	orr.w	r2, r3, #16
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	65da      	str	r2, [r3, #92]	@ 0x5c
              hcryp->State = HAL_CRYP_STATE_READY;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2201      	movs	r2, #1
 8008926:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
              __HAL_UNLOCK(hcryp);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2200      	movs	r2, #0
 800892e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
              return HAL_ERROR;
 8008932:	2301      	movs	r3, #1
 8008934:	e15a      	b.n	8008bec <CRYP_AESCCM_Process+0x3e4>
        while (HAL_IS_BIT_CLR(hcryp->Instance->SR, CRYP_FLAG_KEYVALID))
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	685b      	ldr	r3, [r3, #4]
 800893c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008940:	2b00      	cmp	r3, #0
 8008942:	d0d1      	beq.n	80088e8 <CRYP_AESCCM_Process+0xe0>
          }
        }
      }
    }
    /* Set the initialization vector (IV) with B0 */
    hcryp->Instance->IVR3 = *(uint32_t *)(hcryp->Init.B0);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6a1a      	ldr	r2, [r3, #32]
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	6812      	ldr	r2, [r2, #0]
 800894e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hcryp->Instance->IVR2 = *(uint32_t *)(hcryp->Init.B0 + 1U);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6a1a      	ldr	r2, [r3, #32]
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	6852      	ldr	r2, [r2, #4]
 800895a:	629a      	str	r2, [r3, #40]	@ 0x28
    hcryp->Instance->IVR1 = *(uint32_t *)(hcryp->Init.B0 + 2U);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6a1a      	ldr	r2, [r3, #32]
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	6892      	ldr	r2, [r2, #8]
 8008966:	625a      	str	r2, [r3, #36]	@ 0x24
    hcryp->Instance->IVR0 = *(uint32_t *)(hcryp->Init.B0 + 3U);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6a1a      	ldr	r2, [r3, #32]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	68d2      	ldr	r2, [r2, #12]
 8008972:	621a      	str	r2, [r3, #32]

    /* Enable the CRYP peripheral */
    __HAL_CRYP_ENABLE(hcryp);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	681a      	ldr	r2, [r3, #0]
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f042 0201 	orr.w	r2, r2, #1
 8008982:	601a      	str	r2, [r3, #0]

    /* just wait for hash computation */
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8008984:	6839      	ldr	r1, [r7, #0]
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f000 faea 	bl	8008f60 <CRYP_WaitOnCCFlag>
 800898c:	4603      	mov	r3, r0
 800898e:	2b00      	cmp	r3, #0
 8008990:	d001      	beq.n	8008996 <CRYP_AESCCM_Process+0x18e>
    {
      return HAL_ERROR;
 8008992:	2301      	movs	r3, #1
 8008994:	e12a      	b.n	8008bec <CRYP_AESCCM_Process+0x3e4>
    }
    /* Clear CCF flag */
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CLEAR_CCF);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f8d3 2308 	ldr.w	r2, [r3, #776]	@ 0x308
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f042 0201 	orr.w	r2, r2, #1
 80089a6:	f8c3 2308 	str.w	r2, [r3, #776]	@ 0x308

    /************************ Header phase *************************************/
    /* Header block(B1) : associated data length expressed in bytes concatenated
    with Associated Data (A)*/
    if (CRYP_GCMCCM_SetHeaderPhase(hcryp,  Timeout) != HAL_OK)
 80089aa:	6839      	ldr	r1, [r7, #0]
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f000 f921 	bl	8008bf4 <CRYP_GCMCCM_SetHeaderPhase>
 80089b2:	4603      	mov	r3, r0
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d001      	beq.n	80089bc <CRYP_AESCCM_Process+0x1b4>
    {
      return HAL_ERROR;
 80089b8:	2301      	movs	r3, #1
 80089ba:	e117      	b.n	8008bec <CRYP_AESCCM_Process+0x3e4>
    }

    /*************************Payload phase ************************************/

    /* Set the phase */
    hcryp->Phase = CRYP_PHASE_PROCESS;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2202      	movs	r2, #2
 80089c0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Select payload phase once the header phase is performed */
    MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, CRYP_PHASE_PAYLOAD);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f423 42c0 	bic.w	r2, r3, #24576	@ 0x6000
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80089d4:	601a      	str	r2, [r3, #0]

    /* Set to 0 the number of non-valid bytes using NPBLB register*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, 0U);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	681a      	ldr	r2, [r3, #0]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80089e4:	601a      	str	r2, [r3, #0]

  } /* if (dokeyivconfig == 1U) */

  if ((hcryp->Size % 16U) != 0U)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80089ec:	f003 030f 	and.w	r3, r3, #15
 80089f0:	b29b      	uxth	r3, r3
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d003      	beq.n	80089fe <CRYP_AESCCM_Process+0x1f6>
  {
    /* recalculate  wordsize */
    wordsize = ((wordsize / 4U) * 4U);
 80089f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089f8:	f023 0303 	bic.w	r3, r3, #3
 80089fc:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 80089fe:	f7fc ffd7 	bl	80059b0 <HAL_GetTick>
 8008a02:	61f8      	str	r0, [r7, #28]

  /* Write input data and get output data */
  incount = hcryp->CrypInCount;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008a0a:	b29b      	uxth	r3, r3
 8008a0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  outcount = hcryp->CrypOutCount;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8008a14:	b29b      	uxth	r3, r3
 8008a16:	627b      	str	r3, [r7, #36]	@ 0x24
  while ((incount < wordsize) && (outcount < wordsize))
 8008a18:	e034      	b.n	8008a84 <CRYP_AESCCM_Process+0x27c>
  {
    /* Write plain data and get cipher data */
    CRYP_AES_ProcessData(hcryp, Timeout);
 8008a1a:	6839      	ldr	r1, [r7, #0]
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f7ff fbd9 	bl	80081d4 <CRYP_AES_ProcessData>

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a28:	d022      	beq.n	8008a70 <CRYP_AESCCM_Process+0x268>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008a2a:	f7fc ffc1 	bl	80059b0 <HAL_GetTick>
 8008a2e:	4602      	mov	r2, r0
 8008a30:	69fb      	ldr	r3, [r7, #28]
 8008a32:	1ad3      	subs	r3, r2, r3
 8008a34:	683a      	ldr	r2, [r7, #0]
 8008a36:	429a      	cmp	r2, r3
 8008a38:	d302      	bcc.n	8008a40 <CRYP_AESCCM_Process+0x238>
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d117      	bne.n	8008a70 <CRYP_AESCCM_Process+0x268>
      {
        /* Disable the CRYP peripheral clock */
        __HAL_CRYP_DISABLE(hcryp);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	681a      	ldr	r2, [r3, #0]
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f022 0201 	bic.w	r2, r2, #1
 8008a4e:	601a      	str	r2, [r3, #0]

        /* Change state */
        hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a54:	f043 0210 	orr.w	r2, r3, #16
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hcryp->State = HAL_CRYP_STATE_READY;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2201      	movs	r2, #1
 8008a60:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
        __HAL_UNLOCK(hcryp);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2200      	movs	r2, #0
 8008a68:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
        return HAL_ERROR;
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	e0bd      	b.n	8008bec <CRYP_AESCCM_Process+0x3e4>
      }
    }
    incount = hcryp->CrypInCount;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008a76:	b29b      	uxth	r3, r3
 8008a78:	62bb      	str	r3, [r7, #40]	@ 0x28
    outcount = hcryp->CrypOutCount;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8008a80:	b29b      	uxth	r3, r3
 8008a82:	627b      	str	r3, [r7, #36]	@ 0x24
  while ((incount < wordsize) && (outcount < wordsize))
 8008a84:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008a86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a88:	429a      	cmp	r2, r3
 8008a8a:	d203      	bcs.n	8008a94 <CRYP_AESCCM_Process+0x28c>
 8008a8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a90:	429a      	cmp	r2, r3
 8008a92:	d3c2      	bcc.n	8008a1a <CRYP_AESCCM_Process+0x212>
  }

  if ((hcryp->Size % 16U) != 0U)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8008a9a:	f003 030f 	and.w	r3, r3, #15
 8008a9e:	b29b      	uxth	r3, r3
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	f000 80a2 	beq.w	8008bea <CRYP_AESCCM_Process+0x3e2>
  {
    /* Compute the number of padding bytes in last block of payload */
    npblb = ((((uint32_t)hcryp->Size / 16U) + 1U) * 16U) - ((uint32_t)hcryp->Size);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8008aac:	091b      	lsrs	r3, r3, #4
 8008aae:	b29b      	uxth	r3, r3
 8008ab0:	3301      	adds	r3, #1
 8008ab2:	011b      	lsls	r3, r3, #4
 8008ab4:	687a      	ldr	r2, [r7, #4]
 8008ab6:	f8b2 204a 	ldrh.w	r2, [r2, #74]	@ 0x4a
 8008aba:	1a9b      	subs	r3, r3, r2
 8008abc:	61bb      	str	r3, [r7, #24]

    if ((hcryp->Instance->CR & AES_CR_MODE) == CRYP_OPERATINGMODE_DECRYPT)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f003 0318 	and.w	r3, r3, #24
 8008ac8:	2b10      	cmp	r3, #16
 8008aca:	d10a      	bne.n	8008ae2 <CRYP_AESCCM_Process+0x2da>
    {
      /* Set Npblb in case of AES CCM payload decryption to get right tag  */
      MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, npblb << 20);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8008ad6:	69bb      	ldr	r3, [r7, #24]
 8008ad8:	051a      	lsls	r2, r3, #20
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	430a      	orrs	r2, r1
 8008ae0:	601a      	str	r2, [r3, #0]

    }
    /* Number of valid words (lastwordsize) in last block */
    if ((npblb % 4U) == 0U)
 8008ae2:	69bb      	ldr	r3, [r7, #24]
 8008ae4:	f003 0303 	and.w	r3, r3, #3
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d107      	bne.n	8008afc <CRYP_AESCCM_Process+0x2f4>
    {
      lastwordsize = (16U - npblb) / 4U;
 8008aec:	69bb      	ldr	r3, [r7, #24]
 8008aee:	f1c3 0310 	rsb	r3, r3, #16
 8008af2:	089b      	lsrs	r3, r3, #2
 8008af4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008af6:	e007      	b.n	8008b08 <CRYP_AESCCM_Process+0x300>
 8008af8:	420c0000 	.word	0x420c0000
    }
    else
    {
      lastwordsize = ((16U - npblb) / 4U) + 1U;
 8008afc:	69bb      	ldr	r3, [r7, #24]
 8008afe:	f1c3 0310 	rsb	r3, r3, #16
 8008b02:	089b      	lsrs	r3, r3, #2
 8008b04:	3301      	adds	r3, #1
 8008b06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }

    /* Write the last input block in the IN FIFO */
    for (loopcounter = 0U; loopcounter < lastwordsize; loopcounter ++)
 8008b08:	2300      	movs	r3, #0
 8008b0a:	633b      	str	r3, [r7, #48]	@ 0x30
 8008b0c:	e017      	b.n	8008b3e <CRYP_AESCCM_Process+0x336>
    {
      hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008b18:	b29b      	uxth	r3, r3
 8008b1a:	009b      	lsls	r3, r3, #2
 8008b1c:	441a      	add	r2, r3
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	6812      	ldr	r2, [r2, #0]
 8008b24:	609a      	str	r2, [r3, #8]
      hcryp->CrypInCount++;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008b2c:	b29b      	uxth	r3, r3
 8008b2e:	3301      	adds	r3, #1
 8008b30:	b29a      	uxth	r2, r3
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    for (loopcounter = 0U; loopcounter < lastwordsize; loopcounter ++)
 8008b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b3a:	3301      	adds	r3, #1
 8008b3c:	633b      	str	r3, [r7, #48]	@ 0x30
 8008b3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b42:	429a      	cmp	r2, r3
 8008b44:	d3e3      	bcc.n	8008b0e <CRYP_AESCCM_Process+0x306>
    }

    /* Pad the data with zeros to have a complete block */
    while (loopcounter < 4U)
 8008b46:	e006      	b.n	8008b56 <CRYP_AESCCM_Process+0x34e>
    {
      hcryp->Instance->DINR  = 0U;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	609a      	str	r2, [r3, #8]
      loopcounter++;
 8008b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b52:	3301      	adds	r3, #1
 8008b54:	633b      	str	r3, [r7, #48]	@ 0x30
    while (loopcounter < 4U)
 8008b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b58:	2b03      	cmp	r3, #3
 8008b5a:	d9f5      	bls.n	8008b48 <CRYP_AESCCM_Process+0x340>
    }
    /* just wait for hash computation */
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8008b5c:	6839      	ldr	r1, [r7, #0]
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f000 f9fe 	bl	8008f60 <CRYP_WaitOnCCFlag>
 8008b64:	4603      	mov	r3, r0
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d001      	beq.n	8008b6e <CRYP_AESCCM_Process+0x366>
    {
      return HAL_ERROR;
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	e03e      	b.n	8008bec <CRYP_AESCCM_Process+0x3e4>
    }
    /* Clear CCF flag */
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CLEAR_CCF);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f8d3 2308 	ldr.w	r2, [r3, #776]	@ 0x308
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f042 0201 	orr.w	r2, r2, #1
 8008b7e:	f8c3 2308 	str.w	r2, [r3, #776]	@ 0x308

    for (loopcounter = 0U; loopcounter < 4U; loopcounter++)
 8008b82:	2300      	movs	r3, #0
 8008b84:	633b      	str	r3, [r7, #48]	@ 0x30
 8008b86:	e00b      	b.n	8008ba0 <CRYP_AESCCM_Process+0x398>
    {
      /* Read the output block from the output FIFO and put them in temporary buffer then
         get CrypOutBuff from temporary buffer */
      temp[loopcounter] = hcryp->Instance->DOUTR;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	68da      	ldr	r2, [r3, #12]
 8008b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b90:	009b      	lsls	r3, r3, #2
 8008b92:	3338      	adds	r3, #56	@ 0x38
 8008b94:	443b      	add	r3, r7
 8008b96:	f843 2c30 	str.w	r2, [r3, #-48]
    for (loopcounter = 0U; loopcounter < 4U; loopcounter++)
 8008b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b9c:	3301      	adds	r3, #1
 8008b9e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ba2:	2b03      	cmp	r3, #3
 8008ba4:	d9f0      	bls.n	8008b88 <CRYP_AESCCM_Process+0x380>
    }
    for (loopcounter = 0U; loopcounter < lastwordsize; loopcounter++)
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	633b      	str	r3, [r7, #48]	@ 0x30
 8008baa:	e01a      	b.n	8008be2 <CRYP_AESCCM_Process+0x3da>
    {
      *(uint32_t *)(hcryp->pCrypOutBuffPtr + hcryp->CrypOutCount) = temp[loopcounter];
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8008bb6:	b29b      	uxth	r3, r3
 8008bb8:	009b      	lsls	r3, r3, #2
 8008bba:	441a      	add	r2, r3
 8008bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bbe:	009b      	lsls	r3, r3, #2
 8008bc0:	3338      	adds	r3, #56	@ 0x38
 8008bc2:	443b      	add	r3, r7
 8008bc4:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8008bc8:	6013      	str	r3, [r2, #0]
      hcryp->CrypOutCount++;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8008bd0:	b29b      	uxth	r3, r3
 8008bd2:	3301      	adds	r3, #1
 8008bd4:	b29a      	uxth	r2, r3
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    for (loopcounter = 0U; loopcounter < lastwordsize; loopcounter++)
 8008bdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bde:	3301      	adds	r3, #1
 8008be0:	633b      	str	r3, [r7, #48]	@ 0x30
 8008be2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008be4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008be6:	429a      	cmp	r2, r3
 8008be8:	d3e0      	bcc.n	8008bac <CRYP_AESCCM_Process+0x3a4>
    }
  }

  return HAL_OK;
 8008bea:	2300      	movs	r3, #0
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	3738      	adds	r7, #56	@ 0x38
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}

08008bf4 <CRYP_GCMCCM_SetHeaderPhase>:
  *         the configuration information for CRYP module(Header & HeaderSize)
  * @param  Timeout Timeout value
  * @retval state
  */
static HAL_StatusTypeDef CRYP_GCMCCM_SetHeaderPhase(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 8008bf4:	b5b0      	push	{r4, r5, r7, lr}
 8008bf6:	b092      	sub	sp, #72	@ 0x48
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
 8008bfc:	6039      	str	r1, [r7, #0]
  uint32_t loopcounter;
  uint32_t size_in_bytes;
  uint32_t tmp;
  const uint32_t mask[12] = {0x0U, 0xFF000000U, 0xFFFF0000U, 0xFFFFFF00U,  /* 32-bit data type */
 8008bfe:	4b8e      	ldr	r3, [pc, #568]	@ (8008e38 <CRYP_GCMCCM_SetHeaderPhase+0x244>)
 8008c00:	f107 040c 	add.w	r4, r7, #12
 8008c04:	461d      	mov	r5, r3
 8008c06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008c08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008c0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008c0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008c0e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8008c12:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                             0x0U, 0x0000FF00U, 0x0000FFFFU, 0xFF00FFFFU,  /* 16-bit data type */
                             0x0U, 0x000000FFU, 0x0000FFFFU, 0x00FFFFFFU
                            }; /*  8-bit data type */

  /***************************** Header phase for GCM/GMAC or CCM *********************************/
  if (hcryp->Init.HeaderWidthUnit == CRYP_HEADERWIDTHUNIT_WORD)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d104      	bne.n	8008c28 <CRYP_GCMCCM_SetHeaderPhase+0x34>
  {
    size_in_bytes = hcryp->Init.HeaderSize * 4U;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	69db      	ldr	r3, [r3, #28]
 8008c22:	009b      	lsls	r3, r3, #2
 8008c24:	643b      	str	r3, [r7, #64]	@ 0x40
 8008c26:	e002      	b.n	8008c2e <CRYP_GCMCCM_SetHeaderPhase+0x3a>
  }
  else
  {
    size_in_bytes = hcryp->Init.HeaderSize;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	69db      	ldr	r3, [r3, #28]
 8008c2c:	643b      	str	r3, [r7, #64]	@ 0x40
  }

  if ((size_in_bytes != 0U))
 8008c2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	f000 8172 	beq.w	8008f1a <CRYP_GCMCCM_SetHeaderPhase+0x326>
  {
    /* Select header phase */
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_HEADER);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f423 42c0 	bic.w	r2, r3, #24576	@ 0x6000
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008c48:	601a      	str	r2, [r3, #0]

    /* Enable the CRYP peripheral */
    __HAL_CRYP_ENABLE(hcryp);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	681a      	ldr	r2, [r3, #0]
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f042 0201 	orr.w	r2, r2, #1
 8008c58:	601a      	str	r2, [r3, #0]

    /* If size_in_bytes is a multiple of blocks (a multiple of four 32-bits words ) */
    if ((size_in_bytes % 16U) == 0U)
 8008c5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008c5c:	f003 030f 	and.w	r3, r3, #15
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d172      	bne.n	8008d4a <CRYP_GCMCCM_SetHeaderPhase+0x156>
    {
      /*  No padding */
      for (loopcounter = 0U; (loopcounter < (size_in_bytes / 4U)); loopcounter += 4U)
 8008c64:	2300      	movs	r3, #0
 8008c66:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c68:	e069      	b.n	8008d3e <CRYP_GCMCCM_SetHeaderPhase+0x14a>
      {
        /* Write the input block in the data input register */
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	699a      	ldr	r2, [r3, #24]
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008c74:	b29b      	uxth	r3, r3
 8008c76:	009b      	lsls	r3, r3, #2
 8008c78:	441a      	add	r2, r3
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	6812      	ldr	r2, [r2, #0]
 8008c80:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008c88:	b29b      	uxth	r3, r3
 8008c8a:	3301      	adds	r3, #1
 8008c8c:	b29a      	uxth	r2, r3
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	699a      	ldr	r2, [r3, #24]
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008c9e:	b29b      	uxth	r3, r3
 8008ca0:	009b      	lsls	r3, r3, #2
 8008ca2:	441a      	add	r2, r3
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	6812      	ldr	r2, [r2, #0]
 8008caa:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008cb2:	b29b      	uxth	r3, r3
 8008cb4:	3301      	adds	r3, #1
 8008cb6:	b29a      	uxth	r2, r3
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
        hcryp->Instance->DINR  = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	699a      	ldr	r2, [r3, #24]
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008cc8:	b29b      	uxth	r3, r3
 8008cca:	009b      	lsls	r3, r3, #2
 8008ccc:	441a      	add	r2, r3
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	6812      	ldr	r2, [r2, #0]
 8008cd4:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008cdc:	b29b      	uxth	r3, r3
 8008cde:	3301      	adds	r3, #1
 8008ce0:	b29a      	uxth	r2, r3
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	699a      	ldr	r2, [r3, #24]
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008cf2:	b29b      	uxth	r3, r3
 8008cf4:	009b      	lsls	r3, r3, #2
 8008cf6:	441a      	add	r2, r3
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	6812      	ldr	r2, [r2, #0]
 8008cfe:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008d06:	b29b      	uxth	r3, r3
 8008d08:	3301      	adds	r3, #1
 8008d0a:	b29a      	uxth	r2, r3
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8008d12:	6839      	ldr	r1, [r7, #0]
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f000 f923 	bl	8008f60 <CRYP_WaitOnCCFlag>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d001      	beq.n	8008d24 <CRYP_GCMCCM_SetHeaderPhase+0x130>
        {
          return HAL_ERROR;
 8008d20:	2301      	movs	r3, #1
 8008d22:	e118      	b.n	8008f56 <CRYP_GCMCCM_SetHeaderPhase+0x362>
        }
        /* Clear CCF flag */
        __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CLEAR_CCF);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f8d3 2308 	ldr.w	r2, [r3, #776]	@ 0x308
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f042 0201 	orr.w	r2, r2, #1
 8008d34:	f8c3 2308 	str.w	r2, [r3, #776]	@ 0x308
      for (loopcounter = 0U; (loopcounter < (size_in_bytes / 4U)); loopcounter += 4U)
 8008d38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008d3a:	3304      	adds	r3, #4
 8008d3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8008d3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008d40:	089b      	lsrs	r3, r3, #2
 8008d42:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008d44:	429a      	cmp	r2, r3
 8008d46:	d390      	bcc.n	8008c6a <CRYP_GCMCCM_SetHeaderPhase+0x76>
 8008d48:	e104      	b.n	8008f54 <CRYP_GCMCCM_SetHeaderPhase+0x360>
      }
    }
    else
    {
      /* Write header block in the IN FIFO without last block */
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 16U) * 4U)); loopcounter += 4U)
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8008d4e:	e069      	b.n	8008e24 <CRYP_GCMCCM_SetHeaderPhase+0x230>
      {
        /* Write the input block in the data input register */
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	699a      	ldr	r2, [r3, #24]
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008d5a:	b29b      	uxth	r3, r3
 8008d5c:	009b      	lsls	r3, r3, #2
 8008d5e:	441a      	add	r2, r3
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	6812      	ldr	r2, [r2, #0]
 8008d66:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008d6e:	b29b      	uxth	r3, r3
 8008d70:	3301      	adds	r3, #1
 8008d72:	b29a      	uxth	r2, r3
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	699a      	ldr	r2, [r3, #24]
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008d84:	b29b      	uxth	r3, r3
 8008d86:	009b      	lsls	r3, r3, #2
 8008d88:	441a      	add	r2, r3
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	6812      	ldr	r2, [r2, #0]
 8008d90:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008d98:	b29b      	uxth	r3, r3
 8008d9a:	3301      	adds	r3, #1
 8008d9c:	b29a      	uxth	r2, r3
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
        hcryp->Instance->DINR  = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	699a      	ldr	r2, [r3, #24]
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008dae:	b29b      	uxth	r3, r3
 8008db0:	009b      	lsls	r3, r3, #2
 8008db2:	441a      	add	r2, r3
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	6812      	ldr	r2, [r2, #0]
 8008dba:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008dc2:	b29b      	uxth	r3, r3
 8008dc4:	3301      	adds	r3, #1
 8008dc6:	b29a      	uxth	r2, r3
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	699a      	ldr	r2, [r3, #24]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008dd8:	b29b      	uxth	r3, r3
 8008dda:	009b      	lsls	r3, r3, #2
 8008ddc:	441a      	add	r2, r3
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	6812      	ldr	r2, [r2, #0]
 8008de4:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008dec:	b29b      	uxth	r3, r3
 8008dee:	3301      	adds	r3, #1
 8008df0:	b29a      	uxth	r2, r3
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8008df8:	6839      	ldr	r1, [r7, #0]
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f000 f8b0 	bl	8008f60 <CRYP_WaitOnCCFlag>
 8008e00:	4603      	mov	r3, r0
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d001      	beq.n	8008e0a <CRYP_GCMCCM_SetHeaderPhase+0x216>
        {
          return HAL_ERROR;
 8008e06:	2301      	movs	r3, #1
 8008e08:	e0a5      	b.n	8008f56 <CRYP_GCMCCM_SetHeaderPhase+0x362>
        }
        /* Clear CCF flag */
        __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CLEAR_CCF);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f8d3 2308 	ldr.w	r2, [r3, #776]	@ 0x308
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f042 0201 	orr.w	r2, r2, #1
 8008e1a:	f8c3 2308 	str.w	r2, [r3, #776]	@ 0x308
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 16U) * 4U)); loopcounter += 4U)
 8008e1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008e20:	3304      	adds	r3, #4
 8008e22:	647b      	str	r3, [r7, #68]	@ 0x44
 8008e24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008e26:	091b      	lsrs	r3, r3, #4
 8008e28:	009b      	lsls	r3, r3, #2
 8008e2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008e2c:	429a      	cmp	r2, r3
 8008e2e:	d38f      	bcc.n	8008d50 <CRYP_GCMCCM_SetHeaderPhase+0x15c>
      }
      /* Write last complete words */
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 4U) % 4U)); loopcounter++)
 8008e30:	2300      	movs	r3, #0
 8008e32:	647b      	str	r3, [r7, #68]	@ 0x44
 8008e34:	e01a      	b.n	8008e6c <CRYP_GCMCCM_SetHeaderPhase+0x278>
 8008e36:	bf00      	nop
 8008e38:	08022a28 	.word	0x08022a28
      {
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	699a      	ldr	r2, [r3, #24]
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008e46:	b29b      	uxth	r3, r3
 8008e48:	009b      	lsls	r3, r3, #2
 8008e4a:	441a      	add	r2, r3
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	6812      	ldr	r2, [r2, #0]
 8008e52:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008e5a:	b29b      	uxth	r3, r3
 8008e5c:	3301      	adds	r3, #1
 8008e5e:	b29a      	uxth	r2, r3
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 4U) % 4U)); loopcounter++)
 8008e66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008e68:	3301      	adds	r3, #1
 8008e6a:	647b      	str	r3, [r7, #68]	@ 0x44
 8008e6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008e6e:	089b      	lsrs	r3, r3, #2
 8008e70:	f003 0303 	and.w	r3, r3, #3
 8008e74:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008e76:	429a      	cmp	r2, r3
 8008e78:	d3e0      	bcc.n	8008e3c <CRYP_GCMCCM_SetHeaderPhase+0x248>
      }
      /* If the header size is a multiple of words */
      if ((size_in_bytes % 4U) == 0U)
 8008e7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008e7c:	f003 0303 	and.w	r3, r3, #3
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d10b      	bne.n	8008e9c <CRYP_GCMCCM_SetHeaderPhase+0x2a8>
      {
        /* Pad the data with zeros to have a complete block */
        while (loopcounter < 4U)
 8008e84:	e006      	b.n	8008e94 <CRYP_GCMCCM_SetHeaderPhase+0x2a0>
        {
          hcryp->Instance->DINR = 0x0U;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	609a      	str	r2, [r3, #8]
          loopcounter++;
 8008e8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008e90:	3301      	adds	r3, #1
 8008e92:	647b      	str	r3, [r7, #68]	@ 0x44
        while (loopcounter < 4U)
 8008e94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008e96:	2b03      	cmp	r3, #3
 8008e98:	d9f5      	bls.n	8008e86 <CRYP_GCMCCM_SetHeaderPhase+0x292>
 8008e9a:	e02a      	b.n	8008ef2 <CRYP_GCMCCM_SetHeaderPhase+0x2fe>
        }
      }
      else
      {
        /* Enter last bytes, padded with zeros */
        tmp =  *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	699a      	ldr	r2, [r3, #24]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008ea6:	b29b      	uxth	r3, r3
 8008ea8:	009b      	lsls	r3, r3, #2
 8008eaa:	4413      	add	r3, r2
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        tmp &= mask[(hcryp->Init.DataType * 2U) + (size_in_bytes % 4U)];
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	685b      	ldr	r3, [r3, #4]
 8008eb4:	005a      	lsls	r2, r3, #1
 8008eb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008eb8:	f003 0303 	and.w	r3, r3, #3
 8008ebc:	4413      	add	r3, r2
 8008ebe:	009b      	lsls	r3, r3, #2
 8008ec0:	3348      	adds	r3, #72	@ 0x48
 8008ec2:	443b      	add	r3, r7
 8008ec4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8008ec8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008eca:	4013      	ands	r3, r2
 8008ecc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        hcryp->Instance->DINR = tmp;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008ed4:	609a      	str	r2, [r3, #8]
        loopcounter++;
 8008ed6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008ed8:	3301      	adds	r3, #1
 8008eda:	647b      	str	r3, [r7, #68]	@ 0x44
        /* Pad the data with zeros to have a complete block */
        while (loopcounter < 4U)
 8008edc:	e006      	b.n	8008eec <CRYP_GCMCCM_SetHeaderPhase+0x2f8>
        {
          hcryp->Instance->DINR = 0x0U;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	609a      	str	r2, [r3, #8]
          loopcounter++;
 8008ee6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008ee8:	3301      	adds	r3, #1
 8008eea:	647b      	str	r3, [r7, #68]	@ 0x44
        while (loopcounter < 4U)
 8008eec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008eee:	2b03      	cmp	r3, #3
 8008ef0:	d9f5      	bls.n	8008ede <CRYP_GCMCCM_SetHeaderPhase+0x2ea>
        }
      }

      if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8008ef2:	6839      	ldr	r1, [r7, #0]
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f000 f833 	bl	8008f60 <CRYP_WaitOnCCFlag>
 8008efa:	4603      	mov	r3, r0
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d001      	beq.n	8008f04 <CRYP_GCMCCM_SetHeaderPhase+0x310>
      {
        return HAL_ERROR;
 8008f00:	2301      	movs	r3, #1
 8008f02:	e028      	b.n	8008f56 <CRYP_GCMCCM_SetHeaderPhase+0x362>
      }
      /* Clear CCF flag */
      __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CLEAR_CCF);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f8d3 2308 	ldr.w	r2, [r3, #776]	@ 0x308
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f042 0201 	orr.w	r2, r2, #1
 8008f14:	f8c3 2308 	str.w	r2, [r3, #776]	@ 0x308
 8008f18:	e01c      	b.n	8008f54 <CRYP_GCMCCM_SetHeaderPhase+0x360>
    }
  }
  else
  {
    /*Workaround 1: only AES, before re-enabling the peripheral, datatype can be configured.*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE, hcryp->Init.DataType);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f023 0106 	bic.w	r1, r3, #6
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	685a      	ldr	r2, [r3, #4]
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	430a      	orrs	r2, r1
 8008f2e:	601a      	str	r2, [r3, #0]

    /* Select header phase */
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_HEADER);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f423 42c0 	bic.w	r2, r3, #24576	@ 0x6000
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008f42:	601a      	str	r2, [r3, #0]

    /* Enable the CRYP peripheral */
    __HAL_CRYP_ENABLE(hcryp);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	681a      	ldr	r2, [r3, #0]
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f042 0201 	orr.w	r2, r2, #1
 8008f52:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008f54:	2300      	movs	r3, #0
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	3748      	adds	r7, #72	@ 0x48
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bdb0      	pop	{r4, r5, r7, pc}
 8008f5e:	bf00      	nop

08008f60 <CRYP_WaitOnCCFlag>:
  * @param  Timeout Timeout duration.
  * @note   This function can only be used in thread mode.
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_WaitOnCCFlag(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b084      	sub	sp, #16
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
 8008f68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Get timeout */
  tickstart = HAL_GetTick();
 8008f6a:	f7fc fd21 	bl	80059b0 <HAL_GetTick>
 8008f6e:	60f8      	str	r0, [r7, #12]

  while (HAL_IS_BIT_CLR(hcryp->Instance->ISR, AES_ISR_CCF))
 8008f70:	e026      	b.n	8008fc0 <CRYP_WaitOnCCFlag+0x60>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f78:	d022      	beq.n	8008fc0 <CRYP_WaitOnCCFlag+0x60>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008f7a:	f7fc fd19 	bl	80059b0 <HAL_GetTick>
 8008f7e:	4602      	mov	r2, r0
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	1ad3      	subs	r3, r2, r3
 8008f84:	683a      	ldr	r2, [r7, #0]
 8008f86:	429a      	cmp	r2, r3
 8008f88:	d302      	bcc.n	8008f90 <CRYP_WaitOnCCFlag+0x30>
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d117      	bne.n	8008fc0 <CRYP_WaitOnCCFlag+0x60>
      {
        __HAL_CRYP_DISABLE(hcryp);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	681a      	ldr	r2, [r3, #0]
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f022 0201 	bic.w	r2, r2, #1
 8008f9e:	601a      	str	r2, [r3, #0]
        hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008fa4:	f043 0210 	orr.w	r2, r3, #16
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	65da      	str	r2, [r3, #92]	@ 0x5c
        hcryp->State = HAL_CRYP_STATE_READY;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2201      	movs	r2, #1
 8008fb0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
        __HAL_UNLOCK(hcryp);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
        return HAL_ERROR;
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	e008      	b.n	8008fd2 <CRYP_WaitOnCCFlag+0x72>
  while (HAL_IS_BIT_CLR(hcryp->Instance->ISR, AES_ISR_CCF))
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f8d3 3304 	ldr.w	r3, [r3, #772]	@ 0x304
 8008fc8:	f003 0301 	and.w	r3, r3, #1
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d0d0      	beq.n	8008f72 <CRYP_WaitOnCCFlag+0x12>
      }
    }
  }
  return HAL_OK;
 8008fd0:	2300      	movs	r3, #0
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3710      	adds	r7, #16
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}

08008fda <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 8008fda:	b580      	push	{r7, lr}
 8008fdc:	b084      	sub	sp, #16
 8008fde:	af00      	add	r7, sp, #0
 8008fe0:	60f8      	str	r0, [r7, #12]
 8008fe2:	60b9      	str	r1, [r7, #8]
 8008fe4:	607a      	str	r2, [r7, #4]
 8008fe6:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d101      	bne.n	8008ff2 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008fee:	2301      	movs	r3, #1
 8008ff0:	e04f      	b.n	8009092 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8008ff8:	2b01      	cmp	r3, #1
 8008ffa:	d101      	bne.n	8009000 <HAL_DMA_Start_IT+0x26>
 8008ffc:	2302      	movs	r3, #2
 8008ffe:	e048      	b.n	8009092 <HAL_DMA_Start_IT+0xb8>
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	2201      	movs	r2, #1
 8009004:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800900e:	b2db      	uxtb	r3, r3
 8009010:	2b01      	cmp	r3, #1
 8009012:	d136      	bne.n	8009082 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	2202      	movs	r2, #2
 8009018:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	2200      	movs	r2, #0
 8009020:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	687a      	ldr	r2, [r7, #4]
 8009026:	68b9      	ldr	r1, [r7, #8]
 8009028:	68f8      	ldr	r0, [r7, #12]
 800902a:	f000 fa78 	bl	800951e <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	695a      	ldr	r2, [r3, #20]
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 800903c:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009042:	2b00      	cmp	r3, #0
 8009044:	d007      	beq.n	8009056 <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	695a      	ldr	r2, [r3, #20]
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009054:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800905a:	2b00      	cmp	r3, #0
 800905c:	d007      	beq.n	800906e <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	695a      	ldr	r2, [r3, #20]
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800906c:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	695a      	ldr	r2, [r3, #20]
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f042 0201 	orr.w	r2, r2, #1
 800907c:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 800907e:	2300      	movs	r3, #0
 8009080:	e007      	b.n	8009092 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	2240      	movs	r2, #64	@ 0x40
 8009086:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	2200      	movs	r2, #0
 800908c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8009090:	2301      	movs	r3, #1
}
 8009092:	4618      	mov	r0, r3
 8009094:	3710      	adds	r7, #16
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}

0800909a <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 800909a:	b580      	push	{r7, lr}
 800909c:	b084      	sub	sp, #16
 800909e:	af00      	add	r7, sp, #0
 80090a0:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 80090a2:	f7fc fc85 	bl	80059b0 <HAL_GetTick>
 80090a6:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d101      	bne.n	80090b2 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80090ae:	2301      	movs	r3, #1
 80090b0:	e06b      	b.n	800918a <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80090b8:	b2db      	uxtb	r3, r3
 80090ba:	2b02      	cmp	r3, #2
 80090bc:	d008      	beq.n	80090d0 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2220      	movs	r2, #32
 80090c2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2200      	movs	r2, #0
 80090c8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 80090cc:	2301      	movs	r3, #1
 80090ce:	e05c      	b.n	800918a <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	695a      	ldr	r2, [r3, #20]
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f042 0204 	orr.w	r2, r2, #4
 80090de:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2205      	movs	r2, #5
 80090e4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80090e8:	e020      	b.n	800912c <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80090ea:	f7fc fc61 	bl	80059b0 <HAL_GetTick>
 80090ee:	4602      	mov	r2, r0
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	1ad3      	subs	r3, r2, r3
 80090f4:	2b05      	cmp	r3, #5
 80090f6:	d919      	bls.n	800912c <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090fc:	f043 0210 	orr.w	r2, r3, #16
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2203      	movs	r2, #3
 8009108:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009110:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009114:	2b00      	cmp	r3, #0
 8009116:	d003      	beq.n	8009120 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800911c:	2201      	movs	r2, #1
 800911e:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2200      	movs	r2, #0
 8009124:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 8009128:	2301      	movs	r3, #1
 800912a:	e02e      	b.n	800918a <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	691b      	ldr	r3, [r3, #16]
 8009132:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009136:	2b00      	cmp	r3, #0
 8009138:	d0d7      	beq.n	80090ea <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	695a      	ldr	r2, [r3, #20]
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f042 0202 	orr.w	r2, r2, #2
 8009148:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2204      	movs	r2, #4
 800914e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 800915a:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2201      	movs	r2, #1
 8009160:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009168:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800916c:	2b00      	cmp	r3, #0
 800916e:	d007      	beq.n	8009180 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009174:	2201      	movs	r2, #1
 8009176:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	2200      	movs	r2, #0
 800917e:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2200      	movs	r2, #0
 8009184:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8009188:	2300      	movs	r3, #0
}
 800918a:	4618      	mov	r0, r3
 800918c:	3710      	adds	r7, #16
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}

08009192 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8009192:	b480      	push	{r7}
 8009194:	b083      	sub	sp, #12
 8009196:	af00      	add	r7, sp, #0
 8009198:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d101      	bne.n	80091a4 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80091a0:	2301      	movs	r3, #1
 80091a2:	e019      	b.n	80091d8 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80091aa:	b2db      	uxtb	r3, r3
 80091ac:	2b02      	cmp	r3, #2
 80091ae:	d004      	beq.n	80091ba <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2220      	movs	r2, #32
 80091b4:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80091b6:	2301      	movs	r3, #1
 80091b8:	e00e      	b.n	80091d8 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2204      	movs	r2, #4
 80091be:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	695b      	ldr	r3, [r3, #20]
 80091c8:	687a      	ldr	r2, [r7, #4]
 80091ca:	6812      	ldr	r2, [r2, #0]
 80091cc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80091d0:	f043 0304 	orr.w	r3, r3, #4
 80091d4:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 80091d6:	2300      	movs	r3, #0
}
 80091d8:	4618      	mov	r0, r3
 80091da:	370c      	adds	r7, #12
 80091dc:	46bd      	mov	sp, r7
 80091de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e2:	4770      	bx	lr

080091e4 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b086      	sub	sp, #24
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80091f4:	f023 030f 	bic.w	r3, r3, #15
 80091f8:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009202:	3b50      	subs	r3, #80	@ 0x50
 8009204:	09db      	lsrs	r3, r3, #7
 8009206:	f003 031f 	and.w	r3, r3, #31
 800920a:	2201      	movs	r2, #1
 800920c:	fa02 f303 	lsl.w	r3, r2, r3
 8009210:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	68db      	ldr	r3, [r3, #12]
 8009216:	693a      	ldr	r2, [r7, #16]
 8009218:	4013      	ands	r3, r2
 800921a:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	2b00      	cmp	r3, #0
 8009220:	f000 813b 	beq.w	800949a <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	691b      	ldr	r3, [r3, #16]
 800922a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800922e:	2b00      	cmp	r3, #0
 8009230:	d011      	beq.n	8009256 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	695b      	ldr	r3, [r3, #20]
 8009238:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800923c:	2b00      	cmp	r3, #0
 800923e:	d00a      	beq.n	8009256 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009248:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800924e:	f043 0201 	orr.w	r2, r3, #1
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	691b      	ldr	r3, [r3, #16]
 800925c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009260:	2b00      	cmp	r3, #0
 8009262:	d011      	beq.n	8009288 <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	695b      	ldr	r3, [r3, #20]
 800926a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800926e:	2b00      	cmp	r3, #0
 8009270:	d00a      	beq.n	8009288 <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800927a:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009280:	f043 0202 	orr.w	r2, r3, #2
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	691b      	ldr	r3, [r3, #16]
 800928e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009292:	2b00      	cmp	r3, #0
 8009294:	d011      	beq.n	80092ba <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	695b      	ldr	r3, [r3, #20]
 800929c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d00a      	beq.n	80092ba <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80092ac:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092b2:	f043 0204 	orr.w	r2, r3, #4
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	691b      	ldr	r3, [r3, #16]
 80092c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d011      	beq.n	80092ec <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	695b      	ldr	r3, [r3, #20]
 80092ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d00a      	beq.n	80092ec <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80092de:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092e4:	f043 0208 	orr.w	r2, r3, #8
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	691b      	ldr	r3, [r3, #16]
 80092f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d013      	beq.n	8009322 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	695b      	ldr	r3, [r3, #20]
 8009300:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009304:	2b00      	cmp	r3, #0
 8009306:	d00c      	beq.n	8009322 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009310:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009316:	2b00      	cmp	r3, #0
 8009318:	d003      	beq.n	8009322 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	691b      	ldr	r3, [r3, #16]
 8009328:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800932c:	2b00      	cmp	r3, #0
 800932e:	d04c      	beq.n	80093ca <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	695b      	ldr	r3, [r3, #20]
 8009336:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800933a:	2b00      	cmp	r3, #0
 800933c:	d045      	beq.n	80093ca <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8009346:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800934e:	b2db      	uxtb	r3, r3
 8009350:	2b04      	cmp	r3, #4
 8009352:	d12e      	bne.n	80093b2 <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	695a      	ldr	r2, [r3, #20]
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009362:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	695a      	ldr	r2, [r3, #20]
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f042 0202 	orr.w	r2, r2, #2
 8009372:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2201      	movs	r2, #1
 8009378:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009380:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009384:	2b00      	cmp	r3, #0
 8009386:	d007      	beq.n	8009398 <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800938c:	2201      	movs	r2, #1
 800938e:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	2200      	movs	r2, #0
 8009396:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2200      	movs	r2, #0
 800939c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d07a      	beq.n	800949e <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	4798      	blx	r3
        }

        return;
 80093b0:	e075      	b.n	800949e <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2205      	movs	r2, #5
 80093b6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d003      	beq.n	80093ca <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	691b      	ldr	r3, [r3, #16]
 80093d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d039      	beq.n	800944c <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	695b      	ldr	r3, [r3, #20]
 80093de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d032      	beq.n	800944c <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d012      	beq.n	8009418 <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d116      	bne.n	800942a <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009402:	2b00      	cmp	r3, #0
 8009404:	d111      	bne.n	800942a <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2201      	movs	r2, #1
 800940a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009412:	2201      	movs	r2, #1
 8009414:	731a      	strb	r2, [r3, #12]
 8009416:	e008      	b.n	800942a <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800941e:	2b00      	cmp	r3, #0
 8009420:	d103      	bne.n	800942a <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2201      	movs	r2, #1
 8009426:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8009432:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2200      	movs	r2, #0
 8009438:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009440:	2b00      	cmp	r3, #0
 8009442:	d003      	beq.n	800944c <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009448:	6878      	ldr	r0, [r7, #4]
 800944a:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009450:	2b00      	cmp	r3, #0
 8009452:	d025      	beq.n	80094a0 <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	695a      	ldr	r2, [r3, #20]
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f042 0202 	orr.w	r2, r2, #2
 8009462:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2201      	movs	r2, #1
 8009468:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009470:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009474:	2b00      	cmp	r3, #0
 8009476:	d003      	beq.n	8009480 <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800947c:	2201      	movs	r2, #1
 800947e:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2200      	movs	r2, #0
 8009484:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800948c:	2b00      	cmp	r3, #0
 800948e:	d007      	beq.n	80094a0 <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	4798      	blx	r3
 8009498:	e002      	b.n	80094a0 <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 800949a:	bf00      	nop
 800949c:	e000      	b.n	80094a0 <HAL_DMA_IRQHandler+0x2bc>
        return;
 800949e:	bf00      	nop
    }
  }
}
 80094a0:	3718      	adds	r7, #24
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}

080094a6 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 80094a6:	b480      	push	{r7}
 80094a8:	b085      	sub	sp, #20
 80094aa:	af00      	add	r7, sp, #0
 80094ac:	6078      	str	r0, [r7, #4]
 80094ae:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d101      	bne.n	80094ba <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 80094b6:	2301      	movs	r3, #1
 80094b8:	e02b      	b.n	8009512 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80094c2:	f023 030f 	bic.w	r3, r3, #15
 80094c6:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80094d0:	3b50      	subs	r3, #80	@ 0x50
 80094d2:	09db      	lsrs	r3, r3, #7
 80094d4:	f003 031f 	and.w	r3, r3, #31
 80094d8:	2201      	movs	r2, #1
 80094da:	fa02 f303 	lsl.w	r3, r2, r3
 80094de:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	f003 0310 	and.w	r3, r3, #16
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d012      	beq.n	8009510 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	f003 0311 	and.w	r3, r3, #17
 80094f0:	2b11      	cmp	r3, #17
 80094f2:	d106      	bne.n	8009502 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	685a      	ldr	r2, [r3, #4]
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	431a      	orrs	r2, r3
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	605a      	str	r2, [r3, #4]
 8009500:	e006      	b.n	8009510 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	685a      	ldr	r2, [r3, #4]
 8009506:	68bb      	ldr	r3, [r7, #8]
 8009508:	43db      	mvns	r3, r3
 800950a:	401a      	ands	r2, r3
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8009510:	2300      	movs	r3, #0
}
 8009512:	4618      	mov	r0, r3
 8009514:	3714      	adds	r7, #20
 8009516:	46bd      	mov	sp, r7
 8009518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951c:	4770      	bx	lr

0800951e <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 800951e:	b480      	push	{r7}
 8009520:	b085      	sub	sp, #20
 8009522:	af00      	add	r7, sp, #0
 8009524:	60f8      	str	r0, [r7, #12]
 8009526:	60b9      	str	r1, [r7, #8]
 8009528:	607a      	str	r2, [r7, #4]
 800952a:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009532:	0c1b      	lsrs	r3, r3, #16
 8009534:	041b      	lsls	r3, r3, #16
 8009536:	683a      	ldr	r2, [r7, #0]
 8009538:	b291      	uxth	r1, r2
 800953a:	68fa      	ldr	r2, [r7, #12]
 800953c:	6812      	ldr	r2, [r2, #0]
 800953e:	430b      	orrs	r3, r1
 8009540:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 800954a:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	68ba      	ldr	r2, [r7, #8]
 8009552:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	687a      	ldr	r2, [r7, #4]
 800955a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800955c:	bf00      	nop
 800955e:	3714      	adds	r7, #20
 8009560:	46bd      	mov	sp, r7
 8009562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009566:	4770      	bx	lr

08009568 <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b084      	sub	sp, #16
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8009570:	f7fc fa1e 	bl	80059b0 <HAL_GetTick>
 8009574:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d101      	bne.n	8009580 <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 800957c:	2301      	movs	r3, #1
 800957e:	e0db      	b.n	8009738 <HAL_DMAEx_List_Init+0x1d0>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	4a6e      	ldr	r2, [pc, #440]	@ (8009740 <HAL_DMAEx_List_Init+0x1d8>)
 8009586:	4293      	cmp	r3, r2
 8009588:	f000 809f 	beq.w	80096ca <HAL_DMAEx_List_Init+0x162>
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	4a6c      	ldr	r2, [pc, #432]	@ (8009744 <HAL_DMAEx_List_Init+0x1dc>)
 8009592:	4293      	cmp	r3, r2
 8009594:	f000 8099 	beq.w	80096ca <HAL_DMAEx_List_Init+0x162>
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	4a6a      	ldr	r2, [pc, #424]	@ (8009748 <HAL_DMAEx_List_Init+0x1e0>)
 800959e:	4293      	cmp	r3, r2
 80095a0:	f000 8093 	beq.w	80096ca <HAL_DMAEx_List_Init+0x162>
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	4a68      	ldr	r2, [pc, #416]	@ (800974c <HAL_DMAEx_List_Init+0x1e4>)
 80095aa:	4293      	cmp	r3, r2
 80095ac:	f000 808d 	beq.w	80096ca <HAL_DMAEx_List_Init+0x162>
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	4a66      	ldr	r2, [pc, #408]	@ (8009750 <HAL_DMAEx_List_Init+0x1e8>)
 80095b6:	4293      	cmp	r3, r2
 80095b8:	f000 8087 	beq.w	80096ca <HAL_DMAEx_List_Init+0x162>
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	4a64      	ldr	r2, [pc, #400]	@ (8009754 <HAL_DMAEx_List_Init+0x1ec>)
 80095c2:	4293      	cmp	r3, r2
 80095c4:	f000 8081 	beq.w	80096ca <HAL_DMAEx_List_Init+0x162>
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	4a62      	ldr	r2, [pc, #392]	@ (8009758 <HAL_DMAEx_List_Init+0x1f0>)
 80095ce:	4293      	cmp	r3, r2
 80095d0:	d07b      	beq.n	80096ca <HAL_DMAEx_List_Init+0x162>
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	4a61      	ldr	r2, [pc, #388]	@ (800975c <HAL_DMAEx_List_Init+0x1f4>)
 80095d8:	4293      	cmp	r3, r2
 80095da:	d076      	beq.n	80096ca <HAL_DMAEx_List_Init+0x162>
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	4a5f      	ldr	r2, [pc, #380]	@ (8009760 <HAL_DMAEx_List_Init+0x1f8>)
 80095e2:	4293      	cmp	r3, r2
 80095e4:	d071      	beq.n	80096ca <HAL_DMAEx_List_Init+0x162>
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	4a5e      	ldr	r2, [pc, #376]	@ (8009764 <HAL_DMAEx_List_Init+0x1fc>)
 80095ec:	4293      	cmp	r3, r2
 80095ee:	d06c      	beq.n	80096ca <HAL_DMAEx_List_Init+0x162>
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	4a5c      	ldr	r2, [pc, #368]	@ (8009768 <HAL_DMAEx_List_Init+0x200>)
 80095f6:	4293      	cmp	r3, r2
 80095f8:	d067      	beq.n	80096ca <HAL_DMAEx_List_Init+0x162>
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	4a5b      	ldr	r2, [pc, #364]	@ (800976c <HAL_DMAEx_List_Init+0x204>)
 8009600:	4293      	cmp	r3, r2
 8009602:	d062      	beq.n	80096ca <HAL_DMAEx_List_Init+0x162>
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	4a59      	ldr	r2, [pc, #356]	@ (8009770 <HAL_DMAEx_List_Init+0x208>)
 800960a:	4293      	cmp	r3, r2
 800960c:	d05d      	beq.n	80096ca <HAL_DMAEx_List_Init+0x162>
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	4a58      	ldr	r2, [pc, #352]	@ (8009774 <HAL_DMAEx_List_Init+0x20c>)
 8009614:	4293      	cmp	r3, r2
 8009616:	d058      	beq.n	80096ca <HAL_DMAEx_List_Init+0x162>
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	4a56      	ldr	r2, [pc, #344]	@ (8009778 <HAL_DMAEx_List_Init+0x210>)
 800961e:	4293      	cmp	r3, r2
 8009620:	d053      	beq.n	80096ca <HAL_DMAEx_List_Init+0x162>
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	4a55      	ldr	r2, [pc, #340]	@ (800977c <HAL_DMAEx_List_Init+0x214>)
 8009628:	4293      	cmp	r3, r2
 800962a:	d04e      	beq.n	80096ca <HAL_DMAEx_List_Init+0x162>
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	4a53      	ldr	r2, [pc, #332]	@ (8009780 <HAL_DMAEx_List_Init+0x218>)
 8009632:	4293      	cmp	r3, r2
 8009634:	d049      	beq.n	80096ca <HAL_DMAEx_List_Init+0x162>
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	4a52      	ldr	r2, [pc, #328]	@ (8009784 <HAL_DMAEx_List_Init+0x21c>)
 800963c:	4293      	cmp	r3, r2
 800963e:	d044      	beq.n	80096ca <HAL_DMAEx_List_Init+0x162>
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	4a50      	ldr	r2, [pc, #320]	@ (8009788 <HAL_DMAEx_List_Init+0x220>)
 8009646:	4293      	cmp	r3, r2
 8009648:	d03f      	beq.n	80096ca <HAL_DMAEx_List_Init+0x162>
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	4a4f      	ldr	r2, [pc, #316]	@ (800978c <HAL_DMAEx_List_Init+0x224>)
 8009650:	4293      	cmp	r3, r2
 8009652:	d03a      	beq.n	80096ca <HAL_DMAEx_List_Init+0x162>
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	4a4d      	ldr	r2, [pc, #308]	@ (8009790 <HAL_DMAEx_List_Init+0x228>)
 800965a:	4293      	cmp	r3, r2
 800965c:	d035      	beq.n	80096ca <HAL_DMAEx_List_Init+0x162>
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	4a4c      	ldr	r2, [pc, #304]	@ (8009794 <HAL_DMAEx_List_Init+0x22c>)
 8009664:	4293      	cmp	r3, r2
 8009666:	d030      	beq.n	80096ca <HAL_DMAEx_List_Init+0x162>
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	4a4a      	ldr	r2, [pc, #296]	@ (8009798 <HAL_DMAEx_List_Init+0x230>)
 800966e:	4293      	cmp	r3, r2
 8009670:	d02b      	beq.n	80096ca <HAL_DMAEx_List_Init+0x162>
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	4a49      	ldr	r2, [pc, #292]	@ (800979c <HAL_DMAEx_List_Init+0x234>)
 8009678:	4293      	cmp	r3, r2
 800967a:	d026      	beq.n	80096ca <HAL_DMAEx_List_Init+0x162>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	4a47      	ldr	r2, [pc, #284]	@ (80097a0 <HAL_DMAEx_List_Init+0x238>)
 8009682:	4293      	cmp	r3, r2
 8009684:	d021      	beq.n	80096ca <HAL_DMAEx_List_Init+0x162>
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	4a46      	ldr	r2, [pc, #280]	@ (80097a4 <HAL_DMAEx_List_Init+0x23c>)
 800968c:	4293      	cmp	r3, r2
 800968e:	d01c      	beq.n	80096ca <HAL_DMAEx_List_Init+0x162>
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	4a44      	ldr	r2, [pc, #272]	@ (80097a8 <HAL_DMAEx_List_Init+0x240>)
 8009696:	4293      	cmp	r3, r2
 8009698:	d017      	beq.n	80096ca <HAL_DMAEx_List_Init+0x162>
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	4a43      	ldr	r2, [pc, #268]	@ (80097ac <HAL_DMAEx_List_Init+0x244>)
 80096a0:	4293      	cmp	r3, r2
 80096a2:	d012      	beq.n	80096ca <HAL_DMAEx_List_Init+0x162>
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	4a41      	ldr	r2, [pc, #260]	@ (80097b0 <HAL_DMAEx_List_Init+0x248>)
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d00d      	beq.n	80096ca <HAL_DMAEx_List_Init+0x162>
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	4a40      	ldr	r2, [pc, #256]	@ (80097b4 <HAL_DMAEx_List_Init+0x24c>)
 80096b4:	4293      	cmp	r3, r2
 80096b6:	d008      	beq.n	80096ca <HAL_DMAEx_List_Init+0x162>
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	4a3e      	ldr	r2, [pc, #248]	@ (80097b8 <HAL_DMAEx_List_Init+0x250>)
 80096be:	4293      	cmp	r3, r2
 80096c0:	d003      	beq.n	80096ca <HAL_DMAEx_List_Init+0x162>
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	4a3d      	ldr	r2, [pc, #244]	@ (80097bc <HAL_DMAEx_List_Init+0x254>)
 80096c8:	4293      	cmp	r3, r2
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2200      	movs	r2, #0
 80096ce:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2202      	movs	r2, #2
 80096d6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	695a      	ldr	r2, [r3, #20]
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f042 0206 	orr.w	r2, r2, #6
 80096e8:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80096ea:	e00f      	b.n	800970c <HAL_DMAEx_List_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80096ec:	f7fc f960 	bl	80059b0 <HAL_GetTick>
 80096f0:	4602      	mov	r2, r0
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	1ad3      	subs	r3, r2, r3
 80096f6:	2b05      	cmp	r3, #5
 80096f8:	d908      	bls.n	800970c <HAL_DMAEx_List_Init+0x1a4>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2210      	movs	r2, #16
 80096fe:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2203      	movs	r2, #3
 8009704:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8009708:	2301      	movs	r3, #1
 800970a:	e015      	b.n	8009738 <HAL_DMAEx_List_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	695b      	ldr	r3, [r3, #20]
 8009712:	f003 0301 	and.w	r3, r3, #1
 8009716:	2b00      	cmp	r3, #0
 8009718:	d1e8      	bne.n	80096ec <HAL_DMAEx_List_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	f000 faba 	bl	8009c94 <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2200      	movs	r2, #0
 800972c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2201      	movs	r2, #1
 8009732:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8009736:	2300      	movs	r3, #0
}
 8009738:	4618      	mov	r0, r3
 800973a:	3710      	adds	r7, #16
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}
 8009740:	40020050 	.word	0x40020050
 8009744:	50020050 	.word	0x50020050
 8009748:	400200d0 	.word	0x400200d0
 800974c:	500200d0 	.word	0x500200d0
 8009750:	40020150 	.word	0x40020150
 8009754:	50020150 	.word	0x50020150
 8009758:	400201d0 	.word	0x400201d0
 800975c:	500201d0 	.word	0x500201d0
 8009760:	40020250 	.word	0x40020250
 8009764:	50020250 	.word	0x50020250
 8009768:	400202d0 	.word	0x400202d0
 800976c:	500202d0 	.word	0x500202d0
 8009770:	40020350 	.word	0x40020350
 8009774:	50020350 	.word	0x50020350
 8009778:	400203d0 	.word	0x400203d0
 800977c:	500203d0 	.word	0x500203d0
 8009780:	40021050 	.word	0x40021050
 8009784:	50021050 	.word	0x50021050
 8009788:	400210d0 	.word	0x400210d0
 800978c:	500210d0 	.word	0x500210d0
 8009790:	40021150 	.word	0x40021150
 8009794:	50021150 	.word	0x50021150
 8009798:	400211d0 	.word	0x400211d0
 800979c:	500211d0 	.word	0x500211d0
 80097a0:	40021250 	.word	0x40021250
 80097a4:	50021250 	.word	0x50021250
 80097a8:	400212d0 	.word	0x400212d0
 80097ac:	500212d0 	.word	0x500212d0
 80097b0:	40021350 	.word	0x40021350
 80097b4:	50021350 	.word	0x50021350
 80097b8:	400213d0 	.word	0x400213d0
 80097bc:	500213d0 	.word	0x500213d0

080097c0 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b086      	sub	sp, #24
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d003      	beq.n	80097d6 <HAL_DMAEx_List_Start_IT+0x16>
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d101      	bne.n	80097da <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 80097d6:	2301      	movs	r3, #1
 80097d8:	e082      	b.n	80098e0 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80097e0:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	695b      	ldr	r3, [r3, #20]
 80097e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80097ec:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 80097ee:	7dfb      	ldrb	r3, [r7, #23]
 80097f0:	2b01      	cmp	r3, #1
 80097f2:	d005      	beq.n	8009800 <HAL_DMAEx_List_Start_IT+0x40>
 80097f4:	7dfb      	ldrb	r3, [r7, #23]
 80097f6:	2b02      	cmp	r3, #2
 80097f8:	d16a      	bne.n	80098d0 <HAL_DMAEx_List_Start_IT+0x110>
 80097fa:	693b      	ldr	r3, [r7, #16]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d067      	beq.n	80098d0 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8009806:	b2db      	uxtb	r3, r3
 8009808:	2b01      	cmp	r3, #1
 800980a:	d157      	bne.n	80098bc <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8009812:	2b01      	cmp	r3, #1
 8009814:	d101      	bne.n	800981a <HAL_DMAEx_List_Start_IT+0x5a>
 8009816:	2302      	movs	r3, #2
 8009818:	e062      	b.n	80098e0 <HAL_DMAEx_List_Start_IT+0x120>
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2201      	movs	r2, #1
 800981e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2202      	movs	r2, #2
 8009826:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800982e:	2202      	movs	r2, #2
 8009830:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2200      	movs	r2, #0
 8009836:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800983c:	2200      	movs	r2, #0
 800983e:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	695a      	ldr	r2, [r3, #20]
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 800984e:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009854:	2b00      	cmp	r3, #0
 8009856:	d007      	beq.n	8009868 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	695a      	ldr	r2, [r3, #20]
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009866:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800986c:	2b00      	cmp	r3, #0
 800986e:	d007      	beq.n	8009880 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	695a      	ldr	r2, [r3, #20]
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800987e:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	f107 010c 	add.w	r1, r7, #12
 800988a:	2200      	movs	r2, #0
 800988c:	4618      	mov	r0, r3
 800988e:	f000 fd1d 	bl	800a2cc <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	4619      	mov	r1, r3
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681a      	ldr	r2, [r3, #0]
 800989e:	0c0b      	lsrs	r3, r1, #16
 80098a0:	041b      	lsls	r3, r3, #16
 80098a2:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	461a      	mov	r2, r3
 80098ac:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80098b0:	4013      	ands	r3, r2
 80098b2:	68f9      	ldr	r1, [r7, #12]
 80098b4:	687a      	ldr	r2, [r7, #4]
 80098b6:	6812      	ldr	r2, [r2, #0]
 80098b8:	430b      	orrs	r3, r1
 80098ba:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	695a      	ldr	r2, [r3, #20]
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f042 0201 	orr.w	r2, r2, #1
 80098ca:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 80098cc:	2300      	movs	r3, #0
 80098ce:	e007      	b.n	80098e0 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2240      	movs	r2, #64	@ 0x40
 80098d4:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2200      	movs	r2, #0
 80098da:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 80098de:	2301      	movs	r3, #1
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	3718      	adds	r7, #24
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}

080098e8 <HAL_DMAEx_List_BuildNode>:
  *         addressable space.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b082      	sub	sp, #8
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
 80098f0:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d002      	beq.n	80098fe <HAL_DMAEx_List_BuildNode+0x16>
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d101      	bne.n	8009902 <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 80098fe:	2301      	movs	r3, #1
 8009900:	e004      	b.n	800990c <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 8009902:	6839      	ldr	r1, [r7, #0]
 8009904:	6878      	ldr	r0, [r7, #4]
 8009906:	f000 fb1d 	bl	8009f44 <DMA_List_BuildNode>

  return HAL_OK;
 800990a:	2300      	movs	r3, #0
}
 800990c:	4618      	mov	r0, r3
 800990e:	3708      	adds	r7, #8
 8009910:	46bd      	mov	sp, r7
 8009912:	bd80      	pop	{r7, pc}

08009914 <HAL_DMAEx_List_InsertNode>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode(DMA_QListTypeDef *const pQList,
                                            DMA_NodeTypeDef *const pPrevNode,
                                            DMA_NodeTypeDef *const pNewNode)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b08c      	sub	sp, #48	@ 0x30
 8009918:	af00      	add	r7, sp, #0
 800991a:	60f8      	str	r0, [r7, #12]
 800991c:	60b9      	str	r1, [r7, #8]
 800991e:	607a      	str	r2, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d002      	beq.n	800992c <HAL_DMAEx_List_InsertNode+0x18>
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d101      	bne.n	8009930 <HAL_DMAEx_List_InsertNode+0x1c>
  {
    return HAL_ERROR;
 800992c:	2301      	movs	r3, #1
 800992e:	e0b6      	b.n	8009a9e <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	695b      	ldr	r3, [r3, #20]
 8009934:	2b01      	cmp	r3, #1
 8009936:	d104      	bne.n	8009942 <HAL_DMAEx_List_InsertNode+0x2e>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	2204      	movs	r2, #4
 800993c:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800993e:	2301      	movs	r3, #1
 8009940:	e0ad      	b.n	8009a9e <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pPrevNode, pNewNode) != 0U)
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	687a      	ldr	r2, [r7, #4]
 8009948:	68b9      	ldr	r1, [r7, #8]
 800994a:	4618      	mov	r0, r3
 800994c:	f000 fc52 	bl	800a1f4 <DMA_List_CheckNodesBaseAddresses>
 8009950:	4603      	mov	r3, r0
 8009952:	2b00      	cmp	r3, #0
 8009954:	d004      	beq.n	8009960 <HAL_DMAEx_List_InsertNode+0x4c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	2205      	movs	r2, #5
 800995a:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800995c:	2301      	movs	r3, #1
 800995e:	e09e      	b.n	8009a9e <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pPrevNode, pNewNode) != 0U)
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	687a      	ldr	r2, [r7, #4]
 8009966:	68b9      	ldr	r1, [r7, #8]
 8009968:	4618      	mov	r0, r3
 800996a:	f000 fc73 	bl	800a254 <DMA_List_CheckNodesTypes>
 800996e:	4603      	mov	r3, r0
 8009970:	2b00      	cmp	r3, #0
 8009972:	d004      	beq.n	800997e <HAL_DMAEx_List_InsertNode+0x6a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	2204      	movs	r2, #4
 8009978:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800997a:	2301      	movs	r3, #1
 800997c:	e08f      	b.n	8009a9e <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	2202      	movs	r2, #2
 8009982:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	2200      	movs	r2, #0
 8009988:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 800998a:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800998e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009992:	4619      	mov	r1, r3
 8009994:	6878      	ldr	r0, [r7, #4]
 8009996:	f000 fc99 	bl	800a2cc <DMA_List_GetCLLRNodeInfo>

  /* Empty queue */
  if (pQList->Head == NULL)
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d11a      	bne.n	80099d8 <HAL_DMAEx_List_InsertNode+0xc4>
  {
    /* Add only new node to queue */
    if (pPrevNode == NULL)
 80099a2:	68bb      	ldr	r3, [r7, #8]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d106      	bne.n	80099b6 <HAL_DMAEx_List_InsertNode+0xa2>
    {
      pQList->Head       = pNewNode;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	687a      	ldr	r2, [r7, #4]
 80099ac:	601a      	str	r2, [r3, #0]
      pQList->NodeNumber = 1U;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	2201      	movs	r2, #1
 80099b2:	609a      	str	r2, [r3, #8]
 80099b4:	e06c      	b.n	8009a90 <HAL_DMAEx_List_InsertNode+0x17c>
    }
    /* Add previous node then new node to queue */
    else
    {
      pQList->Head                          = pPrevNode;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	68ba      	ldr	r2, [r7, #8]
 80099ba:	601a      	str	r2, [r3, #0]
      pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 80099bc:	687a      	ldr	r2, [r7, #4]
 80099be:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80099c2:	4013      	ands	r3, r2
 80099c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80099c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80099c8:	4319      	orrs	r1, r3
 80099ca:	68bb      	ldr	r3, [r7, #8]
 80099cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->NodeNumber                    = 2U;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	2202      	movs	r2, #2
 80099d4:	609a      	str	r2, [r3, #8]
 80099d6:	e05b      	b.n	8009a90 <HAL_DMAEx_List_InsertNode+0x17c>
  }
  /* Not empty queue */
  else
  {
    /* Add new node at the head of queue */
    if (pPrevNode == NULL)
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d10f      	bne.n	80099fe <HAL_DMAEx_List_InsertNode+0xea>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	461a      	mov	r2, r3
 80099e4:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80099e8:	4013      	ands	r3, r2
 80099ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80099ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80099ee:	4319      	orrs	r1, r3
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->Head                         = pNewNode;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	687a      	ldr	r2, [r7, #4]
 80099fa:	601a      	str	r2, [r3, #0]
 80099fc:	e043      	b.n	8009a86 <HAL_DMAEx_List_InsertNode+0x172>
    }
    /* Add new node according to selected position */
    else
    {
      /* Find node and get its position in selected queue */
      node_info.cllr_offset = cllr_offset;
 80099fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a00:	617b      	str	r3, [r7, #20]
      if (DMA_List_FindNode(pQList, pPrevNode, &node_info) == 0U)
 8009a02:	f107 0314 	add.w	r3, r7, #20
 8009a06:	461a      	mov	r2, r3
 8009a08:	68b9      	ldr	r1, [r7, #8]
 8009a0a:	68f8      	ldr	r0, [r7, #12]
 8009a0c:	f000 fc8e 	bl	800a32c <DMA_List_FindNode>
 8009a10:	4603      	mov	r3, r0
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d132      	bne.n	8009a7c <HAL_DMAEx_List_InsertNode+0x168>
      {
        /* Selected node is the last queue node */
        if (node_info.currentnode_pos == pQList->NodeNumber)
 8009a16:	69fa      	ldr	r2, [r7, #28]
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	689b      	ldr	r3, [r3, #8]
 8009a1c:	429a      	cmp	r2, r3
 8009a1e:	d11a      	bne.n	8009a56 <HAL_DMAEx_List_InsertNode+0x142>
        {
          /* Check if queue is circular */
          if (pQList->FirstCircularNode != NULL)
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	685b      	ldr	r3, [r3, #4]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d00b      	beq.n	8009a40 <HAL_DMAEx_List_InsertNode+0x12c>
          {
            pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	685b      	ldr	r3, [r3, #4]
 8009a2c:	461a      	mov	r2, r3
 8009a2e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8009a32:	4013      	ands	r3, r2
 8009a34:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009a36:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009a38:	4319      	orrs	r1, r3
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          }

          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8009a40:	687a      	ldr	r2, [r7, #4]
 8009a42:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8009a46:	4013      	ands	r3, r2
 8009a48:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009a4a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009a4c:	4319      	orrs	r1, r3
 8009a4e:	68bb      	ldr	r3, [r7, #8]
 8009a50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009a54:	e017      	b.n	8009a86 <HAL_DMAEx_List_InsertNode+0x172>
        }
        /* Selected node is not the last queue node */
        else
        {
          pNewNode->LinkRegisters[cllr_offset] = pPrevNode->LinkRegisters[cllr_offset];
 8009a56:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009a58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009a5a:	68bb      	ldr	r3, [r7, #8]
 8009a5c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8009a66:	687a      	ldr	r2, [r7, #4]
 8009a68:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8009a6c:	4013      	ands	r3, r2
 8009a6e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009a70:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009a72:	4319      	orrs	r1, r3
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009a7a:	e004      	b.n	8009a86 <HAL_DMAEx_List_InsertNode+0x172>
        }
      }
      else
      {
        /* Update the queue error code */
        pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NOTFOUND;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	2206      	movs	r2, #6
 8009a80:	611a      	str	r2, [r3, #16]

        return HAL_ERROR;
 8009a82:	2301      	movs	r3, #1
 8009a84:	e00b      	b.n	8009a9e <HAL_DMAEx_List_InsertNode+0x18a>
      }
    }

    /* Increment queue node number */
    pQList->NodeNumber++;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	689b      	ldr	r3, [r3, #8]
 8009a8a:	1c5a      	adds	r2, r3, #1
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	609a      	str	r2, [r3, #8]
  }

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	2200      	movs	r2, #0
 8009a94:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	2201      	movs	r2, #1
 8009a9a:	731a      	strb	r2, [r3, #12]

  return HAL_OK;
 8009a9c:	2300      	movs	r3, #0
}
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	3730      	adds	r7, #48	@ 0x30
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	bd80      	pop	{r7, pc}

08009aa6 <HAL_DMAEx_List_SetCircularMode>:
  * @brief  Set circular mode for linked-list queue.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularMode(DMA_QListTypeDef *const pQList)
{
 8009aa6:	b580      	push	{r7, lr}
 8009aa8:	b08a      	sub	sp, #40	@ 0x28
 8009aaa:	af00      	add	r7, sp, #0
 8009aac:	6078      	str	r0, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d101      	bne.n	8009ab8 <HAL_DMAEx_List_SetCircularMode+0x12>
  {
    return HAL_ERROR;
 8009ab4:	2301      	movs	r3, #1
 8009ab6:	e052      	b.n	8009b5e <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d104      	bne.n	8009aca <HAL_DMAEx_List_SetCircularMode+0x24>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2202      	movs	r2, #2
 8009ac4:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8009ac6:	2301      	movs	r3, #1
 8009ac8:	e049      	b.n	8009b5e <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	685b      	ldr	r3, [r3, #4]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d00c      	beq.n	8009aec <HAL_DMAEx_List_SetCircularMode+0x46>
  {
    if (pQList->FirstCircularNode == pQList->Head)
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	685a      	ldr	r2, [r3, #4]
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	429a      	cmp	r2, r3
 8009adc:	d101      	bne.n	8009ae2 <HAL_DMAEx_List_SetCircularMode+0x3c>
    {
      return HAL_OK;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	e03d      	b.n	8009b5e <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2204      	movs	r2, #4
 8009ae6:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8009ae8:	2301      	movs	r3, #1
 8009aea:	e038      	b.n	8009b5e <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	695b      	ldr	r3, [r3, #20]
 8009af0:	2b01      	cmp	r3, #1
 8009af2:	d104      	bne.n	8009afe <HAL_DMAEx_List_SetCircularMode+0x58>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2204      	movs	r2, #4
 8009af8:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8009afa:	2301      	movs	r3, #1
 8009afc:	e02f      	b.n	8009b5e <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2202      	movs	r2, #2
 8009b02:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2200      	movs	r2, #0
 8009b08:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pQList->Head, &cllr_mask, &cllr_offset);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	f107 0220 	add.w	r2, r7, #32
 8009b12:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8009b16:	4618      	mov	r0, r3
 8009b18:	f000 fbd8 	bl	800a2cc <DMA_List_GetCLLRNodeInfo>

  /* Find the last queue node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 8009b1c:	6a3b      	ldr	r3, [r7, #32]
 8009b1e:	60fb      	str	r3, [r7, #12]
  (void)DMA_List_FindNode(pQList, NULL, &node_info);
 8009b20:	f107 030c 	add.w	r3, r7, #12
 8009b24:	461a      	mov	r2, r3
 8009b26:	2100      	movs	r1, #0
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f000 fbff 	bl	800a32c <DMA_List_FindNode>

  /* Set circular mode */
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	461a      	mov	r2, r3
 8009b34:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8009b38:	4013      	ands	r3, r2
 8009b3a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8009b3c:	69ba      	ldr	r2, [r7, #24]
 8009b3e:	4610      	mov	r0, r2
 8009b40:	6a3a      	ldr	r2, [r7, #32]
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8009b42:	430b      	orrs	r3, r1
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8009b44:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Update linked-list circular state */
  pQList->FirstCircularNode = pQList->Head;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681a      	ldr	r2, [r3, #0]
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2200      	movs	r2, #0
 8009b54:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2201      	movs	r2, #1
 8009b5a:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 8009b5c:	2300      	movs	r3, #0
}
 8009b5e:	4618      	mov	r0, r3
 8009b60:	3728      	adds	r7, #40	@ 0x28
 8009b62:	46bd      	mov	sp, r7
 8009b64:	bd80      	pop	{r7, pc}
	...

08009b68 <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 8009b68:	b480      	push	{r7}
 8009b6a:	b085      	sub	sp, #20
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
 8009b70:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d002      	beq.n	8009b7e <HAL_DMAEx_List_LinkQ+0x16>
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d101      	bne.n	8009b82 <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 8009b7e:	2301      	movs	r3, #1
 8009b80:	e072      	b.n	8009c68 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8009b88:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8009b90:	b2db      	uxtb	r3, r3
 8009b92:	2b02      	cmp	r3, #2
 8009b94:	d002      	beq.n	8009b9c <HAL_DMAEx_List_LinkQ+0x34>
 8009b96:	7bfb      	ldrb	r3, [r7, #15]
 8009b98:	2b05      	cmp	r3, #5
 8009b9a:	d108      	bne.n	8009bae <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2240      	movs	r2, #64	@ 0x40
 8009ba0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8009baa:	2301      	movs	r3, #1
 8009bac:	e05c      	b.n	8009c68 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	7b1b      	ldrb	r3, [r3, #12]
 8009bb2:	b2db      	uxtb	r3, r3
 8009bb4:	2b02      	cmp	r3, #2
 8009bb6:	d104      	bne.n	8009bc2 <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	2201      	movs	r2, #1
 8009bbc:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8009bbe:	2301      	movs	r3, #1
 8009bc0:	e052      	b.n	8009c68 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	4a2b      	ldr	r2, [pc, #172]	@ (8009c74 <HAL_DMAEx_List_LinkQ+0x10c>)
 8009bc8:	4293      	cmp	r3, r2
 8009bca:	d022      	beq.n	8009c12 <HAL_DMAEx_List_LinkQ+0xaa>
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	4a29      	ldr	r2, [pc, #164]	@ (8009c78 <HAL_DMAEx_List_LinkQ+0x110>)
 8009bd2:	4293      	cmp	r3, r2
 8009bd4:	d01d      	beq.n	8009c12 <HAL_DMAEx_List_LinkQ+0xaa>
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	4a28      	ldr	r2, [pc, #160]	@ (8009c7c <HAL_DMAEx_List_LinkQ+0x114>)
 8009bdc:	4293      	cmp	r3, r2
 8009bde:	d018      	beq.n	8009c12 <HAL_DMAEx_List_LinkQ+0xaa>
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	4a26      	ldr	r2, [pc, #152]	@ (8009c80 <HAL_DMAEx_List_LinkQ+0x118>)
 8009be6:	4293      	cmp	r3, r2
 8009be8:	d013      	beq.n	8009c12 <HAL_DMAEx_List_LinkQ+0xaa>
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	4a25      	ldr	r2, [pc, #148]	@ (8009c84 <HAL_DMAEx_List_LinkQ+0x11c>)
 8009bf0:	4293      	cmp	r3, r2
 8009bf2:	d00e      	beq.n	8009c12 <HAL_DMAEx_List_LinkQ+0xaa>
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	4a23      	ldr	r2, [pc, #140]	@ (8009c88 <HAL_DMAEx_List_LinkQ+0x120>)
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	d009      	beq.n	8009c12 <HAL_DMAEx_List_LinkQ+0xaa>
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	4a22      	ldr	r2, [pc, #136]	@ (8009c8c <HAL_DMAEx_List_LinkQ+0x124>)
 8009c04:	4293      	cmp	r3, r2
 8009c06:	d004      	beq.n	8009c12 <HAL_DMAEx_List_LinkQ+0xaa>
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	4a20      	ldr	r2, [pc, #128]	@ (8009c90 <HAL_DMAEx_List_LinkQ+0x128>)
 8009c0e:	4293      	cmp	r3, r2
 8009c10:	d101      	bne.n	8009c16 <HAL_DMAEx_List_LinkQ+0xae>
 8009c12:	2301      	movs	r3, #1
 8009c14:	e000      	b.n	8009c18 <HAL_DMAEx_List_LinkQ+0xb0>
 8009c16:	2300      	movs	r3, #0
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d10b      	bne.n	8009c34 <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	6a1b      	ldr	r3, [r3, #32]
 8009c22:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d004      	beq.n	8009c34 <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	2203      	movs	r2, #3
 8009c2e:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8009c30:	2301      	movs	r3, #1
 8009c32:	e019      	b.n	8009c68 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c38:	2b81      	cmp	r3, #129	@ 0x81
 8009c3a:	d108      	bne.n	8009c4e <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	685b      	ldr	r3, [r3, #4]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d10d      	bne.n	8009c60 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	2204      	movs	r2, #4
 8009c48:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	e00c      	b.n	8009c68 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	685b      	ldr	r3, [r3, #4]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d004      	beq.n	8009c60 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	2204      	movs	r2, #4
 8009c5a:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	e003      	b.n	8009c68 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	683a      	ldr	r2, [r7, #0]
 8009c64:	675a      	str	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 8009c66:	2300      	movs	r3, #0
}
 8009c68:	4618      	mov	r0, r3
 8009c6a:	3714      	adds	r7, #20
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c72:	4770      	bx	lr
 8009c74:	40020350 	.word	0x40020350
 8009c78:	50020350 	.word	0x50020350
 8009c7c:	400203d0 	.word	0x400203d0
 8009c80:	500203d0 	.word	0x500203d0
 8009c84:	40021350 	.word	0x40021350
 8009c88:	50021350 	.word	0x50021350
 8009c8c:	400213d0 	.word	0x400213d0
 8009c90:	500213d0 	.word	0x500213d0

08009c94 <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 8009c94:	b480      	push	{r7}
 8009c96:	b085      	sub	sp, #20
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ca4:	4313      	orrs	r3, r2
 8009ca6:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	4a85      	ldr	r2, [pc, #532]	@ (8009ec4 <DMA_List_Init+0x230>)
 8009cae:	4293      	cmp	r3, r2
 8009cb0:	f000 80a0 	beq.w	8009df4 <DMA_List_Init+0x160>
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	4a83      	ldr	r2, [pc, #524]	@ (8009ec8 <DMA_List_Init+0x234>)
 8009cba:	4293      	cmp	r3, r2
 8009cbc:	f000 809a 	beq.w	8009df4 <DMA_List_Init+0x160>
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	4a81      	ldr	r2, [pc, #516]	@ (8009ecc <DMA_List_Init+0x238>)
 8009cc6:	4293      	cmp	r3, r2
 8009cc8:	f000 8094 	beq.w	8009df4 <DMA_List_Init+0x160>
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	4a7f      	ldr	r2, [pc, #508]	@ (8009ed0 <DMA_List_Init+0x23c>)
 8009cd2:	4293      	cmp	r3, r2
 8009cd4:	f000 808e 	beq.w	8009df4 <DMA_List_Init+0x160>
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	4a7d      	ldr	r2, [pc, #500]	@ (8009ed4 <DMA_List_Init+0x240>)
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	f000 8088 	beq.w	8009df4 <DMA_List_Init+0x160>
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	4a7b      	ldr	r2, [pc, #492]	@ (8009ed8 <DMA_List_Init+0x244>)
 8009cea:	4293      	cmp	r3, r2
 8009cec:	f000 8082 	beq.w	8009df4 <DMA_List_Init+0x160>
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	4a79      	ldr	r2, [pc, #484]	@ (8009edc <DMA_List_Init+0x248>)
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d07c      	beq.n	8009df4 <DMA_List_Init+0x160>
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	4a78      	ldr	r2, [pc, #480]	@ (8009ee0 <DMA_List_Init+0x24c>)
 8009d00:	4293      	cmp	r3, r2
 8009d02:	d077      	beq.n	8009df4 <DMA_List_Init+0x160>
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	4a76      	ldr	r2, [pc, #472]	@ (8009ee4 <DMA_List_Init+0x250>)
 8009d0a:	4293      	cmp	r3, r2
 8009d0c:	d072      	beq.n	8009df4 <DMA_List_Init+0x160>
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	4a75      	ldr	r2, [pc, #468]	@ (8009ee8 <DMA_List_Init+0x254>)
 8009d14:	4293      	cmp	r3, r2
 8009d16:	d06d      	beq.n	8009df4 <DMA_List_Init+0x160>
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	4a73      	ldr	r2, [pc, #460]	@ (8009eec <DMA_List_Init+0x258>)
 8009d1e:	4293      	cmp	r3, r2
 8009d20:	d068      	beq.n	8009df4 <DMA_List_Init+0x160>
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	4a72      	ldr	r2, [pc, #456]	@ (8009ef0 <DMA_List_Init+0x25c>)
 8009d28:	4293      	cmp	r3, r2
 8009d2a:	d063      	beq.n	8009df4 <DMA_List_Init+0x160>
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	4a70      	ldr	r2, [pc, #448]	@ (8009ef4 <DMA_List_Init+0x260>)
 8009d32:	4293      	cmp	r3, r2
 8009d34:	d05e      	beq.n	8009df4 <DMA_List_Init+0x160>
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	4a6f      	ldr	r2, [pc, #444]	@ (8009ef8 <DMA_List_Init+0x264>)
 8009d3c:	4293      	cmp	r3, r2
 8009d3e:	d059      	beq.n	8009df4 <DMA_List_Init+0x160>
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	4a6d      	ldr	r2, [pc, #436]	@ (8009efc <DMA_List_Init+0x268>)
 8009d46:	4293      	cmp	r3, r2
 8009d48:	d054      	beq.n	8009df4 <DMA_List_Init+0x160>
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	4a6c      	ldr	r2, [pc, #432]	@ (8009f00 <DMA_List_Init+0x26c>)
 8009d50:	4293      	cmp	r3, r2
 8009d52:	d04f      	beq.n	8009df4 <DMA_List_Init+0x160>
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	4a6a      	ldr	r2, [pc, #424]	@ (8009f04 <DMA_List_Init+0x270>)
 8009d5a:	4293      	cmp	r3, r2
 8009d5c:	d04a      	beq.n	8009df4 <DMA_List_Init+0x160>
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	4a69      	ldr	r2, [pc, #420]	@ (8009f08 <DMA_List_Init+0x274>)
 8009d64:	4293      	cmp	r3, r2
 8009d66:	d045      	beq.n	8009df4 <DMA_List_Init+0x160>
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	4a67      	ldr	r2, [pc, #412]	@ (8009f0c <DMA_List_Init+0x278>)
 8009d6e:	4293      	cmp	r3, r2
 8009d70:	d040      	beq.n	8009df4 <DMA_List_Init+0x160>
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	4a66      	ldr	r2, [pc, #408]	@ (8009f10 <DMA_List_Init+0x27c>)
 8009d78:	4293      	cmp	r3, r2
 8009d7a:	d03b      	beq.n	8009df4 <DMA_List_Init+0x160>
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	4a64      	ldr	r2, [pc, #400]	@ (8009f14 <DMA_List_Init+0x280>)
 8009d82:	4293      	cmp	r3, r2
 8009d84:	d036      	beq.n	8009df4 <DMA_List_Init+0x160>
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	4a63      	ldr	r2, [pc, #396]	@ (8009f18 <DMA_List_Init+0x284>)
 8009d8c:	4293      	cmp	r3, r2
 8009d8e:	d031      	beq.n	8009df4 <DMA_List_Init+0x160>
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	4a61      	ldr	r2, [pc, #388]	@ (8009f1c <DMA_List_Init+0x288>)
 8009d96:	4293      	cmp	r3, r2
 8009d98:	d02c      	beq.n	8009df4 <DMA_List_Init+0x160>
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	4a60      	ldr	r2, [pc, #384]	@ (8009f20 <DMA_List_Init+0x28c>)
 8009da0:	4293      	cmp	r3, r2
 8009da2:	d027      	beq.n	8009df4 <DMA_List_Init+0x160>
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	4a5e      	ldr	r2, [pc, #376]	@ (8009f24 <DMA_List_Init+0x290>)
 8009daa:	4293      	cmp	r3, r2
 8009dac:	d022      	beq.n	8009df4 <DMA_List_Init+0x160>
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	4a5d      	ldr	r2, [pc, #372]	@ (8009f28 <DMA_List_Init+0x294>)
 8009db4:	4293      	cmp	r3, r2
 8009db6:	d01d      	beq.n	8009df4 <DMA_List_Init+0x160>
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	4a5b      	ldr	r2, [pc, #364]	@ (8009f2c <DMA_List_Init+0x298>)
 8009dbe:	4293      	cmp	r3, r2
 8009dc0:	d018      	beq.n	8009df4 <DMA_List_Init+0x160>
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	4a5a      	ldr	r2, [pc, #360]	@ (8009f30 <DMA_List_Init+0x29c>)
 8009dc8:	4293      	cmp	r3, r2
 8009dca:	d013      	beq.n	8009df4 <DMA_List_Init+0x160>
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	4a58      	ldr	r2, [pc, #352]	@ (8009f34 <DMA_List_Init+0x2a0>)
 8009dd2:	4293      	cmp	r3, r2
 8009dd4:	d00e      	beq.n	8009df4 <DMA_List_Init+0x160>
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	4a57      	ldr	r2, [pc, #348]	@ (8009f38 <DMA_List_Init+0x2a4>)
 8009ddc:	4293      	cmp	r3, r2
 8009dde:	d009      	beq.n	8009df4 <DMA_List_Init+0x160>
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	4a55      	ldr	r2, [pc, #340]	@ (8009f3c <DMA_List_Init+0x2a8>)
 8009de6:	4293      	cmp	r3, r2
 8009de8:	d004      	beq.n	8009df4 <DMA_List_Init+0x160>
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	4a54      	ldr	r2, [pc, #336]	@ (8009f40 <DMA_List_Init+0x2ac>)
 8009df0:	4293      	cmp	r3, r2
 8009df2:	d101      	bne.n	8009df8 <DMA_List_Init+0x164>
 8009df4:	2301      	movs	r3, #1
 8009df6:	e000      	b.n	8009dfa <DMA_List_Init+0x166>
 8009df8:	2300      	movs	r3, #0
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d004      	beq.n	8009e08 <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e02:	68fa      	ldr	r2, [r7, #12]
 8009e04:	4313      	orrs	r3, r2
 8009e06:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	695b      	ldr	r3, [r3, #20]
 8009e0e:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	68fa      	ldr	r2, [r7, #12]
 8009e18:	430a      	orrs	r2, r1
 8009e1a:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	2200      	movs	r2, #0
 8009e22:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	687a      	ldr	r2, [r7, #4]
 8009e2a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8009e2c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	2200      	movs	r2, #0
 8009e34:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	2200      	movs	r2, #0
 8009e44:	651a      	str	r2, [r3, #80]	@ 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	4a2a      	ldr	r2, [pc, #168]	@ (8009ef4 <DMA_List_Init+0x260>)
 8009e4c:	4293      	cmp	r3, r2
 8009e4e:	d022      	beq.n	8009e96 <DMA_List_Init+0x202>
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	4a28      	ldr	r2, [pc, #160]	@ (8009ef8 <DMA_List_Init+0x264>)
 8009e56:	4293      	cmp	r3, r2
 8009e58:	d01d      	beq.n	8009e96 <DMA_List_Init+0x202>
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	4a27      	ldr	r2, [pc, #156]	@ (8009efc <DMA_List_Init+0x268>)
 8009e60:	4293      	cmp	r3, r2
 8009e62:	d018      	beq.n	8009e96 <DMA_List_Init+0x202>
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	4a25      	ldr	r2, [pc, #148]	@ (8009f00 <DMA_List_Init+0x26c>)
 8009e6a:	4293      	cmp	r3, r2
 8009e6c:	d013      	beq.n	8009e96 <DMA_List_Init+0x202>
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	4a30      	ldr	r2, [pc, #192]	@ (8009f34 <DMA_List_Init+0x2a0>)
 8009e74:	4293      	cmp	r3, r2
 8009e76:	d00e      	beq.n	8009e96 <DMA_List_Init+0x202>
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	4a2e      	ldr	r2, [pc, #184]	@ (8009f38 <DMA_List_Init+0x2a4>)
 8009e7e:	4293      	cmp	r3, r2
 8009e80:	d009      	beq.n	8009e96 <DMA_List_Init+0x202>
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	4a2d      	ldr	r2, [pc, #180]	@ (8009f3c <DMA_List_Init+0x2a8>)
 8009e88:	4293      	cmp	r3, r2
 8009e8a:	d004      	beq.n	8009e96 <DMA_List_Init+0x202>
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	4a2b      	ldr	r2, [pc, #172]	@ (8009f40 <DMA_List_Init+0x2ac>)
 8009e92:	4293      	cmp	r3, r2
 8009e94:	d101      	bne.n	8009e9a <DMA_List_Init+0x206>
 8009e96:	2301      	movs	r3, #1
 8009e98:	e000      	b.n	8009e9c <DMA_List_Init+0x208>
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d007      	beq.n	8009eb0 <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	2200      	movs	r2, #0
 8009eae:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8009eb8:	bf00      	nop
 8009eba:	3714      	adds	r7, #20
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec2:	4770      	bx	lr
 8009ec4:	40020050 	.word	0x40020050
 8009ec8:	50020050 	.word	0x50020050
 8009ecc:	400200d0 	.word	0x400200d0
 8009ed0:	500200d0 	.word	0x500200d0
 8009ed4:	40020150 	.word	0x40020150
 8009ed8:	50020150 	.word	0x50020150
 8009edc:	400201d0 	.word	0x400201d0
 8009ee0:	500201d0 	.word	0x500201d0
 8009ee4:	40020250 	.word	0x40020250
 8009ee8:	50020250 	.word	0x50020250
 8009eec:	400202d0 	.word	0x400202d0
 8009ef0:	500202d0 	.word	0x500202d0
 8009ef4:	40020350 	.word	0x40020350
 8009ef8:	50020350 	.word	0x50020350
 8009efc:	400203d0 	.word	0x400203d0
 8009f00:	500203d0 	.word	0x500203d0
 8009f04:	40021050 	.word	0x40021050
 8009f08:	50021050 	.word	0x50021050
 8009f0c:	400210d0 	.word	0x400210d0
 8009f10:	500210d0 	.word	0x500210d0
 8009f14:	40021150 	.word	0x40021150
 8009f18:	50021150 	.word	0x50021150
 8009f1c:	400211d0 	.word	0x400211d0
 8009f20:	500211d0 	.word	0x500211d0
 8009f24:	40021250 	.word	0x40021250
 8009f28:	50021250 	.word	0x50021250
 8009f2c:	400212d0 	.word	0x400212d0
 8009f30:	500212d0 	.word	0x500212d0
 8009f34:	40021350 	.word	0x40021350
 8009f38:	50021350 	.word	0x50021350
 8009f3c:	400213d0 	.word	0x400213d0
 8009f40:	500213d0 	.word	0x500213d0

08009f44 <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 8009f44:	b480      	push	{r7}
 8009f46:	b085      	sub	sp, #20
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
 8009f4c:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8009f56:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 8009f5c:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8009f62:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 8009f68:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	f003 0320 	and.w	r3, r3, #32
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d017      	beq.n	8009faa <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f86:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f8c:	3b01      	subs	r3, #1
 8009f8e:	051b      	lsls	r3, r3, #20
 8009f90:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8009f94:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f9a:	3b01      	subs	r3, #1
 8009f9c:	011b      	lsls	r3, r3, #4
 8009f9e:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8009fa2:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8009fa4:	431a      	orrs	r2, r3
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6859      	ldr	r1, [r3, #4]
 8009fb2:	f240 23ff 	movw	r3, #767	@ 0x2ff
 8009fb6:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8009fb8:	431a      	orrs	r2, r3
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	68db      	ldr	r3, [r3, #12]
 8009fc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009fc6:	d10c      	bne.n	8009fe2 <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	f003 0320 	and.w	r3, r3, #32
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d011      	beq.n	8009ff8 <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	685b      	ldr	r3, [r3, #4]
 8009fd8:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	605a      	str	r2, [r3, #4]
 8009fe0:	e00a      	b.n	8009ff8 <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	68db      	ldr	r3, [r3, #12]
 8009fe6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009fea:	d105      	bne.n	8009ff8 <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	685b      	ldr	r3, [r3, #4]
 8009ff0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Configure HW Peripheral flow control selection */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= pNodeConfig->Init.Mode;
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	685a      	ldr	r2, [r3, #4]
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a000:	431a      	orrs	r2, r3
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	605a      	str	r2, [r3, #4]

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d00f      	beq.n	800a02e <DMA_List_BuildNode+0xea>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a01a:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a020:	041b      	lsls	r3, r3, #16
 800a022:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 800a026:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 800a028:	431a      	orrs	r2, r3
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a032:	b29a      	uxth	r2, r3
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	f003 0302 	and.w	r3, r3, #2
 800a040:	2b00      	cmp	r3, #0
 800a042:	d04e      	beq.n	800a0e2 <DMA_List_BuildNode+0x19e>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a04c:	3b01      	subs	r3, #1
 800a04e:	0419      	lsls	r1, r3, #16
 800a050:	4b66      	ldr	r3, [pc, #408]	@ (800a1ec <DMA_List_BuildNode+0x2a8>)
 800a052:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 800a054:	431a      	orrs	r2, r3
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a05e:	2b00      	cmp	r3, #0
 800a060:	da06      	bge.n	800a070 <DMA_List_BuildNode+0x12c>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	689b      	ldr	r3, [r3, #8]
 800a066:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	609a      	str	r2, [r3, #8]
 800a06e:	e005      	b.n	800a07c <DMA_List_BuildNode+0x138>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	689b      	ldr	r3, [r3, #8]
 800a074:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a080:	2b00      	cmp	r3, #0
 800a082:	da06      	bge.n	800a092 <DMA_List_BuildNode+0x14e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	689b      	ldr	r3, [r3, #8]
 800a088:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	609a      	str	r2, [r3, #8]
 800a090:	e005      	b.n	800a09e <DMA_List_BuildNode+0x15a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	689b      	ldr	r3, [r3, #8]
 800a096:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	da06      	bge.n	800a0b4 <DMA_List_BuildNode+0x170>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	689b      	ldr	r3, [r3, #8]
 800a0aa:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	609a      	str	r2, [r3, #8]
 800a0b2:	e005      	b.n	800a0c0 <DMA_List_BuildNode+0x17c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	689b      	ldr	r3, [r3, #8]
 800a0b8:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	da06      	bge.n	800a0d6 <DMA_List_BuildNode+0x192>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	689b      	ldr	r3, [r3, #8]
 800a0cc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	609a      	str	r2, [r3, #8]
 800a0d4:	e005      	b.n	800a0e2 <DMA_List_BuildNode+0x19e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	689b      	ldr	r3, [r3, #8]
 800a0da:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f003 0302 	and.w	r3, r3, #2
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d059      	beq.n	800a1b2 <DMA_List_BuildNode+0x26e>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a102:	2b00      	cmp	r3, #0
 800a104:	da09      	bge.n	800a11a <DMA_List_BuildNode+0x1d6>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a10a:	425b      	negs	r3, r3
 800a10c:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	f3c3 020c 	ubfx	r2, r3, #0, #13
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	615a      	str	r2, [r3, #20]
 800a118:	e005      	b.n	800a126 <DMA_List_BuildNode+0x1e2>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a11e:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	da0d      	bge.n	800a14a <DMA_List_BuildNode+0x206>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a132:	425b      	negs	r3, r3
 800a134:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	695a      	ldr	r2, [r3, #20]
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	0419      	lsls	r1, r3, #16
 800a13e:	4b2c      	ldr	r3, [pc, #176]	@ (800a1f0 <DMA_List_BuildNode+0x2ac>)
 800a140:	400b      	ands	r3, r1
 800a142:	431a      	orrs	r2, r3
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	615a      	str	r2, [r3, #20]
 800a148:	e009      	b.n	800a15e <DMA_List_BuildNode+0x21a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a152:	0419      	lsls	r1, r3, #16
 800a154:	4b26      	ldr	r3, [pc, #152]	@ (800a1f0 <DMA_List_BuildNode+0x2ac>)
 800a156:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 800a158:	431a      	orrs	r2, r3
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a162:	2b00      	cmp	r3, #0
 800a164:	da08      	bge.n	800a178 <DMA_List_BuildNode+0x234>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a16a:	425b      	negs	r3, r3
 800a16c:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	b29a      	uxth	r2, r3
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	619a      	str	r2, [r3, #24]
 800a176:	e004      	b.n	800a182 <DMA_List_BuildNode+0x23e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a17c:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a186:	2b00      	cmp	r3, #0
 800a188:	da0b      	bge.n	800a1a2 <DMA_List_BuildNode+0x25e>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a18e:	425b      	negs	r3, r3
 800a190:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 800a19a:	431a      	orrs	r2, r3
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	619a      	str	r2, [r3, #24]
 800a1a0:	e007      	b.n	800a1b2 <DMA_List_BuildNode+0x26e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a1aa:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 800a1ac:	431a      	orrs	r2, r3
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	619a      	str	r2, [r3, #24]
  }


  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681a      	ldr	r2, [r3, #0]
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	f003 0302 	and.w	r3, r3, #2
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d006      	beq.n	800a1d4 <DMA_List_BuildNode+0x290>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	6a1b      	ldr	r3, [r3, #32]
 800a1ca:	f443 62e0 	orr.w	r2, r3, #1792	@ 0x700
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 800a1d2:	e005      	b.n	800a1e0 <DMA_List_BuildNode+0x29c>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	6a1b      	ldr	r3, [r3, #32]
 800a1d8:	f443 62a0 	orr.w	r2, r3, #1280	@ 0x500
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	621a      	str	r2, [r3, #32]
}
 800a1e0:	bf00      	nop
 800a1e2:	3714      	adds	r7, #20
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ea:	4770      	bx	lr
 800a1ec:	07ff0000 	.word	0x07ff0000
 800a1f0:	1fff0000 	.word	0x1fff0000

0800a1f4 <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 800a1f4:	b480      	push	{r7}
 800a1f6:	b087      	sub	sp, #28
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	60f8      	str	r0, [r7, #12]
 800a1fc:	60b9      	str	r1, [r7, #8]
 800a1fe:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 800a200:	68fa      	ldr	r2, [r7, #12]
 800a202:	68bb      	ldr	r3, [r7, #8]
 800a204:	431a      	orrs	r2, r3
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	4313      	orrs	r3, r2
 800a20a:	0c1b      	lsrs	r3, r3, #16
 800a20c:	041b      	lsls	r3, r3, #16
 800a20e:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 800a210:	2300      	movs	r3, #0
 800a212:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d002      	beq.n	800a220 <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	617b      	str	r3, [r7, #20]
 800a21e:	e00a      	b.n	800a236 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d002      	beq.n	800a22c <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	617b      	str	r3, [r7, #20]
 800a22a:	e004      	b.n	800a236 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d001      	beq.n	800a236 <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 800a236:	697b      	ldr	r3, [r7, #20]
 800a238:	0c1b      	lsrs	r3, r3, #16
 800a23a:	041b      	lsls	r3, r3, #16
 800a23c:	693a      	ldr	r2, [r7, #16]
 800a23e:	429a      	cmp	r2, r3
 800a240:	d001      	beq.n	800a246 <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 800a242:	2301      	movs	r3, #1
 800a244:	e000      	b.n	800a248 <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 800a246:	2300      	movs	r3, #0
}
 800a248:	4618      	mov	r0, r3
 800a24a:	371c      	adds	r7, #28
 800a24c:	46bd      	mov	sp, r7
 800a24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a252:	4770      	bx	lr

0800a254 <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 800a254:	b480      	push	{r7}
 800a256:	b087      	sub	sp, #28
 800a258:	af00      	add	r7, sp, #0
 800a25a:	60f8      	str	r0, [r7, #12]
 800a25c:	60b9      	str	r1, [r7, #8]
 800a25e:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 800a260:	2300      	movs	r3, #0
 800a262:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d004      	beq.n	800a274 <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	6a1b      	ldr	r3, [r3, #32]
 800a26e:	b2db      	uxtb	r3, r3
 800a270:	617b      	str	r3, [r7, #20]
 800a272:	e00e      	b.n	800a292 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d004      	beq.n	800a284 <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 800a27a:	68bb      	ldr	r3, [r7, #8]
 800a27c:	6a1b      	ldr	r3, [r3, #32]
 800a27e:	b2db      	uxtb	r3, r3
 800a280:	617b      	str	r3, [r7, #20]
 800a282:	e006      	b.n	800a292 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d003      	beq.n	800a292 <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6a1b      	ldr	r3, [r3, #32]
 800a28e:	b2db      	uxtb	r3, r3
 800a290:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 800a292:	68bb      	ldr	r3, [r7, #8]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d007      	beq.n	800a2a8 <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 800a298:	68bb      	ldr	r3, [r7, #8]
 800a29a:	6a1b      	ldr	r3, [r3, #32]
 800a29c:	b2db      	uxtb	r3, r3
 800a29e:	697a      	ldr	r2, [r7, #20]
 800a2a0:	429a      	cmp	r2, r3
 800a2a2:	d001      	beq.n	800a2a8 <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 800a2a4:	2302      	movs	r3, #2
 800a2a6:	e00b      	b.n	800a2c0 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d007      	beq.n	800a2be <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6a1b      	ldr	r3, [r3, #32]
 800a2b2:	b2db      	uxtb	r3, r3
 800a2b4:	697a      	ldr	r2, [r7, #20]
 800a2b6:	429a      	cmp	r2, r3
 800a2b8:	d001      	beq.n	800a2be <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 800a2ba:	2303      	movs	r3, #3
 800a2bc:	e000      	b.n	800a2c0 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 800a2be:	2300      	movs	r3, #0
}
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	371c      	adds	r7, #28
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ca:	4770      	bx	lr

0800a2cc <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 800a2cc:	b480      	push	{r7}
 800a2ce:	b085      	sub	sp, #20
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	60f8      	str	r0, [r7, #12]
 800a2d4:	60b9      	str	r1, [r7, #8]
 800a2d6:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	6a1b      	ldr	r3, [r3, #32]
 800a2dc:	f003 0302 	and.w	r3, r3, #2
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d00c      	beq.n	800a2fe <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 800a2e4:	68bb      	ldr	r3, [r7, #8]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d002      	beq.n	800a2f0 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 800a2ea:	68bb      	ldr	r3, [r7, #8]
 800a2ec:	4a0d      	ldr	r2, [pc, #52]	@ (800a324 <DMA_List_GetCLLRNodeInfo+0x58>)
 800a2ee:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d00f      	beq.n	800a316 <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	2207      	movs	r2, #7
 800a2fa:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 800a2fc:	e00b      	b.n	800a316 <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d002      	beq.n	800a30a <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	4a08      	ldr	r2, [pc, #32]	@ (800a328 <DMA_List_GetCLLRNodeInfo+0x5c>)
 800a308:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d002      	beq.n	800a316 <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2205      	movs	r2, #5
 800a314:	601a      	str	r2, [r3, #0]
}
 800a316:	bf00      	nop
 800a318:	3714      	adds	r7, #20
 800a31a:	46bd      	mov	sp, r7
 800a31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a320:	4770      	bx	lr
 800a322:	bf00      	nop
 800a324:	fe010000 	.word	0xfe010000
 800a328:	f8010000 	.word	0xf8010000

0800a32c <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 800a32c:	b480      	push	{r7}
 800a32e:	b089      	sub	sp, #36	@ 0x24
 800a330:	af00      	add	r7, sp, #0
 800a332:	60f8      	str	r0, [r7, #12]
 800a334:	60b9      	str	r1, [r7, #8]
 800a336:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 800a338:	2300      	movs	r3, #0
 800a33a:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 800a33c:	2300      	movs	r3, #0
 800a33e:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 800a340:	2300      	movs	r3, #0
 800a342:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 800a34a:	68bb      	ldr	r3, [r7, #8]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d142      	bne.n	800a3d6 <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 800a350:	e01d      	b.n	800a38e <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 800a352:	69fb      	ldr	r3, [r7, #28]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d107      	bne.n	800a368 <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	461a      	mov	r2, r3
 800a35e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800a362:	4013      	ands	r3, r2
 800a364:	61bb      	str	r3, [r7, #24]
 800a366:	e00f      	b.n	800a388 <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 800a368:	69bb      	ldr	r3, [r7, #24]
 800a36a:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	0c1b      	lsrs	r3, r3, #16
 800a372:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 800a374:	69ba      	ldr	r2, [r7, #24]
 800a376:	4413      	add	r3, r2
 800a378:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 800a37a:	693b      	ldr	r3, [r7, #16]
 800a37c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 800a380:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800a384:	4013      	ands	r3, r2
 800a386:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 800a388:	69fb      	ldr	r3, [r7, #28]
 800a38a:	3301      	adds	r3, #1
 800a38c:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	689b      	ldr	r3, [r3, #8]
 800a392:	69fa      	ldr	r2, [r7, #28]
 800a394:	429a      	cmp	r2, r3
 800a396:	d3dc      	bcc.n	800a352 <DMA_List_FindNode+0x26>
 800a398:	e029      	b.n	800a3ee <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 800a39a:	69fb      	ldr	r3, [r7, #28]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d107      	bne.n	800a3b0 <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	461a      	mov	r2, r3
 800a3a6:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800a3aa:	4013      	ands	r3, r2
 800a3ac:	61bb      	str	r3, [r7, #24]
 800a3ae:	e00f      	b.n	800a3d0 <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 800a3b0:	69bb      	ldr	r3, [r7, #24]
 800a3b2:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	0c1b      	lsrs	r3, r3, #16
 800a3ba:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 800a3bc:	69ba      	ldr	r2, [r7, #24]
 800a3be:	4413      	add	r3, r2
 800a3c0:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 800a3c2:	693b      	ldr	r3, [r7, #16]
 800a3c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 800a3c8:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800a3cc:	4013      	ands	r3, r2
 800a3ce:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 800a3d0:	69fb      	ldr	r3, [r7, #28]
 800a3d2:	3301      	adds	r3, #1
 800a3d4:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	689b      	ldr	r3, [r3, #8]
 800a3da:	69fa      	ldr	r2, [r7, #28]
 800a3dc:	429a      	cmp	r2, r3
 800a3de:	d206      	bcs.n	800a3ee <DMA_List_FindNode+0xc2>
 800a3e0:	68ba      	ldr	r2, [r7, #8]
 800a3e2:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800a3e6:	4013      	ands	r3, r2
 800a3e8:	69ba      	ldr	r2, [r7, #24]
 800a3ea:	429a      	cmp	r2, r3
 800a3ec:	d1d5      	bne.n	800a39a <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 800a3ee:	68bb      	ldr	r3, [r7, #8]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d008      	beq.n	800a406 <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 800a3f4:	68ba      	ldr	r2, [r7, #8]
 800a3f6:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800a3fa:	4013      	ands	r3, r2
 800a3fc:	69ba      	ldr	r2, [r7, #24]
 800a3fe:	429a      	cmp	r2, r3
 800a400:	d001      	beq.n	800a406 <DMA_List_FindNode+0xda>
    {
      return 1U;
 800a402:	2301      	movs	r3, #1
 800a404:	e02b      	b.n	800a45e <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	69fa      	ldr	r2, [r7, #28]
 800a40a:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	0c1b      	lsrs	r3, r3, #16
 800a412:	041b      	lsls	r3, r3, #16
 800a414:	697a      	ldr	r2, [r7, #20]
 800a416:	431a      	orrs	r2, r3
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	0c1b      	lsrs	r3, r3, #16
 800a422:	041b      	lsls	r3, r3, #16
 800a424:	69ba      	ldr	r2, [r7, #24]
 800a426:	431a      	orrs	r2, r3
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	68db      	ldr	r3, [r3, #12]
 800a430:	461a      	mov	r2, r3
 800a432:	693b      	ldr	r3, [r7, #16]
 800a434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d00f      	beq.n	800a45c <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	68db      	ldr	r3, [r3, #12]
 800a440:	461a      	mov	r2, r3
 800a442:	693b      	ldr	r3, [r7, #16]
 800a444:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a448:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 800a44c:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	0c1b      	lsrs	r3, r3, #16
 800a454:	041b      	lsls	r3, r3, #16
 800a456:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 800a45c:	2300      	movs	r3, #0
}
 800a45e:	4618      	mov	r0, r3
 800a460:	3724      	adds	r7, #36	@ 0x24
 800a462:	46bd      	mov	sp, r7
 800a464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a468:	4770      	bx	lr
	...

0800a46c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b084      	sub	sp, #16
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d101      	bne.n	800a47e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800a47a:	2301      	movs	r3, #1
 800a47c:	e147      	b.n	800a70e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800a484:	b2db      	uxtb	r3, r3
 800a486:	2b00      	cmp	r3, #0
 800a488:	d106      	bne.n	800a498 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	2200      	movs	r2, #0
 800a48e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800a492:	6878      	ldr	r0, [r7, #4]
 800a494:	f7f9 fcde 	bl	8003e54 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	699a      	ldr	r2, [r3, #24]
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	f022 0210 	bic.w	r2, r2, #16
 800a4a6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a4a8:	f7fb fa82 	bl	80059b0 <HAL_GetTick>
 800a4ac:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800a4ae:	e012      	b.n	800a4d6 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800a4b0:	f7fb fa7e 	bl	80059b0 <HAL_GetTick>
 800a4b4:	4602      	mov	r2, r0
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	1ad3      	subs	r3, r2, r3
 800a4ba:	2b0a      	cmp	r3, #10
 800a4bc:	d90b      	bls.n	800a4d6 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a4c2:	f043 0201 	orr.w	r2, r3, #1
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2203      	movs	r2, #3
 800a4ce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800a4d2:	2301      	movs	r3, #1
 800a4d4:	e11b      	b.n	800a70e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	699b      	ldr	r3, [r3, #24]
 800a4dc:	f003 0308 	and.w	r3, r3, #8
 800a4e0:	2b08      	cmp	r3, #8
 800a4e2:	d0e5      	beq.n	800a4b0 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	699a      	ldr	r2, [r3, #24]
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	f042 0201 	orr.w	r2, r2, #1
 800a4f2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a4f4:	f7fb fa5c 	bl	80059b0 <HAL_GetTick>
 800a4f8:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800a4fa:	e012      	b.n	800a522 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800a4fc:	f7fb fa58 	bl	80059b0 <HAL_GetTick>
 800a500:	4602      	mov	r2, r0
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	1ad3      	subs	r3, r2, r3
 800a506:	2b0a      	cmp	r3, #10
 800a508:	d90b      	bls.n	800a522 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a50e:	f043 0201 	orr.w	r2, r3, #1
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2203      	movs	r2, #3
 800a51a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800a51e:	2301      	movs	r3, #1
 800a520:	e0f5      	b.n	800a70e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	699b      	ldr	r3, [r3, #24]
 800a528:	f003 0301 	and.w	r3, r3, #1
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d0e5      	beq.n	800a4fc <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	699a      	ldr	r2, [r3, #24]
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	f042 0202 	orr.w	r2, r2, #2
 800a53e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	4a74      	ldr	r2, [pc, #464]	@ (800a718 <HAL_FDCAN_Init+0x2ac>)
 800a546:	4293      	cmp	r3, r2
 800a548:	d103      	bne.n	800a552 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800a54a:	4a74      	ldr	r2, [pc, #464]	@ (800a71c <HAL_FDCAN_Init+0x2b0>)
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	685b      	ldr	r3, [r3, #4]
 800a550:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	7c1b      	ldrb	r3, [r3, #16]
 800a556:	2b01      	cmp	r3, #1
 800a558:	d108      	bne.n	800a56c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	699a      	ldr	r2, [r3, #24]
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a568:	619a      	str	r2, [r3, #24]
 800a56a:	e007      	b.n	800a57c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	699a      	ldr	r2, [r3, #24]
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a57a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	7c5b      	ldrb	r3, [r3, #17]
 800a580:	2b01      	cmp	r3, #1
 800a582:	d108      	bne.n	800a596 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	699a      	ldr	r2, [r3, #24]
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a592:	619a      	str	r2, [r3, #24]
 800a594:	e007      	b.n	800a5a6 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	699a      	ldr	r2, [r3, #24]
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a5a4:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	7c9b      	ldrb	r3, [r3, #18]
 800a5aa:	2b01      	cmp	r3, #1
 800a5ac:	d108      	bne.n	800a5c0 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	699a      	ldr	r2, [r3, #24]
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a5bc:	619a      	str	r2, [r3, #24]
 800a5be:	e007      	b.n	800a5d0 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	699a      	ldr	r2, [r3, #24]
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a5ce:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	699b      	ldr	r3, [r3, #24]
 800a5d6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	689a      	ldr	r2, [r3, #8]
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	430a      	orrs	r2, r1
 800a5e4:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	699a      	ldr	r2, [r3, #24]
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 800a5f4:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	691a      	ldr	r2, [r3, #16]
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	f022 0210 	bic.w	r2, r2, #16
 800a604:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	68db      	ldr	r3, [r3, #12]
 800a60a:	2b01      	cmp	r3, #1
 800a60c:	d108      	bne.n	800a620 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	699a      	ldr	r2, [r3, #24]
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	f042 0204 	orr.w	r2, r2, #4
 800a61c:	619a      	str	r2, [r3, #24]
 800a61e:	e02c      	b.n	800a67a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	68db      	ldr	r3, [r3, #12]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d028      	beq.n	800a67a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	68db      	ldr	r3, [r3, #12]
 800a62c:	2b02      	cmp	r3, #2
 800a62e:	d01c      	beq.n	800a66a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	699a      	ldr	r2, [r3, #24]
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800a63e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	691a      	ldr	r2, [r3, #16]
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	f042 0210 	orr.w	r2, r2, #16
 800a64e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	68db      	ldr	r3, [r3, #12]
 800a654:	2b03      	cmp	r3, #3
 800a656:	d110      	bne.n	800a67a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	699a      	ldr	r2, [r3, #24]
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	f042 0220 	orr.w	r2, r2, #32
 800a666:	619a      	str	r2, [r3, #24]
 800a668:	e007      	b.n	800a67a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	699a      	ldr	r2, [r3, #24]
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	f042 0220 	orr.w	r2, r2, #32
 800a678:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	699b      	ldr	r3, [r3, #24]
 800a67e:	3b01      	subs	r3, #1
 800a680:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	69db      	ldr	r3, [r3, #28]
 800a686:	3b01      	subs	r3, #1
 800a688:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800a68a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	6a1b      	ldr	r3, [r3, #32]
 800a690:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800a692:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	695b      	ldr	r3, [r3, #20]
 800a69a:	3b01      	subs	r3, #1
 800a69c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800a6a2:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800a6a4:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	689b      	ldr	r3, [r3, #8]
 800a6aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a6ae:	d115      	bne.n	800a6dc <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6b4:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6ba:	3b01      	subs	r3, #1
 800a6bc:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800a6be:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6c4:	3b01      	subs	r3, #1
 800a6c6:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800a6c8:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6d0:	3b01      	subs	r3, #1
 800a6d2:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800a6d8:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800a6da:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	430a      	orrs	r2, r1
 800a6ee:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800a6f2:	6878      	ldr	r0, [r7, #4]
 800a6f4:	f000 fc12 	bl	800af1c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	2200      	movs	r2, #0
 800a702:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2201      	movs	r2, #1
 800a708:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 800a70c:	2300      	movs	r3, #0
}
 800a70e:	4618      	mov	r0, r3
 800a710:	3710      	adds	r7, #16
 800a712:	46bd      	mov	sp, r7
 800a714:	bd80      	pop	{r7, pc}
 800a716:	bf00      	nop
 800a718:	4000a400 	.word	0x4000a400
 800a71c:	4000a500 	.word	0x4000a500

0800a720 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 800a720:	b480      	push	{r7}
 800a722:	b087      	sub	sp, #28
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
 800a728:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800a730:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800a732:	7dfb      	ldrb	r3, [r7, #23]
 800a734:	2b01      	cmp	r3, #1
 800a736:	d002      	beq.n	800a73e <HAL_FDCAN_ConfigFilter+0x1e>
 800a738:	7dfb      	ldrb	r3, [r7, #23]
 800a73a:	2b02      	cmp	r3, #2
 800a73c:	d13d      	bne.n	800a7ba <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d119      	bne.n	800a77a <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	689b      	ldr	r3, [r3, #8]
 800a74a:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 800a74c:	683b      	ldr	r3, [r7, #0]
 800a74e:	68db      	ldr	r3, [r3, #12]
 800a750:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800a752:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	691b      	ldr	r3, [r3, #16]
 800a758:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 800a75a:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800a760:	4313      	orrs	r3, r2
 800a762:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	685b      	ldr	r3, [r3, #4]
 800a76c:	009b      	lsls	r3, r3, #2
 800a76e:	4413      	add	r3, r2
 800a770:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800a772:	68bb      	ldr	r3, [r7, #8]
 800a774:	693a      	ldr	r2, [r7, #16]
 800a776:	601a      	str	r2, [r3, #0]
 800a778:	e01d      	b.n	800a7b6 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	68db      	ldr	r3, [r3, #12]
 800a77e:	075a      	lsls	r2, r3, #29
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	691b      	ldr	r3, [r3, #16]
 800a784:	4313      	orrs	r3, r2
 800a786:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	689b      	ldr	r3, [r3, #8]
 800a78c:	079a      	lsls	r2, r3, #30
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	695b      	ldr	r3, [r3, #20]
 800a792:	4313      	orrs	r3, r2
 800a794:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	685b      	ldr	r3, [r3, #4]
 800a79e:	00db      	lsls	r3, r3, #3
 800a7a0:	4413      	add	r3, r2
 800a7a2:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800a7a4:	68bb      	ldr	r3, [r7, #8]
 800a7a6:	693a      	ldr	r2, [r7, #16]
 800a7a8:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800a7aa:	68bb      	ldr	r3, [r7, #8]
 800a7ac:	3304      	adds	r3, #4
 800a7ae:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 800a7b0:	68bb      	ldr	r3, [r7, #8]
 800a7b2:	68fa      	ldr	r2, [r7, #12]
 800a7b4:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	e006      	b.n	800a7c8 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a7be:	f043 0202 	orr.w	r2, r3, #2
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800a7c6:	2301      	movs	r3, #1
  }
}
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	371c      	adds	r7, #28
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d2:	4770      	bx	lr

0800a7d4 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800a7d4:	b480      	push	{r7}
 800a7d6:	b083      	sub	sp, #12
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800a7e2:	b2db      	uxtb	r3, r3
 800a7e4:	2b01      	cmp	r3, #1
 800a7e6:	d110      	bne.n	800a80a <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2202      	movs	r2, #2
 800a7ec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	699a      	ldr	r2, [r3, #24]
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	f022 0201 	bic.w	r2, r2, #1
 800a7fe:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2200      	movs	r2, #0
 800a804:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 800a806:	2300      	movs	r3, #0
 800a808:	e006      	b.n	800a818 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a80e:	f043 0204 	orr.w	r2, r3, #4
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800a816:	2301      	movs	r3, #1
  }
}
 800a818:	4618      	mov	r0, r3
 800a81a:	370c      	adds	r7, #12
 800a81c:	46bd      	mov	sp, r7
 800a81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a822:	4770      	bx	lr

0800a824 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800a824:	b480      	push	{r7}
 800a826:	b08b      	sub	sp, #44	@ 0x2c
 800a828:	af00      	add	r7, sp, #0
 800a82a:	60f8      	str	r0, [r7, #12]
 800a82c:	60b9      	str	r1, [r7, #8]
 800a82e:	607a      	str	r2, [r7, #4]
 800a830:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800a832:	2300      	movs	r3, #0
 800a834:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800a83c:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 800a83e:	7efb      	ldrb	r3, [r7, #27]
 800a840:	2b02      	cmp	r3, #2
 800a842:	f040 80e8 	bne.w	800aa16 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800a846:	68bb      	ldr	r3, [r7, #8]
 800a848:	2b40      	cmp	r3, #64	@ 0x40
 800a84a:	d137      	bne.n	800a8bc <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a854:	f003 030f 	and.w	r3, r3, #15
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d107      	bne.n	800a86c <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a860:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 800a868:	2301      	movs	r3, #1
 800a86a:	e0db      	b.n	800aa24 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a874:	0e1b      	lsrs	r3, r3, #24
 800a876:	f003 0301 	and.w	r3, r3, #1
 800a87a:	2b01      	cmp	r3, #1
 800a87c:	d10a      	bne.n	800a894 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a886:	0a5b      	lsrs	r3, r3, #9
 800a888:	f003 0301 	and.w	r3, r3, #1
 800a88c:	2b01      	cmp	r3, #1
 800a88e:	d101      	bne.n	800a894 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800a890:	2301      	movs	r3, #1
 800a892:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a89c:	0a1b      	lsrs	r3, r3, #8
 800a89e:	f003 0303 	and.w	r3, r3, #3
 800a8a2:	69fa      	ldr	r2, [r7, #28]
 800a8a4:	4413      	add	r3, r2
 800a8a6:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 800a8ac:	69fa      	ldr	r2, [r7, #28]
 800a8ae:	4613      	mov	r3, r2
 800a8b0:	00db      	lsls	r3, r3, #3
 800a8b2:	4413      	add	r3, r2
 800a8b4:	00db      	lsls	r3, r3, #3
 800a8b6:	440b      	add	r3, r1
 800a8b8:	627b      	str	r3, [r7, #36]	@ 0x24
 800a8ba:	e036      	b.n	800a92a <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a8c4:	f003 030f 	and.w	r3, r3, #15
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d107      	bne.n	800a8dc <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a8d0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 800a8d8:	2301      	movs	r3, #1
 800a8da:	e0a3      	b.n	800aa24 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a8e4:	0e1b      	lsrs	r3, r3, #24
 800a8e6:	f003 0301 	and.w	r3, r3, #1
 800a8ea:	2b01      	cmp	r3, #1
 800a8ec:	d10a      	bne.n	800a904 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a8f6:	0a1b      	lsrs	r3, r3, #8
 800a8f8:	f003 0301 	and.w	r3, r3, #1
 800a8fc:	2b01      	cmp	r3, #1
 800a8fe:	d101      	bne.n	800a904 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800a900:	2301      	movs	r3, #1
 800a902:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a90c:	0a1b      	lsrs	r3, r3, #8
 800a90e:	f003 0303 	and.w	r3, r3, #3
 800a912:	69fa      	ldr	r2, [r7, #28]
 800a914:	4413      	add	r3, r2
 800a916:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800a91c:	69fa      	ldr	r2, [r7, #28]
 800a91e:	4613      	mov	r3, r2
 800a920:	00db      	lsls	r3, r3, #3
 800a922:	4413      	add	r3, r2
 800a924:	00db      	lsls	r3, r3, #3
 800a926:	440b      	add	r3, r1
 800a928:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800a92a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	685b      	ldr	r3, [r3, #4]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d107      	bne.n	800a94e <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800a93e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	0c9b      	lsrs	r3, r3, #18
 800a944:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	601a      	str	r2, [r3, #0]
 800a94c:	e005      	b.n	800a95a <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800a94e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800a95a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800a966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800a972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a974:	3304      	adds	r3, #4
 800a976:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800a978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	b29a      	uxth	r2, r3
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 800a982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	0c1b      	lsrs	r3, r3, #16
 800a988:	f003 020f 	and.w	r2, r3, #15
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800a990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800a99c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800a9a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	0e1b      	lsrs	r3, r3, #24
 800a9ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800a9b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	0fda      	lsrs	r2, r3, #31
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800a9c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9c2:	3304      	adds	r3, #4
 800a9c4:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800a9c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9c8:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	623b      	str	r3, [r7, #32]
 800a9ce:	e00a      	b.n	800a9e6 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800a9d0:	697a      	ldr	r2, [r7, #20]
 800a9d2:	6a3b      	ldr	r3, [r7, #32]
 800a9d4:	441a      	add	r2, r3
 800a9d6:	6839      	ldr	r1, [r7, #0]
 800a9d8:	6a3b      	ldr	r3, [r7, #32]
 800a9da:	440b      	add	r3, r1
 800a9dc:	7812      	ldrb	r2, [r2, #0]
 800a9de:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800a9e0:	6a3b      	ldr	r3, [r7, #32]
 800a9e2:	3301      	adds	r3, #1
 800a9e4:	623b      	str	r3, [r7, #32]
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	68db      	ldr	r3, [r3, #12]
 800a9ea:	4a11      	ldr	r2, [pc, #68]	@ (800aa30 <HAL_FDCAN_GetRxMessage+0x20c>)
 800a9ec:	5cd3      	ldrb	r3, [r2, r3]
 800a9ee:	461a      	mov	r2, r3
 800a9f0:	6a3b      	ldr	r3, [r7, #32]
 800a9f2:	4293      	cmp	r3, r2
 800a9f4:	d3ec      	bcc.n	800a9d0 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800a9f6:	68bb      	ldr	r3, [r7, #8]
 800a9f8:	2b40      	cmp	r3, #64	@ 0x40
 800a9fa:	d105      	bne.n	800aa08 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	69fa      	ldr	r2, [r7, #28]
 800aa02:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 800aa06:	e004      	b.n	800aa12 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	69fa      	ldr	r2, [r7, #28]
 800aa0e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 800aa12:	2300      	movs	r3, #0
 800aa14:	e006      	b.n	800aa24 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aa1a:	f043 0208 	orr.w	r2, r3, #8
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800aa22:	2301      	movs	r3, #1
  }
}
 800aa24:	4618      	mov	r0, r3
 800aa26:	372c      	adds	r7, #44	@ 0x2c
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2e:	4770      	bx	lr
 800aa30:	0802436c 	.word	0x0802436c

0800aa34 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 800aa34:	b480      	push	{r7}
 800aa36:	b087      	sub	sp, #28
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	60f8      	str	r0, [r7, #12]
 800aa3c:	60b9      	str	r1, [r7, #8]
 800aa3e:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800aa46:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800aa48:	7dfb      	ldrb	r3, [r7, #23]
 800aa4a:	2b01      	cmp	r3, #1
 800aa4c:	d003      	beq.n	800aa56 <HAL_FDCAN_ActivateNotification+0x22>
 800aa4e:	7dfb      	ldrb	r3, [r7, #23]
 800aa50:	2b02      	cmp	r3, #2
 800aa52:	f040 80c8 	bne.w	800abe6 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa5c:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 800aa5e:	68bb      	ldr	r3, [r7, #8]
 800aa60:	f003 0307 	and.w	r3, r3, #7
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d004      	beq.n	800aa72 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 800aa68:	693b      	ldr	r3, [r7, #16]
 800aa6a:	f003 0301 	and.w	r3, r3, #1
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d03b      	beq.n	800aaea <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800aa72:	68bb      	ldr	r3, [r7, #8]
 800aa74:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d004      	beq.n	800aa86 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 800aa7c:	693b      	ldr	r3, [r7, #16]
 800aa7e:	f003 0302 	and.w	r3, r3, #2
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d031      	beq.n	800aaea <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800aa86:	68bb      	ldr	r3, [r7, #8]
 800aa88:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d004      	beq.n	800aa9a <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 800aa90:	693b      	ldr	r3, [r7, #16]
 800aa92:	f003 0304 	and.w	r3, r3, #4
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d027      	beq.n	800aaea <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800aa9a:	68bb      	ldr	r3, [r7, #8]
 800aa9c:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d004      	beq.n	800aaae <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800aaa4:	693b      	ldr	r3, [r7, #16]
 800aaa6:	f003 0308 	and.w	r3, r3, #8
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d01d      	beq.n	800aaea <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800aaae:	68bb      	ldr	r3, [r7, #8]
 800aab0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d004      	beq.n	800aac2 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800aab8:	693b      	ldr	r3, [r7, #16]
 800aaba:	f003 0310 	and.w	r3, r3, #16
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d013      	beq.n	800aaea <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800aac2:	68bb      	ldr	r3, [r7, #8]
 800aac4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d004      	beq.n	800aad6 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800aacc:	693b      	ldr	r3, [r7, #16]
 800aace:	f003 0320 	and.w	r3, r3, #32
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d009      	beq.n	800aaea <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800aad6:	68bb      	ldr	r3, [r7, #8]
 800aad8:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d00c      	beq.n	800aafa <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 800aae0:	693b      	ldr	r3, [r7, #16]
 800aae2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d107      	bne.n	800aafa <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	f042 0201 	orr.w	r2, r2, #1
 800aaf8:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800aafa:	68bb      	ldr	r3, [r7, #8]
 800aafc:	f003 0307 	and.w	r3, r3, #7
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d004      	beq.n	800ab0e <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 800ab04:	693b      	ldr	r3, [r7, #16]
 800ab06:	f003 0301 	and.w	r3, r3, #1
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d13b      	bne.n	800ab86 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800ab0e:	68bb      	ldr	r3, [r7, #8]
 800ab10:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d004      	beq.n	800ab22 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800ab18:	693b      	ldr	r3, [r7, #16]
 800ab1a:	f003 0302 	and.w	r3, r3, #2
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d131      	bne.n	800ab86 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800ab22:	68bb      	ldr	r3, [r7, #8]
 800ab24:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d004      	beq.n	800ab36 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 800ab2c:	693b      	ldr	r3, [r7, #16]
 800ab2e:	f003 0304 	and.w	r3, r3, #4
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d127      	bne.n	800ab86 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800ab36:	68bb      	ldr	r3, [r7, #8]
 800ab38:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d004      	beq.n	800ab4a <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 800ab40:	693b      	ldr	r3, [r7, #16]
 800ab42:	f003 0308 	and.w	r3, r3, #8
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d11d      	bne.n	800ab86 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800ab4a:	68bb      	ldr	r3, [r7, #8]
 800ab4c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d004      	beq.n	800ab5e <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800ab54:	693b      	ldr	r3, [r7, #16]
 800ab56:	f003 0310 	and.w	r3, r3, #16
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d113      	bne.n	800ab86 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800ab5e:	68bb      	ldr	r3, [r7, #8]
 800ab60:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d004      	beq.n	800ab72 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800ab68:	693b      	ldr	r3, [r7, #16]
 800ab6a:	f003 0320 	and.w	r3, r3, #32
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d109      	bne.n	800ab86 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800ab72:	68bb      	ldr	r3, [r7, #8]
 800ab74:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d00c      	beq.n	800ab96 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 800ab7c:	693b      	ldr	r3, [r7, #16]
 800ab7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d007      	beq.n	800ab96 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	f042 0202 	orr.w	r2, r2, #2
 800ab94:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800ab96:	68bb      	ldr	r3, [r7, #8]
 800ab98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d009      	beq.n	800abb4 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	687a      	ldr	r2, [r7, #4]
 800abae:	430a      	orrs	r2, r1
 800abb0:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800abb4:	68bb      	ldr	r3, [r7, #8]
 800abb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d009      	beq.n	800abd2 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	687a      	ldr	r2, [r7, #4]
 800abcc:	430a      	orrs	r2, r1
 800abce:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	68ba      	ldr	r2, [r7, #8]
 800abde:	430a      	orrs	r2, r1
 800abe0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 800abe2:	2300      	movs	r3, #0
 800abe4:	e006      	b.n	800abf4 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800abea:	f043 0202 	orr.w	r2, r3, #2
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800abf2:	2301      	movs	r3, #1
  }
}
 800abf4:	4618      	mov	r0, r3
 800abf6:	371c      	adds	r7, #28
 800abf8:	46bd      	mov	sp, r7
 800abfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfe:	4770      	bx	lr

0800ac00 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b08c      	sub	sp, #48	@ 0x30
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac0e:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800ac12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ac1c:	4013      	ands	r3, r2
 800ac1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac26:	f003 0307 	and.w	r3, r3, #7
 800ac2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac32:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ac34:	4013      	ands	r3, r2
 800ac36:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac3e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ac42:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ac4c:	4013      	ands	r3, r2
 800ac4e:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac56:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 800ac5a:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac62:	6a3a      	ldr	r2, [r7, #32]
 800ac64:	4013      	ands	r3, r2
 800ac66:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac6e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800ac72:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac7a:	69fa      	ldr	r2, [r7, #28]
 800ac7c:	4013      	ands	r3, r2
 800ac7e:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac86:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac8e:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 800ac90:	697b      	ldr	r3, [r7, #20]
 800ac92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d00b      	beq.n	800acb2 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 800ac9a:	69bb      	ldr	r3, [r7, #24]
 800ac9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d006      	beq.n	800acb2 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	2240      	movs	r2, #64	@ 0x40
 800acaa:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 800acac:	6878      	ldr	r0, [r7, #4]
 800acae:	f000 f916 	bl	800aede <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 800acb2:	697b      	ldr	r3, [r7, #20]
 800acb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d019      	beq.n	800acf0 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 800acbc:	69bb      	ldr	r3, [r7, #24]
 800acbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d014      	beq.n	800acf0 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800acce:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800acd8:	693a      	ldr	r2, [r7, #16]
 800acda:	4013      	ands	r3, r2
 800acdc:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ace6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800ace8:	6939      	ldr	r1, [r7, #16]
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	f000 f8d8 	bl	800aea0 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 800acf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d007      	beq.n	800ad06 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800acfc:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800acfe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ad00:	6878      	ldr	r0, [r7, #4]
 800ad02:	f000 f8a2 	bl	800ae4a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800ad06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d007      	beq.n	800ad1c <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ad12:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800ad14:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	f7f6 f9c8 	bl	80010ac <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 800ad1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d007      	beq.n	800ad32 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ad28:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800ad2a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ad2c:	6878      	ldr	r0, [r7, #4]
 800ad2e:	f000 f897 	bl	800ae60 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800ad32:	697b      	ldr	r3, [r7, #20]
 800ad34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d00c      	beq.n	800ad56 <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 800ad3c:	69bb      	ldr	r3, [r7, #24]
 800ad3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d007      	beq.n	800ad56 <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ad4e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800ad50:	6878      	ldr	r0, [r7, #4]
 800ad52:	f000 f890 	bl	800ae76 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 800ad56:	697b      	ldr	r3, [r7, #20]
 800ad58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d018      	beq.n	800ad92 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 800ad60:	69bb      	ldr	r3, [r7, #24]
 800ad62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d013      	beq.n	800ad92 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800ad72:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800ad7c:	68fa      	ldr	r2, [r7, #12]
 800ad7e:	4013      	ands	r3, r2
 800ad80:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	2280      	movs	r2, #128	@ 0x80
 800ad88:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800ad8a:	68f9      	ldr	r1, [r7, #12]
 800ad8c:	6878      	ldr	r0, [r7, #4]
 800ad8e:	f000 f87c 	bl	800ae8a <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 800ad92:	697b      	ldr	r3, [r7, #20]
 800ad94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d00c      	beq.n	800adb6 <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 800ad9c:	69bb      	ldr	r3, [r7, #24]
 800ad9e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d007      	beq.n	800adb6 <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800adae:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800adb0:	6878      	ldr	r0, [r7, #4]
 800adb2:	f000 f880 	bl	800aeb6 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800adb6:	697b      	ldr	r3, [r7, #20]
 800adb8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d00c      	beq.n	800adda <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 800adc0:	69bb      	ldr	r3, [r7, #24]
 800adc2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d007      	beq.n	800adda <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800add2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800add4:	6878      	ldr	r0, [r7, #4]
 800add6:	f000 f878 	bl	800aeca <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800adda:	697b      	ldr	r3, [r7, #20]
 800addc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d00f      	beq.n	800ae04 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 800ade4:	69bb      	ldr	r3, [r7, #24]
 800ade6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800adea:	2b00      	cmp	r3, #0
 800adec:	d00a      	beq.n	800ae04 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800adf6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800adfc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800ae04:	69fb      	ldr	r3, [r7, #28]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d007      	beq.n	800ae1a <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	69fa      	ldr	r2, [r7, #28]
 800ae10:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800ae12:	69f9      	ldr	r1, [r7, #28]
 800ae14:	6878      	ldr	r0, [r7, #4]
 800ae16:	f000 f876 	bl	800af06 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800ae1a:	6a3b      	ldr	r3, [r7, #32]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d009      	beq.n	800ae34 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	6a3a      	ldr	r2, [r7, #32]
 800ae26:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800ae2c:	6a3b      	ldr	r3, [r7, #32]
 800ae2e:	431a      	orrs	r2, r3
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d002      	beq.n	800ae42 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	f000 f858 	bl	800aef2 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800ae42:	bf00      	nop
 800ae44:	3730      	adds	r7, #48	@ 0x30
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bd80      	pop	{r7, pc}

0800ae4a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800ae4a:	b480      	push	{r7}
 800ae4c:	b083      	sub	sp, #12
 800ae4e:	af00      	add	r7, sp, #0
 800ae50:	6078      	str	r0, [r7, #4]
 800ae52:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800ae54:	bf00      	nop
 800ae56:	370c      	adds	r7, #12
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5e:	4770      	bx	lr

0800ae60 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 800ae60:	b480      	push	{r7}
 800ae62:	b083      	sub	sp, #12
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
 800ae68:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800ae6a:	bf00      	nop
 800ae6c:	370c      	adds	r7, #12
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae74:	4770      	bx	lr

0800ae76 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800ae76:	b480      	push	{r7}
 800ae78:	b083      	sub	sp, #12
 800ae7a:	af00      	add	r7, sp, #0
 800ae7c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800ae7e:	bf00      	nop
 800ae80:	370c      	adds	r7, #12
 800ae82:	46bd      	mov	sp, r7
 800ae84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae88:	4770      	bx	lr

0800ae8a <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800ae8a:	b480      	push	{r7}
 800ae8c:	b083      	sub	sp, #12
 800ae8e:	af00      	add	r7, sp, #0
 800ae90:	6078      	str	r0, [r7, #4]
 800ae92:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800ae94:	bf00      	nop
 800ae96:	370c      	adds	r7, #12
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9e:	4770      	bx	lr

0800aea0 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800aea0:	b480      	push	{r7}
 800aea2:	b083      	sub	sp, #12
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
 800aea8:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800aeaa:	bf00      	nop
 800aeac:	370c      	adds	r7, #12
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb4:	4770      	bx	lr

0800aeb6 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800aeb6:	b480      	push	{r7}
 800aeb8:	b083      	sub	sp, #12
 800aeba:	af00      	add	r7, sp, #0
 800aebc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800aebe:	bf00      	nop
 800aec0:	370c      	adds	r7, #12
 800aec2:	46bd      	mov	sp, r7
 800aec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec8:	4770      	bx	lr

0800aeca <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800aeca:	b480      	push	{r7}
 800aecc:	b083      	sub	sp, #12
 800aece:	af00      	add	r7, sp, #0
 800aed0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800aed2:	bf00      	nop
 800aed4:	370c      	adds	r7, #12
 800aed6:	46bd      	mov	sp, r7
 800aed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aedc:	4770      	bx	lr

0800aede <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800aede:	b480      	push	{r7}
 800aee0:	b083      	sub	sp, #12
 800aee2:	af00      	add	r7, sp, #0
 800aee4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800aee6:	bf00      	nop
 800aee8:	370c      	adds	r7, #12
 800aeea:	46bd      	mov	sp, r7
 800aeec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef0:	4770      	bx	lr

0800aef2 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800aef2:	b480      	push	{r7}
 800aef4:	b083      	sub	sp, #12
 800aef6:	af00      	add	r7, sp, #0
 800aef8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800aefa:	bf00      	nop
 800aefc:	370c      	adds	r7, #12
 800aefe:	46bd      	mov	sp, r7
 800af00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af04:	4770      	bx	lr

0800af06 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800af06:	b480      	push	{r7}
 800af08:	b083      	sub	sp, #12
 800af0a:	af00      	add	r7, sp, #0
 800af0c:	6078      	str	r0, [r7, #4]
 800af0e:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800af10:	bf00      	nop
 800af12:	370c      	adds	r7, #12
 800af14:	46bd      	mov	sp, r7
 800af16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1a:	4770      	bx	lr

0800af1c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800af1c:	b480      	push	{r7}
 800af1e:	b085      	sub	sp, #20
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 800af24:	4b2c      	ldr	r3, [pc, #176]	@ (800afd8 <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 800af26:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	4a2b      	ldr	r2, [pc, #172]	@ (800afdc <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 800af2e:	4293      	cmp	r3, r2
 800af30:	d103      	bne.n	800af3a <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800af32:	68bb      	ldr	r3, [r7, #8]
 800af34:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800af38:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	68ba      	ldr	r2, [r7, #8]
 800af3e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af48:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af50:	041a      	lsls	r2, r3, #16
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	430a      	orrs	r2, r1
 800af58:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800af5c:	68bb      	ldr	r3, [r7, #8]
 800af5e:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af6e:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af76:	061a      	lsls	r2, r3, #24
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	430a      	orrs	r2, r1
 800af7e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800af82:	68bb      	ldr	r3, [r7, #8]
 800af84:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800af8c:	68bb      	ldr	r3, [r7, #8]
 800af8e:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800af96:	68bb      	ldr	r3, [r7, #8]
 800af98:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800afa0:	68bb      	ldr	r3, [r7, #8]
 800afa2:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800afaa:	68bb      	ldr	r3, [r7, #8]
 800afac:	60fb      	str	r3, [r7, #12]
 800afae:	e005      	b.n	800afbc <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	2200      	movs	r2, #0
 800afb4:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	3304      	adds	r3, #4
 800afba:	60fb      	str	r3, [r7, #12]
 800afbc:	68bb      	ldr	r3, [r7, #8]
 800afbe:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800afc2:	68fa      	ldr	r2, [r7, #12]
 800afc4:	429a      	cmp	r2, r3
 800afc6:	d3f3      	bcc.n	800afb0 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 800afc8:	bf00      	nop
 800afca:	bf00      	nop
 800afcc:	3714      	adds	r7, #20
 800afce:	46bd      	mov	sp, r7
 800afd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd4:	4770      	bx	lr
 800afd6:	bf00      	nop
 800afd8:	4000ac00 	.word	0x4000ac00
 800afdc:	4000a800 	.word	0x4000a800

0800afe0 <HAL_FLASH_Program>:
  * @param  DataAddress specifies the address of data to be programmed
  *         This parameter shall be 32-bit aligned
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b088      	sub	sp, #32
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	60f8      	str	r0, [r7, #12]
 800afe8:	60b9      	str	r1, [r7, #8]
 800afea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800afec:	4b32      	ldr	r3, [pc, #200]	@ (800b0b8 <HAL_FLASH_Program+0xd8>)
 800afee:	781b      	ldrb	r3, [r3, #0]
 800aff0:	2b01      	cmp	r3, #1
 800aff2:	d101      	bne.n	800aff8 <HAL_FLASH_Program+0x18>
 800aff4:	2302      	movs	r3, #2
 800aff6:	e05a      	b.n	800b0ae <HAL_FLASH_Program+0xce>
 800aff8:	4b2f      	ldr	r3, [pc, #188]	@ (800b0b8 <HAL_FLASH_Program+0xd8>)
 800affa:	2201      	movs	r2, #1
 800affc:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800affe:	4b2e      	ldr	r3, [pc, #184]	@ (800b0b8 <HAL_FLASH_Program+0xd8>)
 800b000:	2200      	movs	r2, #0
 800b002:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800b004:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b008:	f000 f8de 	bl	800b1c8 <FLASH_WaitForLastOperation>
 800b00c:	4603      	mov	r3, r0
 800b00e:	77fb      	strb	r3, [r7, #31]

  if (status == HAL_OK)
 800b010:	7ffb      	ldrb	r3, [r7, #31]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d147      	bne.n	800b0a6 <HAL_FLASH_Program+0xc6>
  {
    /* Set current operation type */
    pFlash.ProcedureOnGoing = TypeProgram;
 800b016:	4a28      	ldr	r2, [pc, #160]	@ (800b0b8 <HAL_FLASH_Program+0xd8>)
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	6093      	str	r3, [r2, #8]

    /* Access to SECCR or NSCR depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
    reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 800b01c:	4b27      	ldr	r3, [pc, #156]	@ (800b0bc <HAL_FLASH_Program+0xdc>)
 800b01e:	61bb      	str	r3, [r7, #24]
#else
    reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

    if ((TypeProgram & (~FLASH_NON_SECURE_MASK)) == FLASH_TYPEPROGRAM_QUADWORD)
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b026:	2b02      	cmp	r3, #2
 800b028:	d104      	bne.n	800b034 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_USER_MEM_ADDRESS(FlashAddress));

      /* Program a quad-word (128-bit) at a specified address */
      FLASH_Program_QuadWord(FlashAddress, DataAddress);
 800b02a:	6879      	ldr	r1, [r7, #4]
 800b02c:	68b8      	ldr	r0, [r7, #8]
 800b02e:	f000 f919 	bl	800b264 <FLASH_Program_QuadWord>
 800b032:	e01b      	b.n	800b06c <HAL_FLASH_Program+0x8c>
    }
#if defined (FLASH_SR_OBKERR)
    else if ((TypeProgram == FLASH_TYPEPROGRAM_QUADWORD_OBK) || (TypeProgram == FLASH_TYPEPROGRAM_QUADWORD_OBK_ALT))
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	4a22      	ldr	r2, [pc, #136]	@ (800b0c0 <HAL_FLASH_Program+0xe0>)
 800b038:	4293      	cmp	r3, r2
 800b03a:	d003      	beq.n	800b044 <HAL_FLASH_Program+0x64>
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	4a21      	ldr	r2, [pc, #132]	@ (800b0c4 <HAL_FLASH_Program+0xe4>)
 800b040:	4293      	cmp	r3, r2
 800b042:	d104      	bne.n	800b04e <HAL_FLASH_Program+0x6e>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_OBK_ADDRESS(FlashAddress));

      /* Program a quad-word (128-bit) of OBK at a specified address */
      FLASH_Program_QuadWord_OBK(FlashAddress, DataAddress);
 800b044:	6879      	ldr	r1, [r7, #4]
 800b046:	68b8      	ldr	r0, [r7, #8]
 800b048:	f000 f948 	bl	800b2dc <FLASH_Program_QuadWord_OBK>
 800b04c:	e00e      	b.n	800b06c <HAL_FLASH_Program+0x8c>
    }
#endif /* FLASH_SR_OBKERR */
#if defined (FLASH_EDATAR_EDATA_EN)
    else if ((TypeProgram & (~FLASH_NON_SECURE_MASK)) == FLASH_TYPEPROGRAM_HALFWORD_EDATA)
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b054:	4a1c      	ldr	r2, [pc, #112]	@ (800b0c8 <HAL_FLASH_Program+0xe8>)
 800b056:	4293      	cmp	r3, r2
 800b058:	d104      	bne.n	800b064 <HAL_FLASH_Program+0x84>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_EDATA_ADDRESS(FlashAddress));

      /* Program a Flash high-cycle data half-word at a specified address */
      FLASH_Program_HalfWord(FlashAddress, DataAddress);
 800b05a:	6879      	ldr	r1, [r7, #4]
 800b05c:	68b8      	ldr	r0, [r7, #8]
 800b05e:	f000 f989 	bl	800b374 <FLASH_Program_HalfWord>
 800b062:	e003      	b.n	800b06c <HAL_FLASH_Program+0x8c>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_OTP_ADDRESS(FlashAddress));

      /* Program an OTP half-word at a specified address */
      FLASH_Program_HalfWord(FlashAddress, DataAddress);
 800b064:	6879      	ldr	r1, [r7, #4]
 800b066:	68b8      	ldr	r0, [r7, #8]
 800b068:	f000 f984 	bl	800b374 <FLASH_Program_HalfWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800b06c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b070:	f000 f8aa 	bl	800b1c8 <FLASH_WaitForLastOperation>
 800b074:	4603      	mov	r3, r0
 800b076:	77fb      	strb	r3, [r7, #31]

#if defined (FLASH_SR_OBKERR)
    /* If the program operation is completed, disable the PG */
    CLEAR_BIT((*reg_cr), (TypeProgram & ~(FLASH_NON_SECURE_MASK | FLASH_OBK | FLASH_OTP | FLASH_OBKCFGR_ALT_SECT)));
 800b078:	69bb      	ldr	r3, [r7, #24]
 800b07a:	681a      	ldr	r2, [r3, #0]
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	f023 4330 	bic.w	r3, r3, #2952790016	@ 0xb0000000
 800b082:	f023 0304 	bic.w	r3, r3, #4
 800b086:	43db      	mvns	r3, r3
 800b088:	401a      	ands	r2, r3
 800b08a:	69bb      	ldr	r3, [r7, #24]
 800b08c:	601a      	str	r2, [r3, #0]

    /* Clear alternate sector bit */
    if (TypeProgram == FLASH_TYPEPROGRAM_QUADWORD_OBK_ALT)
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	4a0c      	ldr	r2, [pc, #48]	@ (800b0c4 <HAL_FLASH_Program+0xe4>)
 800b092:	4293      	cmp	r3, r2
 800b094:	d107      	bne.n	800b0a6 <HAL_FLASH_Program+0xc6>
    {
      reg_obkcfgr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECOBKCFGR) : &(FLASH_NS->NSOBKCFGR);
 800b096:	4b0d      	ldr	r3, [pc, #52]	@ (800b0cc <HAL_FLASH_Program+0xec>)
 800b098:	617b      	str	r3, [r7, #20]
      CLEAR_BIT((*reg_obkcfgr), FLASH_OBKCFGR_ALT_SECT);
 800b09a:	697b      	ldr	r3, [r7, #20]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	f023 0204 	bic.w	r2, r3, #4
 800b0a2:	697b      	ldr	r3, [r7, #20]
 800b0a4:	601a      	str	r2, [r3, #0]
    /* If the program operation is completed, disable the PG */
    CLEAR_BIT((*reg_cr), (TypeProgram & ~(FLASH_NON_SECURE_MASK |  FLASH_OTP)));
#endif /* FLASH_SR_OBKERR */
  }
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800b0a6:	4b04      	ldr	r3, [pc, #16]	@ (800b0b8 <HAL_FLASH_Program+0xd8>)
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 800b0ac:	7ffb      	ldrb	r3, [r7, #31]
}
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	3720      	adds	r7, #32
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	bd80      	pop	{r7, pc}
 800b0b6:	bf00      	nop
 800b0b8:	20000080 	.word	0x20000080
 800b0bc:	40022028 	.word	0x40022028
 800b0c0:	10000002 	.word	0x10000002
 800b0c4:	10000006 	.word	0x10000006
 800b0c8:	40000002 	.word	0x40000002
 800b0cc:	40022040 	.word	0x40022040

0800b0d0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800b0d0:	b480      	push	{r7}
 800b0d2:	b083      	sub	sp, #12
 800b0d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->NSCR, FLASH_CR_LOCK) != 0U)
 800b0da:	4b0d      	ldr	r3, [pc, #52]	@ (800b110 <HAL_FLASH_Unlock+0x40>)
 800b0dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0de:	f003 0301 	and.w	r3, r3, #1
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d00d      	beq.n	800b102 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Control Register access */
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY1);
 800b0e6:	4b0a      	ldr	r3, [pc, #40]	@ (800b110 <HAL_FLASH_Unlock+0x40>)
 800b0e8:	4a0a      	ldr	r2, [pc, #40]	@ (800b114 <HAL_FLASH_Unlock+0x44>)
 800b0ea:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY2);
 800b0ec:	4b08      	ldr	r3, [pc, #32]	@ (800b110 <HAL_FLASH_Unlock+0x40>)
 800b0ee:	4a0a      	ldr	r2, [pc, #40]	@ (800b118 <HAL_FLASH_Unlock+0x48>)
 800b0f0:	605a      	str	r2, [r3, #4]

    /* Verify Flash CR is unlocked */
    if (READ_BIT(FLASH->NSCR, FLASH_CR_LOCK) != 0U)
 800b0f2:	4b07      	ldr	r3, [pc, #28]	@ (800b110 <HAL_FLASH_Unlock+0x40>)
 800b0f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0f6:	f003 0301 	and.w	r3, r3, #1
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d001      	beq.n	800b102 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800b0fe:	2301      	movs	r3, #1
 800b100:	71fb      	strb	r3, [r7, #7]
      }
    }
  }
#endif /* __ARM_FEATURE_CMSE */

  return status;
 800b102:	79fb      	ldrb	r3, [r7, #7]
}
 800b104:	4618      	mov	r0, r3
 800b106:	370c      	adds	r7, #12
 800b108:	46bd      	mov	sp, r7
 800b10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10e:	4770      	bx	lr
 800b110:	40022000 	.word	0x40022000
 800b114:	45670123 	.word	0x45670123
 800b118:	cdef89ab 	.word	0xcdef89ab

0800b11c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800b11c:	b480      	push	{r7}
 800b11e:	b083      	sub	sp, #12
 800b120:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800b122:	2300      	movs	r3, #0
 800b124:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Control Register access */
  SET_BIT(FLASH->NSCR, FLASH_CR_LOCK);
 800b126:	4b0a      	ldr	r3, [pc, #40]	@ (800b150 <HAL_FLASH_Lock+0x34>)
 800b128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b12a:	4a09      	ldr	r2, [pc, #36]	@ (800b150 <HAL_FLASH_Lock+0x34>)
 800b12c:	f043 0301 	orr.w	r3, r3, #1
 800b130:	6293      	str	r3, [r2, #40]	@ 0x28

  /* Verify Flash is locked */
  if (READ_BIT(FLASH->NSCR, FLASH_CR_LOCK) == 0U)
 800b132:	4b07      	ldr	r3, [pc, #28]	@ (800b150 <HAL_FLASH_Lock+0x34>)
 800b134:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b136:	f003 0301 	and.w	r3, r3, #1
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d101      	bne.n	800b142 <HAL_FLASH_Lock+0x26>
  {
    status = HAL_ERROR;
 800b13e:	2301      	movs	r3, #1
 800b140:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* __ARM_FEATURE_CMSE */

  return status;
 800b142:	79fb      	ldrb	r3, [r7, #7]
}
 800b144:	4618      	mov	r0, r3
 800b146:	370c      	adds	r7, #12
 800b148:	46bd      	mov	sp, r7
 800b14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14e:	4770      	bx	lr
 800b150:	40022000 	.word	0x40022000

0800b154 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 800b154:	b480      	push	{r7}
 800b156:	af00      	add	r7, sp, #0
  if (READ_BIT(FLASH->OPTCR, FLASH_OPTCR_OPTLOCK) != 0U)
 800b158:	4b0c      	ldr	r3, [pc, #48]	@ (800b18c <HAL_FLASH_OB_Unlock+0x38>)
 800b15a:	69db      	ldr	r3, [r3, #28]
 800b15c:	f003 0301 	and.w	r3, r3, #1
 800b160:	2b00      	cmp	r3, #0
 800b162:	d00d      	beq.n	800b180 <HAL_FLASH_OB_Unlock+0x2c>
  {
    /* Authorizes the Option Byte registers programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPT_KEY1);
 800b164:	4b09      	ldr	r3, [pc, #36]	@ (800b18c <HAL_FLASH_OB_Unlock+0x38>)
 800b166:	4a0a      	ldr	r2, [pc, #40]	@ (800b190 <HAL_FLASH_OB_Unlock+0x3c>)
 800b168:	60da      	str	r2, [r3, #12]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPT_KEY2);
 800b16a:	4b08      	ldr	r3, [pc, #32]	@ (800b18c <HAL_FLASH_OB_Unlock+0x38>)
 800b16c:	4a09      	ldr	r2, [pc, #36]	@ (800b194 <HAL_FLASH_OB_Unlock+0x40>)
 800b16e:	60da      	str	r2, [r3, #12]

    /* Verify that the Option Bytes are unlocked */
    if (READ_BIT(FLASH->OPTCR, FLASH_OPTCR_OPTLOCK) != 0U)
 800b170:	4b06      	ldr	r3, [pc, #24]	@ (800b18c <HAL_FLASH_OB_Unlock+0x38>)
 800b172:	69db      	ldr	r3, [r3, #28]
 800b174:	f003 0301 	and.w	r3, r3, #1
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d001      	beq.n	800b180 <HAL_FLASH_OB_Unlock+0x2c>
    {
      return HAL_ERROR;
 800b17c:	2301      	movs	r3, #1
 800b17e:	e000      	b.n	800b182 <HAL_FLASH_OB_Unlock+0x2e>
    }
  }

  return HAL_OK;
 800b180:	2300      	movs	r3, #0
}
 800b182:	4618      	mov	r0, r3
 800b184:	46bd      	mov	sp, r7
 800b186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18a:	4770      	bx	lr
 800b18c:	40022000 	.word	0x40022000
 800b190:	08192a3b 	.word	0x08192a3b
 800b194:	4c5d6e7f 	.word	0x4c5d6e7f

0800b198 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 800b198:	b480      	push	{r7}
 800b19a:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  SET_BIT(FLASH->OPTCR, FLASH_OPTCR_OPTLOCK);
 800b19c:	4b09      	ldr	r3, [pc, #36]	@ (800b1c4 <HAL_FLASH_OB_Lock+0x2c>)
 800b19e:	69db      	ldr	r3, [r3, #28]
 800b1a0:	4a08      	ldr	r2, [pc, #32]	@ (800b1c4 <HAL_FLASH_OB_Lock+0x2c>)
 800b1a2:	f043 0301 	orr.w	r3, r3, #1
 800b1a6:	61d3      	str	r3, [r2, #28]

  /* Verify that the Option Bytes are locked */
  if (READ_BIT(FLASH->OPTCR, FLASH_OPTCR_OPTLOCK) != 0U)
 800b1a8:	4b06      	ldr	r3, [pc, #24]	@ (800b1c4 <HAL_FLASH_OB_Lock+0x2c>)
 800b1aa:	69db      	ldr	r3, [r3, #28]
 800b1ac:	f003 0301 	and.w	r3, r3, #1
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d001      	beq.n	800b1b8 <HAL_FLASH_OB_Lock+0x20>
  {
    return HAL_OK;
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	e000      	b.n	800b1ba <HAL_FLASH_OB_Lock+0x22>
  }

  return HAL_ERROR;
 800b1b8:	2301      	movs	r3, #1
}
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	46bd      	mov	sp, r7
 800b1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c2:	4770      	bx	lr
 800b1c4:	40022000 	.word	0x40022000

0800b1c8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b086      	sub	sp, #24
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]

  uint32_t errorflag;
  const __IO uint32_t *reg_sr;
  __IO uint32_t *reg_ccr;

  uint32_t tickstart = HAL_GetTick();
 800b1d0:	f7fa fbee 	bl	80059b0 <HAL_GetTick>
 800b1d4:	6178      	str	r0, [r7, #20]

  /* Access to SR register depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_sr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECSR) : &(FLASH_NS->NSSR);
 800b1d6:	4b20      	ldr	r3, [pc, #128]	@ (800b258 <FLASH_WaitForLastOperation+0x90>)
 800b1d8:	613b      	str	r3, [r7, #16]
#else
  reg_sr = &(FLASH_NS->NSSR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Wait on BSY, WBNE and DBNE flags to be reset */
  while (((*reg_sr) & (FLASH_FLAG_BSY | FLASH_FLAG_WBNE | FLASH_FLAG_DBNE)) != 0U)
 800b1da:	e010      	b.n	800b1fe <FLASH_WaitForLastOperation+0x36>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1e2:	d00c      	beq.n	800b1fe <FLASH_WaitForLastOperation+0x36>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800b1e4:	f7fa fbe4 	bl	80059b0 <HAL_GetTick>
 800b1e8:	4602      	mov	r2, r0
 800b1ea:	697b      	ldr	r3, [r7, #20]
 800b1ec:	1ad3      	subs	r3, r2, r3
 800b1ee:	687a      	ldr	r2, [r7, #4]
 800b1f0:	429a      	cmp	r2, r3
 800b1f2:	d302      	bcc.n	800b1fa <FLASH_WaitForLastOperation+0x32>
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d101      	bne.n	800b1fe <FLASH_WaitForLastOperation+0x36>
      {
        return HAL_TIMEOUT;
 800b1fa:	2303      	movs	r3, #3
 800b1fc:	e027      	b.n	800b24e <FLASH_WaitForLastOperation+0x86>
  while (((*reg_sr) & (FLASH_FLAG_BSY | FLASH_FLAG_WBNE | FLASH_FLAG_DBNE)) != 0U)
 800b1fe:	693b      	ldr	r3, [r7, #16]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	f003 030b 	and.w	r3, r3, #11
 800b206:	2b00      	cmp	r3, #0
 800b208:	d1e8      	bne.n	800b1dc <FLASH_WaitForLastOperation+0x14>
    }
  }

  /* Access to CCR register depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_ccr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCCR) : &(FLASH_NS->NSCCR);
 800b20a:	4b14      	ldr	r3, [pc, #80]	@ (800b25c <FLASH_WaitForLastOperation+0x94>)
 800b20c:	60fb      	str	r3, [r7, #12]
#else
  reg_ccr = &(FLASH_NS->NSCCR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Check FLASH operation error flags */
  errorflag = ((*reg_sr) & FLASH_FLAG_SR_ERRORS);
 800b20e:	693b      	ldr	r3, [r7, #16]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	f403 037e 	and.w	r3, r3, #16646144	@ 0xfe0000
 800b216:	60bb      	str	r3, [r7, #8]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  errorflag |= (FLASH->NSSR & FLASH_FLAG_OPTCHANGEERR);
#endif /* __ARM_FEATURE_CMSE */

  /* In case of error reported in Flash SR or OPTSR registers */
  if (errorflag != 0U)
 800b218:	68bb      	ldr	r3, [r7, #8]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d00c      	beq.n	800b238 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 800b21e:	4b10      	ldr	r3, [pc, #64]	@ (800b260 <FLASH_WaitForLastOperation+0x98>)
 800b220:	685a      	ldr	r2, [r3, #4]
 800b222:	68bb      	ldr	r3, [r7, #8]
 800b224:	4313      	orrs	r3, r2
 800b226:	4a0e      	ldr	r2, [pc, #56]	@ (800b260 <FLASH_WaitForLastOperation+0x98>)
 800b228:	6053      	str	r3, [r2, #4]

    /* Clear error flags */
    (*reg_ccr) = errorflag & FLASH_FLAG_SR_ERRORS;
 800b22a:	68bb      	ldr	r3, [r7, #8]
 800b22c:	f403 027e 	and.w	r2, r3, #16646144	@ 0xfe0000
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	601a      	str	r2, [r3, #0]
    {
      FLASH->NSCCR = FLASH_FLAG_OPTCHANGEERR;
    }
#endif /* __ARM_FEATURE_CMSE */

    return HAL_ERROR;
 800b234:	2301      	movs	r3, #1
 800b236:	e00a      	b.n	800b24e <FLASH_WaitForLastOperation+0x86>
  }

  /* Check FLASH End of Operation flag  */
  if (((*reg_sr) & FLASH_FLAG_EOP) != 0U)
 800b238:	693b      	ldr	r3, [r7, #16]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b240:	2b00      	cmp	r3, #0
 800b242:	d003      	beq.n	800b24c <FLASH_WaitForLastOperation+0x84>
  {
    /* Clear FLASH End of Operation pending bit */
    (*reg_ccr) = FLASH_FLAG_EOP;
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800b24a:	601a      	str	r2, [r3, #0]
  }

  /* If there is no error flag set */
  return HAL_OK;
 800b24c:	2300      	movs	r3, #0
}
 800b24e:	4618      	mov	r0, r3
 800b250:	3718      	adds	r7, #24
 800b252:	46bd      	mov	sp, r7
 800b254:	bd80      	pop	{r7, pc}
 800b256:	bf00      	nop
 800b258:	40022020 	.word	0x40022020
 800b25c:	40022030 	.word	0x40022030
 800b260:	20000080 	.word	0x20000080

0800b264 <FLASH_Program_QuadWord>:
  * @param  FlashAddress specifies the address to be programmed.
  * @param  DataAddress specifies the address of data to be programmed.
  * @retval None
  */
static void FLASH_Program_QuadWord(uint32_t FlashAddress, uint32_t DataAddress)
{
 800b264:	b480      	push	{r7}
 800b266:	b08b      	sub	sp, #44	@ 0x2c
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
 800b26c:	6039      	str	r1, [r7, #0]
  uint8_t index = 4;
 800b26e:	2304      	movs	r3, #4
 800b270:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t *dest_addr = (uint32_t *)FlashAddress;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	623b      	str	r3, [r7, #32]
  uint32_t *src_addr  = (uint32_t *)DataAddress;
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	61fb      	str	r3, [r7, #28]
  uint32_t primask_bit;
  __IO uint32_t *reg_cr;

  /* Access to SECCR or NSCR registers depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 800b27c:	4b16      	ldr	r3, [pc, #88]	@ (800b2d8 <FLASH_Program_QuadWord+0x74>)
 800b27e:	61bb      	str	r3, [r7, #24]
#else
  reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Set PG bit */
  SET_BIT((*reg_cr), FLASH_CR_PG);
 800b280:	69bb      	ldr	r3, [r7, #24]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	f043 0202 	orr.w	r2, r3, #2
 800b288:	69bb      	ldr	r3, [r7, #24]
 800b28a:	601a      	str	r2, [r3, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800b28c:	f3ef 8310 	mrs	r3, PRIMASK
 800b290:	613b      	str	r3, [r7, #16]
  return(result);
 800b292:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 800b294:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b296:	b672      	cpsid	i
}
 800b298:	bf00      	nop
  __disable_irq();

  /* Program the quad-word */
  do
  {
    *dest_addr = *src_addr;
 800b29a:	69fb      	ldr	r3, [r7, #28]
 800b29c:	681a      	ldr	r2, [r3, #0]
 800b29e:	6a3b      	ldr	r3, [r7, #32]
 800b2a0:	601a      	str	r2, [r3, #0]
    dest_addr++;
 800b2a2:	6a3b      	ldr	r3, [r7, #32]
 800b2a4:	3304      	adds	r3, #4
 800b2a6:	623b      	str	r3, [r7, #32]
    src_addr++;
 800b2a8:	69fb      	ldr	r3, [r7, #28]
 800b2aa:	3304      	adds	r3, #4
 800b2ac:	61fb      	str	r3, [r7, #28]
    index--;
 800b2ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b2b2:	3b01      	subs	r3, #1
 800b2b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  } while (index != 0U);
 800b2b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d1ec      	bne.n	800b29a <FLASH_Program_QuadWord+0x36>
 800b2c0:	697b      	ldr	r3, [r7, #20]
 800b2c2:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	f383 8810 	msr	PRIMASK, r3
}
 800b2ca:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 800b2cc:	bf00      	nop
 800b2ce:	372c      	adds	r7, #44	@ 0x2c
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d6:	4770      	bx	lr
 800b2d8:	40022028 	.word	0x40022028

0800b2dc <FLASH_Program_QuadWord_OBK>:
  * @param  FlashAddress specifies the address to be programmed.
  * @param  DataAddress specifies the address of data to be programmed.
  * @retval None
  */
static void FLASH_Program_QuadWord_OBK(uint32_t FlashAddress, uint32_t DataAddress)
{
 800b2dc:	b480      	push	{r7}
 800b2de:	b08b      	sub	sp, #44	@ 0x2c
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
 800b2e4:	6039      	str	r1, [r7, #0]
  uint8_t index = 4;
 800b2e6:	2304      	movs	r3, #4
 800b2e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t *dest_addr = (uint32_t *)FlashAddress;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	623b      	str	r3, [r7, #32]
  uint32_t *src_addr  = (uint32_t *)DataAddress;
 800b2f0:	683b      	ldr	r3, [r7, #0]
 800b2f2:	61fb      	str	r3, [r7, #28]
  uint32_t primask_bit;
  __IO uint32_t *reg_cr;
  __IO uint32_t *reg_obkcfgr;

  /* Access to SECCR or NSCR registers depends on operation type */
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 800b2f4:	4b1c      	ldr	r3, [pc, #112]	@ (800b368 <FLASH_Program_QuadWord_OBK+0x8c>)
 800b2f6:	61bb      	str	r3, [r7, #24]
  reg_obkcfgr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECOBKCFGR) : &(FLASH_NS->NSOBKCFGR);
 800b2f8:	4b1c      	ldr	r3, [pc, #112]	@ (800b36c <FLASH_Program_QuadWord_OBK+0x90>)
 800b2fa:	617b      	str	r3, [r7, #20]

  /* Set PG bit */
  SET_BIT((*reg_cr), FLASH_CR_PG);
 800b2fc:	69bb      	ldr	r3, [r7, #24]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	f043 0202 	orr.w	r2, r3, #2
 800b304:	69bb      	ldr	r3, [r7, #24]
 800b306:	601a      	str	r2, [r3, #0]

  /* Set ALT_SECT bit */
  SET_BIT((*reg_obkcfgr), pFlash.ProcedureOnGoing & FLASH_OBKCFGR_ALT_SECT);
 800b308:	697b      	ldr	r3, [r7, #20]
 800b30a:	681a      	ldr	r2, [r3, #0]
 800b30c:	4b18      	ldr	r3, [pc, #96]	@ (800b370 <FLASH_Program_QuadWord_OBK+0x94>)
 800b30e:	689b      	ldr	r3, [r3, #8]
 800b310:	f003 0304 	and.w	r3, r3, #4
 800b314:	431a      	orrs	r2, r3
 800b316:	697b      	ldr	r3, [r7, #20]
 800b318:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800b31a:	f3ef 8310 	mrs	r3, PRIMASK
 800b31e:	60fb      	str	r3, [r7, #12]
  return(result);
 800b320:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 800b322:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800b324:	b672      	cpsid	i
}
 800b326:	bf00      	nop
  __disable_irq();

  /* Program the quad-word */
  do
  {
    *dest_addr = *src_addr;
 800b328:	69fb      	ldr	r3, [r7, #28]
 800b32a:	681a      	ldr	r2, [r3, #0]
 800b32c:	6a3b      	ldr	r3, [r7, #32]
 800b32e:	601a      	str	r2, [r3, #0]
    dest_addr++;
 800b330:	6a3b      	ldr	r3, [r7, #32]
 800b332:	3304      	adds	r3, #4
 800b334:	623b      	str	r3, [r7, #32]
    src_addr++;
 800b336:	69fb      	ldr	r3, [r7, #28]
 800b338:	3304      	adds	r3, #4
 800b33a:	61fb      	str	r3, [r7, #28]
    index--;
 800b33c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b340:	3b01      	subs	r3, #1
 800b342:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  } while (index != 0U);
 800b346:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d1ec      	bne.n	800b328 <FLASH_Program_QuadWord_OBK+0x4c>
 800b34e:	693b      	ldr	r3, [r7, #16]
 800b350:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b352:	68bb      	ldr	r3, [r7, #8]
 800b354:	f383 8810 	msr	PRIMASK, r3
}
 800b358:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 800b35a:	bf00      	nop
 800b35c:	372c      	adds	r7, #44	@ 0x2c
 800b35e:	46bd      	mov	sp, r7
 800b360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b364:	4770      	bx	lr
 800b366:	bf00      	nop
 800b368:	40022028 	.word	0x40022028
 800b36c:	40022040 	.word	0x40022040
 800b370:	20000080 	.word	0x20000080

0800b374 <FLASH_Program_HalfWord>:
  * @param  FlashAddress specifies the address to be programmed.
  * @param  DataAddress specifies the address of data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t FlashAddress, uint32_t DataAddress)
{
 800b374:	b480      	push	{r7}
 800b376:	b085      	sub	sp, #20
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
 800b37c:	6039      	str	r1, [r7, #0]
  __IO uint32_t *reg_cr;

  /* Access to SECCR or NSCR registers depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 800b37e:	4b09      	ldr	r3, [pc, #36]	@ (800b3a4 <FLASH_Program_HalfWord+0x30>)
 800b380:	60fb      	str	r3, [r7, #12]
#else
  reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Set HalfWord_PG bit */
  SET_BIT((*reg_cr), FLASH_CR_PG);
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	f043 0202 	orr.w	r2, r3, #2
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	601a      	str	r2, [r3, #0]

  /* Program a halfword word (16 bits) */
  *(__IO uint16_t *)FlashAddress = *(__IO uint16_t *)DataAddress;
 800b38e:	683a      	ldr	r2, [r7, #0]
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	8812      	ldrh	r2, [r2, #0]
 800b394:	b292      	uxth	r2, r2
 800b396:	801a      	strh	r2, [r3, #0]
}
 800b398:	bf00      	nop
 800b39a:	3714      	adds	r7, #20
 800b39c:	46bd      	mov	sp, r7
 800b39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a2:	4770      	bx	lr
 800b3a4:	40022028 	.word	0x40022028

0800b3a8 <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased).
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b086      	sub	sp, #24
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
 800b3b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800b3b2:	4b3a      	ldr	r3, [pc, #232]	@ (800b49c <HAL_FLASHEx_Erase+0xf4>)
 800b3b4:	781b      	ldrb	r3, [r3, #0]
 800b3b6:	2b01      	cmp	r3, #1
 800b3b8:	d101      	bne.n	800b3be <HAL_FLASHEx_Erase+0x16>
 800b3ba:	2302      	movs	r3, #2
 800b3bc:	e06a      	b.n	800b494 <HAL_FLASHEx_Erase+0xec>
 800b3be:	4b37      	ldr	r3, [pc, #220]	@ (800b49c <HAL_FLASHEx_Erase+0xf4>)
 800b3c0:	2201      	movs	r2, #1
 800b3c2:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800b3c4:	4b35      	ldr	r3, [pc, #212]	@ (800b49c <HAL_FLASHEx_Erase+0xf4>)
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800b3ca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b3ce:	f7ff fefb 	bl	800b1c8 <FLASH_WaitForLastOperation>
 800b3d2:	4603      	mov	r3, r0
 800b3d4:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 800b3d6:	7dfb      	ldrb	r3, [r7, #23]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d157      	bne.n	800b48c <HAL_FLASHEx_Erase+0xe4>
  {
    /* Current operation type */
    pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	4a2e      	ldr	r2, [pc, #184]	@ (800b49c <HAL_FLASHEx_Erase+0xf4>)
 800b3e2:	6093      	str	r3, [r2, #8]

    /* Access to SECCR or NSCR depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
    reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 800b3e4:	4b2e      	ldr	r3, [pc, #184]	@ (800b4a0 <HAL_FLASHEx_Erase+0xf8>)
 800b3e6:	60fb      	str	r3, [r7, #12]
#else
    reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

    if ((pEraseInit->TypeErase & (~FLASH_NON_SECURE_MASK)) == FLASH_TYPEERASE_MASSERASE)
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b3f0:	f248 0208 	movw	r2, #32776	@ 0x8008
 800b3f4:	4293      	cmp	r3, r2
 800b3f6:	d10b      	bne.n	800b410 <HAL_FLASHEx_Erase+0x68>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	685b      	ldr	r3, [r3, #4]
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	f000 f853 	bl	800b4a8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800b402:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b406:	f7ff fedf 	bl	800b1c8 <FLASH_WaitForLastOperation>
 800b40a:	4603      	mov	r3, r0
 800b40c:	75fb      	strb	r3, [r7, #23]
 800b40e:	e033      	b.n	800b478 <HAL_FLASHEx_Erase+0xd0>
    }
#if defined (FLASH_SR_OBKERR)
    else if (pEraseInit->TypeErase == FLASH_TYPEERASE_OBK_ALT)
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	4a23      	ldr	r2, [pc, #140]	@ (800b4a4 <HAL_FLASHEx_Erase+0xfc>)
 800b416:	4293      	cmp	r3, r2
 800b418:	d108      	bne.n	800b42c <HAL_FLASHEx_Erase+0x84>
    {
      /* OBK erase to be done */
      FLASH_OBKErase();
 800b41a:	f000 f8b5 	bl	800b588 <FLASH_OBKErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800b41e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b422:	f7ff fed1 	bl	800b1c8 <FLASH_WaitForLastOperation>
 800b426:	4603      	mov	r3, r0
 800b428:	75fb      	strb	r3, [r7, #23]
 800b42a:	e025      	b.n	800b478 <HAL_FLASHEx_Erase+0xd0>
    }
#endif /* FLASH_SR_OBKERR */
    else
    {
      /* Initialization of SectorError variable */
      *SectorError = 0xFFFFFFFFU;
 800b42c:	683b      	ldr	r3, [r7, #0]
 800b42e:	f04f 32ff 	mov.w	r2, #4294967295
 800b432:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for (sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); \
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	689b      	ldr	r3, [r3, #8]
 800b438:	613b      	str	r3, [r7, #16]
 800b43a:	e015      	b.n	800b468 <HAL_FLASHEx_Erase+0xc0>
           sector_index++)
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks);
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	685b      	ldr	r3, [r3, #4]
 800b440:	4619      	mov	r1, r3
 800b442:	6938      	ldr	r0, [r7, #16]
 800b444:	f000 f868 	bl	800b518 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800b448:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b44c:	f7ff febc 	bl	800b1c8 <FLASH_WaitForLastOperation>
 800b450:	4603      	mov	r3, r0
 800b452:	75fb      	strb	r3, [r7, #23]

        if (status != HAL_OK)
 800b454:	7dfb      	ldrb	r3, [r7, #23]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d003      	beq.n	800b462 <HAL_FLASHEx_Erase+0xba>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	693a      	ldr	r2, [r7, #16]
 800b45e:	601a      	str	r2, [r3, #0]
          break;
 800b460:	e00a      	b.n	800b478 <HAL_FLASHEx_Erase+0xd0>
           sector_index++)
 800b462:	693b      	ldr	r3, [r7, #16]
 800b464:	3301      	adds	r3, #1
 800b466:	613b      	str	r3, [r7, #16]
      for (sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); \
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	68da      	ldr	r2, [r3, #12]
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	689b      	ldr	r3, [r3, #8]
 800b470:	4413      	add	r3, r2
 800b472:	693a      	ldr	r2, [r7, #16]
 800b474:	429a      	cmp	r2, r3
 800b476:	d3e1      	bcc.n	800b43c <HAL_FLASHEx_Erase+0x94>
        }
      }
    }

    /* If the erase operation is completed, disable the associated bits */
    CLEAR_BIT((*reg_cr), (pEraseInit->TypeErase) & (~(FLASH_NON_SECURE_MASK)));
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	681a      	ldr	r2, [r3, #0]
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b484:	43db      	mvns	r3, r3
 800b486:	401a      	ands	r2, r3
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800b48c:	4b03      	ldr	r3, [pc, #12]	@ (800b49c <HAL_FLASHEx_Erase+0xf4>)
 800b48e:	2200      	movs	r2, #0
 800b490:	701a      	strb	r2, [r3, #0]

  return status;
 800b492:	7dfb      	ldrb	r3, [r7, #23]
}
 800b494:	4618      	mov	r0, r3
 800b496:	3718      	adds	r7, #24
 800b498:	46bd      	mov	sp, r7
 800b49a:	bd80      	pop	{r7, pc}
 800b49c:	20000080 	.word	0x20000080
 800b4a0:	40022028 	.word	0x40022028
 800b4a4:	80000008 	.word	0x80000008

0800b4a8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800b4a8:	b480      	push	{r7}
 800b4aa:	b085      	sub	sp, #20
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Access to SECCR or NSCR registers depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 800b4b0:	4b18      	ldr	r3, [pc, #96]	@ (800b514 <FLASH_MassErase+0x6c>)
 800b4b2:	60fb      	str	r3, [r7, #12]
#else
  reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Flash Mass Erase */
  if ((Banks & FLASH_BANK_BOTH) == FLASH_BANK_BOTH)
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	f003 0303 	and.w	r3, r3, #3
 800b4ba:	2b03      	cmp	r3, #3
 800b4bc:	d108      	bne.n	800b4d0 <FLASH_MassErase+0x28>
  {
    /* Set Mass Erase Bit */
    SET_BIT((*reg_cr), FLASH_CR_MER | FLASH_CR_START);
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b4c6:	f043 0320 	orr.w	r3, r3, #32
 800b4ca:	68fa      	ldr	r2, [r7, #12]
 800b4cc:	6013      	str	r3, [r2, #0]
    {
      /* Erase Bank2 */
      SET_BIT((*reg_cr), (FLASH_CR_BER | FLASH_CR_BKSEL | FLASH_CR_START));
    }
  }
}
 800b4ce:	e01b      	b.n	800b508 <FLASH_MassErase+0x60>
    if ((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	f003 0301 	and.w	r3, r3, #1
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d009      	beq.n	800b4ee <FLASH_MassErase+0x46>
      MODIFY_REG((*reg_cr), (FLASH_CR_BKSEL | FLASH_CR_BER | FLASH_CR_START), (FLASH_CR_BER | FLASH_CR_START));
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b4e2:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 800b4e6:	f043 0228 	orr.w	r2, r3, #40	@ 0x28
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	601a      	str	r2, [r3, #0]
    if ((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	f003 0302 	and.w	r3, r3, #2
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d007      	beq.n	800b508 <FLASH_MassErase+0x60>
      SET_BIT((*reg_cr), (FLASH_CR_BER | FLASH_CR_BKSEL | FLASH_CR_START));
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b500:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 800b504:	68fa      	ldr	r2, [r7, #12]
 800b506:	6013      	str	r3, [r2, #0]
}
 800b508:	bf00      	nop
 800b50a:	3714      	adds	r7, #20
 800b50c:	46bd      	mov	sp, r7
 800b50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b512:	4770      	bx	lr
 800b514:	40022028 	.word	0x40022028

0800b518 <FLASH_Erase_Sector>:
  *            @arg FLASH_BANK_1: Sector in bank 1 to be erased
  *            @arg FLASH_BANK_2: Sector in bank 2 to be erased
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks)
{
 800b518:	b480      	push	{r7}
 800b51a:	b085      	sub	sp, #20
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
 800b520:	6039      	str	r1, [r7, #0]
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

  /* Access to SECCR or NSCR registers depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 800b522:	4b18      	ldr	r3, [pc, #96]	@ (800b584 <FLASH_Erase_Sector+0x6c>)
 800b524:	60fb      	str	r3, [r7, #12]
#else
  reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

  if ((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800b526:	683b      	ldr	r3, [r7, #0]
 800b528:	f003 0301 	and.w	r3, r3, #1
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d011      	beq.n	800b554 <FLASH_Erase_Sector+0x3c>
  {
    /* Reset Sector Number for Bank1 */
    (*reg_cr) &= ~(FLASH_CR_SNB | FLASH_CR_BKSEL);
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b538:	f423 53fe 	bic.w	r3, r3, #8128	@ 0x1fc0
 800b53c:	68fa      	ldr	r2, [r7, #12]
 800b53e:	6013      	str	r3, [r2, #0]

    (*reg_cr) |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	681a      	ldr	r2, [r3, #0]
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	019b      	lsls	r3, r3, #6
 800b548:	4313      	orrs	r3, r2
 800b54a:	f043 0224 	orr.w	r2, r3, #36	@ 0x24
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	601a      	str	r2, [r3, #0]
    /* Reset Sector Number for Bank2 */
    (*reg_cr) &= ~(FLASH_CR_SNB);

    (*reg_cr) |= (FLASH_CR_SER | FLASH_CR_BKSEL | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
  }
}
 800b552:	e010      	b.n	800b576 <FLASH_Erase_Sector+0x5e>
    (*reg_cr) &= ~(FLASH_CR_SNB);
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	f423 52fe 	bic.w	r2, r3, #8128	@ 0x1fc0
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	601a      	str	r2, [r3, #0]
    (*reg_cr) |= (FLASH_CR_SER | FLASH_CR_BKSEL | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	681a      	ldr	r2, [r3, #0]
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	019b      	lsls	r3, r3, #6
 800b568:	4313      	orrs	r3, r2
 800b56a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b56e:	f043 0324 	orr.w	r3, r3, #36	@ 0x24
 800b572:	68fa      	ldr	r2, [r7, #12]
 800b574:	6013      	str	r3, [r2, #0]
}
 800b576:	bf00      	nop
 800b578:	3714      	adds	r7, #20
 800b57a:	46bd      	mov	sp, r7
 800b57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b580:	4770      	bx	lr
 800b582:	bf00      	nop
 800b584:	40022028 	.word	0x40022028

0800b588 <FLASH_OBKErase>:
/**
  * @brief  Erase of FLASH OBK
  * @retval None
  */
static void FLASH_OBKErase()
{
 800b588:	b480      	push	{r7}
 800b58a:	b083      	sub	sp, #12
 800b58c:	af00      	add	r7, sp, #0
  __IO uint32_t *reg_obkcfgr;

  /* Access to SECOBKCFGR or NSOBKCFGR registers depends on operation type */
  reg_obkcfgr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECOBKCFGR) : &(FLASH_NS->NSOBKCFGR);
 800b58e:	4b07      	ldr	r3, [pc, #28]	@ (800b5ac <FLASH_OBKErase+0x24>)
 800b590:	607b      	str	r3, [r7, #4]

  /* Set OBK Erase Bit */
  SET_BIT((*reg_obkcfgr), FLASH_OBKCFGR_ALT_SECT_ERASE);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	f043 0208 	orr.w	r2, r3, #8
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	601a      	str	r2, [r3, #0]
}
 800b59e:	bf00      	nop
 800b5a0:	370c      	adds	r7, #12
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a8:	4770      	bx	lr
 800b5aa:	bf00      	nop
 800b5ac:	40022040 	.word	0x40022040

0800b5b0 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800b5b0:	b480      	push	{r7}
 800b5b2:	b087      	sub	sp, #28
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
 800b5b8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800b5be:	e136      	b.n	800b82e <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800b5c0:	683b      	ldr	r3, [r7, #0]
 800b5c2:	681a      	ldr	r2, [r3, #0]
 800b5c4:	2101      	movs	r1, #1
 800b5c6:	693b      	ldr	r3, [r7, #16]
 800b5c8:	fa01 f303 	lsl.w	r3, r1, r3
 800b5cc:	4013      	ands	r3, r2
 800b5ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	f000 8128 	beq.w	800b828 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b5d8:	683b      	ldr	r3, [r7, #0]
 800b5da:	685b      	ldr	r3, [r3, #4]
 800b5dc:	2b02      	cmp	r3, #2
 800b5de:	d003      	beq.n	800b5e8 <HAL_GPIO_Init+0x38>
 800b5e0:	683b      	ldr	r3, [r7, #0]
 800b5e2:	685b      	ldr	r3, [r3, #4]
 800b5e4:	2b12      	cmp	r3, #18
 800b5e6:	d125      	bne.n	800b634 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800b5e8:	693b      	ldr	r3, [r7, #16]
 800b5ea:	08da      	lsrs	r2, r3, #3
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	3208      	adds	r2, #8
 800b5f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5f4:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800b5f6:	693b      	ldr	r3, [r7, #16]
 800b5f8:	f003 0307 	and.w	r3, r3, #7
 800b5fc:	009b      	lsls	r3, r3, #2
 800b5fe:	220f      	movs	r2, #15
 800b600:	fa02 f303 	lsl.w	r3, r2, r3
 800b604:	43db      	mvns	r3, r3
 800b606:	697a      	ldr	r2, [r7, #20]
 800b608:	4013      	ands	r3, r2
 800b60a:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	691b      	ldr	r3, [r3, #16]
 800b610:	f003 020f 	and.w	r2, r3, #15
 800b614:	693b      	ldr	r3, [r7, #16]
 800b616:	f003 0307 	and.w	r3, r3, #7
 800b61a:	009b      	lsls	r3, r3, #2
 800b61c:	fa02 f303 	lsl.w	r3, r2, r3
 800b620:	697a      	ldr	r2, [r7, #20]
 800b622:	4313      	orrs	r3, r2
 800b624:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 800b626:	693b      	ldr	r3, [r7, #16]
 800b628:	08da      	lsrs	r2, r3, #3
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	3208      	adds	r2, #8
 800b62e:	6979      	ldr	r1, [r7, #20]
 800b630:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800b63a:	693b      	ldr	r3, [r7, #16]
 800b63c:	005b      	lsls	r3, r3, #1
 800b63e:	2203      	movs	r2, #3
 800b640:	fa02 f303 	lsl.w	r3, r2, r3
 800b644:	43db      	mvns	r3, r3
 800b646:	697a      	ldr	r2, [r7, #20]
 800b648:	4013      	ands	r3, r2
 800b64a:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 800b64c:	683b      	ldr	r3, [r7, #0]
 800b64e:	685b      	ldr	r3, [r3, #4]
 800b650:	f003 0203 	and.w	r2, r3, #3
 800b654:	693b      	ldr	r3, [r7, #16]
 800b656:	005b      	lsls	r3, r3, #1
 800b658:	fa02 f303 	lsl.w	r3, r2, r3
 800b65c:	697a      	ldr	r2, [r7, #20]
 800b65e:	4313      	orrs	r3, r2
 800b660:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	697a      	ldr	r2, [r7, #20]
 800b666:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b668:	683b      	ldr	r3, [r7, #0]
 800b66a:	685b      	ldr	r3, [r3, #4]
 800b66c:	2b01      	cmp	r3, #1
 800b66e:	d00b      	beq.n	800b688 <HAL_GPIO_Init+0xd8>
 800b670:	683b      	ldr	r3, [r7, #0]
 800b672:	685b      	ldr	r3, [r3, #4]
 800b674:	2b02      	cmp	r3, #2
 800b676:	d007      	beq.n	800b688 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b678:	683b      	ldr	r3, [r7, #0]
 800b67a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b67c:	2b11      	cmp	r3, #17
 800b67e:	d003      	beq.n	800b688 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b680:	683b      	ldr	r3, [r7, #0]
 800b682:	685b      	ldr	r3, [r3, #4]
 800b684:	2b12      	cmp	r3, #18
 800b686:	d130      	bne.n	800b6ea <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	689b      	ldr	r3, [r3, #8]
 800b68c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800b68e:	693b      	ldr	r3, [r7, #16]
 800b690:	005b      	lsls	r3, r3, #1
 800b692:	2203      	movs	r2, #3
 800b694:	fa02 f303 	lsl.w	r3, r2, r3
 800b698:	43db      	mvns	r3, r3
 800b69a:	697a      	ldr	r2, [r7, #20]
 800b69c:	4013      	ands	r3, r2
 800b69e:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800b6a0:	683b      	ldr	r3, [r7, #0]
 800b6a2:	68da      	ldr	r2, [r3, #12]
 800b6a4:	693b      	ldr	r3, [r7, #16]
 800b6a6:	005b      	lsls	r3, r3, #1
 800b6a8:	fa02 f303 	lsl.w	r3, r2, r3
 800b6ac:	697a      	ldr	r2, [r7, #20]
 800b6ae:	4313      	orrs	r3, r2
 800b6b0:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	697a      	ldr	r2, [r7, #20]
 800b6b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	685b      	ldr	r3, [r3, #4]
 800b6bc:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b6be:	2201      	movs	r2, #1
 800b6c0:	693b      	ldr	r3, [r7, #16]
 800b6c2:	fa02 f303 	lsl.w	r3, r2, r3
 800b6c6:	43db      	mvns	r3, r3
 800b6c8:	697a      	ldr	r2, [r7, #20]
 800b6ca:	4013      	ands	r3, r2
 800b6cc:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800b6ce:	683b      	ldr	r3, [r7, #0]
 800b6d0:	685b      	ldr	r3, [r3, #4]
 800b6d2:	091b      	lsrs	r3, r3, #4
 800b6d4:	f003 0201 	and.w	r2, r3, #1
 800b6d8:	693b      	ldr	r3, [r7, #16]
 800b6da:	fa02 f303 	lsl.w	r3, r2, r3
 800b6de:	697a      	ldr	r2, [r7, #20]
 800b6e0:	4313      	orrs	r3, r2
 800b6e2:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	697a      	ldr	r2, [r7, #20]
 800b6e8:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800b6ea:	683b      	ldr	r3, [r7, #0]
 800b6ec:	685b      	ldr	r3, [r3, #4]
 800b6ee:	2b03      	cmp	r3, #3
 800b6f0:	d017      	beq.n	800b722 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	68db      	ldr	r3, [r3, #12]
 800b6f6:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 800b6f8:	693b      	ldr	r3, [r7, #16]
 800b6fa:	005b      	lsls	r3, r3, #1
 800b6fc:	2203      	movs	r2, #3
 800b6fe:	fa02 f303 	lsl.w	r3, r2, r3
 800b702:	43db      	mvns	r3, r3
 800b704:	697a      	ldr	r2, [r7, #20]
 800b706:	4013      	ands	r3, r2
 800b708:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800b70a:	683b      	ldr	r3, [r7, #0]
 800b70c:	689a      	ldr	r2, [r3, #8]
 800b70e:	693b      	ldr	r3, [r7, #16]
 800b710:	005b      	lsls	r3, r3, #1
 800b712:	fa02 f303 	lsl.w	r3, r2, r3
 800b716:	697a      	ldr	r2, [r7, #20]
 800b718:	4313      	orrs	r3, r2
 800b71a:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	697a      	ldr	r2, [r7, #20]
 800b720:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800b722:	683b      	ldr	r3, [r7, #0]
 800b724:	685b      	ldr	r3, [r3, #4]
 800b726:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d07c      	beq.n	800b828 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800b72e:	4a47      	ldr	r2, [pc, #284]	@ (800b84c <HAL_GPIO_Init+0x29c>)
 800b730:	693b      	ldr	r3, [r7, #16]
 800b732:	089b      	lsrs	r3, r3, #2
 800b734:	3318      	adds	r3, #24
 800b736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b73a:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800b73c:	693b      	ldr	r3, [r7, #16]
 800b73e:	f003 0303 	and.w	r3, r3, #3
 800b742:	00db      	lsls	r3, r3, #3
 800b744:	220f      	movs	r2, #15
 800b746:	fa02 f303 	lsl.w	r3, r2, r3
 800b74a:	43db      	mvns	r3, r3
 800b74c:	697a      	ldr	r2, [r7, #20]
 800b74e:	4013      	ands	r3, r2
 800b750:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	0a9a      	lsrs	r2, r3, #10
 800b756:	4b3e      	ldr	r3, [pc, #248]	@ (800b850 <HAL_GPIO_Init+0x2a0>)
 800b758:	4013      	ands	r3, r2
 800b75a:	693a      	ldr	r2, [r7, #16]
 800b75c:	f002 0203 	and.w	r2, r2, #3
 800b760:	00d2      	lsls	r2, r2, #3
 800b762:	4093      	lsls	r3, r2
 800b764:	697a      	ldr	r2, [r7, #20]
 800b766:	4313      	orrs	r3, r2
 800b768:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 800b76a:	4938      	ldr	r1, [pc, #224]	@ (800b84c <HAL_GPIO_Init+0x29c>)
 800b76c:	693b      	ldr	r3, [r7, #16]
 800b76e:	089b      	lsrs	r3, r3, #2
 800b770:	3318      	adds	r3, #24
 800b772:	697a      	ldr	r2, [r7, #20]
 800b774:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800b778:	4b34      	ldr	r3, [pc, #208]	@ (800b84c <HAL_GPIO_Init+0x29c>)
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	43db      	mvns	r3, r3
 800b782:	697a      	ldr	r2, [r7, #20]
 800b784:	4013      	ands	r3, r2
 800b786:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800b788:	683b      	ldr	r3, [r7, #0]
 800b78a:	685b      	ldr	r3, [r3, #4]
 800b78c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b790:	2b00      	cmp	r3, #0
 800b792:	d003      	beq.n	800b79c <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 800b794:	697a      	ldr	r2, [r7, #20]
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	4313      	orrs	r3, r2
 800b79a:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 800b79c:	4a2b      	ldr	r2, [pc, #172]	@ (800b84c <HAL_GPIO_Init+0x29c>)
 800b79e:	697b      	ldr	r3, [r7, #20]
 800b7a0:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800b7a2:	4b2a      	ldr	r3, [pc, #168]	@ (800b84c <HAL_GPIO_Init+0x29c>)
 800b7a4:	685b      	ldr	r3, [r3, #4]
 800b7a6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	43db      	mvns	r3, r3
 800b7ac:	697a      	ldr	r2, [r7, #20]
 800b7ae:	4013      	ands	r3, r2
 800b7b0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800b7b2:	683b      	ldr	r3, [r7, #0]
 800b7b4:	685b      	ldr	r3, [r3, #4]
 800b7b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d003      	beq.n	800b7c6 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 800b7be:	697a      	ldr	r2, [r7, #20]
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	4313      	orrs	r3, r2
 800b7c4:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800b7c6:	4a21      	ldr	r2, [pc, #132]	@ (800b84c <HAL_GPIO_Init+0x29c>)
 800b7c8:	697b      	ldr	r3, [r7, #20]
 800b7ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 800b7cc:	4b1f      	ldr	r3, [pc, #124]	@ (800b84c <HAL_GPIO_Init+0x29c>)
 800b7ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b7d2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	43db      	mvns	r3, r3
 800b7d8:	697a      	ldr	r2, [r7, #20]
 800b7da:	4013      	ands	r3, r2
 800b7dc:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	685b      	ldr	r3, [r3, #4]
 800b7e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d003      	beq.n	800b7f2 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 800b7ea:	697a      	ldr	r2, [r7, #20]
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	4313      	orrs	r3, r2
 800b7f0:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800b7f2:	4a16      	ldr	r2, [pc, #88]	@ (800b84c <HAL_GPIO_Init+0x29c>)
 800b7f4:	697b      	ldr	r3, [r7, #20]
 800b7f6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800b7fa:	4b14      	ldr	r3, [pc, #80]	@ (800b84c <HAL_GPIO_Init+0x29c>)
 800b7fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b800:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	43db      	mvns	r3, r3
 800b806:	697a      	ldr	r2, [r7, #20]
 800b808:	4013      	ands	r3, r2
 800b80a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800b80c:	683b      	ldr	r3, [r7, #0]
 800b80e:	685b      	ldr	r3, [r3, #4]
 800b810:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b814:	2b00      	cmp	r3, #0
 800b816:	d003      	beq.n	800b820 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 800b818:	697a      	ldr	r2, [r7, #20]
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	4313      	orrs	r3, r2
 800b81e:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 800b820:	4a0a      	ldr	r2, [pc, #40]	@ (800b84c <HAL_GPIO_Init+0x29c>)
 800b822:	697b      	ldr	r3, [r7, #20]
 800b824:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 800b828:	693b      	ldr	r3, [r7, #16]
 800b82a:	3301      	adds	r3, #1
 800b82c:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800b82e:	683b      	ldr	r3, [r7, #0]
 800b830:	681a      	ldr	r2, [r3, #0]
 800b832:	693b      	ldr	r3, [r7, #16]
 800b834:	fa22 f303 	lsr.w	r3, r2, r3
 800b838:	2b00      	cmp	r3, #0
 800b83a:	f47f aec1 	bne.w	800b5c0 <HAL_GPIO_Init+0x10>
  }
}
 800b83e:	bf00      	nop
 800b840:	bf00      	nop
 800b842:	371c      	adds	r7, #28
 800b844:	46bd      	mov	sp, r7
 800b846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84a:	4770      	bx	lr
 800b84c:	44022000 	.word	0x44022000
 800b850:	002f7f7f 	.word	0x002f7f7f

0800b854 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b854:	b480      	push	{r7}
 800b856:	b083      	sub	sp, #12
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
 800b85c:	460b      	mov	r3, r1
 800b85e:	807b      	strh	r3, [r7, #2]
 800b860:	4613      	mov	r3, r2
 800b862:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b864:	787b      	ldrb	r3, [r7, #1]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d003      	beq.n	800b872 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800b86a:	887a      	ldrh	r2, [r7, #2]
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800b870:	e002      	b.n	800b878 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800b872:	887a      	ldrh	r2, [r7, #2]
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800b878:	bf00      	nop
 800b87a:	370c      	adds	r7, #12
 800b87c:	46bd      	mov	sp, r7
 800b87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b882:	4770      	bx	lr

0800b884 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 800b884:	b480      	push	{r7}
 800b886:	b085      	sub	sp, #20
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b88c:	2300      	movs	r3, #0
 800b88e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 800b890:	4b0b      	ldr	r3, [pc, #44]	@ (800b8c0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	f003 0301 	and.w	r3, r3, #1
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d002      	beq.n	800b8a2 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 800b89c:	2301      	movs	r3, #1
 800b89e:	73fb      	strb	r3, [r7, #15]
 800b8a0:	e007      	b.n	800b8b2 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800b8a2:	4b07      	ldr	r3, [pc, #28]	@ (800b8c0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	f023 0204 	bic.w	r2, r3, #4
 800b8aa:	4905      	ldr	r1, [pc, #20]	@ (800b8c0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	4313      	orrs	r3, r2
 800b8b0:	600b      	str	r3, [r1, #0]
  }

  return status;
 800b8b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	3714      	adds	r7, #20
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8be:	4770      	bx	lr
 800b8c0:	40030400 	.word	0x40030400

0800b8c4 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 800b8c4:	b480      	push	{r7}
 800b8c6:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 800b8c8:	4b05      	ldr	r3, [pc, #20]	@ (800b8e0 <HAL_ICACHE_Enable+0x1c>)
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	4a04      	ldr	r2, [pc, #16]	@ (800b8e0 <HAL_ICACHE_Enable+0x1c>)
 800b8ce:	f043 0301 	orr.w	r3, r3, #1
 800b8d2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800b8d4:	2300      	movs	r3, #0
}
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8de:	4770      	bx	lr
 800b8e0:	40030400 	.word	0x40030400

0800b8e4 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b084      	sub	sp, #16
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d101      	bne.n	800b8f6 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800b8f2:	2301      	movs	r3, #1
 800b8f4:	e070      	b.n	800b9d8 <HAL_IWDG_Init+0xf4>

  /* Init the low level hardware */
  hiwdg->MspInitCallback(hiwdg);
#else
  /* Init the low level hardware */
  HAL_IWDG_MspInit(hiwdg);
 800b8f6:	6878      	ldr	r0, [r7, #4]
 800b8f8:	f000 f872 	bl	800b9e0 <HAL_IWDG_MspInit>
#endif /* USE_HAL_IWDG_REGISTER_CALLBACKS */

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 800b904:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR, IWDG_WINR and EWCR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	f245 5255 	movw	r2, #21845	@ 0x5555
 800b90e:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	687a      	ldr	r2, [r7, #4]
 800b916:	6852      	ldr	r2, [r2, #4]
 800b918:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	687a      	ldr	r2, [r7, #4]
 800b920:	6892      	ldr	r2, [r2, #8]
 800b922:	609a      	str	r2, [r3, #8]

  /* Check Reload update flag, before performing any reload of the counter, else previous value
  will be taken. */
  tickstart = HAL_GetTick();
 800b924:	f7fa f844 	bl	80059b0 <HAL_GetTick>
 800b928:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_SR_RVU) != 0x00u)
 800b92a:	e00f      	b.n	800b94c <HAL_IWDG_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800b92c:	f7fa f840 	bl	80059b0 <HAL_GetTick>
 800b930:	4602      	mov	r2, r0
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	1ad3      	subs	r3, r2, r3
 800b936:	2b21      	cmp	r3, #33	@ 0x21
 800b938:	d908      	bls.n	800b94c <HAL_IWDG_Init+0x68>
    {
      if ((hiwdg->Instance->SR & IWDG_SR_RVU) != 0x00u)
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	68db      	ldr	r3, [r3, #12]
 800b940:	f003 0302 	and.w	r3, r3, #2
 800b944:	2b00      	cmp	r3, #0
 800b946:	d001      	beq.n	800b94c <HAL_IWDG_Init+0x68>
      {
        return HAL_TIMEOUT;
 800b948:	2303      	movs	r3, #3
 800b94a:	e045      	b.n	800b9d8 <HAL_IWDG_Init+0xf4>
  while ((hiwdg->Instance->SR & IWDG_SR_RVU) != 0x00u)
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	68db      	ldr	r3, [r3, #12]
 800b952:	f003 0302 	and.w	r3, r3, #2
 800b956:	2b00      	cmp	r3, #0
 800b958:	d1e8      	bne.n	800b92c <HAL_IWDG_Init+0x48>
      }
    }
  }

  if (hiwdg->Init.EWI == IWDG_EWI_DISABLE)
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	691b      	ldr	r3, [r3, #16]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d105      	bne.n	800b96e <HAL_IWDG_Init+0x8a>
  {
    /* EWI comparator value equal 0, disable the early wakeup interrupt
     * acknowledge the early wakeup interrupt in any cases. it clears the EWIF flag in SR register
     * Set Watchdog Early Wakeup Comparator to 0x00 */
    hiwdg->Instance->EWCR = IWDG_EWCR_EWIC;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800b96a:	615a      	str	r2, [r3, #20]
 800b96c:	e006      	b.n	800b97c <HAL_IWDG_Init+0x98>
  else
  {
    /* EWI comparator value different from 0, enable the early wakeup interrupt,
     * acknowledge the early wakeup interrupt in any cases. it clears the EWIF flag in SR register
     * Set Watchdog Early Wakeup Comparator value */
    hiwdg->Instance->EWCR = IWDG_EWCR_EWIE | IWDG_EWCR_EWIC | hiwdg->Init.EWI;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	691a      	ldr	r2, [r3, #16]
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 800b97a:	615a      	str	r2, [r3, #20]
  }

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800b97c:	f7fa f818 	bl	80059b0 <HAL_GetTick>
 800b980:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800b982:	e00f      	b.n	800b9a4 <HAL_IWDG_Init+0xc0>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800b984:	f7fa f814 	bl	80059b0 <HAL_GetTick>
 800b988:	4602      	mov	r2, r0
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	1ad3      	subs	r3, r2, r3
 800b98e:	2b21      	cmp	r3, #33	@ 0x21
 800b990:	d908      	bls.n	800b9a4 <HAL_IWDG_Init+0xc0>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	68db      	ldr	r3, [r3, #12]
 800b998:	f003 030f 	and.w	r3, r3, #15
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d001      	beq.n	800b9a4 <HAL_IWDG_Init+0xc0>
      {
        return HAL_TIMEOUT;
 800b9a0:	2303      	movs	r3, #3
 800b9a2:	e019      	b.n	800b9d8 <HAL_IWDG_Init+0xf4>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	68db      	ldr	r3, [r3, #12]
 800b9aa:	f003 030f 	and.w	r3, r3, #15
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d1e8      	bne.n	800b984 <HAL_IWDG_Init+0xa0>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	691a      	ldr	r2, [r3, #16]
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	68db      	ldr	r3, [r3, #12]
 800b9bc:	429a      	cmp	r2, r3
 800b9be:	d005      	beq.n	800b9cc <HAL_IWDG_Init+0xe8>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	687a      	ldr	r2, [r7, #4]
 800b9c6:	68d2      	ldr	r2, [r2, #12]
 800b9c8:	611a      	str	r2, [r3, #16]
 800b9ca:	e004      	b.n	800b9d6 <HAL_IWDG_Init+0xf2>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 800b9d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b9d6:	2300      	movs	r3, #0
}
 800b9d8:	4618      	mov	r0, r3
 800b9da:	3710      	adds	r7, #16
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	bd80      	pop	{r7, pc}

0800b9e0 <HAL_IWDG_MspInit>:
  *         to avoid multiple initialize when HAL_IWDG_Init function is called
  *         again to change parameters.
  * @retval None
  */
__weak void HAL_IWDG_MspInit(IWDG_HandleTypeDef *hiwdg)
{
 800b9e0:	b480      	push	{r7}
 800b9e2:	b083      	sub	sp, #12
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
  UNUSED(hiwdg);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_IWDG_MspInit could be implemented in the user file
   */
}
 800b9e8:	bf00      	nop
 800b9ea:	370c      	adds	r7, #12
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f2:	4770      	bx	lr

0800b9f4 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800b9f4:	b480      	push	{r7}
 800b9f6:	b083      	sub	sp, #12
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 800ba04:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800ba06:	2300      	movs	r3, #0
}
 800ba08:	4618      	mov	r0, r3
 800ba0a:	370c      	adds	r7, #12
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba12:	4770      	bx	lr

0800ba14 <HAL_PWR_EnterSLEEPMode>:
  * @note   When WFI entry is used, ticks interrupt must be disabled to avoid
  *         unexpected CPU wake up.
  * @retval None.
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 800ba14:	b480      	push	{r7}
 800ba16:	b083      	sub	sp, #12
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
 800ba1c:	460b      	mov	r3, r1
 800ba1e:	70fb      	strb	r3, [r7, #3]

  /* Check the parameter */
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800ba20:	4b09      	ldr	r3, [pc, #36]	@ (800ba48 <HAL_PWR_EnterSLEEPMode+0x34>)
 800ba22:	691b      	ldr	r3, [r3, #16]
 800ba24:	4a08      	ldr	r2, [pc, #32]	@ (800ba48 <HAL_PWR_EnterSLEEPMode+0x34>)
 800ba26:	f023 0304 	bic.w	r3, r3, #4
 800ba2a:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry */
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800ba2c:	78fb      	ldrb	r3, [r7, #3]
 800ba2e:	2b01      	cmp	r3, #1
 800ba30:	d101      	bne.n	800ba36 <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Wait For Interrupt Request */
    __WFI();
 800ba32:	bf30      	wfi
    /* Wait For Event Request */
    __SEV();
    __WFE();
    __WFE();
  }
}
 800ba34:	e002      	b.n	800ba3c <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 800ba36:	bf40      	sev
    __WFE();
 800ba38:	bf20      	wfe
    __WFE();
 800ba3a:	bf20      	wfe
}
 800ba3c:	bf00      	nop
 800ba3e:	370c      	adds	r7, #12
 800ba40:	46bd      	mov	sp, r7
 800ba42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba46:	4770      	bx	lr
 800ba48:	e000ed00 	.word	0xe000ed00

0800ba4c <HAL_PWR_EnableSleepOnExit>:
  *         Setting this bit is useful when the processor is expected to run
  *         only on interruptions handling.
  * @retval None.
  */
void HAL_PWR_EnableSleepOnExit(void)
{
 800ba4c:	b480      	push	{r7}
 800ba4e:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex-M33 System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPONEXIT_Msk);
 800ba50:	4b05      	ldr	r3, [pc, #20]	@ (800ba68 <HAL_PWR_EnableSleepOnExit+0x1c>)
 800ba52:	691b      	ldr	r3, [r3, #16]
 800ba54:	4a04      	ldr	r2, [pc, #16]	@ (800ba68 <HAL_PWR_EnableSleepOnExit+0x1c>)
 800ba56:	f043 0302 	orr.w	r3, r3, #2
 800ba5a:	6113      	str	r3, [r2, #16]
}
 800ba5c:	bf00      	nop
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba64:	4770      	bx	lr
 800ba66:	bf00      	nop
 800ba68:	e000ed00 	.word	0xe000ed00

0800ba6c <HAL_PWR_DisableSleepOnExit>:
  * @note   Clears SLEEPONEXIT bit of SCR register. When this bit is set, the
  *         processor re-enters SLEEP mode when an interruption handling is over.
  * @retval None.
  */
void HAL_PWR_DisableSleepOnExit(void)
{
 800ba6c:	b480      	push	{r7}
 800ba6e:	af00      	add	r7, sp, #0
  /* Clear SLEEPONEXIT bit of Cortex-M33 System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPONEXIT_Msk);
 800ba70:	4b05      	ldr	r3, [pc, #20]	@ (800ba88 <HAL_PWR_DisableSleepOnExit+0x1c>)
 800ba72:	691b      	ldr	r3, [r3, #16]
 800ba74:	4a04      	ldr	r2, [pc, #16]	@ (800ba88 <HAL_PWR_DisableSleepOnExit+0x1c>)
 800ba76:	f023 0302 	bic.w	r3, r3, #2
 800ba7a:	6113      	str	r3, [r2, #16]
}
 800ba7c:	bf00      	nop
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba84:	4770      	bx	lr
 800ba86:	bf00      	nop
 800ba88:	e000ed00 	.word	0xe000ed00

0800ba8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b088      	sub	sp, #32
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d102      	bne.n	800baa0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800ba9a:	2301      	movs	r3, #1
 800ba9c:	f000 bc28 	b.w	800c2f0 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800baa0:	4b94      	ldr	r3, [pc, #592]	@ (800bcf4 <HAL_RCC_OscConfig+0x268>)
 800baa2:	69db      	ldr	r3, [r3, #28]
 800baa4:	f003 0318 	and.w	r3, r3, #24
 800baa8:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 800baaa:	4b92      	ldr	r3, [pc, #584]	@ (800bcf4 <HAL_RCC_OscConfig+0x268>)
 800baac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800baae:	f003 0303 	and.w	r3, r3, #3
 800bab2:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	f003 0310 	and.w	r3, r3, #16
 800babc:	2b00      	cmp	r3, #0
 800babe:	d05b      	beq.n	800bb78 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 800bac0:	69fb      	ldr	r3, [r7, #28]
 800bac2:	2b08      	cmp	r3, #8
 800bac4:	d005      	beq.n	800bad2 <HAL_RCC_OscConfig+0x46>
 800bac6:	69fb      	ldr	r3, [r7, #28]
 800bac8:	2b18      	cmp	r3, #24
 800baca:	d114      	bne.n	800baf6 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 800bacc:	69bb      	ldr	r3, [r7, #24]
 800bace:	2b02      	cmp	r3, #2
 800bad0:	d111      	bne.n	800baf6 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	69db      	ldr	r3, [r3, #28]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d102      	bne.n	800bae0 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800bada:	2301      	movs	r3, #1
 800badc:	f000 bc08 	b.w	800c2f0 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 800bae0:	4b84      	ldr	r3, [pc, #528]	@ (800bcf4 <HAL_RCC_OscConfig+0x268>)
 800bae2:	699b      	ldr	r3, [r3, #24]
 800bae4:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	6a1b      	ldr	r3, [r3, #32]
 800baec:	041b      	lsls	r3, r3, #16
 800baee:	4981      	ldr	r1, [pc, #516]	@ (800bcf4 <HAL_RCC_OscConfig+0x268>)
 800baf0:	4313      	orrs	r3, r2
 800baf2:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800baf4:	e040      	b.n	800bb78 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	69db      	ldr	r3, [r3, #28]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d023      	beq.n	800bb46 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800bafe:	4b7d      	ldr	r3, [pc, #500]	@ (800bcf4 <HAL_RCC_OscConfig+0x268>)
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	4a7c      	ldr	r2, [pc, #496]	@ (800bcf4 <HAL_RCC_OscConfig+0x268>)
 800bb04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bb08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb0a:	f7f9 ff51 	bl	80059b0 <HAL_GetTick>
 800bb0e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800bb10:	e008      	b.n	800bb24 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800bb12:	f7f9 ff4d 	bl	80059b0 <HAL_GetTick>
 800bb16:	4602      	mov	r2, r0
 800bb18:	697b      	ldr	r3, [r7, #20]
 800bb1a:	1ad3      	subs	r3, r2, r3
 800bb1c:	2b02      	cmp	r3, #2
 800bb1e:	d901      	bls.n	800bb24 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 800bb20:	2303      	movs	r3, #3
 800bb22:	e3e5      	b.n	800c2f0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800bb24:	4b73      	ldr	r3, [pc, #460]	@ (800bcf4 <HAL_RCC_OscConfig+0x268>)
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d0f0      	beq.n	800bb12 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 800bb30:	4b70      	ldr	r3, [pc, #448]	@ (800bcf4 <HAL_RCC_OscConfig+0x268>)
 800bb32:	699b      	ldr	r3, [r3, #24]
 800bb34:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	6a1b      	ldr	r3, [r3, #32]
 800bb3c:	041b      	lsls	r3, r3, #16
 800bb3e:	496d      	ldr	r1, [pc, #436]	@ (800bcf4 <HAL_RCC_OscConfig+0x268>)
 800bb40:	4313      	orrs	r3, r2
 800bb42:	618b      	str	r3, [r1, #24]
 800bb44:	e018      	b.n	800bb78 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800bb46:	4b6b      	ldr	r3, [pc, #428]	@ (800bcf4 <HAL_RCC_OscConfig+0x268>)
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	4a6a      	ldr	r2, [pc, #424]	@ (800bcf4 <HAL_RCC_OscConfig+0x268>)
 800bb4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bb50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb52:	f7f9 ff2d 	bl	80059b0 <HAL_GetTick>
 800bb56:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 800bb58:	e008      	b.n	800bb6c <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800bb5a:	f7f9 ff29 	bl	80059b0 <HAL_GetTick>
 800bb5e:	4602      	mov	r2, r0
 800bb60:	697b      	ldr	r3, [r7, #20]
 800bb62:	1ad3      	subs	r3, r2, r3
 800bb64:	2b02      	cmp	r3, #2
 800bb66:	d901      	bls.n	800bb6c <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 800bb68:	2303      	movs	r3, #3
 800bb6a:	e3c1      	b.n	800c2f0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 800bb6c:	4b61      	ldr	r3, [pc, #388]	@ (800bcf4 <HAL_RCC_OscConfig+0x268>)
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d1f0      	bne.n	800bb5a <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	f003 0301 	and.w	r3, r3, #1
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	f000 80a0 	beq.w	800bcc6 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800bb86:	69fb      	ldr	r3, [r7, #28]
 800bb88:	2b10      	cmp	r3, #16
 800bb8a:	d005      	beq.n	800bb98 <HAL_RCC_OscConfig+0x10c>
 800bb8c:	69fb      	ldr	r3, [r7, #28]
 800bb8e:	2b18      	cmp	r3, #24
 800bb90:	d109      	bne.n	800bba6 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 800bb92:	69bb      	ldr	r3, [r7, #24]
 800bb94:	2b03      	cmp	r3, #3
 800bb96:	d106      	bne.n	800bba6 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	685b      	ldr	r3, [r3, #4]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	f040 8092 	bne.w	800bcc6 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 800bba2:	2301      	movs	r3, #1
 800bba4:	e3a4      	b.n	800c2f0 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	685b      	ldr	r3, [r3, #4]
 800bbaa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bbae:	d106      	bne.n	800bbbe <HAL_RCC_OscConfig+0x132>
 800bbb0:	4b50      	ldr	r3, [pc, #320]	@ (800bcf4 <HAL_RCC_OscConfig+0x268>)
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	4a4f      	ldr	r2, [pc, #316]	@ (800bcf4 <HAL_RCC_OscConfig+0x268>)
 800bbb6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bbba:	6013      	str	r3, [r2, #0]
 800bbbc:	e058      	b.n	800bc70 <HAL_RCC_OscConfig+0x1e4>
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	685b      	ldr	r3, [r3, #4]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d112      	bne.n	800bbec <HAL_RCC_OscConfig+0x160>
 800bbc6:	4b4b      	ldr	r3, [pc, #300]	@ (800bcf4 <HAL_RCC_OscConfig+0x268>)
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	4a4a      	ldr	r2, [pc, #296]	@ (800bcf4 <HAL_RCC_OscConfig+0x268>)
 800bbcc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bbd0:	6013      	str	r3, [r2, #0]
 800bbd2:	4b48      	ldr	r3, [pc, #288]	@ (800bcf4 <HAL_RCC_OscConfig+0x268>)
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	4a47      	ldr	r2, [pc, #284]	@ (800bcf4 <HAL_RCC_OscConfig+0x268>)
 800bbd8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800bbdc:	6013      	str	r3, [r2, #0]
 800bbde:	4b45      	ldr	r3, [pc, #276]	@ (800bcf4 <HAL_RCC_OscConfig+0x268>)
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	4a44      	ldr	r2, [pc, #272]	@ (800bcf4 <HAL_RCC_OscConfig+0x268>)
 800bbe4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bbe8:	6013      	str	r3, [r2, #0]
 800bbea:	e041      	b.n	800bc70 <HAL_RCC_OscConfig+0x1e4>
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	685b      	ldr	r3, [r3, #4]
 800bbf0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800bbf4:	d112      	bne.n	800bc1c <HAL_RCC_OscConfig+0x190>
 800bbf6:	4b3f      	ldr	r3, [pc, #252]	@ (800bcf4 <HAL_RCC_OscConfig+0x268>)
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	4a3e      	ldr	r2, [pc, #248]	@ (800bcf4 <HAL_RCC_OscConfig+0x268>)
 800bbfc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800bc00:	6013      	str	r3, [r2, #0]
 800bc02:	4b3c      	ldr	r3, [pc, #240]	@ (800bcf4 <HAL_RCC_OscConfig+0x268>)
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	4a3b      	ldr	r2, [pc, #236]	@ (800bcf4 <HAL_RCC_OscConfig+0x268>)
 800bc08:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800bc0c:	6013      	str	r3, [r2, #0]
 800bc0e:	4b39      	ldr	r3, [pc, #228]	@ (800bcf4 <HAL_RCC_OscConfig+0x268>)
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	4a38      	ldr	r2, [pc, #224]	@ (800bcf4 <HAL_RCC_OscConfig+0x268>)
 800bc14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bc18:	6013      	str	r3, [r2, #0]
 800bc1a:	e029      	b.n	800bc70 <HAL_RCC_OscConfig+0x1e4>
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	685b      	ldr	r3, [r3, #4]
 800bc20:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800bc24:	d112      	bne.n	800bc4c <HAL_RCC_OscConfig+0x1c0>
 800bc26:	4b33      	ldr	r3, [pc, #204]	@ (800bcf4 <HAL_RCC_OscConfig+0x268>)
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	4a32      	ldr	r2, [pc, #200]	@ (800bcf4 <HAL_RCC_OscConfig+0x268>)
 800bc2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800bc30:	6013      	str	r3, [r2, #0]
 800bc32:	4b30      	ldr	r3, [pc, #192]	@ (800bcf4 <HAL_RCC_OscConfig+0x268>)
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	4a2f      	ldr	r2, [pc, #188]	@ (800bcf4 <HAL_RCC_OscConfig+0x268>)
 800bc38:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bc3c:	6013      	str	r3, [r2, #0]
 800bc3e:	4b2d      	ldr	r3, [pc, #180]	@ (800bcf4 <HAL_RCC_OscConfig+0x268>)
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	4a2c      	ldr	r2, [pc, #176]	@ (800bcf4 <HAL_RCC_OscConfig+0x268>)
 800bc44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bc48:	6013      	str	r3, [r2, #0]
 800bc4a:	e011      	b.n	800bc70 <HAL_RCC_OscConfig+0x1e4>
 800bc4c:	4b29      	ldr	r3, [pc, #164]	@ (800bcf4 <HAL_RCC_OscConfig+0x268>)
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	4a28      	ldr	r2, [pc, #160]	@ (800bcf4 <HAL_RCC_OscConfig+0x268>)
 800bc52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bc56:	6013      	str	r3, [r2, #0]
 800bc58:	4b26      	ldr	r3, [pc, #152]	@ (800bcf4 <HAL_RCC_OscConfig+0x268>)
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	4a25      	ldr	r2, [pc, #148]	@ (800bcf4 <HAL_RCC_OscConfig+0x268>)
 800bc5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bc62:	6013      	str	r3, [r2, #0]
 800bc64:	4b23      	ldr	r3, [pc, #140]	@ (800bcf4 <HAL_RCC_OscConfig+0x268>)
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	4a22      	ldr	r2, [pc, #136]	@ (800bcf4 <HAL_RCC_OscConfig+0x268>)
 800bc6a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800bc6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	685b      	ldr	r3, [r3, #4]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d013      	beq.n	800bca0 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bc78:	f7f9 fe9a 	bl	80059b0 <HAL_GetTick>
 800bc7c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800bc7e:	e008      	b.n	800bc92 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800bc80:	f7f9 fe96 	bl	80059b0 <HAL_GetTick>
 800bc84:	4602      	mov	r2, r0
 800bc86:	697b      	ldr	r3, [r7, #20]
 800bc88:	1ad3      	subs	r3, r2, r3
 800bc8a:	2b64      	cmp	r3, #100	@ 0x64
 800bc8c:	d901      	bls.n	800bc92 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800bc8e:	2303      	movs	r3, #3
 800bc90:	e32e      	b.n	800c2f0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800bc92:	4b18      	ldr	r3, [pc, #96]	@ (800bcf4 <HAL_RCC_OscConfig+0x268>)
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d0f0      	beq.n	800bc80 <HAL_RCC_OscConfig+0x1f4>
 800bc9e:	e012      	b.n	800bcc6 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bca0:	f7f9 fe86 	bl	80059b0 <HAL_GetTick>
 800bca4:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800bca6:	e008      	b.n	800bcba <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800bca8:	f7f9 fe82 	bl	80059b0 <HAL_GetTick>
 800bcac:	4602      	mov	r2, r0
 800bcae:	697b      	ldr	r3, [r7, #20]
 800bcb0:	1ad3      	subs	r3, r2, r3
 800bcb2:	2b64      	cmp	r3, #100	@ 0x64
 800bcb4:	d901      	bls.n	800bcba <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 800bcb6:	2303      	movs	r3, #3
 800bcb8:	e31a      	b.n	800c2f0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800bcba:	4b0e      	ldr	r3, [pc, #56]	@ (800bcf4 <HAL_RCC_OscConfig+0x268>)
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d1f0      	bne.n	800bca8 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	f003 0302 	and.w	r3, r3, #2
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	f000 809a 	beq.w	800be08 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800bcd4:	69fb      	ldr	r3, [r7, #28]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d005      	beq.n	800bce6 <HAL_RCC_OscConfig+0x25a>
 800bcda:	69fb      	ldr	r3, [r7, #28]
 800bcdc:	2b18      	cmp	r3, #24
 800bcde:	d149      	bne.n	800bd74 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 800bce0:	69bb      	ldr	r3, [r7, #24]
 800bce2:	2b01      	cmp	r3, #1
 800bce4:	d146      	bne.n	800bd74 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	68db      	ldr	r3, [r3, #12]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d104      	bne.n	800bcf8 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 800bcee:	2301      	movs	r3, #1
 800bcf0:	e2fe      	b.n	800c2f0 <HAL_RCC_OscConfig+0x864>
 800bcf2:	bf00      	nop
 800bcf4:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800bcf8:	69fb      	ldr	r3, [r7, #28]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d11c      	bne.n	800bd38 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 800bcfe:	4b9a      	ldr	r3, [pc, #616]	@ (800bf68 <HAL_RCC_OscConfig+0x4dc>)
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	f003 0218 	and.w	r2, r3, #24
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	691b      	ldr	r3, [r3, #16]
 800bd0a:	429a      	cmp	r2, r3
 800bd0c:	d014      	beq.n	800bd38 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 800bd0e:	4b96      	ldr	r3, [pc, #600]	@ (800bf68 <HAL_RCC_OscConfig+0x4dc>)
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	f023 0218 	bic.w	r2, r3, #24
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	691b      	ldr	r3, [r3, #16]
 800bd1a:	4993      	ldr	r1, [pc, #588]	@ (800bf68 <HAL_RCC_OscConfig+0x4dc>)
 800bd1c:	4313      	orrs	r3, r2
 800bd1e:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 800bd20:	f000 fdd0 	bl	800c8c4 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800bd24:	4b91      	ldr	r3, [pc, #580]	@ (800bf6c <HAL_RCC_OscConfig+0x4e0>)
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	4618      	mov	r0, r3
 800bd2a:	f7f9 fdb7 	bl	800589c <HAL_InitTick>
 800bd2e:	4603      	mov	r3, r0
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d001      	beq.n	800bd38 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 800bd34:	2301      	movs	r3, #1
 800bd36:	e2db      	b.n	800c2f0 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd38:	f7f9 fe3a 	bl	80059b0 <HAL_GetTick>
 800bd3c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800bd3e:	e008      	b.n	800bd52 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800bd40:	f7f9 fe36 	bl	80059b0 <HAL_GetTick>
 800bd44:	4602      	mov	r2, r0
 800bd46:	697b      	ldr	r3, [r7, #20]
 800bd48:	1ad3      	subs	r3, r2, r3
 800bd4a:	2b02      	cmp	r3, #2
 800bd4c:	d901      	bls.n	800bd52 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800bd4e:	2303      	movs	r3, #3
 800bd50:	e2ce      	b.n	800c2f0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800bd52:	4b85      	ldr	r3, [pc, #532]	@ (800bf68 <HAL_RCC_OscConfig+0x4dc>)
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	f003 0302 	and.w	r3, r3, #2
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d0f0      	beq.n	800bd40 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800bd5e:	4b82      	ldr	r3, [pc, #520]	@ (800bf68 <HAL_RCC_OscConfig+0x4dc>)
 800bd60:	691b      	ldr	r3, [r3, #16]
 800bd62:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	695b      	ldr	r3, [r3, #20]
 800bd6a:	041b      	lsls	r3, r3, #16
 800bd6c:	497e      	ldr	r1, [pc, #504]	@ (800bf68 <HAL_RCC_OscConfig+0x4dc>)
 800bd6e:	4313      	orrs	r3, r2
 800bd70:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800bd72:	e049      	b.n	800be08 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	68db      	ldr	r3, [r3, #12]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d02c      	beq.n	800bdd6 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 800bd7c:	4b7a      	ldr	r3, [pc, #488]	@ (800bf68 <HAL_RCC_OscConfig+0x4dc>)
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	f023 0218 	bic.w	r2, r3, #24
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	691b      	ldr	r3, [r3, #16]
 800bd88:	4977      	ldr	r1, [pc, #476]	@ (800bf68 <HAL_RCC_OscConfig+0x4dc>)
 800bd8a:	4313      	orrs	r3, r2
 800bd8c:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 800bd8e:	4b76      	ldr	r3, [pc, #472]	@ (800bf68 <HAL_RCC_OscConfig+0x4dc>)
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	4a75      	ldr	r2, [pc, #468]	@ (800bf68 <HAL_RCC_OscConfig+0x4dc>)
 800bd94:	f043 0301 	orr.w	r3, r3, #1
 800bd98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd9a:	f7f9 fe09 	bl	80059b0 <HAL_GetTick>
 800bd9e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800bda0:	e008      	b.n	800bdb4 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800bda2:	f7f9 fe05 	bl	80059b0 <HAL_GetTick>
 800bda6:	4602      	mov	r2, r0
 800bda8:	697b      	ldr	r3, [r7, #20]
 800bdaa:	1ad3      	subs	r3, r2, r3
 800bdac:	2b02      	cmp	r3, #2
 800bdae:	d901      	bls.n	800bdb4 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 800bdb0:	2303      	movs	r3, #3
 800bdb2:	e29d      	b.n	800c2f0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800bdb4:	4b6c      	ldr	r3, [pc, #432]	@ (800bf68 <HAL_RCC_OscConfig+0x4dc>)
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	f003 0302 	and.w	r3, r3, #2
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d0f0      	beq.n	800bda2 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800bdc0:	4b69      	ldr	r3, [pc, #420]	@ (800bf68 <HAL_RCC_OscConfig+0x4dc>)
 800bdc2:	691b      	ldr	r3, [r3, #16]
 800bdc4:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	695b      	ldr	r3, [r3, #20]
 800bdcc:	041b      	lsls	r3, r3, #16
 800bdce:	4966      	ldr	r1, [pc, #408]	@ (800bf68 <HAL_RCC_OscConfig+0x4dc>)
 800bdd0:	4313      	orrs	r3, r2
 800bdd2:	610b      	str	r3, [r1, #16]
 800bdd4:	e018      	b.n	800be08 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bdd6:	4b64      	ldr	r3, [pc, #400]	@ (800bf68 <HAL_RCC_OscConfig+0x4dc>)
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	4a63      	ldr	r2, [pc, #396]	@ (800bf68 <HAL_RCC_OscConfig+0x4dc>)
 800bddc:	f023 0301 	bic.w	r3, r3, #1
 800bde0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bde2:	f7f9 fde5 	bl	80059b0 <HAL_GetTick>
 800bde6:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800bde8:	e008      	b.n	800bdfc <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800bdea:	f7f9 fde1 	bl	80059b0 <HAL_GetTick>
 800bdee:	4602      	mov	r2, r0
 800bdf0:	697b      	ldr	r3, [r7, #20]
 800bdf2:	1ad3      	subs	r3, r2, r3
 800bdf4:	2b02      	cmp	r3, #2
 800bdf6:	d901      	bls.n	800bdfc <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 800bdf8:	2303      	movs	r3, #3
 800bdfa:	e279      	b.n	800c2f0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800bdfc:	4b5a      	ldr	r3, [pc, #360]	@ (800bf68 <HAL_RCC_OscConfig+0x4dc>)
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	f003 0302 	and.w	r3, r3, #2
 800be04:	2b00      	cmp	r3, #0
 800be06:	d1f0      	bne.n	800bdea <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	f003 0308 	and.w	r3, r3, #8
 800be10:	2b00      	cmp	r3, #0
 800be12:	d03c      	beq.n	800be8e <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	699b      	ldr	r3, [r3, #24]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d01c      	beq.n	800be56 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800be1c:	4b52      	ldr	r3, [pc, #328]	@ (800bf68 <HAL_RCC_OscConfig+0x4dc>)
 800be1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800be22:	4a51      	ldr	r2, [pc, #324]	@ (800bf68 <HAL_RCC_OscConfig+0x4dc>)
 800be24:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800be28:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800be2c:	f7f9 fdc0 	bl	80059b0 <HAL_GetTick>
 800be30:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800be32:	e008      	b.n	800be46 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800be34:	f7f9 fdbc 	bl	80059b0 <HAL_GetTick>
 800be38:	4602      	mov	r2, r0
 800be3a:	697b      	ldr	r3, [r7, #20]
 800be3c:	1ad3      	subs	r3, r2, r3
 800be3e:	2b02      	cmp	r3, #2
 800be40:	d901      	bls.n	800be46 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 800be42:	2303      	movs	r3, #3
 800be44:	e254      	b.n	800c2f0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800be46:	4b48      	ldr	r3, [pc, #288]	@ (800bf68 <HAL_RCC_OscConfig+0x4dc>)
 800be48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800be4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800be50:	2b00      	cmp	r3, #0
 800be52:	d0ef      	beq.n	800be34 <HAL_RCC_OscConfig+0x3a8>
 800be54:	e01b      	b.n	800be8e <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800be56:	4b44      	ldr	r3, [pc, #272]	@ (800bf68 <HAL_RCC_OscConfig+0x4dc>)
 800be58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800be5c:	4a42      	ldr	r2, [pc, #264]	@ (800bf68 <HAL_RCC_OscConfig+0x4dc>)
 800be5e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800be62:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800be66:	f7f9 fda3 	bl	80059b0 <HAL_GetTick>
 800be6a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800be6c:	e008      	b.n	800be80 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800be6e:	f7f9 fd9f 	bl	80059b0 <HAL_GetTick>
 800be72:	4602      	mov	r2, r0
 800be74:	697b      	ldr	r3, [r7, #20]
 800be76:	1ad3      	subs	r3, r2, r3
 800be78:	2b02      	cmp	r3, #2
 800be7a:	d901      	bls.n	800be80 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800be7c:	2303      	movs	r3, #3
 800be7e:	e237      	b.n	800c2f0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800be80:	4b39      	ldr	r3, [pc, #228]	@ (800bf68 <HAL_RCC_OscConfig+0x4dc>)
 800be82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800be86:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d1ef      	bne.n	800be6e <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	f003 0304 	and.w	r3, r3, #4
 800be96:	2b00      	cmp	r3, #0
 800be98:	f000 80d2 	beq.w	800c040 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800be9c:	4b34      	ldr	r3, [pc, #208]	@ (800bf70 <HAL_RCC_OscConfig+0x4e4>)
 800be9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bea0:	f003 0301 	and.w	r3, r3, #1
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d118      	bne.n	800beda <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 800bea8:	4b31      	ldr	r3, [pc, #196]	@ (800bf70 <HAL_RCC_OscConfig+0x4e4>)
 800beaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800beac:	4a30      	ldr	r2, [pc, #192]	@ (800bf70 <HAL_RCC_OscConfig+0x4e4>)
 800beae:	f043 0301 	orr.w	r3, r3, #1
 800beb2:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800beb4:	f7f9 fd7c 	bl	80059b0 <HAL_GetTick>
 800beb8:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800beba:	e008      	b.n	800bece <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bebc:	f7f9 fd78 	bl	80059b0 <HAL_GetTick>
 800bec0:	4602      	mov	r2, r0
 800bec2:	697b      	ldr	r3, [r7, #20]
 800bec4:	1ad3      	subs	r3, r2, r3
 800bec6:	2b02      	cmp	r3, #2
 800bec8:	d901      	bls.n	800bece <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 800beca:	2303      	movs	r3, #3
 800becc:	e210      	b.n	800c2f0 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800bece:	4b28      	ldr	r3, [pc, #160]	@ (800bf70 <HAL_RCC_OscConfig+0x4e4>)
 800bed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bed2:	f003 0301 	and.w	r3, r3, #1
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d0f0      	beq.n	800bebc <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	689b      	ldr	r3, [r3, #8]
 800bede:	2b01      	cmp	r3, #1
 800bee0:	d108      	bne.n	800bef4 <HAL_RCC_OscConfig+0x468>
 800bee2:	4b21      	ldr	r3, [pc, #132]	@ (800bf68 <HAL_RCC_OscConfig+0x4dc>)
 800bee4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bee8:	4a1f      	ldr	r2, [pc, #124]	@ (800bf68 <HAL_RCC_OscConfig+0x4dc>)
 800beea:	f043 0301 	orr.w	r3, r3, #1
 800beee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800bef2:	e074      	b.n	800bfde <HAL_RCC_OscConfig+0x552>
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	689b      	ldr	r3, [r3, #8]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d118      	bne.n	800bf2e <HAL_RCC_OscConfig+0x4a2>
 800befc:	4b1a      	ldr	r3, [pc, #104]	@ (800bf68 <HAL_RCC_OscConfig+0x4dc>)
 800befe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bf02:	4a19      	ldr	r2, [pc, #100]	@ (800bf68 <HAL_RCC_OscConfig+0x4dc>)
 800bf04:	f023 0301 	bic.w	r3, r3, #1
 800bf08:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800bf0c:	4b16      	ldr	r3, [pc, #88]	@ (800bf68 <HAL_RCC_OscConfig+0x4dc>)
 800bf0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bf12:	4a15      	ldr	r2, [pc, #84]	@ (800bf68 <HAL_RCC_OscConfig+0x4dc>)
 800bf14:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bf18:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800bf1c:	4b12      	ldr	r3, [pc, #72]	@ (800bf68 <HAL_RCC_OscConfig+0x4dc>)
 800bf1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bf22:	4a11      	ldr	r2, [pc, #68]	@ (800bf68 <HAL_RCC_OscConfig+0x4dc>)
 800bf24:	f023 0304 	bic.w	r3, r3, #4
 800bf28:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800bf2c:	e057      	b.n	800bfde <HAL_RCC_OscConfig+0x552>
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	689b      	ldr	r3, [r3, #8]
 800bf32:	2b05      	cmp	r3, #5
 800bf34:	d11e      	bne.n	800bf74 <HAL_RCC_OscConfig+0x4e8>
 800bf36:	4b0c      	ldr	r3, [pc, #48]	@ (800bf68 <HAL_RCC_OscConfig+0x4dc>)
 800bf38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bf3c:	4a0a      	ldr	r2, [pc, #40]	@ (800bf68 <HAL_RCC_OscConfig+0x4dc>)
 800bf3e:	f043 0304 	orr.w	r3, r3, #4
 800bf42:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800bf46:	4b08      	ldr	r3, [pc, #32]	@ (800bf68 <HAL_RCC_OscConfig+0x4dc>)
 800bf48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bf4c:	4a06      	ldr	r2, [pc, #24]	@ (800bf68 <HAL_RCC_OscConfig+0x4dc>)
 800bf4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bf52:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800bf56:	4b04      	ldr	r3, [pc, #16]	@ (800bf68 <HAL_RCC_OscConfig+0x4dc>)
 800bf58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bf5c:	4a02      	ldr	r2, [pc, #8]	@ (800bf68 <HAL_RCC_OscConfig+0x4dc>)
 800bf5e:	f043 0301 	orr.w	r3, r3, #1
 800bf62:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800bf66:	e03a      	b.n	800bfde <HAL_RCC_OscConfig+0x552>
 800bf68:	44020c00 	.word	0x44020c00
 800bf6c:	20000078 	.word	0x20000078
 800bf70:	44020800 	.word	0x44020800
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	689b      	ldr	r3, [r3, #8]
 800bf78:	2b85      	cmp	r3, #133	@ 0x85
 800bf7a:	d118      	bne.n	800bfae <HAL_RCC_OscConfig+0x522>
 800bf7c:	4ba2      	ldr	r3, [pc, #648]	@ (800c208 <HAL_RCC_OscConfig+0x77c>)
 800bf7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bf82:	4aa1      	ldr	r2, [pc, #644]	@ (800c208 <HAL_RCC_OscConfig+0x77c>)
 800bf84:	f043 0304 	orr.w	r3, r3, #4
 800bf88:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800bf8c:	4b9e      	ldr	r3, [pc, #632]	@ (800c208 <HAL_RCC_OscConfig+0x77c>)
 800bf8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bf92:	4a9d      	ldr	r2, [pc, #628]	@ (800c208 <HAL_RCC_OscConfig+0x77c>)
 800bf94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf98:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800bf9c:	4b9a      	ldr	r3, [pc, #616]	@ (800c208 <HAL_RCC_OscConfig+0x77c>)
 800bf9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bfa2:	4a99      	ldr	r2, [pc, #612]	@ (800c208 <HAL_RCC_OscConfig+0x77c>)
 800bfa4:	f043 0301 	orr.w	r3, r3, #1
 800bfa8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800bfac:	e017      	b.n	800bfde <HAL_RCC_OscConfig+0x552>
 800bfae:	4b96      	ldr	r3, [pc, #600]	@ (800c208 <HAL_RCC_OscConfig+0x77c>)
 800bfb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bfb4:	4a94      	ldr	r2, [pc, #592]	@ (800c208 <HAL_RCC_OscConfig+0x77c>)
 800bfb6:	f023 0301 	bic.w	r3, r3, #1
 800bfba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800bfbe:	4b92      	ldr	r3, [pc, #584]	@ (800c208 <HAL_RCC_OscConfig+0x77c>)
 800bfc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bfc4:	4a90      	ldr	r2, [pc, #576]	@ (800c208 <HAL_RCC_OscConfig+0x77c>)
 800bfc6:	f023 0304 	bic.w	r3, r3, #4
 800bfca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800bfce:	4b8e      	ldr	r3, [pc, #568]	@ (800c208 <HAL_RCC_OscConfig+0x77c>)
 800bfd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bfd4:	4a8c      	ldr	r2, [pc, #560]	@ (800c208 <HAL_RCC_OscConfig+0x77c>)
 800bfd6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bfda:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	689b      	ldr	r3, [r3, #8]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d016      	beq.n	800c014 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bfe6:	f7f9 fce3 	bl	80059b0 <HAL_GetTick>
 800bfea:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bfec:	e00a      	b.n	800c004 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bfee:	f7f9 fcdf 	bl	80059b0 <HAL_GetTick>
 800bff2:	4602      	mov	r2, r0
 800bff4:	697b      	ldr	r3, [r7, #20]
 800bff6:	1ad3      	subs	r3, r2, r3
 800bff8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bffc:	4293      	cmp	r3, r2
 800bffe:	d901      	bls.n	800c004 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 800c000:	2303      	movs	r3, #3
 800c002:	e175      	b.n	800c2f0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c004:	4b80      	ldr	r3, [pc, #512]	@ (800c208 <HAL_RCC_OscConfig+0x77c>)
 800c006:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c00a:	f003 0302 	and.w	r3, r3, #2
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d0ed      	beq.n	800bfee <HAL_RCC_OscConfig+0x562>
 800c012:	e015      	b.n	800c040 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c014:	f7f9 fccc 	bl	80059b0 <HAL_GetTick>
 800c018:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c01a:	e00a      	b.n	800c032 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c01c:	f7f9 fcc8 	bl	80059b0 <HAL_GetTick>
 800c020:	4602      	mov	r2, r0
 800c022:	697b      	ldr	r3, [r7, #20]
 800c024:	1ad3      	subs	r3, r2, r3
 800c026:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c02a:	4293      	cmp	r3, r2
 800c02c:	d901      	bls.n	800c032 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 800c02e:	2303      	movs	r3, #3
 800c030:	e15e      	b.n	800c2f0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c032:	4b75      	ldr	r3, [pc, #468]	@ (800c208 <HAL_RCC_OscConfig+0x77c>)
 800c034:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c038:	f003 0302 	and.w	r3, r3, #2
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d1ed      	bne.n	800c01c <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	f003 0320 	and.w	r3, r3, #32
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d036      	beq.n	800c0ba <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c050:	2b00      	cmp	r3, #0
 800c052:	d019      	beq.n	800c088 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800c054:	4b6c      	ldr	r3, [pc, #432]	@ (800c208 <HAL_RCC_OscConfig+0x77c>)
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	4a6b      	ldr	r2, [pc, #428]	@ (800c208 <HAL_RCC_OscConfig+0x77c>)
 800c05a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800c05e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c060:	f7f9 fca6 	bl	80059b0 <HAL_GetTick>
 800c064:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800c066:	e008      	b.n	800c07a <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 800c068:	f7f9 fca2 	bl	80059b0 <HAL_GetTick>
 800c06c:	4602      	mov	r2, r0
 800c06e:	697b      	ldr	r3, [r7, #20]
 800c070:	1ad3      	subs	r3, r2, r3
 800c072:	2b02      	cmp	r3, #2
 800c074:	d901      	bls.n	800c07a <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 800c076:	2303      	movs	r3, #3
 800c078:	e13a      	b.n	800c2f0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800c07a:	4b63      	ldr	r3, [pc, #396]	@ (800c208 <HAL_RCC_OscConfig+0x77c>)
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c082:	2b00      	cmp	r3, #0
 800c084:	d0f0      	beq.n	800c068 <HAL_RCC_OscConfig+0x5dc>
 800c086:	e018      	b.n	800c0ba <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800c088:	4b5f      	ldr	r3, [pc, #380]	@ (800c208 <HAL_RCC_OscConfig+0x77c>)
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	4a5e      	ldr	r2, [pc, #376]	@ (800c208 <HAL_RCC_OscConfig+0x77c>)
 800c08e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c092:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c094:	f7f9 fc8c 	bl	80059b0 <HAL_GetTick>
 800c098:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800c09a:	e008      	b.n	800c0ae <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 800c09c:	f7f9 fc88 	bl	80059b0 <HAL_GetTick>
 800c0a0:	4602      	mov	r2, r0
 800c0a2:	697b      	ldr	r3, [r7, #20]
 800c0a4:	1ad3      	subs	r3, r2, r3
 800c0a6:	2b02      	cmp	r3, #2
 800c0a8:	d901      	bls.n	800c0ae <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 800c0aa:	2303      	movs	r3, #3
 800c0ac:	e120      	b.n	800c2f0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800c0ae:	4b56      	ldr	r3, [pc, #344]	@ (800c208 <HAL_RCC_OscConfig+0x77c>)
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d1f0      	bne.n	800c09c <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	f000 8115 	beq.w	800c2ee <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c0c4:	69fb      	ldr	r3, [r7, #28]
 800c0c6:	2b18      	cmp	r3, #24
 800c0c8:	f000 80af 	beq.w	800c22a <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0d0:	2b02      	cmp	r3, #2
 800c0d2:	f040 8086 	bne.w	800c1e2 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800c0d6:	4b4c      	ldr	r3, [pc, #304]	@ (800c208 <HAL_RCC_OscConfig+0x77c>)
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	4a4b      	ldr	r2, [pc, #300]	@ (800c208 <HAL_RCC_OscConfig+0x77c>)
 800c0dc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c0e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c0e2:	f7f9 fc65 	bl	80059b0 <HAL_GetTick>
 800c0e6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800c0e8:	e008      	b.n	800c0fc <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800c0ea:	f7f9 fc61 	bl	80059b0 <HAL_GetTick>
 800c0ee:	4602      	mov	r2, r0
 800c0f0:	697b      	ldr	r3, [r7, #20]
 800c0f2:	1ad3      	subs	r3, r2, r3
 800c0f4:	2b02      	cmp	r3, #2
 800c0f6:	d901      	bls.n	800c0fc <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 800c0f8:	2303      	movs	r3, #3
 800c0fa:	e0f9      	b.n	800c2f0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800c0fc:	4b42      	ldr	r3, [pc, #264]	@ (800c208 <HAL_RCC_OscConfig+0x77c>)
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c104:	2b00      	cmp	r3, #0
 800c106:	d1f0      	bne.n	800c0ea <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 800c108:	4b3f      	ldr	r3, [pc, #252]	@ (800c208 <HAL_RCC_OscConfig+0x77c>)
 800c10a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c10c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800c110:	f023 0303 	bic.w	r3, r3, #3
 800c114:	687a      	ldr	r2, [r7, #4]
 800c116:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800c118:	687a      	ldr	r2, [r7, #4]
 800c11a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800c11c:	0212      	lsls	r2, r2, #8
 800c11e:	430a      	orrs	r2, r1
 800c120:	4939      	ldr	r1, [pc, #228]	@ (800c208 <HAL_RCC_OscConfig+0x77c>)
 800c122:	4313      	orrs	r3, r2
 800c124:	628b      	str	r3, [r1, #40]	@ 0x28
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c12a:	3b01      	subs	r3, #1
 800c12c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c134:	3b01      	subs	r3, #1
 800c136:	025b      	lsls	r3, r3, #9
 800c138:	b29b      	uxth	r3, r3
 800c13a:	431a      	orrs	r2, r3
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c140:	3b01      	subs	r3, #1
 800c142:	041b      	lsls	r3, r3, #16
 800c144:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c148:	431a      	orrs	r2, r3
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c14e:	3b01      	subs	r3, #1
 800c150:	061b      	lsls	r3, r3, #24
 800c152:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c156:	492c      	ldr	r1, [pc, #176]	@ (800c208 <HAL_RCC_OscConfig+0x77c>)
 800c158:	4313      	orrs	r3, r2
 800c15a:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 800c15c:	4b2a      	ldr	r3, [pc, #168]	@ (800c208 <HAL_RCC_OscConfig+0x77c>)
 800c15e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c160:	4a29      	ldr	r2, [pc, #164]	@ (800c208 <HAL_RCC_OscConfig+0x77c>)
 800c162:	f023 0310 	bic.w	r3, r3, #16
 800c166:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c16c:	4a26      	ldr	r2, [pc, #152]	@ (800c208 <HAL_RCC_OscConfig+0x77c>)
 800c16e:	00db      	lsls	r3, r3, #3
 800c170:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800c172:	4b25      	ldr	r3, [pc, #148]	@ (800c208 <HAL_RCC_OscConfig+0x77c>)
 800c174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c176:	4a24      	ldr	r2, [pc, #144]	@ (800c208 <HAL_RCC_OscConfig+0x77c>)
 800c178:	f043 0310 	orr.w	r3, r3, #16
 800c17c:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 800c17e:	4b22      	ldr	r3, [pc, #136]	@ (800c208 <HAL_RCC_OscConfig+0x77c>)
 800c180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c182:	f023 020c 	bic.w	r2, r3, #12
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c18a:	491f      	ldr	r1, [pc, #124]	@ (800c208 <HAL_RCC_OscConfig+0x77c>)
 800c18c:	4313      	orrs	r3, r2
 800c18e:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 800c190:	4b1d      	ldr	r3, [pc, #116]	@ (800c208 <HAL_RCC_OscConfig+0x77c>)
 800c192:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c194:	f023 0220 	bic.w	r2, r3, #32
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c19c:	491a      	ldr	r1, [pc, #104]	@ (800c208 <HAL_RCC_OscConfig+0x77c>)
 800c19e:	4313      	orrs	r3, r2
 800c1a0:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 800c1a2:	4b19      	ldr	r3, [pc, #100]	@ (800c208 <HAL_RCC_OscConfig+0x77c>)
 800c1a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1a6:	4a18      	ldr	r2, [pc, #96]	@ (800c208 <HAL_RCC_OscConfig+0x77c>)
 800c1a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c1ac:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 800c1ae:	4b16      	ldr	r3, [pc, #88]	@ (800c208 <HAL_RCC_OscConfig+0x77c>)
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	4a15      	ldr	r2, [pc, #84]	@ (800c208 <HAL_RCC_OscConfig+0x77c>)
 800c1b4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c1b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c1ba:	f7f9 fbf9 	bl	80059b0 <HAL_GetTick>
 800c1be:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800c1c0:	e008      	b.n	800c1d4 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800c1c2:	f7f9 fbf5 	bl	80059b0 <HAL_GetTick>
 800c1c6:	4602      	mov	r2, r0
 800c1c8:	697b      	ldr	r3, [r7, #20]
 800c1ca:	1ad3      	subs	r3, r2, r3
 800c1cc:	2b02      	cmp	r3, #2
 800c1ce:	d901      	bls.n	800c1d4 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 800c1d0:	2303      	movs	r3, #3
 800c1d2:	e08d      	b.n	800c2f0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800c1d4:	4b0c      	ldr	r3, [pc, #48]	@ (800c208 <HAL_RCC_OscConfig+0x77c>)
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d0f0      	beq.n	800c1c2 <HAL_RCC_OscConfig+0x736>
 800c1e0:	e085      	b.n	800c2ee <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800c1e2:	4b09      	ldr	r3, [pc, #36]	@ (800c208 <HAL_RCC_OscConfig+0x77c>)
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	4a08      	ldr	r2, [pc, #32]	@ (800c208 <HAL_RCC_OscConfig+0x77c>)
 800c1e8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c1ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c1ee:	f7f9 fbdf 	bl	80059b0 <HAL_GetTick>
 800c1f2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800c1f4:	e00a      	b.n	800c20c <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800c1f6:	f7f9 fbdb 	bl	80059b0 <HAL_GetTick>
 800c1fa:	4602      	mov	r2, r0
 800c1fc:	697b      	ldr	r3, [r7, #20]
 800c1fe:	1ad3      	subs	r3, r2, r3
 800c200:	2b02      	cmp	r3, #2
 800c202:	d903      	bls.n	800c20c <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 800c204:	2303      	movs	r3, #3
 800c206:	e073      	b.n	800c2f0 <HAL_RCC_OscConfig+0x864>
 800c208:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800c20c:	4b3a      	ldr	r3, [pc, #232]	@ (800c2f8 <HAL_RCC_OscConfig+0x86c>)
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c214:	2b00      	cmp	r3, #0
 800c216:	d1ee      	bne.n	800c1f6 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800c218:	4b37      	ldr	r3, [pc, #220]	@ (800c2f8 <HAL_RCC_OscConfig+0x86c>)
 800c21a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c21c:	4a36      	ldr	r2, [pc, #216]	@ (800c2f8 <HAL_RCC_OscConfig+0x86c>)
 800c21e:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800c222:	f023 0303 	bic.w	r3, r3, #3
 800c226:	6293      	str	r3, [r2, #40]	@ 0x28
 800c228:	e061      	b.n	800c2ee <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800c22a:	4b33      	ldr	r3, [pc, #204]	@ (800c2f8 <HAL_RCC_OscConfig+0x86c>)
 800c22c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c22e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800c230:	4b31      	ldr	r3, [pc, #196]	@ (800c2f8 <HAL_RCC_OscConfig+0x86c>)
 800c232:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c234:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c23a:	2b01      	cmp	r3, #1
 800c23c:	d031      	beq.n	800c2a2 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 800c23e:	693b      	ldr	r3, [r7, #16]
 800c240:	f003 0203 	and.w	r2, r3, #3
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c248:	429a      	cmp	r2, r3
 800c24a:	d12a      	bne.n	800c2a2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800c24c:	693b      	ldr	r3, [r7, #16]
 800c24e:	0a1b      	lsrs	r3, r3, #8
 800c250:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 800c258:	429a      	cmp	r2, r3
 800c25a:	d122      	bne.n	800c2a2 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c266:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 800c268:	429a      	cmp	r2, r3
 800c26a:	d11a      	bne.n	800c2a2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	0a5b      	lsrs	r3, r3, #9
 800c270:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c278:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800c27a:	429a      	cmp	r2, r3
 800c27c:	d111      	bne.n	800c2a2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	0c1b      	lsrs	r3, r3, #16
 800c282:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c28a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 800c28c:	429a      	cmp	r2, r3
 800c28e:	d108      	bne.n	800c2a2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	0e1b      	lsrs	r3, r3, #24
 800c294:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c29c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800c29e:	429a      	cmp	r2, r3
 800c2a0:	d001      	beq.n	800c2a6 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 800c2a2:	2301      	movs	r3, #1
 800c2a4:	e024      	b.n	800c2f0 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800c2a6:	4b14      	ldr	r3, [pc, #80]	@ (800c2f8 <HAL_RCC_OscConfig+0x86c>)
 800c2a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c2aa:	08db      	lsrs	r3, r3, #3
 800c2ac:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800c2b4:	429a      	cmp	r2, r3
 800c2b6:	d01a      	beq.n	800c2ee <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 800c2b8:	4b0f      	ldr	r3, [pc, #60]	@ (800c2f8 <HAL_RCC_OscConfig+0x86c>)
 800c2ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2bc:	4a0e      	ldr	r2, [pc, #56]	@ (800c2f8 <HAL_RCC_OscConfig+0x86c>)
 800c2be:	f023 0310 	bic.w	r3, r3, #16
 800c2c2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c2c4:	f7f9 fb74 	bl	80059b0 <HAL_GetTick>
 800c2c8:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 800c2ca:	bf00      	nop
 800c2cc:	f7f9 fb70 	bl	80059b0 <HAL_GetTick>
 800c2d0:	4602      	mov	r2, r0
 800c2d2:	697b      	ldr	r3, [r7, #20]
 800c2d4:	4293      	cmp	r3, r2
 800c2d6:	d0f9      	beq.n	800c2cc <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c2dc:	4a06      	ldr	r2, [pc, #24]	@ (800c2f8 <HAL_RCC_OscConfig+0x86c>)
 800c2de:	00db      	lsls	r3, r3, #3
 800c2e0:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800c2e2:	4b05      	ldr	r3, [pc, #20]	@ (800c2f8 <HAL_RCC_OscConfig+0x86c>)
 800c2e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2e6:	4a04      	ldr	r2, [pc, #16]	@ (800c2f8 <HAL_RCC_OscConfig+0x86c>)
 800c2e8:	f043 0310 	orr.w	r3, r3, #16
 800c2ec:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 800c2ee:	2300      	movs	r3, #0
}
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	3720      	adds	r7, #32
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	bd80      	pop	{r7, pc}
 800c2f8:	44020c00 	.word	0x44020c00

0800c2fc <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b084      	sub	sp, #16
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
 800c304:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d101      	bne.n	800c310 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c30c:	2301      	movs	r3, #1
 800c30e:	e19e      	b.n	800c64e <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c310:	4b83      	ldr	r3, [pc, #524]	@ (800c520 <HAL_RCC_ClockConfig+0x224>)
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	f003 030f 	and.w	r3, r3, #15
 800c318:	683a      	ldr	r2, [r7, #0]
 800c31a:	429a      	cmp	r2, r3
 800c31c:	d910      	bls.n	800c340 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c31e:	4b80      	ldr	r3, [pc, #512]	@ (800c520 <HAL_RCC_ClockConfig+0x224>)
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	f023 020f 	bic.w	r2, r3, #15
 800c326:	497e      	ldr	r1, [pc, #504]	@ (800c520 <HAL_RCC_ClockConfig+0x224>)
 800c328:	683b      	ldr	r3, [r7, #0]
 800c32a:	4313      	orrs	r3, r2
 800c32c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c32e:	4b7c      	ldr	r3, [pc, #496]	@ (800c520 <HAL_RCC_ClockConfig+0x224>)
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	f003 030f 	and.w	r3, r3, #15
 800c336:	683a      	ldr	r2, [r7, #0]
 800c338:	429a      	cmp	r2, r3
 800c33a:	d001      	beq.n	800c340 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800c33c:	2301      	movs	r3, #1
 800c33e:	e186      	b.n	800c64e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	f003 0310 	and.w	r3, r3, #16
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d012      	beq.n	800c372 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	695a      	ldr	r2, [r3, #20]
 800c350:	4b74      	ldr	r3, [pc, #464]	@ (800c524 <HAL_RCC_ClockConfig+0x228>)
 800c352:	6a1b      	ldr	r3, [r3, #32]
 800c354:	0a1b      	lsrs	r3, r3, #8
 800c356:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c35a:	429a      	cmp	r2, r3
 800c35c:	d909      	bls.n	800c372 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 800c35e:	4b71      	ldr	r3, [pc, #452]	@ (800c524 <HAL_RCC_ClockConfig+0x228>)
 800c360:	6a1b      	ldr	r3, [r3, #32]
 800c362:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	695b      	ldr	r3, [r3, #20]
 800c36a:	021b      	lsls	r3, r3, #8
 800c36c:	496d      	ldr	r1, [pc, #436]	@ (800c524 <HAL_RCC_ClockConfig+0x228>)
 800c36e:	4313      	orrs	r3, r2
 800c370:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	f003 0308 	and.w	r3, r3, #8
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d012      	beq.n	800c3a4 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	691a      	ldr	r2, [r3, #16]
 800c382:	4b68      	ldr	r3, [pc, #416]	@ (800c524 <HAL_RCC_ClockConfig+0x228>)
 800c384:	6a1b      	ldr	r3, [r3, #32]
 800c386:	091b      	lsrs	r3, r3, #4
 800c388:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c38c:	429a      	cmp	r2, r3
 800c38e:	d909      	bls.n	800c3a4 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 800c390:	4b64      	ldr	r3, [pc, #400]	@ (800c524 <HAL_RCC_ClockConfig+0x228>)
 800c392:	6a1b      	ldr	r3, [r3, #32]
 800c394:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	691b      	ldr	r3, [r3, #16]
 800c39c:	011b      	lsls	r3, r3, #4
 800c39e:	4961      	ldr	r1, [pc, #388]	@ (800c524 <HAL_RCC_ClockConfig+0x228>)
 800c3a0:	4313      	orrs	r3, r2
 800c3a2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	f003 0304 	and.w	r3, r3, #4
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d010      	beq.n	800c3d2 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	68da      	ldr	r2, [r3, #12]
 800c3b4:	4b5b      	ldr	r3, [pc, #364]	@ (800c524 <HAL_RCC_ClockConfig+0x228>)
 800c3b6:	6a1b      	ldr	r3, [r3, #32]
 800c3b8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c3bc:	429a      	cmp	r2, r3
 800c3be:	d908      	bls.n	800c3d2 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 800c3c0:	4b58      	ldr	r3, [pc, #352]	@ (800c524 <HAL_RCC_ClockConfig+0x228>)
 800c3c2:	6a1b      	ldr	r3, [r3, #32]
 800c3c4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	68db      	ldr	r3, [r3, #12]
 800c3cc:	4955      	ldr	r1, [pc, #340]	@ (800c524 <HAL_RCC_ClockConfig+0x228>)
 800c3ce:	4313      	orrs	r3, r2
 800c3d0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	f003 0302 	and.w	r3, r3, #2
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d010      	beq.n	800c400 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	689a      	ldr	r2, [r3, #8]
 800c3e2:	4b50      	ldr	r3, [pc, #320]	@ (800c524 <HAL_RCC_ClockConfig+0x228>)
 800c3e4:	6a1b      	ldr	r3, [r3, #32]
 800c3e6:	f003 030f 	and.w	r3, r3, #15
 800c3ea:	429a      	cmp	r2, r3
 800c3ec:	d908      	bls.n	800c400 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 800c3ee:	4b4d      	ldr	r3, [pc, #308]	@ (800c524 <HAL_RCC_ClockConfig+0x228>)
 800c3f0:	6a1b      	ldr	r3, [r3, #32]
 800c3f2:	f023 020f 	bic.w	r2, r3, #15
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	689b      	ldr	r3, [r3, #8]
 800c3fa:	494a      	ldr	r1, [pc, #296]	@ (800c524 <HAL_RCC_ClockConfig+0x228>)
 800c3fc:	4313      	orrs	r3, r2
 800c3fe:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	f003 0301 	and.w	r3, r3, #1
 800c408:	2b00      	cmp	r3, #0
 800c40a:	f000 8093 	beq.w	800c534 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	685b      	ldr	r3, [r3, #4]
 800c412:	2b03      	cmp	r3, #3
 800c414:	d107      	bne.n	800c426 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800c416:	4b43      	ldr	r3, [pc, #268]	@ (800c524 <HAL_RCC_ClockConfig+0x228>)
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d121      	bne.n	800c466 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 800c422:	2301      	movs	r3, #1
 800c424:	e113      	b.n	800c64e <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	685b      	ldr	r3, [r3, #4]
 800c42a:	2b02      	cmp	r3, #2
 800c42c:	d107      	bne.n	800c43e <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c42e:	4b3d      	ldr	r3, [pc, #244]	@ (800c524 <HAL_RCC_ClockConfig+0x228>)
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c436:	2b00      	cmp	r3, #0
 800c438:	d115      	bne.n	800c466 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800c43a:	2301      	movs	r3, #1
 800c43c:	e107      	b.n	800c64e <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	685b      	ldr	r3, [r3, #4]
 800c442:	2b01      	cmp	r3, #1
 800c444:	d107      	bne.n	800c456 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800c446:	4b37      	ldr	r3, [pc, #220]	@ (800c524 <HAL_RCC_ClockConfig+0x228>)
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d109      	bne.n	800c466 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800c452:	2301      	movs	r3, #1
 800c454:	e0fb      	b.n	800c64e <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c456:	4b33      	ldr	r3, [pc, #204]	@ (800c524 <HAL_RCC_ClockConfig+0x228>)
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	f003 0302 	and.w	r3, r3, #2
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d101      	bne.n	800c466 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800c462:	2301      	movs	r3, #1
 800c464:	e0f3      	b.n	800c64e <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 800c466:	4b2f      	ldr	r3, [pc, #188]	@ (800c524 <HAL_RCC_ClockConfig+0x228>)
 800c468:	69db      	ldr	r3, [r3, #28]
 800c46a:	f023 0203 	bic.w	r2, r3, #3
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	685b      	ldr	r3, [r3, #4]
 800c472:	492c      	ldr	r1, [pc, #176]	@ (800c524 <HAL_RCC_ClockConfig+0x228>)
 800c474:	4313      	orrs	r3, r2
 800c476:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c478:	f7f9 fa9a 	bl	80059b0 <HAL_GetTick>
 800c47c:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	685b      	ldr	r3, [r3, #4]
 800c482:	2b03      	cmp	r3, #3
 800c484:	d112      	bne.n	800c4ac <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c486:	e00a      	b.n	800c49e <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800c488:	f7f9 fa92 	bl	80059b0 <HAL_GetTick>
 800c48c:	4602      	mov	r2, r0
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	1ad3      	subs	r3, r2, r3
 800c492:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c496:	4293      	cmp	r3, r2
 800c498:	d901      	bls.n	800c49e <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 800c49a:	2303      	movs	r3, #3
 800c49c:	e0d7      	b.n	800c64e <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c49e:	4b21      	ldr	r3, [pc, #132]	@ (800c524 <HAL_RCC_ClockConfig+0x228>)
 800c4a0:	69db      	ldr	r3, [r3, #28]
 800c4a2:	f003 0318 	and.w	r3, r3, #24
 800c4a6:	2b18      	cmp	r3, #24
 800c4a8:	d1ee      	bne.n	800c488 <HAL_RCC_ClockConfig+0x18c>
 800c4aa:	e043      	b.n	800c534 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	685b      	ldr	r3, [r3, #4]
 800c4b0:	2b02      	cmp	r3, #2
 800c4b2:	d112      	bne.n	800c4da <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800c4b4:	e00a      	b.n	800c4cc <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800c4b6:	f7f9 fa7b 	bl	80059b0 <HAL_GetTick>
 800c4ba:	4602      	mov	r2, r0
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	1ad3      	subs	r3, r2, r3
 800c4c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c4c4:	4293      	cmp	r3, r2
 800c4c6:	d901      	bls.n	800c4cc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800c4c8:	2303      	movs	r3, #3
 800c4ca:	e0c0      	b.n	800c64e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800c4cc:	4b15      	ldr	r3, [pc, #84]	@ (800c524 <HAL_RCC_ClockConfig+0x228>)
 800c4ce:	69db      	ldr	r3, [r3, #28]
 800c4d0:	f003 0318 	and.w	r3, r3, #24
 800c4d4:	2b10      	cmp	r3, #16
 800c4d6:	d1ee      	bne.n	800c4b6 <HAL_RCC_ClockConfig+0x1ba>
 800c4d8:	e02c      	b.n	800c534 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	685b      	ldr	r3, [r3, #4]
 800c4de:	2b01      	cmp	r3, #1
 800c4e0:	d122      	bne.n	800c528 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800c4e2:	e00a      	b.n	800c4fa <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800c4e4:	f7f9 fa64 	bl	80059b0 <HAL_GetTick>
 800c4e8:	4602      	mov	r2, r0
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	1ad3      	subs	r3, r2, r3
 800c4ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c4f2:	4293      	cmp	r3, r2
 800c4f4:	d901      	bls.n	800c4fa <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800c4f6:	2303      	movs	r3, #3
 800c4f8:	e0a9      	b.n	800c64e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800c4fa:	4b0a      	ldr	r3, [pc, #40]	@ (800c524 <HAL_RCC_ClockConfig+0x228>)
 800c4fc:	69db      	ldr	r3, [r3, #28]
 800c4fe:	f003 0318 	and.w	r3, r3, #24
 800c502:	2b08      	cmp	r3, #8
 800c504:	d1ee      	bne.n	800c4e4 <HAL_RCC_ClockConfig+0x1e8>
 800c506:	e015      	b.n	800c534 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800c508:	f7f9 fa52 	bl	80059b0 <HAL_GetTick>
 800c50c:	4602      	mov	r2, r0
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	1ad3      	subs	r3, r2, r3
 800c512:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c516:	4293      	cmp	r3, r2
 800c518:	d906      	bls.n	800c528 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 800c51a:	2303      	movs	r3, #3
 800c51c:	e097      	b.n	800c64e <HAL_RCC_ClockConfig+0x352>
 800c51e:	bf00      	nop
 800c520:	40022000 	.word	0x40022000
 800c524:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800c528:	4b4b      	ldr	r3, [pc, #300]	@ (800c658 <HAL_RCC_ClockConfig+0x35c>)
 800c52a:	69db      	ldr	r3, [r3, #28]
 800c52c:	f003 0318 	and.w	r3, r3, #24
 800c530:	2b00      	cmp	r3, #0
 800c532:	d1e9      	bne.n	800c508 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	f003 0302 	and.w	r3, r3, #2
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d010      	beq.n	800c562 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	689a      	ldr	r2, [r3, #8]
 800c544:	4b44      	ldr	r3, [pc, #272]	@ (800c658 <HAL_RCC_ClockConfig+0x35c>)
 800c546:	6a1b      	ldr	r3, [r3, #32]
 800c548:	f003 030f 	and.w	r3, r3, #15
 800c54c:	429a      	cmp	r2, r3
 800c54e:	d208      	bcs.n	800c562 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 800c550:	4b41      	ldr	r3, [pc, #260]	@ (800c658 <HAL_RCC_ClockConfig+0x35c>)
 800c552:	6a1b      	ldr	r3, [r3, #32]
 800c554:	f023 020f 	bic.w	r2, r3, #15
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	689b      	ldr	r3, [r3, #8]
 800c55c:	493e      	ldr	r1, [pc, #248]	@ (800c658 <HAL_RCC_ClockConfig+0x35c>)
 800c55e:	4313      	orrs	r3, r2
 800c560:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c562:	4b3e      	ldr	r3, [pc, #248]	@ (800c65c <HAL_RCC_ClockConfig+0x360>)
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	f003 030f 	and.w	r3, r3, #15
 800c56a:	683a      	ldr	r2, [r7, #0]
 800c56c:	429a      	cmp	r2, r3
 800c56e:	d210      	bcs.n	800c592 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c570:	4b3a      	ldr	r3, [pc, #232]	@ (800c65c <HAL_RCC_ClockConfig+0x360>)
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	f023 020f 	bic.w	r2, r3, #15
 800c578:	4938      	ldr	r1, [pc, #224]	@ (800c65c <HAL_RCC_ClockConfig+0x360>)
 800c57a:	683b      	ldr	r3, [r7, #0]
 800c57c:	4313      	orrs	r3, r2
 800c57e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c580:	4b36      	ldr	r3, [pc, #216]	@ (800c65c <HAL_RCC_ClockConfig+0x360>)
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	f003 030f 	and.w	r3, r3, #15
 800c588:	683a      	ldr	r2, [r7, #0]
 800c58a:	429a      	cmp	r2, r3
 800c58c:	d001      	beq.n	800c592 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 800c58e:	2301      	movs	r3, #1
 800c590:	e05d      	b.n	800c64e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	f003 0304 	and.w	r3, r3, #4
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d010      	beq.n	800c5c0 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	68da      	ldr	r2, [r3, #12]
 800c5a2:	4b2d      	ldr	r3, [pc, #180]	@ (800c658 <HAL_RCC_ClockConfig+0x35c>)
 800c5a4:	6a1b      	ldr	r3, [r3, #32]
 800c5a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c5aa:	429a      	cmp	r2, r3
 800c5ac:	d208      	bcs.n	800c5c0 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 800c5ae:	4b2a      	ldr	r3, [pc, #168]	@ (800c658 <HAL_RCC_ClockConfig+0x35c>)
 800c5b0:	6a1b      	ldr	r3, [r3, #32]
 800c5b2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	68db      	ldr	r3, [r3, #12]
 800c5ba:	4927      	ldr	r1, [pc, #156]	@ (800c658 <HAL_RCC_ClockConfig+0x35c>)
 800c5bc:	4313      	orrs	r3, r2
 800c5be:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	f003 0308 	and.w	r3, r3, #8
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d012      	beq.n	800c5f2 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	691a      	ldr	r2, [r3, #16]
 800c5d0:	4b21      	ldr	r3, [pc, #132]	@ (800c658 <HAL_RCC_ClockConfig+0x35c>)
 800c5d2:	6a1b      	ldr	r3, [r3, #32]
 800c5d4:	091b      	lsrs	r3, r3, #4
 800c5d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c5da:	429a      	cmp	r2, r3
 800c5dc:	d209      	bcs.n	800c5f2 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 800c5de:	4b1e      	ldr	r3, [pc, #120]	@ (800c658 <HAL_RCC_ClockConfig+0x35c>)
 800c5e0:	6a1b      	ldr	r3, [r3, #32]
 800c5e2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	691b      	ldr	r3, [r3, #16]
 800c5ea:	011b      	lsls	r3, r3, #4
 800c5ec:	491a      	ldr	r1, [pc, #104]	@ (800c658 <HAL_RCC_ClockConfig+0x35c>)
 800c5ee:	4313      	orrs	r3, r2
 800c5f0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	f003 0310 	and.w	r3, r3, #16
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d012      	beq.n	800c624 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	695a      	ldr	r2, [r3, #20]
 800c602:	4b15      	ldr	r3, [pc, #84]	@ (800c658 <HAL_RCC_ClockConfig+0x35c>)
 800c604:	6a1b      	ldr	r3, [r3, #32]
 800c606:	0a1b      	lsrs	r3, r3, #8
 800c608:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c60c:	429a      	cmp	r2, r3
 800c60e:	d209      	bcs.n	800c624 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 800c610:	4b11      	ldr	r3, [pc, #68]	@ (800c658 <HAL_RCC_ClockConfig+0x35c>)
 800c612:	6a1b      	ldr	r3, [r3, #32]
 800c614:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	695b      	ldr	r3, [r3, #20]
 800c61c:	021b      	lsls	r3, r3, #8
 800c61e:	490e      	ldr	r1, [pc, #56]	@ (800c658 <HAL_RCC_ClockConfig+0x35c>)
 800c620:	4313      	orrs	r3, r2
 800c622:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800c624:	f000 f822 	bl	800c66c <HAL_RCC_GetSysClockFreq>
 800c628:	4602      	mov	r2, r0
 800c62a:	4b0b      	ldr	r3, [pc, #44]	@ (800c658 <HAL_RCC_ClockConfig+0x35c>)
 800c62c:	6a1b      	ldr	r3, [r3, #32]
 800c62e:	f003 030f 	and.w	r3, r3, #15
 800c632:	490b      	ldr	r1, [pc, #44]	@ (800c660 <HAL_RCC_ClockConfig+0x364>)
 800c634:	5ccb      	ldrb	r3, [r1, r3]
 800c636:	fa22 f303 	lsr.w	r3, r2, r3
 800c63a:	4a0a      	ldr	r2, [pc, #40]	@ (800c664 <HAL_RCC_ClockConfig+0x368>)
 800c63c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800c63e:	4b0a      	ldr	r3, [pc, #40]	@ (800c668 <HAL_RCC_ClockConfig+0x36c>)
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	4618      	mov	r0, r3
 800c644:	f7f9 f92a 	bl	800589c <HAL_InitTick>
 800c648:	4603      	mov	r3, r0
 800c64a:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 800c64c:	7afb      	ldrb	r3, [r7, #11]
}
 800c64e:	4618      	mov	r0, r3
 800c650:	3710      	adds	r7, #16
 800c652:	46bd      	mov	sp, r7
 800c654:	bd80      	pop	{r7, pc}
 800c656:	bf00      	nop
 800c658:	44020c00 	.word	0x44020c00
 800c65c:	40022000 	.word	0x40022000
 800c660:	08024354 	.word	0x08024354
 800c664:	20000074 	.word	0x20000074
 800c668:	20000078 	.word	0x20000078

0800c66c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c66c:	b480      	push	{r7}
 800c66e:	b089      	sub	sp, #36	@ 0x24
 800c670:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 800c672:	4b8c      	ldr	r3, [pc, #560]	@ (800c8a4 <HAL_RCC_GetSysClockFreq+0x238>)
 800c674:	69db      	ldr	r3, [r3, #28]
 800c676:	f003 0318 	and.w	r3, r3, #24
 800c67a:	2b08      	cmp	r3, #8
 800c67c:	d102      	bne.n	800c684 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800c67e:	4b8a      	ldr	r3, [pc, #552]	@ (800c8a8 <HAL_RCC_GetSysClockFreq+0x23c>)
 800c680:	61fb      	str	r3, [r7, #28]
 800c682:	e107      	b.n	800c894 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800c684:	4b87      	ldr	r3, [pc, #540]	@ (800c8a4 <HAL_RCC_GetSysClockFreq+0x238>)
 800c686:	69db      	ldr	r3, [r3, #28]
 800c688:	f003 0318 	and.w	r3, r3, #24
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d112      	bne.n	800c6b6 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800c690:	4b84      	ldr	r3, [pc, #528]	@ (800c8a4 <HAL_RCC_GetSysClockFreq+0x238>)
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	f003 0320 	and.w	r3, r3, #32
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d009      	beq.n	800c6b0 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c69c:	4b81      	ldr	r3, [pc, #516]	@ (800c8a4 <HAL_RCC_GetSysClockFreq+0x238>)
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	08db      	lsrs	r3, r3, #3
 800c6a2:	f003 0303 	and.w	r3, r3, #3
 800c6a6:	4a81      	ldr	r2, [pc, #516]	@ (800c8ac <HAL_RCC_GetSysClockFreq+0x240>)
 800c6a8:	fa22 f303 	lsr.w	r3, r2, r3
 800c6ac:	61fb      	str	r3, [r7, #28]
 800c6ae:	e0f1      	b.n	800c894 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 800c6b0:	4b7e      	ldr	r3, [pc, #504]	@ (800c8ac <HAL_RCC_GetSysClockFreq+0x240>)
 800c6b2:	61fb      	str	r3, [r7, #28]
 800c6b4:	e0ee      	b.n	800c894 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800c6b6:	4b7b      	ldr	r3, [pc, #492]	@ (800c8a4 <HAL_RCC_GetSysClockFreq+0x238>)
 800c6b8:	69db      	ldr	r3, [r3, #28]
 800c6ba:	f003 0318 	and.w	r3, r3, #24
 800c6be:	2b10      	cmp	r3, #16
 800c6c0:	d102      	bne.n	800c6c8 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800c6c2:	4b7b      	ldr	r3, [pc, #492]	@ (800c8b0 <HAL_RCC_GetSysClockFreq+0x244>)
 800c6c4:	61fb      	str	r3, [r7, #28]
 800c6c6:	e0e5      	b.n	800c894 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c6c8:	4b76      	ldr	r3, [pc, #472]	@ (800c8a4 <HAL_RCC_GetSysClockFreq+0x238>)
 800c6ca:	69db      	ldr	r3, [r3, #28]
 800c6cc:	f003 0318 	and.w	r3, r3, #24
 800c6d0:	2b18      	cmp	r3, #24
 800c6d2:	f040 80dd 	bne.w	800c890 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800c6d6:	4b73      	ldr	r3, [pc, #460]	@ (800c8a4 <HAL_RCC_GetSysClockFreq+0x238>)
 800c6d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c6da:	f003 0303 	and.w	r3, r3, #3
 800c6de:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 800c6e0:	4b70      	ldr	r3, [pc, #448]	@ (800c8a4 <HAL_RCC_GetSysClockFreq+0x238>)
 800c6e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c6e4:	0a1b      	lsrs	r3, r3, #8
 800c6e6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c6ea:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800c6ec:	4b6d      	ldr	r3, [pc, #436]	@ (800c8a4 <HAL_RCC_GetSysClockFreq+0x238>)
 800c6ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c6f0:	091b      	lsrs	r3, r3, #4
 800c6f2:	f003 0301 	and.w	r3, r3, #1
 800c6f6:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 800c6f8:	4b6a      	ldr	r3, [pc, #424]	@ (800c8a4 <HAL_RCC_GetSysClockFreq+0x238>)
 800c6fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 800c6fc:	08db      	lsrs	r3, r3, #3
 800c6fe:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 800c702:	68fa      	ldr	r2, [r7, #12]
 800c704:	fb02 f303 	mul.w	r3, r2, r3
 800c708:	ee07 3a90 	vmov	s15, r3
 800c70c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c710:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800c714:	693b      	ldr	r3, [r7, #16]
 800c716:	2b00      	cmp	r3, #0
 800c718:	f000 80b7 	beq.w	800c88a <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 800c71c:	697b      	ldr	r3, [r7, #20]
 800c71e:	2b01      	cmp	r3, #1
 800c720:	d003      	beq.n	800c72a <HAL_RCC_GetSysClockFreq+0xbe>
 800c722:	697b      	ldr	r3, [r7, #20]
 800c724:	2b03      	cmp	r3, #3
 800c726:	d056      	beq.n	800c7d6 <HAL_RCC_GetSysClockFreq+0x16a>
 800c728:	e077      	b.n	800c81a <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800c72a:	4b5e      	ldr	r3, [pc, #376]	@ (800c8a4 <HAL_RCC_GetSysClockFreq+0x238>)
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	f003 0320 	and.w	r3, r3, #32
 800c732:	2b00      	cmp	r3, #0
 800c734:	d02d      	beq.n	800c792 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c736:	4b5b      	ldr	r3, [pc, #364]	@ (800c8a4 <HAL_RCC_GetSysClockFreq+0x238>)
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	08db      	lsrs	r3, r3, #3
 800c73c:	f003 0303 	and.w	r3, r3, #3
 800c740:	4a5a      	ldr	r2, [pc, #360]	@ (800c8ac <HAL_RCC_GetSysClockFreq+0x240>)
 800c742:	fa22 f303 	lsr.w	r3, r2, r3
 800c746:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	ee07 3a90 	vmov	s15, r3
 800c74e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c752:	693b      	ldr	r3, [r7, #16]
 800c754:	ee07 3a90 	vmov	s15, r3
 800c758:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c75c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c760:	4b50      	ldr	r3, [pc, #320]	@ (800c8a4 <HAL_RCC_GetSysClockFreq+0x238>)
 800c762:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c764:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c768:	ee07 3a90 	vmov	s15, r3
 800c76c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 800c770:	ed97 6a02 	vldr	s12, [r7, #8]
 800c774:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 800c8b4 <HAL_RCC_GetSysClockFreq+0x248>
 800c778:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800c77c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 800c780:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c784:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800c788:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c78c:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 800c790:	e065      	b.n	800c85e <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800c792:	693b      	ldr	r3, [r7, #16]
 800c794:	ee07 3a90 	vmov	s15, r3
 800c798:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c79c:	eddf 6a46 	vldr	s13, [pc, #280]	@ 800c8b8 <HAL_RCC_GetSysClockFreq+0x24c>
 800c7a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c7a4:	4b3f      	ldr	r3, [pc, #252]	@ (800c8a4 <HAL_RCC_GetSysClockFreq+0x238>)
 800c7a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c7a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7ac:	ee07 3a90 	vmov	s15, r3
 800c7b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 800c7b4:	ed97 6a02 	vldr	s12, [r7, #8]
 800c7b8:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800c8b4 <HAL_RCC_GetSysClockFreq+0x248>
 800c7bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800c7c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 800c7c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c7c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800c7cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c7d0:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 800c7d4:	e043      	b.n	800c85e <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800c7d6:	693b      	ldr	r3, [r7, #16]
 800c7d8:	ee07 3a90 	vmov	s15, r3
 800c7dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7e0:	eddf 6a36 	vldr	s13, [pc, #216]	@ 800c8bc <HAL_RCC_GetSysClockFreq+0x250>
 800c7e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c7e8:	4b2e      	ldr	r3, [pc, #184]	@ (800c8a4 <HAL_RCC_GetSysClockFreq+0x238>)
 800c7ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c7ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7f0:	ee07 3a90 	vmov	s15, r3
 800c7f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800c7f8:	ed97 6a02 	vldr	s12, [r7, #8]
 800c7fc:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 800c8b4 <HAL_RCC_GetSysClockFreq+0x248>
 800c800:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800c804:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800c808:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c80c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800c810:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c814:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 800c818:	e021      	b.n	800c85e <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800c81a:	693b      	ldr	r3, [r7, #16]
 800c81c:	ee07 3a90 	vmov	s15, r3
 800c820:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c824:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800c8c0 <HAL_RCC_GetSysClockFreq+0x254>
 800c828:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c82c:	4b1d      	ldr	r3, [pc, #116]	@ (800c8a4 <HAL_RCC_GetSysClockFreq+0x238>)
 800c82e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c830:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c834:	ee07 3a90 	vmov	s15, r3
 800c838:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800c83c:	ed97 6a02 	vldr	s12, [r7, #8]
 800c840:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 800c8b4 <HAL_RCC_GetSysClockFreq+0x248>
 800c844:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800c848:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800c84c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c850:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800c854:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c858:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 800c85c:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 800c85e:	4b11      	ldr	r3, [pc, #68]	@ (800c8a4 <HAL_RCC_GetSysClockFreq+0x238>)
 800c860:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c862:	0a5b      	lsrs	r3, r3, #9
 800c864:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c868:	3301      	adds	r3, #1
 800c86a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800c86c:	683b      	ldr	r3, [r7, #0]
 800c86e:	ee07 3a90 	vmov	s15, r3
 800c872:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c876:	edd7 6a06 	vldr	s13, [r7, #24]
 800c87a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c87e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c882:	ee17 3a90 	vmov	r3, s15
 800c886:	61fb      	str	r3, [r7, #28]
 800c888:	e004      	b.n	800c894 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 800c88a:	2300      	movs	r3, #0
 800c88c:	61fb      	str	r3, [r7, #28]
 800c88e:	e001      	b.n	800c894 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 800c890:	4b06      	ldr	r3, [pc, #24]	@ (800c8ac <HAL_RCC_GetSysClockFreq+0x240>)
 800c892:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 800c894:	69fb      	ldr	r3, [r7, #28]
}
 800c896:	4618      	mov	r0, r3
 800c898:	3724      	adds	r7, #36	@ 0x24
 800c89a:	46bd      	mov	sp, r7
 800c89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a0:	4770      	bx	lr
 800c8a2:	bf00      	nop
 800c8a4:	44020c00 	.word	0x44020c00
 800c8a8:	003d0900 	.word	0x003d0900
 800c8ac:	03d09000 	.word	0x03d09000
 800c8b0:	017d7840 	.word	0x017d7840
 800c8b4:	46000000 	.word	0x46000000
 800c8b8:	4c742400 	.word	0x4c742400
 800c8bc:	4bbebc20 	.word	0x4bbebc20
 800c8c0:	4a742400 	.word	0x4a742400

0800c8c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c8c4:	b580      	push	{r7, lr}
 800c8c6:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800c8c8:	f7ff fed0 	bl	800c66c <HAL_RCC_GetSysClockFreq>
 800c8cc:	4602      	mov	r2, r0
 800c8ce:	4b08      	ldr	r3, [pc, #32]	@ (800c8f0 <HAL_RCC_GetHCLKFreq+0x2c>)
 800c8d0:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800c8d2:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800c8d6:	4907      	ldr	r1, [pc, #28]	@ (800c8f4 <HAL_RCC_GetHCLKFreq+0x30>)
 800c8d8:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800c8da:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800c8de:	fa22 f303 	lsr.w	r3, r2, r3
 800c8e2:	4a05      	ldr	r2, [pc, #20]	@ (800c8f8 <HAL_RCC_GetHCLKFreq+0x34>)
 800c8e4:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 800c8e6:	4b04      	ldr	r3, [pc, #16]	@ (800c8f8 <HAL_RCC_GetHCLKFreq+0x34>)
 800c8e8:	681b      	ldr	r3, [r3, #0]
}
 800c8ea:	4618      	mov	r0, r3
 800c8ec:	bd80      	pop	{r7, pc}
 800c8ee:	bf00      	nop
 800c8f0:	44020c00 	.word	0x44020c00
 800c8f4:	08024354 	.word	0x08024354
 800c8f8:	20000074 	.word	0x20000074

0800c8fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c8fc:	b580      	push	{r7, lr}
 800c8fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 800c900:	f7ff ffe0 	bl	800c8c4 <HAL_RCC_GetHCLKFreq>
 800c904:	4602      	mov	r2, r0
 800c906:	4b06      	ldr	r3, [pc, #24]	@ (800c920 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c908:	6a1b      	ldr	r3, [r3, #32]
 800c90a:	091b      	lsrs	r3, r3, #4
 800c90c:	f003 0307 	and.w	r3, r3, #7
 800c910:	4904      	ldr	r1, [pc, #16]	@ (800c924 <HAL_RCC_GetPCLK1Freq+0x28>)
 800c912:	5ccb      	ldrb	r3, [r1, r3]
 800c914:	f003 031f 	and.w	r3, r3, #31
 800c918:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c91c:	4618      	mov	r0, r3
 800c91e:	bd80      	pop	{r7, pc}
 800c920:	44020c00 	.word	0x44020c00
 800c924:	08024364 	.word	0x08024364

0800c928 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c928:	b580      	push	{r7, lr}
 800c92a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 800c92c:	f7ff ffca 	bl	800c8c4 <HAL_RCC_GetHCLKFreq>
 800c930:	4602      	mov	r2, r0
 800c932:	4b06      	ldr	r3, [pc, #24]	@ (800c94c <HAL_RCC_GetPCLK2Freq+0x24>)
 800c934:	6a1b      	ldr	r3, [r3, #32]
 800c936:	0a1b      	lsrs	r3, r3, #8
 800c938:	f003 0307 	and.w	r3, r3, #7
 800c93c:	4904      	ldr	r1, [pc, #16]	@ (800c950 <HAL_RCC_GetPCLK2Freq+0x28>)
 800c93e:	5ccb      	ldrb	r3, [r1, r3]
 800c940:	f003 031f 	and.w	r3, r3, #31
 800c944:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c948:	4618      	mov	r0, r3
 800c94a:	bd80      	pop	{r7, pc}
 800c94c:	44020c00 	.word	0x44020c00
 800c950:	08024364 	.word	0x08024364

0800c954 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800c954:	b580      	push	{r7, lr}
 800c956:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 800c958:	f7ff ffb4 	bl	800c8c4 <HAL_RCC_GetHCLKFreq>
 800c95c:	4602      	mov	r2, r0
 800c95e:	4b06      	ldr	r3, [pc, #24]	@ (800c978 <HAL_RCC_GetPCLK3Freq+0x24>)
 800c960:	6a1b      	ldr	r3, [r3, #32]
 800c962:	0b1b      	lsrs	r3, r3, #12
 800c964:	f003 0307 	and.w	r3, r3, #7
 800c968:	4904      	ldr	r1, [pc, #16]	@ (800c97c <HAL_RCC_GetPCLK3Freq+0x28>)
 800c96a:	5ccb      	ldrb	r3, [r1, r3]
 800c96c:	f003 031f 	and.w	r3, r3, #31
 800c970:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c974:	4618      	mov	r0, r3
 800c976:	bd80      	pop	{r7, pc}
 800c978:	44020c00 	.word	0x44020c00
 800c97c:	08024364 	.word	0x08024364

0800c980 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800c980:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c984:	b0d8      	sub	sp, #352	@ 0x160
 800c986:	af00      	add	r7, sp, #0
 800c988:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c98c:	2300      	movs	r3, #0
 800c98e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c992:	2300      	movs	r3, #0
 800c994:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c998:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800c99c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9a0:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 800c9a4:	2500      	movs	r5, #0
 800c9a6:	ea54 0305 	orrs.w	r3, r4, r5
 800c9aa:	d00b      	beq.n	800c9c4 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 800c9ac:	4bcd      	ldr	r3, [pc, #820]	@ (800cce4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800c9ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c9b2:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 800c9b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800c9ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c9bc:	4ac9      	ldr	r2, [pc, #804]	@ (800cce4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800c9be:	430b      	orrs	r3, r1
 800c9c0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800c9c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800c9c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9cc:	f002 0801 	and.w	r8, r2, #1
 800c9d0:	f04f 0900 	mov.w	r9, #0
 800c9d4:	ea58 0309 	orrs.w	r3, r8, r9
 800c9d8:	d042      	beq.n	800ca60 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 800c9da:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800c9de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c9e0:	2b05      	cmp	r3, #5
 800c9e2:	d823      	bhi.n	800ca2c <HAL_RCCEx_PeriphCLKConfig+0xac>
 800c9e4:	a201      	add	r2, pc, #4	@ (adr r2, 800c9ec <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 800c9e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9ea:	bf00      	nop
 800c9ec:	0800ca35 	.word	0x0800ca35
 800c9f0:	0800ca05 	.word	0x0800ca05
 800c9f4:	0800ca19 	.word	0x0800ca19
 800c9f8:	0800ca35 	.word	0x0800ca35
 800c9fc:	0800ca35 	.word	0x0800ca35
 800ca00:	0800ca35 	.word	0x0800ca35
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800ca04:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ca08:	3308      	adds	r3, #8
 800ca0a:	4618      	mov	r0, r3
 800ca0c:	f004 feda 	bl	80117c4 <RCCEx_PLL2_Config>
 800ca10:	4603      	mov	r3, r0
 800ca12:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 800ca16:	e00e      	b.n	800ca36 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800ca18:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ca1c:	3330      	adds	r3, #48	@ 0x30
 800ca1e:	4618      	mov	r0, r3
 800ca20:	f004 ff68 	bl	80118f4 <RCCEx_PLL3_Config>
 800ca24:	4603      	mov	r3, r0
 800ca26:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 800ca2a:	e004      	b.n	800ca36 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ca2c:	2301      	movs	r3, #1
 800ca2e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800ca32:	e000      	b.n	800ca36 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 800ca34:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ca36:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d10c      	bne.n	800ca58 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800ca3e:	4ba9      	ldr	r3, [pc, #676]	@ (800cce4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800ca40:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800ca44:	f023 0107 	bic.w	r1, r3, #7
 800ca48:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ca4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ca4e:	4aa5      	ldr	r2, [pc, #660]	@ (800cce4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800ca50:	430b      	orrs	r3, r1
 800ca52:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800ca56:	e003      	b.n	800ca60 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca58:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800ca5c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800ca60:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ca64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca68:	f002 0a02 	and.w	sl, r2, #2
 800ca6c:	f04f 0b00 	mov.w	fp, #0
 800ca70:	ea5a 030b 	orrs.w	r3, sl, fp
 800ca74:	f000 8088 	beq.w	800cb88 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 800ca78:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ca7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ca7e:	2b28      	cmp	r3, #40	@ 0x28
 800ca80:	d868      	bhi.n	800cb54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800ca82:	a201      	add	r2, pc, #4	@ (adr r2, 800ca88 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 800ca84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca88:	0800cb5d 	.word	0x0800cb5d
 800ca8c:	0800cb55 	.word	0x0800cb55
 800ca90:	0800cb55 	.word	0x0800cb55
 800ca94:	0800cb55 	.word	0x0800cb55
 800ca98:	0800cb55 	.word	0x0800cb55
 800ca9c:	0800cb55 	.word	0x0800cb55
 800caa0:	0800cb55 	.word	0x0800cb55
 800caa4:	0800cb55 	.word	0x0800cb55
 800caa8:	0800cb2d 	.word	0x0800cb2d
 800caac:	0800cb55 	.word	0x0800cb55
 800cab0:	0800cb55 	.word	0x0800cb55
 800cab4:	0800cb55 	.word	0x0800cb55
 800cab8:	0800cb55 	.word	0x0800cb55
 800cabc:	0800cb55 	.word	0x0800cb55
 800cac0:	0800cb55 	.word	0x0800cb55
 800cac4:	0800cb55 	.word	0x0800cb55
 800cac8:	0800cb41 	.word	0x0800cb41
 800cacc:	0800cb55 	.word	0x0800cb55
 800cad0:	0800cb55 	.word	0x0800cb55
 800cad4:	0800cb55 	.word	0x0800cb55
 800cad8:	0800cb55 	.word	0x0800cb55
 800cadc:	0800cb55 	.word	0x0800cb55
 800cae0:	0800cb55 	.word	0x0800cb55
 800cae4:	0800cb55 	.word	0x0800cb55
 800cae8:	0800cb5d 	.word	0x0800cb5d
 800caec:	0800cb55 	.word	0x0800cb55
 800caf0:	0800cb55 	.word	0x0800cb55
 800caf4:	0800cb55 	.word	0x0800cb55
 800caf8:	0800cb55 	.word	0x0800cb55
 800cafc:	0800cb55 	.word	0x0800cb55
 800cb00:	0800cb55 	.word	0x0800cb55
 800cb04:	0800cb55 	.word	0x0800cb55
 800cb08:	0800cb5d 	.word	0x0800cb5d
 800cb0c:	0800cb55 	.word	0x0800cb55
 800cb10:	0800cb55 	.word	0x0800cb55
 800cb14:	0800cb55 	.word	0x0800cb55
 800cb18:	0800cb55 	.word	0x0800cb55
 800cb1c:	0800cb55 	.word	0x0800cb55
 800cb20:	0800cb55 	.word	0x0800cb55
 800cb24:	0800cb55 	.word	0x0800cb55
 800cb28:	0800cb5d 	.word	0x0800cb5d
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800cb2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800cb30:	3308      	adds	r3, #8
 800cb32:	4618      	mov	r0, r3
 800cb34:	f004 fe46 	bl	80117c4 <RCCEx_PLL2_Config>
 800cb38:	4603      	mov	r3, r0
 800cb3a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 800cb3e:	e00e      	b.n	800cb5e <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800cb40:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800cb44:	3330      	adds	r3, #48	@ 0x30
 800cb46:	4618      	mov	r0, r3
 800cb48:	f004 fed4 	bl	80118f4 <RCCEx_PLL3_Config>
 800cb4c:	4603      	mov	r3, r0
 800cb4e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 800cb52:	e004      	b.n	800cb5e <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cb54:	2301      	movs	r3, #1
 800cb56:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800cb5a:	e000      	b.n	800cb5e <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 800cb5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cb5e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d10c      	bne.n	800cb80 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800cb66:	4b5f      	ldr	r3, [pc, #380]	@ (800cce4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800cb68:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800cb6c:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800cb70:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800cb74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cb76:	4a5b      	ldr	r2, [pc, #364]	@ (800cce4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800cb78:	430b      	orrs	r3, r1
 800cb7a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800cb7e:	e003      	b.n	800cb88 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb80:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800cb84:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800cb88:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800cb8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb90:	f002 0304 	and.w	r3, r2, #4
 800cb94:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 800cb98:	2300      	movs	r3, #0
 800cb9a:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 800cb9e:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	@ 0x140
 800cba2:	460b      	mov	r3, r1
 800cba4:	4313      	orrs	r3, r2
 800cba6:	d04e      	beq.n	800cc46 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 800cba8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800cbac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cbae:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800cbb2:	d02c      	beq.n	800cc0e <HAL_RCCEx_PeriphCLKConfig+0x28e>
 800cbb4:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800cbb8:	d825      	bhi.n	800cc06 <HAL_RCCEx_PeriphCLKConfig+0x286>
 800cbba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cbbe:	d028      	beq.n	800cc12 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800cbc0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cbc4:	d81f      	bhi.n	800cc06 <HAL_RCCEx_PeriphCLKConfig+0x286>
 800cbc6:	2bc0      	cmp	r3, #192	@ 0xc0
 800cbc8:	d025      	beq.n	800cc16 <HAL_RCCEx_PeriphCLKConfig+0x296>
 800cbca:	2bc0      	cmp	r3, #192	@ 0xc0
 800cbcc:	d81b      	bhi.n	800cc06 <HAL_RCCEx_PeriphCLKConfig+0x286>
 800cbce:	2b80      	cmp	r3, #128	@ 0x80
 800cbd0:	d00f      	beq.n	800cbf2 <HAL_RCCEx_PeriphCLKConfig+0x272>
 800cbd2:	2b80      	cmp	r3, #128	@ 0x80
 800cbd4:	d817      	bhi.n	800cc06 <HAL_RCCEx_PeriphCLKConfig+0x286>
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d01f      	beq.n	800cc1a <HAL_RCCEx_PeriphCLKConfig+0x29a>
 800cbda:	2b40      	cmp	r3, #64	@ 0x40
 800cbdc:	d113      	bne.n	800cc06 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800cbde:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800cbe2:	3308      	adds	r3, #8
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	f004 fded 	bl	80117c4 <RCCEx_PLL2_Config>
 800cbea:	4603      	mov	r3, r0
 800cbec:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 800cbf0:	e014      	b.n	800cc1c <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800cbf2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800cbf6:	3330      	adds	r3, #48	@ 0x30
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	f004 fe7b 	bl	80118f4 <RCCEx_PLL3_Config>
 800cbfe:	4603      	mov	r3, r0
 800cc00:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 800cc04:	e00a      	b.n	800cc1c <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cc06:	2301      	movs	r3, #1
 800cc08:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800cc0c:	e006      	b.n	800cc1c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800cc0e:	bf00      	nop
 800cc10:	e004      	b.n	800cc1c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800cc12:	bf00      	nop
 800cc14:	e002      	b.n	800cc1c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800cc16:	bf00      	nop
 800cc18:	e000      	b.n	800cc1c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800cc1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cc1c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d10c      	bne.n	800cc3e <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800cc24:	4b2f      	ldr	r3, [pc, #188]	@ (800cce4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800cc26:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800cc2a:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800cc2e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800cc32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cc34:	4a2b      	ldr	r2, [pc, #172]	@ (800cce4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800cc36:	430b      	orrs	r3, r1
 800cc38:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800cc3c:	e003      	b.n	800cc46 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cc3e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800cc42:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800cc46:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800cc4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc4e:	f002 0308 	and.w	r3, r2, #8
 800cc52:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 800cc56:	2300      	movs	r3, #0
 800cc58:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 800cc5c:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	@ 0x138
 800cc60:	460b      	mov	r3, r1
 800cc62:	4313      	orrs	r3, r2
 800cc64:	d056      	beq.n	800cd14 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 800cc66:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800cc6a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cc6c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800cc70:	d031      	beq.n	800ccd6 <HAL_RCCEx_PeriphCLKConfig+0x356>
 800cc72:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800cc76:	d82a      	bhi.n	800ccce <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800cc78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cc7c:	d02d      	beq.n	800ccda <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800cc7e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cc82:	d824      	bhi.n	800ccce <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800cc84:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800cc88:	d029      	beq.n	800ccde <HAL_RCCEx_PeriphCLKConfig+0x35e>
 800cc8a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800cc8e:	d81e      	bhi.n	800ccce <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800cc90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cc94:	d011      	beq.n	800ccba <HAL_RCCEx_PeriphCLKConfig+0x33a>
 800cc96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cc9a:	d818      	bhi.n	800ccce <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d023      	beq.n	800cce8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800cca0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cca4:	d113      	bne.n	800ccce <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800cca6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ccaa:	3308      	adds	r3, #8
 800ccac:	4618      	mov	r0, r3
 800ccae:	f004 fd89 	bl	80117c4 <RCCEx_PLL2_Config>
 800ccb2:	4603      	mov	r3, r0
 800ccb4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 800ccb8:	e017      	b.n	800ccea <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800ccba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ccbe:	3330      	adds	r3, #48	@ 0x30
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	f004 fe17 	bl	80118f4 <RCCEx_PLL3_Config>
 800ccc6:	4603      	mov	r3, r0
 800ccc8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 800cccc:	e00d      	b.n	800ccea <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ccce:	2301      	movs	r3, #1
 800ccd0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800ccd4:	e009      	b.n	800ccea <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800ccd6:	bf00      	nop
 800ccd8:	e007      	b.n	800ccea <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800ccda:	bf00      	nop
 800ccdc:	e005      	b.n	800ccea <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800ccde:	bf00      	nop
 800cce0:	e003      	b.n	800ccea <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800cce2:	bf00      	nop
 800cce4:	44020c00 	.word	0x44020c00
        break;
 800cce8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ccea:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d10c      	bne.n	800cd0c <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800ccf2:	4bbb      	ldr	r3, [pc, #748]	@ (800cfe0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800ccf4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800ccf8:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 800ccfc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800cd00:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cd02:	4ab7      	ldr	r2, [pc, #732]	@ (800cfe0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800cd04:	430b      	orrs	r3, r1
 800cd06:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800cd0a:	e003      	b.n	800cd14 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cd0c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800cd10:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800cd14:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800cd18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd1c:	f002 0310 	and.w	r3, r2, #16
 800cd20:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800cd24:	2300      	movs	r3, #0
 800cd26:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800cd2a:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 800cd2e:	460b      	mov	r3, r1
 800cd30:	4313      	orrs	r3, r2
 800cd32:	d053      	beq.n	800cddc <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 800cd34:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800cd38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cd3a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800cd3e:	d031      	beq.n	800cda4 <HAL_RCCEx_PeriphCLKConfig+0x424>
 800cd40:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800cd44:	d82a      	bhi.n	800cd9c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800cd46:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cd4a:	d02d      	beq.n	800cda8 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800cd4c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cd50:	d824      	bhi.n	800cd9c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800cd52:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800cd56:	d029      	beq.n	800cdac <HAL_RCCEx_PeriphCLKConfig+0x42c>
 800cd58:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800cd5c:	d81e      	bhi.n	800cd9c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800cd5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cd62:	d011      	beq.n	800cd88 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800cd64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cd68:	d818      	bhi.n	800cd9c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d020      	beq.n	800cdb0 <HAL_RCCEx_PeriphCLKConfig+0x430>
 800cd6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cd72:	d113      	bne.n	800cd9c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800cd74:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800cd78:	3308      	adds	r3, #8
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	f004 fd22 	bl	80117c4 <RCCEx_PLL2_Config>
 800cd80:	4603      	mov	r3, r0
 800cd82:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 800cd86:	e014      	b.n	800cdb2 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800cd88:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800cd8c:	3330      	adds	r3, #48	@ 0x30
 800cd8e:	4618      	mov	r0, r3
 800cd90:	f004 fdb0 	bl	80118f4 <RCCEx_PLL3_Config>
 800cd94:	4603      	mov	r3, r0
 800cd96:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 800cd9a:	e00a      	b.n	800cdb2 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cd9c:	2301      	movs	r3, #1
 800cd9e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800cda2:	e006      	b.n	800cdb2 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800cda4:	bf00      	nop
 800cda6:	e004      	b.n	800cdb2 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800cda8:	bf00      	nop
 800cdaa:	e002      	b.n	800cdb2 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800cdac:	bf00      	nop
 800cdae:	e000      	b.n	800cdb2 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800cdb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cdb2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d10c      	bne.n	800cdd4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800cdba:	4b89      	ldr	r3, [pc, #548]	@ (800cfe0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800cdbc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800cdc0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800cdc4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800cdc8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cdca:	4a85      	ldr	r2, [pc, #532]	@ (800cfe0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800cdcc:	430b      	orrs	r3, r1
 800cdce:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800cdd2:	e003      	b.n	800cddc <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cdd4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800cdd8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800cddc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800cde0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cde4:	f002 0320 	and.w	r3, r2, #32
 800cde8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 800cdec:	2300      	movs	r3, #0
 800cdee:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800cdf2:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 800cdf6:	460b      	mov	r3, r1
 800cdf8:	4313      	orrs	r3, r2
 800cdfa:	d053      	beq.n	800cea4 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 800cdfc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ce00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ce02:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800ce06:	d031      	beq.n	800ce6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 800ce08:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800ce0c:	d82a      	bhi.n	800ce64 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800ce0e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ce12:	d02d      	beq.n	800ce70 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800ce14:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ce18:	d824      	bhi.n	800ce64 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800ce1a:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800ce1e:	d029      	beq.n	800ce74 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 800ce20:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800ce24:	d81e      	bhi.n	800ce64 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800ce26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ce2a:	d011      	beq.n	800ce50 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800ce2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ce30:	d818      	bhi.n	800ce64 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d020      	beq.n	800ce78 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 800ce36:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ce3a:	d113      	bne.n	800ce64 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800ce3c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ce40:	3308      	adds	r3, #8
 800ce42:	4618      	mov	r0, r3
 800ce44:	f004 fcbe 	bl	80117c4 <RCCEx_PLL2_Config>
 800ce48:	4603      	mov	r3, r0
 800ce4a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 800ce4e:	e014      	b.n	800ce7a <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800ce50:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ce54:	3330      	adds	r3, #48	@ 0x30
 800ce56:	4618      	mov	r0, r3
 800ce58:	f004 fd4c 	bl	80118f4 <RCCEx_PLL3_Config>
 800ce5c:	4603      	mov	r3, r0
 800ce5e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 800ce62:	e00a      	b.n	800ce7a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ce64:	2301      	movs	r3, #1
 800ce66:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800ce6a:	e006      	b.n	800ce7a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800ce6c:	bf00      	nop
 800ce6e:	e004      	b.n	800ce7a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800ce70:	bf00      	nop
 800ce72:	e002      	b.n	800ce7a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800ce74:	bf00      	nop
 800ce76:	e000      	b.n	800ce7a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800ce78:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ce7a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d10c      	bne.n	800ce9c <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 800ce82:	4b57      	ldr	r3, [pc, #348]	@ (800cfe0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800ce84:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800ce88:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 800ce8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ce90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ce92:	4a53      	ldr	r2, [pc, #332]	@ (800cfe0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800ce94:	430b      	orrs	r3, r1
 800ce96:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800ce9a:	e003      	b.n	800cea4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ce9c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800cea0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800cea4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800cea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceac:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800ceb0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800ceba:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 800cebe:	460b      	mov	r3, r1
 800cec0:	4313      	orrs	r3, r2
 800cec2:	d053      	beq.n	800cf6c <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 800cec4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800cec8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ceca:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800cece:	d031      	beq.n	800cf34 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 800ced0:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800ced4:	d82a      	bhi.n	800cf2c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800ced6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ceda:	d02d      	beq.n	800cf38 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 800cedc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cee0:	d824      	bhi.n	800cf2c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800cee2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800cee6:	d029      	beq.n	800cf3c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800cee8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800ceec:	d81e      	bhi.n	800cf2c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800ceee:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800cef2:	d011      	beq.n	800cf18 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800cef4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800cef8:	d818      	bhi.n	800cf2c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d020      	beq.n	800cf40 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800cefe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800cf02:	d113      	bne.n	800cf2c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800cf04:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800cf08:	3308      	adds	r3, #8
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	f004 fc5a 	bl	80117c4 <RCCEx_PLL2_Config>
 800cf10:	4603      	mov	r3, r0
 800cf12:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 800cf16:	e014      	b.n	800cf42 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800cf18:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800cf1c:	3330      	adds	r3, #48	@ 0x30
 800cf1e:	4618      	mov	r0, r3
 800cf20:	f004 fce8 	bl	80118f4 <RCCEx_PLL3_Config>
 800cf24:	4603      	mov	r3, r0
 800cf26:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 800cf2a:	e00a      	b.n	800cf42 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cf2c:	2301      	movs	r3, #1
 800cf2e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800cf32:	e006      	b.n	800cf42 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800cf34:	bf00      	nop
 800cf36:	e004      	b.n	800cf42 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800cf38:	bf00      	nop
 800cf3a:	e002      	b.n	800cf42 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800cf3c:	bf00      	nop
 800cf3e:	e000      	b.n	800cf42 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800cf40:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cf42:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d10c      	bne.n	800cf64 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 800cf4a:	4b25      	ldr	r3, [pc, #148]	@ (800cfe0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800cf4c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800cf50:	f423 11e0 	bic.w	r1, r3, #1835008	@ 0x1c0000
 800cf54:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800cf58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cf5a:	4a21      	ldr	r2, [pc, #132]	@ (800cfe0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800cf5c:	430b      	orrs	r3, r1
 800cf5e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800cf62:	e003      	b.n	800cf6c <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cf64:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800cf68:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800cf6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800cf70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf74:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800cf78:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800cf82:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	@ 0x118
 800cf86:	460b      	mov	r3, r1
 800cf88:	4313      	orrs	r3, r2
 800cf8a:	d055      	beq.n	800d038 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 800cf8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800cf90:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cf92:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800cf96:	d033      	beq.n	800d000 <HAL_RCCEx_PeriphCLKConfig+0x680>
 800cf98:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800cf9c:	d82c      	bhi.n	800cff8 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800cf9e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800cfa2:	d02f      	beq.n	800d004 <HAL_RCCEx_PeriphCLKConfig+0x684>
 800cfa4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800cfa8:	d826      	bhi.n	800cff8 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800cfaa:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800cfae:	d02b      	beq.n	800d008 <HAL_RCCEx_PeriphCLKConfig+0x688>
 800cfb0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800cfb4:	d820      	bhi.n	800cff8 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800cfb6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800cfba:	d013      	beq.n	800cfe4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800cfbc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800cfc0:	d81a      	bhi.n	800cff8 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d022      	beq.n	800d00c <HAL_RCCEx_PeriphCLKConfig+0x68c>
 800cfc6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800cfca:	d115      	bne.n	800cff8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800cfcc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800cfd0:	3308      	adds	r3, #8
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	f004 fbf6 	bl	80117c4 <RCCEx_PLL2_Config>
 800cfd8:	4603      	mov	r3, r0
 800cfda:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 800cfde:	e016      	b.n	800d00e <HAL_RCCEx_PeriphCLKConfig+0x68e>
 800cfe0:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800cfe4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800cfe8:	3330      	adds	r3, #48	@ 0x30
 800cfea:	4618      	mov	r0, r3
 800cfec:	f004 fc82 	bl	80118f4 <RCCEx_PLL3_Config>
 800cff0:	4603      	mov	r3, r0
 800cff2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 800cff6:	e00a      	b.n	800d00e <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cff8:	2301      	movs	r3, #1
 800cffa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800cffe:	e006      	b.n	800d00e <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 800d000:	bf00      	nop
 800d002:	e004      	b.n	800d00e <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 800d004:	bf00      	nop
 800d006:	e002      	b.n	800d00e <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 800d008:	bf00      	nop
 800d00a:	e000      	b.n	800d00e <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 800d00c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d00e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800d012:	2b00      	cmp	r3, #0
 800d014:	d10c      	bne.n	800d030 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 800d016:	4bbb      	ldr	r3, [pc, #748]	@ (800d304 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800d018:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800d01c:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800d020:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d024:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d026:	4ab7      	ldr	r2, [pc, #732]	@ (800d304 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800d028:	430b      	orrs	r3, r1
 800d02a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800d02e:	e003      	b.n	800d038 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d030:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800d034:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 800d038:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d03c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d040:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 800d044:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800d048:	2300      	movs	r3, #0
 800d04a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800d04e:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 800d052:	460b      	mov	r3, r1
 800d054:	4313      	orrs	r3, r2
 800d056:	d053      	beq.n	800d100 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 800d058:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d05c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d05e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800d062:	d031      	beq.n	800d0c8 <HAL_RCCEx_PeriphCLKConfig+0x748>
 800d064:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800d068:	d82a      	bhi.n	800d0c0 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800d06a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d06e:	d02d      	beq.n	800d0cc <HAL_RCCEx_PeriphCLKConfig+0x74c>
 800d070:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d074:	d824      	bhi.n	800d0c0 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800d076:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800d07a:	d029      	beq.n	800d0d0 <HAL_RCCEx_PeriphCLKConfig+0x750>
 800d07c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800d080:	d81e      	bhi.n	800d0c0 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800d082:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d086:	d011      	beq.n	800d0ac <HAL_RCCEx_PeriphCLKConfig+0x72c>
 800d088:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d08c:	d818      	bhi.n	800d0c0 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d020      	beq.n	800d0d4 <HAL_RCCEx_PeriphCLKConfig+0x754>
 800d092:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d096:	d113      	bne.n	800d0c0 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800d098:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d09c:	3308      	adds	r3, #8
 800d09e:	4618      	mov	r0, r3
 800d0a0:	f004 fb90 	bl	80117c4 <RCCEx_PLL2_Config>
 800d0a4:	4603      	mov	r3, r0
 800d0a6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 800d0aa:	e014      	b.n	800d0d6 <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800d0ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d0b0:	3330      	adds	r3, #48	@ 0x30
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	f004 fc1e 	bl	80118f4 <RCCEx_PLL3_Config>
 800d0b8:	4603      	mov	r3, r0
 800d0ba:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 800d0be:	e00a      	b.n	800d0d6 <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d0c0:	2301      	movs	r3, #1
 800d0c2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800d0c6:	e006      	b.n	800d0d6 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800d0c8:	bf00      	nop
 800d0ca:	e004      	b.n	800d0d6 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800d0cc:	bf00      	nop
 800d0ce:	e002      	b.n	800d0d6 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800d0d0:	bf00      	nop
 800d0d2:	e000      	b.n	800d0d6 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800d0d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d0d6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d10c      	bne.n	800d0f8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 800d0de:	4b89      	ldr	r3, [pc, #548]	@ (800d304 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800d0e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800d0e4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800d0e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d0ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d0ee:	4a85      	ldr	r2, [pc, #532]	@ (800d304 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800d0f0:	430b      	orrs	r3, r1
 800d0f2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800d0f6:	e003      	b.n	800d100 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d0f8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800d0fc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 800d100:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d104:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d108:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 800d10c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800d110:	2300      	movs	r3, #0
 800d112:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800d116:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800d11a:	460b      	mov	r3, r1
 800d11c:	4313      	orrs	r3, r2
 800d11e:	d055      	beq.n	800d1cc <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 800d120:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d124:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d128:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 800d12c:	d031      	beq.n	800d192 <HAL_RCCEx_PeriphCLKConfig+0x812>
 800d12e:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 800d132:	d82a      	bhi.n	800d18a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800d134:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d138:	d02d      	beq.n	800d196 <HAL_RCCEx_PeriphCLKConfig+0x816>
 800d13a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d13e:	d824      	bhi.n	800d18a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800d140:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800d144:	d029      	beq.n	800d19a <HAL_RCCEx_PeriphCLKConfig+0x81a>
 800d146:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800d14a:	d81e      	bhi.n	800d18a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800d14c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d150:	d011      	beq.n	800d176 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 800d152:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d156:	d818      	bhi.n	800d18a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d020      	beq.n	800d19e <HAL_RCCEx_PeriphCLKConfig+0x81e>
 800d15c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d160:	d113      	bne.n	800d18a <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800d162:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d166:	3308      	adds	r3, #8
 800d168:	4618      	mov	r0, r3
 800d16a:	f004 fb2b 	bl	80117c4 <RCCEx_PLL2_Config>
 800d16e:	4603      	mov	r3, r0
 800d170:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 800d174:	e014      	b.n	800d1a0 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800d176:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d17a:	3330      	adds	r3, #48	@ 0x30
 800d17c:	4618      	mov	r0, r3
 800d17e:	f004 fbb9 	bl	80118f4 <RCCEx_PLL3_Config>
 800d182:	4603      	mov	r3, r0
 800d184:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 800d188:	e00a      	b.n	800d1a0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d18a:	2301      	movs	r3, #1
 800d18c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800d190:	e006      	b.n	800d1a0 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800d192:	bf00      	nop
 800d194:	e004      	b.n	800d1a0 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800d196:	bf00      	nop
 800d198:	e002      	b.n	800d1a0 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800d19a:	bf00      	nop
 800d19c:	e000      	b.n	800d1a0 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800d19e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d1a0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d10d      	bne.n	800d1c4 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 800d1a8:	4b56      	ldr	r3, [pc, #344]	@ (800d304 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800d1aa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800d1ae:	f023 5160 	bic.w	r1, r3, #939524096	@ 0x38000000
 800d1b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d1b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d1ba:	4a52      	ldr	r2, [pc, #328]	@ (800d304 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800d1bc:	430b      	orrs	r3, r1
 800d1be:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800d1c2:	e003      	b.n	800d1cc <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d1c4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800d1c8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 800d1cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d1d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1d4:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800d1d8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800d1dc:	2300      	movs	r3, #0
 800d1de:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800d1e2:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800d1e6:	460b      	mov	r3, r1
 800d1e8:	4313      	orrs	r3, r2
 800d1ea:	d044      	beq.n	800d276 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 800d1ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d1f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d1f4:	2b05      	cmp	r3, #5
 800d1f6:	d823      	bhi.n	800d240 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 800d1f8:	a201      	add	r2, pc, #4	@ (adr r2, 800d200 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 800d1fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1fe:	bf00      	nop
 800d200:	0800d249 	.word	0x0800d249
 800d204:	0800d219 	.word	0x0800d219
 800d208:	0800d22d 	.word	0x0800d22d
 800d20c:	0800d249 	.word	0x0800d249
 800d210:	0800d249 	.word	0x0800d249
 800d214:	0800d249 	.word	0x0800d249
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800d218:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d21c:	3308      	adds	r3, #8
 800d21e:	4618      	mov	r0, r3
 800d220:	f004 fad0 	bl	80117c4 <RCCEx_PLL2_Config>
 800d224:	4603      	mov	r3, r0
 800d226:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 800d22a:	e00e      	b.n	800d24a <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800d22c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d230:	3330      	adds	r3, #48	@ 0x30
 800d232:	4618      	mov	r0, r3
 800d234:	f004 fb5e 	bl	80118f4 <RCCEx_PLL3_Config>
 800d238:	4603      	mov	r3, r0
 800d23a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 800d23e:	e004      	b.n	800d24a <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d240:	2301      	movs	r3, #1
 800d242:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800d246:	e000      	b.n	800d24a <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 800d248:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d24a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d10d      	bne.n	800d26e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 800d252:	4b2c      	ldr	r3, [pc, #176]	@ (800d304 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800d254:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800d258:	f023 0107 	bic.w	r1, r3, #7
 800d25c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d260:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d264:	4a27      	ldr	r2, [pc, #156]	@ (800d304 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800d266:	430b      	orrs	r3, r1
 800d268:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800d26c:	e003      	b.n	800d276 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d26e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800d272:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 800d276:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d27e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800d282:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800d286:	2300      	movs	r3, #0
 800d288:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800d28c:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800d290:	460b      	mov	r3, r1
 800d292:	4313      	orrs	r3, r2
 800d294:	d04f      	beq.n	800d336 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 800d296:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d29a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d29e:	2b50      	cmp	r3, #80	@ 0x50
 800d2a0:	d029      	beq.n	800d2f6 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800d2a2:	2b50      	cmp	r3, #80	@ 0x50
 800d2a4:	d823      	bhi.n	800d2ee <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800d2a6:	2b40      	cmp	r3, #64	@ 0x40
 800d2a8:	d027      	beq.n	800d2fa <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800d2aa:	2b40      	cmp	r3, #64	@ 0x40
 800d2ac:	d81f      	bhi.n	800d2ee <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800d2ae:	2b30      	cmp	r3, #48	@ 0x30
 800d2b0:	d025      	beq.n	800d2fe <HAL_RCCEx_PeriphCLKConfig+0x97e>
 800d2b2:	2b30      	cmp	r3, #48	@ 0x30
 800d2b4:	d81b      	bhi.n	800d2ee <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800d2b6:	2b20      	cmp	r3, #32
 800d2b8:	d00f      	beq.n	800d2da <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800d2ba:	2b20      	cmp	r3, #32
 800d2bc:	d817      	bhi.n	800d2ee <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d022      	beq.n	800d308 <HAL_RCCEx_PeriphCLKConfig+0x988>
 800d2c2:	2b10      	cmp	r3, #16
 800d2c4:	d113      	bne.n	800d2ee <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800d2c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d2ca:	3308      	adds	r3, #8
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	f004 fa79 	bl	80117c4 <RCCEx_PLL2_Config>
 800d2d2:	4603      	mov	r3, r0
 800d2d4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 800d2d8:	e017      	b.n	800d30a <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800d2da:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d2de:	3330      	adds	r3, #48	@ 0x30
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	f004 fb07 	bl	80118f4 <RCCEx_PLL3_Config>
 800d2e6:	4603      	mov	r3, r0
 800d2e8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 800d2ec:	e00d      	b.n	800d30a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d2ee:	2301      	movs	r3, #1
 800d2f0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800d2f4:	e009      	b.n	800d30a <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800d2f6:	bf00      	nop
 800d2f8:	e007      	b.n	800d30a <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800d2fa:	bf00      	nop
 800d2fc:	e005      	b.n	800d30a <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800d2fe:	bf00      	nop
 800d300:	e003      	b.n	800d30a <HAL_RCCEx_PeriphCLKConfig+0x98a>
 800d302:	bf00      	nop
 800d304:	44020c00 	.word	0x44020c00
        break;
 800d308:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d30a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d10d      	bne.n	800d32e <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 800d312:	4baf      	ldr	r3, [pc, #700]	@ (800d5d0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800d314:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800d318:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 800d31c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d320:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d324:	4aaa      	ldr	r2, [pc, #680]	@ (800d5d0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800d326:	430b      	orrs	r3, r1
 800d328:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800d32c:	e003      	b.n	800d336 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d32e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800d332:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d336:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d33a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d33e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800d342:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800d346:	2300      	movs	r3, #0
 800d348:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d34c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800d350:	460b      	mov	r3, r1
 800d352:	4313      	orrs	r3, r2
 800d354:	d055      	beq.n	800d402 <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 800d356:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d35a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d35e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800d362:	d031      	beq.n	800d3c8 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 800d364:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800d368:	d82a      	bhi.n	800d3c0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800d36a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d36e:	d02d      	beq.n	800d3cc <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 800d370:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d374:	d824      	bhi.n	800d3c0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800d376:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800d37a:	d029      	beq.n	800d3d0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 800d37c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800d380:	d81e      	bhi.n	800d3c0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800d382:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d386:	d011      	beq.n	800d3ac <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 800d388:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d38c:	d818      	bhi.n	800d3c0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d020      	beq.n	800d3d4 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 800d392:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d396:	d113      	bne.n	800d3c0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800d398:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d39c:	3308      	adds	r3, #8
 800d39e:	4618      	mov	r0, r3
 800d3a0:	f004 fa10 	bl	80117c4 <RCCEx_PLL2_Config>
 800d3a4:	4603      	mov	r3, r0
 800d3a6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800d3aa:	e014      	b.n	800d3d6 <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800d3ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d3b0:	3330      	adds	r3, #48	@ 0x30
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	f004 fa9e 	bl	80118f4 <RCCEx_PLL3_Config>
 800d3b8:	4603      	mov	r3, r0
 800d3ba:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800d3be:	e00a      	b.n	800d3d6 <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d3c0:	2301      	movs	r3, #1
 800d3c2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800d3c6:	e006      	b.n	800d3d6 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 800d3c8:	bf00      	nop
 800d3ca:	e004      	b.n	800d3d6 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 800d3cc:	bf00      	nop
 800d3ce:	e002      	b.n	800d3d6 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 800d3d0:	bf00      	nop
 800d3d2:	e000      	b.n	800d3d6 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 800d3d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d3d6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d10d      	bne.n	800d3fa <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800d3de:	4b7c      	ldr	r3, [pc, #496]	@ (800d5d0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800d3e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d3e4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800d3e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d3ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d3f0:	4a77      	ldr	r2, [pc, #476]	@ (800d5d0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800d3f2:	430b      	orrs	r3, r1
 800d3f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800d3f8:	e003      	b.n	800d402 <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d3fa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800d3fe:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d402:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d40a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800d40e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800d412:	2300      	movs	r3, #0
 800d414:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800d418:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800d41c:	460b      	mov	r3, r1
 800d41e:	4313      	orrs	r3, r2
 800d420:	d03d      	beq.n	800d49e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 800d422:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d426:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d42a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d42e:	d01b      	beq.n	800d468 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 800d430:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d434:	d814      	bhi.n	800d460 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 800d436:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d43a:	d017      	beq.n	800d46c <HAL_RCCEx_PeriphCLKConfig+0xaec>
 800d43c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d440:	d80e      	bhi.n	800d460 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 800d442:	2b00      	cmp	r3, #0
 800d444:	d014      	beq.n	800d470 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 800d446:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d44a:	d109      	bne.n	800d460 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800d44c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d450:	3330      	adds	r3, #48	@ 0x30
 800d452:	4618      	mov	r0, r3
 800d454:	f004 fa4e 	bl	80118f4 <RCCEx_PLL3_Config>
 800d458:	4603      	mov	r3, r0
 800d45a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 800d45e:	e008      	b.n	800d472 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d460:	2301      	movs	r3, #1
 800d462:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800d466:	e004      	b.n	800d472 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 800d468:	bf00      	nop
 800d46a:	e002      	b.n	800d472 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 800d46c:	bf00      	nop
 800d46e:	e000      	b.n	800d472 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 800d470:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d472:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800d476:	2b00      	cmp	r3, #0
 800d478:	d10d      	bne.n	800d496 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800d47a:	4b55      	ldr	r3, [pc, #340]	@ (800d5d0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800d47c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d480:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800d484:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d488:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d48c:	4a50      	ldr	r2, [pc, #320]	@ (800d5d0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800d48e:	430b      	orrs	r3, r1
 800d490:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800d494:	e003      	b.n	800d49e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d496:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800d49a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800d49e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d4a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4a6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800d4aa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800d4b4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800d4b8:	460b      	mov	r3, r1
 800d4ba:	4313      	orrs	r3, r2
 800d4bc:	d03d      	beq.n	800d53a <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 800d4be:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d4c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d4c6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800d4ca:	d01b      	beq.n	800d504 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 800d4cc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800d4d0:	d814      	bhi.n	800d4fc <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 800d4d2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800d4d6:	d017      	beq.n	800d508 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 800d4d8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800d4dc:	d80e      	bhi.n	800d4fc <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d014      	beq.n	800d50c <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 800d4e2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d4e6:	d109      	bne.n	800d4fc <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800d4e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d4ec:	3330      	adds	r3, #48	@ 0x30
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	f004 fa00 	bl	80118f4 <RCCEx_PLL3_Config>
 800d4f4:	4603      	mov	r3, r0
 800d4f6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 800d4fa:	e008      	b.n	800d50e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d4fc:	2301      	movs	r3, #1
 800d4fe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800d502:	e004      	b.n	800d50e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 800d504:	bf00      	nop
 800d506:	e002      	b.n	800d50e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 800d508:	bf00      	nop
 800d50a:	e000      	b.n	800d50e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 800d50c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d50e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800d512:	2b00      	cmp	r3, #0
 800d514:	d10d      	bne.n	800d532 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800d516:	4b2e      	ldr	r3, [pc, #184]	@ (800d5d0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800d518:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d51c:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800d520:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d524:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d528:	4a29      	ldr	r2, [pc, #164]	@ (800d5d0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800d52a:	430b      	orrs	r3, r1
 800d52c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800d530:	e003      	b.n	800d53a <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d532:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800d536:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d53a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d53e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d542:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800d546:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800d54a:	2300      	movs	r3, #0
 800d54c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800d550:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800d554:	460b      	mov	r3, r1
 800d556:	4313      	orrs	r3, r2
 800d558:	d040      	beq.n	800d5dc <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 800d55a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d55e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d562:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d566:	d01b      	beq.n	800d5a0 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 800d568:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d56c:	d814      	bhi.n	800d598 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 800d56e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d572:	d017      	beq.n	800d5a4 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800d574:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d578:	d80e      	bhi.n	800d598 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d014      	beq.n	800d5a8 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800d57e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d582:	d109      	bne.n	800d598 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800d584:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d588:	3330      	adds	r3, #48	@ 0x30
 800d58a:	4618      	mov	r0, r3
 800d58c:	f004 f9b2 	bl	80118f4 <RCCEx_PLL3_Config>
 800d590:	4603      	mov	r3, r0
 800d592:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 800d596:	e008      	b.n	800d5aa <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d598:	2301      	movs	r3, #1
 800d59a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800d59e:	e004      	b.n	800d5aa <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 800d5a0:	bf00      	nop
 800d5a2:	e002      	b.n	800d5aa <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 800d5a4:	bf00      	nop
 800d5a6:	e000      	b.n	800d5aa <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 800d5a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d5aa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d110      	bne.n	800d5d4 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800d5b2:	4b07      	ldr	r3, [pc, #28]	@ (800d5d0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800d5b4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d5b8:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800d5bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d5c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d5c4:	4a02      	ldr	r2, [pc, #8]	@ (800d5d0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800d5c6:	430b      	orrs	r3, r1
 800d5c8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800d5cc:	e006      	b.n	800d5dc <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 800d5ce:	bf00      	nop
 800d5d0:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d5d4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800d5d8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d5dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d5e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5e4:	2100      	movs	r1, #0
 800d5e6:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 800d5ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d5ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800d5f2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800d5f6:	460b      	mov	r3, r1
 800d5f8:	4313      	orrs	r3, r2
 800d5fa:	d03d      	beq.n	800d678 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 800d5fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d600:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800d604:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800d608:	d01b      	beq.n	800d642 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 800d60a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800d60e:	d814      	bhi.n	800d63a <HAL_RCCEx_PeriphCLKConfig+0xcba>
 800d610:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d614:	d017      	beq.n	800d646 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 800d616:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d61a:	d80e      	bhi.n	800d63a <HAL_RCCEx_PeriphCLKConfig+0xcba>
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d014      	beq.n	800d64a <HAL_RCCEx_PeriphCLKConfig+0xcca>
 800d620:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d624:	d109      	bne.n	800d63a <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800d626:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d62a:	3330      	adds	r3, #48	@ 0x30
 800d62c:	4618      	mov	r0, r3
 800d62e:	f004 f961 	bl	80118f4 <RCCEx_PLL3_Config>
 800d632:	4603      	mov	r3, r0
 800d634:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 800d638:	e008      	b.n	800d64c <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d63a:	2301      	movs	r3, #1
 800d63c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800d640:	e004      	b.n	800d64c <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800d642:	bf00      	nop
 800d644:	e002      	b.n	800d64c <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800d646:	bf00      	nop
 800d648:	e000      	b.n	800d64c <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800d64a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d64c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800d650:	2b00      	cmp	r3, #0
 800d652:	d10d      	bne.n	800d670 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800d654:	4bbe      	ldr	r3, [pc, #760]	@ (800d950 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800d656:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d65a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800d65e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d662:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800d666:	4aba      	ldr	r2, [pc, #744]	@ (800d950 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800d668:	430b      	orrs	r3, r1
 800d66a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800d66e:	e003      	b.n	800d678 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d670:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800d674:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 800d678:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d67c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d680:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800d684:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d688:	2300      	movs	r3, #0
 800d68a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800d68e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800d692:	460b      	mov	r3, r1
 800d694:	4313      	orrs	r3, r2
 800d696:	d035      	beq.n	800d704 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 800d698:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d69c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d6a0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d6a4:	d015      	beq.n	800d6d2 <HAL_RCCEx_PeriphCLKConfig+0xd52>
 800d6a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d6aa:	d80e      	bhi.n	800d6ca <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d012      	beq.n	800d6d6 <HAL_RCCEx_PeriphCLKConfig+0xd56>
 800d6b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d6b4:	d109      	bne.n	800d6ca <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800d6b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d6ba:	3330      	adds	r3, #48	@ 0x30
 800d6bc:	4618      	mov	r0, r3
 800d6be:	f004 f919 	bl	80118f4 <RCCEx_PLL3_Config>
 800d6c2:	4603      	mov	r3, r0
 800d6c4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 800d6c8:	e006      	b.n	800d6d8 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d6ca:	2301      	movs	r3, #1
 800d6cc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800d6d0:	e002      	b.n	800d6d8 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 800d6d2:	bf00      	nop
 800d6d4:	e000      	b.n	800d6d8 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 800d6d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d6d8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d10d      	bne.n	800d6fc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 800d6e0:	4b9b      	ldr	r3, [pc, #620]	@ (800d950 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800d6e2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d6e6:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 800d6ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d6ee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d6f2:	4a97      	ldr	r2, [pc, #604]	@ (800d950 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800d6f4:	430b      	orrs	r3, r1
 800d6f6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800d6fa:	e003      	b.n	800d704 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d6fc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800d700:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800d704:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d70c:	2100      	movs	r1, #0
 800d70e:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 800d712:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d716:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d71a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800d71e:	460b      	mov	r3, r1
 800d720:	4313      	orrs	r3, r2
 800d722:	d00e      	beq.n	800d742 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 800d724:	4b8a      	ldr	r3, [pc, #552]	@ (800d950 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800d726:	69db      	ldr	r3, [r3, #28]
 800d728:	4a89      	ldr	r2, [pc, #548]	@ (800d950 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800d72a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800d72e:	61d3      	str	r3, [r2, #28]
 800d730:	4b87      	ldr	r3, [pc, #540]	@ (800d950 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800d732:	69d9      	ldr	r1, [r3, #28]
 800d734:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d738:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800d73c:	4a84      	ldr	r2, [pc, #528]	@ (800d950 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800d73e:	430b      	orrs	r3, r1
 800d740:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d742:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d74a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800d74e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d752:	2300      	movs	r3, #0
 800d754:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800d758:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800d75c:	460b      	mov	r3, r1
 800d75e:	4313      	orrs	r3, r2
 800d760:	d055      	beq.n	800d80e <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 800d762:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d766:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800d76a:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800d76e:	d031      	beq.n	800d7d4 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 800d770:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800d774:	d82a      	bhi.n	800d7cc <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800d776:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d77a:	d02d      	beq.n	800d7d8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 800d77c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d780:	d824      	bhi.n	800d7cc <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800d782:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d786:	d029      	beq.n	800d7dc <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 800d788:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d78c:	d81e      	bhi.n	800d7cc <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800d78e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d792:	d011      	beq.n	800d7b8 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 800d794:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d798:	d818      	bhi.n	800d7cc <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d020      	beq.n	800d7e0 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 800d79e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d7a2:	d113      	bne.n	800d7cc <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800d7a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d7a8:	3308      	adds	r3, #8
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	f004 f80a 	bl	80117c4 <RCCEx_PLL2_Config>
 800d7b0:	4603      	mov	r3, r0
 800d7b2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 800d7b6:	e014      	b.n	800d7e2 <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800d7b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d7bc:	3330      	adds	r3, #48	@ 0x30
 800d7be:	4618      	mov	r0, r3
 800d7c0:	f004 f898 	bl	80118f4 <RCCEx_PLL3_Config>
 800d7c4:	4603      	mov	r3, r0
 800d7c6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 800d7ca:	e00a      	b.n	800d7e2 <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d7cc:	2301      	movs	r3, #1
 800d7ce:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800d7d2:	e006      	b.n	800d7e2 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 800d7d4:	bf00      	nop
 800d7d6:	e004      	b.n	800d7e2 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 800d7d8:	bf00      	nop
 800d7da:	e002      	b.n	800d7e2 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 800d7dc:	bf00      	nop
 800d7de:	e000      	b.n	800d7e2 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 800d7e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d7e2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d10d      	bne.n	800d806 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800d7ea:	4b59      	ldr	r3, [pc, #356]	@ (800d950 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800d7ec:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800d7f0:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800d7f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d7f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800d7fc:	4a54      	ldr	r2, [pc, #336]	@ (800d950 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800d7fe:	430b      	orrs	r3, r1
 800d800:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800d804:	e003      	b.n	800d80e <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d806:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800d80a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800d80e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d812:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d816:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800d81a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d81e:	2300      	movs	r3, #0
 800d820:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d824:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800d828:	460b      	mov	r3, r1
 800d82a:	4313      	orrs	r3, r2
 800d82c:	d055      	beq.n	800d8da <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 800d82e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d832:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800d836:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800d83a:	d031      	beq.n	800d8a0 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 800d83c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800d840:	d82a      	bhi.n	800d898 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800d842:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d846:	d02d      	beq.n	800d8a4 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 800d848:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d84c:	d824      	bhi.n	800d898 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800d84e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d852:	d029      	beq.n	800d8a8 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 800d854:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d858:	d81e      	bhi.n	800d898 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800d85a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d85e:	d011      	beq.n	800d884 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 800d860:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d864:	d818      	bhi.n	800d898 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800d866:	2b00      	cmp	r3, #0
 800d868:	d020      	beq.n	800d8ac <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800d86a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d86e:	d113      	bne.n	800d898 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800d870:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d874:	3308      	adds	r3, #8
 800d876:	4618      	mov	r0, r3
 800d878:	f003 ffa4 	bl	80117c4 <RCCEx_PLL2_Config>
 800d87c:	4603      	mov	r3, r0
 800d87e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800d882:	e014      	b.n	800d8ae <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800d884:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d888:	3330      	adds	r3, #48	@ 0x30
 800d88a:	4618      	mov	r0, r3
 800d88c:	f004 f832 	bl	80118f4 <RCCEx_PLL3_Config>
 800d890:	4603      	mov	r3, r0
 800d892:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800d896:	e00a      	b.n	800d8ae <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d898:	2301      	movs	r3, #1
 800d89a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800d89e:	e006      	b.n	800d8ae <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 800d8a0:	bf00      	nop
 800d8a2:	e004      	b.n	800d8ae <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 800d8a4:	bf00      	nop
 800d8a6:	e002      	b.n	800d8ae <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 800d8a8:	bf00      	nop
 800d8aa:	e000      	b.n	800d8ae <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 800d8ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d8ae:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d10d      	bne.n	800d8d2 <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800d8b6:	4b26      	ldr	r3, [pc, #152]	@ (800d950 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800d8b8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800d8bc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800d8c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d8c4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800d8c8:	4a21      	ldr	r2, [pc, #132]	@ (800d950 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800d8ca:	430b      	orrs	r3, r1
 800d8cc:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800d8d0:	e003      	b.n	800d8da <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d8d2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800d8d6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 800d8da:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d8de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8e2:	2100      	movs	r1, #0
 800d8e4:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 800d8e8:	f003 0320 	and.w	r3, r3, #32
 800d8ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d8f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800d8f4:	460b      	mov	r3, r1
 800d8f6:	4313      	orrs	r3, r2
 800d8f8:	d057      	beq.n	800d9aa <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 800d8fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d8fe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800d902:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d906:	d033      	beq.n	800d970 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 800d908:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d90c:	d82c      	bhi.n	800d968 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800d90e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d912:	d02f      	beq.n	800d974 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 800d914:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d918:	d826      	bhi.n	800d968 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800d91a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d91e:	d02b      	beq.n	800d978 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 800d920:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d924:	d820      	bhi.n	800d968 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800d926:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d92a:	d013      	beq.n	800d954 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800d92c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d930:	d81a      	bhi.n	800d968 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800d932:	2b00      	cmp	r3, #0
 800d934:	d022      	beq.n	800d97c <HAL_RCCEx_PeriphCLKConfig+0xffc>
 800d936:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d93a:	d115      	bne.n	800d968 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800d93c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d940:	3308      	adds	r3, #8
 800d942:	4618      	mov	r0, r3
 800d944:	f003 ff3e 	bl	80117c4 <RCCEx_PLL2_Config>
 800d948:	4603      	mov	r3, r0
 800d94a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 800d94e:	e016      	b.n	800d97e <HAL_RCCEx_PeriphCLKConfig+0xffe>
 800d950:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800d954:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d958:	3330      	adds	r3, #48	@ 0x30
 800d95a:	4618      	mov	r0, r3
 800d95c:	f003 ffca 	bl	80118f4 <RCCEx_PLL3_Config>
 800d960:	4603      	mov	r3, r0
 800d962:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 800d966:	e00a      	b.n	800d97e <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d968:	2301      	movs	r3, #1
 800d96a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800d96e:	e006      	b.n	800d97e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 800d970:	bf00      	nop
 800d972:	e004      	b.n	800d97e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 800d974:	bf00      	nop
 800d976:	e002      	b.n	800d97e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 800d978:	bf00      	nop
 800d97a:	e000      	b.n	800d97e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 800d97c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d97e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800d982:	2b00      	cmp	r3, #0
 800d984:	d10d      	bne.n	800d9a2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 800d986:	4bbb      	ldr	r3, [pc, #748]	@ (800dc74 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800d988:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800d98c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800d990:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d994:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800d998:	4ab6      	ldr	r2, [pc, #728]	@ (800dc74 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800d99a:	430b      	orrs	r3, r1
 800d99c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800d9a0:	e003      	b.n	800d9aa <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d9a2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800d9a6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 800d9aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d9ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9b2:	2100      	movs	r1, #0
 800d9b4:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 800d9b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d9bc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800d9c0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800d9c4:	460b      	mov	r3, r1
 800d9c6:	4313      	orrs	r3, r2
 800d9c8:	d055      	beq.n	800da76 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 800d9ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d9ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800d9d2:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800d9d6:	d031      	beq.n	800da3c <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 800d9d8:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800d9dc:	d82a      	bhi.n	800da34 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800d9de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d9e2:	d02d      	beq.n	800da40 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 800d9e4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d9e8:	d824      	bhi.n	800da34 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800d9ea:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d9ee:	d029      	beq.n	800da44 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 800d9f0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d9f4:	d81e      	bhi.n	800da34 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800d9f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d9fa:	d011      	beq.n	800da20 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 800d9fc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800da00:	d818      	bhi.n	800da34 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800da02:	2b00      	cmp	r3, #0
 800da04:	d020      	beq.n	800da48 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 800da06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800da0a:	d113      	bne.n	800da34 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800da0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800da10:	3308      	adds	r3, #8
 800da12:	4618      	mov	r0, r3
 800da14:	f003 fed6 	bl	80117c4 <RCCEx_PLL2_Config>
 800da18:	4603      	mov	r3, r0
 800da1a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 800da1e:	e014      	b.n	800da4a <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800da20:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800da24:	3330      	adds	r3, #48	@ 0x30
 800da26:	4618      	mov	r0, r3
 800da28:	f003 ff64 	bl	80118f4 <RCCEx_PLL3_Config>
 800da2c:	4603      	mov	r3, r0
 800da2e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 800da32:	e00a      	b.n	800da4a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800da34:	2301      	movs	r3, #1
 800da36:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800da3a:	e006      	b.n	800da4a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800da3c:	bf00      	nop
 800da3e:	e004      	b.n	800da4a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800da40:	bf00      	nop
 800da42:	e002      	b.n	800da4a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800da44:	bf00      	nop
 800da46:	e000      	b.n	800da4a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800da48:	bf00      	nop
    }

    if (ret == HAL_OK)
 800da4a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d10d      	bne.n	800da6e <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 800da52:	4b88      	ldr	r3, [pc, #544]	@ (800dc74 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800da54:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800da58:	f423 01e0 	bic.w	r1, r3, #7340032	@ 0x700000
 800da5c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800da60:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800da64:	4a83      	ldr	r2, [pc, #524]	@ (800dc74 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800da66:	430b      	orrs	r3, r1
 800da68:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800da6c:	e003      	b.n	800da76 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800da6e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800da72:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 800da76:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800da7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da7e:	2100      	movs	r1, #0
 800da80:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 800da84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800da88:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800da8c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800da90:	460b      	mov	r3, r1
 800da92:	4313      	orrs	r3, r2
 800da94:	d055      	beq.n	800db42 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 800da96:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800da9a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800da9e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800daa2:	d031      	beq.n	800db08 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 800daa4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800daa8:	d82a      	bhi.n	800db00 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800daaa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800daae:	d02d      	beq.n	800db0c <HAL_RCCEx_PeriphCLKConfig+0x118c>
 800dab0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800dab4:	d824      	bhi.n	800db00 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800dab6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800daba:	d029      	beq.n	800db10 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 800dabc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800dac0:	d81e      	bhi.n	800db00 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800dac2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800dac6:	d011      	beq.n	800daec <HAL_RCCEx_PeriphCLKConfig+0x116c>
 800dac8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800dacc:	d818      	bhi.n	800db00 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d020      	beq.n	800db14 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 800dad2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800dad6:	d113      	bne.n	800db00 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800dad8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800dadc:	3308      	adds	r3, #8
 800dade:	4618      	mov	r0, r3
 800dae0:	f003 fe70 	bl	80117c4 <RCCEx_PLL2_Config>
 800dae4:	4603      	mov	r3, r0
 800dae6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 800daea:	e014      	b.n	800db16 <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800daec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800daf0:	3330      	adds	r3, #48	@ 0x30
 800daf2:	4618      	mov	r0, r3
 800daf4:	f003 fefe 	bl	80118f4 <RCCEx_PLL3_Config>
 800daf8:	4603      	mov	r3, r0
 800dafa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 800dafe:	e00a      	b.n	800db16 <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800db00:	2301      	movs	r3, #1
 800db02:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800db06:	e006      	b.n	800db16 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800db08:	bf00      	nop
 800db0a:	e004      	b.n	800db16 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800db0c:	bf00      	nop
 800db0e:	e002      	b.n	800db16 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800db10:	bf00      	nop
 800db12:	e000      	b.n	800db16 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800db14:	bf00      	nop
    }

    if (ret == HAL_OK)
 800db16:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d10d      	bne.n	800db3a <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 800db1e:	4b55      	ldr	r3, [pc, #340]	@ (800dc74 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800db20:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800db24:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800db28:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800db2c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800db30:	4a50      	ldr	r2, [pc, #320]	@ (800dc74 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800db32:	430b      	orrs	r3, r1
 800db34:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800db38:	e003      	b.n	800db42 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800db3a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800db3e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 800db42:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800db46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db4a:	2100      	movs	r1, #0
 800db4c:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 800db50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800db54:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800db58:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800db5c:	460b      	mov	r3, r1
 800db5e:	4313      	orrs	r3, r2
 800db60:	d055      	beq.n	800dc0e <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 800db62:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800db66:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800db6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800db6e:	d031      	beq.n	800dbd4 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 800db70:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800db74:	d82a      	bhi.n	800dbcc <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800db76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800db7a:	d02d      	beq.n	800dbd8 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 800db7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800db80:	d824      	bhi.n	800dbcc <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800db82:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800db86:	d029      	beq.n	800dbdc <HAL_RCCEx_PeriphCLKConfig+0x125c>
 800db88:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800db8c:	d81e      	bhi.n	800dbcc <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800db8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800db92:	d011      	beq.n	800dbb8 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 800db94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800db98:	d818      	bhi.n	800dbcc <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d020      	beq.n	800dbe0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 800db9e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dba2:	d113      	bne.n	800dbcc <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800dba4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800dba8:	3308      	adds	r3, #8
 800dbaa:	4618      	mov	r0, r3
 800dbac:	f003 fe0a 	bl	80117c4 <RCCEx_PLL2_Config>
 800dbb0:	4603      	mov	r3, r0
 800dbb2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 800dbb6:	e014      	b.n	800dbe2 <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800dbb8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800dbbc:	3330      	adds	r3, #48	@ 0x30
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	f003 fe98 	bl	80118f4 <RCCEx_PLL3_Config>
 800dbc4:	4603      	mov	r3, r0
 800dbc6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 800dbca:	e00a      	b.n	800dbe2 <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dbcc:	2301      	movs	r3, #1
 800dbce:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800dbd2:	e006      	b.n	800dbe2 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 800dbd4:	bf00      	nop
 800dbd6:	e004      	b.n	800dbe2 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 800dbd8:	bf00      	nop
 800dbda:	e002      	b.n	800dbe2 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 800dbdc:	bf00      	nop
 800dbde:	e000      	b.n	800dbe2 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 800dbe0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dbe2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d10d      	bne.n	800dc06 <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 800dbea:	4b22      	ldr	r3, [pc, #136]	@ (800dc74 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800dbec:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800dbf0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800dbf4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800dbf8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800dbfc:	4a1d      	ldr	r2, [pc, #116]	@ (800dc74 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800dbfe:	430b      	orrs	r3, r1
 800dc00:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800dc04:	e003      	b.n	800dc0e <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dc06:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800dc0a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800dc0e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800dc12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc16:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800dc1a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800dc1e:	2300      	movs	r3, #0
 800dc20:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800dc24:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800dc28:	460b      	mov	r3, r1
 800dc2a:	4313      	orrs	r3, r2
 800dc2c:	d055      	beq.n	800dcda <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800dc2e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800dc32:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800dc36:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800dc3a:	d035      	beq.n	800dca8 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 800dc3c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800dc40:	d82e      	bhi.n	800dca0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800dc42:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800dc46:	d031      	beq.n	800dcac <HAL_RCCEx_PeriphCLKConfig+0x132c>
 800dc48:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800dc4c:	d828      	bhi.n	800dca0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800dc4e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800dc52:	d01b      	beq.n	800dc8c <HAL_RCCEx_PeriphCLKConfig+0x130c>
 800dc54:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800dc58:	d822      	bhi.n	800dca0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d003      	beq.n	800dc66 <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 800dc5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dc62:	d009      	beq.n	800dc78 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 800dc64:	e01c      	b.n	800dca0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dc66:	4b03      	ldr	r3, [pc, #12]	@ (800dc74 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800dc68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc6a:	4a02      	ldr	r2, [pc, #8]	@ (800dc74 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800dc6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dc70:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800dc72:	e01c      	b.n	800dcae <HAL_RCCEx_PeriphCLKConfig+0x132e>
 800dc74:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800dc78:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800dc7c:	3308      	adds	r3, #8
 800dc7e:	4618      	mov	r0, r3
 800dc80:	f003 fda0 	bl	80117c4 <RCCEx_PLL2_Config>
 800dc84:	4603      	mov	r3, r0
 800dc86:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800dc8a:	e010      	b.n	800dcae <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800dc8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800dc90:	3330      	adds	r3, #48	@ 0x30
 800dc92:	4618      	mov	r0, r3
 800dc94:	f003 fe2e 	bl	80118f4 <RCCEx_PLL3_Config>
 800dc98:	4603      	mov	r3, r0
 800dc9a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800dc9e:	e006      	b.n	800dcae <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dca0:	2301      	movs	r3, #1
 800dca2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800dca6:	e002      	b.n	800dcae <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 800dca8:	bf00      	nop
 800dcaa:	e000      	b.n	800dcae <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 800dcac:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dcae:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d10d      	bne.n	800dcd2 <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800dcb6:	4bc3      	ldr	r3, [pc, #780]	@ (800dfc4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800dcb8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800dcbc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800dcc0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800dcc4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800dcc8:	4abe      	ldr	r2, [pc, #760]	@ (800dfc4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800dcca:	430b      	orrs	r3, r1
 800dccc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800dcd0:	e003      	b.n	800dcda <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dcd2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800dcd6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 800dcda:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800dcde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dce2:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800dce6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800dcea:	2300      	movs	r3, #0
 800dcec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800dcf0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800dcf4:	460b      	mov	r3, r1
 800dcf6:	4313      	orrs	r3, r2
 800dcf8:	d051      	beq.n	800dd9e <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800dcfa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800dcfe:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800dd02:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800dd06:	d033      	beq.n	800dd70 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 800dd08:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800dd0c:	d82c      	bhi.n	800dd68 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800dd0e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800dd12:	d02d      	beq.n	800dd70 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 800dd14:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800dd18:	d826      	bhi.n	800dd68 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800dd1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dd1e:	d019      	beq.n	800dd54 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 800dd20:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dd24:	d820      	bhi.n	800dd68 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d003      	beq.n	800dd32 <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 800dd2a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800dd2e:	d007      	beq.n	800dd40 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 800dd30:	e01a      	b.n	800dd68 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dd32:	4ba4      	ldr	r3, [pc, #656]	@ (800dfc4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800dd34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd36:	4aa3      	ldr	r2, [pc, #652]	@ (800dfc4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800dd38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dd3c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800dd3e:	e018      	b.n	800dd72 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800dd40:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800dd44:	3308      	adds	r3, #8
 800dd46:	4618      	mov	r0, r3
 800dd48:	f003 fd3c 	bl	80117c4 <RCCEx_PLL2_Config>
 800dd4c:	4603      	mov	r3, r0
 800dd4e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800dd52:	e00e      	b.n	800dd72 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800dd54:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800dd58:	3330      	adds	r3, #48	@ 0x30
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	f003 fdca 	bl	80118f4 <RCCEx_PLL3_Config>
 800dd60:	4603      	mov	r3, r0
 800dd62:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800dd66:	e004      	b.n	800dd72 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dd68:	2301      	movs	r3, #1
 800dd6a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800dd6e:	e000      	b.n	800dd72 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 800dd70:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dd72:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d10d      	bne.n	800dd96 <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800dd7a:	4b92      	ldr	r3, [pc, #584]	@ (800dfc4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800dd7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800dd80:	f423 1160 	bic.w	r1, r3, #3670016	@ 0x380000
 800dd84:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800dd88:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800dd8c:	4a8d      	ldr	r2, [pc, #564]	@ (800dfc4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800dd8e:	430b      	orrs	r3, r1
 800dd90:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800dd94:	e003      	b.n	800dd9e <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dd96:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800dd9a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800dd9e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800dda2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dda6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800ddaa:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ddac:	2300      	movs	r3, #0
 800ddae:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ddb0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800ddb4:	460b      	mov	r3, r1
 800ddb6:	4313      	orrs	r3, r2
 800ddb8:	d032      	beq.n	800de20 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800ddba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ddbe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800ddc2:	2b05      	cmp	r3, #5
 800ddc4:	d80f      	bhi.n	800dde6 <HAL_RCCEx_PeriphCLKConfig+0x1466>
 800ddc6:	2b03      	cmp	r3, #3
 800ddc8:	d211      	bcs.n	800ddee <HAL_RCCEx_PeriphCLKConfig+0x146e>
 800ddca:	2b01      	cmp	r3, #1
 800ddcc:	d911      	bls.n	800ddf2 <HAL_RCCEx_PeriphCLKConfig+0x1472>
 800ddce:	2b02      	cmp	r3, #2
 800ddd0:	d109      	bne.n	800dde6 <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800ddd2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ddd6:	3308      	adds	r3, #8
 800ddd8:	4618      	mov	r0, r3
 800ddda:	f003 fcf3 	bl	80117c4 <RCCEx_PLL2_Config>
 800ddde:	4603      	mov	r3, r0
 800dde0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800dde4:	e006      	b.n	800ddf4 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 800dde6:	2301      	movs	r3, #1
 800dde8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800ddec:	e002      	b.n	800ddf4 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 800ddee:	bf00      	nop
 800ddf0:	e000      	b.n	800ddf4 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 800ddf2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ddf4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d10d      	bne.n	800de18 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800ddfc:	4b71      	ldr	r3, [pc, #452]	@ (800dfc4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800ddfe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800de02:	f023 0107 	bic.w	r1, r3, #7
 800de06:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800de0a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800de0e:	4a6d      	ldr	r2, [pc, #436]	@ (800dfc4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800de10:	430b      	orrs	r3, r1
 800de12:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800de16:	e003      	b.n	800de20 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800de18:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800de1c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 800de20:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800de24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de28:	2100      	movs	r1, #0
 800de2a:	6739      	str	r1, [r7, #112]	@ 0x70
 800de2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800de30:	677b      	str	r3, [r7, #116]	@ 0x74
 800de32:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800de36:	460b      	mov	r3, r1
 800de38:	4313      	orrs	r3, r2
 800de3a:	d024      	beq.n	800de86 <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 800de3c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800de40:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800de44:	2b00      	cmp	r3, #0
 800de46:	d005      	beq.n	800de54 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 800de48:	2b08      	cmp	r3, #8
 800de4a:	d005      	beq.n	800de58 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800de4c:	2301      	movs	r3, #1
 800de4e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800de52:	e002      	b.n	800de5a <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 800de54:	bf00      	nop
 800de56:	e000      	b.n	800de5a <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 800de58:	bf00      	nop
    }

    if (ret == HAL_OK)
 800de5a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d10d      	bne.n	800de7e <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 800de62:	4b58      	ldr	r3, [pc, #352]	@ (800dfc4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800de64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800de68:	f023 0108 	bic.w	r1, r3, #8
 800de6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800de70:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800de74:	4a53      	ldr	r2, [pc, #332]	@ (800dfc4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800de76:	430b      	orrs	r3, r1
 800de78:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800de7c:	e003      	b.n	800de86 <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800de7e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800de82:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800de86:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800de8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de8e:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800de92:	66bb      	str	r3, [r7, #104]	@ 0x68
 800de94:	2300      	movs	r3, #0
 800de96:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800de98:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800de9c:	460b      	mov	r3, r1
 800de9e:	4313      	orrs	r3, r2
 800dea0:	f000 80b9 	beq.w	800e016 <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 800dea4:	4b48      	ldr	r3, [pc, #288]	@ (800dfc8 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800dea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dea8:	4a47      	ldr	r2, [pc, #284]	@ (800dfc8 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800deaa:	f043 0301 	orr.w	r3, r3, #1
 800deae:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800deb0:	f7f7 fd7e 	bl	80059b0 <HAL_GetTick>
 800deb4:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800deb8:	e00b      	b.n	800ded2 <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800deba:	f7f7 fd79 	bl	80059b0 <HAL_GetTick>
 800debe:	4602      	mov	r2, r0
 800dec0:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800dec4:	1ad3      	subs	r3, r2, r3
 800dec6:	2b02      	cmp	r3, #2
 800dec8:	d903      	bls.n	800ded2 <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 800deca:	2303      	movs	r3, #3
 800decc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800ded0:	e005      	b.n	800dede <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800ded2:	4b3d      	ldr	r3, [pc, #244]	@ (800dfc8 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800ded4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ded6:	f003 0301 	and.w	r3, r3, #1
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d0ed      	beq.n	800deba <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 800dede:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	f040 8093 	bne.w	800e00e <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800dee8:	4b36      	ldr	r3, [pc, #216]	@ (800dfc4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800deea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800deee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800def2:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800def6:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800defa:	2b00      	cmp	r3, #0
 800defc:	d023      	beq.n	800df46 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 800defe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800df02:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 800df06:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800df0a:	4293      	cmp	r3, r2
 800df0c:	d01b      	beq.n	800df46 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800df0e:	4b2d      	ldr	r3, [pc, #180]	@ (800dfc4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800df10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800df14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800df18:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800df1c:	4b29      	ldr	r3, [pc, #164]	@ (800dfc4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800df1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800df22:	4a28      	ldr	r2, [pc, #160]	@ (800dfc4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800df24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800df28:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800df2c:	4b25      	ldr	r3, [pc, #148]	@ (800dfc4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800df2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800df32:	4a24      	ldr	r2, [pc, #144]	@ (800dfc4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800df34:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800df38:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800df3c:	4a21      	ldr	r2, [pc, #132]	@ (800dfc4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800df3e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800df42:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800df46:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800df4a:	f003 0301 	and.w	r3, r3, #1
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d019      	beq.n	800df86 <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800df52:	f7f7 fd2d 	bl	80059b0 <HAL_GetTick>
 800df56:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800df5a:	e00d      	b.n	800df78 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800df5c:	f7f7 fd28 	bl	80059b0 <HAL_GetTick>
 800df60:	4602      	mov	r2, r0
 800df62:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800df66:	1ad2      	subs	r2, r2, r3
 800df68:	f241 3388 	movw	r3, #5000	@ 0x1388
 800df6c:	429a      	cmp	r2, r3
 800df6e:	d903      	bls.n	800df78 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 800df70:	2303      	movs	r3, #3
 800df72:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
            break;
 800df76:	e006      	b.n	800df86 <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800df78:	4b12      	ldr	r3, [pc, #72]	@ (800dfc4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800df7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800df7e:	f003 0302 	and.w	r3, r3, #2
 800df82:	2b00      	cmp	r3, #0
 800df84:	d0ea      	beq.n	800df5c <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 800df86:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d13a      	bne.n	800e004 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800df8e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800df92:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 800df96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800df9a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800df9e:	d115      	bne.n	800dfcc <HAL_RCCEx_PeriphCLKConfig+0x164c>
 800dfa0:	4b08      	ldr	r3, [pc, #32]	@ (800dfc4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800dfa2:	69db      	ldr	r3, [r3, #28]
 800dfa4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800dfa8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800dfac:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 800dfb0:	091b      	lsrs	r3, r3, #4
 800dfb2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800dfb6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800dfba:	4a02      	ldr	r2, [pc, #8]	@ (800dfc4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800dfbc:	430b      	orrs	r3, r1
 800dfbe:	61d3      	str	r3, [r2, #28]
 800dfc0:	e00a      	b.n	800dfd8 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 800dfc2:	bf00      	nop
 800dfc4:	44020c00 	.word	0x44020c00
 800dfc8:	44020800 	.word	0x44020800
 800dfcc:	4b9f      	ldr	r3, [pc, #636]	@ (800e24c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800dfce:	69db      	ldr	r3, [r3, #28]
 800dfd0:	4a9e      	ldr	r2, [pc, #632]	@ (800e24c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800dfd2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800dfd6:	61d3      	str	r3, [r2, #28]
 800dfd8:	4b9c      	ldr	r3, [pc, #624]	@ (800e24c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800dfda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800dfde:	4a9b      	ldr	r2, [pc, #620]	@ (800e24c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800dfe0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800dfe4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800dfe8:	4b98      	ldr	r3, [pc, #608]	@ (800e24c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800dfea:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 800dfee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800dff2:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 800dff6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800dffa:	4a94      	ldr	r2, [pc, #592]	@ (800e24c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800dffc:	430b      	orrs	r3, r1
 800dffe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800e002:	e008      	b.n	800e016 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800e004:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800e008:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
 800e00c:	e003      	b.n	800e016 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e00e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800e012:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800e016:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e01a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e01e:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800e022:	663b      	str	r3, [r7, #96]	@ 0x60
 800e024:	2300      	movs	r3, #0
 800e026:	667b      	str	r3, [r7, #100]	@ 0x64
 800e028:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800e02c:	460b      	mov	r3, r1
 800e02e:	4313      	orrs	r3, r2
 800e030:	d035      	beq.n	800e09e <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800e032:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e036:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800e03a:	2b30      	cmp	r3, #48	@ 0x30
 800e03c:	d014      	beq.n	800e068 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 800e03e:	2b30      	cmp	r3, #48	@ 0x30
 800e040:	d80e      	bhi.n	800e060 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 800e042:	2b20      	cmp	r3, #32
 800e044:	d012      	beq.n	800e06c <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 800e046:	2b20      	cmp	r3, #32
 800e048:	d80a      	bhi.n	800e060 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d010      	beq.n	800e070 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 800e04e:	2b10      	cmp	r3, #16
 800e050:	d106      	bne.n	800e060 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e052:	4b7e      	ldr	r3, [pc, #504]	@ (800e24c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800e054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e056:	4a7d      	ldr	r2, [pc, #500]	@ (800e24c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800e058:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e05c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 800e05e:	e008      	b.n	800e072 <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e060:	2301      	movs	r3, #1
 800e062:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800e066:	e004      	b.n	800e072 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 800e068:	bf00      	nop
 800e06a:	e002      	b.n	800e072 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 800e06c:	bf00      	nop
 800e06e:	e000      	b.n	800e072 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 800e070:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e072:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800e076:	2b00      	cmp	r3, #0
 800e078:	d10d      	bne.n	800e096 <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800e07a:	4b74      	ldr	r3, [pc, #464]	@ (800e24c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800e07c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800e080:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800e084:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e088:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800e08c:	4a6f      	ldr	r2, [pc, #444]	@ (800e24c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800e08e:	430b      	orrs	r3, r1
 800e090:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800e094:	e003      	b.n	800e09e <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e096:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800e09a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800e09e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e0a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0a6:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800e0aa:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e0ac:	2300      	movs	r3, #0
 800e0ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e0b0:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800e0b4:	460b      	mov	r3, r1
 800e0b6:	4313      	orrs	r3, r2
 800e0b8:	d033      	beq.n	800e122 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 800e0ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e0be:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d002      	beq.n	800e0cc <HAL_RCCEx_PeriphCLKConfig+0x174c>
 800e0c6:	2b40      	cmp	r3, #64	@ 0x40
 800e0c8:	d007      	beq.n	800e0da <HAL_RCCEx_PeriphCLKConfig+0x175a>
 800e0ca:	e010      	b.n	800e0ee <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e0cc:	4b5f      	ldr	r3, [pc, #380]	@ (800e24c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800e0ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e0d0:	4a5e      	ldr	r2, [pc, #376]	@ (800e24c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800e0d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e0d6:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 800e0d8:	e00d      	b.n	800e0f6 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800e0da:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e0de:	3308      	adds	r3, #8
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	f003 fb6f 	bl	80117c4 <RCCEx_PLL2_Config>
 800e0e6:	4603      	mov	r3, r0
 800e0e8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 800e0ec:	e003      	b.n	800e0f6 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 800e0ee:	2301      	movs	r3, #1
 800e0f0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800e0f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e0f6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d10d      	bne.n	800e11a <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 800e0fe:	4b53      	ldr	r3, [pc, #332]	@ (800e24c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800e100:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e104:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 800e108:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e10c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800e110:	4a4e      	ldr	r2, [pc, #312]	@ (800e24c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800e112:	430b      	orrs	r3, r1
 800e114:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800e118:	e003      	b.n	800e122 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e11a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800e11e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800e122:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e12a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800e12e:	653b      	str	r3, [r7, #80]	@ 0x50
 800e130:	2300      	movs	r3, #0
 800e132:	657b      	str	r3, [r7, #84]	@ 0x54
 800e134:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800e138:	460b      	mov	r3, r1
 800e13a:	4313      	orrs	r3, r2
 800e13c:	d033      	beq.n	800e1a6 <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 800e13e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e142:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800e146:	2b00      	cmp	r3, #0
 800e148:	d002      	beq.n	800e150 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 800e14a:	2b80      	cmp	r3, #128	@ 0x80
 800e14c:	d007      	beq.n	800e15e <HAL_RCCEx_PeriphCLKConfig+0x17de>
 800e14e:	e010      	b.n	800e172 <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e150:	4b3e      	ldr	r3, [pc, #248]	@ (800e24c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800e152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e154:	4a3d      	ldr	r2, [pc, #244]	@ (800e24c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800e156:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e15a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 800e15c:	e00d      	b.n	800e17a <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800e15e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e162:	3308      	adds	r3, #8
 800e164:	4618      	mov	r0, r3
 800e166:	f003 fb2d 	bl	80117c4 <RCCEx_PLL2_Config>
 800e16a:	4603      	mov	r3, r0
 800e16c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 800e170:	e003      	b.n	800e17a <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 800e172:	2301      	movs	r3, #1
 800e174:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800e178:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e17a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d10d      	bne.n	800e19e <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 800e182:	4b32      	ldr	r3, [pc, #200]	@ (800e24c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800e184:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e188:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 800e18c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e190:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800e194:	4a2d      	ldr	r2, [pc, #180]	@ (800e24c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800e196:	430b      	orrs	r3, r1
 800e198:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800e19c:	e003      	b.n	800e1a6 <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e19e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800e1a2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800e1a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e1aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1ae:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 800e1b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e1b4:	2300      	movs	r3, #0
 800e1b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e1b8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800e1bc:	460b      	mov	r3, r1
 800e1be:	4313      	orrs	r3, r2
 800e1c0:	d04a      	beq.n	800e258 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 800e1c2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e1c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e1ca:	2b04      	cmp	r3, #4
 800e1cc:	d827      	bhi.n	800e21e <HAL_RCCEx_PeriphCLKConfig+0x189e>
 800e1ce:	a201      	add	r2, pc, #4	@ (adr r2, 800e1d4 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 800e1d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1d4:	0800e1e9 	.word	0x0800e1e9
 800e1d8:	0800e1f7 	.word	0x0800e1f7
 800e1dc:	0800e20b 	.word	0x0800e20b
 800e1e0:	0800e227 	.word	0x0800e227
 800e1e4:	0800e227 	.word	0x0800e227
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e1e8:	4b18      	ldr	r3, [pc, #96]	@ (800e24c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800e1ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e1ec:	4a17      	ldr	r2, [pc, #92]	@ (800e24c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800e1ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e1f2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800e1f4:	e018      	b.n	800e228 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800e1f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e1fa:	3308      	adds	r3, #8
 800e1fc:	4618      	mov	r0, r3
 800e1fe:	f003 fae1 	bl	80117c4 <RCCEx_PLL2_Config>
 800e202:	4603      	mov	r3, r0
 800e204:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800e208:	e00e      	b.n	800e228 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800e20a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e20e:	3330      	adds	r3, #48	@ 0x30
 800e210:	4618      	mov	r0, r3
 800e212:	f003 fb6f 	bl	80118f4 <RCCEx_PLL3_Config>
 800e216:	4603      	mov	r3, r0
 800e218:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800e21c:	e004      	b.n	800e228 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e21e:	2301      	movs	r3, #1
 800e220:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800e224:	e000      	b.n	800e228 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 800e226:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e228:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d10f      	bne.n	800e250 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800e230:	4b06      	ldr	r3, [pc, #24]	@ (800e24c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800e232:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e236:	f023 0107 	bic.w	r1, r3, #7
 800e23a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e23e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e242:	4a02      	ldr	r2, [pc, #8]	@ (800e24c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800e244:	430b      	orrs	r3, r1
 800e246:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800e24a:	e005      	b.n	800e258 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 800e24c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e250:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800e254:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800e258:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e25c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e260:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800e264:	643b      	str	r3, [r7, #64]	@ 0x40
 800e266:	2300      	movs	r3, #0
 800e268:	647b      	str	r3, [r7, #68]	@ 0x44
 800e26a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800e26e:	460b      	mov	r3, r1
 800e270:	4313      	orrs	r3, r2
 800e272:	f000 8081 	beq.w	800e378 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 800e276:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e27a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e27e:	2b20      	cmp	r3, #32
 800e280:	d85f      	bhi.n	800e342 <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 800e282:	a201      	add	r2, pc, #4	@ (adr r2, 800e288 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 800e284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e288:	0800e30d 	.word	0x0800e30d
 800e28c:	0800e343 	.word	0x0800e343
 800e290:	0800e343 	.word	0x0800e343
 800e294:	0800e343 	.word	0x0800e343
 800e298:	0800e343 	.word	0x0800e343
 800e29c:	0800e343 	.word	0x0800e343
 800e2a0:	0800e343 	.word	0x0800e343
 800e2a4:	0800e343 	.word	0x0800e343
 800e2a8:	0800e31b 	.word	0x0800e31b
 800e2ac:	0800e343 	.word	0x0800e343
 800e2b0:	0800e343 	.word	0x0800e343
 800e2b4:	0800e343 	.word	0x0800e343
 800e2b8:	0800e343 	.word	0x0800e343
 800e2bc:	0800e343 	.word	0x0800e343
 800e2c0:	0800e343 	.word	0x0800e343
 800e2c4:	0800e343 	.word	0x0800e343
 800e2c8:	0800e32f 	.word	0x0800e32f
 800e2cc:	0800e343 	.word	0x0800e343
 800e2d0:	0800e343 	.word	0x0800e343
 800e2d4:	0800e343 	.word	0x0800e343
 800e2d8:	0800e343 	.word	0x0800e343
 800e2dc:	0800e343 	.word	0x0800e343
 800e2e0:	0800e343 	.word	0x0800e343
 800e2e4:	0800e343 	.word	0x0800e343
 800e2e8:	0800e34b 	.word	0x0800e34b
 800e2ec:	0800e343 	.word	0x0800e343
 800e2f0:	0800e343 	.word	0x0800e343
 800e2f4:	0800e343 	.word	0x0800e343
 800e2f8:	0800e343 	.word	0x0800e343
 800e2fc:	0800e343 	.word	0x0800e343
 800e300:	0800e343 	.word	0x0800e343
 800e304:	0800e343 	.word	0x0800e343
 800e308:	0800e34b 	.word	0x0800e34b
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e30c:	4bab      	ldr	r3, [pc, #684]	@ (800e5bc <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800e30e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e310:	4aaa      	ldr	r2, [pc, #680]	@ (800e5bc <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800e312:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e316:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800e318:	e018      	b.n	800e34c <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800e31a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e31e:	3308      	adds	r3, #8
 800e320:	4618      	mov	r0, r3
 800e322:	f003 fa4f 	bl	80117c4 <RCCEx_PLL2_Config>
 800e326:	4603      	mov	r3, r0
 800e328:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800e32c:	e00e      	b.n	800e34c <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800e32e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e332:	3330      	adds	r3, #48	@ 0x30
 800e334:	4618      	mov	r0, r3
 800e336:	f003 fadd 	bl	80118f4 <RCCEx_PLL3_Config>
 800e33a:	4603      	mov	r3, r0
 800e33c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800e340:	e004      	b.n	800e34c <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e342:	2301      	movs	r3, #1
 800e344:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800e348:	e000      	b.n	800e34c <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 800e34a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e34c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800e350:	2b00      	cmp	r3, #0
 800e352:	d10d      	bne.n	800e370 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800e354:	4b99      	ldr	r3, [pc, #612]	@ (800e5bc <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800e356:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e35a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800e35e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e362:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e366:	4a95      	ldr	r2, [pc, #596]	@ (800e5bc <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800e368:	430b      	orrs	r3, r1
 800e36a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800e36e:	e003      	b.n	800e378 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e370:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800e374:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800e378:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e37c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e380:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800e384:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e386:	2300      	movs	r3, #0
 800e388:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e38a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800e38e:	460b      	mov	r3, r1
 800e390:	4313      	orrs	r3, r2
 800e392:	d04e      	beq.n	800e432 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 800e394:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e398:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800e39c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e3a0:	d02e      	beq.n	800e400 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 800e3a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e3a6:	d827      	bhi.n	800e3f8 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 800e3a8:	2bc0      	cmp	r3, #192	@ 0xc0
 800e3aa:	d02b      	beq.n	800e404 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 800e3ac:	2bc0      	cmp	r3, #192	@ 0xc0
 800e3ae:	d823      	bhi.n	800e3f8 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 800e3b0:	2b80      	cmp	r3, #128	@ 0x80
 800e3b2:	d017      	beq.n	800e3e4 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 800e3b4:	2b80      	cmp	r3, #128	@ 0x80
 800e3b6:	d81f      	bhi.n	800e3f8 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d002      	beq.n	800e3c2 <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 800e3bc:	2b40      	cmp	r3, #64	@ 0x40
 800e3be:	d007      	beq.n	800e3d0 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 800e3c0:	e01a      	b.n	800e3f8 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e3c2:	4b7e      	ldr	r3, [pc, #504]	@ (800e5bc <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800e3c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e3c6:	4a7d      	ldr	r2, [pc, #500]	@ (800e5bc <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800e3c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e3cc:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800e3ce:	e01a      	b.n	800e406 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800e3d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e3d4:	3308      	adds	r3, #8
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	f003 f9f4 	bl	80117c4 <RCCEx_PLL2_Config>
 800e3dc:	4603      	mov	r3, r0
 800e3de:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800e3e2:	e010      	b.n	800e406 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800e3e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e3e8:	3330      	adds	r3, #48	@ 0x30
 800e3ea:	4618      	mov	r0, r3
 800e3ec:	f003 fa82 	bl	80118f4 <RCCEx_PLL3_Config>
 800e3f0:	4603      	mov	r3, r0
 800e3f2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800e3f6:	e006      	b.n	800e406 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e3f8:	2301      	movs	r3, #1
 800e3fa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800e3fe:	e002      	b.n	800e406 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 800e400:	bf00      	nop
 800e402:	e000      	b.n	800e406 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 800e404:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e406:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d10d      	bne.n	800e42a <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800e40e:	4b6b      	ldr	r3, [pc, #428]	@ (800e5bc <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800e410:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e414:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800e418:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e41c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800e420:	4a66      	ldr	r2, [pc, #408]	@ (800e5bc <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800e422:	430b      	orrs	r3, r1
 800e424:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800e428:	e003      	b.n	800e432 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e42a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800e42e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 800e432:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e43a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800e43e:	633b      	str	r3, [r7, #48]	@ 0x30
 800e440:	2300      	movs	r3, #0
 800e442:	637b      	str	r3, [r7, #52]	@ 0x34
 800e444:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800e448:	460b      	mov	r3, r1
 800e44a:	4313      	orrs	r3, r2
 800e44c:	d055      	beq.n	800e4fa <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 800e44e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e452:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800e456:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800e45a:	d031      	beq.n	800e4c0 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 800e45c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800e460:	d82a      	bhi.n	800e4b8 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800e462:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e466:	d02d      	beq.n	800e4c4 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 800e468:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e46c:	d824      	bhi.n	800e4b8 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800e46e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800e472:	d029      	beq.n	800e4c8 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 800e474:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800e478:	d81e      	bhi.n	800e4b8 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800e47a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e47e:	d011      	beq.n	800e4a4 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 800e480:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e484:	d818      	bhi.n	800e4b8 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800e486:	2b00      	cmp	r3, #0
 800e488:	d020      	beq.n	800e4cc <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 800e48a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e48e:	d113      	bne.n	800e4b8 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800e490:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e494:	3308      	adds	r3, #8
 800e496:	4618      	mov	r0, r3
 800e498:	f003 f994 	bl	80117c4 <RCCEx_PLL2_Config>
 800e49c:	4603      	mov	r3, r0
 800e49e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 800e4a2:	e014      	b.n	800e4ce <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800e4a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e4a8:	3330      	adds	r3, #48	@ 0x30
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	f003 fa22 	bl	80118f4 <RCCEx_PLL3_Config>
 800e4b0:	4603      	mov	r3, r0
 800e4b2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 800e4b6:	e00a      	b.n	800e4ce <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e4b8:	2301      	movs	r3, #1
 800e4ba:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800e4be:	e006      	b.n	800e4ce <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 800e4c0:	bf00      	nop
 800e4c2:	e004      	b.n	800e4ce <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 800e4c4:	bf00      	nop
 800e4c6:	e002      	b.n	800e4ce <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 800e4c8:	bf00      	nop
 800e4ca:	e000      	b.n	800e4ce <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 800e4cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e4ce:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d10d      	bne.n	800e4f2 <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 800e4d6:	4b39      	ldr	r3, [pc, #228]	@ (800e5bc <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800e4d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e4dc:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 800e4e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e4e4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800e4e8:	4a34      	ldr	r2, [pc, #208]	@ (800e5bc <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800e4ea:	430b      	orrs	r3, r1
 800e4ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800e4f0:	e003      	b.n	800e4fa <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e4f2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800e4f6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 800e4fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e4fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e502:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800e506:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e508:	2300      	movs	r3, #0
 800e50a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e50c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800e510:	460b      	mov	r3, r1
 800e512:	4313      	orrs	r3, r2
 800e514:	d058      	beq.n	800e5c8 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 800e516:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e51a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e51e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800e522:	d031      	beq.n	800e588 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 800e524:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800e528:	d82a      	bhi.n	800e580 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800e52a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e52e:	d02d      	beq.n	800e58c <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 800e530:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e534:	d824      	bhi.n	800e580 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800e536:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800e53a:	d029      	beq.n	800e590 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 800e53c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800e540:	d81e      	bhi.n	800e580 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800e542:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e546:	d011      	beq.n	800e56c <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 800e548:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e54c:	d818      	bhi.n	800e580 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d020      	beq.n	800e594 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 800e552:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e556:	d113      	bne.n	800e580 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800e558:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e55c:	3308      	adds	r3, #8
 800e55e:	4618      	mov	r0, r3
 800e560:	f003 f930 	bl	80117c4 <RCCEx_PLL2_Config>
 800e564:	4603      	mov	r3, r0
 800e566:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 800e56a:	e014      	b.n	800e596 <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800e56c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e570:	3330      	adds	r3, #48	@ 0x30
 800e572:	4618      	mov	r0, r3
 800e574:	f003 f9be 	bl	80118f4 <RCCEx_PLL3_Config>
 800e578:	4603      	mov	r3, r0
 800e57a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 800e57e:	e00a      	b.n	800e596 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e580:	2301      	movs	r3, #1
 800e582:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800e586:	e006      	b.n	800e596 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 800e588:	bf00      	nop
 800e58a:	e004      	b.n	800e596 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 800e58c:	bf00      	nop
 800e58e:	e002      	b.n	800e596 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 800e590:	bf00      	nop
 800e592:	e000      	b.n	800e596 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 800e594:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e596:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d110      	bne.n	800e5c0 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 800e59e:	4b07      	ldr	r3, [pc, #28]	@ (800e5bc <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800e5a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e5a4:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800e5a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e5ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e5b0:	4902      	ldr	r1, [pc, #8]	@ (800e5bc <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800e5b2:	4313      	orrs	r3, r2
 800e5b4:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800e5b8:	e006      	b.n	800e5c8 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 800e5ba:	bf00      	nop
 800e5bc:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e5c0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800e5c4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800e5c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e5cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5d0:	2100      	movs	r1, #0
 800e5d2:	6239      	str	r1, [r7, #32]
 800e5d4:	f003 0301 	and.w	r3, r3, #1
 800e5d8:	627b      	str	r3, [r7, #36]	@ 0x24
 800e5da:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800e5de:	460b      	mov	r3, r1
 800e5e0:	4313      	orrs	r3, r2
 800e5e2:	d055      	beq.n	800e690 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 800e5e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e5e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800e5ec:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800e5f0:	d031      	beq.n	800e656 <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 800e5f2:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800e5f6:	d82a      	bhi.n	800e64e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 800e5f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e5fc:	d02d      	beq.n	800e65a <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 800e5fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e602:	d824      	bhi.n	800e64e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 800e604:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800e608:	d029      	beq.n	800e65e <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 800e60a:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800e60e:	d81e      	bhi.n	800e64e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 800e610:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e614:	d011      	beq.n	800e63a <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 800e616:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e61a:	d818      	bhi.n	800e64e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d020      	beq.n	800e662 <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 800e620:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e624:	d113      	bne.n	800e64e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800e626:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e62a:	3308      	adds	r3, #8
 800e62c:	4618      	mov	r0, r3
 800e62e:	f003 f8c9 	bl	80117c4 <RCCEx_PLL2_Config>
 800e632:	4603      	mov	r3, r0
 800e634:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800e638:	e014      	b.n	800e664 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800e63a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e63e:	3330      	adds	r3, #48	@ 0x30
 800e640:	4618      	mov	r0, r3
 800e642:	f003 f957 	bl	80118f4 <RCCEx_PLL3_Config>
 800e646:	4603      	mov	r3, r0
 800e648:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800e64c:	e00a      	b.n	800e664 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e64e:	2301      	movs	r3, #1
 800e650:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800e654:	e006      	b.n	800e664 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800e656:	bf00      	nop
 800e658:	e004      	b.n	800e664 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800e65a:	bf00      	nop
 800e65c:	e002      	b.n	800e664 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800e65e:	bf00      	nop
 800e660:	e000      	b.n	800e664 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800e662:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e664:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d10d      	bne.n	800e688 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 800e66c:	4b88      	ldr	r3, [pc, #544]	@ (800e890 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800e66e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e672:	f423 3260 	bic.w	r2, r3, #229376	@ 0x38000
 800e676:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e67a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800e67e:	4984      	ldr	r1, [pc, #528]	@ (800e890 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800e680:	4313      	orrs	r3, r2
 800e682:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800e686:	e003      	b.n	800e690 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e688:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800e68c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800e690:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e694:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e698:	2100      	movs	r1, #0
 800e69a:	61b9      	str	r1, [r7, #24]
 800e69c:	f003 0302 	and.w	r3, r3, #2
 800e6a0:	61fb      	str	r3, [r7, #28]
 800e6a2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800e6a6:	460b      	mov	r3, r1
 800e6a8:	4313      	orrs	r3, r2
 800e6aa:	d03d      	beq.n	800e728 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 800e6ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e6b0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800e6b4:	2b03      	cmp	r3, #3
 800e6b6:	d81c      	bhi.n	800e6f2 <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 800e6b8:	a201      	add	r2, pc, #4	@ (adr r2, 800e6c0 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 800e6ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6be:	bf00      	nop
 800e6c0:	0800e6fb 	.word	0x0800e6fb
 800e6c4:	0800e6d1 	.word	0x0800e6d1
 800e6c8:	0800e6df 	.word	0x0800e6df
 800e6cc:	0800e6fb 	.word	0x0800e6fb
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e6d0:	4b6f      	ldr	r3, [pc, #444]	@ (800e890 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800e6d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e6d4:	4a6e      	ldr	r2, [pc, #440]	@ (800e890 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800e6d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e6da:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800e6dc:	e00e      	b.n	800e6fc <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800e6de:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e6e2:	3308      	adds	r3, #8
 800e6e4:	4618      	mov	r0, r3
 800e6e6:	f003 f86d 	bl	80117c4 <RCCEx_PLL2_Config>
 800e6ea:	4603      	mov	r3, r0
 800e6ec:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 800e6f0:	e004      	b.n	800e6fc <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e6f2:	2301      	movs	r3, #1
 800e6f4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800e6f8:	e000      	b.n	800e6fc <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 800e6fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e6fc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800e700:	2b00      	cmp	r3, #0
 800e702:	d10d      	bne.n	800e720 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800e704:	4b62      	ldr	r3, [pc, #392]	@ (800e890 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800e706:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e70a:	f023 0203 	bic.w	r2, r3, #3
 800e70e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e712:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800e716:	495e      	ldr	r1, [pc, #376]	@ (800e890 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800e718:	4313      	orrs	r3, r2
 800e71a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800e71e:	e003      	b.n	800e728 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e720:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800e724:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800e728:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e72c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e730:	2100      	movs	r1, #0
 800e732:	6139      	str	r1, [r7, #16]
 800e734:	f003 0304 	and.w	r3, r3, #4
 800e738:	617b      	str	r3, [r7, #20]
 800e73a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800e73e:	460b      	mov	r3, r1
 800e740:	4313      	orrs	r3, r2
 800e742:	d03a      	beq.n	800e7ba <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 800e744:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e748:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800e74c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e750:	d00e      	beq.n	800e770 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 800e752:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e756:	d815      	bhi.n	800e784 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d017      	beq.n	800e78c <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 800e75c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e760:	d110      	bne.n	800e784 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e762:	4b4b      	ldr	r3, [pc, #300]	@ (800e890 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800e764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e766:	4a4a      	ldr	r2, [pc, #296]	@ (800e890 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800e768:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e76c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800e76e:	e00e      	b.n	800e78e <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800e770:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e774:	3308      	adds	r3, #8
 800e776:	4618      	mov	r0, r3
 800e778:	f003 f824 	bl	80117c4 <RCCEx_PLL2_Config>
 800e77c:	4603      	mov	r3, r0
 800e77e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800e782:	e004      	b.n	800e78e <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 800e784:	2301      	movs	r3, #1
 800e786:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800e78a:	e000      	b.n	800e78e <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 800e78c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e78e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800e792:	2b00      	cmp	r3, #0
 800e794:	d10d      	bne.n	800e7b2 <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 800e796:	4b3e      	ldr	r3, [pc, #248]	@ (800e890 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800e798:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800e79c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800e7a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e7a4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800e7a8:	4939      	ldr	r1, [pc, #228]	@ (800e890 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800e7aa:	4313      	orrs	r3, r2
 800e7ac:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 800e7b0:	e003      	b.n	800e7ba <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e7b2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800e7b6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800e7ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e7be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7c2:	2100      	movs	r1, #0
 800e7c4:	60b9      	str	r1, [r7, #8]
 800e7c6:	f003 0310 	and.w	r3, r3, #16
 800e7ca:	60fb      	str	r3, [r7, #12]
 800e7cc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800e7d0:	460b      	mov	r3, r1
 800e7d2:	4313      	orrs	r3, r2
 800e7d4:	d038      	beq.n	800e848 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 800e7d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e7da:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800e7de:	2b30      	cmp	r3, #48	@ 0x30
 800e7e0:	d01b      	beq.n	800e81a <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 800e7e2:	2b30      	cmp	r3, #48	@ 0x30
 800e7e4:	d815      	bhi.n	800e812 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 800e7e6:	2b10      	cmp	r3, #16
 800e7e8:	d002      	beq.n	800e7f0 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 800e7ea:	2b20      	cmp	r3, #32
 800e7ec:	d007      	beq.n	800e7fe <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 800e7ee:	e010      	b.n	800e812 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e7f0:	4b27      	ldr	r3, [pc, #156]	@ (800e890 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800e7f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e7f4:	4a26      	ldr	r2, [pc, #152]	@ (800e890 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800e7f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e7fa:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 800e7fc:	e00e      	b.n	800e81c <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800e7fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e802:	3330      	adds	r3, #48	@ 0x30
 800e804:	4618      	mov	r0, r3
 800e806:	f003 f875 	bl	80118f4 <RCCEx_PLL3_Config>
 800e80a:	4603      	mov	r3, r0
 800e80c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 800e810:	e004      	b.n	800e81c <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e812:	2301      	movs	r3, #1
 800e814:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800e818:	e000      	b.n	800e81c <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 800e81a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e81c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800e820:	2b00      	cmp	r3, #0
 800e822:	d10d      	bne.n	800e840 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 800e824:	4b1a      	ldr	r3, [pc, #104]	@ (800e890 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800e826:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e82a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800e82e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e832:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800e836:	4916      	ldr	r1, [pc, #88]	@ (800e890 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800e838:	4313      	orrs	r3, r2
 800e83a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800e83e:	e003      	b.n	800e848 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e840:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800e844:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800e848:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e84c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e850:	2100      	movs	r1, #0
 800e852:	6039      	str	r1, [r7, #0]
 800e854:	f003 0308 	and.w	r3, r3, #8
 800e858:	607b      	str	r3, [r7, #4]
 800e85a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800e85e:	460b      	mov	r3, r1
 800e860:	4313      	orrs	r3, r2
 800e862:	d00c      	beq.n	800e87e <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 800e864:	4b0a      	ldr	r3, [pc, #40]	@ (800e890 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800e866:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800e86a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800e86e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e872:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 800e876:	4906      	ldr	r1, [pc, #24]	@ (800e890 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800e878:	4313      	orrs	r3, r2
 800e87a:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 800e87e:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
}
 800e882:	4618      	mov	r0, r3
 800e884:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 800e888:	46bd      	mov	sp, r7
 800e88a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e88e:	bf00      	nop
 800e890:	44020c00 	.word	0x44020c00

0800e894 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 800e894:	b480      	push	{r7}
 800e896:	b08b      	sub	sp, #44	@ 0x2c
 800e898:	af00      	add	r7, sp, #0
 800e89a:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800e89c:	4bad      	ldr	r3, [pc, #692]	@ (800eb54 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e89e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e8a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e8a4:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800e8a6:	4bab      	ldr	r3, [pc, #684]	@ (800eb54 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e8a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e8aa:	f003 0303 	and.w	r3, r3, #3
 800e8ae:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 800e8b0:	4ba8      	ldr	r3, [pc, #672]	@ (800eb54 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e8b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e8b4:	0a1b      	lsrs	r3, r3, #8
 800e8b6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e8ba:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 800e8bc:	4ba5      	ldr	r3, [pc, #660]	@ (800eb54 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e8be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e8c0:	f003 0310 	and.w	r3, r3, #16
 800e8c4:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800e8c6:	4ba3      	ldr	r3, [pc, #652]	@ (800eb54 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e8c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e8ca:	08db      	lsrs	r3, r3, #3
 800e8cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e8d0:	697a      	ldr	r2, [r7, #20]
 800e8d2:	fb02 f303 	mul.w	r3, r2, r3
 800e8d6:	ee07 3a90 	vmov	s15, r3
 800e8da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e8de:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 800e8e2:	69bb      	ldr	r3, [r7, #24]
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	f000 8126 	beq.w	800eb36 <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 800e8ea:	69fb      	ldr	r3, [r7, #28]
 800e8ec:	2b03      	cmp	r3, #3
 800e8ee:	d053      	beq.n	800e998 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 800e8f0:	69fb      	ldr	r3, [r7, #28]
 800e8f2:	2b03      	cmp	r3, #3
 800e8f4:	d86f      	bhi.n	800e9d6 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 800e8f6:	69fb      	ldr	r3, [r7, #28]
 800e8f8:	2b01      	cmp	r3, #1
 800e8fa:	d003      	beq.n	800e904 <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 800e8fc:	69fb      	ldr	r3, [r7, #28]
 800e8fe:	2b02      	cmp	r3, #2
 800e900:	d02b      	beq.n	800e95a <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 800e902:	e068      	b.n	800e9d6 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800e904:	4b93      	ldr	r3, [pc, #588]	@ (800eb54 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	08db      	lsrs	r3, r3, #3
 800e90a:	f003 0303 	and.w	r3, r3, #3
 800e90e:	4a92      	ldr	r2, [pc, #584]	@ (800eb58 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800e910:	fa22 f303 	lsr.w	r3, r2, r3
 800e914:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	ee07 3a90 	vmov	s15, r3
 800e91c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e920:	69bb      	ldr	r3, [r7, #24]
 800e922:	ee07 3a90 	vmov	s15, r3
 800e926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e92a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e92e:	6a3b      	ldr	r3, [r7, #32]
 800e930:	ee07 3a90 	vmov	s15, r3
 800e934:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e938:	ed97 6a04 	vldr	s12, [r7, #16]
 800e93c:	eddf 5a87 	vldr	s11, [pc, #540]	@ 800eb5c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800e940:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e944:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e948:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e94c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e950:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e954:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800e958:	e068      	b.n	800ea2c <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800e95a:	69bb      	ldr	r3, [r7, #24]
 800e95c:	ee07 3a90 	vmov	s15, r3
 800e960:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e964:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 800eb60 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800e968:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e96c:	6a3b      	ldr	r3, [r7, #32]
 800e96e:	ee07 3a90 	vmov	s15, r3
 800e972:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e976:	ed97 6a04 	vldr	s12, [r7, #16]
 800e97a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800eb5c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800e97e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e982:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e986:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e98a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e98e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e992:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800e996:	e049      	b.n	800ea2c <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800e998:	69bb      	ldr	r3, [r7, #24]
 800e99a:	ee07 3a90 	vmov	s15, r3
 800e99e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e9a2:	eddf 6a70 	vldr	s13, [pc, #448]	@ 800eb64 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 800e9a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e9aa:	6a3b      	ldr	r3, [r7, #32]
 800e9ac:	ee07 3a90 	vmov	s15, r3
 800e9b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e9b4:	ed97 6a04 	vldr	s12, [r7, #16]
 800e9b8:	eddf 5a68 	vldr	s11, [pc, #416]	@ 800eb5c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800e9bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e9c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e9c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e9c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e9cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e9d0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800e9d4:	e02a      	b.n	800ea2c <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800e9d6:	4b5f      	ldr	r3, [pc, #380]	@ (800eb54 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	08db      	lsrs	r3, r3, #3
 800e9dc:	f003 0303 	and.w	r3, r3, #3
 800e9e0:	4a5d      	ldr	r2, [pc, #372]	@ (800eb58 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800e9e2:	fa22 f303 	lsr.w	r3, r2, r3
 800e9e6:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	ee07 3a90 	vmov	s15, r3
 800e9ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e9f2:	69bb      	ldr	r3, [r7, #24]
 800e9f4:	ee07 3a90 	vmov	s15, r3
 800e9f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e9fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ea00:	6a3b      	ldr	r3, [r7, #32]
 800ea02:	ee07 3a90 	vmov	s15, r3
 800ea06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ea0a:	ed97 6a04 	vldr	s12, [r7, #16]
 800ea0e:	eddf 5a53 	vldr	s11, [pc, #332]	@ 800eb5c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800ea12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ea16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ea1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ea1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ea22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ea26:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800ea2a:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ea2c:	4b49      	ldr	r3, [pc, #292]	@ (800eb54 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ea34:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ea38:	d121      	bne.n	800ea7e <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800ea3a:	4b46      	ldr	r3, [pc, #280]	@ (800eb54 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800ea3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ea3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d017      	beq.n	800ea76 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800ea46:	4b43      	ldr	r3, [pc, #268]	@ (800eb54 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800ea48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ea4a:	0a5b      	lsrs	r3, r3, #9
 800ea4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ea50:	ee07 3a90 	vmov	s15, r3
 800ea54:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 800ea58:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ea5c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800ea60:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800ea64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ea68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ea6c:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	601a      	str	r2, [r3, #0]
 800ea74:	e006      	b.n	800ea84 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	2200      	movs	r2, #0
 800ea7a:	601a      	str	r2, [r3, #0]
 800ea7c:	e002      	b.n	800ea84 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	2200      	movs	r2, #0
 800ea82:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ea84:	4b33      	ldr	r3, [pc, #204]	@ (800eb54 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ea8c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ea90:	d121      	bne.n	800ead6 <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800ea92:	4b30      	ldr	r3, [pc, #192]	@ (800eb54 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800ea94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ea96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d017      	beq.n	800eace <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800ea9e:	4b2d      	ldr	r3, [pc, #180]	@ (800eb54 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800eaa0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eaa2:	0c1b      	lsrs	r3, r3, #16
 800eaa4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800eaa8:	ee07 3a90 	vmov	s15, r3
 800eaac:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 800eab0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800eab4:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800eab8:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800eabc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800eac0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800eac4:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	605a      	str	r2, [r3, #4]
 800eacc:	e006      	b.n	800eadc <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	2200      	movs	r2, #0
 800ead2:	605a      	str	r2, [r3, #4]
 800ead4:	e002      	b.n	800eadc <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	2200      	movs	r2, #0
 800eada:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800eadc:	4b1d      	ldr	r3, [pc, #116]	@ (800eb54 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800eae4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800eae8:	d121      	bne.n	800eb2e <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800eaea:	4b1a      	ldr	r3, [pc, #104]	@ (800eb54 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800eaec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eaee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d017      	beq.n	800eb26 <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800eaf6:	4b17      	ldr	r3, [pc, #92]	@ (800eb54 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800eaf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eafa:	0e1b      	lsrs	r3, r3, #24
 800eafc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800eb00:	ee07 3a90 	vmov	s15, r3
 800eb04:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 800eb08:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800eb0c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800eb10:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800eb14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800eb18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800eb1c:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800eb24:	e010      	b.n	800eb48 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	2200      	movs	r2, #0
 800eb2a:	609a      	str	r2, [r3, #8]
}
 800eb2c:	e00c      	b.n	800eb48 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	2200      	movs	r2, #0
 800eb32:	609a      	str	r2, [r3, #8]
}
 800eb34:	e008      	b.n	800eb48 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	2200      	movs	r2, #0
 800eb3a:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	2200      	movs	r2, #0
 800eb40:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	2200      	movs	r2, #0
 800eb46:	609a      	str	r2, [r3, #8]
}
 800eb48:	bf00      	nop
 800eb4a:	372c      	adds	r7, #44	@ 0x2c
 800eb4c:	46bd      	mov	sp, r7
 800eb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb52:	4770      	bx	lr
 800eb54:	44020c00 	.word	0x44020c00
 800eb58:	03d09000 	.word	0x03d09000
 800eb5c:	46000000 	.word	0x46000000
 800eb60:	4a742400 	.word	0x4a742400
 800eb64:	4bbebc20 	.word	0x4bbebc20

0800eb68 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 800eb68:	b480      	push	{r7}
 800eb6a:	b08b      	sub	sp, #44	@ 0x2c
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800eb70:	4bad      	ldr	r3, [pc, #692]	@ (800ee28 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800eb72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eb74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eb78:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800eb7a:	4bab      	ldr	r3, [pc, #684]	@ (800ee28 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800eb7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb7e:	f003 0303 	and.w	r3, r3, #3
 800eb82:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 800eb84:	4ba8      	ldr	r3, [pc, #672]	@ (800ee28 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800eb86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb88:	0a1b      	lsrs	r3, r3, #8
 800eb8a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800eb8e:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 800eb90:	4ba5      	ldr	r3, [pc, #660]	@ (800ee28 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800eb92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb94:	f003 0310 	and.w	r3, r3, #16
 800eb98:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800eb9a:	4ba3      	ldr	r3, [pc, #652]	@ (800ee28 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800eb9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eb9e:	08db      	lsrs	r3, r3, #3
 800eba0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800eba4:	697a      	ldr	r2, [r7, #20]
 800eba6:	fb02 f303 	mul.w	r3, r2, r3
 800ebaa:	ee07 3a90 	vmov	s15, r3
 800ebae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ebb2:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 800ebb6:	69bb      	ldr	r3, [r7, #24]
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	f000 8126 	beq.w	800ee0a <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 800ebbe:	69fb      	ldr	r3, [r7, #28]
 800ebc0:	2b03      	cmp	r3, #3
 800ebc2:	d053      	beq.n	800ec6c <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 800ebc4:	69fb      	ldr	r3, [r7, #28]
 800ebc6:	2b03      	cmp	r3, #3
 800ebc8:	d86f      	bhi.n	800ecaa <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 800ebca:	69fb      	ldr	r3, [r7, #28]
 800ebcc:	2b01      	cmp	r3, #1
 800ebce:	d003      	beq.n	800ebd8 <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 800ebd0:	69fb      	ldr	r3, [r7, #28]
 800ebd2:	2b02      	cmp	r3, #2
 800ebd4:	d02b      	beq.n	800ec2e <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 800ebd6:	e068      	b.n	800ecaa <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ebd8:	4b93      	ldr	r3, [pc, #588]	@ (800ee28 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	08db      	lsrs	r3, r3, #3
 800ebde:	f003 0303 	and.w	r3, r3, #3
 800ebe2:	4a92      	ldr	r2, [pc, #584]	@ (800ee2c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800ebe4:	fa22 f303 	lsr.w	r3, r2, r3
 800ebe8:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	ee07 3a90 	vmov	s15, r3
 800ebf0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ebf4:	69bb      	ldr	r3, [r7, #24]
 800ebf6:	ee07 3a90 	vmov	s15, r3
 800ebfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ebfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ec02:	6a3b      	ldr	r3, [r7, #32]
 800ec04:	ee07 3a90 	vmov	s15, r3
 800ec08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ec0c:	ed97 6a04 	vldr	s12, [r7, #16]
 800ec10:	eddf 5a87 	vldr	s11, [pc, #540]	@ 800ee30 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800ec14:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ec18:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ec1c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ec20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ec24:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ec28:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800ec2c:	e068      	b.n	800ed00 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800ec2e:	69bb      	ldr	r3, [r7, #24]
 800ec30:	ee07 3a90 	vmov	s15, r3
 800ec34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ec38:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 800ee34 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 800ec3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ec40:	6a3b      	ldr	r3, [r7, #32]
 800ec42:	ee07 3a90 	vmov	s15, r3
 800ec46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ec4a:	ed97 6a04 	vldr	s12, [r7, #16]
 800ec4e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800ee30 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800ec52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ec56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ec5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ec5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ec62:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ec66:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800ec6a:	e049      	b.n	800ed00 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800ec6c:	69bb      	ldr	r3, [r7, #24]
 800ec6e:	ee07 3a90 	vmov	s15, r3
 800ec72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ec76:	eddf 6a70 	vldr	s13, [pc, #448]	@ 800ee38 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 800ec7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ec7e:	6a3b      	ldr	r3, [r7, #32]
 800ec80:	ee07 3a90 	vmov	s15, r3
 800ec84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ec88:	ed97 6a04 	vldr	s12, [r7, #16]
 800ec8c:	eddf 5a68 	vldr	s11, [pc, #416]	@ 800ee30 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800ec90:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ec94:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ec98:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ec9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800eca0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eca4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800eca8:	e02a      	b.n	800ed00 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ecaa:	4b5f      	ldr	r3, [pc, #380]	@ (800ee28 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	08db      	lsrs	r3, r3, #3
 800ecb0:	f003 0303 	and.w	r3, r3, #3
 800ecb4:	4a5d      	ldr	r2, [pc, #372]	@ (800ee2c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800ecb6:	fa22 f303 	lsr.w	r3, r2, r3
 800ecba:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	ee07 3a90 	vmov	s15, r3
 800ecc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ecc6:	69bb      	ldr	r3, [r7, #24]
 800ecc8:	ee07 3a90 	vmov	s15, r3
 800eccc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ecd0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ecd4:	6a3b      	ldr	r3, [r7, #32]
 800ecd6:	ee07 3a90 	vmov	s15, r3
 800ecda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ecde:	ed97 6a04 	vldr	s12, [r7, #16]
 800ece2:	eddf 5a53 	vldr	s11, [pc, #332]	@ 800ee30 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800ece6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ecea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ecee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ecf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ecf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ecfa:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800ecfe:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ed00:	4b49      	ldr	r3, [pc, #292]	@ (800ee28 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ed08:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ed0c:	d121      	bne.n	800ed52 <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800ed0e:	4b46      	ldr	r3, [pc, #280]	@ (800ee28 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800ed10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d017      	beq.n	800ed4a <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800ed1a:	4b43      	ldr	r3, [pc, #268]	@ (800ee28 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800ed1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ed1e:	0a5b      	lsrs	r3, r3, #9
 800ed20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ed24:	ee07 3a90 	vmov	s15, r3
 800ed28:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 800ed2c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ed30:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800ed34:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800ed38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ed3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ed40:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	601a      	str	r2, [r3, #0]
 800ed48:	e006      	b.n	800ed58 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	2200      	movs	r2, #0
 800ed4e:	601a      	str	r2, [r3, #0]
 800ed50:	e002      	b.n	800ed58 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	2200      	movs	r2, #0
 800ed56:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ed58:	4b33      	ldr	r3, [pc, #204]	@ (800ee28 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ed60:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ed64:	d121      	bne.n	800edaa <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800ed66:	4b30      	ldr	r3, [pc, #192]	@ (800ee28 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800ed68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d017      	beq.n	800eda2 <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800ed72:	4b2d      	ldr	r3, [pc, #180]	@ (800ee28 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800ed74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ed76:	0c1b      	lsrs	r3, r3, #16
 800ed78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ed7c:	ee07 3a90 	vmov	s15, r3
 800ed80:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 800ed84:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ed88:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800ed8c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800ed90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ed94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ed98:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	605a      	str	r2, [r3, #4]
 800eda0:	e006      	b.n	800edb0 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	2200      	movs	r2, #0
 800eda6:	605a      	str	r2, [r3, #4]
 800eda8:	e002      	b.n	800edb0 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	2200      	movs	r2, #0
 800edae:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800edb0:	4b1d      	ldr	r3, [pc, #116]	@ (800ee28 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800edb8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800edbc:	d121      	bne.n	800ee02 <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800edbe:	4b1a      	ldr	r3, [pc, #104]	@ (800ee28 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800edc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800edc2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d017      	beq.n	800edfa <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800edca:	4b17      	ldr	r3, [pc, #92]	@ (800ee28 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800edcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800edce:	0e1b      	lsrs	r3, r3, #24
 800edd0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800edd4:	ee07 3a90 	vmov	s15, r3
 800edd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 800eddc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ede0:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800ede4:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800ede8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800edec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800edf0:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800edf8:	e010      	b.n	800ee1c <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	2200      	movs	r2, #0
 800edfe:	609a      	str	r2, [r3, #8]
}
 800ee00:	e00c      	b.n	800ee1c <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	2200      	movs	r2, #0
 800ee06:	609a      	str	r2, [r3, #8]
}
 800ee08:	e008      	b.n	800ee1c <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	2200      	movs	r2, #0
 800ee0e:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	2200      	movs	r2, #0
 800ee14:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	2200      	movs	r2, #0
 800ee1a:	609a      	str	r2, [r3, #8]
}
 800ee1c:	bf00      	nop
 800ee1e:	372c      	adds	r7, #44	@ 0x2c
 800ee20:	46bd      	mov	sp, r7
 800ee22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee26:	4770      	bx	lr
 800ee28:	44020c00 	.word	0x44020c00
 800ee2c:	03d09000 	.word	0x03d09000
 800ee30:	46000000 	.word	0x46000000
 800ee34:	4a742400 	.word	0x4a742400
 800ee38:	4bbebc20 	.word	0x4bbebc20

0800ee3c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 800ee3c:	b480      	push	{r7}
 800ee3e:	b08b      	sub	sp, #44	@ 0x2c
 800ee40:	af00      	add	r7, sp, #0
 800ee42:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800ee44:	4bad      	ldr	r3, [pc, #692]	@ (800f0fc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800ee46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ee48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ee4c:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800ee4e:	4bab      	ldr	r3, [pc, #684]	@ (800f0fc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800ee50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ee52:	f003 0303 	and.w	r3, r3, #3
 800ee56:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 800ee58:	4ba8      	ldr	r3, [pc, #672]	@ (800f0fc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800ee5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ee5c:	0a1b      	lsrs	r3, r3, #8
 800ee5e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ee62:	61bb      	str	r3, [r7, #24]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 800ee64:	4ba5      	ldr	r3, [pc, #660]	@ (800f0fc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800ee66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ee68:	f003 0310 	and.w	r3, r3, #16
 800ee6c:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800ee6e:	4ba3      	ldr	r3, [pc, #652]	@ (800f0fc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800ee70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ee72:	08db      	lsrs	r3, r3, #3
 800ee74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ee78:	697a      	ldr	r2, [r7, #20]
 800ee7a:	fb02 f303 	mul.w	r3, r2, r3
 800ee7e:	ee07 3a90 	vmov	s15, r3
 800ee82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ee86:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 800ee8a:	69bb      	ldr	r3, [r7, #24]
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	f000 8126 	beq.w	800f0de <HAL_RCCEx_GetPLL3ClockFreq+0x2a2>
  {
    switch (pll3source)
 800ee92:	69fb      	ldr	r3, [r7, #28]
 800ee94:	2b03      	cmp	r3, #3
 800ee96:	d053      	beq.n	800ef40 <HAL_RCCEx_GetPLL3ClockFreq+0x104>
 800ee98:	69fb      	ldr	r3, [r7, #28]
 800ee9a:	2b03      	cmp	r3, #3
 800ee9c:	d86f      	bhi.n	800ef7e <HAL_RCCEx_GetPLL3ClockFreq+0x142>
 800ee9e:	69fb      	ldr	r3, [r7, #28]
 800eea0:	2b01      	cmp	r3, #1
 800eea2:	d003      	beq.n	800eeac <HAL_RCCEx_GetPLL3ClockFreq+0x70>
 800eea4:	69fb      	ldr	r3, [r7, #28]
 800eea6:	2b02      	cmp	r3, #2
 800eea8:	d02b      	beq.n	800ef02 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
 800eeaa:	e068      	b.n	800ef7e <HAL_RCCEx_GetPLL3ClockFreq+0x142>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800eeac:	4b93      	ldr	r3, [pc, #588]	@ (800f0fc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	08db      	lsrs	r3, r3, #3
 800eeb2:	f003 0303 	and.w	r3, r3, #3
 800eeb6:	4a92      	ldr	r2, [pc, #584]	@ (800f100 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800eeb8:	fa22 f303 	lsr.w	r3, r2, r3
 800eebc:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	ee07 3a90 	vmov	s15, r3
 800eec4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800eec8:	69bb      	ldr	r3, [r7, #24]
 800eeca:	ee07 3a90 	vmov	s15, r3
 800eece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eed2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800eed6:	6a3b      	ldr	r3, [r7, #32]
 800eed8:	ee07 3a90 	vmov	s15, r3
 800eedc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800eee0:	ed97 6a04 	vldr	s12, [r7, #16]
 800eee4:	eddf 5a87 	vldr	s11, [pc, #540]	@ 800f104 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800eee8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800eeec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800eef0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800eef4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800eef8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eefc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800ef00:	e068      	b.n	800efd4 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800ef02:	69bb      	ldr	r3, [r7, #24]
 800ef04:	ee07 3a90 	vmov	s15, r3
 800ef08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ef0c:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 800f108 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 800ef10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ef14:	6a3b      	ldr	r3, [r7, #32]
 800ef16:	ee07 3a90 	vmov	s15, r3
 800ef1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ef1e:	ed97 6a04 	vldr	s12, [r7, #16]
 800ef22:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800f104 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800ef26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ef2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ef2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ef32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ef36:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ef3a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800ef3e:	e049      	b.n	800efd4 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800ef40:	69bb      	ldr	r3, [r7, #24]
 800ef42:	ee07 3a90 	vmov	s15, r3
 800ef46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ef4a:	eddf 6a70 	vldr	s13, [pc, #448]	@ 800f10c <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 800ef4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ef52:	6a3b      	ldr	r3, [r7, #32]
 800ef54:	ee07 3a90 	vmov	s15, r3
 800ef58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ef5c:	ed97 6a04 	vldr	s12, [r7, #16]
 800ef60:	eddf 5a68 	vldr	s11, [pc, #416]	@ 800f104 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800ef64:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ef68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ef6c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ef70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ef74:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ef78:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800ef7c:	e02a      	b.n	800efd4 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ef7e:	4b5f      	ldr	r3, [pc, #380]	@ (800f0fc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	08db      	lsrs	r3, r3, #3
 800ef84:	f003 0303 	and.w	r3, r3, #3
 800ef88:	4a5d      	ldr	r2, [pc, #372]	@ (800f100 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800ef8a:	fa22 f303 	lsr.w	r3, r2, r3
 800ef8e:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	ee07 3a90 	vmov	s15, r3
 800ef96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ef9a:	69bb      	ldr	r3, [r7, #24]
 800ef9c:	ee07 3a90 	vmov	s15, r3
 800efa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800efa4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800efa8:	6a3b      	ldr	r3, [r7, #32]
 800efaa:	ee07 3a90 	vmov	s15, r3
 800efae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800efb2:	ed97 6a04 	vldr	s12, [r7, #16]
 800efb6:	eddf 5a53 	vldr	s11, [pc, #332]	@ 800f104 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800efba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800efbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800efc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800efc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800efca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800efce:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800efd2:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800efd4:	4b49      	ldr	r3, [pc, #292]	@ (800f0fc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800efdc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800efe0:	d121      	bne.n	800f026 <HAL_RCCEx_GetPLL3ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800efe2:	4b46      	ldr	r3, [pc, #280]	@ (800f0fc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800efe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800efe6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800efea:	2b00      	cmp	r3, #0
 800efec:	d017      	beq.n	800f01e <HAL_RCCEx_GetPLL3ClockFreq+0x1e2>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800efee:	4b43      	ldr	r3, [pc, #268]	@ (800f0fc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800eff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eff2:	0a5b      	lsrs	r3, r3, #9
 800eff4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800eff8:	ee07 3a90 	vmov	s15, r3
 800effc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 800f000:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f004:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800f008:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800f00c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f010:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f014:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	601a      	str	r2, [r3, #0]
 800f01c:	e006      	b.n	800f02c <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	2200      	movs	r2, #0
 800f022:	601a      	str	r2, [r3, #0]
 800f024:	e002      	b.n	800f02c <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	2200      	movs	r2, #0
 800f02a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f02c:	4b33      	ldr	r3, [pc, #204]	@ (800f0fc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f034:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f038:	d121      	bne.n	800f07e <HAL_RCCEx_GetPLL3ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800f03a:	4b30      	ldr	r3, [pc, #192]	@ (800f0fc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800f03c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f03e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f042:	2b00      	cmp	r3, #0
 800f044:	d017      	beq.n	800f076 <HAL_RCCEx_GetPLL3ClockFreq+0x23a>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800f046:	4b2d      	ldr	r3, [pc, #180]	@ (800f0fc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800f048:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f04a:	0c1b      	lsrs	r3, r3, #16
 800f04c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f050:	ee07 3a90 	vmov	s15, r3
 800f054:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 800f058:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f05c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800f060:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800f064:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f068:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f06c:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	605a      	str	r2, [r3, #4]
 800f074:	e006      	b.n	800f084 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	2200      	movs	r2, #0
 800f07a:	605a      	str	r2, [r3, #4]
 800f07c:	e002      	b.n	800f084 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	2200      	movs	r2, #0
 800f082:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f084:	4b1d      	ldr	r3, [pc, #116]	@ (800f0fc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f08c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f090:	d121      	bne.n	800f0d6 <HAL_RCCEx_GetPLL3ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800f092:	4b1a      	ldr	r3, [pc, #104]	@ (800f0fc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800f094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f096:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d017      	beq.n	800f0ce <HAL_RCCEx_GetPLL3ClockFreq+0x292>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800f09e:	4b17      	ldr	r3, [pc, #92]	@ (800f0fc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800f0a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f0a2:	0e1b      	lsrs	r3, r3, #24
 800f0a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f0a8:	ee07 3a90 	vmov	s15, r3
 800f0ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 800f0b0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f0b4:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800f0b8:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800f0bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f0c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f0c4:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 800f0cc:	e010      	b.n	800f0f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	2200      	movs	r2, #0
 800f0d2:	609a      	str	r2, [r3, #8]
}
 800f0d4:	e00c      	b.n	800f0f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	2200      	movs	r2, #0
 800f0da:	609a      	str	r2, [r3, #8]
}
 800f0dc:	e008      	b.n	800f0f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	2200      	movs	r2, #0
 800f0e2:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	2200      	movs	r2, #0
 800f0e8:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	2200      	movs	r2, #0
 800f0ee:	609a      	str	r2, [r3, #8]
}
 800f0f0:	bf00      	nop
 800f0f2:	372c      	adds	r7, #44	@ 0x2c
 800f0f4:	46bd      	mov	sp, r7
 800f0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0fa:	4770      	bx	lr
 800f0fc:	44020c00 	.word	0x44020c00
 800f100:	03d09000 	.word	0x03d09000
 800f104:	46000000 	.word	0x46000000
 800f108:	4a742400 	.word	0x4a742400
 800f10c:	4bbebc20 	.word	0x4bbebc20

0800f110 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800f110:	b590      	push	{r4, r7, lr}
 800f112:	b08f      	sub	sp, #60	@ 0x3c
 800f114:	af00      	add	r7, sp, #0
 800f116:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800f11a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f11e:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 800f122:	4321      	orrs	r1, r4
 800f124:	d150      	bne.n	800f1c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800f126:	4b26      	ldr	r3, [pc, #152]	@ (800f1c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800f128:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800f12c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f130:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800f132:	4b23      	ldr	r3, [pc, #140]	@ (800f1c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800f134:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800f138:	f003 0302 	and.w	r3, r3, #2
 800f13c:	2b02      	cmp	r3, #2
 800f13e:	d108      	bne.n	800f152 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800f140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f142:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f146:	d104      	bne.n	800f152 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800f148:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f14c:	637b      	str	r3, [r7, #52]	@ 0x34
 800f14e:	f002 bb2a 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800f152:	4b1b      	ldr	r3, [pc, #108]	@ (800f1c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800f154:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800f158:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f15c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f160:	d108      	bne.n	800f174 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 800f162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f164:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f168:	d104      	bne.n	800f174 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 800f16a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800f16e:	637b      	str	r3, [r7, #52]	@ 0x34
 800f170:	f002 bb19 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 800f174:	4b12      	ldr	r3, [pc, #72]	@ (800f1c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f17c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f180:	d119      	bne.n	800f1b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 800f182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f184:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f188:	d115      	bne.n	800f1b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800f18a:	4b0d      	ldr	r3, [pc, #52]	@ (800f1c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800f18c:	69db      	ldr	r3, [r3, #28]
 800f18e:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 800f192:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f196:	d30a      	bcc.n	800f1ae <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 800f198:	4b09      	ldr	r3, [pc, #36]	@ (800f1c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800f19a:	69db      	ldr	r3, [r3, #28]
 800f19c:	0a1b      	lsrs	r3, r3, #8
 800f19e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f1a2:	4a08      	ldr	r2, [pc, #32]	@ (800f1c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800f1a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800f1a8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800f1aa:	f002 bafc 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 800f1ae:	2300      	movs	r3, #0
 800f1b0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800f1b2:	f002 baf8 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800f1b6:	2300      	movs	r3, #0
 800f1b8:	637b      	str	r3, [r7, #52]	@ 0x34
 800f1ba:	f002 baf4 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800f1be:	bf00      	nop
 800f1c0:	44020c00 	.word	0x44020c00
 800f1c4:	017d7840 	.word	0x017d7840
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 800f1c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f1cc:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
 800f1d0:	ea50 0104 	orrs.w	r1, r0, r4
 800f1d4:	f001 8275 	beq.w	80106c2 <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 800f1d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f1dc:	2801      	cmp	r0, #1
 800f1de:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
 800f1e2:	f082 82dd 	bcs.w	80117a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800f1e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f1ea:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 800f1ee:	ea50 0104 	orrs.w	r1, r0, r4
 800f1f2:	f001 816c 	beq.w	80104ce <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 800f1f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f1fa:	2801      	cmp	r0, #1
 800f1fc:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 800f200:	f082 82ce 	bcs.w	80117a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800f204:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f208:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
 800f20c:	ea50 0104 	orrs.w	r1, r0, r4
 800f210:	f001 8602 	beq.w	8010e18 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 800f214:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f218:	2801      	cmp	r0, #1
 800f21a:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
 800f21e:	f082 82bf 	bcs.w	80117a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800f222:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f226:	f1a1 0480 	sub.w	r4, r1, #128	@ 0x80
 800f22a:	ea50 0104 	orrs.w	r1, r0, r4
 800f22e:	f001 854c 	beq.w	8010cca <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 800f232:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f236:	2801      	cmp	r0, #1
 800f238:	f171 0180 	sbcs.w	r1, r1, #128	@ 0x80
 800f23c:	f082 82b0 	bcs.w	80117a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800f240:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f244:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
 800f248:	ea50 0104 	orrs.w	r1, r0, r4
 800f24c:	f001 849e 	beq.w	8010b8c <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 800f250:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f254:	2801      	cmp	r0, #1
 800f256:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
 800f25a:	f082 82a1 	bcs.w	80117a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800f25e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f262:	f1a1 0420 	sub.w	r4, r1, #32
 800f266:	ea50 0104 	orrs.w	r1, r0, r4
 800f26a:	f001 83e8 	beq.w	8010a3e <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 800f26e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f272:	2801      	cmp	r0, #1
 800f274:	f171 0120 	sbcs.w	r1, r1, #32
 800f278:	f082 8292 	bcs.w	80117a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800f27c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f280:	f1a1 0410 	sub.w	r4, r1, #16
 800f284:	ea50 0104 	orrs.w	r1, r0, r4
 800f288:	f002 8256 	beq.w	8011738 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800f28c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f290:	2801      	cmp	r0, #1
 800f292:	f171 0110 	sbcs.w	r1, r1, #16
 800f296:	f082 8283 	bcs.w	80117a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800f29a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f29e:	f1a1 0408 	sub.w	r4, r1, #8
 800f2a2:	ea50 0104 	orrs.w	r1, r0, r4
 800f2a6:	f002 81cc 	beq.w	8011642 <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 800f2aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f2ae:	2801      	cmp	r0, #1
 800f2b0:	f171 0108 	sbcs.w	r1, r1, #8
 800f2b4:	f082 8274 	bcs.w	80117a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800f2b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f2bc:	1f0c      	subs	r4, r1, #4
 800f2be:	ea50 0104 	orrs.w	r1, r0, r4
 800f2c2:	f001 8648 	beq.w	8010f56 <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 800f2c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f2ca:	2801      	cmp	r0, #1
 800f2cc:	f171 0104 	sbcs.w	r1, r1, #4
 800f2d0:	f082 8266 	bcs.w	80117a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800f2d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f2d8:	1e8c      	subs	r4, r1, #2
 800f2da:	ea50 0104 	orrs.w	r1, r0, r4
 800f2de:	f002 8143 	beq.w	8011568 <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 800f2e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f2e6:	2801      	cmp	r0, #1
 800f2e8:	f171 0102 	sbcs.w	r1, r1, #2
 800f2ec:	f082 8258 	bcs.w	80117a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800f2f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f2f4:	1e4c      	subs	r4, r1, #1
 800f2f6:	ea50 0104 	orrs.w	r1, r0, r4
 800f2fa:	f002 80ce 	beq.w	801149a <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 800f2fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f302:	2801      	cmp	r0, #1
 800f304:	f171 0101 	sbcs.w	r1, r1, #1
 800f308:	f082 824a 	bcs.w	80117a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800f30c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f310:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 800f314:	4321      	orrs	r1, r4
 800f316:	f002 8059 	beq.w	80113cc <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 800f31a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f31e:	4cd9      	ldr	r4, [pc, #868]	@ (800f684 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 800f320:	42a0      	cmp	r0, r4
 800f322:	f171 0100 	sbcs.w	r1, r1, #0
 800f326:	f082 823b 	bcs.w	80117a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800f32a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f32e:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 800f332:	4321      	orrs	r1, r4
 800f334:	f001 87d9 	beq.w	80112ea <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 800f338:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f33c:	4cd2      	ldr	r4, [pc, #840]	@ (800f688 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 800f33e:	42a0      	cmp	r0, r4
 800f340:	f171 0100 	sbcs.w	r1, r1, #0
 800f344:	f082 822c 	bcs.w	80117a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800f348:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f34c:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 800f350:	4321      	orrs	r1, r4
 800f352:	f001 8751 	beq.w	80111f8 <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 800f356:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f35a:	4ccc      	ldr	r4, [pc, #816]	@ (800f68c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800f35c:	42a0      	cmp	r0, r4
 800f35e:	f171 0100 	sbcs.w	r1, r1, #0
 800f362:	f082 821d 	bcs.w	80117a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800f366:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f36a:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 800f36e:	4321      	orrs	r1, r4
 800f370:	f001 869a 	beq.w	80110a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 800f374:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f378:	4cc5      	ldr	r4, [pc, #788]	@ (800f690 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 800f37a:	42a0      	cmp	r0, r4
 800f37c:	f171 0100 	sbcs.w	r1, r1, #0
 800f380:	f082 820e 	bcs.w	80117a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800f384:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f388:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 800f38c:	4321      	orrs	r1, r4
 800f38e:	f001 8612 	beq.w	8010fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 800f392:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f396:	4cbf      	ldr	r4, [pc, #764]	@ (800f694 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 800f398:	42a0      	cmp	r0, r4
 800f39a:	f171 0100 	sbcs.w	r1, r1, #0
 800f39e:	f082 81ff 	bcs.w	80117a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800f3a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f3a6:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 800f3aa:	4321      	orrs	r1, r4
 800f3ac:	f002 817e 	beq.w	80116ac <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 800f3b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f3b4:	4cb8      	ldr	r4, [pc, #736]	@ (800f698 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800f3b6:	42a0      	cmp	r0, r4
 800f3b8:	f171 0100 	sbcs.w	r1, r1, #0
 800f3bc:	f082 81f0 	bcs.w	80117a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800f3c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f3c4:	f5a0 0400 	sub.w	r4, r0, #8388608	@ 0x800000
 800f3c8:	4321      	orrs	r1, r4
 800f3ca:	f000 829e 	beq.w	800f90a <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 800f3ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f3d2:	4cb2      	ldr	r4, [pc, #712]	@ (800f69c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800f3d4:	42a0      	cmp	r0, r4
 800f3d6:	f171 0100 	sbcs.w	r1, r1, #0
 800f3da:	f082 81e1 	bcs.w	80117a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800f3de:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f3e2:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 800f3e6:	4321      	orrs	r1, r4
 800f3e8:	f000 826d 	beq.w	800f8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 800f3ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f3f0:	4cab      	ldr	r4, [pc, #684]	@ (800f6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800f3f2:	42a0      	cmp	r0, r4
 800f3f4:	f171 0100 	sbcs.w	r1, r1, #0
 800f3f8:	f082 81d2 	bcs.w	80117a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800f3fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f400:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 800f404:	4321      	orrs	r1, r4
 800f406:	f001 800d 	beq.w	8010424 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 800f40a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f40e:	4ca5      	ldr	r4, [pc, #660]	@ (800f6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800f410:	42a0      	cmp	r0, r4
 800f412:	f171 0100 	sbcs.w	r1, r1, #0
 800f416:	f082 81c3 	bcs.w	80117a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800f41a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f41e:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
 800f422:	4321      	orrs	r1, r4
 800f424:	f000 81d0 	beq.w	800f7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 800f428:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f42c:	4c9e      	ldr	r4, [pc, #632]	@ (800f6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800f42e:	42a0      	cmp	r0, r4
 800f430:	f171 0100 	sbcs.w	r1, r1, #0
 800f434:	f082 81b4 	bcs.w	80117a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800f438:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f43c:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
 800f440:	4321      	orrs	r1, r4
 800f442:	f000 8142 	beq.w	800f6ca <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 800f446:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f44a:	4c98      	ldr	r4, [pc, #608]	@ (800f6ac <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800f44c:	42a0      	cmp	r0, r4
 800f44e:	f171 0100 	sbcs.w	r1, r1, #0
 800f452:	f082 81a5 	bcs.w	80117a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800f456:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f45a:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 800f45e:	4321      	orrs	r1, r4
 800f460:	f001 824e 	beq.w	8010900 <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 800f464:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f468:	4c91      	ldr	r4, [pc, #580]	@ (800f6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 800f46a:	42a0      	cmp	r0, r4
 800f46c:	f171 0100 	sbcs.w	r1, r1, #0
 800f470:	f082 8196 	bcs.w	80117a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800f474:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f478:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 800f47c:	4321      	orrs	r1, r4
 800f47e:	f001 8197 	beq.w	80107b0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 800f482:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f486:	4c8b      	ldr	r4, [pc, #556]	@ (800f6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800f488:	42a0      	cmp	r0, r4
 800f48a:	f171 0100 	sbcs.w	r1, r1, #0
 800f48e:	f082 8187 	bcs.w	80117a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800f492:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f496:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 800f49a:	4321      	orrs	r1, r4
 800f49c:	f001 8154 	beq.w	8010748 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 800f4a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f4a4:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 800f4a8:	f171 0100 	sbcs.w	r1, r1, #0
 800f4ac:	f082 8178 	bcs.w	80117a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800f4b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f4b4:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 800f4b8:	4321      	orrs	r1, r4
 800f4ba:	f001 80b7 	beq.w	801062c <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 800f4be:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f4c2:	f248 0401 	movw	r4, #32769	@ 0x8001
 800f4c6:	42a0      	cmp	r0, r4
 800f4c8:	f171 0100 	sbcs.w	r1, r1, #0
 800f4cc:	f082 8168 	bcs.w	80117a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800f4d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f4d4:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 800f4d8:	4321      	orrs	r1, r4
 800f4da:	f001 8064 	beq.w	80105a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 800f4de:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f4e2:	f244 0401 	movw	r4, #16385	@ 0x4001
 800f4e6:	42a0      	cmp	r0, r4
 800f4e8:	f171 0100 	sbcs.w	r1, r1, #0
 800f4ec:	f082 8158 	bcs.w	80117a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800f4f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f4f4:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 800f4f8:	4321      	orrs	r1, r4
 800f4fa:	f001 8011 	beq.w	8010520 <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 800f4fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f502:	f242 0401 	movw	r4, #8193	@ 0x2001
 800f506:	42a0      	cmp	r0, r4
 800f508:	f171 0100 	sbcs.w	r1, r1, #0
 800f50c:	f082 8148 	bcs.w	80117a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800f510:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f514:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
 800f518:	4321      	orrs	r1, r4
 800f51a:	f000 871e 	beq.w	801035a <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 800f51e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f522:	f241 0401 	movw	r4, #4097	@ 0x1001
 800f526:	42a0      	cmp	r0, r4
 800f528:	f171 0100 	sbcs.w	r1, r1, #0
 800f52c:	f082 8138 	bcs.w	80117a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800f530:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f534:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
 800f538:	4321      	orrs	r1, r4
 800f53a:	f000 86a8 	beq.w	801028e <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 800f53e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f542:	f640 0401 	movw	r4, #2049	@ 0x801
 800f546:	42a0      	cmp	r0, r4
 800f548:	f171 0100 	sbcs.w	r1, r1, #0
 800f54c:	f082 8128 	bcs.w	80117a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800f550:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f554:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
 800f558:	4321      	orrs	r1, r4
 800f55a:	f000 8632 	beq.w	80101c2 <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 800f55e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f562:	f240 4401 	movw	r4, #1025	@ 0x401
 800f566:	42a0      	cmp	r0, r4
 800f568:	f171 0100 	sbcs.w	r1, r1, #0
 800f56c:	f082 8118 	bcs.w	80117a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800f570:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f574:	f5a0 7400 	sub.w	r4, r0, #512	@ 0x200
 800f578:	4321      	orrs	r1, r4
 800f57a:	f000 85b0 	beq.w	80100de <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 800f57e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f582:	f240 2401 	movw	r4, #513	@ 0x201
 800f586:	42a0      	cmp	r0, r4
 800f588:	f171 0100 	sbcs.w	r1, r1, #0
 800f58c:	f082 8108 	bcs.w	80117a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800f590:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f594:	f5a0 7480 	sub.w	r4, r0, #256	@ 0x100
 800f598:	4321      	orrs	r1, r4
 800f59a:	f000 8535 	beq.w	8010008 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 800f59e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f5a2:	f240 1401 	movw	r4, #257	@ 0x101
 800f5a6:	42a0      	cmp	r0, r4
 800f5a8:	f171 0100 	sbcs.w	r1, r1, #0
 800f5ac:	f082 80f8 	bcs.w	80117a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800f5b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f5b4:	f1a0 0480 	sub.w	r4, r0, #128	@ 0x80
 800f5b8:	4321      	orrs	r1, r4
 800f5ba:	f000 84ba 	beq.w	800ff32 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 800f5be:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f5c2:	2881      	cmp	r0, #129	@ 0x81
 800f5c4:	f171 0100 	sbcs.w	r1, r1, #0
 800f5c8:	f082 80ea 	bcs.w	80117a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800f5cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f5d0:	2821      	cmp	r0, #33	@ 0x21
 800f5d2:	f171 0100 	sbcs.w	r1, r1, #0
 800f5d6:	d26f      	bcs.n	800f6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800f5d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f5dc:	4301      	orrs	r1, r0
 800f5de:	f002 80df 	beq.w	80117a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800f5e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f5e6:	1e42      	subs	r2, r0, #1
 800f5e8:	f141 33ff 	adc.w	r3, r1, #4294967295
 800f5ec:	2a20      	cmp	r2, #32
 800f5ee:	f173 0100 	sbcs.w	r1, r3, #0
 800f5f2:	f082 80d5 	bcs.w	80117a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800f5f6:	2a1f      	cmp	r2, #31
 800f5f8:	f202 80d2 	bhi.w	80117a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800f5fc:	a101      	add	r1, pc, #4	@ (adr r1, 800f604 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 800f5fe:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f602:	bf00      	nop
 800f604:	0800f965 	.word	0x0800f965
 800f608:	0800fa31 	.word	0x0800fa31
 800f60c:	080117a1 	.word	0x080117a1
 800f610:	0800faf1 	.word	0x0800faf1
 800f614:	080117a1 	.word	0x080117a1
 800f618:	080117a1 	.word	0x080117a1
 800f61c:	080117a1 	.word	0x080117a1
 800f620:	0800fbc1 	.word	0x0800fbc1
 800f624:	080117a1 	.word	0x080117a1
 800f628:	080117a1 	.word	0x080117a1
 800f62c:	080117a1 	.word	0x080117a1
 800f630:	080117a1 	.word	0x080117a1
 800f634:	080117a1 	.word	0x080117a1
 800f638:	080117a1 	.word	0x080117a1
 800f63c:	080117a1 	.word	0x080117a1
 800f640:	0800fca3 	.word	0x0800fca3
 800f644:	080117a1 	.word	0x080117a1
 800f648:	080117a1 	.word	0x080117a1
 800f64c:	080117a1 	.word	0x080117a1
 800f650:	080117a1 	.word	0x080117a1
 800f654:	080117a1 	.word	0x080117a1
 800f658:	080117a1 	.word	0x080117a1
 800f65c:	080117a1 	.word	0x080117a1
 800f660:	080117a1 	.word	0x080117a1
 800f664:	080117a1 	.word	0x080117a1
 800f668:	080117a1 	.word	0x080117a1
 800f66c:	080117a1 	.word	0x080117a1
 800f670:	080117a1 	.word	0x080117a1
 800f674:	080117a1 	.word	0x080117a1
 800f678:	080117a1 	.word	0x080117a1
 800f67c:	080117a1 	.word	0x080117a1
 800f680:	0800fd79 	.word	0x0800fd79
 800f684:	80000001 	.word	0x80000001
 800f688:	40000001 	.word	0x40000001
 800f68c:	20000001 	.word	0x20000001
 800f690:	10000001 	.word	0x10000001
 800f694:	08000001 	.word	0x08000001
 800f698:	04000001 	.word	0x04000001
 800f69c:	00800001 	.word	0x00800001
 800f6a0:	00400001 	.word	0x00400001
 800f6a4:	00200001 	.word	0x00200001
 800f6a8:	00100001 	.word	0x00100001
 800f6ac:	00080001 	.word	0x00080001
 800f6b0:	00040001 	.word	0x00040001
 800f6b4:	00020001 	.word	0x00020001
 800f6b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f6bc:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800f6c0:	430b      	orrs	r3, r1
 800f6c2:	f000 83c4 	beq.w	800fe4e <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 800f6c6:	f002 b86b 	b.w	80117a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800f6ca:	4ba1      	ldr	r3, [pc, #644]	@ (800f950 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800f6cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800f6d0:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800f6d4:	633b      	str	r3, [r7, #48]	@ 0x30
 800f6d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6d8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800f6dc:	d036      	beq.n	800f74c <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 800f6de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6e0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800f6e4:	d86b      	bhi.n	800f7be <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800f6e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6e8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800f6ec:	d02b      	beq.n	800f746 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800f6ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6f0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800f6f4:	d863      	bhi.n	800f7be <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800f6f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f6fc:	d01b      	beq.n	800f736 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800f6fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f700:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f704:	d85b      	bhi.n	800f7be <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800f706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d004      	beq.n	800f716 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 800f70c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f70e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f712:	d008      	beq.n	800f726 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 800f714:	e053      	b.n	800f7be <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f716:	f107 0320 	add.w	r3, r7, #32
 800f71a:	4618      	mov	r0, r3
 800f71c:	f7ff f8ba 	bl	800e894 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800f720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f722:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800f724:	e04e      	b.n	800f7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f726:	f107 0314 	add.w	r3, r7, #20
 800f72a:	4618      	mov	r0, r3
 800f72c:	f7ff fa1c 	bl	800eb68 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800f730:	697b      	ldr	r3, [r7, #20]
 800f732:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800f734:	e046      	b.n	800f7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f736:	f107 0308 	add.w	r3, r7, #8
 800f73a:	4618      	mov	r0, r3
 800f73c:	f7ff fb7e 	bl	800ee3c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800f740:	68bb      	ldr	r3, [r7, #8]
 800f742:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800f744:	e03e      	b.n	800f7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800f746:	4b83      	ldr	r3, [pc, #524]	@ (800f954 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800f748:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800f74a:	e03b      	b.n	800f7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f74c:	4b80      	ldr	r3, [pc, #512]	@ (800f950 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800f74e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800f752:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800f756:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f758:	4b7d      	ldr	r3, [pc, #500]	@ (800f950 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	f003 0302 	and.w	r3, r3, #2
 800f760:	2b02      	cmp	r3, #2
 800f762:	d10c      	bne.n	800f77e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 800f764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f766:	2b00      	cmp	r3, #0
 800f768:	d109      	bne.n	800f77e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800f76a:	4b79      	ldr	r3, [pc, #484]	@ (800f950 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	08db      	lsrs	r3, r3, #3
 800f770:	f003 0303 	and.w	r3, r3, #3
 800f774:	4a78      	ldr	r2, [pc, #480]	@ (800f958 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 800f776:	fa22 f303 	lsr.w	r3, r2, r3
 800f77a:	637b      	str	r3, [r7, #52]	@ 0x34
 800f77c:	e01e      	b.n	800f7bc <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f77e:	4b74      	ldr	r3, [pc, #464]	@ (800f950 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800f786:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f78a:	d106      	bne.n	800f79a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800f78c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f78e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f792:	d102      	bne.n	800f79a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800f794:	4b71      	ldr	r3, [pc, #452]	@ (800f95c <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 800f796:	637b      	str	r3, [r7, #52]	@ 0x34
 800f798:	e010      	b.n	800f7bc <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f79a:	4b6d      	ldr	r3, [pc, #436]	@ (800f950 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f7a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f7a6:	d106      	bne.n	800f7b6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 800f7a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f7aa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f7ae:	d102      	bne.n	800f7b6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800f7b0:	4b6b      	ldr	r3, [pc, #428]	@ (800f960 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 800f7b2:	637b      	str	r3, [r7, #52]	@ 0x34
 800f7b4:	e002      	b.n	800f7bc <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800f7b6:	2300      	movs	r3, #0
 800f7b8:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800f7ba:	e003      	b.n	800f7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 800f7bc:	e002      	b.n	800f7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 800f7be:	2300      	movs	r3, #0
 800f7c0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800f7c2:	bf00      	nop
          }
        }
        break;
 800f7c4:	f001 bfef 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800f7c8:	4b61      	ldr	r3, [pc, #388]	@ (800f950 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800f7ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800f7ce:	f403 1360 	and.w	r3, r3, #3670016	@ 0x380000
 800f7d2:	633b      	str	r3, [r7, #48]	@ 0x30
 800f7d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7d6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f7da:	d036      	beq.n	800f84a <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 800f7dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f7e2:	d86b      	bhi.n	800f8bc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800f7e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7e6:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800f7ea:	d02b      	beq.n	800f844 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 800f7ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7ee:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800f7f2:	d863      	bhi.n	800f8bc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800f7f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f7fa:	d01b      	beq.n	800f834 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800f7fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f802:	d85b      	bhi.n	800f8bc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800f804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f806:	2b00      	cmp	r3, #0
 800f808:	d004      	beq.n	800f814 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800f80a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f80c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800f810:	d008      	beq.n	800f824 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 800f812:	e053      	b.n	800f8bc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f814:	f107 0320 	add.w	r3, r7, #32
 800f818:	4618      	mov	r0, r3
 800f81a:	f7ff f83b 	bl	800e894 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800f81e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f820:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800f822:	e04e      	b.n	800f8c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f824:	f107 0314 	add.w	r3, r7, #20
 800f828:	4618      	mov	r0, r3
 800f82a:	f7ff f99d 	bl	800eb68 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800f82e:	697b      	ldr	r3, [r7, #20]
 800f830:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800f832:	e046      	b.n	800f8c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f834:	f107 0308 	add.w	r3, r7, #8
 800f838:	4618      	mov	r0, r3
 800f83a:	f7ff faff 	bl	800ee3c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800f83e:	68bb      	ldr	r3, [r7, #8]
 800f840:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800f842:	e03e      	b.n	800f8c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800f844:	4b43      	ldr	r3, [pc, #268]	@ (800f954 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800f846:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800f848:	e03b      	b.n	800f8c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f84a:	4b41      	ldr	r3, [pc, #260]	@ (800f950 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800f84c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800f850:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800f854:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f856:	4b3e      	ldr	r3, [pc, #248]	@ (800f950 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	f003 0302 	and.w	r3, r3, #2
 800f85e:	2b02      	cmp	r3, #2
 800f860:	d10c      	bne.n	800f87c <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 800f862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f864:	2b00      	cmp	r3, #0
 800f866:	d109      	bne.n	800f87c <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800f868:	4b39      	ldr	r3, [pc, #228]	@ (800f950 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	08db      	lsrs	r3, r3, #3
 800f86e:	f003 0303 	and.w	r3, r3, #3
 800f872:	4a39      	ldr	r2, [pc, #228]	@ (800f958 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 800f874:	fa22 f303 	lsr.w	r3, r2, r3
 800f878:	637b      	str	r3, [r7, #52]	@ 0x34
 800f87a:	e01e      	b.n	800f8ba <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f87c:	4b34      	ldr	r3, [pc, #208]	@ (800f950 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800f884:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f888:	d106      	bne.n	800f898 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800f88a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f88c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f890:	d102      	bne.n	800f898 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800f892:	4b32      	ldr	r3, [pc, #200]	@ (800f95c <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 800f894:	637b      	str	r3, [r7, #52]	@ 0x34
 800f896:	e010      	b.n	800f8ba <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f898:	4b2d      	ldr	r3, [pc, #180]	@ (800f950 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f8a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f8a4:	d106      	bne.n	800f8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 800f8a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f8ac:	d102      	bne.n	800f8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800f8ae:	4b2c      	ldr	r3, [pc, #176]	@ (800f960 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 800f8b0:	637b      	str	r3, [r7, #52]	@ 0x34
 800f8b2:	e002      	b.n	800f8ba <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800f8b4:	2300      	movs	r3, #0
 800f8b6:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800f8b8:	e003      	b.n	800f8c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 800f8ba:	e002      	b.n	800f8c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 800f8bc:	2300      	movs	r3, #0
 800f8be:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800f8c0:	bf00      	nop
          }
        }
        break;
 800f8c2:	f001 bf70 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 800f8c6:	4b22      	ldr	r3, [pc, #136]	@ (800f950 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800f8c8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800f8cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f8d0:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 800f8d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d108      	bne.n	800f8ea <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f8d8:	f107 0320 	add.w	r3, r7, #32
 800f8dc:	4618      	mov	r0, r3
 800f8de:	f7fe ffd9 	bl	800e894 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f8e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8e4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f8e6:	f001 bf5e 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 800f8ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8ec:	2b40      	cmp	r3, #64	@ 0x40
 800f8ee:	d108      	bne.n	800f902 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f8f0:	f107 0314 	add.w	r3, r7, #20
 800f8f4:	4618      	mov	r0, r3
 800f8f6:	f7ff f937 	bl	800eb68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800f8fa:	69fb      	ldr	r3, [r7, #28]
 800f8fc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f8fe:	f001 bf52 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800f902:	2300      	movs	r3, #0
 800f904:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f906:	f001 bf4e 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 800f90a:	4b11      	ldr	r3, [pc, #68]	@ (800f950 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800f90c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800f910:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f914:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 800f916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d108      	bne.n	800f92e <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f91c:	f107 0320 	add.w	r3, r7, #32
 800f920:	4618      	mov	r0, r3
 800f922:	f7fe ffb7 	bl	800e894 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f928:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f92a:	f001 bf3c 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 800f92e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f930:	2b80      	cmp	r3, #128	@ 0x80
 800f932:	d108      	bne.n	800f946 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f934:	f107 0314 	add.w	r3, r7, #20
 800f938:	4618      	mov	r0, r3
 800f93a:	f7ff f915 	bl	800eb68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800f93e:	69fb      	ldr	r3, [r7, #28]
 800f940:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f942:	f001 bf30 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800f946:	2300      	movs	r3, #0
 800f948:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f94a:	f001 bf2c 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800f94e:	bf00      	nop
 800f950:	44020c00 	.word	0x44020c00
 800f954:	00bb8000 	.word	0x00bb8000
 800f958:	03d09000 	.word	0x03d09000
 800f95c:	003d0900 	.word	0x003d0900
 800f960:	017d7840 	.word	0x017d7840
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800f964:	4b9d      	ldr	r3, [pc, #628]	@ (800fbdc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800f966:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800f96a:	f003 0307 	and.w	r3, r3, #7
 800f96e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800f970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f972:	2b00      	cmp	r3, #0
 800f974:	d104      	bne.n	800f980 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800f976:	f7fc ffd7 	bl	800c928 <HAL_RCC_GetPCLK2Freq>
 800f97a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800f97c:	f001 bf13 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 800f980:	4b96      	ldr	r3, [pc, #600]	@ (800fbdc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f988:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f98c:	d10a      	bne.n	800f9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 800f98e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f990:	2b01      	cmp	r3, #1
 800f992:	d107      	bne.n	800f9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f994:	f107 0314 	add.w	r3, r7, #20
 800f998:	4618      	mov	r0, r3
 800f99a:	f7ff f8e5 	bl	800eb68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800f99e:	69bb      	ldr	r3, [r7, #24]
 800f9a0:	637b      	str	r3, [r7, #52]	@ 0x34
 800f9a2:	e043      	b.n	800fa2c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 800f9a4:	4b8d      	ldr	r3, [pc, #564]	@ (800fbdc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f9ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f9b0:	d10a      	bne.n	800f9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 800f9b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9b4:	2b02      	cmp	r3, #2
 800f9b6:	d107      	bne.n	800f9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f9b8:	f107 0308 	add.w	r3, r7, #8
 800f9bc:	4618      	mov	r0, r3
 800f9be:	f7ff fa3d 	bl	800ee3c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	637b      	str	r3, [r7, #52]	@ 0x34
 800f9c6:	e031      	b.n	800fa2c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800f9c8:	4b84      	ldr	r3, [pc, #528]	@ (800fbdc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	f003 0302 	and.w	r3, r3, #2
 800f9d0:	2b02      	cmp	r3, #2
 800f9d2:	d10c      	bne.n	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800f9d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9d6:	2b03      	cmp	r3, #3
 800f9d8:	d109      	bne.n	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800f9da:	4b80      	ldr	r3, [pc, #512]	@ (800fbdc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	08db      	lsrs	r3, r3, #3
 800f9e0:	f003 0303 	and.w	r3, r3, #3
 800f9e4:	4a7e      	ldr	r2, [pc, #504]	@ (800fbe0 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800f9e6:	fa22 f303 	lsr.w	r3, r2, r3
 800f9ea:	637b      	str	r3, [r7, #52]	@ 0x34
 800f9ec:	e01e      	b.n	800fa2c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 800f9ee:	4b7b      	ldr	r3, [pc, #492]	@ (800fbdc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800f9f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f9fa:	d105      	bne.n	800fa08 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 800f9fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9fe:	2b04      	cmp	r3, #4
 800fa00:	d102      	bne.n	800fa08 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 800fa02:	4b78      	ldr	r3, [pc, #480]	@ (800fbe4 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800fa04:	637b      	str	r3, [r7, #52]	@ 0x34
 800fa06:	e011      	b.n	800fa2c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800fa08:	4b74      	ldr	r3, [pc, #464]	@ (800fbdc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800fa0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800fa0e:	f003 0302 	and.w	r3, r3, #2
 800fa12:	2b02      	cmp	r3, #2
 800fa14:	d106      	bne.n	800fa24 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 800fa16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa18:	2b05      	cmp	r3, #5
 800fa1a:	d103      	bne.n	800fa24 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 800fa1c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fa20:	637b      	str	r3, [r7, #52]	@ 0x34
 800fa22:	e003      	b.n	800fa2c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 800fa24:	2300      	movs	r3, #0
 800fa26:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800fa28:	f001 bebd 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800fa2c:	f001 bebb 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800fa30:	4b6a      	ldr	r3, [pc, #424]	@ (800fbdc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800fa32:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800fa36:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800fa3a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800fa3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d104      	bne.n	800fa4c <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800fa42:	f7fc ff5b 	bl	800c8fc <HAL_RCC_GetPCLK1Freq>
 800fa46:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 800fa48:	f001 bead 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 800fa4c:	4b63      	ldr	r3, [pc, #396]	@ (800fbdc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fa54:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800fa58:	d10a      	bne.n	800fa70 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 800fa5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa5c:	2b08      	cmp	r3, #8
 800fa5e:	d107      	bne.n	800fa70 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fa60:	f107 0314 	add.w	r3, r7, #20
 800fa64:	4618      	mov	r0, r3
 800fa66:	f7ff f87f 	bl	800eb68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800fa6a:	69bb      	ldr	r3, [r7, #24]
 800fa6c:	637b      	str	r3, [r7, #52]	@ 0x34
 800fa6e:	e03d      	b.n	800faec <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 800fa70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa72:	2b10      	cmp	r3, #16
 800fa74:	d108      	bne.n	800fa88 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fa76:	f107 0308 	add.w	r3, r7, #8
 800fa7a:	4618      	mov	r0, r3
 800fa7c:	f7ff f9de 	bl	800ee3c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800fa84:	f001 be8f 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800fa88:	4b54      	ldr	r3, [pc, #336]	@ (800fbdc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	f003 0302 	and.w	r3, r3, #2
 800fa90:	2b02      	cmp	r3, #2
 800fa92:	d10c      	bne.n	800faae <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 800fa94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa96:	2b18      	cmp	r3, #24
 800fa98:	d109      	bne.n	800faae <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800fa9a:	4b50      	ldr	r3, [pc, #320]	@ (800fbdc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	08db      	lsrs	r3, r3, #3
 800faa0:	f003 0303 	and.w	r3, r3, #3
 800faa4:	4a4e      	ldr	r2, [pc, #312]	@ (800fbe0 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800faa6:	fa22 f303 	lsr.w	r3, r2, r3
 800faaa:	637b      	str	r3, [r7, #52]	@ 0x34
 800faac:	e01e      	b.n	800faec <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 800faae:	4b4b      	ldr	r3, [pc, #300]	@ (800fbdc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800fab6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800faba:	d105      	bne.n	800fac8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800fabc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fabe:	2b20      	cmp	r3, #32
 800fac0:	d102      	bne.n	800fac8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 800fac2:	4b48      	ldr	r3, [pc, #288]	@ (800fbe4 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800fac4:	637b      	str	r3, [r7, #52]	@ 0x34
 800fac6:	e011      	b.n	800faec <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800fac8:	4b44      	ldr	r3, [pc, #272]	@ (800fbdc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800faca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800face:	f003 0302 	and.w	r3, r3, #2
 800fad2:	2b02      	cmp	r3, #2
 800fad4:	d106      	bne.n	800fae4 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 800fad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fad8:	2b28      	cmp	r3, #40	@ 0x28
 800fada:	d103      	bne.n	800fae4 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 800fadc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fae0:	637b      	str	r3, [r7, #52]	@ 0x34
 800fae2:	e003      	b.n	800faec <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 800fae4:	2300      	movs	r3, #0
 800fae6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800fae8:	f001 be5d 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800faec:	f001 be5b 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800faf0:	4b3a      	ldr	r3, [pc, #232]	@ (800fbdc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800faf2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800faf6:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800fafa:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800fafc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d104      	bne.n	800fb0c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800fb02:	f7fc fefb 	bl	800c8fc <HAL_RCC_GetPCLK1Freq>
 800fb06:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 800fb08:	f001 be4d 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 800fb0c:	4b33      	ldr	r3, [pc, #204]	@ (800fbdc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fb14:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800fb18:	d10a      	bne.n	800fb30 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 800fb1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb1c:	2b40      	cmp	r3, #64	@ 0x40
 800fb1e:	d107      	bne.n	800fb30 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fb20:	f107 0314 	add.w	r3, r7, #20
 800fb24:	4618      	mov	r0, r3
 800fb26:	f7ff f81f 	bl	800eb68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800fb2a:	69bb      	ldr	r3, [r7, #24]
 800fb2c:	637b      	str	r3, [r7, #52]	@ 0x34
 800fb2e:	e045      	b.n	800fbbc <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 800fb30:	4b2a      	ldr	r3, [pc, #168]	@ (800fbdc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800fb38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fb3c:	d10a      	bne.n	800fb54 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 800fb3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb40:	2b80      	cmp	r3, #128	@ 0x80
 800fb42:	d107      	bne.n	800fb54 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fb44:	f107 0308 	add.w	r3, r7, #8
 800fb48:	4618      	mov	r0, r3
 800fb4a:	f7ff f977 	bl	800ee3c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	637b      	str	r3, [r7, #52]	@ 0x34
 800fb52:	e033      	b.n	800fbbc <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800fb54:	4b21      	ldr	r3, [pc, #132]	@ (800fbdc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	f003 0302 	and.w	r3, r3, #2
 800fb5c:	2b02      	cmp	r3, #2
 800fb5e:	d10c      	bne.n	800fb7a <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 800fb60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb62:	2bc0      	cmp	r3, #192	@ 0xc0
 800fb64:	d109      	bne.n	800fb7a <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800fb66:	4b1d      	ldr	r3, [pc, #116]	@ (800fbdc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	08db      	lsrs	r3, r3, #3
 800fb6c:	f003 0303 	and.w	r3, r3, #3
 800fb70:	4a1b      	ldr	r2, [pc, #108]	@ (800fbe0 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800fb72:	fa22 f303 	lsr.w	r3, r2, r3
 800fb76:	637b      	str	r3, [r7, #52]	@ 0x34
 800fb78:	e020      	b.n	800fbbc <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 800fb7a:	4b18      	ldr	r3, [pc, #96]	@ (800fbdc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800fb82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fb86:	d106      	bne.n	800fb96 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 800fb88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fb8e:	d102      	bne.n	800fb96 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 800fb90:	4b14      	ldr	r3, [pc, #80]	@ (800fbe4 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800fb92:	637b      	str	r3, [r7, #52]	@ 0x34
 800fb94:	e012      	b.n	800fbbc <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800fb96:	4b11      	ldr	r3, [pc, #68]	@ (800fbdc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800fb98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800fb9c:	f003 0302 	and.w	r3, r3, #2
 800fba0:	2b02      	cmp	r3, #2
 800fba2:	d107      	bne.n	800fbb4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 800fba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fba6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800fbaa:	d103      	bne.n	800fbb4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 800fbac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fbb0:	637b      	str	r3, [r7, #52]	@ 0x34
 800fbb2:	e003      	b.n	800fbbc <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 800fbb4:	2300      	movs	r3, #0
 800fbb6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800fbb8:	f001 bdf5 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800fbbc:	f001 bdf3 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800fbc0:	4b06      	ldr	r3, [pc, #24]	@ (800fbdc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800fbc2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800fbc6:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 800fbca:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800fbcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d10a      	bne.n	800fbe8 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800fbd2:	f7fc fe93 	bl	800c8fc <HAL_RCC_GetPCLK1Freq>
 800fbd6:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 800fbd8:	f001 bde5 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800fbdc:	44020c00 	.word	0x44020c00
 800fbe0:	03d09000 	.word	0x03d09000
 800fbe4:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 800fbe8:	4ba0      	ldr	r3, [pc, #640]	@ (800fe6c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fbf0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800fbf4:	d10b      	bne.n	800fc0e <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 800fbf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbf8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fbfc:	d107      	bne.n	800fc0e <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fbfe:	f107 0314 	add.w	r3, r7, #20
 800fc02:	4618      	mov	r0, r3
 800fc04:	f7fe ffb0 	bl	800eb68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800fc08:	69bb      	ldr	r3, [r7, #24]
 800fc0a:	637b      	str	r3, [r7, #52]	@ 0x34
 800fc0c:	e047      	b.n	800fc9e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 800fc0e:	4b97      	ldr	r3, [pc, #604]	@ (800fe6c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800fc16:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fc1a:	d10b      	bne.n	800fc34 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 800fc1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800fc22:	d107      	bne.n	800fc34 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fc24:	f107 0308 	add.w	r3, r7, #8
 800fc28:	4618      	mov	r0, r3
 800fc2a:	f7ff f907 	bl	800ee3c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	637b      	str	r3, [r7, #52]	@ 0x34
 800fc32:	e034      	b.n	800fc9e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800fc34:	4b8d      	ldr	r3, [pc, #564]	@ (800fe6c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	f003 0302 	and.w	r3, r3, #2
 800fc3c:	2b02      	cmp	r3, #2
 800fc3e:	d10d      	bne.n	800fc5c <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 800fc40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc42:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800fc46:	d109      	bne.n	800fc5c <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800fc48:	4b88      	ldr	r3, [pc, #544]	@ (800fe6c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	08db      	lsrs	r3, r3, #3
 800fc4e:	f003 0303 	and.w	r3, r3, #3
 800fc52:	4a87      	ldr	r2, [pc, #540]	@ (800fe70 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800fc54:	fa22 f303 	lsr.w	r3, r2, r3
 800fc58:	637b      	str	r3, [r7, #52]	@ 0x34
 800fc5a:	e020      	b.n	800fc9e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 800fc5c:	4b83      	ldr	r3, [pc, #524]	@ (800fe6c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800fc64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fc68:	d106      	bne.n	800fc78 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 800fc6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800fc70:	d102      	bne.n	800fc78 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 800fc72:	4b80      	ldr	r3, [pc, #512]	@ (800fe74 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800fc74:	637b      	str	r3, [r7, #52]	@ 0x34
 800fc76:	e012      	b.n	800fc9e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800fc78:	4b7c      	ldr	r3, [pc, #496]	@ (800fe6c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800fc7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800fc7e:	f003 0302 	and.w	r3, r3, #2
 800fc82:	2b02      	cmp	r3, #2
 800fc84:	d107      	bne.n	800fc96 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 800fc86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc88:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800fc8c:	d103      	bne.n	800fc96 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 800fc8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fc92:	637b      	str	r3, [r7, #52]	@ 0x34
 800fc94:	e003      	b.n	800fc9e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 800fc96:	2300      	movs	r3, #0
 800fc98:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800fc9a:	f001 bd84 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800fc9e:	f001 bd82 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800fca2:	4b72      	ldr	r3, [pc, #456]	@ (800fe6c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800fca4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800fca8:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800fcac:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800fcae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d104      	bne.n	800fcbe <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800fcb4:	f7fc fe22 	bl	800c8fc <HAL_RCC_GetPCLK1Freq>
 800fcb8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 800fcba:	f001 bd74 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 800fcbe:	4b6b      	ldr	r3, [pc, #428]	@ (800fe6c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fcc6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800fcca:	d10b      	bne.n	800fce4 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 800fccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fcce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fcd2:	d107      	bne.n	800fce4 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fcd4:	f107 0314 	add.w	r3, r7, #20
 800fcd8:	4618      	mov	r0, r3
 800fcda:	f7fe ff45 	bl	800eb68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800fcde:	69bb      	ldr	r3, [r7, #24]
 800fce0:	637b      	str	r3, [r7, #52]	@ 0x34
 800fce2:	e047      	b.n	800fd74 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 800fce4:	4b61      	ldr	r3, [pc, #388]	@ (800fe6c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800fcec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fcf0:	d10b      	bne.n	800fd0a <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 800fcf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fcf4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fcf8:	d107      	bne.n	800fd0a <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fcfa:	f107 0308 	add.w	r3, r7, #8
 800fcfe:	4618      	mov	r0, r3
 800fd00:	f7ff f89c 	bl	800ee3c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	637b      	str	r3, [r7, #52]	@ 0x34
 800fd08:	e034      	b.n	800fd74 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800fd0a:	4b58      	ldr	r3, [pc, #352]	@ (800fe6c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	f003 0302 	and.w	r3, r3, #2
 800fd12:	2b02      	cmp	r3, #2
 800fd14:	d10d      	bne.n	800fd32 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 800fd16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd18:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800fd1c:	d109      	bne.n	800fd32 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800fd1e:	4b53      	ldr	r3, [pc, #332]	@ (800fe6c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	08db      	lsrs	r3, r3, #3
 800fd24:	f003 0303 	and.w	r3, r3, #3
 800fd28:	4a51      	ldr	r2, [pc, #324]	@ (800fe70 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800fd2a:	fa22 f303 	lsr.w	r3, r2, r3
 800fd2e:	637b      	str	r3, [r7, #52]	@ 0x34
 800fd30:	e020      	b.n	800fd74 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 800fd32:	4b4e      	ldr	r3, [pc, #312]	@ (800fe6c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800fd3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fd3e:	d106      	bne.n	800fd4e <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800fd40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd42:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800fd46:	d102      	bne.n	800fd4e <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 800fd48:	4b4a      	ldr	r3, [pc, #296]	@ (800fe74 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800fd4a:	637b      	str	r3, [r7, #52]	@ 0x34
 800fd4c:	e012      	b.n	800fd74 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800fd4e:	4b47      	ldr	r3, [pc, #284]	@ (800fe6c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800fd50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800fd54:	f003 0302 	and.w	r3, r3, #2
 800fd58:	2b02      	cmp	r3, #2
 800fd5a:	d107      	bne.n	800fd6c <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800fd5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd5e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800fd62:	d103      	bne.n	800fd6c <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 800fd64:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fd68:	637b      	str	r3, [r7, #52]	@ 0x34
 800fd6a:	e003      	b.n	800fd74 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 800fd6c:	2300      	movs	r3, #0
 800fd6e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800fd70:	f001 bd19 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800fd74:	f001 bd17 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800fd78:	4b3c      	ldr	r3, [pc, #240]	@ (800fe6c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800fd7a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800fd7e:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 800fd82:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800fd84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d104      	bne.n	800fd94 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800fd8a:	f7fc fdb7 	bl	800c8fc <HAL_RCC_GetPCLK1Freq>
 800fd8e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 800fd90:	f001 bd09 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 800fd94:	4b35      	ldr	r3, [pc, #212]	@ (800fe6c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fd9c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800fda0:	d10b      	bne.n	800fdba <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 800fda2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fda4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800fda8:	d107      	bne.n	800fdba <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fdaa:	f107 0314 	add.w	r3, r7, #20
 800fdae:	4618      	mov	r0, r3
 800fdb0:	f7fe feda 	bl	800eb68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800fdb4:	69bb      	ldr	r3, [r7, #24]
 800fdb6:	637b      	str	r3, [r7, #52]	@ 0x34
 800fdb8:	e047      	b.n	800fe4a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 800fdba:	4b2c      	ldr	r3, [pc, #176]	@ (800fe6c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800fdc2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fdc6:	d10b      	bne.n	800fde0 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 800fdc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fdca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fdce:	d107      	bne.n	800fde0 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fdd0:	f107 0308 	add.w	r3, r7, #8
 800fdd4:	4618      	mov	r0, r3
 800fdd6:	f7ff f831 	bl	800ee3c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800fdda:	68fb      	ldr	r3, [r7, #12]
 800fddc:	637b      	str	r3, [r7, #52]	@ 0x34
 800fdde:	e034      	b.n	800fe4a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800fde0:	4b22      	ldr	r3, [pc, #136]	@ (800fe6c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	f003 0302 	and.w	r3, r3, #2
 800fde8:	2b02      	cmp	r3, #2
 800fdea:	d10d      	bne.n	800fe08 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 800fdec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fdee:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800fdf2:	d109      	bne.n	800fe08 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800fdf4:	4b1d      	ldr	r3, [pc, #116]	@ (800fe6c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	08db      	lsrs	r3, r3, #3
 800fdfa:	f003 0303 	and.w	r3, r3, #3
 800fdfe:	4a1c      	ldr	r2, [pc, #112]	@ (800fe70 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800fe00:	fa22 f303 	lsr.w	r3, r2, r3
 800fe04:	637b      	str	r3, [r7, #52]	@ 0x34
 800fe06:	e020      	b.n	800fe4a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 800fe08:	4b18      	ldr	r3, [pc, #96]	@ (800fe6c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800fe10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fe14:	d106      	bne.n	800fe24 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 800fe16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800fe1c:	d102      	bne.n	800fe24 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 800fe1e:	4b15      	ldr	r3, [pc, #84]	@ (800fe74 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800fe20:	637b      	str	r3, [r7, #52]	@ 0x34
 800fe22:	e012      	b.n	800fe4a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800fe24:	4b11      	ldr	r3, [pc, #68]	@ (800fe6c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800fe26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800fe2a:	f003 0302 	and.w	r3, r3, #2
 800fe2e:	2b02      	cmp	r3, #2
 800fe30:	d107      	bne.n	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 800fe32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe34:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800fe38:	d103      	bne.n	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 800fe3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fe3e:	637b      	str	r3, [r7, #52]	@ 0x34
 800fe40:	e003      	b.n	800fe4a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 800fe42:	2300      	movs	r3, #0
 800fe44:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800fe46:	f001 bcae 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800fe4a:	f001 bcac 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 800fe4e:	4b07      	ldr	r3, [pc, #28]	@ (800fe6c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800fe50:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800fe54:	f403 13e0 	and.w	r3, r3, #1835008	@ 0x1c0000
 800fe58:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 800fe5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d10b      	bne.n	800fe78 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800fe60:	f7fc fd4c 	bl	800c8fc <HAL_RCC_GetPCLK1Freq>
 800fe64:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 800fe66:	f001 bc9e 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800fe6a:	bf00      	nop
 800fe6c:	44020c00 	.word	0x44020c00
 800fe70:	03d09000 	.word	0x03d09000
 800fe74:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 800fe78:	4ba0      	ldr	r3, [pc, #640]	@ (80100fc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fe80:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800fe84:	d10b      	bne.n	800fe9e <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 800fe86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe88:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800fe8c:	d107      	bne.n	800fe9e <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fe8e:	f107 0314 	add.w	r3, r7, #20
 800fe92:	4618      	mov	r0, r3
 800fe94:	f7fe fe68 	bl	800eb68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800fe98:	69bb      	ldr	r3, [r7, #24]
 800fe9a:	637b      	str	r3, [r7, #52]	@ 0x34
 800fe9c:	e047      	b.n	800ff2e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 800fe9e:	4b97      	ldr	r3, [pc, #604]	@ (80100fc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800fea6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800feaa:	d10b      	bne.n	800fec4 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 800feac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800feae:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800feb2:	d107      	bne.n	800fec4 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800feb4:	f107 0308 	add.w	r3, r7, #8
 800feb8:	4618      	mov	r0, r3
 800feba:	f7fe ffbf 	bl	800ee3c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	637b      	str	r3, [r7, #52]	@ 0x34
 800fec2:	e034      	b.n	800ff2e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 800fec4:	4b8d      	ldr	r3, [pc, #564]	@ (80100fc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	f003 0302 	and.w	r3, r3, #2
 800fecc:	2b02      	cmp	r3, #2
 800fece:	d10d      	bne.n	800feec <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 800fed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fed2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800fed6:	d109      	bne.n	800feec <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800fed8:	4b88      	ldr	r3, [pc, #544]	@ (80100fc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	08db      	lsrs	r3, r3, #3
 800fede:	f003 0303 	and.w	r3, r3, #3
 800fee2:	4a87      	ldr	r2, [pc, #540]	@ (8010100 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800fee4:	fa22 f303 	lsr.w	r3, r2, r3
 800fee8:	637b      	str	r3, [r7, #52]	@ 0x34
 800feea:	e020      	b.n	800ff2e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 800feec:	4b83      	ldr	r3, [pc, #524]	@ (80100fc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800feee:	681b      	ldr	r3, [r3, #0]
 800fef0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800fef4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fef8:	d106      	bne.n	800ff08 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800fefa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fefc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ff00:	d102      	bne.n	800ff08 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 800ff02:	4b80      	ldr	r3, [pc, #512]	@ (8010104 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800ff04:	637b      	str	r3, [r7, #52]	@ 0x34
 800ff06:	e012      	b.n	800ff2e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 800ff08:	4b7c      	ldr	r3, [pc, #496]	@ (80100fc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800ff0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ff0e:	f003 0302 	and.w	r3, r3, #2
 800ff12:	2b02      	cmp	r3, #2
 800ff14:	d107      	bne.n	800ff26 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 800ff16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff18:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800ff1c:	d103      	bne.n	800ff26 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 800ff1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ff22:	637b      	str	r3, [r7, #52]	@ 0x34
 800ff24:	e003      	b.n	800ff2e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 800ff26:	2300      	movs	r3, #0
 800ff28:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ff2a:	f001 bc3c 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800ff2e:	f001 bc3a 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 800ff32:	4b72      	ldr	r3, [pc, #456]	@ (80100fc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800ff34:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800ff38:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800ff3c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 800ff3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	d104      	bne.n	800ff4e <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800ff44:	f7fc fcda 	bl	800c8fc <HAL_RCC_GetPCLK1Freq>
 800ff48:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 800ff4a:	f001 bc2c 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 800ff4e:	4b6b      	ldr	r3, [pc, #428]	@ (80100fc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ff56:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ff5a:	d10b      	bne.n	800ff74 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800ff5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff5e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ff62:	d107      	bne.n	800ff74 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ff64:	f107 0314 	add.w	r3, r7, #20
 800ff68:	4618      	mov	r0, r3
 800ff6a:	f7fe fdfd 	bl	800eb68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ff6e:	69bb      	ldr	r3, [r7, #24]
 800ff70:	637b      	str	r3, [r7, #52]	@ 0x34
 800ff72:	e047      	b.n	8010004 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 800ff74:	4b61      	ldr	r3, [pc, #388]	@ (80100fc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ff7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ff80:	d10b      	bne.n	800ff9a <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 800ff82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff84:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ff88:	d107      	bne.n	800ff9a <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ff8a:	f107 0308 	add.w	r3, r7, #8
 800ff8e:	4618      	mov	r0, r3
 800ff90:	f7fe ff54 	bl	800ee3c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	637b      	str	r3, [r7, #52]	@ 0x34
 800ff98:	e034      	b.n	8010004 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 800ff9a:	4b58      	ldr	r3, [pc, #352]	@ (80100fc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	f003 0302 	and.w	r3, r3, #2
 800ffa2:	2b02      	cmp	r3, #2
 800ffa4:	d10d      	bne.n	800ffc2 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 800ffa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ffa8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800ffac:	d109      	bne.n	800ffc2 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ffae:	4b53      	ldr	r3, [pc, #332]	@ (80100fc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	08db      	lsrs	r3, r3, #3
 800ffb4:	f003 0303 	and.w	r3, r3, #3
 800ffb8:	4a51      	ldr	r2, [pc, #324]	@ (8010100 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800ffba:	fa22 f303 	lsr.w	r3, r2, r3
 800ffbe:	637b      	str	r3, [r7, #52]	@ 0x34
 800ffc0:	e020      	b.n	8010004 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 800ffc2:	4b4e      	ldr	r3, [pc, #312]	@ (80100fc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ffca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ffce:	d106      	bne.n	800ffde <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 800ffd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ffd2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ffd6:	d102      	bne.n	800ffde <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 800ffd8:	4b4a      	ldr	r3, [pc, #296]	@ (8010104 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800ffda:	637b      	str	r3, [r7, #52]	@ 0x34
 800ffdc:	e012      	b.n	8010004 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 800ffde:	4b47      	ldr	r3, [pc, #284]	@ (80100fc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800ffe0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ffe4:	f003 0302 	and.w	r3, r3, #2
 800ffe8:	2b02      	cmp	r3, #2
 800ffea:	d107      	bne.n	800fffc <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 800ffec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ffee:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800fff2:	d103      	bne.n	800fffc <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 800fff4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fff8:	637b      	str	r3, [r7, #52]	@ 0x34
 800fffa:	e003      	b.n	8010004 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 800fffc:	2300      	movs	r3, #0
 800fffe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8010000:	f001 bbd1 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8010004:	f001 bbcf 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 8010008:	4b3c      	ldr	r3, [pc, #240]	@ (80100fc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 801000a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801000e:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8010012:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 8010014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010016:	2b00      	cmp	r3, #0
 8010018:	d104      	bne.n	8010024 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 801001a:	f7fc fc6f 	bl	800c8fc <HAL_RCC_GetPCLK1Freq>
 801001e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 8010020:	f001 bbc1 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 8010024:	4b35      	ldr	r3, [pc, #212]	@ (80100fc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801002c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8010030:	d10b      	bne.n	801004a <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 8010032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010034:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010038:	d107      	bne.n	801004a <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801003a:	f107 0314 	add.w	r3, r7, #20
 801003e:	4618      	mov	r0, r3
 8010040:	f7fe fd92 	bl	800eb68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8010044:	69bb      	ldr	r3, [r7, #24]
 8010046:	637b      	str	r3, [r7, #52]	@ 0x34
 8010048:	e047      	b.n	80100da <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 801004a:	4b2c      	ldr	r3, [pc, #176]	@ (80100fc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010052:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010056:	d10b      	bne.n	8010070 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 8010058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801005a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801005e:	d107      	bne.n	8010070 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010060:	f107 0308 	add.w	r3, r7, #8
 8010064:	4618      	mov	r0, r3
 8010066:	f7fe fee9 	bl	800ee3c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	637b      	str	r3, [r7, #52]	@ 0x34
 801006e:	e034      	b.n	80100da <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 8010070:	4b22      	ldr	r3, [pc, #136]	@ (80100fc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	f003 0302 	and.w	r3, r3, #2
 8010078:	2b02      	cmp	r3, #2
 801007a:	d10d      	bne.n	8010098 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 801007c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801007e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8010082:	d109      	bne.n	8010098 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8010084:	4b1d      	ldr	r3, [pc, #116]	@ (80100fc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	08db      	lsrs	r3, r3, #3
 801008a:	f003 0303 	and.w	r3, r3, #3
 801008e:	4a1c      	ldr	r2, [pc, #112]	@ (8010100 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8010090:	fa22 f303 	lsr.w	r3, r2, r3
 8010094:	637b      	str	r3, [r7, #52]	@ 0x34
 8010096:	e020      	b.n	80100da <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 8010098:	4b18      	ldr	r3, [pc, #96]	@ (80100fc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80100a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80100a4:	d106      	bne.n	80100b4 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 80100a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80100a8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80100ac:	d102      	bne.n	80100b4 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 80100ae:	4b15      	ldr	r3, [pc, #84]	@ (8010104 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 80100b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80100b2:	e012      	b.n	80100da <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 80100b4:	4b11      	ldr	r3, [pc, #68]	@ (80100fc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80100b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80100ba:	f003 0302 	and.w	r3, r3, #2
 80100be:	2b02      	cmp	r3, #2
 80100c0:	d107      	bne.n	80100d2 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 80100c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80100c4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80100c8:	d103      	bne.n	80100d2 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 80100ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80100ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80100d0:	e003      	b.n	80100da <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 80100d2:	2300      	movs	r3, #0
 80100d4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80100d6:	f001 bb66 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80100da:	f001 bb64 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 80100de:	4b07      	ldr	r3, [pc, #28]	@ (80100fc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80100e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80100e4:	f003 5360 	and.w	r3, r3, #939524096	@ 0x38000000
 80100e8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 80100ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	d10b      	bne.n	8010108 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80100f0:	f7fc fc04 	bl	800c8fc <HAL_RCC_GetPCLK1Freq>
 80100f4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 80100f6:	f001 bb56 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80100fa:	bf00      	nop
 80100fc:	44020c00 	.word	0x44020c00
 8010100:	03d09000 	.word	0x03d09000
 8010104:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 8010108:	4ba1      	ldr	r3, [pc, #644]	@ (8010390 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010110:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8010114:	d10b      	bne.n	801012e <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 8010116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010118:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801011c:	d107      	bne.n	801012e <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801011e:	f107 0314 	add.w	r3, r7, #20
 8010122:	4618      	mov	r0, r3
 8010124:	f7fe fd20 	bl	800eb68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8010128:	69bb      	ldr	r3, [r7, #24]
 801012a:	637b      	str	r3, [r7, #52]	@ 0x34
 801012c:	e047      	b.n	80101be <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 801012e:	4b98      	ldr	r3, [pc, #608]	@ (8010390 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8010130:	681b      	ldr	r3, [r3, #0]
 8010132:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010136:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801013a:	d10b      	bne.n	8010154 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 801013c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801013e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010142:	d107      	bne.n	8010154 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010144:	f107 0308 	add.w	r3, r7, #8
 8010148:	4618      	mov	r0, r3
 801014a:	f7fe fe77 	bl	800ee3c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	637b      	str	r3, [r7, #52]	@ 0x34
 8010152:	e034      	b.n	80101be <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 8010154:	4b8e      	ldr	r3, [pc, #568]	@ (8010390 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	f003 0302 	and.w	r3, r3, #2
 801015c:	2b02      	cmp	r3, #2
 801015e:	d10d      	bne.n	801017c <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 8010160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010162:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8010166:	d109      	bne.n	801017c <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8010168:	4b89      	ldr	r3, [pc, #548]	@ (8010390 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	08db      	lsrs	r3, r3, #3
 801016e:	f003 0303 	and.w	r3, r3, #3
 8010172:	4a88      	ldr	r2, [pc, #544]	@ (8010394 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8010174:	fa22 f303 	lsr.w	r3, r2, r3
 8010178:	637b      	str	r3, [r7, #52]	@ 0x34
 801017a:	e020      	b.n	80101be <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 801017c:	4b84      	ldr	r3, [pc, #528]	@ (8010390 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8010184:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010188:	d106      	bne.n	8010198 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 801018a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801018c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010190:	d102      	bne.n	8010198 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 8010192:	4b81      	ldr	r3, [pc, #516]	@ (8010398 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8010194:	637b      	str	r3, [r7, #52]	@ 0x34
 8010196:	e012      	b.n	80101be <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 8010198:	4b7d      	ldr	r3, [pc, #500]	@ (8010390 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 801019a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801019e:	f003 0302 	and.w	r3, r3, #2
 80101a2:	2b02      	cmp	r3, #2
 80101a4:	d107      	bne.n	80101b6 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 80101a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101a8:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 80101ac:	d103      	bne.n	80101b6 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 80101ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80101b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80101b4:	e003      	b.n	80101be <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 80101b6:	2300      	movs	r3, #0
 80101b8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80101ba:	f001 baf4 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80101be:	f001 baf2 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 80101c2:	4b73      	ldr	r3, [pc, #460]	@ (8010390 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80101c4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80101c8:	f003 0307 	and.w	r3, r3, #7
 80101cc:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 80101ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d104      	bne.n	80101de <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80101d4:	f7fc fb92 	bl	800c8fc <HAL_RCC_GetPCLK1Freq>
 80101d8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 80101da:	f001 bae4 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 80101de:	4b6c      	ldr	r3, [pc, #432]	@ (8010390 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80101e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80101ea:	d10a      	bne.n	8010202 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 80101ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101ee:	2b01      	cmp	r3, #1
 80101f0:	d107      	bne.n	8010202 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80101f2:	f107 0314 	add.w	r3, r7, #20
 80101f6:	4618      	mov	r0, r3
 80101f8:	f7fe fcb6 	bl	800eb68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80101fc:	69bb      	ldr	r3, [r7, #24]
 80101fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8010200:	e043      	b.n	801028a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 8010202:	4b63      	ldr	r3, [pc, #396]	@ (8010390 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801020a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801020e:	d10a      	bne.n	8010226 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 8010210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010212:	2b02      	cmp	r3, #2
 8010214:	d107      	bne.n	8010226 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010216:	f107 0308 	add.w	r3, r7, #8
 801021a:	4618      	mov	r0, r3
 801021c:	f7fe fe0e 	bl	800ee3c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8010220:	68fb      	ldr	r3, [r7, #12]
 8010222:	637b      	str	r3, [r7, #52]	@ 0x34
 8010224:	e031      	b.n	801028a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 8010226:	4b5a      	ldr	r3, [pc, #360]	@ (8010390 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	f003 0302 	and.w	r3, r3, #2
 801022e:	2b02      	cmp	r3, #2
 8010230:	d10c      	bne.n	801024c <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 8010232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010234:	2b03      	cmp	r3, #3
 8010236:	d109      	bne.n	801024c <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8010238:	4b55      	ldr	r3, [pc, #340]	@ (8010390 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	08db      	lsrs	r3, r3, #3
 801023e:	f003 0303 	and.w	r3, r3, #3
 8010242:	4a54      	ldr	r2, [pc, #336]	@ (8010394 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8010244:	fa22 f303 	lsr.w	r3, r2, r3
 8010248:	637b      	str	r3, [r7, #52]	@ 0x34
 801024a:	e01e      	b.n	801028a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 801024c:	4b50      	ldr	r3, [pc, #320]	@ (8010390 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8010254:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010258:	d105      	bne.n	8010266 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 801025a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801025c:	2b04      	cmp	r3, #4
 801025e:	d102      	bne.n	8010266 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 8010260:	4b4d      	ldr	r3, [pc, #308]	@ (8010398 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8010262:	637b      	str	r3, [r7, #52]	@ 0x34
 8010264:	e011      	b.n	801028a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 8010266:	4b4a      	ldr	r3, [pc, #296]	@ (8010390 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8010268:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801026c:	f003 0302 	and.w	r3, r3, #2
 8010270:	2b02      	cmp	r3, #2
 8010272:	d106      	bne.n	8010282 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 8010274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010276:	2b05      	cmp	r3, #5
 8010278:	d103      	bne.n	8010282 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 801027a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801027e:	637b      	str	r3, [r7, #52]	@ 0x34
 8010280:	e003      	b.n	801028a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 8010282:	2300      	movs	r3, #0
 8010284:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8010286:	f001 ba8e 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 801028a:	f001 ba8c 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 801028e:	4b40      	ldr	r3, [pc, #256]	@ (8010390 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8010290:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8010294:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8010298:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 801029a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801029c:	2b00      	cmp	r3, #0
 801029e:	d104      	bne.n	80102aa <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80102a0:	f7fc fb2c 	bl	800c8fc <HAL_RCC_GetPCLK1Freq>
 80102a4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 80102a6:	f001 ba7e 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 80102aa:	4b39      	ldr	r3, [pc, #228]	@ (8010390 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80102b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80102b6:	d10a      	bne.n	80102ce <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 80102b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80102ba:	2b10      	cmp	r3, #16
 80102bc:	d107      	bne.n	80102ce <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80102be:	f107 0314 	add.w	r3, r7, #20
 80102c2:	4618      	mov	r0, r3
 80102c4:	f7fe fc50 	bl	800eb68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80102c8:	69bb      	ldr	r3, [r7, #24]
 80102ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80102cc:	e043      	b.n	8010356 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 80102ce:	4b30      	ldr	r3, [pc, #192]	@ (8010390 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80102d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80102da:	d10a      	bne.n	80102f2 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 80102dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80102de:	2b20      	cmp	r3, #32
 80102e0:	d107      	bne.n	80102f2 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80102e2:	f107 0308 	add.w	r3, r7, #8
 80102e6:	4618      	mov	r0, r3
 80102e8:	f7fe fda8 	bl	800ee3c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80102f0:	e031      	b.n	8010356 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 80102f2:	4b27      	ldr	r3, [pc, #156]	@ (8010390 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80102f4:	681b      	ldr	r3, [r3, #0]
 80102f6:	f003 0302 	and.w	r3, r3, #2
 80102fa:	2b02      	cmp	r3, #2
 80102fc:	d10c      	bne.n	8010318 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 80102fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010300:	2b30      	cmp	r3, #48	@ 0x30
 8010302:	d109      	bne.n	8010318 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8010304:	4b22      	ldr	r3, [pc, #136]	@ (8010390 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8010306:	681b      	ldr	r3, [r3, #0]
 8010308:	08db      	lsrs	r3, r3, #3
 801030a:	f003 0303 	and.w	r3, r3, #3
 801030e:	4a21      	ldr	r2, [pc, #132]	@ (8010394 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8010310:	fa22 f303 	lsr.w	r3, r2, r3
 8010314:	637b      	str	r3, [r7, #52]	@ 0x34
 8010316:	e01e      	b.n	8010356 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 8010318:	4b1d      	ldr	r3, [pc, #116]	@ (8010390 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 801031a:	681b      	ldr	r3, [r3, #0]
 801031c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8010320:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010324:	d105      	bne.n	8010332 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 8010326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010328:	2b40      	cmp	r3, #64	@ 0x40
 801032a:	d102      	bne.n	8010332 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 801032c:	4b1a      	ldr	r3, [pc, #104]	@ (8010398 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 801032e:	637b      	str	r3, [r7, #52]	@ 0x34
 8010330:	e011      	b.n	8010356 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 8010332:	4b17      	ldr	r3, [pc, #92]	@ (8010390 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8010334:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8010338:	f003 0302 	and.w	r3, r3, #2
 801033c:	2b02      	cmp	r3, #2
 801033e:	d106      	bne.n	801034e <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 8010340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010342:	2b50      	cmp	r3, #80	@ 0x50
 8010344:	d103      	bne.n	801034e <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 8010346:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801034a:	637b      	str	r3, [r7, #52]	@ 0x34
 801034c:	e003      	b.n	8010356 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 801034e:	2300      	movs	r3, #0
 8010350:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8010352:	f001 ba28 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8010356:	f001 ba26 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 801035a:	4b0d      	ldr	r3, [pc, #52]	@ (8010390 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 801035c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010360:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8010364:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8010366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010368:	2b00      	cmp	r3, #0
 801036a:	d104      	bne.n	8010376 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 801036c:	f7fc faf2 	bl	800c954 <HAL_RCC_GetPCLK3Freq>
 8010370:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8010372:	f001 ba18 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8010376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010378:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801037c:	d10e      	bne.n	801039c <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801037e:	f107 0314 	add.w	r3, r7, #20
 8010382:	4618      	mov	r0, r3
 8010384:	f7fe fbf0 	bl	800eb68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8010388:	69bb      	ldr	r3, [r7, #24]
 801038a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 801038c:	f001 ba0b 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8010390:	44020c00 	.word	0x44020c00
 8010394:	03d09000 	.word	0x03d09000
 8010398:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 801039c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801039e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80103a2:	d108      	bne.n	80103b6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80103a4:	f107 0308 	add.w	r3, r7, #8
 80103a8:	4618      	mov	r0, r3
 80103aa:	f7fe fd47 	bl	800ee3c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80103b2:	f001 b9f8 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80103b6:	4ba4      	ldr	r3, [pc, #656]	@ (8010648 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	f003 0302 	and.w	r3, r3, #2
 80103be:	2b02      	cmp	r3, #2
 80103c0:	d10d      	bne.n	80103de <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 80103c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103c4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80103c8:	d109      	bne.n	80103de <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80103ca:	4b9f      	ldr	r3, [pc, #636]	@ (8010648 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	08db      	lsrs	r3, r3, #3
 80103d0:	f003 0303 	and.w	r3, r3, #3
 80103d4:	4a9d      	ldr	r2, [pc, #628]	@ (801064c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 80103d6:	fa22 f303 	lsr.w	r3, r2, r3
 80103da:	637b      	str	r3, [r7, #52]	@ 0x34
 80103dc:	e020      	b.n	8010420 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 80103de:	4b9a      	ldr	r3, [pc, #616]	@ (8010648 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80103e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80103ea:	d106      	bne.n	80103fa <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 80103ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103ee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80103f2:	d102      	bne.n	80103fa <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 80103f4:	4b96      	ldr	r3, [pc, #600]	@ (8010650 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 80103f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80103f8:	e012      	b.n	8010420 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80103fa:	4b93      	ldr	r3, [pc, #588]	@ (8010648 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80103fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8010400:	f003 0302 	and.w	r3, r3, #2
 8010404:	2b02      	cmp	r3, #2
 8010406:	d107      	bne.n	8010418 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 8010408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801040a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 801040e:	d103      	bne.n	8010418 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 8010410:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010414:	637b      	str	r3, [r7, #52]	@ 0x34
 8010416:	e003      	b.n	8010420 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 8010418:	2300      	movs	r3, #0
 801041a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 801041c:	f001 b9c3 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8010420:	f001 b9c1 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8010424:	4b88      	ldr	r3, [pc, #544]	@ (8010648 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8010426:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801042a:	f003 0307 	and.w	r3, r3, #7
 801042e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8010430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010432:	2b00      	cmp	r3, #0
 8010434:	d104      	bne.n	8010440 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8010436:	f7fc fa45 	bl	800c8c4 <HAL_RCC_GetHCLKFreq>
 801043a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 801043c:	f001 b9b3 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8010440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010442:	2b01      	cmp	r3, #1
 8010444:	d104      	bne.n	8010450 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 8010446:	f7fc f911 	bl	800c66c <HAL_RCC_GetSysClockFreq>
 801044a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 801044c:	f001 b9ab 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8010450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010452:	2b02      	cmp	r3, #2
 8010454:	d108      	bne.n	8010468 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010456:	f107 0314 	add.w	r3, r7, #20
 801045a:	4618      	mov	r0, r3
 801045c:	f7fe fb84 	bl	800eb68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8010460:	69fb      	ldr	r3, [r7, #28]
 8010462:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8010464:	f001 b99f 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8010468:	4b77      	ldr	r3, [pc, #476]	@ (8010648 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010470:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010474:	d105      	bne.n	8010482 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 8010476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010478:	2b03      	cmp	r3, #3
 801047a:	d102      	bne.n	8010482 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 801047c:	4b75      	ldr	r3, [pc, #468]	@ (8010654 <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 801047e:	637b      	str	r3, [r7, #52]	@ 0x34
 8010480:	e023      	b.n	80104ca <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8010482:	4b71      	ldr	r3, [pc, #452]	@ (8010648 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	f003 0302 	and.w	r3, r3, #2
 801048a:	2b02      	cmp	r3, #2
 801048c:	d10c      	bne.n	80104a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 801048e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010490:	2b04      	cmp	r3, #4
 8010492:	d109      	bne.n	80104a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8010494:	4b6c      	ldr	r3, [pc, #432]	@ (8010648 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	08db      	lsrs	r3, r3, #3
 801049a:	f003 0303 	and.w	r3, r3, #3
 801049e:	4a6b      	ldr	r2, [pc, #428]	@ (801064c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 80104a0:	fa22 f303 	lsr.w	r3, r2, r3
 80104a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80104a6:	e010      	b.n	80104ca <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 80104a8:	4b67      	ldr	r3, [pc, #412]	@ (8010648 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80104aa:	681b      	ldr	r3, [r3, #0]
 80104ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80104b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80104b4:	d105      	bne.n	80104c2 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 80104b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80104b8:	2b05      	cmp	r3, #5
 80104ba:	d102      	bne.n	80104c2 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 80104bc:	4b64      	ldr	r3, [pc, #400]	@ (8010650 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 80104be:	637b      	str	r3, [r7, #52]	@ 0x34
 80104c0:	e003      	b.n	80104ca <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 80104c2:	2300      	movs	r3, #0
 80104c4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80104c6:	f001 b96e 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80104ca:	f001 b96c 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 80104ce:	4b5e      	ldr	r3, [pc, #376]	@ (8010648 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80104d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80104d4:	f003 0308 	and.w	r3, r3, #8
 80104d8:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 80104da:	4b5b      	ldr	r3, [pc, #364]	@ (8010648 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80104dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80104e0:	f003 0302 	and.w	r3, r3, #2
 80104e4:	2b02      	cmp	r3, #2
 80104e6:	d106      	bne.n	80104f6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 80104e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d103      	bne.n	80104f6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 80104ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80104f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80104f4:	e012      	b.n	801051c <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 80104f6:	4b54      	ldr	r3, [pc, #336]	@ (8010648 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80104f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80104fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010500:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8010504:	d106      	bne.n	8010514 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 8010506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010508:	2b08      	cmp	r3, #8
 801050a:	d103      	bne.n	8010514 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 801050c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8010510:	637b      	str	r3, [r7, #52]	@ 0x34
 8010512:	e003      	b.n	801051c <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8010514:	2300      	movs	r3, #0
 8010516:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8010518:	f001 b945 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 801051c:	f001 b943 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8010520:	4b49      	ldr	r3, [pc, #292]	@ (8010648 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8010522:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8010526:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 801052a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 801052c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801052e:	2b00      	cmp	r3, #0
 8010530:	d104      	bne.n	801053c <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8010532:	f7fc f9e3 	bl	800c8fc <HAL_RCC_GetPCLK1Freq>
 8010536:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8010538:	f001 b935 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 801053c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801053e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010542:	d108      	bne.n	8010556 <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010544:	f107 0308 	add.w	r3, r7, #8
 8010548:	4618      	mov	r0, r3
 801054a:	f7fe fc77 	bl	800ee3c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 801054e:	693b      	ldr	r3, [r7, #16]
 8010550:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8010552:	f001 b928 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8010556:	4b3c      	ldr	r3, [pc, #240]	@ (8010648 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	f003 0302 	and.w	r3, r3, #2
 801055e:	2b02      	cmp	r3, #2
 8010560:	d10d      	bne.n	801057e <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 8010562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010564:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010568:	d109      	bne.n	801057e <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 801056a:	4b37      	ldr	r3, [pc, #220]	@ (8010648 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 801056c:	681b      	ldr	r3, [r3, #0]
 801056e:	08db      	lsrs	r3, r3, #3
 8010570:	f003 0303 	and.w	r3, r3, #3
 8010574:	4a35      	ldr	r2, [pc, #212]	@ (801064c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8010576:	fa22 f303 	lsr.w	r3, r2, r3
 801057a:	637b      	str	r3, [r7, #52]	@ 0x34
 801057c:	e011      	b.n	80105a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 801057e:	4b32      	ldr	r3, [pc, #200]	@ (8010648 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8010580:	681b      	ldr	r3, [r3, #0]
 8010582:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8010586:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801058a:	d106      	bne.n	801059a <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 801058c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801058e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8010592:	d102      	bne.n	801059a <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 8010594:	4b2e      	ldr	r3, [pc, #184]	@ (8010650 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8010596:	637b      	str	r3, [r7, #52]	@ 0x34
 8010598:	e003      	b.n	80105a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 801059a:	2300      	movs	r3, #0
 801059c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 801059e:	f001 b902 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80105a2:	f001 b900 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80105a6:	4b28      	ldr	r3, [pc, #160]	@ (8010648 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80105a8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80105ac:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80105b0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80105b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d104      	bne.n	80105c2 <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80105b8:	f7fc f9a0 	bl	800c8fc <HAL_RCC_GetPCLK1Freq>
 80105bc:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 80105be:	f001 b8f2 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 80105c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80105c4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80105c8:	d108      	bne.n	80105dc <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80105ca:	f107 0308 	add.w	r3, r7, #8
 80105ce:	4618      	mov	r0, r3
 80105d0:	f7fe fc34 	bl	800ee3c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80105d4:	693b      	ldr	r3, [r7, #16]
 80105d6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80105d8:	f001 b8e5 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80105dc:	4b1a      	ldr	r3, [pc, #104]	@ (8010648 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	f003 0302 	and.w	r3, r3, #2
 80105e4:	2b02      	cmp	r3, #2
 80105e6:	d10d      	bne.n	8010604 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 80105e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80105ea:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80105ee:	d109      	bne.n	8010604 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80105f0:	4b15      	ldr	r3, [pc, #84]	@ (8010648 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	08db      	lsrs	r3, r3, #3
 80105f6:	f003 0303 	and.w	r3, r3, #3
 80105fa:	4a14      	ldr	r2, [pc, #80]	@ (801064c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 80105fc:	fa22 f303 	lsr.w	r3, r2, r3
 8010600:	637b      	str	r3, [r7, #52]	@ 0x34
 8010602:	e011      	b.n	8010628 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8010604:	4b10      	ldr	r3, [pc, #64]	@ (8010648 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8010606:	681b      	ldr	r3, [r3, #0]
 8010608:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801060c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010610:	d106      	bne.n	8010620 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 8010612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010614:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8010618:	d102      	bne.n	8010620 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 801061a:	4b0d      	ldr	r3, [pc, #52]	@ (8010650 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 801061c:	637b      	str	r3, [r7, #52]	@ 0x34
 801061e:	e003      	b.n	8010628 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 8010620:	2300      	movs	r3, #0
 8010622:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8010624:	f001 b8bf 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8010628:	f001 b8bd 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 801062c:	4b06      	ldr	r3, [pc, #24]	@ (8010648 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 801062e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8010632:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8010636:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8010638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801063a:	2b00      	cmp	r3, #0
 801063c:	d10c      	bne.n	8010658 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 801063e:	f7fc f989 	bl	800c954 <HAL_RCC_GetPCLK3Freq>
 8010642:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8010644:	f001 b8af 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8010648:	44020c00 	.word	0x44020c00
 801064c:	03d09000 	.word	0x03d09000
 8010650:	003d0900 	.word	0x003d0900
 8010654:	017d7840 	.word	0x017d7840
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8010658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801065a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801065e:	d108      	bne.n	8010672 <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010660:	f107 0308 	add.w	r3, r7, #8
 8010664:	4618      	mov	r0, r3
 8010666:	f7fe fbe9 	bl	800ee3c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 801066a:	693b      	ldr	r3, [r7, #16]
 801066c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 801066e:	f001 b89a 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8010672:	4b9f      	ldr	r3, [pc, #636]	@ (80108f0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8010674:	681b      	ldr	r3, [r3, #0]
 8010676:	f003 0302 	and.w	r3, r3, #2
 801067a:	2b02      	cmp	r3, #2
 801067c:	d10d      	bne.n	801069a <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 801067e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010680:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8010684:	d109      	bne.n	801069a <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8010686:	4b9a      	ldr	r3, [pc, #616]	@ (80108f0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8010688:	681b      	ldr	r3, [r3, #0]
 801068a:	08db      	lsrs	r3, r3, #3
 801068c:	f003 0303 	and.w	r3, r3, #3
 8010690:	4a98      	ldr	r2, [pc, #608]	@ (80108f4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8010692:	fa22 f303 	lsr.w	r3, r2, r3
 8010696:	637b      	str	r3, [r7, #52]	@ 0x34
 8010698:	e011      	b.n	80106be <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 801069a:	4b95      	ldr	r3, [pc, #596]	@ (80108f0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 801069c:	681b      	ldr	r3, [r3, #0]
 801069e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80106a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80106a6:	d106      	bne.n	80106b6 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 80106a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80106aa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80106ae:	d102      	bne.n	80106b6 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 80106b0:	4b91      	ldr	r3, [pc, #580]	@ (80108f8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 80106b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80106b4:	e003      	b.n	80106be <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 80106b6:	2300      	movs	r3, #0
 80106b8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80106ba:	f001 b874 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80106be:	f001 b872 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80106c2:	4b8b      	ldr	r3, [pc, #556]	@ (80108f0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80106c4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80106c8:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80106cc:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 80106ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d104      	bne.n	80106de <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80106d4:	f7fc f93e 	bl	800c954 <HAL_RCC_GetPCLK3Freq>
 80106d8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 80106da:	f001 b864 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 80106de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80106e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80106e4:	d108      	bne.n	80106f8 <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80106e6:	f107 0308 	add.w	r3, r7, #8
 80106ea:	4618      	mov	r0, r3
 80106ec:	f7fe fba6 	bl	800ee3c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80106f0:	693b      	ldr	r3, [r7, #16]
 80106f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80106f4:	f001 b857 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 80106f8:	4b7d      	ldr	r3, [pc, #500]	@ (80108f0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	f003 0302 	and.w	r3, r3, #2
 8010700:	2b02      	cmp	r3, #2
 8010702:	d10d      	bne.n	8010720 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 8010704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010706:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801070a:	d109      	bne.n	8010720 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 801070c:	4b78      	ldr	r3, [pc, #480]	@ (80108f0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	08db      	lsrs	r3, r3, #3
 8010712:	f003 0303 	and.w	r3, r3, #3
 8010716:	4a77      	ldr	r2, [pc, #476]	@ (80108f4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8010718:	fa22 f303 	lsr.w	r3, r2, r3
 801071c:	637b      	str	r3, [r7, #52]	@ 0x34
 801071e:	e011      	b.n	8010744 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 8010720:	4b73      	ldr	r3, [pc, #460]	@ (80108f0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8010722:	681b      	ldr	r3, [r3, #0]
 8010724:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8010728:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801072c:	d106      	bne.n	801073c <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 801072e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010730:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8010734:	d102      	bne.n	801073c <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 8010736:	4b70      	ldr	r3, [pc, #448]	@ (80108f8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8010738:	637b      	str	r3, [r7, #52]	@ 0x34
 801073a:	e003      	b.n	8010744 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 801073c:	2300      	movs	r3, #0
 801073e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8010740:	f001 b831 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8010744:	f001 b82f 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8010748:	4b69      	ldr	r3, [pc, #420]	@ (80108f0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 801074a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 801074e:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8010752:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8010754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010756:	2b00      	cmp	r3, #0
 8010758:	d104      	bne.n	8010764 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 801075a:	f7fc f8cf 	bl	800c8fc <HAL_RCC_GetPCLK1Freq>
 801075e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8010760:	f001 b821 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8010764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010766:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801076a:	d108      	bne.n	801077e <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801076c:	f107 0308 	add.w	r3, r7, #8
 8010770:	4618      	mov	r0, r3
 8010772:	f7fe fb63 	bl	800ee3c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8010776:	693b      	ldr	r3, [r7, #16]
 8010778:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 801077a:	f001 b814 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 801077e:	4b5c      	ldr	r3, [pc, #368]	@ (80108f0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8010780:	681b      	ldr	r3, [r3, #0]
 8010782:	f003 0302 	and.w	r3, r3, #2
 8010786:	2b02      	cmp	r3, #2
 8010788:	d10e      	bne.n	80107a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 801078a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801078c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8010790:	d10a      	bne.n	80107a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8010792:	4b57      	ldr	r3, [pc, #348]	@ (80108f0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8010794:	681b      	ldr	r3, [r3, #0]
 8010796:	08db      	lsrs	r3, r3, #3
 8010798:	f003 0303 	and.w	r3, r3, #3
 801079c:	4a55      	ldr	r2, [pc, #340]	@ (80108f4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 801079e:	fa22 f303 	lsr.w	r3, r2, r3
 80107a2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80107a4:	f000 bfff 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 80107a8:	2300      	movs	r3, #0
 80107aa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80107ac:	f000 bffb 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80107b0:	4b4f      	ldr	r3, [pc, #316]	@ (80108f0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80107b2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80107b6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80107ba:	633b      	str	r3, [r7, #48]	@ 0x30
 80107bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80107be:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80107c2:	d056      	beq.n	8010872 <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 80107c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80107c6:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80107ca:	f200 808b 	bhi.w	80108e4 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 80107ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80107d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80107d4:	d03e      	beq.n	8010854 <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 80107d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80107d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80107dc:	f200 8082 	bhi.w	80108e4 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 80107e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80107e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80107e6:	d027      	beq.n	8010838 <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 80107e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80107ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80107ee:	d879      	bhi.n	80108e4 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 80107f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80107f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80107f6:	d017      	beq.n	8010828 <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 80107f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80107fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80107fe:	d871      	bhi.n	80108e4 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8010800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010802:	2b00      	cmp	r3, #0
 8010804:	d004      	beq.n	8010810 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 8010806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010808:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801080c:	d004      	beq.n	8010818 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 801080e:	e069      	b.n	80108e4 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8010810:	f7fc f8a0 	bl	800c954 <HAL_RCC_GetPCLK3Freq>
 8010814:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8010816:	e068      	b.n	80108ea <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010818:	f107 0314 	add.w	r3, r7, #20
 801081c:	4618      	mov	r0, r3
 801081e:	f7fe f9a3 	bl	800eb68 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8010822:	697b      	ldr	r3, [r7, #20]
 8010824:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8010826:	e060      	b.n	80108ea <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010828:	f107 0308 	add.w	r3, r7, #8
 801082c:	4618      	mov	r0, r3
 801082e:	f7fe fb05 	bl	800ee3c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8010832:	693b      	ldr	r3, [r7, #16]
 8010834:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8010836:	e058      	b.n	80108ea <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8010838:	4b2d      	ldr	r3, [pc, #180]	@ (80108f0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 801083a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801083e:	f003 0302 	and.w	r3, r3, #2
 8010842:	2b02      	cmp	r3, #2
 8010844:	d103      	bne.n	801084e <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 8010846:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801084a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 801084c:	e04d      	b.n	80108ea <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 801084e:	2300      	movs	r3, #0
 8010850:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8010852:	e04a      	b.n	80108ea <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8010854:	4b26      	ldr	r3, [pc, #152]	@ (80108f0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8010856:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801085a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801085e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8010862:	d103      	bne.n	801086c <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 8010864:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8010868:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 801086a:	e03e      	b.n	80108ea <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 801086c:	2300      	movs	r3, #0
 801086e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8010870:	e03b      	b.n	80108ea <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8010872:	4b1f      	ldr	r3, [pc, #124]	@ (80108f0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8010874:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8010878:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 801087c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801087e:	4b1c      	ldr	r3, [pc, #112]	@ (80108f0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8010880:	681b      	ldr	r3, [r3, #0]
 8010882:	f003 0302 	and.w	r3, r3, #2
 8010886:	2b02      	cmp	r3, #2
 8010888:	d10c      	bne.n	80108a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 801088a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801088c:	2b00      	cmp	r3, #0
 801088e:	d109      	bne.n	80108a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8010890:	4b17      	ldr	r3, [pc, #92]	@ (80108f0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	08db      	lsrs	r3, r3, #3
 8010896:	f003 0303 	and.w	r3, r3, #3
 801089a:	4a16      	ldr	r2, [pc, #88]	@ (80108f4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 801089c:	fa22 f303 	lsr.w	r3, r2, r3
 80108a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80108a2:	e01e      	b.n	80108e2 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80108a4:	4b12      	ldr	r3, [pc, #72]	@ (80108f0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80108a6:	681b      	ldr	r3, [r3, #0]
 80108a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80108ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80108b0:	d106      	bne.n	80108c0 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 80108b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80108b8:	d102      	bne.n	80108c0 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80108ba:	4b0f      	ldr	r3, [pc, #60]	@ (80108f8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 80108bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80108be:	e010      	b.n	80108e2 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80108c0:	4b0b      	ldr	r3, [pc, #44]	@ (80108f0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80108c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80108cc:	d106      	bne.n	80108dc <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 80108ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80108d4:	d102      	bne.n	80108dc <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80108d6:	4b09      	ldr	r3, [pc, #36]	@ (80108fc <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 80108d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80108da:	e002      	b.n	80108e2 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80108dc:	2300      	movs	r3, #0
 80108de:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80108e0:	e003      	b.n	80108ea <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 80108e2:	e002      	b.n	80108ea <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 80108e4:	2300      	movs	r3, #0
 80108e6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80108e8:	bf00      	nop
          }
        }
        break;
 80108ea:	f000 bf5c 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80108ee:	bf00      	nop
 80108f0:	44020c00 	.word	0x44020c00
 80108f4:	03d09000 	.word	0x03d09000
 80108f8:	003d0900 	.word	0x003d0900
 80108fc:	017d7840 	.word	0x017d7840

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8010900:	4b9e      	ldr	r3, [pc, #632]	@ (8010b7c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8010902:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8010906:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 801090a:	633b      	str	r3, [r7, #48]	@ 0x30
 801090c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801090e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8010912:	d056      	beq.n	80109c2 <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 8010914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010916:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 801091a:	f200 808b 	bhi.w	8010a34 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 801091e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010920:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8010924:	d03e      	beq.n	80109a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 8010926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010928:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801092c:	f200 8082 	bhi.w	8010a34 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8010930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010932:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8010936:	d027      	beq.n	8010988 <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 8010938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801093a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801093e:	d879      	bhi.n	8010a34 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8010940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010942:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010946:	d017      	beq.n	8010978 <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 8010948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801094a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801094e:	d871      	bhi.n	8010a34 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8010950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010952:	2b00      	cmp	r3, #0
 8010954:	d004      	beq.n	8010960 <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 8010956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010958:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801095c:	d004      	beq.n	8010968 <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 801095e:	e069      	b.n	8010a34 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8010960:	f7fb ffcc 	bl	800c8fc <HAL_RCC_GetPCLK1Freq>
 8010964:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8010966:	e068      	b.n	8010a3a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010968:	f107 0314 	add.w	r3, r7, #20
 801096c:	4618      	mov	r0, r3
 801096e:	f7fe f8fb 	bl	800eb68 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8010972:	697b      	ldr	r3, [r7, #20]
 8010974:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8010976:	e060      	b.n	8010a3a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010978:	f107 0308 	add.w	r3, r7, #8
 801097c:	4618      	mov	r0, r3
 801097e:	f7fe fa5d 	bl	800ee3c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8010982:	693b      	ldr	r3, [r7, #16]
 8010984:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8010986:	e058      	b.n	8010a3a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8010988:	4b7c      	ldr	r3, [pc, #496]	@ (8010b7c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 801098a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801098e:	f003 0302 	and.w	r3, r3, #2
 8010992:	2b02      	cmp	r3, #2
 8010994:	d103      	bne.n	801099e <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 8010996:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801099a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 801099c:	e04d      	b.n	8010a3a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 801099e:	2300      	movs	r3, #0
 80109a0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80109a2:	e04a      	b.n	8010a3a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80109a4:	4b75      	ldr	r3, [pc, #468]	@ (8010b7c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80109a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80109aa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80109ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80109b2:	d103      	bne.n	80109bc <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 80109b4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80109b8:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80109ba:	e03e      	b.n	8010a3a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 80109bc:	2300      	movs	r3, #0
 80109be:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80109c0:	e03b      	b.n	8010a3a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80109c2:	4b6e      	ldr	r3, [pc, #440]	@ (8010b7c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80109c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80109c8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80109cc:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80109ce:	4b6b      	ldr	r3, [pc, #428]	@ (8010b7c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	f003 0302 	and.w	r3, r3, #2
 80109d6:	2b02      	cmp	r3, #2
 80109d8:	d10c      	bne.n	80109f4 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 80109da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d109      	bne.n	80109f4 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80109e0:	4b66      	ldr	r3, [pc, #408]	@ (8010b7c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	08db      	lsrs	r3, r3, #3
 80109e6:	f003 0303 	and.w	r3, r3, #3
 80109ea:	4a65      	ldr	r2, [pc, #404]	@ (8010b80 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 80109ec:	fa22 f303 	lsr.w	r3, r2, r3
 80109f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80109f2:	e01e      	b.n	8010a32 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80109f4:	4b61      	ldr	r3, [pc, #388]	@ (8010b7c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80109fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010a00:	d106      	bne.n	8010a10 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 8010a02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010a08:	d102      	bne.n	8010a10 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8010a0a:	4b5e      	ldr	r3, [pc, #376]	@ (8010b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8010a0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8010a0e:	e010      	b.n	8010a32 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8010a10:	4b5a      	ldr	r3, [pc, #360]	@ (8010b7c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8010a12:	681b      	ldr	r3, [r3, #0]
 8010a14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010a18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010a1c:	d106      	bne.n	8010a2c <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 8010a1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a20:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010a24:	d102      	bne.n	8010a2c <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8010a26:	4b58      	ldr	r3, [pc, #352]	@ (8010b88 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8010a28:	637b      	str	r3, [r7, #52]	@ 0x34
 8010a2a:	e002      	b.n	8010a32 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8010a2c:	2300      	movs	r3, #0
 8010a2e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8010a30:	e003      	b.n	8010a3a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 8010a32:	e002      	b.n	8010a3a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 8010a34:	2300      	movs	r3, #0
 8010a36:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8010a38:	bf00      	nop
          }
        }
        break;
 8010a3a:	f000 beb4 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 8010a3e:	4b4f      	ldr	r3, [pc, #316]	@ (8010b7c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8010a40:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8010a44:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8010a48:	633b      	str	r3, [r7, #48]	@ 0x30
 8010a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8010a50:	d056      	beq.n	8010b00 <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 8010a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8010a58:	f200 808b 	bhi.w	8010b72 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8010a5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a5e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8010a62:	d03e      	beq.n	8010ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 8010a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a66:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8010a6a:	f200 8082 	bhi.w	8010b72 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8010a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a70:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8010a74:	d027      	beq.n	8010ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 8010a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a78:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8010a7c:	d879      	bhi.n	8010b72 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8010a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a80:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010a84:	d017      	beq.n	8010ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 8010a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a88:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010a8c:	d871      	bhi.n	8010b72 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8010a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d004      	beq.n	8010a9e <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 8010a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010a9a:	d004      	beq.n	8010aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 8010a9c:	e069      	b.n	8010b72 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8010a9e:	f7fb ff59 	bl	800c954 <HAL_RCC_GetPCLK3Freq>
 8010aa2:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8010aa4:	e068      	b.n	8010b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010aa6:	f107 0314 	add.w	r3, r7, #20
 8010aaa:	4618      	mov	r0, r3
 8010aac:	f7fe f85c 	bl	800eb68 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8010ab0:	697b      	ldr	r3, [r7, #20]
 8010ab2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8010ab4:	e060      	b.n	8010b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010ab6:	f107 0308 	add.w	r3, r7, #8
 8010aba:	4618      	mov	r0, r3
 8010abc:	f7fe f9be 	bl	800ee3c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8010ac0:	693b      	ldr	r3, [r7, #16]
 8010ac2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8010ac4:	e058      	b.n	8010b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8010ac6:	4b2d      	ldr	r3, [pc, #180]	@ (8010b7c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8010ac8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8010acc:	f003 0302 	and.w	r3, r3, #2
 8010ad0:	2b02      	cmp	r3, #2
 8010ad2:	d103      	bne.n	8010adc <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 8010ad4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010ad8:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8010ada:	e04d      	b.n	8010b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8010adc:	2300      	movs	r3, #0
 8010ade:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8010ae0:	e04a      	b.n	8010b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8010ae2:	4b26      	ldr	r3, [pc, #152]	@ (8010b7c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8010ae4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8010ae8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010aec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8010af0:	d103      	bne.n	8010afa <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 8010af2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8010af6:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8010af8:	e03e      	b.n	8010b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8010afa:	2300      	movs	r3, #0
 8010afc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8010afe:	e03b      	b.n	8010b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8010b00:	4b1e      	ldr	r3, [pc, #120]	@ (8010b7c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8010b02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8010b06:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8010b0a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010b0c:	4b1b      	ldr	r3, [pc, #108]	@ (8010b7c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8010b0e:	681b      	ldr	r3, [r3, #0]
 8010b10:	f003 0302 	and.w	r3, r3, #2
 8010b14:	2b02      	cmp	r3, #2
 8010b16:	d10c      	bne.n	8010b32 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 8010b18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d109      	bne.n	8010b32 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8010b1e:	4b17      	ldr	r3, [pc, #92]	@ (8010b7c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8010b20:	681b      	ldr	r3, [r3, #0]
 8010b22:	08db      	lsrs	r3, r3, #3
 8010b24:	f003 0303 	and.w	r3, r3, #3
 8010b28:	4a15      	ldr	r2, [pc, #84]	@ (8010b80 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8010b2a:	fa22 f303 	lsr.w	r3, r2, r3
 8010b2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8010b30:	e01e      	b.n	8010b70 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010b32:	4b12      	ldr	r3, [pc, #72]	@ (8010b7c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8010b34:	681b      	ldr	r3, [r3, #0]
 8010b36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8010b3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010b3e:	d106      	bne.n	8010b4e <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 8010b40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010b46:	d102      	bne.n	8010b4e <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8010b48:	4b0e      	ldr	r3, [pc, #56]	@ (8010b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8010b4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8010b4c:	e010      	b.n	8010b70 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8010b4e:	4b0b      	ldr	r3, [pc, #44]	@ (8010b7c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010b56:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010b5a:	d106      	bne.n	8010b6a <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 8010b5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b5e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010b62:	d102      	bne.n	8010b6a <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8010b64:	4b08      	ldr	r3, [pc, #32]	@ (8010b88 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8010b66:	637b      	str	r3, [r7, #52]	@ 0x34
 8010b68:	e002      	b.n	8010b70 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8010b6a:	2300      	movs	r3, #0
 8010b6c:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8010b6e:	e003      	b.n	8010b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 8010b70:	e002      	b.n	8010b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 8010b72:	2300      	movs	r3, #0
 8010b74:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8010b76:	bf00      	nop
          }
        }
        break;
 8010b78:	f000 be15 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8010b7c:	44020c00 	.word	0x44020c00
 8010b80:	03d09000 	.word	0x03d09000
 8010b84:	003d0900 	.word	0x003d0900
 8010b88:	017d7840 	.word	0x017d7840
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 8010b8c:	4b9e      	ldr	r3, [pc, #632]	@ (8010e08 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8010b8e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8010b92:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 8010b96:	633b      	str	r3, [r7, #48]	@ 0x30
 8010b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b9a:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8010b9e:	d056      	beq.n	8010c4e <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 8010ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ba2:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8010ba6:	f200 808b 	bhi.w	8010cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8010baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010bac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8010bb0:	d03e      	beq.n	8010c30 <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 8010bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010bb4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8010bb8:	f200 8082 	bhi.w	8010cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8010bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010bbe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8010bc2:	d027      	beq.n	8010c14 <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 8010bc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010bc6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8010bca:	d879      	bhi.n	8010cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8010bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010bce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8010bd2:	d017      	beq.n	8010c04 <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 8010bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010bd6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8010bda:	d871      	bhi.n	8010cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8010bdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d004      	beq.n	8010bec <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 8010be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010be4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010be8:	d004      	beq.n	8010bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 8010bea:	e069      	b.n	8010cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8010bec:	f7fb feb2 	bl	800c954 <HAL_RCC_GetPCLK3Freq>
 8010bf0:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8010bf2:	e068      	b.n	8010cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010bf4:	f107 0314 	add.w	r3, r7, #20
 8010bf8:	4618      	mov	r0, r3
 8010bfa:	f7fd ffb5 	bl	800eb68 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8010bfe:	697b      	ldr	r3, [r7, #20]
 8010c00:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8010c02:	e060      	b.n	8010cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010c04:	f107 0308 	add.w	r3, r7, #8
 8010c08:	4618      	mov	r0, r3
 8010c0a:	f7fe f917 	bl	800ee3c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8010c0e:	693b      	ldr	r3, [r7, #16]
 8010c10:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8010c12:	e058      	b.n	8010cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8010c14:	4b7c      	ldr	r3, [pc, #496]	@ (8010e08 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8010c16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8010c1a:	f003 0302 	and.w	r3, r3, #2
 8010c1e:	2b02      	cmp	r3, #2
 8010c20:	d103      	bne.n	8010c2a <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 8010c22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010c26:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8010c28:	e04d      	b.n	8010cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8010c2a:	2300      	movs	r3, #0
 8010c2c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8010c2e:	e04a      	b.n	8010cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8010c30:	4b75      	ldr	r3, [pc, #468]	@ (8010e08 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8010c32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8010c36:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010c3a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8010c3e:	d103      	bne.n	8010c48 <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 8010c40:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8010c44:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8010c46:	e03e      	b.n	8010cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8010c48:	2300      	movs	r3, #0
 8010c4a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8010c4c:	e03b      	b.n	8010cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8010c4e:	4b6e      	ldr	r3, [pc, #440]	@ (8010e08 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8010c50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8010c54:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8010c58:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010c5a:	4b6b      	ldr	r3, [pc, #428]	@ (8010e08 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8010c5c:	681b      	ldr	r3, [r3, #0]
 8010c5e:	f003 0302 	and.w	r3, r3, #2
 8010c62:	2b02      	cmp	r3, #2
 8010c64:	d10c      	bne.n	8010c80 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 8010c66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d109      	bne.n	8010c80 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8010c6c:	4b66      	ldr	r3, [pc, #408]	@ (8010e08 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	08db      	lsrs	r3, r3, #3
 8010c72:	f003 0303 	and.w	r3, r3, #3
 8010c76:	4a65      	ldr	r2, [pc, #404]	@ (8010e0c <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8010c78:	fa22 f303 	lsr.w	r3, r2, r3
 8010c7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8010c7e:	e01e      	b.n	8010cbe <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010c80:	4b61      	ldr	r3, [pc, #388]	@ (8010e08 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8010c82:	681b      	ldr	r3, [r3, #0]
 8010c84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8010c88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010c8c:	d106      	bne.n	8010c9c <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 8010c8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010c94:	d102      	bne.n	8010c9c <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8010c96:	4b5e      	ldr	r3, [pc, #376]	@ (8010e10 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8010c98:	637b      	str	r3, [r7, #52]	@ 0x34
 8010c9a:	e010      	b.n	8010cbe <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8010c9c:	4b5a      	ldr	r3, [pc, #360]	@ (8010e08 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8010c9e:	681b      	ldr	r3, [r3, #0]
 8010ca0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010ca4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010ca8:	d106      	bne.n	8010cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 8010caa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010cac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010cb0:	d102      	bne.n	8010cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8010cb2:	4b58      	ldr	r3, [pc, #352]	@ (8010e14 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8010cb4:	637b      	str	r3, [r7, #52]	@ 0x34
 8010cb6:	e002      	b.n	8010cbe <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8010cb8:	2300      	movs	r3, #0
 8010cba:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8010cbc:	e003      	b.n	8010cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 8010cbe:	e002      	b.n	8010cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 8010cc0:	2300      	movs	r3, #0
 8010cc2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8010cc4:	bf00      	nop
          }
        }
        break;
 8010cc6:	f000 bd6e 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 8010cca:	4b4f      	ldr	r3, [pc, #316]	@ (8010e08 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8010ccc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8010cd0:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8010cd4:	633b      	str	r3, [r7, #48]	@ 0x30
 8010cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010cd8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8010cdc:	d056      	beq.n	8010d8c <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 8010cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ce0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8010ce4:	f200 808b 	bhi.w	8010dfe <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8010ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010cea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8010cee:	d03e      	beq.n	8010d6e <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 8010cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010cf2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8010cf6:	f200 8082 	bhi.w	8010dfe <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8010cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010cfc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8010d00:	d027      	beq.n	8010d52 <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 8010d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d04:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8010d08:	d879      	bhi.n	8010dfe <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8010d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d0c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8010d10:	d017      	beq.n	8010d42 <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 8010d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d14:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8010d18:	d871      	bhi.n	8010dfe <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8010d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d004      	beq.n	8010d2a <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 8010d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d22:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010d26:	d004      	beq.n	8010d32 <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 8010d28:	e069      	b.n	8010dfe <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8010d2a:	f7fb fe13 	bl	800c954 <HAL_RCC_GetPCLK3Freq>
 8010d2e:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8010d30:	e068      	b.n	8010e04 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010d32:	f107 0314 	add.w	r3, r7, #20
 8010d36:	4618      	mov	r0, r3
 8010d38:	f7fd ff16 	bl	800eb68 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8010d3c:	697b      	ldr	r3, [r7, #20]
 8010d3e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8010d40:	e060      	b.n	8010e04 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010d42:	f107 0308 	add.w	r3, r7, #8
 8010d46:	4618      	mov	r0, r3
 8010d48:	f7fe f878 	bl	800ee3c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8010d4c:	693b      	ldr	r3, [r7, #16]
 8010d4e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8010d50:	e058      	b.n	8010e04 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8010d52:	4b2d      	ldr	r3, [pc, #180]	@ (8010e08 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8010d54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8010d58:	f003 0302 	and.w	r3, r3, #2
 8010d5c:	2b02      	cmp	r3, #2
 8010d5e:	d103      	bne.n	8010d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 8010d60:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010d64:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8010d66:	e04d      	b.n	8010e04 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8010d68:	2300      	movs	r3, #0
 8010d6a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8010d6c:	e04a      	b.n	8010e04 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8010d6e:	4b26      	ldr	r3, [pc, #152]	@ (8010e08 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8010d70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8010d74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010d78:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8010d7c:	d103      	bne.n	8010d86 <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 8010d7e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8010d82:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8010d84:	e03e      	b.n	8010e04 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8010d86:	2300      	movs	r3, #0
 8010d88:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8010d8a:	e03b      	b.n	8010e04 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8010d8c:	4b1e      	ldr	r3, [pc, #120]	@ (8010e08 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8010d8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8010d92:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8010d96:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010d98:	4b1b      	ldr	r3, [pc, #108]	@ (8010e08 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	f003 0302 	and.w	r3, r3, #2
 8010da0:	2b02      	cmp	r3, #2
 8010da2:	d10c      	bne.n	8010dbe <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 8010da4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d109      	bne.n	8010dbe <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8010daa:	4b17      	ldr	r3, [pc, #92]	@ (8010e08 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8010dac:	681b      	ldr	r3, [r3, #0]
 8010dae:	08db      	lsrs	r3, r3, #3
 8010db0:	f003 0303 	and.w	r3, r3, #3
 8010db4:	4a15      	ldr	r2, [pc, #84]	@ (8010e0c <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8010db6:	fa22 f303 	lsr.w	r3, r2, r3
 8010dba:	637b      	str	r3, [r7, #52]	@ 0x34
 8010dbc:	e01e      	b.n	8010dfc <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010dbe:	4b12      	ldr	r3, [pc, #72]	@ (8010e08 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8010dc0:	681b      	ldr	r3, [r3, #0]
 8010dc2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8010dc6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010dca:	d106      	bne.n	8010dda <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 8010dcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010dce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010dd2:	d102      	bne.n	8010dda <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8010dd4:	4b0e      	ldr	r3, [pc, #56]	@ (8010e10 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8010dd6:	637b      	str	r3, [r7, #52]	@ 0x34
 8010dd8:	e010      	b.n	8010dfc <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8010dda:	4b0b      	ldr	r3, [pc, #44]	@ (8010e08 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010de2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010de6:	d106      	bne.n	8010df6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 8010de8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010dea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010dee:	d102      	bne.n	8010df6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8010df0:	4b08      	ldr	r3, [pc, #32]	@ (8010e14 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8010df2:	637b      	str	r3, [r7, #52]	@ 0x34
 8010df4:	e002      	b.n	8010dfc <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8010df6:	2300      	movs	r3, #0
 8010df8:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8010dfa:	e003      	b.n	8010e04 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 8010dfc:	e002      	b.n	8010e04 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 8010dfe:	2300      	movs	r3, #0
 8010e00:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8010e02:	bf00      	nop
          }
        }
        break;
 8010e04:	f000 bccf 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8010e08:	44020c00 	.word	0x44020c00
 8010e0c:	03d09000 	.word	0x03d09000
 8010e10:	003d0900 	.word	0x003d0900
 8010e14:	017d7840 	.word	0x017d7840
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 8010e18:	4b9e      	ldr	r3, [pc, #632]	@ (8011094 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8010e1a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8010e1e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8010e22:	633b      	str	r3, [r7, #48]	@ 0x30
 8010e24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e26:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8010e2a:	d056      	beq.n	8010eda <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 8010e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8010e32:	f200 808b 	bhi.w	8010f4c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8010e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010e3c:	d03e      	beq.n	8010ebc <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 8010e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010e44:	f200 8082 	bhi.w	8010f4c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8010e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e4a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8010e4e:	d027      	beq.n	8010ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 8010e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e52:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8010e56:	d879      	bhi.n	8010f4c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8010e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e5a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010e5e:	d017      	beq.n	8010e90 <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 8010e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010e66:	d871      	bhi.n	8010f4c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8010e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d004      	beq.n	8010e78 <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 8010e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e70:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010e74:	d004      	beq.n	8010e80 <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 8010e76:	e069      	b.n	8010f4c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8010e78:	f7fb fd6c 	bl	800c954 <HAL_RCC_GetPCLK3Freq>
 8010e7c:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8010e7e:	e068      	b.n	8010f52 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010e80:	f107 0314 	add.w	r3, r7, #20
 8010e84:	4618      	mov	r0, r3
 8010e86:	f7fd fe6f 	bl	800eb68 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8010e8a:	697b      	ldr	r3, [r7, #20]
 8010e8c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8010e8e:	e060      	b.n	8010f52 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010e90:	f107 0308 	add.w	r3, r7, #8
 8010e94:	4618      	mov	r0, r3
 8010e96:	f7fd ffd1 	bl	800ee3c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8010e9a:	693b      	ldr	r3, [r7, #16]
 8010e9c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8010e9e:	e058      	b.n	8010f52 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8010ea0:	4b7c      	ldr	r3, [pc, #496]	@ (8011094 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8010ea2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8010ea6:	f003 0302 	and.w	r3, r3, #2
 8010eaa:	2b02      	cmp	r3, #2
 8010eac:	d103      	bne.n	8010eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 8010eae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010eb2:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8010eb4:	e04d      	b.n	8010f52 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 8010eb6:	2300      	movs	r3, #0
 8010eb8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8010eba:	e04a      	b.n	8010f52 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8010ebc:	4b75      	ldr	r3, [pc, #468]	@ (8011094 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8010ebe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8010ec2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010ec6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8010eca:	d103      	bne.n	8010ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 8010ecc:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8010ed0:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8010ed2:	e03e      	b.n	8010f52 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 8010ed4:	2300      	movs	r3, #0
 8010ed6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8010ed8:	e03b      	b.n	8010f52 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8010eda:	4b6e      	ldr	r3, [pc, #440]	@ (8011094 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8010edc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8010ee0:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8010ee4:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010ee6:	4b6b      	ldr	r3, [pc, #428]	@ (8011094 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	f003 0302 	and.w	r3, r3, #2
 8010eee:	2b02      	cmp	r3, #2
 8010ef0:	d10c      	bne.n	8010f0c <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 8010ef2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	d109      	bne.n	8010f0c <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8010ef8:	4b66      	ldr	r3, [pc, #408]	@ (8011094 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8010efa:	681b      	ldr	r3, [r3, #0]
 8010efc:	08db      	lsrs	r3, r3, #3
 8010efe:	f003 0303 	and.w	r3, r3, #3
 8010f02:	4a65      	ldr	r2, [pc, #404]	@ (8011098 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8010f04:	fa22 f303 	lsr.w	r3, r2, r3
 8010f08:	637b      	str	r3, [r7, #52]	@ 0x34
 8010f0a:	e01e      	b.n	8010f4a <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010f0c:	4b61      	ldr	r3, [pc, #388]	@ (8011094 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8010f0e:	681b      	ldr	r3, [r3, #0]
 8010f10:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8010f14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010f18:	d106      	bne.n	8010f28 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 8010f1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010f20:	d102      	bne.n	8010f28 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8010f22:	4b5e      	ldr	r3, [pc, #376]	@ (801109c <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8010f24:	637b      	str	r3, [r7, #52]	@ 0x34
 8010f26:	e010      	b.n	8010f4a <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8010f28:	4b5a      	ldr	r3, [pc, #360]	@ (8011094 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8010f2a:	681b      	ldr	r3, [r3, #0]
 8010f2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010f30:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010f34:	d106      	bne.n	8010f44 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 8010f36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f38:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010f3c:	d102      	bne.n	8010f44 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8010f3e:	4b58      	ldr	r3, [pc, #352]	@ (80110a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8010f40:	637b      	str	r3, [r7, #52]	@ 0x34
 8010f42:	e002      	b.n	8010f4a <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8010f44:	2300      	movs	r3, #0
 8010f46:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8010f48:	e003      	b.n	8010f52 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 8010f4a:	e002      	b.n	8010f52 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 8010f4c:	2300      	movs	r3, #0
 8010f4e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8010f50:	bf00      	nop
          }
        }
        break;
 8010f52:	f000 bc28 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8010f56:	4b4f      	ldr	r3, [pc, #316]	@ (8011094 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8010f58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8010f5c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8010f60:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8010f62:	4b4c      	ldr	r3, [pc, #304]	@ (8011094 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8010f64:	681b      	ldr	r3, [r3, #0]
 8010f66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010f6a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010f6e:	d106      	bne.n	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 8010f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d103      	bne.n	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 8010f76:	4b4a      	ldr	r3, [pc, #296]	@ (80110a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8010f78:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8010f7a:	f000 bc14 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8010f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010f84:	d108      	bne.n	8010f98 <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010f86:	f107 0320 	add.w	r3, r7, #32
 8010f8a:	4618      	mov	r0, r3
 8010f8c:	f7fd fc82 	bl	800e894 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f92:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8010f94:	f000 bc07 	b.w	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8010f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010f9e:	d107      	bne.n	8010fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010fa0:	f107 0314 	add.w	r3, r7, #20
 8010fa4:	4618      	mov	r0, r3
 8010fa6:	f7fd fddf 	bl	800eb68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8010faa:	69bb      	ldr	r3, [r7, #24]
 8010fac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8010fae:	e3fa      	b.n	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8010fb0:	2300      	movs	r3, #0
 8010fb2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8010fb4:	e3f7      	b.n	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8010fb6:	4b37      	ldr	r3, [pc, #220]	@ (8011094 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8010fb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010fbc:	f003 0307 	and.w	r3, r3, #7
 8010fc0:	633b      	str	r3, [r7, #48]	@ 0x30
 8010fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010fc4:	2b04      	cmp	r3, #4
 8010fc6:	d861      	bhi.n	801108c <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 8010fc8:	a201      	add	r2, pc, #4	@ (adr r2, 8010fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 8010fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010fce:	bf00      	nop
 8010fd0:	08010fe5 	.word	0x08010fe5
 8010fd4:	08010ff5 	.word	0x08010ff5
 8010fd8:	08011005 	.word	0x08011005
 8010fdc:	08011015 	.word	0x08011015
 8010fe0:	0801101b 	.word	0x0801101b
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010fe4:	f107 0320 	add.w	r3, r7, #32
 8010fe8:	4618      	mov	r0, r3
 8010fea:	f7fd fc53 	bl	800e894 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8010fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ff0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8010ff2:	e04e      	b.n	8011092 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010ff4:	f107 0314 	add.w	r3, r7, #20
 8010ff8:	4618      	mov	r0, r3
 8010ffa:	f7fd fdb5 	bl	800eb68 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8010ffe:	697b      	ldr	r3, [r7, #20]
 8011000:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8011002:	e046      	b.n	8011092 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011004:	f107 0308 	add.w	r3, r7, #8
 8011008:	4618      	mov	r0, r3
 801100a:	f7fd ff17 	bl	800ee3c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 801100e:	68bb      	ldr	r3, [r7, #8]
 8011010:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8011012:	e03e      	b.n	8011092 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8011014:	4b23      	ldr	r3, [pc, #140]	@ (80110a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 8011016:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8011018:	e03b      	b.n	8011092 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801101a:	4b1e      	ldr	r3, [pc, #120]	@ (8011094 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 801101c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8011020:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8011024:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8011026:	4b1b      	ldr	r3, [pc, #108]	@ (8011094 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	f003 0302 	and.w	r3, r3, #2
 801102e:	2b02      	cmp	r3, #2
 8011030:	d10c      	bne.n	801104c <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 8011032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011034:	2b00      	cmp	r3, #0
 8011036:	d109      	bne.n	801104c <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8011038:	4b16      	ldr	r3, [pc, #88]	@ (8011094 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 801103a:	681b      	ldr	r3, [r3, #0]
 801103c:	08db      	lsrs	r3, r3, #3
 801103e:	f003 0303 	and.w	r3, r3, #3
 8011042:	4a15      	ldr	r2, [pc, #84]	@ (8011098 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8011044:	fa22 f303 	lsr.w	r3, r2, r3
 8011048:	637b      	str	r3, [r7, #52]	@ 0x34
 801104a:	e01e      	b.n	801108a <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801104c:	4b11      	ldr	r3, [pc, #68]	@ (8011094 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 801104e:	681b      	ldr	r3, [r3, #0]
 8011050:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8011054:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011058:	d106      	bne.n	8011068 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 801105a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801105c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011060:	d102      	bne.n	8011068 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8011062:	4b0e      	ldr	r3, [pc, #56]	@ (801109c <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8011064:	637b      	str	r3, [r7, #52]	@ 0x34
 8011066:	e010      	b.n	801108a <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8011068:	4b0a      	ldr	r3, [pc, #40]	@ (8011094 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 801106a:	681b      	ldr	r3, [r3, #0]
 801106c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011070:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8011074:	d106      	bne.n	8011084 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 8011076:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011078:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801107c:	d102      	bne.n	8011084 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 801107e:	4b08      	ldr	r3, [pc, #32]	@ (80110a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8011080:	637b      	str	r3, [r7, #52]	@ 0x34
 8011082:	e002      	b.n	801108a <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8011084:	2300      	movs	r3, #0
 8011086:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8011088:	e003      	b.n	8011092 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 801108a:	e002      	b.n	8011092 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 801108c:	2300      	movs	r3, #0
 801108e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8011090:	bf00      	nop
          }
        }
        break;
 8011092:	e388      	b.n	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8011094:	44020c00 	.word	0x44020c00
 8011098:	03d09000 	.word	0x03d09000
 801109c:	003d0900 	.word	0x003d0900
 80110a0:	017d7840 	.word	0x017d7840
 80110a4:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80110a8:	4ba9      	ldr	r3, [pc, #676]	@ (8011350 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80110aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80110ae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80110b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80110b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80110b6:	2b20      	cmp	r3, #32
 80110b8:	f200 809a 	bhi.w	80111f0 <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 80110bc:	a201      	add	r2, pc, #4	@ (adr r2, 80110c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 80110be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110c2:	bf00      	nop
 80110c4:	08011149 	.word	0x08011149
 80110c8:	080111f1 	.word	0x080111f1
 80110cc:	080111f1 	.word	0x080111f1
 80110d0:	080111f1 	.word	0x080111f1
 80110d4:	080111f1 	.word	0x080111f1
 80110d8:	080111f1 	.word	0x080111f1
 80110dc:	080111f1 	.word	0x080111f1
 80110e0:	080111f1 	.word	0x080111f1
 80110e4:	08011159 	.word	0x08011159
 80110e8:	080111f1 	.word	0x080111f1
 80110ec:	080111f1 	.word	0x080111f1
 80110f0:	080111f1 	.word	0x080111f1
 80110f4:	080111f1 	.word	0x080111f1
 80110f8:	080111f1 	.word	0x080111f1
 80110fc:	080111f1 	.word	0x080111f1
 8011100:	080111f1 	.word	0x080111f1
 8011104:	08011169 	.word	0x08011169
 8011108:	080111f1 	.word	0x080111f1
 801110c:	080111f1 	.word	0x080111f1
 8011110:	080111f1 	.word	0x080111f1
 8011114:	080111f1 	.word	0x080111f1
 8011118:	080111f1 	.word	0x080111f1
 801111c:	080111f1 	.word	0x080111f1
 8011120:	080111f1 	.word	0x080111f1
 8011124:	08011179 	.word	0x08011179
 8011128:	080111f1 	.word	0x080111f1
 801112c:	080111f1 	.word	0x080111f1
 8011130:	080111f1 	.word	0x080111f1
 8011134:	080111f1 	.word	0x080111f1
 8011138:	080111f1 	.word	0x080111f1
 801113c:	080111f1 	.word	0x080111f1
 8011140:	080111f1 	.word	0x080111f1
 8011144:	0801117f 	.word	0x0801117f
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8011148:	f107 0320 	add.w	r3, r7, #32
 801114c:	4618      	mov	r0, r3
 801114e:	f7fd fba1 	bl	800e894 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8011152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011154:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8011156:	e04e      	b.n	80111f6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011158:	f107 0314 	add.w	r3, r7, #20
 801115c:	4618      	mov	r0, r3
 801115e:	f7fd fd03 	bl	800eb68 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8011162:	697b      	ldr	r3, [r7, #20]
 8011164:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8011166:	e046      	b.n	80111f6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011168:	f107 0308 	add.w	r3, r7, #8
 801116c:	4618      	mov	r0, r3
 801116e:	f7fd fe65 	bl	800ee3c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8011172:	68bb      	ldr	r3, [r7, #8]
 8011174:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8011176:	e03e      	b.n	80111f6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8011178:	4b76      	ldr	r3, [pc, #472]	@ (8011354 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 801117a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 801117c:	e03b      	b.n	80111f6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801117e:	4b74      	ldr	r3, [pc, #464]	@ (8011350 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8011180:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8011184:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8011188:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801118a:	4b71      	ldr	r3, [pc, #452]	@ (8011350 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 801118c:	681b      	ldr	r3, [r3, #0]
 801118e:	f003 0302 	and.w	r3, r3, #2
 8011192:	2b02      	cmp	r3, #2
 8011194:	d10c      	bne.n	80111b0 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 8011196:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011198:	2b00      	cmp	r3, #0
 801119a:	d109      	bne.n	80111b0 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 801119c:	4b6c      	ldr	r3, [pc, #432]	@ (8011350 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 801119e:	681b      	ldr	r3, [r3, #0]
 80111a0:	08db      	lsrs	r3, r3, #3
 80111a2:	f003 0303 	and.w	r3, r3, #3
 80111a6:	4a6c      	ldr	r2, [pc, #432]	@ (8011358 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 80111a8:	fa22 f303 	lsr.w	r3, r2, r3
 80111ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80111ae:	e01e      	b.n	80111ee <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80111b0:	4b67      	ldr	r3, [pc, #412]	@ (8011350 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80111b2:	681b      	ldr	r3, [r3, #0]
 80111b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80111b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80111bc:	d106      	bne.n	80111cc <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 80111be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80111c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80111c4:	d102      	bne.n	80111cc <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80111c6:	4b65      	ldr	r3, [pc, #404]	@ (801135c <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 80111c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80111ca:	e010      	b.n	80111ee <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80111cc:	4b60      	ldr	r3, [pc, #384]	@ (8011350 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80111ce:	681b      	ldr	r3, [r3, #0]
 80111d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80111d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80111d8:	d106      	bne.n	80111e8 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 80111da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80111dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80111e0:	d102      	bne.n	80111e8 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80111e2:	4b5f      	ldr	r3, [pc, #380]	@ (8011360 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 80111e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80111e6:	e002      	b.n	80111ee <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80111e8:	2300      	movs	r3, #0
 80111ea:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80111ec:	e003      	b.n	80111f6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 80111ee:	e002      	b.n	80111f6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 80111f0:	2300      	movs	r3, #0
 80111f2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80111f4:	bf00      	nop
          }
        }
        break;
 80111f6:	e2d6      	b.n	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80111f8:	4b55      	ldr	r3, [pc, #340]	@ (8011350 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80111fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80111fe:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8011202:	633b      	str	r3, [r7, #48]	@ 0x30
 8011204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011206:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801120a:	d031      	beq.n	8011270 <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 801120c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801120e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011212:	d866      	bhi.n	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8011214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011216:	2bc0      	cmp	r3, #192	@ 0xc0
 8011218:	d027      	beq.n	801126a <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 801121a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801121c:	2bc0      	cmp	r3, #192	@ 0xc0
 801121e:	d860      	bhi.n	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8011220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011222:	2b80      	cmp	r3, #128	@ 0x80
 8011224:	d019      	beq.n	801125a <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 8011226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011228:	2b80      	cmp	r3, #128	@ 0x80
 801122a:	d85a      	bhi.n	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 801122c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801122e:	2b00      	cmp	r3, #0
 8011230:	d003      	beq.n	801123a <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 8011232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011234:	2b40      	cmp	r3, #64	@ 0x40
 8011236:	d008      	beq.n	801124a <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 8011238:	e053      	b.n	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801123a:	f107 0320 	add.w	r3, r7, #32
 801123e:	4618      	mov	r0, r3
 8011240:	f7fd fb28 	bl	800e894 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8011244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011246:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8011248:	e04e      	b.n	80112e8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801124a:	f107 0314 	add.w	r3, r7, #20
 801124e:	4618      	mov	r0, r3
 8011250:	f7fd fc8a 	bl	800eb68 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8011254:	697b      	ldr	r3, [r7, #20]
 8011256:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8011258:	e046      	b.n	80112e8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801125a:	f107 0308 	add.w	r3, r7, #8
 801125e:	4618      	mov	r0, r3
 8011260:	f7fd fdec 	bl	800ee3c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8011264:	68bb      	ldr	r3, [r7, #8]
 8011266:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8011268:	e03e      	b.n	80112e8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 801126a:	4b3a      	ldr	r3, [pc, #232]	@ (8011354 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 801126c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 801126e:	e03b      	b.n	80112e8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8011270:	4b37      	ldr	r3, [pc, #220]	@ (8011350 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8011272:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8011276:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 801127a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801127c:	4b34      	ldr	r3, [pc, #208]	@ (8011350 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 801127e:	681b      	ldr	r3, [r3, #0]
 8011280:	f003 0302 	and.w	r3, r3, #2
 8011284:	2b02      	cmp	r3, #2
 8011286:	d10c      	bne.n	80112a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 8011288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801128a:	2b00      	cmp	r3, #0
 801128c:	d109      	bne.n	80112a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 801128e:	4b30      	ldr	r3, [pc, #192]	@ (8011350 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8011290:	681b      	ldr	r3, [r3, #0]
 8011292:	08db      	lsrs	r3, r3, #3
 8011294:	f003 0303 	and.w	r3, r3, #3
 8011298:	4a2f      	ldr	r2, [pc, #188]	@ (8011358 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 801129a:	fa22 f303 	lsr.w	r3, r2, r3
 801129e:	637b      	str	r3, [r7, #52]	@ 0x34
 80112a0:	e01e      	b.n	80112e0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80112a2:	4b2b      	ldr	r3, [pc, #172]	@ (8011350 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80112a4:	681b      	ldr	r3, [r3, #0]
 80112a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80112aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80112ae:	d106      	bne.n	80112be <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 80112b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80112b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80112b6:	d102      	bne.n	80112be <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80112b8:	4b28      	ldr	r3, [pc, #160]	@ (801135c <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 80112ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80112bc:	e010      	b.n	80112e0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80112be:	4b24      	ldr	r3, [pc, #144]	@ (8011350 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80112c0:	681b      	ldr	r3, [r3, #0]
 80112c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80112c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80112ca:	d106      	bne.n	80112da <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 80112cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80112ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80112d2:	d102      	bne.n	80112da <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80112d4:	4b22      	ldr	r3, [pc, #136]	@ (8011360 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 80112d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80112d8:	e002      	b.n	80112e0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80112da:	2300      	movs	r3, #0
 80112dc:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80112de:	e003      	b.n	80112e8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 80112e0:	e002      	b.n	80112e8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 80112e2:	2300      	movs	r3, #0
 80112e4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80112e6:	bf00      	nop
          }
        }
        break;
 80112e8:	e25d      	b.n	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 80112ea:	4b19      	ldr	r3, [pc, #100]	@ (8011350 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80112ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80112f0:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 80112f4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 80112f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d103      	bne.n	8011304 <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 80112fc:	f7fb fb14 	bl	800c928 <HAL_RCC_GetPCLK2Freq>
 8011300:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8011302:	e250      	b.n	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 8011304:	4b12      	ldr	r3, [pc, #72]	@ (8011350 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801130c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8011310:	d10b      	bne.n	801132a <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 8011312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011314:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011318:	d107      	bne.n	801132a <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801131a:	f107 0314 	add.w	r3, r7, #20
 801131e:	4618      	mov	r0, r3
 8011320:	f7fd fc22 	bl	800eb68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8011324:	69bb      	ldr	r3, [r7, #24]
 8011326:	637b      	str	r3, [r7, #52]	@ 0x34
 8011328:	e04f      	b.n	80113ca <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 801132a:	4b09      	ldr	r3, [pc, #36]	@ (8011350 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 801132c:	681b      	ldr	r3, [r3, #0]
 801132e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8011332:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011336:	d115      	bne.n	8011364 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 8011338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801133a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801133e:	d111      	bne.n	8011364 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011340:	f107 0308 	add.w	r3, r7, #8
 8011344:	4618      	mov	r0, r3
 8011346:	f7fd fd79 	bl	800ee3c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 801134a:	68fb      	ldr	r3, [r7, #12]
 801134c:	637b      	str	r3, [r7, #52]	@ 0x34
 801134e:	e03c      	b.n	80113ca <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 8011350:	44020c00 	.word	0x44020c00
 8011354:	00bb8000 	.word	0x00bb8000
 8011358:	03d09000 	.word	0x03d09000
 801135c:	003d0900 	.word	0x003d0900
 8011360:	017d7840 	.word	0x017d7840
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 8011364:	4b94      	ldr	r3, [pc, #592]	@ (80115b8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8011366:	681b      	ldr	r3, [r3, #0]
 8011368:	f003 0302 	and.w	r3, r3, #2
 801136c:	2b02      	cmp	r3, #2
 801136e:	d10d      	bne.n	801138c <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 8011370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011372:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8011376:	d109      	bne.n	801138c <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8011378:	4b8f      	ldr	r3, [pc, #572]	@ (80115b8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 801137a:	681b      	ldr	r3, [r3, #0]
 801137c:	08db      	lsrs	r3, r3, #3
 801137e:	f003 0303 	and.w	r3, r3, #3
 8011382:	4a8e      	ldr	r2, [pc, #568]	@ (80115bc <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8011384:	fa22 f303 	lsr.w	r3, r2, r3
 8011388:	637b      	str	r3, [r7, #52]	@ 0x34
 801138a:	e01e      	b.n	80113ca <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 801138c:	4b8a      	ldr	r3, [pc, #552]	@ (80115b8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8011394:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011398:	d106      	bne.n	80113a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 801139a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801139c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80113a0:	d102      	bne.n	80113a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 80113a2:	4b87      	ldr	r3, [pc, #540]	@ (80115c0 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 80113a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80113a6:	e010      	b.n	80113ca <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 80113a8:	4b83      	ldr	r3, [pc, #524]	@ (80115b8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80113aa:	681b      	ldr	r3, [r3, #0]
 80113ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80113b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80113b4:	d106      	bne.n	80113c4 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 80113b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80113b8:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80113bc:	d102      	bne.n	80113c4 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 80113be:	4b81      	ldr	r3, [pc, #516]	@ (80115c4 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 80113c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80113c2:	e002      	b.n	80113ca <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 80113c4:	2300      	movs	r3, #0
 80113c6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80113c8:	e1ed      	b.n	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80113ca:	e1ec      	b.n	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 80113cc:	4b7a      	ldr	r3, [pc, #488]	@ (80115b8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80113ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80113d2:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80113d6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 80113d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d103      	bne.n	80113e6 <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80113de:	f7fb fab9 	bl	800c954 <HAL_RCC_GetPCLK3Freq>
 80113e2:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 80113e4:	e1df      	b.n	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 80113e6:	4b74      	ldr	r3, [pc, #464]	@ (80115b8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80113e8:	681b      	ldr	r3, [r3, #0]
 80113ea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80113ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80113f2:	d10b      	bne.n	801140c <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 80113f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80113f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80113fa:	d107      	bne.n	801140c <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80113fc:	f107 0314 	add.w	r3, r7, #20
 8011400:	4618      	mov	r0, r3
 8011402:	f7fd fbb1 	bl	800eb68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8011406:	69bb      	ldr	r3, [r7, #24]
 8011408:	637b      	str	r3, [r7, #52]	@ 0x34
 801140a:	e045      	b.n	8011498 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 801140c:	4b6a      	ldr	r3, [pc, #424]	@ (80115b8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 801140e:	681b      	ldr	r3, [r3, #0]
 8011410:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8011414:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011418:	d10b      	bne.n	8011432 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 801141a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801141c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8011420:	d107      	bne.n	8011432 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011422:	f107 0308 	add.w	r3, r7, #8
 8011426:	4618      	mov	r0, r3
 8011428:	f7fd fd08 	bl	800ee3c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 801142c:	68fb      	ldr	r3, [r7, #12]
 801142e:	637b      	str	r3, [r7, #52]	@ 0x34
 8011430:	e032      	b.n	8011498 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 8011432:	4b61      	ldr	r3, [pc, #388]	@ (80115b8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	f003 0302 	and.w	r3, r3, #2
 801143a:	2b02      	cmp	r3, #2
 801143c:	d10d      	bne.n	801145a <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 801143e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011440:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8011444:	d109      	bne.n	801145a <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8011446:	4b5c      	ldr	r3, [pc, #368]	@ (80115b8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	08db      	lsrs	r3, r3, #3
 801144c:	f003 0303 	and.w	r3, r3, #3
 8011450:	4a5a      	ldr	r2, [pc, #360]	@ (80115bc <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8011452:	fa22 f303 	lsr.w	r3, r2, r3
 8011456:	637b      	str	r3, [r7, #52]	@ 0x34
 8011458:	e01e      	b.n	8011498 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 801145a:	4b57      	ldr	r3, [pc, #348]	@ (80115b8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8011462:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011466:	d106      	bne.n	8011476 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 8011468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801146a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801146e:	d102      	bne.n	8011476 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 8011470:	4b53      	ldr	r3, [pc, #332]	@ (80115c0 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8011472:	637b      	str	r3, [r7, #52]	@ 0x34
 8011474:	e010      	b.n	8011498 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 8011476:	4b50      	ldr	r3, [pc, #320]	@ (80115b8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8011478:	681b      	ldr	r3, [r3, #0]
 801147a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801147e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8011482:	d106      	bne.n	8011492 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 8011484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011486:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 801148a:	d102      	bne.n	8011492 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 801148c:	4b4d      	ldr	r3, [pc, #308]	@ (80115c4 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 801148e:	637b      	str	r3, [r7, #52]	@ 0x34
 8011490:	e002      	b.n	8011498 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 8011492:	2300      	movs	r3, #0
 8011494:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8011496:	e186      	b.n	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8011498:	e185      	b.n	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 801149a:	4b47      	ldr	r3, [pc, #284]	@ (80115b8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 801149c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80114a0:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 80114a4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 80114a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d103      	bne.n	80114b4 <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 80114ac:	f7fb fa3c 	bl	800c928 <HAL_RCC_GetPCLK2Freq>
 80114b0:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 80114b2:	e178      	b.n	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 80114b4:	4b40      	ldr	r3, [pc, #256]	@ (80115b8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80114b6:	681b      	ldr	r3, [r3, #0]
 80114b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80114bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80114c0:	d10b      	bne.n	80114da <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 80114c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80114c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80114c8:	d107      	bne.n	80114da <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80114ca:	f107 0314 	add.w	r3, r7, #20
 80114ce:	4618      	mov	r0, r3
 80114d0:	f7fd fb4a 	bl	800eb68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80114d4:	69bb      	ldr	r3, [r7, #24]
 80114d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80114d8:	e045      	b.n	8011566 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 80114da:	4b37      	ldr	r3, [pc, #220]	@ (80115b8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80114dc:	681b      	ldr	r3, [r3, #0]
 80114de:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80114e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80114e6:	d10b      	bne.n	8011500 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 80114e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80114ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80114ee:	d107      	bne.n	8011500 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80114f0:	f107 0308 	add.w	r3, r7, #8
 80114f4:	4618      	mov	r0, r3
 80114f6:	f7fd fca1 	bl	800ee3c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80114fa:	68fb      	ldr	r3, [r7, #12]
 80114fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80114fe:	e032      	b.n	8011566 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 8011500:	4b2d      	ldr	r3, [pc, #180]	@ (80115b8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8011502:	681b      	ldr	r3, [r3, #0]
 8011504:	f003 0302 	and.w	r3, r3, #2
 8011508:	2b02      	cmp	r3, #2
 801150a:	d10d      	bne.n	8011528 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 801150c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801150e:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8011512:	d109      	bne.n	8011528 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8011514:	4b28      	ldr	r3, [pc, #160]	@ (80115b8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	08db      	lsrs	r3, r3, #3
 801151a:	f003 0303 	and.w	r3, r3, #3
 801151e:	4a27      	ldr	r2, [pc, #156]	@ (80115bc <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8011520:	fa22 f303 	lsr.w	r3, r2, r3
 8011524:	637b      	str	r3, [r7, #52]	@ 0x34
 8011526:	e01e      	b.n	8011566 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 8011528:	4b23      	ldr	r3, [pc, #140]	@ (80115b8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 801152a:	681b      	ldr	r3, [r3, #0]
 801152c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8011530:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011534:	d106      	bne.n	8011544 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 8011536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011538:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801153c:	d102      	bne.n	8011544 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 801153e:	4b20      	ldr	r3, [pc, #128]	@ (80115c0 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8011540:	637b      	str	r3, [r7, #52]	@ 0x34
 8011542:	e010      	b.n	8011566 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 8011544:	4b1c      	ldr	r3, [pc, #112]	@ (80115b8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801154c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8011550:	d106      	bne.n	8011560 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 8011552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011554:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8011558:	d102      	bne.n	8011560 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 801155a:	4b1a      	ldr	r3, [pc, #104]	@ (80115c4 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 801155c:	637b      	str	r3, [r7, #52]	@ 0x34
 801155e:	e002      	b.n	8011566 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 8011560:	2300      	movs	r3, #0
 8011562:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8011564:	e11f      	b.n	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8011566:	e11e      	b.n	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8011568:	4b13      	ldr	r3, [pc, #76]	@ (80115b8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 801156a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 801156e:	f003 0303 	and.w	r3, r3, #3
 8011572:	633b      	str	r3, [r7, #48]	@ 0x30
 8011574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011576:	2b03      	cmp	r3, #3
 8011578:	d85f      	bhi.n	801163a <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 801157a:	a201      	add	r2, pc, #4	@ (adr r2, 8011580 <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 801157c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011580:	08011591 	.word	0x08011591
 8011584:	08011599 	.word	0x08011599
 8011588:	080115a9 	.word	0x080115a9
 801158c:	080115c9 	.word	0x080115c9

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 8011590:	f7fb f998 	bl	800c8c4 <HAL_RCC_GetHCLKFreq>
 8011594:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8011596:	e053      	b.n	8011640 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8011598:	f107 0320 	add.w	r3, r7, #32
 801159c:	4618      	mov	r0, r3
 801159e:	f7fd f979 	bl	800e894 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80115a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115a4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80115a6:	e04b      	b.n	8011640 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80115a8:	f107 0314 	add.w	r3, r7, #20
 80115ac:	4618      	mov	r0, r3
 80115ae:	f7fd fadb 	bl	800eb68 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 80115b2:	69fb      	ldr	r3, [r7, #28]
 80115b4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80115b6:	e043      	b.n	8011640 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 80115b8:	44020c00 	.word	0x44020c00
 80115bc:	03d09000 	.word	0x03d09000
 80115c0:	003d0900 	.word	0x003d0900
 80115c4:	017d7840 	.word	0x017d7840
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80115c8:	4b79      	ldr	r3, [pc, #484]	@ (80117b0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80115ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80115ce:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80115d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80115d4:	4b76      	ldr	r3, [pc, #472]	@ (80117b0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80115d6:	681b      	ldr	r3, [r3, #0]
 80115d8:	f003 0302 	and.w	r3, r3, #2
 80115dc:	2b02      	cmp	r3, #2
 80115de:	d10c      	bne.n	80115fa <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 80115e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	d109      	bne.n	80115fa <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80115e6:	4b72      	ldr	r3, [pc, #456]	@ (80117b0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	08db      	lsrs	r3, r3, #3
 80115ec:	f003 0303 	and.w	r3, r3, #3
 80115f0:	4a70      	ldr	r2, [pc, #448]	@ (80117b4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 80115f2:	fa22 f303 	lsr.w	r3, r2, r3
 80115f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80115f8:	e01e      	b.n	8011638 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80115fa:	4b6d      	ldr	r3, [pc, #436]	@ (80117b0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8011602:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011606:	d106      	bne.n	8011616 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 8011608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801160a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801160e:	d102      	bne.n	8011616 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8011610:	4b69      	ldr	r3, [pc, #420]	@ (80117b8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 8011612:	637b      	str	r3, [r7, #52]	@ 0x34
 8011614:	e010      	b.n	8011638 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8011616:	4b66      	ldr	r3, [pc, #408]	@ (80117b0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8011618:	681b      	ldr	r3, [r3, #0]
 801161a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801161e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8011622:	d106      	bne.n	8011632 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 8011624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011626:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801162a:	d102      	bne.n	8011632 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 801162c:	4b63      	ldr	r3, [pc, #396]	@ (80117bc <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 801162e:	637b      	str	r3, [r7, #52]	@ 0x34
 8011630:	e002      	b.n	8011638 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8011632:	2300      	movs	r3, #0
 8011634:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8011636:	e003      	b.n	8011640 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8011638:	e002      	b.n	8011640 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 801163a:	2300      	movs	r3, #0
 801163c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 801163e:	bf00      	nop
          }
        }
        break;
 8011640:	e0b1      	b.n	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8011642:	4b5b      	ldr	r3, [pc, #364]	@ (80117b0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8011644:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8011648:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 801164c:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 801164e:	4b58      	ldr	r3, [pc, #352]	@ (80117b0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8011650:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8011654:	f003 0302 	and.w	r3, r3, #2
 8011658:	2b02      	cmp	r3, #2
 801165a:	d106      	bne.n	801166a <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 801165c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801165e:	2b00      	cmp	r3, #0
 8011660:	d103      	bne.n	801166a <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 8011662:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011666:	637b      	str	r3, [r7, #52]	@ 0x34
 8011668:	e01f      	b.n	80116aa <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 801166a:	4b51      	ldr	r3, [pc, #324]	@ (80117b0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 801166c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8011670:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8011674:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8011678:	d106      	bne.n	8011688 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 801167a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801167c:	2b40      	cmp	r3, #64	@ 0x40
 801167e:	d103      	bne.n	8011688 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 8011680:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8011684:	637b      	str	r3, [r7, #52]	@ 0x34
 8011686:	e010      	b.n	80116aa <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 8011688:	4b49      	ldr	r3, [pc, #292]	@ (80117b0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 801168a:	681b      	ldr	r3, [r3, #0]
 801168c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8011690:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011694:	d106      	bne.n	80116a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 8011696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011698:	2b80      	cmp	r3, #128	@ 0x80
 801169a:	d103      	bne.n	80116a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 801169c:	f248 0312 	movw	r3, #32786	@ 0x8012
 80116a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80116a2:	e002      	b.n	80116aa <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 80116a4:	2300      	movs	r3, #0
 80116a6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 80116a8:	e07d      	b.n	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80116aa:	e07c      	b.n	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80116ac:	4b40      	ldr	r3, [pc, #256]	@ (80117b0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80116ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80116b2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80116b6:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 80116b8:	4b3d      	ldr	r3, [pc, #244]	@ (80117b0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80116ba:	681b      	ldr	r3, [r3, #0]
 80116bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80116c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80116c4:	d105      	bne.n	80116d2 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 80116c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d102      	bne.n	80116d2 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 80116cc:	4b3c      	ldr	r3, [pc, #240]	@ (80117c0 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 80116ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80116d0:	e031      	b.n	8011736 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 80116d2:	4b37      	ldr	r3, [pc, #220]	@ (80117b0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80116d4:	681b      	ldr	r3, [r3, #0]
 80116d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80116da:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80116de:	d10a      	bne.n	80116f6 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 80116e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80116e2:	2b10      	cmp	r3, #16
 80116e4:	d107      	bne.n	80116f6 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80116e6:	f107 0320 	add.w	r3, r7, #32
 80116ea:	4618      	mov	r0, r3
 80116ec:	f7fd f8d2 	bl	800e894 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80116f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80116f4:	e01f      	b.n	8011736 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 80116f6:	4b2e      	ldr	r3, [pc, #184]	@ (80117b0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80116f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80116fc:	f003 0302 	and.w	r3, r3, #2
 8011700:	2b02      	cmp	r3, #2
 8011702:	d106      	bne.n	8011712 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 8011704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011706:	2b20      	cmp	r3, #32
 8011708:	d103      	bne.n	8011712 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 801170a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801170e:	637b      	str	r3, [r7, #52]	@ 0x34
 8011710:	e011      	b.n	8011736 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8011712:	4b27      	ldr	r3, [pc, #156]	@ (80117b0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8011714:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8011718:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801171c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8011720:	d106      	bne.n	8011730 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 8011722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011724:	2b30      	cmp	r3, #48	@ 0x30
 8011726:	d103      	bne.n	8011730 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 8011728:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 801172c:	637b      	str	r3, [r7, #52]	@ 0x34
 801172e:	e002      	b.n	8011736 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8011730:	2300      	movs	r3, #0
 8011732:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8011734:	e037      	b.n	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8011736:	e036      	b.n	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8011738:	4b1d      	ldr	r3, [pc, #116]	@ (80117b0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 801173a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 801173e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8011742:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8011744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011746:	2b10      	cmp	r3, #16
 8011748:	d107      	bne.n	801175a <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801174a:	f107 0320 	add.w	r3, r7, #32
 801174e:	4618      	mov	r0, r3
 8011750:	f7fd f8a0 	bl	800e894 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8011754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011756:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8011758:	e025      	b.n	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 801175a:	4b15      	ldr	r3, [pc, #84]	@ (80117b0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 801175c:	681b      	ldr	r3, [r3, #0]
 801175e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8011762:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011766:	d10a      	bne.n	801177e <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 8011768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801176a:	2b20      	cmp	r3, #32
 801176c:	d107      	bne.n	801177e <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801176e:	f107 0308 	add.w	r3, r7, #8
 8011772:	4618      	mov	r0, r3
 8011774:	f7fd fb62 	bl	800ee3c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8011778:	68fb      	ldr	r3, [r7, #12]
 801177a:	637b      	str	r3, [r7, #52]	@ 0x34
 801177c:	e00f      	b.n	801179e <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 801177e:	4b0c      	ldr	r3, [pc, #48]	@ (80117b0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8011780:	681b      	ldr	r3, [r3, #0]
 8011782:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8011786:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801178a:	d105      	bne.n	8011798 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 801178c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801178e:	2b30      	cmp	r3, #48	@ 0x30
 8011790:	d102      	bne.n	8011798 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 8011792:	4b0b      	ldr	r3, [pc, #44]	@ (80117c0 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8011794:	637b      	str	r3, [r7, #52]	@ 0x34
 8011796:	e002      	b.n	801179e <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8011798:	2300      	movs	r3, #0
 801179a:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 801179c:	e003      	b.n	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 801179e:	e002      	b.n	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 80117a0:	2300      	movs	r3, #0
 80117a2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80117a4:	bf00      	nop
    }
  }

  return (frequency);
 80117a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80117a8:	4618      	mov	r0, r3
 80117aa:	373c      	adds	r7, #60	@ 0x3c
 80117ac:	46bd      	mov	sp, r7
 80117ae:	bd90      	pop	{r4, r7, pc}
 80117b0:	44020c00 	.word	0x44020c00
 80117b4:	03d09000 	.word	0x03d09000
 80117b8:	003d0900 	.word	0x003d0900
 80117bc:	017d7840 	.word	0x017d7840
 80117c0:	02dc6c00 	.word	0x02dc6c00

080117c4 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80117c4:	b580      	push	{r7, lr}
 80117c6:	b084      	sub	sp, #16
 80117c8:	af00      	add	r7, sp, #0
 80117ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 80117cc:	4b48      	ldr	r3, [pc, #288]	@ (80118f0 <RCCEx_PLL2_Config+0x12c>)
 80117ce:	681b      	ldr	r3, [r3, #0]
 80117d0:	4a47      	ldr	r2, [pc, #284]	@ (80118f0 <RCCEx_PLL2_Config+0x12c>)
 80117d2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80117d6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80117d8:	f7f4 f8ea 	bl	80059b0 <HAL_GetTick>
 80117dc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80117de:	e008      	b.n	80117f2 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80117e0:	f7f4 f8e6 	bl	80059b0 <HAL_GetTick>
 80117e4:	4602      	mov	r2, r0
 80117e6:	68fb      	ldr	r3, [r7, #12]
 80117e8:	1ad3      	subs	r3, r2, r3
 80117ea:	2b02      	cmp	r3, #2
 80117ec:	d901      	bls.n	80117f2 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80117ee:	2303      	movs	r3, #3
 80117f0:	e07a      	b.n	80118e8 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80117f2:	4b3f      	ldr	r3, [pc, #252]	@ (80118f0 <RCCEx_PLL2_Config+0x12c>)
 80117f4:	681b      	ldr	r3, [r3, #0]
 80117f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	d1f0      	bne.n	80117e0 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80117fe:	4b3c      	ldr	r3, [pc, #240]	@ (80118f0 <RCCEx_PLL2_Config+0x12c>)
 8011800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011802:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8011806:	f023 0303 	bic.w	r3, r3, #3
 801180a:	687a      	ldr	r2, [r7, #4]
 801180c:	6811      	ldr	r1, [r2, #0]
 801180e:	687a      	ldr	r2, [r7, #4]
 8011810:	6852      	ldr	r2, [r2, #4]
 8011812:	0212      	lsls	r2, r2, #8
 8011814:	430a      	orrs	r2, r1
 8011816:	4936      	ldr	r1, [pc, #216]	@ (80118f0 <RCCEx_PLL2_Config+0x12c>)
 8011818:	4313      	orrs	r3, r2
 801181a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	689b      	ldr	r3, [r3, #8]
 8011820:	3b01      	subs	r3, #1
 8011822:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	68db      	ldr	r3, [r3, #12]
 801182a:	3b01      	subs	r3, #1
 801182c:	025b      	lsls	r3, r3, #9
 801182e:	b29b      	uxth	r3, r3
 8011830:	431a      	orrs	r2, r3
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	691b      	ldr	r3, [r3, #16]
 8011836:	3b01      	subs	r3, #1
 8011838:	041b      	lsls	r3, r3, #16
 801183a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801183e:	431a      	orrs	r2, r3
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	695b      	ldr	r3, [r3, #20]
 8011844:	3b01      	subs	r3, #1
 8011846:	061b      	lsls	r3, r3, #24
 8011848:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801184c:	4928      	ldr	r1, [pc, #160]	@ (80118f0 <RCCEx_PLL2_Config+0x12c>)
 801184e:	4313      	orrs	r3, r2
 8011850:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8011852:	4b27      	ldr	r3, [pc, #156]	@ (80118f0 <RCCEx_PLL2_Config+0x12c>)
 8011854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011856:	f023 020c 	bic.w	r2, r3, #12
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	699b      	ldr	r3, [r3, #24]
 801185e:	4924      	ldr	r1, [pc, #144]	@ (80118f0 <RCCEx_PLL2_Config+0x12c>)
 8011860:	4313      	orrs	r3, r2
 8011862:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8011864:	4b22      	ldr	r3, [pc, #136]	@ (80118f0 <RCCEx_PLL2_Config+0x12c>)
 8011866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011868:	f023 0220 	bic.w	r2, r3, #32
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	69db      	ldr	r3, [r3, #28]
 8011870:	491f      	ldr	r1, [pc, #124]	@ (80118f0 <RCCEx_PLL2_Config+0x12c>)
 8011872:	4313      	orrs	r3, r2
 8011874:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8011876:	4b1e      	ldr	r3, [pc, #120]	@ (80118f0 <RCCEx_PLL2_Config+0x12c>)
 8011878:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801187e:	491c      	ldr	r1, [pc, #112]	@ (80118f0 <RCCEx_PLL2_Config+0x12c>)
 8011880:	4313      	orrs	r3, r2
 8011882:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8011884:	4b1a      	ldr	r3, [pc, #104]	@ (80118f0 <RCCEx_PLL2_Config+0x12c>)
 8011886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011888:	4a19      	ldr	r2, [pc, #100]	@ (80118f0 <RCCEx_PLL2_Config+0x12c>)
 801188a:	f023 0310 	bic.w	r3, r3, #16
 801188e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8011890:	4b17      	ldr	r3, [pc, #92]	@ (80118f0 <RCCEx_PLL2_Config+0x12c>)
 8011892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011894:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8011898:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 801189c:	687a      	ldr	r2, [r7, #4]
 801189e:	6a12      	ldr	r2, [r2, #32]
 80118a0:	00d2      	lsls	r2, r2, #3
 80118a2:	4913      	ldr	r1, [pc, #76]	@ (80118f0 <RCCEx_PLL2_Config+0x12c>)
 80118a4:	4313      	orrs	r3, r2
 80118a6:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 80118a8:	4b11      	ldr	r3, [pc, #68]	@ (80118f0 <RCCEx_PLL2_Config+0x12c>)
 80118aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80118ac:	4a10      	ldr	r2, [pc, #64]	@ (80118f0 <RCCEx_PLL2_Config+0x12c>)
 80118ae:	f043 0310 	orr.w	r3, r3, #16
 80118b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 80118b4:	4b0e      	ldr	r3, [pc, #56]	@ (80118f0 <RCCEx_PLL2_Config+0x12c>)
 80118b6:	681b      	ldr	r3, [r3, #0]
 80118b8:	4a0d      	ldr	r2, [pc, #52]	@ (80118f0 <RCCEx_PLL2_Config+0x12c>)
 80118ba:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80118be:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80118c0:	f7f4 f876 	bl	80059b0 <HAL_GetTick>
 80118c4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80118c6:	e008      	b.n	80118da <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80118c8:	f7f4 f872 	bl	80059b0 <HAL_GetTick>
 80118cc:	4602      	mov	r2, r0
 80118ce:	68fb      	ldr	r3, [r7, #12]
 80118d0:	1ad3      	subs	r3, r2, r3
 80118d2:	2b02      	cmp	r3, #2
 80118d4:	d901      	bls.n	80118da <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 80118d6:	2303      	movs	r3, #3
 80118d8:	e006      	b.n	80118e8 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80118da:	4b05      	ldr	r3, [pc, #20]	@ (80118f0 <RCCEx_PLL2_Config+0x12c>)
 80118dc:	681b      	ldr	r3, [r3, #0]
 80118de:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d0f0      	beq.n	80118c8 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 80118e6:	2300      	movs	r3, #0

}
 80118e8:	4618      	mov	r0, r3
 80118ea:	3710      	adds	r7, #16
 80118ec:	46bd      	mov	sp, r7
 80118ee:	bd80      	pop	{r7, pc}
 80118f0:	44020c00 	.word	0x44020c00

080118f4 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 80118f4:	b580      	push	{r7, lr}
 80118f6:	b084      	sub	sp, #16
 80118f8:	af00      	add	r7, sp, #0
 80118fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 80118fc:	4b48      	ldr	r3, [pc, #288]	@ (8011a20 <RCCEx_PLL3_Config+0x12c>)
 80118fe:	681b      	ldr	r3, [r3, #0]
 8011900:	4a47      	ldr	r2, [pc, #284]	@ (8011a20 <RCCEx_PLL3_Config+0x12c>)
 8011902:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8011906:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8011908:	f7f4 f852 	bl	80059b0 <HAL_GetTick>
 801190c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801190e:	e008      	b.n	8011922 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8011910:	f7f4 f84e 	bl	80059b0 <HAL_GetTick>
 8011914:	4602      	mov	r2, r0
 8011916:	68fb      	ldr	r3, [r7, #12]
 8011918:	1ad3      	subs	r3, r2, r3
 801191a:	2b02      	cmp	r3, #2
 801191c:	d901      	bls.n	8011922 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 801191e:	2303      	movs	r3, #3
 8011920:	e07a      	b.n	8011a18 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8011922:	4b3f      	ldr	r3, [pc, #252]	@ (8011a20 <RCCEx_PLL3_Config+0x12c>)
 8011924:	681b      	ldr	r3, [r3, #0]
 8011926:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801192a:	2b00      	cmp	r3, #0
 801192c:	d1f0      	bne.n	8011910 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 801192e:	4b3c      	ldr	r3, [pc, #240]	@ (8011a20 <RCCEx_PLL3_Config+0x12c>)
 8011930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011932:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8011936:	f023 0303 	bic.w	r3, r3, #3
 801193a:	687a      	ldr	r2, [r7, #4]
 801193c:	6811      	ldr	r1, [r2, #0]
 801193e:	687a      	ldr	r2, [r7, #4]
 8011940:	6852      	ldr	r2, [r2, #4]
 8011942:	0212      	lsls	r2, r2, #8
 8011944:	430a      	orrs	r2, r1
 8011946:	4936      	ldr	r1, [pc, #216]	@ (8011a20 <RCCEx_PLL3_Config+0x12c>)
 8011948:	4313      	orrs	r3, r2
 801194a:	630b      	str	r3, [r1, #48]	@ 0x30
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	689b      	ldr	r3, [r3, #8]
 8011950:	3b01      	subs	r3, #1
 8011952:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	68db      	ldr	r3, [r3, #12]
 801195a:	3b01      	subs	r3, #1
 801195c:	025b      	lsls	r3, r3, #9
 801195e:	b29b      	uxth	r3, r3
 8011960:	431a      	orrs	r2, r3
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	691b      	ldr	r3, [r3, #16]
 8011966:	3b01      	subs	r3, #1
 8011968:	041b      	lsls	r3, r3, #16
 801196a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801196e:	431a      	orrs	r2, r3
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	695b      	ldr	r3, [r3, #20]
 8011974:	3b01      	subs	r3, #1
 8011976:	061b      	lsls	r3, r3, #24
 8011978:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801197c:	4928      	ldr	r1, [pc, #160]	@ (8011a20 <RCCEx_PLL3_Config+0x12c>)
 801197e:	4313      	orrs	r3, r2
 8011980:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8011982:	4b27      	ldr	r3, [pc, #156]	@ (8011a20 <RCCEx_PLL3_Config+0x12c>)
 8011984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011986:	f023 020c 	bic.w	r2, r3, #12
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	699b      	ldr	r3, [r3, #24]
 801198e:	4924      	ldr	r1, [pc, #144]	@ (8011a20 <RCCEx_PLL3_Config+0x12c>)
 8011990:	4313      	orrs	r3, r2
 8011992:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8011994:	4b22      	ldr	r3, [pc, #136]	@ (8011a20 <RCCEx_PLL3_Config+0x12c>)
 8011996:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011998:	f023 0220 	bic.w	r2, r3, #32
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	69db      	ldr	r3, [r3, #28]
 80119a0:	491f      	ldr	r1, [pc, #124]	@ (8011a20 <RCCEx_PLL3_Config+0x12c>)
 80119a2:	4313      	orrs	r3, r2
 80119a4:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80119a6:	4b1e      	ldr	r3, [pc, #120]	@ (8011a20 <RCCEx_PLL3_Config+0x12c>)
 80119a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80119ae:	491c      	ldr	r1, [pc, #112]	@ (8011a20 <RCCEx_PLL3_Config+0x12c>)
 80119b0:	4313      	orrs	r3, r2
 80119b2:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 80119b4:	4b1a      	ldr	r3, [pc, #104]	@ (8011a20 <RCCEx_PLL3_Config+0x12c>)
 80119b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80119b8:	4a19      	ldr	r2, [pc, #100]	@ (8011a20 <RCCEx_PLL3_Config+0x12c>)
 80119ba:	f023 0310 	bic.w	r3, r3, #16
 80119be:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 80119c0:	4b17      	ldr	r3, [pc, #92]	@ (8011a20 <RCCEx_PLL3_Config+0x12c>)
 80119c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80119c4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80119c8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80119cc:	687a      	ldr	r2, [r7, #4]
 80119ce:	6a12      	ldr	r2, [r2, #32]
 80119d0:	00d2      	lsls	r2, r2, #3
 80119d2:	4913      	ldr	r1, [pc, #76]	@ (8011a20 <RCCEx_PLL3_Config+0x12c>)
 80119d4:	4313      	orrs	r3, r2
 80119d6:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 80119d8:	4b11      	ldr	r3, [pc, #68]	@ (8011a20 <RCCEx_PLL3_Config+0x12c>)
 80119da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80119dc:	4a10      	ldr	r2, [pc, #64]	@ (8011a20 <RCCEx_PLL3_Config+0x12c>)
 80119de:	f043 0310 	orr.w	r3, r3, #16
 80119e2:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 80119e4:	4b0e      	ldr	r3, [pc, #56]	@ (8011a20 <RCCEx_PLL3_Config+0x12c>)
 80119e6:	681b      	ldr	r3, [r3, #0]
 80119e8:	4a0d      	ldr	r2, [pc, #52]	@ (8011a20 <RCCEx_PLL3_Config+0x12c>)
 80119ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80119ee:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80119f0:	f7f3 ffde 	bl	80059b0 <HAL_GetTick>
 80119f4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80119f6:	e008      	b.n	8011a0a <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80119f8:	f7f3 ffda 	bl	80059b0 <HAL_GetTick>
 80119fc:	4602      	mov	r2, r0
 80119fe:	68fb      	ldr	r3, [r7, #12]
 8011a00:	1ad3      	subs	r3, r2, r3
 8011a02:	2b02      	cmp	r3, #2
 8011a04:	d901      	bls.n	8011a0a <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 8011a06:	2303      	movs	r3, #3
 8011a08:	e006      	b.n	8011a18 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8011a0a:	4b05      	ldr	r3, [pc, #20]	@ (8011a20 <RCCEx_PLL3_Config+0x12c>)
 8011a0c:	681b      	ldr	r3, [r3, #0]
 8011a0e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d0f0      	beq.n	80119f8 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 8011a16:	2300      	movs	r3, #0
}
 8011a18:	4618      	mov	r0, r3
 8011a1a:	3710      	adds	r7, #16
 8011a1c:	46bd      	mov	sp, r7
 8011a1e:	bd80      	pop	{r7, pc}
 8011a20:	44020c00 	.word	0x44020c00

08011a24 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8011a24:	b580      	push	{r7, lr}
 8011a26:	b084      	sub	sp, #16
 8011a28:	af00      	add	r7, sp, #0
 8011a2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8011a2c:	2301      	movs	r3, #1
 8011a2e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d071      	beq.n	8011b1a <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011a3c:	b2db      	uxtb	r3, r3
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d106      	bne.n	8011a50 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	2200      	movs	r2, #0
 8011a46:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8011a4a:	6878      	ldr	r0, [r7, #4]
 8011a4c:	f7f2 fedc 	bl	8004808 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	2202      	movs	r2, #2
 8011a54:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8011a58:	4b32      	ldr	r3, [pc, #200]	@ (8011b24 <HAL_RTC_Init+0x100>)
 8011a5a:	68db      	ldr	r3, [r3, #12]
 8011a5c:	f003 0310 	and.w	r3, r3, #16
 8011a60:	2b10      	cmp	r3, #16
 8011a62:	d051      	beq.n	8011b08 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011a64:	4b2f      	ldr	r3, [pc, #188]	@ (8011b24 <HAL_RTC_Init+0x100>)
 8011a66:	22ca      	movs	r2, #202	@ 0xca
 8011a68:	625a      	str	r2, [r3, #36]	@ 0x24
 8011a6a:	4b2e      	ldr	r3, [pc, #184]	@ (8011b24 <HAL_RTC_Init+0x100>)
 8011a6c:	2253      	movs	r2, #83	@ 0x53
 8011a6e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8011a70:	6878      	ldr	r0, [r7, #4]
 8011a72:	f000 fa53 	bl	8011f1c <RTC_EnterInitMode>
 8011a76:	4603      	mov	r3, r0
 8011a78:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8011a7a:	7bfb      	ldrb	r3, [r7, #15]
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d13f      	bne.n	8011b00 <HAL_RTC_Init+0xdc>
      {
#if defined(RTC_CR_OSEL)
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8011a80:	4b28      	ldr	r3, [pc, #160]	@ (8011b24 <HAL_RTC_Init+0x100>)
 8011a82:	699b      	ldr	r3, [r3, #24]
 8011a84:	4a27      	ldr	r2, [pc, #156]	@ (8011b24 <HAL_RTC_Init+0x100>)
 8011a86:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 8011a8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011a8e:	6193      	str	r3, [r2, #24]

        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8011a90:	4b24      	ldr	r3, [pc, #144]	@ (8011b24 <HAL_RTC_Init+0x100>)
 8011a92:	699a      	ldr	r2, [r3, #24]
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	6859      	ldr	r1, [r3, #4]
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	691b      	ldr	r3, [r3, #16]
 8011a9c:	4319      	orrs	r1, r3
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	699b      	ldr	r3, [r3, #24]
 8011aa2:	430b      	orrs	r3, r1
 8011aa4:	491f      	ldr	r1, [pc, #124]	@ (8011b24 <HAL_RTC_Init+0x100>)
 8011aa6:	4313      	orrs	r3, r2
 8011aa8:	618b      	str	r3, [r1, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, hrtc->Init.HourFormat);
#endif /* RTC_CR_OSEL */

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	68da      	ldr	r2, [r3, #12]
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	689b      	ldr	r3, [r3, #8]
 8011ab2:	041b      	lsls	r3, r3, #16
 8011ab4:	491b      	ldr	r1, [pc, #108]	@ (8011b24 <HAL_RTC_Init+0x100>)
 8011ab6:	4313      	orrs	r3, r2
 8011ab8:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8011aba:	4b1a      	ldr	r3, [pc, #104]	@ (8011b24 <HAL_RTC_Init+0x100>)
 8011abc:	68db      	ldr	r3, [r3, #12]
 8011abe:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011aca:	430b      	orrs	r3, r1
 8011acc:	4915      	ldr	r1, [pc, #84]	@ (8011b24 <HAL_RTC_Init+0x100>)
 8011ace:	4313      	orrs	r3, r2
 8011ad0:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8011ad2:	6878      	ldr	r0, [r7, #4]
 8011ad4:	f000 fa5e 	bl	8011f94 <RTC_ExitInitMode>
 8011ad8:	4603      	mov	r3, r0
 8011ada:	73fb      	strb	r3, [r7, #15]

#if defined(RTC_CR_OSEL)
        if (status == HAL_OK)
 8011adc:	7bfb      	ldrb	r3, [r7, #15]
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	d10e      	bne.n	8011b00 <HAL_RTC_Init+0xdc>
        {
#if defined(RTC_CR_OUT2EN)
          MODIFY_REG(RTC->CR, \
 8011ae2:	4b10      	ldr	r3, [pc, #64]	@ (8011b24 <HAL_RTC_Init+0x100>)
 8011ae4:	699b      	ldr	r3, [r3, #24]
 8011ae6:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	6a19      	ldr	r1, [r3, #32]
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	69db      	ldr	r3, [r3, #28]
 8011af2:	4319      	orrs	r1, r3
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	695b      	ldr	r3, [r3, #20]
 8011af8:	430b      	orrs	r3, r1
 8011afa:	490a      	ldr	r1, [pc, #40]	@ (8011b24 <HAL_RTC_Init+0x100>)
 8011afc:	4313      	orrs	r3, r2
 8011afe:	618b      	str	r3, [r1, #24]
        }
#endif /* RTC_CR_OSEL */
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011b00:	4b08      	ldr	r3, [pc, #32]	@ (8011b24 <HAL_RTC_Init+0x100>)
 8011b02:	22ff      	movs	r2, #255	@ 0xff
 8011b04:	625a      	str	r2, [r3, #36]	@ 0x24
 8011b06:	e001      	b.n	8011b0c <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8011b08:	2300      	movs	r3, #0
 8011b0a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8011b0c:	7bfb      	ldrb	r3, [r7, #15]
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d103      	bne.n	8011b1a <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	2201      	movs	r2, #1
 8011b16:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 8011b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b1c:	4618      	mov	r0, r3
 8011b1e:	3710      	adds	r7, #16
 8011b20:	46bd      	mov	sp, r7
 8011b22:	bd80      	pop	{r7, pc}
 8011b24:	44007800 	.word	0x44007800

08011b28 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8011b28:	b590      	push	{r4, r7, lr}
 8011b2a:	b087      	sub	sp, #28
 8011b2c:	af00      	add	r7, sp, #0
 8011b2e:	60f8      	str	r0, [r7, #12]
 8011b30:	60b9      	str	r1, [r7, #8]
 8011b32:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8011b34:	68fb      	ldr	r3, [r7, #12]
 8011b36:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8011b3a:	2b01      	cmp	r3, #1
 8011b3c:	d101      	bne.n	8011b42 <HAL_RTC_SetTime+0x1a>
 8011b3e:	2302      	movs	r3, #2
 8011b40:	e07e      	b.n	8011c40 <HAL_RTC_SetTime+0x118>
 8011b42:	68fb      	ldr	r3, [r7, #12]
 8011b44:	2201      	movs	r2, #1
 8011b46:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8011b4a:	68fb      	ldr	r3, [r7, #12]
 8011b4c:	2202      	movs	r2, #2
 8011b4e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011b52:	4b3d      	ldr	r3, [pc, #244]	@ (8011c48 <HAL_RTC_SetTime+0x120>)
 8011b54:	22ca      	movs	r2, #202	@ 0xca
 8011b56:	625a      	str	r2, [r3, #36]	@ 0x24
 8011b58:	4b3b      	ldr	r3, [pc, #236]	@ (8011c48 <HAL_RTC_SetTime+0x120>)
 8011b5a:	2253      	movs	r2, #83	@ 0x53
 8011b5c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8011b5e:	68f8      	ldr	r0, [r7, #12]
 8011b60:	f000 f9dc 	bl	8011f1c <RTC_EnterInitMode>
 8011b64:	4603      	mov	r3, r0
 8011b66:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8011b68:	7cfb      	ldrb	r3, [r7, #19]
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d159      	bne.n	8011c22 <HAL_RTC_SetTime+0xfa>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8011b6e:	4b36      	ldr	r3, [pc, #216]	@ (8011c48 <HAL_RTC_SetTime+0x120>)
 8011b70:	68db      	ldr	r3, [r3, #12]
 8011b72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8011b76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011b7a:	d04d      	beq.n	8011c18 <HAL_RTC_SetTime+0xf0>
    {
      if (Format == RTC_FORMAT_BIN)
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	d125      	bne.n	8011bce <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8011b82:	4b31      	ldr	r3, [pc, #196]	@ (8011c48 <HAL_RTC_SetTime+0x120>)
 8011b84:	699b      	ldr	r3, [r3, #24]
 8011b86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d102      	bne.n	8011b94 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8011b8e:	68bb      	ldr	r3, [r7, #8]
 8011b90:	2200      	movs	r2, #0
 8011b92:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8011b94:	68bb      	ldr	r3, [r7, #8]
 8011b96:	781b      	ldrb	r3, [r3, #0]
 8011b98:	4618      	mov	r0, r3
 8011b9a:	f000 fa39 	bl	8012010 <RTC_ByteToBcd2>
 8011b9e:	4603      	mov	r3, r0
 8011ba0:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8011ba2:	68bb      	ldr	r3, [r7, #8]
 8011ba4:	785b      	ldrb	r3, [r3, #1]
 8011ba6:	4618      	mov	r0, r3
 8011ba8:	f000 fa32 	bl	8012010 <RTC_ByteToBcd2>
 8011bac:	4603      	mov	r3, r0
 8011bae:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8011bb0:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8011bb2:	68bb      	ldr	r3, [r7, #8]
 8011bb4:	789b      	ldrb	r3, [r3, #2]
 8011bb6:	4618      	mov	r0, r3
 8011bb8:	f000 fa2a 	bl	8012010 <RTC_ByteToBcd2>
 8011bbc:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8011bbe:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8011bc2:	68bb      	ldr	r3, [r7, #8]
 8011bc4:	78db      	ldrb	r3, [r3, #3]
 8011bc6:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8011bc8:	4313      	orrs	r3, r2
 8011bca:	617b      	str	r3, [r7, #20]
 8011bcc:	e017      	b.n	8011bfe <HAL_RTC_SetTime+0xd6>
      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8011bce:	4b1e      	ldr	r3, [pc, #120]	@ (8011c48 <HAL_RTC_SetTime+0x120>)
 8011bd0:	699b      	ldr	r3, [r3, #24]
 8011bd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	d102      	bne.n	8011be0 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8011bda:	68bb      	ldr	r3, [r7, #8]
 8011bdc:	2200      	movs	r2, #0
 8011bde:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8011be0:	68bb      	ldr	r3, [r7, #8]
 8011be2:	781b      	ldrb	r3, [r3, #0]
 8011be4:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8011be6:	68bb      	ldr	r3, [r7, #8]
 8011be8:	785b      	ldrb	r3, [r3, #1]
 8011bea:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8011bec:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8011bee:	68ba      	ldr	r2, [r7, #8]
 8011bf0:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8011bf2:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8011bf4:	68bb      	ldr	r3, [r7, #8]
 8011bf6:	78db      	ldrb	r3, [r3, #3]
 8011bf8:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8011bfa:	4313      	orrs	r3, r2
 8011bfc:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8011bfe:	4a12      	ldr	r2, [pc, #72]	@ (8011c48 <HAL_RTC_SetTime+0x120>)
 8011c00:	697b      	ldr	r3, [r7, #20]
 8011c02:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8011c06:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8011c0a:	6013      	str	r3, [r2, #0]

      /* Clear the bits to be configured */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8011c0c:	4b0e      	ldr	r3, [pc, #56]	@ (8011c48 <HAL_RTC_SetTime+0x120>)
 8011c0e:	699b      	ldr	r3, [r3, #24]
 8011c10:	4a0d      	ldr	r2, [pc, #52]	@ (8011c48 <HAL_RTC_SetTime+0x120>)
 8011c12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8011c16:	6193      	str	r3, [r2, #24]
    }

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8011c18:	68f8      	ldr	r0, [r7, #12]
 8011c1a:	f000 f9bb 	bl	8011f94 <RTC_ExitInitMode>
 8011c1e:	4603      	mov	r3, r0
 8011c20:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011c22:	4b09      	ldr	r3, [pc, #36]	@ (8011c48 <HAL_RTC_SetTime+0x120>)
 8011c24:	22ff      	movs	r2, #255	@ 0xff
 8011c26:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8011c28:	7cfb      	ldrb	r3, [r7, #19]
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d103      	bne.n	8011c36 <HAL_RTC_SetTime+0x10e>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8011c2e:	68fb      	ldr	r3, [r7, #12]
 8011c30:	2201      	movs	r2, #1
 8011c32:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8011c36:	68fb      	ldr	r3, [r7, #12]
 8011c38:	2200      	movs	r2, #0
 8011c3a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 8011c3e:	7cfb      	ldrb	r3, [r7, #19]
}
 8011c40:	4618      	mov	r0, r3
 8011c42:	371c      	adds	r7, #28
 8011c44:	46bd      	mov	sp, r7
 8011c46:	bd90      	pop	{r4, r7, pc}
 8011c48:	44007800 	.word	0x44007800

08011c4c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(const RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8011c4c:	b580      	push	{r7, lr}
 8011c4e:	b086      	sub	sp, #24
 8011c50:	af00      	add	r7, sp, #0
 8011c52:	60f8      	str	r0, [r7, #12]
 8011c54:	60b9      	str	r1, [r7, #8]
 8011c56:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = READ_REG(RTC->SSR);
 8011c58:	4b2c      	ldr	r3, [pc, #176]	@ (8011d0c <HAL_RTC_GetTime+0xc0>)
 8011c5a:	689a      	ldr	r2, [r3, #8]
 8011c5c:	68bb      	ldr	r3, [r7, #8]
 8011c5e:	605a      	str	r2, [r3, #4]

  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8011c60:	4b2a      	ldr	r3, [pc, #168]	@ (8011d0c <HAL_RTC_GetTime+0xc0>)
 8011c62:	68db      	ldr	r3, [r3, #12]
 8011c64:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8011c68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011c6c:	d049      	beq.n	8011d02 <HAL_RTC_GetTime+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field */
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 8011c6e:	4b27      	ldr	r3, [pc, #156]	@ (8011d0c <HAL_RTC_GetTime+0xc0>)
 8011c70:	691b      	ldr	r3, [r3, #16]
 8011c72:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8011c76:	68bb      	ldr	r3, [r7, #8]
 8011c78:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 8011c7a:	4b24      	ldr	r3, [pc, #144]	@ (8011d0c <HAL_RTC_GetTime+0xc0>)
 8011c7c:	681b      	ldr	r3, [r3, #0]
 8011c7e:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8011c82:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8011c86:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8011c88:	697b      	ldr	r3, [r7, #20]
 8011c8a:	0c1b      	lsrs	r3, r3, #16
 8011c8c:	b2db      	uxtb	r3, r3
 8011c8e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011c92:	b2da      	uxtb	r2, r3
 8011c94:	68bb      	ldr	r3, [r7, #8]
 8011c96:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8011c98:	697b      	ldr	r3, [r7, #20]
 8011c9a:	0a1b      	lsrs	r3, r3, #8
 8011c9c:	b2db      	uxtb	r3, r3
 8011c9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011ca2:	b2da      	uxtb	r2, r3
 8011ca4:	68bb      	ldr	r3, [r7, #8]
 8011ca6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8011ca8:	697b      	ldr	r3, [r7, #20]
 8011caa:	b2db      	uxtb	r3, r3
 8011cac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011cb0:	b2da      	uxtb	r2, r3
 8011cb2:	68bb      	ldr	r3, [r7, #8]
 8011cb4:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8011cb6:	697b      	ldr	r3, [r7, #20]
 8011cb8:	0d9b      	lsrs	r3, r3, #22
 8011cba:	b2db      	uxtb	r3, r3
 8011cbc:	f003 0301 	and.w	r3, r3, #1
 8011cc0:	b2da      	uxtb	r2, r3
 8011cc2:	68bb      	ldr	r3, [r7, #8]
 8011cc4:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	d11a      	bne.n	8011d02 <HAL_RTC_GetTime+0xb6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8011ccc:	68bb      	ldr	r3, [r7, #8]
 8011cce:	781b      	ldrb	r3, [r3, #0]
 8011cd0:	4618      	mov	r0, r3
 8011cd2:	f000 f9bd 	bl	8012050 <RTC_Bcd2ToByte>
 8011cd6:	4603      	mov	r3, r0
 8011cd8:	461a      	mov	r2, r3
 8011cda:	68bb      	ldr	r3, [r7, #8]
 8011cdc:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8011cde:	68bb      	ldr	r3, [r7, #8]
 8011ce0:	785b      	ldrb	r3, [r3, #1]
 8011ce2:	4618      	mov	r0, r3
 8011ce4:	f000 f9b4 	bl	8012050 <RTC_Bcd2ToByte>
 8011ce8:	4603      	mov	r3, r0
 8011cea:	461a      	mov	r2, r3
 8011cec:	68bb      	ldr	r3, [r7, #8]
 8011cee:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8011cf0:	68bb      	ldr	r3, [r7, #8]
 8011cf2:	789b      	ldrb	r3, [r3, #2]
 8011cf4:	4618      	mov	r0, r3
 8011cf6:	f000 f9ab 	bl	8012050 <RTC_Bcd2ToByte>
 8011cfa:	4603      	mov	r3, r0
 8011cfc:	461a      	mov	r2, r3
 8011cfe:	68bb      	ldr	r3, [r7, #8]
 8011d00:	709a      	strb	r2, [r3, #2]
    }
  }

  return HAL_OK;
 8011d02:	2300      	movs	r3, #0
}
 8011d04:	4618      	mov	r0, r3
 8011d06:	3718      	adds	r7, #24
 8011d08:	46bd      	mov	sp, r7
 8011d0a:	bd80      	pop	{r7, pc}
 8011d0c:	44007800 	.word	0x44007800

08011d10 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8011d10:	b590      	push	{r4, r7, lr}
 8011d12:	b087      	sub	sp, #28
 8011d14:	af00      	add	r7, sp, #0
 8011d16:	60f8      	str	r0, [r7, #12]
 8011d18:	60b9      	str	r1, [r7, #8]
 8011d1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8011d1c:	68fb      	ldr	r3, [r7, #12]
 8011d1e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8011d22:	2b01      	cmp	r3, #1
 8011d24:	d101      	bne.n	8011d2a <HAL_RTC_SetDate+0x1a>
 8011d26:	2302      	movs	r3, #2
 8011d28:	e071      	b.n	8011e0e <HAL_RTC_SetDate+0xfe>
 8011d2a:	68fb      	ldr	r3, [r7, #12]
 8011d2c:	2201      	movs	r2, #1
 8011d2e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8011d32:	68fb      	ldr	r3, [r7, #12]
 8011d34:	2202      	movs	r2, #2
 8011d36:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	d10e      	bne.n	8011d5e <HAL_RTC_SetDate+0x4e>
 8011d40:	68bb      	ldr	r3, [r7, #8]
 8011d42:	785b      	ldrb	r3, [r3, #1]
 8011d44:	f003 0310 	and.w	r3, r3, #16
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	d008      	beq.n	8011d5e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8011d4c:	68bb      	ldr	r3, [r7, #8]
 8011d4e:	785b      	ldrb	r3, [r3, #1]
 8011d50:	f023 0310 	bic.w	r3, r3, #16
 8011d54:	b2db      	uxtb	r3, r3
 8011d56:	330a      	adds	r3, #10
 8011d58:	b2da      	uxtb	r2, r3
 8011d5a:	68bb      	ldr	r3, [r7, #8]
 8011d5c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d11c      	bne.n	8011d9e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8011d64:	68bb      	ldr	r3, [r7, #8]
 8011d66:	78db      	ldrb	r3, [r3, #3]
 8011d68:	4618      	mov	r0, r3
 8011d6a:	f000 f951 	bl	8012010 <RTC_ByteToBcd2>
 8011d6e:	4603      	mov	r3, r0
 8011d70:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8011d72:	68bb      	ldr	r3, [r7, #8]
 8011d74:	785b      	ldrb	r3, [r3, #1]
 8011d76:	4618      	mov	r0, r3
 8011d78:	f000 f94a 	bl	8012010 <RTC_ByteToBcd2>
 8011d7c:	4603      	mov	r3, r0
 8011d7e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8011d80:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8011d82:	68bb      	ldr	r3, [r7, #8]
 8011d84:	789b      	ldrb	r3, [r3, #2]
 8011d86:	4618      	mov	r0, r3
 8011d88:	f000 f942 	bl	8012010 <RTC_ByteToBcd2>
 8011d8c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8011d8e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8011d92:	68bb      	ldr	r3, [r7, #8]
 8011d94:	781b      	ldrb	r3, [r3, #0]
 8011d96:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8011d98:	4313      	orrs	r3, r2
 8011d9a:	617b      	str	r3, [r7, #20]
 8011d9c:	e00e      	b.n	8011dbc <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8011d9e:	68bb      	ldr	r3, [r7, #8]
 8011da0:	78db      	ldrb	r3, [r3, #3]
 8011da2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8011da4:	68bb      	ldr	r3, [r7, #8]
 8011da6:	785b      	ldrb	r3, [r3, #1]
 8011da8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8011daa:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8011dac:	68ba      	ldr	r2, [r7, #8]
 8011dae:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8011db0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8011db2:	68bb      	ldr	r3, [r7, #8]
 8011db4:	781b      	ldrb	r3, [r3, #0]
 8011db6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8011db8:	4313      	orrs	r3, r2
 8011dba:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011dbc:	4b16      	ldr	r3, [pc, #88]	@ (8011e18 <HAL_RTC_SetDate+0x108>)
 8011dbe:	22ca      	movs	r2, #202	@ 0xca
 8011dc0:	625a      	str	r2, [r3, #36]	@ 0x24
 8011dc2:	4b15      	ldr	r3, [pc, #84]	@ (8011e18 <HAL_RTC_SetDate+0x108>)
 8011dc4:	2253      	movs	r2, #83	@ 0x53
 8011dc6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8011dc8:	68f8      	ldr	r0, [r7, #12]
 8011dca:	f000 f8a7 	bl	8011f1c <RTC_EnterInitMode>
 8011dce:	4603      	mov	r3, r0
 8011dd0:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8011dd2:	7cfb      	ldrb	r3, [r7, #19]
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	d10b      	bne.n	8011df0 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8011dd8:	4a0f      	ldr	r2, [pc, #60]	@ (8011e18 <HAL_RTC_SetDate+0x108>)
 8011dda:	697b      	ldr	r3, [r7, #20]
 8011ddc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8011de0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8011de4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8011de6:	68f8      	ldr	r0, [r7, #12]
 8011de8:	f000 f8d4 	bl	8011f94 <RTC_ExitInitMode>
 8011dec:	4603      	mov	r3, r0
 8011dee:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011df0:	4b09      	ldr	r3, [pc, #36]	@ (8011e18 <HAL_RTC_SetDate+0x108>)
 8011df2:	22ff      	movs	r2, #255	@ 0xff
 8011df4:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8011df6:	7cfb      	ldrb	r3, [r7, #19]
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	d103      	bne.n	8011e04 <HAL_RTC_SetDate+0xf4>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8011dfc:	68fb      	ldr	r3, [r7, #12]
 8011dfe:	2201      	movs	r2, #1
 8011e00:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8011e04:	68fb      	ldr	r3, [r7, #12]
 8011e06:	2200      	movs	r2, #0
 8011e08:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 8011e0c:	7cfb      	ldrb	r3, [r7, #19]
}
 8011e0e:	4618      	mov	r0, r3
 8011e10:	371c      	adds	r7, #28
 8011e12:	46bd      	mov	sp, r7
 8011e14:	bd90      	pop	{r4, r7, pc}
 8011e16:	bf00      	nop
 8011e18:	44007800 	.word	0x44007800

08011e1c <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(const RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8011e1c:	b580      	push	{r7, lr}
 8011e1e:	b086      	sub	sp, #24
 8011e20:	af00      	add	r7, sp, #0
 8011e22:	60f8      	str	r0, [r7, #12]
 8011e24:	60b9      	str	r1, [r7, #8]
 8011e26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 8011e28:	4b22      	ldr	r3, [pc, #136]	@ (8011eb4 <HAL_RTC_GetDate+0x98>)
 8011e2a:	685b      	ldr	r3, [r3, #4]
 8011e2c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8011e30:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8011e34:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8011e36:	697b      	ldr	r3, [r7, #20]
 8011e38:	0c1b      	lsrs	r3, r3, #16
 8011e3a:	b2da      	uxtb	r2, r3
 8011e3c:	68bb      	ldr	r3, [r7, #8]
 8011e3e:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8011e40:	697b      	ldr	r3, [r7, #20]
 8011e42:	0a1b      	lsrs	r3, r3, #8
 8011e44:	b2db      	uxtb	r3, r3
 8011e46:	f003 031f 	and.w	r3, r3, #31
 8011e4a:	b2da      	uxtb	r2, r3
 8011e4c:	68bb      	ldr	r3, [r7, #8]
 8011e4e:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8011e50:	697b      	ldr	r3, [r7, #20]
 8011e52:	b2db      	uxtb	r3, r3
 8011e54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011e58:	b2da      	uxtb	r2, r3
 8011e5a:	68bb      	ldr	r3, [r7, #8]
 8011e5c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8011e5e:	697b      	ldr	r3, [r7, #20]
 8011e60:	0b5b      	lsrs	r3, r3, #13
 8011e62:	b2db      	uxtb	r3, r3
 8011e64:	f003 0307 	and.w	r3, r3, #7
 8011e68:	b2da      	uxtb	r2, r3
 8011e6a:	68bb      	ldr	r3, [r7, #8]
 8011e6c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	d11a      	bne.n	8011eaa <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8011e74:	68bb      	ldr	r3, [r7, #8]
 8011e76:	78db      	ldrb	r3, [r3, #3]
 8011e78:	4618      	mov	r0, r3
 8011e7a:	f000 f8e9 	bl	8012050 <RTC_Bcd2ToByte>
 8011e7e:	4603      	mov	r3, r0
 8011e80:	461a      	mov	r2, r3
 8011e82:	68bb      	ldr	r3, [r7, #8]
 8011e84:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8011e86:	68bb      	ldr	r3, [r7, #8]
 8011e88:	785b      	ldrb	r3, [r3, #1]
 8011e8a:	4618      	mov	r0, r3
 8011e8c:	f000 f8e0 	bl	8012050 <RTC_Bcd2ToByte>
 8011e90:	4603      	mov	r3, r0
 8011e92:	461a      	mov	r2, r3
 8011e94:	68bb      	ldr	r3, [r7, #8]
 8011e96:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8011e98:	68bb      	ldr	r3, [r7, #8]
 8011e9a:	789b      	ldrb	r3, [r3, #2]
 8011e9c:	4618      	mov	r0, r3
 8011e9e:	f000 f8d7 	bl	8012050 <RTC_Bcd2ToByte>
 8011ea2:	4603      	mov	r3, r0
 8011ea4:	461a      	mov	r2, r3
 8011ea6:	68bb      	ldr	r3, [r7, #8]
 8011ea8:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8011eaa:	2300      	movs	r3, #0
}
 8011eac:	4618      	mov	r0, r3
 8011eae:	3718      	adds	r7, #24
 8011eb0:	46bd      	mov	sp, r7
 8011eb2:	bd80      	pop	{r7, pc}
 8011eb4:	44007800 	.word	0x44007800

08011eb8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8011eb8:	b580      	push	{r7, lr}
 8011eba:	b084      	sub	sp, #16
 8011ebc:	af00      	add	r7, sp, #0
 8011ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8011ec0:	4b15      	ldr	r3, [pc, #84]	@ (8011f18 <HAL_RTC_WaitForSynchro+0x60>)
 8011ec2:	68db      	ldr	r3, [r3, #12]
 8011ec4:	4a14      	ldr	r2, [pc, #80]	@ (8011f18 <HAL_RTC_WaitForSynchro+0x60>)
 8011ec6:	f023 0320 	bic.w	r3, r3, #32
 8011eca:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8011ecc:	f7f3 fd70 	bl	80059b0 <HAL_GetTick>
 8011ed0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8011ed2:	e013      	b.n	8011efc <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8011ed4:	f7f3 fd6c 	bl	80059b0 <HAL_GetTick>
 8011ed8:	4602      	mov	r2, r0
 8011eda:	68fb      	ldr	r3, [r7, #12]
 8011edc:	1ad3      	subs	r3, r2, r3
 8011ede:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8011ee2:	d90b      	bls.n	8011efc <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8011ee4:	4b0c      	ldr	r3, [pc, #48]	@ (8011f18 <HAL_RTC_WaitForSynchro+0x60>)
 8011ee6:	68db      	ldr	r3, [r3, #12]
 8011ee8:	f003 0320 	and.w	r3, r3, #32
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d10c      	bne.n	8011f0a <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	2203      	movs	r2, #3
 8011ef4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 8011ef8:	2303      	movs	r3, #3
 8011efa:	e008      	b.n	8011f0e <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8011efc:	4b06      	ldr	r3, [pc, #24]	@ (8011f18 <HAL_RTC_WaitForSynchro+0x60>)
 8011efe:	68db      	ldr	r3, [r3, #12]
 8011f00:	f003 0320 	and.w	r3, r3, #32
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d0e5      	beq.n	8011ed4 <HAL_RTC_WaitForSynchro+0x1c>
 8011f08:	e000      	b.n	8011f0c <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 8011f0a:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 8011f0c:	2300      	movs	r3, #0
}
 8011f0e:	4618      	mov	r0, r3
 8011f10:	3710      	adds	r7, #16
 8011f12:	46bd      	mov	sp, r7
 8011f14:	bd80      	pop	{r7, pc}
 8011f16:	bf00      	nop
 8011f18:	44007800 	.word	0x44007800

08011f1c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8011f1c:	b580      	push	{r7, lr}
 8011f1e:	b084      	sub	sp, #16
 8011f20:	af00      	add	r7, sp, #0
 8011f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8011f24:	2300      	movs	r3, #0
 8011f26:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8011f28:	4b19      	ldr	r3, [pc, #100]	@ (8011f90 <RTC_EnterInitMode+0x74>)
 8011f2a:	68db      	ldr	r3, [r3, #12]
 8011f2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d128      	bne.n	8011f86 <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8011f34:	4b16      	ldr	r3, [pc, #88]	@ (8011f90 <RTC_EnterInitMode+0x74>)
 8011f36:	68db      	ldr	r3, [r3, #12]
 8011f38:	4a15      	ldr	r2, [pc, #84]	@ (8011f90 <RTC_EnterInitMode+0x74>)
 8011f3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011f3e:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8011f40:	f7f3 fd36 	bl	80059b0 <HAL_GetTick>
 8011f44:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8011f46:	e013      	b.n	8011f70 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8011f48:	f7f3 fd32 	bl	80059b0 <HAL_GetTick>
 8011f4c:	4602      	mov	r2, r0
 8011f4e:	68bb      	ldr	r3, [r7, #8]
 8011f50:	1ad3      	subs	r3, r2, r3
 8011f52:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8011f56:	d90b      	bls.n	8011f70 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8011f58:	4b0d      	ldr	r3, [pc, #52]	@ (8011f90 <RTC_EnterInitMode+0x74>)
 8011f5a:	68db      	ldr	r3, [r3, #12]
 8011f5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	d10f      	bne.n	8011f84 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 8011f64:	2303      	movs	r3, #3
 8011f66:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	2203      	movs	r2, #3
 8011f6c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8011f70:	4b07      	ldr	r3, [pc, #28]	@ (8011f90 <RTC_EnterInitMode+0x74>)
 8011f72:	68db      	ldr	r3, [r3, #12]
 8011f74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d104      	bne.n	8011f86 <RTC_EnterInitMode+0x6a>
 8011f7c:	7bfb      	ldrb	r3, [r7, #15]
 8011f7e:	2b03      	cmp	r3, #3
 8011f80:	d1e2      	bne.n	8011f48 <RTC_EnterInitMode+0x2c>
 8011f82:	e000      	b.n	8011f86 <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 8011f84:	bf00      	nop
        }
      }
    }
  }

  return status;
 8011f86:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f88:	4618      	mov	r0, r3
 8011f8a:	3710      	adds	r7, #16
 8011f8c:	46bd      	mov	sp, r7
 8011f8e:	bd80      	pop	{r7, pc}
 8011f90:	44007800 	.word	0x44007800

08011f94 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8011f94:	b580      	push	{r7, lr}
 8011f96:	b084      	sub	sp, #16
 8011f98:	af00      	add	r7, sp, #0
 8011f9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011f9c:	2300      	movs	r3, #0
 8011f9e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8011fa0:	4b1a      	ldr	r3, [pc, #104]	@ (801200c <RTC_ExitInitMode+0x78>)
 8011fa2:	68db      	ldr	r3, [r3, #12]
 8011fa4:	4a19      	ldr	r2, [pc, #100]	@ (801200c <RTC_ExitInitMode+0x78>)
 8011fa6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011faa:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8011fac:	4b17      	ldr	r3, [pc, #92]	@ (801200c <RTC_ExitInitMode+0x78>)
 8011fae:	699b      	ldr	r3, [r3, #24]
 8011fb0:	f003 0320 	and.w	r3, r3, #32
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d10c      	bne.n	8011fd2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011fb8:	6878      	ldr	r0, [r7, #4]
 8011fba:	f7ff ff7d 	bl	8011eb8 <HAL_RTC_WaitForSynchro>
 8011fbe:	4603      	mov	r3, r0
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d01e      	beq.n	8012002 <RTC_ExitInitMode+0x6e>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	2203      	movs	r2, #3
 8011fc8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8011fcc:	2303      	movs	r3, #3
 8011fce:	73fb      	strb	r3, [r7, #15]
 8011fd0:	e017      	b.n	8012002 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8011fd2:	4b0e      	ldr	r3, [pc, #56]	@ (801200c <RTC_ExitInitMode+0x78>)
 8011fd4:	699b      	ldr	r3, [r3, #24]
 8011fd6:	4a0d      	ldr	r2, [pc, #52]	@ (801200c <RTC_ExitInitMode+0x78>)
 8011fd8:	f023 0320 	bic.w	r3, r3, #32
 8011fdc:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011fde:	6878      	ldr	r0, [r7, #4]
 8011fe0:	f7ff ff6a 	bl	8011eb8 <HAL_RTC_WaitForSynchro>
 8011fe4:	4603      	mov	r3, r0
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	d005      	beq.n	8011ff6 <RTC_ExitInitMode+0x62>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	2203      	movs	r2, #3
 8011fee:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8011ff2:	2303      	movs	r3, #3
 8011ff4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8011ff6:	4b05      	ldr	r3, [pc, #20]	@ (801200c <RTC_ExitInitMode+0x78>)
 8011ff8:	699b      	ldr	r3, [r3, #24]
 8011ffa:	4a04      	ldr	r2, [pc, #16]	@ (801200c <RTC_ExitInitMode+0x78>)
 8011ffc:	f043 0320 	orr.w	r3, r3, #32
 8012000:	6193      	str	r3, [r2, #24]
  }
  return status;
 8012002:	7bfb      	ldrb	r3, [r7, #15]
}
 8012004:	4618      	mov	r0, r3
 8012006:	3710      	adds	r7, #16
 8012008:	46bd      	mov	sp, r7
 801200a:	bd80      	pop	{r7, pc}
 801200c:	44007800 	.word	0x44007800

08012010 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8012010:	b480      	push	{r7}
 8012012:	b085      	sub	sp, #20
 8012014:	af00      	add	r7, sp, #0
 8012016:	4603      	mov	r3, r0
 8012018:	71fb      	strb	r3, [r7, #7]
  uint32_t bcd_high = 0U;
 801201a:	2300      	movs	r3, #0
 801201c:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_value = Value;
 801201e:	79fb      	ldrb	r3, [r7, #7]
 8012020:	72fb      	strb	r3, [r7, #11]

  while (tmp_value >= 10U)
 8012022:	e005      	b.n	8012030 <RTC_ByteToBcd2+0x20>
  {
    bcd_high++;
 8012024:	68fb      	ldr	r3, [r7, #12]
 8012026:	3301      	adds	r3, #1
 8012028:	60fb      	str	r3, [r7, #12]
    tmp_value -= 10U;
 801202a:	7afb      	ldrb	r3, [r7, #11]
 801202c:	3b0a      	subs	r3, #10
 801202e:	72fb      	strb	r3, [r7, #11]
  while (tmp_value >= 10U)
 8012030:	7afb      	ldrb	r3, [r7, #11]
 8012032:	2b09      	cmp	r3, #9
 8012034:	d8f6      	bhi.n	8012024 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcd_high << 4U) | tmp_value);
 8012036:	68fb      	ldr	r3, [r7, #12]
 8012038:	b2db      	uxtb	r3, r3
 801203a:	011b      	lsls	r3, r3, #4
 801203c:	b2da      	uxtb	r2, r3
 801203e:	7afb      	ldrb	r3, [r7, #11]
 8012040:	4313      	orrs	r3, r2
 8012042:	b2db      	uxtb	r3, r3
}
 8012044:	4618      	mov	r0, r3
 8012046:	3714      	adds	r7, #20
 8012048:	46bd      	mov	sp, r7
 801204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801204e:	4770      	bx	lr

08012050 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8012050:	b480      	push	{r7}
 8012052:	b085      	sub	sp, #20
 8012054:	af00      	add	r7, sp, #0
 8012056:	4603      	mov	r3, r0
 8012058:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;

  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 801205a:	79fb      	ldrb	r3, [r7, #7]
 801205c:	091b      	lsrs	r3, r3, #4
 801205e:	b2db      	uxtb	r3, r3
 8012060:	461a      	mov	r2, r3
 8012062:	4613      	mov	r3, r2
 8012064:	009b      	lsls	r3, r3, #2
 8012066:	4413      	add	r3, r2
 8012068:	005b      	lsls	r3, r3, #1
 801206a:	60fb      	str	r3, [r7, #12]

  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 801206c:	68fb      	ldr	r3, [r7, #12]
 801206e:	b2da      	uxtb	r2, r3
 8012070:	79fb      	ldrb	r3, [r7, #7]
 8012072:	f003 030f 	and.w	r3, r3, #15
 8012076:	b2db      	uxtb	r3, r3
 8012078:	4413      	add	r3, r2
 801207a:	b2db      	uxtb	r3, r3
}
 801207c:	4618      	mov	r0, r3
 801207e:	3714      	adds	r7, #20
 8012080:	46bd      	mov	sp, r7
 8012082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012086:	4770      	bx	lr

08012088 <HAL_RTCEx_SetWakeUpTimer_IT>:
  *                         after Wake Up.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock,
                                              uint32_t WakeUpAutoClr)
{
 8012088:	b580      	push	{r7, lr}
 801208a:	b086      	sub	sp, #24
 801208c:	af00      	add	r7, sp, #0
 801208e:	60f8      	str	r0, [r7, #12]
 8012090:	60b9      	str	r1, [r7, #8]
 8012092:	607a      	str	r2, [r7, #4]
 8012094:	603b      	str	r3, [r7, #0]
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8012096:	68fb      	ldr	r3, [r7, #12]
 8012098:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801209c:	2b01      	cmp	r3, #1
 801209e:	d101      	bne.n	80120a4 <HAL_RTCEx_SetWakeUpTimer_IT+0x1c>
 80120a0:	2302      	movs	r3, #2
 80120a2:	e057      	b.n	8012154 <HAL_RTCEx_SetWakeUpTimer_IT+0xcc>
 80120a4:	68fb      	ldr	r3, [r7, #12]
 80120a6:	2201      	movs	r2, #1
 80120a8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80120ac:	68fb      	ldr	r3, [r7, #12]
 80120ae:	2202      	movs	r2, #2
 80120b0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(RTC->CR, RTC_CR_WUTE);
 80120b4:	4b29      	ldr	r3, [pc, #164]	@ (801215c <HAL_RTCEx_SetWakeUpTimer_IT+0xd4>)
 80120b6:	699b      	ldr	r3, [r3, #24]
 80120b8:	4a28      	ldr	r2, [pc, #160]	@ (801215c <HAL_RTCEx_SetWakeUpTimer_IT+0xd4>)
 80120ba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80120be:	6193      	str	r3, [r2, #24]

  /* Clear flag Wake-Up */
  WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 80120c0:	4b26      	ldr	r3, [pc, #152]	@ (801215c <HAL_RTCEx_SetWakeUpTimer_IT+0xd4>)
 80120c2:	2204      	movs	r2, #4
 80120c4:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80120c6:	4b25      	ldr	r3, [pc, #148]	@ (801215c <HAL_RTCEx_SetWakeUpTimer_IT+0xd4>)
 80120c8:	68db      	ldr	r3, [r3, #12]
 80120ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	d123      	bne.n	801211a <HAL_RTCEx_SetWakeUpTimer_IT+0x92>
  {
    tickstart = HAL_GetTick();
 80120d2:	f7f3 fc6d 	bl	80059b0 <HAL_GetTick>
 80120d6:	6178      	str	r0, [r7, #20]
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 80120d8:	e017      	b.n	801210a <HAL_RTCEx_SetWakeUpTimer_IT+0x82>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80120da:	f7f3 fc69 	bl	80059b0 <HAL_GetTick>
 80120de:	4602      	mov	r2, r0
 80120e0:	697b      	ldr	r3, [r7, #20]
 80120e2:	1ad3      	subs	r3, r2, r3
 80120e4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80120e8:	d90f      	bls.n	801210a <HAL_RTCEx_SetWakeUpTimer_IT+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 80120ea:	4b1c      	ldr	r3, [pc, #112]	@ (801215c <HAL_RTCEx_SetWakeUpTimer_IT+0xd4>)
 80120ec:	68db      	ldr	r3, [r3, #12]
 80120ee:	f003 0304 	and.w	r3, r3, #4
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d110      	bne.n	8012118 <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
        {
          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80120f6:	68fb      	ldr	r3, [r7, #12]
 80120f8:	2203      	movs	r2, #3
 80120fa:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80120fe:	68fb      	ldr	r3, [r7, #12]
 8012100:	2200      	movs	r2, #0
 8012102:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

          return HAL_TIMEOUT;
 8012106:	2303      	movs	r3, #3
 8012108:	e024      	b.n	8012154 <HAL_RTCEx_SetWakeUpTimer_IT+0xcc>
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 801210a:	4b14      	ldr	r3, [pc, #80]	@ (801215c <HAL_RTCEx_SetWakeUpTimer_IT+0xd4>)
 801210c:	68db      	ldr	r3, [r3, #12]
 801210e:	f003 0304 	and.w	r3, r3, #4
 8012112:	2b00      	cmp	r3, #0
 8012114:	d0e1      	beq.n	80120da <HAL_RTCEx_SetWakeUpTimer_IT+0x52>
 8012116:	e000      	b.n	801211a <HAL_RTCEx_SetWakeUpTimer_IT+0x92>
        }
        else
        {
          break;
 8012118:	bf00      	nop
      }
    }
  }

  /* Configure the Wakeup Timer counter and auto clear value */
  WRITE_REG(RTC->WUTR, (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos)));
 801211a:	683b      	ldr	r3, [r7, #0]
 801211c:	041a      	lsls	r2, r3, #16
 801211e:	490f      	ldr	r1, [pc, #60]	@ (801215c <HAL_RTCEx_SetWakeUpTimer_IT+0xd4>)
 8012120:	68bb      	ldr	r3, [r7, #8]
 8012122:	4313      	orrs	r3, r2
 8012124:	614b      	str	r3, [r1, #20]

  /* Configure the clock source */
  MODIFY_REG(RTC->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8012126:	4b0d      	ldr	r3, [pc, #52]	@ (801215c <HAL_RTCEx_SetWakeUpTimer_IT+0xd4>)
 8012128:	699b      	ldr	r3, [r3, #24]
 801212a:	f023 0207 	bic.w	r2, r3, #7
 801212e:	490b      	ldr	r1, [pc, #44]	@ (801215c <HAL_RTCEx_SetWakeUpTimer_IT+0xd4>)
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	4313      	orrs	r3, r2
 8012134:	618b      	str	r3, [r1, #24]

  /* Configure the Interrupt in the RTC_CR register and Enable the Wakeup Timer*/
  SET_BIT(RTC->CR, (RTC_CR_WUTIE | RTC_CR_WUTE));
 8012136:	4b09      	ldr	r3, [pc, #36]	@ (801215c <HAL_RTCEx_SetWakeUpTimer_IT+0xd4>)
 8012138:	699b      	ldr	r3, [r3, #24]
 801213a:	4a08      	ldr	r2, [pc, #32]	@ (801215c <HAL_RTCEx_SetWakeUpTimer_IT+0xd4>)
 801213c:	f443 4388 	orr.w	r3, r3, #17408	@ 0x4400
 8012140:	6193      	str	r3, [r2, #24]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8012142:	68fb      	ldr	r3, [r7, #12]
 8012144:	2201      	movs	r2, #1
 8012146:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801214a:	68fb      	ldr	r3, [r7, #12]
 801214c:	2200      	movs	r2, #0
 801214e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8012152:	2300      	movs	r3, #0
}
 8012154:	4618      	mov	r0, r3
 8012156:	3718      	adds	r7, #24
 8012158:	46bd      	mov	sp, r7
 801215a:	bd80      	pop	{r7, pc}
 801215c:	44007800 	.word	0x44007800

08012160 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8012160:	b480      	push	{r7}
 8012162:	b083      	sub	sp, #12
 8012164:	af00      	add	r7, sp, #0
 8012166:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801216e:	2b01      	cmp	r3, #1
 8012170:	d101      	bne.n	8012176 <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 8012172:	2302      	movs	r3, #2
 8012174:	e016      	b.n	80121a4 <HAL_RTCEx_DeactivateWakeUpTimer+0x44>
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	2201      	movs	r2, #1
 801217a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	2202      	movs	r2, #2
 8012182:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the Wakeup Timer */
  /* In case of interrupt mode is used, the interrupt source must disabled */
  CLEAR_BIT(RTC->CR, (RTC_CR_WUTE | RTC_CR_WUTIE));
 8012186:	4b0a      	ldr	r3, [pc, #40]	@ (80121b0 <HAL_RTCEx_DeactivateWakeUpTimer+0x50>)
 8012188:	699b      	ldr	r3, [r3, #24]
 801218a:	4a09      	ldr	r2, [pc, #36]	@ (80121b0 <HAL_RTCEx_DeactivateWakeUpTimer+0x50>)
 801218c:	f423 4388 	bic.w	r3, r3, #17408	@ 0x4400
 8012190:	6193      	str	r3, [r2, #24]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	2201      	movs	r2, #1
 8012196:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	2200      	movs	r2, #0
 801219e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80121a2:	2300      	movs	r3, #0
}
 80121a4:	4618      	mov	r0, r3
 80121a6:	370c      	adds	r7, #12
 80121a8:	46bd      	mov	sp, r7
 80121aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121ae:	4770      	bx	lr
 80121b0:	44007800 	.word	0x44007800

080121b4 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80121b4:	b580      	push	{r7, lr}
 80121b6:	b082      	sub	sp, #8
 80121b8:	af00      	add	r7, sp, #0
 80121ba:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the Wake-Up Timer Interrupt */
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if (READ_BIT(RTC->SMISR, RTC_SMISR_WUTMF) != 0U)
#else
  if (READ_BIT(RTC->MISR, RTC_MISR_WUTMF) != 0U)
 80121bc:	4b09      	ldr	r3, [pc, #36]	@ (80121e4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 80121be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80121c0:	f003 0304 	and.w	r3, r3, #4
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	d005      	beq.n	80121d4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x20>
#endif /* #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */
  {
    /* Immediately clear flags */
    WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 80121c8:	4b06      	ldr	r3, [pc, #24]	@ (80121e4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 80121ca:	2204      	movs	r2, #4
 80121cc:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call wake up timer registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80121ce:	6878      	ldr	r0, [r7, #4]
 80121d0:	f000 f80a 	bl	80121e8 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	2201      	movs	r2, #1
 80121d8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 80121dc:	bf00      	nop
 80121de:	3708      	adds	r7, #8
 80121e0:	46bd      	mov	sp, r7
 80121e2:	bd80      	pop	{r7, pc}
 80121e4:	44007800 	.word	0x44007800

080121e8 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80121e8:	b480      	push	{r7}
 80121ea:	b083      	sub	sp, #12
 80121ec:	af00      	add	r7, sp, #0
 80121ee:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 80121f0:	bf00      	nop
 80121f2:	370c      	adds	r7, #12
 80121f4:	46bd      	mov	sp, r7
 80121f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121fa:	4770      	bx	lr

080121fc <HAL_RTCEx_PrivilegeModeSet>:
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(const RTC_HandleTypeDef *hrtc,
                                             const RTC_PrivilegeStateTypeDef *privilegeState)
{
 80121fc:	b480      	push	{r7}
 80121fe:	b083      	sub	sp, #12
 8012200:	af00      	add	r7, sp, #0
 8012202:	6078      	str	r0, [r7, #4]
 8012204:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 8012206:	683b      	ldr	r3, [r7, #0]
 8012208:	681a      	ldr	r2, [r3, #0]
 801220a:	683b      	ldr	r3, [r7, #0]
 801220c:	685b      	ldr	r3, [r3, #4]
 801220e:	4910      	ldr	r1, [pc, #64]	@ (8012250 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8012210:	4313      	orrs	r3, r2
 8012212:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
               (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 8012214:	683b      	ldr	r3, [r7, #0]
 8012216:	689a      	ldr	r2, [r3, #8]
 8012218:	683b      	ldr	r3, [r7, #0]
 801221a:	68db      	ldr	r3, [r3, #12]
 801221c:	431a      	orrs	r2, r3
 801221e:	683b      	ldr	r3, [r7, #0]
 8012220:	699b      	ldr	r3, [r3, #24]
 8012222:	490c      	ldr	r1, [pc, #48]	@ (8012254 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8012224:	4313      	orrs	r3, r2
 8012226:	624b      	str	r3, [r1, #36]	@ 0x24
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
               (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
#if defined(TAMP_SECCFGR_BKPWSEC)
  MODIFY_REG(TAMP->SECCFGR,
 8012228:	4b0a      	ldr	r3, [pc, #40]	@ (8012254 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 801222a:	6a1b      	ldr	r3, [r3, #32]
 801222c:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 8012230:	683b      	ldr	r3, [r7, #0]
 8012232:	6919      	ldr	r1, [r3, #16]
 8012234:	683b      	ldr	r3, [r7, #0]
 8012236:	695b      	ldr	r3, [r3, #20]
 8012238:	041b      	lsls	r3, r3, #16
 801223a:	430b      	orrs	r3, r1
 801223c:	4905      	ldr	r1, [pc, #20]	@ (8012254 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 801223e:	4313      	orrs	r3, r2
 8012240:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));
#endif /* TAMP_SECCFGR_BKPWSEC */

  return HAL_OK;
 8012242:	2300      	movs	r3, #0
}
 8012244:	4618      	mov	r0, r3
 8012246:	370c      	adds	r7, #12
 8012248:	46bd      	mov	sp, r7
 801224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801224e:	4770      	bx	lr
 8012250:	44007800 	.word	0x44007800
 8012254:	44007c00 	.word	0x44007c00

08012258 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8012258:	b580      	push	{r7, lr}
 801225a:	b082      	sub	sp, #8
 801225c:	af00      	add	r7, sp, #0
 801225e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	2b00      	cmp	r3, #0
 8012264:	d101      	bne.n	801226a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8012266:	2301      	movs	r3, #1
 8012268:	e049      	b.n	80122fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8012270:	b2db      	uxtb	r3, r3
 8012272:	2b00      	cmp	r3, #0
 8012274:	d106      	bne.n	8012284 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	2200      	movs	r2, #0
 801227a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801227e:	6878      	ldr	r0, [r7, #4]
 8012280:	f7f2 ff92 	bl	80051a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	2202      	movs	r2, #2
 8012288:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	681a      	ldr	r2, [r3, #0]
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	3304      	adds	r3, #4
 8012294:	4619      	mov	r1, r3
 8012296:	4610      	mov	r0, r2
 8012298:	f000 fa5c 	bl	8012754 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	2201      	movs	r2, #1
 80122a0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	2201      	movs	r2, #1
 80122a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	2201      	movs	r2, #1
 80122b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	2201      	movs	r2, #1
 80122b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	2201      	movs	r2, #1
 80122c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	2201      	movs	r2, #1
 80122c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	2201      	movs	r2, #1
 80122d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	2201      	movs	r2, #1
 80122d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	2201      	movs	r2, #1
 80122e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	2201      	movs	r2, #1
 80122e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	2201      	movs	r2, #1
 80122f0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	2201      	movs	r2, #1
 80122f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80122fc:	2300      	movs	r3, #0
}
 80122fe:	4618      	mov	r0, r3
 8012300:	3708      	adds	r7, #8
 8012302:	46bd      	mov	sp, r7
 8012304:	bd80      	pop	{r7, pc}
	...

08012308 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8012308:	b480      	push	{r7}
 801230a:	b085      	sub	sp, #20
 801230c:	af00      	add	r7, sp, #0
 801230e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8012316:	b2db      	uxtb	r3, r3
 8012318:	2b01      	cmp	r3, #1
 801231a:	d001      	beq.n	8012320 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801231c:	2301      	movs	r3, #1
 801231e:	e07c      	b.n	801241a <HAL_TIM_Base_Start_IT+0x112>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	2202      	movs	r2, #2
 8012324:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	681b      	ldr	r3, [r3, #0]
 801232c:	68da      	ldr	r2, [r3, #12]
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	681b      	ldr	r3, [r3, #0]
 8012332:	f042 0201 	orr.w	r2, r2, #1
 8012336:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	681b      	ldr	r3, [r3, #0]
 801233c:	4a3a      	ldr	r2, [pc, #232]	@ (8012428 <HAL_TIM_Base_Start_IT+0x120>)
 801233e:	4293      	cmp	r3, r2
 8012340:	d04a      	beq.n	80123d8 <HAL_TIM_Base_Start_IT+0xd0>
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	681b      	ldr	r3, [r3, #0]
 8012346:	4a39      	ldr	r2, [pc, #228]	@ (801242c <HAL_TIM_Base_Start_IT+0x124>)
 8012348:	4293      	cmp	r3, r2
 801234a:	d045      	beq.n	80123d8 <HAL_TIM_Base_Start_IT+0xd0>
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	681b      	ldr	r3, [r3, #0]
 8012350:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012354:	d040      	beq.n	80123d8 <HAL_TIM_Base_Start_IT+0xd0>
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	681b      	ldr	r3, [r3, #0]
 801235a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801235e:	d03b      	beq.n	80123d8 <HAL_TIM_Base_Start_IT+0xd0>
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	681b      	ldr	r3, [r3, #0]
 8012364:	4a32      	ldr	r2, [pc, #200]	@ (8012430 <HAL_TIM_Base_Start_IT+0x128>)
 8012366:	4293      	cmp	r3, r2
 8012368:	d036      	beq.n	80123d8 <HAL_TIM_Base_Start_IT+0xd0>
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	681b      	ldr	r3, [r3, #0]
 801236e:	4a31      	ldr	r2, [pc, #196]	@ (8012434 <HAL_TIM_Base_Start_IT+0x12c>)
 8012370:	4293      	cmp	r3, r2
 8012372:	d031      	beq.n	80123d8 <HAL_TIM_Base_Start_IT+0xd0>
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	681b      	ldr	r3, [r3, #0]
 8012378:	4a2f      	ldr	r2, [pc, #188]	@ (8012438 <HAL_TIM_Base_Start_IT+0x130>)
 801237a:	4293      	cmp	r3, r2
 801237c:	d02c      	beq.n	80123d8 <HAL_TIM_Base_Start_IT+0xd0>
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	681b      	ldr	r3, [r3, #0]
 8012382:	4a2e      	ldr	r2, [pc, #184]	@ (801243c <HAL_TIM_Base_Start_IT+0x134>)
 8012384:	4293      	cmp	r3, r2
 8012386:	d027      	beq.n	80123d8 <HAL_TIM_Base_Start_IT+0xd0>
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	681b      	ldr	r3, [r3, #0]
 801238c:	4a2c      	ldr	r2, [pc, #176]	@ (8012440 <HAL_TIM_Base_Start_IT+0x138>)
 801238e:	4293      	cmp	r3, r2
 8012390:	d022      	beq.n	80123d8 <HAL_TIM_Base_Start_IT+0xd0>
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	681b      	ldr	r3, [r3, #0]
 8012396:	4a2b      	ldr	r2, [pc, #172]	@ (8012444 <HAL_TIM_Base_Start_IT+0x13c>)
 8012398:	4293      	cmp	r3, r2
 801239a:	d01d      	beq.n	80123d8 <HAL_TIM_Base_Start_IT+0xd0>
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	681b      	ldr	r3, [r3, #0]
 80123a0:	4a29      	ldr	r2, [pc, #164]	@ (8012448 <HAL_TIM_Base_Start_IT+0x140>)
 80123a2:	4293      	cmp	r3, r2
 80123a4:	d018      	beq.n	80123d8 <HAL_TIM_Base_Start_IT+0xd0>
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	681b      	ldr	r3, [r3, #0]
 80123aa:	4a28      	ldr	r2, [pc, #160]	@ (801244c <HAL_TIM_Base_Start_IT+0x144>)
 80123ac:	4293      	cmp	r3, r2
 80123ae:	d013      	beq.n	80123d8 <HAL_TIM_Base_Start_IT+0xd0>
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	681b      	ldr	r3, [r3, #0]
 80123b4:	4a26      	ldr	r2, [pc, #152]	@ (8012450 <HAL_TIM_Base_Start_IT+0x148>)
 80123b6:	4293      	cmp	r3, r2
 80123b8:	d00e      	beq.n	80123d8 <HAL_TIM_Base_Start_IT+0xd0>
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	681b      	ldr	r3, [r3, #0]
 80123be:	4a25      	ldr	r2, [pc, #148]	@ (8012454 <HAL_TIM_Base_Start_IT+0x14c>)
 80123c0:	4293      	cmp	r3, r2
 80123c2:	d009      	beq.n	80123d8 <HAL_TIM_Base_Start_IT+0xd0>
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	681b      	ldr	r3, [r3, #0]
 80123c8:	4a23      	ldr	r2, [pc, #140]	@ (8012458 <HAL_TIM_Base_Start_IT+0x150>)
 80123ca:	4293      	cmp	r3, r2
 80123cc:	d004      	beq.n	80123d8 <HAL_TIM_Base_Start_IT+0xd0>
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	681b      	ldr	r3, [r3, #0]
 80123d2:	4a22      	ldr	r2, [pc, #136]	@ (801245c <HAL_TIM_Base_Start_IT+0x154>)
 80123d4:	4293      	cmp	r3, r2
 80123d6:	d115      	bne.n	8012404 <HAL_TIM_Base_Start_IT+0xfc>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	681b      	ldr	r3, [r3, #0]
 80123dc:	689a      	ldr	r2, [r3, #8]
 80123de:	4b20      	ldr	r3, [pc, #128]	@ (8012460 <HAL_TIM_Base_Start_IT+0x158>)
 80123e0:	4013      	ands	r3, r2
 80123e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80123e4:	68fb      	ldr	r3, [r7, #12]
 80123e6:	2b06      	cmp	r3, #6
 80123e8:	d015      	beq.n	8012416 <HAL_TIM_Base_Start_IT+0x10e>
 80123ea:	68fb      	ldr	r3, [r7, #12]
 80123ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80123f0:	d011      	beq.n	8012416 <HAL_TIM_Base_Start_IT+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	681b      	ldr	r3, [r3, #0]
 80123f6:	681a      	ldr	r2, [r3, #0]
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	681b      	ldr	r3, [r3, #0]
 80123fc:	f042 0201 	orr.w	r2, r2, #1
 8012400:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012402:	e008      	b.n	8012416 <HAL_TIM_Base_Start_IT+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	681b      	ldr	r3, [r3, #0]
 8012408:	681a      	ldr	r2, [r3, #0]
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	681b      	ldr	r3, [r3, #0]
 801240e:	f042 0201 	orr.w	r2, r2, #1
 8012412:	601a      	str	r2, [r3, #0]
 8012414:	e000      	b.n	8012418 <HAL_TIM_Base_Start_IT+0x110>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012416:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8012418:	2300      	movs	r3, #0
}
 801241a:	4618      	mov	r0, r3
 801241c:	3714      	adds	r7, #20
 801241e:	46bd      	mov	sp, r7
 8012420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012424:	4770      	bx	lr
 8012426:	bf00      	nop
 8012428:	40012c00 	.word	0x40012c00
 801242c:	50012c00 	.word	0x50012c00
 8012430:	40000400 	.word	0x40000400
 8012434:	50000400 	.word	0x50000400
 8012438:	40000800 	.word	0x40000800
 801243c:	50000800 	.word	0x50000800
 8012440:	40000c00 	.word	0x40000c00
 8012444:	50000c00 	.word	0x50000c00
 8012448:	40013400 	.word	0x40013400
 801244c:	50013400 	.word	0x50013400
 8012450:	40001800 	.word	0x40001800
 8012454:	50001800 	.word	0x50001800
 8012458:	40014000 	.word	0x40014000
 801245c:	50014000 	.word	0x50014000
 8012460:	00010007 	.word	0x00010007

08012464 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8012464:	b580      	push	{r7, lr}
 8012466:	b084      	sub	sp, #16
 8012468:	af00      	add	r7, sp, #0
 801246a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	681b      	ldr	r3, [r3, #0]
 8012470:	68db      	ldr	r3, [r3, #12]
 8012472:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	681b      	ldr	r3, [r3, #0]
 8012478:	691b      	ldr	r3, [r3, #16]
 801247a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 801247c:	68bb      	ldr	r3, [r7, #8]
 801247e:	f003 0302 	and.w	r3, r3, #2
 8012482:	2b00      	cmp	r3, #0
 8012484:	d020      	beq.n	80124c8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8012486:	68fb      	ldr	r3, [r7, #12]
 8012488:	f003 0302 	and.w	r3, r3, #2
 801248c:	2b00      	cmp	r3, #0
 801248e:	d01b      	beq.n	80124c8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	681b      	ldr	r3, [r3, #0]
 8012494:	f06f 0202 	mvn.w	r2, #2
 8012498:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	2201      	movs	r2, #1
 801249e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	681b      	ldr	r3, [r3, #0]
 80124a4:	699b      	ldr	r3, [r3, #24]
 80124a6:	f003 0303 	and.w	r3, r3, #3
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	d003      	beq.n	80124b6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80124ae:	6878      	ldr	r0, [r7, #4]
 80124b0:	f000 f931 	bl	8012716 <HAL_TIM_IC_CaptureCallback>
 80124b4:	e005      	b.n	80124c2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80124b6:	6878      	ldr	r0, [r7, #4]
 80124b8:	f000 f923 	bl	8012702 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80124bc:	6878      	ldr	r0, [r7, #4]
 80124be:	f000 f934 	bl	801272a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	2200      	movs	r2, #0
 80124c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80124c8:	68bb      	ldr	r3, [r7, #8]
 80124ca:	f003 0304 	and.w	r3, r3, #4
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d020      	beq.n	8012514 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80124d2:	68fb      	ldr	r3, [r7, #12]
 80124d4:	f003 0304 	and.w	r3, r3, #4
 80124d8:	2b00      	cmp	r3, #0
 80124da:	d01b      	beq.n	8012514 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	681b      	ldr	r3, [r3, #0]
 80124e0:	f06f 0204 	mvn.w	r2, #4
 80124e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	2202      	movs	r2, #2
 80124ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	681b      	ldr	r3, [r3, #0]
 80124f0:	699b      	ldr	r3, [r3, #24]
 80124f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	d003      	beq.n	8012502 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80124fa:	6878      	ldr	r0, [r7, #4]
 80124fc:	f000 f90b 	bl	8012716 <HAL_TIM_IC_CaptureCallback>
 8012500:	e005      	b.n	801250e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012502:	6878      	ldr	r0, [r7, #4]
 8012504:	f000 f8fd 	bl	8012702 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012508:	6878      	ldr	r0, [r7, #4]
 801250a:	f000 f90e 	bl	801272a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	2200      	movs	r2, #0
 8012512:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8012514:	68bb      	ldr	r3, [r7, #8]
 8012516:	f003 0308 	and.w	r3, r3, #8
 801251a:	2b00      	cmp	r3, #0
 801251c:	d020      	beq.n	8012560 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 801251e:	68fb      	ldr	r3, [r7, #12]
 8012520:	f003 0308 	and.w	r3, r3, #8
 8012524:	2b00      	cmp	r3, #0
 8012526:	d01b      	beq.n	8012560 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	681b      	ldr	r3, [r3, #0]
 801252c:	f06f 0208 	mvn.w	r2, #8
 8012530:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	2204      	movs	r2, #4
 8012536:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	681b      	ldr	r3, [r3, #0]
 801253c:	69db      	ldr	r3, [r3, #28]
 801253e:	f003 0303 	and.w	r3, r3, #3
 8012542:	2b00      	cmp	r3, #0
 8012544:	d003      	beq.n	801254e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012546:	6878      	ldr	r0, [r7, #4]
 8012548:	f000 f8e5 	bl	8012716 <HAL_TIM_IC_CaptureCallback>
 801254c:	e005      	b.n	801255a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801254e:	6878      	ldr	r0, [r7, #4]
 8012550:	f000 f8d7 	bl	8012702 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012554:	6878      	ldr	r0, [r7, #4]
 8012556:	f000 f8e8 	bl	801272a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	2200      	movs	r2, #0
 801255e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8012560:	68bb      	ldr	r3, [r7, #8]
 8012562:	f003 0310 	and.w	r3, r3, #16
 8012566:	2b00      	cmp	r3, #0
 8012568:	d020      	beq.n	80125ac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 801256a:	68fb      	ldr	r3, [r7, #12]
 801256c:	f003 0310 	and.w	r3, r3, #16
 8012570:	2b00      	cmp	r3, #0
 8012572:	d01b      	beq.n	80125ac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	681b      	ldr	r3, [r3, #0]
 8012578:	f06f 0210 	mvn.w	r2, #16
 801257c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	2208      	movs	r2, #8
 8012582:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	681b      	ldr	r3, [r3, #0]
 8012588:	69db      	ldr	r3, [r3, #28]
 801258a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801258e:	2b00      	cmp	r3, #0
 8012590:	d003      	beq.n	801259a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012592:	6878      	ldr	r0, [r7, #4]
 8012594:	f000 f8bf 	bl	8012716 <HAL_TIM_IC_CaptureCallback>
 8012598:	e005      	b.n	80125a6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801259a:	6878      	ldr	r0, [r7, #4]
 801259c:	f000 f8b1 	bl	8012702 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80125a0:	6878      	ldr	r0, [r7, #4]
 80125a2:	f000 f8c2 	bl	801272a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	2200      	movs	r2, #0
 80125aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80125ac:	68bb      	ldr	r3, [r7, #8]
 80125ae:	f003 0301 	and.w	r3, r3, #1
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	d00c      	beq.n	80125d0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80125b6:	68fb      	ldr	r3, [r7, #12]
 80125b8:	f003 0301 	and.w	r3, r3, #1
 80125bc:	2b00      	cmp	r3, #0
 80125be:	d007      	beq.n	80125d0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	681b      	ldr	r3, [r3, #0]
 80125c4:	f06f 0201 	mvn.w	r2, #1
 80125c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80125ca:	6878      	ldr	r0, [r7, #4]
 80125cc:	f7f0 fe8c 	bl	80032e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80125d0:	68bb      	ldr	r3, [r7, #8]
 80125d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d104      	bne.n	80125e4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80125da:	68bb      	ldr	r3, [r7, #8]
 80125dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	d00c      	beq.n	80125fe <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80125e4:	68fb      	ldr	r3, [r7, #12]
 80125e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80125ea:	2b00      	cmp	r3, #0
 80125ec:	d007      	beq.n	80125fe <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	681b      	ldr	r3, [r3, #0]
 80125f2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80125f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80125f8:	6878      	ldr	r0, [r7, #4]
 80125fa:	f000 faaf 	bl	8012b5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80125fe:	68bb      	ldr	r3, [r7, #8]
 8012600:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012604:	2b00      	cmp	r3, #0
 8012606:	d00c      	beq.n	8012622 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8012608:	68fb      	ldr	r3, [r7, #12]
 801260a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801260e:	2b00      	cmp	r3, #0
 8012610:	d007      	beq.n	8012622 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	681b      	ldr	r3, [r3, #0]
 8012616:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 801261a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 801261c:	6878      	ldr	r0, [r7, #4]
 801261e:	f000 faa7 	bl	8012b70 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8012622:	68bb      	ldr	r3, [r7, #8]
 8012624:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012628:	2b00      	cmp	r3, #0
 801262a:	d00c      	beq.n	8012646 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 801262c:	68fb      	ldr	r3, [r7, #12]
 801262e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012632:	2b00      	cmp	r3, #0
 8012634:	d007      	beq.n	8012646 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	681b      	ldr	r3, [r3, #0]
 801263a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 801263e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8012640:	6878      	ldr	r0, [r7, #4]
 8012642:	f000 f87c 	bl	801273e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8012646:	68bb      	ldr	r3, [r7, #8]
 8012648:	f003 0320 	and.w	r3, r3, #32
 801264c:	2b00      	cmp	r3, #0
 801264e:	d00c      	beq.n	801266a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8012650:	68fb      	ldr	r3, [r7, #12]
 8012652:	f003 0320 	and.w	r3, r3, #32
 8012656:	2b00      	cmp	r3, #0
 8012658:	d007      	beq.n	801266a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	681b      	ldr	r3, [r3, #0]
 801265e:	f06f 0220 	mvn.w	r2, #32
 8012662:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8012664:	6878      	ldr	r0, [r7, #4]
 8012666:	f000 fa6f 	bl	8012b48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 801266a:	68bb      	ldr	r3, [r7, #8]
 801266c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8012670:	2b00      	cmp	r3, #0
 8012672:	d00c      	beq.n	801268e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8012674:	68fb      	ldr	r3, [r7, #12]
 8012676:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801267a:	2b00      	cmp	r3, #0
 801267c:	d007      	beq.n	801268e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	681b      	ldr	r3, [r3, #0]
 8012682:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8012686:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8012688:	6878      	ldr	r0, [r7, #4]
 801268a:	f000 fa7b 	bl	8012b84 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 801268e:	68bb      	ldr	r3, [r7, #8]
 8012690:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8012694:	2b00      	cmp	r3, #0
 8012696:	d00c      	beq.n	80126b2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8012698:	68fb      	ldr	r3, [r7, #12]
 801269a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d007      	beq.n	80126b2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	681b      	ldr	r3, [r3, #0]
 80126a6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80126aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80126ac:	6878      	ldr	r0, [r7, #4]
 80126ae:	f000 fa73 	bl	8012b98 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80126b2:	68bb      	ldr	r3, [r7, #8]
 80126b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	d00c      	beq.n	80126d6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80126bc:	68fb      	ldr	r3, [r7, #12]
 80126be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	d007      	beq.n	80126d6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	681b      	ldr	r3, [r3, #0]
 80126ca:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80126ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80126d0:	6878      	ldr	r0, [r7, #4]
 80126d2:	f000 fa6b 	bl	8012bac <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80126d6:	68bb      	ldr	r3, [r7, #8]
 80126d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80126dc:	2b00      	cmp	r3, #0
 80126de:	d00c      	beq.n	80126fa <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80126e0:	68fb      	ldr	r3, [r7, #12]
 80126e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	d007      	beq.n	80126fa <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	681b      	ldr	r3, [r3, #0]
 80126ee:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80126f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80126f4:	6878      	ldr	r0, [r7, #4]
 80126f6:	f000 fa63 	bl	8012bc0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80126fa:	bf00      	nop
 80126fc:	3710      	adds	r7, #16
 80126fe:	46bd      	mov	sp, r7
 8012700:	bd80      	pop	{r7, pc}

08012702 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8012702:	b480      	push	{r7}
 8012704:	b083      	sub	sp, #12
 8012706:	af00      	add	r7, sp, #0
 8012708:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801270a:	bf00      	nop
 801270c:	370c      	adds	r7, #12
 801270e:	46bd      	mov	sp, r7
 8012710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012714:	4770      	bx	lr

08012716 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8012716:	b480      	push	{r7}
 8012718:	b083      	sub	sp, #12
 801271a:	af00      	add	r7, sp, #0
 801271c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801271e:	bf00      	nop
 8012720:	370c      	adds	r7, #12
 8012722:	46bd      	mov	sp, r7
 8012724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012728:	4770      	bx	lr

0801272a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801272a:	b480      	push	{r7}
 801272c:	b083      	sub	sp, #12
 801272e:	af00      	add	r7, sp, #0
 8012730:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8012732:	bf00      	nop
 8012734:	370c      	adds	r7, #12
 8012736:	46bd      	mov	sp, r7
 8012738:	f85d 7b04 	ldr.w	r7, [sp], #4
 801273c:	4770      	bx	lr

0801273e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801273e:	b480      	push	{r7}
 8012740:	b083      	sub	sp, #12
 8012742:	af00      	add	r7, sp, #0
 8012744:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8012746:	bf00      	nop
 8012748:	370c      	adds	r7, #12
 801274a:	46bd      	mov	sp, r7
 801274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012750:	4770      	bx	lr
	...

08012754 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8012754:	b480      	push	{r7}
 8012756:	b085      	sub	sp, #20
 8012758:	af00      	add	r7, sp, #0
 801275a:	6078      	str	r0, [r7, #4]
 801275c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	681b      	ldr	r3, [r3, #0]
 8012762:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	4a7a      	ldr	r2, [pc, #488]	@ (8012950 <TIM_Base_SetConfig+0x1fc>)
 8012768:	4293      	cmp	r3, r2
 801276a:	d02b      	beq.n	80127c4 <TIM_Base_SetConfig+0x70>
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	4a79      	ldr	r2, [pc, #484]	@ (8012954 <TIM_Base_SetConfig+0x200>)
 8012770:	4293      	cmp	r3, r2
 8012772:	d027      	beq.n	80127c4 <TIM_Base_SetConfig+0x70>
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801277a:	d023      	beq.n	80127c4 <TIM_Base_SetConfig+0x70>
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8012782:	d01f      	beq.n	80127c4 <TIM_Base_SetConfig+0x70>
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	4a74      	ldr	r2, [pc, #464]	@ (8012958 <TIM_Base_SetConfig+0x204>)
 8012788:	4293      	cmp	r3, r2
 801278a:	d01b      	beq.n	80127c4 <TIM_Base_SetConfig+0x70>
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	4a73      	ldr	r2, [pc, #460]	@ (801295c <TIM_Base_SetConfig+0x208>)
 8012790:	4293      	cmp	r3, r2
 8012792:	d017      	beq.n	80127c4 <TIM_Base_SetConfig+0x70>
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	4a72      	ldr	r2, [pc, #456]	@ (8012960 <TIM_Base_SetConfig+0x20c>)
 8012798:	4293      	cmp	r3, r2
 801279a:	d013      	beq.n	80127c4 <TIM_Base_SetConfig+0x70>
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	4a71      	ldr	r2, [pc, #452]	@ (8012964 <TIM_Base_SetConfig+0x210>)
 80127a0:	4293      	cmp	r3, r2
 80127a2:	d00f      	beq.n	80127c4 <TIM_Base_SetConfig+0x70>
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	4a70      	ldr	r2, [pc, #448]	@ (8012968 <TIM_Base_SetConfig+0x214>)
 80127a8:	4293      	cmp	r3, r2
 80127aa:	d00b      	beq.n	80127c4 <TIM_Base_SetConfig+0x70>
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	4a6f      	ldr	r2, [pc, #444]	@ (801296c <TIM_Base_SetConfig+0x218>)
 80127b0:	4293      	cmp	r3, r2
 80127b2:	d007      	beq.n	80127c4 <TIM_Base_SetConfig+0x70>
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	4a6e      	ldr	r2, [pc, #440]	@ (8012970 <TIM_Base_SetConfig+0x21c>)
 80127b8:	4293      	cmp	r3, r2
 80127ba:	d003      	beq.n	80127c4 <TIM_Base_SetConfig+0x70>
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	4a6d      	ldr	r2, [pc, #436]	@ (8012974 <TIM_Base_SetConfig+0x220>)
 80127c0:	4293      	cmp	r3, r2
 80127c2:	d108      	bne.n	80127d6 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80127c4:	68fb      	ldr	r3, [r7, #12]
 80127c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80127ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80127cc:	683b      	ldr	r3, [r7, #0]
 80127ce:	685b      	ldr	r3, [r3, #4]
 80127d0:	68fa      	ldr	r2, [r7, #12]
 80127d2:	4313      	orrs	r3, r2
 80127d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	4a5d      	ldr	r2, [pc, #372]	@ (8012950 <TIM_Base_SetConfig+0x1fc>)
 80127da:	4293      	cmp	r3, r2
 80127dc:	d05b      	beq.n	8012896 <TIM_Base_SetConfig+0x142>
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	4a5c      	ldr	r2, [pc, #368]	@ (8012954 <TIM_Base_SetConfig+0x200>)
 80127e2:	4293      	cmp	r3, r2
 80127e4:	d057      	beq.n	8012896 <TIM_Base_SetConfig+0x142>
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80127ec:	d053      	beq.n	8012896 <TIM_Base_SetConfig+0x142>
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80127f4:	d04f      	beq.n	8012896 <TIM_Base_SetConfig+0x142>
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	4a57      	ldr	r2, [pc, #348]	@ (8012958 <TIM_Base_SetConfig+0x204>)
 80127fa:	4293      	cmp	r3, r2
 80127fc:	d04b      	beq.n	8012896 <TIM_Base_SetConfig+0x142>
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	4a56      	ldr	r2, [pc, #344]	@ (801295c <TIM_Base_SetConfig+0x208>)
 8012802:	4293      	cmp	r3, r2
 8012804:	d047      	beq.n	8012896 <TIM_Base_SetConfig+0x142>
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	4a55      	ldr	r2, [pc, #340]	@ (8012960 <TIM_Base_SetConfig+0x20c>)
 801280a:	4293      	cmp	r3, r2
 801280c:	d043      	beq.n	8012896 <TIM_Base_SetConfig+0x142>
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	4a54      	ldr	r2, [pc, #336]	@ (8012964 <TIM_Base_SetConfig+0x210>)
 8012812:	4293      	cmp	r3, r2
 8012814:	d03f      	beq.n	8012896 <TIM_Base_SetConfig+0x142>
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	4a53      	ldr	r2, [pc, #332]	@ (8012968 <TIM_Base_SetConfig+0x214>)
 801281a:	4293      	cmp	r3, r2
 801281c:	d03b      	beq.n	8012896 <TIM_Base_SetConfig+0x142>
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	4a52      	ldr	r2, [pc, #328]	@ (801296c <TIM_Base_SetConfig+0x218>)
 8012822:	4293      	cmp	r3, r2
 8012824:	d037      	beq.n	8012896 <TIM_Base_SetConfig+0x142>
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	4a51      	ldr	r2, [pc, #324]	@ (8012970 <TIM_Base_SetConfig+0x21c>)
 801282a:	4293      	cmp	r3, r2
 801282c:	d033      	beq.n	8012896 <TIM_Base_SetConfig+0x142>
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	4a50      	ldr	r2, [pc, #320]	@ (8012974 <TIM_Base_SetConfig+0x220>)
 8012832:	4293      	cmp	r3, r2
 8012834:	d02f      	beq.n	8012896 <TIM_Base_SetConfig+0x142>
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	4a4f      	ldr	r2, [pc, #316]	@ (8012978 <TIM_Base_SetConfig+0x224>)
 801283a:	4293      	cmp	r3, r2
 801283c:	d02b      	beq.n	8012896 <TIM_Base_SetConfig+0x142>
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	4a4e      	ldr	r2, [pc, #312]	@ (801297c <TIM_Base_SetConfig+0x228>)
 8012842:	4293      	cmp	r3, r2
 8012844:	d027      	beq.n	8012896 <TIM_Base_SetConfig+0x142>
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	4a4d      	ldr	r2, [pc, #308]	@ (8012980 <TIM_Base_SetConfig+0x22c>)
 801284a:	4293      	cmp	r3, r2
 801284c:	d023      	beq.n	8012896 <TIM_Base_SetConfig+0x142>
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	4a4c      	ldr	r2, [pc, #304]	@ (8012984 <TIM_Base_SetConfig+0x230>)
 8012852:	4293      	cmp	r3, r2
 8012854:	d01f      	beq.n	8012896 <TIM_Base_SetConfig+0x142>
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	4a4b      	ldr	r2, [pc, #300]	@ (8012988 <TIM_Base_SetConfig+0x234>)
 801285a:	4293      	cmp	r3, r2
 801285c:	d01b      	beq.n	8012896 <TIM_Base_SetConfig+0x142>
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	4a4a      	ldr	r2, [pc, #296]	@ (801298c <TIM_Base_SetConfig+0x238>)
 8012862:	4293      	cmp	r3, r2
 8012864:	d017      	beq.n	8012896 <TIM_Base_SetConfig+0x142>
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	4a49      	ldr	r2, [pc, #292]	@ (8012990 <TIM_Base_SetConfig+0x23c>)
 801286a:	4293      	cmp	r3, r2
 801286c:	d013      	beq.n	8012896 <TIM_Base_SetConfig+0x142>
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	4a48      	ldr	r2, [pc, #288]	@ (8012994 <TIM_Base_SetConfig+0x240>)
 8012872:	4293      	cmp	r3, r2
 8012874:	d00f      	beq.n	8012896 <TIM_Base_SetConfig+0x142>
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	4a47      	ldr	r2, [pc, #284]	@ (8012998 <TIM_Base_SetConfig+0x244>)
 801287a:	4293      	cmp	r3, r2
 801287c:	d00b      	beq.n	8012896 <TIM_Base_SetConfig+0x142>
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	4a46      	ldr	r2, [pc, #280]	@ (801299c <TIM_Base_SetConfig+0x248>)
 8012882:	4293      	cmp	r3, r2
 8012884:	d007      	beq.n	8012896 <TIM_Base_SetConfig+0x142>
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	4a45      	ldr	r2, [pc, #276]	@ (80129a0 <TIM_Base_SetConfig+0x24c>)
 801288a:	4293      	cmp	r3, r2
 801288c:	d003      	beq.n	8012896 <TIM_Base_SetConfig+0x142>
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	4a44      	ldr	r2, [pc, #272]	@ (80129a4 <TIM_Base_SetConfig+0x250>)
 8012892:	4293      	cmp	r3, r2
 8012894:	d108      	bne.n	80128a8 <TIM_Base_SetConfig+0x154>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8012896:	68fb      	ldr	r3, [r7, #12]
 8012898:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801289c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801289e:	683b      	ldr	r3, [r7, #0]
 80128a0:	68db      	ldr	r3, [r3, #12]
 80128a2:	68fa      	ldr	r2, [r7, #12]
 80128a4:	4313      	orrs	r3, r2
 80128a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80128a8:	68fb      	ldr	r3, [r7, #12]
 80128aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80128ae:	683b      	ldr	r3, [r7, #0]
 80128b0:	695b      	ldr	r3, [r3, #20]
 80128b2:	4313      	orrs	r3, r2
 80128b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	68fa      	ldr	r2, [r7, #12]
 80128ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80128bc:	683b      	ldr	r3, [r7, #0]
 80128be:	689a      	ldr	r2, [r3, #8]
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80128c4:	683b      	ldr	r3, [r7, #0]
 80128c6:	681a      	ldr	r2, [r3, #0]
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	4a20      	ldr	r2, [pc, #128]	@ (8012950 <TIM_Base_SetConfig+0x1fc>)
 80128d0:	4293      	cmp	r3, r2
 80128d2:	d023      	beq.n	801291c <TIM_Base_SetConfig+0x1c8>
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	4a1f      	ldr	r2, [pc, #124]	@ (8012954 <TIM_Base_SetConfig+0x200>)
 80128d8:	4293      	cmp	r3, r2
 80128da:	d01f      	beq.n	801291c <TIM_Base_SetConfig+0x1c8>
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	4a24      	ldr	r2, [pc, #144]	@ (8012970 <TIM_Base_SetConfig+0x21c>)
 80128e0:	4293      	cmp	r3, r2
 80128e2:	d01b      	beq.n	801291c <TIM_Base_SetConfig+0x1c8>
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	4a23      	ldr	r2, [pc, #140]	@ (8012974 <TIM_Base_SetConfig+0x220>)
 80128e8:	4293      	cmp	r3, r2
 80128ea:	d017      	beq.n	801291c <TIM_Base_SetConfig+0x1c8>
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	4a28      	ldr	r2, [pc, #160]	@ (8012990 <TIM_Base_SetConfig+0x23c>)
 80128f0:	4293      	cmp	r3, r2
 80128f2:	d013      	beq.n	801291c <TIM_Base_SetConfig+0x1c8>
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	4a27      	ldr	r2, [pc, #156]	@ (8012994 <TIM_Base_SetConfig+0x240>)
 80128f8:	4293      	cmp	r3, r2
 80128fa:	d00f      	beq.n	801291c <TIM_Base_SetConfig+0x1c8>
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	4a26      	ldr	r2, [pc, #152]	@ (8012998 <TIM_Base_SetConfig+0x244>)
 8012900:	4293      	cmp	r3, r2
 8012902:	d00b      	beq.n	801291c <TIM_Base_SetConfig+0x1c8>
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	4a25      	ldr	r2, [pc, #148]	@ (801299c <TIM_Base_SetConfig+0x248>)
 8012908:	4293      	cmp	r3, r2
 801290a:	d007      	beq.n	801291c <TIM_Base_SetConfig+0x1c8>
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	4a24      	ldr	r2, [pc, #144]	@ (80129a0 <TIM_Base_SetConfig+0x24c>)
 8012910:	4293      	cmp	r3, r2
 8012912:	d003      	beq.n	801291c <TIM_Base_SetConfig+0x1c8>
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	4a23      	ldr	r2, [pc, #140]	@ (80129a4 <TIM_Base_SetConfig+0x250>)
 8012918:	4293      	cmp	r3, r2
 801291a:	d103      	bne.n	8012924 <TIM_Base_SetConfig+0x1d0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801291c:	683b      	ldr	r3, [r7, #0]
 801291e:	691a      	ldr	r2, [r3, #16]
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	2201      	movs	r2, #1
 8012928:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	691b      	ldr	r3, [r3, #16]
 801292e:	f003 0301 	and.w	r3, r3, #1
 8012932:	2b01      	cmp	r3, #1
 8012934:	d105      	bne.n	8012942 <TIM_Base_SetConfig+0x1ee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	691b      	ldr	r3, [r3, #16]
 801293a:	f023 0201 	bic.w	r2, r3, #1
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	611a      	str	r2, [r3, #16]
  }
}
 8012942:	bf00      	nop
 8012944:	3714      	adds	r7, #20
 8012946:	46bd      	mov	sp, r7
 8012948:	f85d 7b04 	ldr.w	r7, [sp], #4
 801294c:	4770      	bx	lr
 801294e:	bf00      	nop
 8012950:	40012c00 	.word	0x40012c00
 8012954:	50012c00 	.word	0x50012c00
 8012958:	40000400 	.word	0x40000400
 801295c:	50000400 	.word	0x50000400
 8012960:	40000800 	.word	0x40000800
 8012964:	50000800 	.word	0x50000800
 8012968:	40000c00 	.word	0x40000c00
 801296c:	50000c00 	.word	0x50000c00
 8012970:	40013400 	.word	0x40013400
 8012974:	50013400 	.word	0x50013400
 8012978:	40001800 	.word	0x40001800
 801297c:	50001800 	.word	0x50001800
 8012980:	40001c00 	.word	0x40001c00
 8012984:	50001c00 	.word	0x50001c00
 8012988:	40002000 	.word	0x40002000
 801298c:	50002000 	.word	0x50002000
 8012990:	40014000 	.word	0x40014000
 8012994:	50014000 	.word	0x50014000
 8012998:	40014400 	.word	0x40014400
 801299c:	50014400 	.word	0x50014400
 80129a0:	40014800 	.word	0x40014800
 80129a4:	50014800 	.word	0x50014800

080129a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80129a8:	b480      	push	{r7}
 80129aa:	b085      	sub	sp, #20
 80129ac:	af00      	add	r7, sp, #0
 80129ae:	6078      	str	r0, [r7, #4]
 80129b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80129b8:	2b01      	cmp	r3, #1
 80129ba:	d101      	bne.n	80129c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80129bc:	2302      	movs	r3, #2
 80129be:	e0a1      	b.n	8012b04 <HAL_TIMEx_MasterConfigSynchronization+0x15c>
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	2201      	movs	r2, #1
 80129c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	2202      	movs	r2, #2
 80129cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	681b      	ldr	r3, [r3, #0]
 80129d4:	685b      	ldr	r3, [r3, #4]
 80129d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	681b      	ldr	r3, [r3, #0]
 80129dc:	689b      	ldr	r3, [r3, #8]
 80129de:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	681b      	ldr	r3, [r3, #0]
 80129e4:	4a4a      	ldr	r2, [pc, #296]	@ (8012b10 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 80129e6:	4293      	cmp	r3, r2
 80129e8:	d00e      	beq.n	8012a08 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	681b      	ldr	r3, [r3, #0]
 80129ee:	4a49      	ldr	r2, [pc, #292]	@ (8012b14 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 80129f0:	4293      	cmp	r3, r2
 80129f2:	d009      	beq.n	8012a08 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	681b      	ldr	r3, [r3, #0]
 80129f8:	4a47      	ldr	r2, [pc, #284]	@ (8012b18 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 80129fa:	4293      	cmp	r3, r2
 80129fc:	d004      	beq.n	8012a08 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	681b      	ldr	r3, [r3, #0]
 8012a02:	4a46      	ldr	r2, [pc, #280]	@ (8012b1c <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8012a04:	4293      	cmp	r3, r2
 8012a06:	d108      	bne.n	8012a1a <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8012a08:	68fb      	ldr	r3, [r7, #12]
 8012a0a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8012a0e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8012a10:	683b      	ldr	r3, [r7, #0]
 8012a12:	685b      	ldr	r3, [r3, #4]
 8012a14:	68fa      	ldr	r2, [r7, #12]
 8012a16:	4313      	orrs	r3, r2
 8012a18:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8012a1a:	68fb      	ldr	r3, [r7, #12]
 8012a1c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8012a20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012a24:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8012a26:	683b      	ldr	r3, [r7, #0]
 8012a28:	681b      	ldr	r3, [r3, #0]
 8012a2a:	68fa      	ldr	r2, [r7, #12]
 8012a2c:	4313      	orrs	r3, r2
 8012a2e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	681b      	ldr	r3, [r3, #0]
 8012a34:	68fa      	ldr	r2, [r7, #12]
 8012a36:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	681b      	ldr	r3, [r3, #0]
 8012a3c:	4a34      	ldr	r2, [pc, #208]	@ (8012b10 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8012a3e:	4293      	cmp	r3, r2
 8012a40:	d04a      	beq.n	8012ad8 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	681b      	ldr	r3, [r3, #0]
 8012a46:	4a33      	ldr	r2, [pc, #204]	@ (8012b14 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8012a48:	4293      	cmp	r3, r2
 8012a4a:	d045      	beq.n	8012ad8 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	681b      	ldr	r3, [r3, #0]
 8012a50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012a54:	d040      	beq.n	8012ad8 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	681b      	ldr	r3, [r3, #0]
 8012a5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8012a5e:	d03b      	beq.n	8012ad8 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	681b      	ldr	r3, [r3, #0]
 8012a64:	4a2e      	ldr	r2, [pc, #184]	@ (8012b20 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8012a66:	4293      	cmp	r3, r2
 8012a68:	d036      	beq.n	8012ad8 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	681b      	ldr	r3, [r3, #0]
 8012a6e:	4a2d      	ldr	r2, [pc, #180]	@ (8012b24 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 8012a70:	4293      	cmp	r3, r2
 8012a72:	d031      	beq.n	8012ad8 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	681b      	ldr	r3, [r3, #0]
 8012a78:	4a2b      	ldr	r2, [pc, #172]	@ (8012b28 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8012a7a:	4293      	cmp	r3, r2
 8012a7c:	d02c      	beq.n	8012ad8 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	681b      	ldr	r3, [r3, #0]
 8012a82:	4a2a      	ldr	r2, [pc, #168]	@ (8012b2c <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 8012a84:	4293      	cmp	r3, r2
 8012a86:	d027      	beq.n	8012ad8 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	681b      	ldr	r3, [r3, #0]
 8012a8c:	4a28      	ldr	r2, [pc, #160]	@ (8012b30 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 8012a8e:	4293      	cmp	r3, r2
 8012a90:	d022      	beq.n	8012ad8 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	681b      	ldr	r3, [r3, #0]
 8012a96:	4a27      	ldr	r2, [pc, #156]	@ (8012b34 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 8012a98:	4293      	cmp	r3, r2
 8012a9a:	d01d      	beq.n	8012ad8 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	681b      	ldr	r3, [r3, #0]
 8012aa0:	4a1d      	ldr	r2, [pc, #116]	@ (8012b18 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8012aa2:	4293      	cmp	r3, r2
 8012aa4:	d018      	beq.n	8012ad8 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	681b      	ldr	r3, [r3, #0]
 8012aaa:	4a1c      	ldr	r2, [pc, #112]	@ (8012b1c <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8012aac:	4293      	cmp	r3, r2
 8012aae:	d013      	beq.n	8012ad8 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	681b      	ldr	r3, [r3, #0]
 8012ab4:	4a20      	ldr	r2, [pc, #128]	@ (8012b38 <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 8012ab6:	4293      	cmp	r3, r2
 8012ab8:	d00e      	beq.n	8012ad8 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	681b      	ldr	r3, [r3, #0]
 8012abe:	4a1f      	ldr	r2, [pc, #124]	@ (8012b3c <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 8012ac0:	4293      	cmp	r3, r2
 8012ac2:	d009      	beq.n	8012ad8 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	681b      	ldr	r3, [r3, #0]
 8012ac8:	4a1d      	ldr	r2, [pc, #116]	@ (8012b40 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 8012aca:	4293      	cmp	r3, r2
 8012acc:	d004      	beq.n	8012ad8 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	681b      	ldr	r3, [r3, #0]
 8012ad2:	4a1c      	ldr	r2, [pc, #112]	@ (8012b44 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8012ad4:	4293      	cmp	r3, r2
 8012ad6:	d10c      	bne.n	8012af2 <HAL_TIMEx_MasterConfigSynchronization+0x14a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8012ad8:	68bb      	ldr	r3, [r7, #8]
 8012ada:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8012ade:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8012ae0:	683b      	ldr	r3, [r7, #0]
 8012ae2:	689b      	ldr	r3, [r3, #8]
 8012ae4:	68ba      	ldr	r2, [r7, #8]
 8012ae6:	4313      	orrs	r3, r2
 8012ae8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	681b      	ldr	r3, [r3, #0]
 8012aee:	68ba      	ldr	r2, [r7, #8]
 8012af0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	2201      	movs	r2, #1
 8012af6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	2200      	movs	r2, #0
 8012afe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8012b02:	2300      	movs	r3, #0
}
 8012b04:	4618      	mov	r0, r3
 8012b06:	3714      	adds	r7, #20
 8012b08:	46bd      	mov	sp, r7
 8012b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b0e:	4770      	bx	lr
 8012b10:	40012c00 	.word	0x40012c00
 8012b14:	50012c00 	.word	0x50012c00
 8012b18:	40013400 	.word	0x40013400
 8012b1c:	50013400 	.word	0x50013400
 8012b20:	40000400 	.word	0x40000400
 8012b24:	50000400 	.word	0x50000400
 8012b28:	40000800 	.word	0x40000800
 8012b2c:	50000800 	.word	0x50000800
 8012b30:	40000c00 	.word	0x40000c00
 8012b34:	50000c00 	.word	0x50000c00
 8012b38:	40001800 	.word	0x40001800
 8012b3c:	50001800 	.word	0x50001800
 8012b40:	40014000 	.word	0x40014000
 8012b44:	50014000 	.word	0x50014000

08012b48 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8012b48:	b480      	push	{r7}
 8012b4a:	b083      	sub	sp, #12
 8012b4c:	af00      	add	r7, sp, #0
 8012b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8012b50:	bf00      	nop
 8012b52:	370c      	adds	r7, #12
 8012b54:	46bd      	mov	sp, r7
 8012b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b5a:	4770      	bx	lr

08012b5c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8012b5c:	b480      	push	{r7}
 8012b5e:	b083      	sub	sp, #12
 8012b60:	af00      	add	r7, sp, #0
 8012b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8012b64:	bf00      	nop
 8012b66:	370c      	adds	r7, #12
 8012b68:	46bd      	mov	sp, r7
 8012b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b6e:	4770      	bx	lr

08012b70 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8012b70:	b480      	push	{r7}
 8012b72:	b083      	sub	sp, #12
 8012b74:	af00      	add	r7, sp, #0
 8012b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8012b78:	bf00      	nop
 8012b7a:	370c      	adds	r7, #12
 8012b7c:	46bd      	mov	sp, r7
 8012b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b82:	4770      	bx	lr

08012b84 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8012b84:	b480      	push	{r7}
 8012b86:	b083      	sub	sp, #12
 8012b88:	af00      	add	r7, sp, #0
 8012b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8012b8c:	bf00      	nop
 8012b8e:	370c      	adds	r7, #12
 8012b90:	46bd      	mov	sp, r7
 8012b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b96:	4770      	bx	lr

08012b98 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8012b98:	b480      	push	{r7}
 8012b9a:	b083      	sub	sp, #12
 8012b9c:	af00      	add	r7, sp, #0
 8012b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8012ba0:	bf00      	nop
 8012ba2:	370c      	adds	r7, #12
 8012ba4:	46bd      	mov	sp, r7
 8012ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012baa:	4770      	bx	lr

08012bac <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8012bac:	b480      	push	{r7}
 8012bae:	b083      	sub	sp, #12
 8012bb0:	af00      	add	r7, sp, #0
 8012bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8012bb4:	bf00      	nop
 8012bb6:	370c      	adds	r7, #12
 8012bb8:	46bd      	mov	sp, r7
 8012bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bbe:	4770      	bx	lr

08012bc0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8012bc0:	b480      	push	{r7}
 8012bc2:	b083      	sub	sp, #12
 8012bc4:	af00      	add	r7, sp, #0
 8012bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8012bc8:	bf00      	nop
 8012bca:	370c      	adds	r7, #12
 8012bcc:	46bd      	mov	sp, r7
 8012bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bd2:	4770      	bx	lr

08012bd4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8012bd4:	b580      	push	{r7, lr}
 8012bd6:	b082      	sub	sp, #8
 8012bd8:	af00      	add	r7, sp, #0
 8012bda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	d101      	bne.n	8012be6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8012be2:	2301      	movs	r3, #1
 8012be4:	e042      	b.n	8012c6c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	d106      	bne.n	8012bfe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	2200      	movs	r2, #0
 8012bf4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8012bf8:	6878      	ldr	r0, [r7, #4]
 8012bfa:	f7f2 fbe3 	bl	80053c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	2224      	movs	r2, #36	@ 0x24
 8012c02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	681b      	ldr	r3, [r3, #0]
 8012c0a:	681a      	ldr	r2, [r3, #0]
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	681b      	ldr	r3, [r3, #0]
 8012c10:	f022 0201 	bic.w	r2, r2, #1
 8012c14:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	d002      	beq.n	8012c24 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8012c1e:	6878      	ldr	r0, [r7, #4]
 8012c20:	f000 fec6 	bl	80139b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8012c24:	6878      	ldr	r0, [r7, #4]
 8012c26:	f000 fcd5 	bl	80135d4 <UART_SetConfig>
 8012c2a:	4603      	mov	r3, r0
 8012c2c:	2b01      	cmp	r3, #1
 8012c2e:	d101      	bne.n	8012c34 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8012c30:	2301      	movs	r3, #1
 8012c32:	e01b      	b.n	8012c6c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	681b      	ldr	r3, [r3, #0]
 8012c38:	685a      	ldr	r2, [r3, #4]
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	681b      	ldr	r3, [r3, #0]
 8012c3e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8012c42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	681b      	ldr	r3, [r3, #0]
 8012c48:	689a      	ldr	r2, [r3, #8]
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	681b      	ldr	r3, [r3, #0]
 8012c4e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8012c52:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	681b      	ldr	r3, [r3, #0]
 8012c58:	681a      	ldr	r2, [r3, #0]
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	681b      	ldr	r3, [r3, #0]
 8012c5e:	f042 0201 	orr.w	r2, r2, #1
 8012c62:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8012c64:	6878      	ldr	r0, [r7, #4]
 8012c66:	f000 ff45 	bl	8013af4 <UART_CheckIdleState>
 8012c6a:	4603      	mov	r3, r0
}
 8012c6c:	4618      	mov	r0, r3
 8012c6e:	3708      	adds	r7, #8
 8012c70:	46bd      	mov	sp, r7
 8012c72:	bd80      	pop	{r7, pc}

08012c74 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012c74:	b580      	push	{r7, lr}
 8012c76:	b08a      	sub	sp, #40	@ 0x28
 8012c78:	af02      	add	r7, sp, #8
 8012c7a:	60f8      	str	r0, [r7, #12]
 8012c7c:	60b9      	str	r1, [r7, #8]
 8012c7e:	603b      	str	r3, [r7, #0]
 8012c80:	4613      	mov	r3, r2
 8012c82:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8012c84:	68fb      	ldr	r3, [r7, #12]
 8012c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8012c8a:	2b20      	cmp	r3, #32
 8012c8c:	f040 808b 	bne.w	8012da6 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8012c90:	68bb      	ldr	r3, [r7, #8]
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	d002      	beq.n	8012c9c <HAL_UART_Transmit+0x28>
 8012c96:	88fb      	ldrh	r3, [r7, #6]
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	d101      	bne.n	8012ca0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8012c9c:	2301      	movs	r3, #1
 8012c9e:	e083      	b.n	8012da8 <HAL_UART_Transmit+0x134>
    }

    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8012ca0:	68fb      	ldr	r3, [r7, #12]
 8012ca2:	681b      	ldr	r3, [r3, #0]
 8012ca4:	689b      	ldr	r3, [r3, #8]
 8012ca6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012caa:	2b80      	cmp	r3, #128	@ 0x80
 8012cac:	d107      	bne.n	8012cbe <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8012cae:	68fb      	ldr	r3, [r7, #12]
 8012cb0:	681b      	ldr	r3, [r3, #0]
 8012cb2:	689a      	ldr	r2, [r3, #8]
 8012cb4:	68fb      	ldr	r3, [r7, #12]
 8012cb6:	681b      	ldr	r3, [r3, #0]
 8012cb8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8012cbc:	609a      	str	r2, [r3, #8]
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012cbe:	68fb      	ldr	r3, [r7, #12]
 8012cc0:	2200      	movs	r2, #0
 8012cc2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8012cc6:	68fb      	ldr	r3, [r7, #12]
 8012cc8:	2221      	movs	r2, #33	@ 0x21
 8012cca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8012cce:	f7f2 fe6f 	bl	80059b0 <HAL_GetTick>
 8012cd2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8012cd4:	68fb      	ldr	r3, [r7, #12]
 8012cd6:	88fa      	ldrh	r2, [r7, #6]
 8012cd8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8012cdc:	68fb      	ldr	r3, [r7, #12]
 8012cde:	88fa      	ldrh	r2, [r7, #6]
 8012ce0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012ce4:	68fb      	ldr	r3, [r7, #12]
 8012ce6:	689b      	ldr	r3, [r3, #8]
 8012ce8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012cec:	d108      	bne.n	8012d00 <HAL_UART_Transmit+0x8c>
 8012cee:	68fb      	ldr	r3, [r7, #12]
 8012cf0:	691b      	ldr	r3, [r3, #16]
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	d104      	bne.n	8012d00 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8012cf6:	2300      	movs	r3, #0
 8012cf8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8012cfa:	68bb      	ldr	r3, [r7, #8]
 8012cfc:	61bb      	str	r3, [r7, #24]
 8012cfe:	e003      	b.n	8012d08 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8012d00:	68bb      	ldr	r3, [r7, #8]
 8012d02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8012d04:	2300      	movs	r3, #0
 8012d06:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8012d08:	e030      	b.n	8012d6c <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8012d0a:	683b      	ldr	r3, [r7, #0]
 8012d0c:	9300      	str	r3, [sp, #0]
 8012d0e:	697b      	ldr	r3, [r7, #20]
 8012d10:	2200      	movs	r2, #0
 8012d12:	2180      	movs	r1, #128	@ 0x80
 8012d14:	68f8      	ldr	r0, [r7, #12]
 8012d16:	f000 ff97 	bl	8013c48 <UART_WaitOnFlagUntilTimeout>
 8012d1a:	4603      	mov	r3, r0
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	d005      	beq.n	8012d2c <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8012d20:	68fb      	ldr	r3, [r7, #12]
 8012d22:	2220      	movs	r2, #32
 8012d24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8012d28:	2303      	movs	r3, #3
 8012d2a:	e03d      	b.n	8012da8 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8012d2c:	69fb      	ldr	r3, [r7, #28]
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d10b      	bne.n	8012d4a <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8012d32:	69bb      	ldr	r3, [r7, #24]
 8012d34:	881b      	ldrh	r3, [r3, #0]
 8012d36:	461a      	mov	r2, r3
 8012d38:	68fb      	ldr	r3, [r7, #12]
 8012d3a:	681b      	ldr	r3, [r3, #0]
 8012d3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8012d40:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8012d42:	69bb      	ldr	r3, [r7, #24]
 8012d44:	3302      	adds	r3, #2
 8012d46:	61bb      	str	r3, [r7, #24]
 8012d48:	e007      	b.n	8012d5a <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8012d4a:	69fb      	ldr	r3, [r7, #28]
 8012d4c:	781a      	ldrb	r2, [r3, #0]
 8012d4e:	68fb      	ldr	r3, [r7, #12]
 8012d50:	681b      	ldr	r3, [r3, #0]
 8012d52:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8012d54:	69fb      	ldr	r3, [r7, #28]
 8012d56:	3301      	adds	r3, #1
 8012d58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8012d5a:	68fb      	ldr	r3, [r7, #12]
 8012d5c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8012d60:	b29b      	uxth	r3, r3
 8012d62:	3b01      	subs	r3, #1
 8012d64:	b29a      	uxth	r2, r3
 8012d66:	68fb      	ldr	r3, [r7, #12]
 8012d68:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8012d6c:	68fb      	ldr	r3, [r7, #12]
 8012d6e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8012d72:	b29b      	uxth	r3, r3
 8012d74:	2b00      	cmp	r3, #0
 8012d76:	d1c8      	bne.n	8012d0a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8012d78:	683b      	ldr	r3, [r7, #0]
 8012d7a:	9300      	str	r3, [sp, #0]
 8012d7c:	697b      	ldr	r3, [r7, #20]
 8012d7e:	2200      	movs	r2, #0
 8012d80:	2140      	movs	r1, #64	@ 0x40
 8012d82:	68f8      	ldr	r0, [r7, #12]
 8012d84:	f000 ff60 	bl	8013c48 <UART_WaitOnFlagUntilTimeout>
 8012d88:	4603      	mov	r3, r0
 8012d8a:	2b00      	cmp	r3, #0
 8012d8c:	d005      	beq.n	8012d9a <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8012d8e:	68fb      	ldr	r3, [r7, #12]
 8012d90:	2220      	movs	r2, #32
 8012d92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8012d96:	2303      	movs	r3, #3
 8012d98:	e006      	b.n	8012da8 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8012d9a:	68fb      	ldr	r3, [r7, #12]
 8012d9c:	2220      	movs	r2, #32
 8012d9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8012da2:	2300      	movs	r3, #0
 8012da4:	e000      	b.n	8012da8 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 8012da6:	2302      	movs	r3, #2
  }
}
 8012da8:	4618      	mov	r0, r3
 8012daa:	3720      	adds	r7, #32
 8012dac:	46bd      	mov	sp, r7
 8012dae:	bd80      	pop	{r7, pc}

08012db0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012db0:	b580      	push	{r7, lr}
 8012db2:	b08a      	sub	sp, #40	@ 0x28
 8012db4:	af02      	add	r7, sp, #8
 8012db6:	60f8      	str	r0, [r7, #12]
 8012db8:	60b9      	str	r1, [r7, #8]
 8012dba:	603b      	str	r3, [r7, #0]
 8012dbc:	4613      	mov	r3, r2
 8012dbe:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8012dc0:	68fb      	ldr	r3, [r7, #12]
 8012dc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8012dc6:	2b20      	cmp	r3, #32
 8012dc8:	f040 80c4 	bne.w	8012f54 <HAL_UART_Receive+0x1a4>
  {
    if ((pData == NULL) || (Size == 0U))
 8012dcc:	68bb      	ldr	r3, [r7, #8]
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	d002      	beq.n	8012dd8 <HAL_UART_Receive+0x28>
 8012dd2:	88fb      	ldrh	r3, [r7, #6]
 8012dd4:	2b00      	cmp	r3, #0
 8012dd6:	d101      	bne.n	8012ddc <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8012dd8:	2301      	movs	r3, #1
 8012dda:	e0bc      	b.n	8012f56 <HAL_UART_Receive+0x1a6>
    }

    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012ddc:	68fb      	ldr	r3, [r7, #12]
 8012dde:	681b      	ldr	r3, [r3, #0]
 8012de0:	689b      	ldr	r3, [r3, #8]
 8012de2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012de6:	2b40      	cmp	r3, #64	@ 0x40
 8012de8:	d107      	bne.n	8012dfa <HAL_UART_Receive+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012dea:	68fb      	ldr	r3, [r7, #12]
 8012dec:	681b      	ldr	r3, [r3, #0]
 8012dee:	689a      	ldr	r2, [r3, #8]
 8012df0:	68fb      	ldr	r3, [r7, #12]
 8012df2:	681b      	ldr	r3, [r3, #0]
 8012df4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8012df8:	609a      	str	r2, [r3, #8]
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012dfa:	68fb      	ldr	r3, [r7, #12]
 8012dfc:	2200      	movs	r2, #0
 8012dfe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8012e02:	68fb      	ldr	r3, [r7, #12]
 8012e04:	2222      	movs	r2, #34	@ 0x22
 8012e06:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012e0a:	68fb      	ldr	r3, [r7, #12]
 8012e0c:	2200      	movs	r2, #0
 8012e0e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8012e10:	f7f2 fdce 	bl	80059b0 <HAL_GetTick>
 8012e14:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8012e16:	68fb      	ldr	r3, [r7, #12]
 8012e18:	88fa      	ldrh	r2, [r7, #6]
 8012e1a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8012e1e:	68fb      	ldr	r3, [r7, #12]
 8012e20:	88fa      	ldrh	r2, [r7, #6]
 8012e22:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8012e26:	68fb      	ldr	r3, [r7, #12]
 8012e28:	689b      	ldr	r3, [r3, #8]
 8012e2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012e2e:	d10e      	bne.n	8012e4e <HAL_UART_Receive+0x9e>
 8012e30:	68fb      	ldr	r3, [r7, #12]
 8012e32:	691b      	ldr	r3, [r3, #16]
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	d105      	bne.n	8012e44 <HAL_UART_Receive+0x94>
 8012e38:	68fb      	ldr	r3, [r7, #12]
 8012e3a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8012e3e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8012e42:	e02d      	b.n	8012ea0 <HAL_UART_Receive+0xf0>
 8012e44:	68fb      	ldr	r3, [r7, #12]
 8012e46:	22ff      	movs	r2, #255	@ 0xff
 8012e48:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8012e4c:	e028      	b.n	8012ea0 <HAL_UART_Receive+0xf0>
 8012e4e:	68fb      	ldr	r3, [r7, #12]
 8012e50:	689b      	ldr	r3, [r3, #8]
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	d10d      	bne.n	8012e72 <HAL_UART_Receive+0xc2>
 8012e56:	68fb      	ldr	r3, [r7, #12]
 8012e58:	691b      	ldr	r3, [r3, #16]
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d104      	bne.n	8012e68 <HAL_UART_Receive+0xb8>
 8012e5e:	68fb      	ldr	r3, [r7, #12]
 8012e60:	22ff      	movs	r2, #255	@ 0xff
 8012e62:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8012e66:	e01b      	b.n	8012ea0 <HAL_UART_Receive+0xf0>
 8012e68:	68fb      	ldr	r3, [r7, #12]
 8012e6a:	227f      	movs	r2, #127	@ 0x7f
 8012e6c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8012e70:	e016      	b.n	8012ea0 <HAL_UART_Receive+0xf0>
 8012e72:	68fb      	ldr	r3, [r7, #12]
 8012e74:	689b      	ldr	r3, [r3, #8]
 8012e76:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012e7a:	d10d      	bne.n	8012e98 <HAL_UART_Receive+0xe8>
 8012e7c:	68fb      	ldr	r3, [r7, #12]
 8012e7e:	691b      	ldr	r3, [r3, #16]
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	d104      	bne.n	8012e8e <HAL_UART_Receive+0xde>
 8012e84:	68fb      	ldr	r3, [r7, #12]
 8012e86:	227f      	movs	r2, #127	@ 0x7f
 8012e88:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8012e8c:	e008      	b.n	8012ea0 <HAL_UART_Receive+0xf0>
 8012e8e:	68fb      	ldr	r3, [r7, #12]
 8012e90:	223f      	movs	r2, #63	@ 0x3f
 8012e92:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8012e96:	e003      	b.n	8012ea0 <HAL_UART_Receive+0xf0>
 8012e98:	68fb      	ldr	r3, [r7, #12]
 8012e9a:	2200      	movs	r2, #0
 8012e9c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8012ea0:	68fb      	ldr	r3, [r7, #12]
 8012ea2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012ea6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012ea8:	68fb      	ldr	r3, [r7, #12]
 8012eaa:	689b      	ldr	r3, [r3, #8]
 8012eac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012eb0:	d108      	bne.n	8012ec4 <HAL_UART_Receive+0x114>
 8012eb2:	68fb      	ldr	r3, [r7, #12]
 8012eb4:	691b      	ldr	r3, [r3, #16]
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	d104      	bne.n	8012ec4 <HAL_UART_Receive+0x114>
    {
      pdata8bits  = NULL;
 8012eba:	2300      	movs	r3, #0
 8012ebc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8012ebe:	68bb      	ldr	r3, [r7, #8]
 8012ec0:	61bb      	str	r3, [r7, #24]
 8012ec2:	e003      	b.n	8012ecc <HAL_UART_Receive+0x11c>
    }
    else
    {
      pdata8bits  = pData;
 8012ec4:	68bb      	ldr	r3, [r7, #8]
 8012ec6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8012ec8:	2300      	movs	r3, #0
 8012eca:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8012ecc:	e036      	b.n	8012f3c <HAL_UART_Receive+0x18c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8012ece:	683b      	ldr	r3, [r7, #0]
 8012ed0:	9300      	str	r3, [sp, #0]
 8012ed2:	697b      	ldr	r3, [r7, #20]
 8012ed4:	2200      	movs	r2, #0
 8012ed6:	2120      	movs	r1, #32
 8012ed8:	68f8      	ldr	r0, [r7, #12]
 8012eda:	f000 feb5 	bl	8013c48 <UART_WaitOnFlagUntilTimeout>
 8012ede:	4603      	mov	r3, r0
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	d005      	beq.n	8012ef0 <HAL_UART_Receive+0x140>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8012ee4:	68fb      	ldr	r3, [r7, #12]
 8012ee6:	2220      	movs	r2, #32
 8012ee8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8012eec:	2303      	movs	r3, #3
 8012eee:	e032      	b.n	8012f56 <HAL_UART_Receive+0x1a6>
      }
      if (pdata8bits == NULL)
 8012ef0:	69fb      	ldr	r3, [r7, #28]
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	d10c      	bne.n	8012f10 <HAL_UART_Receive+0x160>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8012ef6:	68fb      	ldr	r3, [r7, #12]
 8012ef8:	681b      	ldr	r3, [r3, #0]
 8012efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012efc:	b29a      	uxth	r2, r3
 8012efe:	8a7b      	ldrh	r3, [r7, #18]
 8012f00:	4013      	ands	r3, r2
 8012f02:	b29a      	uxth	r2, r3
 8012f04:	69bb      	ldr	r3, [r7, #24]
 8012f06:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8012f08:	69bb      	ldr	r3, [r7, #24]
 8012f0a:	3302      	adds	r3, #2
 8012f0c:	61bb      	str	r3, [r7, #24]
 8012f0e:	e00c      	b.n	8012f2a <HAL_UART_Receive+0x17a>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8012f10:	68fb      	ldr	r3, [r7, #12]
 8012f12:	681b      	ldr	r3, [r3, #0]
 8012f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012f16:	b2da      	uxtb	r2, r3
 8012f18:	8a7b      	ldrh	r3, [r7, #18]
 8012f1a:	b2db      	uxtb	r3, r3
 8012f1c:	4013      	ands	r3, r2
 8012f1e:	b2da      	uxtb	r2, r3
 8012f20:	69fb      	ldr	r3, [r7, #28]
 8012f22:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8012f24:	69fb      	ldr	r3, [r7, #28]
 8012f26:	3301      	adds	r3, #1
 8012f28:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8012f2a:	68fb      	ldr	r3, [r7, #12]
 8012f2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8012f30:	b29b      	uxth	r3, r3
 8012f32:	3b01      	subs	r3, #1
 8012f34:	b29a      	uxth	r2, r3
 8012f36:	68fb      	ldr	r3, [r7, #12]
 8012f38:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8012f3c:	68fb      	ldr	r3, [r7, #12]
 8012f3e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8012f42:	b29b      	uxth	r3, r3
 8012f44:	2b00      	cmp	r3, #0
 8012f46:	d1c2      	bne.n	8012ece <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8012f48:	68fb      	ldr	r3, [r7, #12]
 8012f4a:	2220      	movs	r2, #32
 8012f4c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8012f50:	2300      	movs	r3, #0
 8012f52:	e000      	b.n	8012f56 <HAL_UART_Receive+0x1a6>
  }
  else
  {
    return HAL_BUSY;
 8012f54:	2302      	movs	r3, #2
  }
}
 8012f56:	4618      	mov	r0, r3
 8012f58:	3720      	adds	r7, #32
 8012f5a:	46bd      	mov	sp, r7
 8012f5c:	bd80      	pop	{r7, pc}
	...

08012f60 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012f60:	b580      	push	{r7, lr}
 8012f62:	b08a      	sub	sp, #40	@ 0x28
 8012f64:	af00      	add	r7, sp, #0
 8012f66:	60f8      	str	r0, [r7, #12]
 8012f68:	60b9      	str	r1, [r7, #8]
 8012f6a:	4613      	mov	r3, r2
 8012f6c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8012f6e:	68fb      	ldr	r3, [r7, #12]
 8012f70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8012f74:	2b20      	cmp	r3, #32
 8012f76:	d13c      	bne.n	8012ff2 <HAL_UART_Receive_DMA+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8012f78:	68bb      	ldr	r3, [r7, #8]
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	d002      	beq.n	8012f84 <HAL_UART_Receive_DMA+0x24>
 8012f7e:	88fb      	ldrh	r3, [r7, #6]
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	d101      	bne.n	8012f88 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8012f84:	2301      	movs	r3, #1
 8012f86:	e035      	b.n	8012ff4 <HAL_UART_Receive_DMA+0x94>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012f88:	68fb      	ldr	r3, [r7, #12]
 8012f8a:	2200      	movs	r2, #0
 8012f8c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012f8e:	68fb      	ldr	r3, [r7, #12]
 8012f90:	681b      	ldr	r3, [r3, #0]
 8012f92:	4a1a      	ldr	r2, [pc, #104]	@ (8012ffc <HAL_UART_Receive_DMA+0x9c>)
 8012f94:	4293      	cmp	r3, r2
 8012f96:	d024      	beq.n	8012fe2 <HAL_UART_Receive_DMA+0x82>
 8012f98:	68fb      	ldr	r3, [r7, #12]
 8012f9a:	681b      	ldr	r3, [r3, #0]
 8012f9c:	4a18      	ldr	r2, [pc, #96]	@ (8013000 <HAL_UART_Receive_DMA+0xa0>)
 8012f9e:	4293      	cmp	r3, r2
 8012fa0:	d01f      	beq.n	8012fe2 <HAL_UART_Receive_DMA+0x82>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012fa2:	68fb      	ldr	r3, [r7, #12]
 8012fa4:	681b      	ldr	r3, [r3, #0]
 8012fa6:	685b      	ldr	r3, [r3, #4]
 8012fa8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	d018      	beq.n	8012fe2 <HAL_UART_Receive_DMA+0x82>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012fb0:	68fb      	ldr	r3, [r7, #12]
 8012fb2:	681b      	ldr	r3, [r3, #0]
 8012fb4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012fb6:	697b      	ldr	r3, [r7, #20]
 8012fb8:	e853 3f00 	ldrex	r3, [r3]
 8012fbc:	613b      	str	r3, [r7, #16]
   return(result);
 8012fbe:	693b      	ldr	r3, [r7, #16]
 8012fc0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8012fc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8012fc6:	68fb      	ldr	r3, [r7, #12]
 8012fc8:	681b      	ldr	r3, [r3, #0]
 8012fca:	461a      	mov	r2, r3
 8012fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012fce:	623b      	str	r3, [r7, #32]
 8012fd0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012fd2:	69f9      	ldr	r1, [r7, #28]
 8012fd4:	6a3a      	ldr	r2, [r7, #32]
 8012fd6:	e841 2300 	strex	r3, r2, [r1]
 8012fda:	61bb      	str	r3, [r7, #24]
   return(result);
 8012fdc:	69bb      	ldr	r3, [r7, #24]
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	d1e6      	bne.n	8012fb0 <HAL_UART_Receive_DMA+0x50>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8012fe2:	88fb      	ldrh	r3, [r7, #6]
 8012fe4:	461a      	mov	r2, r3
 8012fe6:	68b9      	ldr	r1, [r7, #8]
 8012fe8:	68f8      	ldr	r0, [r7, #12]
 8012fea:	f000 ffbd 	bl	8013f68 <UART_Start_Receive_DMA>
 8012fee:	4603      	mov	r3, r0
 8012ff0:	e000      	b.n	8012ff4 <HAL_UART_Receive_DMA+0x94>
  }
  else
  {
    return HAL_BUSY;
 8012ff2:	2302      	movs	r3, #2
  }
}
 8012ff4:	4618      	mov	r0, r3
 8012ff6:	3728      	adds	r7, #40	@ 0x28
 8012ff8:	46bd      	mov	sp, r7
 8012ffa:	bd80      	pop	{r7, pc}
 8012ffc:	44002400 	.word	0x44002400
 8013000:	54002400 	.word	0x54002400

08013004 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8013004:	b580      	push	{r7, lr}
 8013006:	b0ae      	sub	sp, #184	@ 0xb8
 8013008:	af00      	add	r7, sp, #0
 801300a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	681b      	ldr	r3, [r3, #0]
 8013010:	69db      	ldr	r3, [r3, #28]
 8013012:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	681b      	ldr	r3, [r3, #0]
 801301a:	681b      	ldr	r3, [r3, #0]
 801301c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	681b      	ldr	r3, [r3, #0]
 8013024:	689b      	ldr	r3, [r3, #8]
 8013026:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801302a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 801302e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8013032:	4013      	ands	r3, r2
 8013034:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (errorflags == 0U)
 8013038:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801303c:	2b00      	cmp	r3, #0
 801303e:	d11b      	bne.n	8013078 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8013040:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8013044:	f003 0320 	and.w	r3, r3, #32
 8013048:	2b00      	cmp	r3, #0
 801304a:	d015      	beq.n	8013078 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801304c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8013050:	f003 0320 	and.w	r3, r3, #32
 8013054:	2b00      	cmp	r3, #0
 8013056:	d105      	bne.n	8013064 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8013058:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801305c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8013060:	2b00      	cmp	r3, #0
 8013062:	d009      	beq.n	8013078 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013068:	2b00      	cmp	r3, #0
 801306a:	f000 8293 	beq.w	8013594 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013072:	6878      	ldr	r0, [r7, #4]
 8013074:	4798      	blx	r3
      }
      return;
 8013076:	e28d      	b.n	8013594 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8013078:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801307c:	2b00      	cmp	r3, #0
 801307e:	f000 80fd 	beq.w	801327c <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8013082:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8013086:	4b7a      	ldr	r3, [pc, #488]	@ (8013270 <HAL_UART_IRQHandler+0x26c>)
 8013088:	4013      	ands	r3, r2
 801308a:	2b00      	cmp	r3, #0
 801308c:	d106      	bne.n	801309c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 801308e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8013092:	4b78      	ldr	r3, [pc, #480]	@ (8013274 <HAL_UART_IRQHandler+0x270>)
 8013094:	4013      	ands	r3, r2
 8013096:	2b00      	cmp	r3, #0
 8013098:	f000 80f0 	beq.w	801327c <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801309c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80130a0:	f003 0301 	and.w	r3, r3, #1
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	d011      	beq.n	80130cc <HAL_UART_IRQHandler+0xc8>
 80130a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80130ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	d00b      	beq.n	80130cc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	681b      	ldr	r3, [r3, #0]
 80130b8:	2201      	movs	r2, #1
 80130ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80130c2:	f043 0201 	orr.w	r2, r3, #1
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80130cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80130d0:	f003 0302 	and.w	r3, r3, #2
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	d011      	beq.n	80130fc <HAL_UART_IRQHandler+0xf8>
 80130d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80130dc:	f003 0301 	and.w	r3, r3, #1
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	d00b      	beq.n	80130fc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	681b      	ldr	r3, [r3, #0]
 80130e8:	2202      	movs	r2, #2
 80130ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80130f2:	f043 0204 	orr.w	r2, r3, #4
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80130fc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8013100:	f003 0304 	and.w	r3, r3, #4
 8013104:	2b00      	cmp	r3, #0
 8013106:	d011      	beq.n	801312c <HAL_UART_IRQHandler+0x128>
 8013108:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801310c:	f003 0301 	and.w	r3, r3, #1
 8013110:	2b00      	cmp	r3, #0
 8013112:	d00b      	beq.n	801312c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	681b      	ldr	r3, [r3, #0]
 8013118:	2204      	movs	r2, #4
 801311a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013122:	f043 0202 	orr.w	r2, r3, #2
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 801312c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8013130:	f003 0308 	and.w	r3, r3, #8
 8013134:	2b00      	cmp	r3, #0
 8013136:	d017      	beq.n	8013168 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8013138:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801313c:	f003 0320 	and.w	r3, r3, #32
 8013140:	2b00      	cmp	r3, #0
 8013142:	d105      	bne.n	8013150 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8013144:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8013148:	4b49      	ldr	r3, [pc, #292]	@ (8013270 <HAL_UART_IRQHandler+0x26c>)
 801314a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801314c:	2b00      	cmp	r3, #0
 801314e:	d00b      	beq.n	8013168 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	681b      	ldr	r3, [r3, #0]
 8013154:	2208      	movs	r2, #8
 8013156:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801315e:	f043 0208 	orr.w	r2, r3, #8
 8013162:	687b      	ldr	r3, [r7, #4]
 8013164:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8013168:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801316c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8013170:	2b00      	cmp	r3, #0
 8013172:	d012      	beq.n	801319a <HAL_UART_IRQHandler+0x196>
 8013174:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8013178:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 801317c:	2b00      	cmp	r3, #0
 801317e:	d00c      	beq.n	801319a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	681b      	ldr	r3, [r3, #0]
 8013184:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8013188:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013190:	f043 0220 	orr.w	r2, r3, #32
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80131a0:	2b00      	cmp	r3, #0
 80131a2:	f000 81f9 	beq.w	8013598 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80131a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80131aa:	f003 0320 	and.w	r3, r3, #32
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d013      	beq.n	80131da <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80131b2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80131b6:	f003 0320 	and.w	r3, r3, #32
 80131ba:	2b00      	cmp	r3, #0
 80131bc:	d105      	bne.n	80131ca <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80131be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80131c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80131c6:	2b00      	cmp	r3, #0
 80131c8:	d007      	beq.n	80131da <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	d003      	beq.n	80131da <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80131d6:	6878      	ldr	r0, [r7, #4]
 80131d8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80131e0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	681b      	ldr	r3, [r3, #0]
 80131e8:	689b      	ldr	r3, [r3, #8]
 80131ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80131ee:	2b40      	cmp	r3, #64	@ 0x40
 80131f0:	d005      	beq.n	80131fe <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80131f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80131f6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80131fa:	2b00      	cmp	r3, #0
 80131fc:	d02e      	beq.n	801325c <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80131fe:	6878      	ldr	r0, [r7, #4]
 8013200:	f000 ffeb 	bl	80141da <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	681b      	ldr	r3, [r3, #0]
 8013208:	689b      	ldr	r3, [r3, #8]
 801320a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801320e:	2b40      	cmp	r3, #64	@ 0x40
 8013210:	d120      	bne.n	8013254 <HAL_UART_IRQHandler+0x250>
        {
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013218:	2b00      	cmp	r3, #0
 801321a:	d017      	beq.n	801324c <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013222:	4a15      	ldr	r2, [pc, #84]	@ (8013278 <HAL_UART_IRQHandler+0x274>)
 8013224:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801322c:	4618      	mov	r0, r3
 801322e:	f7f5 ffb0 	bl	8009192 <HAL_DMA_Abort_IT>
 8013232:	4603      	mov	r3, r0
 8013234:	2b00      	cmp	r3, #0
 8013236:	d019      	beq.n	801326c <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801323e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013240:	687a      	ldr	r2, [r7, #4]
 8013242:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8013246:	4610      	mov	r0, r2
 8013248:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801324a:	e00f      	b.n	801326c <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801324c:	6878      	ldr	r0, [r7, #4]
 801324e:	f000 f9b7 	bl	80135c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013252:	e00b      	b.n	801326c <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8013254:	6878      	ldr	r0, [r7, #4]
 8013256:	f000 f9b3 	bl	80135c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801325a:	e007      	b.n	801326c <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801325c:	6878      	ldr	r0, [r7, #4]
 801325e:	f000 f9af 	bl	80135c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	2200      	movs	r2, #0
 8013266:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 801326a:	e195      	b.n	8013598 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801326c:	bf00      	nop
    return;
 801326e:	e193      	b.n	8013598 <HAL_UART_IRQHandler+0x594>
 8013270:	10000001 	.word	0x10000001
 8013274:	04000120 	.word	0x04000120
 8013278:	08014457 	.word	0x08014457

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013280:	2b01      	cmp	r3, #1
 8013282:	f040 8129 	bne.w	80134d8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8013286:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801328a:	f003 0310 	and.w	r3, r3, #16
 801328e:	2b00      	cmp	r3, #0
 8013290:	f000 8122 	beq.w	80134d8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8013294:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8013298:	f003 0310 	and.w	r3, r3, #16
 801329c:	2b00      	cmp	r3, #0
 801329e:	f000 811b 	beq.w	80134d8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	681b      	ldr	r3, [r3, #0]
 80132a6:	2210      	movs	r2, #16
 80132a8:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	681b      	ldr	r3, [r3, #0]
 80132ae:	689b      	ldr	r3, [r3, #8]
 80132b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80132b4:	2b40      	cmp	r3, #64	@ 0x40
 80132b6:	f040 8091 	bne.w	80133dc <HAL_UART_IRQHandler+0x3d8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80132c0:	681b      	ldr	r3, [r3, #0]
 80132c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80132c4:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
      if ((nb_remaining_rx_data > 0U)
 80132c8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	f000 8165 	beq.w	801359c <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80132d8:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 80132dc:	429a      	cmp	r2, r3
 80132de:	f080 815d 	bcs.w	801359c <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 80132e8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80132f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80132f4:	2b81      	cmp	r3, #129	@ 0x81
 80132f6:	d060      	beq.n	80133ba <HAL_UART_IRQHandler+0x3b6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	681b      	ldr	r3, [r3, #0]
 80132fc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80132fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8013300:	e853 3f00 	ldrex	r3, [r3]
 8013304:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8013306:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013308:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801330c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	681b      	ldr	r3, [r3, #0]
 8013314:	461a      	mov	r2, r3
 8013316:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801331a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801331e:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013320:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8013322:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8013326:	e841 2300 	strex	r3, r2, [r1]
 801332a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 801332c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801332e:	2b00      	cmp	r3, #0
 8013330:	d1e2      	bne.n	80132f8 <HAL_UART_IRQHandler+0x2f4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	681b      	ldr	r3, [r3, #0]
 8013336:	3308      	adds	r3, #8
 8013338:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801333a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801333c:	e853 3f00 	ldrex	r3, [r3]
 8013340:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8013342:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013344:	f023 0301 	bic.w	r3, r3, #1
 8013348:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	681b      	ldr	r3, [r3, #0]
 8013350:	3308      	adds	r3, #8
 8013352:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8013356:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8013358:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801335a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801335c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801335e:	e841 2300 	strex	r3, r2, [r1]
 8013362:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8013364:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013366:	2b00      	cmp	r3, #0
 8013368:	d1e3      	bne.n	8013332 <HAL_UART_IRQHandler+0x32e>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	2220      	movs	r2, #32
 801336e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	2200      	movs	r2, #0
 8013376:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	681b      	ldr	r3, [r3, #0]
 801337c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801337e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013380:	e853 3f00 	ldrex	r3, [r3]
 8013384:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8013386:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013388:	f023 0310 	bic.w	r3, r3, #16
 801338c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	681b      	ldr	r3, [r3, #0]
 8013394:	461a      	mov	r2, r3
 8013396:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801339a:	65bb      	str	r3, [r7, #88]	@ 0x58
 801339c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801339e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80133a0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80133a2:	e841 2300 	strex	r3, r2, [r1]
 80133a6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80133a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80133aa:	2b00      	cmp	r3, #0
 80133ac:	d1e4      	bne.n	8013378 <HAL_UART_IRQHandler+0x374>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80133b4:	4618      	mov	r0, r3
 80133b6:	f7f5 fe70 	bl	800909a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	2202      	movs	r2, #2
 80133be:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80133cc:	b29b      	uxth	r3, r3
 80133ce:	1ad3      	subs	r3, r2, r3
 80133d0:	b29b      	uxth	r3, r3
 80133d2:	4619      	mov	r1, r3
 80133d4:	6878      	ldr	r0, [r7, #4]
 80133d6:	f7f0 f84f 	bl	8003478 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80133da:	e0df      	b.n	801359c <HAL_UART_IRQHandler+0x598>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80133e8:	b29b      	uxth	r3, r3
 80133ea:	1ad3      	subs	r3, r2, r3
 80133ec:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
      if ((huart->RxXferCount > 0U)
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80133f6:	b29b      	uxth	r3, r3
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	f000 80d1 	beq.w	80135a0 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 80133fe:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8013402:	2b00      	cmp	r3, #0
 8013404:	f000 80cc 	beq.w	80135a0 <HAL_UART_IRQHandler+0x59c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	681b      	ldr	r3, [r3, #0]
 801340c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801340e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013410:	e853 3f00 	ldrex	r3, [r3]
 8013414:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8013416:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013418:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801341c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	681b      	ldr	r3, [r3, #0]
 8013424:	461a      	mov	r2, r3
 8013426:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801342a:	647b      	str	r3, [r7, #68]	@ 0x44
 801342c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801342e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8013430:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013432:	e841 2300 	strex	r3, r2, [r1]
 8013436:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8013438:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801343a:	2b00      	cmp	r3, #0
 801343c:	d1e4      	bne.n	8013408 <HAL_UART_IRQHandler+0x404>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	681b      	ldr	r3, [r3, #0]
 8013442:	3308      	adds	r3, #8
 8013444:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013448:	e853 3f00 	ldrex	r3, [r3]
 801344c:	623b      	str	r3, [r7, #32]
   return(result);
 801344e:	6a3b      	ldr	r3, [r7, #32]
 8013450:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8013454:	f023 0301 	bic.w	r3, r3, #1
 8013458:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	681b      	ldr	r3, [r3, #0]
 8013460:	3308      	adds	r3, #8
 8013462:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8013466:	633a      	str	r2, [r7, #48]	@ 0x30
 8013468:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801346a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801346c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801346e:	e841 2300 	strex	r3, r2, [r1]
 8013472:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8013474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013476:	2b00      	cmp	r3, #0
 8013478:	d1e1      	bne.n	801343e <HAL_UART_IRQHandler+0x43a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	2220      	movs	r2, #32
 801347e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	2200      	movs	r2, #0
 8013486:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	2200      	movs	r2, #0
 801348c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	681b      	ldr	r3, [r3, #0]
 8013492:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013494:	693b      	ldr	r3, [r7, #16]
 8013496:	e853 3f00 	ldrex	r3, [r3]
 801349a:	60fb      	str	r3, [r7, #12]
   return(result);
 801349c:	68fb      	ldr	r3, [r7, #12]
 801349e:	f023 0310 	bic.w	r3, r3, #16
 80134a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	681b      	ldr	r3, [r3, #0]
 80134aa:	461a      	mov	r2, r3
 80134ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80134b0:	61fb      	str	r3, [r7, #28]
 80134b2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80134b4:	69b9      	ldr	r1, [r7, #24]
 80134b6:	69fa      	ldr	r2, [r7, #28]
 80134b8:	e841 2300 	strex	r3, r2, [r1]
 80134bc:	617b      	str	r3, [r7, #20]
   return(result);
 80134be:	697b      	ldr	r3, [r7, #20]
 80134c0:	2b00      	cmp	r3, #0
 80134c2:	d1e4      	bne.n	801348e <HAL_UART_IRQHandler+0x48a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	2202      	movs	r2, #2
 80134c8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80134ca:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 80134ce:	4619      	mov	r1, r3
 80134d0:	6878      	ldr	r0, [r7, #4]
 80134d2:	f7ef ffd1 	bl	8003478 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80134d6:	e063      	b.n	80135a0 <HAL_UART_IRQHandler+0x59c>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80134d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80134dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	d00e      	beq.n	8013502 <HAL_UART_IRQHandler+0x4fe>
 80134e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80134e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	d008      	beq.n	8013502 <HAL_UART_IRQHandler+0x4fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	681b      	ldr	r3, [r3, #0]
 80134f4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80134f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80134fa:	6878      	ldr	r0, [r7, #4]
 80134fc:	f001 fd24 	bl	8014f48 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8013500:	e051      	b.n	80135a6 <HAL_UART_IRQHandler+0x5a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8013502:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8013506:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801350a:	2b00      	cmp	r3, #0
 801350c:	d014      	beq.n	8013538 <HAL_UART_IRQHandler+0x534>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 801350e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8013512:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013516:	2b00      	cmp	r3, #0
 8013518:	d105      	bne.n	8013526 <HAL_UART_IRQHandler+0x522>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 801351a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801351e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8013522:	2b00      	cmp	r3, #0
 8013524:	d008      	beq.n	8013538 <HAL_UART_IRQHandler+0x534>
  {
    if (huart->TxISR != NULL)
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801352a:	2b00      	cmp	r3, #0
 801352c:	d03a      	beq.n	80135a4 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013532:	6878      	ldr	r0, [r7, #4]
 8013534:	4798      	blx	r3
    }
    return;
 8013536:	e035      	b.n	80135a4 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8013538:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801353c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013540:	2b00      	cmp	r3, #0
 8013542:	d009      	beq.n	8013558 <HAL_UART_IRQHandler+0x554>
 8013544:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8013548:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801354c:	2b00      	cmp	r3, #0
 801354e:	d003      	beq.n	8013558 <HAL_UART_IRQHandler+0x554>
  {
    UART_EndTransmit_IT(huart);
 8013550:	6878      	ldr	r0, [r7, #4]
 8013552:	f000 ff96 	bl	8014482 <UART_EndTransmit_IT>
    return;
 8013556:	e026      	b.n	80135a6 <HAL_UART_IRQHandler+0x5a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8013558:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801355c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8013560:	2b00      	cmp	r3, #0
 8013562:	d009      	beq.n	8013578 <HAL_UART_IRQHandler+0x574>
 8013564:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8013568:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 801356c:	2b00      	cmp	r3, #0
 801356e:	d003      	beq.n	8013578 <HAL_UART_IRQHandler+0x574>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8013570:	6878      	ldr	r0, [r7, #4]
 8013572:	f001 fcfd 	bl	8014f70 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8013576:	e016      	b.n	80135a6 <HAL_UART_IRQHandler+0x5a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8013578:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801357c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8013580:	2b00      	cmp	r3, #0
 8013582:	d010      	beq.n	80135a6 <HAL_UART_IRQHandler+0x5a2>
 8013584:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8013588:	2b00      	cmp	r3, #0
 801358a:	da0c      	bge.n	80135a6 <HAL_UART_IRQHandler+0x5a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 801358c:	6878      	ldr	r0, [r7, #4]
 801358e:	f001 fce5 	bl	8014f5c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8013592:	e008      	b.n	80135a6 <HAL_UART_IRQHandler+0x5a2>
      return;
 8013594:	bf00      	nop
 8013596:	e006      	b.n	80135a6 <HAL_UART_IRQHandler+0x5a2>
    return;
 8013598:	bf00      	nop
 801359a:	e004      	b.n	80135a6 <HAL_UART_IRQHandler+0x5a2>
      return;
 801359c:	bf00      	nop
 801359e:	e002      	b.n	80135a6 <HAL_UART_IRQHandler+0x5a2>
      return;
 80135a0:	bf00      	nop
 80135a2:	e000      	b.n	80135a6 <HAL_UART_IRQHandler+0x5a2>
    return;
 80135a4:	bf00      	nop
  }
}
 80135a6:	37b8      	adds	r7, #184	@ 0xb8
 80135a8:	46bd      	mov	sp, r7
 80135aa:	bd80      	pop	{r7, pc}

080135ac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80135ac:	b480      	push	{r7}
 80135ae:	b083      	sub	sp, #12
 80135b0:	af00      	add	r7, sp, #0
 80135b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80135b4:	bf00      	nop
 80135b6:	370c      	adds	r7, #12
 80135b8:	46bd      	mov	sp, r7
 80135ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135be:	4770      	bx	lr

080135c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80135c0:	b480      	push	{r7}
 80135c2:	b083      	sub	sp, #12
 80135c4:	af00      	add	r7, sp, #0
 80135c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80135c8:	bf00      	nop
 80135ca:	370c      	adds	r7, #12
 80135cc:	46bd      	mov	sp, r7
 80135ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135d2:	4770      	bx	lr

080135d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80135d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80135d8:	b094      	sub	sp, #80	@ 0x50
 80135da:	af00      	add	r7, sp, #0
 80135dc:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80135de:	2300      	movs	r3, #0
 80135e0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80135e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80135e6:	681a      	ldr	r2, [r3, #0]
 80135e8:	4b78      	ldr	r3, [pc, #480]	@ (80137cc <UART_SetConfig+0x1f8>)
 80135ea:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80135ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80135ee:	689a      	ldr	r2, [r3, #8]
 80135f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80135f2:	691b      	ldr	r3, [r3, #16]
 80135f4:	431a      	orrs	r2, r3
 80135f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80135f8:	695b      	ldr	r3, [r3, #20]
 80135fa:	431a      	orrs	r2, r3
 80135fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80135fe:	69db      	ldr	r3, [r3, #28]
 8013600:	4313      	orrs	r3, r2
 8013602:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8013604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013606:	681b      	ldr	r3, [r3, #0]
 8013608:	681b      	ldr	r3, [r3, #0]
 801360a:	4971      	ldr	r1, [pc, #452]	@ (80137d0 <UART_SetConfig+0x1fc>)
 801360c:	4019      	ands	r1, r3
 801360e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013610:	681a      	ldr	r2, [r3, #0]
 8013612:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013614:	430b      	orrs	r3, r1
 8013616:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8013618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801361a:	681b      	ldr	r3, [r3, #0]
 801361c:	685b      	ldr	r3, [r3, #4]
 801361e:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8013622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013624:	68d9      	ldr	r1, [r3, #12]
 8013626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013628:	681a      	ldr	r2, [r3, #0]
 801362a:	ea40 0301 	orr.w	r3, r0, r1
 801362e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8013630:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013632:	699b      	ldr	r3, [r3, #24]
 8013634:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8013636:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013638:	681a      	ldr	r2, [r3, #0]
 801363a:	4b64      	ldr	r3, [pc, #400]	@ (80137cc <UART_SetConfig+0x1f8>)
 801363c:	429a      	cmp	r2, r3
 801363e:	d009      	beq.n	8013654 <UART_SetConfig+0x80>
 8013640:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013642:	681a      	ldr	r2, [r3, #0]
 8013644:	4b63      	ldr	r3, [pc, #396]	@ (80137d4 <UART_SetConfig+0x200>)
 8013646:	429a      	cmp	r2, r3
 8013648:	d004      	beq.n	8013654 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801364a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801364c:	6a1a      	ldr	r2, [r3, #32]
 801364e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013650:	4313      	orrs	r3, r2
 8013652:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8013654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013656:	681b      	ldr	r3, [r3, #0]
 8013658:	689b      	ldr	r3, [r3, #8]
 801365a:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 801365e:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8013662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013664:	681a      	ldr	r2, [r3, #0]
 8013666:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013668:	430b      	orrs	r3, r1
 801366a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801366c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801366e:	681b      	ldr	r3, [r3, #0]
 8013670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013672:	f023 000f 	bic.w	r0, r3, #15
 8013676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013678:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 801367a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801367c:	681a      	ldr	r2, [r3, #0]
 801367e:	ea40 0301 	orr.w	r3, r0, r1
 8013682:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013686:	681a      	ldr	r2, [r3, #0]
 8013688:	4b53      	ldr	r3, [pc, #332]	@ (80137d8 <UART_SetConfig+0x204>)
 801368a:	429a      	cmp	r2, r3
 801368c:	d102      	bne.n	8013694 <UART_SetConfig+0xc0>
 801368e:	2301      	movs	r3, #1
 8013690:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013692:	e066      	b.n	8013762 <UART_SetConfig+0x18e>
 8013694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013696:	681a      	ldr	r2, [r3, #0]
 8013698:	4b50      	ldr	r3, [pc, #320]	@ (80137dc <UART_SetConfig+0x208>)
 801369a:	429a      	cmp	r2, r3
 801369c:	d102      	bne.n	80136a4 <UART_SetConfig+0xd0>
 801369e:	2302      	movs	r3, #2
 80136a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80136a2:	e05e      	b.n	8013762 <UART_SetConfig+0x18e>
 80136a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80136a6:	681a      	ldr	r2, [r3, #0]
 80136a8:	4b4d      	ldr	r3, [pc, #308]	@ (80137e0 <UART_SetConfig+0x20c>)
 80136aa:	429a      	cmp	r2, r3
 80136ac:	d102      	bne.n	80136b4 <UART_SetConfig+0xe0>
 80136ae:	2304      	movs	r3, #4
 80136b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80136b2:	e056      	b.n	8013762 <UART_SetConfig+0x18e>
 80136b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80136b6:	681a      	ldr	r2, [r3, #0]
 80136b8:	4b4a      	ldr	r3, [pc, #296]	@ (80137e4 <UART_SetConfig+0x210>)
 80136ba:	429a      	cmp	r2, r3
 80136bc:	d102      	bne.n	80136c4 <UART_SetConfig+0xf0>
 80136be:	2308      	movs	r3, #8
 80136c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80136c2:	e04e      	b.n	8013762 <UART_SetConfig+0x18e>
 80136c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80136c6:	681a      	ldr	r2, [r3, #0]
 80136c8:	4b47      	ldr	r3, [pc, #284]	@ (80137e8 <UART_SetConfig+0x214>)
 80136ca:	429a      	cmp	r2, r3
 80136cc:	d102      	bne.n	80136d4 <UART_SetConfig+0x100>
 80136ce:	2310      	movs	r3, #16
 80136d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80136d2:	e046      	b.n	8013762 <UART_SetConfig+0x18e>
 80136d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80136d6:	681a      	ldr	r2, [r3, #0]
 80136d8:	4b44      	ldr	r3, [pc, #272]	@ (80137ec <UART_SetConfig+0x218>)
 80136da:	429a      	cmp	r2, r3
 80136dc:	d102      	bne.n	80136e4 <UART_SetConfig+0x110>
 80136de:	2320      	movs	r3, #32
 80136e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80136e2:	e03e      	b.n	8013762 <UART_SetConfig+0x18e>
 80136e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80136e6:	681a      	ldr	r2, [r3, #0]
 80136e8:	4b41      	ldr	r3, [pc, #260]	@ (80137f0 <UART_SetConfig+0x21c>)
 80136ea:	429a      	cmp	r2, r3
 80136ec:	d102      	bne.n	80136f4 <UART_SetConfig+0x120>
 80136ee:	2340      	movs	r3, #64	@ 0x40
 80136f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80136f2:	e036      	b.n	8013762 <UART_SetConfig+0x18e>
 80136f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80136f6:	681a      	ldr	r2, [r3, #0]
 80136f8:	4b3e      	ldr	r3, [pc, #248]	@ (80137f4 <UART_SetConfig+0x220>)
 80136fa:	429a      	cmp	r2, r3
 80136fc:	d102      	bne.n	8013704 <UART_SetConfig+0x130>
 80136fe:	2380      	movs	r3, #128	@ 0x80
 8013700:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013702:	e02e      	b.n	8013762 <UART_SetConfig+0x18e>
 8013704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013706:	681a      	ldr	r2, [r3, #0]
 8013708:	4b3b      	ldr	r3, [pc, #236]	@ (80137f8 <UART_SetConfig+0x224>)
 801370a:	429a      	cmp	r2, r3
 801370c:	d103      	bne.n	8013716 <UART_SetConfig+0x142>
 801370e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8013712:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013714:	e025      	b.n	8013762 <UART_SetConfig+0x18e>
 8013716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013718:	681a      	ldr	r2, [r3, #0]
 801371a:	4b38      	ldr	r3, [pc, #224]	@ (80137fc <UART_SetConfig+0x228>)
 801371c:	429a      	cmp	r2, r3
 801371e:	d103      	bne.n	8013728 <UART_SetConfig+0x154>
 8013720:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8013724:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013726:	e01c      	b.n	8013762 <UART_SetConfig+0x18e>
 8013728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801372a:	681a      	ldr	r2, [r3, #0]
 801372c:	4b34      	ldr	r3, [pc, #208]	@ (8013800 <UART_SetConfig+0x22c>)
 801372e:	429a      	cmp	r2, r3
 8013730:	d103      	bne.n	801373a <UART_SetConfig+0x166>
 8013732:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013736:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013738:	e013      	b.n	8013762 <UART_SetConfig+0x18e>
 801373a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801373c:	681a      	ldr	r2, [r3, #0]
 801373e:	4b31      	ldr	r3, [pc, #196]	@ (8013804 <UART_SetConfig+0x230>)
 8013740:	429a      	cmp	r2, r3
 8013742:	d103      	bne.n	801374c <UART_SetConfig+0x178>
 8013744:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8013748:	64bb      	str	r3, [r7, #72]	@ 0x48
 801374a:	e00a      	b.n	8013762 <UART_SetConfig+0x18e>
 801374c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801374e:	681a      	ldr	r2, [r3, #0]
 8013750:	4b1e      	ldr	r3, [pc, #120]	@ (80137cc <UART_SetConfig+0x1f8>)
 8013752:	429a      	cmp	r2, r3
 8013754:	d103      	bne.n	801375e <UART_SetConfig+0x18a>
 8013756:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801375a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801375c:	e001      	b.n	8013762 <UART_SetConfig+0x18e>
 801375e:	2300      	movs	r3, #0
 8013760:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8013762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013764:	681a      	ldr	r2, [r3, #0]
 8013766:	4b19      	ldr	r3, [pc, #100]	@ (80137cc <UART_SetConfig+0x1f8>)
 8013768:	429a      	cmp	r2, r3
 801376a:	d005      	beq.n	8013778 <UART_SetConfig+0x1a4>
 801376c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801376e:	681a      	ldr	r2, [r3, #0]
 8013770:	4b18      	ldr	r3, [pc, #96]	@ (80137d4 <UART_SetConfig+0x200>)
 8013772:	429a      	cmp	r2, r3
 8013774:	f040 8094 	bne.w	80138a0 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8013778:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801377a:	2200      	movs	r2, #0
 801377c:	623b      	str	r3, [r7, #32]
 801377e:	627a      	str	r2, [r7, #36]	@ 0x24
 8013780:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8013784:	f7fb fcc4 	bl	800f110 <HAL_RCCEx_GetPeriphCLKFreq>
 8013788:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 801378a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801378c:	2b00      	cmp	r3, #0
 801378e:	f000 80f7 	beq.w	8013980 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8013792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013796:	4a1c      	ldr	r2, [pc, #112]	@ (8013808 <UART_SetConfig+0x234>)
 8013798:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801379c:	461a      	mov	r2, r3
 801379e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80137a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80137a4:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80137a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137a8:	685a      	ldr	r2, [r3, #4]
 80137aa:	4613      	mov	r3, r2
 80137ac:	005b      	lsls	r3, r3, #1
 80137ae:	4413      	add	r3, r2
 80137b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80137b2:	429a      	cmp	r2, r3
 80137b4:	d305      	bcc.n	80137c2 <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80137b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137b8:	685b      	ldr	r3, [r3, #4]
 80137ba:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80137bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80137be:	429a      	cmp	r2, r3
 80137c0:	d924      	bls.n	801380c <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 80137c2:	2301      	movs	r3, #1
 80137c4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80137c8:	e069      	b.n	801389e <UART_SetConfig+0x2ca>
 80137ca:	bf00      	nop
 80137cc:	44002400 	.word	0x44002400
 80137d0:	cfff69f3 	.word	0xcfff69f3
 80137d4:	54002400 	.word	0x54002400
 80137d8:	40013800 	.word	0x40013800
 80137dc:	40004400 	.word	0x40004400
 80137e0:	40004800 	.word	0x40004800
 80137e4:	40004c00 	.word	0x40004c00
 80137e8:	40005000 	.word	0x40005000
 80137ec:	40006400 	.word	0x40006400
 80137f0:	40007800 	.word	0x40007800
 80137f4:	40007c00 	.word	0x40007c00
 80137f8:	40008000 	.word	0x40008000
 80137fc:	40006800 	.word	0x40006800
 8013800:	40006c00 	.word	0x40006c00
 8013804:	40008400 	.word	0x40008400
 8013808:	0802437c 	.word	0x0802437c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801380c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801380e:	2200      	movs	r2, #0
 8013810:	61bb      	str	r3, [r7, #24]
 8013812:	61fa      	str	r2, [r7, #28]
 8013814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013818:	4a64      	ldr	r2, [pc, #400]	@ (80139ac <UART_SetConfig+0x3d8>)
 801381a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801381e:	b29b      	uxth	r3, r3
 8013820:	2200      	movs	r2, #0
 8013822:	613b      	str	r3, [r7, #16]
 8013824:	617a      	str	r2, [r7, #20]
 8013826:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801382a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801382e:	f7ed fa45 	bl	8000cbc <__aeabi_uldivmod>
 8013832:	4602      	mov	r2, r0
 8013834:	460b      	mov	r3, r1
 8013836:	4610      	mov	r0, r2
 8013838:	4619      	mov	r1, r3
 801383a:	f04f 0200 	mov.w	r2, #0
 801383e:	f04f 0300 	mov.w	r3, #0
 8013842:	020b      	lsls	r3, r1, #8
 8013844:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8013848:	0202      	lsls	r2, r0, #8
 801384a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801384c:	6849      	ldr	r1, [r1, #4]
 801384e:	0849      	lsrs	r1, r1, #1
 8013850:	2000      	movs	r0, #0
 8013852:	460c      	mov	r4, r1
 8013854:	4605      	mov	r5, r0
 8013856:	eb12 0804 	adds.w	r8, r2, r4
 801385a:	eb43 0905 	adc.w	r9, r3, r5
 801385e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013860:	685b      	ldr	r3, [r3, #4]
 8013862:	2200      	movs	r2, #0
 8013864:	60bb      	str	r3, [r7, #8]
 8013866:	60fa      	str	r2, [r7, #12]
 8013868:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801386c:	4640      	mov	r0, r8
 801386e:	4649      	mov	r1, r9
 8013870:	f7ed fa24 	bl	8000cbc <__aeabi_uldivmod>
 8013874:	4602      	mov	r2, r0
 8013876:	460b      	mov	r3, r1
 8013878:	4613      	mov	r3, r2
 801387a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801387c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801387e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8013882:	d308      	bcc.n	8013896 <UART_SetConfig+0x2c2>
 8013884:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013886:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801388a:	d204      	bcs.n	8013896 <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 801388c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801388e:	681b      	ldr	r3, [r3, #0]
 8013890:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8013892:	60da      	str	r2, [r3, #12]
 8013894:	e003      	b.n	801389e <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 8013896:	2301      	movs	r3, #1
 8013898:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 801389c:	e070      	b.n	8013980 <UART_SetConfig+0x3ac>
 801389e:	e06f      	b.n	8013980 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80138a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80138a2:	69db      	ldr	r3, [r3, #28]
 80138a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80138a8:	d13c      	bne.n	8013924 <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80138aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80138ac:	2200      	movs	r2, #0
 80138ae:	603b      	str	r3, [r7, #0]
 80138b0:	607a      	str	r2, [r7, #4]
 80138b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80138b6:	f7fb fc2b 	bl	800f110 <HAL_RCCEx_GetPeriphCLKFreq>
 80138ba:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80138bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80138be:	2b00      	cmp	r3, #0
 80138c0:	d05e      	beq.n	8013980 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80138c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80138c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80138c6:	4a39      	ldr	r2, [pc, #228]	@ (80139ac <UART_SetConfig+0x3d8>)
 80138c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80138cc:	461a      	mov	r2, r3
 80138ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80138d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80138d4:	005a      	lsls	r2, r3, #1
 80138d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80138d8:	685b      	ldr	r3, [r3, #4]
 80138da:	085b      	lsrs	r3, r3, #1
 80138dc:	441a      	add	r2, r3
 80138de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80138e0:	685b      	ldr	r3, [r3, #4]
 80138e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80138e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80138e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80138ea:	2b0f      	cmp	r3, #15
 80138ec:	d916      	bls.n	801391c <UART_SetConfig+0x348>
 80138ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80138f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80138f4:	d212      	bcs.n	801391c <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80138f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80138f8:	b29b      	uxth	r3, r3
 80138fa:	f023 030f 	bic.w	r3, r3, #15
 80138fe:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8013900:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013902:	085b      	lsrs	r3, r3, #1
 8013904:	b29b      	uxth	r3, r3
 8013906:	f003 0307 	and.w	r3, r3, #7
 801390a:	b29a      	uxth	r2, r3
 801390c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801390e:	4313      	orrs	r3, r2
 8013910:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8013912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013914:	681b      	ldr	r3, [r3, #0]
 8013916:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8013918:	60da      	str	r2, [r3, #12]
 801391a:	e031      	b.n	8013980 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 801391c:	2301      	movs	r3, #1
 801391e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8013922:	e02d      	b.n	8013980 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8013924:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013926:	2200      	movs	r2, #0
 8013928:	469a      	mov	sl, r3
 801392a:	4693      	mov	fp, r2
 801392c:	4650      	mov	r0, sl
 801392e:	4659      	mov	r1, fp
 8013930:	f7fb fbee 	bl	800f110 <HAL_RCCEx_GetPeriphCLKFreq>
 8013934:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8013936:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013938:	2b00      	cmp	r3, #0
 801393a:	d021      	beq.n	8013980 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801393c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801393e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013940:	4a1a      	ldr	r2, [pc, #104]	@ (80139ac <UART_SetConfig+0x3d8>)
 8013942:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013946:	461a      	mov	r2, r3
 8013948:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801394a:	fbb3 f2f2 	udiv	r2, r3, r2
 801394e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013950:	685b      	ldr	r3, [r3, #4]
 8013952:	085b      	lsrs	r3, r3, #1
 8013954:	441a      	add	r2, r3
 8013956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013958:	685b      	ldr	r3, [r3, #4]
 801395a:	fbb2 f3f3 	udiv	r3, r2, r3
 801395e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013960:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013962:	2b0f      	cmp	r3, #15
 8013964:	d909      	bls.n	801397a <UART_SetConfig+0x3a6>
 8013966:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013968:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801396c:	d205      	bcs.n	801397a <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801396e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013970:	b29a      	uxth	r2, r3
 8013972:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013974:	681b      	ldr	r3, [r3, #0]
 8013976:	60da      	str	r2, [r3, #12]
 8013978:	e002      	b.n	8013980 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 801397a:	2301      	movs	r3, #1
 801397c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8013980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013982:	2201      	movs	r2, #1
 8013984:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8013988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801398a:	2201      	movs	r2, #1
 801398c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8013990:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013992:	2200      	movs	r2, #0
 8013994:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8013996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013998:	2200      	movs	r2, #0
 801399a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 801399c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 80139a0:	4618      	mov	r0, r3
 80139a2:	3750      	adds	r7, #80	@ 0x50
 80139a4:	46bd      	mov	sp, r7
 80139a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80139aa:	bf00      	nop
 80139ac:	0802437c 	.word	0x0802437c

080139b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80139b0:	b480      	push	{r7}
 80139b2:	b083      	sub	sp, #12
 80139b4:	af00      	add	r7, sp, #0
 80139b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80139bc:	f003 0308 	and.w	r3, r3, #8
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	d00a      	beq.n	80139da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	681b      	ldr	r3, [r3, #0]
 80139c8:	685b      	ldr	r3, [r3, #4]
 80139ca:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	681b      	ldr	r3, [r3, #0]
 80139d6:	430a      	orrs	r2, r1
 80139d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80139de:	f003 0301 	and.w	r3, r3, #1
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	d00a      	beq.n	80139fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	681b      	ldr	r3, [r3, #0]
 80139ea:	685b      	ldr	r3, [r3, #4]
 80139ec:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	681b      	ldr	r3, [r3, #0]
 80139f8:	430a      	orrs	r2, r1
 80139fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013a00:	f003 0302 	and.w	r3, r3, #2
 8013a04:	2b00      	cmp	r3, #0
 8013a06:	d00a      	beq.n	8013a1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	681b      	ldr	r3, [r3, #0]
 8013a0c:	685b      	ldr	r3, [r3, #4]
 8013a0e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8013a12:	687b      	ldr	r3, [r7, #4]
 8013a14:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	681b      	ldr	r3, [r3, #0]
 8013a1a:	430a      	orrs	r2, r1
 8013a1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8013a1e:	687b      	ldr	r3, [r7, #4]
 8013a20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013a22:	f003 0304 	and.w	r3, r3, #4
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	d00a      	beq.n	8013a40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	681b      	ldr	r3, [r3, #0]
 8013a2e:	685b      	ldr	r3, [r3, #4]
 8013a30:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	681b      	ldr	r3, [r3, #0]
 8013a3c:	430a      	orrs	r2, r1
 8013a3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013a44:	f003 0310 	and.w	r3, r3, #16
 8013a48:	2b00      	cmp	r3, #0
 8013a4a:	d00a      	beq.n	8013a62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8013a4c:	687b      	ldr	r3, [r7, #4]
 8013a4e:	681b      	ldr	r3, [r3, #0]
 8013a50:	689b      	ldr	r3, [r3, #8]
 8013a52:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8013a5a:	687b      	ldr	r3, [r7, #4]
 8013a5c:	681b      	ldr	r3, [r3, #0]
 8013a5e:	430a      	orrs	r2, r1
 8013a60:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013a66:	f003 0320 	and.w	r3, r3, #32
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	d00a      	beq.n	8013a84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	681b      	ldr	r3, [r3, #0]
 8013a72:	689b      	ldr	r3, [r3, #8]
 8013a74:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	681b      	ldr	r3, [r3, #0]
 8013a80:	430a      	orrs	r2, r1
 8013a82:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013a88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	d01a      	beq.n	8013ac6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8013a90:	687b      	ldr	r3, [r7, #4]
 8013a92:	681b      	ldr	r3, [r3, #0]
 8013a94:	685b      	ldr	r3, [r3, #4]
 8013a96:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	681b      	ldr	r3, [r3, #0]
 8013aa2:	430a      	orrs	r2, r1
 8013aa4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013aaa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8013aae:	d10a      	bne.n	8013ac6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	681b      	ldr	r3, [r3, #0]
 8013ab4:	685b      	ldr	r3, [r3, #4]
 8013ab6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	681b      	ldr	r3, [r3, #0]
 8013ac2:	430a      	orrs	r2, r1
 8013ac4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013aca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013ace:	2b00      	cmp	r3, #0
 8013ad0:	d00a      	beq.n	8013ae8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	681b      	ldr	r3, [r3, #0]
 8013ad6:	685b      	ldr	r3, [r3, #4]
 8013ad8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	681b      	ldr	r3, [r3, #0]
 8013ae4:	430a      	orrs	r2, r1
 8013ae6:	605a      	str	r2, [r3, #4]
  }
}
 8013ae8:	bf00      	nop
 8013aea:	370c      	adds	r7, #12
 8013aec:	46bd      	mov	sp, r7
 8013aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013af2:	4770      	bx	lr

08013af4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8013af4:	b580      	push	{r7, lr}
 8013af6:	b098      	sub	sp, #96	@ 0x60
 8013af8:	af02      	add	r7, sp, #8
 8013afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	2200      	movs	r2, #0
 8013b00:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8013b04:	f7f1 ff54 	bl	80059b0 <HAL_GetTick>
 8013b08:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	681b      	ldr	r3, [r3, #0]
 8013b0e:	681b      	ldr	r3, [r3, #0]
 8013b10:	f003 0308 	and.w	r3, r3, #8
 8013b14:	2b08      	cmp	r3, #8
 8013b16:	d12f      	bne.n	8013b78 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8013b18:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8013b1c:	9300      	str	r3, [sp, #0]
 8013b1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013b20:	2200      	movs	r2, #0
 8013b22:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8013b26:	6878      	ldr	r0, [r7, #4]
 8013b28:	f000 f88e 	bl	8013c48 <UART_WaitOnFlagUntilTimeout>
 8013b2c:	4603      	mov	r3, r0
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	d022      	beq.n	8013b78 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	681b      	ldr	r3, [r3, #0]
 8013b36:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013b38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b3a:	e853 3f00 	ldrex	r3, [r3]
 8013b3e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8013b40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013b42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8013b46:	653b      	str	r3, [r7, #80]	@ 0x50
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	681b      	ldr	r3, [r3, #0]
 8013b4c:	461a      	mov	r2, r3
 8013b4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013b50:	647b      	str	r3, [r7, #68]	@ 0x44
 8013b52:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013b54:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8013b56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013b58:	e841 2300 	strex	r3, r2, [r1]
 8013b5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8013b5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	d1e6      	bne.n	8013b32 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	2220      	movs	r2, #32
 8013b68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	2200      	movs	r2, #0
 8013b70:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8013b74:	2303      	movs	r3, #3
 8013b76:	e063      	b.n	8013c40 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	681b      	ldr	r3, [r3, #0]
 8013b7c:	681b      	ldr	r3, [r3, #0]
 8013b7e:	f003 0304 	and.w	r3, r3, #4
 8013b82:	2b04      	cmp	r3, #4
 8013b84:	d149      	bne.n	8013c1a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8013b86:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8013b8a:	9300      	str	r3, [sp, #0]
 8013b8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013b8e:	2200      	movs	r2, #0
 8013b90:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8013b94:	6878      	ldr	r0, [r7, #4]
 8013b96:	f000 f857 	bl	8013c48 <UART_WaitOnFlagUntilTimeout>
 8013b9a:	4603      	mov	r3, r0
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	d03c      	beq.n	8013c1a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	681b      	ldr	r3, [r3, #0]
 8013ba4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ba8:	e853 3f00 	ldrex	r3, [r3]
 8013bac:	623b      	str	r3, [r7, #32]
   return(result);
 8013bae:	6a3b      	ldr	r3, [r7, #32]
 8013bb0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8013bb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	681b      	ldr	r3, [r3, #0]
 8013bba:	461a      	mov	r2, r3
 8013bbc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013bbe:	633b      	str	r3, [r7, #48]	@ 0x30
 8013bc0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013bc2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013bc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013bc6:	e841 2300 	strex	r3, r2, [r1]
 8013bca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8013bcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013bce:	2b00      	cmp	r3, #0
 8013bd0:	d1e6      	bne.n	8013ba0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	681b      	ldr	r3, [r3, #0]
 8013bd6:	3308      	adds	r3, #8
 8013bd8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013bda:	693b      	ldr	r3, [r7, #16]
 8013bdc:	e853 3f00 	ldrex	r3, [r3]
 8013be0:	60fb      	str	r3, [r7, #12]
   return(result);
 8013be2:	68fb      	ldr	r3, [r7, #12]
 8013be4:	f023 0301 	bic.w	r3, r3, #1
 8013be8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	681b      	ldr	r3, [r3, #0]
 8013bee:	3308      	adds	r3, #8
 8013bf0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8013bf2:	61fa      	str	r2, [r7, #28]
 8013bf4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013bf6:	69b9      	ldr	r1, [r7, #24]
 8013bf8:	69fa      	ldr	r2, [r7, #28]
 8013bfa:	e841 2300 	strex	r3, r2, [r1]
 8013bfe:	617b      	str	r3, [r7, #20]
   return(result);
 8013c00:	697b      	ldr	r3, [r7, #20]
 8013c02:	2b00      	cmp	r3, #0
 8013c04:	d1e5      	bne.n	8013bd2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	2220      	movs	r2, #32
 8013c0a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	2200      	movs	r2, #0
 8013c12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8013c16:	2303      	movs	r3, #3
 8013c18:	e012      	b.n	8013c40 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	2220      	movs	r2, #32
 8013c1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8013c22:	687b      	ldr	r3, [r7, #4]
 8013c24:	2220      	movs	r2, #32
 8013c26:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013c2a:	687b      	ldr	r3, [r7, #4]
 8013c2c:	2200      	movs	r2, #0
 8013c2e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	2200      	movs	r2, #0
 8013c34:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	2200      	movs	r2, #0
 8013c3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8013c3e:	2300      	movs	r3, #0
}
 8013c40:	4618      	mov	r0, r3
 8013c42:	3758      	adds	r7, #88	@ 0x58
 8013c44:	46bd      	mov	sp, r7
 8013c46:	bd80      	pop	{r7, pc}

08013c48 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8013c48:	b580      	push	{r7, lr}
 8013c4a:	b084      	sub	sp, #16
 8013c4c:	af00      	add	r7, sp, #0
 8013c4e:	60f8      	str	r0, [r7, #12]
 8013c50:	60b9      	str	r1, [r7, #8]
 8013c52:	603b      	str	r3, [r7, #0]
 8013c54:	4613      	mov	r3, r2
 8013c56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013c58:	e04f      	b.n	8013cfa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013c5a:	69bb      	ldr	r3, [r7, #24]
 8013c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c60:	d04b      	beq.n	8013cfa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013c62:	f7f1 fea5 	bl	80059b0 <HAL_GetTick>
 8013c66:	4602      	mov	r2, r0
 8013c68:	683b      	ldr	r3, [r7, #0]
 8013c6a:	1ad3      	subs	r3, r2, r3
 8013c6c:	69ba      	ldr	r2, [r7, #24]
 8013c6e:	429a      	cmp	r2, r3
 8013c70:	d302      	bcc.n	8013c78 <UART_WaitOnFlagUntilTimeout+0x30>
 8013c72:	69bb      	ldr	r3, [r7, #24]
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	d101      	bne.n	8013c7c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8013c78:	2303      	movs	r3, #3
 8013c7a:	e04e      	b.n	8013d1a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8013c7c:	68fb      	ldr	r3, [r7, #12]
 8013c7e:	681b      	ldr	r3, [r3, #0]
 8013c80:	681b      	ldr	r3, [r3, #0]
 8013c82:	f003 0304 	and.w	r3, r3, #4
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	d037      	beq.n	8013cfa <UART_WaitOnFlagUntilTimeout+0xb2>
 8013c8a:	68bb      	ldr	r3, [r7, #8]
 8013c8c:	2b80      	cmp	r3, #128	@ 0x80
 8013c8e:	d034      	beq.n	8013cfa <UART_WaitOnFlagUntilTimeout+0xb2>
 8013c90:	68bb      	ldr	r3, [r7, #8]
 8013c92:	2b40      	cmp	r3, #64	@ 0x40
 8013c94:	d031      	beq.n	8013cfa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8013c96:	68fb      	ldr	r3, [r7, #12]
 8013c98:	681b      	ldr	r3, [r3, #0]
 8013c9a:	69db      	ldr	r3, [r3, #28]
 8013c9c:	f003 0308 	and.w	r3, r3, #8
 8013ca0:	2b08      	cmp	r3, #8
 8013ca2:	d110      	bne.n	8013cc6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8013ca4:	68fb      	ldr	r3, [r7, #12]
 8013ca6:	681b      	ldr	r3, [r3, #0]
 8013ca8:	2208      	movs	r2, #8
 8013caa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8013cac:	68f8      	ldr	r0, [r7, #12]
 8013cae:	f000 fa94 	bl	80141da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8013cb2:	68fb      	ldr	r3, [r7, #12]
 8013cb4:	2208      	movs	r2, #8
 8013cb6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8013cba:	68fb      	ldr	r3, [r7, #12]
 8013cbc:	2200      	movs	r2, #0
 8013cbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8013cc2:	2301      	movs	r3, #1
 8013cc4:	e029      	b.n	8013d1a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8013cc6:	68fb      	ldr	r3, [r7, #12]
 8013cc8:	681b      	ldr	r3, [r3, #0]
 8013cca:	69db      	ldr	r3, [r3, #28]
 8013ccc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8013cd0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8013cd4:	d111      	bne.n	8013cfa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8013cd6:	68fb      	ldr	r3, [r7, #12]
 8013cd8:	681b      	ldr	r3, [r3, #0]
 8013cda:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8013cde:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8013ce0:	68f8      	ldr	r0, [r7, #12]
 8013ce2:	f000 fa7a 	bl	80141da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8013ce6:	68fb      	ldr	r3, [r7, #12]
 8013ce8:	2220      	movs	r2, #32
 8013cea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8013cee:	68fb      	ldr	r3, [r7, #12]
 8013cf0:	2200      	movs	r2, #0
 8013cf2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8013cf6:	2303      	movs	r3, #3
 8013cf8:	e00f      	b.n	8013d1a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013cfa:	68fb      	ldr	r3, [r7, #12]
 8013cfc:	681b      	ldr	r3, [r3, #0]
 8013cfe:	69da      	ldr	r2, [r3, #28]
 8013d00:	68bb      	ldr	r3, [r7, #8]
 8013d02:	4013      	ands	r3, r2
 8013d04:	68ba      	ldr	r2, [r7, #8]
 8013d06:	429a      	cmp	r2, r3
 8013d08:	bf0c      	ite	eq
 8013d0a:	2301      	moveq	r3, #1
 8013d0c:	2300      	movne	r3, #0
 8013d0e:	b2db      	uxtb	r3, r3
 8013d10:	461a      	mov	r2, r3
 8013d12:	79fb      	ldrb	r3, [r7, #7]
 8013d14:	429a      	cmp	r2, r3
 8013d16:	d0a0      	beq.n	8013c5a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8013d18:	2300      	movs	r3, #0
}
 8013d1a:	4618      	mov	r0, r3
 8013d1c:	3710      	adds	r7, #16
 8013d1e:	46bd      	mov	sp, r7
 8013d20:	bd80      	pop	{r7, pc}
	...

08013d24 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013d24:	b480      	push	{r7}
 8013d26:	b0a3      	sub	sp, #140	@ 0x8c
 8013d28:	af00      	add	r7, sp, #0
 8013d2a:	60f8      	str	r0, [r7, #12]
 8013d2c:	60b9      	str	r1, [r7, #8]
 8013d2e:	4613      	mov	r3, r2
 8013d30:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8013d32:	68fb      	ldr	r3, [r7, #12]
 8013d34:	68ba      	ldr	r2, [r7, #8]
 8013d36:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8013d38:	68fb      	ldr	r3, [r7, #12]
 8013d3a:	88fa      	ldrh	r2, [r7, #6]
 8013d3c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8013d40:	68fb      	ldr	r3, [r7, #12]
 8013d42:	88fa      	ldrh	r2, [r7, #6]
 8013d44:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8013d48:	68fb      	ldr	r3, [r7, #12]
 8013d4a:	2200      	movs	r2, #0
 8013d4c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8013d4e:	68fb      	ldr	r3, [r7, #12]
 8013d50:	689b      	ldr	r3, [r3, #8]
 8013d52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8013d56:	d10e      	bne.n	8013d76 <UART_Start_Receive_IT+0x52>
 8013d58:	68fb      	ldr	r3, [r7, #12]
 8013d5a:	691b      	ldr	r3, [r3, #16]
 8013d5c:	2b00      	cmp	r3, #0
 8013d5e:	d105      	bne.n	8013d6c <UART_Start_Receive_IT+0x48>
 8013d60:	68fb      	ldr	r3, [r7, #12]
 8013d62:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8013d66:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8013d6a:	e02d      	b.n	8013dc8 <UART_Start_Receive_IT+0xa4>
 8013d6c:	68fb      	ldr	r3, [r7, #12]
 8013d6e:	22ff      	movs	r2, #255	@ 0xff
 8013d70:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8013d74:	e028      	b.n	8013dc8 <UART_Start_Receive_IT+0xa4>
 8013d76:	68fb      	ldr	r3, [r7, #12]
 8013d78:	689b      	ldr	r3, [r3, #8]
 8013d7a:	2b00      	cmp	r3, #0
 8013d7c:	d10d      	bne.n	8013d9a <UART_Start_Receive_IT+0x76>
 8013d7e:	68fb      	ldr	r3, [r7, #12]
 8013d80:	691b      	ldr	r3, [r3, #16]
 8013d82:	2b00      	cmp	r3, #0
 8013d84:	d104      	bne.n	8013d90 <UART_Start_Receive_IT+0x6c>
 8013d86:	68fb      	ldr	r3, [r7, #12]
 8013d88:	22ff      	movs	r2, #255	@ 0xff
 8013d8a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8013d8e:	e01b      	b.n	8013dc8 <UART_Start_Receive_IT+0xa4>
 8013d90:	68fb      	ldr	r3, [r7, #12]
 8013d92:	227f      	movs	r2, #127	@ 0x7f
 8013d94:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8013d98:	e016      	b.n	8013dc8 <UART_Start_Receive_IT+0xa4>
 8013d9a:	68fb      	ldr	r3, [r7, #12]
 8013d9c:	689b      	ldr	r3, [r3, #8]
 8013d9e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013da2:	d10d      	bne.n	8013dc0 <UART_Start_Receive_IT+0x9c>
 8013da4:	68fb      	ldr	r3, [r7, #12]
 8013da6:	691b      	ldr	r3, [r3, #16]
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	d104      	bne.n	8013db6 <UART_Start_Receive_IT+0x92>
 8013dac:	68fb      	ldr	r3, [r7, #12]
 8013dae:	227f      	movs	r2, #127	@ 0x7f
 8013db0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8013db4:	e008      	b.n	8013dc8 <UART_Start_Receive_IT+0xa4>
 8013db6:	68fb      	ldr	r3, [r7, #12]
 8013db8:	223f      	movs	r2, #63	@ 0x3f
 8013dba:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8013dbe:	e003      	b.n	8013dc8 <UART_Start_Receive_IT+0xa4>
 8013dc0:	68fb      	ldr	r3, [r7, #12]
 8013dc2:	2200      	movs	r2, #0
 8013dc4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013dc8:	68fb      	ldr	r3, [r7, #12]
 8013dca:	2200      	movs	r2, #0
 8013dcc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8013dd0:	68fb      	ldr	r3, [r7, #12]
 8013dd2:	2222      	movs	r2, #34	@ 0x22
 8013dd4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013dd8:	68fb      	ldr	r3, [r7, #12]
 8013dda:	681b      	ldr	r3, [r3, #0]
 8013ddc:	3308      	adds	r3, #8
 8013dde:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013de0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013de2:	e853 3f00 	ldrex	r3, [r3]
 8013de6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8013de8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8013dea:	f043 0301 	orr.w	r3, r3, #1
 8013dee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8013df2:	68fb      	ldr	r3, [r7, #12]
 8013df4:	681b      	ldr	r3, [r3, #0]
 8013df6:	3308      	adds	r3, #8
 8013df8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8013dfc:	673a      	str	r2, [r7, #112]	@ 0x70
 8013dfe:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013e00:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8013e02:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8013e04:	e841 2300 	strex	r3, r2, [r1]
 8013e08:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8013e0a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013e0c:	2b00      	cmp	r3, #0
 8013e0e:	d1e3      	bne.n	8013dd8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8013e10:	68fb      	ldr	r3, [r7, #12]
 8013e12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8013e14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013e18:	d14f      	bne.n	8013eba <UART_Start_Receive_IT+0x196>
 8013e1a:	68fb      	ldr	r3, [r7, #12]
 8013e1c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8013e20:	88fa      	ldrh	r2, [r7, #6]
 8013e22:	429a      	cmp	r2, r3
 8013e24:	d349      	bcc.n	8013eba <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013e26:	68fb      	ldr	r3, [r7, #12]
 8013e28:	689b      	ldr	r3, [r3, #8]
 8013e2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8013e2e:	d107      	bne.n	8013e40 <UART_Start_Receive_IT+0x11c>
 8013e30:	68fb      	ldr	r3, [r7, #12]
 8013e32:	691b      	ldr	r3, [r3, #16]
 8013e34:	2b00      	cmp	r3, #0
 8013e36:	d103      	bne.n	8013e40 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8013e38:	68fb      	ldr	r3, [r7, #12]
 8013e3a:	4a47      	ldr	r2, [pc, #284]	@ (8013f58 <UART_Start_Receive_IT+0x234>)
 8013e3c:	675a      	str	r2, [r3, #116]	@ 0x74
 8013e3e:	e002      	b.n	8013e46 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8013e40:	68fb      	ldr	r3, [r7, #12]
 8013e42:	4a46      	ldr	r2, [pc, #280]	@ (8013f5c <UART_Start_Receive_IT+0x238>)
 8013e44:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8013e46:	68fb      	ldr	r3, [r7, #12]
 8013e48:	691b      	ldr	r3, [r3, #16]
 8013e4a:	2b00      	cmp	r3, #0
 8013e4c:	d01a      	beq.n	8013e84 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8013e4e:	68fb      	ldr	r3, [r7, #12]
 8013e50:	681b      	ldr	r3, [r3, #0]
 8013e52:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013e54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013e56:	e853 3f00 	ldrex	r3, [r3]
 8013e5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8013e5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013e5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8013e62:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8013e66:	68fb      	ldr	r3, [r7, #12]
 8013e68:	681b      	ldr	r3, [r3, #0]
 8013e6a:	461a      	mov	r2, r3
 8013e6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8013e70:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013e72:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013e74:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8013e76:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8013e78:	e841 2300 	strex	r3, r2, [r1]
 8013e7c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8013e7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013e80:	2b00      	cmp	r3, #0
 8013e82:	d1e4      	bne.n	8013e4e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8013e84:	68fb      	ldr	r3, [r7, #12]
 8013e86:	681b      	ldr	r3, [r3, #0]
 8013e88:	3308      	adds	r3, #8
 8013e8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013e8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013e8e:	e853 3f00 	ldrex	r3, [r3]
 8013e92:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8013e94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8013e9a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8013e9c:	68fb      	ldr	r3, [r7, #12]
 8013e9e:	681b      	ldr	r3, [r3, #0]
 8013ea0:	3308      	adds	r3, #8
 8013ea2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8013ea4:	64ba      	str	r2, [r7, #72]	@ 0x48
 8013ea6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013ea8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8013eaa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8013eac:	e841 2300 	strex	r3, r2, [r1]
 8013eb0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8013eb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013eb4:	2b00      	cmp	r3, #0
 8013eb6:	d1e5      	bne.n	8013e84 <UART_Start_Receive_IT+0x160>
 8013eb8:	e046      	b.n	8013f48 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013eba:	68fb      	ldr	r3, [r7, #12]
 8013ebc:	689b      	ldr	r3, [r3, #8]
 8013ebe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8013ec2:	d107      	bne.n	8013ed4 <UART_Start_Receive_IT+0x1b0>
 8013ec4:	68fb      	ldr	r3, [r7, #12]
 8013ec6:	691b      	ldr	r3, [r3, #16]
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	d103      	bne.n	8013ed4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8013ecc:	68fb      	ldr	r3, [r7, #12]
 8013ece:	4a24      	ldr	r2, [pc, #144]	@ (8013f60 <UART_Start_Receive_IT+0x23c>)
 8013ed0:	675a      	str	r2, [r3, #116]	@ 0x74
 8013ed2:	e002      	b.n	8013eda <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8013ed4:	68fb      	ldr	r3, [r7, #12]
 8013ed6:	4a23      	ldr	r2, [pc, #140]	@ (8013f64 <UART_Start_Receive_IT+0x240>)
 8013ed8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8013eda:	68fb      	ldr	r3, [r7, #12]
 8013edc:	691b      	ldr	r3, [r3, #16]
 8013ede:	2b00      	cmp	r3, #0
 8013ee0:	d019      	beq.n	8013f16 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8013ee2:	68fb      	ldr	r3, [r7, #12]
 8013ee4:	681b      	ldr	r3, [r3, #0]
 8013ee6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013eea:	e853 3f00 	ldrex	r3, [r3]
 8013eee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8013ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ef2:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8013ef6:	677b      	str	r3, [r7, #116]	@ 0x74
 8013ef8:	68fb      	ldr	r3, [r7, #12]
 8013efa:	681b      	ldr	r3, [r3, #0]
 8013efc:	461a      	mov	r2, r3
 8013efe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8013f00:	637b      	str	r3, [r7, #52]	@ 0x34
 8013f02:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013f04:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8013f06:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013f08:	e841 2300 	strex	r3, r2, [r1]
 8013f0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8013f0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f10:	2b00      	cmp	r3, #0
 8013f12:	d1e6      	bne.n	8013ee2 <UART_Start_Receive_IT+0x1be>
 8013f14:	e018      	b.n	8013f48 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8013f16:	68fb      	ldr	r3, [r7, #12]
 8013f18:	681b      	ldr	r3, [r3, #0]
 8013f1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013f1c:	697b      	ldr	r3, [r7, #20]
 8013f1e:	e853 3f00 	ldrex	r3, [r3]
 8013f22:	613b      	str	r3, [r7, #16]
   return(result);
 8013f24:	693b      	ldr	r3, [r7, #16]
 8013f26:	f043 0320 	orr.w	r3, r3, #32
 8013f2a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8013f2c:	68fb      	ldr	r3, [r7, #12]
 8013f2e:	681b      	ldr	r3, [r3, #0]
 8013f30:	461a      	mov	r2, r3
 8013f32:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013f34:	623b      	str	r3, [r7, #32]
 8013f36:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013f38:	69f9      	ldr	r1, [r7, #28]
 8013f3a:	6a3a      	ldr	r2, [r7, #32]
 8013f3c:	e841 2300 	strex	r3, r2, [r1]
 8013f40:	61bb      	str	r3, [r7, #24]
   return(result);
 8013f42:	69bb      	ldr	r3, [r7, #24]
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	d1e6      	bne.n	8013f16 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8013f48:	2300      	movs	r3, #0
}
 8013f4a:	4618      	mov	r0, r3
 8013f4c:	378c      	adds	r7, #140	@ 0x8c
 8013f4e:	46bd      	mov	sp, r7
 8013f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f54:	4770      	bx	lr
 8013f56:	bf00      	nop
 8013f58:	08014bd1 	.word	0x08014bd1
 8013f5c:	08014861 	.word	0x08014861
 8013f60:	0801469d 	.word	0x0801469d
 8013f64:	080144d9 	.word	0x080144d9

08013f68 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013f68:	b580      	push	{r7, lr}
 8013f6a:	b098      	sub	sp, #96	@ 0x60
 8013f6c:	af00      	add	r7, sp, #0
 8013f6e:	60f8      	str	r0, [r7, #12]
 8013f70:	60b9      	str	r1, [r7, #8]
 8013f72:	4613      	mov	r3, r2
 8013f74:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;
  uint16_t nbByte = Size;
 8013f76:	88fb      	ldrh	r3, [r7, #6]
 8013f78:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c

  huart->pRxBuffPtr = pData;
 8013f7c:	68fb      	ldr	r3, [r7, #12]
 8013f7e:	68ba      	ldr	r2, [r7, #8]
 8013f80:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8013f82:	68fb      	ldr	r3, [r7, #12]
 8013f84:	88fa      	ldrh	r2, [r7, #6]
 8013f86:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013f8a:	68fb      	ldr	r3, [r7, #12]
 8013f8c:	2200      	movs	r2, #0
 8013f8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8013f92:	68fb      	ldr	r3, [r7, #12]
 8013f94:	2222      	movs	r2, #34	@ 0x22
 8013f96:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8013f9a:	68fb      	ldr	r3, [r7, #12]
 8013f9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013fa0:	2b00      	cmp	r3, #0
 8013fa2:	d07c      	beq.n	801409e <UART_Start_Receive_DMA+0x136>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8013fa4:	68fb      	ldr	r3, [r7, #12]
 8013fa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013faa:	4a68      	ldr	r2, [pc, #416]	@ (801414c <UART_Start_Receive_DMA+0x1e4>)
 8013fac:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8013fae:	68fb      	ldr	r3, [r7, #12]
 8013fb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013fb4:	4a66      	ldr	r2, [pc, #408]	@ (8014150 <UART_Start_Receive_DMA+0x1e8>)
 8013fb6:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8013fb8:	68fb      	ldr	r3, [r7, #12]
 8013fba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013fbe:	4a65      	ldr	r2, [pc, #404]	@ (8014154 <UART_Start_Receive_DMA+0x1ec>)
 8013fc0:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8013fc2:	68fb      	ldr	r3, [r7, #12]
 8013fc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013fc8:	2200      	movs	r2, #0
 8013fca:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, so nbByte should be equal to Size * 2 */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013fcc:	68fb      	ldr	r3, [r7, #12]
 8013fce:	689b      	ldr	r3, [r3, #8]
 8013fd0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8013fd4:	d107      	bne.n	8013fe6 <UART_Start_Receive_DMA+0x7e>
 8013fd6:	68fb      	ldr	r3, [r7, #12]
 8013fd8:	691b      	ldr	r3, [r3, #16]
 8013fda:	2b00      	cmp	r3, #0
 8013fdc:	d103      	bne.n	8013fe6 <UART_Start_Receive_DMA+0x7e>
    {
      nbByte = Size * 2U;
 8013fde:	88fb      	ldrh	r3, [r7, #6]
 8013fe0:	005b      	lsls	r3, r3, #1
 8013fe2:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
    }

    /* Check linked list mode */
    if ((huart->hdmarx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8013fe6:	68fb      	ldr	r3, [r7, #12]
 8013fe8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013fec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013fee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013ff2:	2b00      	cmp	r3, #0
 8013ff4:	d034      	beq.n	8014060 <UART_Start_Receive_DMA+0xf8>
    {
      if ((huart->hdmarx->LinkedListQueue != NULL) && (huart->hdmarx->LinkedListQueue->Head != NULL))
 8013ff6:	68fb      	ldr	r3, [r7, #12]
 8013ff8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013ffc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013ffe:	2b00      	cmp	r3, #0
 8014000:	d02a      	beq.n	8014058 <UART_Start_Receive_DMA+0xf0>
 8014002:	68fb      	ldr	r3, [r7, #12]
 8014004:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014008:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801400a:	681b      	ldr	r3, [r3, #0]
 801400c:	2b00      	cmp	r3, #0
 801400e:	d023      	beq.n	8014058 <UART_Start_Receive_DMA+0xf0>
      {
        /* Set DMA data size */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = nbByte;
 8014010:	68fb      	ldr	r3, [r7, #12]
 8014012:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014016:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014018:	681b      	ldr	r3, [r3, #0]
 801401a:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 801401e:	609a      	str	r2, [r3, #8]

        /* Set DMA source address */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =
          (uint32_t)&huart->Instance->RDR;
 8014020:	68fb      	ldr	r3, [r7, #12]
 8014022:	681b      	ldr	r3, [r3, #0]
 8014024:	f103 0224 	add.w	r2, r3, #36	@ 0x24
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =
 8014028:	68fb      	ldr	r3, [r7, #12]
 801402a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801402e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014030:	681b      	ldr	r3, [r3, #0]
 8014032:	60da      	str	r2, [r3, #12]

        /* Set DMA destination address */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)huart->pRxBuffPtr;
 8014034:	68fb      	ldr	r3, [r7, #12]
 8014036:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8014038:	68fb      	ldr	r3, [r7, #12]
 801403a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801403e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014040:	681b      	ldr	r3, [r3, #0]
 8014042:	611a      	str	r2, [r3, #16]

        /* Enable the UART receive DMA channel */
        status = HAL_DMAEx_List_Start_IT(huart->hdmarx);
 8014044:	68fb      	ldr	r3, [r7, #12]
 8014046:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801404a:	4618      	mov	r0, r3
 801404c:	f7f5 fbb8 	bl	80097c0 <HAL_DMAEx_List_Start_IT>
 8014050:	4603      	mov	r3, r0
 8014052:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8014056:	e014      	b.n	8014082 <UART_Start_Receive_DMA+0x11a>
      }
      else
      {
        /* Update status */
        status = HAL_ERROR;
 8014058:	2301      	movs	r3, #1
 801405a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 801405e:	e010      	b.n	8014082 <UART_Start_Receive_DMA+0x11a>
      }
    }
    else
    {
      /* Enable the UART receive DMA channel */
      status = HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, nbByte);
 8014060:	68fb      	ldr	r3, [r7, #12]
 8014062:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8014066:	68fb      	ldr	r3, [r7, #12]
 8014068:	681b      	ldr	r3, [r3, #0]
 801406a:	3324      	adds	r3, #36	@ 0x24
 801406c:	4619      	mov	r1, r3
 801406e:	68fb      	ldr	r3, [r7, #12]
 8014070:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014072:	461a      	mov	r2, r3
 8014074:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8014078:	f7f4 ffaf 	bl	8008fda <HAL_DMA_Start_IT>
 801407c:	4603      	mov	r3, r0
 801407e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    }

    if (status != HAL_OK)
 8014082:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8014086:	2b00      	cmp	r3, #0
 8014088:	d009      	beq.n	801409e <UART_Start_Receive_DMA+0x136>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 801408a:	68fb      	ldr	r3, [r7, #12]
 801408c:	2210      	movs	r2, #16
 801408e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8014092:	68fb      	ldr	r3, [r7, #12]
 8014094:	2220      	movs	r2, #32
 8014096:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 801409a:	2301      	movs	r3, #1
 801409c:	e051      	b.n	8014142 <UART_Start_Receive_DMA+0x1da>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801409e:	68fb      	ldr	r3, [r7, #12]
 80140a0:	691b      	ldr	r3, [r3, #16]
 80140a2:	2b00      	cmp	r3, #0
 80140a4:	d018      	beq.n	80140d8 <UART_Start_Receive_DMA+0x170>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80140a6:	68fb      	ldr	r3, [r7, #12]
 80140a8:	681b      	ldr	r3, [r3, #0]
 80140aa:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80140ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80140ae:	e853 3f00 	ldrex	r3, [r3]
 80140b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80140b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80140b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80140ba:	65bb      	str	r3, [r7, #88]	@ 0x58
 80140bc:	68fb      	ldr	r3, [r7, #12]
 80140be:	681b      	ldr	r3, [r3, #0]
 80140c0:	461a      	mov	r2, r3
 80140c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80140c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80140c6:	64ba      	str	r2, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80140c8:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80140ca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80140cc:	e841 2300 	strex	r3, r2, [r1]
 80140d0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80140d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80140d4:	2b00      	cmp	r3, #0
 80140d6:	d1e6      	bne.n	80140a6 <UART_Start_Receive_DMA+0x13e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80140d8:	68fb      	ldr	r3, [r7, #12]
 80140da:	681b      	ldr	r3, [r3, #0]
 80140dc:	3308      	adds	r3, #8
 80140de:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80140e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80140e2:	e853 3f00 	ldrex	r3, [r3]
 80140e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80140e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80140ea:	f043 0301 	orr.w	r3, r3, #1
 80140ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80140f0:	68fb      	ldr	r3, [r7, #12]
 80140f2:	681b      	ldr	r3, [r3, #0]
 80140f4:	3308      	adds	r3, #8
 80140f6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80140f8:	63ba      	str	r2, [r7, #56]	@ 0x38
 80140fa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80140fc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80140fe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014100:	e841 2300 	strex	r3, r2, [r1]
 8014104:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8014106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014108:	2b00      	cmp	r3, #0
 801410a:	d1e5      	bne.n	80140d8 <UART_Start_Receive_DMA+0x170>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801410c:	68fb      	ldr	r3, [r7, #12]
 801410e:	681b      	ldr	r3, [r3, #0]
 8014110:	3308      	adds	r3, #8
 8014112:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014114:	69bb      	ldr	r3, [r7, #24]
 8014116:	e853 3f00 	ldrex	r3, [r3]
 801411a:	617b      	str	r3, [r7, #20]
   return(result);
 801411c:	697b      	ldr	r3, [r7, #20]
 801411e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014122:	653b      	str	r3, [r7, #80]	@ 0x50
 8014124:	68fb      	ldr	r3, [r7, #12]
 8014126:	681b      	ldr	r3, [r3, #0]
 8014128:	3308      	adds	r3, #8
 801412a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801412c:	627a      	str	r2, [r7, #36]	@ 0x24
 801412e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014130:	6a39      	ldr	r1, [r7, #32]
 8014132:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014134:	e841 2300 	strex	r3, r2, [r1]
 8014138:	61fb      	str	r3, [r7, #28]
   return(result);
 801413a:	69fb      	ldr	r3, [r7, #28]
 801413c:	2b00      	cmp	r3, #0
 801413e:	d1e5      	bne.n	801410c <UART_Start_Receive_DMA+0x1a4>

  return HAL_OK;
 8014140:	2300      	movs	r3, #0
}
 8014142:	4618      	mov	r0, r3
 8014144:	3760      	adds	r7, #96	@ 0x60
 8014146:	46bd      	mov	sp, r7
 8014148:	bd80      	pop	{r7, pc}
 801414a:	bf00      	nop
 801414c:	080142a7 	.word	0x080142a7
 8014150:	08014399 	.word	0x08014399
 8014154:	080143d7 	.word	0x080143d7

08014158 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8014158:	b480      	push	{r7}
 801415a:	b08f      	sub	sp, #60	@ 0x3c
 801415c:	af00      	add	r7, sp, #0
 801415e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	681b      	ldr	r3, [r3, #0]
 8014164:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014166:	6a3b      	ldr	r3, [r7, #32]
 8014168:	e853 3f00 	ldrex	r3, [r3]
 801416c:	61fb      	str	r3, [r7, #28]
   return(result);
 801416e:	69fb      	ldr	r3, [r7, #28]
 8014170:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8014174:	637b      	str	r3, [r7, #52]	@ 0x34
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	681b      	ldr	r3, [r3, #0]
 801417a:	461a      	mov	r2, r3
 801417c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801417e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014180:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014182:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8014184:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014186:	e841 2300 	strex	r3, r2, [r1]
 801418a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801418c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801418e:	2b00      	cmp	r3, #0
 8014190:	d1e6      	bne.n	8014160 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	681b      	ldr	r3, [r3, #0]
 8014196:	3308      	adds	r3, #8
 8014198:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801419a:	68fb      	ldr	r3, [r7, #12]
 801419c:	e853 3f00 	ldrex	r3, [r3]
 80141a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80141a2:	68bb      	ldr	r3, [r7, #8]
 80141a4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80141a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80141aa:	687b      	ldr	r3, [r7, #4]
 80141ac:	681b      	ldr	r3, [r3, #0]
 80141ae:	3308      	adds	r3, #8
 80141b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80141b2:	61ba      	str	r2, [r7, #24]
 80141b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80141b6:	6979      	ldr	r1, [r7, #20]
 80141b8:	69ba      	ldr	r2, [r7, #24]
 80141ba:	e841 2300 	strex	r3, r2, [r1]
 80141be:	613b      	str	r3, [r7, #16]
   return(result);
 80141c0:	693b      	ldr	r3, [r7, #16]
 80141c2:	2b00      	cmp	r3, #0
 80141c4:	d1e5      	bne.n	8014192 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	2220      	movs	r2, #32
 80141ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80141ce:	bf00      	nop
 80141d0:	373c      	adds	r7, #60	@ 0x3c
 80141d2:	46bd      	mov	sp, r7
 80141d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141d8:	4770      	bx	lr

080141da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80141da:	b480      	push	{r7}
 80141dc:	b095      	sub	sp, #84	@ 0x54
 80141de:	af00      	add	r7, sp, #0
 80141e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	681b      	ldr	r3, [r3, #0]
 80141e6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80141e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80141ea:	e853 3f00 	ldrex	r3, [r3]
 80141ee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80141f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80141f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80141f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	681b      	ldr	r3, [r3, #0]
 80141fc:	461a      	mov	r2, r3
 80141fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014200:	643b      	str	r3, [r7, #64]	@ 0x40
 8014202:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014204:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8014206:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8014208:	e841 2300 	strex	r3, r2, [r1]
 801420c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801420e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014210:	2b00      	cmp	r3, #0
 8014212:	d1e6      	bne.n	80141e2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	681b      	ldr	r3, [r3, #0]
 8014218:	3308      	adds	r3, #8
 801421a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801421c:	6a3b      	ldr	r3, [r7, #32]
 801421e:	e853 3f00 	ldrex	r3, [r3]
 8014222:	61fb      	str	r3, [r7, #28]
   return(result);
 8014224:	69fb      	ldr	r3, [r7, #28]
 8014226:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801422a:	f023 0301 	bic.w	r3, r3, #1
 801422e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014230:	687b      	ldr	r3, [r7, #4]
 8014232:	681b      	ldr	r3, [r3, #0]
 8014234:	3308      	adds	r3, #8
 8014236:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8014238:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801423a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801423c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801423e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014240:	e841 2300 	strex	r3, r2, [r1]
 8014244:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8014246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014248:	2b00      	cmp	r3, #0
 801424a:	d1e3      	bne.n	8014214 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014250:	2b01      	cmp	r3, #1
 8014252:	d118      	bne.n	8014286 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	681b      	ldr	r3, [r3, #0]
 8014258:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801425a:	68fb      	ldr	r3, [r7, #12]
 801425c:	e853 3f00 	ldrex	r3, [r3]
 8014260:	60bb      	str	r3, [r7, #8]
   return(result);
 8014262:	68bb      	ldr	r3, [r7, #8]
 8014264:	f023 0310 	bic.w	r3, r3, #16
 8014268:	647b      	str	r3, [r7, #68]	@ 0x44
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	681b      	ldr	r3, [r3, #0]
 801426e:	461a      	mov	r2, r3
 8014270:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014272:	61bb      	str	r3, [r7, #24]
 8014274:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014276:	6979      	ldr	r1, [r7, #20]
 8014278:	69ba      	ldr	r2, [r7, #24]
 801427a:	e841 2300 	strex	r3, r2, [r1]
 801427e:	613b      	str	r3, [r7, #16]
   return(result);
 8014280:	693b      	ldr	r3, [r7, #16]
 8014282:	2b00      	cmp	r3, #0
 8014284:	d1e6      	bne.n	8014254 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8014286:	687b      	ldr	r3, [r7, #4]
 8014288:	2220      	movs	r2, #32
 801428a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	2200      	movs	r2, #0
 8014292:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	2200      	movs	r2, #0
 8014298:	675a      	str	r2, [r3, #116]	@ 0x74
}
 801429a:	bf00      	nop
 801429c:	3754      	adds	r7, #84	@ 0x54
 801429e:	46bd      	mov	sp, r7
 80142a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142a4:	4770      	bx	lr

080142a6 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80142a6:	b580      	push	{r7, lr}
 80142a8:	b096      	sub	sp, #88	@ 0x58
 80142aa:	af00      	add	r7, sp, #0
 80142ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80142ae:	687b      	ldr	r3, [r7, #4]
 80142b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80142b2:	657b      	str	r3, [r7, #84]	@ 0x54

  /* Check if DMA in circular mode */
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80142b8:	2b81      	cmp	r3, #129	@ 0x81
 80142ba:	d057      	beq.n	801436c <UART_DMAReceiveCplt+0xc6>
  {
    huart->RxXferCount = 0U;
 80142bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80142be:	2200      	movs	r2, #0
 80142c0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80142c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80142c6:	681b      	ldr	r3, [r3, #0]
 80142c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80142ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80142cc:	e853 3f00 	ldrex	r3, [r3]
 80142d0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80142d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80142d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80142d8:	653b      	str	r3, [r7, #80]	@ 0x50
 80142da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80142dc:	681b      	ldr	r3, [r3, #0]
 80142de:	461a      	mov	r2, r3
 80142e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80142e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80142e4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80142e6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80142e8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80142ea:	e841 2300 	strex	r3, r2, [r1]
 80142ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80142f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80142f2:	2b00      	cmp	r3, #0
 80142f4:	d1e6      	bne.n	80142c4 <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80142f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80142f8:	681b      	ldr	r3, [r3, #0]
 80142fa:	3308      	adds	r3, #8
 80142fc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80142fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014300:	e853 3f00 	ldrex	r3, [r3]
 8014304:	623b      	str	r3, [r7, #32]
   return(result);
 8014306:	6a3b      	ldr	r3, [r7, #32]
 8014308:	f023 0301 	bic.w	r3, r3, #1
 801430c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801430e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014310:	681b      	ldr	r3, [r3, #0]
 8014312:	3308      	adds	r3, #8
 8014314:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8014316:	633a      	str	r2, [r7, #48]	@ 0x30
 8014318:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801431a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801431c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801431e:	e841 2300 	strex	r3, r2, [r1]
 8014322:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8014324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014326:	2b00      	cmp	r3, #0
 8014328:	d1e5      	bne.n	80142f6 <UART_DMAReceiveCplt+0x50>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801432a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801432c:	2220      	movs	r2, #32
 801432e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014332:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014334:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014336:	2b01      	cmp	r3, #1
 8014338:	d118      	bne.n	801436c <UART_DMAReceiveCplt+0xc6>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801433a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801433c:	681b      	ldr	r3, [r3, #0]
 801433e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014340:	693b      	ldr	r3, [r7, #16]
 8014342:	e853 3f00 	ldrex	r3, [r3]
 8014346:	60fb      	str	r3, [r7, #12]
   return(result);
 8014348:	68fb      	ldr	r3, [r7, #12]
 801434a:	f023 0310 	bic.w	r3, r3, #16
 801434e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014350:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014352:	681b      	ldr	r3, [r3, #0]
 8014354:	461a      	mov	r2, r3
 8014356:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014358:	61fb      	str	r3, [r7, #28]
 801435a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801435c:	69b9      	ldr	r1, [r7, #24]
 801435e:	69fa      	ldr	r2, [r7, #28]
 8014360:	e841 2300 	strex	r3, r2, [r1]
 8014364:	617b      	str	r3, [r7, #20]
   return(result);
 8014366:	697b      	ldr	r3, [r7, #20]
 8014368:	2b00      	cmp	r3, #0
 801436a:	d1e6      	bne.n	801433a <UART_DMAReceiveCplt+0x94>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801436c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801436e:	2200      	movs	r2, #0
 8014370:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014372:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014374:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014376:	2b01      	cmp	r3, #1
 8014378:	d107      	bne.n	801438a <UART_DMAReceiveCplt+0xe4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801437a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801437c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8014380:	4619      	mov	r1, r3
 8014382:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8014384:	f7ef f878 	bl	8003478 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8014388:	e002      	b.n	8014390 <UART_DMAReceiveCplt+0xea>
    HAL_UART_RxCpltCallback(huart);
 801438a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801438c:	f7ef f846 	bl	800341c <HAL_UART_RxCpltCallback>
}
 8014390:	bf00      	nop
 8014392:	3758      	adds	r7, #88	@ 0x58
 8014394:	46bd      	mov	sp, r7
 8014396:	bd80      	pop	{r7, pc}

08014398 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8014398:	b580      	push	{r7, lr}
 801439a:	b084      	sub	sp, #16
 801439c:	af00      	add	r7, sp, #0
 801439e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80143a4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80143a6:	68fb      	ldr	r3, [r7, #12]
 80143a8:	2201      	movs	r2, #1
 80143aa:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80143ac:	68fb      	ldr	r3, [r7, #12]
 80143ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80143b0:	2b01      	cmp	r3, #1
 80143b2:	d109      	bne.n	80143c8 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80143b4:	68fb      	ldr	r3, [r7, #12]
 80143b6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80143ba:	085b      	lsrs	r3, r3, #1
 80143bc:	b29b      	uxth	r3, r3
 80143be:	4619      	mov	r1, r3
 80143c0:	68f8      	ldr	r0, [r7, #12]
 80143c2:	f7ef f859 	bl	8003478 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80143c6:	e002      	b.n	80143ce <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80143c8:	68f8      	ldr	r0, [r7, #12]
 80143ca:	f7ef f839 	bl	8003440 <HAL_UART_RxHalfCpltCallback>
}
 80143ce:	bf00      	nop
 80143d0:	3710      	adds	r7, #16
 80143d2:	46bd      	mov	sp, r7
 80143d4:	bd80      	pop	{r7, pc}

080143d6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80143d6:	b580      	push	{r7, lr}
 80143d8:	b086      	sub	sp, #24
 80143da:	af00      	add	r7, sp, #0
 80143dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80143e2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80143e4:	697b      	ldr	r3, [r7, #20]
 80143e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80143ea:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80143ec:	697b      	ldr	r3, [r7, #20]
 80143ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80143f2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80143f4:	697b      	ldr	r3, [r7, #20]
 80143f6:	681b      	ldr	r3, [r3, #0]
 80143f8:	689b      	ldr	r3, [r3, #8]
 80143fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80143fe:	2b80      	cmp	r3, #128	@ 0x80
 8014400:	d109      	bne.n	8014416 <UART_DMAError+0x40>
 8014402:	693b      	ldr	r3, [r7, #16]
 8014404:	2b21      	cmp	r3, #33	@ 0x21
 8014406:	d106      	bne.n	8014416 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8014408:	697b      	ldr	r3, [r7, #20]
 801440a:	2200      	movs	r2, #0
 801440c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8014410:	6978      	ldr	r0, [r7, #20]
 8014412:	f7ff fea1 	bl	8014158 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8014416:	697b      	ldr	r3, [r7, #20]
 8014418:	681b      	ldr	r3, [r3, #0]
 801441a:	689b      	ldr	r3, [r3, #8]
 801441c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014420:	2b40      	cmp	r3, #64	@ 0x40
 8014422:	d109      	bne.n	8014438 <UART_DMAError+0x62>
 8014424:	68fb      	ldr	r3, [r7, #12]
 8014426:	2b22      	cmp	r3, #34	@ 0x22
 8014428:	d106      	bne.n	8014438 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 801442a:	697b      	ldr	r3, [r7, #20]
 801442c:	2200      	movs	r2, #0
 801442e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8014432:	6978      	ldr	r0, [r7, #20]
 8014434:	f7ff fed1 	bl	80141da <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8014438:	697b      	ldr	r3, [r7, #20]
 801443a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801443e:	f043 0210 	orr.w	r2, r3, #16
 8014442:	697b      	ldr	r3, [r7, #20]
 8014444:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8014448:	6978      	ldr	r0, [r7, #20]
 801444a:	f7ff f8b9 	bl	80135c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801444e:	bf00      	nop
 8014450:	3718      	adds	r7, #24
 8014452:	46bd      	mov	sp, r7
 8014454:	bd80      	pop	{r7, pc}

08014456 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8014456:	b580      	push	{r7, lr}
 8014458:	b084      	sub	sp, #16
 801445a:	af00      	add	r7, sp, #0
 801445c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801445e:	687b      	ldr	r3, [r7, #4]
 8014460:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014462:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8014464:	68fb      	ldr	r3, [r7, #12]
 8014466:	2200      	movs	r2, #0
 8014468:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 801446c:	68fb      	ldr	r3, [r7, #12]
 801446e:	2200      	movs	r2, #0
 8014470:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8014474:	68f8      	ldr	r0, [r7, #12]
 8014476:	f7ff f8a3 	bl	80135c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801447a:	bf00      	nop
 801447c:	3710      	adds	r7, #16
 801447e:	46bd      	mov	sp, r7
 8014480:	bd80      	pop	{r7, pc}

08014482 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8014482:	b580      	push	{r7, lr}
 8014484:	b088      	sub	sp, #32
 8014486:	af00      	add	r7, sp, #0
 8014488:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	681b      	ldr	r3, [r3, #0]
 801448e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014490:	68fb      	ldr	r3, [r7, #12]
 8014492:	e853 3f00 	ldrex	r3, [r3]
 8014496:	60bb      	str	r3, [r7, #8]
   return(result);
 8014498:	68bb      	ldr	r3, [r7, #8]
 801449a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801449e:	61fb      	str	r3, [r7, #28]
 80144a0:	687b      	ldr	r3, [r7, #4]
 80144a2:	681b      	ldr	r3, [r3, #0]
 80144a4:	461a      	mov	r2, r3
 80144a6:	69fb      	ldr	r3, [r7, #28]
 80144a8:	61bb      	str	r3, [r7, #24]
 80144aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80144ac:	6979      	ldr	r1, [r7, #20]
 80144ae:	69ba      	ldr	r2, [r7, #24]
 80144b0:	e841 2300 	strex	r3, r2, [r1]
 80144b4:	613b      	str	r3, [r7, #16]
   return(result);
 80144b6:	693b      	ldr	r3, [r7, #16]
 80144b8:	2b00      	cmp	r3, #0
 80144ba:	d1e6      	bne.n	801448a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	2220      	movs	r2, #32
 80144c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80144c4:	687b      	ldr	r3, [r7, #4]
 80144c6:	2200      	movs	r2, #0
 80144c8:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80144ca:	6878      	ldr	r0, [r7, #4]
 80144cc:	f7ff f86e 	bl	80135ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80144d0:	bf00      	nop
 80144d2:	3720      	adds	r7, #32
 80144d4:	46bd      	mov	sp, r7
 80144d6:	bd80      	pop	{r7, pc}

080144d8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80144d8:	b580      	push	{r7, lr}
 80144da:	b09c      	sub	sp, #112	@ 0x70
 80144dc:	af00      	add	r7, sp, #0
 80144de:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80144e0:	687b      	ldr	r3, [r7, #4]
 80144e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80144e6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80144ea:	687b      	ldr	r3, [r7, #4]
 80144ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80144f0:	2b22      	cmp	r3, #34	@ 0x22
 80144f2:	f040 80c3 	bne.w	801467c <UART_RxISR_8BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	681b      	ldr	r3, [r3, #0]
 80144fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80144fc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8014500:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8014504:	b2d9      	uxtb	r1, r3
 8014506:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 801450a:	b2da      	uxtb	r2, r3
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014510:	400a      	ands	r2, r1
 8014512:	b2d2      	uxtb	r2, r2
 8014514:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801451a:	1c5a      	adds	r2, r3, #1
 801451c:	687b      	ldr	r3, [r7, #4]
 801451e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8014520:	687b      	ldr	r3, [r7, #4]
 8014522:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8014526:	b29b      	uxth	r3, r3
 8014528:	3b01      	subs	r3, #1
 801452a:	b29a      	uxth	r2, r3
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8014532:	687b      	ldr	r3, [r7, #4]
 8014534:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8014538:	b29b      	uxth	r3, r3
 801453a:	2b00      	cmp	r3, #0
 801453c:	f040 80a6 	bne.w	801468c <UART_RxISR_8BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	681b      	ldr	r3, [r3, #0]
 8014544:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014546:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014548:	e853 3f00 	ldrex	r3, [r3]
 801454c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801454e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014550:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8014554:	66bb      	str	r3, [r7, #104]	@ 0x68
 8014556:	687b      	ldr	r3, [r7, #4]
 8014558:	681b      	ldr	r3, [r3, #0]
 801455a:	461a      	mov	r2, r3
 801455c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801455e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8014560:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014562:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8014564:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8014566:	e841 2300 	strex	r3, r2, [r1]
 801456a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801456c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801456e:	2b00      	cmp	r3, #0
 8014570:	d1e6      	bne.n	8014540 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014572:	687b      	ldr	r3, [r7, #4]
 8014574:	681b      	ldr	r3, [r3, #0]
 8014576:	3308      	adds	r3, #8
 8014578:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801457a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801457c:	e853 3f00 	ldrex	r3, [r3]
 8014580:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8014582:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014584:	f023 0301 	bic.w	r3, r3, #1
 8014588:	667b      	str	r3, [r7, #100]	@ 0x64
 801458a:	687b      	ldr	r3, [r7, #4]
 801458c:	681b      	ldr	r3, [r3, #0]
 801458e:	3308      	adds	r3, #8
 8014590:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8014592:	647a      	str	r2, [r7, #68]	@ 0x44
 8014594:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014596:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8014598:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801459a:	e841 2300 	strex	r3, r2, [r1]
 801459e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80145a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	d1e5      	bne.n	8014572 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80145a6:	687b      	ldr	r3, [r7, #4]
 80145a8:	2220      	movs	r2, #32
 80145aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80145ae:	687b      	ldr	r3, [r7, #4]
 80145b0:	2200      	movs	r2, #0
 80145b2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	2200      	movs	r2, #0
 80145b8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80145ba:	687b      	ldr	r3, [r7, #4]
 80145bc:	681b      	ldr	r3, [r3, #0]
 80145be:	4a35      	ldr	r2, [pc, #212]	@ (8014694 <UART_RxISR_8BIT+0x1bc>)
 80145c0:	4293      	cmp	r3, r2
 80145c2:	d024      	beq.n	801460e <UART_RxISR_8BIT+0x136>
 80145c4:	687b      	ldr	r3, [r7, #4]
 80145c6:	681b      	ldr	r3, [r3, #0]
 80145c8:	4a33      	ldr	r2, [pc, #204]	@ (8014698 <UART_RxISR_8BIT+0x1c0>)
 80145ca:	4293      	cmp	r3, r2
 80145cc:	d01f      	beq.n	801460e <UART_RxISR_8BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	681b      	ldr	r3, [r3, #0]
 80145d2:	685b      	ldr	r3, [r3, #4]
 80145d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80145d8:	2b00      	cmp	r3, #0
 80145da:	d018      	beq.n	801460e <UART_RxISR_8BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	681b      	ldr	r3, [r3, #0]
 80145e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80145e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80145e4:	e853 3f00 	ldrex	r3, [r3]
 80145e8:	623b      	str	r3, [r7, #32]
   return(result);
 80145ea:	6a3b      	ldr	r3, [r7, #32]
 80145ec:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80145f0:	663b      	str	r3, [r7, #96]	@ 0x60
 80145f2:	687b      	ldr	r3, [r7, #4]
 80145f4:	681b      	ldr	r3, [r3, #0]
 80145f6:	461a      	mov	r2, r3
 80145f8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80145fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80145fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80145fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014600:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014602:	e841 2300 	strex	r3, r2, [r1]
 8014606:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8014608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801460a:	2b00      	cmp	r3, #0
 801460c:	d1e6      	bne.n	80145dc <UART_RxISR_8BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014612:	2b01      	cmp	r3, #1
 8014614:	d12e      	bne.n	8014674 <UART_RxISR_8BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014616:	687b      	ldr	r3, [r7, #4]
 8014618:	2200      	movs	r2, #0
 801461a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	681b      	ldr	r3, [r3, #0]
 8014620:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014622:	693b      	ldr	r3, [r7, #16]
 8014624:	e853 3f00 	ldrex	r3, [r3]
 8014628:	60fb      	str	r3, [r7, #12]
   return(result);
 801462a:	68fb      	ldr	r3, [r7, #12]
 801462c:	f023 0310 	bic.w	r3, r3, #16
 8014630:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8014632:	687b      	ldr	r3, [r7, #4]
 8014634:	681b      	ldr	r3, [r3, #0]
 8014636:	461a      	mov	r2, r3
 8014638:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801463a:	61fb      	str	r3, [r7, #28]
 801463c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801463e:	69b9      	ldr	r1, [r7, #24]
 8014640:	69fa      	ldr	r2, [r7, #28]
 8014642:	e841 2300 	strex	r3, r2, [r1]
 8014646:	617b      	str	r3, [r7, #20]
   return(result);
 8014648:	697b      	ldr	r3, [r7, #20]
 801464a:	2b00      	cmp	r3, #0
 801464c:	d1e6      	bne.n	801461c <UART_RxISR_8BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	681b      	ldr	r3, [r3, #0]
 8014652:	69db      	ldr	r3, [r3, #28]
 8014654:	f003 0310 	and.w	r3, r3, #16
 8014658:	2b10      	cmp	r3, #16
 801465a:	d103      	bne.n	8014664 <UART_RxISR_8BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	681b      	ldr	r3, [r3, #0]
 8014660:	2210      	movs	r2, #16
 8014662:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801466a:	4619      	mov	r1, r3
 801466c:	6878      	ldr	r0, [r7, #4]
 801466e:	f7ee ff03 	bl	8003478 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8014672:	e00b      	b.n	801468c <UART_RxISR_8BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 8014674:	6878      	ldr	r0, [r7, #4]
 8014676:	f7ee fed1 	bl	800341c <HAL_UART_RxCpltCallback>
}
 801467a:	e007      	b.n	801468c <UART_RxISR_8BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	681b      	ldr	r3, [r3, #0]
 8014680:	699a      	ldr	r2, [r3, #24]
 8014682:	687b      	ldr	r3, [r7, #4]
 8014684:	681b      	ldr	r3, [r3, #0]
 8014686:	f042 0208 	orr.w	r2, r2, #8
 801468a:	619a      	str	r2, [r3, #24]
}
 801468c:	bf00      	nop
 801468e:	3770      	adds	r7, #112	@ 0x70
 8014690:	46bd      	mov	sp, r7
 8014692:	bd80      	pop	{r7, pc}
 8014694:	44002400 	.word	0x44002400
 8014698:	54002400 	.word	0x54002400

0801469c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801469c:	b580      	push	{r7, lr}
 801469e:	b09c      	sub	sp, #112	@ 0x70
 80146a0:	af00      	add	r7, sp, #0
 80146a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80146aa:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80146ae:	687b      	ldr	r3, [r7, #4]
 80146b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80146b4:	2b22      	cmp	r3, #34	@ 0x22
 80146b6:	f040 80c3 	bne.w	8014840 <UART_RxISR_16BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	681b      	ldr	r3, [r3, #0]
 80146be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80146c0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80146c8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80146ca:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80146ce:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80146d2:	4013      	ands	r3, r2
 80146d4:	b29a      	uxth	r2, r3
 80146d6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80146d8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80146da:	687b      	ldr	r3, [r7, #4]
 80146dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80146de:	1c9a      	adds	r2, r3, #2
 80146e0:	687b      	ldr	r3, [r7, #4]
 80146e2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80146ea:	b29b      	uxth	r3, r3
 80146ec:	3b01      	subs	r3, #1
 80146ee:	b29a      	uxth	r2, r3
 80146f0:	687b      	ldr	r3, [r7, #4]
 80146f2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80146f6:	687b      	ldr	r3, [r7, #4]
 80146f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80146fc:	b29b      	uxth	r3, r3
 80146fe:	2b00      	cmp	r3, #0
 8014700:	f040 80a6 	bne.w	8014850 <UART_RxISR_16BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	681b      	ldr	r3, [r3, #0]
 8014708:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801470a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801470c:	e853 3f00 	ldrex	r3, [r3]
 8014710:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8014712:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014714:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8014718:	667b      	str	r3, [r7, #100]	@ 0x64
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	681b      	ldr	r3, [r3, #0]
 801471e:	461a      	mov	r2, r3
 8014720:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8014722:	657b      	str	r3, [r7, #84]	@ 0x54
 8014724:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014726:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8014728:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801472a:	e841 2300 	strex	r3, r2, [r1]
 801472e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8014730:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014732:	2b00      	cmp	r3, #0
 8014734:	d1e6      	bne.n	8014704 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014736:	687b      	ldr	r3, [r7, #4]
 8014738:	681b      	ldr	r3, [r3, #0]
 801473a:	3308      	adds	r3, #8
 801473c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801473e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014740:	e853 3f00 	ldrex	r3, [r3]
 8014744:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8014746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014748:	f023 0301 	bic.w	r3, r3, #1
 801474c:	663b      	str	r3, [r7, #96]	@ 0x60
 801474e:	687b      	ldr	r3, [r7, #4]
 8014750:	681b      	ldr	r3, [r3, #0]
 8014752:	3308      	adds	r3, #8
 8014754:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8014756:	643a      	str	r2, [r7, #64]	@ 0x40
 8014758:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801475a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801475c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801475e:	e841 2300 	strex	r3, r2, [r1]
 8014762:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8014764:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014766:	2b00      	cmp	r3, #0
 8014768:	d1e5      	bne.n	8014736 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801476a:	687b      	ldr	r3, [r7, #4]
 801476c:	2220      	movs	r2, #32
 801476e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8014772:	687b      	ldr	r3, [r7, #4]
 8014774:	2200      	movs	r2, #0
 8014776:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	2200      	movs	r2, #0
 801477c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	681b      	ldr	r3, [r3, #0]
 8014782:	4a35      	ldr	r2, [pc, #212]	@ (8014858 <UART_RxISR_16BIT+0x1bc>)
 8014784:	4293      	cmp	r3, r2
 8014786:	d024      	beq.n	80147d2 <UART_RxISR_16BIT+0x136>
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	681b      	ldr	r3, [r3, #0]
 801478c:	4a33      	ldr	r2, [pc, #204]	@ (801485c <UART_RxISR_16BIT+0x1c0>)
 801478e:	4293      	cmp	r3, r2
 8014790:	d01f      	beq.n	80147d2 <UART_RxISR_16BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	681b      	ldr	r3, [r3, #0]
 8014796:	685b      	ldr	r3, [r3, #4]
 8014798:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801479c:	2b00      	cmp	r3, #0
 801479e:	d018      	beq.n	80147d2 <UART_RxISR_16BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	681b      	ldr	r3, [r3, #0]
 80147a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80147a6:	6a3b      	ldr	r3, [r7, #32]
 80147a8:	e853 3f00 	ldrex	r3, [r3]
 80147ac:	61fb      	str	r3, [r7, #28]
   return(result);
 80147ae:	69fb      	ldr	r3, [r7, #28]
 80147b0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80147b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80147b6:	687b      	ldr	r3, [r7, #4]
 80147b8:	681b      	ldr	r3, [r3, #0]
 80147ba:	461a      	mov	r2, r3
 80147bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80147be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80147c0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80147c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80147c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80147c6:	e841 2300 	strex	r3, r2, [r1]
 80147ca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80147cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80147ce:	2b00      	cmp	r3, #0
 80147d0:	d1e6      	bne.n	80147a0 <UART_RxISR_16BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80147d2:	687b      	ldr	r3, [r7, #4]
 80147d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80147d6:	2b01      	cmp	r3, #1
 80147d8:	d12e      	bne.n	8014838 <UART_RxISR_16BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80147da:	687b      	ldr	r3, [r7, #4]
 80147dc:	2200      	movs	r2, #0
 80147de:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80147e0:	687b      	ldr	r3, [r7, #4]
 80147e2:	681b      	ldr	r3, [r3, #0]
 80147e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80147e6:	68fb      	ldr	r3, [r7, #12]
 80147e8:	e853 3f00 	ldrex	r3, [r3]
 80147ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80147ee:	68bb      	ldr	r3, [r7, #8]
 80147f0:	f023 0310 	bic.w	r3, r3, #16
 80147f4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80147f6:	687b      	ldr	r3, [r7, #4]
 80147f8:	681b      	ldr	r3, [r3, #0]
 80147fa:	461a      	mov	r2, r3
 80147fc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80147fe:	61bb      	str	r3, [r7, #24]
 8014800:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014802:	6979      	ldr	r1, [r7, #20]
 8014804:	69ba      	ldr	r2, [r7, #24]
 8014806:	e841 2300 	strex	r3, r2, [r1]
 801480a:	613b      	str	r3, [r7, #16]
   return(result);
 801480c:	693b      	ldr	r3, [r7, #16]
 801480e:	2b00      	cmp	r3, #0
 8014810:	d1e6      	bne.n	80147e0 <UART_RxISR_16BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	681b      	ldr	r3, [r3, #0]
 8014816:	69db      	ldr	r3, [r3, #28]
 8014818:	f003 0310 	and.w	r3, r3, #16
 801481c:	2b10      	cmp	r3, #16
 801481e:	d103      	bne.n	8014828 <UART_RxISR_16BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	681b      	ldr	r3, [r3, #0]
 8014824:	2210      	movs	r2, #16
 8014826:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8014828:	687b      	ldr	r3, [r7, #4]
 801482a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801482e:	4619      	mov	r1, r3
 8014830:	6878      	ldr	r0, [r7, #4]
 8014832:	f7ee fe21 	bl	8003478 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8014836:	e00b      	b.n	8014850 <UART_RxISR_16BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 8014838:	6878      	ldr	r0, [r7, #4]
 801483a:	f7ee fdef 	bl	800341c <HAL_UART_RxCpltCallback>
}
 801483e:	e007      	b.n	8014850 <UART_RxISR_16BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8014840:	687b      	ldr	r3, [r7, #4]
 8014842:	681b      	ldr	r3, [r3, #0]
 8014844:	699a      	ldr	r2, [r3, #24]
 8014846:	687b      	ldr	r3, [r7, #4]
 8014848:	681b      	ldr	r3, [r3, #0]
 801484a:	f042 0208 	orr.w	r2, r2, #8
 801484e:	619a      	str	r2, [r3, #24]
}
 8014850:	bf00      	nop
 8014852:	3770      	adds	r7, #112	@ 0x70
 8014854:	46bd      	mov	sp, r7
 8014856:	bd80      	pop	{r7, pc}
 8014858:	44002400 	.word	0x44002400
 801485c:	54002400 	.word	0x54002400

08014860 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8014860:	b580      	push	{r7, lr}
 8014862:	b0ac      	sub	sp, #176	@ 0xb0
 8014864:	af00      	add	r7, sp, #0
 8014866:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801486e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8014872:	687b      	ldr	r3, [r7, #4]
 8014874:	681b      	ldr	r3, [r3, #0]
 8014876:	69db      	ldr	r3, [r3, #28]
 8014878:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	681b      	ldr	r3, [r3, #0]
 8014880:	681b      	ldr	r3, [r3, #0]
 8014882:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8014886:	687b      	ldr	r3, [r7, #4]
 8014888:	681b      	ldr	r3, [r3, #0]
 801488a:	689b      	ldr	r3, [r3, #8]
 801488c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8014896:	2b22      	cmp	r3, #34	@ 0x22
 8014898:	f040 8187 	bne.w	8014baa <UART_RxISR_8BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80148a2:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80148a6:	e12a      	b.n	8014afe <UART_RxISR_8BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	681b      	ldr	r3, [r3, #0]
 80148ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80148ae:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80148b2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80148b6:	b2d9      	uxtb	r1, r3
 80148b8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80148bc:	b2da      	uxtb	r2, r3
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80148c2:	400a      	ands	r2, r1
 80148c4:	b2d2      	uxtb	r2, r2
 80148c6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80148c8:	687b      	ldr	r3, [r7, #4]
 80148ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80148cc:	1c5a      	adds	r2, r3, #1
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80148d2:	687b      	ldr	r3, [r7, #4]
 80148d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80148d8:	b29b      	uxth	r3, r3
 80148da:	3b01      	subs	r3, #1
 80148dc:	b29a      	uxth	r2, r3
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80148e4:	687b      	ldr	r3, [r7, #4]
 80148e6:	681b      	ldr	r3, [r3, #0]
 80148e8:	69db      	ldr	r3, [r3, #28]
 80148ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80148ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80148f2:	f003 0307 	and.w	r3, r3, #7
 80148f6:	2b00      	cmp	r3, #0
 80148f8:	d053      	beq.n	80149a2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80148fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80148fe:	f003 0301 	and.w	r3, r3, #1
 8014902:	2b00      	cmp	r3, #0
 8014904:	d011      	beq.n	801492a <UART_RxISR_8BIT_FIFOEN+0xca>
 8014906:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801490a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801490e:	2b00      	cmp	r3, #0
 8014910:	d00b      	beq.n	801492a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	681b      	ldr	r3, [r3, #0]
 8014916:	2201      	movs	r2, #1
 8014918:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801491a:	687b      	ldr	r3, [r7, #4]
 801491c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014920:	f043 0201 	orr.w	r2, r3, #1
 8014924:	687b      	ldr	r3, [r7, #4]
 8014926:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801492a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801492e:	f003 0302 	and.w	r3, r3, #2
 8014932:	2b00      	cmp	r3, #0
 8014934:	d011      	beq.n	801495a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8014936:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801493a:	f003 0301 	and.w	r3, r3, #1
 801493e:	2b00      	cmp	r3, #0
 8014940:	d00b      	beq.n	801495a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8014942:	687b      	ldr	r3, [r7, #4]
 8014944:	681b      	ldr	r3, [r3, #0]
 8014946:	2202      	movs	r2, #2
 8014948:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801494a:	687b      	ldr	r3, [r7, #4]
 801494c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014950:	f043 0204 	orr.w	r2, r3, #4
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801495a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801495e:	f003 0304 	and.w	r3, r3, #4
 8014962:	2b00      	cmp	r3, #0
 8014964:	d011      	beq.n	801498a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8014966:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801496a:	f003 0301 	and.w	r3, r3, #1
 801496e:	2b00      	cmp	r3, #0
 8014970:	d00b      	beq.n	801498a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8014972:	687b      	ldr	r3, [r7, #4]
 8014974:	681b      	ldr	r3, [r3, #0]
 8014976:	2204      	movs	r2, #4
 8014978:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801497a:	687b      	ldr	r3, [r7, #4]
 801497c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014980:	f043 0202 	orr.w	r2, r3, #2
 8014984:	687b      	ldr	r3, [r7, #4]
 8014986:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014990:	2b00      	cmp	r3, #0
 8014992:	d006      	beq.n	80149a2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8014994:	6878      	ldr	r0, [r7, #4]
 8014996:	f7fe fe13 	bl	80135c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801499a:	687b      	ldr	r3, [r7, #4]
 801499c:	2200      	movs	r2, #0
 801499e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80149a8:	b29b      	uxth	r3, r3
 80149aa:	2b00      	cmp	r3, #0
 80149ac:	f040 80a7 	bne.w	8014afe <UART_RxISR_8BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	681b      	ldr	r3, [r3, #0]
 80149b4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80149b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80149b8:	e853 3f00 	ldrex	r3, [r3]
 80149bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 80149be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80149c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80149c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80149c8:	687b      	ldr	r3, [r7, #4]
 80149ca:	681b      	ldr	r3, [r3, #0]
 80149cc:	461a      	mov	r2, r3
 80149ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80149d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80149d4:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80149d6:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80149d8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80149da:	e841 2300 	strex	r3, r2, [r1]
 80149de:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 80149e0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80149e2:	2b00      	cmp	r3, #0
 80149e4:	d1e4      	bne.n	80149b0 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80149e6:	687b      	ldr	r3, [r7, #4]
 80149e8:	681b      	ldr	r3, [r3, #0]
 80149ea:	3308      	adds	r3, #8
 80149ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80149ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80149f0:	e853 3f00 	ldrex	r3, [r3]
 80149f4:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80149f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80149f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80149fc:	f023 0301 	bic.w	r3, r3, #1
 8014a00:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8014a04:	687b      	ldr	r3, [r7, #4]
 8014a06:	681b      	ldr	r3, [r3, #0]
 8014a08:	3308      	adds	r3, #8
 8014a0a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8014a0e:	66ba      	str	r2, [r7, #104]	@ 0x68
 8014a10:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014a12:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8014a14:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8014a16:	e841 2300 	strex	r3, r2, [r1]
 8014a1a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8014a1c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8014a1e:	2b00      	cmp	r3, #0
 8014a20:	d1e1      	bne.n	80149e6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8014a22:	687b      	ldr	r3, [r7, #4]
 8014a24:	2220      	movs	r2, #32
 8014a26:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8014a2a:	687b      	ldr	r3, [r7, #4]
 8014a2c:	2200      	movs	r2, #0
 8014a2e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8014a30:	687b      	ldr	r3, [r7, #4]
 8014a32:	2200      	movs	r2, #0
 8014a34:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	681b      	ldr	r3, [r3, #0]
 8014a3a:	4a62      	ldr	r2, [pc, #392]	@ (8014bc4 <UART_RxISR_8BIT_FIFOEN+0x364>)
 8014a3c:	4293      	cmp	r3, r2
 8014a3e:	d026      	beq.n	8014a8e <UART_RxISR_8BIT_FIFOEN+0x22e>
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	681b      	ldr	r3, [r3, #0]
 8014a44:	4a60      	ldr	r2, [pc, #384]	@ (8014bc8 <UART_RxISR_8BIT_FIFOEN+0x368>)
 8014a46:	4293      	cmp	r3, r2
 8014a48:	d021      	beq.n	8014a8e <UART_RxISR_8BIT_FIFOEN+0x22e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8014a4a:	687b      	ldr	r3, [r7, #4]
 8014a4c:	681b      	ldr	r3, [r3, #0]
 8014a4e:	685b      	ldr	r3, [r3, #4]
 8014a50:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8014a54:	2b00      	cmp	r3, #0
 8014a56:	d01a      	beq.n	8014a8e <UART_RxISR_8BIT_FIFOEN+0x22e>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8014a58:	687b      	ldr	r3, [r7, #4]
 8014a5a:	681b      	ldr	r3, [r3, #0]
 8014a5c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014a5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014a60:	e853 3f00 	ldrex	r3, [r3]
 8014a64:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8014a66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014a68:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8014a6c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	681b      	ldr	r3, [r3, #0]
 8014a74:	461a      	mov	r2, r3
 8014a76:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014a7a:	657b      	str	r3, [r7, #84]	@ 0x54
 8014a7c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014a7e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8014a80:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8014a82:	e841 2300 	strex	r3, r2, [r1]
 8014a86:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8014a88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014a8a:	2b00      	cmp	r3, #0
 8014a8c:	d1e4      	bne.n	8014a58 <UART_RxISR_8BIT_FIFOEN+0x1f8>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014a8e:	687b      	ldr	r3, [r7, #4]
 8014a90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014a92:	2b01      	cmp	r3, #1
 8014a94:	d130      	bne.n	8014af8 <UART_RxISR_8BIT_FIFOEN+0x298>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014a96:	687b      	ldr	r3, [r7, #4]
 8014a98:	2200      	movs	r2, #0
 8014a9a:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	681b      	ldr	r3, [r3, #0]
 8014aa0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014aa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014aa4:	e853 3f00 	ldrex	r3, [r3]
 8014aa8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8014aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014aac:	f023 0310 	bic.w	r3, r3, #16
 8014ab0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8014ab4:	687b      	ldr	r3, [r7, #4]
 8014ab6:	681b      	ldr	r3, [r3, #0]
 8014ab8:	461a      	mov	r2, r3
 8014aba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014abe:	643b      	str	r3, [r7, #64]	@ 0x40
 8014ac0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014ac2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8014ac4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8014ac6:	e841 2300 	strex	r3, r2, [r1]
 8014aca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8014acc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014ace:	2b00      	cmp	r3, #0
 8014ad0:	d1e4      	bne.n	8014a9c <UART_RxISR_8BIT_FIFOEN+0x23c>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8014ad2:	687b      	ldr	r3, [r7, #4]
 8014ad4:	681b      	ldr	r3, [r3, #0]
 8014ad6:	69db      	ldr	r3, [r3, #28]
 8014ad8:	f003 0310 	and.w	r3, r3, #16
 8014adc:	2b10      	cmp	r3, #16
 8014ade:	d103      	bne.n	8014ae8 <UART_RxISR_8BIT_FIFOEN+0x288>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	681b      	ldr	r3, [r3, #0]
 8014ae4:	2210      	movs	r2, #16
 8014ae6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8014ae8:	687b      	ldr	r3, [r7, #4]
 8014aea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8014aee:	4619      	mov	r1, r3
 8014af0:	6878      	ldr	r0, [r7, #4]
 8014af2:	f7ee fcc1 	bl	8003478 <HAL_UARTEx_RxEventCallback>
 8014af6:	e002      	b.n	8014afe <UART_RxISR_8BIT_FIFOEN+0x29e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8014af8:	6878      	ldr	r0, [r7, #4]
 8014afa:	f7ee fc8f 	bl	800341c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8014afe:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8014b02:	2b00      	cmp	r3, #0
 8014b04:	d006      	beq.n	8014b14 <UART_RxISR_8BIT_FIFOEN+0x2b4>
 8014b06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8014b0a:	f003 0320 	and.w	r3, r3, #32
 8014b0e:	2b00      	cmp	r3, #0
 8014b10:	f47f aeca 	bne.w	80148a8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8014b1a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8014b1e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8014b22:	2b00      	cmp	r3, #0
 8014b24:	d049      	beq.n	8014bba <UART_RxISR_8BIT_FIFOEN+0x35a>
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8014b2c:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8014b30:	429a      	cmp	r2, r3
 8014b32:	d242      	bcs.n	8014bba <UART_RxISR_8BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8014b34:	687b      	ldr	r3, [r7, #4]
 8014b36:	681b      	ldr	r3, [r3, #0]
 8014b38:	3308      	adds	r3, #8
 8014b3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014b3c:	6a3b      	ldr	r3, [r7, #32]
 8014b3e:	e853 3f00 	ldrex	r3, [r3]
 8014b42:	61fb      	str	r3, [r7, #28]
   return(result);
 8014b44:	69fb      	ldr	r3, [r7, #28]
 8014b46:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8014b4a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	681b      	ldr	r3, [r3, #0]
 8014b52:	3308      	adds	r3, #8
 8014b54:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8014b58:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8014b5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014b5c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8014b5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014b60:	e841 2300 	strex	r3, r2, [r1]
 8014b64:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8014b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014b68:	2b00      	cmp	r3, #0
 8014b6a:	d1e3      	bne.n	8014b34 <UART_RxISR_8BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8014b6c:	687b      	ldr	r3, [r7, #4]
 8014b6e:	4a17      	ldr	r2, [pc, #92]	@ (8014bcc <UART_RxISR_8BIT_FIFOEN+0x36c>)
 8014b70:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8014b72:	687b      	ldr	r3, [r7, #4]
 8014b74:	681b      	ldr	r3, [r3, #0]
 8014b76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014b78:	68fb      	ldr	r3, [r7, #12]
 8014b7a:	e853 3f00 	ldrex	r3, [r3]
 8014b7e:	60bb      	str	r3, [r7, #8]
   return(result);
 8014b80:	68bb      	ldr	r3, [r7, #8]
 8014b82:	f043 0320 	orr.w	r3, r3, #32
 8014b86:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8014b8a:	687b      	ldr	r3, [r7, #4]
 8014b8c:	681b      	ldr	r3, [r3, #0]
 8014b8e:	461a      	mov	r2, r3
 8014b90:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8014b94:	61bb      	str	r3, [r7, #24]
 8014b96:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014b98:	6979      	ldr	r1, [r7, #20]
 8014b9a:	69ba      	ldr	r2, [r7, #24]
 8014b9c:	e841 2300 	strex	r3, r2, [r1]
 8014ba0:	613b      	str	r3, [r7, #16]
   return(result);
 8014ba2:	693b      	ldr	r3, [r7, #16]
 8014ba4:	2b00      	cmp	r3, #0
 8014ba6:	d1e4      	bne.n	8014b72 <UART_RxISR_8BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8014ba8:	e007      	b.n	8014bba <UART_RxISR_8BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8014baa:	687b      	ldr	r3, [r7, #4]
 8014bac:	681b      	ldr	r3, [r3, #0]
 8014bae:	699a      	ldr	r2, [r3, #24]
 8014bb0:	687b      	ldr	r3, [r7, #4]
 8014bb2:	681b      	ldr	r3, [r3, #0]
 8014bb4:	f042 0208 	orr.w	r2, r2, #8
 8014bb8:	619a      	str	r2, [r3, #24]
}
 8014bba:	bf00      	nop
 8014bbc:	37b0      	adds	r7, #176	@ 0xb0
 8014bbe:	46bd      	mov	sp, r7
 8014bc0:	bd80      	pop	{r7, pc}
 8014bc2:	bf00      	nop
 8014bc4:	44002400 	.word	0x44002400
 8014bc8:	54002400 	.word	0x54002400
 8014bcc:	080144d9 	.word	0x080144d9

08014bd0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8014bd0:	b580      	push	{r7, lr}
 8014bd2:	b0ae      	sub	sp, #184	@ 0xb8
 8014bd4:	af00      	add	r7, sp, #0
 8014bd6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8014bde:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	681b      	ldr	r3, [r3, #0]
 8014be6:	69db      	ldr	r3, [r3, #28]
 8014be8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8014bec:	687b      	ldr	r3, [r7, #4]
 8014bee:	681b      	ldr	r3, [r3, #0]
 8014bf0:	681b      	ldr	r3, [r3, #0]
 8014bf2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8014bf6:	687b      	ldr	r3, [r7, #4]
 8014bf8:	681b      	ldr	r3, [r3, #0]
 8014bfa:	689b      	ldr	r3, [r3, #8]
 8014bfc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8014c00:	687b      	ldr	r3, [r7, #4]
 8014c02:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8014c06:	2b22      	cmp	r3, #34	@ 0x22
 8014c08:	f040 818b 	bne.w	8014f22 <UART_RxISR_16BIT_FIFOEN+0x352>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8014c0c:	687b      	ldr	r3, [r7, #4]
 8014c0e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8014c12:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8014c16:	e12e      	b.n	8014e76 <UART_RxISR_16BIT_FIFOEN+0x2a6>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	681b      	ldr	r3, [r3, #0]
 8014c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014c1e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8014c22:	687b      	ldr	r3, [r7, #4]
 8014c24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014c26:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8014c2a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8014c2e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8014c32:	4013      	ands	r3, r2
 8014c34:	b29a      	uxth	r2, r3
 8014c36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014c3a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8014c3c:	687b      	ldr	r3, [r7, #4]
 8014c3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014c40:	1c9a      	adds	r2, r3, #2
 8014c42:	687b      	ldr	r3, [r7, #4]
 8014c44:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8014c46:	687b      	ldr	r3, [r7, #4]
 8014c48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8014c4c:	b29b      	uxth	r3, r3
 8014c4e:	3b01      	subs	r3, #1
 8014c50:	b29a      	uxth	r2, r3
 8014c52:	687b      	ldr	r3, [r7, #4]
 8014c54:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8014c58:	687b      	ldr	r3, [r7, #4]
 8014c5a:	681b      	ldr	r3, [r3, #0]
 8014c5c:	69db      	ldr	r3, [r3, #28]
 8014c5e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8014c62:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8014c66:	f003 0307 	and.w	r3, r3, #7
 8014c6a:	2b00      	cmp	r3, #0
 8014c6c:	d053      	beq.n	8014d16 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8014c6e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8014c72:	f003 0301 	and.w	r3, r3, #1
 8014c76:	2b00      	cmp	r3, #0
 8014c78:	d011      	beq.n	8014c9e <UART_RxISR_16BIT_FIFOEN+0xce>
 8014c7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8014c7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014c82:	2b00      	cmp	r3, #0
 8014c84:	d00b      	beq.n	8014c9e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8014c86:	687b      	ldr	r3, [r7, #4]
 8014c88:	681b      	ldr	r3, [r3, #0]
 8014c8a:	2201      	movs	r2, #1
 8014c8c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014c94:	f043 0201 	orr.w	r2, r3, #1
 8014c98:	687b      	ldr	r3, [r7, #4]
 8014c9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8014c9e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8014ca2:	f003 0302 	and.w	r3, r3, #2
 8014ca6:	2b00      	cmp	r3, #0
 8014ca8:	d011      	beq.n	8014cce <UART_RxISR_16BIT_FIFOEN+0xfe>
 8014caa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8014cae:	f003 0301 	and.w	r3, r3, #1
 8014cb2:	2b00      	cmp	r3, #0
 8014cb4:	d00b      	beq.n	8014cce <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8014cb6:	687b      	ldr	r3, [r7, #4]
 8014cb8:	681b      	ldr	r3, [r3, #0]
 8014cba:	2202      	movs	r2, #2
 8014cbc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8014cbe:	687b      	ldr	r3, [r7, #4]
 8014cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014cc4:	f043 0204 	orr.w	r2, r3, #4
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8014cce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8014cd2:	f003 0304 	and.w	r3, r3, #4
 8014cd6:	2b00      	cmp	r3, #0
 8014cd8:	d011      	beq.n	8014cfe <UART_RxISR_16BIT_FIFOEN+0x12e>
 8014cda:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8014cde:	f003 0301 	and.w	r3, r3, #1
 8014ce2:	2b00      	cmp	r3, #0
 8014ce4:	d00b      	beq.n	8014cfe <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	681b      	ldr	r3, [r3, #0]
 8014cea:	2204      	movs	r2, #4
 8014cec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8014cee:	687b      	ldr	r3, [r7, #4]
 8014cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014cf4:	f043 0202 	orr.w	r2, r3, #2
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8014cfe:	687b      	ldr	r3, [r7, #4]
 8014d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014d04:	2b00      	cmp	r3, #0
 8014d06:	d006      	beq.n	8014d16 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8014d08:	6878      	ldr	r0, [r7, #4]
 8014d0a:	f7fe fc59 	bl	80135c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014d0e:	687b      	ldr	r3, [r7, #4]
 8014d10:	2200      	movs	r2, #0
 8014d12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8014d16:	687b      	ldr	r3, [r7, #4]
 8014d18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8014d1c:	b29b      	uxth	r3, r3
 8014d1e:	2b00      	cmp	r3, #0
 8014d20:	f040 80a9 	bne.w	8014e76 <UART_RxISR_16BIT_FIFOEN+0x2a6>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8014d24:	687b      	ldr	r3, [r7, #4]
 8014d26:	681b      	ldr	r3, [r3, #0]
 8014d28:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014d2a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8014d2c:	e853 3f00 	ldrex	r3, [r3]
 8014d30:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8014d32:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8014d34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8014d38:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8014d3c:	687b      	ldr	r3, [r7, #4]
 8014d3e:	681b      	ldr	r3, [r3, #0]
 8014d40:	461a      	mov	r2, r3
 8014d42:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8014d46:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8014d4a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014d4c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8014d4e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8014d52:	e841 2300 	strex	r3, r2, [r1]
 8014d56:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8014d58:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014d5a:	2b00      	cmp	r3, #0
 8014d5c:	d1e2      	bne.n	8014d24 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8014d5e:	687b      	ldr	r3, [r7, #4]
 8014d60:	681b      	ldr	r3, [r3, #0]
 8014d62:	3308      	adds	r3, #8
 8014d64:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014d66:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8014d68:	e853 3f00 	ldrex	r3, [r3]
 8014d6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8014d6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014d70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8014d74:	f023 0301 	bic.w	r3, r3, #1
 8014d78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8014d7c:	687b      	ldr	r3, [r7, #4]
 8014d7e:	681b      	ldr	r3, [r3, #0]
 8014d80:	3308      	adds	r3, #8
 8014d82:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8014d86:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8014d88:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014d8a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8014d8c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8014d8e:	e841 2300 	strex	r3, r2, [r1]
 8014d92:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8014d94:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8014d96:	2b00      	cmp	r3, #0
 8014d98:	d1e1      	bne.n	8014d5e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8014d9a:	687b      	ldr	r3, [r7, #4]
 8014d9c:	2220      	movs	r2, #32
 8014d9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8014da2:	687b      	ldr	r3, [r7, #4]
 8014da4:	2200      	movs	r2, #0
 8014da6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	2200      	movs	r2, #0
 8014dac:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8014dae:	687b      	ldr	r3, [r7, #4]
 8014db0:	681b      	ldr	r3, [r3, #0]
 8014db2:	4a62      	ldr	r2, [pc, #392]	@ (8014f3c <UART_RxISR_16BIT_FIFOEN+0x36c>)
 8014db4:	4293      	cmp	r3, r2
 8014db6:	d026      	beq.n	8014e06 <UART_RxISR_16BIT_FIFOEN+0x236>
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	681b      	ldr	r3, [r3, #0]
 8014dbc:	4a60      	ldr	r2, [pc, #384]	@ (8014f40 <UART_RxISR_16BIT_FIFOEN+0x370>)
 8014dbe:	4293      	cmp	r3, r2
 8014dc0:	d021      	beq.n	8014e06 <UART_RxISR_16BIT_FIFOEN+0x236>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	681b      	ldr	r3, [r3, #0]
 8014dc6:	685b      	ldr	r3, [r3, #4]
 8014dc8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8014dcc:	2b00      	cmp	r3, #0
 8014dce:	d01a      	beq.n	8014e06 <UART_RxISR_16BIT_FIFOEN+0x236>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8014dd0:	687b      	ldr	r3, [r7, #4]
 8014dd2:	681b      	ldr	r3, [r3, #0]
 8014dd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014dd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014dd8:	e853 3f00 	ldrex	r3, [r3]
 8014ddc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8014dde:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014de0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8014de4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8014de8:	687b      	ldr	r3, [r7, #4]
 8014dea:	681b      	ldr	r3, [r3, #0]
 8014dec:	461a      	mov	r2, r3
 8014dee:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8014df2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8014df4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014df6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8014df8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8014dfa:	e841 2300 	strex	r3, r2, [r1]
 8014dfe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8014e00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014e02:	2b00      	cmp	r3, #0
 8014e04:	d1e4      	bne.n	8014dd0 <UART_RxISR_16BIT_FIFOEN+0x200>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014e0a:	2b01      	cmp	r3, #1
 8014e0c:	d130      	bne.n	8014e70 <UART_RxISR_16BIT_FIFOEN+0x2a0>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	2200      	movs	r2, #0
 8014e12:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	681b      	ldr	r3, [r3, #0]
 8014e18:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014e1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014e1c:	e853 3f00 	ldrex	r3, [r3]
 8014e20:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8014e22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014e24:	f023 0310 	bic.w	r3, r3, #16
 8014e28:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8014e2c:	687b      	ldr	r3, [r7, #4]
 8014e2e:	681b      	ldr	r3, [r3, #0]
 8014e30:	461a      	mov	r2, r3
 8014e32:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014e36:	647b      	str	r3, [r7, #68]	@ 0x44
 8014e38:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014e3a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8014e3c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8014e3e:	e841 2300 	strex	r3, r2, [r1]
 8014e42:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8014e44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014e46:	2b00      	cmp	r3, #0
 8014e48:	d1e4      	bne.n	8014e14 <UART_RxISR_16BIT_FIFOEN+0x244>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8014e4a:	687b      	ldr	r3, [r7, #4]
 8014e4c:	681b      	ldr	r3, [r3, #0]
 8014e4e:	69db      	ldr	r3, [r3, #28]
 8014e50:	f003 0310 	and.w	r3, r3, #16
 8014e54:	2b10      	cmp	r3, #16
 8014e56:	d103      	bne.n	8014e60 <UART_RxISR_16BIT_FIFOEN+0x290>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8014e58:	687b      	ldr	r3, [r7, #4]
 8014e5a:	681b      	ldr	r3, [r3, #0]
 8014e5c:	2210      	movs	r2, #16
 8014e5e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8014e60:	687b      	ldr	r3, [r7, #4]
 8014e62:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8014e66:	4619      	mov	r1, r3
 8014e68:	6878      	ldr	r0, [r7, #4]
 8014e6a:	f7ee fb05 	bl	8003478 <HAL_UARTEx_RxEventCallback>
 8014e6e:	e002      	b.n	8014e76 <UART_RxISR_16BIT_FIFOEN+0x2a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8014e70:	6878      	ldr	r0, [r7, #4]
 8014e72:	f7ee fad3 	bl	800341c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8014e76:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8014e7a:	2b00      	cmp	r3, #0
 8014e7c:	d006      	beq.n	8014e8c <UART_RxISR_16BIT_FIFOEN+0x2bc>
 8014e7e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8014e82:	f003 0320 	and.w	r3, r3, #32
 8014e86:	2b00      	cmp	r3, #0
 8014e88:	f47f aec6 	bne.w	8014c18 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8014e8c:	687b      	ldr	r3, [r7, #4]
 8014e8e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8014e92:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8014e96:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8014e9a:	2b00      	cmp	r3, #0
 8014e9c:	d049      	beq.n	8014f32 <UART_RxISR_16BIT_FIFOEN+0x362>
 8014e9e:	687b      	ldr	r3, [r7, #4]
 8014ea0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8014ea4:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8014ea8:	429a      	cmp	r2, r3
 8014eaa:	d242      	bcs.n	8014f32 <UART_RxISR_16BIT_FIFOEN+0x362>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8014eac:	687b      	ldr	r3, [r7, #4]
 8014eae:	681b      	ldr	r3, [r3, #0]
 8014eb0:	3308      	adds	r3, #8
 8014eb2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014eb6:	e853 3f00 	ldrex	r3, [r3]
 8014eba:	623b      	str	r3, [r7, #32]
   return(result);
 8014ebc:	6a3b      	ldr	r3, [r7, #32]
 8014ebe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8014ec2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8014ec6:	687b      	ldr	r3, [r7, #4]
 8014ec8:	681b      	ldr	r3, [r3, #0]
 8014eca:	3308      	adds	r3, #8
 8014ecc:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8014ed0:	633a      	str	r2, [r7, #48]	@ 0x30
 8014ed2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014ed4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014ed6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014ed8:	e841 2300 	strex	r3, r2, [r1]
 8014edc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8014ede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014ee0:	2b00      	cmp	r3, #0
 8014ee2:	d1e3      	bne.n	8014eac <UART_RxISR_16BIT_FIFOEN+0x2dc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	4a17      	ldr	r2, [pc, #92]	@ (8014f44 <UART_RxISR_16BIT_FIFOEN+0x374>)
 8014ee8:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8014eea:	687b      	ldr	r3, [r7, #4]
 8014eec:	681b      	ldr	r3, [r3, #0]
 8014eee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014ef0:	693b      	ldr	r3, [r7, #16]
 8014ef2:	e853 3f00 	ldrex	r3, [r3]
 8014ef6:	60fb      	str	r3, [r7, #12]
   return(result);
 8014ef8:	68fb      	ldr	r3, [r7, #12]
 8014efa:	f043 0320 	orr.w	r3, r3, #32
 8014efe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8014f02:	687b      	ldr	r3, [r7, #4]
 8014f04:	681b      	ldr	r3, [r3, #0]
 8014f06:	461a      	mov	r2, r3
 8014f08:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8014f0c:	61fb      	str	r3, [r7, #28]
 8014f0e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014f10:	69b9      	ldr	r1, [r7, #24]
 8014f12:	69fa      	ldr	r2, [r7, #28]
 8014f14:	e841 2300 	strex	r3, r2, [r1]
 8014f18:	617b      	str	r3, [r7, #20]
   return(result);
 8014f1a:	697b      	ldr	r3, [r7, #20]
 8014f1c:	2b00      	cmp	r3, #0
 8014f1e:	d1e4      	bne.n	8014eea <UART_RxISR_16BIT_FIFOEN+0x31a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8014f20:	e007      	b.n	8014f32 <UART_RxISR_16BIT_FIFOEN+0x362>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8014f22:	687b      	ldr	r3, [r7, #4]
 8014f24:	681b      	ldr	r3, [r3, #0]
 8014f26:	699a      	ldr	r2, [r3, #24]
 8014f28:	687b      	ldr	r3, [r7, #4]
 8014f2a:	681b      	ldr	r3, [r3, #0]
 8014f2c:	f042 0208 	orr.w	r2, r2, #8
 8014f30:	619a      	str	r2, [r3, #24]
}
 8014f32:	bf00      	nop
 8014f34:	37b8      	adds	r7, #184	@ 0xb8
 8014f36:	46bd      	mov	sp, r7
 8014f38:	bd80      	pop	{r7, pc}
 8014f3a:	bf00      	nop
 8014f3c:	44002400 	.word	0x44002400
 8014f40:	54002400 	.word	0x54002400
 8014f44:	0801469d 	.word	0x0801469d

08014f48 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8014f48:	b480      	push	{r7}
 8014f4a:	b083      	sub	sp, #12
 8014f4c:	af00      	add	r7, sp, #0
 8014f4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8014f50:	bf00      	nop
 8014f52:	370c      	adds	r7, #12
 8014f54:	46bd      	mov	sp, r7
 8014f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f5a:	4770      	bx	lr

08014f5c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8014f5c:	b480      	push	{r7}
 8014f5e:	b083      	sub	sp, #12
 8014f60:	af00      	add	r7, sp, #0
 8014f62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8014f64:	bf00      	nop
 8014f66:	370c      	adds	r7, #12
 8014f68:	46bd      	mov	sp, r7
 8014f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f6e:	4770      	bx	lr

08014f70 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8014f70:	b480      	push	{r7}
 8014f72:	b083      	sub	sp, #12
 8014f74:	af00      	add	r7, sp, #0
 8014f76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8014f78:	bf00      	nop
 8014f7a:	370c      	adds	r7, #12
 8014f7c:	46bd      	mov	sp, r7
 8014f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f82:	4770      	bx	lr

08014f84 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8014f84:	b580      	push	{r7, lr}
 8014f86:	b084      	sub	sp, #16
 8014f88:	af00      	add	r7, sp, #0
 8014f8a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8014f8c:	687b      	ldr	r3, [r7, #4]
 8014f8e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8014f92:	2b01      	cmp	r3, #1
 8014f94:	d101      	bne.n	8014f9a <HAL_UARTEx_EnableFifoMode+0x16>
 8014f96:	2302      	movs	r3, #2
 8014f98:	e02b      	b.n	8014ff2 <HAL_UARTEx_EnableFifoMode+0x6e>
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	2201      	movs	r2, #1
 8014f9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	2224      	movs	r2, #36	@ 0x24
 8014fa6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8014faa:	687b      	ldr	r3, [r7, #4]
 8014fac:	681b      	ldr	r3, [r3, #0]
 8014fae:	681b      	ldr	r3, [r3, #0]
 8014fb0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8014fb2:	687b      	ldr	r3, [r7, #4]
 8014fb4:	681b      	ldr	r3, [r3, #0]
 8014fb6:	681a      	ldr	r2, [r3, #0]
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	681b      	ldr	r3, [r3, #0]
 8014fbc:	f022 0201 	bic.w	r2, r2, #1
 8014fc0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8014fc2:	68fb      	ldr	r3, [r7, #12]
 8014fc4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8014fc8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8014fca:	687b      	ldr	r3, [r7, #4]
 8014fcc:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8014fd0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	681b      	ldr	r3, [r3, #0]
 8014fd6:	68fa      	ldr	r2, [r7, #12]
 8014fd8:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8014fda:	6878      	ldr	r0, [r7, #4]
 8014fdc:	f000 f912 	bl	8015204 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8014fe0:	687b      	ldr	r3, [r7, #4]
 8014fe2:	2220      	movs	r2, #32
 8014fe4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	2200      	movs	r2, #0
 8014fec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8014ff0:	2300      	movs	r3, #0
}
 8014ff2:	4618      	mov	r0, r3
 8014ff4:	3710      	adds	r7, #16
 8014ff6:	46bd      	mov	sp, r7
 8014ff8:	bd80      	pop	{r7, pc}

08014ffa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8014ffa:	b480      	push	{r7}
 8014ffc:	b085      	sub	sp, #20
 8014ffe:	af00      	add	r7, sp, #0
 8015000:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8015002:	687b      	ldr	r3, [r7, #4]
 8015004:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8015008:	2b01      	cmp	r3, #1
 801500a:	d101      	bne.n	8015010 <HAL_UARTEx_DisableFifoMode+0x16>
 801500c:	2302      	movs	r3, #2
 801500e:	e027      	b.n	8015060 <HAL_UARTEx_DisableFifoMode+0x66>
 8015010:	687b      	ldr	r3, [r7, #4]
 8015012:	2201      	movs	r2, #1
 8015014:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8015018:	687b      	ldr	r3, [r7, #4]
 801501a:	2224      	movs	r2, #36	@ 0x24
 801501c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8015020:	687b      	ldr	r3, [r7, #4]
 8015022:	681b      	ldr	r3, [r3, #0]
 8015024:	681b      	ldr	r3, [r3, #0]
 8015026:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8015028:	687b      	ldr	r3, [r7, #4]
 801502a:	681b      	ldr	r3, [r3, #0]
 801502c:	681a      	ldr	r2, [r3, #0]
 801502e:	687b      	ldr	r3, [r7, #4]
 8015030:	681b      	ldr	r3, [r3, #0]
 8015032:	f022 0201 	bic.w	r2, r2, #1
 8015036:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8015038:	68fb      	ldr	r3, [r7, #12]
 801503a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 801503e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	2200      	movs	r2, #0
 8015044:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	681b      	ldr	r3, [r3, #0]
 801504a:	68fa      	ldr	r2, [r7, #12]
 801504c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	2220      	movs	r2, #32
 8015052:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	2200      	movs	r2, #0
 801505a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801505e:	2300      	movs	r3, #0
}
 8015060:	4618      	mov	r0, r3
 8015062:	3714      	adds	r7, #20
 8015064:	46bd      	mov	sp, r7
 8015066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801506a:	4770      	bx	lr

0801506c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801506c:	b580      	push	{r7, lr}
 801506e:	b084      	sub	sp, #16
 8015070:	af00      	add	r7, sp, #0
 8015072:	6078      	str	r0, [r7, #4]
 8015074:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801507c:	2b01      	cmp	r3, #1
 801507e:	d101      	bne.n	8015084 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8015080:	2302      	movs	r3, #2
 8015082:	e02d      	b.n	80150e0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8015084:	687b      	ldr	r3, [r7, #4]
 8015086:	2201      	movs	r2, #1
 8015088:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	2224      	movs	r2, #36	@ 0x24
 8015090:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8015094:	687b      	ldr	r3, [r7, #4]
 8015096:	681b      	ldr	r3, [r3, #0]
 8015098:	681b      	ldr	r3, [r3, #0]
 801509a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801509c:	687b      	ldr	r3, [r7, #4]
 801509e:	681b      	ldr	r3, [r3, #0]
 80150a0:	681a      	ldr	r2, [r3, #0]
 80150a2:	687b      	ldr	r3, [r7, #4]
 80150a4:	681b      	ldr	r3, [r3, #0]
 80150a6:	f022 0201 	bic.w	r2, r2, #1
 80150aa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	681b      	ldr	r3, [r3, #0]
 80150b0:	689b      	ldr	r3, [r3, #8]
 80150b2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80150b6:	687b      	ldr	r3, [r7, #4]
 80150b8:	681b      	ldr	r3, [r3, #0]
 80150ba:	683a      	ldr	r2, [r7, #0]
 80150bc:	430a      	orrs	r2, r1
 80150be:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80150c0:	6878      	ldr	r0, [r7, #4]
 80150c2:	f000 f89f 	bl	8015204 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80150c6:	687b      	ldr	r3, [r7, #4]
 80150c8:	681b      	ldr	r3, [r3, #0]
 80150ca:	68fa      	ldr	r2, [r7, #12]
 80150cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80150ce:	687b      	ldr	r3, [r7, #4]
 80150d0:	2220      	movs	r2, #32
 80150d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80150d6:	687b      	ldr	r3, [r7, #4]
 80150d8:	2200      	movs	r2, #0
 80150da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80150de:	2300      	movs	r3, #0
}
 80150e0:	4618      	mov	r0, r3
 80150e2:	3710      	adds	r7, #16
 80150e4:	46bd      	mov	sp, r7
 80150e6:	bd80      	pop	{r7, pc}

080150e8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80150e8:	b580      	push	{r7, lr}
 80150ea:	b084      	sub	sp, #16
 80150ec:	af00      	add	r7, sp, #0
 80150ee:	6078      	str	r0, [r7, #4]
 80150f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80150f8:	2b01      	cmp	r3, #1
 80150fa:	d101      	bne.n	8015100 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80150fc:	2302      	movs	r3, #2
 80150fe:	e02d      	b.n	801515c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	2201      	movs	r2, #1
 8015104:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8015108:	687b      	ldr	r3, [r7, #4]
 801510a:	2224      	movs	r2, #36	@ 0x24
 801510c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8015110:	687b      	ldr	r3, [r7, #4]
 8015112:	681b      	ldr	r3, [r3, #0]
 8015114:	681b      	ldr	r3, [r3, #0]
 8015116:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8015118:	687b      	ldr	r3, [r7, #4]
 801511a:	681b      	ldr	r3, [r3, #0]
 801511c:	681a      	ldr	r2, [r3, #0]
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	681b      	ldr	r3, [r3, #0]
 8015122:	f022 0201 	bic.w	r2, r2, #1
 8015126:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8015128:	687b      	ldr	r3, [r7, #4]
 801512a:	681b      	ldr	r3, [r3, #0]
 801512c:	689b      	ldr	r3, [r3, #8]
 801512e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8015132:	687b      	ldr	r3, [r7, #4]
 8015134:	681b      	ldr	r3, [r3, #0]
 8015136:	683a      	ldr	r2, [r7, #0]
 8015138:	430a      	orrs	r2, r1
 801513a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801513c:	6878      	ldr	r0, [r7, #4]
 801513e:	f000 f861 	bl	8015204 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	681b      	ldr	r3, [r3, #0]
 8015146:	68fa      	ldr	r2, [r7, #12]
 8015148:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801514a:	687b      	ldr	r3, [r7, #4]
 801514c:	2220      	movs	r2, #32
 801514e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8015152:	687b      	ldr	r3, [r7, #4]
 8015154:	2200      	movs	r2, #0
 8015156:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801515a:	2300      	movs	r3, #0
}
 801515c:	4618      	mov	r0, r3
 801515e:	3710      	adds	r7, #16
 8015160:	46bd      	mov	sp, r7
 8015162:	bd80      	pop	{r7, pc}

08015164 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8015164:	b580      	push	{r7, lr}
 8015166:	b08c      	sub	sp, #48	@ 0x30
 8015168:	af00      	add	r7, sp, #0
 801516a:	60f8      	str	r0, [r7, #12]
 801516c:	60b9      	str	r1, [r7, #8]
 801516e:	4613      	mov	r3, r2
 8015170:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8015172:	2300      	movs	r3, #0
 8015174:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8015178:	68fb      	ldr	r3, [r7, #12]
 801517a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801517e:	2b20      	cmp	r3, #32
 8015180:	d13b      	bne.n	80151fa <HAL_UARTEx_ReceiveToIdle_IT+0x96>
  {
    if ((pData == NULL) || (Size == 0U))
 8015182:	68bb      	ldr	r3, [r7, #8]
 8015184:	2b00      	cmp	r3, #0
 8015186:	d002      	beq.n	801518e <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
 8015188:	88fb      	ldrh	r3, [r7, #6]
 801518a:	2b00      	cmp	r3, #0
 801518c:	d101      	bne.n	8015192 <HAL_UARTEx_ReceiveToIdle_IT+0x2e>
    {
      return HAL_ERROR;
 801518e:	2301      	movs	r3, #1
 8015190:	e034      	b.n	80151fc <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8015192:	68fb      	ldr	r3, [r7, #12]
 8015194:	2201      	movs	r2, #1
 8015196:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8015198:	68fb      	ldr	r3, [r7, #12]
 801519a:	2200      	movs	r2, #0
 801519c:	671a      	str	r2, [r3, #112]	@ 0x70

    (void)UART_Start_Receive_IT(huart, pData, Size);
 801519e:	88fb      	ldrh	r3, [r7, #6]
 80151a0:	461a      	mov	r2, r3
 80151a2:	68b9      	ldr	r1, [r7, #8]
 80151a4:	68f8      	ldr	r0, [r7, #12]
 80151a6:	f7fe fdbd 	bl	8013d24 <UART_Start_Receive_IT>

    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80151aa:	68fb      	ldr	r3, [r7, #12]
 80151ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80151ae:	2b01      	cmp	r3, #1
 80151b0:	d11d      	bne.n	80151ee <HAL_UARTEx_ReceiveToIdle_IT+0x8a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80151b2:	68fb      	ldr	r3, [r7, #12]
 80151b4:	681b      	ldr	r3, [r3, #0]
 80151b6:	2210      	movs	r2, #16
 80151b8:	621a      	str	r2, [r3, #32]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80151ba:	68fb      	ldr	r3, [r7, #12]
 80151bc:	681b      	ldr	r3, [r3, #0]
 80151be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80151c0:	69bb      	ldr	r3, [r7, #24]
 80151c2:	e853 3f00 	ldrex	r3, [r3]
 80151c6:	617b      	str	r3, [r7, #20]
   return(result);
 80151c8:	697b      	ldr	r3, [r7, #20]
 80151ca:	f043 0310 	orr.w	r3, r3, #16
 80151ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80151d0:	68fb      	ldr	r3, [r7, #12]
 80151d2:	681b      	ldr	r3, [r3, #0]
 80151d4:	461a      	mov	r2, r3
 80151d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80151d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80151da:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80151dc:	6a39      	ldr	r1, [r7, #32]
 80151de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80151e0:	e841 2300 	strex	r3, r2, [r1]
 80151e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80151e6:	69fb      	ldr	r3, [r7, #28]
 80151e8:	2b00      	cmp	r3, #0
 80151ea:	d1e6      	bne.n	80151ba <HAL_UARTEx_ReceiveToIdle_IT+0x56>
 80151ec:	e002      	b.n	80151f4 <HAL_UARTEx_ReceiveToIdle_IT+0x90>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 80151ee:	2301      	movs	r3, #1
 80151f0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 80151f4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80151f8:	e000      	b.n	80151fc <HAL_UARTEx_ReceiveToIdle_IT+0x98>
  }
  else
  {
    return HAL_BUSY;
 80151fa:	2302      	movs	r3, #2
  }
}
 80151fc:	4618      	mov	r0, r3
 80151fe:	3730      	adds	r7, #48	@ 0x30
 8015200:	46bd      	mov	sp, r7
 8015202:	bd80      	pop	{r7, pc}

08015204 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8015204:	b480      	push	{r7}
 8015206:	b085      	sub	sp, #20
 8015208:	af00      	add	r7, sp, #0
 801520a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801520c:	687b      	ldr	r3, [r7, #4]
 801520e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015210:	2b00      	cmp	r3, #0
 8015212:	d108      	bne.n	8015226 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8015214:	687b      	ldr	r3, [r7, #4]
 8015216:	2201      	movs	r2, #1
 8015218:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 801521c:	687b      	ldr	r3, [r7, #4]
 801521e:	2201      	movs	r2, #1
 8015220:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8015224:	e031      	b.n	801528a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8015226:	2308      	movs	r3, #8
 8015228:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801522a:	2308      	movs	r3, #8
 801522c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801522e:	687b      	ldr	r3, [r7, #4]
 8015230:	681b      	ldr	r3, [r3, #0]
 8015232:	689b      	ldr	r3, [r3, #8]
 8015234:	0e5b      	lsrs	r3, r3, #25
 8015236:	b2db      	uxtb	r3, r3
 8015238:	f003 0307 	and.w	r3, r3, #7
 801523c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	681b      	ldr	r3, [r3, #0]
 8015242:	689b      	ldr	r3, [r3, #8]
 8015244:	0f5b      	lsrs	r3, r3, #29
 8015246:	b2db      	uxtb	r3, r3
 8015248:	f003 0307 	and.w	r3, r3, #7
 801524c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801524e:	7bbb      	ldrb	r3, [r7, #14]
 8015250:	7b3a      	ldrb	r2, [r7, #12]
 8015252:	4911      	ldr	r1, [pc, #68]	@ (8015298 <UARTEx_SetNbDataToProcess+0x94>)
 8015254:	5c8a      	ldrb	r2, [r1, r2]
 8015256:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801525a:	7b3a      	ldrb	r2, [r7, #12]
 801525c:	490f      	ldr	r1, [pc, #60]	@ (801529c <UARTEx_SetNbDataToProcess+0x98>)
 801525e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8015260:	fb93 f3f2 	sdiv	r3, r3, r2
 8015264:	b29a      	uxth	r2, r3
 8015266:	687b      	ldr	r3, [r7, #4]
 8015268:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801526c:	7bfb      	ldrb	r3, [r7, #15]
 801526e:	7b7a      	ldrb	r2, [r7, #13]
 8015270:	4909      	ldr	r1, [pc, #36]	@ (8015298 <UARTEx_SetNbDataToProcess+0x94>)
 8015272:	5c8a      	ldrb	r2, [r1, r2]
 8015274:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8015278:	7b7a      	ldrb	r2, [r7, #13]
 801527a:	4908      	ldr	r1, [pc, #32]	@ (801529c <UARTEx_SetNbDataToProcess+0x98>)
 801527c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801527e:	fb93 f3f2 	sdiv	r3, r3, r2
 8015282:	b29a      	uxth	r2, r3
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 801528a:	bf00      	nop
 801528c:	3714      	adds	r7, #20
 801528e:	46bd      	mov	sp, r7
 8015290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015294:	4770      	bx	lr
 8015296:	bf00      	nop
 8015298:	08024394 	.word	0x08024394
 801529c:	0802439c 	.word	0x0802439c

080152a0 <LL_EXTI_EnableIT_0_31>:
{
 80152a0:	b480      	push	{r7}
 80152a2:	b083      	sub	sp, #12
 80152a4:	af00      	add	r7, sp, #0
 80152a6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80152a8:	4b06      	ldr	r3, [pc, #24]	@ (80152c4 <LL_EXTI_EnableIT_0_31+0x24>)
 80152aa:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80152ae:	4905      	ldr	r1, [pc, #20]	@ (80152c4 <LL_EXTI_EnableIT_0_31+0x24>)
 80152b0:	687b      	ldr	r3, [r7, #4]
 80152b2:	4313      	orrs	r3, r2
 80152b4:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 80152b8:	bf00      	nop
 80152ba:	370c      	adds	r7, #12
 80152bc:	46bd      	mov	sp, r7
 80152be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152c2:	4770      	bx	lr
 80152c4:	44022000 	.word	0x44022000

080152c8 <LL_EXTI_EnableIT_32_63>:
{
 80152c8:	b480      	push	{r7}
 80152ca:	b083      	sub	sp, #12
 80152cc:	af00      	add	r7, sp, #0
 80152ce:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80152d0:	4b06      	ldr	r3, [pc, #24]	@ (80152ec <LL_EXTI_EnableIT_32_63+0x24>)
 80152d2:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80152d6:	4905      	ldr	r1, [pc, #20]	@ (80152ec <LL_EXTI_EnableIT_32_63+0x24>)
 80152d8:	687b      	ldr	r3, [r7, #4]
 80152da:	4313      	orrs	r3, r2
 80152dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80152e0:	bf00      	nop
 80152e2:	370c      	adds	r7, #12
 80152e4:	46bd      	mov	sp, r7
 80152e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152ea:	4770      	bx	lr
 80152ec:	44022000 	.word	0x44022000

080152f0 <LL_EXTI_DisableIT_0_31>:
{
 80152f0:	b480      	push	{r7}
 80152f2:	b083      	sub	sp, #12
 80152f4:	af00      	add	r7, sp, #0
 80152f6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80152f8:	4b07      	ldr	r3, [pc, #28]	@ (8015318 <LL_EXTI_DisableIT_0_31+0x28>)
 80152fa:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80152fe:	687b      	ldr	r3, [r7, #4]
 8015300:	43db      	mvns	r3, r3
 8015302:	4905      	ldr	r1, [pc, #20]	@ (8015318 <LL_EXTI_DisableIT_0_31+0x28>)
 8015304:	4013      	ands	r3, r2
 8015306:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 801530a:	bf00      	nop
 801530c:	370c      	adds	r7, #12
 801530e:	46bd      	mov	sp, r7
 8015310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015314:	4770      	bx	lr
 8015316:	bf00      	nop
 8015318:	44022000 	.word	0x44022000

0801531c <LL_EXTI_DisableIT_32_63>:
{
 801531c:	b480      	push	{r7}
 801531e:	b083      	sub	sp, #12
 8015320:	af00      	add	r7, sp, #0
 8015322:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8015324:	4b07      	ldr	r3, [pc, #28]	@ (8015344 <LL_EXTI_DisableIT_32_63+0x28>)
 8015326:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 801532a:	687b      	ldr	r3, [r7, #4]
 801532c:	43db      	mvns	r3, r3
 801532e:	4905      	ldr	r1, [pc, #20]	@ (8015344 <LL_EXTI_DisableIT_32_63+0x28>)
 8015330:	4013      	ands	r3, r2
 8015332:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8015336:	bf00      	nop
 8015338:	370c      	adds	r7, #12
 801533a:	46bd      	mov	sp, r7
 801533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015340:	4770      	bx	lr
 8015342:	bf00      	nop
 8015344:	44022000 	.word	0x44022000

08015348 <LL_EXTI_EnableEvent_0_31>:
{
 8015348:	b480      	push	{r7}
 801534a:	b083      	sub	sp, #12
 801534c:	af00      	add	r7, sp, #0
 801534e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8015350:	4b06      	ldr	r3, [pc, #24]	@ (801536c <LL_EXTI_EnableEvent_0_31+0x24>)
 8015352:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8015356:	4905      	ldr	r1, [pc, #20]	@ (801536c <LL_EXTI_EnableEvent_0_31+0x24>)
 8015358:	687b      	ldr	r3, [r7, #4]
 801535a:	4313      	orrs	r3, r2
 801535c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
}
 8015360:	bf00      	nop
 8015362:	370c      	adds	r7, #12
 8015364:	46bd      	mov	sp, r7
 8015366:	f85d 7b04 	ldr.w	r7, [sp], #4
 801536a:	4770      	bx	lr
 801536c:	44022000 	.word	0x44022000

08015370 <LL_EXTI_EnableEvent_32_63>:
{
 8015370:	b480      	push	{r7}
 8015372:	b083      	sub	sp, #12
 8015374:	af00      	add	r7, sp, #0
 8015376:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8015378:	4b06      	ldr	r3, [pc, #24]	@ (8015394 <LL_EXTI_EnableEvent_32_63+0x24>)
 801537a:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 801537e:	4905      	ldr	r1, [pc, #20]	@ (8015394 <LL_EXTI_EnableEvent_32_63+0x24>)
 8015380:	687b      	ldr	r3, [r7, #4]
 8015382:	4313      	orrs	r3, r2
 8015384:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8015388:	bf00      	nop
 801538a:	370c      	adds	r7, #12
 801538c:	46bd      	mov	sp, r7
 801538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015392:	4770      	bx	lr
 8015394:	44022000 	.word	0x44022000

08015398 <LL_EXTI_DisableEvent_0_31>:
{
 8015398:	b480      	push	{r7}
 801539a:	b083      	sub	sp, #12
 801539c:	af00      	add	r7, sp, #0
 801539e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80153a0:	4b07      	ldr	r3, [pc, #28]	@ (80153c0 <LL_EXTI_DisableEvent_0_31+0x28>)
 80153a2:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80153a6:	687b      	ldr	r3, [r7, #4]
 80153a8:	43db      	mvns	r3, r3
 80153aa:	4905      	ldr	r1, [pc, #20]	@ (80153c0 <LL_EXTI_DisableEvent_0_31+0x28>)
 80153ac:	4013      	ands	r3, r2
 80153ae:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
}
 80153b2:	bf00      	nop
 80153b4:	370c      	adds	r7, #12
 80153b6:	46bd      	mov	sp, r7
 80153b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153bc:	4770      	bx	lr
 80153be:	bf00      	nop
 80153c0:	44022000 	.word	0x44022000

080153c4 <LL_EXTI_DisableEvent_32_63>:
{
 80153c4:	b480      	push	{r7}
 80153c6:	b083      	sub	sp, #12
 80153c8:	af00      	add	r7, sp, #0
 80153ca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 80153cc:	4b07      	ldr	r3, [pc, #28]	@ (80153ec <LL_EXTI_DisableEvent_32_63+0x28>)
 80153ce:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 80153d2:	687b      	ldr	r3, [r7, #4]
 80153d4:	43db      	mvns	r3, r3
 80153d6:	4905      	ldr	r1, [pc, #20]	@ (80153ec <LL_EXTI_DisableEvent_32_63+0x28>)
 80153d8:	4013      	ands	r3, r2
 80153da:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 80153de:	bf00      	nop
 80153e0:	370c      	adds	r7, #12
 80153e2:	46bd      	mov	sp, r7
 80153e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153e8:	4770      	bx	lr
 80153ea:	bf00      	nop
 80153ec:	44022000 	.word	0x44022000

080153f0 <LL_EXTI_EnableRisingTrig_0_31>:
{
 80153f0:	b480      	push	{r7}
 80153f2:	b083      	sub	sp, #12
 80153f4:	af00      	add	r7, sp, #0
 80153f6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80153f8:	4b05      	ldr	r3, [pc, #20]	@ (8015410 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80153fa:	681a      	ldr	r2, [r3, #0]
 80153fc:	4904      	ldr	r1, [pc, #16]	@ (8015410 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80153fe:	687b      	ldr	r3, [r7, #4]
 8015400:	4313      	orrs	r3, r2
 8015402:	600b      	str	r3, [r1, #0]
}
 8015404:	bf00      	nop
 8015406:	370c      	adds	r7, #12
 8015408:	46bd      	mov	sp, r7
 801540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801540e:	4770      	bx	lr
 8015410:	44022000 	.word	0x44022000

08015414 <LL_EXTI_EnableRisingTrig_32_63>:
{
 8015414:	b480      	push	{r7}
 8015416:	b083      	sub	sp, #12
 8015418:	af00      	add	r7, sp, #0
 801541a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 801541c:	4b05      	ldr	r3, [pc, #20]	@ (8015434 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 801541e:	6a1a      	ldr	r2, [r3, #32]
 8015420:	4904      	ldr	r1, [pc, #16]	@ (8015434 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8015422:	687b      	ldr	r3, [r7, #4]
 8015424:	4313      	orrs	r3, r2
 8015426:	620b      	str	r3, [r1, #32]
}
 8015428:	bf00      	nop
 801542a:	370c      	adds	r7, #12
 801542c:	46bd      	mov	sp, r7
 801542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015432:	4770      	bx	lr
 8015434:	44022000 	.word	0x44022000

08015438 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8015438:	b480      	push	{r7}
 801543a:	b083      	sub	sp, #12
 801543c:	af00      	add	r7, sp, #0
 801543e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8015440:	4b06      	ldr	r3, [pc, #24]	@ (801545c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8015442:	681a      	ldr	r2, [r3, #0]
 8015444:	687b      	ldr	r3, [r7, #4]
 8015446:	43db      	mvns	r3, r3
 8015448:	4904      	ldr	r1, [pc, #16]	@ (801545c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 801544a:	4013      	ands	r3, r2
 801544c:	600b      	str	r3, [r1, #0]
}
 801544e:	bf00      	nop
 8015450:	370c      	adds	r7, #12
 8015452:	46bd      	mov	sp, r7
 8015454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015458:	4770      	bx	lr
 801545a:	bf00      	nop
 801545c:	44022000 	.word	0x44022000

08015460 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8015460:	b480      	push	{r7}
 8015462:	b083      	sub	sp, #12
 8015464:	af00      	add	r7, sp, #0
 8015466:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8015468:	4b06      	ldr	r3, [pc, #24]	@ (8015484 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 801546a:	6a1a      	ldr	r2, [r3, #32]
 801546c:	687b      	ldr	r3, [r7, #4]
 801546e:	43db      	mvns	r3, r3
 8015470:	4904      	ldr	r1, [pc, #16]	@ (8015484 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8015472:	4013      	ands	r3, r2
 8015474:	620b      	str	r3, [r1, #32]
}
 8015476:	bf00      	nop
 8015478:	370c      	adds	r7, #12
 801547a:	46bd      	mov	sp, r7
 801547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015480:	4770      	bx	lr
 8015482:	bf00      	nop
 8015484:	44022000 	.word	0x44022000

08015488 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8015488:	b480      	push	{r7}
 801548a:	b083      	sub	sp, #12
 801548c:	af00      	add	r7, sp, #0
 801548e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8015490:	4b05      	ldr	r3, [pc, #20]	@ (80154a8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8015492:	685a      	ldr	r2, [r3, #4]
 8015494:	4904      	ldr	r1, [pc, #16]	@ (80154a8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8015496:	687b      	ldr	r3, [r7, #4]
 8015498:	4313      	orrs	r3, r2
 801549a:	604b      	str	r3, [r1, #4]
}
 801549c:	bf00      	nop
 801549e:	370c      	adds	r7, #12
 80154a0:	46bd      	mov	sp, r7
 80154a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154a6:	4770      	bx	lr
 80154a8:	44022000 	.word	0x44022000

080154ac <LL_EXTI_EnableFallingTrig_32_63>:
{
 80154ac:	b480      	push	{r7}
 80154ae:	b083      	sub	sp, #12
 80154b0:	af00      	add	r7, sp, #0
 80154b2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 80154b4:	4b05      	ldr	r3, [pc, #20]	@ (80154cc <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80154b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80154b8:	4904      	ldr	r1, [pc, #16]	@ (80154cc <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	4313      	orrs	r3, r2
 80154be:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80154c0:	bf00      	nop
 80154c2:	370c      	adds	r7, #12
 80154c4:	46bd      	mov	sp, r7
 80154c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154ca:	4770      	bx	lr
 80154cc:	44022000 	.word	0x44022000

080154d0 <LL_EXTI_DisableFallingTrig_0_31>:
{
 80154d0:	b480      	push	{r7}
 80154d2:	b083      	sub	sp, #12
 80154d4:	af00      	add	r7, sp, #0
 80154d6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80154d8:	4b06      	ldr	r3, [pc, #24]	@ (80154f4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80154da:	685a      	ldr	r2, [r3, #4]
 80154dc:	687b      	ldr	r3, [r7, #4]
 80154de:	43db      	mvns	r3, r3
 80154e0:	4904      	ldr	r1, [pc, #16]	@ (80154f4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80154e2:	4013      	ands	r3, r2
 80154e4:	604b      	str	r3, [r1, #4]
}
 80154e6:	bf00      	nop
 80154e8:	370c      	adds	r7, #12
 80154ea:	46bd      	mov	sp, r7
 80154ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154f0:	4770      	bx	lr
 80154f2:	bf00      	nop
 80154f4:	44022000 	.word	0x44022000

080154f8 <LL_EXTI_DisableFallingTrig_32_63>:
{
 80154f8:	b480      	push	{r7}
 80154fa:	b083      	sub	sp, #12
 80154fc:	af00      	add	r7, sp, #0
 80154fe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8015500:	4b06      	ldr	r3, [pc, #24]	@ (801551c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8015502:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015504:	687b      	ldr	r3, [r7, #4]
 8015506:	43db      	mvns	r3, r3
 8015508:	4904      	ldr	r1, [pc, #16]	@ (801551c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 801550a:	4013      	ands	r3, r2
 801550c:	624b      	str	r3, [r1, #36]	@ 0x24
}
 801550e:	bf00      	nop
 8015510:	370c      	adds	r7, #12
 8015512:	46bd      	mov	sp, r7
 8015514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015518:	4770      	bx	lr
 801551a:	bf00      	nop
 801551c:	44022000 	.word	0x44022000

08015520 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8015520:	b580      	push	{r7, lr}
 8015522:	b084      	sub	sp, #16
 8015524:	af00      	add	r7, sp, #0
 8015526:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8015528:	2300      	movs	r3, #0
 801552a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 801552c:	687b      	ldr	r3, [r7, #4]
 801552e:	7a1b      	ldrb	r3, [r3, #8]
 8015530:	2b00      	cmp	r3, #0
 8015532:	f000 80cc 	beq.w	80156ce <LL_EXTI_Init+0x1ae>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8015536:	687b      	ldr	r3, [r7, #4]
 8015538:	681b      	ldr	r3, [r3, #0]
 801553a:	2b00      	cmp	r3, #0
 801553c:	d061      	beq.n	8015602 <LL_EXTI_Init+0xe2>
    {
      switch (EXTI_InitStruct->Mode)
 801553e:	687b      	ldr	r3, [r7, #4]
 8015540:	7a5b      	ldrb	r3, [r3, #9]
 8015542:	2b02      	cmp	r3, #2
 8015544:	d01c      	beq.n	8015580 <LL_EXTI_Init+0x60>
 8015546:	2b02      	cmp	r3, #2
 8015548:	dc25      	bgt.n	8015596 <LL_EXTI_Init+0x76>
 801554a:	2b00      	cmp	r3, #0
 801554c:	d002      	beq.n	8015554 <LL_EXTI_Init+0x34>
 801554e:	2b01      	cmp	r3, #1
 8015550:	d00b      	beq.n	801556a <LL_EXTI_Init+0x4a>
 8015552:	e020      	b.n	8015596 <LL_EXTI_Init+0x76>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8015554:	687b      	ldr	r3, [r7, #4]
 8015556:	681b      	ldr	r3, [r3, #0]
 8015558:	4618      	mov	r0, r3
 801555a:	f7ff ff1d 	bl	8015398 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	681b      	ldr	r3, [r3, #0]
 8015562:	4618      	mov	r0, r3
 8015564:	f7ff fe9c 	bl	80152a0 <LL_EXTI_EnableIT_0_31>
          break;
 8015568:	e018      	b.n	801559c <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 801556a:	687b      	ldr	r3, [r7, #4]
 801556c:	681b      	ldr	r3, [r3, #0]
 801556e:	4618      	mov	r0, r3
 8015570:	f7ff febe 	bl	80152f0 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8015574:	687b      	ldr	r3, [r7, #4]
 8015576:	681b      	ldr	r3, [r3, #0]
 8015578:	4618      	mov	r0, r3
 801557a:	f7ff fee5 	bl	8015348 <LL_EXTI_EnableEvent_0_31>
          break;
 801557e:	e00d      	b.n	801559c <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8015580:	687b      	ldr	r3, [r7, #4]
 8015582:	681b      	ldr	r3, [r3, #0]
 8015584:	4618      	mov	r0, r3
 8015586:	f7ff fe8b 	bl	80152a0 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 801558a:	687b      	ldr	r3, [r7, #4]
 801558c:	681b      	ldr	r3, [r3, #0]
 801558e:	4618      	mov	r0, r3
 8015590:	f7ff feda 	bl	8015348 <LL_EXTI_EnableEvent_0_31>
          break;
 8015594:	e002      	b.n	801559c <LL_EXTI_Init+0x7c>
        default:
          status = ERROR;
 8015596:	2301      	movs	r3, #1
 8015598:	73fb      	strb	r3, [r7, #15]
          break;
 801559a:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 801559c:	687b      	ldr	r3, [r7, #4]
 801559e:	7a9b      	ldrb	r3, [r3, #10]
 80155a0:	2b00      	cmp	r3, #0
 80155a2:	d02e      	beq.n	8015602 <LL_EXTI_Init+0xe2>
      {
        switch (EXTI_InitStruct->Trigger)
 80155a4:	687b      	ldr	r3, [r7, #4]
 80155a6:	7a9b      	ldrb	r3, [r3, #10]
 80155a8:	2b03      	cmp	r3, #3
 80155aa:	d01c      	beq.n	80155e6 <LL_EXTI_Init+0xc6>
 80155ac:	2b03      	cmp	r3, #3
 80155ae:	dc25      	bgt.n	80155fc <LL_EXTI_Init+0xdc>
 80155b0:	2b01      	cmp	r3, #1
 80155b2:	d002      	beq.n	80155ba <LL_EXTI_Init+0x9a>
 80155b4:	2b02      	cmp	r3, #2
 80155b6:	d00b      	beq.n	80155d0 <LL_EXTI_Init+0xb0>
 80155b8:	e020      	b.n	80155fc <LL_EXTI_Init+0xdc>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80155ba:	687b      	ldr	r3, [r7, #4]
 80155bc:	681b      	ldr	r3, [r3, #0]
 80155be:	4618      	mov	r0, r3
 80155c0:	f7ff ff86 	bl	80154d0 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80155c4:	687b      	ldr	r3, [r7, #4]
 80155c6:	681b      	ldr	r3, [r3, #0]
 80155c8:	4618      	mov	r0, r3
 80155ca:	f7ff ff11 	bl	80153f0 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 80155ce:	e018      	b.n	8015602 <LL_EXTI_Init+0xe2>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80155d0:	687b      	ldr	r3, [r7, #4]
 80155d2:	681b      	ldr	r3, [r3, #0]
 80155d4:	4618      	mov	r0, r3
 80155d6:	f7ff ff2f 	bl	8015438 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80155da:	687b      	ldr	r3, [r7, #4]
 80155dc:	681b      	ldr	r3, [r3, #0]
 80155de:	4618      	mov	r0, r3
 80155e0:	f7ff ff52 	bl	8015488 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80155e4:	e00d      	b.n	8015602 <LL_EXTI_Init+0xe2>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80155e6:	687b      	ldr	r3, [r7, #4]
 80155e8:	681b      	ldr	r3, [r3, #0]
 80155ea:	4618      	mov	r0, r3
 80155ec:	f7ff ff00 	bl	80153f0 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	681b      	ldr	r3, [r3, #0]
 80155f4:	4618      	mov	r0, r3
 80155f6:	f7ff ff47 	bl	8015488 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80155fa:	e002      	b.n	8015602 <LL_EXTI_Init+0xe2>
          default:
            status = ERROR;
 80155fc:	2301      	movs	r3, #1
 80155fe:	73fb      	strb	r3, [r7, #15]
            break;
 8015600:	bf00      	nop
        }
      }
    }

    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8015602:	687b      	ldr	r3, [r7, #4]
 8015604:	685b      	ldr	r3, [r3, #4]
 8015606:	2b00      	cmp	r3, #0
 8015608:	d075      	beq.n	80156f6 <LL_EXTI_Init+0x1d6>
    {
      switch (EXTI_InitStruct->Mode)
 801560a:	687b      	ldr	r3, [r7, #4]
 801560c:	7a5b      	ldrb	r3, [r3, #9]
 801560e:	2b02      	cmp	r3, #2
 8015610:	d01c      	beq.n	801564c <LL_EXTI_Init+0x12c>
 8015612:	2b02      	cmp	r3, #2
 8015614:	dc25      	bgt.n	8015662 <LL_EXTI_Init+0x142>
 8015616:	2b00      	cmp	r3, #0
 8015618:	d002      	beq.n	8015620 <LL_EXTI_Init+0x100>
 801561a:	2b01      	cmp	r3, #1
 801561c:	d00b      	beq.n	8015636 <LL_EXTI_Init+0x116>
 801561e:	e020      	b.n	8015662 <LL_EXTI_Init+0x142>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8015620:	687b      	ldr	r3, [r7, #4]
 8015622:	685b      	ldr	r3, [r3, #4]
 8015624:	4618      	mov	r0, r3
 8015626:	f7ff fecd 	bl	80153c4 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 801562a:	687b      	ldr	r3, [r7, #4]
 801562c:	685b      	ldr	r3, [r3, #4]
 801562e:	4618      	mov	r0, r3
 8015630:	f7ff fe4a 	bl	80152c8 <LL_EXTI_EnableIT_32_63>
          break;
 8015634:	e018      	b.n	8015668 <LL_EXTI_Init+0x148>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8015636:	687b      	ldr	r3, [r7, #4]
 8015638:	685b      	ldr	r3, [r3, #4]
 801563a:	4618      	mov	r0, r3
 801563c:	f7ff fe6e 	bl	801531c <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8015640:	687b      	ldr	r3, [r7, #4]
 8015642:	685b      	ldr	r3, [r3, #4]
 8015644:	4618      	mov	r0, r3
 8015646:	f7ff fe93 	bl	8015370 <LL_EXTI_EnableEvent_32_63>
          break;
 801564a:	e00d      	b.n	8015668 <LL_EXTI_Init+0x148>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 801564c:	687b      	ldr	r3, [r7, #4]
 801564e:	685b      	ldr	r3, [r3, #4]
 8015650:	4618      	mov	r0, r3
 8015652:	f7ff fe39 	bl	80152c8 <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8015656:	687b      	ldr	r3, [r7, #4]
 8015658:	685b      	ldr	r3, [r3, #4]
 801565a:	4618      	mov	r0, r3
 801565c:	f7ff fe88 	bl	8015370 <LL_EXTI_EnableEvent_32_63>
          break;
 8015660:	e002      	b.n	8015668 <LL_EXTI_Init+0x148>
        default:
          status = ERROR;
 8015662:	2301      	movs	r3, #1
 8015664:	73fb      	strb	r3, [r7, #15]
          break;
 8015666:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8015668:	687b      	ldr	r3, [r7, #4]
 801566a:	7a9b      	ldrb	r3, [r3, #10]
 801566c:	2b00      	cmp	r3, #0
 801566e:	d042      	beq.n	80156f6 <LL_EXTI_Init+0x1d6>
      {
        switch (EXTI_InitStruct->Trigger)
 8015670:	687b      	ldr	r3, [r7, #4]
 8015672:	7a9b      	ldrb	r3, [r3, #10]
 8015674:	2b03      	cmp	r3, #3
 8015676:	d01c      	beq.n	80156b2 <LL_EXTI_Init+0x192>
 8015678:	2b03      	cmp	r3, #3
 801567a:	dc25      	bgt.n	80156c8 <LL_EXTI_Init+0x1a8>
 801567c:	2b01      	cmp	r3, #1
 801567e:	d002      	beq.n	8015686 <LL_EXTI_Init+0x166>
 8015680:	2b02      	cmp	r3, #2
 8015682:	d00b      	beq.n	801569c <LL_EXTI_Init+0x17c>
 8015684:	e020      	b.n	80156c8 <LL_EXTI_Init+0x1a8>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8015686:	687b      	ldr	r3, [r7, #4]
 8015688:	685b      	ldr	r3, [r3, #4]
 801568a:	4618      	mov	r0, r3
 801568c:	f7ff ff34 	bl	80154f8 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8015690:	687b      	ldr	r3, [r7, #4]
 8015692:	685b      	ldr	r3, [r3, #4]
 8015694:	4618      	mov	r0, r3
 8015696:	f7ff febd 	bl	8015414 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 801569a:	e02c      	b.n	80156f6 <LL_EXTI_Init+0x1d6>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 801569c:	687b      	ldr	r3, [r7, #4]
 801569e:	685b      	ldr	r3, [r3, #4]
 80156a0:	4618      	mov	r0, r3
 80156a2:	f7ff fedd 	bl	8015460 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80156a6:	687b      	ldr	r3, [r7, #4]
 80156a8:	685b      	ldr	r3, [r3, #4]
 80156aa:	4618      	mov	r0, r3
 80156ac:	f7ff fefe 	bl	80154ac <LL_EXTI_EnableFallingTrig_32_63>
            break;
 80156b0:	e021      	b.n	80156f6 <LL_EXTI_Init+0x1d6>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80156b2:	687b      	ldr	r3, [r7, #4]
 80156b4:	685b      	ldr	r3, [r3, #4]
 80156b6:	4618      	mov	r0, r3
 80156b8:	f7ff feac 	bl	8015414 <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80156bc:	687b      	ldr	r3, [r7, #4]
 80156be:	685b      	ldr	r3, [r3, #4]
 80156c0:	4618      	mov	r0, r3
 80156c2:	f7ff fef3 	bl	80154ac <LL_EXTI_EnableFallingTrig_32_63>
            break;
 80156c6:	e016      	b.n	80156f6 <LL_EXTI_Init+0x1d6>
          default:
            status = ERROR;
 80156c8:	2301      	movs	r3, #1
 80156ca:	73fb      	strb	r3, [r7, #15]
            break;
 80156cc:	e013      	b.n	80156f6 <LL_EXTI_Init+0x1d6>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80156ce:	687b      	ldr	r3, [r7, #4]
 80156d0:	681b      	ldr	r3, [r3, #0]
 80156d2:	4618      	mov	r0, r3
 80156d4:	f7ff fe0c 	bl	80152f0 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	681b      	ldr	r3, [r3, #0]
 80156dc:	4618      	mov	r0, r3
 80156de:	f7ff fe5b 	bl	8015398 <LL_EXTI_DisableEvent_0_31>

    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 80156e2:	687b      	ldr	r3, [r7, #4]
 80156e4:	685b      	ldr	r3, [r3, #4]
 80156e6:	4618      	mov	r0, r3
 80156e8:	f7ff fe18 	bl	801531c <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	685b      	ldr	r3, [r3, #4]
 80156f0:	4618      	mov	r0, r3
 80156f2:	f7ff fe67 	bl	80153c4 <LL_EXTI_DisableEvent_32_63>
  }
  return status;
 80156f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80156f8:	4618      	mov	r0, r3
 80156fa:	3710      	adds	r7, #16
 80156fc:	46bd      	mov	sp, r7
 80156fe:	bd80      	pop	{r7, pc}

08015700 <LL_GPIO_SetPinMode>:
{
 8015700:	b480      	push	{r7}
 8015702:	b08b      	sub	sp, #44	@ 0x2c
 8015704:	af00      	add	r7, sp, #0
 8015706:	60f8      	str	r0, [r7, #12]
 8015708:	60b9      	str	r1, [r7, #8]
 801570a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * GPIO_MODER_MODE1_Pos)),
 801570c:	68fb      	ldr	r3, [r7, #12]
 801570e:	681a      	ldr	r2, [r3, #0]
 8015710:	68bb      	ldr	r3, [r7, #8]
 8015712:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8015714:	697b      	ldr	r3, [r7, #20]
 8015716:	fa93 f3a3 	rbit	r3, r3
 801571a:	613b      	str	r3, [r7, #16]
  return result;
 801571c:	693b      	ldr	r3, [r7, #16]
 801571e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8015720:	69bb      	ldr	r3, [r7, #24]
 8015722:	2b00      	cmp	r3, #0
 8015724:	d101      	bne.n	801572a <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8015726:	2320      	movs	r3, #32
 8015728:	e003      	b.n	8015732 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 801572a:	69bb      	ldr	r3, [r7, #24]
 801572c:	fab3 f383 	clz	r3, r3
 8015730:	b2db      	uxtb	r3, r3
 8015732:	005b      	lsls	r3, r3, #1
 8015734:	2103      	movs	r1, #3
 8015736:	fa01 f303 	lsl.w	r3, r1, r3
 801573a:	43db      	mvns	r3, r3
 801573c:	401a      	ands	r2, r3
 801573e:	68bb      	ldr	r3, [r7, #8]
 8015740:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8015742:	6a3b      	ldr	r3, [r7, #32]
 8015744:	fa93 f3a3 	rbit	r3, r3
 8015748:	61fb      	str	r3, [r7, #28]
  return result;
 801574a:	69fb      	ldr	r3, [r7, #28]
 801574c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 801574e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015750:	2b00      	cmp	r3, #0
 8015752:	d101      	bne.n	8015758 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8015754:	2320      	movs	r3, #32
 8015756:	e003      	b.n	8015760 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8015758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801575a:	fab3 f383 	clz	r3, r3
 801575e:	b2db      	uxtb	r3, r3
 8015760:	005b      	lsls	r3, r3, #1
 8015762:	6879      	ldr	r1, [r7, #4]
 8015764:	fa01 f303 	lsl.w	r3, r1, r3
 8015768:	431a      	orrs	r2, r3
 801576a:	68fb      	ldr	r3, [r7, #12]
 801576c:	601a      	str	r2, [r3, #0]
}
 801576e:	bf00      	nop
 8015770:	372c      	adds	r7, #44	@ 0x2c
 8015772:	46bd      	mov	sp, r7
 8015774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015778:	4770      	bx	lr

0801577a <LL_GPIO_SetPinOutputType>:
{
 801577a:	b480      	push	{r7}
 801577c:	b085      	sub	sp, #20
 801577e:	af00      	add	r7, sp, #0
 8015780:	60f8      	str	r0, [r7, #12]
 8015782:	60b9      	str	r1, [r7, #8]
 8015784:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8015786:	68fb      	ldr	r3, [r7, #12]
 8015788:	685a      	ldr	r2, [r3, #4]
 801578a:	68bb      	ldr	r3, [r7, #8]
 801578c:	43db      	mvns	r3, r3
 801578e:	401a      	ands	r2, r3
 8015790:	68bb      	ldr	r3, [r7, #8]
 8015792:	6879      	ldr	r1, [r7, #4]
 8015794:	fb01 f303 	mul.w	r3, r1, r3
 8015798:	431a      	orrs	r2, r3
 801579a:	68fb      	ldr	r3, [r7, #12]
 801579c:	605a      	str	r2, [r3, #4]
}
 801579e:	bf00      	nop
 80157a0:	3714      	adds	r7, #20
 80157a2:	46bd      	mov	sp, r7
 80157a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157a8:	4770      	bx	lr

080157aa <LL_GPIO_SetPinSpeed>:
{
 80157aa:	b480      	push	{r7}
 80157ac:	b08b      	sub	sp, #44	@ 0x2c
 80157ae:	af00      	add	r7, sp, #0
 80157b0:	60f8      	str	r0, [r7, #12]
 80157b2:	60b9      	str	r1, [r7, #8]
 80157b4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * GPIO_OSPEEDR_OSPEED1_Pos)),
 80157b6:	68fb      	ldr	r3, [r7, #12]
 80157b8:	689a      	ldr	r2, [r3, #8]
 80157ba:	68bb      	ldr	r3, [r7, #8]
 80157bc:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80157be:	697b      	ldr	r3, [r7, #20]
 80157c0:	fa93 f3a3 	rbit	r3, r3
 80157c4:	613b      	str	r3, [r7, #16]
  return result;
 80157c6:	693b      	ldr	r3, [r7, #16]
 80157c8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80157ca:	69bb      	ldr	r3, [r7, #24]
 80157cc:	2b00      	cmp	r3, #0
 80157ce:	d101      	bne.n	80157d4 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80157d0:	2320      	movs	r3, #32
 80157d2:	e003      	b.n	80157dc <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80157d4:	69bb      	ldr	r3, [r7, #24]
 80157d6:	fab3 f383 	clz	r3, r3
 80157da:	b2db      	uxtb	r3, r3
 80157dc:	005b      	lsls	r3, r3, #1
 80157de:	2103      	movs	r1, #3
 80157e0:	fa01 f303 	lsl.w	r3, r1, r3
 80157e4:	43db      	mvns	r3, r3
 80157e6:	401a      	ands	r2, r3
 80157e8:	68bb      	ldr	r3, [r7, #8]
 80157ea:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80157ec:	6a3b      	ldr	r3, [r7, #32]
 80157ee:	fa93 f3a3 	rbit	r3, r3
 80157f2:	61fb      	str	r3, [r7, #28]
  return result;
 80157f4:	69fb      	ldr	r3, [r7, #28]
 80157f6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80157f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80157fa:	2b00      	cmp	r3, #0
 80157fc:	d101      	bne.n	8015802 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80157fe:	2320      	movs	r3, #32
 8015800:	e003      	b.n	801580a <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8015802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015804:	fab3 f383 	clz	r3, r3
 8015808:	b2db      	uxtb	r3, r3
 801580a:	005b      	lsls	r3, r3, #1
 801580c:	6879      	ldr	r1, [r7, #4]
 801580e:	fa01 f303 	lsl.w	r3, r1, r3
 8015812:	431a      	orrs	r2, r3
 8015814:	68fb      	ldr	r3, [r7, #12]
 8015816:	609a      	str	r2, [r3, #8]
}
 8015818:	bf00      	nop
 801581a:	372c      	adds	r7, #44	@ 0x2c
 801581c:	46bd      	mov	sp, r7
 801581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015822:	4770      	bx	lr

08015824 <LL_GPIO_SetPinPull>:
{
 8015824:	b480      	push	{r7}
 8015826:	b08b      	sub	sp, #44	@ 0x2c
 8015828:	af00      	add	r7, sp, #0
 801582a:	60f8      	str	r0, [r7, #12]
 801582c:	60b9      	str	r1, [r7, #8]
 801582e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * GPIO_PUPDR_PUPD1_Pos)),
 8015830:	68fb      	ldr	r3, [r7, #12]
 8015832:	68da      	ldr	r2, [r3, #12]
 8015834:	68bb      	ldr	r3, [r7, #8]
 8015836:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8015838:	697b      	ldr	r3, [r7, #20]
 801583a:	fa93 f3a3 	rbit	r3, r3
 801583e:	613b      	str	r3, [r7, #16]
  return result;
 8015840:	693b      	ldr	r3, [r7, #16]
 8015842:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8015844:	69bb      	ldr	r3, [r7, #24]
 8015846:	2b00      	cmp	r3, #0
 8015848:	d101      	bne.n	801584e <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 801584a:	2320      	movs	r3, #32
 801584c:	e003      	b.n	8015856 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 801584e:	69bb      	ldr	r3, [r7, #24]
 8015850:	fab3 f383 	clz	r3, r3
 8015854:	b2db      	uxtb	r3, r3
 8015856:	005b      	lsls	r3, r3, #1
 8015858:	2103      	movs	r1, #3
 801585a:	fa01 f303 	lsl.w	r3, r1, r3
 801585e:	43db      	mvns	r3, r3
 8015860:	401a      	ands	r2, r3
 8015862:	68bb      	ldr	r3, [r7, #8]
 8015864:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8015866:	6a3b      	ldr	r3, [r7, #32]
 8015868:	fa93 f3a3 	rbit	r3, r3
 801586c:	61fb      	str	r3, [r7, #28]
  return result;
 801586e:	69fb      	ldr	r3, [r7, #28]
 8015870:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8015872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015874:	2b00      	cmp	r3, #0
 8015876:	d101      	bne.n	801587c <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8015878:	2320      	movs	r3, #32
 801587a:	e003      	b.n	8015884 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 801587c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801587e:	fab3 f383 	clz	r3, r3
 8015882:	b2db      	uxtb	r3, r3
 8015884:	005b      	lsls	r3, r3, #1
 8015886:	6879      	ldr	r1, [r7, #4]
 8015888:	fa01 f303 	lsl.w	r3, r1, r3
 801588c:	431a      	orrs	r2, r3
 801588e:	68fb      	ldr	r3, [r7, #12]
 8015890:	60da      	str	r2, [r3, #12]
}
 8015892:	bf00      	nop
 8015894:	372c      	adds	r7, #44	@ 0x2c
 8015896:	46bd      	mov	sp, r7
 8015898:	f85d 7b04 	ldr.w	r7, [sp], #4
 801589c:	4770      	bx	lr

0801589e <LL_GPIO_SetAFPin_0_7>:
{
 801589e:	b480      	push	{r7}
 80158a0:	b08b      	sub	sp, #44	@ 0x2c
 80158a2:	af00      	add	r7, sp, #0
 80158a4:	60f8      	str	r0, [r7, #12]
 80158a6:	60b9      	str	r1, [r7, #8]
 80158a8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * GPIO_AFRL_AFSEL1_Pos)),
 80158aa:	68fb      	ldr	r3, [r7, #12]
 80158ac:	6a1a      	ldr	r2, [r3, #32]
 80158ae:	68bb      	ldr	r3, [r7, #8]
 80158b0:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80158b2:	697b      	ldr	r3, [r7, #20]
 80158b4:	fa93 f3a3 	rbit	r3, r3
 80158b8:	613b      	str	r3, [r7, #16]
  return result;
 80158ba:	693b      	ldr	r3, [r7, #16]
 80158bc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80158be:	69bb      	ldr	r3, [r7, #24]
 80158c0:	2b00      	cmp	r3, #0
 80158c2:	d101      	bne.n	80158c8 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80158c4:	2320      	movs	r3, #32
 80158c6:	e003      	b.n	80158d0 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80158c8:	69bb      	ldr	r3, [r7, #24]
 80158ca:	fab3 f383 	clz	r3, r3
 80158ce:	b2db      	uxtb	r3, r3
 80158d0:	009b      	lsls	r3, r3, #2
 80158d2:	210f      	movs	r1, #15
 80158d4:	fa01 f303 	lsl.w	r3, r1, r3
 80158d8:	43db      	mvns	r3, r3
 80158da:	401a      	ands	r2, r3
 80158dc:	68bb      	ldr	r3, [r7, #8]
 80158de:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80158e0:	6a3b      	ldr	r3, [r7, #32]
 80158e2:	fa93 f3a3 	rbit	r3, r3
 80158e6:	61fb      	str	r3, [r7, #28]
  return result;
 80158e8:	69fb      	ldr	r3, [r7, #28]
 80158ea:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80158ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80158ee:	2b00      	cmp	r3, #0
 80158f0:	d101      	bne.n	80158f6 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80158f2:	2320      	movs	r3, #32
 80158f4:	e003      	b.n	80158fe <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80158f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80158f8:	fab3 f383 	clz	r3, r3
 80158fc:	b2db      	uxtb	r3, r3
 80158fe:	009b      	lsls	r3, r3, #2
 8015900:	6879      	ldr	r1, [r7, #4]
 8015902:	fa01 f303 	lsl.w	r3, r1, r3
 8015906:	431a      	orrs	r2, r3
 8015908:	68fb      	ldr	r3, [r7, #12]
 801590a:	621a      	str	r2, [r3, #32]
}
 801590c:	bf00      	nop
 801590e:	372c      	adds	r7, #44	@ 0x2c
 8015910:	46bd      	mov	sp, r7
 8015912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015916:	4770      	bx	lr

08015918 <LL_GPIO_SetAFPin_8_15>:
{
 8015918:	b480      	push	{r7}
 801591a:	b08b      	sub	sp, #44	@ 0x2c
 801591c:	af00      	add	r7, sp, #0
 801591e:	60f8      	str	r0, [r7, #12]
 8015920:	60b9      	str	r1, [r7, #8]
 8015922:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * GPIO_AFRH_AFSEL9_Pos)),
 8015924:	68fb      	ldr	r3, [r7, #12]
 8015926:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015928:	68bb      	ldr	r3, [r7, #8]
 801592a:	0a1b      	lsrs	r3, r3, #8
 801592c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801592e:	697b      	ldr	r3, [r7, #20]
 8015930:	fa93 f3a3 	rbit	r3, r3
 8015934:	613b      	str	r3, [r7, #16]
  return result;
 8015936:	693b      	ldr	r3, [r7, #16]
 8015938:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801593a:	69bb      	ldr	r3, [r7, #24]
 801593c:	2b00      	cmp	r3, #0
 801593e:	d101      	bne.n	8015944 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8015940:	2320      	movs	r3, #32
 8015942:	e003      	b.n	801594c <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8015944:	69bb      	ldr	r3, [r7, #24]
 8015946:	fab3 f383 	clz	r3, r3
 801594a:	b2db      	uxtb	r3, r3
 801594c:	009b      	lsls	r3, r3, #2
 801594e:	210f      	movs	r1, #15
 8015950:	fa01 f303 	lsl.w	r3, r1, r3
 8015954:	43db      	mvns	r3, r3
 8015956:	401a      	ands	r2, r3
 8015958:	68bb      	ldr	r3, [r7, #8]
 801595a:	0a1b      	lsrs	r3, r3, #8
 801595c:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801595e:	6a3b      	ldr	r3, [r7, #32]
 8015960:	fa93 f3a3 	rbit	r3, r3
 8015964:	61fb      	str	r3, [r7, #28]
  return result;
 8015966:	69fb      	ldr	r3, [r7, #28]
 8015968:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 801596a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801596c:	2b00      	cmp	r3, #0
 801596e:	d101      	bne.n	8015974 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8015970:	2320      	movs	r3, #32
 8015972:	e003      	b.n	801597c <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8015974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015976:	fab3 f383 	clz	r3, r3
 801597a:	b2db      	uxtb	r3, r3
 801597c:	009b      	lsls	r3, r3, #2
 801597e:	6879      	ldr	r1, [r7, #4]
 8015980:	fa01 f303 	lsl.w	r3, r1, r3
 8015984:	431a      	orrs	r2, r3
 8015986:	68fb      	ldr	r3, [r7, #12]
 8015988:	625a      	str	r2, [r3, #36]	@ 0x24
}
 801598a:	bf00      	nop
 801598c:	372c      	adds	r7, #44	@ 0x2c
 801598e:	46bd      	mov	sp, r7
 8015990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015994:	4770      	bx	lr

08015996 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8015996:	b580      	push	{r7, lr}
 8015998:	b08a      	sub	sp, #40	@ 0x28
 801599a:	af00      	add	r7, sp, #0
 801599c:	6078      	str	r0, [r7, #4]
 801599e:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80159a0:	683b      	ldr	r3, [r7, #0]
 80159a2:	681b      	ldr	r3, [r3, #0]
 80159a4:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80159a6:	69bb      	ldr	r3, [r7, #24]
 80159a8:	fa93 f3a3 	rbit	r3, r3
 80159ac:	617b      	str	r3, [r7, #20]
  return result;
 80159ae:	697b      	ldr	r3, [r7, #20]
 80159b0:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 80159b2:	69fb      	ldr	r3, [r7, #28]
 80159b4:	2b00      	cmp	r3, #0
 80159b6:	d101      	bne.n	80159bc <LL_GPIO_Init+0x26>
    return 32U;
 80159b8:	2320      	movs	r3, #32
 80159ba:	e003      	b.n	80159c4 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 80159bc:	69fb      	ldr	r3, [r7, #28]
 80159be:	fab3 f383 	clz	r3, r3
 80159c2:	b2db      	uxtb	r3, r3
 80159c4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 80159c6:	e058      	b.n	8015a7a <LL_GPIO_Init+0xe4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 80159c8:	683b      	ldr	r3, [r7, #0]
 80159ca:	681a      	ldr	r2, [r3, #0]
 80159cc:	2101      	movs	r1, #1
 80159ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159d0:	fa01 f303 	lsl.w	r3, r1, r3
 80159d4:	4013      	ands	r3, r2
 80159d6:	623b      	str	r3, [r7, #32]

    if (currentpin != 0U)
 80159d8:	6a3b      	ldr	r3, [r7, #32]
 80159da:	2b00      	cmp	r3, #0
 80159dc:	d04a      	beq.n	8015a74 <LL_GPIO_Init+0xde>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80159de:	683b      	ldr	r3, [r7, #0]
 80159e0:	685b      	ldr	r3, [r3, #4]
 80159e2:	2b01      	cmp	r3, #1
 80159e4:	d003      	beq.n	80159ee <LL_GPIO_Init+0x58>
 80159e6:	683b      	ldr	r3, [r7, #0]
 80159e8:	685b      	ldr	r3, [r3, #4]
 80159ea:	2b02      	cmp	r3, #2
 80159ec:	d10e      	bne.n	8015a0c <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80159ee:	683b      	ldr	r3, [r7, #0]
 80159f0:	689b      	ldr	r3, [r3, #8]
 80159f2:	461a      	mov	r2, r3
 80159f4:	6a39      	ldr	r1, [r7, #32]
 80159f6:	6878      	ldr	r0, [r7, #4]
 80159f8:	f7ff fed7 	bl	80157aa <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80159fc:	683b      	ldr	r3, [r7, #0]
 80159fe:	6819      	ldr	r1, [r3, #0]
 8015a00:	683b      	ldr	r3, [r7, #0]
 8015a02:	68db      	ldr	r3, [r3, #12]
 8015a04:	461a      	mov	r2, r3
 8015a06:	6878      	ldr	r0, [r7, #4]
 8015a08:	f7ff feb7 	bl	801577a <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8015a0c:	683b      	ldr	r3, [r7, #0]
 8015a0e:	691b      	ldr	r3, [r3, #16]
 8015a10:	461a      	mov	r2, r3
 8015a12:	6a39      	ldr	r1, [r7, #32]
 8015a14:	6878      	ldr	r0, [r7, #4]
 8015a16:	f7ff ff05 	bl	8015824 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8015a1a:	683b      	ldr	r3, [r7, #0]
 8015a1c:	685b      	ldr	r3, [r3, #4]
 8015a1e:	2b02      	cmp	r3, #2
 8015a20:	d121      	bne.n	8015a66 <LL_GPIO_Init+0xd0>
 8015a22:	6a3b      	ldr	r3, [r7, #32]
 8015a24:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8015a26:	68fb      	ldr	r3, [r7, #12]
 8015a28:	fa93 f3a3 	rbit	r3, r3
 8015a2c:	60bb      	str	r3, [r7, #8]
  return result;
 8015a2e:	68bb      	ldr	r3, [r7, #8]
 8015a30:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8015a32:	693b      	ldr	r3, [r7, #16]
 8015a34:	2b00      	cmp	r3, #0
 8015a36:	d101      	bne.n	8015a3c <LL_GPIO_Init+0xa6>
    return 32U;
 8015a38:	2320      	movs	r3, #32
 8015a3a:	e003      	b.n	8015a44 <LL_GPIO_Init+0xae>
  return __builtin_clz(value);
 8015a3c:	693b      	ldr	r3, [r7, #16]
 8015a3e:	fab3 f383 	clz	r3, r3
 8015a42:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 8U)
 8015a44:	2b07      	cmp	r3, #7
 8015a46:	d807      	bhi.n	8015a58 <LL_GPIO_Init+0xc2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8015a48:	683b      	ldr	r3, [r7, #0]
 8015a4a:	695b      	ldr	r3, [r3, #20]
 8015a4c:	461a      	mov	r2, r3
 8015a4e:	6a39      	ldr	r1, [r7, #32]
 8015a50:	6878      	ldr	r0, [r7, #4]
 8015a52:	f7ff ff24 	bl	801589e <LL_GPIO_SetAFPin_0_7>
 8015a56:	e006      	b.n	8015a66 <LL_GPIO_Init+0xd0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8015a58:	683b      	ldr	r3, [r7, #0]
 8015a5a:	695b      	ldr	r3, [r3, #20]
 8015a5c:	461a      	mov	r2, r3
 8015a5e:	6a39      	ldr	r1, [r7, #32]
 8015a60:	6878      	ldr	r0, [r7, #4]
 8015a62:	f7ff ff59 	bl	8015918 <LL_GPIO_SetAFPin_8_15>
        }
      }
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8015a66:	683b      	ldr	r3, [r7, #0]
 8015a68:	685b      	ldr	r3, [r3, #4]
 8015a6a:	461a      	mov	r2, r3
 8015a6c:	6a39      	ldr	r1, [r7, #32]
 8015a6e:	6878      	ldr	r0, [r7, #4]
 8015a70:	f7ff fe46 	bl	8015700 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8015a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a76:	3301      	adds	r3, #1
 8015a78:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 8015a7a:	683b      	ldr	r3, [r7, #0]
 8015a7c:	681a      	ldr	r2, [r3, #0]
 8015a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a80:	fa22 f303 	lsr.w	r3, r2, r3
 8015a84:	2b00      	cmp	r3, #0
 8015a86:	d19f      	bne.n	80159c8 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8015a88:	2300      	movs	r3, #0
}
 8015a8a:	4618      	mov	r0, r3
 8015a8c:	3728      	adds	r7, #40	@ 0x28
 8015a8e:	46bd      	mov	sp, r7
 8015a90:	bd80      	pop	{r7, pc}

08015a92 <LL_SPI_IsEnabled>:
{
 8015a92:	b480      	push	{r7}
 8015a94:	b083      	sub	sp, #12
 8015a96:	af00      	add	r7, sp, #0
 8015a98:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8015a9a:	687b      	ldr	r3, [r7, #4]
 8015a9c:	681b      	ldr	r3, [r3, #0]
 8015a9e:	f003 0301 	and.w	r3, r3, #1
 8015aa2:	2b01      	cmp	r3, #1
 8015aa4:	d101      	bne.n	8015aaa <LL_SPI_IsEnabled+0x18>
 8015aa6:	2301      	movs	r3, #1
 8015aa8:	e000      	b.n	8015aac <LL_SPI_IsEnabled+0x1a>
 8015aaa:	2300      	movs	r3, #0
}
 8015aac:	4618      	mov	r0, r3
 8015aae:	370c      	adds	r7, #12
 8015ab0:	46bd      	mov	sp, r7
 8015ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ab6:	4770      	bx	lr

08015ab8 <LL_SPI_SetInternalSSLevel>:
{
 8015ab8:	b480      	push	{r7}
 8015aba:	b083      	sub	sp, #12
 8015abc:	af00      	add	r7, sp, #0
 8015abe:	6078      	str	r0, [r7, #4]
 8015ac0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSI, SSLevel);
 8015ac2:	687b      	ldr	r3, [r7, #4]
 8015ac4:	681b      	ldr	r3, [r3, #0]
 8015ac6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8015aca:	683b      	ldr	r3, [r7, #0]
 8015acc:	431a      	orrs	r2, r3
 8015ace:	687b      	ldr	r3, [r7, #4]
 8015ad0:	601a      	str	r2, [r3, #0]
}
 8015ad2:	bf00      	nop
 8015ad4:	370c      	adds	r7, #12
 8015ad6:	46bd      	mov	sp, r7
 8015ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015adc:	4770      	bx	lr

08015ade <LL_SPI_GetNSSPolarity>:
{
 8015ade:	b480      	push	{r7}
 8015ae0:	b083      	sub	sp, #12
 8015ae2:	af00      	add	r7, sp, #0
 8015ae4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(SPIx->CFG2, SPI_CFG2_SSIOP));
 8015ae6:	687b      	ldr	r3, [r7, #4]
 8015ae8:	68db      	ldr	r3, [r3, #12]
 8015aea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
}
 8015aee:	4618      	mov	r0, r3
 8015af0:	370c      	adds	r7, #12
 8015af2:	46bd      	mov	sp, r7
 8015af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015af8:	4770      	bx	lr

08015afa <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly 0..0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 8015afa:	b480      	push	{r7}
 8015afc:	b083      	sub	sp, #12
 8015afe:	af00      	add	r7, sp, #0
 8015b00:	6078      	str	r0, [r7, #4]
 8015b02:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPOLY, CRCPoly);
 8015b04:	687b      	ldr	r3, [r7, #4]
 8015b06:	683a      	ldr	r2, [r7, #0]
 8015b08:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8015b0a:	bf00      	nop
 8015b0c:	370c      	adds	r7, #12
 8015b0e:	46bd      	mov	sp, r7
 8015b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b14:	4770      	bx	lr
	...

08015b18 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8015b18:	b580      	push	{r7, lr}
 8015b1a:	b086      	sub	sp, #24
 8015b1c:	af00      	add	r7, sp, #0
 8015b1e:	6078      	str	r0, [r7, #4]
 8015b20:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8015b22:	2301      	movs	r3, #1
 8015b24:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_LL_SPI_BAUDRATEPRESCALER(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  /* Check the SPI instance is not enabled */
  if (LL_SPI_IsEnabled(SPIx) == 0x00000000UL)
 8015b26:	6878      	ldr	r0, [r7, #4]
 8015b28:	f7ff ffb3 	bl	8015a92 <LL_SPI_IsEnabled>
 8015b2c:	4603      	mov	r3, r0
 8015b2e:	2b00      	cmp	r3, #0
 8015b30:	d169      	bne.n	8015c06 <LL_SPI_Init+0xee>
       * Configure SPIx CFG1 with parameters:
       * - Master Baud Rate       : SPI_CFG1_MBR[2:0] bits & SPI_CFG1_BPASS bit
       * - CRC Computation Enable : SPI_CFG1_CRCEN bit
       * - Length of data frame   : SPI_CFG1_DSIZE[4:0] bits
       */
    MODIFY_REG(SPIx->CFG1, SPI_CFG1_BPASS | SPI_CFG1_MBR | SPI_CFG1_CRCEN | SPI_CFG1_DSIZE,
 8015b32:	687b      	ldr	r3, [r7, #4]
 8015b34:	689a      	ldr	r2, [r3, #8]
 8015b36:	4b36      	ldr	r3, [pc, #216]	@ (8015c10 <LL_SPI_Init+0xf8>)
 8015b38:	4013      	ands	r3, r2
 8015b3a:	683a      	ldr	r2, [r7, #0]
 8015b3c:	6991      	ldr	r1, [r2, #24]
 8015b3e:	683a      	ldr	r2, [r7, #0]
 8015b40:	6a12      	ldr	r2, [r2, #32]
 8015b42:	4311      	orrs	r1, r2
 8015b44:	683a      	ldr	r2, [r7, #0]
 8015b46:	6892      	ldr	r2, [r2, #8]
 8015b48:	430a      	orrs	r2, r1
 8015b4a:	431a      	orrs	r2, r3
 8015b4c:	687b      	ldr	r3, [r7, #4]
 8015b4e:	609a      	str	r2, [r3, #8]
               SPI_InitStruct->BaudRate  | SPI_InitStruct->CRCCalculation | SPI_InitStruct->DataWidth);

    tmp_nss  = SPI_InitStruct->NSS;
 8015b50:	683b      	ldr	r3, [r7, #0]
 8015b52:	695b      	ldr	r3, [r3, #20]
 8015b54:	613b      	str	r3, [r7, #16]
    tmp_mode = SPI_InitStruct->Mode;
 8015b56:	683b      	ldr	r3, [r7, #0]
 8015b58:	685b      	ldr	r3, [r3, #4]
 8015b5a:	60fb      	str	r3, [r7, #12]
    tmp_nss_polarity = LL_SPI_GetNSSPolarity(SPIx);
 8015b5c:	6878      	ldr	r0, [r7, #4]
 8015b5e:	f7ff ffbe 	bl	8015ade <LL_SPI_GetNSSPolarity>
 8015b62:	60b8      	str	r0, [r7, #8]

    /* Checks to setup Internal SS signal level and avoid a MODF Error */
    if ((tmp_nss == LL_SPI_NSS_SOFT) && (((tmp_nss_polarity == LL_SPI_NSS_POLARITY_LOW)  && \
 8015b64:	693b      	ldr	r3, [r7, #16]
 8015b66:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8015b6a:	d112      	bne.n	8015b92 <LL_SPI_Init+0x7a>
 8015b6c:	68bb      	ldr	r3, [r7, #8]
 8015b6e:	2b00      	cmp	r3, #0
 8015b70:	d103      	bne.n	8015b7a <LL_SPI_Init+0x62>
 8015b72:	68fb      	ldr	r3, [r7, #12]
 8015b74:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8015b78:	d006      	beq.n	8015b88 <LL_SPI_Init+0x70>
                                          (tmp_mode == LL_SPI_MODE_MASTER))              || \
 8015b7a:	68bb      	ldr	r3, [r7, #8]
 8015b7c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8015b80:	d107      	bne.n	8015b92 <LL_SPI_Init+0x7a>
                                         ((tmp_nss_polarity == LL_SPI_NSS_POLARITY_HIGH) && \
 8015b82:	68fb      	ldr	r3, [r7, #12]
 8015b84:	2b00      	cmp	r3, #0
 8015b86:	d104      	bne.n	8015b92 <LL_SPI_Init+0x7a>
                                          (tmp_mode == LL_SPI_MODE_SLAVE))))
    {
      LL_SPI_SetInternalSSLevel(SPIx, LL_SPI_SS_LEVEL_HIGH);
 8015b88:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8015b8c:	6878      	ldr	r0, [r7, #4]
 8015b8e:	f7ff ff93 	bl	8015ab8 <LL_SPI_SetInternalSSLevel>
       * - ClockPhase             : SPI_CFG2_CPHA bit
       * - BitOrder               : SPI_CFG2_LSBFRST bit
       * - Master/Slave Mode      : SPI_CFG2_MASTER bit
       * - SPI Mode               : SPI_CFG2_COMM[1:0] bits
       */
    MODIFY_REG(SPIx->CFG2, SPI_CFG2_SSM   | SPI_CFG2_SSOE    |
 8015b92:	687b      	ldr	r3, [r7, #4]
 8015b94:	68db      	ldr	r3, [r3, #12]
 8015b96:	f023 531f 	bic.w	r3, r3, #666894336	@ 0x27c00000
 8015b9a:	f423 23c0 	bic.w	r3, r3, #393216	@ 0x60000
 8015b9e:	683a      	ldr	r2, [r7, #0]
 8015ba0:	6951      	ldr	r1, [r2, #20]
 8015ba2:	683a      	ldr	r2, [r7, #0]
 8015ba4:	68d2      	ldr	r2, [r2, #12]
 8015ba6:	4311      	orrs	r1, r2
 8015ba8:	683a      	ldr	r2, [r7, #0]
 8015baa:	6912      	ldr	r2, [r2, #16]
 8015bac:	4311      	orrs	r1, r2
 8015bae:	683a      	ldr	r2, [r7, #0]
 8015bb0:	69d2      	ldr	r2, [r2, #28]
 8015bb2:	4311      	orrs	r1, r2
 8015bb4:	683a      	ldr	r2, [r7, #0]
 8015bb6:	6852      	ldr	r2, [r2, #4]
 8015bb8:	4311      	orrs	r1, r2
 8015bba:	683a      	ldr	r2, [r7, #0]
 8015bbc:	6812      	ldr	r2, [r2, #0]
 8015bbe:	f402 22c0 	and.w	r2, r2, #393216	@ 0x60000
 8015bc2:	430a      	orrs	r2, r1
 8015bc4:	431a      	orrs	r2, r3
 8015bc6:	687b      	ldr	r3, [r7, #4]
 8015bc8:	60da      	str	r2, [r3, #12]

    /*---------------------------- SPIx CR1 Configuration ------------------------
       * Configure SPIx CR1 with parameter:
       * - Half Duplex Direction  : SPI_CR1_HDDIR bit
       */
    MODIFY_REG(SPIx->CR1, SPI_CR1_HDDIR, SPI_InitStruct->TransferDirection & SPI_CR1_HDDIR);
 8015bca:	687b      	ldr	r3, [r7, #4]
 8015bcc:	681b      	ldr	r3, [r3, #0]
 8015bce:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8015bd2:	683b      	ldr	r3, [r7, #0]
 8015bd4:	681b      	ldr	r3, [r3, #0]
 8015bd6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8015bda:	431a      	orrs	r2, r3
 8015bdc:	687b      	ldr	r3, [r7, #4]
 8015bde:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CRCPOLY Configuration ----------------------
       * Configure SPIx CRCPOLY with parameter:
       * - CRCPoly                : CRCPOLY[31:0] bits
       */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8015be0:	683b      	ldr	r3, [r7, #0]
 8015be2:	6a1b      	ldr	r3, [r3, #32]
 8015be4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8015be8:	d105      	bne.n	8015bf6 <LL_SPI_Init+0xde>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8015bea:	683b      	ldr	r3, [r7, #0]
 8015bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015bee:	4619      	mov	r1, r3
 8015bf0:	6878      	ldr	r0, [r7, #4]
 8015bf2:	f7ff ff82 	bl	8015afa <LL_SPI_SetCRCPolynomial>
    }

    /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
    CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8015bf6:	687b      	ldr	r3, [r7, #4]
 8015bf8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015bfa:	f023 0201 	bic.w	r2, r3, #1
 8015bfe:	687b      	ldr	r3, [r7, #4]
 8015c00:	651a      	str	r2, [r3, #80]	@ 0x50

    status = SUCCESS;
 8015c02:	2300      	movs	r3, #0
 8015c04:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8015c06:	7dfb      	ldrb	r3, [r7, #23]
}
 8015c08:	4618      	mov	r0, r3
 8015c0a:	3718      	adds	r7, #24
 8015c0c:	46bd      	mov	sp, r7
 8015c0e:	bd80      	pop	{r7, pc}
 8015c10:	0fbfffe0 	.word	0x0fbfffe0

08015c14 <clearResBuff>:
extern uint32_t L1, L2, L3;
extern int TOTAL_PACKETS;
int redoCounter = 0;
/*-----------------------------------HTTP-SECTION-------------------------------------------*/

void clearResBuff() {
 8015c14:	b580      	push	{r7, lr}
 8015c16:	af00      	add	r7, sp, #0
	clearBuffer(resBuff, sizeof(resBuff));
 8015c18:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8015c1c:	4802      	ldr	r0, [pc, #8]	@ (8015c28 <clearResBuff+0x14>)
 8015c1e:	f7eb ff53 	bl	8001ac8 <clearBuffer>
}
 8015c22:	bf00      	nop
 8015c24:	bd80      	pop	{r7, pc}
 8015c26:	bf00      	nop
 8015c28:	200142b4 	.word	0x200142b4

08015c2c <EC200_HTTP_POST>:
bool EC200_HTTP_POST(int type) {
 8015c2c:	b580      	push	{r7, lr}
 8015c2e:	b082      	sub	sp, #8
 8015c30:	af00      	add	r7, sp, #0
 8015c32:	6078      	str	r0, [r7, #4]
	// Configure PDP context ID
	clearResBuff();
 8015c34:	f7ff ffee 	bl	8015c14 <clearResBuff>
	Config_Update("IMEI", Imei);
 8015c38:	4b0e      	ldr	r3, [pc, #56]	@ (8015c74 <EC200_HTTP_POST+0x48>)
 8015c3a:	681b      	ldr	r3, [r3, #0]
 8015c3c:	4619      	mov	r1, r3
 8015c3e:	480e      	ldr	r0, [pc, #56]	@ (8015c78 <EC200_HTTP_POST+0x4c>)
 8015c40:	f001 fda2 	bl	8017788 <Config_Update>
	clearResBuff();
 8015c44:	f7ff ffe6 	bl	8015c14 <clearResBuff>
	if (EC200_Transmit("AT+QIACT?\r\n", resBuff, EC200MINRESONSETIME)) {
 8015c48:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8015c4c:	490b      	ldr	r1, [pc, #44]	@ (8015c7c <EC200_HTTP_POST+0x50>)
 8015c4e:	480c      	ldr	r0, [pc, #48]	@ (8015c80 <EC200_HTTP_POST+0x54>)
 8015c50:	f7eb faac 	bl	80011ac <EC200_Transmit>
 8015c54:	4603      	mov	r3, r0
 8015c56:	2b00      	cmp	r3, #0
 8015c58:	d004      	beq.n	8015c64 <EC200_HTTP_POST+0x38>
		printc(100, "AT+QIACT?\r\n RES->%s", resBuff);
 8015c5a:	4a08      	ldr	r2, [pc, #32]	@ (8015c7c <EC200_HTTP_POST+0x50>)
 8015c5c:	4909      	ldr	r1, [pc, #36]	@ (8015c84 <EC200_HTTP_POST+0x58>)
 8015c5e:	2064      	movs	r0, #100	@ 0x64
 8015c60:	f7eb feda 	bl	8001a18 <printc>
	}
	return processMessage(type);
 8015c64:	6878      	ldr	r0, [r7, #4]
 8015c66:	f001 fd4f 	bl	8017708 <processMessage>
 8015c6a:	4603      	mov	r3, r0

}
 8015c6c:	4618      	mov	r0, r3
 8015c6e:	3708      	adds	r7, #8
 8015c70:	46bd      	mov	sp, r7
 8015c72:	bd80      	pop	{r7, pc}
 8015c74:	20014adc 	.word	0x20014adc
 8015c78:	08022a58 	.word	0x08022a58
 8015c7c:	200142b4 	.word	0x200142b4
 8015c80:	08022a60 	.word	0x08022a60
 8015c84:	08022a6c 	.word	0x08022a6c

08015c88 <EC200_Data_Fetch>:

/*-----------------------------------HTTP-SECTION-END----------------------------------------*/

bool EC200_Data_Fetch(const char *command) {
 8015c88:	b580      	push	{r7, lr}
 8015c8a:	f5ad 6d87 	sub.w	sp, sp, #1080	@ 0x438
 8015c8e:	af02      	add	r7, sp, #8
 8015c90:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 8015c94:	f2a3 432c 	subw	r3, r3, #1068	@ 0x42c
 8015c98:	6018      	str	r0, [r3, #0]

	clearResBuff();
 8015c9a:	f7ff ffbb 	bl	8015c14 <clearResBuff>
	redoCounter = 0;
 8015c9e:	4b66      	ldr	r3, [pc, #408]	@ (8015e38 <EC200_Data_Fetch+0x1b0>)
 8015ca0:	2200      	movs	r2, #0
 8015ca2:	601a      	str	r2, [r3, #0]
	readURL: if (!EC200_Transmit(command, resBuff, 5000)) {
 8015ca4:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 8015ca8:	f2a3 432c 	subw	r3, r3, #1068	@ 0x42c
 8015cac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8015cb0:	4962      	ldr	r1, [pc, #392]	@ (8015e3c <EC200_Data_Fetch+0x1b4>)
 8015cb2:	6818      	ldr	r0, [r3, #0]
 8015cb4:	f7eb fa7a 	bl	80011ac <EC200_Transmit>
 8015cb8:	4603      	mov	r3, r0
 8015cba:	f083 0301 	eor.w	r3, r3, #1
 8015cbe:	b2db      	uxtb	r3, r3
 8015cc0:	2b00      	cmp	r3, #0
 8015cc2:	d00b      	beq.n	8015cdc <EC200_Data_Fetch+0x54>
		if (redoCounter >= 3) {
 8015cc4:	4b5c      	ldr	r3, [pc, #368]	@ (8015e38 <EC200_Data_Fetch+0x1b0>)
 8015cc6:	681b      	ldr	r3, [r3, #0]
 8015cc8:	2b02      	cmp	r3, #2
 8015cca:	dd01      	ble.n	8015cd0 <EC200_Data_Fetch+0x48>
			return false;
 8015ccc:	2300      	movs	r3, #0
 8015cce:	e0ad      	b.n	8015e2c <EC200_Data_Fetch+0x1a4>
		}
		redoCounter++;
 8015cd0:	4b59      	ldr	r3, [pc, #356]	@ (8015e38 <EC200_Data_Fetch+0x1b0>)
 8015cd2:	681b      	ldr	r3, [r3, #0]
 8015cd4:	3301      	adds	r3, #1
 8015cd6:	4a58      	ldr	r2, [pc, #352]	@ (8015e38 <EC200_Data_Fetch+0x1b0>)
 8015cd8:	6013      	str	r3, [r2, #0]
		goto readURL;
 8015cda:	e7e3      	b.n	8015ca4 <EC200_Data_Fetch+0x1c>
	}
	int KeyID = 0; // Corrected to int
 8015cdc:	2300      	movs	r3, #0
 8015cde:	f8c7 342c 	str.w	r3, [r7, #1068]	@ 0x42c
	int result = Response_Check(resBuff);
 8015ce2:	4856      	ldr	r0, [pc, #344]	@ (8015e3c <EC200_Data_Fetch+0x1b4>)
 8015ce4:	f001 fdec 	bl	80178c0 <Response_Check>
 8015ce8:	f8c7 0428 	str.w	r0, [r7, #1064]	@ 0x428
	if (result == -1) {
 8015cec:	f8d7 3428 	ldr.w	r3, [r7, #1064]	@ 0x428
 8015cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015cf4:	d105      	bne.n	8015d02 <EC200_Data_Fetch+0x7a>
		printc(MinDelay, "Wrong data received\n");
 8015cf6:	4952      	ldr	r1, [pc, #328]	@ (8015e40 <EC200_Data_Fetch+0x1b8>)
 8015cf8:	200a      	movs	r0, #10
 8015cfa:	f7eb fe8d 	bl	8001a18 <printc>
		return false; // it needed to be handled all return under FOTA
 8015cfe:	2300      	movs	r3, #0
 8015d00:	e094      	b.n	8015e2c <EC200_Data_Fetch+0x1a4>
	}
	char Rchecksum[2] = { 0 }; //
 8015d02:	2300      	movs	r3, #0
 8015d04:	f8a7 3424 	strh.w	r3, [r7, #1060]	@ 0x424
	char En_Data[1024] = { 0 }; // Remove const qualifier
 8015d08:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 8015d0c:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 8015d10:	2200      	movs	r2, #0
 8015d12:	601a      	str	r2, [r3, #0]
 8015d14:	3304      	adds	r3, #4
 8015d16:	f44f 727f 	mov.w	r2, #1020	@ 0x3fc
 8015d1a:	2100      	movs	r1, #0
 8015d1c:	4618      	mov	r0, r3
 8015d1e:	f009 f877 	bl	801ee10 <memset>
	const char *extracted_Data[6] = { 0 };
 8015d22:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 8015d26:	f2a3 4324 	subw	r3, r3, #1060	@ 0x424
 8015d2a:	461a      	mov	r2, r3
 8015d2c:	2300      	movs	r3, #0
 8015d2e:	6013      	str	r3, [r2, #0]
 8015d30:	6053      	str	r3, [r2, #4]
 8015d32:	6093      	str	r3, [r2, #8]
 8015d34:	60d3      	str	r3, [r2, #12]
 8015d36:	6113      	str	r3, [r2, #16]
 8015d38:	6153      	str	r3, [r2, #20]
	do {
		FOTA_Seprate_String(resBuff, result, 10, extracted_Data, En_Data);
 8015d3a:	f107 020c 	add.w	r2, r7, #12
 8015d3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8015d42:	9300      	str	r3, [sp, #0]
 8015d44:	4613      	mov	r3, r2
 8015d46:	220a      	movs	r2, #10
 8015d48:	f8d7 1428 	ldr.w	r1, [r7, #1064]	@ 0x428
 8015d4c:	483b      	ldr	r0, [pc, #236]	@ (8015e3c <EC200_Data_Fetch+0x1b4>)
 8015d4e:	f001 fe73 	bl	8017a38 <FOTA_Seprate_String>
		if (extracted_Data[5] == NULL) {
 8015d52:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 8015d56:	f2a3 4324 	subw	r3, r3, #1060	@ 0x424
 8015d5a:	695b      	ldr	r3, [r3, #20]
 8015d5c:	2b00      	cmp	r3, #0
 8015d5e:	d105      	bne.n	8015d6c <EC200_Data_Fetch+0xe4>
			printc(MinDelay, "No Checksum\n");
 8015d60:	4938      	ldr	r1, [pc, #224]	@ (8015e44 <EC200_Data_Fetch+0x1bc>)
 8015d62:	200a      	movs	r0, #10
 8015d64:	f7eb fe58 	bl	8001a18 <printc>
			return false;
 8015d68:	2300      	movs	r3, #0
 8015d6a:	e05f      	b.n	8015e2c <EC200_Data_Fetch+0x1a4>
		}
		memcpy(Rchecksum, extracted_Data[5], 2);
 8015d6c:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 8015d70:	f2a3 4324 	subw	r3, r3, #1060	@ 0x424
 8015d74:	695b      	ldr	r3, [r3, #20]
 8015d76:	881b      	ldrh	r3, [r3, #0]
 8015d78:	b29b      	uxth	r3, r3
 8015d7a:	f8a7 3424 	strh.w	r3, [r7, #1060]	@ 0x424
//		strncpy(En_Data, extracted_Data[4], strlen(extracted_Data[4]));

	} while (extracted_Data[5] == NULL);
 8015d7e:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 8015d82:	f2a3 4324 	subw	r3, r3, #1060	@ 0x424
 8015d86:	695b      	ldr	r3, [r3, #20]
 8015d88:	2b00      	cmp	r3, #0
 8015d8a:	d0d6      	beq.n	8015d3a <EC200_Data_Fetch+0xb2>

	KeyID = atoi(extracted_Data[3]); // Convert string to integer
 8015d8c:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 8015d90:	f2a3 4324 	subw	r3, r3, #1060	@ 0x424
 8015d94:	68db      	ldr	r3, [r3, #12]
 8015d96:	4618      	mov	r0, r3
 8015d98:	f006 ffc5 	bl	801cd26 <atoi>
 8015d9c:	f8c7 042c 	str.w	r0, [r7, #1068]	@ 0x42c

	char CSUM = Calculate_CRC8(En_Data, strlen(En_Data));
 8015da0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8015da4:	4618      	mov	r0, r3
 8015da6:	f7ea fa7d 	bl	80002a4 <strlen>
 8015daa:	4602      	mov	r2, r0
 8015dac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8015db0:	4611      	mov	r1, r2
 8015db2:	4618      	mov	r0, r3
 8015db4:	f001 fed2 	bl	8017b5c <Calculate_CRC8>
 8015db8:	4603      	mov	r3, r0
 8015dba:	f887 3427 	strb.w	r3, [r7, #1063]	@ 0x427
	char Cksum[3] = { 0 }; // Since CSUM is one byte, the buffer should be able to hold two characters plus the null terminator
 8015dbe:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 8015dc2:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 8015dc6:	4a20      	ldr	r2, [pc, #128]	@ (8015e48 <EC200_Data_Fetch+0x1c0>)
 8015dc8:	8812      	ldrh	r2, [r2, #0]
 8015dca:	801a      	strh	r2, [r3, #0]
 8015dcc:	2200      	movs	r2, #0
 8015dce:	709a      	strb	r2, [r3, #2]

	sprintf(Cksum, "%0X", CSUM); // Convert CSUM to hexadecimal and store it in Cksum
 8015dd0:	f897 2427 	ldrb.w	r2, [r7, #1063]	@ 0x427
 8015dd4:	f107 0308 	add.w	r3, r7, #8
 8015dd8:	491c      	ldr	r1, [pc, #112]	@ (8015e4c <EC200_Data_Fetch+0x1c4>)
 8015dda:	4618      	mov	r0, r3
 8015ddc:	f008 febc 	bl	801eb58 <siprintf>
	clearBuffer(Decrypt_d, sizeof(Decrypt_d));
 8015de0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8015de4:	481a      	ldr	r0, [pc, #104]	@ (8015e50 <EC200_Data_Fetch+0x1c8>)
 8015de6:	f7eb fe6f 	bl	8001ac8 <clearBuffer>
	if (Rchecksum[0] != Cksum[0] && Rchecksum[1] != Cksum[1]) { // Compare Cksum with Rchecksum
 8015dea:	f897 2424 	ldrb.w	r2, [r7, #1060]	@ 0x424
 8015dee:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 8015df2:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 8015df6:	781b      	ldrb	r3, [r3, #0]
 8015df8:	429a      	cmp	r2, r3
 8015dfa:	d00e      	beq.n	8015e1a <EC200_Data_Fetch+0x192>
 8015dfc:	f897 2425 	ldrb.w	r2, [r7, #1061]	@ 0x425
 8015e00:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 8015e04:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 8015e08:	785b      	ldrb	r3, [r3, #1]
 8015e0a:	429a      	cmp	r2, r3
 8015e0c:	d005      	beq.n	8015e1a <EC200_Data_Fetch+0x192>
		printc(MinDelay, "Check sum not matched\n");
 8015e0e:	4911      	ldr	r1, [pc, #68]	@ (8015e54 <EC200_Data_Fetch+0x1cc>)
 8015e10:	200a      	movs	r0, #10
 8015e12:	f7eb fe01 	bl	8001a18 <printc>
		return false;
 8015e16:	2300      	movs	r3, #0
 8015e18:	e008      	b.n	8015e2c <EC200_Data_Fetch+0x1a4>
	}
	Decrypt(En_Data, Decrypt_d, KeyID);
 8015e1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8015e1e:	f8d7 242c 	ldr.w	r2, [r7, #1068]	@ 0x42c
 8015e22:	490b      	ldr	r1, [pc, #44]	@ (8015e50 <EC200_Data_Fetch+0x1c8>)
 8015e24:	4618      	mov	r0, r3
 8015e26:	f7ec f92d 	bl	8002084 <Decrypt>

	return true;
 8015e2a:	2301      	movs	r3, #1
}
 8015e2c:	4618      	mov	r0, r3
 8015e2e:	f507 6786 	add.w	r7, r7, #1072	@ 0x430
 8015e32:	46bd      	mov	sp, r7
 8015e34:	bd80      	pop	{r7, pc}
 8015e36:	bf00      	nop
 8015e38:	20014ab4 	.word	0x20014ab4
 8015e3c:	200142b4 	.word	0x200142b4
 8015e40:	08022a80 	.word	0x08022a80
 8015e44:	08022a98 	.word	0x08022a98
 8015e48:	08022ac4 	.word	0x08022ac4
 8015e4c:	08022aa8 	.word	0x08022aa8
 8015e50:	20013eb4 	.word	0x20013eb4
 8015e54:	08022aac 	.word	0x08022aac

08015e58 <EC200_File_save>:
void EC200_File_save(const char *command) {
 8015e58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015e5c:	b08d      	sub	sp, #52	@ 0x34
 8015e5e:	af02      	add	r7, sp, #8
 8015e60:	6078      	str	r0, [r7, #4]
 8015e62:	466b      	mov	r3, sp
 8015e64:	461e      	mov	r6, r3
	uint8_t packet_index = 0;
 8015e66:	2300      	movs	r3, #0
 8015e68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint32_t Addr = 0;
 8015e6c:	2300      	movs	r3, #0
 8015e6e:	623b      	str	r3, [r7, #32]
	uint8_t rx_Code_buffer[TOTAL_PACKETS][PACKET_SIZE];
 8015e70:	4b52      	ldr	r3, [pc, #328]	@ (8015fbc <EC200_File_save+0x164>)
 8015e72:	6819      	ldr	r1, [r3, #0]
 8015e74:	1e4b      	subs	r3, r1, #1
 8015e76:	61bb      	str	r3, [r7, #24]
 8015e78:	460a      	mov	r2, r1
 8015e7a:	2300      	movs	r3, #0
 8015e7c:	4690      	mov	r8, r2
 8015e7e:	4699      	mov	r9, r3
 8015e80:	f04f 0200 	mov.w	r2, #0
 8015e84:	f04f 0300 	mov.w	r3, #0
 8015e88:	ea4f 3349 	mov.w	r3, r9, lsl #13
 8015e8c:	ea43 43d8 	orr.w	r3, r3, r8, lsr #19
 8015e90:	ea4f 3248 	mov.w	r2, r8, lsl #13
 8015e94:	460a      	mov	r2, r1
 8015e96:	2300      	movs	r3, #0
 8015e98:	4614      	mov	r4, r2
 8015e9a:	461d      	mov	r5, r3
 8015e9c:	f04f 0200 	mov.w	r2, #0
 8015ea0:	f04f 0300 	mov.w	r3, #0
 8015ea4:	036b      	lsls	r3, r5, #13
 8015ea6:	ea43 43d4 	orr.w	r3, r3, r4, lsr #19
 8015eaa:	0362      	lsls	r2, r4, #13
 8015eac:	460b      	mov	r3, r1
 8015eae:	029b      	lsls	r3, r3, #10
 8015eb0:	3307      	adds	r3, #7
 8015eb2:	08db      	lsrs	r3, r3, #3
 8015eb4:	00db      	lsls	r3, r3, #3
 8015eb6:	ebad 0d03 	sub.w	sp, sp, r3
 8015eba:	ab02      	add	r3, sp, #8
 8015ebc:	3300      	adds	r3, #0
 8015ebe:	617b      	str	r3, [r7, #20]
	uint8_t H_Buff[11] = { 0 };
 8015ec0:	2300      	movs	r3, #0
 8015ec2:	60bb      	str	r3, [r7, #8]
 8015ec4:	f107 030c 	add.w	r3, r7, #12
 8015ec8:	2200      	movs	r2, #0
 8015eca:	601a      	str	r2, [r3, #0]
 8015ecc:	f8c3 2003 	str.w	r2, [r3, #3]

//	if(EC200_Transmit(command, H_Buff, 20000)){
//		printc(1000,"%s",H_Buff);
//		wait_for_response(H_Buff, 20000);
//	}
	enable_Idle = false;
 8015ed0:	4b3b      	ldr	r3, [pc, #236]	@ (8015fc0 <EC200_File_save+0x168>)
 8015ed2:	2200      	movs	r2, #0
 8015ed4:	701a      	strb	r2, [r3, #0]
	memset(rx_Code_buffer, 0, sizeof(rx_Code_buffer));
 8015ed6:	460b      	mov	r3, r1
 8015ed8:	029b      	lsls	r3, r3, #10
 8015eda:	461a      	mov	r2, r3
 8015edc:	2100      	movs	r1, #0
 8015ede:	6978      	ldr	r0, [r7, #20]
 8015ee0:	f008 ff96 	bl	801ee10 <memset>
	HAL_UART_Transmit(&huart1, (uint8_t*) command, strlen(command), 2000);
 8015ee4:	6878      	ldr	r0, [r7, #4]
 8015ee6:	f7ea f9dd 	bl	80002a4 <strlen>
 8015eea:	4603      	mov	r3, r0
 8015eec:	b29a      	uxth	r2, r3
 8015eee:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8015ef2:	6879      	ldr	r1, [r7, #4]
 8015ef4:	4833      	ldr	r0, [pc, #204]	@ (8015fc4 <EC200_File_save+0x16c>)
 8015ef6:	f7fc febd 	bl	8012c74 <HAL_UART_Transmit>

	HAL_UART_Receive(&huart1, H_Buff, sizeof(H_Buff), 500); // Receive data into H_Buff
 8015efa:	f107 0108 	add.w	r1, r7, #8
 8015efe:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8015f02:	220b      	movs	r2, #11
 8015f04:	482f      	ldr	r0, [pc, #188]	@ (8015fc4 <EC200_File_save+0x16c>)
 8015f06:	f7fc ff53 	bl	8012db0 <HAL_UART_Receive>

	for (packet_index = 0; packet_index < TOTAL_PACKETS; packet_index++) {
 8015f0a:	2300      	movs	r3, #0
 8015f0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015f10:	e010      	b.n	8015f34 <EC200_File_save+0xdc>

		HAL_UART_Receive(&huart1, rx_Code_buffer[packet_index], PACKET_SIZE,
 8015f12:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015f16:	029b      	lsls	r3, r3, #10
 8015f18:	697a      	ldr	r2, [r7, #20]
 8015f1a:	18d1      	adds	r1, r2, r3
 8015f1c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8015f20:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8015f24:	4827      	ldr	r0, [pc, #156]	@ (8015fc4 <EC200_File_save+0x16c>)
 8015f26:	f7fc ff43 	bl	8012db0 <HAL_UART_Receive>
	for (packet_index = 0; packet_index < TOTAL_PACKETS; packet_index++) {
 8015f2a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015f2e:	3301      	adds	r3, #1
 8015f30:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015f34:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8015f38:	4b20      	ldr	r3, [pc, #128]	@ (8015fbc <EC200_File_save+0x164>)
 8015f3a:	681b      	ldr	r3, [r3, #0]
 8015f3c:	429a      	cmp	r2, r3
 8015f3e:	dbe8      	blt.n	8015f12 <EC200_File_save+0xba>
				1000);
	}

	writeF_CP((uint64_t)1, (uint64_t)1,(uint64_t)1);
 8015f40:	f04f 0201 	mov.w	r2, #1
 8015f44:	f04f 0300 	mov.w	r3, #0
 8015f48:	e9cd 2300 	strd	r2, r3, [sp]
 8015f4c:	f04f 0201 	mov.w	r2, #1
 8015f50:	f04f 0300 	mov.w	r3, #0
 8015f54:	f04f 0001 	mov.w	r0, #1
 8015f58:	f04f 0100 	mov.w	r1, #0
 8015f5c:	f000 fc0a 	bl	8016774 <writeF_CP>
	Addr = L3;
 8015f60:	4b19      	ldr	r3, [pc, #100]	@ (8015fc8 <EC200_File_save+0x170>)
 8015f62:	681b      	ldr	r3, [r3, #0]
 8015f64:	623b      	str	r3, [r7, #32]
	Erase_sectors(L3);
 8015f66:	4b18      	ldr	r3, [pc, #96]	@ (8015fc8 <EC200_File_save+0x170>)
 8015f68:	681b      	ldr	r3, [r3, #0]
 8015f6a:	4618      	mov	r0, r3
 8015f6c:	f000 fb1c 	bl	80165a8 <Erase_sectors>
	for (int i = 0; i < TOTAL_PACKETS; i++) {
 8015f70:	2300      	movs	r3, #0
 8015f72:	61fb      	str	r3, [r7, #28]
 8015f74:	e013      	b.n	8015f9e <EC200_File_save+0x146>
		HAL_Delay(100);
 8015f76:	2064      	movs	r0, #100	@ 0x64
 8015f78:	f7ef fd26 	bl	80059c8 <HAL_Delay>
		HAL_FLASH_Write_Buff(Addr, &rx_Code_buffer[i], PACKET_SIZE);
 8015f7c:	69fb      	ldr	r3, [r7, #28]
 8015f7e:	029b      	lsls	r3, r3, #10
 8015f80:	697a      	ldr	r2, [r7, #20]
 8015f82:	4413      	add	r3, r2
 8015f84:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8015f88:	4619      	mov	r1, r3
 8015f8a:	6a38      	ldr	r0, [r7, #32]
 8015f8c:	f000 fac6 	bl	801651c <HAL_FLASH_Write_Buff>
		Addr += 1024;
 8015f90:	6a3b      	ldr	r3, [r7, #32]
 8015f92:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8015f96:	623b      	str	r3, [r7, #32]
	for (int i = 0; i < TOTAL_PACKETS; i++) {
 8015f98:	69fb      	ldr	r3, [r7, #28]
 8015f9a:	3301      	adds	r3, #1
 8015f9c:	61fb      	str	r3, [r7, #28]
 8015f9e:	4b07      	ldr	r3, [pc, #28]	@ (8015fbc <EC200_File_save+0x164>)
 8015fa0:	681b      	ldr	r3, [r3, #0]
 8015fa2:	69fa      	ldr	r2, [r7, #28]
 8015fa4:	429a      	cmp	r2, r3
 8015fa6:	dbe6      	blt.n	8015f76 <EC200_File_save+0x11e>
	}

	enable_Idle = true;
 8015fa8:	4b05      	ldr	r3, [pc, #20]	@ (8015fc0 <EC200_File_save+0x168>)
 8015faa:	2201      	movs	r2, #1
 8015fac:	701a      	strb	r2, [r3, #0]
	return;
 8015fae:	bf00      	nop
 8015fb0:	46b5      	mov	sp, r6
}
 8015fb2:	372c      	adds	r7, #44	@ 0x2c
 8015fb4:	46bd      	mov	sp, r7
 8015fb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015fba:	bf00      	nop
 8015fbc:	20014c5c 	.word	0x20014c5c
 8015fc0:	20000000 	.word	0x20000000
 8015fc4:	20013cd4 	.word	0x20013cd4
 8015fc8:	20000070 	.word	0x20000070

08015fcc <EC200_Key_Update>:

void EC200_Key_Update(const char *command) {
 8015fcc:	b580      	push	{r7, lr}
 8015fce:	f5ad 6d88 	sub.w	sp, sp, #1088	@ 0x440
 8015fd2:	af02      	add	r7, sp, #8
 8015fd4:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8015fd8:	f2a3 4334 	subw	r3, r3, #1076	@ 0x434
 8015fdc:	6018      	str	r0, [r3, #0]

	clearResBuff();
 8015fde:	f7ff fe19 	bl	8015c14 <clearResBuff>
	redoCounter = 0;
 8015fe2:	4b77      	ldr	r3, [pc, #476]	@ (80161c0 <EC200_Key_Update+0x1f4>)
 8015fe4:	2200      	movs	r2, #0
 8015fe6:	601a      	str	r2, [r3, #0]
	readURL: if (!EC200_Transmit(command, resBuff, 5000)) {
 8015fe8:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8015fec:	f2a3 4334 	subw	r3, r3, #1076	@ 0x434
 8015ff0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8015ff4:	4973      	ldr	r1, [pc, #460]	@ (80161c4 <EC200_Key_Update+0x1f8>)
 8015ff6:	6818      	ldr	r0, [r3, #0]
 8015ff8:	f7eb f8d8 	bl	80011ac <EC200_Transmit>
 8015ffc:	4603      	mov	r3, r0
 8015ffe:	f083 0301 	eor.w	r3, r3, #1
 8016002:	b2db      	uxtb	r3, r3
 8016004:	2b00      	cmp	r3, #0
 8016006:	d00a      	beq.n	801601e <EC200_Key_Update+0x52>
		if (redoCounter >= 3) {
 8016008:	4b6d      	ldr	r3, [pc, #436]	@ (80161c0 <EC200_Key_Update+0x1f4>)
 801600a:	681b      	ldr	r3, [r3, #0]
 801600c:	2b02      	cmp	r3, #2
 801600e:	f300 80d2 	bgt.w	80161b6 <EC200_Key_Update+0x1ea>
			return false;
		}
		redoCounter++;
 8016012:	4b6b      	ldr	r3, [pc, #428]	@ (80161c0 <EC200_Key_Update+0x1f4>)
 8016014:	681b      	ldr	r3, [r3, #0]
 8016016:	3301      	adds	r3, #1
 8016018:	4a69      	ldr	r2, [pc, #420]	@ (80161c0 <EC200_Key_Update+0x1f4>)
 801601a:	6013      	str	r3, [r2, #0]
		goto readURL;
 801601c:	e7e4      	b.n	8015fe8 <EC200_Key_Update+0x1c>
	}
	int KeyID = 0; // Corrected to int
 801601e:	2300      	movs	r3, #0
 8016020:	f8c7 3430 	str.w	r3, [r7, #1072]	@ 0x430
	int result = Response_Check(resBuff);
 8016024:	4867      	ldr	r0, [pc, #412]	@ (80161c4 <EC200_Key_Update+0x1f8>)
 8016026:	f001 fc4b 	bl	80178c0 <Response_Check>
 801602a:	f8c7 042c 	str.w	r0, [r7, #1068]	@ 0x42c
	if (result == -1) {
 801602e:	f8d7 342c 	ldr.w	r3, [r7, #1068]	@ 0x42c
 8016032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016036:	d104      	bne.n	8016042 <EC200_Key_Update+0x76>
		printc(MinDelay, "Wrong data received\n");
 8016038:	4963      	ldr	r1, [pc, #396]	@ (80161c8 <EC200_Key_Update+0x1fc>)
 801603a:	200a      	movs	r0, #10
 801603c:	f7eb fcec 	bl	8001a18 <printc>
		return false; // it needed to be handled all return under FOTA
 8016040:	e0ba      	b.n	80161b8 <EC200_Key_Update+0x1ec>
	}
	char Rchecksum[2] = { 0 }; //
 8016042:	2300      	movs	r3, #0
 8016044:	f8a7 3428 	strh.w	r3, [r7, #1064]	@ 0x428
	char En_Data[1024] = { 0 }; // Remove const qualifier
 8016048:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 801604c:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 8016050:	2200      	movs	r2, #0
 8016052:	601a      	str	r2, [r3, #0]
 8016054:	3304      	adds	r3, #4
 8016056:	f44f 727f 	mov.w	r2, #1020	@ 0x3fc
 801605a:	2100      	movs	r1, #0
 801605c:	4618      	mov	r0, r3
 801605e:	f008 fed7 	bl	801ee10 <memset>
	const char *extracted_Data[6] = { 0 };
 8016062:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8016066:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 801606a:	461a      	mov	r2, r3
 801606c:	2300      	movs	r3, #0
 801606e:	6013      	str	r3, [r2, #0]
 8016070:	6053      	str	r3, [r2, #4]
 8016072:	6093      	str	r3, [r2, #8]
 8016074:	60d3      	str	r3, [r2, #12]
 8016076:	6113      	str	r3, [r2, #16]
 8016078:	6153      	str	r3, [r2, #20]
	do {
		FOTA_Seprate_String(resBuff, result, 10, extracted_Data, En_Data);
 801607a:	f107 0210 	add.w	r2, r7, #16
 801607e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8016082:	9300      	str	r3, [sp, #0]
 8016084:	4613      	mov	r3, r2
 8016086:	220a      	movs	r2, #10
 8016088:	f8d7 142c 	ldr.w	r1, [r7, #1068]	@ 0x42c
 801608c:	484d      	ldr	r0, [pc, #308]	@ (80161c4 <EC200_Key_Update+0x1f8>)
 801608e:	f001 fcd3 	bl	8017a38 <FOTA_Seprate_String>
		if (extracted_Data[5] == NULL) {
 8016092:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8016096:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 801609a:	695b      	ldr	r3, [r3, #20]
 801609c:	2b00      	cmp	r3, #0
 801609e:	d104      	bne.n	80160aa <EC200_Key_Update+0xde>
			printc(MinDelay, "No Checksum\n");
 80160a0:	494a      	ldr	r1, [pc, #296]	@ (80161cc <EC200_Key_Update+0x200>)
 80160a2:	200a      	movs	r0, #10
 80160a4:	f7eb fcb8 	bl	8001a18 <printc>
			return false;
 80160a8:	e086      	b.n	80161b8 <EC200_Key_Update+0x1ec>
		}
		memcpy(Rchecksum, extracted_Data[5], 2);
 80160aa:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 80160ae:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 80160b2:	695b      	ldr	r3, [r3, #20]
 80160b4:	881b      	ldrh	r3, [r3, #0]
 80160b6:	b29b      	uxth	r3, r3
 80160b8:	f8a7 3428 	strh.w	r3, [r7, #1064]	@ 0x428
//		strncpy(En_Data, extracted_Data[4], strlen(extracted_Data[4]));

	} while (extracted_Data[5] == NULL);
 80160bc:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 80160c0:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 80160c4:	695b      	ldr	r3, [r3, #20]
 80160c6:	2b00      	cmp	r3, #0
 80160c8:	d0d7      	beq.n	801607a <EC200_Key_Update+0xae>

	KeyID = atoi(extracted_Data[3]); // Convert string to integer
 80160ca:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 80160ce:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 80160d2:	68db      	ldr	r3, [r3, #12]
 80160d4:	4618      	mov	r0, r3
 80160d6:	f006 fe26 	bl	801cd26 <atoi>
 80160da:	f8c7 0430 	str.w	r0, [r7, #1072]	@ 0x430

	char CSUM = Calculate_CRC8(En_Data, strlen(En_Data));
 80160de:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80160e2:	4618      	mov	r0, r3
 80160e4:	f7ea f8de 	bl	80002a4 <strlen>
 80160e8:	4602      	mov	r2, r0
 80160ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80160ee:	4611      	mov	r1, r2
 80160f0:	4618      	mov	r0, r3
 80160f2:	f001 fd33 	bl	8017b5c <Calculate_CRC8>
 80160f6:	4603      	mov	r3, r0
 80160f8:	f887 342b 	strb.w	r3, [r7, #1067]	@ 0x42b
	char Cksum[3] = { 0 }; // Since CSUM is one byte, the buffer should be able to hold two characters plus the null terminator
 80160fc:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8016100:	f2a3 432c 	subw	r3, r3, #1068	@ 0x42c
 8016104:	4a32      	ldr	r2, [pc, #200]	@ (80161d0 <EC200_Key_Update+0x204>)
 8016106:	8812      	ldrh	r2, [r2, #0]
 8016108:	801a      	strh	r2, [r3, #0]
 801610a:	2200      	movs	r2, #0
 801610c:	709a      	strb	r2, [r3, #2]

	sprintf(Cksum, "%0X", CSUM); // Convert CSUM to hexadecimal and store it in Cksum
 801610e:	f897 242b 	ldrb.w	r2, [r7, #1067]	@ 0x42b
 8016112:	f107 030c 	add.w	r3, r7, #12
 8016116:	492f      	ldr	r1, [pc, #188]	@ (80161d4 <EC200_Key_Update+0x208>)
 8016118:	4618      	mov	r0, r3
 801611a:	f008 fd1d 	bl	801eb58 <siprintf>
	clearBuffer(Decrypt_d, sizeof(Decrypt_d));
 801611e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8016122:	482d      	ldr	r0, [pc, #180]	@ (80161d8 <EC200_Key_Update+0x20c>)
 8016124:	f7eb fcd0 	bl	8001ac8 <clearBuffer>
	if (Rchecksum[0] == Cksum[0] && Rchecksum[1] == Cksum[1]) { // Compare Cksum with Rchecksum
 8016128:	f897 2428 	ldrb.w	r2, [r7, #1064]	@ 0x428
 801612c:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8016130:	f2a3 432c 	subw	r3, r3, #1068	@ 0x42c
 8016134:	781b      	ldrb	r3, [r3, #0]
 8016136:	429a      	cmp	r2, r3
 8016138:	d111      	bne.n	801615e <EC200_Key_Update+0x192>
 801613a:	f897 2429 	ldrb.w	r2, [r7, #1065]	@ 0x429
 801613e:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8016142:	f2a3 432c 	subw	r3, r3, #1068	@ 0x42c
 8016146:	785b      	ldrb	r3, [r3, #1]
 8016148:	429a      	cmp	r2, r3
 801614a:	d108      	bne.n	801615e <EC200_Key_Update+0x192>
		k_Decrypt(En_Data, Decrypt_d, KeyID);
 801614c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8016150:	f8d7 2430 	ldr.w	r2, [r7, #1072]	@ 0x430
 8016154:	4920      	ldr	r1, [pc, #128]	@ (80161d8 <EC200_Key_Update+0x20c>)
 8016156:	4618      	mov	r0, r3
 8016158:	f7ec f8c4 	bl	80022e4 <k_Decrypt>
	if (Rchecksum[0] == Cksum[0] && Rchecksum[1] == Cksum[1]) { // Compare Cksum with Rchecksum
 801615c:	e003      	b.n	8016166 <EC200_Key_Update+0x19a>
	} else {
		printc(MinDelay, "CheckSum Don't Matched\n");
 801615e:	491f      	ldr	r1, [pc, #124]	@ (80161dc <EC200_Key_Update+0x210>)
 8016160:	200a      	movs	r0, #10
 8016162:	f7eb fc59 	bl	8001a18 <printc>
//			Decrypt(En_Data, Decrypt_d, KeyID);
	}
//		memset(rx_buffer, 0, sizeof(rx_buffer)); // Clear rx_buffer
	clearBuffer(ComKeys, sizeof(ComKeys));
 8016166:	f44f 7184 	mov.w	r1, #264	@ 0x108
 801616a:	481d      	ldr	r0, [pc, #116]	@ (80161e0 <EC200_Key_Update+0x214>)
 801616c:	f7eb fcac 	bl	8001ac8 <clearBuffer>
	extractKeys(Decrypt_d, ComKeys);
 8016170:	491b      	ldr	r1, [pc, #108]	@ (80161e0 <EC200_Key_Update+0x214>)
 8016172:	4819      	ldr	r0, [pc, #100]	@ (80161d8 <EC200_Key_Update+0x20c>)
 8016174:	f001 fbfc 	bl	8017970 <extractKeys>
	UPDATE_COMKeys();
 8016178:	f002 fe52 	bl	8018e20 <UPDATE_COMKeys>
	// Print Function For Keys
	for (int i = 0; i < 8; i++) {
 801617c:	2300      	movs	r3, #0
 801617e:	f8c7 3434 	str.w	r3, [r7, #1076]	@ 0x434
 8016182:	e013      	b.n	80161ac <EC200_Key_Update+0x1e0>
		printc(MinDelay, "Key %d: %s\n\r", i + 1, ComKeys[i]);
 8016184:	f8d7 3434 	ldr.w	r3, [r7, #1076]	@ 0x434
 8016188:	1c59      	adds	r1, r3, #1
 801618a:	f8d7 2434 	ldr.w	r2, [r7, #1076]	@ 0x434
 801618e:	4613      	mov	r3, r2
 8016190:	015b      	lsls	r3, r3, #5
 8016192:	4413      	add	r3, r2
 8016194:	4a12      	ldr	r2, [pc, #72]	@ (80161e0 <EC200_Key_Update+0x214>)
 8016196:	4413      	add	r3, r2
 8016198:	460a      	mov	r2, r1
 801619a:	4912      	ldr	r1, [pc, #72]	@ (80161e4 <EC200_Key_Update+0x218>)
 801619c:	200a      	movs	r0, #10
 801619e:	f7eb fc3b 	bl	8001a18 <printc>
	for (int i = 0; i < 8; i++) {
 80161a2:	f8d7 3434 	ldr.w	r3, [r7, #1076]	@ 0x434
 80161a6:	3301      	adds	r3, #1
 80161a8:	f8c7 3434 	str.w	r3, [r7, #1076]	@ 0x434
 80161ac:	f8d7 3434 	ldr.w	r3, [r7, #1076]	@ 0x434
 80161b0:	2b07      	cmp	r3, #7
 80161b2:	dde7      	ble.n	8016184 <EC200_Key_Update+0x1b8>
 80161b4:	e000      	b.n	80161b8 <EC200_Key_Update+0x1ec>
			return false;
 80161b6:	bf00      	nop
	}

}
 80161b8:	f507 6787 	add.w	r7, r7, #1080	@ 0x438
 80161bc:	46bd      	mov	sp, r7
 80161be:	bd80      	pop	{r7, pc}
 80161c0:	20014ab4 	.word	0x20014ab4
 80161c4:	200142b4 	.word	0x200142b4
 80161c8:	08022a80 	.word	0x08022a80
 80161cc:	08022a98 	.word	0x08022a98
 80161d0:	08022ac4 	.word	0x08022ac4
 80161d4:	08022aa8 	.word	0x08022aa8
 80161d8:	20013eb4 	.word	0x20013eb4
 80161dc:	08022ac8 	.word	0x08022ac8
 80161e0:	20014b54 	.word	0x20014b54
 80161e4:	08022ae0 	.word	0x08022ae0

080161e8 <EC200_Config_Update>:


bool EC200_Config_Update(const char *command) {
 80161e8:	b580      	push	{r7, lr}
 80161ea:	f5ad 6d87 	sub.w	sp, sp, #1080	@ 0x438
 80161ee:	af02      	add	r7, sp, #8
 80161f0:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 80161f4:	f2a3 432c 	subw	r3, r3, #1068	@ 0x42c
 80161f8:	6018      	str	r0, [r3, #0]

clearResBuff();
 80161fa:	f7ff fd0b 	bl	8015c14 <clearResBuff>
redoCounter = 0;
 80161fe:	4b66      	ldr	r3, [pc, #408]	@ (8016398 <EC200_Config_Update+0x1b0>)
 8016200:	2200      	movs	r2, #0
 8016202:	601a      	str	r2, [r3, #0]
readURL: if (!EC200_Transmit(command, resBuff, 5000)) {
 8016204:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 8016208:	f2a3 432c 	subw	r3, r3, #1068	@ 0x42c
 801620c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8016210:	4962      	ldr	r1, [pc, #392]	@ (801639c <EC200_Config_Update+0x1b4>)
 8016212:	6818      	ldr	r0, [r3, #0]
 8016214:	f7ea ffca 	bl	80011ac <EC200_Transmit>
 8016218:	4603      	mov	r3, r0
 801621a:	f083 0301 	eor.w	r3, r3, #1
 801621e:	b2db      	uxtb	r3, r3
 8016220:	2b00      	cmp	r3, #0
 8016222:	d00b      	beq.n	801623c <EC200_Config_Update+0x54>
	if (redoCounter >= 3) {
 8016224:	4b5c      	ldr	r3, [pc, #368]	@ (8016398 <EC200_Config_Update+0x1b0>)
 8016226:	681b      	ldr	r3, [r3, #0]
 8016228:	2b02      	cmp	r3, #2
 801622a:	dd01      	ble.n	8016230 <EC200_Config_Update+0x48>
		return false;
 801622c:	2300      	movs	r3, #0
 801622e:	e0ad      	b.n	801638c <EC200_Config_Update+0x1a4>
	}
	redoCounter++;
 8016230:	4b59      	ldr	r3, [pc, #356]	@ (8016398 <EC200_Config_Update+0x1b0>)
 8016232:	681b      	ldr	r3, [r3, #0]
 8016234:	3301      	adds	r3, #1
 8016236:	4a58      	ldr	r2, [pc, #352]	@ (8016398 <EC200_Config_Update+0x1b0>)
 8016238:	6013      	str	r3, [r2, #0]
	goto readURL;
 801623a:	e7e3      	b.n	8016204 <EC200_Config_Update+0x1c>
}
int KeyID = 0; // Corrected to int
 801623c:	2300      	movs	r3, #0
 801623e:	f8c7 342c 	str.w	r3, [r7, #1068]	@ 0x42c
int result = Response_Check(resBuff);
 8016242:	4856      	ldr	r0, [pc, #344]	@ (801639c <EC200_Config_Update+0x1b4>)
 8016244:	f001 fb3c 	bl	80178c0 <Response_Check>
 8016248:	f8c7 0428 	str.w	r0, [r7, #1064]	@ 0x428
if (result == -1) {
 801624c:	f8d7 3428 	ldr.w	r3, [r7, #1064]	@ 0x428
 8016250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016254:	d105      	bne.n	8016262 <EC200_Config_Update+0x7a>
	printc(MinDelay, "Wrong data received\n");
 8016256:	4952      	ldr	r1, [pc, #328]	@ (80163a0 <EC200_Config_Update+0x1b8>)
 8016258:	200a      	movs	r0, #10
 801625a:	f7eb fbdd 	bl	8001a18 <printc>
	return false; // it needed to be handled all return under FOTA
 801625e:	2300      	movs	r3, #0
 8016260:	e094      	b.n	801638c <EC200_Config_Update+0x1a4>
}
char Rchecksum[2] = { 0 }; //
 8016262:	2300      	movs	r3, #0
 8016264:	f8a7 3424 	strh.w	r3, [r7, #1060]	@ 0x424
char En_Data[1024] = { 0 }; // Remove const qualifier
 8016268:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 801626c:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 8016270:	2200      	movs	r2, #0
 8016272:	601a      	str	r2, [r3, #0]
 8016274:	3304      	adds	r3, #4
 8016276:	f44f 727f 	mov.w	r2, #1020	@ 0x3fc
 801627a:	2100      	movs	r1, #0
 801627c:	4618      	mov	r0, r3
 801627e:	f008 fdc7 	bl	801ee10 <memset>
const char *extracted_Data[6] = { 0 };
 8016282:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 8016286:	f2a3 4324 	subw	r3, r3, #1060	@ 0x424
 801628a:	461a      	mov	r2, r3
 801628c:	2300      	movs	r3, #0
 801628e:	6013      	str	r3, [r2, #0]
 8016290:	6053      	str	r3, [r2, #4]
 8016292:	6093      	str	r3, [r2, #8]
 8016294:	60d3      	str	r3, [r2, #12]
 8016296:	6113      	str	r3, [r2, #16]
 8016298:	6153      	str	r3, [r2, #20]
do {
	FOTA_Seprate_String(resBuff, result, 10, extracted_Data, En_Data);
 801629a:	f107 020c 	add.w	r2, r7, #12
 801629e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80162a2:	9300      	str	r3, [sp, #0]
 80162a4:	4613      	mov	r3, r2
 80162a6:	220a      	movs	r2, #10
 80162a8:	f8d7 1428 	ldr.w	r1, [r7, #1064]	@ 0x428
 80162ac:	483b      	ldr	r0, [pc, #236]	@ (801639c <EC200_Config_Update+0x1b4>)
 80162ae:	f001 fbc3 	bl	8017a38 <FOTA_Seprate_String>
	if (extracted_Data[5] == NULL) {
 80162b2:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 80162b6:	f2a3 4324 	subw	r3, r3, #1060	@ 0x424
 80162ba:	695b      	ldr	r3, [r3, #20]
 80162bc:	2b00      	cmp	r3, #0
 80162be:	d105      	bne.n	80162cc <EC200_Config_Update+0xe4>
		printc(MinDelay, "No Checksum\n");
 80162c0:	4938      	ldr	r1, [pc, #224]	@ (80163a4 <EC200_Config_Update+0x1bc>)
 80162c2:	200a      	movs	r0, #10
 80162c4:	f7eb fba8 	bl	8001a18 <printc>
		return false;
 80162c8:	2300      	movs	r3, #0
 80162ca:	e05f      	b.n	801638c <EC200_Config_Update+0x1a4>
	}
	memcpy(Rchecksum, extracted_Data[5], 2);
 80162cc:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 80162d0:	f2a3 4324 	subw	r3, r3, #1060	@ 0x424
 80162d4:	695b      	ldr	r3, [r3, #20]
 80162d6:	881b      	ldrh	r3, [r3, #0]
 80162d8:	b29b      	uxth	r3, r3
 80162da:	f8a7 3424 	strh.w	r3, [r7, #1060]	@ 0x424
	//		strncpy(En_Data, extracted_Data[4], strlen(extracted_Data[4]));

} while (extracted_Data[5] == NULL);
 80162de:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 80162e2:	f2a3 4324 	subw	r3, r3, #1060	@ 0x424
 80162e6:	695b      	ldr	r3, [r3, #20]
 80162e8:	2b00      	cmp	r3, #0
 80162ea:	d0d6      	beq.n	801629a <EC200_Config_Update+0xb2>

KeyID = atoi(extracted_Data[3]); // Convert string to integer
 80162ec:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 80162f0:	f2a3 4324 	subw	r3, r3, #1060	@ 0x424
 80162f4:	68db      	ldr	r3, [r3, #12]
 80162f6:	4618      	mov	r0, r3
 80162f8:	f006 fd15 	bl	801cd26 <atoi>
 80162fc:	f8c7 042c 	str.w	r0, [r7, #1068]	@ 0x42c

char CSUM = Calculate_CRC8(En_Data, strlen(En_Data));
 8016300:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8016304:	4618      	mov	r0, r3
 8016306:	f7e9 ffcd 	bl	80002a4 <strlen>
 801630a:	4602      	mov	r2, r0
 801630c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8016310:	4611      	mov	r1, r2
 8016312:	4618      	mov	r0, r3
 8016314:	f001 fc22 	bl	8017b5c <Calculate_CRC8>
 8016318:	4603      	mov	r3, r0
 801631a:	f887 3427 	strb.w	r3, [r7, #1063]	@ 0x427
char Cksum[3] = { 0 }; // Since CSUM is one byte, the buffer should be able to hold two characters plus the null terminator
 801631e:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 8016322:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 8016326:	4a20      	ldr	r2, [pc, #128]	@ (80163a8 <EC200_Config_Update+0x1c0>)
 8016328:	8812      	ldrh	r2, [r2, #0]
 801632a:	801a      	strh	r2, [r3, #0]
 801632c:	2200      	movs	r2, #0
 801632e:	709a      	strb	r2, [r3, #2]

sprintf(Cksum, "%0X", CSUM); // Convert CSUM to hexadecimal and store it in Cksum
 8016330:	f897 2427 	ldrb.w	r2, [r7, #1063]	@ 0x427
 8016334:	f107 0308 	add.w	r3, r7, #8
 8016338:	491c      	ldr	r1, [pc, #112]	@ (80163ac <EC200_Config_Update+0x1c4>)
 801633a:	4618      	mov	r0, r3
 801633c:	f008 fc0c 	bl	801eb58 <siprintf>
clearBuffer(Decrypt_d, sizeof(Decrypt_d));
 8016340:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8016344:	481a      	ldr	r0, [pc, #104]	@ (80163b0 <EC200_Config_Update+0x1c8>)
 8016346:	f7eb fbbf 	bl	8001ac8 <clearBuffer>
if (Rchecksum[0] != Cksum[0] && Rchecksum[1] != Cksum[1]) { // Compare Cksum with Rchecksum
 801634a:	f897 2424 	ldrb.w	r2, [r7, #1060]	@ 0x424
 801634e:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 8016352:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 8016356:	781b      	ldrb	r3, [r3, #0]
 8016358:	429a      	cmp	r2, r3
 801635a:	d00e      	beq.n	801637a <EC200_Config_Update+0x192>
 801635c:	f897 2425 	ldrb.w	r2, [r7, #1061]	@ 0x425
 8016360:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 8016364:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 8016368:	785b      	ldrb	r3, [r3, #1]
 801636a:	429a      	cmp	r2, r3
 801636c:	d005      	beq.n	801637a <EC200_Config_Update+0x192>
	printc(MinDelay, "Check sum not matched\n");
 801636e:	4911      	ldr	r1, [pc, #68]	@ (80163b4 <EC200_Config_Update+0x1cc>)
 8016370:	200a      	movs	r0, #10
 8016372:	f7eb fb51 	bl	8001a18 <printc>
	return false;
 8016376:	2300      	movs	r3, #0
 8016378:	e008      	b.n	801638c <EC200_Config_Update+0x1a4>
}
Decrypt(En_Data, Decrypt_d, KeyID);
 801637a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801637e:	f8d7 242c 	ldr.w	r2, [r7, #1068]	@ 0x42c
 8016382:	490b      	ldr	r1, [pc, #44]	@ (80163b0 <EC200_Config_Update+0x1c8>)
 8016384:	4618      	mov	r0, r3
 8016386:	f7eb fe7d 	bl	8002084 <Decrypt>

return true;
 801638a:	2301      	movs	r3, #1
}
 801638c:	4618      	mov	r0, r3
 801638e:	f507 6786 	add.w	r7, r7, #1072	@ 0x430
 8016392:	46bd      	mov	sp, r7
 8016394:	bd80      	pop	{r7, pc}
 8016396:	bf00      	nop
 8016398:	20014ab4 	.word	0x20014ab4
 801639c:	200142b4 	.word	0x200142b4
 80163a0:	08022a80 	.word	0x08022a80
 80163a4:	08022a98 	.word	0x08022a98
 80163a8:	08022ac4 	.word	0x08022ac4
 80163ac:	08022aa8 	.word	0x08022aa8
 80163b0:	20013eb4 	.word	0x20013eb4
 80163b4:	08022aac 	.word	0x08022aac

080163b8 <GetSector>:
int packet_size = 1024;
int Total_Packets =200;
 uint8_t FOTABuffer[1024];
FLASH_EraseInitTypeDef EraseInitStruct;  // Erase structure

uint32_t GetSector(uint32_t Address) {
 80163b8:	b480      	push	{r7}
 80163ba:	b085      	sub	sp, #20
 80163bc:	af00      	add	r7, sp, #0
 80163be:	6078      	str	r0, [r7, #4]
	uint32_t sector = 0;
 80163c0:	2300      	movs	r3, #0
 80163c2:	60fb      	str	r3, [r7, #12]

	if ((Address >= FLASH_BASE) && (Address < FLASH_BASE + 0x100000)) {
 80163c4:	687b      	ldr	r3, [r7, #4]
 80163c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80163ca:	d309      	bcc.n	80163e0 <GetSector+0x28>
 80163cc:	687b      	ldr	r3, [r7, #4]
 80163ce:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 80163d2:	d205      	bcs.n	80163e0 <GetSector+0x28>
		sector = (Address & ~FLASH_BASE) / FLASH_SECTOR_SIZE;
 80163d4:	687b      	ldr	r3, [r7, #4]
 80163d6:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 80163da:	0b5b      	lsrs	r3, r3, #13
 80163dc:	60fb      	str	r3, [r7, #12]
 80163de:	e012      	b.n	8016406 <GetSector+0x4e>
	} else if ((Address >= FLASH_BASE + 0x100000)
 80163e0:	687b      	ldr	r3, [r7, #4]
 80163e2:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 80163e6:	d30b      	bcc.n	8016400 <GetSector+0x48>
			&& (Address < FLASH_BASE + 0x200000)) {
 80163e8:	687b      	ldr	r3, [r7, #4]
 80163ea:	f1b3 6f02 	cmp.w	r3, #136314880	@ 0x8200000
 80163ee:	d207      	bcs.n	8016400 <GetSector+0x48>
		sector =
				((Address & ~FLASH_BASE) - 0x100000) / FLASH_SECTOR_SIZE;
 80163f0:	687b      	ldr	r3, [r7, #4]
 80163f2:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 80163f6:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
		sector =
 80163fa:	0b5b      	lsrs	r3, r3, #13
 80163fc:	60fb      	str	r3, [r7, #12]
 80163fe:	e002      	b.n	8016406 <GetSector+0x4e>
	} else {
		sector = 0xFFFFFFFF; /* Address out of range */
 8016400:	f04f 33ff 	mov.w	r3, #4294967295
 8016404:	60fb      	str	r3, [r7, #12]
	}

	return sector;
 8016406:	68fb      	ldr	r3, [r7, #12]
}
 8016408:	4618      	mov	r0, r3
 801640a:	3714      	adds	r7, #20
 801640c:	46bd      	mov	sp, r7
 801640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016412:	4770      	bx	lr

08016414 <GetBank>:
/**
 * @brief  Gets the bank of a given address
 * @param  Addr: Address of the FLASH Memory
 * @retval The bank of a given address
 */
uint32_t GetBank(uint32_t Addr) {
 8016414:	b480      	push	{r7}
 8016416:	b085      	sub	sp, #20
 8016418:	af00      	add	r7, sp, #0
 801641a:	6078      	str	r0, [r7, #4]
	uint32_t bank = 0;
 801641c:	2300      	movs	r3, #0
 801641e:	60fb      	str	r3, [r7, #12]

	if (READ_BIT(FLASH->OPTSR_CUR, FLASH_OPTSR_SWAP_BANK) == 0) {
 8016420:	4b0e      	ldr	r3, [pc, #56]	@ (801645c <GetBank+0x48>)
 8016422:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016424:	2b00      	cmp	r3, #0
 8016426:	db09      	blt.n	801643c <GetBank+0x28>
		/* No Bank swap */
		if (Addr < (FLASH_BASE + 0x100000)) {
 8016428:	687b      	ldr	r3, [r7, #4]
 801642a:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 801642e:	d202      	bcs.n	8016436 <GetBank+0x22>
			bank = FLASH_BANK_1;
 8016430:	2301      	movs	r3, #1
 8016432:	60fb      	str	r3, [r7, #12]
 8016434:	e00b      	b.n	801644e <GetBank+0x3a>
		} else {
			bank = FLASH_BANK_2;
 8016436:	2302      	movs	r3, #2
 8016438:	60fb      	str	r3, [r7, #12]
 801643a:	e008      	b.n	801644e <GetBank+0x3a>
		}
	} else {
		/* Bank swap */
		if (Addr < (FLASH_BASE + 0x100000)) {
 801643c:	687b      	ldr	r3, [r7, #4]
 801643e:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 8016442:	d202      	bcs.n	801644a <GetBank+0x36>
			bank = FLASH_BANK_2;
 8016444:	2302      	movs	r3, #2
 8016446:	60fb      	str	r3, [r7, #12]
 8016448:	e001      	b.n	801644e <GetBank+0x3a>
		} else {
			bank = FLASH_BANK_1;
 801644a:	2301      	movs	r3, #1
 801644c:	60fb      	str	r3, [r7, #12]
		}
	}

	return bank;
 801644e:	68fb      	ldr	r3, [r7, #12]
}
 8016450:	4618      	mov	r0, r3
 8016452:	3714      	adds	r7, #20
 8016454:	46bd      	mov	sp, r7
 8016456:	f85d 7b04 	ldr.w	r7, [sp], #4
 801645a:	4770      	bx	lr
 801645c:	40022000 	.word	0x40022000

08016460 <HAL_FLASH_ERASE>:
		}
	}
	return FailCounter;
}

void HAL_FLASH_ERASE(uint32_t FlashEraseAddress) {
 8016460:	b580      	push	{r7, lr}
 8016462:	b082      	sub	sp, #8
 8016464:	af00      	add	r7, sp, #0
 8016466:	6078      	str	r0, [r7, #4]
	// uint32_t SectorError = 0, FirstSector = 0,NbOfSectors = 0, BankNumber = 0;

	FirstSector = GetSector(FlashEraseAddress);
 8016468:	6878      	ldr	r0, [r7, #4]
 801646a:	f7ff ffa5 	bl	80163b8 <GetSector>
 801646e:	4603      	mov	r3, r0
 8016470:	4a24      	ldr	r2, [pc, #144]	@ (8016504 <HAL_FLASH_ERASE+0xa4>)
 8016472:	6013      	str	r3, [r2, #0]
	NbOfSectors = GetSector(FlashEraseAddress) - FirstSector + 1;
 8016474:	6878      	ldr	r0, [r7, #4]
 8016476:	f7ff ff9f 	bl	80163b8 <GetSector>
 801647a:	4602      	mov	r2, r0
 801647c:	4b21      	ldr	r3, [pc, #132]	@ (8016504 <HAL_FLASH_ERASE+0xa4>)
 801647e:	681b      	ldr	r3, [r3, #0]
 8016480:	1ad3      	subs	r3, r2, r3
 8016482:	3301      	adds	r3, #1
 8016484:	4a20      	ldr	r2, [pc, #128]	@ (8016508 <HAL_FLASH_ERASE+0xa8>)
 8016486:	6013      	str	r3, [r2, #0]
	BankNumber = GetBank(FlashEraseAddress);
 8016488:	6878      	ldr	r0, [r7, #4]
 801648a:	f7ff ffc3 	bl	8016414 <GetBank>
 801648e:	4603      	mov	r3, r0
 8016490:	4a1e      	ldr	r2, [pc, #120]	@ (801650c <HAL_FLASH_ERASE+0xac>)
 8016492:	6013      	str	r3, [r2, #0]
	/* Fill EraseInit structure*/
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8016494:	4b1e      	ldr	r3, [pc, #120]	@ (8016510 <HAL_FLASH_ERASE+0xb0>)
 8016496:	2204      	movs	r2, #4
 8016498:	601a      	str	r2, [r3, #0]
	EraseInitStruct.Banks = BankNumber;
 801649a:	4b1c      	ldr	r3, [pc, #112]	@ (801650c <HAL_FLASH_ERASE+0xac>)
 801649c:	681b      	ldr	r3, [r3, #0]
 801649e:	4a1c      	ldr	r2, [pc, #112]	@ (8016510 <HAL_FLASH_ERASE+0xb0>)
 80164a0:	6053      	str	r3, [r2, #4]
	EraseInitStruct.Sector = FirstSector;
 80164a2:	4b18      	ldr	r3, [pc, #96]	@ (8016504 <HAL_FLASH_ERASE+0xa4>)
 80164a4:	681b      	ldr	r3, [r3, #0]
 80164a6:	4a1a      	ldr	r2, [pc, #104]	@ (8016510 <HAL_FLASH_ERASE+0xb0>)
 80164a8:	6093      	str	r3, [r2, #8]
	EraseInitStruct.NbSectors = NbOfSectors;
 80164aa:	4b17      	ldr	r3, [pc, #92]	@ (8016508 <HAL_FLASH_ERASE+0xa8>)
 80164ac:	681b      	ldr	r3, [r3, #0]
 80164ae:	4a18      	ldr	r2, [pc, #96]	@ (8016510 <HAL_FLASH_ERASE+0xb0>)
 80164b0:	60d3      	str	r3, [r2, #12]
	HAL_FLASH_Unlock();
 80164b2:	f7f4 fe0d 	bl	800b0d0 <HAL_FLASH_Unlock>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 80164b6:	4b17      	ldr	r3, [pc, #92]	@ (8016514 <HAL_FLASH_ERASE+0xb4>)
 80164b8:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80164bc:	4a15      	ldr	r2, [pc, #84]	@ (8016514 <HAL_FLASH_ERASE+0xb4>)
 80164be:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80164c2:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
 80164c6:	4b13      	ldr	r3, [pc, #76]	@ (8016514 <HAL_FLASH_ERASE+0xb4>)
 80164c8:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80164cc:	4a11      	ldr	r2, [pc, #68]	@ (8016514 <HAL_FLASH_ERASE+0xb4>)
 80164ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80164d2:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 80164d6:	4b0f      	ldr	r3, [pc, #60]	@ (8016514 <HAL_FLASH_ERASE+0xb4>)
 80164d8:	f44f 027e 	mov.w	r2, #16646144	@ 0xfe0000
 80164dc:	631a      	str	r2, [r3, #48]	@ 0x30
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError) != HAL_OK) {
 80164de:	490e      	ldr	r1, [pc, #56]	@ (8016518 <HAL_FLASH_ERASE+0xb8>)
 80164e0:	480b      	ldr	r0, [pc, #44]	@ (8016510 <HAL_FLASH_ERASE+0xb0>)
 80164e2:	f7f4 ff61 	bl	800b3a8 <HAL_FLASHEx_Erase>
 80164e6:	4603      	mov	r3, r0
 80164e8:	2b00      	cmp	r3, #0
 80164ea:	d001      	beq.n	80164f0 <HAL_FLASH_ERASE+0x90>
		Error_Handler();
 80164ec:	f7ee f937 	bl	800475e <Error_Handler>
	}
	FLASH_WaitForLastOperation((uint32_t) FLASH_TIMEOUT_VALUE);
 80164f0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80164f4:	f7f4 fe68 	bl	800b1c8 <FLASH_WaitForLastOperation>
	HAL_FLASH_Lock();
 80164f8:	f7f4 fe10 	bl	800b11c <HAL_FLASH_Lock>
}
 80164fc:	bf00      	nop
 80164fe:	3708      	adds	r7, #8
 8016500:	46bd      	mov	sp, r7
 8016502:	bd80      	pop	{r7, pc}
 8016504:	20014ab8 	.word	0x20014ab8
 8016508:	20014abc 	.word	0x20014abc
 801650c:	20014ac0 	.word	0x20014ac0
 8016510:	20014acc 	.word	0x20014acc
 8016514:	40022000 	.word	0x40022000
 8016518:	20014ac4 	.word	0x20014ac4

0801651c <HAL_FLASH_Write_Buff>:

void HAL_FLASH_Write_Buff(uint32_t FlashAddress, uint8_t *Data,
		uint32_t DataSize) {
 801651c:	b580      	push	{r7, lr}
 801651e:	b08c      	sub	sp, #48	@ 0x30
 8016520:	af00      	add	r7, sp, #0
 8016522:	60f8      	str	r0, [r7, #12]
 8016524:	60b9      	str	r1, [r7, #8]
 8016526:	607a      	str	r2, [r7, #4]
	uint32_t LoopCnt = DataSize / 16; // Calculate the number of sets of 4 quad-words
 8016528:	687b      	ldr	r3, [r7, #4]
 801652a:	091b      	lsrs	r3, r3, #4
 801652c:	627b      	str	r3, [r7, #36]	@ 0x24
	uint64_t FlashData[2] = { 0 }; // Allocate memory for FlashData array
 801652e:	f107 0310 	add.w	r3, r7, #16
 8016532:	2200      	movs	r2, #0
 8016534:	601a      	str	r2, [r3, #0]
 8016536:	605a      	str	r2, [r3, #4]
 8016538:	609a      	str	r2, [r3, #8]
 801653a:	60da      	str	r2, [r3, #12]
	// Unlock flash memory before writing
	HAL_FLASH_Unlock();
 801653c:	f7f4 fdc8 	bl	800b0d0 <HAL_FLASH_Unlock>

	for (int l = 0; l < LoopCnt; l++) {
 8016540:	2300      	movs	r3, #0
 8016542:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016544:	e026      	b.n	8016594 <HAL_FLASH_Write_Buff+0x78>
		// Copy 8 bytes at a time from Data to FlashData
		for (int j = 0; j < 2; j++) {
 8016546:	2300      	movs	r3, #0
 8016548:	62bb      	str	r3, [r7, #40]	@ 0x28
 801654a:	e013      	b.n	8016574 <HAL_FLASH_Write_Buff+0x58>

			memcpy(&FlashData[j], &Data[((l * 16) + (j * 8))], 8);
 801654c:	f107 0210 	add.w	r2, r7, #16
 8016550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016552:	00db      	lsls	r3, r3, #3
 8016554:	18d0      	adds	r0, r2, r3
 8016556:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016558:	005a      	lsls	r2, r3, #1
 801655a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801655c:	4413      	add	r3, r2
 801655e:	00db      	lsls	r3, r3, #3
 8016560:	461a      	mov	r2, r3
 8016562:	68bb      	ldr	r3, [r7, #8]
 8016564:	4413      	add	r3, r2
 8016566:	2208      	movs	r2, #8
 8016568:	4619      	mov	r1, r3
 801656a:	f008 fdc4 	bl	801f0f6 <memcpy>
		for (int j = 0; j < 2; j++) {
 801656e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016570:	3301      	adds	r3, #1
 8016572:	62bb      	str	r3, [r7, #40]	@ 0x28
 8016574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016576:	2b01      	cmp	r3, #1
 8016578:	dde8      	ble.n	801654c <HAL_FLASH_Write_Buff+0x30>

		}
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_QUADWORD, FlashAddress, FlashData);
 801657a:	f107 0310 	add.w	r3, r7, #16
 801657e:	461a      	mov	r2, r3
 8016580:	68f9      	ldr	r1, [r7, #12]
 8016582:	2002      	movs	r0, #2
 8016584:	f7f4 fd2c 	bl	800afe0 <HAL_FLASH_Program>

		// Increment address for the next set of quad-words
		FlashAddress += 16; // Increment by 32 bytes (4 quad-words)
 8016588:	68fb      	ldr	r3, [r7, #12]
 801658a:	3310      	adds	r3, #16
 801658c:	60fb      	str	r3, [r7, #12]
	for (int l = 0; l < LoopCnt; l++) {
 801658e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016590:	3301      	adds	r3, #1
 8016592:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016596:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016598:	429a      	cmp	r2, r3
 801659a:	d8d4      	bhi.n	8016546 <HAL_FLASH_Write_Buff+0x2a>

	}

	// Lock flash memory after writing
	HAL_FLASH_Lock();
 801659c:	f7f4 fdbe 	bl	800b11c <HAL_FLASH_Lock>
}
 80165a0:	bf00      	nop
 80165a2:	3730      	adds	r7, #48	@ 0x30
 80165a4:	46bd      	mov	sp, r7
 80165a6:	bd80      	pop	{r7, pc}

080165a8 <Erase_sectors>:


void Erase_sectors(uint32_t FlashAddress) {
 80165a8:	b580      	push	{r7, lr}
 80165aa:	b086      	sub	sp, #24
 80165ac:	af00      	add	r7, sp, #0
 80165ae:	6078      	str	r0, [r7, #4]
	uint32_t start_sector_address = FlashAddress;
 80165b0:	687b      	ldr	r3, [r7, #4]
 80165b2:	60fb      	str	r3, [r7, #12]
	uint32_t end_sector;

	// Determine the end sector based on FlashAddress
	if (FlashAddress == L2) {
 80165b4:	4b14      	ldr	r3, [pc, #80]	@ (8016608 <Erase_sectors+0x60>)
 80165b6:	681b      	ldr	r3, [r3, #0]
 80165b8:	461a      	mov	r2, r3
 80165ba:	687b      	ldr	r3, [r7, #4]
 80165bc:	4293      	cmp	r3, r2
 80165be:	d104      	bne.n	80165ca <Erase_sectors+0x22>
		end_sector = start_sector_address + (31 * FLASH_SECTOR_SIZE); // 32 sectors
 80165c0:	68fb      	ldr	r3, [r7, #12]
 80165c2:	f503 3378 	add.w	r3, r3, #253952	@ 0x3e000
 80165c6:	617b      	str	r3, [r7, #20]
 80165c8:	e00d      	b.n	80165e6 <Erase_sectors+0x3e>
	} else if (FlashAddress == L3) {
 80165ca:	4b10      	ldr	r3, [pc, #64]	@ (801660c <Erase_sectors+0x64>)
 80165cc:	681b      	ldr	r3, [r3, #0]
 80165ce:	461a      	mov	r2, r3
 80165d0:	687b      	ldr	r3, [r7, #4]
 80165d2:	4293      	cmp	r3, r2
 80165d4:	d104      	bne.n	80165e0 <Erase_sectors+0x38>
		end_sector = start_sector_address + (31 * FLASH_SECTOR_SIZE); // 32 sectors
 80165d6:	68fb      	ldr	r3, [r7, #12]
 80165d8:	f503 3378 	add.w	r3, r3, #253952	@ 0x3e000
 80165dc:	617b      	str	r3, [r7, #20]
 80165de:	e002      	b.n	80165e6 <Erase_sectors+0x3e>
	} else {
		// Handle invalid FlashAddress
		Error_Handler();
 80165e0:	f7ee f8bd 	bl	800475e <Error_Handler>
		return;
 80165e4:	e00d      	b.n	8016602 <Erase_sectors+0x5a>
	}
	// Iterate over sectors to erase
	for (uint32_t sector_address = start_sector_address;
 80165e6:	68fb      	ldr	r3, [r7, #12]
 80165e8:	613b      	str	r3, [r7, #16]
 80165ea:	e006      	b.n	80165fa <Erase_sectors+0x52>
			sector_address <= end_sector; sector_address += FLASH_SECTOR_SIZE) {
		HAL_FLASH_ERASE(sector_address); // Erase the sector
 80165ec:	6938      	ldr	r0, [r7, #16]
 80165ee:	f7ff ff37 	bl	8016460 <HAL_FLASH_ERASE>
			sector_address <= end_sector; sector_address += FLASH_SECTOR_SIZE) {
 80165f2:	693b      	ldr	r3, [r7, #16]
 80165f4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80165f8:	613b      	str	r3, [r7, #16]
 80165fa:	693a      	ldr	r2, [r7, #16]
 80165fc:	697b      	ldr	r3, [r7, #20]
 80165fe:	429a      	cmp	r2, r3
 8016600:	d9f4      	bls.n	80165ec <Erase_sectors+0x44>
	}
}
 8016602:	3718      	adds	r7, #24
 8016604:	46bd      	mov	sp, r7
 8016606:	bd80      	pop	{r7, pc}
 8016608:	2000006c 	.word	0x2000006c
 801660c:	20000070 	.word	0x20000070

08016610 <FLASH_Read_Buff>:

int FLASH_Read_Buff(uint32_t Read_Address, char Read_Buff[],
		uint32_t ReadDataSize) {
 8016610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016612:	b089      	sub	sp, #36	@ 0x24
 8016614:	af00      	add	r7, sp, #0
 8016616:	60f8      	str	r0, [r7, #12]
 8016618:	60b9      	str	r1, [r7, #8]
 801661a:	607a      	str	r2, [r7, #4]
	memset(Read_Buff, 0, sizeof(Read_Buff));
 801661c:	2204      	movs	r2, #4
 801661e:	2100      	movs	r1, #0
 8016620:	68b8      	ldr	r0, [r7, #8]
 8016622:	f008 fbf5 	bl	801ee10 <memset>
	for (uint8_t i = 0; i < ReadDataSize; i++) {
 8016626:	2300      	movs	r3, #0
 8016628:	77fb      	strb	r3, [r7, #31]
 801662a:	e030      	b.n	801668e <FLASH_Read_Buff+0x7e>
		uint64_t FlashData = (*(__IO uint64_t*) Read_Address);
 801662c:	68fb      	ldr	r3, [r7, #12]
 801662e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016632:	e9c7 2304 	strd	r2, r3, [r7, #16]
		for (uint8_t j = 0; j < 8; j++) {
 8016636:	2300      	movs	r3, #0
 8016638:	77bb      	strb	r3, [r7, #30]
 801663a:	e01c      	b.n	8016676 <FLASH_Read_Buff+0x66>
			Read_Buff[i + j] = ((FlashData >> (j * 8)) & 0xFF);
 801663c:	7fbb      	ldrb	r3, [r7, #30]
 801663e:	00d9      	lsls	r1, r3, #3
 8016640:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8016644:	f1c1 0620 	rsb	r6, r1, #32
 8016648:	f1a1 0020 	sub.w	r0, r1, #32
 801664c:	fa22 f401 	lsr.w	r4, r2, r1
 8016650:	fa03 f606 	lsl.w	r6, r3, r6
 8016654:	4334      	orrs	r4, r6
 8016656:	fa23 f000 	lsr.w	r0, r3, r0
 801665a:	4304      	orrs	r4, r0
 801665c:	fa23 f501 	lsr.w	r5, r3, r1
 8016660:	7ffa      	ldrb	r2, [r7, #31]
 8016662:	7fbb      	ldrb	r3, [r7, #30]
 8016664:	4413      	add	r3, r2
 8016666:	461a      	mov	r2, r3
 8016668:	68bb      	ldr	r3, [r7, #8]
 801666a:	4413      	add	r3, r2
 801666c:	b2e2      	uxtb	r2, r4
 801666e:	701a      	strb	r2, [r3, #0]
		for (uint8_t j = 0; j < 8; j++) {
 8016670:	7fbb      	ldrb	r3, [r7, #30]
 8016672:	3301      	adds	r3, #1
 8016674:	77bb      	strb	r3, [r7, #30]
 8016676:	7fbb      	ldrb	r3, [r7, #30]
 8016678:	2b07      	cmp	r3, #7
 801667a:	d9df      	bls.n	801663c <FLASH_Read_Buff+0x2c>
		}
		i += 7;
 801667c:	7ffb      	ldrb	r3, [r7, #31]
 801667e:	3307      	adds	r3, #7
 8016680:	77fb      	strb	r3, [r7, #31]
		Read_Address += 8;
 8016682:	68fb      	ldr	r3, [r7, #12]
 8016684:	3308      	adds	r3, #8
 8016686:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < ReadDataSize; i++) {
 8016688:	7ffb      	ldrb	r3, [r7, #31]
 801668a:	3301      	adds	r3, #1
 801668c:	77fb      	strb	r3, [r7, #31]
 801668e:	7ffb      	ldrb	r3, [r7, #31]
 8016690:	687a      	ldr	r2, [r7, #4]
 8016692:	429a      	cmp	r2, r3
 8016694:	d8ca      	bhi.n	801662c <FLASH_Read_Buff+0x1c>
	}
	return 0;
 8016696:	2300      	movs	r3, #0
}
 8016698:	4618      	mov	r0, r3
 801669a:	3724      	adds	r7, #36	@ 0x24
 801669c:	46bd      	mov	sp, r7
 801669e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080166a0 <WriteF_SKey>:

void WriteF_SKey() {
 80166a0:	b580      	push	{r7, lr}
 80166a2:	b084      	sub	sp, #16
 80166a4:	af00      	add	r7, sp, #0
	HAL_FLASH_ERASE(Config_Data);
 80166a6:	4817      	ldr	r0, [pc, #92]	@ (8016704 <WriteF_SKey+0x64>)
 80166a8:	f7ff feda 	bl	8016460 <HAL_FLASH_ERASE>
	uint32_t KAddr = S_Key_ADDR;
 80166ac:	4b16      	ldr	r3, [pc, #88]	@ (8016708 <WriteF_SKey+0x68>)
 80166ae:	60fb      	str	r3, [r7, #12]
	for (int a = 0; a < 3; a++) {
 80166b0:	2300      	movs	r3, #0
 80166b2:	60bb      	str	r3, [r7, #8]
 80166b4:	e010      	b.n	80166d8 <WriteF_SKey+0x38>
		HAL_FLASH_Write_Buff(KAddr, (uint32_t*) &StatKeys[a],
 80166b6:	68ba      	ldr	r2, [r7, #8]
 80166b8:	4613      	mov	r3, r2
 80166ba:	015b      	lsls	r3, r3, #5
 80166bc:	4413      	add	r3, r2
 80166be:	4a13      	ldr	r2, [pc, #76]	@ (801670c <WriteF_SKey+0x6c>)
 80166c0:	4413      	add	r3, r2
 80166c2:	2221      	movs	r2, #33	@ 0x21
 80166c4:	4619      	mov	r1, r3
 80166c6:	68f8      	ldr	r0, [r7, #12]
 80166c8:	f7ff ff28 	bl	801651c <HAL_FLASH_Write_Buff>
				sizeof(StatKeys[a]));
		KAddr += 32;
 80166cc:	68fb      	ldr	r3, [r7, #12]
 80166ce:	3320      	adds	r3, #32
 80166d0:	60fb      	str	r3, [r7, #12]
	for (int a = 0; a < 3; a++) {
 80166d2:	68bb      	ldr	r3, [r7, #8]
 80166d4:	3301      	adds	r3, #1
 80166d6:	60bb      	str	r3, [r7, #8]
 80166d8:	68bb      	ldr	r3, [r7, #8]
 80166da:	2b02      	cmp	r3, #2
 80166dc:	ddeb      	ble.n	80166b6 <WriteF_SKey+0x16>
	}
	for (int a = 1; a <= 3; a++)
 80166de:	2301      	movs	r3, #1
 80166e0:	607b      	str	r3, [r7, #4]
 80166e2:	e006      	b.n	80166f2 <WriteF_SKey+0x52>
		ReadF_Loc(1, a);
 80166e4:	6879      	ldr	r1, [r7, #4]
 80166e6:	2001      	movs	r0, #1
 80166e8:	f004 f92e 	bl	801a948 <ReadF_Loc>
	for (int a = 1; a <= 3; a++)
 80166ec:	687b      	ldr	r3, [r7, #4]
 80166ee:	3301      	adds	r3, #1
 80166f0:	607b      	str	r3, [r7, #4]
 80166f2:	687b      	ldr	r3, [r7, #4]
 80166f4:	2b03      	cmp	r3, #3
 80166f6:	ddf5      	ble.n	80166e4 <WriteF_SKey+0x44>
}
 80166f8:	bf00      	nop
 80166fa:	bf00      	nop
 80166fc:	3710      	adds	r7, #16
 80166fe:	46bd      	mov	sp, r7
 8016700:	bd80      	pop	{r7, pc}
 8016702:	bf00      	nop
 8016704:	08166000 	.word	0x08166000
 8016708:	08166010 	.word	0x08166010
 801670c:	20014af0 	.word	0x20014af0

08016710 <WriteF_CKey>:
void WriteF_CKey() {
 8016710:	b580      	push	{r7, lr}
 8016712:	b084      	sub	sp, #16
 8016714:	af00      	add	r7, sp, #0

	uint32_t KAddr = C_Key_ADDR;
 8016716:	4b15      	ldr	r3, [pc, #84]	@ (801676c <WriteF_CKey+0x5c>)
 8016718:	60fb      	str	r3, [r7, #12]
//		HAL_FLASH_ERASE(KAddr);
	for (int a = 0; a < 8; a++) {
 801671a:	2300      	movs	r3, #0
 801671c:	60bb      	str	r3, [r7, #8]
 801671e:	e010      	b.n	8016742 <WriteF_CKey+0x32>
		HAL_FLASH_Write_Buff(KAddr, (uint32_t*) &ComKeys[a],
 8016720:	68ba      	ldr	r2, [r7, #8]
 8016722:	4613      	mov	r3, r2
 8016724:	015b      	lsls	r3, r3, #5
 8016726:	4413      	add	r3, r2
 8016728:	4a11      	ldr	r2, [pc, #68]	@ (8016770 <WriteF_CKey+0x60>)
 801672a:	4413      	add	r3, r2
 801672c:	2221      	movs	r2, #33	@ 0x21
 801672e:	4619      	mov	r1, r3
 8016730:	68f8      	ldr	r0, [r7, #12]
 8016732:	f7ff fef3 	bl	801651c <HAL_FLASH_Write_Buff>
				sizeof(ComKeys[a]));
		KAddr += 32;
 8016736:	68fb      	ldr	r3, [r7, #12]
 8016738:	3320      	adds	r3, #32
 801673a:	60fb      	str	r3, [r7, #12]
	for (int a = 0; a < 8; a++) {
 801673c:	68bb      	ldr	r3, [r7, #8]
 801673e:	3301      	adds	r3, #1
 8016740:	60bb      	str	r3, [r7, #8]
 8016742:	68bb      	ldr	r3, [r7, #8]
 8016744:	2b07      	cmp	r3, #7
 8016746:	ddeb      	ble.n	8016720 <WriteF_CKey+0x10>
	}
	for (int a = 1; a <= 8; a++)
 8016748:	2301      	movs	r3, #1
 801674a:	607b      	str	r3, [r7, #4]
 801674c:	e006      	b.n	801675c <WriteF_CKey+0x4c>
		ReadF_Loc(2, a);
 801674e:	6879      	ldr	r1, [r7, #4]
 8016750:	2002      	movs	r0, #2
 8016752:	f004 f8f9 	bl	801a948 <ReadF_Loc>
	for (int a = 1; a <= 8; a++)
 8016756:	687b      	ldr	r3, [r7, #4]
 8016758:	3301      	adds	r3, #1
 801675a:	607b      	str	r3, [r7, #4]
 801675c:	687b      	ldr	r3, [r7, #4]
 801675e:	2b08      	cmp	r3, #8
 8016760:	ddf5      	ble.n	801674e <WriteF_CKey+0x3e>

}
 8016762:	bf00      	nop
 8016764:	bf00      	nop
 8016766:	3710      	adds	r7, #16
 8016768:	46bd      	mov	sp, r7
 801676a:	bd80      	pop	{r7, pc}
 801676c:	08166080 	.word	0x08166080
 8016770:	20014b54 	.word	0x20014b54

08016774 <writeF_CP>:

void writeF_CP(uint64_t CData, uint64_t CData2, uint64_t DData3) {
 8016774:	b580      	push	{r7, lr}
 8016776:	b088      	sub	sp, #32
 8016778:	af00      	add	r7, sp, #0
 801677a:	e9c7 0102 	strd	r0, r1, [r7, #8]
 801677e:	e9c7 2300 	strd	r2, r3, [r7]
	HAL_FLASH_ERASE(Current_App_LOC);
 8016782:	4816      	ldr	r0, [pc, #88]	@ (80167dc <writeF_CP+0x68>)
 8016784:	f7ff fe6c 	bl	8016460 <HAL_FLASH_ERASE>
	uint32_t KAddr = Current_App_LOC;
 8016788:	4b14      	ldr	r3, [pc, #80]	@ (80167dc <writeF_CP+0x68>)
 801678a:	61fb      	str	r3, [r7, #28]
	uint32_t Kaddr2 = Current_App_LOC +16;
 801678c:	4b14      	ldr	r3, [pc, #80]	@ (80167e0 <writeF_CP+0x6c>)
 801678e:	61bb      	str	r3, [r7, #24]
	uint32_t PHadr = Current_App_LOC +32;
 8016790:	4b14      	ldr	r3, [pc, #80]	@ (80167e4 <writeF_CP+0x70>)
 8016792:	617b      	str	r3, [r7, #20]
	HAL_FLASH_Unlock();
 8016794:	f7f4 fc9c 	bl	800b0d0 <HAL_FLASH_Unlock>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_QUADWORD, KAddr, &CData);
 8016798:	f107 0308 	add.w	r3, r7, #8
 801679c:	461a      	mov	r2, r3
 801679e:	69f9      	ldr	r1, [r7, #28]
 80167a0:	2002      	movs	r0, #2
 80167a2:	f7f4 fc1d 	bl	800afe0 <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 80167a6:	f7f4 fcb9 	bl	800b11c <HAL_FLASH_Lock>
	HAL_FLASH_Unlock();
 80167aa:	f7f4 fc91 	bl	800b0d0 <HAL_FLASH_Unlock>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_QUADWORD, Kaddr2, &CData2);
 80167ae:	463b      	mov	r3, r7
 80167b0:	461a      	mov	r2, r3
 80167b2:	69b9      	ldr	r1, [r7, #24]
 80167b4:	2002      	movs	r0, #2
 80167b6:	f7f4 fc13 	bl	800afe0 <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 80167ba:	f7f4 fcaf 	bl	800b11c <HAL_FLASH_Lock>
	HAL_FLASH_Unlock();
 80167be:	f7f4 fc87 	bl	800b0d0 <HAL_FLASH_Unlock>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_QUADWORD, PHadr, &DData3);
 80167c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80167c6:	461a      	mov	r2, r3
 80167c8:	6979      	ldr	r1, [r7, #20]
 80167ca:	2002      	movs	r0, #2
 80167cc:	f7f4 fc08 	bl	800afe0 <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 80167d0:	f7f4 fca4 	bl	800b11c <HAL_FLASH_Lock>


}
 80167d4:	bf00      	nop
 80167d6:	3720      	adds	r7, #32
 80167d8:	46bd      	mov	sp, r7
 80167da:	bd80      	pop	{r7, pc}
 80167dc:	08168000 	.word	0x08168000
 80167e0:	08168010 	.word	0x08168010
 80167e4:	08168020 	.word	0x08168020

080167e8 <ReadF_sKey>:
	HAL_FLASH_Unlock();
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_QUADWORD, Last_App_ver_Addr, Ver_buff);
	HAL_FLASH_Lock();
}

void ReadF_sKey(int KeyNumber) {
 80167e8:	b4f0      	push	{r4, r5, r6, r7}
 80167ea:	b08e      	sub	sp, #56	@ 0x38
 80167ec:	af00      	add	r7, sp, #0
 80167ee:	6078      	str	r0, [r7, #4]
	FlashAddress = (uint32_t) S_Key_ADDR + (32 * (KeyNumber - 1));
 80167f0:	6879      	ldr	r1, [r7, #4]
 80167f2:	3901      	subs	r1, #1
 80167f4:	0149      	lsls	r1, r1, #5
 80167f6:	4608      	mov	r0, r1
 80167f8:	492e      	ldr	r1, [pc, #184]	@ (80168b4 <ReadF_sKey+0xcc>)
 80167fa:	4401      	add	r1, r0
 80167fc:	4608      	mov	r0, r1
 80167fe:	492e      	ldr	r1, [pc, #184]	@ (80168b8 <ReadF_sKey+0xd0>)
 8016800:	6008      	str	r0, [r1, #0]
	uint8_t SKeyRbuff[32] = { 0 };
 8016802:	2100      	movs	r1, #0
 8016804:	60b9      	str	r1, [r7, #8]
 8016806:	f107 010c 	add.w	r1, r7, #12
 801680a:	2000      	movs	r0, #0
 801680c:	6008      	str	r0, [r1, #0]
 801680e:	6048      	str	r0, [r1, #4]
 8016810:	6088      	str	r0, [r1, #8]
 8016812:	60c8      	str	r0, [r1, #12]
 8016814:	6108      	str	r0, [r1, #16]
 8016816:	6148      	str	r0, [r1, #20]
 8016818:	6188      	str	r0, [r1, #24]

	for (uint8_t i = 0; i < 32; i++) {
 801681a:	2100      	movs	r1, #0
 801681c:	f887 1037 	strb.w	r1, [r7, #55]	@ 0x37
 8016820:	e03e      	b.n	80168a0 <ReadF_sKey+0xb8>
		uint64_t FlashData = (*(__IO uint64_t*) FlashAddress);
 8016822:	4925      	ldr	r1, [pc, #148]	@ (80168b8 <ReadF_sKey+0xd0>)
 8016824:	6809      	ldr	r1, [r1, #0]
 8016826:	e9d1 0100 	ldrd	r0, r1, [r1]
 801682a:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
		for (uint8_t j = 0; j < 8; j++) {
 801682e:	2100      	movs	r1, #0
 8016830:	f887 1036 	strb.w	r1, [r7, #54]	@ 0x36
 8016834:	e021      	b.n	801687a <ReadF_sKey+0x92>
			SKeyRbuff[i + j] = ((FlashData >> (j * 8)) & 0xFF);
 8016836:	f897 1036 	ldrb.w	r1, [r7, #54]	@ 0x36
 801683a:	00cc      	lsls	r4, r1, #3
 801683c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8016840:	f1c4 0620 	rsb	r6, r4, #32
 8016844:	f1a4 0520 	sub.w	r5, r4, #32
 8016848:	fa20 f204 	lsr.w	r2, r0, r4
 801684c:	fa01 f606 	lsl.w	r6, r1, r6
 8016850:	4332      	orrs	r2, r6
 8016852:	fa21 f505 	lsr.w	r5, r1, r5
 8016856:	432a      	orrs	r2, r5
 8016858:	fa21 f304 	lsr.w	r3, r1, r4
 801685c:	f897 0037 	ldrb.w	r0, [r7, #55]	@ 0x37
 8016860:	f897 1036 	ldrb.w	r1, [r7, #54]	@ 0x36
 8016864:	4401      	add	r1, r0
 8016866:	b2d0      	uxtb	r0, r2
 8016868:	3138      	adds	r1, #56	@ 0x38
 801686a:	4439      	add	r1, r7
 801686c:	f801 0c30 	strb.w	r0, [r1, #-48]
		for (uint8_t j = 0; j < 8; j++) {
 8016870:	f897 1036 	ldrb.w	r1, [r7, #54]	@ 0x36
 8016874:	3101      	adds	r1, #1
 8016876:	f887 1036 	strb.w	r1, [r7, #54]	@ 0x36
 801687a:	f897 1036 	ldrb.w	r1, [r7, #54]	@ 0x36
 801687e:	2907      	cmp	r1, #7
 8016880:	d9d9      	bls.n	8016836 <ReadF_sKey+0x4e>
		}
		i += 7;
 8016882:	f897 1037 	ldrb.w	r1, [r7, #55]	@ 0x37
 8016886:	3107      	adds	r1, #7
 8016888:	f887 1037 	strb.w	r1, [r7, #55]	@ 0x37
		FlashAddress += 8;
 801688c:	490a      	ldr	r1, [pc, #40]	@ (80168b8 <ReadF_sKey+0xd0>)
 801688e:	6809      	ldr	r1, [r1, #0]
 8016890:	3108      	adds	r1, #8
 8016892:	4809      	ldr	r0, [pc, #36]	@ (80168b8 <ReadF_sKey+0xd0>)
 8016894:	6001      	str	r1, [r0, #0]
	for (uint8_t i = 0; i < 32; i++) {
 8016896:	f897 1037 	ldrb.w	r1, [r7, #55]	@ 0x37
 801689a:	3101      	adds	r1, #1
 801689c:	f887 1037 	strb.w	r1, [r7, #55]	@ 0x37
 80168a0:	f897 1037 	ldrb.w	r1, [r7, #55]	@ 0x37
 80168a4:	291f      	cmp	r1, #31
 80168a6:	d9bc      	bls.n	8016822 <ReadF_sKey+0x3a>
//	    printf("Static Key %d: ", KeyNumber);
//	    for (uint8_t i = 0; i < 32; i++) {
//	        printf("%02X ", SKeyRbuff[i]); // Print each byte as hexadecimal
//	    }
//	    printf("\r\n");
}
 80168a8:	bf00      	nop
 80168aa:	bf00      	nop
 80168ac:	3738      	adds	r7, #56	@ 0x38
 80168ae:	46bd      	mov	sp, r7
 80168b0:	bcf0      	pop	{r4, r5, r6, r7}
 80168b2:	4770      	bx	lr
 80168b4:	08166010 	.word	0x08166010
 80168b8:	20014ac8 	.word	0x20014ac8

080168bc <ReadF_cKey>:

void ReadF_cKey(int KeyNumber) {
 80168bc:	b4f0      	push	{r4, r5, r6, r7}
 80168be:	b08e      	sub	sp, #56	@ 0x38
 80168c0:	af00      	add	r7, sp, #0
 80168c2:	6078      	str	r0, [r7, #4]
	FlashAddress = (uint32_t) C_Key_ADDR + (32 * (KeyNumber - 1));
 80168c4:	6879      	ldr	r1, [r7, #4]
 80168c6:	3901      	subs	r1, #1
 80168c8:	0149      	lsls	r1, r1, #5
 80168ca:	4608      	mov	r0, r1
 80168cc:	4938      	ldr	r1, [pc, #224]	@ (80169b0 <ReadF_cKey+0xf4>)
 80168ce:	4401      	add	r1, r0
 80168d0:	4608      	mov	r0, r1
 80168d2:	4938      	ldr	r1, [pc, #224]	@ (80169b4 <ReadF_cKey+0xf8>)
 80168d4:	6008      	str	r0, [r1, #0]
	uint8_t CKeyRbuff[32] = { 0 };
 80168d6:	2100      	movs	r1, #0
 80168d8:	60b9      	str	r1, [r7, #8]
 80168da:	f107 010c 	add.w	r1, r7, #12
 80168de:	2000      	movs	r0, #0
 80168e0:	6008      	str	r0, [r1, #0]
 80168e2:	6048      	str	r0, [r1, #4]
 80168e4:	6088      	str	r0, [r1, #8]
 80168e6:	60c8      	str	r0, [r1, #12]
 80168e8:	6108      	str	r0, [r1, #16]
 80168ea:	6148      	str	r0, [r1, #20]
 80168ec:	6188      	str	r0, [r1, #24]

	for (uint8_t i = 0; i < 32; i++) {
 80168ee:	2100      	movs	r1, #0
 80168f0:	f887 1037 	strb.w	r1, [r7, #55]	@ 0x37
 80168f4:	e03e      	b.n	8016974 <ReadF_cKey+0xb8>
		uint64_t FlashData = (*(__IO uint64_t*) FlashAddress);
 80168f6:	492f      	ldr	r1, [pc, #188]	@ (80169b4 <ReadF_cKey+0xf8>)
 80168f8:	6809      	ldr	r1, [r1, #0]
 80168fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80168fe:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
		for (uint8_t j = 0; j < 8; j++) {
 8016902:	2100      	movs	r1, #0
 8016904:	f887 1036 	strb.w	r1, [r7, #54]	@ 0x36
 8016908:	e021      	b.n	801694e <ReadF_cKey+0x92>
			CKeyRbuff[i + j] = ((FlashData >> (j * 8)) & 0xFF);
 801690a:	f897 1036 	ldrb.w	r1, [r7, #54]	@ 0x36
 801690e:	00cc      	lsls	r4, r1, #3
 8016910:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8016914:	f1c4 0620 	rsb	r6, r4, #32
 8016918:	f1a4 0520 	sub.w	r5, r4, #32
 801691c:	fa20 f204 	lsr.w	r2, r0, r4
 8016920:	fa01 f606 	lsl.w	r6, r1, r6
 8016924:	4332      	orrs	r2, r6
 8016926:	fa21 f505 	lsr.w	r5, r1, r5
 801692a:	432a      	orrs	r2, r5
 801692c:	fa21 f304 	lsr.w	r3, r1, r4
 8016930:	f897 0037 	ldrb.w	r0, [r7, #55]	@ 0x37
 8016934:	f897 1036 	ldrb.w	r1, [r7, #54]	@ 0x36
 8016938:	4401      	add	r1, r0
 801693a:	b2d0      	uxtb	r0, r2
 801693c:	3138      	adds	r1, #56	@ 0x38
 801693e:	4439      	add	r1, r7
 8016940:	f801 0c30 	strb.w	r0, [r1, #-48]
		for (uint8_t j = 0; j < 8; j++) {
 8016944:	f897 1036 	ldrb.w	r1, [r7, #54]	@ 0x36
 8016948:	3101      	adds	r1, #1
 801694a:	f887 1036 	strb.w	r1, [r7, #54]	@ 0x36
 801694e:	f897 1036 	ldrb.w	r1, [r7, #54]	@ 0x36
 8016952:	2907      	cmp	r1, #7
 8016954:	d9d9      	bls.n	801690a <ReadF_cKey+0x4e>
		}
		i += 7;
 8016956:	f897 1037 	ldrb.w	r1, [r7, #55]	@ 0x37
 801695a:	3107      	adds	r1, #7
 801695c:	f887 1037 	strb.w	r1, [r7, #55]	@ 0x37
		FlashAddress += 8;
 8016960:	4914      	ldr	r1, [pc, #80]	@ (80169b4 <ReadF_cKey+0xf8>)
 8016962:	6809      	ldr	r1, [r1, #0]
 8016964:	3108      	adds	r1, #8
 8016966:	4813      	ldr	r0, [pc, #76]	@ (80169b4 <ReadF_cKey+0xf8>)
 8016968:	6001      	str	r1, [r0, #0]
	for (uint8_t i = 0; i < 32; i++) {
 801696a:	f897 1037 	ldrb.w	r1, [r7, #55]	@ 0x37
 801696e:	3101      	adds	r1, #1
 8016970:	f887 1037 	strb.w	r1, [r7, #55]	@ 0x37
 8016974:	f897 1037 	ldrb.w	r1, [r7, #55]	@ 0x37
 8016978:	291f      	cmp	r1, #31
 801697a:	d9bc      	bls.n	80168f6 <ReadF_cKey+0x3a>
	}
	memcpy(ComKeys[KeyNumber - 1],CKeyRbuff,sizeof(CKeyRbuff));
 801697c:	687b      	ldr	r3, [r7, #4]
 801697e:	1e5a      	subs	r2, r3, #1
 8016980:	4613      	mov	r3, r2
 8016982:	015b      	lsls	r3, r3, #5
 8016984:	4413      	add	r3, r2
 8016986:	4a0c      	ldr	r2, [pc, #48]	@ (80169b8 <ReadF_cKey+0xfc>)
 8016988:	4413      	add	r3, r2
 801698a:	461d      	mov	r5, r3
 801698c:	f107 0408 	add.w	r4, r7, #8
 8016990:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016992:	6028      	str	r0, [r5, #0]
 8016994:	6069      	str	r1, [r5, #4]
 8016996:	60aa      	str	r2, [r5, #8]
 8016998:	60eb      	str	r3, [r5, #12]
 801699a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801699c:	6128      	str	r0, [r5, #16]
 801699e:	6169      	str	r1, [r5, #20]
 80169a0:	61aa      	str	r2, [r5, #24]
 80169a2:	61eb      	str	r3, [r5, #28]
//	    printf("Communication Key %d: ", KeyNumber);
//	    for (uint8_t i = 0; i < 32; i++) {
//	        printf("%02X ", CKeyRbuff[i]); // Print each byte as hexadecimal
//	    }
//	    printf("\r\n");
}
 80169a4:	bf00      	nop
 80169a6:	3738      	adds	r7, #56	@ 0x38
 80169a8:	46bd      	mov	sp, r7
 80169aa:	bcf0      	pop	{r4, r5, r6, r7}
 80169ac:	4770      	bx	lr
 80169ae:	bf00      	nop
 80169b0:	08166080 	.word	0x08166080
 80169b4:	20014ac8 	.word	0x20014ac8
 80169b8:	20014b54 	.word	0x20014b54

080169bc <setStaticKeys>:
//		"36F4E12F4EFB7730E9749727B34DBC30", "35AFA9AB4CE596418A19AC758597384D" };
// unComment after Testing
char StatKeys[3][33] = { 0 };
char ComKeys[8][33] = { 0 };

bool setStaticKeys(char *key1, char *key2, char *key3) {
 80169bc:	b580      	push	{r7, lr}
 80169be:	b084      	sub	sp, #16
 80169c0:	af00      	add	r7, sp, #0
 80169c2:	60f8      	str	r0, [r7, #12]
 80169c4:	60b9      	str	r1, [r7, #8]
 80169c6:	607a      	str	r2, [r7, #4]
	strcpy(StatKeys[0], key1);
 80169c8:	68f9      	ldr	r1, [r7, #12]
 80169ca:	4808      	ldr	r0, [pc, #32]	@ (80169ec <setStaticKeys+0x30>)
 80169cc:	f008 fb7d 	bl	801f0ca <strcpy>
	strcpy(StatKeys[1], key2);
 80169d0:	68b9      	ldr	r1, [r7, #8]
 80169d2:	4807      	ldr	r0, [pc, #28]	@ (80169f0 <setStaticKeys+0x34>)
 80169d4:	f008 fb79 	bl	801f0ca <strcpy>
	strcpy(StatKeys[2], key3);
 80169d8:	6879      	ldr	r1, [r7, #4]
 80169da:	4806      	ldr	r0, [pc, #24]	@ (80169f4 <setStaticKeys+0x38>)
 80169dc:	f008 fb75 	bl	801f0ca <strcpy>
}
 80169e0:	bf00      	nop
 80169e2:	4618      	mov	r0, r3
 80169e4:	3710      	adds	r7, #16
 80169e6:	46bd      	mov	sp, r7
 80169e8:	bd80      	pop	{r7, pc}
 80169ea:	bf00      	nop
 80169ec:	20014af0 	.word	0x20014af0
 80169f0:	20014b11 	.word	0x20014b11
 80169f4:	20014b32 	.word	0x20014b32

080169f8 <setComKeys>:
bool setComKeys(char *key1, char *key2, char *key3, char *key4, char *key5,
		char *key6, char *key7, char *key8) {
 80169f8:	b580      	push	{r7, lr}
 80169fa:	b084      	sub	sp, #16
 80169fc:	af00      	add	r7, sp, #0
 80169fe:	60f8      	str	r0, [r7, #12]
 8016a00:	60b9      	str	r1, [r7, #8]
 8016a02:	607a      	str	r2, [r7, #4]
 8016a04:	603b      	str	r3, [r7, #0]
	strcpy(ComKeys[0], key1);
 8016a06:	68f9      	ldr	r1, [r7, #12]
 8016a08:	4811      	ldr	r0, [pc, #68]	@ (8016a50 <setComKeys+0x58>)
 8016a0a:	f008 fb5e 	bl	801f0ca <strcpy>
	strcpy(ComKeys[1], key1);
 8016a0e:	68f9      	ldr	r1, [r7, #12]
 8016a10:	4810      	ldr	r0, [pc, #64]	@ (8016a54 <setComKeys+0x5c>)
 8016a12:	f008 fb5a 	bl	801f0ca <strcpy>
	strcpy(ComKeys[2], key3);
 8016a16:	6879      	ldr	r1, [r7, #4]
 8016a18:	480f      	ldr	r0, [pc, #60]	@ (8016a58 <setComKeys+0x60>)
 8016a1a:	f008 fb56 	bl	801f0ca <strcpy>
	strcpy(ComKeys[3], key4);
 8016a1e:	6839      	ldr	r1, [r7, #0]
 8016a20:	480e      	ldr	r0, [pc, #56]	@ (8016a5c <setComKeys+0x64>)
 8016a22:	f008 fb52 	bl	801f0ca <strcpy>
	strcpy(ComKeys[4], key5);
 8016a26:	69b9      	ldr	r1, [r7, #24]
 8016a28:	480d      	ldr	r0, [pc, #52]	@ (8016a60 <setComKeys+0x68>)
 8016a2a:	f008 fb4e 	bl	801f0ca <strcpy>
	strcpy(ComKeys[5], key6);
 8016a2e:	69f9      	ldr	r1, [r7, #28]
 8016a30:	480c      	ldr	r0, [pc, #48]	@ (8016a64 <setComKeys+0x6c>)
 8016a32:	f008 fb4a 	bl	801f0ca <strcpy>
	strcpy(ComKeys[6], key7);
 8016a36:	6a39      	ldr	r1, [r7, #32]
 8016a38:	480b      	ldr	r0, [pc, #44]	@ (8016a68 <setComKeys+0x70>)
 8016a3a:	f008 fb46 	bl	801f0ca <strcpy>
	strcpy(ComKeys[7], key8);
 8016a3e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8016a40:	480a      	ldr	r0, [pc, #40]	@ (8016a6c <setComKeys+0x74>)
 8016a42:	f008 fb42 	bl	801f0ca <strcpy>
}
 8016a46:	bf00      	nop
 8016a48:	4618      	mov	r0, r3
 8016a4a:	3710      	adds	r7, #16
 8016a4c:	46bd      	mov	sp, r7
 8016a4e:	bd80      	pop	{r7, pc}
 8016a50:	20014b54 	.word	0x20014b54
 8016a54:	20014b75 	.word	0x20014b75
 8016a58:	20014b96 	.word	0x20014b96
 8016a5c:	20014bb7 	.word	0x20014bb7
 8016a60:	20014bd8 	.word	0x20014bd8
 8016a64:	20014bf9 	.word	0x20014bf9
 8016a68:	20014c1a 	.word	0x20014c1a
 8016a6c:	20014c3b 	.word	0x20014c3b

08016a70 <reset_keyresBuffer>:
char *ckey7 = ComKeys[6]; // Index 0 corresponds to the first key
char *ckey8 = ComKeys[7]; // Index 1 corresponds to the second key

int TOTAL_PACKETS;
uint8_t key_resBuffer[200] = { };
void reset_keyresBuffer() {
 8016a70:	b580      	push	{r7, lr}
 8016a72:	af00      	add	r7, sp, #0
	clearBuffer(key_resBuffer, sizeof(key_resBuffer));
 8016a74:	21c8      	movs	r1, #200	@ 0xc8
 8016a76:	4802      	ldr	r0, [pc, #8]	@ (8016a80 <reset_keyresBuffer+0x10>)
 8016a78:	f7eb f826 	bl	8001ac8 <clearBuffer>
}
 8016a7c:	bf00      	nop
 8016a7e:	bd80      	pop	{r7, pc}
 8016a80:	20014c60 	.word	0x20014c60

08016a84 <handleKeysRequest>:
// Define callback functions for each message type
void handleKeysRequest() {
 8016a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016a88:	f5ad 7d7c 	sub.w	sp, sp, #1008	@ 0x3f0
 8016a8c:	af08      	add	r7, sp, #32
 8016a8e:	466b      	mov	r3, sp
 8016a90:	469a      	mov	sl, r3

	uint8_t str[100] = { 0 };
 8016a92:	2300      	movs	r3, #0
 8016a94:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8016a98:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8016a9c:	2260      	movs	r2, #96	@ 0x60
 8016a9e:	2100      	movs	r1, #0
 8016aa0:	4618      	mov	r0, r3
 8016aa2:	f008 f9b5 	bl	801ee10 <memset>
	char command[250] = { 0 };
 8016aa6:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 8016aaa:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8016aae:	2200      	movs	r2, #0
 8016ab0:	601a      	str	r2, [r3, #0]
 8016ab2:	3304      	adds	r3, #4
 8016ab4:	22f6      	movs	r2, #246	@ 0xf6
 8016ab6:	2100      	movs	r1, #0
 8016ab8:	4618      	mov	r0, r3
 8016aba:	f008 f9a9 	bl	801ee10 <memset>
	char dataBody[300] = { 0 };
 8016abe:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 8016ac2:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8016ac6:	2200      	movs	r2, #0
 8016ac8:	601a      	str	r2, [r3, #0]
 8016aca:	3304      	adds	r3, #4
 8016acc:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8016ad0:	2100      	movs	r1, #0
 8016ad2:	4618      	mov	r0, r3
 8016ad4:	f008 f99c 	bl	801ee10 <memset>
	char str1[300] = { 0 };
 8016ad8:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 8016adc:	f5a3 7374 	sub.w	r3, r3, #976	@ 0x3d0
 8016ae0:	2200      	movs	r2, #0
 8016ae2:	601a      	str	r2, [r3, #0]
 8016ae4:	3304      	adds	r3, #4
 8016ae6:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8016aea:	2100      	movs	r1, #0
 8016aec:	4618      	mov	r0, r3
 8016aee:	f008 f98f 	bl	801ee10 <memset>
	memset(dataBody, 0, sizeof(dataBody));
 8016af2:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8016af6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8016afa:	2100      	movs	r1, #0
 8016afc:	4618      	mov	r0, r3
 8016afe:	f008 f987 	bl	801ee10 <memset>
//	snprintf(dataBody, sizeof(dataBody), "{\"imei\":\"%s\"}", &Imei);
	sprintf(dataBody, "{\"imei\":\"%s\"}", &Imei, sizeof(dataBody));
 8016b02:	f507 7096 	add.w	r0, r7, #300	@ 0x12c
 8016b06:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8016b0a:	4aa2      	ldr	r2, [pc, #648]	@ (8016d94 <handleKeysRequest+0x310>)
 8016b0c:	49a2      	ldr	r1, [pc, #648]	@ (8016d98 <handleKeysRequest+0x314>)
 8016b0e:	f008 f823 	bl	801eb58 <siprintf>
	printc(100, "String =%s \r\n", dataBody);
 8016b12:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8016b16:	461a      	mov	r2, r3
 8016b18:	49a0      	ldr	r1, [pc, #640]	@ (8016d9c <handleKeysRequest+0x318>)
 8016b1a:	2064      	movs	r0, #100	@ 0x64
 8016b1c:	f7ea ff7c 	bl	8001a18 <printc>
	sKey_update(1);
 8016b20:	2001      	movs	r0, #1
 8016b22:	f7ec ff23 	bl	800396c <sKey_update>
	encrypt(dataBody, str);
 8016b26:	f507 7255 	add.w	r2, r7, #852	@ 0x354
 8016b2a:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8016b2e:	4611      	mov	r1, r2
 8016b30:	4618      	mov	r0, r3
 8016b32:	f7eb f997 	bl	8001e64 <encrypt>

	int array_length = strlen(str);
 8016b36:	f507 7355 	add.w	r3, r7, #852	@ 0x354
 8016b3a:	4618      	mov	r0, r3
 8016b3c:	f7e9 fbb2 	bl	80002a4 <strlen>
 8016b40:	4603      	mov	r3, r0
 8016b42:	f8c7 33c8 	str.w	r3, [r7, #968]	@ 0x3c8

	char hex_string[array_length];
 8016b46:	f8d7 63c8 	ldr.w	r6, [r7, #968]	@ 0x3c8
 8016b4a:	1e73      	subs	r3, r6, #1
 8016b4c:	f8c7 33c4 	str.w	r3, [r7, #964]	@ 0x3c4
 8016b50:	4632      	mov	r2, r6
 8016b52:	2300      	movs	r3, #0
 8016b54:	4690      	mov	r8, r2
 8016b56:	4699      	mov	r9, r3
 8016b58:	f04f 0200 	mov.w	r2, #0
 8016b5c:	f04f 0300 	mov.w	r3, #0
 8016b60:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8016b64:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8016b68:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8016b6c:	4632      	mov	r2, r6
 8016b6e:	2300      	movs	r3, #0
 8016b70:	4614      	mov	r4, r2
 8016b72:	461d      	mov	r5, r3
 8016b74:	f04f 0200 	mov.w	r2, #0
 8016b78:	f04f 0300 	mov.w	r3, #0
 8016b7c:	00eb      	lsls	r3, r5, #3
 8016b7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8016b82:	00e2      	lsls	r2, r4, #3
 8016b84:	4633      	mov	r3, r6
 8016b86:	3307      	adds	r3, #7
 8016b88:	08db      	lsrs	r3, r3, #3
 8016b8a:	00db      	lsls	r3, r3, #3
 8016b8c:	ebad 0d03 	sub.w	sp, sp, r3
 8016b90:	ab08      	add	r3, sp, #32
 8016b92:	3300      	adds	r3, #0
 8016b94:	f8c7 33c0 	str.w	r3, [r7, #960]	@ 0x3c0

	for (int i = 0; i < array_length; i++) {
 8016b98:	2300      	movs	r3, #0
 8016b9a:	f8c7 33cc 	str.w	r3, [r7, #972]	@ 0x3cc
 8016b9e:	e015      	b.n	8016bcc <handleKeysRequest+0x148>
		sprintf(hex_string + (i * 2), "%02X", str[i]);
 8016ba0:	f8d7 33cc 	ldr.w	r3, [r7, #972]	@ 0x3cc
 8016ba4:	005b      	lsls	r3, r3, #1
 8016ba6:	461a      	mov	r2, r3
 8016ba8:	f8d7 33c0 	ldr.w	r3, [r7, #960]	@ 0x3c0
 8016bac:	1898      	adds	r0, r3, r2
 8016bae:	f507 7255 	add.w	r2, r7, #852	@ 0x354
 8016bb2:	f8d7 33cc 	ldr.w	r3, [r7, #972]	@ 0x3cc
 8016bb6:	4413      	add	r3, r2
 8016bb8:	781b      	ldrb	r3, [r3, #0]
 8016bba:	461a      	mov	r2, r3
 8016bbc:	4978      	ldr	r1, [pc, #480]	@ (8016da0 <handleKeysRequest+0x31c>)
 8016bbe:	f007 ffcb 	bl	801eb58 <siprintf>
	for (int i = 0; i < array_length; i++) {
 8016bc2:	f8d7 33cc 	ldr.w	r3, [r7, #972]	@ 0x3cc
 8016bc6:	3301      	adds	r3, #1
 8016bc8:	f8c7 33cc 	str.w	r3, [r7, #972]	@ 0x3cc
 8016bcc:	f8d7 23cc 	ldr.w	r2, [r7, #972]	@ 0x3cc
 8016bd0:	f8d7 33c8 	ldr.w	r3, [r7, #968]	@ 0x3c8
 8016bd4:	429a      	cmp	r2, r3
 8016bd6:	dbe3      	blt.n	8016ba0 <handleKeysRequest+0x11c>
	}

	memset(dataBody, '\0', sizeof(dataBody));
 8016bd8:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8016bdc:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8016be0:	2100      	movs	r1, #0
 8016be2:	4618      	mov	r0, r3
 8016be4:	f008 f914 	bl	801ee10 <memset>
	memcpy(dataBody, hex_string, strlen(hex_string));
 8016be8:	f8d7 03c0 	ldr.w	r0, [r7, #960]	@ 0x3c0
 8016bec:	f7e9 fb5a 	bl	80002a4 <strlen>
 8016bf0:	4602      	mov	r2, r0
 8016bf2:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8016bf6:	f8d7 13c0 	ldr.w	r1, [r7, #960]	@ 0x3c0
 8016bfa:	4618      	mov	r0, r3
 8016bfc:	f008 fa7b 	bl	801f0f6 <memcpy>
	memset(hex_string, 0, sizeof(hex_string));
 8016c00:	4633      	mov	r3, r6
 8016c02:	461a      	mov	r2, r3
 8016c04:	2100      	movs	r1, #0
 8016c06:	f8d7 03c0 	ldr.w	r0, [r7, #960]	@ 0x3c0
 8016c0a:	f008 f901 	bl	801ee10 <memset>

// Calculate the checksum
	uint8_t checksum = Calculate_CRC8((uint8_t*) dataBody, strlen(dataBody));
 8016c0e:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8016c12:	4618      	mov	r0, r3
 8016c14:	f7e9 fb46 	bl	80002a4 <strlen>
 8016c18:	4602      	mov	r2, r0
 8016c1a:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8016c1e:	4611      	mov	r1, r2
 8016c20:	4618      	mov	r0, r3
 8016c22:	f000 ff9b 	bl	8017b5c <Calculate_CRC8>
 8016c26:	4603      	mov	r3, r0
 8016c28:	f887 33bf 	strb.w	r3, [r7, #959]	@ 0x3bf
	memset(str1, 0, sizeof(str1));
 8016c2c:	463b      	mov	r3, r7
 8016c2e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8016c32:	2100      	movs	r1, #0
 8016c34:	4618      	mov	r0, r3
 8016c36:	f008 f8eb 	bl	801ee10 <memset>

// Construct the string
	snprintf((char*) str1, sizeof(str1), "hexKey=%s%s,%d,%s,%d,%s,%0X%c", key2,
 8016c3a:	4b5a      	ldr	r3, [pc, #360]	@ (8016da4 <handleKeysRequest+0x320>)
 8016c3c:	681a      	ldr	r2, [r3, #0]
 8016c3e:	f897 33bf 	ldrb.w	r3, [r7, #959]	@ 0x3bf
 8016c42:	4638      	mov	r0, r7
 8016c44:	212a      	movs	r1, #42	@ 0x2a
 8016c46:	9106      	str	r1, [sp, #24]
 8016c48:	9305      	str	r3, [sp, #20]
 8016c4a:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8016c4e:	9304      	str	r3, [sp, #16]
 8016c50:	2302      	movs	r3, #2
 8016c52:	9303      	str	r3, [sp, #12]
 8016c54:	4b4f      	ldr	r3, [pc, #316]	@ (8016d94 <handleKeysRequest+0x310>)
 8016c56:	9302      	str	r3, [sp, #8]
 8016c58:	2301      	movs	r3, #1
 8016c5a:	9301      	str	r3, [sp, #4]
 8016c5c:	4b52      	ldr	r3, [pc, #328]	@ (8016da8 <handleKeysRequest+0x324>)
 8016c5e:	9300      	str	r3, [sp, #0]
 8016c60:	4613      	mov	r3, r2
 8016c62:	4a52      	ldr	r2, [pc, #328]	@ (8016dac <handleKeysRequest+0x328>)
 8016c64:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8016c68:	f007 ff42 	bl	801eaf0 <sniprintf>
	header, 1, &Imei, 2, dataBody, checksum, Delimiter);

	printc(100, "CommandURL -  %s \n\r", str1);
 8016c6c:	463b      	mov	r3, r7
 8016c6e:	461a      	mov	r2, r3
 8016c70:	494f      	ldr	r1, [pc, #316]	@ (8016db0 <handleKeysRequest+0x32c>)
 8016c72:	2064      	movs	r0, #100	@ 0x64
 8016c74:	f7ea fed0 	bl	8001a18 <printc>

	memset(dataBody, 0, sizeof(dataBody));
 8016c78:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8016c7c:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8016c80:	2100      	movs	r1, #0
 8016c82:	4618      	mov	r0, r3
 8016c84:	f008 f8c4 	bl	801ee10 <memset>
// Create the AT command string with the length of dataBody inserted
	sprintf(command, "AT+QHTTPURL=%d,%d\r\n", strlen(URL), EC_TOUT);
 8016c88:	f507 7016 	add.w	r0, r7, #600	@ 0x258
 8016c8c:	2328      	movs	r3, #40	@ 0x28
 8016c8e:	2232      	movs	r2, #50	@ 0x32
 8016c90:	4948      	ldr	r1, [pc, #288]	@ (8016db4 <handleKeysRequest+0x330>)
 8016c92:	f007 ff61 	bl	801eb58 <siprintf>
	reset_keyresBuffer();
 8016c96:	f7ff feeb 	bl	8016a70 <reset_keyresBuffer>
	if (EC200_Transmit(command, key_resBuffer, EC200MINRESONSETIME)) {
 8016c9a:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8016c9e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8016ca2:	4945      	ldr	r1, [pc, #276]	@ (8016db8 <handleKeysRequest+0x334>)
 8016ca4:	4618      	mov	r0, r3
 8016ca6:	f7ea fa81 	bl	80011ac <EC200_Transmit>
 8016caa:	4603      	mov	r3, r0
 8016cac:	2b00      	cmp	r3, #0
 8016cae:	d004      	beq.n	8016cba <handleKeysRequest+0x236>
		printc(100, "AT+QHTTPURL -  %s \n\r", key_resBuffer);
 8016cb0:	4a41      	ldr	r2, [pc, #260]	@ (8016db8 <handleKeysRequest+0x334>)
 8016cb2:	4942      	ldr	r1, [pc, #264]	@ (8016dbc <handleKeysRequest+0x338>)
 8016cb4:	2064      	movs	r0, #100	@ 0x64
 8016cb6:	f7ea feaf 	bl	8001a18 <printc>
	}
	memset(command, 0, 250);
 8016cba:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8016cbe:	22fa      	movs	r2, #250	@ 0xfa
 8016cc0:	2100      	movs	r1, #0
 8016cc2:	4618      	mov	r0, r3
 8016cc4:	f008 f8a4 	bl	801ee10 <memset>
// Send HTTP URL
	reset_keyresBuffer();
 8016cc8:	f7ff fed2 	bl	8016a70 <reset_keyresBuffer>
	if (EC200_Transmit(URL, key_resBuffer, EC200MINRESONSETIME)) {
 8016ccc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8016cd0:	4939      	ldr	r1, [pc, #228]	@ (8016db8 <handleKeysRequest+0x334>)
 8016cd2:	483b      	ldr	r0, [pc, #236]	@ (8016dc0 <handleKeysRequest+0x33c>)
 8016cd4:	f7ea fa6a 	bl	80011ac <EC200_Transmit>
 8016cd8:	4603      	mov	r3, r0
 8016cda:	2b00      	cmp	r3, #0
 8016cdc:	d004      	beq.n	8016ce8 <handleKeysRequest+0x264>
		printc(100, "URL -  %s \n\r", key_resBuffer);
 8016cde:	4a36      	ldr	r2, [pc, #216]	@ (8016db8 <handleKeysRequest+0x334>)
 8016ce0:	4938      	ldr	r1, [pc, #224]	@ (8016dc4 <handleKeysRequest+0x340>)
 8016ce2:	2064      	movs	r0, #100	@ 0x64
 8016ce4:	f7ea fe98 	bl	8001a18 <printc>
	}
	int F_Data = strlen(str1);
 8016ce8:	463b      	mov	r3, r7
 8016cea:	4618      	mov	r0, r3
 8016cec:	f7e9 fada 	bl	80002a4 <strlen>
 8016cf0:	4603      	mov	r3, r0
 8016cf2:	f8c7 33b8 	str.w	r3, [r7, #952]	@ 0x3b8

// Construct the AT command for HTTP POST
	sprintf(command, "AT+QHTTPPOST=%d\r\n", F_Data);
 8016cf6:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8016cfa:	f8d7 23b8 	ldr.w	r2, [r7, #952]	@ 0x3b8
 8016cfe:	4932      	ldr	r1, [pc, #200]	@ (8016dc8 <handleKeysRequest+0x344>)
 8016d00:	4618      	mov	r0, r3
 8016d02:	f007 ff29 	bl	801eb58 <siprintf>
// Transmit the command string
//	EC200_Data_Fetch(command);
	reset_keyresBuffer();
 8016d06:	f7ff feb3 	bl	8016a70 <reset_keyresBuffer>
	if (EC200_Transmit(command, key_resBuffer, 10000)) {
 8016d0a:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8016d0e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8016d12:	4929      	ldr	r1, [pc, #164]	@ (8016db8 <handleKeysRequest+0x334>)
 8016d14:	4618      	mov	r0, r3
 8016d16:	f7ea fa49 	bl	80011ac <EC200_Transmit>
 8016d1a:	4603      	mov	r3, r0
 8016d1c:	2b00      	cmp	r3, #0
 8016d1e:	d004      	beq.n	8016d2a <handleKeysRequest+0x2a6>
		printc(100, "AT+QHTTPPOST -  %s \n\r", key_resBuffer);
 8016d20:	4a25      	ldr	r2, [pc, #148]	@ (8016db8 <handleKeysRequest+0x334>)
 8016d22:	492a      	ldr	r1, [pc, #168]	@ (8016dcc <handleKeysRequest+0x348>)
 8016d24:	2064      	movs	r0, #100	@ 0x64
 8016d26:	f7ea fe77 	bl	8001a18 <printc>
	}
	memset(command, 0, sizeof(command));
 8016d2a:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8016d2e:	22fa      	movs	r2, #250	@ 0xfa
 8016d30:	2100      	movs	r1, #0
 8016d32:	4618      	mov	r0, r3
 8016d34:	f008 f86c 	bl	801ee10 <memset>
// Transmit the dataBody
	if (EC200_Transmit(str1, key_resBuffer, EC200MINRESONSETIME)) {
 8016d38:	463b      	mov	r3, r7
 8016d3a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8016d3e:	491e      	ldr	r1, [pc, #120]	@ (8016db8 <handleKeysRequest+0x334>)
 8016d40:	4618      	mov	r0, r3
 8016d42:	f7ea fa33 	bl	80011ac <EC200_Transmit>
 8016d46:	4603      	mov	r3, r0
 8016d48:	2b00      	cmp	r3, #0
 8016d4a:	d004      	beq.n	8016d56 <handleKeysRequest+0x2d2>
		printc(100, "AT+QHTTPPOST -  %s \n\r", key_resBuffer);
 8016d4c:	4a1a      	ldr	r2, [pc, #104]	@ (8016db8 <handleKeysRequest+0x334>)
 8016d4e:	491f      	ldr	r1, [pc, #124]	@ (8016dcc <handleKeysRequest+0x348>)
 8016d50:	2064      	movs	r0, #100	@ 0x64
 8016d52:	f7ea fe61 	bl	8001a18 <printc>
	}
	memset(str1, 0, sizeof(str1));
 8016d56:	463b      	mov	r3, r7
 8016d58:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8016d5c:	2100      	movs	r1, #0
 8016d5e:	4618      	mov	r0, r3
 8016d60:	f008 f856 	bl	801ee10 <memset>
	HAL_Delay(3000);
 8016d64:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8016d68:	f7ee fe2e 	bl	80059c8 <HAL_Delay>
	sprintf(command, "AT+QHTTPREAD= %d \r\n", EC_TOUT);
 8016d6c:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8016d70:	2228      	movs	r2, #40	@ 0x28
 8016d72:	4917      	ldr	r1, [pc, #92]	@ (8016dd0 <handleKeysRequest+0x34c>)
 8016d74:	4618      	mov	r0, r3
 8016d76:	f007 feef 	bl	801eb58 <siprintf>
	EC200_Key_Update(command);
 8016d7a:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8016d7e:	4618      	mov	r0, r3
 8016d80:	f7ff f924 	bl	8015fcc <EC200_Key_Update>
 8016d84:	46d5      	mov	sp, sl
	;
}
 8016d86:	bf00      	nop
 8016d88:	f507 7774 	add.w	r7, r7, #976	@ 0x3d0
 8016d8c:	46bd      	mov	sp, r7
 8016d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016d92:	bf00      	nop
 8016d94:	20014adc 	.word	0x20014adc
 8016d98:	08022af0 	.word	0x08022af0
 8016d9c:	08022b00 	.word	0x08022b00
 8016da0:	08022b10 	.word	0x08022b10
 8016da4:	2000009c 	.word	0x2000009c
 8016da8:	08022b38 	.word	0x08022b38
 8016dac:	08022b18 	.word	0x08022b18
 8016db0:	08022b40 	.word	0x08022b40
 8016db4:	08022b54 	.word	0x08022b54
 8016db8:	20014c60 	.word	0x20014c60
 8016dbc:	08022b68 	.word	0x08022b68
 8016dc0:	08022b80 	.word	0x08022b80
 8016dc4:	08022bb4 	.word	0x08022bb4
 8016dc8:	08022bc4 	.word	0x08022bc4
 8016dcc:	08022bd8 	.word	0x08022bd8
 8016dd0:	08022bf0 	.word	0x08022bf0

08016dd4 <handleKeysUpdate>:

void handleKeysUpdate() {
 8016dd4:	b580      	push	{r7, lr}
 8016dd6:	af00      	add	r7, sp, #0
	printc(100, "Received Keys Update\n");
 8016dd8:	4902      	ldr	r1, [pc, #8]	@ (8016de4 <handleKeysUpdate+0x10>)
 8016dda:	2064      	movs	r0, #100	@ 0x64
 8016ddc:	f7ea fe1c 	bl	8001a18 <printc>
// Add your implementation here
}
 8016de0:	bf00      	nop
 8016de2:	bd80      	pop	{r7, pc}
 8016de4:	08022c04 	.word	0x08022c04

08016de8 <handleFotaDetails>:

void handleFotaDetails() {
 8016de8:	b580      	push	{r7, lr}
 8016dea:	af00      	add	r7, sp, #0
	printc(100, "Received Fota Version and Cota Setting Details\n");
 8016dec:	4902      	ldr	r1, [pc, #8]	@ (8016df8 <handleFotaDetails+0x10>)
 8016dee:	2064      	movs	r0, #100	@ 0x64
 8016df0:	f7ea fe12 	bl	8001a18 <printc>
// Add your implementation here
}
 8016df4:	bf00      	nop
 8016df6:	bd80      	pop	{r7, pc}
 8016df8:	08022c1c 	.word	0x08022c1c

08016dfc <handleVersionStatus>:

void handleVersionStatus() {
 8016dfc:	b580      	push	{r7, lr}
 8016dfe:	af00      	add	r7, sp, #0
	printc(100, "Received Version Status\n");
 8016e00:	4902      	ldr	r1, [pc, #8]	@ (8016e0c <handleVersionStatus+0x10>)
 8016e02:	2064      	movs	r0, #100	@ 0x64
 8016e04:	f7ea fe08 	bl	8001a18 <printc>
// Add your implementation here
}
 8016e08:	bf00      	nop
 8016e0a:	bd80      	pop	{r7, pc}
 8016e0c:	08022c4c 	.word	0x08022c4c

08016e10 <handleCotaData>:

void handleCotaData() {
 8016e10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016e14:	f5ad 6d82 	sub.w	sp, sp, #1040	@ 0x410
 8016e18:	af08      	add	r7, sp, #32
	uint8_t str[100] = { 0 };
 8016e1a:	2300      	movs	r3, #0
 8016e1c:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374
 8016e20:	f507 735e 	add.w	r3, r7, #888	@ 0x378
 8016e24:	2260      	movs	r2, #96	@ 0x60
 8016e26:	2100      	movs	r1, #0
 8016e28:	4618      	mov	r0, r3
 8016e2a:	f007 fff1 	bl	801ee10 <memset>
	char command[250] = { 0 };
 8016e2e:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 8016e32:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8016e36:	2200      	movs	r2, #0
 8016e38:	601a      	str	r2, [r3, #0]
 8016e3a:	3304      	adds	r3, #4
 8016e3c:	22f6      	movs	r2, #246	@ 0xf6
 8016e3e:	2100      	movs	r1, #0
 8016e40:	4618      	mov	r0, r3
 8016e42:	f007 ffe5 	bl	801ee10 <memset>
	char dataBody[300] = { 0 };
 8016e46:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 8016e4a:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8016e4e:	2200      	movs	r2, #0
 8016e50:	601a      	str	r2, [r3, #0]
 8016e52:	3304      	adds	r3, #4
 8016e54:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8016e58:	2100      	movs	r1, #0
 8016e5a:	4618      	mov	r0, r3
 8016e5c:	f007 ffd8 	bl	801ee10 <memset>
	char str1[300] = { 0 };
 8016e60:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 8016e64:	f5a3 7374 	sub.w	r3, r3, #976	@ 0x3d0
 8016e68:	2200      	movs	r2, #0
 8016e6a:	601a      	str	r2, [r3, #0]
 8016e6c:	3304      	adds	r3, #4
 8016e6e:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8016e72:	2100      	movs	r1, #0
 8016e74:	4618      	mov	r0, r3
 8016e76:	f007 ffcb 	bl	801ee10 <memset>
	char CVer[30] = { "Test_1" }; // Fetched FRom Flash
 8016e7a:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 8016e7e:	f5a3 727c 	sub.w	r2, r3, #1008	@ 0x3f0
 8016e82:	49bb      	ldr	r1, [pc, #748]	@ (8017170 <handleCotaData+0x360>)
 8016e84:	4613      	mov	r3, r2
 8016e86:	c903      	ldmia	r1, {r0, r1}
 8016e88:	6018      	str	r0, [r3, #0]
 8016e8a:	3304      	adds	r3, #4
 8016e8c:	8019      	strh	r1, [r3, #0]
 8016e8e:	3302      	adds	r3, #2
 8016e90:	0c09      	lsrs	r1, r1, #16
 8016e92:	7019      	strb	r1, [r3, #0]
 8016e94:	1dd3      	adds	r3, r2, #7
 8016e96:	2200      	movs	r2, #0
 8016e98:	601a      	str	r2, [r3, #0]
 8016e9a:	605a      	str	r2, [r3, #4]
 8016e9c:	609a      	str	r2, [r3, #8]
 8016e9e:	60da      	str	r2, [r3, #12]
 8016ea0:	611a      	str	r2, [r3, #16]
 8016ea2:	f8c3 2013 	str.w	r2, [r3, #19]
	redoIntouchConnect:
	memset(dataBody, 0, sizeof(dataBody));
 8016ea6:	f507 73a6 	add.w	r3, r7, #332	@ 0x14c
 8016eaa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8016eae:	2100      	movs	r1, #0
 8016eb0:	4618      	mov	r0, r3
 8016eb2:	f007 ffad 	bl	801ee10 <memset>
	//	snprintf(dataBody, sizeof(dataBody), "{\"imei\":\"%s\"}", &Imei);
	sprintf(dataBody, "{\"imei\":\"%s\",\"configVersion\":\"%s\"}", &Imei, &CVer,
 8016eb6:	463b      	mov	r3, r7
 8016eb8:	f507 70a6 	add.w	r0, r7, #332	@ 0x14c
 8016ebc:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8016ec0:	9200      	str	r2, [sp, #0]
 8016ec2:	4aac      	ldr	r2, [pc, #688]	@ (8017174 <handleCotaData+0x364>)
 8016ec4:	49ac      	ldr	r1, [pc, #688]	@ (8017178 <handleCotaData+0x368>)
 8016ec6:	f007 fe47 	bl	801eb58 <siprintf>
			sizeof(dataBody));
	printc(100, "String =%s \r\n", dataBody);
 8016eca:	f507 73a6 	add.w	r3, r7, #332	@ 0x14c
 8016ece:	461a      	mov	r2, r3
 8016ed0:	49aa      	ldr	r1, [pc, #680]	@ (801717c <handleCotaData+0x36c>)
 8016ed2:	2064      	movs	r0, #100	@ 0x64
 8016ed4:	f7ea fda0 	bl	8001a18 <printc>
	cKey_update(0);
 8016ed8:	2000      	movs	r0, #0
 8016eda:	f7ec fd6f 	bl	80039bc <cKey_update>
	int array_length = encrypt(dataBody, str);
 8016ede:	f507 725d 	add.w	r2, r7, #884	@ 0x374
 8016ee2:	f507 73a6 	add.w	r3, r7, #332	@ 0x14c
 8016ee6:	4611      	mov	r1, r2
 8016ee8:	4618      	mov	r0, r3
 8016eea:	f7ea ffbb 	bl	8001e64 <encrypt>
 8016eee:	f8c7 03e8 	str.w	r0, [r7, #1000]	@ 0x3e8

	char hex_string[array_length];
 8016ef2:	f8d7 63e8 	ldr.w	r6, [r7, #1000]	@ 0x3e8
 8016ef6:	466b      	mov	r3, sp
 8016ef8:	469a      	mov	sl, r3
 8016efa:	1e73      	subs	r3, r6, #1
 8016efc:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4
 8016f00:	4632      	mov	r2, r6
 8016f02:	2300      	movs	r3, #0
 8016f04:	4690      	mov	r8, r2
 8016f06:	4699      	mov	r9, r3
 8016f08:	f04f 0200 	mov.w	r2, #0
 8016f0c:	f04f 0300 	mov.w	r3, #0
 8016f10:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8016f14:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8016f18:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8016f1c:	4632      	mov	r2, r6
 8016f1e:	2300      	movs	r3, #0
 8016f20:	4614      	mov	r4, r2
 8016f22:	461d      	mov	r5, r3
 8016f24:	f04f 0200 	mov.w	r2, #0
 8016f28:	f04f 0300 	mov.w	r3, #0
 8016f2c:	00eb      	lsls	r3, r5, #3
 8016f2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8016f32:	00e2      	lsls	r2, r4, #3
 8016f34:	4633      	mov	r3, r6
 8016f36:	3307      	adds	r3, #7
 8016f38:	08db      	lsrs	r3, r3, #3
 8016f3a:	00db      	lsls	r3, r3, #3
 8016f3c:	ebad 0d03 	sub.w	sp, sp, r3
 8016f40:	ab08      	add	r3, sp, #32
 8016f42:	3300      	adds	r3, #0
 8016f44:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0

	memset(hex_string,0,sizeof(hex_string));
 8016f48:	4633      	mov	r3, r6
 8016f4a:	461a      	mov	r2, r3
 8016f4c:	2100      	movs	r1, #0
 8016f4e:	f8d7 03e0 	ldr.w	r0, [r7, #992]	@ 0x3e0
 8016f52:	f007 ff5d 	bl	801ee10 <memset>
	for (int i = 0; i < array_length; i++) {
 8016f56:	2300      	movs	r3, #0
 8016f58:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
 8016f5c:	e015      	b.n	8016f8a <handleCotaData+0x17a>
		sprintf(hex_string + (i * 2), "%02X", str[i]);
 8016f5e:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	@ 0x3ec
 8016f62:	005b      	lsls	r3, r3, #1
 8016f64:	461a      	mov	r2, r3
 8016f66:	f8d7 33e0 	ldr.w	r3, [r7, #992]	@ 0x3e0
 8016f6a:	1898      	adds	r0, r3, r2
 8016f6c:	f507 725d 	add.w	r2, r7, #884	@ 0x374
 8016f70:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	@ 0x3ec
 8016f74:	4413      	add	r3, r2
 8016f76:	781b      	ldrb	r3, [r3, #0]
 8016f78:	461a      	mov	r2, r3
 8016f7a:	4981      	ldr	r1, [pc, #516]	@ (8017180 <handleCotaData+0x370>)
 8016f7c:	f007 fdec 	bl	801eb58 <siprintf>
	for (int i = 0; i < array_length; i++) {
 8016f80:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	@ 0x3ec
 8016f84:	3301      	adds	r3, #1
 8016f86:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
 8016f8a:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 8016f8e:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	@ 0x3e8
 8016f92:	429a      	cmp	r2, r3
 8016f94:	dbe3      	blt.n	8016f5e <handleCotaData+0x14e>
	}

	memset(dataBody, '\0', sizeof(dataBody));
 8016f96:	f507 73a6 	add.w	r3, r7, #332	@ 0x14c
 8016f9a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8016f9e:	2100      	movs	r1, #0
 8016fa0:	4618      	mov	r0, r3
 8016fa2:	f007 ff35 	bl	801ee10 <memset>
	memcpy(dataBody, hex_string, strlen(hex_string));
 8016fa6:	f8d7 03e0 	ldr.w	r0, [r7, #992]	@ 0x3e0
 8016faa:	f7e9 f97b 	bl	80002a4 <strlen>
 8016fae:	4602      	mov	r2, r0
 8016fb0:	f507 73a6 	add.w	r3, r7, #332	@ 0x14c
 8016fb4:	f8d7 13e0 	ldr.w	r1, [r7, #992]	@ 0x3e0
 8016fb8:	4618      	mov	r0, r3
 8016fba:	f008 f89c 	bl	801f0f6 <memcpy>
	memset(hex_string, 0, sizeof(hex_string));
 8016fbe:	4633      	mov	r3, r6
 8016fc0:	461a      	mov	r2, r3
 8016fc2:	2100      	movs	r1, #0
 8016fc4:	f8d7 03e0 	ldr.w	r0, [r7, #992]	@ 0x3e0
 8016fc8:	f007 ff22 	bl	801ee10 <memset>
	// Calculate the checksum
	uint8_t checksum = Calculate_CRC8((uint8_t*) dataBody, strlen(dataBody));
 8016fcc:	f507 73a6 	add.w	r3, r7, #332	@ 0x14c
 8016fd0:	4618      	mov	r0, r3
 8016fd2:	f7e9 f967 	bl	80002a4 <strlen>
 8016fd6:	4602      	mov	r2, r0
 8016fd8:	f507 73a6 	add.w	r3, r7, #332	@ 0x14c
 8016fdc:	4611      	mov	r1, r2
 8016fde:	4618      	mov	r0, r3
 8016fe0:	f000 fdbc 	bl	8017b5c <Calculate_CRC8>
 8016fe4:	4603      	mov	r3, r0
 8016fe6:	f887 33df 	strb.w	r3, [r7, #991]	@ 0x3df
	memset(str1, 0, sizeof(str1));
 8016fea:	f107 0320 	add.w	r3, r7, #32
 8016fee:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8016ff2:	2100      	movs	r1, #0
 8016ff4:	4618      	mov	r0, r3
 8016ff6:	f007 ff0b 	bl	801ee10 <memset>

	// Construct the string
	snprintf((char*) str1, sizeof(str1), "hexKey=%s%s,%d,%s,%d,%s,%0X%c", ckey1,
 8016ffa:	4b62      	ldr	r3, [pc, #392]	@ (8017184 <handleCotaData+0x374>)
 8016ffc:	681a      	ldr	r2, [r3, #0]
 8016ffe:	f897 33df 	ldrb.w	r3, [r7, #991]	@ 0x3df
 8017002:	f107 0020 	add.w	r0, r7, #32
 8017006:	212a      	movs	r1, #42	@ 0x2a
 8017008:	9106      	str	r1, [sp, #24]
 801700a:	9305      	str	r3, [sp, #20]
 801700c:	f507 73a6 	add.w	r3, r7, #332	@ 0x14c
 8017010:	9304      	str	r3, [sp, #16]
 8017012:	2301      	movs	r3, #1
 8017014:	9303      	str	r3, [sp, #12]
 8017016:	4b57      	ldr	r3, [pc, #348]	@ (8017174 <handleCotaData+0x364>)
 8017018:	9302      	str	r3, [sp, #8]
 801701a:	2305      	movs	r3, #5
 801701c:	9301      	str	r3, [sp, #4]
 801701e:	4b5a      	ldr	r3, [pc, #360]	@ (8017188 <handleCotaData+0x378>)
 8017020:	9300      	str	r3, [sp, #0]
 8017022:	4613      	mov	r3, r2
 8017024:	4a59      	ldr	r2, [pc, #356]	@ (801718c <handleCotaData+0x37c>)
 8017026:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 801702a:	f007 fd61 	bl	801eaf0 <sniprintf>
	header, 5, &Imei, 1, dataBody, checksum, Delimiter);

	printc(100, "CommandURL -  %s \n\r", str1);
 801702e:	f107 0320 	add.w	r3, r7, #32
 8017032:	461a      	mov	r2, r3
 8017034:	4956      	ldr	r1, [pc, #344]	@ (8017190 <handleCotaData+0x380>)
 8017036:	2064      	movs	r0, #100	@ 0x64
 8017038:	f7ea fcee 	bl	8001a18 <printc>

	sprintf(command, "AT+QHTTPURL=%d,%d\r\n", strlen(URL), EC_TOUT);
 801703c:	f507 701e 	add.w	r0, r7, #632	@ 0x278
 8017040:	2328      	movs	r3, #40	@ 0x28
 8017042:	2232      	movs	r2, #50	@ 0x32
 8017044:	4953      	ldr	r1, [pc, #332]	@ (8017194 <handleCotaData+0x384>)
 8017046:	f007 fd87 	bl	801eb58 <siprintf>
	clearBuffer(resBuff, sizeof(resBuff));
 801704a:	f44f 61fd 	mov.w	r1, #2024	@ 0x7e8
 801704e:	4852      	ldr	r0, [pc, #328]	@ (8017198 <handleCotaData+0x388>)
 8017050:	f7ea fd3a 	bl	8001ac8 <clearBuffer>
	if (EC200_Transmit(command, resBuff, 10000)) {
 8017054:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 8017058:	f242 7210 	movw	r2, #10000	@ 0x2710
 801705c:	494e      	ldr	r1, [pc, #312]	@ (8017198 <handleCotaData+0x388>)
 801705e:	4618      	mov	r0, r3
 8017060:	f7ea f8a4 	bl	80011ac <EC200_Transmit>
 8017064:	4603      	mov	r3, r0
 8017066:	2b00      	cmp	r3, #0
 8017068:	d004      	beq.n	8017074 <handleCotaData+0x264>
		printc(100, "AT+QHTTPURL -  %s \n\r", key_resBuffer);
 801706a:	4a4c      	ldr	r2, [pc, #304]	@ (801719c <handleCotaData+0x38c>)
 801706c:	494c      	ldr	r1, [pc, #304]	@ (80171a0 <handleCotaData+0x390>)
 801706e:	2064      	movs	r0, #100	@ 0x64
 8017070:	f7ea fcd2 	bl	8001a18 <printc>
	}
	memset(command, 0, 250);
 8017074:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 8017078:	22fa      	movs	r2, #250	@ 0xfa
 801707a:	2100      	movs	r1, #0
 801707c:	4618      	mov	r0, r3
 801707e:	f007 fec7 	bl	801ee10 <memset>

	// Send HTTP URL
	clearBuffer(resBuff, sizeof(resBuff));
 8017082:	f44f 61fd 	mov.w	r1, #2024	@ 0x7e8
 8017086:	4844      	ldr	r0, [pc, #272]	@ (8017198 <handleCotaData+0x388>)
 8017088:	f7ea fd1e 	bl	8001ac8 <clearBuffer>
	HAL_Delay(500);
 801708c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8017090:	f7ee fc9a 	bl	80059c8 <HAL_Delay>
	if (EC200_Transmit(URL, resBuff, 10000)) {
 8017094:	f242 7210 	movw	r2, #10000	@ 0x2710
 8017098:	493f      	ldr	r1, [pc, #252]	@ (8017198 <handleCotaData+0x388>)
 801709a:	4842      	ldr	r0, [pc, #264]	@ (80171a4 <handleCotaData+0x394>)
 801709c:	f7ea f886 	bl	80011ac <EC200_Transmit>
 80170a0:	4603      	mov	r3, r0
 80170a2:	2b00      	cmp	r3, #0
 80170a4:	d004      	beq.n	80170b0 <handleCotaData+0x2a0>
		printc(100, "%s \n\r", resBuff);
 80170a6:	4a3c      	ldr	r2, [pc, #240]	@ (8017198 <handleCotaData+0x388>)
 80170a8:	493f      	ldr	r1, [pc, #252]	@ (80171a8 <handleCotaData+0x398>)
 80170aa:	2064      	movs	r0, #100	@ 0x64
 80170ac:	f7ea fcb4 	bl	8001a18 <printc>
	}
	int F_Data = strlen(str1);
 80170b0:	f107 0320 	add.w	r3, r7, #32
 80170b4:	4618      	mov	r0, r3
 80170b6:	f7e9 f8f5 	bl	80002a4 <strlen>
 80170ba:	4603      	mov	r3, r0
 80170bc:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
	// Construct the AT command for HTTP POST
	sprintf(command, "AT+QHTTPPOST=%d\r\n", F_Data);
 80170c0:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 80170c4:	f8d7 23d8 	ldr.w	r2, [r7, #984]	@ 0x3d8
 80170c8:	4938      	ldr	r1, [pc, #224]	@ (80171ac <handleCotaData+0x39c>)
 80170ca:	4618      	mov	r0, r3
 80170cc:	f007 fd44 	bl	801eb58 <siprintf>

	// Transmit the command string
	clearBuffer(resBuff, sizeof(resBuff));
 80170d0:	f44f 61fd 	mov.w	r1, #2024	@ 0x7e8
 80170d4:	4830      	ldr	r0, [pc, #192]	@ (8017198 <handleCotaData+0x388>)
 80170d6:	f7ea fcf7 	bl	8001ac8 <clearBuffer>
	HAL_Delay(500);
 80170da:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80170de:	f7ee fc73 	bl	80059c8 <HAL_Delay>
	if (EC200_Transmit(command, resBuff, 10000)) {
 80170e2:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 80170e6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80170ea:	492b      	ldr	r1, [pc, #172]	@ (8017198 <handleCotaData+0x388>)
 80170ec:	4618      	mov	r0, r3
 80170ee:	f7ea f85d 	bl	80011ac <EC200_Transmit>
//		printc(100, "POST - %s \n\r", resBuff);
	}
	memset(command, 0, 250);
 80170f2:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 80170f6:	22fa      	movs	r2, #250	@ 0xfa
 80170f8:	2100      	movs	r1, #0
 80170fa:	4618      	mov	r0, r3
 80170fc:	f007 fe88 	bl	801ee10 <memset>
	// Transmit the dataBody
	clearBuffer(resBuff, sizeof(resBuff));
 8017100:	f44f 61fd 	mov.w	r1, #2024	@ 0x7e8
 8017104:	4824      	ldr	r0, [pc, #144]	@ (8017198 <handleCotaData+0x388>)
 8017106:	f7ea fcdf 	bl	8001ac8 <clearBuffer>
	HAL_Delay(500);
 801710a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 801710e:	f7ee fc5b 	bl	80059c8 <HAL_Delay>
	if (EC200_Transmit(str1, resBuff, 10000)) {
 8017112:	f107 0320 	add.w	r3, r7, #32
 8017116:	f242 7210 	movw	r2, #10000	@ 0x2710
 801711a:	491f      	ldr	r1, [pc, #124]	@ (8017198 <handleCotaData+0x388>)
 801711c:	4618      	mov	r0, r3
 801711e:	f7ea f845 	bl	80011ac <EC200_Transmit>
 8017122:	4603      	mov	r3, r0
 8017124:	2b00      	cmp	r3, #0
 8017126:	d004      	beq.n	8017132 <handleCotaData+0x322>
		printc(100, "%s \n\r", resBuff);
 8017128:	4a1b      	ldr	r2, [pc, #108]	@ (8017198 <handleCotaData+0x388>)
 801712a:	491f      	ldr	r1, [pc, #124]	@ (80171a8 <handleCotaData+0x398>)
 801712c:	2064      	movs	r0, #100	@ 0x64
 801712e:	f7ea fc73 	bl	8001a18 <printc>
	}
	memset(str1, 0, sizeof(str1));
 8017132:	f107 0320 	add.w	r3, r7, #32
 8017136:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 801713a:	2100      	movs	r1, #0
 801713c:	4618      	mov	r0, r3
 801713e:	f007 fe67 	bl	801ee10 <memset>
	HAL_Delay(500);
 8017142:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8017146:	f7ee fc3f 	bl	80059c8 <HAL_Delay>
	sprintf(command, "AT+QHTTPREAD= %d\r\n", EC_TOUT);
 801714a:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 801714e:	2228      	movs	r2, #40	@ 0x28
 8017150:	4917      	ldr	r1, [pc, #92]	@ (80171b0 <handleCotaData+0x3a0>)
 8017152:	4618      	mov	r0, r3
 8017154:	f007 fd00 	bl	801eb58 <siprintf>
	EC200_Config_Update(command);
 8017158:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 801715c:	4618      	mov	r0, r3
 801715e:	f7ff f843 	bl	80161e8 <EC200_Config_Update>
 8017162:	46d5      	mov	sp, sl

}
 8017164:	bf00      	nop
 8017166:	f507 777c 	add.w	r7, r7, #1008	@ 0x3f0
 801716a:	46bd      	mov	sp, r7
 801716c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017170:	08022ca8 	.word	0x08022ca8
 8017174:	20014adc 	.word	0x20014adc
 8017178:	08022c68 	.word	0x08022c68
 801717c:	08022b00 	.word	0x08022b00
 8017180:	08022b10 	.word	0x08022b10
 8017184:	200000a0 	.word	0x200000a0
 8017188:	08022b38 	.word	0x08022b38
 801718c:	08022b18 	.word	0x08022b18
 8017190:	08022b40 	.word	0x08022b40
 8017194:	08022b54 	.word	0x08022b54
 8017198:	200142b4 	.word	0x200142b4
 801719c:	20014c60 	.word	0x20014c60
 80171a0:	08022b68 	.word	0x08022b68
 80171a4:	08022b80 	.word	0x08022b80
 80171a8:	08022c8c 	.word	0x08022c8c
 80171ac:	08022bc4 	.word	0x08022bc4
 80171b0:	08022c94 	.word	0x08022c94

080171b4 <handleErrorResponse>:

void handleErrorResponse() {
 80171b4:	b580      	push	{r7, lr}
 80171b6:	af00      	add	r7, sp, #0
	printc(100, "Received Error Response\n");
 80171b8:	4902      	ldr	r1, [pc, #8]	@ (80171c4 <handleErrorResponse+0x10>)
 80171ba:	2064      	movs	r0, #100	@ 0x64
 80171bc:	f7ea fc2c 	bl	8001a18 <printc>
// Add your implementation here
}
 80171c0:	bf00      	nop
 80171c2:	bd80      	pop	{r7, pc}
 80171c4:	08022cc8 	.word	0x08022cc8

080171c8 <handleFotaData>:

bool handleFotaData() {
 80171c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171cc:	f2ad 4d14 	subw	sp, sp, #1044	@ 0x414
 80171d0:	af08      	add	r7, sp, #32
//	char version[] ={ "1.0.01" };
	uint8_t str[100] = { 0 };
 80171d2:	2300      	movs	r3, #0
 80171d4:	f8c7 3368 	str.w	r3, [r7, #872]	@ 0x368
 80171d8:	f507 735b 	add.w	r3, r7, #876	@ 0x36c
 80171dc:	2260      	movs	r2, #96	@ 0x60
 80171de:	2100      	movs	r1, #0
 80171e0:	4618      	mov	r0, r3
 80171e2:	f007 fe15 	bl	801ee10 <memset>
	char dataBody[300] = { 0 };
 80171e6:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 80171ea:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80171ee:	2200      	movs	r2, #0
 80171f0:	601a      	str	r2, [r3, #0]
 80171f2:	3304      	adds	r3, #4
 80171f4:	f44f 7294 	mov.w	r2, #296	@ 0x128
 80171f8:	2100      	movs	r1, #0
 80171fa:	4618      	mov	r0, r3
 80171fc:	f007 fe08 	bl	801ee10 <memset>
	char str1[300] = { 0 };
 8017200:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 8017204:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8017208:	2200      	movs	r2, #0
 801720a:	601a      	str	r2, [r3, #0]
 801720c:	3304      	adds	r3, #4
 801720e:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8017212:	2100      	movs	r1, #0
 8017214:	4618      	mov	r0, r3
 8017216:	f007 fdfb 	bl	801ee10 <memset>
	char command[250] = { 0 };
 801721a:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 801721e:	f5a3 7377 	sub.w	r3, r3, #988	@ 0x3dc
 8017222:	2200      	movs	r2, #0
 8017224:	601a      	str	r2, [r3, #0]
 8017226:	3304      	adds	r3, #4
 8017228:	22f6      	movs	r2, #246	@ 0xf6
 801722a:	2100      	movs	r1, #0
 801722c:	4618      	mov	r0, r3
 801722e:	f007 fdef 	bl	801ee10 <memset>

	redoIntouchConnect: snprintf(dataBody, sizeof(dataBody),
 8017232:	f7eb fbfb 	bl	8002a2c <getUpdateVersion>
 8017236:	4603      	mov	r3, r0
 8017238:	f507 700f 	add.w	r0, r7, #572	@ 0x23c
 801723c:	4ab1      	ldr	r2, [pc, #708]	@ (8017504 <handleFotaData+0x33c>)
 801723e:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8017242:	f007 fc55 	bl	801eaf0 <sniprintf>
			"{\"version\":\"%s\"}", getUpdateVersion());
//	snprintf(dataBody, sizeof(dataBody), "{\"version\":\"%s\"}",
//			version);
	printc(100, "String = %s \r\n", dataBody);
 8017246:	f507 730f 	add.w	r3, r7, #572	@ 0x23c
 801724a:	461a      	mov	r2, r3
 801724c:	49ae      	ldr	r1, [pc, #696]	@ (8017508 <handleFotaData+0x340>)
 801724e:	2064      	movs	r0, #100	@ 0x64
 8017250:	f7ea fbe2 	bl	8001a18 <printc>
//	ReadF_Loc(2, 1);
	cKey_update(0);
 8017254:	2000      	movs	r0, #0
 8017256:	f7ec fbb1 	bl	80039bc <cKey_update>
	int array_length = encrypt(dataBody, str);
 801725a:	f507 725a 	add.w	r2, r7, #872	@ 0x368
 801725e:	f507 730f 	add.w	r3, r7, #572	@ 0x23c
 8017262:	4611      	mov	r1, r2
 8017264:	4618      	mov	r0, r3
 8017266:	f7ea fdfd 	bl	8001e64 <encrypt>
 801726a:	f8c7 03e8 	str.w	r0, [r7, #1000]	@ 0x3e8

	char hex_string[array_length];
 801726e:	f8d7 43e8 	ldr.w	r4, [r7, #1000]	@ 0x3e8
 8017272:	466b      	mov	r3, sp
 8017274:	607b      	str	r3, [r7, #4]
 8017276:	1e63      	subs	r3, r4, #1
 8017278:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4
 801727c:	4622      	mov	r2, r4
 801727e:	2300      	movs	r3, #0
 8017280:	4615      	mov	r5, r2
 8017282:	461e      	mov	r6, r3
 8017284:	f04f 0200 	mov.w	r2, #0
 8017288:	f04f 0300 	mov.w	r3, #0
 801728c:	00f3      	lsls	r3, r6, #3
 801728e:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8017292:	00ea      	lsls	r2, r5, #3
 8017294:	4622      	mov	r2, r4
 8017296:	2300      	movs	r3, #0
 8017298:	60ba      	str	r2, [r7, #8]
 801729a:	60fb      	str	r3, [r7, #12]
 801729c:	f04f 0200 	mov.w	r2, #0
 80172a0:	f04f 0300 	mov.w	r3, #0
 80172a4:	68f9      	ldr	r1, [r7, #12]
 80172a6:	00cb      	lsls	r3, r1, #3
 80172a8:	68b9      	ldr	r1, [r7, #8]
 80172aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80172ae:	68b9      	ldr	r1, [r7, #8]
 80172b0:	00ca      	lsls	r2, r1, #3
 80172b2:	4623      	mov	r3, r4
 80172b4:	3307      	adds	r3, #7
 80172b6:	08db      	lsrs	r3, r3, #3
 80172b8:	00db      	lsls	r3, r3, #3
 80172ba:	ebad 0d03 	sub.w	sp, sp, r3
 80172be:	ab08      	add	r3, sp, #32
 80172c0:	3300      	adds	r3, #0
 80172c2:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0

	for (int i = 0; i < array_length; i++) {
 80172c6:	2300      	movs	r3, #0
 80172c8:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
 80172cc:	e015      	b.n	80172fa <handleFotaData+0x132>
		sprintf(hex_string + (i * 2), "%02X", str[i]);
 80172ce:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	@ 0x3ec
 80172d2:	005b      	lsls	r3, r3, #1
 80172d4:	461a      	mov	r2, r3
 80172d6:	f8d7 33e0 	ldr.w	r3, [r7, #992]	@ 0x3e0
 80172da:	1898      	adds	r0, r3, r2
 80172dc:	f507 725a 	add.w	r2, r7, #872	@ 0x368
 80172e0:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	@ 0x3ec
 80172e4:	4413      	add	r3, r2
 80172e6:	781b      	ldrb	r3, [r3, #0]
 80172e8:	461a      	mov	r2, r3
 80172ea:	4988      	ldr	r1, [pc, #544]	@ (801750c <handleFotaData+0x344>)
 80172ec:	f007 fc34 	bl	801eb58 <siprintf>
	for (int i = 0; i < array_length; i++) {
 80172f0:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	@ 0x3ec
 80172f4:	3301      	adds	r3, #1
 80172f6:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
 80172fa:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 80172fe:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	@ 0x3e8
 8017302:	429a      	cmp	r2, r3
 8017304:	dbe3      	blt.n	80172ce <handleFotaData+0x106>
	}

	memset(dataBody, '\0', sizeof(dataBody));
 8017306:	f507 730f 	add.w	r3, r7, #572	@ 0x23c
 801730a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 801730e:	2100      	movs	r1, #0
 8017310:	4618      	mov	r0, r3
 8017312:	f007 fd7d 	bl	801ee10 <memset>
	memcpy(dataBody, hex_string, strlen(hex_string));
 8017316:	f8d7 03e0 	ldr.w	r0, [r7, #992]	@ 0x3e0
 801731a:	f7e8 ffc3 	bl	80002a4 <strlen>
 801731e:	4602      	mov	r2, r0
 8017320:	f507 730f 	add.w	r3, r7, #572	@ 0x23c
 8017324:	f8d7 13e0 	ldr.w	r1, [r7, #992]	@ 0x3e0
 8017328:	4618      	mov	r0, r3
 801732a:	f007 fee4 	bl	801f0f6 <memcpy>
	memset(hex_string, 0, sizeof(hex_string));
 801732e:	4623      	mov	r3, r4
 8017330:	461a      	mov	r2, r3
 8017332:	2100      	movs	r1, #0
 8017334:	f8d7 03e0 	ldr.w	r0, [r7, #992]	@ 0x3e0
 8017338:	f007 fd6a 	bl	801ee10 <memset>

// Calculate the checksum

	uint8_t checksum = Calculate_CRC8((uint8_t*) dataBody, strlen(dataBody));
 801733c:	f507 730f 	add.w	r3, r7, #572	@ 0x23c
 8017340:	4618      	mov	r0, r3
 8017342:	f7e8 ffaf 	bl	80002a4 <strlen>
 8017346:	4602      	mov	r2, r0
 8017348:	f507 730f 	add.w	r3, r7, #572	@ 0x23c
 801734c:	4611      	mov	r1, r2
 801734e:	4618      	mov	r0, r3
 8017350:	f000 fc04 	bl	8017b5c <Calculate_CRC8>
 8017354:	4603      	mov	r3, r0
 8017356:	f887 33df 	strb.w	r3, [r7, #991]	@ 0x3df
	memset(str1, 0, sizeof(str1));
 801735a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801735e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8017362:	2100      	movs	r1, #0
 8017364:	4618      	mov	r0, r3
 8017366:	f007 fd53 	bl	801ee10 <memset>

	snprintf(str1, sizeof(str1), "hexKey=%s%s,%d,%s,%d,%s,%0X%c",
 801736a:	f897 33df 	ldrb.w	r3, [r7, #991]	@ 0x3df
 801736e:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8017372:	222a      	movs	r2, #42	@ 0x2a
 8017374:	9206      	str	r2, [sp, #24]
 8017376:	9305      	str	r3, [sp, #20]
 8017378:	f507 730f 	add.w	r3, r7, #572	@ 0x23c
 801737c:	9304      	str	r3, [sp, #16]
 801737e:	2301      	movs	r3, #1
 8017380:	9303      	str	r3, [sp, #12]
 8017382:	4b63      	ldr	r3, [pc, #396]	@ (8017510 <handleFotaData+0x348>)
 8017384:	9302      	str	r3, [sp, #8]
 8017386:	2306      	movs	r3, #6
 8017388:	9301      	str	r3, [sp, #4]
 801738a:	4b62      	ldr	r3, [pc, #392]	@ (8017514 <handleFotaData+0x34c>)
 801738c:	9300      	str	r3, [sp, #0]
 801738e:	4b62      	ldr	r3, [pc, #392]	@ (8017518 <handleFotaData+0x350>)
 8017390:	4a62      	ldr	r2, [pc, #392]	@ (801751c <handleFotaData+0x354>)
 8017392:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8017396:	f007 fbab 	bl	801eaf0 <sniprintf>
			ComKeys[0], header, 6, &Imei, 1, dataBody, checksum, Delimiter);

	printc(100, "Command -  %s \n\r", str1);
 801739a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801739e:	461a      	mov	r2, r3
 80173a0:	495f      	ldr	r1, [pc, #380]	@ (8017520 <handleFotaData+0x358>)
 80173a2:	2064      	movs	r0, #100	@ 0x64
 80173a4:	f7ea fb38 	bl	8001a18 <printc>

	sprintf(command, "AT+QHTTPURL=%d,%d\r\n", strlen(URL), EC_TOUT);
 80173a8:	f107 0014 	add.w	r0, r7, #20
 80173ac:	2328      	movs	r3, #40	@ 0x28
 80173ae:	2232      	movs	r2, #50	@ 0x32
 80173b0:	495c      	ldr	r1, [pc, #368]	@ (8017524 <handleFotaData+0x35c>)
 80173b2:	f007 fbd1 	bl	801eb58 <siprintf>
	clearBuffer(resBuff, sizeof(resBuff));
 80173b6:	f44f 61fd 	mov.w	r1, #2024	@ 0x7e8
 80173ba:	485b      	ldr	r0, [pc, #364]	@ (8017528 <handleFotaData+0x360>)
 80173bc:	f7ea fb84 	bl	8001ac8 <clearBuffer>
	if (EC200_Transmit(command, resBuff, 10000)) {
 80173c0:	f107 0314 	add.w	r3, r7, #20
 80173c4:	f242 7210 	movw	r2, #10000	@ 0x2710
 80173c8:	4957      	ldr	r1, [pc, #348]	@ (8017528 <handleFotaData+0x360>)
 80173ca:	4618      	mov	r0, r3
 80173cc:	f7e9 feee 	bl	80011ac <EC200_Transmit>
 80173d0:	4603      	mov	r3, r0
 80173d2:	2b00      	cmp	r3, #0
 80173d4:	d004      	beq.n	80173e0 <handleFotaData+0x218>
		printc(100, "AT+QHTTPURL -  %s \n\r", key_resBuffer);
 80173d6:	4a55      	ldr	r2, [pc, #340]	@ (801752c <handleFotaData+0x364>)
 80173d8:	4955      	ldr	r1, [pc, #340]	@ (8017530 <handleFotaData+0x368>)
 80173da:	2064      	movs	r0, #100	@ 0x64
 80173dc:	f7ea fb1c 	bl	8001a18 <printc>
	}
	memset(command, 0, 250);
 80173e0:	f107 0314 	add.w	r3, r7, #20
 80173e4:	22fa      	movs	r2, #250	@ 0xfa
 80173e6:	2100      	movs	r1, #0
 80173e8:	4618      	mov	r0, r3
 80173ea:	f007 fd11 	bl	801ee10 <memset>

	// Send HTTP URL
	clearBuffer(resBuff, sizeof(resBuff));
 80173ee:	f44f 61fd 	mov.w	r1, #2024	@ 0x7e8
 80173f2:	484d      	ldr	r0, [pc, #308]	@ (8017528 <handleFotaData+0x360>)
 80173f4:	f7ea fb68 	bl	8001ac8 <clearBuffer>
	HAL_Delay(500);
 80173f8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80173fc:	f7ee fae4 	bl	80059c8 <HAL_Delay>
	if (EC200_Transmit(URL, resBuff, 10000)) {
 8017400:	f242 7210 	movw	r2, #10000	@ 0x2710
 8017404:	4948      	ldr	r1, [pc, #288]	@ (8017528 <handleFotaData+0x360>)
 8017406:	484b      	ldr	r0, [pc, #300]	@ (8017534 <handleFotaData+0x36c>)
 8017408:	f7e9 fed0 	bl	80011ac <EC200_Transmit>
 801740c:	4603      	mov	r3, r0
 801740e:	2b00      	cmp	r3, #0
 8017410:	d004      	beq.n	801741c <handleFotaData+0x254>
		printc(100, "%s \n\r", resBuff);
 8017412:	4a45      	ldr	r2, [pc, #276]	@ (8017528 <handleFotaData+0x360>)
 8017414:	4948      	ldr	r1, [pc, #288]	@ (8017538 <handleFotaData+0x370>)
 8017416:	2064      	movs	r0, #100	@ 0x64
 8017418:	f7ea fafe 	bl	8001a18 <printc>
	}
	int F_Data = strlen(str1);
 801741c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8017420:	4618      	mov	r0, r3
 8017422:	f7e8 ff3f 	bl	80002a4 <strlen>
 8017426:	4603      	mov	r3, r0
 8017428:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
	// Construct the AT command for HTTP POST
	sprintf(command, "AT+QHTTPPOST=%d\r\n", F_Data);
 801742c:	f107 0314 	add.w	r3, r7, #20
 8017430:	f8d7 23d8 	ldr.w	r2, [r7, #984]	@ 0x3d8
 8017434:	4941      	ldr	r1, [pc, #260]	@ (801753c <handleFotaData+0x374>)
 8017436:	4618      	mov	r0, r3
 8017438:	f007 fb8e 	bl	801eb58 <siprintf>

	// Transmit the command string
	clearBuffer(resBuff, sizeof(resBuff));
 801743c:	f44f 61fd 	mov.w	r1, #2024	@ 0x7e8
 8017440:	4839      	ldr	r0, [pc, #228]	@ (8017528 <handleFotaData+0x360>)
 8017442:	f7ea fb41 	bl	8001ac8 <clearBuffer>
	HAL_Delay(500);
 8017446:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 801744a:	f7ee fabd 	bl	80059c8 <HAL_Delay>
	if (EC200_Transmit(command, resBuff, 10000)) {
 801744e:	f107 0314 	add.w	r3, r7, #20
 8017452:	f242 7210 	movw	r2, #10000	@ 0x2710
 8017456:	4934      	ldr	r1, [pc, #208]	@ (8017528 <handleFotaData+0x360>)
 8017458:	4618      	mov	r0, r3
 801745a:	f7e9 fea7 	bl	80011ac <EC200_Transmit>
 801745e:	4603      	mov	r3, r0
 8017460:	2b00      	cmp	r3, #0
 8017462:	d004      	beq.n	801746e <handleFotaData+0x2a6>
		printc(100, "POST - %s \n\r", resBuff);
 8017464:	4a30      	ldr	r2, [pc, #192]	@ (8017528 <handleFotaData+0x360>)
 8017466:	4936      	ldr	r1, [pc, #216]	@ (8017540 <handleFotaData+0x378>)
 8017468:	2064      	movs	r0, #100	@ 0x64
 801746a:	f7ea fad5 	bl	8001a18 <printc>
	}
	memset(command, 0, 250);
 801746e:	f107 0314 	add.w	r3, r7, #20
 8017472:	22fa      	movs	r2, #250	@ 0xfa
 8017474:	2100      	movs	r1, #0
 8017476:	4618      	mov	r0, r3
 8017478:	f007 fcca 	bl	801ee10 <memset>
	// Transmit the dataBody
	clearBuffer(resBuff, sizeof(resBuff));
 801747c:	f44f 61fd 	mov.w	r1, #2024	@ 0x7e8
 8017480:	4829      	ldr	r0, [pc, #164]	@ (8017528 <handleFotaData+0x360>)
 8017482:	f7ea fb21 	bl	8001ac8 <clearBuffer>
	HAL_Delay(500);
 8017486:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 801748a:	f7ee fa9d 	bl	80059c8 <HAL_Delay>
	if (EC200_Transmit(str1, resBuff, 10000)) {
 801748e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8017492:	f242 7210 	movw	r2, #10000	@ 0x2710
 8017496:	4924      	ldr	r1, [pc, #144]	@ (8017528 <handleFotaData+0x360>)
 8017498:	4618      	mov	r0, r3
 801749a:	f7e9 fe87 	bl	80011ac <EC200_Transmit>
 801749e:	4603      	mov	r3, r0
 80174a0:	2b00      	cmp	r3, #0
 80174a2:	d004      	beq.n	80174ae <handleFotaData+0x2e6>
		printc(100, "%s \n\r", resBuff);
 80174a4:	4a20      	ldr	r2, [pc, #128]	@ (8017528 <handleFotaData+0x360>)
 80174a6:	4924      	ldr	r1, [pc, #144]	@ (8017538 <handleFotaData+0x370>)
 80174a8:	2064      	movs	r0, #100	@ 0x64
 80174aa:	f7ea fab5 	bl	8001a18 <printc>
	}

	memset(str1, 0, sizeof(str1));
 80174ae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80174b2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80174b6:	2100      	movs	r1, #0
 80174b8:	4618      	mov	r0, r3
 80174ba:	f007 fca9 	bl	801ee10 <memset>
	HAL_Delay(500);
 80174be:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80174c2:	f7ee fa81 	bl	80059c8 <HAL_Delay>
	sprintf(command, "AT+QHTTPREAD= %d\r\n", EC_TOUT);
 80174c6:	f107 0314 	add.w	r3, r7, #20
 80174ca:	2228      	movs	r2, #40	@ 0x28
 80174cc:	491d      	ldr	r1, [pc, #116]	@ (8017544 <handleFotaData+0x37c>)
 80174ce:	4618      	mov	r0, r3
 80174d0:	f007 fb42 	bl	801eb58 <siprintf>

	if (!EC200_Data_Fetch(command)) {
 80174d4:	f107 0314 	add.w	r3, r7, #20
 80174d8:	4618      	mov	r0, r3
 80174da:	f7fe fbd5 	bl	8015c88 <EC200_Data_Fetch>
 80174de:	4603      	mov	r3, r0
 80174e0:	2b00      	cmp	r3, #0
 80174e2:	d133      	bne.n	801754c <handleFotaData+0x384>
		if (intuchrRedo >= 3)
 80174e4:	4b18      	ldr	r3, [pc, #96]	@ (8017548 <handleFotaData+0x380>)
 80174e6:	781b      	ldrb	r3, [r3, #0]
 80174e8:	2b02      	cmp	r3, #2
 80174ea:	d901      	bls.n	80174f0 <handleFotaData+0x328>
			return false;
 80174ec:	2300      	movs	r3, #0
 80174ee:	e0f2      	b.n	80176d6 <handleFotaData+0x50e>
		intuchrRedo++;
 80174f0:	4b15      	ldr	r3, [pc, #84]	@ (8017548 <handleFotaData+0x380>)
 80174f2:	781b      	ldrb	r3, [r3, #0]
 80174f4:	3301      	adds	r3, #1
 80174f6:	b2da      	uxtb	r2, r3
 80174f8:	4b13      	ldr	r3, [pc, #76]	@ (8017548 <handleFotaData+0x380>)
 80174fa:	701a      	strb	r2, [r3, #0]
		goto redoIntouchConnect;
 80174fc:	f8d7 d004 	ldr.w	sp, [r7, #4]
 8017500:	e697      	b.n	8017232 <handleFotaData+0x6a>
 8017502:	bf00      	nop
 8017504:	08022ce4 	.word	0x08022ce4
 8017508:	08022cf8 	.word	0x08022cf8
 801750c:	08022b10 	.word	0x08022b10
 8017510:	20014adc 	.word	0x20014adc
 8017514:	08022b38 	.word	0x08022b38
 8017518:	20014b54 	.word	0x20014b54
 801751c:	08022b18 	.word	0x08022b18
 8017520:	08022d08 	.word	0x08022d08
 8017524:	08022b54 	.word	0x08022b54
 8017528:	200142b4 	.word	0x200142b4
 801752c:	20014c60 	.word	0x20014c60
 8017530:	08022b68 	.word	0x08022b68
 8017534:	08022b80 	.word	0x08022b80
 8017538:	08022c8c 	.word	0x08022c8c
 801753c:	08022bc4 	.word	0x08022bc4
 8017540:	08022d1c 	.word	0x08022d1c
 8017544:	08022c94 	.word	0x08022c94
 8017548:	20014aec 	.word	0x20014aec

	}

	F_Data = 0;
 801754c:	2300      	movs	r3, #0
 801754e:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
	F_Data = strlen(Decrypt_d);
 8017552:	4865      	ldr	r0, [pc, #404]	@ (80176e8 <handleFotaData+0x520>)
 8017554:	f7e8 fea6 	bl	80002a4 <strlen>
 8017558:	4603      	mov	r3, r0
 801755a:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
	char DURL[F_Data];
 801755e:	f8d7 13d8 	ldr.w	r1, [r7, #984]	@ 0x3d8
 8017562:	1e4b      	subs	r3, r1, #1
 8017564:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
 8017568:	460a      	mov	r2, r1
 801756a:	2300      	movs	r3, #0
 801756c:	4692      	mov	sl, r2
 801756e:	469b      	mov	fp, r3
 8017570:	f04f 0200 	mov.w	r2, #0
 8017574:	f04f 0300 	mov.w	r3, #0
 8017578:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 801757c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8017580:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8017584:	460a      	mov	r2, r1
 8017586:	2300      	movs	r3, #0
 8017588:	4690      	mov	r8, r2
 801758a:	4699      	mov	r9, r3
 801758c:	f04f 0200 	mov.w	r2, #0
 8017590:	f04f 0300 	mov.w	r3, #0
 8017594:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8017598:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801759c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80175a0:	460b      	mov	r3, r1
 80175a2:	3307      	adds	r3, #7
 80175a4:	08db      	lsrs	r3, r3, #3
 80175a6:	00db      	lsls	r3, r3, #3
 80175a8:	ebad 0d03 	sub.w	sp, sp, r3
 80175ac:	ab08      	add	r3, sp, #32
 80175ae:	3300      	adds	r3, #0
 80175b0:	f8c7 33d0 	str.w	r3, [r7, #976]	@ 0x3d0
	memset(DURL, 0, sizeof(DURL));
 80175b4:	460b      	mov	r3, r1
 80175b6:	461a      	mov	r2, r3
 80175b8:	2100      	movs	r1, #0
 80175ba:	f8d7 03d0 	ldr.w	r0, [r7, #976]	@ 0x3d0
 80175be:	f007 fc27 	bl	801ee10 <memset>
	uint8_t paddingVal = Decrypt_d[F_Data - 1];
 80175c2:	f8d7 33d8 	ldr.w	r3, [r7, #984]	@ 0x3d8
 80175c6:	3b01      	subs	r3, #1
 80175c8:	4a47      	ldr	r2, [pc, #284]	@ (80176e8 <handleFotaData+0x520>)
 80175ca:	5cd3      	ldrb	r3, [r2, r3]
 80175cc:	f887 33cf 	strb.w	r3, [r7, #975]	@ 0x3cf
	printc(1000, "Download-URL = %s \r\n", Decrypt_d);
 80175d0:	4a45      	ldr	r2, [pc, #276]	@ (80176e8 <handleFotaData+0x520>)
 80175d2:	4946      	ldr	r1, [pc, #280]	@ (80176ec <handleFotaData+0x524>)
 80175d4:	20e8      	movs	r0, #232	@ 0xe8
 80175d6:	f7ea fa1f 	bl	8001a18 <printc>
	memcpy(DURL, Decrypt_d, F_Data - paddingVal);
 80175da:	f897 33cf 	ldrb.w	r3, [r7, #975]	@ 0x3cf
 80175de:	f8d7 23d8 	ldr.w	r2, [r7, #984]	@ 0x3d8
 80175e2:	1ad3      	subs	r3, r2, r3
 80175e4:	461a      	mov	r2, r3
 80175e6:	4940      	ldr	r1, [pc, #256]	@ (80176e8 <handleFotaData+0x520>)
 80175e8:	f8d7 03d0 	ldr.w	r0, [r7, #976]	@ 0x3d0
 80175ec:	f007 fd83 	bl	801f0f6 <memcpy>
	print(1000, DURL, strlen(DURL));
 80175f0:	f8d7 03d0 	ldr.w	r0, [r7, #976]	@ 0x3d0
 80175f4:	f7e8 fe56 	bl	80002a4 <strlen>
 80175f8:	4603      	mov	r3, r0
 80175fa:	461a      	mov	r2, r3
 80175fc:	f8d7 13d0 	ldr.w	r1, [r7, #976]	@ 0x3d0
 8017600:	20e8      	movs	r0, #232	@ 0xe8
 8017602:	f7ea fa45 	bl	8001a90 <print>
	memset(command, 0, 250);
 8017606:	f107 0314 	add.w	r3, r7, #20
 801760a:	22fa      	movs	r2, #250	@ 0xfa
 801760c:	2100      	movs	r1, #0
 801760e:	4618      	mov	r0, r3
 8017610:	f007 fbfe 	bl	801ee10 <memset>

	sprintf(command, "AT+QHTTPURL=%d,%d\r\n", strlen(DURL), 30);
 8017614:	f8d7 03d0 	ldr.w	r0, [r7, #976]	@ 0x3d0
 8017618:	f7e8 fe44 	bl	80002a4 <strlen>
 801761c:	4602      	mov	r2, r0
 801761e:	f107 0014 	add.w	r0, r7, #20
 8017622:	231e      	movs	r3, #30
 8017624:	4932      	ldr	r1, [pc, #200]	@ (80176f0 <handleFotaData+0x528>)
 8017626:	f007 fa97 	bl	801eb58 <siprintf>
	clearBuffer(resBuff, sizeof(resBuff));
 801762a:	f44f 61fd 	mov.w	r1, #2024	@ 0x7e8
 801762e:	4831      	ldr	r0, [pc, #196]	@ (80176f4 <handleFotaData+0x52c>)
 8017630:	f7ea fa4a 	bl	8001ac8 <clearBuffer>
	HAL_Delay(100);
 8017634:	2064      	movs	r0, #100	@ 0x64
 8017636:	f7ee f9c7 	bl	80059c8 <HAL_Delay>
	if (EC200_Transmit(command, resBuff, 10000)) {
 801763a:	f107 0314 	add.w	r3, r7, #20
 801763e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8017642:	492c      	ldr	r1, [pc, #176]	@ (80176f4 <handleFotaData+0x52c>)
 8017644:	4618      	mov	r0, r3
 8017646:	f7e9 fdb1 	bl	80011ac <EC200_Transmit>
 801764a:	4603      	mov	r3, r0
 801764c:	2b00      	cmp	r3, #0
 801764e:	d004      	beq.n	801765a <handleFotaData+0x492>
		printc(100, "%s \n\r", resBuff);
 8017650:	4a28      	ldr	r2, [pc, #160]	@ (80176f4 <handleFotaData+0x52c>)
 8017652:	4929      	ldr	r1, [pc, #164]	@ (80176f8 <handleFotaData+0x530>)
 8017654:	2064      	movs	r0, #100	@ 0x64
 8017656:	f7ea f9df 	bl	8001a18 <printc>
	}
	clearBuffer(resBuff, sizeof(resBuff));
 801765a:	f44f 61fd 	mov.w	r1, #2024	@ 0x7e8
 801765e:	4825      	ldr	r0, [pc, #148]	@ (80176f4 <handleFotaData+0x52c>)
 8017660:	f7ea fa32 	bl	8001ac8 <clearBuffer>
	if (EC200_Transmit(DURL, resBuff, 20000)) {
 8017664:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8017668:	4922      	ldr	r1, [pc, #136]	@ (80176f4 <handleFotaData+0x52c>)
 801766a:	f8d7 03d0 	ldr.w	r0, [r7, #976]	@ 0x3d0
 801766e:	f7e9 fd9d 	bl	80011ac <EC200_Transmit>
 8017672:	4603      	mov	r3, r0
 8017674:	2b00      	cmp	r3, #0
 8017676:	d004      	beq.n	8017682 <handleFotaData+0x4ba>
		printc(100, "URL%s \n\r", resBuff);
 8017678:	4a1e      	ldr	r2, [pc, #120]	@ (80176f4 <handleFotaData+0x52c>)
 801767a:	4920      	ldr	r1, [pc, #128]	@ (80176fc <handleFotaData+0x534>)
 801767c:	2064      	movs	r0, #100	@ 0x64
 801767e:	f7ea f9cb 	bl	8001a18 <printc>
	}

	memset(command, 0, 250);
 8017682:	f107 0314 	add.w	r3, r7, #20
 8017686:	22fa      	movs	r2, #250	@ 0xfa
 8017688:	2100      	movs	r1, #0
 801768a:	4618      	mov	r0, r3
 801768c:	f007 fbc0 	bl	801ee10 <memset>
	// Send HTTP GET request
	clearBuffer(resBuff, sizeof(resBuff));
 8017690:	f44f 61fd 	mov.w	r1, #2024	@ 0x7e8
 8017694:	4817      	ldr	r0, [pc, #92]	@ (80176f4 <handleFotaData+0x52c>)
 8017696:	f7ea fa17 	bl	8001ac8 <clearBuffer>
	if (EC200_Transmit("AT+QHTTPGET\r\n", resBuff, 20000)) {
 801769a:	f644 6220 	movw	r2, #20000	@ 0x4e20
 801769e:	4915      	ldr	r1, [pc, #84]	@ (80176f4 <handleFotaData+0x52c>)
 80176a0:	4817      	ldr	r0, [pc, #92]	@ (8017700 <handleFotaData+0x538>)
 80176a2:	f7e9 fd83 	bl	80011ac <EC200_Transmit>
 80176a6:	4603      	mov	r3, r0
 80176a8:	2b00      	cmp	r3, #0
 80176aa:	d010      	beq.n	80176ce <handleFotaData+0x506>
		printc(100, "%s \n\r", resBuff);
 80176ac:	4a11      	ldr	r2, [pc, #68]	@ (80176f4 <handleFotaData+0x52c>)
 80176ae:	4912      	ldr	r1, [pc, #72]	@ (80176f8 <handleFotaData+0x530>)
 80176b0:	2064      	movs	r0, #100	@ 0x64
 80176b2:	f7ea f9b1 	bl	8001a18 <printc>
		clearBuffer(resBuff, sizeof(resBuff));
 80176b6:	f44f 61fd 	mov.w	r1, #2024	@ 0x7e8
 80176ba:	480e      	ldr	r0, [pc, #56]	@ (80176f4 <handleFotaData+0x52c>)
 80176bc:	f7ea fa04 	bl	8001ac8 <clearBuffer>
		switchIdle();
 80176c0:	f7ea f966 	bl	8001990 <switchIdle>
		wait_for_response(resBuff, 20000);
 80176c4:	f644 6120 	movw	r1, #20000	@ 0x4e20
 80176c8:	480a      	ldr	r0, [pc, #40]	@ (80176f4 <handleFotaData+0x52c>)
 80176ca:	f7e9 fd1f 	bl	800110c <wait_for_response>
	}
	// Read the Response
	EC200_File_save("AT+QHTTPREAD=80\r\n");
 80176ce:	480d      	ldr	r0, [pc, #52]	@ (8017704 <handleFotaData+0x53c>)
 80176d0:	f7fe fbc2 	bl	8015e58 <EC200_File_save>

	return true;
 80176d4:	2301      	movs	r3, #1
			return false;
 80176d6:	f8d7 d004 	ldr.w	sp, [r7, #4]
}
 80176da:	4618      	mov	r0, r3
 80176dc:	f507 777d 	add.w	r7, r7, #1012	@ 0x3f4
 80176e0:	46bd      	mov	sp, r7
 80176e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80176e6:	bf00      	nop
 80176e8:	20013eb4 	.word	0x20013eb4
 80176ec:	08022d2c 	.word	0x08022d2c
 80176f0:	08022b54 	.word	0x08022b54
 80176f4:	200142b4 	.word	0x200142b4
 80176f8:	08022c8c 	.word	0x08022c8c
 80176fc:	08022d44 	.word	0x08022d44
 8017700:	08022d50 	.word	0x08022d50
 8017704:	08022d60 	.word	0x08022d60

08017708 <processMessage>:

// Main function to process incoming messages
bool processMessage(int messageType) {
 8017708:	b580      	push	{r7, lr}
 801770a:	b082      	sub	sp, #8
 801770c:	af00      	add	r7, sp, #0
 801770e:	6078      	str	r0, [r7, #4]
	switch (messageType) {
 8017710:	687b      	ldr	r3, [r7, #4]
 8017712:	3b01      	subs	r3, #1
 8017714:	2b08      	cmp	r3, #8
 8017716:	d82b      	bhi.n	8017770 <processMessage+0x68>
 8017718:	a201      	add	r2, pc, #4	@ (adr r2, 8017720 <processMessage+0x18>)
 801771a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801771e:	bf00      	nop
 8017720:	08017745 	.word	0x08017745
 8017724:	0801774b 	.word	0x0801774b
 8017728:	08017751 	.word	0x08017751
 801772c:	08017757 	.word	0x08017757
 8017730:	0801775d 	.word	0x0801775d
 8017734:	08017763 	.word	0x08017763
 8017738:	08017771 	.word	0x08017771
 801773c:	08017771 	.word	0x08017771
 8017740:	0801776b 	.word	0x0801776b
	case 1:
		handleKeysRequest();  // Finished
 8017744:	f7ff f99e 	bl	8016a84 <handleKeysRequest>
		break;
 8017748:	e017      	b.n	801777a <processMessage+0x72>
	case 2:
		handleKeysUpdate();
 801774a:	f7ff fb43 	bl	8016dd4 <handleKeysUpdate>
		break;
 801774e:	e014      	b.n	801777a <processMessage+0x72>
	case 3:
		handleFotaDetails();
 8017750:	f7ff fb4a 	bl	8016de8 <handleFotaDetails>
		break;
 8017754:	e011      	b.n	801777a <processMessage+0x72>
	case 4:
		handleVersionStatus();
 8017756:	f7ff fb51 	bl	8016dfc <handleVersionStatus>
		break;
 801775a:	e00e      	b.n	801777a <processMessage+0x72>
	case 5:
		handleCotaData();
 801775c:	f7ff fb58 	bl	8016e10 <handleCotaData>
		break;
 8017760:	e00b      	b.n	801777a <processMessage+0x72>
	case 6:
		return handleFotaData();           // in-progress
 8017762:	f7ff fd31 	bl	80171c8 <handleFotaData>
 8017766:	4603      	mov	r3, r0
 8017768:	e008      	b.n	801777c <processMessage+0x74>
		break;
	case 9:
		handleErrorResponse();
 801776a:	f7ff fd23 	bl	80171b4 <handleErrorResponse>
		break;
 801776e:	e004      	b.n	801777a <processMessage+0x72>
	default:
		printc(100, "Invalid Message Type\n");
 8017770:	4904      	ldr	r1, [pc, #16]	@ (8017784 <processMessage+0x7c>)
 8017772:	2064      	movs	r0, #100	@ 0x64
 8017774:	f7ea f950 	bl	8001a18 <printc>
		break;
 8017778:	bf00      	nop
	}
	return false;
 801777a:	2300      	movs	r3, #0
}
 801777c:	4618      	mov	r0, r3
 801777e:	3708      	adds	r7, #8
 8017780:	46bd      	mov	sp, r7
 8017782:	bd80      	pop	{r7, pc}
 8017784:	08022d74 	.word	0x08022d74

08017788 <Config_Update>:

void Config_Update(char *cmnds, char *Data) {
 8017788:	b580      	push	{r7, lr}
 801778a:	b0c0      	sub	sp, #256	@ 0x100
 801778c:	af02      	add	r7, sp, #8
 801778e:	6078      	str	r0, [r7, #4]
 8017790:	6039      	str	r1, [r7, #0]
	if (strcmp(cmnds, "IMEI") == 0) {
 8017792:	4936      	ldr	r1, [pc, #216]	@ (801786c <Config_Update+0xe4>)
 8017794:	6878      	ldr	r0, [r7, #4]
 8017796:	f7e8 fd7b 	bl	8000290 <strcmp>
 801779a:	4603      	mov	r3, r0
 801779c:	2b00      	cmp	r3, #0
 801779e:	d160      	bne.n	8017862 <Config_Update+0xda>
		char RspBuff[200] = { 0 };
 80177a0:	2300      	movs	r3, #0
 80177a2:	60fb      	str	r3, [r7, #12]
 80177a4:	f107 0310 	add.w	r3, r7, #16
 80177a8:	22c4      	movs	r2, #196	@ 0xc4
 80177aa:	2100      	movs	r1, #0
 80177ac:	4618      	mov	r0, r3
 80177ae:	f007 fb2f 	bl	801ee10 <memset>
		char ExBuff[20] = { 0 };
 80177b2:	2300      	movs	r3, #0
 80177b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80177b8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80177bc:	2200      	movs	r2, #0
 80177be:	601a      	str	r2, [r3, #0]
 80177c0:	605a      	str	r2, [r3, #4]
 80177c2:	609a      	str	r2, [r3, #8]
 80177c4:	60da      	str	r2, [r3, #12]
		char *Result;
		int size, retryCount;
		int EL = 0, SL = 0;
 80177c6:	2300      	movs	r3, #0
 80177c8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80177cc:	2300      	movs	r3, #0
 80177ce:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0

//		HAL_UART_Transmit(&huart1, (uint8_t*) "AT+GSN\r\n",
//				strlen("AT+GSN\r\n"), 2000);
//		HAL_UART_Receive(&huart1, (uint8_t*) RspBuff, sizeof(RspBuff), 5000);
		if (EC200_Transmit("AT+GSN\r\n", RspBuff, EC200MINRESONSETIME)) {
 80177d2:	f107 030c 	add.w	r3, r7, #12
 80177d6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80177da:	4619      	mov	r1, r3
 80177dc:	4824      	ldr	r0, [pc, #144]	@ (8017870 <Config_Update+0xe8>)
 80177de:	f7e9 fce5 	bl	80011ac <EC200_Transmit>
 80177e2:	4603      	mov	r3, r0
 80177e4:	2b00      	cmp	r3, #0
 80177e6:	d03c      	beq.n	8017862 <Config_Update+0xda>
			printc(100, "AT+GSN\r\n res -> %s", RspBuff);
 80177e8:	f107 030c 	add.w	r3, r7, #12
 80177ec:	461a      	mov	r2, r3
 80177ee:	4921      	ldr	r1, [pc, #132]	@ (8017874 <Config_Update+0xec>)
 80177f0:	2064      	movs	r0, #100	@ 0x64
 80177f2:	f7ea f911 	bl	8001a18 <printc>
			Result = Response_Check((char*) RspBuff);
 80177f6:	f107 030c 	add.w	r3, r7, #12
 80177fa:	4618      	mov	r0, r3
 80177fc:	f000 f860 	bl	80178c0 <Response_Check>
 8017800:	4603      	mov	r3, r0
 8017802:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
			EL = Result - 5;
 8017806:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 801780a:	3b05      	subs	r3, #5
 801780c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
			SL = EL - 14;
 8017810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8017814:	3b0e      	subs	r3, #14
 8017816:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
//					retryCount);
//			goto retry;
//			retryCount++;
//		}

			Extract_Data_from_Buffer(SL, EL, RspBuff, ExBuff, &size);
 801781a:	f107 01d8 	add.w	r1, r7, #216	@ 0xd8
 801781e:	f107 020c 	add.w	r2, r7, #12
 8017822:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8017826:	9300      	str	r3, [sp, #0]
 8017828:	460b      	mov	r3, r1
 801782a:	f8d7 10f4 	ldr.w	r1, [r7, #244]	@ 0xf4
 801782e:	f8d7 00f0 	ldr.w	r0, [r7, #240]	@ 0xf0
 8017832:	f000 f823 	bl	801787c <Extract_Data_from_Buffer>

//		Seprate_String(RspBuff, 5, ExBuff);
			// need to add FlasH Write to Config Sector location
			memcpy(Imei, ExBuff, strlen(ExBuff));
 8017836:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 801783a:	4618      	mov	r0, r3
 801783c:	f7e8 fd32 	bl	80002a4 <strlen>
 8017840:	4602      	mov	r2, r0
 8017842:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8017846:	4619      	mov	r1, r3
 8017848:	480b      	ldr	r0, [pc, #44]	@ (8017878 <Config_Update+0xf0>)
 801784a:	f007 fc54 	bl	801f0f6 <memcpy>
			memset(RspBuff, 0, sizeof(RspBuff));
 801784e:	f107 030c 	add.w	r3, r7, #12
 8017852:	22c8      	movs	r2, #200	@ 0xc8
 8017854:	2100      	movs	r1, #0
 8017856:	4618      	mov	r0, r3
 8017858:	f007 fada 	bl	801ee10 <memset>
			HAL_Delay(100);
 801785c:	2064      	movs	r0, #100	@ 0x64
 801785e:	f7ee f8b3 	bl	80059c8 <HAL_Delay>
		}
	}
}
 8017862:	bf00      	nop
 8017864:	37f8      	adds	r7, #248	@ 0xf8
 8017866:	46bd      	mov	sp, r7
 8017868:	bd80      	pop	{r7, pc}
 801786a:	bf00      	nop
 801786c:	08022d8c 	.word	0x08022d8c
 8017870:	08022d94 	.word	0x08022d94
 8017874:	08022da0 	.word	0x08022da0
 8017878:	20014adc 	.word	0x20014adc

0801787c <Extract_Data_from_Buffer>:

void Extract_Data_from_Buffer(int Start_loc, int End_loc, char Buff[],
		char *extractedData, int *size) {
 801787c:	b580      	push	{r7, lr}
 801787e:	b084      	sub	sp, #16
 8017880:	af00      	add	r7, sp, #0
 8017882:	60f8      	str	r0, [r7, #12]
 8017884:	60b9      	str	r1, [r7, #8]
 8017886:	607a      	str	r2, [r7, #4]
 8017888:	603b      	str	r3, [r7, #0]
	*size = End_loc - Start_loc + 1;
 801788a:	68ba      	ldr	r2, [r7, #8]
 801788c:	68fb      	ldr	r3, [r7, #12]
 801788e:	1ad3      	subs	r3, r2, r3
 8017890:	1c5a      	adds	r2, r3, #1
 8017892:	69bb      	ldr	r3, [r7, #24]
 8017894:	601a      	str	r2, [r3, #0]
	strncpy(extractedData, &Buff[Start_loc], *size);
 8017896:	68fb      	ldr	r3, [r7, #12]
 8017898:	687a      	ldr	r2, [r7, #4]
 801789a:	18d1      	adds	r1, r2, r3
 801789c:	69bb      	ldr	r3, [r7, #24]
 801789e:	681b      	ldr	r3, [r3, #0]
 80178a0:	461a      	mov	r2, r3
 80178a2:	6838      	ldr	r0, [r7, #0]
 80178a4:	f007 fb05 	bl	801eeb2 <strncpy>
	extractedData[*size] = '\0'; // Null-terminate the string
 80178a8:	69bb      	ldr	r3, [r7, #24]
 80178aa:	681b      	ldr	r3, [r3, #0]
 80178ac:	461a      	mov	r2, r3
 80178ae:	683b      	ldr	r3, [r7, #0]
 80178b0:	4413      	add	r3, r2
 80178b2:	2200      	movs	r2, #0
 80178b4:	701a      	strb	r2, [r3, #0]
//	printc(100,"Extracted data: %s\n", extractedData);
}
 80178b6:	bf00      	nop
 80178b8:	3710      	adds	r7, #16
 80178ba:	46bd      	mov	sp, r7
 80178bc:	bd80      	pop	{r7, pc}
	...

080178c0 <Response_Check>:

// Function to Check the Response Of the At commands
int Response_Check(char Buff[]) {
 80178c0:	b580      	push	{r7, lr}
 80178c2:	b086      	sub	sp, #24
 80178c4:	af00      	add	r7, sp, #0
 80178c6:	6078      	str	r0, [r7, #4]
	char *result_OK = strstr(Buff, "OK");
 80178c8:	4922      	ldr	r1, [pc, #136]	@ (8017954 <Response_Check+0x94>)
 80178ca:	6878      	ldr	r0, [r7, #4]
 80178cc:	f007 fb60 	bl	801ef90 <strstr>
 80178d0:	6178      	str	r0, [r7, #20]
	char *result_error = strstr(Buff, "\"errorResponse\":\"succesful\"");
 80178d2:	4921      	ldr	r1, [pc, #132]	@ (8017958 <Response_Check+0x98>)
 80178d4:	6878      	ldr	r0, [r7, #4]
 80178d6:	f007 fb5b 	bl	801ef90 <strstr>
 80178da:	6138      	str	r0, [r7, #16]
	char *Result_MMI = strstr(Buff, "$MMI");
 80178dc:	491f      	ldr	r1, [pc, #124]	@ (801795c <Response_Check+0x9c>)
 80178de:	6878      	ldr	r0, [r7, #4]
 80178e0:	f007 fb56 	bl	801ef90 <strstr>
 80178e4:	60f8      	str	r0, [r7, #12]

	if (Result_MMI != NULL) {
 80178e6:	68fb      	ldr	r3, [r7, #12]
 80178e8:	2b00      	cmp	r3, #0
 80178ea:	d00b      	beq.n	8017904 <Response_Check+0x44>

		printc(100, "Substring '$MMI' found at index %d\n", Result_MMI - Buff);
 80178ec:	68fa      	ldr	r2, [r7, #12]
 80178ee:	687b      	ldr	r3, [r7, #4]
 80178f0:	1ad3      	subs	r3, r2, r3
 80178f2:	461a      	mov	r2, r3
 80178f4:	491a      	ldr	r1, [pc, #104]	@ (8017960 <Response_Check+0xa0>)
 80178f6:	2064      	movs	r0, #100	@ 0x64
 80178f8:	f7ea f88e 	bl	8001a18 <printc>
		return Result_MMI - Buff; // Return index of 'errorResponse':'succesful'
 80178fc:	68fa      	ldr	r2, [r7, #12]
 80178fe:	687b      	ldr	r3, [r7, #4]
 8017900:	1ad3      	subs	r3, r2, r3
 8017902:	e022      	b.n	801794a <Response_Check+0x8a>
	} else if (result_OK != NULL) {
 8017904:	697b      	ldr	r3, [r7, #20]
 8017906:	2b00      	cmp	r3, #0
 8017908:	d00b      	beq.n	8017922 <Response_Check+0x62>
		printc(100, "Substring 'OK' found at index %d\n", result_OK - Buff);
 801790a:	697a      	ldr	r2, [r7, #20]
 801790c:	687b      	ldr	r3, [r7, #4]
 801790e:	1ad3      	subs	r3, r2, r3
 8017910:	461a      	mov	r2, r3
 8017912:	4914      	ldr	r1, [pc, #80]	@ (8017964 <Response_Check+0xa4>)
 8017914:	2064      	movs	r0, #100	@ 0x64
 8017916:	f7ea f87f 	bl	8001a18 <printc>
		return result_OK - Buff; // Return index of 'OK'
 801791a:	697a      	ldr	r2, [r7, #20]
 801791c:	687b      	ldr	r3, [r7, #4]
 801791e:	1ad3      	subs	r3, r2, r3
 8017920:	e013      	b.n	801794a <Response_Check+0x8a>
	} else if (result_error != NULL) {
 8017922:	693b      	ldr	r3, [r7, #16]
 8017924:	2b00      	cmp	r3, #0
 8017926:	d00a      	beq.n	801793e <Response_Check+0x7e>
		printc(100, "Substring 'errorResponse':'succesful' found at index %d\n",
 8017928:	693a      	ldr	r2, [r7, #16]
 801792a:	687b      	ldr	r3, [r7, #4]
 801792c:	1ad3      	subs	r3, r2, r3
 801792e:	461a      	mov	r2, r3
 8017930:	490d      	ldr	r1, [pc, #52]	@ (8017968 <Response_Check+0xa8>)
 8017932:	2064      	movs	r0, #100	@ 0x64
 8017934:	f7ea f870 	bl	8001a18 <printc>
				result_error - Buff);
		return -1; // Return index of 'errorResponse':'succesful'
 8017938:	f04f 33ff 	mov.w	r3, #4294967295
 801793c:	e005      	b.n	801794a <Response_Check+0x8a>
	} else {
		printc(100, "Neither substring found\n");
 801793e:	490b      	ldr	r1, [pc, #44]	@ (801796c <Response_Check+0xac>)
 8017940:	2064      	movs	r0, #100	@ 0x64
 8017942:	f7ea f869 	bl	8001a18 <printc>
		return -1; // Indicate that neither substring was found
 8017946:	f04f 33ff 	mov.w	r3, #4294967295
	}
	return -1;
}
 801794a:	4618      	mov	r0, r3
 801794c:	3718      	adds	r7, #24
 801794e:	46bd      	mov	sp, r7
 8017950:	bd80      	pop	{r7, pc}
 8017952:	bf00      	nop
 8017954:	08022db4 	.word	0x08022db4
 8017958:	08022db8 	.word	0x08022db8
 801795c:	08022b38 	.word	0x08022b38
 8017960:	08022dd4 	.word	0x08022dd4
 8017964:	08022df8 	.word	0x08022df8
 8017968:	08022e1c 	.word	0x08022e1c
 801796c:	08022e58 	.word	0x08022e58

08017970 <extractKeys>:
	}
}
// extract keys

// Function to extract keys
void extractKeys(const char *inputString, char (*CoKeys)[33]) {
 8017970:	b580      	push	{r7, lr}
 8017972:	b086      	sub	sp, #24
 8017974:	af00      	add	r7, sp, #0
 8017976:	6078      	str	r0, [r7, #4]
 8017978:	6039      	str	r1, [r7, #0]
	const char *start = strstr(inputString, "{\"comMap\":{"); // Find the start of the comMap section
 801797a:	492a      	ldr	r1, [pc, #168]	@ (8017a24 <extractKeys+0xb4>)
 801797c:	6878      	ldr	r0, [r7, #4]
 801797e:	f007 fb07 	bl	801ef90 <strstr>
 8017982:	6178      	str	r0, [r7, #20]
	if (start == NULL) {
 8017984:	697b      	ldr	r3, [r7, #20]
 8017986:	2b00      	cmp	r3, #0
 8017988:	d104      	bne.n	8017994 <extractKeys+0x24>
		printc(100, "comMap section not found in the input string.\n");
 801798a:	4927      	ldr	r1, [pc, #156]	@ (8017a28 <extractKeys+0xb8>)
 801798c:	2064      	movs	r0, #100	@ 0x64
 801798e:	f7ea f843 	bl	8001a18 <printc>
		return;
 8017992:	e043      	b.n	8017a1c <extractKeys+0xac>
	}

	start += strlen("{\"comMap\":{"); // Move start pointer to the beginning of the comMap data
 8017994:	697b      	ldr	r3, [r7, #20]
 8017996:	330b      	adds	r3, #11
 8017998:	617b      	str	r3, [r7, #20]

// Loop to extract values
	for (int i = 0; i < 8; i++) {
 801799a:	2300      	movs	r3, #0
 801799c:	613b      	str	r3, [r7, #16]
 801799e:	e03a      	b.n	8017a16 <extractKeys+0xa6>
		// Find the start of the value
		const char *valueStart = strstr(start, ":\""); // Find the start of the value
 80179a0:	4922      	ldr	r1, [pc, #136]	@ (8017a2c <extractKeys+0xbc>)
 80179a2:	6978      	ldr	r0, [r7, #20]
 80179a4:	f007 faf4 	bl	801ef90 <strstr>
 80179a8:	60f8      	str	r0, [r7, #12]
		if (valueStart == NULL) {
 80179aa:	68fb      	ldr	r3, [r7, #12]
 80179ac:	2b00      	cmp	r3, #0
 80179ae:	d104      	bne.n	80179ba <extractKeys+0x4a>
			printc(100, "Value start not found.\n");
 80179b0:	491f      	ldr	r1, [pc, #124]	@ (8017a30 <extractKeys+0xc0>)
 80179b2:	2064      	movs	r0, #100	@ 0x64
 80179b4:	f7ea f830 	bl	8001a18 <printc>
			return;
 80179b8:	e030      	b.n	8017a1c <extractKeys+0xac>
		}
		valueStart += 2; // Move past the ":"
 80179ba:	68fb      	ldr	r3, [r7, #12]
 80179bc:	3302      	adds	r3, #2
 80179be:	60fb      	str	r3, [r7, #12]

		// Find the end of the value
		const char *valueEnd = strstr(valueStart, "\"");
 80179c0:	2122      	movs	r1, #34	@ 0x22
 80179c2:	68f8      	ldr	r0, [r7, #12]
 80179c4:	f007 fa3b 	bl	801ee3e <strchr>
 80179c8:	60b8      	str	r0, [r7, #8]
		if (valueEnd == NULL) {
 80179ca:	68bb      	ldr	r3, [r7, #8]
 80179cc:	2b00      	cmp	r3, #0
 80179ce:	d104      	bne.n	80179da <extractKeys+0x6a>
			printc(100, "Value end not found.\n");
 80179d0:	4918      	ldr	r1, [pc, #96]	@ (8017a34 <extractKeys+0xc4>)
 80179d2:	2064      	movs	r0, #100	@ 0x64
 80179d4:	f7ea f820 	bl	8001a18 <printc>
			return;
 80179d8:	e020      	b.n	8017a1c <extractKeys+0xac>
		}

		// Copy the value to the ComKeys buffer
		strncpy(CoKeys[i], valueStart, valueEnd - valueStart);
 80179da:	693a      	ldr	r2, [r7, #16]
 80179dc:	4613      	mov	r3, r2
 80179de:	015b      	lsls	r3, r3, #5
 80179e0:	4413      	add	r3, r2
 80179e2:	683a      	ldr	r2, [r7, #0]
 80179e4:	18d0      	adds	r0, r2, r3
 80179e6:	68ba      	ldr	r2, [r7, #8]
 80179e8:	68fb      	ldr	r3, [r7, #12]
 80179ea:	1ad3      	subs	r3, r2, r3
 80179ec:	461a      	mov	r2, r3
 80179ee:	68f9      	ldr	r1, [r7, #12]
 80179f0:	f007 fa5f 	bl	801eeb2 <strncpy>
		CoKeys[i][valueEnd - valueStart] = '\0'; // Null-terminate the value
 80179f4:	693a      	ldr	r2, [r7, #16]
 80179f6:	4613      	mov	r3, r2
 80179f8:	015b      	lsls	r3, r3, #5
 80179fa:	4413      	add	r3, r2
 80179fc:	683a      	ldr	r2, [r7, #0]
 80179fe:	441a      	add	r2, r3
 8017a00:	68b9      	ldr	r1, [r7, #8]
 8017a02:	68fb      	ldr	r3, [r7, #12]
 8017a04:	1acb      	subs	r3, r1, r3
 8017a06:	2100      	movs	r1, #0
 8017a08:	54d1      	strb	r1, [r2, r3]

		// Move start pointer to the next value
		start = valueEnd + 1;
 8017a0a:	68bb      	ldr	r3, [r7, #8]
 8017a0c:	3301      	adds	r3, #1
 8017a0e:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 8; i++) {
 8017a10:	693b      	ldr	r3, [r7, #16]
 8017a12:	3301      	adds	r3, #1
 8017a14:	613b      	str	r3, [r7, #16]
 8017a16:	693b      	ldr	r3, [r7, #16]
 8017a18:	2b07      	cmp	r3, #7
 8017a1a:	ddc1      	ble.n	80179a0 <extractKeys+0x30>
	}
}
 8017a1c:	3718      	adds	r7, #24
 8017a1e:	46bd      	mov	sp, r7
 8017a20:	bd80      	pop	{r7, pc}
 8017a22:	bf00      	nop
 8017a24:	08022ec4 	.word	0x08022ec4
 8017a28:	08022ed0 	.word	0x08022ed0
 8017a2c:	08022f00 	.word	0x08022f00
 8017a30:	08022f04 	.word	0x08022f04
 8017a34:	08022f1c 	.word	0x08022f1c

08017a38 <FOTA_Seprate_String>:
		printc(100, "Line %d does not exist.\n", index);
	}
}

void FOTA_Seprate_String(char Buff[], int Start_Location, int index,
		char *data[], char Encpt_Data[]) {
 8017a38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017a3c:	b08b      	sub	sp, #44	@ 0x2c
 8017a3e:	af00      	add	r7, sp, #0
 8017a40:	60f8      	str	r0, [r7, #12]
 8017a42:	60b9      	str	r1, [r7, #8]
 8017a44:	607a      	str	r2, [r7, #4]
 8017a46:	603b      	str	r3, [r7, #0]
 8017a48:	466b      	mov	r3, sp
 8017a4a:	461e      	mov	r6, r3
	char *line;
	int len = strlen(Buff) - Start_Location;
 8017a4c:	68f8      	ldr	r0, [r7, #12]
 8017a4e:	f7e8 fc29 	bl	80002a4 <strlen>
 8017a52:	4602      	mov	r2, r0
 8017a54:	68bb      	ldr	r3, [r7, #8]
 8017a56:	1ad3      	subs	r3, r2, r3
 8017a58:	61fb      	str	r3, [r7, #28]
	char tmpBuffer[len + 1]; // Allocate enough space for the string
 8017a5a:	69fb      	ldr	r3, [r7, #28]
 8017a5c:	1c59      	adds	r1, r3, #1
 8017a5e:	1e4b      	subs	r3, r1, #1
 8017a60:	61bb      	str	r3, [r7, #24]
 8017a62:	460a      	mov	r2, r1
 8017a64:	2300      	movs	r3, #0
 8017a66:	4690      	mov	r8, r2
 8017a68:	4699      	mov	r9, r3
 8017a6a:	f04f 0200 	mov.w	r2, #0
 8017a6e:	f04f 0300 	mov.w	r3, #0
 8017a72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8017a76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8017a7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8017a7e:	460a      	mov	r2, r1
 8017a80:	2300      	movs	r3, #0
 8017a82:	4614      	mov	r4, r2
 8017a84:	461d      	mov	r5, r3
 8017a86:	f04f 0200 	mov.w	r2, #0
 8017a8a:	f04f 0300 	mov.w	r3, #0
 8017a8e:	00eb      	lsls	r3, r5, #3
 8017a90:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8017a94:	00e2      	lsls	r2, r4, #3
 8017a96:	460b      	mov	r3, r1
 8017a98:	3307      	adds	r3, #7
 8017a9a:	08db      	lsrs	r3, r3, #3
 8017a9c:	00db      	lsls	r3, r3, #3
 8017a9e:	ebad 0d03 	sub.w	sp, sp, r3
 8017aa2:	466b      	mov	r3, sp
 8017aa4:	3300      	adds	r3, #0
 8017aa6:	617b      	str	r3, [r7, #20]

	memcpy(tmpBuffer, &Buff[Start_Location], len); // Copy Buff to tmpBuffer
 8017aa8:	68bb      	ldr	r3, [r7, #8]
 8017aaa:	68fa      	ldr	r2, [r7, #12]
 8017aac:	4413      	add	r3, r2
 8017aae:	69fa      	ldr	r2, [r7, #28]
 8017ab0:	4619      	mov	r1, r3
 8017ab2:	6978      	ldr	r0, [r7, #20]
 8017ab4:	f007 fb1f 	bl	801f0f6 <memcpy>
	tmpBuffer[len] = '\0'; // Null-terminate the string
 8017ab8:	697a      	ldr	r2, [r7, #20]
 8017aba:	69fb      	ldr	r3, [r7, #28]
 8017abc:	4413      	add	r3, r2
 8017abe:	2200      	movs	r2, #0
 8017ac0:	701a      	strb	r2, [r3, #0]

	int currentLine = 0;
 8017ac2:	2300      	movs	r3, #0
 8017ac4:	623b      	str	r3, [r7, #32]

	line = strtok(tmpBuffer, ",");
 8017ac6:	4922      	ldr	r1, [pc, #136]	@ (8017b50 <FOTA_Seprate_String+0x118>)
 8017ac8:	6978      	ldr	r0, [r7, #20]
 8017aca:	f007 fa05 	bl	801eed8 <strtok>
 8017ace:	6278      	str	r0, [r7, #36]	@ 0x24
	while (line != NULL && currentLine <= index) {
 8017ad0:	e029      	b.n	8017b26 <FOTA_Seprate_String+0xee>
		data[currentLine++] = line;
 8017ad2:	6a3b      	ldr	r3, [r7, #32]
 8017ad4:	1c5a      	adds	r2, r3, #1
 8017ad6:	623a      	str	r2, [r7, #32]
 8017ad8:	009b      	lsls	r3, r3, #2
 8017ada:	683a      	ldr	r2, [r7, #0]
 8017adc:	4413      	add	r3, r2
 8017ade:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017ae0:	601a      	str	r2, [r3, #0]
		if (currentLine == 5)
 8017ae2:	6a3b      	ldr	r3, [r7, #32]
 8017ae4:	2b05      	cmp	r3, #5
 8017ae6:	d108      	bne.n	8017afa <FOTA_Seprate_String+0xc2>
			memcpy(Encpt_Data, line, strlen(line));
 8017ae8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017aea:	f7e8 fbdb 	bl	80002a4 <strlen>
 8017aee:	4603      	mov	r3, r0
 8017af0:	461a      	mov	r2, r3
 8017af2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8017af4:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8017af6:	f007 fafe 	bl	801f0f6 <memcpy>
		if (currentLine == index) {
 8017afa:	6a3a      	ldr	r2, [r7, #32]
 8017afc:	687b      	ldr	r3, [r7, #4]
 8017afe:	429a      	cmp	r2, r3
 8017b00:	d106      	bne.n	8017b10 <FOTA_Seprate_String+0xd8>
			printc(100, "Line %d: %s\n", currentLine, line);
 8017b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b04:	6a3a      	ldr	r2, [r7, #32]
 8017b06:	4913      	ldr	r1, [pc, #76]	@ (8017b54 <FOTA_Seprate_String+0x11c>)
 8017b08:	2064      	movs	r0, #100	@ 0x64
 8017b0a:	f7e9 ff85 	bl	8001a18 <printc>
			break; // Stop parsing once the desired line is found
 8017b0e:	e011      	b.n	8017b34 <FOTA_Seprate_String+0xfc>
		}
		printc(100, "Line %d: %s\n", currentLine, line);
 8017b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b12:	6a3a      	ldr	r2, [r7, #32]
 8017b14:	490f      	ldr	r1, [pc, #60]	@ (8017b54 <FOTA_Seprate_String+0x11c>)
 8017b16:	2064      	movs	r0, #100	@ 0x64
 8017b18:	f7e9 ff7e 	bl	8001a18 <printc>
		line = strtok(NULL, ",");
 8017b1c:	490c      	ldr	r1, [pc, #48]	@ (8017b50 <FOTA_Seprate_String+0x118>)
 8017b1e:	2000      	movs	r0, #0
 8017b20:	f007 f9da 	bl	801eed8 <strtok>
 8017b24:	6278      	str	r0, [r7, #36]	@ 0x24
	while (line != NULL && currentLine <= index) {
 8017b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b28:	2b00      	cmp	r3, #0
 8017b2a:	d003      	beq.n	8017b34 <FOTA_Seprate_String+0xfc>
 8017b2c:	6a3a      	ldr	r2, [r7, #32]
 8017b2e:	687b      	ldr	r3, [r7, #4]
 8017b30:	429a      	cmp	r2, r3
 8017b32:	ddce      	ble.n	8017ad2 <FOTA_Seprate_String+0x9a>
	}

	if (line == NULL) {
 8017b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b36:	2b00      	cmp	r3, #0
 8017b38:	d104      	bne.n	8017b44 <FOTA_Seprate_String+0x10c>
		printc(100, "Line %d does not exist.\n", index);
 8017b3a:	687a      	ldr	r2, [r7, #4]
 8017b3c:	4906      	ldr	r1, [pc, #24]	@ (8017b58 <FOTA_Seprate_String+0x120>)
 8017b3e:	2064      	movs	r0, #100	@ 0x64
 8017b40:	f7e9 ff6a 	bl	8001a18 <printc>
 8017b44:	46b5      	mov	sp, r6
	}
}
 8017b46:	bf00      	nop
 8017b48:	372c      	adds	r7, #44	@ 0x2c
 8017b4a:	46bd      	mov	sp, r7
 8017b4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017b50:	08022f34 	.word	0x08022f34
 8017b54:	08022f38 	.word	0x08022f38
 8017b58:	08022f48 	.word	0x08022f48

08017b5c <Calculate_CRC8>:

uint8_t Calculate_CRC8(uint8_t *data, uint32_t size) {
 8017b5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017b60:	b085      	sub	sp, #20
 8017b62:	af00      	add	r7, sp, #0
 8017b64:	6078      	str	r0, [r7, #4]
 8017b66:	6039      	str	r1, [r7, #0]
 8017b68:	466b      	mov	r3, sp
 8017b6a:	461e      	mov	r6, r3
	uint8_t arr[size];
 8017b6c:	6839      	ldr	r1, [r7, #0]
 8017b6e:	460b      	mov	r3, r1
 8017b70:	3b01      	subs	r3, #1
 8017b72:	60fb      	str	r3, [r7, #12]
 8017b74:	2300      	movs	r3, #0
 8017b76:	4688      	mov	r8, r1
 8017b78:	4699      	mov	r9, r3
 8017b7a:	f04f 0200 	mov.w	r2, #0
 8017b7e:	f04f 0300 	mov.w	r3, #0
 8017b82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8017b86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8017b8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8017b8e:	2300      	movs	r3, #0
 8017b90:	460c      	mov	r4, r1
 8017b92:	461d      	mov	r5, r3
 8017b94:	f04f 0200 	mov.w	r2, #0
 8017b98:	f04f 0300 	mov.w	r3, #0
 8017b9c:	00eb      	lsls	r3, r5, #3
 8017b9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8017ba2:	00e2      	lsls	r2, r4, #3
 8017ba4:	1dcb      	adds	r3, r1, #7
 8017ba6:	08db      	lsrs	r3, r3, #3
 8017ba8:	00db      	lsls	r3, r3, #3
 8017baa:	ebad 0d03 	sub.w	sp, sp, r3
 8017bae:	466b      	mov	r3, sp
 8017bb0:	3300      	adds	r3, #0
 8017bb2:	60bb      	str	r3, [r7, #8]
	memset(arr, 0, sizeof(arr));
 8017bb4:	460a      	mov	r2, r1
 8017bb6:	2100      	movs	r1, #0
 8017bb8:	68b8      	ldr	r0, [r7, #8]
 8017bba:	f007 f929 	bl	801ee10 <memset>
	memcpy(arr, data, size);
 8017bbe:	683a      	ldr	r2, [r7, #0]
 8017bc0:	6879      	ldr	r1, [r7, #4]
 8017bc2:	68b8      	ldr	r0, [r7, #8]
 8017bc4:	f007 fa97 	bl	801f0f6 <memcpy>
	return HAL_CRC_Calculate(&hcrc, arr, size);
 8017bc8:	683a      	ldr	r2, [r7, #0]
 8017bca:	68b9      	ldr	r1, [r7, #8]
 8017bcc:	4805      	ldr	r0, [pc, #20]	@ (8017be4 <Calculate_CRC8+0x88>)
 8017bce:	f7ef fcc9 	bl	8007564 <HAL_CRC_Calculate>
 8017bd2:	4603      	mov	r3, r0
 8017bd4:	b2db      	uxtb	r3, r3
 8017bd6:	46b5      	mov	sp, r6
}
 8017bd8:	4618      	mov	r0, r3
 8017bda:	3714      	adds	r7, #20
 8017bdc:	46bd      	mov	sp, r7
 8017bde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017be2:	bf00      	nop
 8017be4:	20013a48 	.word	0x20013a48

08017be8 <getUpdateStatus>:
RConfiguration Rconfig;
bool updateStatus = false;
char RB[100] = { 0 };
extern char *PHnum;
bool SRESET_FLAG = false;
bool getUpdateStatus() {
 8017be8:	b480      	push	{r7}
 8017bea:	af00      	add	r7, sp, #0
	return updateStatus;
 8017bec:	4b03      	ldr	r3, [pc, #12]	@ (8017bfc <getUpdateStatus+0x14>)
 8017bee:	781b      	ldrb	r3, [r3, #0]
}
 8017bf0:	4618      	mov	r0, r3
 8017bf2:	46bd      	mov	sp, r7
 8017bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bf8:	4770      	bx	lr
 8017bfa:	bf00      	nop
 8017bfc:	20014db4 	.word	0x20014db4

08017c00 <setUpdateStaus>:
void setUpdateStaus(bool upStatus) {
 8017c00:	b480      	push	{r7}
 8017c02:	b083      	sub	sp, #12
 8017c04:	af00      	add	r7, sp, #0
 8017c06:	4603      	mov	r3, r0
 8017c08:	71fb      	strb	r3, [r7, #7]
	updateStatus = upStatus;
 8017c0a:	4a04      	ldr	r2, [pc, #16]	@ (8017c1c <setUpdateStaus+0x1c>)
 8017c0c:	79fb      	ldrb	r3, [r7, #7]
 8017c0e:	7013      	strb	r3, [r2, #0]
}
 8017c10:	bf00      	nop
 8017c12:	370c      	adds	r7, #12
 8017c14:	46bd      	mov	sp, r7
 8017c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c1a:	4770      	bx	lr
 8017c1c:	20014db4 	.word	0x20014db4

08017c20 <clear_RConfiguration>:

void clear_RConfiguration() {
 8017c20:	b580      	push	{r7, lr}
 8017c22:	af00      	add	r7, sp, #0
	clearBuffer(&Rconfig, sizeof(Rconfig));
 8017c24:	218c      	movs	r1, #140	@ 0x8c
 8017c26:	4802      	ldr	r0, [pc, #8]	@ (8017c30 <clear_RConfiguration+0x10>)
 8017c28:	f7e9 ff4e 	bl	8001ac8 <clearBuffer>
}
 8017c2c:	bf00      	nop
 8017c2e:	bd80      	pop	{r7, pc}
 8017c30:	20014d28 	.word	0x20014d28

08017c34 <SMS_COTA>:

bool SMS_COTA(char *SMSBuff, char *opBuffer) {
 8017c34:	b5b0      	push	{r4, r5, r7, lr}
 8017c36:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8017c3a:	af00      	add	r7, sp, #0
 8017c3c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8017c40:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8017c44:	6018      	str	r0, [r3, #0]
 8017c46:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8017c4a:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8017c4e:	6019      	str	r1, [r3, #0]
	uint8_t splitBuffer[5][100] = { 0 };
 8017c50:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8017c54:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8017c58:	4618      	mov	r0, r3
 8017c5a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8017c5e:	461a      	mov	r2, r3
 8017c60:	2100      	movs	r1, #0
 8017c62:	f007 f8d5 	bl	801ee10 <memset>
	splitString((uint8_t*) SMSBuff, " ", splitBuffer);
 8017c66:	f107 020c 	add.w	r2, r7, #12
 8017c6a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8017c6e:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8017c72:	49c7      	ldr	r1, [pc, #796]	@ (8017f90 <SMS_COTA+0x35c>)
 8017c74:	6818      	ldr	r0, [r3, #0]
 8017c76:	f7e9 ff35 	bl	8001ae4 <splitString>
	if (splitBuffer[0] == NULL) {
		strcpy(opBuffer, "Didn't Get Proper command");
		return false;
	}
	char *command = (char*) strdup(splitBuffer[0]);
 8017c7a:	f107 030c 	add.w	r3, r7, #12
 8017c7e:	4618      	mov	r0, r3
 8017c80:	f007 f8ea 	bl	801ee58 <strdup>
 8017c84:	4603      	mov	r3, r0
 8017c86:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
	if (splitBuffer[1] == NULL) {
		strcpy(opBuffer, "Didn't Got Any parameter1");
		return false;
	}
	char *parameter = strdup(splitBuffer[1]);
 8017c8a:	f107 030c 	add.w	r3, r7, #12
 8017c8e:	3364      	adds	r3, #100	@ 0x64
 8017c90:	4618      	mov	r0, r3
 8017c92:	f007 f8e1 	bl	801ee58 <strdup>
 8017c96:	4603      	mov	r3, r0
 8017c98:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
	char *parameter2 = NULL;
 8017c9c:	2300      	movs	r3, #0
 8017c9e:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
	if (splitBuffer[2] != NULL) {
		parameter2 = strdup(splitBuffer[2]);
 8017ca2:	f107 030c 	add.w	r3, r7, #12
 8017ca6:	33c8      	adds	r3, #200	@ 0xc8
 8017ca8:	4618      	mov	r0, r3
 8017caa:	f007 f8d5 	bl	801ee58 <strdup>
 8017cae:	4603      	mov	r3, r0
 8017cb0:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
	}
	clearBuffer(splitBuffer, sizeof(splitBuffer));
 8017cb4:	f107 030c 	add.w	r3, r7, #12
 8017cb8:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8017cbc:	4618      	mov	r0, r3
 8017cbe:	f7e9 ff03 	bl	8001ac8 <clearBuffer>
	splitString(parameter, ":", splitBuffer);
 8017cc2:	f107 030c 	add.w	r3, r7, #12
 8017cc6:	461a      	mov	r2, r3
 8017cc8:	49b2      	ldr	r1, [pc, #712]	@ (8017f94 <SMS_COTA+0x360>)
 8017cca:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8017cce:	f7e9 ff09 	bl	8001ae4 <splitString>
	parameter = strdup(splitBuffer[0]);
 8017cd2:	f107 030c 	add.w	r3, r7, #12
 8017cd6:	4618      	mov	r0, r3
 8017cd8:	f007 f8be 	bl	801ee58 <strdup>
 8017cdc:	4603      	mov	r3, r0
 8017cde:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
	char *value = strdup(splitBuffer[1]);
 8017ce2:	f107 030c 	add.w	r3, r7, #12
 8017ce6:	3364      	adds	r3, #100	@ 0x64
 8017ce8:	4618      	mov	r0, r3
 8017cea:	f007 f8b5 	bl	801ee58 <strdup>
 8017cee:	4603      	mov	r3, r0
 8017cf0:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
	if (strcmp(command, "GET") == 0) {
 8017cf4:	49a8      	ldr	r1, [pc, #672]	@ (8017f98 <SMS_COTA+0x364>)
 8017cf6:	f8d7 0214 	ldr.w	r0, [r7, #532]	@ 0x214
 8017cfa:	f7e8 fac9 	bl	8000290 <strcmp>
 8017cfe:	4603      	mov	r3, r0
 8017d00:	2b00      	cmp	r3, #0
 8017d02:	f040 81b8 	bne.w	8018076 <SMS_COTA+0x442>
		if (parameter != NULL) {
 8017d06:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8017d0a:	2b00      	cmp	r3, #0
 8017d0c:	f000 81ad 	beq.w	801806a <SMS_COTA+0x436>
			// Handle GET command with parameter
			if (strcmp(parameter, "MIP") == 0) {
 8017d10:	49a2      	ldr	r1, [pc, #648]	@ (8017f9c <SMS_COTA+0x368>)
 8017d12:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8017d16:	f7e8 fabb 	bl	8000290 <strcmp>
 8017d1a:	4603      	mov	r3, r0
 8017d1c:	2b00      	cmp	r3, #0
 8017d1e:	d107      	bne.n	8017d30 <SMS_COTA+0xfc>
				SGET_MIP(opBuffer);
 8017d20:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8017d24:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8017d28:	6818      	ldr	r0, [r3, #0]
 8017d2a:	f000 fbf9 	bl	8018520 <SGET_MIP>
 8017d2e:	e185      	b.n	801803c <SMS_COTA+0x408>
			} else if (strcmp(parameter, "PORT1") == 0) {
 8017d30:	499b      	ldr	r1, [pc, #620]	@ (8017fa0 <SMS_COTA+0x36c>)
 8017d32:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8017d36:	f7e8 faab 	bl	8000290 <strcmp>
 8017d3a:	4603      	mov	r3, r0
 8017d3c:	2b00      	cmp	r3, #0
 8017d3e:	d107      	bne.n	8017d50 <SMS_COTA+0x11c>
				SGET_PORT1(opBuffer);
 8017d40:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8017d44:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8017d48:	6818      	ldr	r0, [r3, #0]
 8017d4a:	f000 fbf9 	bl	8018540 <SGET_PORT1>
 8017d4e:	e175      	b.n	801803c <SMS_COTA+0x408>
			} else if (strcmp(parameter, "MUSER") == 0) {
 8017d50:	4994      	ldr	r1, [pc, #592]	@ (8017fa4 <SMS_COTA+0x370>)
 8017d52:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8017d56:	f7e8 fa9b 	bl	8000290 <strcmp>
 8017d5a:	4603      	mov	r3, r0
 8017d5c:	2b00      	cmp	r3, #0
 8017d5e:	d107      	bne.n	8017d70 <SMS_COTA+0x13c>
				SGET_MUSER(opBuffer);
 8017d60:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8017d64:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8017d68:	6818      	ldr	r0, [r3, #0]
 8017d6a:	f000 fbfd 	bl	8018568 <SGET_MUSER>
 8017d6e:	e165      	b.n	801803c <SMS_COTA+0x408>
			} else if (strcmp(parameter, "MPASS") == 0) {
 8017d70:	498d      	ldr	r1, [pc, #564]	@ (8017fa8 <SMS_COTA+0x374>)
 8017d72:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8017d76:	f7e8 fa8b 	bl	8000290 <strcmp>
 8017d7a:	4603      	mov	r3, r0
 8017d7c:	2b00      	cmp	r3, #0
 8017d7e:	d107      	bne.n	8017d90 <SMS_COTA+0x15c>
				SGET_MPASS(opBuffer);
 8017d80:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8017d84:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8017d88:	6818      	ldr	r0, [r3, #0]
 8017d8a:	f000 fbfd 	bl	8018588 <SGET_MPASS>
 8017d8e:	e155      	b.n	801803c <SMS_COTA+0x408>
			} else if (strcmp(parameter, "CERT") == 0) {
 8017d90:	4986      	ldr	r1, [pc, #536]	@ (8017fac <SMS_COTA+0x378>)
 8017d92:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8017d96:	f7e8 fa7b 	bl	8000290 <strcmp>
 8017d9a:	4603      	mov	r3, r0
 8017d9c:	2b00      	cmp	r3, #0
 8017d9e:	d107      	bne.n	8017db0 <SMS_COTA+0x17c>
				SGET_CERT(opBuffer);
 8017da0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8017da4:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8017da8:	6818      	ldr	r0, [r3, #0]
 8017daa:	f000 fbfd 	bl	80185a8 <SGET_CERT>
 8017dae:	e145      	b.n	801803c <SMS_COTA+0x408>
			} else if (strcmp(parameter, "KEY") == 0) {
 8017db0:	497f      	ldr	r1, [pc, #508]	@ (8017fb0 <SMS_COTA+0x37c>)
 8017db2:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8017db6:	f7e8 fa6b 	bl	8000290 <strcmp>
 8017dba:	4603      	mov	r3, r0
 8017dbc:	2b00      	cmp	r3, #0
 8017dbe:	d107      	bne.n	8017dd0 <SMS_COTA+0x19c>
				SGET_KEY(opBuffer);
 8017dc0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8017dc4:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8017dc8:	6818      	ldr	r0, [r3, #0]
 8017dca:	f000 fbfd 	bl	80185c8 <SGET_KEY>
 8017dce:	e135      	b.n	801803c <SMS_COTA+0x408>
			} else if (strcmp(parameter, "CA") == 0) {
 8017dd0:	4978      	ldr	r1, [pc, #480]	@ (8017fb4 <SMS_COTA+0x380>)
 8017dd2:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8017dd6:	f7e8 fa5b 	bl	8000290 <strcmp>
 8017dda:	4603      	mov	r3, r0
 8017ddc:	2b00      	cmp	r3, #0
 8017dde:	d107      	bne.n	8017df0 <SMS_COTA+0x1bc>
				SGET_CA(opBuffer);
 8017de0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8017de4:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8017de8:	6818      	ldr	r0, [r3, #0]
 8017dea:	f000 fbfd 	bl	80185e8 <SGET_CA>
 8017dee:	e125      	b.n	801803c <SMS_COTA+0x408>
			} else if (strcmp(parameter, "IP2") == 0) {
 8017df0:	4971      	ldr	r1, [pc, #452]	@ (8017fb8 <SMS_COTA+0x384>)
 8017df2:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8017df6:	f7e8 fa4b 	bl	8000290 <strcmp>
 8017dfa:	4603      	mov	r3, r0
 8017dfc:	2b00      	cmp	r3, #0
 8017dfe:	d107      	bne.n	8017e10 <SMS_COTA+0x1dc>
				SGET_IP2(opBuffer);
 8017e00:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8017e04:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8017e08:	6818      	ldr	r0, [r3, #0]
 8017e0a:	f000 fbfd 	bl	8018608 <SGET_IP2>
 8017e0e:	e115      	b.n	801803c <SMS_COTA+0x408>
			} else if (strcmp(parameter, "PORT2") == 0) {
 8017e10:	496a      	ldr	r1, [pc, #424]	@ (8017fbc <SMS_COTA+0x388>)
 8017e12:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8017e16:	f7e8 fa3b 	bl	8000290 <strcmp>
 8017e1a:	4603      	mov	r3, r0
 8017e1c:	2b00      	cmp	r3, #0
 8017e1e:	d107      	bne.n	8017e30 <SMS_COTA+0x1fc>
				SGET_PORT2(opBuffer);
 8017e20:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8017e24:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8017e28:	6818      	ldr	r0, [r3, #0]
 8017e2a:	f000 fc25 	bl	8018678 <SGET_PORT2>
 8017e2e:	e105      	b.n	801803c <SMS_COTA+0x408>
			} else if (strcmp(parameter, "SKEY1") == 0) {
 8017e30:	4963      	ldr	r1, [pc, #396]	@ (8017fc0 <SMS_COTA+0x38c>)
 8017e32:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8017e36:	f7e8 fa2b 	bl	8000290 <strcmp>
 8017e3a:	4603      	mov	r3, r0
 8017e3c:	2b00      	cmp	r3, #0
 8017e3e:	d107      	bne.n	8017e50 <SMS_COTA+0x21c>
				SGET_SKEY1(opBuffer);
 8017e40:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8017e44:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8017e48:	6818      	ldr	r0, [r3, #0]
 8017e4a:	f000 fc25 	bl	8018698 <SGET_SKEY1>
 8017e4e:	e0f5      	b.n	801803c <SMS_COTA+0x408>
			} else if (strcmp(parameter, "SKEY2") == 0) {
 8017e50:	495c      	ldr	r1, [pc, #368]	@ (8017fc4 <SMS_COTA+0x390>)
 8017e52:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8017e56:	f7e8 fa1b 	bl	8000290 <strcmp>
 8017e5a:	4603      	mov	r3, r0
 8017e5c:	2b00      	cmp	r3, #0
 8017e5e:	d107      	bne.n	8017e70 <SMS_COTA+0x23c>
				SGET_SKEY2(opBuffer);
 8017e60:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8017e64:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8017e68:	6818      	ldr	r0, [r3, #0]
 8017e6a:	f000 fc25 	bl	80186b8 <SGET_SKEY2>
 8017e6e:	e0e5      	b.n	801803c <SMS_COTA+0x408>
			} else if (strcmp(parameter, "SKEY3") == 0) {
 8017e70:	4955      	ldr	r1, [pc, #340]	@ (8017fc8 <SMS_COTA+0x394>)
 8017e72:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8017e76:	f7e8 fa0b 	bl	8000290 <strcmp>
 8017e7a:	4603      	mov	r3, r0
 8017e7c:	2b00      	cmp	r3, #0
 8017e7e:	d107      	bne.n	8017e90 <SMS_COTA+0x25c>
				SGET_SKEY3(opBuffer);
 8017e80:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8017e84:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8017e88:	6818      	ldr	r0, [r3, #0]
 8017e8a:	f000 fc25 	bl	80186d8 <SGET_SKEY3>
 8017e8e:	e0d5      	b.n	801803c <SMS_COTA+0x408>
			} else if (strcmp(parameter, "APN") == 0) {
 8017e90:	494e      	ldr	r1, [pc, #312]	@ (8017fcc <SMS_COTA+0x398>)
 8017e92:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8017e96:	f7e8 f9fb 	bl	8000290 <strcmp>
 8017e9a:	4603      	mov	r3, r0
 8017e9c:	2b00      	cmp	r3, #0
 8017e9e:	d107      	bne.n	8017eb0 <SMS_COTA+0x27c>
				SGET_APN(opBuffer);
 8017ea0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8017ea4:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8017ea8:	6818      	ldr	r0, [r3, #0]
 8017eaa:	f000 fc25 	bl	80186f8 <SGET_APN>
 8017eae:	e0c5      	b.n	801803c <SMS_COTA+0x408>
			} else if (strcmp(parameter, "ION") == 0) {
 8017eb0:	4947      	ldr	r1, [pc, #284]	@ (8017fd0 <SMS_COTA+0x39c>)
 8017eb2:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8017eb6:	f7e8 f9eb 	bl	8000290 <strcmp>
 8017eba:	4603      	mov	r3, r0
 8017ebc:	2b00      	cmp	r3, #0
 8017ebe:	d107      	bne.n	8017ed0 <SMS_COTA+0x29c>
				SGET_ION(opBuffer);
 8017ec0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8017ec4:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8017ec8:	6818      	ldr	r0, [r3, #0]
 8017eca:	f000 fc25 	bl	8018718 <SGET_ION>
 8017ece:	e0b5      	b.n	801803c <SMS_COTA+0x408>
			} else if (strcmp(parameter, "NSAM") == 0) {
 8017ed0:	4940      	ldr	r1, [pc, #256]	@ (8017fd4 <SMS_COTA+0x3a0>)
 8017ed2:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8017ed6:	f7e8 f9db 	bl	8000290 <strcmp>
 8017eda:	4603      	mov	r3, r0
 8017edc:	2b00      	cmp	r3, #0
 8017ede:	d107      	bne.n	8017ef0 <SMS_COTA+0x2bc>
				SGET_NSAM(opBuffer);
 8017ee0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8017ee4:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8017ee8:	6818      	ldr	r0, [r3, #0]
 8017eea:	f000 fc25 	bl	8018738 <SGET_NSAM>
 8017eee:	e0a5      	b.n	801803c <SMS_COTA+0x408>
			} else if (strcmp(parameter, "HA") == 0) {
 8017ef0:	4939      	ldr	r1, [pc, #228]	@ (8017fd8 <SMS_COTA+0x3a4>)
 8017ef2:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8017ef6:	f7e8 f9cb 	bl	8000290 <strcmp>
 8017efa:	4603      	mov	r3, r0
 8017efc:	2b00      	cmp	r3, #0
 8017efe:	d107      	bne.n	8017f10 <SMS_COTA+0x2dc>
				SGET_HA(opBuffer);
 8017f00:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8017f04:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8017f08:	6818      	ldr	r0, [r3, #0]
 8017f0a:	f000 fc25 	bl	8018758 <SGET_HA>
 8017f0e:	e095      	b.n	801803c <SMS_COTA+0x408>
			} else if (strcmp(parameter, "HB") == 0) {
 8017f10:	4932      	ldr	r1, [pc, #200]	@ (8017fdc <SMS_COTA+0x3a8>)
 8017f12:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8017f16:	f7e8 f9bb 	bl	8000290 <strcmp>
 8017f1a:	4603      	mov	r3, r0
 8017f1c:	2b00      	cmp	r3, #0
 8017f1e:	d107      	bne.n	8017f30 <SMS_COTA+0x2fc>
				SGET_HB(opBuffer);
 8017f20:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8017f24:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8017f28:	6818      	ldr	r0, [r3, #0]
 8017f2a:	f000 fc25 	bl	8018778 <SGET_HB>
 8017f2e:	e085      	b.n	801803c <SMS_COTA+0x408>
			} else if (strcmp(parameter, "HC") == 0) {
 8017f30:	492b      	ldr	r1, [pc, #172]	@ (8017fe0 <SMS_COTA+0x3ac>)
 8017f32:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8017f36:	f7e8 f9ab 	bl	8000290 <strcmp>
 8017f3a:	4603      	mov	r3, r0
 8017f3c:	2b00      	cmp	r3, #0
 8017f3e:	d107      	bne.n	8017f50 <SMS_COTA+0x31c>
				SGET_HC(opBuffer);
 8017f40:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8017f44:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8017f48:	6818      	ldr	r0, [r3, #0]
 8017f4a:	f000 fc25 	bl	8018798 <SGET_HC>
 8017f4e:	e075      	b.n	801803c <SMS_COTA+0x408>
			} else if (strcmp(parameter, "ACCOFFSET") == 0) {
 8017f50:	4924      	ldr	r1, [pc, #144]	@ (8017fe4 <SMS_COTA+0x3b0>)
 8017f52:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8017f56:	f7e8 f99b 	bl	8000290 <strcmp>
 8017f5a:	4603      	mov	r3, r0
 8017f5c:	2b00      	cmp	r3, #0
 8017f5e:	d107      	bne.n	8017f70 <SMS_COTA+0x33c>
				SGET_ACCOFFSET(opBuffer);
 8017f60:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8017f64:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8017f68:	6818      	ldr	r0, [r3, #0]
 8017f6a:	f000 fc25 	bl	80187b8 <SGET_ACCOFFSET>
 8017f6e:	e065      	b.n	801803c <SMS_COTA+0x408>
			} else if (strcmp(parameter, "USER") == 0) {
 8017f70:	491d      	ldr	r1, [pc, #116]	@ (8017fe8 <SMS_COTA+0x3b4>)
 8017f72:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8017f76:	f7e8 f98b 	bl	8000290 <strcmp>
 8017f7a:	4603      	mov	r3, r0
 8017f7c:	2b00      	cmp	r3, #0
 8017f7e:	d135      	bne.n	8017fec <SMS_COTA+0x3b8>
				SGET_USER(opBuffer);
 8017f80:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8017f84:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8017f88:	6818      	ldr	r0, [r3, #0]
 8017f8a:	f000 fc25 	bl	80187d8 <SGET_USER>
 8017f8e:	e055      	b.n	801803c <SMS_COTA+0x408>
 8017f90:	08022f64 	.word	0x08022f64
 8017f94:	08022f68 	.word	0x08022f68
 8017f98:	08022f6c 	.word	0x08022f6c
 8017f9c:	08022f70 	.word	0x08022f70
 8017fa0:	08022f74 	.word	0x08022f74
 8017fa4:	08022f7c 	.word	0x08022f7c
 8017fa8:	08022f84 	.word	0x08022f84
 8017fac:	08022f8c 	.word	0x08022f8c
 8017fb0:	08022f94 	.word	0x08022f94
 8017fb4:	08022f98 	.word	0x08022f98
 8017fb8:	08022f9c 	.word	0x08022f9c
 8017fbc:	08022fa0 	.word	0x08022fa0
 8017fc0:	08022fa8 	.word	0x08022fa8
 8017fc4:	08022fb0 	.word	0x08022fb0
 8017fc8:	08022fb8 	.word	0x08022fb8
 8017fcc:	08022fc0 	.word	0x08022fc0
 8017fd0:	08022fc4 	.word	0x08022fc4
 8017fd4:	08022fc8 	.word	0x08022fc8
 8017fd8:	08022fd0 	.word	0x08022fd0
 8017fdc:	08022fd4 	.word	0x08022fd4
 8017fe0:	08022fd8 	.word	0x08022fd8
 8017fe4:	08022fdc 	.word	0x08022fdc
 8017fe8:	08022fe8 	.word	0x08022fe8
			} else if (strcmp(parameter, "PASSWORD") == 0) {
 8017fec:	49c4      	ldr	r1, [pc, #784]	@ (8018300 <SMS_COTA+0x6cc>)
 8017fee:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8017ff2:	f7e8 f94d 	bl	8000290 <strcmp>
 8017ff6:	4603      	mov	r3, r0
 8017ff8:	2b00      	cmp	r3, #0
 8017ffa:	d107      	bne.n	801800c <SMS_COTA+0x3d8>
				SGET_PASSWORD(opBuffer);
 8017ffc:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8018000:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8018004:	6818      	ldr	r0, [r3, #0]
 8018006:	f000 fbf7 	bl	80187f8 <SGET_PASSWORD>
 801800a:	e017      	b.n	801803c <SMS_COTA+0x408>
			} else if (strcmp(parameter, "VIN") == 0) {
 801800c:	49bd      	ldr	r1, [pc, #756]	@ (8018304 <SMS_COTA+0x6d0>)
 801800e:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8018012:	f7e8 f93d 	bl	8000290 <strcmp>
 8018016:	4603      	mov	r3, r0
 8018018:	2b00      	cmp	r3, #0
 801801a:	d107      	bne.n	801802c <SMS_COTA+0x3f8>
				SGET_VIN(opBuffer);
 801801c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8018020:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8018024:	6818      	ldr	r0, [r3, #0]
 8018026:	f000 fbf7 	bl	8018818 <SGET_VIN>
 801802a:	e007      	b.n	801803c <SMS_COTA+0x408>
			} else {
				// Handle unknown parameter
				printc(MinDelay, "Unknown parameter: %s\n", parameter);
 801802c:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 8018030:	49b5      	ldr	r1, [pc, #724]	@ (8018308 <SMS_COTA+0x6d4>)
 8018032:	200a      	movs	r0, #10
 8018034:	f7e9 fcf0 	bl	8001a18 <printc>
				return false;
 8018038:	2300      	movs	r3, #0
 801803a:	e24e      	b.n	80184da <SMS_COTA+0x8a6>
			}
			char *tmpcheck = strdup(opBuffer);
 801803c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8018040:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8018044:	6818      	ldr	r0, [r3, #0]
 8018046:	f006 ff07 	bl	801ee58 <strdup>
 801804a:	4603      	mov	r3, r0
 801804c:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
			sprintf(opBuffer, "%s:%s", parameter, tmpcheck);
 8018050:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8018054:	f5a3 7006 	sub.w	r0, r3, #536	@ 0x218
 8018058:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801805c:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 8018060:	49aa      	ldr	r1, [pc, #680]	@ (801830c <SMS_COTA+0x6d8>)
 8018062:	6800      	ldr	r0, [r0, #0]
 8018064:	f006 fd78 	bl	801eb58 <siprintf>
 8018068:	e236      	b.n	80184d8 <SMS_COTA+0x8a4>
		} else {
			// Handle GET command without parameter
			printc(MinDelay, "No parameter specified for GET command.\n");
 801806a:	49a9      	ldr	r1, [pc, #676]	@ (8018310 <SMS_COTA+0x6dc>)
 801806c:	200a      	movs	r0, #10
 801806e:	f7e9 fcd3 	bl	8001a18 <printc>
			return false;
 8018072:	2300      	movs	r3, #0
 8018074:	e231      	b.n	80184da <SMS_COTA+0x8a6>
		}
	} else if (strcmp(command, "SET") == 0) {
 8018076:	49a7      	ldr	r1, [pc, #668]	@ (8018314 <SMS_COTA+0x6e0>)
 8018078:	f8d7 0214 	ldr.w	r0, [r7, #532]	@ 0x214
 801807c:	f7e8 f908 	bl	8000290 <strcmp>
 8018080:	4603      	mov	r3, r0
 8018082:	2b00      	cmp	r3, #0
 8018084:	f040 8220 	bne.w	80184c8 <SMS_COTA+0x894>

		if (parameter != NULL) {
 8018088:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 801808c:	2b00      	cmp	r3, #0
 801808e:	f000 8215 	beq.w	80184bc <SMS_COTA+0x888>
			if (value != NULL) {
 8018092:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8018096:	2b00      	cmp	r3, #0
 8018098:	f000 8208 	beq.w	80184ac <SMS_COTA+0x878>
				// Handle SET command with parameter and value
				if (strcmp(parameter, "MIP") == 0) {
 801809c:	499e      	ldr	r1, [pc, #632]	@ (8018318 <SMS_COTA+0x6e4>)
 801809e:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 80180a2:	f7e8 f8f5 	bl	8000290 <strcmp>
 80180a6:	4603      	mov	r3, r0
 80180a8:	2b00      	cmp	r3, #0
 80180aa:	d108      	bne.n	80180be <SMS_COTA+0x48a>
					SET_MIP(value);
 80180ac:	f8d7 0208 	ldr.w	r0, [r7, #520]	@ 0x208
 80180b0:	f000 fbc2 	bl	8018838 <SET_MIP>
					setTcpServerIP(value);
 80180b4:	f8d7 0208 	ldr.w	r0, [r7, #520]	@ 0x208
 80180b8:	f004 fc08 	bl	801c8cc <setTcpServerIP>
 80180bc:	e1c9      	b.n	8018452 <SMS_COTA+0x81e>
				} else if (strcmp(parameter, "PORT1") == 0) {
 80180be:	4997      	ldr	r1, [pc, #604]	@ (801831c <SMS_COTA+0x6e8>)
 80180c0:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 80180c4:	f7e8 f8e4 	bl	8000290 <strcmp>
 80180c8:	4603      	mov	r3, r0
 80180ca:	2b00      	cmp	r3, #0
 80180cc:	d104      	bne.n	80180d8 <SMS_COTA+0x4a4>
					SET_PORT1(value);
 80180ce:	f8d7 0208 	ldr.w	r0, [r7, #520]	@ 0x208
 80180d2:	f000 fbcf 	bl	8018874 <SET_PORT1>
 80180d6:	e1bc      	b.n	8018452 <SMS_COTA+0x81e>
				} else if (strcmp(parameter, "MUSER") == 0) {
 80180d8:	4991      	ldr	r1, [pc, #580]	@ (8018320 <SMS_COTA+0x6ec>)
 80180da:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 80180de:	f7e8 f8d7 	bl	8000290 <strcmp>
 80180e2:	4603      	mov	r3, r0
 80180e4:	2b00      	cmp	r3, #0
 80180e6:	d104      	bne.n	80180f2 <SMS_COTA+0x4be>
					SET_MUSER(value);
 80180e8:	f8d7 0208 	ldr.w	r0, [r7, #520]	@ 0x208
 80180ec:	f000 fbe0 	bl	80188b0 <SET_MUSER>
 80180f0:	e1af      	b.n	8018452 <SMS_COTA+0x81e>
				} else if (strcmp(parameter, "MPASS") == 0) {
 80180f2:	498c      	ldr	r1, [pc, #560]	@ (8018324 <SMS_COTA+0x6f0>)
 80180f4:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 80180f8:	f7e8 f8ca 	bl	8000290 <strcmp>
 80180fc:	4603      	mov	r3, r0
 80180fe:	2b00      	cmp	r3, #0
 8018100:	d104      	bne.n	801810c <SMS_COTA+0x4d8>
					SET_MPASS(value);
 8018102:	f8d7 0208 	ldr.w	r0, [r7, #520]	@ 0x208
 8018106:	f000 fbf1 	bl	80188ec <SET_MPASS>
 801810a:	e1a2      	b.n	8018452 <SMS_COTA+0x81e>
				} else if (strcmp(parameter, "CERT") == 0) {
 801810c:	4986      	ldr	r1, [pc, #536]	@ (8018328 <SMS_COTA+0x6f4>)
 801810e:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8018112:	f7e8 f8bd 	bl	8000290 <strcmp>
 8018116:	4603      	mov	r3, r0
 8018118:	2b00      	cmp	r3, #0
 801811a:	d104      	bne.n	8018126 <SMS_COTA+0x4f2>
					SET_CERT(value);
 801811c:	f8d7 0208 	ldr.w	r0, [r7, #520]	@ 0x208
 8018120:	f000 fc02 	bl	8018928 <SET_CERT>
 8018124:	e195      	b.n	8018452 <SMS_COTA+0x81e>
				} else if (strcmp(parameter, "KEY") == 0) {
 8018126:	4981      	ldr	r1, [pc, #516]	@ (801832c <SMS_COTA+0x6f8>)
 8018128:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 801812c:	f7e8 f8b0 	bl	8000290 <strcmp>
 8018130:	4603      	mov	r3, r0
 8018132:	2b00      	cmp	r3, #0
 8018134:	d104      	bne.n	8018140 <SMS_COTA+0x50c>
					SET_KEY(value);
 8018136:	f8d7 0208 	ldr.w	r0, [r7, #520]	@ 0x208
 801813a:	f000 fc13 	bl	8018964 <SET_KEY>
 801813e:	e188      	b.n	8018452 <SMS_COTA+0x81e>
				} else if (strcmp(parameter, "CA") == 0) {
 8018140:	497b      	ldr	r1, [pc, #492]	@ (8018330 <SMS_COTA+0x6fc>)
 8018142:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8018146:	f7e8 f8a3 	bl	8000290 <strcmp>
 801814a:	4603      	mov	r3, r0
 801814c:	2b00      	cmp	r3, #0
 801814e:	d104      	bne.n	801815a <SMS_COTA+0x526>
					SET_CA(value);
 8018150:	f8d7 0208 	ldr.w	r0, [r7, #520]	@ 0x208
 8018154:	f000 fc24 	bl	80189a0 <SET_CA>
 8018158:	e17b      	b.n	8018452 <SMS_COTA+0x81e>
				} else if (strcmp(parameter, "IP2") == 0) {
 801815a:	4976      	ldr	r1, [pc, #472]	@ (8018334 <SMS_COTA+0x700>)
 801815c:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8018160:	f7e8 f896 	bl	8000290 <strcmp>
 8018164:	4603      	mov	r3, r0
 8018166:	2b00      	cmp	r3, #0
 8018168:	d104      	bne.n	8018174 <SMS_COTA+0x540>
					SET_IP2(value);
 801816a:	f8d7 0208 	ldr.w	r0, [r7, #520]	@ 0x208
 801816e:	f000 fc35 	bl	80189dc <SET_IP2>
 8018172:	e16e      	b.n	8018452 <SMS_COTA+0x81e>
				} else if (strcmp(parameter, "PORT2") == 0) {
 8018174:	4970      	ldr	r1, [pc, #448]	@ (8018338 <SMS_COTA+0x704>)
 8018176:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 801817a:	f7e8 f889 	bl	8000290 <strcmp>
 801817e:	4603      	mov	r3, r0
 8018180:	2b00      	cmp	r3, #0
 8018182:	d104      	bne.n	801818e <SMS_COTA+0x55a>
					SET_PORT2(value);
 8018184:	f8d7 0208 	ldr.w	r0, [r7, #520]	@ 0x208
 8018188:	f000 fc46 	bl	8018a18 <SET_PORT2>
 801818c:	e161      	b.n	8018452 <SMS_COTA+0x81e>
				} else if (strcmp(parameter, "SKEY1") == 0) {
 801818e:	496b      	ldr	r1, [pc, #428]	@ (801833c <SMS_COTA+0x708>)
 8018190:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8018194:	f7e8 f87c 	bl	8000290 <strcmp>
 8018198:	4603      	mov	r3, r0
 801819a:	2b00      	cmp	r3, #0
 801819c:	d104      	bne.n	80181a8 <SMS_COTA+0x574>
					SET_SKEY1(value);
 801819e:	f8d7 0208 	ldr.w	r0, [r7, #520]	@ 0x208
 80181a2:	f000 fc57 	bl	8018a54 <SET_SKEY1>
 80181a6:	e154      	b.n	8018452 <SMS_COTA+0x81e>
				} else if (strcmp(parameter, "SKEY2") == 0) {
 80181a8:	4965      	ldr	r1, [pc, #404]	@ (8018340 <SMS_COTA+0x70c>)
 80181aa:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 80181ae:	f7e8 f86f 	bl	8000290 <strcmp>
 80181b2:	4603      	mov	r3, r0
 80181b4:	2b00      	cmp	r3, #0
 80181b6:	d104      	bne.n	80181c2 <SMS_COTA+0x58e>
					SET_SKEY2(value);
 80181b8:	f8d7 0208 	ldr.w	r0, [r7, #520]	@ 0x208
 80181bc:	f000 fc68 	bl	8018a90 <SET_SKEY2>
 80181c0:	e147      	b.n	8018452 <SMS_COTA+0x81e>
				} else if (strcmp(parameter, "SKEY3") == 0) {
 80181c2:	4960      	ldr	r1, [pc, #384]	@ (8018344 <SMS_COTA+0x710>)
 80181c4:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 80181c8:	f7e8 f862 	bl	8000290 <strcmp>
 80181cc:	4603      	mov	r3, r0
 80181ce:	2b00      	cmp	r3, #0
 80181d0:	d104      	bne.n	80181dc <SMS_COTA+0x5a8>
					SET_SKEY3(value);
 80181d2:	f8d7 0208 	ldr.w	r0, [r7, #520]	@ 0x208
 80181d6:	f000 fc79 	bl	8018acc <SET_SKEY3>
 80181da:	e13a      	b.n	8018452 <SMS_COTA+0x81e>
				} else if (strcmp(parameter, "APN") == 0) {
 80181dc:	495a      	ldr	r1, [pc, #360]	@ (8018348 <SMS_COTA+0x714>)
 80181de:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 80181e2:	f7e8 f855 	bl	8000290 <strcmp>
 80181e6:	4603      	mov	r3, r0
 80181e8:	2b00      	cmp	r3, #0
 80181ea:	d104      	bne.n	80181f6 <SMS_COTA+0x5c2>
					SET_APN(value);
 80181ec:	f8d7 0208 	ldr.w	r0, [r7, #520]	@ 0x208
 80181f0:	f000 fc8a 	bl	8018b08 <SET_APN>
 80181f4:	e12d      	b.n	8018452 <SMS_COTA+0x81e>
				} else if (strcmp(parameter, "ION") == 0) {
 80181f6:	4955      	ldr	r1, [pc, #340]	@ (801834c <SMS_COTA+0x718>)
 80181f8:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 80181fc:	f7e8 f848 	bl	8000290 <strcmp>
 8018200:	4603      	mov	r3, r0
 8018202:	2b00      	cmp	r3, #0
 8018204:	d114      	bne.n	8018230 <SMS_COTA+0x5fc>
					int intValue = atoi(value);
 8018206:	f8d7 0208 	ldr.w	r0, [r7, #520]	@ 0x208
 801820a:	f004 fd8c 	bl	801cd26 <atoi>
 801820e:	f8c7 0204 	str.w	r0, [r7, #516]	@ 0x204
					if (intValue > 3) {
 8018212:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 8018216:	2b03      	cmp	r3, #3
 8018218:	dd08      	ble.n	801822c <SMS_COTA+0x5f8>
						SET_ION(value);
 801821a:	f8d7 0208 	ldr.w	r0, [r7, #520]	@ 0x208
 801821e:	f000 fc91 	bl	8018b44 <SET_ION>
						setSampling(intValue);
 8018222:	f8d7 0204 	ldr.w	r0, [r7, #516]	@ 0x204
 8018226:	f7eb f94f 	bl	80034c8 <setSampling>
 801822a:	e112      	b.n	8018452 <SMS_COTA+0x81e>
					} else
						return false;
 801822c:	2300      	movs	r3, #0
 801822e:	e154      	b.n	80184da <SMS_COTA+0x8a6>
				} else if (strcmp(parameter, "NSAM") == 0) {
 8018230:	4947      	ldr	r1, [pc, #284]	@ (8018350 <SMS_COTA+0x71c>)
 8018232:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8018236:	f7e8 f82b 	bl	8000290 <strcmp>
 801823a:	4603      	mov	r3, r0
 801823c:	2b00      	cmp	r3, #0
 801823e:	d104      	bne.n	801824a <SMS_COTA+0x616>
					SET_NSAM(value);
 8018240:	f8d7 0208 	ldr.w	r0, [r7, #520]	@ 0x208
 8018244:	f000 fc9c 	bl	8018b80 <SET_NSAM>
 8018248:	e103      	b.n	8018452 <SMS_COTA+0x81e>
				} else if (strcmp(parameter, "RESET") == 0) {
 801824a:	4942      	ldr	r1, [pc, #264]	@ (8018354 <SMS_COTA+0x720>)
 801824c:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8018250:	f7e8 f81e 	bl	8000290 <strcmp>
 8018254:	4603      	mov	r3, r0
 8018256:	2b00      	cmp	r3, #0
 8018258:	d103      	bne.n	8018262 <SMS_COTA+0x62e>
					SRESET_FLAG = true;
 801825a:	4b3f      	ldr	r3, [pc, #252]	@ (8018358 <SMS_COTA+0x724>)
 801825c:	2201      	movs	r2, #1
 801825e:	701a      	strb	r2, [r3, #0]
 8018260:	e0f7      	b.n	8018452 <SMS_COTA+0x81e>
				} else if (strcmp(parameter, "HA") == 0) {
 8018262:	493e      	ldr	r1, [pc, #248]	@ (801835c <SMS_COTA+0x728>)
 8018264:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8018268:	f7e8 f812 	bl	8000290 <strcmp>
 801826c:	4603      	mov	r3, r0
 801826e:	2b00      	cmp	r3, #0
 8018270:	d104      	bne.n	801827c <SMS_COTA+0x648>
					SET_HA(value);
 8018272:	f8d7 0208 	ldr.w	r0, [r7, #520]	@ 0x208
 8018276:	f000 fca1 	bl	8018bbc <SET_HA>
 801827a:	e0ea      	b.n	8018452 <SMS_COTA+0x81e>
				} else if (strcmp(parameter, "HB") == 0) {
 801827c:	4938      	ldr	r1, [pc, #224]	@ (8018360 <SMS_COTA+0x72c>)
 801827e:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8018282:	f7e8 f805 	bl	8000290 <strcmp>
 8018286:	4603      	mov	r3, r0
 8018288:	2b00      	cmp	r3, #0
 801828a:	d104      	bne.n	8018296 <SMS_COTA+0x662>
					SET_HB(value);
 801828c:	f8d7 0208 	ldr.w	r0, [r7, #520]	@ 0x208
 8018290:	f000 fcb2 	bl	8018bf8 <SET_HB>
 8018294:	e0dd      	b.n	8018452 <SMS_COTA+0x81e>
				} else if (strcmp(parameter, "HC") == 0) {
 8018296:	4933      	ldr	r1, [pc, #204]	@ (8018364 <SMS_COTA+0x730>)
 8018298:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 801829c:	f7e7 fff8 	bl	8000290 <strcmp>
 80182a0:	4603      	mov	r3, r0
 80182a2:	2b00      	cmp	r3, #0
 80182a4:	d104      	bne.n	80182b0 <SMS_COTA+0x67c>
					SET_HC(value);
 80182a6:	f8d7 0208 	ldr.w	r0, [r7, #520]	@ 0x208
 80182aa:	f000 fcc3 	bl	8018c34 <SET_HC>
 80182ae:	e0d0      	b.n	8018452 <SMS_COTA+0x81e>
				} else if (strcmp(parameter, "ACCOFFSET") == 0) {
 80182b0:	492d      	ldr	r1, [pc, #180]	@ (8018368 <SMS_COTA+0x734>)
 80182b2:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 80182b6:	f7e7 ffeb 	bl	8000290 <strcmp>
 80182ba:	4603      	mov	r3, r0
 80182bc:	2b00      	cmp	r3, #0
 80182be:	d104      	bne.n	80182ca <SMS_COTA+0x696>
					SET_ACCOFFSET(value);
 80182c0:	f8d7 0208 	ldr.w	r0, [r7, #520]	@ 0x208
 80182c4:	f000 fcd4 	bl	8018c70 <SET_ACCOFFSET>
 80182c8:	e0c3      	b.n	8018452 <SMS_COTA+0x81e>
				} else if (strcmp(parameter, "USER") == 0) {
 80182ca:	4928      	ldr	r1, [pc, #160]	@ (801836c <SMS_COTA+0x738>)
 80182cc:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 80182d0:	f7e7 ffde 	bl	8000290 <strcmp>
 80182d4:	4603      	mov	r3, r0
 80182d6:	2b00      	cmp	r3, #0
 80182d8:	d104      	bne.n	80182e4 <SMS_COTA+0x6b0>
					SET_USER(value);
 80182da:	f8d7 0208 	ldr.w	r0, [r7, #520]	@ 0x208
 80182de:	f000 fce5 	bl	8018cac <SET_USER>
 80182e2:	e0b6      	b.n	8018452 <SMS_COTA+0x81e>
				} else if (strcmp(parameter, "PASSWORD") == 0) {
 80182e4:	4906      	ldr	r1, [pc, #24]	@ (8018300 <SMS_COTA+0x6cc>)
 80182e6:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 80182ea:	f7e7 ffd1 	bl	8000290 <strcmp>
 80182ee:	4603      	mov	r3, r0
 80182f0:	2b00      	cmp	r3, #0
 80182f2:	d13d      	bne.n	8018370 <SMS_COTA+0x73c>
					SET_PASSWORD(value);
 80182f4:	f8d7 0208 	ldr.w	r0, [r7, #520]	@ 0x208
 80182f8:	f000 fcf6 	bl	8018ce8 <SET_PASSWORD>
 80182fc:	e0a9      	b.n	8018452 <SMS_COTA+0x81e>
 80182fe:	bf00      	nop
 8018300:	08022ff0 	.word	0x08022ff0
 8018304:	08022ffc 	.word	0x08022ffc
 8018308:	08023000 	.word	0x08023000
 801830c:	08023018 	.word	0x08023018
 8018310:	08023020 	.word	0x08023020
 8018314:	0802304c 	.word	0x0802304c
 8018318:	08022f70 	.word	0x08022f70
 801831c:	08022f74 	.word	0x08022f74
 8018320:	08022f7c 	.word	0x08022f7c
 8018324:	08022f84 	.word	0x08022f84
 8018328:	08022f8c 	.word	0x08022f8c
 801832c:	08022f94 	.word	0x08022f94
 8018330:	08022f98 	.word	0x08022f98
 8018334:	08022f9c 	.word	0x08022f9c
 8018338:	08022fa0 	.word	0x08022fa0
 801833c:	08022fa8 	.word	0x08022fa8
 8018340:	08022fb0 	.word	0x08022fb0
 8018344:	08022fb8 	.word	0x08022fb8
 8018348:	08022fc0 	.word	0x08022fc0
 801834c:	08022fc4 	.word	0x08022fc4
 8018350:	08022fc8 	.word	0x08022fc8
 8018354:	08023050 	.word	0x08023050
 8018358:	20014e1c 	.word	0x20014e1c
 801835c:	08022fd0 	.word	0x08022fd0
 8018360:	08022fd4 	.word	0x08022fd4
 8018364:	08022fd8 	.word	0x08022fd8
 8018368:	08022fdc 	.word	0x08022fdc
 801836c:	08022fe8 	.word	0x08022fe8
				} else if (strcmp(parameter, "VIN") == 0) {
 8018370:	495c      	ldr	r1, [pc, #368]	@ (80184e4 <SMS_COTA+0x8b0>)
 8018372:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8018376:	f7e7 ff8b 	bl	8000290 <strcmp>
 801837a:	4603      	mov	r3, r0
 801837c:	2b00      	cmp	r3, #0
 801837e:	d104      	bne.n	801838a <SMS_COTA+0x756>
					SET_VIN(value);
 8018380:	f8d7 0208 	ldr.w	r0, [r7, #520]	@ 0x208
 8018384:	f000 fcce 	bl	8018d24 <SET_VIN>
 8018388:	e063      	b.n	8018452 <SMS_COTA+0x81e>
				} else if (strcmp(parameter, "UPFW") == 0) {
 801838a:	4957      	ldr	r1, [pc, #348]	@ (80184e8 <SMS_COTA+0x8b4>)
 801838c:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8018390:	f7e7 ff7e 	bl	8000290 <strcmp>
 8018394:	4603      	mov	r3, r0
 8018396:	2b00      	cmp	r3, #0
 8018398:	d153      	bne.n	8018442 <SMS_COTA+0x80e>
					clearBuffer(splitBuffer, sizeof(splitBuffer));
 801839a:	f107 030c 	add.w	r3, r7, #12
 801839e:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80183a2:	4618      	mov	r0, r3
 80183a4:	f7e9 fb90 	bl	8001ac8 <clearBuffer>
					splitString(parameter2, ":", splitBuffer);
 80183a8:	f107 030c 	add.w	r3, r7, #12
 80183ac:	461a      	mov	r2, r3
 80183ae:	494f      	ldr	r1, [pc, #316]	@ (80184ec <SMS_COTA+0x8b8>)
 80183b0:	f8d7 020c 	ldr.w	r0, [r7, #524]	@ 0x20c
 80183b4:	f7e9 fb96 	bl	8001ae4 <splitString>
					if (strcmp(splitBuffer[0], "TML") == 0) {
 80183b8:	f107 030c 	add.w	r3, r7, #12
 80183bc:	494c      	ldr	r1, [pc, #304]	@ (80184f0 <SMS_COTA+0x8bc>)
 80183be:	4618      	mov	r0, r3
 80183c0:	f7e7 ff66 	bl	8000290 <strcmp>
 80183c4:	4603      	mov	r3, r0
 80183c6:	2b00      	cmp	r3, #0
 80183c8:	d127      	bne.n	801841a <SMS_COTA+0x7e6>
						//						checking password
						if (!strcmp(splitBuffer[1], "1234")) {
 80183ca:	f107 030c 	add.w	r3, r7, #12
 80183ce:	3364      	adds	r3, #100	@ 0x64
 80183d0:	4948      	ldr	r1, [pc, #288]	@ (80184f4 <SMS_COTA+0x8c0>)
 80183d2:	4618      	mov	r0, r3
 80183d4:	f7e7 ff5c 	bl	8000290 <strcmp>
 80183d8:	4603      	mov	r3, r0
 80183da:	2b00      	cmp	r3, #0
 80183dc:	d107      	bne.n	80183ee <SMS_COTA+0x7ba>
							SET_FOTA_UPDATE(value);
 80183de:	f8d7 0208 	ldr.w	r0, [r7, #520]	@ 0x208
 80183e2:	f000 fe2f 	bl	8019044 <SET_FOTA_UPDATE>
							setUpdateStaus(true);
 80183e6:	2001      	movs	r0, #1
 80183e8:	f7ff fc0a 	bl	8017c00 <setUpdateStaus>
 80183ec:	e031      	b.n	8018452 <SMS_COTA+0x81e>
						} else {
							strcpy(opBuffer, "Password Didn't Match\n");
 80183ee:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80183f2:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80183f6:	681b      	ldr	r3, [r3, #0]
 80183f8:	4a3f      	ldr	r2, [pc, #252]	@ (80184f8 <SMS_COTA+0x8c4>)
 80183fa:	461c      	mov	r4, r3
 80183fc:	4615      	mov	r5, r2
 80183fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018400:	6020      	str	r0, [r4, #0]
 8018402:	6061      	str	r1, [r4, #4]
 8018404:	60a2      	str	r2, [r4, #8]
 8018406:	60e3      	str	r3, [r4, #12]
 8018408:	6828      	ldr	r0, [r5, #0]
 801840a:	6120      	str	r0, [r4, #16]
 801840c:	88ab      	ldrh	r3, [r5, #4]
 801840e:	79aa      	ldrb	r2, [r5, #6]
 8018410:	82a3      	strh	r3, [r4, #20]
 8018412:	4613      	mov	r3, r2
 8018414:	75a3      	strb	r3, [r4, #22]
							return false;
 8018416:	2300      	movs	r3, #0
 8018418:	e05f      	b.n	80184da <SMS_COTA+0x8a6>
						}
					} else {
						strcpy(opBuffer, "UPFW Format Not Matched\n");
 801841a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 801841e:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8018422:	681b      	ldr	r3, [r3, #0]
 8018424:	4a35      	ldr	r2, [pc, #212]	@ (80184fc <SMS_COTA+0x8c8>)
 8018426:	461d      	mov	r5, r3
 8018428:	4614      	mov	r4, r2
 801842a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801842c:	6028      	str	r0, [r5, #0]
 801842e:	6069      	str	r1, [r5, #4]
 8018430:	60aa      	str	r2, [r5, #8]
 8018432:	60eb      	str	r3, [r5, #12]
 8018434:	cc03      	ldmia	r4!, {r0, r1}
 8018436:	6128      	str	r0, [r5, #16]
 8018438:	6169      	str	r1, [r5, #20]
 801843a:	7823      	ldrb	r3, [r4, #0]
 801843c:	762b      	strb	r3, [r5, #24]
						return false;
 801843e:	2300      	movs	r3, #0
 8018440:	e04b      	b.n	80184da <SMS_COTA+0x8a6>
					}
				} else {
					// Handle unknown parameter
//					sprintf(opBuffer, "%s Unknown parameter:",parameter);
					printc(MinDelay, "Unknown parameter: %s\n", parameter);
 8018442:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 8018446:	492e      	ldr	r1, [pc, #184]	@ (8018500 <SMS_COTA+0x8cc>)
 8018448:	200a      	movs	r0, #10
 801844a:	f7e9 fae5 	bl	8001a18 <printc>
					return false;
 801844e:	2300      	movs	r3, #0
 8018450:	e043      	b.n	80184da <SMS_COTA+0x8a6>
				}
				if (strcmp(parameter, "UPFW") == 0) {
 8018452:	4925      	ldr	r1, [pc, #148]	@ (80184e8 <SMS_COTA+0x8b4>)
 8018454:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8018458:	f7e7 ff1a 	bl	8000290 <strcmp>
 801845c:	4603      	mov	r3, r0
 801845e:	2b00      	cmp	r3, #0
 8018460:	d10a      	bne.n	8018478 <SMS_COTA+0x844>
					sprintf(opBuffer, "%s Updating", parameter);
 8018462:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8018466:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801846a:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 801846e:	4925      	ldr	r1, [pc, #148]	@ (8018504 <SMS_COTA+0x8d0>)
 8018470:	6818      	ldr	r0, [r3, #0]
 8018472:	f006 fb71 	bl	801eb58 <siprintf>
 8018476:	e02f      	b.n	80184d8 <SMS_COTA+0x8a4>
				} else if (SRESET_FLAG == true) {
 8018478:	4b23      	ldr	r3, [pc, #140]	@ (8018508 <SMS_COTA+0x8d4>)
 801847a:	781b      	ldrb	r3, [r3, #0]
 801847c:	2b00      	cmp	r3, #0
 801847e:	d00a      	beq.n	8018496 <SMS_COTA+0x862>
					sprintf(opBuffer, "%s OK", parameter);
 8018480:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8018484:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8018488:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 801848c:	491f      	ldr	r1, [pc, #124]	@ (801850c <SMS_COTA+0x8d8>)
 801848e:	6818      	ldr	r0, [r3, #0]
 8018490:	f006 fb62 	bl	801eb58 <siprintf>
 8018494:	e020      	b.n	80184d8 <SMS_COTA+0x8a4>
				} else
					sprintf(opBuffer, "%s Updated", parameter);
 8018496:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 801849a:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801849e:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 80184a2:	491b      	ldr	r1, [pc, #108]	@ (8018510 <SMS_COTA+0x8dc>)
 80184a4:	6818      	ldr	r0, [r3, #0]
 80184a6:	f006 fb57 	bl	801eb58 <siprintf>
 80184aa:	e015      	b.n	80184d8 <SMS_COTA+0x8a4>
			} else {
				// Handle SET command without value
				printc(MinDelay, "Value not specified for parameter: %s\n",
 80184ac:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 80184b0:	4918      	ldr	r1, [pc, #96]	@ (8018514 <SMS_COTA+0x8e0>)
 80184b2:	200a      	movs	r0, #10
 80184b4:	f7e9 fab0 	bl	8001a18 <printc>
						parameter);
				return false;
 80184b8:	2300      	movs	r3, #0
 80184ba:	e00e      	b.n	80184da <SMS_COTA+0x8a6>
			}
		} else {
			// Handle SET command without parameter and value
			printc(MinDelay,
 80184bc:	4916      	ldr	r1, [pc, #88]	@ (8018518 <SMS_COTA+0x8e4>)
 80184be:	200a      	movs	r0, #10
 80184c0:	f7e9 faaa 	bl	8001a18 <printc>
					"parameter and value not specified for SET or GET command.\n");
			return false;
 80184c4:	2300      	movs	r3, #0
 80184c6:	e008      	b.n	80184da <SMS_COTA+0x8a6>
		}
	} else {
		// Handle unknown commands
		printc(MinDelay, "Unknown command: %s\n", command);
 80184c8:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 80184cc:	4913      	ldr	r1, [pc, #76]	@ (801851c <SMS_COTA+0x8e8>)
 80184ce:	200a      	movs	r0, #10
 80184d0:	f7e9 faa2 	bl	8001a18 <printc>
		return false;
 80184d4:	2300      	movs	r3, #0
 80184d6:	e000      	b.n	80184da <SMS_COTA+0x8a6>
	}
	return true;
 80184d8:	2301      	movs	r3, #1
}
 80184da:	4618      	mov	r0, r3
 80184dc:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 80184e0:	46bd      	mov	sp, r7
 80184e2:	bdb0      	pop	{r4, r5, r7, pc}
 80184e4:	08022ffc 	.word	0x08022ffc
 80184e8:	08023058 	.word	0x08023058
 80184ec:	08022f68 	.word	0x08022f68
 80184f0:	08023060 	.word	0x08023060
 80184f4:	08023064 	.word	0x08023064
 80184f8:	0802306c 	.word	0x0802306c
 80184fc:	08023084 	.word	0x08023084
 8018500:	08023000 	.word	0x08023000
 8018504:	080230a0 	.word	0x080230a0
 8018508:	20014e1c 	.word	0x20014e1c
 801850c:	080230ac 	.word	0x080230ac
 8018510:	080230b4 	.word	0x080230b4
 8018514:	080230c0 	.word	0x080230c0
 8018518:	080230e8 	.word	0x080230e8
 801851c:	08023124 	.word	0x08023124

08018520 <SGET_MIP>:

void SGET_MIP(char *opBuffer) {
 8018520:	b580      	push	{r7, lr}
 8018522:	b082      	sub	sp, #8
 8018524:	af00      	add	r7, sp, #0
 8018526:	6078      	str	r0, [r7, #4]
	strcpy(opBuffer, Rconfig.MIP);
 8018528:	4b04      	ldr	r3, [pc, #16]	@ (801853c <SGET_MIP+0x1c>)
 801852a:	681b      	ldr	r3, [r3, #0]
 801852c:	4619      	mov	r1, r3
 801852e:	6878      	ldr	r0, [r7, #4]
 8018530:	f006 fdcb 	bl	801f0ca <strcpy>
}
 8018534:	bf00      	nop
 8018536:	3708      	adds	r7, #8
 8018538:	46bd      	mov	sp, r7
 801853a:	bd80      	pop	{r7, pc}
 801853c:	20014d28 	.word	0x20014d28

08018540 <SGET_PORT1>:

void SGET_PORT1(char *opBuffer) {
 8018540:	b580      	push	{r7, lr}
 8018542:	b082      	sub	sp, #8
 8018544:	af00      	add	r7, sp, #0
 8018546:	6078      	str	r0, [r7, #4]
	if (Rconfig.MPORT1 != NULL)
 8018548:	4b06      	ldr	r3, [pc, #24]	@ (8018564 <SGET_PORT1+0x24>)
 801854a:	685b      	ldr	r3, [r3, #4]
 801854c:	2b00      	cmp	r3, #0
 801854e:	d005      	beq.n	801855c <SGET_PORT1+0x1c>
		strcpy(opBuffer, Rconfig.MPORT1);
 8018550:	4b04      	ldr	r3, [pc, #16]	@ (8018564 <SGET_PORT1+0x24>)
 8018552:	685b      	ldr	r3, [r3, #4]
 8018554:	4619      	mov	r1, r3
 8018556:	6878      	ldr	r0, [r7, #4]
 8018558:	f006 fdb7 	bl	801f0ca <strcpy>
}
 801855c:	bf00      	nop
 801855e:	3708      	adds	r7, #8
 8018560:	46bd      	mov	sp, r7
 8018562:	bd80      	pop	{r7, pc}
 8018564:	20014d28 	.word	0x20014d28

08018568 <SGET_MUSER>:

void SGET_MUSER(char *opBuffer) {
 8018568:	b580      	push	{r7, lr}
 801856a:	b082      	sub	sp, #8
 801856c:	af00      	add	r7, sp, #0
 801856e:	6078      	str	r0, [r7, #4]
	strcpy(opBuffer, Rconfig.MUSER);
 8018570:	4b04      	ldr	r3, [pc, #16]	@ (8018584 <SGET_MUSER+0x1c>)
 8018572:	689b      	ldr	r3, [r3, #8]
 8018574:	4619      	mov	r1, r3
 8018576:	6878      	ldr	r0, [r7, #4]
 8018578:	f006 fda7 	bl	801f0ca <strcpy>
}
 801857c:	bf00      	nop
 801857e:	3708      	adds	r7, #8
 8018580:	46bd      	mov	sp, r7
 8018582:	bd80      	pop	{r7, pc}
 8018584:	20014d28 	.word	0x20014d28

08018588 <SGET_MPASS>:

void SGET_MPASS(char *opBuffer) {
 8018588:	b580      	push	{r7, lr}
 801858a:	b082      	sub	sp, #8
 801858c:	af00      	add	r7, sp, #0
 801858e:	6078      	str	r0, [r7, #4]
	strcpy(opBuffer, Rconfig.MPASS);
 8018590:	4b04      	ldr	r3, [pc, #16]	@ (80185a4 <SGET_MPASS+0x1c>)
 8018592:	68db      	ldr	r3, [r3, #12]
 8018594:	4619      	mov	r1, r3
 8018596:	6878      	ldr	r0, [r7, #4]
 8018598:	f006 fd97 	bl	801f0ca <strcpy>
}
 801859c:	bf00      	nop
 801859e:	3708      	adds	r7, #8
 80185a0:	46bd      	mov	sp, r7
 80185a2:	bd80      	pop	{r7, pc}
 80185a4:	20014d28 	.word	0x20014d28

080185a8 <SGET_CERT>:

void SGET_CERT(char *opBuffer) {
 80185a8:	b580      	push	{r7, lr}
 80185aa:	b082      	sub	sp, #8
 80185ac:	af00      	add	r7, sp, #0
 80185ae:	6078      	str	r0, [r7, #4]
	strcpy(opBuffer, Rconfig.CERT);
 80185b0:	4b04      	ldr	r3, [pc, #16]	@ (80185c4 <SGET_CERT+0x1c>)
 80185b2:	691b      	ldr	r3, [r3, #16]
 80185b4:	4619      	mov	r1, r3
 80185b6:	6878      	ldr	r0, [r7, #4]
 80185b8:	f006 fd87 	bl	801f0ca <strcpy>
}
 80185bc:	bf00      	nop
 80185be:	3708      	adds	r7, #8
 80185c0:	46bd      	mov	sp, r7
 80185c2:	bd80      	pop	{r7, pc}
 80185c4:	20014d28 	.word	0x20014d28

080185c8 <SGET_KEY>:

void SGET_KEY(char *opBuffer) {
 80185c8:	b580      	push	{r7, lr}
 80185ca:	b082      	sub	sp, #8
 80185cc:	af00      	add	r7, sp, #0
 80185ce:	6078      	str	r0, [r7, #4]
	strcpy(opBuffer, Rconfig.KEY);
 80185d0:	4b04      	ldr	r3, [pc, #16]	@ (80185e4 <SGET_KEY+0x1c>)
 80185d2:	695b      	ldr	r3, [r3, #20]
 80185d4:	4619      	mov	r1, r3
 80185d6:	6878      	ldr	r0, [r7, #4]
 80185d8:	f006 fd77 	bl	801f0ca <strcpy>
}
 80185dc:	bf00      	nop
 80185de:	3708      	adds	r7, #8
 80185e0:	46bd      	mov	sp, r7
 80185e2:	bd80      	pop	{r7, pc}
 80185e4:	20014d28 	.word	0x20014d28

080185e8 <SGET_CA>:

void SGET_CA(char *opBuffer) {
 80185e8:	b580      	push	{r7, lr}
 80185ea:	b082      	sub	sp, #8
 80185ec:	af00      	add	r7, sp, #0
 80185ee:	6078      	str	r0, [r7, #4]
	strcpy(opBuffer, Rconfig.CA);
 80185f0:	4b04      	ldr	r3, [pc, #16]	@ (8018604 <SGET_CA+0x1c>)
 80185f2:	699b      	ldr	r3, [r3, #24]
 80185f4:	4619      	mov	r1, r3
 80185f6:	6878      	ldr	r0, [r7, #4]
 80185f8:	f006 fd67 	bl	801f0ca <strcpy>
}
 80185fc:	bf00      	nop
 80185fe:	3708      	adds	r7, #8
 8018600:	46bd      	mov	sp, r7
 8018602:	bd80      	pop	{r7, pc}
 8018604:	20014d28 	.word	0x20014d28

08018608 <SGET_IP2>:

void SGET_IP2(char *opBuffer) {
 8018608:	b580      	push	{r7, lr}
 801860a:	b082      	sub	sp, #8
 801860c:	af00      	add	r7, sp, #0
 801860e:	6078      	str	r0, [r7, #4]
	strcpy(opBuffer, Rconfig.IP2);
 8018610:	4b04      	ldr	r3, [pc, #16]	@ (8018624 <SGET_IP2+0x1c>)
 8018612:	69db      	ldr	r3, [r3, #28]
 8018614:	4619      	mov	r1, r3
 8018616:	6878      	ldr	r0, [r7, #4]
 8018618:	f006 fd57 	bl	801f0ca <strcpy>
}
 801861c:	bf00      	nop
 801861e:	3708      	adds	r7, #8
 8018620:	46bd      	mov	sp, r7
 8018622:	bd80      	pop	{r7, pc}
 8018624:	20014d28 	.word	0x20014d28

08018628 <SGET_LAT>:

void SGET_LAT(double *lat){
 8018628:	b580      	push	{r7, lr}
 801862a:	b082      	sub	sp, #8
 801862c:	af00      	add	r7, sp, #0
 801862e:	6078      	str	r0, [r7, #4]
	sscanf(Rconfig.LAT, "%lf", lat);
 8018630:	4b05      	ldr	r3, [pc, #20]	@ (8018648 <SGET_LAT+0x20>)
 8018632:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8018634:	687a      	ldr	r2, [r7, #4]
 8018636:	4905      	ldr	r1, [pc, #20]	@ (801864c <SGET_LAT+0x24>)
 8018638:	4618      	mov	r0, r3
 801863a:	f006 faad 	bl	801eb98 <siscanf>
}
 801863e:	bf00      	nop
 8018640:	3708      	adds	r7, #8
 8018642:	46bd      	mov	sp, r7
 8018644:	bd80      	pop	{r7, pc}
 8018646:	bf00      	nop
 8018648:	20014d28 	.word	0x20014d28
 801864c:	0802313c 	.word	0x0802313c

08018650 <SGET_LON>:
void SGET_LON(double *lon){
 8018650:	b580      	push	{r7, lr}
 8018652:	b082      	sub	sp, #8
 8018654:	af00      	add	r7, sp, #0
 8018656:	6078      	str	r0, [r7, #4]
	sscanf(Rconfig.LON, "%lf", lon);
 8018658:	4b05      	ldr	r3, [pc, #20]	@ (8018670 <SGET_LON+0x20>)
 801865a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801865e:	687a      	ldr	r2, [r7, #4]
 8018660:	4904      	ldr	r1, [pc, #16]	@ (8018674 <SGET_LON+0x24>)
 8018662:	4618      	mov	r0, r3
 8018664:	f006 fa98 	bl	801eb98 <siscanf>
}
 8018668:	bf00      	nop
 801866a:	3708      	adds	r7, #8
 801866c:	46bd      	mov	sp, r7
 801866e:	bd80      	pop	{r7, pc}
 8018670:	20014d28 	.word	0x20014d28
 8018674:	0802313c 	.word	0x0802313c

08018678 <SGET_PORT2>:
void SGET_PORT2(char *opBuffer) {
 8018678:	b580      	push	{r7, lr}
 801867a:	b082      	sub	sp, #8
 801867c:	af00      	add	r7, sp, #0
 801867e:	6078      	str	r0, [r7, #4]
	strcpy(opBuffer, Rconfig.IPPORT2);
 8018680:	4b04      	ldr	r3, [pc, #16]	@ (8018694 <SGET_PORT2+0x1c>)
 8018682:	6a1b      	ldr	r3, [r3, #32]
 8018684:	4619      	mov	r1, r3
 8018686:	6878      	ldr	r0, [r7, #4]
 8018688:	f006 fd1f 	bl	801f0ca <strcpy>
}
 801868c:	bf00      	nop
 801868e:	3708      	adds	r7, #8
 8018690:	46bd      	mov	sp, r7
 8018692:	bd80      	pop	{r7, pc}
 8018694:	20014d28 	.word	0x20014d28

08018698 <SGET_SKEY1>:

void SGET_SKEY1(char *opBuffer) {
 8018698:	b580      	push	{r7, lr}
 801869a:	b082      	sub	sp, #8
 801869c:	af00      	add	r7, sp, #0
 801869e:	6078      	str	r0, [r7, #4]
	strcpy(opBuffer, Rconfig.SKEY1);
 80186a0:	4b04      	ldr	r3, [pc, #16]	@ (80186b4 <SGET_SKEY1+0x1c>)
 80186a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80186a4:	4619      	mov	r1, r3
 80186a6:	6878      	ldr	r0, [r7, #4]
 80186a8:	f006 fd0f 	bl	801f0ca <strcpy>
}
 80186ac:	bf00      	nop
 80186ae:	3708      	adds	r7, #8
 80186b0:	46bd      	mov	sp, r7
 80186b2:	bd80      	pop	{r7, pc}
 80186b4:	20014d28 	.word	0x20014d28

080186b8 <SGET_SKEY2>:

void SGET_SKEY2(char *opBuffer) {
 80186b8:	b580      	push	{r7, lr}
 80186ba:	b082      	sub	sp, #8
 80186bc:	af00      	add	r7, sp, #0
 80186be:	6078      	str	r0, [r7, #4]
	strcpy(opBuffer, Rconfig.SKEY2);
 80186c0:	4b04      	ldr	r3, [pc, #16]	@ (80186d4 <SGET_SKEY2+0x1c>)
 80186c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80186c4:	4619      	mov	r1, r3
 80186c6:	6878      	ldr	r0, [r7, #4]
 80186c8:	f006 fcff 	bl	801f0ca <strcpy>
}
 80186cc:	bf00      	nop
 80186ce:	3708      	adds	r7, #8
 80186d0:	46bd      	mov	sp, r7
 80186d2:	bd80      	pop	{r7, pc}
 80186d4:	20014d28 	.word	0x20014d28

080186d8 <SGET_SKEY3>:

void SGET_SKEY3(char *opBuffer) {
 80186d8:	b580      	push	{r7, lr}
 80186da:	b082      	sub	sp, #8
 80186dc:	af00      	add	r7, sp, #0
 80186de:	6078      	str	r0, [r7, #4]
	strcpy(opBuffer, Rconfig.SKEY3);
 80186e0:	4b04      	ldr	r3, [pc, #16]	@ (80186f4 <SGET_SKEY3+0x1c>)
 80186e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80186e4:	4619      	mov	r1, r3
 80186e6:	6878      	ldr	r0, [r7, #4]
 80186e8:	f006 fcef 	bl	801f0ca <strcpy>
}
 80186ec:	bf00      	nop
 80186ee:	3708      	adds	r7, #8
 80186f0:	46bd      	mov	sp, r7
 80186f2:	bd80      	pop	{r7, pc}
 80186f4:	20014d28 	.word	0x20014d28

080186f8 <SGET_APN>:

void SGET_APN(char *opBuffer) {
 80186f8:	b580      	push	{r7, lr}
 80186fa:	b082      	sub	sp, #8
 80186fc:	af00      	add	r7, sp, #0
 80186fe:	6078      	str	r0, [r7, #4]
	strcpy(opBuffer, Rconfig.DAPN);
 8018700:	4b04      	ldr	r3, [pc, #16]	@ (8018714 <SGET_APN+0x1c>)
 8018702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018704:	4619      	mov	r1, r3
 8018706:	6878      	ldr	r0, [r7, #4]
 8018708:	f006 fcdf 	bl	801f0ca <strcpy>
}
 801870c:	bf00      	nop
 801870e:	3708      	adds	r7, #8
 8018710:	46bd      	mov	sp, r7
 8018712:	bd80      	pop	{r7, pc}
 8018714:	20014d28 	.word	0x20014d28

08018718 <SGET_ION>:

void SGET_ION(char *opBuffer) {
 8018718:	b580      	push	{r7, lr}
 801871a:	b082      	sub	sp, #8
 801871c:	af00      	add	r7, sp, #0
 801871e:	6078      	str	r0, [r7, #4]
	strcpy(opBuffer, Rconfig.ION);
 8018720:	4b04      	ldr	r3, [pc, #16]	@ (8018734 <SGET_ION+0x1c>)
 8018722:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018724:	4619      	mov	r1, r3
 8018726:	6878      	ldr	r0, [r7, #4]
 8018728:	f006 fccf 	bl	801f0ca <strcpy>
}
 801872c:	bf00      	nop
 801872e:	3708      	adds	r7, #8
 8018730:	46bd      	mov	sp, r7
 8018732:	bd80      	pop	{r7, pc}
 8018734:	20014d28 	.word	0x20014d28

08018738 <SGET_NSAM>:

void SGET_NSAM(char *opBuffer) {
 8018738:	b580      	push	{r7, lr}
 801873a:	b082      	sub	sp, #8
 801873c:	af00      	add	r7, sp, #0
 801873e:	6078      	str	r0, [r7, #4]
	strcpy(opBuffer, Rconfig.NSAM);
 8018740:	4b04      	ldr	r3, [pc, #16]	@ (8018754 <SGET_NSAM+0x1c>)
 8018742:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018744:	4619      	mov	r1, r3
 8018746:	6878      	ldr	r0, [r7, #4]
 8018748:	f006 fcbf 	bl	801f0ca <strcpy>
}
 801874c:	bf00      	nop
 801874e:	3708      	adds	r7, #8
 8018750:	46bd      	mov	sp, r7
 8018752:	bd80      	pop	{r7, pc}
 8018754:	20014d28 	.word	0x20014d28

08018758 <SGET_HA>:

void SGET_HA(char *opBuffer) {
 8018758:	b580      	push	{r7, lr}
 801875a:	b082      	sub	sp, #8
 801875c:	af00      	add	r7, sp, #0
 801875e:	6078      	str	r0, [r7, #4]
	strcpy(opBuffer, Rconfig.HA);
 8018760:	4b04      	ldr	r3, [pc, #16]	@ (8018774 <SGET_HA+0x1c>)
 8018762:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018764:	4619      	mov	r1, r3
 8018766:	6878      	ldr	r0, [r7, #4]
 8018768:	f006 fcaf 	bl	801f0ca <strcpy>
}
 801876c:	bf00      	nop
 801876e:	3708      	adds	r7, #8
 8018770:	46bd      	mov	sp, r7
 8018772:	bd80      	pop	{r7, pc}
 8018774:	20014d28 	.word	0x20014d28

08018778 <SGET_HB>:

void SGET_HB(char *opBuffer) {
 8018778:	b580      	push	{r7, lr}
 801877a:	b082      	sub	sp, #8
 801877c:	af00      	add	r7, sp, #0
 801877e:	6078      	str	r0, [r7, #4]
	strcpy(opBuffer, Rconfig.HB);
 8018780:	4b04      	ldr	r3, [pc, #16]	@ (8018794 <SGET_HB+0x1c>)
 8018782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8018784:	4619      	mov	r1, r3
 8018786:	6878      	ldr	r0, [r7, #4]
 8018788:	f006 fc9f 	bl	801f0ca <strcpy>
}
 801878c:	bf00      	nop
 801878e:	3708      	adds	r7, #8
 8018790:	46bd      	mov	sp, r7
 8018792:	bd80      	pop	{r7, pc}
 8018794:	20014d28 	.word	0x20014d28

08018798 <SGET_HC>:

void SGET_HC(char *opBuffer) {
 8018798:	b580      	push	{r7, lr}
 801879a:	b082      	sub	sp, #8
 801879c:	af00      	add	r7, sp, #0
 801879e:	6078      	str	r0, [r7, #4]
	strcpy(opBuffer, Rconfig.HC);
 80187a0:	4b04      	ldr	r3, [pc, #16]	@ (80187b4 <SGET_HC+0x1c>)
 80187a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80187a4:	4619      	mov	r1, r3
 80187a6:	6878      	ldr	r0, [r7, #4]
 80187a8:	f006 fc8f 	bl	801f0ca <strcpy>
}
 80187ac:	bf00      	nop
 80187ae:	3708      	adds	r7, #8
 80187b0:	46bd      	mov	sp, r7
 80187b2:	bd80      	pop	{r7, pc}
 80187b4:	20014d28 	.word	0x20014d28

080187b8 <SGET_ACCOFFSET>:

void SGET_ACCOFFSET(char *opBuffer) {
 80187b8:	b580      	push	{r7, lr}
 80187ba:	b082      	sub	sp, #8
 80187bc:	af00      	add	r7, sp, #0
 80187be:	6078      	str	r0, [r7, #4]
	strcpy(opBuffer, Rconfig.ACCOFFSET);
 80187c0:	4b04      	ldr	r3, [pc, #16]	@ (80187d4 <SGET_ACCOFFSET+0x1c>)
 80187c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80187c4:	4619      	mov	r1, r3
 80187c6:	6878      	ldr	r0, [r7, #4]
 80187c8:	f006 fc7f 	bl	801f0ca <strcpy>
}
 80187cc:	bf00      	nop
 80187ce:	3708      	adds	r7, #8
 80187d0:	46bd      	mov	sp, r7
 80187d2:	bd80      	pop	{r7, pc}
 80187d4:	20014d28 	.word	0x20014d28

080187d8 <SGET_USER>:

void SGET_USER(char *opBuffer) {
 80187d8:	b580      	push	{r7, lr}
 80187da:	b082      	sub	sp, #8
 80187dc:	af00      	add	r7, sp, #0
 80187de:	6078      	str	r0, [r7, #4]
	strcpy(opBuffer, Rconfig.USER);
 80187e0:	4b04      	ldr	r3, [pc, #16]	@ (80187f4 <SGET_USER+0x1c>)
 80187e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80187e4:	4619      	mov	r1, r3
 80187e6:	6878      	ldr	r0, [r7, #4]
 80187e8:	f006 fc6f 	bl	801f0ca <strcpy>
}
 80187ec:	bf00      	nop
 80187ee:	3708      	adds	r7, #8
 80187f0:	46bd      	mov	sp, r7
 80187f2:	bd80      	pop	{r7, pc}
 80187f4:	20014d28 	.word	0x20014d28

080187f8 <SGET_PASSWORD>:

void SGET_PASSWORD(char *opBuffer) {
 80187f8:	b580      	push	{r7, lr}
 80187fa:	b082      	sub	sp, #8
 80187fc:	af00      	add	r7, sp, #0
 80187fe:	6078      	str	r0, [r7, #4]
	strcpy(opBuffer, Rconfig.PSWD);
 8018800:	4b04      	ldr	r3, [pc, #16]	@ (8018814 <SGET_PASSWORD+0x1c>)
 8018802:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018804:	4619      	mov	r1, r3
 8018806:	6878      	ldr	r0, [r7, #4]
 8018808:	f006 fc5f 	bl	801f0ca <strcpy>
}
 801880c:	bf00      	nop
 801880e:	3708      	adds	r7, #8
 8018810:	46bd      	mov	sp, r7
 8018812:	bd80      	pop	{r7, pc}
 8018814:	20014d28 	.word	0x20014d28

08018818 <SGET_VIN>:

void SGET_VIN(char *opBuffer) {
 8018818:	b580      	push	{r7, lr}
 801881a:	b082      	sub	sp, #8
 801881c:	af00      	add	r7, sp, #0
 801881e:	6078      	str	r0, [r7, #4]
	strcpy(opBuffer, Rconfig.VIN);
 8018820:	4b04      	ldr	r3, [pc, #16]	@ (8018834 <SGET_VIN+0x1c>)
 8018822:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018824:	4619      	mov	r1, r3
 8018826:	6878      	ldr	r0, [r7, #4]
 8018828:	f006 fc4f 	bl	801f0ca <strcpy>
}
 801882c:	bf00      	nop
 801882e:	3708      	adds	r7, #8
 8018830:	46bd      	mov	sp, r7
 8018832:	bd80      	pop	{r7, pc}
 8018834:	20014d28 	.word	0x20014d28

08018838 <SET_MIP>:
	if (Rconfig.Rtime[0] != 0xff)
		strcpy(opBuffer, Rconfig.Rtime);
}

// Implement SET command functions similarly
bool SET_MIP(char *ip_address) {
 8018838:	b590      	push	{r4, r7, lr}
 801883a:	b083      	sub	sp, #12
 801883c:	af00      	add	r7, sp, #0
 801883e:	6078      	str	r0, [r7, #4]
	if (Rconfig.MIP != NULL)
 8018840:	4b0b      	ldr	r3, [pc, #44]	@ (8018870 <SET_MIP+0x38>)
 8018842:	681b      	ldr	r3, [r3, #0]
 8018844:	2b00      	cmp	r3, #0
 8018846:	d00b      	beq.n	8018860 <SET_MIP+0x28>
		clearBuffer(Rconfig.MIP, strlen(Rconfig.MIP));
 8018848:	4b09      	ldr	r3, [pc, #36]	@ (8018870 <SET_MIP+0x38>)
 801884a:	681c      	ldr	r4, [r3, #0]
 801884c:	4b08      	ldr	r3, [pc, #32]	@ (8018870 <SET_MIP+0x38>)
 801884e:	681b      	ldr	r3, [r3, #0]
 8018850:	4618      	mov	r0, r3
 8018852:	f7e7 fd27 	bl	80002a4 <strlen>
 8018856:	4603      	mov	r3, r0
 8018858:	4619      	mov	r1, r3
 801885a:	4620      	mov	r0, r4
 801885c:	f7e9 f934 	bl	8001ac8 <clearBuffer>
	Rconfig.MIP = ip_address;
 8018860:	4a03      	ldr	r2, [pc, #12]	@ (8018870 <SET_MIP+0x38>)
 8018862:	687b      	ldr	r3, [r7, #4]
 8018864:	6013      	str	r3, [r2, #0]
}
 8018866:	bf00      	nop
 8018868:	4618      	mov	r0, r3
 801886a:	370c      	adds	r7, #12
 801886c:	46bd      	mov	sp, r7
 801886e:	bd90      	pop	{r4, r7, pc}
 8018870:	20014d28 	.word	0x20014d28

08018874 <SET_PORT1>:

bool SET_PORT1(char *port) {
 8018874:	b590      	push	{r4, r7, lr}
 8018876:	b083      	sub	sp, #12
 8018878:	af00      	add	r7, sp, #0
 801887a:	6078      	str	r0, [r7, #4]
	if (Rconfig.MPORT1 != NULL)
 801887c:	4b0b      	ldr	r3, [pc, #44]	@ (80188ac <SET_PORT1+0x38>)
 801887e:	685b      	ldr	r3, [r3, #4]
 8018880:	2b00      	cmp	r3, #0
 8018882:	d00b      	beq.n	801889c <SET_PORT1+0x28>
		clearBuffer(Rconfig.MPORT1, strlen(Rconfig.MPORT1));
 8018884:	4b09      	ldr	r3, [pc, #36]	@ (80188ac <SET_PORT1+0x38>)
 8018886:	685c      	ldr	r4, [r3, #4]
 8018888:	4b08      	ldr	r3, [pc, #32]	@ (80188ac <SET_PORT1+0x38>)
 801888a:	685b      	ldr	r3, [r3, #4]
 801888c:	4618      	mov	r0, r3
 801888e:	f7e7 fd09 	bl	80002a4 <strlen>
 8018892:	4603      	mov	r3, r0
 8018894:	4619      	mov	r1, r3
 8018896:	4620      	mov	r0, r4
 8018898:	f7e9 f916 	bl	8001ac8 <clearBuffer>
	Rconfig.MPORT1 = port;
 801889c:	4a03      	ldr	r2, [pc, #12]	@ (80188ac <SET_PORT1+0x38>)
 801889e:	687b      	ldr	r3, [r7, #4]
 80188a0:	6053      	str	r3, [r2, #4]
}
 80188a2:	bf00      	nop
 80188a4:	4618      	mov	r0, r3
 80188a6:	370c      	adds	r7, #12
 80188a8:	46bd      	mov	sp, r7
 80188aa:	bd90      	pop	{r4, r7, pc}
 80188ac:	20014d28 	.word	0x20014d28

080188b0 <SET_MUSER>:

bool SET_MUSER(char *username) {
 80188b0:	b590      	push	{r4, r7, lr}
 80188b2:	b083      	sub	sp, #12
 80188b4:	af00      	add	r7, sp, #0
 80188b6:	6078      	str	r0, [r7, #4]
	if (Rconfig.MUSER != NULL)
 80188b8:	4b0b      	ldr	r3, [pc, #44]	@ (80188e8 <SET_MUSER+0x38>)
 80188ba:	689b      	ldr	r3, [r3, #8]
 80188bc:	2b00      	cmp	r3, #0
 80188be:	d00b      	beq.n	80188d8 <SET_MUSER+0x28>
		clearBuffer(Rconfig.MPORT1, strlen(Rconfig.MPORT1));
 80188c0:	4b09      	ldr	r3, [pc, #36]	@ (80188e8 <SET_MUSER+0x38>)
 80188c2:	685c      	ldr	r4, [r3, #4]
 80188c4:	4b08      	ldr	r3, [pc, #32]	@ (80188e8 <SET_MUSER+0x38>)
 80188c6:	685b      	ldr	r3, [r3, #4]
 80188c8:	4618      	mov	r0, r3
 80188ca:	f7e7 fceb 	bl	80002a4 <strlen>
 80188ce:	4603      	mov	r3, r0
 80188d0:	4619      	mov	r1, r3
 80188d2:	4620      	mov	r0, r4
 80188d4:	f7e9 f8f8 	bl	8001ac8 <clearBuffer>
	Rconfig.MUSER = username;
 80188d8:	4a03      	ldr	r2, [pc, #12]	@ (80188e8 <SET_MUSER+0x38>)
 80188da:	687b      	ldr	r3, [r7, #4]
 80188dc:	6093      	str	r3, [r2, #8]

}
 80188de:	bf00      	nop
 80188e0:	4618      	mov	r0, r3
 80188e2:	370c      	adds	r7, #12
 80188e4:	46bd      	mov	sp, r7
 80188e6:	bd90      	pop	{r4, r7, pc}
 80188e8:	20014d28 	.word	0x20014d28

080188ec <SET_MPASS>:

bool SET_MPASS(char *password) {
 80188ec:	b590      	push	{r4, r7, lr}
 80188ee:	b083      	sub	sp, #12
 80188f0:	af00      	add	r7, sp, #0
 80188f2:	6078      	str	r0, [r7, #4]
	if (Rconfig.MPASS != NULL)
 80188f4:	4b0b      	ldr	r3, [pc, #44]	@ (8018924 <SET_MPASS+0x38>)
 80188f6:	68db      	ldr	r3, [r3, #12]
 80188f8:	2b00      	cmp	r3, #0
 80188fa:	d00b      	beq.n	8018914 <SET_MPASS+0x28>
		clearBuffer(Rconfig.MPASS, strlen(Rconfig.MPASS));
 80188fc:	4b09      	ldr	r3, [pc, #36]	@ (8018924 <SET_MPASS+0x38>)
 80188fe:	68dc      	ldr	r4, [r3, #12]
 8018900:	4b08      	ldr	r3, [pc, #32]	@ (8018924 <SET_MPASS+0x38>)
 8018902:	68db      	ldr	r3, [r3, #12]
 8018904:	4618      	mov	r0, r3
 8018906:	f7e7 fccd 	bl	80002a4 <strlen>
 801890a:	4603      	mov	r3, r0
 801890c:	4619      	mov	r1, r3
 801890e:	4620      	mov	r0, r4
 8018910:	f7e9 f8da 	bl	8001ac8 <clearBuffer>
	Rconfig.MPASS = password;
 8018914:	4a03      	ldr	r2, [pc, #12]	@ (8018924 <SET_MPASS+0x38>)
 8018916:	687b      	ldr	r3, [r7, #4]
 8018918:	60d3      	str	r3, [r2, #12]

}
 801891a:	bf00      	nop
 801891c:	4618      	mov	r0, r3
 801891e:	370c      	adds	r7, #12
 8018920:	46bd      	mov	sp, r7
 8018922:	bd90      	pop	{r4, r7, pc}
 8018924:	20014d28 	.word	0x20014d28

08018928 <SET_CERT>:

bool SET_CERT(char *filename) {
 8018928:	b590      	push	{r4, r7, lr}
 801892a:	b083      	sub	sp, #12
 801892c:	af00      	add	r7, sp, #0
 801892e:	6078      	str	r0, [r7, #4]
	if (Rconfig.CERT != NULL)
 8018930:	4b0b      	ldr	r3, [pc, #44]	@ (8018960 <SET_CERT+0x38>)
 8018932:	691b      	ldr	r3, [r3, #16]
 8018934:	2b00      	cmp	r3, #0
 8018936:	d00b      	beq.n	8018950 <SET_CERT+0x28>
		clearBuffer(Rconfig.CERT, strlen(Rconfig.CERT));
 8018938:	4b09      	ldr	r3, [pc, #36]	@ (8018960 <SET_CERT+0x38>)
 801893a:	691c      	ldr	r4, [r3, #16]
 801893c:	4b08      	ldr	r3, [pc, #32]	@ (8018960 <SET_CERT+0x38>)
 801893e:	691b      	ldr	r3, [r3, #16]
 8018940:	4618      	mov	r0, r3
 8018942:	f7e7 fcaf 	bl	80002a4 <strlen>
 8018946:	4603      	mov	r3, r0
 8018948:	4619      	mov	r1, r3
 801894a:	4620      	mov	r0, r4
 801894c:	f7e9 f8bc 	bl	8001ac8 <clearBuffer>
	Rconfig.CERT = filename;
 8018950:	4a03      	ldr	r2, [pc, #12]	@ (8018960 <SET_CERT+0x38>)
 8018952:	687b      	ldr	r3, [r7, #4]
 8018954:	6113      	str	r3, [r2, #16]

}
 8018956:	bf00      	nop
 8018958:	4618      	mov	r0, r3
 801895a:	370c      	adds	r7, #12
 801895c:	46bd      	mov	sp, r7
 801895e:	bd90      	pop	{r4, r7, pc}
 8018960:	20014d28 	.word	0x20014d28

08018964 <SET_KEY>:

bool SET_KEY(char *filename) {
 8018964:	b590      	push	{r4, r7, lr}
 8018966:	b083      	sub	sp, #12
 8018968:	af00      	add	r7, sp, #0
 801896a:	6078      	str	r0, [r7, #4]
	if (Rconfig.KEY != NULL)
 801896c:	4b0b      	ldr	r3, [pc, #44]	@ (801899c <SET_KEY+0x38>)
 801896e:	695b      	ldr	r3, [r3, #20]
 8018970:	2b00      	cmp	r3, #0
 8018972:	d00b      	beq.n	801898c <SET_KEY+0x28>
		clearBuffer(Rconfig.KEY, strlen(Rconfig.KEY));
 8018974:	4b09      	ldr	r3, [pc, #36]	@ (801899c <SET_KEY+0x38>)
 8018976:	695c      	ldr	r4, [r3, #20]
 8018978:	4b08      	ldr	r3, [pc, #32]	@ (801899c <SET_KEY+0x38>)
 801897a:	695b      	ldr	r3, [r3, #20]
 801897c:	4618      	mov	r0, r3
 801897e:	f7e7 fc91 	bl	80002a4 <strlen>
 8018982:	4603      	mov	r3, r0
 8018984:	4619      	mov	r1, r3
 8018986:	4620      	mov	r0, r4
 8018988:	f7e9 f89e 	bl	8001ac8 <clearBuffer>
	Rconfig.KEY = filename;
 801898c:	4a03      	ldr	r2, [pc, #12]	@ (801899c <SET_KEY+0x38>)
 801898e:	687b      	ldr	r3, [r7, #4]
 8018990:	6153      	str	r3, [r2, #20]

}
 8018992:	bf00      	nop
 8018994:	4618      	mov	r0, r3
 8018996:	370c      	adds	r7, #12
 8018998:	46bd      	mov	sp, r7
 801899a:	bd90      	pop	{r4, r7, pc}
 801899c:	20014d28 	.word	0x20014d28

080189a0 <SET_CA>:

bool SET_CA(char *filename) {
 80189a0:	b590      	push	{r4, r7, lr}
 80189a2:	b083      	sub	sp, #12
 80189a4:	af00      	add	r7, sp, #0
 80189a6:	6078      	str	r0, [r7, #4]
	if (Rconfig.CA != NULL)
 80189a8:	4b0b      	ldr	r3, [pc, #44]	@ (80189d8 <SET_CA+0x38>)
 80189aa:	699b      	ldr	r3, [r3, #24]
 80189ac:	2b00      	cmp	r3, #0
 80189ae:	d00b      	beq.n	80189c8 <SET_CA+0x28>
		clearBuffer(Rconfig.CA, strlen(Rconfig.CA));
 80189b0:	4b09      	ldr	r3, [pc, #36]	@ (80189d8 <SET_CA+0x38>)
 80189b2:	699c      	ldr	r4, [r3, #24]
 80189b4:	4b08      	ldr	r3, [pc, #32]	@ (80189d8 <SET_CA+0x38>)
 80189b6:	699b      	ldr	r3, [r3, #24]
 80189b8:	4618      	mov	r0, r3
 80189ba:	f7e7 fc73 	bl	80002a4 <strlen>
 80189be:	4603      	mov	r3, r0
 80189c0:	4619      	mov	r1, r3
 80189c2:	4620      	mov	r0, r4
 80189c4:	f7e9 f880 	bl	8001ac8 <clearBuffer>
	Rconfig.CA = filename;
 80189c8:	4a03      	ldr	r2, [pc, #12]	@ (80189d8 <SET_CA+0x38>)
 80189ca:	687b      	ldr	r3, [r7, #4]
 80189cc:	6193      	str	r3, [r2, #24]

}
 80189ce:	bf00      	nop
 80189d0:	4618      	mov	r0, r3
 80189d2:	370c      	adds	r7, #12
 80189d4:	46bd      	mov	sp, r7
 80189d6:	bd90      	pop	{r4, r7, pc}
 80189d8:	20014d28 	.word	0x20014d28

080189dc <SET_IP2>:

bool SET_IP2(char *address) {
 80189dc:	b590      	push	{r4, r7, lr}
 80189de:	b083      	sub	sp, #12
 80189e0:	af00      	add	r7, sp, #0
 80189e2:	6078      	str	r0, [r7, #4]
	if (Rconfig.IP2 != NULL)
 80189e4:	4b0b      	ldr	r3, [pc, #44]	@ (8018a14 <SET_IP2+0x38>)
 80189e6:	69db      	ldr	r3, [r3, #28]
 80189e8:	2b00      	cmp	r3, #0
 80189ea:	d00b      	beq.n	8018a04 <SET_IP2+0x28>
		clearBuffer(Rconfig.IP2, strlen(Rconfig.IP2));
 80189ec:	4b09      	ldr	r3, [pc, #36]	@ (8018a14 <SET_IP2+0x38>)
 80189ee:	69dc      	ldr	r4, [r3, #28]
 80189f0:	4b08      	ldr	r3, [pc, #32]	@ (8018a14 <SET_IP2+0x38>)
 80189f2:	69db      	ldr	r3, [r3, #28]
 80189f4:	4618      	mov	r0, r3
 80189f6:	f7e7 fc55 	bl	80002a4 <strlen>
 80189fa:	4603      	mov	r3, r0
 80189fc:	4619      	mov	r1, r3
 80189fe:	4620      	mov	r0, r4
 8018a00:	f7e9 f862 	bl	8001ac8 <clearBuffer>
	Rconfig.IP2 = address;
 8018a04:	4a03      	ldr	r2, [pc, #12]	@ (8018a14 <SET_IP2+0x38>)
 8018a06:	687b      	ldr	r3, [r7, #4]
 8018a08:	61d3      	str	r3, [r2, #28]

}
 8018a0a:	bf00      	nop
 8018a0c:	4618      	mov	r0, r3
 8018a0e:	370c      	adds	r7, #12
 8018a10:	46bd      	mov	sp, r7
 8018a12:	bd90      	pop	{r4, r7, pc}
 8018a14:	20014d28 	.word	0x20014d28

08018a18 <SET_PORT2>:

bool SET_PORT2(char *value) {
 8018a18:	b590      	push	{r4, r7, lr}
 8018a1a:	b083      	sub	sp, #12
 8018a1c:	af00      	add	r7, sp, #0
 8018a1e:	6078      	str	r0, [r7, #4]
	if (Rconfig.IPPORT2 != NULL)
 8018a20:	4b0b      	ldr	r3, [pc, #44]	@ (8018a50 <SET_PORT2+0x38>)
 8018a22:	6a1b      	ldr	r3, [r3, #32]
 8018a24:	2b00      	cmp	r3, #0
 8018a26:	d00b      	beq.n	8018a40 <SET_PORT2+0x28>
		clearBuffer(Rconfig.IPPORT2, strlen(Rconfig.IPPORT2));
 8018a28:	4b09      	ldr	r3, [pc, #36]	@ (8018a50 <SET_PORT2+0x38>)
 8018a2a:	6a1c      	ldr	r4, [r3, #32]
 8018a2c:	4b08      	ldr	r3, [pc, #32]	@ (8018a50 <SET_PORT2+0x38>)
 8018a2e:	6a1b      	ldr	r3, [r3, #32]
 8018a30:	4618      	mov	r0, r3
 8018a32:	f7e7 fc37 	bl	80002a4 <strlen>
 8018a36:	4603      	mov	r3, r0
 8018a38:	4619      	mov	r1, r3
 8018a3a:	4620      	mov	r0, r4
 8018a3c:	f7e9 f844 	bl	8001ac8 <clearBuffer>
	Rconfig.IPPORT2 = value;
 8018a40:	4a03      	ldr	r2, [pc, #12]	@ (8018a50 <SET_PORT2+0x38>)
 8018a42:	687b      	ldr	r3, [r7, #4]
 8018a44:	6213      	str	r3, [r2, #32]

}
 8018a46:	bf00      	nop
 8018a48:	4618      	mov	r0, r3
 8018a4a:	370c      	adds	r7, #12
 8018a4c:	46bd      	mov	sp, r7
 8018a4e:	bd90      	pop	{r4, r7, pc}
 8018a50:	20014d28 	.word	0x20014d28

08018a54 <SET_SKEY1>:

bool SET_SKEY1(char *keyValue) {
 8018a54:	b590      	push	{r4, r7, lr}
 8018a56:	b083      	sub	sp, #12
 8018a58:	af00      	add	r7, sp, #0
 8018a5a:	6078      	str	r0, [r7, #4]
	if (Rconfig.SKEY1 != NULL)
 8018a5c:	4b0b      	ldr	r3, [pc, #44]	@ (8018a8c <SET_SKEY1+0x38>)
 8018a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018a60:	2b00      	cmp	r3, #0
 8018a62:	d00b      	beq.n	8018a7c <SET_SKEY1+0x28>
		clearBuffer(Rconfig.SKEY1, strlen(Rconfig.SKEY1));
 8018a64:	4b09      	ldr	r3, [pc, #36]	@ (8018a8c <SET_SKEY1+0x38>)
 8018a66:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8018a68:	4b08      	ldr	r3, [pc, #32]	@ (8018a8c <SET_SKEY1+0x38>)
 8018a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018a6c:	4618      	mov	r0, r3
 8018a6e:	f7e7 fc19 	bl	80002a4 <strlen>
 8018a72:	4603      	mov	r3, r0
 8018a74:	4619      	mov	r1, r3
 8018a76:	4620      	mov	r0, r4
 8018a78:	f7e9 f826 	bl	8001ac8 <clearBuffer>
	Rconfig.SKEY1 = keyValue;
 8018a7c:	4a03      	ldr	r2, [pc, #12]	@ (8018a8c <SET_SKEY1+0x38>)
 8018a7e:	687b      	ldr	r3, [r7, #4]
 8018a80:	6253      	str	r3, [r2, #36]	@ 0x24

}
 8018a82:	bf00      	nop
 8018a84:	4618      	mov	r0, r3
 8018a86:	370c      	adds	r7, #12
 8018a88:	46bd      	mov	sp, r7
 8018a8a:	bd90      	pop	{r4, r7, pc}
 8018a8c:	20014d28 	.word	0x20014d28

08018a90 <SET_SKEY2>:

bool SET_SKEY2(char *keyValue) {
 8018a90:	b590      	push	{r4, r7, lr}
 8018a92:	b083      	sub	sp, #12
 8018a94:	af00      	add	r7, sp, #0
 8018a96:	6078      	str	r0, [r7, #4]
	if (Rconfig.SKEY2 != NULL)
 8018a98:	4b0b      	ldr	r3, [pc, #44]	@ (8018ac8 <SET_SKEY2+0x38>)
 8018a9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018a9c:	2b00      	cmp	r3, #0
 8018a9e:	d00b      	beq.n	8018ab8 <SET_SKEY2+0x28>
		clearBuffer(Rconfig.SKEY2, strlen(Rconfig.SKEY2));
 8018aa0:	4b09      	ldr	r3, [pc, #36]	@ (8018ac8 <SET_SKEY2+0x38>)
 8018aa2:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8018aa4:	4b08      	ldr	r3, [pc, #32]	@ (8018ac8 <SET_SKEY2+0x38>)
 8018aa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018aa8:	4618      	mov	r0, r3
 8018aaa:	f7e7 fbfb 	bl	80002a4 <strlen>
 8018aae:	4603      	mov	r3, r0
 8018ab0:	4619      	mov	r1, r3
 8018ab2:	4620      	mov	r0, r4
 8018ab4:	f7e9 f808 	bl	8001ac8 <clearBuffer>
	Rconfig.SKEY2 = keyValue;
 8018ab8:	4a03      	ldr	r2, [pc, #12]	@ (8018ac8 <SET_SKEY2+0x38>)
 8018aba:	687b      	ldr	r3, [r7, #4]
 8018abc:	6293      	str	r3, [r2, #40]	@ 0x28

}
 8018abe:	bf00      	nop
 8018ac0:	4618      	mov	r0, r3
 8018ac2:	370c      	adds	r7, #12
 8018ac4:	46bd      	mov	sp, r7
 8018ac6:	bd90      	pop	{r4, r7, pc}
 8018ac8:	20014d28 	.word	0x20014d28

08018acc <SET_SKEY3>:

bool SET_SKEY3(char *keyValue) {
 8018acc:	b590      	push	{r4, r7, lr}
 8018ace:	b083      	sub	sp, #12
 8018ad0:	af00      	add	r7, sp, #0
 8018ad2:	6078      	str	r0, [r7, #4]
	if (Rconfig.SKEY3 != NULL)
 8018ad4:	4b0b      	ldr	r3, [pc, #44]	@ (8018b04 <SET_SKEY3+0x38>)
 8018ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018ad8:	2b00      	cmp	r3, #0
 8018ada:	d00b      	beq.n	8018af4 <SET_SKEY3+0x28>
		clearBuffer(Rconfig.SKEY3, strlen(Rconfig.SKEY3));
 8018adc:	4b09      	ldr	r3, [pc, #36]	@ (8018b04 <SET_SKEY3+0x38>)
 8018ade:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8018ae0:	4b08      	ldr	r3, [pc, #32]	@ (8018b04 <SET_SKEY3+0x38>)
 8018ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018ae4:	4618      	mov	r0, r3
 8018ae6:	f7e7 fbdd 	bl	80002a4 <strlen>
 8018aea:	4603      	mov	r3, r0
 8018aec:	4619      	mov	r1, r3
 8018aee:	4620      	mov	r0, r4
 8018af0:	f7e8 ffea 	bl	8001ac8 <clearBuffer>
	Rconfig.SKEY3 = keyValue;
 8018af4:	4a03      	ldr	r2, [pc, #12]	@ (8018b04 <SET_SKEY3+0x38>)
 8018af6:	687b      	ldr	r3, [r7, #4]
 8018af8:	62d3      	str	r3, [r2, #44]	@ 0x2c

}
 8018afa:	bf00      	nop
 8018afc:	4618      	mov	r0, r3
 8018afe:	370c      	adds	r7, #12
 8018b00:	46bd      	mov	sp, r7
 8018b02:	bd90      	pop	{r4, r7, pc}
 8018b04:	20014d28 	.word	0x20014d28

08018b08 <SET_APN>:

bool SET_APN(char *number) {
 8018b08:	b590      	push	{r4, r7, lr}
 8018b0a:	b083      	sub	sp, #12
 8018b0c:	af00      	add	r7, sp, #0
 8018b0e:	6078      	str	r0, [r7, #4]
	if (Rconfig.DAPN != NULL)
 8018b10:	4b0b      	ldr	r3, [pc, #44]	@ (8018b40 <SET_APN+0x38>)
 8018b12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018b14:	2b00      	cmp	r3, #0
 8018b16:	d00b      	beq.n	8018b30 <SET_APN+0x28>
		clearBuffer(Rconfig.DAPN, strlen(Rconfig.DAPN));
 8018b18:	4b09      	ldr	r3, [pc, #36]	@ (8018b40 <SET_APN+0x38>)
 8018b1a:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 8018b1c:	4b08      	ldr	r3, [pc, #32]	@ (8018b40 <SET_APN+0x38>)
 8018b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018b20:	4618      	mov	r0, r3
 8018b22:	f7e7 fbbf 	bl	80002a4 <strlen>
 8018b26:	4603      	mov	r3, r0
 8018b28:	4619      	mov	r1, r3
 8018b2a:	4620      	mov	r0, r4
 8018b2c:	f7e8 ffcc 	bl	8001ac8 <clearBuffer>
	Rconfig.DAPN = number;
 8018b30:	4a03      	ldr	r2, [pc, #12]	@ (8018b40 <SET_APN+0x38>)
 8018b32:	687b      	ldr	r3, [r7, #4]
 8018b34:	6313      	str	r3, [r2, #48]	@ 0x30

}
 8018b36:	bf00      	nop
 8018b38:	4618      	mov	r0, r3
 8018b3a:	370c      	adds	r7, #12
 8018b3c:	46bd      	mov	sp, r7
 8018b3e:	bd90      	pop	{r4, r7, pc}
 8018b40:	20014d28 	.word	0x20014d28

08018b44 <SET_ION>:

bool SET_ION(char *number) {
 8018b44:	b590      	push	{r4, r7, lr}
 8018b46:	b083      	sub	sp, #12
 8018b48:	af00      	add	r7, sp, #0
 8018b4a:	6078      	str	r0, [r7, #4]
	if (Rconfig.ION != NULL)
 8018b4c:	4b0b      	ldr	r3, [pc, #44]	@ (8018b7c <SET_ION+0x38>)
 8018b4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018b50:	2b00      	cmp	r3, #0
 8018b52:	d00b      	beq.n	8018b6c <SET_ION+0x28>
		clearBuffer(Rconfig.ION, strlen(Rconfig.ION));
 8018b54:	4b09      	ldr	r3, [pc, #36]	@ (8018b7c <SET_ION+0x38>)
 8018b56:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 8018b58:	4b08      	ldr	r3, [pc, #32]	@ (8018b7c <SET_ION+0x38>)
 8018b5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018b5c:	4618      	mov	r0, r3
 8018b5e:	f7e7 fba1 	bl	80002a4 <strlen>
 8018b62:	4603      	mov	r3, r0
 8018b64:	4619      	mov	r1, r3
 8018b66:	4620      	mov	r0, r4
 8018b68:	f7e8 ffae 	bl	8001ac8 <clearBuffer>
	Rconfig.ION = number;
 8018b6c:	4a03      	ldr	r2, [pc, #12]	@ (8018b7c <SET_ION+0x38>)
 8018b6e:	687b      	ldr	r3, [r7, #4]
 8018b70:	6353      	str	r3, [r2, #52]	@ 0x34
}
 8018b72:	bf00      	nop
 8018b74:	4618      	mov	r0, r3
 8018b76:	370c      	adds	r7, #12
 8018b78:	46bd      	mov	sp, r7
 8018b7a:	bd90      	pop	{r4, r7, pc}
 8018b7c:	20014d28 	.word	0x20014d28

08018b80 <SET_NSAM>:

bool SET_NSAM(char *number) {
 8018b80:	b590      	push	{r4, r7, lr}
 8018b82:	b083      	sub	sp, #12
 8018b84:	af00      	add	r7, sp, #0
 8018b86:	6078      	str	r0, [r7, #4]
	if (Rconfig.NSAM != NULL)
 8018b88:	4b0b      	ldr	r3, [pc, #44]	@ (8018bb8 <SET_NSAM+0x38>)
 8018b8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018b8c:	2b00      	cmp	r3, #0
 8018b8e:	d00b      	beq.n	8018ba8 <SET_NSAM+0x28>
		clearBuffer(Rconfig.NSAM, strlen(Rconfig.NSAM));
 8018b90:	4b09      	ldr	r3, [pc, #36]	@ (8018bb8 <SET_NSAM+0x38>)
 8018b92:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 8018b94:	4b08      	ldr	r3, [pc, #32]	@ (8018bb8 <SET_NSAM+0x38>)
 8018b96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018b98:	4618      	mov	r0, r3
 8018b9a:	f7e7 fb83 	bl	80002a4 <strlen>
 8018b9e:	4603      	mov	r3, r0
 8018ba0:	4619      	mov	r1, r3
 8018ba2:	4620      	mov	r0, r4
 8018ba4:	f7e8 ff90 	bl	8001ac8 <clearBuffer>
	Rconfig.NSAM = number;
 8018ba8:	4a03      	ldr	r2, [pc, #12]	@ (8018bb8 <SET_NSAM+0x38>)
 8018baa:	687b      	ldr	r3, [r7, #4]
 8018bac:	6393      	str	r3, [r2, #56]	@ 0x38

}
 8018bae:	bf00      	nop
 8018bb0:	4618      	mov	r0, r3
 8018bb2:	370c      	adds	r7, #12
 8018bb4:	46bd      	mov	sp, r7
 8018bb6:	bd90      	pop	{r4, r7, pc}
 8018bb8:	20014d28 	.word	0x20014d28

08018bbc <SET_HA>:

bool SET_HA(char *number) {
 8018bbc:	b590      	push	{r4, r7, lr}
 8018bbe:	b083      	sub	sp, #12
 8018bc0:	af00      	add	r7, sp, #0
 8018bc2:	6078      	str	r0, [r7, #4]
	if (Rconfig.HA != NULL)
 8018bc4:	4b0b      	ldr	r3, [pc, #44]	@ (8018bf4 <SET_HA+0x38>)
 8018bc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018bc8:	2b00      	cmp	r3, #0
 8018bca:	d00b      	beq.n	8018be4 <SET_HA+0x28>
		clearBuffer(Rconfig.HA, strlen(Rconfig.HA));
 8018bcc:	4b09      	ldr	r3, [pc, #36]	@ (8018bf4 <SET_HA+0x38>)
 8018bce:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 8018bd0:	4b08      	ldr	r3, [pc, #32]	@ (8018bf4 <SET_HA+0x38>)
 8018bd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018bd4:	4618      	mov	r0, r3
 8018bd6:	f7e7 fb65 	bl	80002a4 <strlen>
 8018bda:	4603      	mov	r3, r0
 8018bdc:	4619      	mov	r1, r3
 8018bde:	4620      	mov	r0, r4
 8018be0:	f7e8 ff72 	bl	8001ac8 <clearBuffer>
	Rconfig.HA = number;
 8018be4:	4a03      	ldr	r2, [pc, #12]	@ (8018bf4 <SET_HA+0x38>)
 8018be6:	687b      	ldr	r3, [r7, #4]
 8018be8:	63d3      	str	r3, [r2, #60]	@ 0x3c

}
 8018bea:	bf00      	nop
 8018bec:	4618      	mov	r0, r3
 8018bee:	370c      	adds	r7, #12
 8018bf0:	46bd      	mov	sp, r7
 8018bf2:	bd90      	pop	{r4, r7, pc}
 8018bf4:	20014d28 	.word	0x20014d28

08018bf8 <SET_HB>:

bool SET_HB(char *number) {
 8018bf8:	b590      	push	{r4, r7, lr}
 8018bfa:	b083      	sub	sp, #12
 8018bfc:	af00      	add	r7, sp, #0
 8018bfe:	6078      	str	r0, [r7, #4]
	if (Rconfig.HB != NULL)
 8018c00:	4b0b      	ldr	r3, [pc, #44]	@ (8018c30 <SET_HB+0x38>)
 8018c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8018c04:	2b00      	cmp	r3, #0
 8018c06:	d00b      	beq.n	8018c20 <SET_HB+0x28>
		clearBuffer(Rconfig.HB, strlen(Rconfig.HB));
 8018c08:	4b09      	ldr	r3, [pc, #36]	@ (8018c30 <SET_HB+0x38>)
 8018c0a:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 8018c0c:	4b08      	ldr	r3, [pc, #32]	@ (8018c30 <SET_HB+0x38>)
 8018c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8018c10:	4618      	mov	r0, r3
 8018c12:	f7e7 fb47 	bl	80002a4 <strlen>
 8018c16:	4603      	mov	r3, r0
 8018c18:	4619      	mov	r1, r3
 8018c1a:	4620      	mov	r0, r4
 8018c1c:	f7e8 ff54 	bl	8001ac8 <clearBuffer>
	Rconfig.HB = number;
 8018c20:	4a03      	ldr	r2, [pc, #12]	@ (8018c30 <SET_HB+0x38>)
 8018c22:	687b      	ldr	r3, [r7, #4]
 8018c24:	6413      	str	r3, [r2, #64]	@ 0x40

}
 8018c26:	bf00      	nop
 8018c28:	4618      	mov	r0, r3
 8018c2a:	370c      	adds	r7, #12
 8018c2c:	46bd      	mov	sp, r7
 8018c2e:	bd90      	pop	{r4, r7, pc}
 8018c30:	20014d28 	.word	0x20014d28

08018c34 <SET_HC>:

bool SET_HC(char *number) {
 8018c34:	b590      	push	{r4, r7, lr}
 8018c36:	b083      	sub	sp, #12
 8018c38:	af00      	add	r7, sp, #0
 8018c3a:	6078      	str	r0, [r7, #4]
	if (Rconfig.HC != NULL)
 8018c3c:	4b0b      	ldr	r3, [pc, #44]	@ (8018c6c <SET_HC+0x38>)
 8018c3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018c40:	2b00      	cmp	r3, #0
 8018c42:	d00b      	beq.n	8018c5c <SET_HC+0x28>
		clearBuffer(Rconfig.HC, strlen(Rconfig.HC));
 8018c44:	4b09      	ldr	r3, [pc, #36]	@ (8018c6c <SET_HC+0x38>)
 8018c46:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 8018c48:	4b08      	ldr	r3, [pc, #32]	@ (8018c6c <SET_HC+0x38>)
 8018c4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018c4c:	4618      	mov	r0, r3
 8018c4e:	f7e7 fb29 	bl	80002a4 <strlen>
 8018c52:	4603      	mov	r3, r0
 8018c54:	4619      	mov	r1, r3
 8018c56:	4620      	mov	r0, r4
 8018c58:	f7e8 ff36 	bl	8001ac8 <clearBuffer>
	Rconfig.HC = number;
 8018c5c:	4a03      	ldr	r2, [pc, #12]	@ (8018c6c <SET_HC+0x38>)
 8018c5e:	687b      	ldr	r3, [r7, #4]
 8018c60:	6453      	str	r3, [r2, #68]	@ 0x44

}
 8018c62:	bf00      	nop
 8018c64:	4618      	mov	r0, r3
 8018c66:	370c      	adds	r7, #12
 8018c68:	46bd      	mov	sp, r7
 8018c6a:	bd90      	pop	{r4, r7, pc}
 8018c6c:	20014d28 	.word	0x20014d28

08018c70 <SET_ACCOFFSET>:

bool SET_ACCOFFSET(char *number) {
 8018c70:	b590      	push	{r4, r7, lr}
 8018c72:	b083      	sub	sp, #12
 8018c74:	af00      	add	r7, sp, #0
 8018c76:	6078      	str	r0, [r7, #4]
	if (Rconfig.ACCOFFSET != NULL)
 8018c78:	4b0b      	ldr	r3, [pc, #44]	@ (8018ca8 <SET_ACCOFFSET+0x38>)
 8018c7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8018c7c:	2b00      	cmp	r3, #0
 8018c7e:	d00b      	beq.n	8018c98 <SET_ACCOFFSET+0x28>
		clearBuffer(Rconfig.ACCOFFSET, strlen(Rconfig.ACCOFFSET));
 8018c80:	4b09      	ldr	r3, [pc, #36]	@ (8018ca8 <SET_ACCOFFSET+0x38>)
 8018c82:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
 8018c84:	4b08      	ldr	r3, [pc, #32]	@ (8018ca8 <SET_ACCOFFSET+0x38>)
 8018c86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8018c88:	4618      	mov	r0, r3
 8018c8a:	f7e7 fb0b 	bl	80002a4 <strlen>
 8018c8e:	4603      	mov	r3, r0
 8018c90:	4619      	mov	r1, r3
 8018c92:	4620      	mov	r0, r4
 8018c94:	f7e8 ff18 	bl	8001ac8 <clearBuffer>
	Rconfig.ACCOFFSET = number;
 8018c98:	4a03      	ldr	r2, [pc, #12]	@ (8018ca8 <SET_ACCOFFSET+0x38>)
 8018c9a:	687b      	ldr	r3, [r7, #4]
 8018c9c:	6493      	str	r3, [r2, #72]	@ 0x48

}
 8018c9e:	bf00      	nop
 8018ca0:	4618      	mov	r0, r3
 8018ca2:	370c      	adds	r7, #12
 8018ca4:	46bd      	mov	sp, r7
 8018ca6:	bd90      	pop	{r4, r7, pc}
 8018ca8:	20014d28 	.word	0x20014d28

08018cac <SET_USER>:

bool SET_USER(char *idVal) {
 8018cac:	b590      	push	{r4, r7, lr}
 8018cae:	b083      	sub	sp, #12
 8018cb0:	af00      	add	r7, sp, #0
 8018cb2:	6078      	str	r0, [r7, #4]
	if (Rconfig.USER != NULL)
 8018cb4:	4b0b      	ldr	r3, [pc, #44]	@ (8018ce4 <SET_USER+0x38>)
 8018cb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8018cb8:	2b00      	cmp	r3, #0
 8018cba:	d00b      	beq.n	8018cd4 <SET_USER+0x28>
		clearBuffer(Rconfig.USER, strlen(Rconfig.USER));
 8018cbc:	4b09      	ldr	r3, [pc, #36]	@ (8018ce4 <SET_USER+0x38>)
 8018cbe:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8018cc0:	4b08      	ldr	r3, [pc, #32]	@ (8018ce4 <SET_USER+0x38>)
 8018cc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8018cc4:	4618      	mov	r0, r3
 8018cc6:	f7e7 faed 	bl	80002a4 <strlen>
 8018cca:	4603      	mov	r3, r0
 8018ccc:	4619      	mov	r1, r3
 8018cce:	4620      	mov	r0, r4
 8018cd0:	f7e8 fefa 	bl	8001ac8 <clearBuffer>
	Rconfig.USER = idVal;
 8018cd4:	4a03      	ldr	r2, [pc, #12]	@ (8018ce4 <SET_USER+0x38>)
 8018cd6:	687b      	ldr	r3, [r7, #4]
 8018cd8:	64d3      	str	r3, [r2, #76]	@ 0x4c

}
 8018cda:	bf00      	nop
 8018cdc:	4618      	mov	r0, r3
 8018cde:	370c      	adds	r7, #12
 8018ce0:	46bd      	mov	sp, r7
 8018ce2:	bd90      	pop	{r4, r7, pc}
 8018ce4:	20014d28 	.word	0x20014d28

08018ce8 <SET_PASSWORD>:

bool SET_PASSWORD(char *passwordVal) {
 8018ce8:	b590      	push	{r4, r7, lr}
 8018cea:	b083      	sub	sp, #12
 8018cec:	af00      	add	r7, sp, #0
 8018cee:	6078      	str	r0, [r7, #4]
	if (Rconfig.PSWD != NULL)
 8018cf0:	4b0b      	ldr	r3, [pc, #44]	@ (8018d20 <SET_PASSWORD+0x38>)
 8018cf2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018cf4:	2b00      	cmp	r3, #0
 8018cf6:	d00b      	beq.n	8018d10 <SET_PASSWORD+0x28>
		clearBuffer(Rconfig.PSWD, strlen(Rconfig.PSWD));
 8018cf8:	4b09      	ldr	r3, [pc, #36]	@ (8018d20 <SET_PASSWORD+0x38>)
 8018cfa:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
 8018cfc:	4b08      	ldr	r3, [pc, #32]	@ (8018d20 <SET_PASSWORD+0x38>)
 8018cfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018d00:	4618      	mov	r0, r3
 8018d02:	f7e7 facf 	bl	80002a4 <strlen>
 8018d06:	4603      	mov	r3, r0
 8018d08:	4619      	mov	r1, r3
 8018d0a:	4620      	mov	r0, r4
 8018d0c:	f7e8 fedc 	bl	8001ac8 <clearBuffer>
	Rconfig.PSWD = passwordVal;
 8018d10:	4a03      	ldr	r2, [pc, #12]	@ (8018d20 <SET_PASSWORD+0x38>)
 8018d12:	687b      	ldr	r3, [r7, #4]
 8018d14:	6513      	str	r3, [r2, #80]	@ 0x50

}
 8018d16:	bf00      	nop
 8018d18:	4618      	mov	r0, r3
 8018d1a:	370c      	adds	r7, #12
 8018d1c:	46bd      	mov	sp, r7
 8018d1e:	bd90      	pop	{r4, r7, pc}
 8018d20:	20014d28 	.word	0x20014d28

08018d24 <SET_VIN>:

bool SET_VIN(char *number) {
 8018d24:	b590      	push	{r4, r7, lr}
 8018d26:	b083      	sub	sp, #12
 8018d28:	af00      	add	r7, sp, #0
 8018d2a:	6078      	str	r0, [r7, #4]
	if (Rconfig.VIN != NULL)
 8018d2c:	4b0b      	ldr	r3, [pc, #44]	@ (8018d5c <SET_VIN+0x38>)
 8018d2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018d30:	2b00      	cmp	r3, #0
 8018d32:	d00b      	beq.n	8018d4c <SET_VIN+0x28>
		clearBuffer(Rconfig.VIN, strlen(Rconfig.VIN));
 8018d34:	4b09      	ldr	r3, [pc, #36]	@ (8018d5c <SET_VIN+0x38>)
 8018d36:	6d5c      	ldr	r4, [r3, #84]	@ 0x54
 8018d38:	4b08      	ldr	r3, [pc, #32]	@ (8018d5c <SET_VIN+0x38>)
 8018d3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018d3c:	4618      	mov	r0, r3
 8018d3e:	f7e7 fab1 	bl	80002a4 <strlen>
 8018d42:	4603      	mov	r3, r0
 8018d44:	4619      	mov	r1, r3
 8018d46:	4620      	mov	r0, r4
 8018d48:	f7e8 febe 	bl	8001ac8 <clearBuffer>
	Rconfig.VIN = number;
 8018d4c:	4a03      	ldr	r2, [pc, #12]	@ (8018d5c <SET_VIN+0x38>)
 8018d4e:	687b      	ldr	r3, [r7, #4]
 8018d50:	6553      	str	r3, [r2, #84]	@ 0x54

}
 8018d52:	bf00      	nop
 8018d54:	4618      	mov	r0, r3
 8018d56:	370c      	adds	r7, #12
 8018d58:	46bd      	mov	sp, r7
 8018d5a:	bd90      	pop	{r4, r7, pc}
 8018d5c:	20014d28 	.word	0x20014d28

08018d60 <SET_LAT_LON>:
bool SET_LAT_LON(char *lat,char *lon) {
 8018d60:	b590      	push	{r4, r7, lr}
 8018d62:	b083      	sub	sp, #12
 8018d64:	af00      	add	r7, sp, #0
 8018d66:	6078      	str	r0, [r7, #4]
 8018d68:	6039      	str	r1, [r7, #0]
	if (Rconfig.LAT != NULL)
 8018d6a:	4b17      	ldr	r3, [pc, #92]	@ (8018dc8 <SET_LAT_LON+0x68>)
 8018d6c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8018d6e:	2b00      	cmp	r3, #0
 8018d70:	d00b      	beq.n	8018d8a <SET_LAT_LON+0x2a>
		clearBuffer(Rconfig.LAT, strlen(Rconfig.LAT));
 8018d72:	4b15      	ldr	r3, [pc, #84]	@ (8018dc8 <SET_LAT_LON+0x68>)
 8018d74:	6fdc      	ldr	r4, [r3, #124]	@ 0x7c
 8018d76:	4b14      	ldr	r3, [pc, #80]	@ (8018dc8 <SET_LAT_LON+0x68>)
 8018d78:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8018d7a:	4618      	mov	r0, r3
 8018d7c:	f7e7 fa92 	bl	80002a4 <strlen>
 8018d80:	4603      	mov	r3, r0
 8018d82:	4619      	mov	r1, r3
 8018d84:	4620      	mov	r0, r4
 8018d86:	f7e8 fe9f 	bl	8001ac8 <clearBuffer>
	Rconfig.LAT = lat;
 8018d8a:	4a0f      	ldr	r2, [pc, #60]	@ (8018dc8 <SET_LAT_LON+0x68>)
 8018d8c:	687b      	ldr	r3, [r7, #4]
 8018d8e:	67d3      	str	r3, [r2, #124]	@ 0x7c
	if (Rconfig.LON != NULL)
 8018d90:	4b0d      	ldr	r3, [pc, #52]	@ (8018dc8 <SET_LAT_LON+0x68>)
 8018d92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018d96:	2b00      	cmp	r3, #0
 8018d98:	d00d      	beq.n	8018db6 <SET_LAT_LON+0x56>
		clearBuffer(Rconfig.LON, strlen(Rconfig.LON));
 8018d9a:	4b0b      	ldr	r3, [pc, #44]	@ (8018dc8 <SET_LAT_LON+0x68>)
 8018d9c:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 8018da0:	4b09      	ldr	r3, [pc, #36]	@ (8018dc8 <SET_LAT_LON+0x68>)
 8018da2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018da6:	4618      	mov	r0, r3
 8018da8:	f7e7 fa7c 	bl	80002a4 <strlen>
 8018dac:	4603      	mov	r3, r0
 8018dae:	4619      	mov	r1, r3
 8018db0:	4620      	mov	r0, r4
 8018db2:	f7e8 fe89 	bl	8001ac8 <clearBuffer>
	Rconfig.LON = lon;
 8018db6:	4a04      	ldr	r2, [pc, #16]	@ (8018dc8 <SET_LAT_LON+0x68>)
 8018db8:	683b      	ldr	r3, [r7, #0]
 8018dba:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
}
 8018dbe:	bf00      	nop
 8018dc0:	4618      	mov	r0, r3
 8018dc2:	370c      	adds	r7, #12
 8018dc4:	46bd      	mov	sp, r7
 8018dc6:	bd90      	pop	{r4, r7, pc}
 8018dc8:	20014d28 	.word	0x20014d28

08018dcc <SET_PHNUM>:
bool SET_PHNUM(char *PHnum1) {
 8018dcc:	b590      	push	{r4, r7, lr}
 8018dce:	b083      	sub	sp, #12
 8018dd0:	af00      	add	r7, sp, #0
 8018dd2:	6078      	str	r0, [r7, #4]
	if (Rconfig.PHNUM != NULL)
 8018dd4:	4b0d      	ldr	r3, [pc, #52]	@ (8018e0c <SET_PHNUM+0x40>)
 8018dd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8018dda:	2b00      	cmp	r3, #0
 8018ddc:	d00d      	beq.n	8018dfa <SET_PHNUM+0x2e>
		clearBuffer(Rconfig.PHNUM, strlen(Rconfig.PHNUM));
 8018dde:	4b0b      	ldr	r3, [pc, #44]	@ (8018e0c <SET_PHNUM+0x40>)
 8018de0:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8018de4:	4b09      	ldr	r3, [pc, #36]	@ (8018e0c <SET_PHNUM+0x40>)
 8018de6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8018dea:	4618      	mov	r0, r3
 8018dec:	f7e7 fa5a 	bl	80002a4 <strlen>
 8018df0:	4603      	mov	r3, r0
 8018df2:	4619      	mov	r1, r3
 8018df4:	4620      	mov	r0, r4
 8018df6:	f7e8 fe67 	bl	8001ac8 <clearBuffer>
	Rconfig.PHNUM = PHnum1;
 8018dfa:	4a04      	ldr	r2, [pc, #16]	@ (8018e0c <SET_PHNUM+0x40>)
 8018dfc:	687b      	ldr	r3, [r7, #4]
 8018dfe:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
}
 8018e02:	bf00      	nop
 8018e04:	4618      	mov	r0, r3
 8018e06:	370c      	adds	r7, #12
 8018e08:	46bd      	mov	sp, r7
 8018e0a:	bd90      	pop	{r4, r7, pc}
 8018e0c:	20014d28 	.word	0x20014d28

08018e10 <SET_RESET>:
	if (Rconfig.Rtime != NULL)
		clearBuffer(Rconfig.Rtime, strlen(Rconfig.Rtime));
	Rconfig.Rtime = RTime1;
}

void SET_RESET() {
 8018e10:	b580      	push	{r7, lr}
 8018e12:	af00      	add	r7, sp, #0
	FeedAllConfig();
 8018e14:	f000 fa02 	bl	801921c <FeedAllConfig>
	HAL_NVIC_SystemReset();
 8018e18:	f7ee fa8b 	bl	8007332 <HAL_NVIC_SystemReset>
}
 8018e1c:	bf00      	nop
 8018e1e:	bd80      	pop	{r7, pc}

08018e20 <UPDATE_COMKeys>:
void UPDATE_COMKeys() {
 8018e20:	b598      	push	{r3, r4, r7, lr}
 8018e22:	af00      	add	r7, sp, #0
	if (Rconfig.CKEY1 != NULL)
 8018e24:	4b5c      	ldr	r3, [pc, #368]	@ (8018f98 <UPDATE_COMKeys+0x178>)
 8018e26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8018e28:	2b00      	cmp	r3, #0
 8018e2a:	d00b      	beq.n	8018e44 <UPDATE_COMKeys+0x24>
		clearBuffer(Rconfig.CKEY1, strlen(Rconfig.CKEY1));
 8018e2c:	4b5a      	ldr	r3, [pc, #360]	@ (8018f98 <UPDATE_COMKeys+0x178>)
 8018e2e:	6ddc      	ldr	r4, [r3, #92]	@ 0x5c
 8018e30:	4b59      	ldr	r3, [pc, #356]	@ (8018f98 <UPDATE_COMKeys+0x178>)
 8018e32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8018e34:	4618      	mov	r0, r3
 8018e36:	f7e7 fa35 	bl	80002a4 <strlen>
 8018e3a:	4603      	mov	r3, r0
 8018e3c:	4619      	mov	r1, r3
 8018e3e:	4620      	mov	r0, r4
 8018e40:	f7e8 fe42 	bl	8001ac8 <clearBuffer>
	if (Rconfig.CKEY2 != NULL)
 8018e44:	4b54      	ldr	r3, [pc, #336]	@ (8018f98 <UPDATE_COMKeys+0x178>)
 8018e46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018e48:	2b00      	cmp	r3, #0
 8018e4a:	d00b      	beq.n	8018e64 <UPDATE_COMKeys+0x44>
		clearBuffer(Rconfig.CKEY2, strlen(Rconfig.CKEY2));
 8018e4c:	4b52      	ldr	r3, [pc, #328]	@ (8018f98 <UPDATE_COMKeys+0x178>)
 8018e4e:	6e1c      	ldr	r4, [r3, #96]	@ 0x60
 8018e50:	4b51      	ldr	r3, [pc, #324]	@ (8018f98 <UPDATE_COMKeys+0x178>)
 8018e52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018e54:	4618      	mov	r0, r3
 8018e56:	f7e7 fa25 	bl	80002a4 <strlen>
 8018e5a:	4603      	mov	r3, r0
 8018e5c:	4619      	mov	r1, r3
 8018e5e:	4620      	mov	r0, r4
 8018e60:	f7e8 fe32 	bl	8001ac8 <clearBuffer>

	if (Rconfig.CKEY3 != NULL)
 8018e64:	4b4c      	ldr	r3, [pc, #304]	@ (8018f98 <UPDATE_COMKeys+0x178>)
 8018e66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8018e68:	2b00      	cmp	r3, #0
 8018e6a:	d00b      	beq.n	8018e84 <UPDATE_COMKeys+0x64>
		clearBuffer(Rconfig.CKEY3, strlen(Rconfig.CKEY3));
 8018e6c:	4b4a      	ldr	r3, [pc, #296]	@ (8018f98 <UPDATE_COMKeys+0x178>)
 8018e6e:	6e5c      	ldr	r4, [r3, #100]	@ 0x64
 8018e70:	4b49      	ldr	r3, [pc, #292]	@ (8018f98 <UPDATE_COMKeys+0x178>)
 8018e72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8018e74:	4618      	mov	r0, r3
 8018e76:	f7e7 fa15 	bl	80002a4 <strlen>
 8018e7a:	4603      	mov	r3, r0
 8018e7c:	4619      	mov	r1, r3
 8018e7e:	4620      	mov	r0, r4
 8018e80:	f7e8 fe22 	bl	8001ac8 <clearBuffer>

	if (Rconfig.CKEY4 != NULL)
 8018e84:	4b44      	ldr	r3, [pc, #272]	@ (8018f98 <UPDATE_COMKeys+0x178>)
 8018e86:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8018e88:	2b00      	cmp	r3, #0
 8018e8a:	d00b      	beq.n	8018ea4 <UPDATE_COMKeys+0x84>
		clearBuffer(Rconfig.CKEY4, strlen(Rconfig.CKEY4));
 8018e8c:	4b42      	ldr	r3, [pc, #264]	@ (8018f98 <UPDATE_COMKeys+0x178>)
 8018e8e:	6e9c      	ldr	r4, [r3, #104]	@ 0x68
 8018e90:	4b41      	ldr	r3, [pc, #260]	@ (8018f98 <UPDATE_COMKeys+0x178>)
 8018e92:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8018e94:	4618      	mov	r0, r3
 8018e96:	f7e7 fa05 	bl	80002a4 <strlen>
 8018e9a:	4603      	mov	r3, r0
 8018e9c:	4619      	mov	r1, r3
 8018e9e:	4620      	mov	r0, r4
 8018ea0:	f7e8 fe12 	bl	8001ac8 <clearBuffer>

	if (Rconfig.CKEY5 != NULL)
 8018ea4:	4b3c      	ldr	r3, [pc, #240]	@ (8018f98 <UPDATE_COMKeys+0x178>)
 8018ea6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018ea8:	2b00      	cmp	r3, #0
 8018eaa:	d00b      	beq.n	8018ec4 <UPDATE_COMKeys+0xa4>
		clearBuffer(Rconfig.CKEY5, strlen(Rconfig.CKEY5));
 8018eac:	4b3a      	ldr	r3, [pc, #232]	@ (8018f98 <UPDATE_COMKeys+0x178>)
 8018eae:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
 8018eb0:	4b39      	ldr	r3, [pc, #228]	@ (8018f98 <UPDATE_COMKeys+0x178>)
 8018eb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018eb4:	4618      	mov	r0, r3
 8018eb6:	f7e7 f9f5 	bl	80002a4 <strlen>
 8018eba:	4603      	mov	r3, r0
 8018ebc:	4619      	mov	r1, r3
 8018ebe:	4620      	mov	r0, r4
 8018ec0:	f7e8 fe02 	bl	8001ac8 <clearBuffer>

	if (Rconfig.CKEY6 != NULL)
 8018ec4:	4b34      	ldr	r3, [pc, #208]	@ (8018f98 <UPDATE_COMKeys+0x178>)
 8018ec6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018ec8:	2b00      	cmp	r3, #0
 8018eca:	d00b      	beq.n	8018ee4 <UPDATE_COMKeys+0xc4>
		clearBuffer(Rconfig.CKEY6, strlen(Rconfig.CKEY6));
 8018ecc:	4b32      	ldr	r3, [pc, #200]	@ (8018f98 <UPDATE_COMKeys+0x178>)
 8018ece:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
 8018ed0:	4b31      	ldr	r3, [pc, #196]	@ (8018f98 <UPDATE_COMKeys+0x178>)
 8018ed2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018ed4:	4618      	mov	r0, r3
 8018ed6:	f7e7 f9e5 	bl	80002a4 <strlen>
 8018eda:	4603      	mov	r3, r0
 8018edc:	4619      	mov	r1, r3
 8018ede:	4620      	mov	r0, r4
 8018ee0:	f7e8 fdf2 	bl	8001ac8 <clearBuffer>

	if (Rconfig.CKEY7 != NULL)
 8018ee4:	4b2c      	ldr	r3, [pc, #176]	@ (8018f98 <UPDATE_COMKeys+0x178>)
 8018ee6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018ee8:	2b00      	cmp	r3, #0
 8018eea:	d00b      	beq.n	8018f04 <UPDATE_COMKeys+0xe4>
		clearBuffer(Rconfig.CKEY7, strlen(Rconfig.CKEY7));
 8018eec:	4b2a      	ldr	r3, [pc, #168]	@ (8018f98 <UPDATE_COMKeys+0x178>)
 8018eee:	6f5c      	ldr	r4, [r3, #116]	@ 0x74
 8018ef0:	4b29      	ldr	r3, [pc, #164]	@ (8018f98 <UPDATE_COMKeys+0x178>)
 8018ef2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018ef4:	4618      	mov	r0, r3
 8018ef6:	f7e7 f9d5 	bl	80002a4 <strlen>
 8018efa:	4603      	mov	r3, r0
 8018efc:	4619      	mov	r1, r3
 8018efe:	4620      	mov	r0, r4
 8018f00:	f7e8 fde2 	bl	8001ac8 <clearBuffer>
	if (Rconfig.CKEY8 != NULL)
 8018f04:	4b24      	ldr	r3, [pc, #144]	@ (8018f98 <UPDATE_COMKeys+0x178>)
 8018f06:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8018f08:	2b00      	cmp	r3, #0
 8018f0a:	d00b      	beq.n	8018f24 <UPDATE_COMKeys+0x104>
		clearBuffer(Rconfig.CKEY8, strlen(Rconfig.CKEY8));
 8018f0c:	4b22      	ldr	r3, [pc, #136]	@ (8018f98 <UPDATE_COMKeys+0x178>)
 8018f0e:	6f9c      	ldr	r4, [r3, #120]	@ 0x78
 8018f10:	4b21      	ldr	r3, [pc, #132]	@ (8018f98 <UPDATE_COMKeys+0x178>)
 8018f12:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8018f14:	4618      	mov	r0, r3
 8018f16:	f7e7 f9c5 	bl	80002a4 <strlen>
 8018f1a:	4603      	mov	r3, r0
 8018f1c:	4619      	mov	r1, r3
 8018f1e:	4620      	mov	r0, r4
 8018f20:	f7e8 fdd2 	bl	8001ac8 <clearBuffer>

	// Ensure Rconfig.CKEY1 to Rconfig.CKEY8 are of type char* and ComKeys is an array of pointers to char.
	Rconfig.CKEY1 = strdup(ComKeys[0]);
 8018f24:	481d      	ldr	r0, [pc, #116]	@ (8018f9c <UPDATE_COMKeys+0x17c>)
 8018f26:	f005 ff97 	bl	801ee58 <strdup>
 8018f2a:	4603      	mov	r3, r0
 8018f2c:	461a      	mov	r2, r3
 8018f2e:	4b1a      	ldr	r3, [pc, #104]	@ (8018f98 <UPDATE_COMKeys+0x178>)
 8018f30:	65da      	str	r2, [r3, #92]	@ 0x5c
	Rconfig.CKEY2 = strdup(ComKeys[1]);
 8018f32:	481b      	ldr	r0, [pc, #108]	@ (8018fa0 <UPDATE_COMKeys+0x180>)
 8018f34:	f005 ff90 	bl	801ee58 <strdup>
 8018f38:	4603      	mov	r3, r0
 8018f3a:	461a      	mov	r2, r3
 8018f3c:	4b16      	ldr	r3, [pc, #88]	@ (8018f98 <UPDATE_COMKeys+0x178>)
 8018f3e:	661a      	str	r2, [r3, #96]	@ 0x60
	Rconfig.CKEY3 = strdup(ComKeys[2]);
 8018f40:	4818      	ldr	r0, [pc, #96]	@ (8018fa4 <UPDATE_COMKeys+0x184>)
 8018f42:	f005 ff89 	bl	801ee58 <strdup>
 8018f46:	4603      	mov	r3, r0
 8018f48:	461a      	mov	r2, r3
 8018f4a:	4b13      	ldr	r3, [pc, #76]	@ (8018f98 <UPDATE_COMKeys+0x178>)
 8018f4c:	665a      	str	r2, [r3, #100]	@ 0x64
	Rconfig.CKEY4 = strdup(ComKeys[3]);
 8018f4e:	4816      	ldr	r0, [pc, #88]	@ (8018fa8 <UPDATE_COMKeys+0x188>)
 8018f50:	f005 ff82 	bl	801ee58 <strdup>
 8018f54:	4603      	mov	r3, r0
 8018f56:	461a      	mov	r2, r3
 8018f58:	4b0f      	ldr	r3, [pc, #60]	@ (8018f98 <UPDATE_COMKeys+0x178>)
 8018f5a:	669a      	str	r2, [r3, #104]	@ 0x68
	Rconfig.CKEY5 = strdup(ComKeys[4]);
 8018f5c:	4813      	ldr	r0, [pc, #76]	@ (8018fac <UPDATE_COMKeys+0x18c>)
 8018f5e:	f005 ff7b 	bl	801ee58 <strdup>
 8018f62:	4603      	mov	r3, r0
 8018f64:	461a      	mov	r2, r3
 8018f66:	4b0c      	ldr	r3, [pc, #48]	@ (8018f98 <UPDATE_COMKeys+0x178>)
 8018f68:	66da      	str	r2, [r3, #108]	@ 0x6c
	Rconfig.CKEY6 = strdup(ComKeys[5]);
 8018f6a:	4811      	ldr	r0, [pc, #68]	@ (8018fb0 <UPDATE_COMKeys+0x190>)
 8018f6c:	f005 ff74 	bl	801ee58 <strdup>
 8018f70:	4603      	mov	r3, r0
 8018f72:	461a      	mov	r2, r3
 8018f74:	4b08      	ldr	r3, [pc, #32]	@ (8018f98 <UPDATE_COMKeys+0x178>)
 8018f76:	671a      	str	r2, [r3, #112]	@ 0x70
	Rconfig.CKEY7 = strdup(ComKeys[6]);
 8018f78:	480e      	ldr	r0, [pc, #56]	@ (8018fb4 <UPDATE_COMKeys+0x194>)
 8018f7a:	f005 ff6d 	bl	801ee58 <strdup>
 8018f7e:	4603      	mov	r3, r0
 8018f80:	461a      	mov	r2, r3
 8018f82:	4b05      	ldr	r3, [pc, #20]	@ (8018f98 <UPDATE_COMKeys+0x178>)
 8018f84:	675a      	str	r2, [r3, #116]	@ 0x74
	Rconfig.CKEY8 = strdup(ComKeys[7]);
 8018f86:	480c      	ldr	r0, [pc, #48]	@ (8018fb8 <UPDATE_COMKeys+0x198>)
 8018f88:	f005 ff66 	bl	801ee58 <strdup>
 8018f8c:	4603      	mov	r3, r0
 8018f8e:	461a      	mov	r2, r3
 8018f90:	4b01      	ldr	r3, [pc, #4]	@ (8018f98 <UPDATE_COMKeys+0x178>)
 8018f92:	679a      	str	r2, [r3, #120]	@ 0x78
}
 8018f94:	bf00      	nop
 8018f96:	bd98      	pop	{r3, r4, r7, pc}
 8018f98:	20014d28 	.word	0x20014d28
 8018f9c:	20014b54 	.word	0x20014b54
 8018fa0:	20014b75 	.word	0x20014b75
 8018fa4:	20014b96 	.word	0x20014b96
 8018fa8:	20014bb7 	.word	0x20014bb7
 8018fac:	20014bd8 	.word	0x20014bd8
 8018fb0:	20014bf9 	.word	0x20014bf9
 8018fb4:	20014c1a 	.word	0x20014c1a
 8018fb8:	20014c3b 	.word	0x20014c3b

08018fbc <SET_FOTA_SIZE>:

bool SET_FOTA_SIZE(char *SZE) {
 8018fbc:	b580      	push	{r7, lr}
 8018fbe:	b084      	sub	sp, #16
 8018fc0:	af00      	add	r7, sp, #0
 8018fc2:	6078      	str	r0, [r7, #4]
	int size = atoi(SZE);
 8018fc4:	6878      	ldr	r0, [r7, #4]
 8018fc6:	f003 feae 	bl	801cd26 <atoi>
 8018fca:	60f8      	str	r0, [r7, #12]
	TOTAL_PACKETS = ((size * PACKET_SIZE) / PACKET_SIZE);
 8018fcc:	4a16      	ldr	r2, [pc, #88]	@ (8019028 <SET_FOTA_SIZE+0x6c>)
 8018fce:	68fb      	ldr	r3, [r7, #12]
 8018fd0:	6013      	str	r3, [r2, #0]
	if (size < 128) {
 8018fd2:	68fb      	ldr	r3, [r7, #12]
 8018fd4:	2b7f      	cmp	r3, #127	@ 0x7f
 8018fd6:	dc0a      	bgt.n	8018fee <SET_FOTA_SIZE+0x32>
		L1 = L1_v1;
 8018fd8:	4b14      	ldr	r3, [pc, #80]	@ (801902c <SET_FOTA_SIZE+0x70>)
 8018fda:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8018fde:	601a      	str	r2, [r3, #0]
		L2 = L2_v2;
 8018fe0:	4b13      	ldr	r3, [pc, #76]	@ (8019030 <SET_FOTA_SIZE+0x74>)
 8018fe2:	4a14      	ldr	r2, [pc, #80]	@ (8019034 <SET_FOTA_SIZE+0x78>)
 8018fe4:	601a      	str	r2, [r3, #0]
		L3 = L3_v2;
 8018fe6:	4b14      	ldr	r3, [pc, #80]	@ (8019038 <SET_FOTA_SIZE+0x7c>)
 8018fe8:	4a14      	ldr	r2, [pc, #80]	@ (801903c <SET_FOTA_SIZE+0x80>)
 8018fea:	601a      	str	r2, [r3, #0]
 8018fec:	e016      	b.n	801901c <SET_FOTA_SIZE+0x60>

	} else if (size > 128 && size < 256) {
 8018fee:	68fb      	ldr	r3, [r7, #12]
 8018ff0:	2b80      	cmp	r3, #128	@ 0x80
 8018ff2:	dd0d      	ble.n	8019010 <SET_FOTA_SIZE+0x54>
 8018ff4:	68fb      	ldr	r3, [r7, #12]
 8018ff6:	2bff      	cmp	r3, #255	@ 0xff
 8018ff8:	dc0a      	bgt.n	8019010 <SET_FOTA_SIZE+0x54>
		L1 = L1_v1;
 8018ffa:	4b0c      	ldr	r3, [pc, #48]	@ (801902c <SET_FOTA_SIZE+0x70>)
 8018ffc:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8019000:	601a      	str	r2, [r3, #0]
		L2 = L2_v2;
 8019002:	4b0b      	ldr	r3, [pc, #44]	@ (8019030 <SET_FOTA_SIZE+0x74>)
 8019004:	4a0b      	ldr	r2, [pc, #44]	@ (8019034 <SET_FOTA_SIZE+0x78>)
 8019006:	601a      	str	r2, [r3, #0]
		L3 = L3_v2;
 8019008:	4b0b      	ldr	r3, [pc, #44]	@ (8019038 <SET_FOTA_SIZE+0x7c>)
 801900a:	4a0c      	ldr	r2, [pc, #48]	@ (801903c <SET_FOTA_SIZE+0x80>)
 801900c:	601a      	str	r2, [r3, #0]
 801900e:	e005      	b.n	801901c <SET_FOTA_SIZE+0x60>

	} else {
		printc(MinDelay, "File size is large");
 8019010:	490b      	ldr	r1, [pc, #44]	@ (8019040 <SET_FOTA_SIZE+0x84>)
 8019012:	200a      	movs	r0, #10
 8019014:	f7e8 fd00 	bl	8001a18 <printc>
		return false; // Indicate failure
 8019018:	2300      	movs	r3, #0
 801901a:	e000      	b.n	801901e <SET_FOTA_SIZE+0x62>
	}
	return true; // Indicate failure
 801901c:	2301      	movs	r3, #1
}
 801901e:	4618      	mov	r0, r3
 8019020:	3710      	adds	r7, #16
 8019022:	46bd      	mov	sp, r7
 8019024:	bd80      	pop	{r7, pc}
 8019026:	bf00      	nop
 8019028:	20014c5c 	.word	0x20014c5c
 801902c:	20000068 	.word	0x20000068
 8019030:	2000006c 	.word	0x2000006c
 8019034:	08040000 	.word	0x08040000
 8019038:	20000070 	.word	0x20000070
 801903c:	08080000 	.word	0x08080000
 8019040:	08023140 	.word	0x08023140

08019044 <SET_FOTA_UPDATE>:

bool SET_FOTA_UPDATE(char *Version) {
 8019044:	b590      	push	{r4, r7, lr}
 8019046:	b083      	sub	sp, #12
 8019048:	af00      	add	r7, sp, #0
 801904a:	6078      	str	r0, [r7, #4]
	if (Rconfig.FOTAVER != NULL)
 801904c:	4b0e      	ldr	r3, [pc, #56]	@ (8019088 <SET_FOTA_UPDATE+0x44>)
 801904e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019050:	2b00      	cmp	r3, #0
 8019052:	d00b      	beq.n	801906c <SET_FOTA_UPDATE+0x28>
		clearBuffer(Rconfig.FOTAVER, strlen(Rconfig.FOTAVER));
 8019054:	4b0c      	ldr	r3, [pc, #48]	@ (8019088 <SET_FOTA_UPDATE+0x44>)
 8019056:	6d9c      	ldr	r4, [r3, #88]	@ 0x58
 8019058:	4b0b      	ldr	r3, [pc, #44]	@ (8019088 <SET_FOTA_UPDATE+0x44>)
 801905a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801905c:	4618      	mov	r0, r3
 801905e:	f7e7 f921 	bl	80002a4 <strlen>
 8019062:	4603      	mov	r3, r0
 8019064:	4619      	mov	r1, r3
 8019066:	4620      	mov	r0, r4
 8019068:	f7e8 fd2e 	bl	8001ac8 <clearBuffer>
	Rconfig.FOTAVER = Version;
 801906c:	4a06      	ldr	r2, [pc, #24]	@ (8019088 <SET_FOTA_UPDATE+0x44>)
 801906e:	687b      	ldr	r3, [r7, #4]
 8019070:	6593      	str	r3, [r2, #88]	@ 0x58
	strcpy(updateVersion, Rconfig.FOTAVER);
 8019072:	4b05      	ldr	r3, [pc, #20]	@ (8019088 <SET_FOTA_UPDATE+0x44>)
 8019074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019076:	4619      	mov	r1, r3
 8019078:	4804      	ldr	r0, [pc, #16]	@ (801908c <SET_FOTA_UPDATE+0x48>)
 801907a:	f006 f826 	bl	801f0ca <strcpy>

}
 801907e:	bf00      	nop
 8019080:	4618      	mov	r0, r3
 8019082:	370c      	adds	r7, #12
 8019084:	46bd      	mov	sp, r7
 8019086:	bd90      	pop	{r4, r7, pc}
 8019088:	20014d28 	.word	0x20014d28
 801908c:	20013090 	.word	0x20013090

08019090 <Write_CFGFlash>:

void Write_CFGFlash(uint32_t WriteLoc, uint64_t *DATA) {
 8019090:	b580      	push	{r7, lr}
 8019092:	b084      	sub	sp, #16
 8019094:	af00      	add	r7, sp, #0
 8019096:	6078      	str	r0, [r7, #4]
 8019098:	6039      	str	r1, [r7, #0]
	uint32_t KAddr = WriteLoc;
 801909a:	687b      	ldr	r3, [r7, #4]
 801909c:	60fb      	str	r3, [r7, #12]
	HAL_FLASH_Unlock();
 801909e:	f7f2 f817 	bl	800b0d0 <HAL_FLASH_Unlock>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_QUADWORD, KAddr, DATA); // Corrected to pass address of WDT
 80190a2:	683b      	ldr	r3, [r7, #0]
 80190a4:	461a      	mov	r2, r3
 80190a6:	68f9      	ldr	r1, [r7, #12]
 80190a8:	2002      	movs	r0, #2
 80190aa:	f7f1 ff99 	bl	800afe0 <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 80190ae:	f7f2 f835 	bl	800b11c <HAL_FLASH_Lock>
}
 80190b2:	bf00      	nop
 80190b4:	3710      	adds	r7, #16
 80190b6:	46bd      	mov	sp, r7
 80190b8:	bd80      	pop	{r7, pc}
	...

080190bc <getAllConfig>:

void getAllConfig() {
 80190bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80190be:	b0b9      	sub	sp, #228	@ 0xe4
 80190c0:	af04      	add	r7, sp, #16
	clear_RConfiguration();
 80190c2:	f7fe fdad 	bl	8017c20 <clear_RConfiguration>
	char tmpConfig[200] = { };
 80190c6:	2300      	movs	r3, #0
 80190c8:	60bb      	str	r3, [r7, #8]
 80190ca:	f107 030c 	add.w	r3, r7, #12
 80190ce:	22c4      	movs	r2, #196	@ 0xc4
 80190d0:	2100      	movs	r1, #0
 80190d2:	4618      	mov	r0, r3
 80190d4:	f005 fe9c 	bl	801ee10 <memset>
	GET_MIP(tmpConfig);
 80190d8:	f107 0308 	add.w	r3, r7, #8
 80190dc:	4618      	mov	r0, r3
 80190de:	f000 fa11 	bl	8019504 <GET_MIP>
	GET_PORT1(tmpConfig);
 80190e2:	f107 0308 	add.w	r3, r7, #8
 80190e6:	4618      	mov	r0, r3
 80190e8:	f000 fa6a 	bl	80195c0 <GET_PORT1>
	GET_MUSER(tmpConfig);
 80190ec:	f107 0308 	add.w	r3, r7, #8
 80190f0:	4618      	mov	r0, r3
 80190f2:	f000 fabb 	bl	801966c <GET_MUSER>
	GET_MPASS(tmpConfig);
 80190f6:	f107 0308 	add.w	r3, r7, #8
 80190fa:	4618      	mov	r0, r3
 80190fc:	f000 fb04 	bl	8019708 <GET_MPASS>
	GET_CERT(tmpConfig);
 8019100:	f107 0308 	add.w	r3, r7, #8
 8019104:	4618      	mov	r0, r3
 8019106:	f000 fb49 	bl	801979c <GET_CERT>
	GET_KEY(tmpConfig);
 801910a:	f107 0308 	add.w	r3, r7, #8
 801910e:	4618      	mov	r0, r3
 8019110:	f000 fb8e 	bl	8019830 <GET_KEY>
	GET_CA(tmpConfig);
 8019114:	f107 0308 	add.w	r3, r7, #8
 8019118:	4618      	mov	r0, r3
 801911a:	f000 fbd3 	bl	80198c4 <GET_CA>
	GET_IP2(tmpConfig);
 801911e:	f107 0308 	add.w	r3, r7, #8
 8019122:	4618      	mov	r0, r3
 8019124:	f000 fc18 	bl	8019958 <GET_IP2>
	GET_PORT2(tmpConfig);
 8019128:	f107 0308 	add.w	r3, r7, #8
 801912c:	4618      	mov	r0, r3
 801912e:	f000 fc5d 	bl	80199ec <GET_PORT2>
	GET_SKEY1(tmpConfig);
 8019132:	f107 0308 	add.w	r3, r7, #8
 8019136:	4618      	mov	r0, r3
 8019138:	f000 fc96 	bl	8019a68 <GET_SKEY1>
	GET_SKEY2(tmpConfig);
 801913c:	f107 0308 	add.w	r3, r7, #8
 8019140:	4618      	mov	r0, r3
 8019142:	f000 fcdb 	bl	8019afc <GET_SKEY2>
	GET_SKEY3(tmpConfig);
 8019146:	f107 0308 	add.w	r3, r7, #8
 801914a:	4618      	mov	r0, r3
 801914c:	f000 fd20 	bl	8019b90 <GET_SKEY3>
	GET_APN(tmpConfig);
 8019150:	f107 0308 	add.w	r3, r7, #8
 8019154:	4618      	mov	r0, r3
 8019156:	f000 fd65 	bl	8019c24 <GET_APN>
	GET_ION(tmpConfig);
 801915a:	f107 0308 	add.w	r3, r7, #8
 801915e:	4618      	mov	r0, r3
 8019160:	f000 fdaa 	bl	8019cb8 <GET_ION>
	GET_NSAM(tmpConfig);
 8019164:	f107 0308 	add.w	r3, r7, #8
 8019168:	4618      	mov	r0, r3
 801916a:	f000 fe05 	bl	8019d78 <GET_NSAM>
	GET_HA(tmpConfig);
 801916e:	f107 0308 	add.w	r3, r7, #8
 8019172:	4618      	mov	r0, r3
 8019174:	f000 fe4a 	bl	8019e0c <GET_HA>
	GET_HB(tmpConfig);
 8019178:	f107 0308 	add.w	r3, r7, #8
 801917c:	4618      	mov	r0, r3
 801917e:	f000 fe8f 	bl	8019ea0 <GET_HB>
	GET_HC(tmpConfig);
 8019182:	f107 0308 	add.w	r3, r7, #8
 8019186:	4618      	mov	r0, r3
 8019188:	f000 fed4 	bl	8019f34 <GET_HC>
	GET_ACCOFFSET(tmpConfig);
 801918c:	f107 0308 	add.w	r3, r7, #8
 8019190:	4618      	mov	r0, r3
 8019192:	f000 ff19 	bl	8019fc8 <GET_ACCOFFSET>
	GET_USER(tmpConfig);
 8019196:	f107 0308 	add.w	r3, r7, #8
 801919a:	4618      	mov	r0, r3
 801919c:	f000 ff5e 	bl	801a05c <GET_USER>
	GET_PASSWORD(tmpConfig);
 80191a0:	f107 0308 	add.w	r3, r7, #8
 80191a4:	4618      	mov	r0, r3
 80191a6:	f000 ffa3 	bl	801a0f0 <GET_PASSWORD>
	GET_VIN(tmpConfig);
 80191aa:	f107 0308 	add.w	r3, r7, #8
 80191ae:	4618      	mov	r0, r3
 80191b0:	f000 ffe8 	bl	801a184 <GET_VIN>
	GET_Ckey();
 80191b4:	f001 f97a 	bl	801a4ac <GET_Ckey>
	GET_LAT();
 80191b8:	f001 f82e 	bl	801a218 <GET_LAT>
	GET_LON();
 80191bc:	f001 f880 	bl	801a2c0 <GET_LON>
	GET_PHNUM();
 80191c0:	f001 f8d6 	bl	801a370 <GET_PHNUM>
	GET_RTCTimer();
 80191c4:	f001 f928 	bl	801a418 <GET_RTCTimer>
	setStaticKeys(Rconfig.SKEY1, Rconfig.SKEY2, Rconfig.SKEY3);
 80191c8:	4b13      	ldr	r3, [pc, #76]	@ (8019218 <getAllConfig+0x15c>)
 80191ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80191cc:	4a12      	ldr	r2, [pc, #72]	@ (8019218 <getAllConfig+0x15c>)
 80191ce:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80191d0:	4a11      	ldr	r2, [pc, #68]	@ (8019218 <getAllConfig+0x15c>)
 80191d2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80191d4:	4618      	mov	r0, r3
 80191d6:	f7fd fbf1 	bl	80169bc <setStaticKeys>
	setComKeys(Rconfig.CKEY1, Rconfig.CKEY2, Rconfig.CKEY3, Rconfig.CKEY4,
 80191da:	4b0f      	ldr	r3, [pc, #60]	@ (8019218 <getAllConfig+0x15c>)
 80191dc:	6ddc      	ldr	r4, [r3, #92]	@ 0x5c
 80191de:	4b0e      	ldr	r3, [pc, #56]	@ (8019218 <getAllConfig+0x15c>)
 80191e0:	6e1d      	ldr	r5, [r3, #96]	@ 0x60
 80191e2:	4b0d      	ldr	r3, [pc, #52]	@ (8019218 <getAllConfig+0x15c>)
 80191e4:	6e5e      	ldr	r6, [r3, #100]	@ 0x64
 80191e6:	4b0c      	ldr	r3, [pc, #48]	@ (8019218 <getAllConfig+0x15c>)
 80191e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80191ea:	607b      	str	r3, [r7, #4]
 80191ec:	4b0a      	ldr	r3, [pc, #40]	@ (8019218 <getAllConfig+0x15c>)
 80191ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80191f0:	4a09      	ldr	r2, [pc, #36]	@ (8019218 <getAllConfig+0x15c>)
 80191f2:	6f12      	ldr	r2, [r2, #112]	@ 0x70
 80191f4:	4908      	ldr	r1, [pc, #32]	@ (8019218 <getAllConfig+0x15c>)
 80191f6:	6f49      	ldr	r1, [r1, #116]	@ 0x74
 80191f8:	4807      	ldr	r0, [pc, #28]	@ (8019218 <getAllConfig+0x15c>)
 80191fa:	6f80      	ldr	r0, [r0, #120]	@ 0x78
 80191fc:	9003      	str	r0, [sp, #12]
 80191fe:	9102      	str	r1, [sp, #8]
 8019200:	9201      	str	r2, [sp, #4]
 8019202:	9300      	str	r3, [sp, #0]
 8019204:	687b      	ldr	r3, [r7, #4]
 8019206:	4632      	mov	r2, r6
 8019208:	4629      	mov	r1, r5
 801920a:	4620      	mov	r0, r4
 801920c:	f7fd fbf4 	bl	80169f8 <setComKeys>
			Rconfig.CKEY5, Rconfig.CKEY6, Rconfig.CKEY7, Rconfig.CKEY8);
//	GET_ALOC(tmpConfig);
}
 8019210:	bf00      	nop
 8019212:	37d4      	adds	r7, #212	@ 0xd4
 8019214:	46bd      	mov	sp, r7
 8019216:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019218:	20014d28 	.word	0x20014d28

0801921c <FeedAllConfig>:

void FeedAllConfig() {
 801921c:	b598      	push	{r3, r4, r7, lr}
 801921e:	af00      	add	r7, sp, #0

	HAL_FLASH_ERASE(SMS_COTA_SEC);
 8019220:	4892      	ldr	r0, [pc, #584]	@ (801946c <FeedAllConfig+0x250>)
 8019222:	f7fd f91d 	bl	8016460 <HAL_FLASH_ERASE>
	// Write each field of the struct to its corresponding location in flash memory
	Write_CFGFlash(MQTT_IP, (uint64_t*) Rconfig.MIP);
 8019226:	4b92      	ldr	r3, [pc, #584]	@ (8019470 <FeedAllConfig+0x254>)
 8019228:	681b      	ldr	r3, [r3, #0]
 801922a:	4619      	mov	r1, r3
 801922c:	4891      	ldr	r0, [pc, #580]	@ (8019474 <FeedAllConfig+0x258>)
 801922e:	f7ff ff2f 	bl	8019090 <Write_CFGFlash>
	Write_CFGFlash(MQTT_PORT, (uint64_t*) Rconfig.MPORT1);
 8019232:	4b8f      	ldr	r3, [pc, #572]	@ (8019470 <FeedAllConfig+0x254>)
 8019234:	685b      	ldr	r3, [r3, #4]
 8019236:	4619      	mov	r1, r3
 8019238:	488f      	ldr	r0, [pc, #572]	@ (8019478 <FeedAllConfig+0x25c>)
 801923a:	f7ff ff29 	bl	8019090 <Write_CFGFlash>
	Write_CFGFlash(MQTT_USER, (uint64_t*) Rconfig.MUSER);
 801923e:	4b8c      	ldr	r3, [pc, #560]	@ (8019470 <FeedAllConfig+0x254>)
 8019240:	689b      	ldr	r3, [r3, #8]
 8019242:	4619      	mov	r1, r3
 8019244:	488d      	ldr	r0, [pc, #564]	@ (801947c <FeedAllConfig+0x260>)
 8019246:	f7ff ff23 	bl	8019090 <Write_CFGFlash>
	Write_CFGFlash(MQTT_PSW, (uint64_t*) Rconfig.MPASS);
 801924a:	4b89      	ldr	r3, [pc, #548]	@ (8019470 <FeedAllConfig+0x254>)
 801924c:	68db      	ldr	r3, [r3, #12]
 801924e:	4619      	mov	r1, r3
 8019250:	488b      	ldr	r0, [pc, #556]	@ (8019480 <FeedAllConfig+0x264>)
 8019252:	f7ff ff1d 	bl	8019090 <Write_CFGFlash>
	Write_CFGFlash(MQTT_CERTIFICATE, (uint64_t*) Rconfig.CERT);
 8019256:	4b86      	ldr	r3, [pc, #536]	@ (8019470 <FeedAllConfig+0x254>)
 8019258:	691b      	ldr	r3, [r3, #16]
 801925a:	4619      	mov	r1, r3
 801925c:	4889      	ldr	r0, [pc, #548]	@ (8019484 <FeedAllConfig+0x268>)
 801925e:	f7ff ff17 	bl	8019090 <Write_CFGFlash>
	Write_CFGFlash(MQTT_KEY, (uint64_t*) Rconfig.KEY);
 8019262:	4b83      	ldr	r3, [pc, #524]	@ (8019470 <FeedAllConfig+0x254>)
 8019264:	695b      	ldr	r3, [r3, #20]
 8019266:	4619      	mov	r1, r3
 8019268:	4887      	ldr	r0, [pc, #540]	@ (8019488 <FeedAllConfig+0x26c>)
 801926a:	f7ff ff11 	bl	8019090 <Write_CFGFlash>
	Write_CFGFlash(MQTT_CERTIFICATE_AUTHORITY, (uint64_t*) Rconfig.CA);
 801926e:	4b80      	ldr	r3, [pc, #512]	@ (8019470 <FeedAllConfig+0x254>)
 8019270:	699b      	ldr	r3, [r3, #24]
 8019272:	4619      	mov	r1, r3
 8019274:	4885      	ldr	r0, [pc, #532]	@ (801948c <FeedAllConfig+0x270>)
 8019276:	f7ff ff0b 	bl	8019090 <Write_CFGFlash>
	Write_CFGFlash(FOTA_IP2, (uint64_t*) Rconfig.IP2);
 801927a:	4b7d      	ldr	r3, [pc, #500]	@ (8019470 <FeedAllConfig+0x254>)
 801927c:	69db      	ldr	r3, [r3, #28]
 801927e:	4619      	mov	r1, r3
 8019280:	4883      	ldr	r0, [pc, #524]	@ (8019490 <FeedAllConfig+0x274>)
 8019282:	f7ff ff05 	bl	8019090 <Write_CFGFlash>
	Write_CFGFlash(FOTA_PORT2, (uint64_t*) Rconfig.IPPORT2);
 8019286:	4b7a      	ldr	r3, [pc, #488]	@ (8019470 <FeedAllConfig+0x254>)
 8019288:	6a1b      	ldr	r3, [r3, #32]
 801928a:	4619      	mov	r1, r3
 801928c:	4881      	ldr	r0, [pc, #516]	@ (8019494 <FeedAllConfig+0x278>)
 801928e:	f7ff feff 	bl	8019090 <Write_CFGFlash>
	HAL_FLASH_Write_Buff(FOTA_Static_Key1, (uint64_t*) Rconfig.SKEY1,
 8019292:	4b77      	ldr	r3, [pc, #476]	@ (8019470 <FeedAllConfig+0x254>)
 8019294:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
			strlen(Rconfig.SKEY1));
 8019296:	4b76      	ldr	r3, [pc, #472]	@ (8019470 <FeedAllConfig+0x254>)
 8019298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801929a:	4618      	mov	r0, r3
 801929c:	f7e7 f802 	bl	80002a4 <strlen>
 80192a0:	4603      	mov	r3, r0
	HAL_FLASH_Write_Buff(FOTA_Static_Key1, (uint64_t*) Rconfig.SKEY1,
 80192a2:	461a      	mov	r2, r3
 80192a4:	4621      	mov	r1, r4
 80192a6:	487c      	ldr	r0, [pc, #496]	@ (8019498 <FeedAllConfig+0x27c>)
 80192a8:	f7fd f938 	bl	801651c <HAL_FLASH_Write_Buff>
	HAL_FLASH_Write_Buff(FOTA_Static_Key2, (uint64_t*) Rconfig.SKEY2,
 80192ac:	4b70      	ldr	r3, [pc, #448]	@ (8019470 <FeedAllConfig+0x254>)
 80192ae:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
			strlen(Rconfig.SKEY2));
 80192b0:	4b6f      	ldr	r3, [pc, #444]	@ (8019470 <FeedAllConfig+0x254>)
 80192b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80192b4:	4618      	mov	r0, r3
 80192b6:	f7e6 fff5 	bl	80002a4 <strlen>
 80192ba:	4603      	mov	r3, r0
	HAL_FLASH_Write_Buff(FOTA_Static_Key2, (uint64_t*) Rconfig.SKEY2,
 80192bc:	461a      	mov	r2, r3
 80192be:	4621      	mov	r1, r4
 80192c0:	4876      	ldr	r0, [pc, #472]	@ (801949c <FeedAllConfig+0x280>)
 80192c2:	f7fd f92b 	bl	801651c <HAL_FLASH_Write_Buff>
	HAL_FLASH_Write_Buff(FOTA_Static_Key3, (uint64_t*) Rconfig.SKEY3,
 80192c6:	4b6a      	ldr	r3, [pc, #424]	@ (8019470 <FeedAllConfig+0x254>)
 80192c8:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
			strlen(Rconfig.SKEY3));
 80192ca:	4b69      	ldr	r3, [pc, #420]	@ (8019470 <FeedAllConfig+0x254>)
 80192cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80192ce:	4618      	mov	r0, r3
 80192d0:	f7e6 ffe8 	bl	80002a4 <strlen>
 80192d4:	4603      	mov	r3, r0
	HAL_FLASH_Write_Buff(FOTA_Static_Key3, (uint64_t*) Rconfig.SKEY3,
 80192d6:	461a      	mov	r2, r3
 80192d8:	4621      	mov	r1, r4
 80192da:	4871      	ldr	r0, [pc, #452]	@ (80194a0 <FeedAllConfig+0x284>)
 80192dc:	f7fd f91e 	bl	801651c <HAL_FLASH_Write_Buff>
	Write_CFGFlash(APN, (uint64_t*) Rconfig.DAPN);
 80192e0:	4b63      	ldr	r3, [pc, #396]	@ (8019470 <FeedAllConfig+0x254>)
 80192e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80192e4:	4619      	mov	r1, r3
 80192e6:	486f      	ldr	r0, [pc, #444]	@ (80194a4 <FeedAllConfig+0x288>)
 80192e8:	f7ff fed2 	bl	8019090 <Write_CFGFlash>
	Write_CFGFlash(ION_Sampling, (uint64_t*) Rconfig.ION);
 80192ec:	4b60      	ldr	r3, [pc, #384]	@ (8019470 <FeedAllConfig+0x254>)
 80192ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80192f0:	4619      	mov	r1, r3
 80192f2:	486d      	ldr	r0, [pc, #436]	@ (80194a8 <FeedAllConfig+0x28c>)
 80192f4:	f7ff fecc 	bl	8019090 <Write_CFGFlash>
	Write_CFGFlash(NO_OF_Sampling, (uint64_t*) Rconfig.NSAM);
 80192f8:	4b5d      	ldr	r3, [pc, #372]	@ (8019470 <FeedAllConfig+0x254>)
 80192fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80192fc:	4619      	mov	r1, r3
 80192fe:	486b      	ldr	r0, [pc, #428]	@ (80194ac <FeedAllConfig+0x290>)
 8019300:	f7ff fec6 	bl	8019090 <Write_CFGFlash>
	Write_CFGFlash(HARSH_ACC_TH, (uint64_t*) Rconfig.HA);
 8019304:	4b5a      	ldr	r3, [pc, #360]	@ (8019470 <FeedAllConfig+0x254>)
 8019306:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019308:	4619      	mov	r1, r3
 801930a:	4869      	ldr	r0, [pc, #420]	@ (80194b0 <FeedAllConfig+0x294>)
 801930c:	f7ff fec0 	bl	8019090 <Write_CFGFlash>
	Write_CFGFlash(HARSH_DEACC_TH, (uint64_t*) Rconfig.HB);
 8019310:	4b57      	ldr	r3, [pc, #348]	@ (8019470 <FeedAllConfig+0x254>)
 8019312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019314:	4619      	mov	r1, r3
 8019316:	4867      	ldr	r0, [pc, #412]	@ (80194b4 <FeedAllConfig+0x298>)
 8019318:	f7ff feba 	bl	8019090 <Write_CFGFlash>
	Write_CFGFlash(HARSH_CORNERING_TH, (uint64_t*) Rconfig.HC);
 801931c:	4b54      	ldr	r3, [pc, #336]	@ (8019470 <FeedAllConfig+0x254>)
 801931e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019320:	4619      	mov	r1, r3
 8019322:	4865      	ldr	r0, [pc, #404]	@ (80194b8 <FeedAllConfig+0x29c>)
 8019324:	f7ff feb4 	bl	8019090 <Write_CFGFlash>
	Write_CFGFlash(SENSOR_OFFSET_CAL, (uint64_t*) Rconfig.ACCOFFSET);
 8019328:	4b51      	ldr	r3, [pc, #324]	@ (8019470 <FeedAllConfig+0x254>)
 801932a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801932c:	4619      	mov	r1, r3
 801932e:	4863      	ldr	r0, [pc, #396]	@ (80194bc <FeedAllConfig+0x2a0>)
 8019330:	f7ff feae 	bl	8019090 <Write_CFGFlash>
	Write_CFGFlash(USERNAME, (uint64_t*) Rconfig.USER);
 8019334:	4b4e      	ldr	r3, [pc, #312]	@ (8019470 <FeedAllConfig+0x254>)
 8019336:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8019338:	4619      	mov	r1, r3
 801933a:	4861      	ldr	r0, [pc, #388]	@ (80194c0 <FeedAllConfig+0x2a4>)
 801933c:	f7ff fea8 	bl	8019090 <Write_CFGFlash>
	Write_CFGFlash(PASSWORD, (uint64_t*) Rconfig.PSWD);
 8019340:	4b4b      	ldr	r3, [pc, #300]	@ (8019470 <FeedAllConfig+0x254>)
 8019342:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019344:	4619      	mov	r1, r3
 8019346:	485f      	ldr	r0, [pc, #380]	@ (80194c4 <FeedAllConfig+0x2a8>)
 8019348:	f7ff fea2 	bl	8019090 <Write_CFGFlash>
	Write_CFGFlash(VECHILE_ID_NUM, (uint64_t*) Rconfig.VIN);
 801934c:	4b48      	ldr	r3, [pc, #288]	@ (8019470 <FeedAllConfig+0x254>)
 801934e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8019350:	4619      	mov	r1, r3
 8019352:	485d      	ldr	r0, [pc, #372]	@ (80194c8 <FeedAllConfig+0x2ac>)
 8019354:	f7ff fe9c 	bl	8019090 <Write_CFGFlash>
	Write_CFGFlash(LAT_ADDR, (uint64_t*) Rconfig.LAT);
 8019358:	4b45      	ldr	r3, [pc, #276]	@ (8019470 <FeedAllConfig+0x254>)
 801935a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801935c:	4619      	mov	r1, r3
 801935e:	485b      	ldr	r0, [pc, #364]	@ (80194cc <FeedAllConfig+0x2b0>)
 8019360:	f7ff fe96 	bl	8019090 <Write_CFGFlash>
	Write_CFGFlash(LON_ADDR, (uint64_t*) Rconfig.LON);
 8019364:	4b42      	ldr	r3, [pc, #264]	@ (8019470 <FeedAllConfig+0x254>)
 8019366:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801936a:	4619      	mov	r1, r3
 801936c:	4858      	ldr	r0, [pc, #352]	@ (80194d0 <FeedAllConfig+0x2b4>)
 801936e:	f7ff fe8f 	bl	8019090 <Write_CFGFlash>
	Write_CFGFlash(SMS_NUM_Addr, (uint64_t*) Rconfig.PHNUM);
 8019372:	4b3f      	ldr	r3, [pc, #252]	@ (8019470 <FeedAllConfig+0x254>)
 8019374:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8019378:	4619      	mov	r1, r3
 801937a:	4856      	ldr	r0, [pc, #344]	@ (80194d4 <FeedAllConfig+0x2b8>)
 801937c:	f7ff fe88 	bl	8019090 <Write_CFGFlash>
	Write_CFGFlash(RTC_timer_addr, (uint64_t*) Rconfig.Rtime);
 8019380:	4b3b      	ldr	r3, [pc, #236]	@ (8019470 <FeedAllConfig+0x254>)
 8019382:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8019386:	4619      	mov	r1, r3
 8019388:	4853      	ldr	r0, [pc, #332]	@ (80194d8 <FeedAllConfig+0x2bc>)
 801938a:	f7ff fe81 	bl	8019090 <Write_CFGFlash>
	HAL_FLASH_Write_Buff(CKEY1_ADDR, (uint64_t*) Rconfig.CKEY1,
 801938e:	4b38      	ldr	r3, [pc, #224]	@ (8019470 <FeedAllConfig+0x254>)
 8019390:	6ddc      	ldr	r4, [r3, #92]	@ 0x5c
			strlen(Rconfig.CKEY1));
 8019392:	4b37      	ldr	r3, [pc, #220]	@ (8019470 <FeedAllConfig+0x254>)
 8019394:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8019396:	4618      	mov	r0, r3
 8019398:	f7e6 ff84 	bl	80002a4 <strlen>
 801939c:	4603      	mov	r3, r0
	HAL_FLASH_Write_Buff(CKEY1_ADDR, (uint64_t*) Rconfig.CKEY1,
 801939e:	461a      	mov	r2, r3
 80193a0:	4621      	mov	r1, r4
 80193a2:	484e      	ldr	r0, [pc, #312]	@ (80194dc <FeedAllConfig+0x2c0>)
 80193a4:	f7fd f8ba 	bl	801651c <HAL_FLASH_Write_Buff>
	HAL_FLASH_Write_Buff(CKEY2_ADDR, (uint64_t*) Rconfig.CKEY2,
 80193a8:	4b31      	ldr	r3, [pc, #196]	@ (8019470 <FeedAllConfig+0x254>)
 80193aa:	6e1c      	ldr	r4, [r3, #96]	@ 0x60
			strlen(Rconfig.CKEY2));
 80193ac:	4b30      	ldr	r3, [pc, #192]	@ (8019470 <FeedAllConfig+0x254>)
 80193ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80193b0:	4618      	mov	r0, r3
 80193b2:	f7e6 ff77 	bl	80002a4 <strlen>
 80193b6:	4603      	mov	r3, r0
	HAL_FLASH_Write_Buff(CKEY2_ADDR, (uint64_t*) Rconfig.CKEY2,
 80193b8:	461a      	mov	r2, r3
 80193ba:	4621      	mov	r1, r4
 80193bc:	4848      	ldr	r0, [pc, #288]	@ (80194e0 <FeedAllConfig+0x2c4>)
 80193be:	f7fd f8ad 	bl	801651c <HAL_FLASH_Write_Buff>
	HAL_FLASH_Write_Buff(CKEY3_ADDR, (uint64_t*) Rconfig.CKEY3,
 80193c2:	4b2b      	ldr	r3, [pc, #172]	@ (8019470 <FeedAllConfig+0x254>)
 80193c4:	6e5c      	ldr	r4, [r3, #100]	@ 0x64
			strlen(Rconfig.CKEY3));
 80193c6:	4b2a      	ldr	r3, [pc, #168]	@ (8019470 <FeedAllConfig+0x254>)
 80193c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80193ca:	4618      	mov	r0, r3
 80193cc:	f7e6 ff6a 	bl	80002a4 <strlen>
 80193d0:	4603      	mov	r3, r0
	HAL_FLASH_Write_Buff(CKEY3_ADDR, (uint64_t*) Rconfig.CKEY3,
 80193d2:	461a      	mov	r2, r3
 80193d4:	4621      	mov	r1, r4
 80193d6:	4843      	ldr	r0, [pc, #268]	@ (80194e4 <FeedAllConfig+0x2c8>)
 80193d8:	f7fd f8a0 	bl	801651c <HAL_FLASH_Write_Buff>
	HAL_FLASH_Write_Buff(CKEY4_ADDR, (uint64_t*) Rconfig.CKEY4,
 80193dc:	4b24      	ldr	r3, [pc, #144]	@ (8019470 <FeedAllConfig+0x254>)
 80193de:	6e9c      	ldr	r4, [r3, #104]	@ 0x68
			strlen(Rconfig.CKEY4));
 80193e0:	4b23      	ldr	r3, [pc, #140]	@ (8019470 <FeedAllConfig+0x254>)
 80193e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80193e4:	4618      	mov	r0, r3
 80193e6:	f7e6 ff5d 	bl	80002a4 <strlen>
 80193ea:	4603      	mov	r3, r0
	HAL_FLASH_Write_Buff(CKEY4_ADDR, (uint64_t*) Rconfig.CKEY4,
 80193ec:	461a      	mov	r2, r3
 80193ee:	4621      	mov	r1, r4
 80193f0:	483d      	ldr	r0, [pc, #244]	@ (80194e8 <FeedAllConfig+0x2cc>)
 80193f2:	f7fd f893 	bl	801651c <HAL_FLASH_Write_Buff>
	HAL_FLASH_Write_Buff(CKEY5_ADDR, (uint64_t*) Rconfig.CKEY5,
 80193f6:	4b1e      	ldr	r3, [pc, #120]	@ (8019470 <FeedAllConfig+0x254>)
 80193f8:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
			strlen(Rconfig.CKEY5));
 80193fa:	4b1d      	ldr	r3, [pc, #116]	@ (8019470 <FeedAllConfig+0x254>)
 80193fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80193fe:	4618      	mov	r0, r3
 8019400:	f7e6 ff50 	bl	80002a4 <strlen>
 8019404:	4603      	mov	r3, r0
	HAL_FLASH_Write_Buff(CKEY5_ADDR, (uint64_t*) Rconfig.CKEY5,
 8019406:	461a      	mov	r2, r3
 8019408:	4621      	mov	r1, r4
 801940a:	4838      	ldr	r0, [pc, #224]	@ (80194ec <FeedAllConfig+0x2d0>)
 801940c:	f7fd f886 	bl	801651c <HAL_FLASH_Write_Buff>
	HAL_FLASH_Write_Buff(CKEY6_ADDR, (uint64_t*) Rconfig.CKEY6,
 8019410:	4b17      	ldr	r3, [pc, #92]	@ (8019470 <FeedAllConfig+0x254>)
 8019412:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
			strlen(Rconfig.CKEY6));
 8019414:	4b16      	ldr	r3, [pc, #88]	@ (8019470 <FeedAllConfig+0x254>)
 8019416:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019418:	4618      	mov	r0, r3
 801941a:	f7e6 ff43 	bl	80002a4 <strlen>
 801941e:	4603      	mov	r3, r0
	HAL_FLASH_Write_Buff(CKEY6_ADDR, (uint64_t*) Rconfig.CKEY6,
 8019420:	461a      	mov	r2, r3
 8019422:	4621      	mov	r1, r4
 8019424:	4832      	ldr	r0, [pc, #200]	@ (80194f0 <FeedAllConfig+0x2d4>)
 8019426:	f7fd f879 	bl	801651c <HAL_FLASH_Write_Buff>
	HAL_FLASH_Write_Buff(CKEY7_ADDR, (uint64_t*) Rconfig.CKEY7,
 801942a:	4b11      	ldr	r3, [pc, #68]	@ (8019470 <FeedAllConfig+0x254>)
 801942c:	6f5c      	ldr	r4, [r3, #116]	@ 0x74
			strlen(Rconfig.CKEY7));
 801942e:	4b10      	ldr	r3, [pc, #64]	@ (8019470 <FeedAllConfig+0x254>)
 8019430:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8019432:	4618      	mov	r0, r3
 8019434:	f7e6 ff36 	bl	80002a4 <strlen>
 8019438:	4603      	mov	r3, r0
	HAL_FLASH_Write_Buff(CKEY7_ADDR, (uint64_t*) Rconfig.CKEY7,
 801943a:	461a      	mov	r2, r3
 801943c:	4621      	mov	r1, r4
 801943e:	482d      	ldr	r0, [pc, #180]	@ (80194f4 <FeedAllConfig+0x2d8>)
 8019440:	f7fd f86c 	bl	801651c <HAL_FLASH_Write_Buff>
	HAL_FLASH_Write_Buff(CKEY8_ADDR, (uint64_t*) Rconfig.CKEY8,
 8019444:	4b0a      	ldr	r3, [pc, #40]	@ (8019470 <FeedAllConfig+0x254>)
 8019446:	6f9c      	ldr	r4, [r3, #120]	@ 0x78
			strlen(Rconfig.CKEY8));
 8019448:	4b09      	ldr	r3, [pc, #36]	@ (8019470 <FeedAllConfig+0x254>)
 801944a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801944c:	4618      	mov	r0, r3
 801944e:	f7e6 ff29 	bl	80002a4 <strlen>
 8019452:	4603      	mov	r3, r0
	HAL_FLASH_Write_Buff(CKEY8_ADDR, (uint64_t*) Rconfig.CKEY8,
 8019454:	461a      	mov	r2, r3
 8019456:	4621      	mov	r1, r4
 8019458:	4827      	ldr	r0, [pc, #156]	@ (80194f8 <FeedAllConfig+0x2dc>)
 801945a:	f7fd f85f 	bl	801651c <HAL_FLASH_Write_Buff>
	 Write_CFGFlash(FL_On_Sl_Addr, (uint64_t*)&FLAG_RESET_On_Sleep);
 801945e:	4927      	ldr	r1, [pc, #156]	@ (80194fc <FeedAllConfig+0x2e0>)
 8019460:	4827      	ldr	r0, [pc, #156]	@ (8019500 <FeedAllConfig+0x2e4>)
 8019462:	f7ff fe15 	bl	8019090 <Write_CFGFlash>
	// Write other fields similarly
//	Write_CFGFlash(ADDR_L1, L1);
//	Write_CFGFlash(ADDR_L2, L2);
//	Write_CFGFlash(ADDR_L3, L3);

}
 8019466:	bf00      	nop
 8019468:	bd98      	pop	{r3, r4, r7, pc}
 801946a:	bf00      	nop
 801946c:	0816a000 	.word	0x0816a000
 8019470:	20014d28 	.word	0x20014d28
 8019474:	0816a010 	.word	0x0816a010
 8019478:	0816a030 	.word	0x0816a030
 801947c:	0816a050 	.word	0x0816a050
 8019480:	0816a070 	.word	0x0816a070
 8019484:	0816a090 	.word	0x0816a090
 8019488:	0816a0b0 	.word	0x0816a0b0
 801948c:	0816a0e0 	.word	0x0816a0e0
 8019490:	0816a110 	.word	0x0816a110
 8019494:	0816a130 	.word	0x0816a130
 8019498:	0816a150 	.word	0x0816a150
 801949c:	0816a1a0 	.word	0x0816a1a0
 80194a0:	0816a1e0 	.word	0x0816a1e0
 80194a4:	0816a220 	.word	0x0816a220
 80194a8:	0816a250 	.word	0x0816a250
 80194ac:	0816a270 	.word	0x0816a270
 80194b0:	0816a290 	.word	0x0816a290
 80194b4:	0816a2b0 	.word	0x0816a2b0
 80194b8:	0816a2d0 	.word	0x0816a2d0
 80194bc:	0816a2f0 	.word	0x0816a2f0
 80194c0:	0816a310 	.word	0x0816a310
 80194c4:	0816a330 	.word	0x0816a330
 80194c8:	0816a350 	.word	0x0816a350
 80194cc:	0816a540 	.word	0x0816a540
 80194d0:	0816a560 	.word	0x0816a560
 80194d4:	0816a580 	.word	0x0816a580
 80194d8:	0816a600 	.word	0x0816a600
 80194dc:	0816a430 	.word	0x0816a430
 80194e0:	0816a450 	.word	0x0816a450
 80194e4:	0816a470 	.word	0x0816a470
 80194e8:	0816a490 	.word	0x0816a490
 80194ec:	0816a4b0 	.word	0x0816a4b0
 80194f0:	0816a4d0 	.word	0x0816a4d0
 80194f4:	0816a4f0 	.word	0x0816a4f0
 80194f8:	0816a520 	.word	0x0816a520
 80194fc:	20014e48 	.word	0x20014e48
 8019500:	0816a660 	.word	0x0816a660

08019504 <GET_MIP>:
// Implementations of getter functions
bool GET_MIP() {
 8019504:	b598      	push	{r3, r4, r7, lr}
 8019506:	af00      	add	r7, sp, #0
	memset(RB, 0, sizeof(RB));
 8019508:	2264      	movs	r2, #100	@ 0x64
 801950a:	2100      	movs	r1, #0
 801950c:	4825      	ldr	r0, [pc, #148]	@ (80195a4 <GET_MIP+0xa0>)
 801950e:	f005 fc7f 	bl	801ee10 <memset>
	if (FLASH_Read_Buff(MQTT_IP, RB, 16) == HAL_OK) {
 8019512:	2210      	movs	r2, #16
 8019514:	4923      	ldr	r1, [pc, #140]	@ (80195a4 <GET_MIP+0xa0>)
 8019516:	4824      	ldr	r0, [pc, #144]	@ (80195a8 <GET_MIP+0xa4>)
 8019518:	f7fd f87a 	bl	8016610 <FLASH_Read_Buff>
 801951c:	4603      	mov	r3, r0
 801951e:	2b00      	cmp	r3, #0
 8019520:	d139      	bne.n	8019596 <GET_MIP+0x92>
		Rconfig.MIP = (char*) malloc(strlen(RB) + 1); // Allocate memory for string
 8019522:	4820      	ldr	r0, [pc, #128]	@ (80195a4 <GET_MIP+0xa0>)
 8019524:	f7e6 febe 	bl	80002a4 <strlen>
 8019528:	4603      	mov	r3, r0
 801952a:	3301      	adds	r3, #1
 801952c:	4618      	mov	r0, r3
 801952e:	f003 fbff 	bl	801cd30 <malloc>
 8019532:	4603      	mov	r3, r0
 8019534:	461a      	mov	r2, r3
 8019536:	4b1d      	ldr	r3, [pc, #116]	@ (80195ac <GET_MIP+0xa8>)
 8019538:	601a      	str	r2, [r3, #0]
		if (Rconfig.MIP != NULL) {
 801953a:	4b1c      	ldr	r3, [pc, #112]	@ (80195ac <GET_MIP+0xa8>)
 801953c:	681b      	ldr	r3, [r3, #0]
 801953e:	2b00      	cmp	r3, #0
 8019540:	d024      	beq.n	801958c <GET_MIP+0x88>
			strcpy(Rconfig.MIP, RB);
 8019542:	4b1a      	ldr	r3, [pc, #104]	@ (80195ac <GET_MIP+0xa8>)
 8019544:	681b      	ldr	r3, [r3, #0]
 8019546:	4917      	ldr	r1, [pc, #92]	@ (80195a4 <GET_MIP+0xa0>)
 8019548:	4618      	mov	r0, r3
 801954a:	f005 fdbe 	bl	801f0ca <strcpy>
			if (RB[0] == 255) {
 801954e:	4b15      	ldr	r3, [pc, #84]	@ (80195a4 <GET_MIP+0xa0>)
 8019550:	781b      	ldrb	r3, [r3, #0]
 8019552:	2bff      	cmp	r3, #255	@ 0xff
 8019554:	d10c      	bne.n	8019570 <GET_MIP+0x6c>
				strcpy(Rconfig.MIP, "182.71.127.241");
 8019556:	4b15      	ldr	r3, [pc, #84]	@ (80195ac <GET_MIP+0xa8>)
 8019558:	681b      	ldr	r3, [r3, #0]
 801955a:	4a15      	ldr	r2, [pc, #84]	@ (80195b0 <GET_MIP+0xac>)
 801955c:	461c      	mov	r4, r3
 801955e:	4613      	mov	r3, r2
 8019560:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019562:	6020      	str	r0, [r4, #0]
 8019564:	6061      	str	r1, [r4, #4]
 8019566:	60a2      	str	r2, [r4, #8]
 8019568:	881a      	ldrh	r2, [r3, #0]
 801956a:	789b      	ldrb	r3, [r3, #2]
 801956c:	81a2      	strh	r2, [r4, #12]
 801956e:	73a3      	strb	r3, [r4, #14]
			}
			setTcpServerIP(Rconfig.MIP);
 8019570:	4b0e      	ldr	r3, [pc, #56]	@ (80195ac <GET_MIP+0xa8>)
 8019572:	681b      	ldr	r3, [r3, #0]
 8019574:	4618      	mov	r0, r3
 8019576:	f003 f9a9 	bl	801c8cc <setTcpServerIP>
			printc(MinDelay, "MIP: %s\n", Rconfig.MIP);
 801957a:	4b0c      	ldr	r3, [pc, #48]	@ (80195ac <GET_MIP+0xa8>)
 801957c:	681b      	ldr	r3, [r3, #0]
 801957e:	461a      	mov	r2, r3
 8019580:	490c      	ldr	r1, [pc, #48]	@ (80195b4 <GET_MIP+0xb0>)
 8019582:	200a      	movs	r0, #10
 8019584:	f7e8 fa48 	bl	8001a18 <printc>
			return true;
 8019588:	2301      	movs	r3, #1
 801958a:	e009      	b.n	80195a0 <GET_MIP+0x9c>
		} else {
			printc(MinDelay, "Memory allocation failed for MIP!\n");
 801958c:	490a      	ldr	r1, [pc, #40]	@ (80195b8 <GET_MIP+0xb4>)
 801958e:	200a      	movs	r0, #10
 8019590:	f7e8 fa42 	bl	8001a18 <printc>
 8019594:	e003      	b.n	801959e <GET_MIP+0x9a>
		}
	} else {
		printc(MinDelay, "Failed to read MIP from flash!\n");
 8019596:	4909      	ldr	r1, [pc, #36]	@ (80195bc <GET_MIP+0xb8>)
 8019598:	200a      	movs	r0, #10
 801959a:	f7e8 fa3d 	bl	8001a18 <printc>
	}
	return false;
 801959e:	2300      	movs	r3, #0
}
 80195a0:	4618      	mov	r0, r3
 80195a2:	bd98      	pop	{r3, r4, r7, pc}
 80195a4:	20014db8 	.word	0x20014db8
 80195a8:	0816a010 	.word	0x0816a010
 80195ac:	20014d28 	.word	0x20014d28
 80195b0:	08023154 	.word	0x08023154
 80195b4:	08023164 	.word	0x08023164
 80195b8:	08023170 	.word	0x08023170
 80195bc:	08023194 	.word	0x08023194

080195c0 <GET_PORT1>:

bool GET_PORT1() {
 80195c0:	b580      	push	{r7, lr}
 80195c2:	af00      	add	r7, sp, #0
	memset(RB, 0, sizeof(RB));
 80195c4:	2264      	movs	r2, #100	@ 0x64
 80195c6:	2100      	movs	r1, #0
 80195c8:	4822      	ldr	r0, [pc, #136]	@ (8019654 <GET_PORT1+0x94>)
 80195ca:	f005 fc21 	bl	801ee10 <memset>
	if (FLASH_Read_Buff(MQTT_PORT, RB, 16) == HAL_OK) {
 80195ce:	2210      	movs	r2, #16
 80195d0:	4920      	ldr	r1, [pc, #128]	@ (8019654 <GET_PORT1+0x94>)
 80195d2:	4821      	ldr	r0, [pc, #132]	@ (8019658 <GET_PORT1+0x98>)
 80195d4:	f7fd f81c 	bl	8016610 <FLASH_Read_Buff>
 80195d8:	4603      	mov	r3, r0
 80195da:	2b00      	cmp	r3, #0
 80195dc:	d132      	bne.n	8019644 <GET_PORT1+0x84>
		Rconfig.MPORT1 = (char*) malloc(strlen(RB) + 1);
 80195de:	481d      	ldr	r0, [pc, #116]	@ (8019654 <GET_PORT1+0x94>)
 80195e0:	f7e6 fe60 	bl	80002a4 <strlen>
 80195e4:	4603      	mov	r3, r0
 80195e6:	3301      	adds	r3, #1
 80195e8:	4618      	mov	r0, r3
 80195ea:	f003 fba1 	bl	801cd30 <malloc>
 80195ee:	4603      	mov	r3, r0
 80195f0:	461a      	mov	r2, r3
 80195f2:	4b1a      	ldr	r3, [pc, #104]	@ (801965c <GET_PORT1+0x9c>)
 80195f4:	605a      	str	r2, [r3, #4]
		if (Rconfig.MPORT1 != NULL) {
 80195f6:	4b19      	ldr	r3, [pc, #100]	@ (801965c <GET_PORT1+0x9c>)
 80195f8:	685b      	ldr	r3, [r3, #4]
 80195fa:	2b00      	cmp	r3, #0
 80195fc:	d026      	beq.n	801964c <GET_PORT1+0x8c>
			strcpy(Rconfig.MPORT1, RB);
 80195fe:	4b17      	ldr	r3, [pc, #92]	@ (801965c <GET_PORT1+0x9c>)
 8019600:	685b      	ldr	r3, [r3, #4]
 8019602:	4914      	ldr	r1, [pc, #80]	@ (8019654 <GET_PORT1+0x94>)
 8019604:	4618      	mov	r0, r3
 8019606:	f005 fd60 	bl	801f0ca <strcpy>
			if (RB[0] == 255) {
 801960a:	4b12      	ldr	r3, [pc, #72]	@ (8019654 <GET_PORT1+0x94>)
 801960c:	781b      	ldrb	r3, [r3, #0]
 801960e:	2bff      	cmp	r3, #255	@ 0xff
 8019610:	d106      	bne.n	8019620 <GET_PORT1+0x60>
				strcpy(Rconfig.MPORT1, "4034");
 8019612:	4b12      	ldr	r3, [pc, #72]	@ (801965c <GET_PORT1+0x9c>)
 8019614:	685b      	ldr	r3, [r3, #4]
 8019616:	4a12      	ldr	r2, [pc, #72]	@ (8019660 <GET_PORT1+0xa0>)
 8019618:	6810      	ldr	r0, [r2, #0]
 801961a:	6018      	str	r0, [r3, #0]
 801961c:	7912      	ldrb	r2, [r2, #4]
 801961e:	711a      	strb	r2, [r3, #4]
			}
			setTcpPort(atoi(Rconfig.MPORT1));
 8019620:	4b0e      	ldr	r3, [pc, #56]	@ (801965c <GET_PORT1+0x9c>)
 8019622:	685b      	ldr	r3, [r3, #4]
 8019624:	4618      	mov	r0, r3
 8019626:	f003 fb7e 	bl	801cd26 <atoi>
 801962a:	4603      	mov	r3, r0
 801962c:	4618      	mov	r0, r3
 801962e:	f003 f95f 	bl	801c8f0 <setTcpPort>
			printc(MinDelay, "PORT1: %s\n", Rconfig.MPORT1);
 8019632:	4b0a      	ldr	r3, [pc, #40]	@ (801965c <GET_PORT1+0x9c>)
 8019634:	685b      	ldr	r3, [r3, #4]
 8019636:	461a      	mov	r2, r3
 8019638:	490a      	ldr	r1, [pc, #40]	@ (8019664 <GET_PORT1+0xa4>)
 801963a:	200a      	movs	r0, #10
 801963c:	f7e8 f9ec 	bl	8001a18 <printc>
			return true;
 8019640:	2301      	movs	r3, #1
 8019642:	e004      	b.n	801964e <GET_PORT1+0x8e>
		}
	} else {
		printc(MinDelay, "Failed to read PORT1 from flash!\n");
 8019644:	4908      	ldr	r1, [pc, #32]	@ (8019668 <GET_PORT1+0xa8>)
 8019646:	200a      	movs	r0, #10
 8019648:	f7e8 f9e6 	bl	8001a18 <printc>
	}
	return false;
 801964c:	2300      	movs	r3, #0
}
 801964e:	4618      	mov	r0, r3
 8019650:	bd80      	pop	{r7, pc}
 8019652:	bf00      	nop
 8019654:	20014db8 	.word	0x20014db8
 8019658:	0816a030 	.word	0x0816a030
 801965c:	20014d28 	.word	0x20014d28
 8019660:	080231b4 	.word	0x080231b4
 8019664:	080231bc 	.word	0x080231bc
 8019668:	080231c8 	.word	0x080231c8

0801966c <GET_MUSER>:

bool GET_MUSER(char *opBuffer) {
 801966c:	b580      	push	{r7, lr}
 801966e:	b082      	sub	sp, #8
 8019670:	af00      	add	r7, sp, #0
 8019672:	6078      	str	r0, [r7, #4]
	memset(RB, 0, sizeof(RB));
 8019674:	2264      	movs	r2, #100	@ 0x64
 8019676:	2100      	movs	r1, #0
 8019678:	481d      	ldr	r0, [pc, #116]	@ (80196f0 <GET_MUSER+0x84>)
 801967a:	f005 fbc9 	bl	801ee10 <memset>
	if (FLASH_Read_Buff(MQTT_USER, RB, 16) == HAL_OK) {
 801967e:	2210      	movs	r2, #16
 8019680:	491b      	ldr	r1, [pc, #108]	@ (80196f0 <GET_MUSER+0x84>)
 8019682:	481c      	ldr	r0, [pc, #112]	@ (80196f4 <GET_MUSER+0x88>)
 8019684:	f7fc ffc4 	bl	8016610 <FLASH_Read_Buff>
 8019688:	4603      	mov	r3, r0
 801968a:	2b00      	cmp	r3, #0
 801968c:	d127      	bne.n	80196de <GET_MUSER+0x72>
		Rconfig.MUSER = (char*) malloc(strlen(RB) + 1); // Allocate memory for string
 801968e:	4818      	ldr	r0, [pc, #96]	@ (80196f0 <GET_MUSER+0x84>)
 8019690:	f7e6 fe08 	bl	80002a4 <strlen>
 8019694:	4603      	mov	r3, r0
 8019696:	3301      	adds	r3, #1
 8019698:	4618      	mov	r0, r3
 801969a:	f003 fb49 	bl	801cd30 <malloc>
 801969e:	4603      	mov	r3, r0
 80196a0:	461a      	mov	r2, r3
 80196a2:	4b15      	ldr	r3, [pc, #84]	@ (80196f8 <GET_MUSER+0x8c>)
 80196a4:	609a      	str	r2, [r3, #8]
		if (Rconfig.MUSER != NULL) {
 80196a6:	4b14      	ldr	r3, [pc, #80]	@ (80196f8 <GET_MUSER+0x8c>)
 80196a8:	689b      	ldr	r3, [r3, #8]
 80196aa:	2b00      	cmp	r3, #0
 80196ac:	d012      	beq.n	80196d4 <GET_MUSER+0x68>
			strcpy(Rconfig.MUSER, RB);
 80196ae:	4b12      	ldr	r3, [pc, #72]	@ (80196f8 <GET_MUSER+0x8c>)
 80196b0:	689b      	ldr	r3, [r3, #8]
 80196b2:	490f      	ldr	r1, [pc, #60]	@ (80196f0 <GET_MUSER+0x84>)
 80196b4:	4618      	mov	r0, r3
 80196b6:	f005 fd08 	bl	801f0ca <strcpy>
			strcpy(opBuffer, RB);
 80196ba:	490d      	ldr	r1, [pc, #52]	@ (80196f0 <GET_MUSER+0x84>)
 80196bc:	6878      	ldr	r0, [r7, #4]
 80196be:	f005 fd04 	bl	801f0ca <strcpy>
			printc(MinDelay, "MUSER: %s\n", Rconfig.MUSER);
 80196c2:	4b0d      	ldr	r3, [pc, #52]	@ (80196f8 <GET_MUSER+0x8c>)
 80196c4:	689b      	ldr	r3, [r3, #8]
 80196c6:	461a      	mov	r2, r3
 80196c8:	490c      	ldr	r1, [pc, #48]	@ (80196fc <GET_MUSER+0x90>)
 80196ca:	200a      	movs	r0, #10
 80196cc:	f7e8 f9a4 	bl	8001a18 <printc>
			return true;
 80196d0:	2301      	movs	r3, #1
 80196d2:	e009      	b.n	80196e8 <GET_MUSER+0x7c>
		} else {
			printc(MinDelay, "Memory allocation failed for MUSER!\n");
 80196d4:	490a      	ldr	r1, [pc, #40]	@ (8019700 <GET_MUSER+0x94>)
 80196d6:	200a      	movs	r0, #10
 80196d8:	f7e8 f99e 	bl	8001a18 <printc>
 80196dc:	e003      	b.n	80196e6 <GET_MUSER+0x7a>
		}
	} else {
		printc(MinDelay, "Failed to read MUSER from flash!\n");
 80196de:	4909      	ldr	r1, [pc, #36]	@ (8019704 <GET_MUSER+0x98>)
 80196e0:	200a      	movs	r0, #10
 80196e2:	f7e8 f999 	bl	8001a18 <printc>
	}
	return false;
 80196e6:	2300      	movs	r3, #0
}
 80196e8:	4618      	mov	r0, r3
 80196ea:	3708      	adds	r7, #8
 80196ec:	46bd      	mov	sp, r7
 80196ee:	bd80      	pop	{r7, pc}
 80196f0:	20014db8 	.word	0x20014db8
 80196f4:	0816a050 	.word	0x0816a050
 80196f8:	20014d28 	.word	0x20014d28
 80196fc:	080231ec 	.word	0x080231ec
 8019700:	080231f8 	.word	0x080231f8
 8019704:	08023220 	.word	0x08023220

08019708 <GET_MPASS>:

bool GET_MPASS(char *opBuffer) {
 8019708:	b580      	push	{r7, lr}
 801970a:	b082      	sub	sp, #8
 801970c:	af00      	add	r7, sp, #0
 801970e:	6078      	str	r0, [r7, #4]
	memset(RB, 0, sizeof(RB));
 8019710:	2264      	movs	r2, #100	@ 0x64
 8019712:	2100      	movs	r1, #0
 8019714:	481b      	ldr	r0, [pc, #108]	@ (8019784 <GET_MPASS+0x7c>)
 8019716:	f005 fb7b 	bl	801ee10 <memset>
	if (FLASH_Read_Buff(MQTT_PSW, RB, 16) == HAL_OK) {
 801971a:	2210      	movs	r2, #16
 801971c:	4919      	ldr	r1, [pc, #100]	@ (8019784 <GET_MPASS+0x7c>)
 801971e:	481a      	ldr	r0, [pc, #104]	@ (8019788 <GET_MPASS+0x80>)
 8019720:	f7fc ff76 	bl	8016610 <FLASH_Read_Buff>
 8019724:	4603      	mov	r3, r0
 8019726:	2b00      	cmp	r3, #0
 8019728:	d122      	bne.n	8019770 <GET_MPASS+0x68>
		Rconfig.MPASS = (char*) malloc(strlen(RB) + 1); // Allocate memory for string
 801972a:	4816      	ldr	r0, [pc, #88]	@ (8019784 <GET_MPASS+0x7c>)
 801972c:	f7e6 fdba 	bl	80002a4 <strlen>
 8019730:	4603      	mov	r3, r0
 8019732:	3301      	adds	r3, #1
 8019734:	4618      	mov	r0, r3
 8019736:	f003 fafb 	bl	801cd30 <malloc>
 801973a:	4603      	mov	r3, r0
 801973c:	461a      	mov	r2, r3
 801973e:	4b13      	ldr	r3, [pc, #76]	@ (801978c <GET_MPASS+0x84>)
 8019740:	60da      	str	r2, [r3, #12]
		if (Rconfig.MPASS != NULL) {
 8019742:	4b12      	ldr	r3, [pc, #72]	@ (801978c <GET_MPASS+0x84>)
 8019744:	68db      	ldr	r3, [r3, #12]
 8019746:	2b00      	cmp	r3, #0
 8019748:	d00d      	beq.n	8019766 <GET_MPASS+0x5e>
			strcpy(Rconfig.MPASS, RB);
 801974a:	4b10      	ldr	r3, [pc, #64]	@ (801978c <GET_MPASS+0x84>)
 801974c:	68db      	ldr	r3, [r3, #12]
 801974e:	490d      	ldr	r1, [pc, #52]	@ (8019784 <GET_MPASS+0x7c>)
 8019750:	4618      	mov	r0, r3
 8019752:	f005 fcba 	bl	801f0ca <strcpy>
			printc(MinDelay, "MPASS: %s\n", Rconfig.MPASS);
 8019756:	4b0d      	ldr	r3, [pc, #52]	@ (801978c <GET_MPASS+0x84>)
 8019758:	68db      	ldr	r3, [r3, #12]
 801975a:	461a      	mov	r2, r3
 801975c:	490c      	ldr	r1, [pc, #48]	@ (8019790 <GET_MPASS+0x88>)
 801975e:	200a      	movs	r0, #10
 8019760:	f7e8 f95a 	bl	8001a18 <printc>
 8019764:	e008      	b.n	8019778 <GET_MPASS+0x70>
		} else {
			printc(MinDelay, "Memory allocation failed for MPASS!\n");
 8019766:	490b      	ldr	r1, [pc, #44]	@ (8019794 <GET_MPASS+0x8c>)
 8019768:	200a      	movs	r0, #10
 801976a:	f7e8 f955 	bl	8001a18 <printc>
 801976e:	e003      	b.n	8019778 <GET_MPASS+0x70>
		}
	} else {
		printc(MinDelay, "Failed to read MPASS from flash!\n");
 8019770:	4909      	ldr	r1, [pc, #36]	@ (8019798 <GET_MPASS+0x90>)
 8019772:	200a      	movs	r0, #10
 8019774:	f7e8 f950 	bl	8001a18 <printc>
	}
}
 8019778:	bf00      	nop
 801977a:	4618      	mov	r0, r3
 801977c:	3708      	adds	r7, #8
 801977e:	46bd      	mov	sp, r7
 8019780:	bd80      	pop	{r7, pc}
 8019782:	bf00      	nop
 8019784:	20014db8 	.word	0x20014db8
 8019788:	0816a070 	.word	0x0816a070
 801978c:	20014d28 	.word	0x20014d28
 8019790:	08023244 	.word	0x08023244
 8019794:	08023250 	.word	0x08023250
 8019798:	08023278 	.word	0x08023278

0801979c <GET_CERT>:

bool GET_CERT(char *opBuffer) {
 801979c:	b580      	push	{r7, lr}
 801979e:	b082      	sub	sp, #8
 80197a0:	af00      	add	r7, sp, #0
 80197a2:	6078      	str	r0, [r7, #4]
	memset(RB, 0, sizeof(RB));
 80197a4:	2264      	movs	r2, #100	@ 0x64
 80197a6:	2100      	movs	r1, #0
 80197a8:	481b      	ldr	r0, [pc, #108]	@ (8019818 <GET_CERT+0x7c>)
 80197aa:	f005 fb31 	bl	801ee10 <memset>
	if (FLASH_Read_Buff(MQTT_CERTIFICATE, RB, 16) == HAL_OK) {
 80197ae:	2210      	movs	r2, #16
 80197b0:	4919      	ldr	r1, [pc, #100]	@ (8019818 <GET_CERT+0x7c>)
 80197b2:	481a      	ldr	r0, [pc, #104]	@ (801981c <GET_CERT+0x80>)
 80197b4:	f7fc ff2c 	bl	8016610 <FLASH_Read_Buff>
 80197b8:	4603      	mov	r3, r0
 80197ba:	2b00      	cmp	r3, #0
 80197bc:	d122      	bne.n	8019804 <GET_CERT+0x68>
		Rconfig.CERT = (char*) malloc(strlen(RB) + 1); // Allocate memory for string
 80197be:	4816      	ldr	r0, [pc, #88]	@ (8019818 <GET_CERT+0x7c>)
 80197c0:	f7e6 fd70 	bl	80002a4 <strlen>
 80197c4:	4603      	mov	r3, r0
 80197c6:	3301      	adds	r3, #1
 80197c8:	4618      	mov	r0, r3
 80197ca:	f003 fab1 	bl	801cd30 <malloc>
 80197ce:	4603      	mov	r3, r0
 80197d0:	461a      	mov	r2, r3
 80197d2:	4b13      	ldr	r3, [pc, #76]	@ (8019820 <GET_CERT+0x84>)
 80197d4:	611a      	str	r2, [r3, #16]
		if (Rconfig.CERT != NULL) {
 80197d6:	4b12      	ldr	r3, [pc, #72]	@ (8019820 <GET_CERT+0x84>)
 80197d8:	691b      	ldr	r3, [r3, #16]
 80197da:	2b00      	cmp	r3, #0
 80197dc:	d00d      	beq.n	80197fa <GET_CERT+0x5e>
			strcpy(Rconfig.CERT, RB);
 80197de:	4b10      	ldr	r3, [pc, #64]	@ (8019820 <GET_CERT+0x84>)
 80197e0:	691b      	ldr	r3, [r3, #16]
 80197e2:	490d      	ldr	r1, [pc, #52]	@ (8019818 <GET_CERT+0x7c>)
 80197e4:	4618      	mov	r0, r3
 80197e6:	f005 fc70 	bl	801f0ca <strcpy>
			printc(MinDelay, "CERT: %s\n", Rconfig.CERT);
 80197ea:	4b0d      	ldr	r3, [pc, #52]	@ (8019820 <GET_CERT+0x84>)
 80197ec:	691b      	ldr	r3, [r3, #16]
 80197ee:	461a      	mov	r2, r3
 80197f0:	490c      	ldr	r1, [pc, #48]	@ (8019824 <GET_CERT+0x88>)
 80197f2:	200a      	movs	r0, #10
 80197f4:	f7e8 f910 	bl	8001a18 <printc>
 80197f8:	e008      	b.n	801980c <GET_CERT+0x70>
		} else {
			printc(MinDelay, "Memory allocation failed for CERT!\n");
 80197fa:	490b      	ldr	r1, [pc, #44]	@ (8019828 <GET_CERT+0x8c>)
 80197fc:	200a      	movs	r0, #10
 80197fe:	f7e8 f90b 	bl	8001a18 <printc>
 8019802:	e003      	b.n	801980c <GET_CERT+0x70>
		}
	} else {
		printc(MinDelay, "Failed to read CERT from flash!\n");
 8019804:	4909      	ldr	r1, [pc, #36]	@ (801982c <GET_CERT+0x90>)
 8019806:	200a      	movs	r0, #10
 8019808:	f7e8 f906 	bl	8001a18 <printc>
	}
}
 801980c:	bf00      	nop
 801980e:	4618      	mov	r0, r3
 8019810:	3708      	adds	r7, #8
 8019812:	46bd      	mov	sp, r7
 8019814:	bd80      	pop	{r7, pc}
 8019816:	bf00      	nop
 8019818:	20014db8 	.word	0x20014db8
 801981c:	0816a090 	.word	0x0816a090
 8019820:	20014d28 	.word	0x20014d28
 8019824:	0802329c 	.word	0x0802329c
 8019828:	080232a8 	.word	0x080232a8
 801982c:	080232cc 	.word	0x080232cc

08019830 <GET_KEY>:

bool GET_KEY(char *opBuffer) {
 8019830:	b580      	push	{r7, lr}
 8019832:	b082      	sub	sp, #8
 8019834:	af00      	add	r7, sp, #0
 8019836:	6078      	str	r0, [r7, #4]
	memset(RB, 0, sizeof(RB));
 8019838:	2264      	movs	r2, #100	@ 0x64
 801983a:	2100      	movs	r1, #0
 801983c:	481b      	ldr	r0, [pc, #108]	@ (80198ac <GET_KEY+0x7c>)
 801983e:	f005 fae7 	bl	801ee10 <memset>
	if (FLASH_Read_Buff(MQTT_KEY, RB, 16) == HAL_OK) {
 8019842:	2210      	movs	r2, #16
 8019844:	4919      	ldr	r1, [pc, #100]	@ (80198ac <GET_KEY+0x7c>)
 8019846:	481a      	ldr	r0, [pc, #104]	@ (80198b0 <GET_KEY+0x80>)
 8019848:	f7fc fee2 	bl	8016610 <FLASH_Read_Buff>
 801984c:	4603      	mov	r3, r0
 801984e:	2b00      	cmp	r3, #0
 8019850:	d122      	bne.n	8019898 <GET_KEY+0x68>
		Rconfig.KEY = (char*) malloc(strlen(RB) + 1); // Allocate memory for string
 8019852:	4816      	ldr	r0, [pc, #88]	@ (80198ac <GET_KEY+0x7c>)
 8019854:	f7e6 fd26 	bl	80002a4 <strlen>
 8019858:	4603      	mov	r3, r0
 801985a:	3301      	adds	r3, #1
 801985c:	4618      	mov	r0, r3
 801985e:	f003 fa67 	bl	801cd30 <malloc>
 8019862:	4603      	mov	r3, r0
 8019864:	461a      	mov	r2, r3
 8019866:	4b13      	ldr	r3, [pc, #76]	@ (80198b4 <GET_KEY+0x84>)
 8019868:	615a      	str	r2, [r3, #20]
		if (Rconfig.KEY != NULL) {
 801986a:	4b12      	ldr	r3, [pc, #72]	@ (80198b4 <GET_KEY+0x84>)
 801986c:	695b      	ldr	r3, [r3, #20]
 801986e:	2b00      	cmp	r3, #0
 8019870:	d00d      	beq.n	801988e <GET_KEY+0x5e>
			strcpy(Rconfig.KEY, RB);
 8019872:	4b10      	ldr	r3, [pc, #64]	@ (80198b4 <GET_KEY+0x84>)
 8019874:	695b      	ldr	r3, [r3, #20]
 8019876:	490d      	ldr	r1, [pc, #52]	@ (80198ac <GET_KEY+0x7c>)
 8019878:	4618      	mov	r0, r3
 801987a:	f005 fc26 	bl	801f0ca <strcpy>
			printc(MinDelay, "KEY: %s\n", Rconfig.KEY);
 801987e:	4b0d      	ldr	r3, [pc, #52]	@ (80198b4 <GET_KEY+0x84>)
 8019880:	695b      	ldr	r3, [r3, #20]
 8019882:	461a      	mov	r2, r3
 8019884:	490c      	ldr	r1, [pc, #48]	@ (80198b8 <GET_KEY+0x88>)
 8019886:	200a      	movs	r0, #10
 8019888:	f7e8 f8c6 	bl	8001a18 <printc>
 801988c:	e008      	b.n	80198a0 <GET_KEY+0x70>
		} else {
			printc(MinDelay, "Memory allocation failed for KEY!\n");
 801988e:	490b      	ldr	r1, [pc, #44]	@ (80198bc <GET_KEY+0x8c>)
 8019890:	200a      	movs	r0, #10
 8019892:	f7e8 f8c1 	bl	8001a18 <printc>
 8019896:	e003      	b.n	80198a0 <GET_KEY+0x70>
		}
	} else {
		printc(MinDelay, "Failed to read KEY from flash!\n");
 8019898:	4909      	ldr	r1, [pc, #36]	@ (80198c0 <GET_KEY+0x90>)
 801989a:	200a      	movs	r0, #10
 801989c:	f7e8 f8bc 	bl	8001a18 <printc>
	}
}
 80198a0:	bf00      	nop
 80198a2:	4618      	mov	r0, r3
 80198a4:	3708      	adds	r7, #8
 80198a6:	46bd      	mov	sp, r7
 80198a8:	bd80      	pop	{r7, pc}
 80198aa:	bf00      	nop
 80198ac:	20014db8 	.word	0x20014db8
 80198b0:	0816a0b0 	.word	0x0816a0b0
 80198b4:	20014d28 	.word	0x20014d28
 80198b8:	080232f0 	.word	0x080232f0
 80198bc:	080232fc 	.word	0x080232fc
 80198c0:	08023320 	.word	0x08023320

080198c4 <GET_CA>:

bool GET_CA(char *opBuffer) {
 80198c4:	b580      	push	{r7, lr}
 80198c6:	b082      	sub	sp, #8
 80198c8:	af00      	add	r7, sp, #0
 80198ca:	6078      	str	r0, [r7, #4]
	memset(RB, 0, sizeof(RB));
 80198cc:	2264      	movs	r2, #100	@ 0x64
 80198ce:	2100      	movs	r1, #0
 80198d0:	481b      	ldr	r0, [pc, #108]	@ (8019940 <GET_CA+0x7c>)
 80198d2:	f005 fa9d 	bl	801ee10 <memset>
	if (FLASH_Read_Buff(MQTT_CERTIFICATE_AUTHORITY, RB, 16) == HAL_OK) {
 80198d6:	2210      	movs	r2, #16
 80198d8:	4919      	ldr	r1, [pc, #100]	@ (8019940 <GET_CA+0x7c>)
 80198da:	481a      	ldr	r0, [pc, #104]	@ (8019944 <GET_CA+0x80>)
 80198dc:	f7fc fe98 	bl	8016610 <FLASH_Read_Buff>
 80198e0:	4603      	mov	r3, r0
 80198e2:	2b00      	cmp	r3, #0
 80198e4:	d122      	bne.n	801992c <GET_CA+0x68>
		Rconfig.CA = (char*) malloc(strlen(RB) + 1); // Allocate memory for string
 80198e6:	4816      	ldr	r0, [pc, #88]	@ (8019940 <GET_CA+0x7c>)
 80198e8:	f7e6 fcdc 	bl	80002a4 <strlen>
 80198ec:	4603      	mov	r3, r0
 80198ee:	3301      	adds	r3, #1
 80198f0:	4618      	mov	r0, r3
 80198f2:	f003 fa1d 	bl	801cd30 <malloc>
 80198f6:	4603      	mov	r3, r0
 80198f8:	461a      	mov	r2, r3
 80198fa:	4b13      	ldr	r3, [pc, #76]	@ (8019948 <GET_CA+0x84>)
 80198fc:	619a      	str	r2, [r3, #24]
		if (Rconfig.CA != NULL) {
 80198fe:	4b12      	ldr	r3, [pc, #72]	@ (8019948 <GET_CA+0x84>)
 8019900:	699b      	ldr	r3, [r3, #24]
 8019902:	2b00      	cmp	r3, #0
 8019904:	d00d      	beq.n	8019922 <GET_CA+0x5e>
			strcpy(Rconfig.CA, RB);
 8019906:	4b10      	ldr	r3, [pc, #64]	@ (8019948 <GET_CA+0x84>)
 8019908:	699b      	ldr	r3, [r3, #24]
 801990a:	490d      	ldr	r1, [pc, #52]	@ (8019940 <GET_CA+0x7c>)
 801990c:	4618      	mov	r0, r3
 801990e:	f005 fbdc 	bl	801f0ca <strcpy>
			printc(MinDelay, "CA: %s\n", Rconfig.CA);
 8019912:	4b0d      	ldr	r3, [pc, #52]	@ (8019948 <GET_CA+0x84>)
 8019914:	699b      	ldr	r3, [r3, #24]
 8019916:	461a      	mov	r2, r3
 8019918:	490c      	ldr	r1, [pc, #48]	@ (801994c <GET_CA+0x88>)
 801991a:	200a      	movs	r0, #10
 801991c:	f7e8 f87c 	bl	8001a18 <printc>
 8019920:	e008      	b.n	8019934 <GET_CA+0x70>
		} else {
			printc(MinDelay, "Memory allocation failed for CA!\n");
 8019922:	490b      	ldr	r1, [pc, #44]	@ (8019950 <GET_CA+0x8c>)
 8019924:	200a      	movs	r0, #10
 8019926:	f7e8 f877 	bl	8001a18 <printc>
 801992a:	e003      	b.n	8019934 <GET_CA+0x70>
		}
	} else {
		printc(MinDelay, "Failed to read CA from flash!\n");
 801992c:	4909      	ldr	r1, [pc, #36]	@ (8019954 <GET_CA+0x90>)
 801992e:	200a      	movs	r0, #10
 8019930:	f7e8 f872 	bl	8001a18 <printc>
	}
}
 8019934:	bf00      	nop
 8019936:	4618      	mov	r0, r3
 8019938:	3708      	adds	r7, #8
 801993a:	46bd      	mov	sp, r7
 801993c:	bd80      	pop	{r7, pc}
 801993e:	bf00      	nop
 8019940:	20014db8 	.word	0x20014db8
 8019944:	0816a0e0 	.word	0x0816a0e0
 8019948:	20014d28 	.word	0x20014d28
 801994c:	08023340 	.word	0x08023340
 8019950:	08023348 	.word	0x08023348
 8019954:	0802336c 	.word	0x0802336c

08019958 <GET_IP2>:

bool GET_IP2(char *opBuffer) {
 8019958:	b580      	push	{r7, lr}
 801995a:	b082      	sub	sp, #8
 801995c:	af00      	add	r7, sp, #0
 801995e:	6078      	str	r0, [r7, #4]
	memset(RB, 0, sizeof(RB));
 8019960:	2264      	movs	r2, #100	@ 0x64
 8019962:	2100      	movs	r1, #0
 8019964:	481b      	ldr	r0, [pc, #108]	@ (80199d4 <GET_IP2+0x7c>)
 8019966:	f005 fa53 	bl	801ee10 <memset>
	if (FLASH_Read_Buff(FOTA_IP2, RB, 16) == HAL_OK) {
 801996a:	2210      	movs	r2, #16
 801996c:	4919      	ldr	r1, [pc, #100]	@ (80199d4 <GET_IP2+0x7c>)
 801996e:	481a      	ldr	r0, [pc, #104]	@ (80199d8 <GET_IP2+0x80>)
 8019970:	f7fc fe4e 	bl	8016610 <FLASH_Read_Buff>
 8019974:	4603      	mov	r3, r0
 8019976:	2b00      	cmp	r3, #0
 8019978:	d122      	bne.n	80199c0 <GET_IP2+0x68>
		Rconfig.IP2 = (char*) malloc(strlen(RB) + 1); // Allocate memory for string
 801997a:	4816      	ldr	r0, [pc, #88]	@ (80199d4 <GET_IP2+0x7c>)
 801997c:	f7e6 fc92 	bl	80002a4 <strlen>
 8019980:	4603      	mov	r3, r0
 8019982:	3301      	adds	r3, #1
 8019984:	4618      	mov	r0, r3
 8019986:	f003 f9d3 	bl	801cd30 <malloc>
 801998a:	4603      	mov	r3, r0
 801998c:	461a      	mov	r2, r3
 801998e:	4b13      	ldr	r3, [pc, #76]	@ (80199dc <GET_IP2+0x84>)
 8019990:	61da      	str	r2, [r3, #28]
		if (Rconfig.IP2 != NULL) {
 8019992:	4b12      	ldr	r3, [pc, #72]	@ (80199dc <GET_IP2+0x84>)
 8019994:	69db      	ldr	r3, [r3, #28]
 8019996:	2b00      	cmp	r3, #0
 8019998:	d00d      	beq.n	80199b6 <GET_IP2+0x5e>
			strcpy(Rconfig.IP2, RB);
 801999a:	4b10      	ldr	r3, [pc, #64]	@ (80199dc <GET_IP2+0x84>)
 801999c:	69db      	ldr	r3, [r3, #28]
 801999e:	490d      	ldr	r1, [pc, #52]	@ (80199d4 <GET_IP2+0x7c>)
 80199a0:	4618      	mov	r0, r3
 80199a2:	f005 fb92 	bl	801f0ca <strcpy>
			printc(MinDelay, "IP2: %s\n", Rconfig.IP2);
 80199a6:	4b0d      	ldr	r3, [pc, #52]	@ (80199dc <GET_IP2+0x84>)
 80199a8:	69db      	ldr	r3, [r3, #28]
 80199aa:	461a      	mov	r2, r3
 80199ac:	490c      	ldr	r1, [pc, #48]	@ (80199e0 <GET_IP2+0x88>)
 80199ae:	200a      	movs	r0, #10
 80199b0:	f7e8 f832 	bl	8001a18 <printc>
 80199b4:	e008      	b.n	80199c8 <GET_IP2+0x70>
		} else {
			printc(MinDelay, "Memory allocation failed for IP2!\n");
 80199b6:	490b      	ldr	r1, [pc, #44]	@ (80199e4 <GET_IP2+0x8c>)
 80199b8:	200a      	movs	r0, #10
 80199ba:	f7e8 f82d 	bl	8001a18 <printc>
 80199be:	e003      	b.n	80199c8 <GET_IP2+0x70>
		}
	} else {
		printc(MinDelay, "Failed to read IP2 from flash!\n");
 80199c0:	4909      	ldr	r1, [pc, #36]	@ (80199e8 <GET_IP2+0x90>)
 80199c2:	200a      	movs	r0, #10
 80199c4:	f7e8 f828 	bl	8001a18 <printc>
	}
}
 80199c8:	bf00      	nop
 80199ca:	4618      	mov	r0, r3
 80199cc:	3708      	adds	r7, #8
 80199ce:	46bd      	mov	sp, r7
 80199d0:	bd80      	pop	{r7, pc}
 80199d2:	bf00      	nop
 80199d4:	20014db8 	.word	0x20014db8
 80199d8:	0816a110 	.word	0x0816a110
 80199dc:	20014d28 	.word	0x20014d28
 80199e0:	0802338c 	.word	0x0802338c
 80199e4:	08023398 	.word	0x08023398
 80199e8:	080233bc 	.word	0x080233bc

080199ec <GET_PORT2>:

bool GET_PORT2(char *opBuffer) {
 80199ec:	b580      	push	{r7, lr}
 80199ee:	b082      	sub	sp, #8
 80199f0:	af00      	add	r7, sp, #0
 80199f2:	6078      	str	r0, [r7, #4]
	memset(RB, 0, sizeof(RB));
 80199f4:	2264      	movs	r2, #100	@ 0x64
 80199f6:	2100      	movs	r1, #0
 80199f8:	4816      	ldr	r0, [pc, #88]	@ (8019a54 <GET_PORT2+0x68>)
 80199fa:	f005 fa09 	bl	801ee10 <memset>
	if (FLASH_Read_Buff(FOTA_PORT2, RB, 16) == HAL_OK) {
 80199fe:	2210      	movs	r2, #16
 8019a00:	4914      	ldr	r1, [pc, #80]	@ (8019a54 <GET_PORT2+0x68>)
 8019a02:	4815      	ldr	r0, [pc, #84]	@ (8019a58 <GET_PORT2+0x6c>)
 8019a04:	f7fc fe04 	bl	8016610 <FLASH_Read_Buff>
 8019a08:	4603      	mov	r3, r0
 8019a0a:	2b00      	cmp	r3, #0
 8019a0c:	d119      	bne.n	8019a42 <GET_PORT2+0x56>
		Rconfig.IPPORT2 = (char*) malloc(strlen(RB) + 1);
 8019a0e:	4811      	ldr	r0, [pc, #68]	@ (8019a54 <GET_PORT2+0x68>)
 8019a10:	f7e6 fc48 	bl	80002a4 <strlen>
 8019a14:	4603      	mov	r3, r0
 8019a16:	3301      	adds	r3, #1
 8019a18:	4618      	mov	r0, r3
 8019a1a:	f003 f989 	bl	801cd30 <malloc>
 8019a1e:	4603      	mov	r3, r0
 8019a20:	461a      	mov	r2, r3
 8019a22:	4b0e      	ldr	r3, [pc, #56]	@ (8019a5c <GET_PORT2+0x70>)
 8019a24:	621a      	str	r2, [r3, #32]
		strcpy(Rconfig.IPPORT2, RB);
 8019a26:	4b0d      	ldr	r3, [pc, #52]	@ (8019a5c <GET_PORT2+0x70>)
 8019a28:	6a1b      	ldr	r3, [r3, #32]
 8019a2a:	490a      	ldr	r1, [pc, #40]	@ (8019a54 <GET_PORT2+0x68>)
 8019a2c:	4618      	mov	r0, r3
 8019a2e:	f005 fb4c 	bl	801f0ca <strcpy>
		printc(MinDelay, "PORT2: %d\n", Rconfig.IPPORT2);
 8019a32:	4b0a      	ldr	r3, [pc, #40]	@ (8019a5c <GET_PORT2+0x70>)
 8019a34:	6a1b      	ldr	r3, [r3, #32]
 8019a36:	461a      	mov	r2, r3
 8019a38:	4909      	ldr	r1, [pc, #36]	@ (8019a60 <GET_PORT2+0x74>)
 8019a3a:	200a      	movs	r0, #10
 8019a3c:	f7e7 ffec 	bl	8001a18 <printc>
 8019a40:	e003      	b.n	8019a4a <GET_PORT2+0x5e>
	} else {
		printc(MinDelay, "Failed to read PORT2 from flash!\n");
 8019a42:	4908      	ldr	r1, [pc, #32]	@ (8019a64 <GET_PORT2+0x78>)
 8019a44:	200a      	movs	r0, #10
 8019a46:	f7e7 ffe7 	bl	8001a18 <printc>
	}
}
 8019a4a:	bf00      	nop
 8019a4c:	4618      	mov	r0, r3
 8019a4e:	3708      	adds	r7, #8
 8019a50:	46bd      	mov	sp, r7
 8019a52:	bd80      	pop	{r7, pc}
 8019a54:	20014db8 	.word	0x20014db8
 8019a58:	0816a130 	.word	0x0816a130
 8019a5c:	20014d28 	.word	0x20014d28
 8019a60:	080233dc 	.word	0x080233dc
 8019a64:	080233e8 	.word	0x080233e8

08019a68 <GET_SKEY1>:

bool GET_SKEY1(char *opBuffer) {
 8019a68:	b580      	push	{r7, lr}
 8019a6a:	b082      	sub	sp, #8
 8019a6c:	af00      	add	r7, sp, #0
 8019a6e:	6078      	str	r0, [r7, #4]
	memset(RB, 0, sizeof(RB));
 8019a70:	2264      	movs	r2, #100	@ 0x64
 8019a72:	2100      	movs	r1, #0
 8019a74:	481b      	ldr	r0, [pc, #108]	@ (8019ae4 <GET_SKEY1+0x7c>)
 8019a76:	f005 f9cb 	bl	801ee10 <memset>
	if (FLASH_Read_Buff(FOTA_Static_Key1, RB, 32) == HAL_OK) {
 8019a7a:	2220      	movs	r2, #32
 8019a7c:	4919      	ldr	r1, [pc, #100]	@ (8019ae4 <GET_SKEY1+0x7c>)
 8019a7e:	481a      	ldr	r0, [pc, #104]	@ (8019ae8 <GET_SKEY1+0x80>)
 8019a80:	f7fc fdc6 	bl	8016610 <FLASH_Read_Buff>
 8019a84:	4603      	mov	r3, r0
 8019a86:	2b00      	cmp	r3, #0
 8019a88:	d122      	bne.n	8019ad0 <GET_SKEY1+0x68>
		Rconfig.SKEY1 = (char*) malloc(strlen(RB) + 1); // Allocate memory for string
 8019a8a:	4816      	ldr	r0, [pc, #88]	@ (8019ae4 <GET_SKEY1+0x7c>)
 8019a8c:	f7e6 fc0a 	bl	80002a4 <strlen>
 8019a90:	4603      	mov	r3, r0
 8019a92:	3301      	adds	r3, #1
 8019a94:	4618      	mov	r0, r3
 8019a96:	f003 f94b 	bl	801cd30 <malloc>
 8019a9a:	4603      	mov	r3, r0
 8019a9c:	461a      	mov	r2, r3
 8019a9e:	4b13      	ldr	r3, [pc, #76]	@ (8019aec <GET_SKEY1+0x84>)
 8019aa0:	625a      	str	r2, [r3, #36]	@ 0x24
		if (Rconfig.SKEY1 != NULL) {
 8019aa2:	4b12      	ldr	r3, [pc, #72]	@ (8019aec <GET_SKEY1+0x84>)
 8019aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019aa6:	2b00      	cmp	r3, #0
 8019aa8:	d00d      	beq.n	8019ac6 <GET_SKEY1+0x5e>
			strcpy(Rconfig.SKEY1, RB);
 8019aaa:	4b10      	ldr	r3, [pc, #64]	@ (8019aec <GET_SKEY1+0x84>)
 8019aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019aae:	490d      	ldr	r1, [pc, #52]	@ (8019ae4 <GET_SKEY1+0x7c>)
 8019ab0:	4618      	mov	r0, r3
 8019ab2:	f005 fb0a 	bl	801f0ca <strcpy>
			printc(MinDelay, "SKEY1: %s\n", Rconfig.SKEY1);
 8019ab6:	4b0d      	ldr	r3, [pc, #52]	@ (8019aec <GET_SKEY1+0x84>)
 8019ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019aba:	461a      	mov	r2, r3
 8019abc:	490c      	ldr	r1, [pc, #48]	@ (8019af0 <GET_SKEY1+0x88>)
 8019abe:	200a      	movs	r0, #10
 8019ac0:	f7e7 ffaa 	bl	8001a18 <printc>
 8019ac4:	e008      	b.n	8019ad8 <GET_SKEY1+0x70>
		} else {
			printc(MinDelay, "Memory allocation failed for SKEY1!\n");
 8019ac6:	490b      	ldr	r1, [pc, #44]	@ (8019af4 <GET_SKEY1+0x8c>)
 8019ac8:	200a      	movs	r0, #10
 8019aca:	f7e7 ffa5 	bl	8001a18 <printc>
 8019ace:	e003      	b.n	8019ad8 <GET_SKEY1+0x70>
		}
	} else {
		printc(MinDelay, "Failed to read SKEY1 from flash!\n");
 8019ad0:	4909      	ldr	r1, [pc, #36]	@ (8019af8 <GET_SKEY1+0x90>)
 8019ad2:	200a      	movs	r0, #10
 8019ad4:	f7e7 ffa0 	bl	8001a18 <printc>
	}
}
 8019ad8:	bf00      	nop
 8019ada:	4618      	mov	r0, r3
 8019adc:	3708      	adds	r7, #8
 8019ade:	46bd      	mov	sp, r7
 8019ae0:	bd80      	pop	{r7, pc}
 8019ae2:	bf00      	nop
 8019ae4:	20014db8 	.word	0x20014db8
 8019ae8:	0816a150 	.word	0x0816a150
 8019aec:	20014d28 	.word	0x20014d28
 8019af0:	0802340c 	.word	0x0802340c
 8019af4:	08023418 	.word	0x08023418
 8019af8:	08023440 	.word	0x08023440

08019afc <GET_SKEY2>:

bool GET_SKEY2(char *opBuffer) {
 8019afc:	b580      	push	{r7, lr}
 8019afe:	b082      	sub	sp, #8
 8019b00:	af00      	add	r7, sp, #0
 8019b02:	6078      	str	r0, [r7, #4]
	memset(RB, 0, sizeof(RB));
 8019b04:	2264      	movs	r2, #100	@ 0x64
 8019b06:	2100      	movs	r1, #0
 8019b08:	481b      	ldr	r0, [pc, #108]	@ (8019b78 <GET_SKEY2+0x7c>)
 8019b0a:	f005 f981 	bl	801ee10 <memset>
	if (FLASH_Read_Buff(FOTA_Static_Key2, RB, 32) == HAL_OK) {
 8019b0e:	2220      	movs	r2, #32
 8019b10:	4919      	ldr	r1, [pc, #100]	@ (8019b78 <GET_SKEY2+0x7c>)
 8019b12:	481a      	ldr	r0, [pc, #104]	@ (8019b7c <GET_SKEY2+0x80>)
 8019b14:	f7fc fd7c 	bl	8016610 <FLASH_Read_Buff>
 8019b18:	4603      	mov	r3, r0
 8019b1a:	2b00      	cmp	r3, #0
 8019b1c:	d122      	bne.n	8019b64 <GET_SKEY2+0x68>
		Rconfig.SKEY2 = (char*) malloc(strlen(RB) + 1); // Allocate memory for string
 8019b1e:	4816      	ldr	r0, [pc, #88]	@ (8019b78 <GET_SKEY2+0x7c>)
 8019b20:	f7e6 fbc0 	bl	80002a4 <strlen>
 8019b24:	4603      	mov	r3, r0
 8019b26:	3301      	adds	r3, #1
 8019b28:	4618      	mov	r0, r3
 8019b2a:	f003 f901 	bl	801cd30 <malloc>
 8019b2e:	4603      	mov	r3, r0
 8019b30:	461a      	mov	r2, r3
 8019b32:	4b13      	ldr	r3, [pc, #76]	@ (8019b80 <GET_SKEY2+0x84>)
 8019b34:	629a      	str	r2, [r3, #40]	@ 0x28
		if (Rconfig.SKEY2 != NULL) {
 8019b36:	4b12      	ldr	r3, [pc, #72]	@ (8019b80 <GET_SKEY2+0x84>)
 8019b38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019b3a:	2b00      	cmp	r3, #0
 8019b3c:	d00d      	beq.n	8019b5a <GET_SKEY2+0x5e>
			strcpy(Rconfig.SKEY2, RB);
 8019b3e:	4b10      	ldr	r3, [pc, #64]	@ (8019b80 <GET_SKEY2+0x84>)
 8019b40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019b42:	490d      	ldr	r1, [pc, #52]	@ (8019b78 <GET_SKEY2+0x7c>)
 8019b44:	4618      	mov	r0, r3
 8019b46:	f005 fac0 	bl	801f0ca <strcpy>
			printc(MinDelay, "SKEY2: %s\n", Rconfig.SKEY2);
 8019b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8019b80 <GET_SKEY2+0x84>)
 8019b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019b4e:	461a      	mov	r2, r3
 8019b50:	490c      	ldr	r1, [pc, #48]	@ (8019b84 <GET_SKEY2+0x88>)
 8019b52:	200a      	movs	r0, #10
 8019b54:	f7e7 ff60 	bl	8001a18 <printc>
 8019b58:	e008      	b.n	8019b6c <GET_SKEY2+0x70>
		} else {
			printc(MinDelay, "Memory allocation failed for SKEY2!\n");
 8019b5a:	490b      	ldr	r1, [pc, #44]	@ (8019b88 <GET_SKEY2+0x8c>)
 8019b5c:	200a      	movs	r0, #10
 8019b5e:	f7e7 ff5b 	bl	8001a18 <printc>
 8019b62:	e003      	b.n	8019b6c <GET_SKEY2+0x70>
		}
	} else {
		printc(MinDelay, "Failed to read SKEY2 from flash!\n");
 8019b64:	4909      	ldr	r1, [pc, #36]	@ (8019b8c <GET_SKEY2+0x90>)
 8019b66:	200a      	movs	r0, #10
 8019b68:	f7e7 ff56 	bl	8001a18 <printc>
	}
}
 8019b6c:	bf00      	nop
 8019b6e:	4618      	mov	r0, r3
 8019b70:	3708      	adds	r7, #8
 8019b72:	46bd      	mov	sp, r7
 8019b74:	bd80      	pop	{r7, pc}
 8019b76:	bf00      	nop
 8019b78:	20014db8 	.word	0x20014db8
 8019b7c:	0816a1a0 	.word	0x0816a1a0
 8019b80:	20014d28 	.word	0x20014d28
 8019b84:	08023464 	.word	0x08023464
 8019b88:	08023470 	.word	0x08023470
 8019b8c:	08023498 	.word	0x08023498

08019b90 <GET_SKEY3>:

bool GET_SKEY3(char *opBuffer) {
 8019b90:	b580      	push	{r7, lr}
 8019b92:	b082      	sub	sp, #8
 8019b94:	af00      	add	r7, sp, #0
 8019b96:	6078      	str	r0, [r7, #4]
	memset(RB, 0, sizeof(RB));
 8019b98:	2264      	movs	r2, #100	@ 0x64
 8019b9a:	2100      	movs	r1, #0
 8019b9c:	481b      	ldr	r0, [pc, #108]	@ (8019c0c <GET_SKEY3+0x7c>)
 8019b9e:	f005 f937 	bl	801ee10 <memset>
	if (FLASH_Read_Buff(FOTA_Static_Key3, RB, 32) == HAL_OK) {
 8019ba2:	2220      	movs	r2, #32
 8019ba4:	4919      	ldr	r1, [pc, #100]	@ (8019c0c <GET_SKEY3+0x7c>)
 8019ba6:	481a      	ldr	r0, [pc, #104]	@ (8019c10 <GET_SKEY3+0x80>)
 8019ba8:	f7fc fd32 	bl	8016610 <FLASH_Read_Buff>
 8019bac:	4603      	mov	r3, r0
 8019bae:	2b00      	cmp	r3, #0
 8019bb0:	d122      	bne.n	8019bf8 <GET_SKEY3+0x68>
		Rconfig.SKEY3 = (char*) malloc(strlen(RB) + 1); // Allocate memory for string
 8019bb2:	4816      	ldr	r0, [pc, #88]	@ (8019c0c <GET_SKEY3+0x7c>)
 8019bb4:	f7e6 fb76 	bl	80002a4 <strlen>
 8019bb8:	4603      	mov	r3, r0
 8019bba:	3301      	adds	r3, #1
 8019bbc:	4618      	mov	r0, r3
 8019bbe:	f003 f8b7 	bl	801cd30 <malloc>
 8019bc2:	4603      	mov	r3, r0
 8019bc4:	461a      	mov	r2, r3
 8019bc6:	4b13      	ldr	r3, [pc, #76]	@ (8019c14 <GET_SKEY3+0x84>)
 8019bc8:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (Rconfig.SKEY3 != NULL) {
 8019bca:	4b12      	ldr	r3, [pc, #72]	@ (8019c14 <GET_SKEY3+0x84>)
 8019bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019bce:	2b00      	cmp	r3, #0
 8019bd0:	d00d      	beq.n	8019bee <GET_SKEY3+0x5e>
			strcpy(Rconfig.SKEY3, RB);
 8019bd2:	4b10      	ldr	r3, [pc, #64]	@ (8019c14 <GET_SKEY3+0x84>)
 8019bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019bd6:	490d      	ldr	r1, [pc, #52]	@ (8019c0c <GET_SKEY3+0x7c>)
 8019bd8:	4618      	mov	r0, r3
 8019bda:	f005 fa76 	bl	801f0ca <strcpy>
			printc(MinDelay, "SKEY3: %s\n", Rconfig.SKEY3);
 8019bde:	4b0d      	ldr	r3, [pc, #52]	@ (8019c14 <GET_SKEY3+0x84>)
 8019be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019be2:	461a      	mov	r2, r3
 8019be4:	490c      	ldr	r1, [pc, #48]	@ (8019c18 <GET_SKEY3+0x88>)
 8019be6:	200a      	movs	r0, #10
 8019be8:	f7e7 ff16 	bl	8001a18 <printc>
 8019bec:	e008      	b.n	8019c00 <GET_SKEY3+0x70>
		} else {
			printc(MinDelay, "Memory allocation failed for SKEY3!\n");
 8019bee:	490b      	ldr	r1, [pc, #44]	@ (8019c1c <GET_SKEY3+0x8c>)
 8019bf0:	200a      	movs	r0, #10
 8019bf2:	f7e7 ff11 	bl	8001a18 <printc>
 8019bf6:	e003      	b.n	8019c00 <GET_SKEY3+0x70>
		}
	} else {
		printc(MinDelay, "Failed to read SKEY3 from flash!\n");
 8019bf8:	4909      	ldr	r1, [pc, #36]	@ (8019c20 <GET_SKEY3+0x90>)
 8019bfa:	200a      	movs	r0, #10
 8019bfc:	f7e7 ff0c 	bl	8001a18 <printc>
	}
}
 8019c00:	bf00      	nop
 8019c02:	4618      	mov	r0, r3
 8019c04:	3708      	adds	r7, #8
 8019c06:	46bd      	mov	sp, r7
 8019c08:	bd80      	pop	{r7, pc}
 8019c0a:	bf00      	nop
 8019c0c:	20014db8 	.word	0x20014db8
 8019c10:	0816a1e0 	.word	0x0816a1e0
 8019c14:	20014d28 	.word	0x20014d28
 8019c18:	080234bc 	.word	0x080234bc
 8019c1c:	080234c8 	.word	0x080234c8
 8019c20:	080234f0 	.word	0x080234f0

08019c24 <GET_APN>:

bool GET_APN(char *opBuffer) {
 8019c24:	b580      	push	{r7, lr}
 8019c26:	b082      	sub	sp, #8
 8019c28:	af00      	add	r7, sp, #0
 8019c2a:	6078      	str	r0, [r7, #4]
	memset(RB, 0, sizeof(RB));
 8019c2c:	2264      	movs	r2, #100	@ 0x64
 8019c2e:	2100      	movs	r1, #0
 8019c30:	481b      	ldr	r0, [pc, #108]	@ (8019ca0 <GET_APN+0x7c>)
 8019c32:	f005 f8ed 	bl	801ee10 <memset>
	if (FLASH_Read_Buff(APN, RB, 16) == HAL_OK) {
 8019c36:	2210      	movs	r2, #16
 8019c38:	4919      	ldr	r1, [pc, #100]	@ (8019ca0 <GET_APN+0x7c>)
 8019c3a:	481a      	ldr	r0, [pc, #104]	@ (8019ca4 <GET_APN+0x80>)
 8019c3c:	f7fc fce8 	bl	8016610 <FLASH_Read_Buff>
 8019c40:	4603      	mov	r3, r0
 8019c42:	2b00      	cmp	r3, #0
 8019c44:	d122      	bne.n	8019c8c <GET_APN+0x68>
		Rconfig.DAPN = (char*) malloc(strlen(RB) + 1); // Allocate memory for string
 8019c46:	4816      	ldr	r0, [pc, #88]	@ (8019ca0 <GET_APN+0x7c>)
 8019c48:	f7e6 fb2c 	bl	80002a4 <strlen>
 8019c4c:	4603      	mov	r3, r0
 8019c4e:	3301      	adds	r3, #1
 8019c50:	4618      	mov	r0, r3
 8019c52:	f003 f86d 	bl	801cd30 <malloc>
 8019c56:	4603      	mov	r3, r0
 8019c58:	461a      	mov	r2, r3
 8019c5a:	4b13      	ldr	r3, [pc, #76]	@ (8019ca8 <GET_APN+0x84>)
 8019c5c:	631a      	str	r2, [r3, #48]	@ 0x30
		if (Rconfig.DAPN != NULL) {
 8019c5e:	4b12      	ldr	r3, [pc, #72]	@ (8019ca8 <GET_APN+0x84>)
 8019c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019c62:	2b00      	cmp	r3, #0
 8019c64:	d00d      	beq.n	8019c82 <GET_APN+0x5e>
			strcpy(Rconfig.DAPN, RB);
 8019c66:	4b10      	ldr	r3, [pc, #64]	@ (8019ca8 <GET_APN+0x84>)
 8019c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019c6a:	490d      	ldr	r1, [pc, #52]	@ (8019ca0 <GET_APN+0x7c>)
 8019c6c:	4618      	mov	r0, r3
 8019c6e:	f005 fa2c 	bl	801f0ca <strcpy>
			printc(MinDelay, "APN: %s\n", Rconfig.DAPN);
 8019c72:	4b0d      	ldr	r3, [pc, #52]	@ (8019ca8 <GET_APN+0x84>)
 8019c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019c76:	461a      	mov	r2, r3
 8019c78:	490c      	ldr	r1, [pc, #48]	@ (8019cac <GET_APN+0x88>)
 8019c7a:	200a      	movs	r0, #10
 8019c7c:	f7e7 fecc 	bl	8001a18 <printc>
 8019c80:	e008      	b.n	8019c94 <GET_APN+0x70>
		} else {
			printc(MinDelay, "Memory allocation failed for APN!\n");
 8019c82:	490b      	ldr	r1, [pc, #44]	@ (8019cb0 <GET_APN+0x8c>)
 8019c84:	200a      	movs	r0, #10
 8019c86:	f7e7 fec7 	bl	8001a18 <printc>
 8019c8a:	e003      	b.n	8019c94 <GET_APN+0x70>
		}
	} else {
		printc(MinDelay, "Failed to read APN from flash!\n");
 8019c8c:	4909      	ldr	r1, [pc, #36]	@ (8019cb4 <GET_APN+0x90>)
 8019c8e:	200a      	movs	r0, #10
 8019c90:	f7e7 fec2 	bl	8001a18 <printc>
	}
}
 8019c94:	bf00      	nop
 8019c96:	4618      	mov	r0, r3
 8019c98:	3708      	adds	r7, #8
 8019c9a:	46bd      	mov	sp, r7
 8019c9c:	bd80      	pop	{r7, pc}
 8019c9e:	bf00      	nop
 8019ca0:	20014db8 	.word	0x20014db8
 8019ca4:	0816a220 	.word	0x0816a220
 8019ca8:	20014d28 	.word	0x20014d28
 8019cac:	08023514 	.word	0x08023514
 8019cb0:	08023520 	.word	0x08023520
 8019cb4:	08023544 	.word	0x08023544

08019cb8 <GET_ION>:

// Implement the remaining GET functions in a similar manner

bool GET_ION(char *opBuffer) {
 8019cb8:	b580      	push	{r7, lr}
 8019cba:	b082      	sub	sp, #8
 8019cbc:	af00      	add	r7, sp, #0
 8019cbe:	6078      	str	r0, [r7, #4]
	memset(RB, 0, sizeof(RB));
 8019cc0:	2264      	movs	r2, #100	@ 0x64
 8019cc2:	2100      	movs	r1, #0
 8019cc4:	4825      	ldr	r0, [pc, #148]	@ (8019d5c <GET_ION+0xa4>)
 8019cc6:	f005 f8a3 	bl	801ee10 <memset>
	if (FLASH_Read_Buff(ION_Sampling, RB, 16) == HAL_OK) {
 8019cca:	2210      	movs	r2, #16
 8019ccc:	4923      	ldr	r1, [pc, #140]	@ (8019d5c <GET_ION+0xa4>)
 8019cce:	4824      	ldr	r0, [pc, #144]	@ (8019d60 <GET_ION+0xa8>)
 8019cd0:	f7fc fc9e 	bl	8016610 <FLASH_Read_Buff>
 8019cd4:	4603      	mov	r3, r0
 8019cd6:	2b00      	cmp	r3, #0
 8019cd8:	d136      	bne.n	8019d48 <GET_ION+0x90>
		Rconfig.ION = (char*) malloc(strlen(RB) + 1); // Allocate memory for string
 8019cda:	4820      	ldr	r0, [pc, #128]	@ (8019d5c <GET_ION+0xa4>)
 8019cdc:	f7e6 fae2 	bl	80002a4 <strlen>
 8019ce0:	4603      	mov	r3, r0
 8019ce2:	3301      	adds	r3, #1
 8019ce4:	4618      	mov	r0, r3
 8019ce6:	f003 f823 	bl	801cd30 <malloc>
 8019cea:	4603      	mov	r3, r0
 8019cec:	461a      	mov	r2, r3
 8019cee:	4b1d      	ldr	r3, [pc, #116]	@ (8019d64 <GET_ION+0xac>)
 8019cf0:	635a      	str	r2, [r3, #52]	@ 0x34
		if (Rconfig.ION != NULL) {
 8019cf2:	4b1c      	ldr	r3, [pc, #112]	@ (8019d64 <GET_ION+0xac>)
 8019cf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019cf6:	2b00      	cmp	r3, #0
 8019cf8:	d021      	beq.n	8019d3e <GET_ION+0x86>
			strcpy(Rconfig.ION, RB);
 8019cfa:	4b1a      	ldr	r3, [pc, #104]	@ (8019d64 <GET_ION+0xac>)
 8019cfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019cfe:	4917      	ldr	r1, [pc, #92]	@ (8019d5c <GET_ION+0xa4>)
 8019d00:	4618      	mov	r0, r3
 8019d02:	f005 f9e2 	bl	801f0ca <strcpy>
			if (RB[0] == 255) {
 8019d06:	4b15      	ldr	r3, [pc, #84]	@ (8019d5c <GET_ION+0xa4>)
 8019d08:	781b      	ldrb	r3, [r3, #0]
 8019d0a:	2bff      	cmp	r3, #255	@ 0xff
 8019d0c:	d106      	bne.n	8019d1c <GET_ION+0x64>
				strcpy(Rconfig.ION, "08");
 8019d0e:	4b15      	ldr	r3, [pc, #84]	@ (8019d64 <GET_ION+0xac>)
 8019d10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019d12:	4a15      	ldr	r2, [pc, #84]	@ (8019d68 <GET_ION+0xb0>)
 8019d14:	8811      	ldrh	r1, [r2, #0]
 8019d16:	7892      	ldrb	r2, [r2, #2]
 8019d18:	8019      	strh	r1, [r3, #0]
 8019d1a:	709a      	strb	r2, [r3, #2]
			}
			setSampling(atoi(Rconfig.ION));
 8019d1c:	4b11      	ldr	r3, [pc, #68]	@ (8019d64 <GET_ION+0xac>)
 8019d1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019d20:	4618      	mov	r0, r3
 8019d22:	f003 f800 	bl	801cd26 <atoi>
 8019d26:	4603      	mov	r3, r0
 8019d28:	4618      	mov	r0, r3
 8019d2a:	f7e9 fbcd 	bl	80034c8 <setSampling>
			printc(MinDelay, "ION: %s\n", Rconfig.ION);
 8019d2e:	4b0d      	ldr	r3, [pc, #52]	@ (8019d64 <GET_ION+0xac>)
 8019d30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019d32:	461a      	mov	r2, r3
 8019d34:	490d      	ldr	r1, [pc, #52]	@ (8019d6c <GET_ION+0xb4>)
 8019d36:	200a      	movs	r0, #10
 8019d38:	f7e7 fe6e 	bl	8001a18 <printc>
 8019d3c:	e008      	b.n	8019d50 <GET_ION+0x98>
		} else {
			printc(MinDelay, "Memory allocation failed for ION!\n");
 8019d3e:	490c      	ldr	r1, [pc, #48]	@ (8019d70 <GET_ION+0xb8>)
 8019d40:	200a      	movs	r0, #10
 8019d42:	f7e7 fe69 	bl	8001a18 <printc>
 8019d46:	e003      	b.n	8019d50 <GET_ION+0x98>
		}
	} else {
		printc(MinDelay, "Failed to read ION from flash!\n");
 8019d48:	490a      	ldr	r1, [pc, #40]	@ (8019d74 <GET_ION+0xbc>)
 8019d4a:	200a      	movs	r0, #10
 8019d4c:	f7e7 fe64 	bl	8001a18 <printc>
	}
}
 8019d50:	bf00      	nop
 8019d52:	4618      	mov	r0, r3
 8019d54:	3708      	adds	r7, #8
 8019d56:	46bd      	mov	sp, r7
 8019d58:	bd80      	pop	{r7, pc}
 8019d5a:	bf00      	nop
 8019d5c:	20014db8 	.word	0x20014db8
 8019d60:	0816a250 	.word	0x0816a250
 8019d64:	20014d28 	.word	0x20014d28
 8019d68:	08023564 	.word	0x08023564
 8019d6c:	08023568 	.word	0x08023568
 8019d70:	08023574 	.word	0x08023574
 8019d74:	08023598 	.word	0x08023598

08019d78 <GET_NSAM>:

bool GET_NSAM(char *opBuffer) {
 8019d78:	b580      	push	{r7, lr}
 8019d7a:	b082      	sub	sp, #8
 8019d7c:	af00      	add	r7, sp, #0
 8019d7e:	6078      	str	r0, [r7, #4]
	memset(RB, 0, sizeof(RB));
 8019d80:	2264      	movs	r2, #100	@ 0x64
 8019d82:	2100      	movs	r1, #0
 8019d84:	481b      	ldr	r0, [pc, #108]	@ (8019df4 <GET_NSAM+0x7c>)
 8019d86:	f005 f843 	bl	801ee10 <memset>
	if (FLASH_Read_Buff(NO_OF_Sampling, RB, 16) == HAL_OK) {
 8019d8a:	2210      	movs	r2, #16
 8019d8c:	4919      	ldr	r1, [pc, #100]	@ (8019df4 <GET_NSAM+0x7c>)
 8019d8e:	481a      	ldr	r0, [pc, #104]	@ (8019df8 <GET_NSAM+0x80>)
 8019d90:	f7fc fc3e 	bl	8016610 <FLASH_Read_Buff>
 8019d94:	4603      	mov	r3, r0
 8019d96:	2b00      	cmp	r3, #0
 8019d98:	d122      	bne.n	8019de0 <GET_NSAM+0x68>
		Rconfig.NSAM = (char*) malloc(strlen(RB) + 1); // Allocate memory for string
 8019d9a:	4816      	ldr	r0, [pc, #88]	@ (8019df4 <GET_NSAM+0x7c>)
 8019d9c:	f7e6 fa82 	bl	80002a4 <strlen>
 8019da0:	4603      	mov	r3, r0
 8019da2:	3301      	adds	r3, #1
 8019da4:	4618      	mov	r0, r3
 8019da6:	f002 ffc3 	bl	801cd30 <malloc>
 8019daa:	4603      	mov	r3, r0
 8019dac:	461a      	mov	r2, r3
 8019dae:	4b13      	ldr	r3, [pc, #76]	@ (8019dfc <GET_NSAM+0x84>)
 8019db0:	639a      	str	r2, [r3, #56]	@ 0x38
		if (Rconfig.NSAM != NULL) {
 8019db2:	4b12      	ldr	r3, [pc, #72]	@ (8019dfc <GET_NSAM+0x84>)
 8019db4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019db6:	2b00      	cmp	r3, #0
 8019db8:	d00d      	beq.n	8019dd6 <GET_NSAM+0x5e>
			strcpy(Rconfig.NSAM, RB);
 8019dba:	4b10      	ldr	r3, [pc, #64]	@ (8019dfc <GET_NSAM+0x84>)
 8019dbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019dbe:	490d      	ldr	r1, [pc, #52]	@ (8019df4 <GET_NSAM+0x7c>)
 8019dc0:	4618      	mov	r0, r3
 8019dc2:	f005 f982 	bl	801f0ca <strcpy>
			printc(MinDelay, "NSAM: %s\n", Rconfig.NSAM);
 8019dc6:	4b0d      	ldr	r3, [pc, #52]	@ (8019dfc <GET_NSAM+0x84>)
 8019dc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019dca:	461a      	mov	r2, r3
 8019dcc:	490c      	ldr	r1, [pc, #48]	@ (8019e00 <GET_NSAM+0x88>)
 8019dce:	200a      	movs	r0, #10
 8019dd0:	f7e7 fe22 	bl	8001a18 <printc>
 8019dd4:	e008      	b.n	8019de8 <GET_NSAM+0x70>
		} else {
			printc(MinDelay, "Memory allocation failed for NSAM!\n");
 8019dd6:	490b      	ldr	r1, [pc, #44]	@ (8019e04 <GET_NSAM+0x8c>)
 8019dd8:	200a      	movs	r0, #10
 8019dda:	f7e7 fe1d 	bl	8001a18 <printc>
 8019dde:	e003      	b.n	8019de8 <GET_NSAM+0x70>
		}
	} else {
		printc(MinDelay, "Failed to read NSAM from flash!\n");
 8019de0:	4909      	ldr	r1, [pc, #36]	@ (8019e08 <GET_NSAM+0x90>)
 8019de2:	200a      	movs	r0, #10
 8019de4:	f7e7 fe18 	bl	8001a18 <printc>
	}
}
 8019de8:	bf00      	nop
 8019dea:	4618      	mov	r0, r3
 8019dec:	3708      	adds	r7, #8
 8019dee:	46bd      	mov	sp, r7
 8019df0:	bd80      	pop	{r7, pc}
 8019df2:	bf00      	nop
 8019df4:	20014db8 	.word	0x20014db8
 8019df8:	0816a270 	.word	0x0816a270
 8019dfc:	20014d28 	.word	0x20014d28
 8019e00:	080235b8 	.word	0x080235b8
 8019e04:	080235c4 	.word	0x080235c4
 8019e08:	080235e8 	.word	0x080235e8

08019e0c <GET_HA>:

bool GET_HA(char *opBuffer) {
 8019e0c:	b580      	push	{r7, lr}
 8019e0e:	b082      	sub	sp, #8
 8019e10:	af00      	add	r7, sp, #0
 8019e12:	6078      	str	r0, [r7, #4]
	memset(RB, 0, sizeof(RB));
 8019e14:	2264      	movs	r2, #100	@ 0x64
 8019e16:	2100      	movs	r1, #0
 8019e18:	481b      	ldr	r0, [pc, #108]	@ (8019e88 <GET_HA+0x7c>)
 8019e1a:	f004 fff9 	bl	801ee10 <memset>
	if (FLASH_Read_Buff(HARSH_ACC_TH, RB, 16) == HAL_OK) {
 8019e1e:	2210      	movs	r2, #16
 8019e20:	4919      	ldr	r1, [pc, #100]	@ (8019e88 <GET_HA+0x7c>)
 8019e22:	481a      	ldr	r0, [pc, #104]	@ (8019e8c <GET_HA+0x80>)
 8019e24:	f7fc fbf4 	bl	8016610 <FLASH_Read_Buff>
 8019e28:	4603      	mov	r3, r0
 8019e2a:	2b00      	cmp	r3, #0
 8019e2c:	d122      	bne.n	8019e74 <GET_HA+0x68>
		Rconfig.HA = (char*) malloc(strlen(RB) + 1); // Allocate memory for string
 8019e2e:	4816      	ldr	r0, [pc, #88]	@ (8019e88 <GET_HA+0x7c>)
 8019e30:	f7e6 fa38 	bl	80002a4 <strlen>
 8019e34:	4603      	mov	r3, r0
 8019e36:	3301      	adds	r3, #1
 8019e38:	4618      	mov	r0, r3
 8019e3a:	f002 ff79 	bl	801cd30 <malloc>
 8019e3e:	4603      	mov	r3, r0
 8019e40:	461a      	mov	r2, r3
 8019e42:	4b13      	ldr	r3, [pc, #76]	@ (8019e90 <GET_HA+0x84>)
 8019e44:	63da      	str	r2, [r3, #60]	@ 0x3c
		if (Rconfig.HA != NULL) {
 8019e46:	4b12      	ldr	r3, [pc, #72]	@ (8019e90 <GET_HA+0x84>)
 8019e48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019e4a:	2b00      	cmp	r3, #0
 8019e4c:	d00d      	beq.n	8019e6a <GET_HA+0x5e>
			strcpy(Rconfig.HA, RB);
 8019e4e:	4b10      	ldr	r3, [pc, #64]	@ (8019e90 <GET_HA+0x84>)
 8019e50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019e52:	490d      	ldr	r1, [pc, #52]	@ (8019e88 <GET_HA+0x7c>)
 8019e54:	4618      	mov	r0, r3
 8019e56:	f005 f938 	bl	801f0ca <strcpy>
			printc(MinDelay, "HA: %s\n", Rconfig.HA);
 8019e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8019e90 <GET_HA+0x84>)
 8019e5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019e5e:	461a      	mov	r2, r3
 8019e60:	490c      	ldr	r1, [pc, #48]	@ (8019e94 <GET_HA+0x88>)
 8019e62:	200a      	movs	r0, #10
 8019e64:	f7e7 fdd8 	bl	8001a18 <printc>
 8019e68:	e008      	b.n	8019e7c <GET_HA+0x70>
		} else {
			printc(MinDelay, "Memory allocation failed for HA!\n");
 8019e6a:	490b      	ldr	r1, [pc, #44]	@ (8019e98 <GET_HA+0x8c>)
 8019e6c:	200a      	movs	r0, #10
 8019e6e:	f7e7 fdd3 	bl	8001a18 <printc>
 8019e72:	e003      	b.n	8019e7c <GET_HA+0x70>
		}
	} else {
		printc(MinDelay, "Failed to read HA from flash!\n");
 8019e74:	4909      	ldr	r1, [pc, #36]	@ (8019e9c <GET_HA+0x90>)
 8019e76:	200a      	movs	r0, #10
 8019e78:	f7e7 fdce 	bl	8001a18 <printc>
	}
}
 8019e7c:	bf00      	nop
 8019e7e:	4618      	mov	r0, r3
 8019e80:	3708      	adds	r7, #8
 8019e82:	46bd      	mov	sp, r7
 8019e84:	bd80      	pop	{r7, pc}
 8019e86:	bf00      	nop
 8019e88:	20014db8 	.word	0x20014db8
 8019e8c:	0816a290 	.word	0x0816a290
 8019e90:	20014d28 	.word	0x20014d28
 8019e94:	0802360c 	.word	0x0802360c
 8019e98:	08023614 	.word	0x08023614
 8019e9c:	08023638 	.word	0x08023638

08019ea0 <GET_HB>:

bool GET_HB(char *opBuffer) {
 8019ea0:	b580      	push	{r7, lr}
 8019ea2:	b082      	sub	sp, #8
 8019ea4:	af00      	add	r7, sp, #0
 8019ea6:	6078      	str	r0, [r7, #4]
	memset(RB, 0, sizeof(RB));
 8019ea8:	2264      	movs	r2, #100	@ 0x64
 8019eaa:	2100      	movs	r1, #0
 8019eac:	481b      	ldr	r0, [pc, #108]	@ (8019f1c <GET_HB+0x7c>)
 8019eae:	f004 ffaf 	bl	801ee10 <memset>
	if (FLASH_Read_Buff(HARSH_DEACC_TH, RB, 16) == HAL_OK) {
 8019eb2:	2210      	movs	r2, #16
 8019eb4:	4919      	ldr	r1, [pc, #100]	@ (8019f1c <GET_HB+0x7c>)
 8019eb6:	481a      	ldr	r0, [pc, #104]	@ (8019f20 <GET_HB+0x80>)
 8019eb8:	f7fc fbaa 	bl	8016610 <FLASH_Read_Buff>
 8019ebc:	4603      	mov	r3, r0
 8019ebe:	2b00      	cmp	r3, #0
 8019ec0:	d122      	bne.n	8019f08 <GET_HB+0x68>
		Rconfig.HB = (char*) malloc(strlen(RB) + 1); // Allocate memory for string
 8019ec2:	4816      	ldr	r0, [pc, #88]	@ (8019f1c <GET_HB+0x7c>)
 8019ec4:	f7e6 f9ee 	bl	80002a4 <strlen>
 8019ec8:	4603      	mov	r3, r0
 8019eca:	3301      	adds	r3, #1
 8019ecc:	4618      	mov	r0, r3
 8019ece:	f002 ff2f 	bl	801cd30 <malloc>
 8019ed2:	4603      	mov	r3, r0
 8019ed4:	461a      	mov	r2, r3
 8019ed6:	4b13      	ldr	r3, [pc, #76]	@ (8019f24 <GET_HB+0x84>)
 8019ed8:	641a      	str	r2, [r3, #64]	@ 0x40
		if (Rconfig.HB != NULL) {
 8019eda:	4b12      	ldr	r3, [pc, #72]	@ (8019f24 <GET_HB+0x84>)
 8019edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019ede:	2b00      	cmp	r3, #0
 8019ee0:	d00d      	beq.n	8019efe <GET_HB+0x5e>
			strcpy(Rconfig.HB, RB);
 8019ee2:	4b10      	ldr	r3, [pc, #64]	@ (8019f24 <GET_HB+0x84>)
 8019ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019ee6:	490d      	ldr	r1, [pc, #52]	@ (8019f1c <GET_HB+0x7c>)
 8019ee8:	4618      	mov	r0, r3
 8019eea:	f005 f8ee 	bl	801f0ca <strcpy>
			printc(MinDelay, "HB: %s\n", Rconfig.HB);
 8019eee:	4b0d      	ldr	r3, [pc, #52]	@ (8019f24 <GET_HB+0x84>)
 8019ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019ef2:	461a      	mov	r2, r3
 8019ef4:	490c      	ldr	r1, [pc, #48]	@ (8019f28 <GET_HB+0x88>)
 8019ef6:	200a      	movs	r0, #10
 8019ef8:	f7e7 fd8e 	bl	8001a18 <printc>
 8019efc:	e008      	b.n	8019f10 <GET_HB+0x70>
		} else {
			printc(MinDelay, "Memory allocation failed for HB!\n");
 8019efe:	490b      	ldr	r1, [pc, #44]	@ (8019f2c <GET_HB+0x8c>)
 8019f00:	200a      	movs	r0, #10
 8019f02:	f7e7 fd89 	bl	8001a18 <printc>
 8019f06:	e003      	b.n	8019f10 <GET_HB+0x70>
		}
	} else {
		printc(MinDelay, "Failed to read HB from flash!\n");
 8019f08:	4909      	ldr	r1, [pc, #36]	@ (8019f30 <GET_HB+0x90>)
 8019f0a:	200a      	movs	r0, #10
 8019f0c:	f7e7 fd84 	bl	8001a18 <printc>
	}
}
 8019f10:	bf00      	nop
 8019f12:	4618      	mov	r0, r3
 8019f14:	3708      	adds	r7, #8
 8019f16:	46bd      	mov	sp, r7
 8019f18:	bd80      	pop	{r7, pc}
 8019f1a:	bf00      	nop
 8019f1c:	20014db8 	.word	0x20014db8
 8019f20:	0816a2b0 	.word	0x0816a2b0
 8019f24:	20014d28 	.word	0x20014d28
 8019f28:	08023658 	.word	0x08023658
 8019f2c:	08023660 	.word	0x08023660
 8019f30:	08023684 	.word	0x08023684

08019f34 <GET_HC>:

bool GET_HC(char *opBuffer) {
 8019f34:	b580      	push	{r7, lr}
 8019f36:	b082      	sub	sp, #8
 8019f38:	af00      	add	r7, sp, #0
 8019f3a:	6078      	str	r0, [r7, #4]
	memset(RB, 0, sizeof(RB));
 8019f3c:	2264      	movs	r2, #100	@ 0x64
 8019f3e:	2100      	movs	r1, #0
 8019f40:	481b      	ldr	r0, [pc, #108]	@ (8019fb0 <GET_HC+0x7c>)
 8019f42:	f004 ff65 	bl	801ee10 <memset>
	if (FLASH_Read_Buff(HARSH_CORNERING_TH, RB, 16) == HAL_OK) {
 8019f46:	2210      	movs	r2, #16
 8019f48:	4919      	ldr	r1, [pc, #100]	@ (8019fb0 <GET_HC+0x7c>)
 8019f4a:	481a      	ldr	r0, [pc, #104]	@ (8019fb4 <GET_HC+0x80>)
 8019f4c:	f7fc fb60 	bl	8016610 <FLASH_Read_Buff>
 8019f50:	4603      	mov	r3, r0
 8019f52:	2b00      	cmp	r3, #0
 8019f54:	d122      	bne.n	8019f9c <GET_HC+0x68>
		Rconfig.HC = (char*) malloc(strlen(RB) + 1); // Allocate memory for string
 8019f56:	4816      	ldr	r0, [pc, #88]	@ (8019fb0 <GET_HC+0x7c>)
 8019f58:	f7e6 f9a4 	bl	80002a4 <strlen>
 8019f5c:	4603      	mov	r3, r0
 8019f5e:	3301      	adds	r3, #1
 8019f60:	4618      	mov	r0, r3
 8019f62:	f002 fee5 	bl	801cd30 <malloc>
 8019f66:	4603      	mov	r3, r0
 8019f68:	461a      	mov	r2, r3
 8019f6a:	4b13      	ldr	r3, [pc, #76]	@ (8019fb8 <GET_HC+0x84>)
 8019f6c:	645a      	str	r2, [r3, #68]	@ 0x44
		if (Rconfig.HC != NULL) {
 8019f6e:	4b12      	ldr	r3, [pc, #72]	@ (8019fb8 <GET_HC+0x84>)
 8019f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019f72:	2b00      	cmp	r3, #0
 8019f74:	d00d      	beq.n	8019f92 <GET_HC+0x5e>
			strcpy(Rconfig.HC, RB);
 8019f76:	4b10      	ldr	r3, [pc, #64]	@ (8019fb8 <GET_HC+0x84>)
 8019f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019f7a:	490d      	ldr	r1, [pc, #52]	@ (8019fb0 <GET_HC+0x7c>)
 8019f7c:	4618      	mov	r0, r3
 8019f7e:	f005 f8a4 	bl	801f0ca <strcpy>
			printc(MinDelay, "HC: %s\n", Rconfig.HC);
 8019f82:	4b0d      	ldr	r3, [pc, #52]	@ (8019fb8 <GET_HC+0x84>)
 8019f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019f86:	461a      	mov	r2, r3
 8019f88:	490c      	ldr	r1, [pc, #48]	@ (8019fbc <GET_HC+0x88>)
 8019f8a:	200a      	movs	r0, #10
 8019f8c:	f7e7 fd44 	bl	8001a18 <printc>
 8019f90:	e008      	b.n	8019fa4 <GET_HC+0x70>
		} else {
			printc(MinDelay, "Memory allocation failed for HC!\n");
 8019f92:	490b      	ldr	r1, [pc, #44]	@ (8019fc0 <GET_HC+0x8c>)
 8019f94:	200a      	movs	r0, #10
 8019f96:	f7e7 fd3f 	bl	8001a18 <printc>
 8019f9a:	e003      	b.n	8019fa4 <GET_HC+0x70>
		}
	} else {
		printc(MinDelay, "Failed to read HC from flash!\n");
 8019f9c:	4909      	ldr	r1, [pc, #36]	@ (8019fc4 <GET_HC+0x90>)
 8019f9e:	200a      	movs	r0, #10
 8019fa0:	f7e7 fd3a 	bl	8001a18 <printc>
	}
}
 8019fa4:	bf00      	nop
 8019fa6:	4618      	mov	r0, r3
 8019fa8:	3708      	adds	r7, #8
 8019faa:	46bd      	mov	sp, r7
 8019fac:	bd80      	pop	{r7, pc}
 8019fae:	bf00      	nop
 8019fb0:	20014db8 	.word	0x20014db8
 8019fb4:	0816a2d0 	.word	0x0816a2d0
 8019fb8:	20014d28 	.word	0x20014d28
 8019fbc:	080236a4 	.word	0x080236a4
 8019fc0:	080236ac 	.word	0x080236ac
 8019fc4:	080236d0 	.word	0x080236d0

08019fc8 <GET_ACCOFFSET>:

bool GET_ACCOFFSET(char *opBuffer) {
 8019fc8:	b580      	push	{r7, lr}
 8019fca:	b082      	sub	sp, #8
 8019fcc:	af00      	add	r7, sp, #0
 8019fce:	6078      	str	r0, [r7, #4]
	memset(RB, 0, sizeof(RB));
 8019fd0:	2264      	movs	r2, #100	@ 0x64
 8019fd2:	2100      	movs	r1, #0
 8019fd4:	481b      	ldr	r0, [pc, #108]	@ (801a044 <GET_ACCOFFSET+0x7c>)
 8019fd6:	f004 ff1b 	bl	801ee10 <memset>
	if (FLASH_Read_Buff(SENSOR_OFFSET_CAL, RB, 16) == HAL_OK) {
 8019fda:	2210      	movs	r2, #16
 8019fdc:	4919      	ldr	r1, [pc, #100]	@ (801a044 <GET_ACCOFFSET+0x7c>)
 8019fde:	481a      	ldr	r0, [pc, #104]	@ (801a048 <GET_ACCOFFSET+0x80>)
 8019fe0:	f7fc fb16 	bl	8016610 <FLASH_Read_Buff>
 8019fe4:	4603      	mov	r3, r0
 8019fe6:	2b00      	cmp	r3, #0
 8019fe8:	d122      	bne.n	801a030 <GET_ACCOFFSET+0x68>
		Rconfig.ACCOFFSET = (char*) malloc(strlen(RB) + 1); // Allocate memory for string
 8019fea:	4816      	ldr	r0, [pc, #88]	@ (801a044 <GET_ACCOFFSET+0x7c>)
 8019fec:	f7e6 f95a 	bl	80002a4 <strlen>
 8019ff0:	4603      	mov	r3, r0
 8019ff2:	3301      	adds	r3, #1
 8019ff4:	4618      	mov	r0, r3
 8019ff6:	f002 fe9b 	bl	801cd30 <malloc>
 8019ffa:	4603      	mov	r3, r0
 8019ffc:	461a      	mov	r2, r3
 8019ffe:	4b13      	ldr	r3, [pc, #76]	@ (801a04c <GET_ACCOFFSET+0x84>)
 801a000:	649a      	str	r2, [r3, #72]	@ 0x48
		if (Rconfig.ACCOFFSET != NULL) {
 801a002:	4b12      	ldr	r3, [pc, #72]	@ (801a04c <GET_ACCOFFSET+0x84>)
 801a004:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a006:	2b00      	cmp	r3, #0
 801a008:	d00d      	beq.n	801a026 <GET_ACCOFFSET+0x5e>
			strcpy(Rconfig.ACCOFFSET, RB);
 801a00a:	4b10      	ldr	r3, [pc, #64]	@ (801a04c <GET_ACCOFFSET+0x84>)
 801a00c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a00e:	490d      	ldr	r1, [pc, #52]	@ (801a044 <GET_ACCOFFSET+0x7c>)
 801a010:	4618      	mov	r0, r3
 801a012:	f005 f85a 	bl	801f0ca <strcpy>
			printc(MinDelay, "ACCOFFSET: %s\n", Rconfig.ACCOFFSET);
 801a016:	4b0d      	ldr	r3, [pc, #52]	@ (801a04c <GET_ACCOFFSET+0x84>)
 801a018:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a01a:	461a      	mov	r2, r3
 801a01c:	490c      	ldr	r1, [pc, #48]	@ (801a050 <GET_ACCOFFSET+0x88>)
 801a01e:	200a      	movs	r0, #10
 801a020:	f7e7 fcfa 	bl	8001a18 <printc>
 801a024:	e008      	b.n	801a038 <GET_ACCOFFSET+0x70>
		} else {
			printc(MinDelay, "Memory allocation failed for ACCOFFSET!\n");
 801a026:	490b      	ldr	r1, [pc, #44]	@ (801a054 <GET_ACCOFFSET+0x8c>)
 801a028:	200a      	movs	r0, #10
 801a02a:	f7e7 fcf5 	bl	8001a18 <printc>
 801a02e:	e003      	b.n	801a038 <GET_ACCOFFSET+0x70>
		}
	} else {
		printc(MinDelay, "Failed to read ACCOFFSET from flash!\n");
 801a030:	4909      	ldr	r1, [pc, #36]	@ (801a058 <GET_ACCOFFSET+0x90>)
 801a032:	200a      	movs	r0, #10
 801a034:	f7e7 fcf0 	bl	8001a18 <printc>
	}
}
 801a038:	bf00      	nop
 801a03a:	4618      	mov	r0, r3
 801a03c:	3708      	adds	r7, #8
 801a03e:	46bd      	mov	sp, r7
 801a040:	bd80      	pop	{r7, pc}
 801a042:	bf00      	nop
 801a044:	20014db8 	.word	0x20014db8
 801a048:	0816a2f0 	.word	0x0816a2f0
 801a04c:	20014d28 	.word	0x20014d28
 801a050:	080236f0 	.word	0x080236f0
 801a054:	08023700 	.word	0x08023700
 801a058:	0802372c 	.word	0x0802372c

0801a05c <GET_USER>:

bool GET_USER(char *opBuffer) {
 801a05c:	b580      	push	{r7, lr}
 801a05e:	b082      	sub	sp, #8
 801a060:	af00      	add	r7, sp, #0
 801a062:	6078      	str	r0, [r7, #4]
	memset(RB, 0, sizeof(RB));
 801a064:	2264      	movs	r2, #100	@ 0x64
 801a066:	2100      	movs	r1, #0
 801a068:	481b      	ldr	r0, [pc, #108]	@ (801a0d8 <GET_USER+0x7c>)
 801a06a:	f004 fed1 	bl	801ee10 <memset>
	if (FLASH_Read_Buff(USERNAME, RB, 16) == HAL_OK) {
 801a06e:	2210      	movs	r2, #16
 801a070:	4919      	ldr	r1, [pc, #100]	@ (801a0d8 <GET_USER+0x7c>)
 801a072:	481a      	ldr	r0, [pc, #104]	@ (801a0dc <GET_USER+0x80>)
 801a074:	f7fc facc 	bl	8016610 <FLASH_Read_Buff>
 801a078:	4603      	mov	r3, r0
 801a07a:	2b00      	cmp	r3, #0
 801a07c:	d122      	bne.n	801a0c4 <GET_USER+0x68>
		Rconfig.USER = (char*) malloc(strlen(RB) + 1); // Allocate memory for string
 801a07e:	4816      	ldr	r0, [pc, #88]	@ (801a0d8 <GET_USER+0x7c>)
 801a080:	f7e6 f910 	bl	80002a4 <strlen>
 801a084:	4603      	mov	r3, r0
 801a086:	3301      	adds	r3, #1
 801a088:	4618      	mov	r0, r3
 801a08a:	f002 fe51 	bl	801cd30 <malloc>
 801a08e:	4603      	mov	r3, r0
 801a090:	461a      	mov	r2, r3
 801a092:	4b13      	ldr	r3, [pc, #76]	@ (801a0e0 <GET_USER+0x84>)
 801a094:	64da      	str	r2, [r3, #76]	@ 0x4c
		if (Rconfig.USER != NULL) {
 801a096:	4b12      	ldr	r3, [pc, #72]	@ (801a0e0 <GET_USER+0x84>)
 801a098:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801a09a:	2b00      	cmp	r3, #0
 801a09c:	d00d      	beq.n	801a0ba <GET_USER+0x5e>
			strcpy(Rconfig.USER, RB);
 801a09e:	4b10      	ldr	r3, [pc, #64]	@ (801a0e0 <GET_USER+0x84>)
 801a0a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801a0a2:	490d      	ldr	r1, [pc, #52]	@ (801a0d8 <GET_USER+0x7c>)
 801a0a4:	4618      	mov	r0, r3
 801a0a6:	f005 f810 	bl	801f0ca <strcpy>
			printc(MinDelay, "USER: %s\n", Rconfig.USER);
 801a0aa:	4b0d      	ldr	r3, [pc, #52]	@ (801a0e0 <GET_USER+0x84>)
 801a0ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801a0ae:	461a      	mov	r2, r3
 801a0b0:	490c      	ldr	r1, [pc, #48]	@ (801a0e4 <GET_USER+0x88>)
 801a0b2:	200a      	movs	r0, #10
 801a0b4:	f7e7 fcb0 	bl	8001a18 <printc>
 801a0b8:	e008      	b.n	801a0cc <GET_USER+0x70>
		} else {
			printc(MinDelay, "Memory allocation failed for USER!\n");
 801a0ba:	490b      	ldr	r1, [pc, #44]	@ (801a0e8 <GET_USER+0x8c>)
 801a0bc:	200a      	movs	r0, #10
 801a0be:	f7e7 fcab 	bl	8001a18 <printc>
 801a0c2:	e003      	b.n	801a0cc <GET_USER+0x70>
		}
	} else {
		printc(MinDelay, "Failed to read USER from flash!\n");
 801a0c4:	4909      	ldr	r1, [pc, #36]	@ (801a0ec <GET_USER+0x90>)
 801a0c6:	200a      	movs	r0, #10
 801a0c8:	f7e7 fca6 	bl	8001a18 <printc>
	}
}
 801a0cc:	bf00      	nop
 801a0ce:	4618      	mov	r0, r3
 801a0d0:	3708      	adds	r7, #8
 801a0d2:	46bd      	mov	sp, r7
 801a0d4:	bd80      	pop	{r7, pc}
 801a0d6:	bf00      	nop
 801a0d8:	20014db8 	.word	0x20014db8
 801a0dc:	0816a310 	.word	0x0816a310
 801a0e0:	20014d28 	.word	0x20014d28
 801a0e4:	08023754 	.word	0x08023754
 801a0e8:	08023760 	.word	0x08023760
 801a0ec:	08023784 	.word	0x08023784

0801a0f0 <GET_PASSWORD>:

bool GET_PASSWORD(char *opBuffer) {
 801a0f0:	b580      	push	{r7, lr}
 801a0f2:	b082      	sub	sp, #8
 801a0f4:	af00      	add	r7, sp, #0
 801a0f6:	6078      	str	r0, [r7, #4]
	memset(RB, 0, sizeof(RB));
 801a0f8:	2264      	movs	r2, #100	@ 0x64
 801a0fa:	2100      	movs	r1, #0
 801a0fc:	481b      	ldr	r0, [pc, #108]	@ (801a16c <GET_PASSWORD+0x7c>)
 801a0fe:	f004 fe87 	bl	801ee10 <memset>
	if (FLASH_Read_Buff(PASSWORD, RB, 16) == HAL_OK) {
 801a102:	2210      	movs	r2, #16
 801a104:	4919      	ldr	r1, [pc, #100]	@ (801a16c <GET_PASSWORD+0x7c>)
 801a106:	481a      	ldr	r0, [pc, #104]	@ (801a170 <GET_PASSWORD+0x80>)
 801a108:	f7fc fa82 	bl	8016610 <FLASH_Read_Buff>
 801a10c:	4603      	mov	r3, r0
 801a10e:	2b00      	cmp	r3, #0
 801a110:	d122      	bne.n	801a158 <GET_PASSWORD+0x68>
		Rconfig.PSWD = (char*) malloc(strlen(RB) + 1); // Allocate memory for string
 801a112:	4816      	ldr	r0, [pc, #88]	@ (801a16c <GET_PASSWORD+0x7c>)
 801a114:	f7e6 f8c6 	bl	80002a4 <strlen>
 801a118:	4603      	mov	r3, r0
 801a11a:	3301      	adds	r3, #1
 801a11c:	4618      	mov	r0, r3
 801a11e:	f002 fe07 	bl	801cd30 <malloc>
 801a122:	4603      	mov	r3, r0
 801a124:	461a      	mov	r2, r3
 801a126:	4b13      	ldr	r3, [pc, #76]	@ (801a174 <GET_PASSWORD+0x84>)
 801a128:	651a      	str	r2, [r3, #80]	@ 0x50
		if (Rconfig.PSWD != NULL) {
 801a12a:	4b12      	ldr	r3, [pc, #72]	@ (801a174 <GET_PASSWORD+0x84>)
 801a12c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a12e:	2b00      	cmp	r3, #0
 801a130:	d00d      	beq.n	801a14e <GET_PASSWORD+0x5e>
			strcpy(Rconfig.PSWD, RB);
 801a132:	4b10      	ldr	r3, [pc, #64]	@ (801a174 <GET_PASSWORD+0x84>)
 801a134:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a136:	490d      	ldr	r1, [pc, #52]	@ (801a16c <GET_PASSWORD+0x7c>)
 801a138:	4618      	mov	r0, r3
 801a13a:	f004 ffc6 	bl	801f0ca <strcpy>
			printc(MinDelay, "PASSWORD: %s\n", Rconfig.PSWD);
 801a13e:	4b0d      	ldr	r3, [pc, #52]	@ (801a174 <GET_PASSWORD+0x84>)
 801a140:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a142:	461a      	mov	r2, r3
 801a144:	490c      	ldr	r1, [pc, #48]	@ (801a178 <GET_PASSWORD+0x88>)
 801a146:	200a      	movs	r0, #10
 801a148:	f7e7 fc66 	bl	8001a18 <printc>
 801a14c:	e008      	b.n	801a160 <GET_PASSWORD+0x70>
		} else {
			printc(MinDelay, "Memory allocation failed for PASSWORD!\n");
 801a14e:	490b      	ldr	r1, [pc, #44]	@ (801a17c <GET_PASSWORD+0x8c>)
 801a150:	200a      	movs	r0, #10
 801a152:	f7e7 fc61 	bl	8001a18 <printc>
 801a156:	e003      	b.n	801a160 <GET_PASSWORD+0x70>
		}
	} else {
		printc(MinDelay, "Failed to read PASSWORD from flash!\n");
 801a158:	4909      	ldr	r1, [pc, #36]	@ (801a180 <GET_PASSWORD+0x90>)
 801a15a:	200a      	movs	r0, #10
 801a15c:	f7e7 fc5c 	bl	8001a18 <printc>
	}
}
 801a160:	bf00      	nop
 801a162:	4618      	mov	r0, r3
 801a164:	3708      	adds	r7, #8
 801a166:	46bd      	mov	sp, r7
 801a168:	bd80      	pop	{r7, pc}
 801a16a:	bf00      	nop
 801a16c:	20014db8 	.word	0x20014db8
 801a170:	0816a330 	.word	0x0816a330
 801a174:	20014d28 	.word	0x20014d28
 801a178:	080237a8 	.word	0x080237a8
 801a17c:	080237b8 	.word	0x080237b8
 801a180:	080237e0 	.word	0x080237e0

0801a184 <GET_VIN>:

bool GET_VIN(char *opBuffer) {
 801a184:	b580      	push	{r7, lr}
 801a186:	b082      	sub	sp, #8
 801a188:	af00      	add	r7, sp, #0
 801a18a:	6078      	str	r0, [r7, #4]
	memset(RB, 0, sizeof(RB));
 801a18c:	2264      	movs	r2, #100	@ 0x64
 801a18e:	2100      	movs	r1, #0
 801a190:	481b      	ldr	r0, [pc, #108]	@ (801a200 <GET_VIN+0x7c>)
 801a192:	f004 fe3d 	bl	801ee10 <memset>
	if (FLASH_Read_Buff(VECHILE_ID_NUM, RB, 16) == HAL_OK) {
 801a196:	2210      	movs	r2, #16
 801a198:	4919      	ldr	r1, [pc, #100]	@ (801a200 <GET_VIN+0x7c>)
 801a19a:	481a      	ldr	r0, [pc, #104]	@ (801a204 <GET_VIN+0x80>)
 801a19c:	f7fc fa38 	bl	8016610 <FLASH_Read_Buff>
 801a1a0:	4603      	mov	r3, r0
 801a1a2:	2b00      	cmp	r3, #0
 801a1a4:	d122      	bne.n	801a1ec <GET_VIN+0x68>
		Rconfig.VIN = (char*) malloc(strlen(RB) + 1); // Allocate memory for string
 801a1a6:	4816      	ldr	r0, [pc, #88]	@ (801a200 <GET_VIN+0x7c>)
 801a1a8:	f7e6 f87c 	bl	80002a4 <strlen>
 801a1ac:	4603      	mov	r3, r0
 801a1ae:	3301      	adds	r3, #1
 801a1b0:	4618      	mov	r0, r3
 801a1b2:	f002 fdbd 	bl	801cd30 <malloc>
 801a1b6:	4603      	mov	r3, r0
 801a1b8:	461a      	mov	r2, r3
 801a1ba:	4b13      	ldr	r3, [pc, #76]	@ (801a208 <GET_VIN+0x84>)
 801a1bc:	655a      	str	r2, [r3, #84]	@ 0x54
		if (Rconfig.VIN != NULL) {
 801a1be:	4b12      	ldr	r3, [pc, #72]	@ (801a208 <GET_VIN+0x84>)
 801a1c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801a1c2:	2b00      	cmp	r3, #0
 801a1c4:	d00d      	beq.n	801a1e2 <GET_VIN+0x5e>
			strcpy(Rconfig.VIN, RB);
 801a1c6:	4b10      	ldr	r3, [pc, #64]	@ (801a208 <GET_VIN+0x84>)
 801a1c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801a1ca:	490d      	ldr	r1, [pc, #52]	@ (801a200 <GET_VIN+0x7c>)
 801a1cc:	4618      	mov	r0, r3
 801a1ce:	f004 ff7c 	bl	801f0ca <strcpy>
			printc(MinDelay, "VIN: %s\n", Rconfig.VIN);
 801a1d2:	4b0d      	ldr	r3, [pc, #52]	@ (801a208 <GET_VIN+0x84>)
 801a1d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801a1d6:	461a      	mov	r2, r3
 801a1d8:	490c      	ldr	r1, [pc, #48]	@ (801a20c <GET_VIN+0x88>)
 801a1da:	200a      	movs	r0, #10
 801a1dc:	f7e7 fc1c 	bl	8001a18 <printc>
 801a1e0:	e008      	b.n	801a1f4 <GET_VIN+0x70>
		} else {
			printc(MinDelay, "Memory allocation failed for VIN!\n");
 801a1e2:	490b      	ldr	r1, [pc, #44]	@ (801a210 <GET_VIN+0x8c>)
 801a1e4:	200a      	movs	r0, #10
 801a1e6:	f7e7 fc17 	bl	8001a18 <printc>
 801a1ea:	e003      	b.n	801a1f4 <GET_VIN+0x70>
		}
	} else {
		printc(MinDelay, "Failed to read VIN from flash!\n");
 801a1ec:	4909      	ldr	r1, [pc, #36]	@ (801a214 <GET_VIN+0x90>)
 801a1ee:	200a      	movs	r0, #10
 801a1f0:	f7e7 fc12 	bl	8001a18 <printc>
	}
}
 801a1f4:	bf00      	nop
 801a1f6:	4618      	mov	r0, r3
 801a1f8:	3708      	adds	r7, #8
 801a1fa:	46bd      	mov	sp, r7
 801a1fc:	bd80      	pop	{r7, pc}
 801a1fe:	bf00      	nop
 801a200:	20014db8 	.word	0x20014db8
 801a204:	0816a350 	.word	0x0816a350
 801a208:	20014d28 	.word	0x20014d28
 801a20c:	08023808 	.word	0x08023808
 801a210:	08023814 	.word	0x08023814
 801a214:	08023838 	.word	0x08023838

0801a218 <GET_LAT>:

bool GET_LAT() {
 801a218:	b580      	push	{r7, lr}
 801a21a:	af00      	add	r7, sp, #0
	memset(RB, 0, sizeof(RB));
 801a21c:	2264      	movs	r2, #100	@ 0x64
 801a21e:	2100      	movs	r1, #0
 801a220:	4820      	ldr	r0, [pc, #128]	@ (801a2a4 <GET_LAT+0x8c>)
 801a222:	f004 fdf5 	bl	801ee10 <memset>
	if (FLASH_Read_Buff(LAT_ADDR, RB, 16) == HAL_OK) {
 801a226:	2210      	movs	r2, #16
 801a228:	491e      	ldr	r1, [pc, #120]	@ (801a2a4 <GET_LAT+0x8c>)
 801a22a:	481f      	ldr	r0, [pc, #124]	@ (801a2a8 <GET_LAT+0x90>)
 801a22c:	f7fc f9f0 	bl	8016610 <FLASH_Read_Buff>
 801a230:	4603      	mov	r3, r0
 801a232:	2b00      	cmp	r3, #0
 801a234:	d12e      	bne.n	801a294 <GET_LAT+0x7c>
		Rconfig.LAT = (char*) malloc(strlen(RB) + 1); // Allocate memory for string
 801a236:	481b      	ldr	r0, [pc, #108]	@ (801a2a4 <GET_LAT+0x8c>)
 801a238:	f7e6 f834 	bl	80002a4 <strlen>
 801a23c:	4603      	mov	r3, r0
 801a23e:	3301      	adds	r3, #1
 801a240:	4618      	mov	r0, r3
 801a242:	f002 fd75 	bl	801cd30 <malloc>
 801a246:	4603      	mov	r3, r0
 801a248:	461a      	mov	r2, r3
 801a24a:	4b18      	ldr	r3, [pc, #96]	@ (801a2ac <GET_LAT+0x94>)
 801a24c:	67da      	str	r2, [r3, #124]	@ 0x7c
		if (Rconfig.LAT != NULL) {
 801a24e:	4b17      	ldr	r3, [pc, #92]	@ (801a2ac <GET_LAT+0x94>)
 801a250:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801a252:	2b00      	cmp	r3, #0
 801a254:	d019      	beq.n	801a28a <GET_LAT+0x72>
			if (RB[0] != 255)
 801a256:	4b13      	ldr	r3, [pc, #76]	@ (801a2a4 <GET_LAT+0x8c>)
 801a258:	781b      	ldrb	r3, [r3, #0]
 801a25a:	2bff      	cmp	r3, #255	@ 0xff
 801a25c:	d006      	beq.n	801a26c <GET_LAT+0x54>
				strcpy(Rconfig.LAT, RB);
 801a25e:	4b13      	ldr	r3, [pc, #76]	@ (801a2ac <GET_LAT+0x94>)
 801a260:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801a262:	4910      	ldr	r1, [pc, #64]	@ (801a2a4 <GET_LAT+0x8c>)
 801a264:	4618      	mov	r0, r3
 801a266:	f004 ff30 	bl	801f0ca <strcpy>
 801a26a:	e006      	b.n	801a27a <GET_LAT+0x62>
			else {
				strcpy(Rconfig.LAT, "0");
 801a26c:	4b0f      	ldr	r3, [pc, #60]	@ (801a2ac <GET_LAT+0x94>)
 801a26e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801a270:	490f      	ldr	r1, [pc, #60]	@ (801a2b0 <GET_LAT+0x98>)
 801a272:	461a      	mov	r2, r3
 801a274:	460b      	mov	r3, r1
 801a276:	881b      	ldrh	r3, [r3, #0]
 801a278:	8013      	strh	r3, [r2, #0]
			}
			printc(MinDelay, "LAT: %s\n", Rconfig.LAT);
 801a27a:	4b0c      	ldr	r3, [pc, #48]	@ (801a2ac <GET_LAT+0x94>)
 801a27c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801a27e:	461a      	mov	r2, r3
 801a280:	490c      	ldr	r1, [pc, #48]	@ (801a2b4 <GET_LAT+0x9c>)
 801a282:	200a      	movs	r0, #10
 801a284:	f7e7 fbc8 	bl	8001a18 <printc>
 801a288:	e008      	b.n	801a29c <GET_LAT+0x84>
		} else {
			printc(MinDelay, "Memory allocation failed for LAT!\n");
 801a28a:	490b      	ldr	r1, [pc, #44]	@ (801a2b8 <GET_LAT+0xa0>)
 801a28c:	200a      	movs	r0, #10
 801a28e:	f7e7 fbc3 	bl	8001a18 <printc>
 801a292:	e003      	b.n	801a29c <GET_LAT+0x84>
		}
	} else {
		printc(MinDelay, "Failed to read LAT from flash!\n");
 801a294:	4909      	ldr	r1, [pc, #36]	@ (801a2bc <GET_LAT+0xa4>)
 801a296:	200a      	movs	r0, #10
 801a298:	f7e7 fbbe 	bl	8001a18 <printc>
	}
	return 0;
 801a29c:	2300      	movs	r3, #0
}
 801a29e:	4618      	mov	r0, r3
 801a2a0:	bd80      	pop	{r7, pc}
 801a2a2:	bf00      	nop
 801a2a4:	20014db8 	.word	0x20014db8
 801a2a8:	0816a540 	.word	0x0816a540
 801a2ac:	20014d28 	.word	0x20014d28
 801a2b0:	08023858 	.word	0x08023858
 801a2b4:	0802385c 	.word	0x0802385c
 801a2b8:	08023868 	.word	0x08023868
 801a2bc:	0802388c 	.word	0x0802388c

0801a2c0 <GET_LON>:

bool GET_LON() {
 801a2c0:	b580      	push	{r7, lr}
 801a2c2:	af00      	add	r7, sp, #0
	memset(RB, 0, sizeof(RB));
 801a2c4:	2264      	movs	r2, #100	@ 0x64
 801a2c6:	2100      	movs	r1, #0
 801a2c8:	4822      	ldr	r0, [pc, #136]	@ (801a354 <GET_LON+0x94>)
 801a2ca:	f004 fda1 	bl	801ee10 <memset>
	if (FLASH_Read_Buff(LON_ADDR, RB, 16) == HAL_OK) {
 801a2ce:	2210      	movs	r2, #16
 801a2d0:	4920      	ldr	r1, [pc, #128]	@ (801a354 <GET_LON+0x94>)
 801a2d2:	4821      	ldr	r0, [pc, #132]	@ (801a358 <GET_LON+0x98>)
 801a2d4:	f7fc f99c 	bl	8016610 <FLASH_Read_Buff>
 801a2d8:	4603      	mov	r3, r0
 801a2da:	2b00      	cmp	r3, #0
 801a2dc:	d133      	bne.n	801a346 <GET_LON+0x86>
		Rconfig.LON = (char*) malloc(strlen(RB) + 1); // Allocate memory for string
 801a2de:	481d      	ldr	r0, [pc, #116]	@ (801a354 <GET_LON+0x94>)
 801a2e0:	f7e5 ffe0 	bl	80002a4 <strlen>
 801a2e4:	4603      	mov	r3, r0
 801a2e6:	3301      	adds	r3, #1
 801a2e8:	4618      	mov	r0, r3
 801a2ea:	f002 fd21 	bl	801cd30 <malloc>
 801a2ee:	4603      	mov	r3, r0
 801a2f0:	461a      	mov	r2, r3
 801a2f2:	4b1a      	ldr	r3, [pc, #104]	@ (801a35c <GET_LON+0x9c>)
 801a2f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
		if (Rconfig.LON != NULL) {
 801a2f8:	4b18      	ldr	r3, [pc, #96]	@ (801a35c <GET_LON+0x9c>)
 801a2fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801a2fe:	2b00      	cmp	r3, #0
 801a300:	d01c      	beq.n	801a33c <GET_LON+0x7c>
			if (RB[0] != 255)
 801a302:	4b14      	ldr	r3, [pc, #80]	@ (801a354 <GET_LON+0x94>)
 801a304:	781b      	ldrb	r3, [r3, #0]
 801a306:	2bff      	cmp	r3, #255	@ 0xff
 801a308:	d007      	beq.n	801a31a <GET_LON+0x5a>
				strcpy(Rconfig.LON, RB);
 801a30a:	4b14      	ldr	r3, [pc, #80]	@ (801a35c <GET_LON+0x9c>)
 801a30c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801a310:	4910      	ldr	r1, [pc, #64]	@ (801a354 <GET_LON+0x94>)
 801a312:	4618      	mov	r0, r3
 801a314:	f004 fed9 	bl	801f0ca <strcpy>
 801a318:	e007      	b.n	801a32a <GET_LON+0x6a>
			else {
				strcpy(Rconfig.LON, "0");
 801a31a:	4b10      	ldr	r3, [pc, #64]	@ (801a35c <GET_LON+0x9c>)
 801a31c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801a320:	490f      	ldr	r1, [pc, #60]	@ (801a360 <GET_LON+0xa0>)
 801a322:	461a      	mov	r2, r3
 801a324:	460b      	mov	r3, r1
 801a326:	881b      	ldrh	r3, [r3, #0]
 801a328:	8013      	strh	r3, [r2, #0]
			}
			printc(MinDelay, "LON: %s\n", Rconfig.LON);
 801a32a:	4b0c      	ldr	r3, [pc, #48]	@ (801a35c <GET_LON+0x9c>)
 801a32c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801a330:	461a      	mov	r2, r3
 801a332:	490c      	ldr	r1, [pc, #48]	@ (801a364 <GET_LON+0xa4>)
 801a334:	200a      	movs	r0, #10
 801a336:	f7e7 fb6f 	bl	8001a18 <printc>
 801a33a:	e008      	b.n	801a34e <GET_LON+0x8e>
		} else {
			printc(MinDelay, "Memory allocation failed for LON!\n");
 801a33c:	490a      	ldr	r1, [pc, #40]	@ (801a368 <GET_LON+0xa8>)
 801a33e:	200a      	movs	r0, #10
 801a340:	f7e7 fb6a 	bl	8001a18 <printc>
 801a344:	e003      	b.n	801a34e <GET_LON+0x8e>
		}
	} else {
		printc(MinDelay, "Failed to read LON from flash!\n");
 801a346:	4909      	ldr	r1, [pc, #36]	@ (801a36c <GET_LON+0xac>)
 801a348:	200a      	movs	r0, #10
 801a34a:	f7e7 fb65 	bl	8001a18 <printc>
	}
	return true;
 801a34e:	2301      	movs	r3, #1
}
 801a350:	4618      	mov	r0, r3
 801a352:	bd80      	pop	{r7, pc}
 801a354:	20014db8 	.word	0x20014db8
 801a358:	0816a560 	.word	0x0816a560
 801a35c:	20014d28 	.word	0x20014d28
 801a360:	08023858 	.word	0x08023858
 801a364:	080238ac 	.word	0x080238ac
 801a368:	080238b8 	.word	0x080238b8
 801a36c:	080238dc 	.word	0x080238dc

0801a370 <GET_PHNUM>:

bool GET_PHNUM() {
 801a370:	b580      	push	{r7, lr}
 801a372:	af00      	add	r7, sp, #0
	memset(RB, 0, sizeof(RB));
 801a374:	2264      	movs	r2, #100	@ 0x64
 801a376:	2100      	movs	r1, #0
 801a378:	4820      	ldr	r0, [pc, #128]	@ (801a3fc <GET_PHNUM+0x8c>)
 801a37a:	f004 fd49 	bl	801ee10 <memset>
	if (FLASH_Read_Buff(SMS_NUM_Addr, RB, 16) == HAL_OK) {
 801a37e:	2210      	movs	r2, #16
 801a380:	491e      	ldr	r1, [pc, #120]	@ (801a3fc <GET_PHNUM+0x8c>)
 801a382:	481f      	ldr	r0, [pc, #124]	@ (801a400 <GET_PHNUM+0x90>)
 801a384:	f7fc f944 	bl	8016610 <FLASH_Read_Buff>
 801a388:	4603      	mov	r3, r0
 801a38a:	2b00      	cmp	r3, #0
 801a38c:	d12e      	bne.n	801a3ec <GET_PHNUM+0x7c>
		Rconfig.PHNUM = (char*) malloc(strlen(RB) + 1); // Allocate memory for string
 801a38e:	481b      	ldr	r0, [pc, #108]	@ (801a3fc <GET_PHNUM+0x8c>)
 801a390:	f7e5 ff88 	bl	80002a4 <strlen>
 801a394:	4603      	mov	r3, r0
 801a396:	3301      	adds	r3, #1
 801a398:	4618      	mov	r0, r3
 801a39a:	f002 fcc9 	bl	801cd30 <malloc>
 801a39e:	4603      	mov	r3, r0
 801a3a0:	461a      	mov	r2, r3
 801a3a2:	4b18      	ldr	r3, [pc, #96]	@ (801a404 <GET_PHNUM+0x94>)
 801a3a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
		if (Rconfig.PHNUM != NULL) {
 801a3a8:	4b16      	ldr	r3, [pc, #88]	@ (801a404 <GET_PHNUM+0x94>)
 801a3aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801a3ae:	2b00      	cmp	r3, #0
 801a3b0:	d017      	beq.n	801a3e2 <GET_PHNUM+0x72>
			strcpy(Rconfig.PHNUM, RB);
 801a3b2:	4b14      	ldr	r3, [pc, #80]	@ (801a404 <GET_PHNUM+0x94>)
 801a3b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801a3b8:	4910      	ldr	r1, [pc, #64]	@ (801a3fc <GET_PHNUM+0x8c>)
 801a3ba:	4618      	mov	r0, r3
 801a3bc:	f004 fe85 	bl	801f0ca <strcpy>
			memcpy(&PHnum ,Rconfig.PHNUM,10);
 801a3c0:	4b10      	ldr	r3, [pc, #64]	@ (801a404 <GET_PHNUM+0x94>)
 801a3c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801a3c6:	220a      	movs	r2, #10
 801a3c8:	4619      	mov	r1, r3
 801a3ca:	480f      	ldr	r0, [pc, #60]	@ (801a408 <GET_PHNUM+0x98>)
 801a3cc:	f004 fe93 	bl	801f0f6 <memcpy>
			printc(MinDelay, "PHNUM: %s\n", Rconfig.PHNUM);
 801a3d0:	4b0c      	ldr	r3, [pc, #48]	@ (801a404 <GET_PHNUM+0x94>)
 801a3d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801a3d6:	461a      	mov	r2, r3
 801a3d8:	490c      	ldr	r1, [pc, #48]	@ (801a40c <GET_PHNUM+0x9c>)
 801a3da:	200a      	movs	r0, #10
 801a3dc:	f7e7 fb1c 	bl	8001a18 <printc>
 801a3e0:	e008      	b.n	801a3f4 <GET_PHNUM+0x84>
		} else {
			printc(MinDelay, "Memory allocation failed for PHNUM!\n");
 801a3e2:	490b      	ldr	r1, [pc, #44]	@ (801a410 <GET_PHNUM+0xa0>)
 801a3e4:	200a      	movs	r0, #10
 801a3e6:	f7e7 fb17 	bl	8001a18 <printc>
 801a3ea:	e003      	b.n	801a3f4 <GET_PHNUM+0x84>
		}
	} else {
		printc(MinDelay, "Failed to read PHNUM from flash!\n");
 801a3ec:	4909      	ldr	r1, [pc, #36]	@ (801a414 <GET_PHNUM+0xa4>)
 801a3ee:	200a      	movs	r0, #10
 801a3f0:	f7e7 fb12 	bl	8001a18 <printc>
	}
	return true;
 801a3f4:	2301      	movs	r3, #1
}
 801a3f6:	4618      	mov	r0, r3
 801a3f8:	bd80      	pop	{r7, pc}
 801a3fa:	bf00      	nop
 801a3fc:	20014db8 	.word	0x20014db8
 801a400:	0816a580 	.word	0x0816a580
 801a404:	20014d28 	.word	0x20014d28
 801a408:	200138d0 	.word	0x200138d0
 801a40c:	080238fc 	.word	0x080238fc
 801a410:	08023908 	.word	0x08023908
 801a414:	08023930 	.word	0x08023930

0801a418 <GET_RTCTimer>:
bool GET_RTCTimer() {
 801a418:	b580      	push	{r7, lr}
 801a41a:	af00      	add	r7, sp, #0
	memset(RB, 0, sizeof(RB));
 801a41c:	2264      	movs	r2, #100	@ 0x64
 801a41e:	2100      	movs	r1, #0
 801a420:	481c      	ldr	r0, [pc, #112]	@ (801a494 <GET_RTCTimer+0x7c>)
 801a422:	f004 fcf5 	bl	801ee10 <memset>
	if (FLASH_Read_Buff(RTC_timer_addr, RB, 16) == HAL_OK) {
 801a426:	2210      	movs	r2, #16
 801a428:	491a      	ldr	r1, [pc, #104]	@ (801a494 <GET_RTCTimer+0x7c>)
 801a42a:	481b      	ldr	r0, [pc, #108]	@ (801a498 <GET_RTCTimer+0x80>)
 801a42c:	f7fc f8f0 	bl	8016610 <FLASH_Read_Buff>
 801a430:	4603      	mov	r3, r0
 801a432:	2b00      	cmp	r3, #0
 801a434:	d126      	bne.n	801a484 <GET_RTCTimer+0x6c>
		Rconfig.Rtime = (char*) malloc(strlen(RB) + 1); // Allocate memory for string
 801a436:	4817      	ldr	r0, [pc, #92]	@ (801a494 <GET_RTCTimer+0x7c>)
 801a438:	f7e5 ff34 	bl	80002a4 <strlen>
 801a43c:	4603      	mov	r3, r0
 801a43e:	3301      	adds	r3, #1
 801a440:	4618      	mov	r0, r3
 801a442:	f002 fc75 	bl	801cd30 <malloc>
 801a446:	4603      	mov	r3, r0
 801a448:	461a      	mov	r2, r3
 801a44a:	4b14      	ldr	r3, [pc, #80]	@ (801a49c <GET_RTCTimer+0x84>)
 801a44c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
		if (Rconfig.Rtime != NULL) {
 801a450:	4b12      	ldr	r3, [pc, #72]	@ (801a49c <GET_RTCTimer+0x84>)
 801a452:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801a456:	2b00      	cmp	r3, #0
 801a458:	d00f      	beq.n	801a47a <GET_RTCTimer+0x62>
			strcpy(Rconfig.Rtime, RB);
 801a45a:	4b10      	ldr	r3, [pc, #64]	@ (801a49c <GET_RTCTimer+0x84>)
 801a45c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801a460:	490c      	ldr	r1, [pc, #48]	@ (801a494 <GET_RTCTimer+0x7c>)
 801a462:	4618      	mov	r0, r3
 801a464:	f004 fe31 	bl	801f0ca <strcpy>
			printc(MinDelay, "RTCWaketime: %s\n", Rconfig.Rtime);
 801a468:	4b0c      	ldr	r3, [pc, #48]	@ (801a49c <GET_RTCTimer+0x84>)
 801a46a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801a46e:	461a      	mov	r2, r3
 801a470:	490b      	ldr	r1, [pc, #44]	@ (801a4a0 <GET_RTCTimer+0x88>)
 801a472:	200a      	movs	r0, #10
 801a474:	f7e7 fad0 	bl	8001a18 <printc>
 801a478:	e008      	b.n	801a48c <GET_RTCTimer+0x74>
		} else {
			printc(MinDelay, "Memory allocation failed for Rtime!\n");
 801a47a:	490a      	ldr	r1, [pc, #40]	@ (801a4a4 <GET_RTCTimer+0x8c>)
 801a47c:	200a      	movs	r0, #10
 801a47e:	f7e7 facb 	bl	8001a18 <printc>
 801a482:	e003      	b.n	801a48c <GET_RTCTimer+0x74>
		}
	} else {
		printc(MinDelay, "Failed to read Rtime from flash!\n");
 801a484:	4908      	ldr	r1, [pc, #32]	@ (801a4a8 <GET_RTCTimer+0x90>)
 801a486:	200a      	movs	r0, #10
 801a488:	f7e7 fac6 	bl	8001a18 <printc>
	}
	return true;
 801a48c:	2301      	movs	r3, #1
}
 801a48e:	4618      	mov	r0, r3
 801a490:	bd80      	pop	{r7, pc}
 801a492:	bf00      	nop
 801a494:	20014db8 	.word	0x20014db8
 801a498:	0816a600 	.word	0x0816a600
 801a49c:	20014d28 	.word	0x20014d28
 801a4a0:	08023954 	.word	0x08023954
 801a4a4:	08023968 	.word	0x08023968
 801a4a8:	08023990 	.word	0x08023990

0801a4ac <GET_Ckey>:
		return false;
	}
//	sprintf(opBuffer, "%lu %lu %lu", L1, L2, L3);
	return true;
}
bool GET_Ckey() {
 801a4ac:	b580      	push	{r7, lr}
 801a4ae:	af00      	add	r7, sp, #0
	memset(RB, 0, sizeof(RB));
 801a4b0:	2264      	movs	r2, #100	@ 0x64
 801a4b2:	2100      	movs	r1, #0
 801a4b4:	48b0      	ldr	r0, [pc, #704]	@ (801a778 <GET_Ckey+0x2cc>)
 801a4b6:	f004 fcab 	bl	801ee10 <memset>
	if (FLASH_Read_Buff(CKEY1_ADDR, RB, 32) == HAL_OK) {
 801a4ba:	2220      	movs	r2, #32
 801a4bc:	49ae      	ldr	r1, [pc, #696]	@ (801a778 <GET_Ckey+0x2cc>)
 801a4be:	48af      	ldr	r0, [pc, #700]	@ (801a77c <GET_Ckey+0x2d0>)
 801a4c0:	f7fc f8a6 	bl	8016610 <FLASH_Read_Buff>
 801a4c4:	4603      	mov	r3, r0
 801a4c6:	2b00      	cmp	r3, #0
 801a4c8:	d122      	bne.n	801a510 <GET_Ckey+0x64>
		Rconfig.CKEY1 = (char*) malloc(strlen(RB) + 1); // Allocate memory for string
 801a4ca:	48ab      	ldr	r0, [pc, #684]	@ (801a778 <GET_Ckey+0x2cc>)
 801a4cc:	f7e5 feea 	bl	80002a4 <strlen>
 801a4d0:	4603      	mov	r3, r0
 801a4d2:	3301      	adds	r3, #1
 801a4d4:	4618      	mov	r0, r3
 801a4d6:	f002 fc2b 	bl	801cd30 <malloc>
 801a4da:	4603      	mov	r3, r0
 801a4dc:	461a      	mov	r2, r3
 801a4de:	4ba8      	ldr	r3, [pc, #672]	@ (801a780 <GET_Ckey+0x2d4>)
 801a4e0:	65da      	str	r2, [r3, #92]	@ 0x5c
		if (Rconfig.CKEY1 != NULL) {
 801a4e2:	4ba7      	ldr	r3, [pc, #668]	@ (801a780 <GET_Ckey+0x2d4>)
 801a4e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801a4e6:	2b00      	cmp	r3, #0
 801a4e8:	d00d      	beq.n	801a506 <GET_Ckey+0x5a>
			strcpy(Rconfig.CKEY1, RB);
 801a4ea:	4ba5      	ldr	r3, [pc, #660]	@ (801a780 <GET_Ckey+0x2d4>)
 801a4ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801a4ee:	49a2      	ldr	r1, [pc, #648]	@ (801a778 <GET_Ckey+0x2cc>)
 801a4f0:	4618      	mov	r0, r3
 801a4f2:	f004 fdea 	bl	801f0ca <strcpy>
			printc(MinDelay, "CKEY1: %s\n", Rconfig.CKEY1);
 801a4f6:	4ba2      	ldr	r3, [pc, #648]	@ (801a780 <GET_Ckey+0x2d4>)
 801a4f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801a4fa:	461a      	mov	r2, r3
 801a4fc:	49a1      	ldr	r1, [pc, #644]	@ (801a784 <GET_Ckey+0x2d8>)
 801a4fe:	200a      	movs	r0, #10
 801a500:	f7e7 fa8a 	bl	8001a18 <printc>
 801a504:	e008      	b.n	801a518 <GET_Ckey+0x6c>
		} else {
			printc(MinDelay, "Memory allocation failed for Ckey1!\n");
 801a506:	49a0      	ldr	r1, [pc, #640]	@ (801a788 <GET_Ckey+0x2dc>)
 801a508:	200a      	movs	r0, #10
 801a50a:	f7e7 fa85 	bl	8001a18 <printc>
 801a50e:	e003      	b.n	801a518 <GET_Ckey+0x6c>
		}
	} else {
		printc(MinDelay, "Failed to read CKEY1 from flash!\n");
 801a510:	499e      	ldr	r1, [pc, #632]	@ (801a78c <GET_Ckey+0x2e0>)
 801a512:	200a      	movs	r0, #10
 801a514:	f7e7 fa80 	bl	8001a18 <printc>
	}
	memset(RB, 0, sizeof(RB));
 801a518:	2264      	movs	r2, #100	@ 0x64
 801a51a:	2100      	movs	r1, #0
 801a51c:	4896      	ldr	r0, [pc, #600]	@ (801a778 <GET_Ckey+0x2cc>)
 801a51e:	f004 fc77 	bl	801ee10 <memset>
	if (FLASH_Read_Buff(CKEY2_ADDR, RB, 32) == HAL_OK) {
 801a522:	2220      	movs	r2, #32
 801a524:	4994      	ldr	r1, [pc, #592]	@ (801a778 <GET_Ckey+0x2cc>)
 801a526:	489a      	ldr	r0, [pc, #616]	@ (801a790 <GET_Ckey+0x2e4>)
 801a528:	f7fc f872 	bl	8016610 <FLASH_Read_Buff>
 801a52c:	4603      	mov	r3, r0
 801a52e:	2b00      	cmp	r3, #0
 801a530:	d122      	bne.n	801a578 <GET_Ckey+0xcc>
		Rconfig.CKEY2 = (char*) malloc(strlen(RB) + 1); // Allocate memory for string
 801a532:	4891      	ldr	r0, [pc, #580]	@ (801a778 <GET_Ckey+0x2cc>)
 801a534:	f7e5 feb6 	bl	80002a4 <strlen>
 801a538:	4603      	mov	r3, r0
 801a53a:	3301      	adds	r3, #1
 801a53c:	4618      	mov	r0, r3
 801a53e:	f002 fbf7 	bl	801cd30 <malloc>
 801a542:	4603      	mov	r3, r0
 801a544:	461a      	mov	r2, r3
 801a546:	4b8e      	ldr	r3, [pc, #568]	@ (801a780 <GET_Ckey+0x2d4>)
 801a548:	661a      	str	r2, [r3, #96]	@ 0x60
		if (Rconfig.CKEY2 != NULL) {
 801a54a:	4b8d      	ldr	r3, [pc, #564]	@ (801a780 <GET_Ckey+0x2d4>)
 801a54c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801a54e:	2b00      	cmp	r3, #0
 801a550:	d00d      	beq.n	801a56e <GET_Ckey+0xc2>
			strcpy(Rconfig.CKEY2, RB);
 801a552:	4b8b      	ldr	r3, [pc, #556]	@ (801a780 <GET_Ckey+0x2d4>)
 801a554:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801a556:	4988      	ldr	r1, [pc, #544]	@ (801a778 <GET_Ckey+0x2cc>)
 801a558:	4618      	mov	r0, r3
 801a55a:	f004 fdb6 	bl	801f0ca <strcpy>
			printc(MinDelay, "CKEY2: %s\n", Rconfig.CKEY2);
 801a55e:	4b88      	ldr	r3, [pc, #544]	@ (801a780 <GET_Ckey+0x2d4>)
 801a560:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801a562:	461a      	mov	r2, r3
 801a564:	498b      	ldr	r1, [pc, #556]	@ (801a794 <GET_Ckey+0x2e8>)
 801a566:	200a      	movs	r0, #10
 801a568:	f7e7 fa56 	bl	8001a18 <printc>
 801a56c:	e008      	b.n	801a580 <GET_Ckey+0xd4>
		} else {
			printc(MinDelay, "Memory allocation failed for CKEY2!\n");
 801a56e:	498a      	ldr	r1, [pc, #552]	@ (801a798 <GET_Ckey+0x2ec>)
 801a570:	200a      	movs	r0, #10
 801a572:	f7e7 fa51 	bl	8001a18 <printc>
 801a576:	e003      	b.n	801a580 <GET_Ckey+0xd4>
		}
	} else {
		printc(MinDelay, "Failed to read CKEY2 from flash!\n");
 801a578:	4988      	ldr	r1, [pc, #544]	@ (801a79c <GET_Ckey+0x2f0>)
 801a57a:	200a      	movs	r0, #10
 801a57c:	f7e7 fa4c 	bl	8001a18 <printc>
	}
	memset(RB, 0, sizeof(RB));
 801a580:	2264      	movs	r2, #100	@ 0x64
 801a582:	2100      	movs	r1, #0
 801a584:	487c      	ldr	r0, [pc, #496]	@ (801a778 <GET_Ckey+0x2cc>)
 801a586:	f004 fc43 	bl	801ee10 <memset>
	if (FLASH_Read_Buff(CKEY3_ADDR, RB, 32) == HAL_OK) {
 801a58a:	2220      	movs	r2, #32
 801a58c:	497a      	ldr	r1, [pc, #488]	@ (801a778 <GET_Ckey+0x2cc>)
 801a58e:	4884      	ldr	r0, [pc, #528]	@ (801a7a0 <GET_Ckey+0x2f4>)
 801a590:	f7fc f83e 	bl	8016610 <FLASH_Read_Buff>
 801a594:	4603      	mov	r3, r0
 801a596:	2b00      	cmp	r3, #0
 801a598:	d122      	bne.n	801a5e0 <GET_Ckey+0x134>
		Rconfig.CKEY3 = (char*) malloc(strlen(RB) + 1); // Allocate memory for string
 801a59a:	4877      	ldr	r0, [pc, #476]	@ (801a778 <GET_Ckey+0x2cc>)
 801a59c:	f7e5 fe82 	bl	80002a4 <strlen>
 801a5a0:	4603      	mov	r3, r0
 801a5a2:	3301      	adds	r3, #1
 801a5a4:	4618      	mov	r0, r3
 801a5a6:	f002 fbc3 	bl	801cd30 <malloc>
 801a5aa:	4603      	mov	r3, r0
 801a5ac:	461a      	mov	r2, r3
 801a5ae:	4b74      	ldr	r3, [pc, #464]	@ (801a780 <GET_Ckey+0x2d4>)
 801a5b0:	665a      	str	r2, [r3, #100]	@ 0x64
		if (Rconfig.CKEY3 != NULL) {
 801a5b2:	4b73      	ldr	r3, [pc, #460]	@ (801a780 <GET_Ckey+0x2d4>)
 801a5b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801a5b6:	2b00      	cmp	r3, #0
 801a5b8:	d00d      	beq.n	801a5d6 <GET_Ckey+0x12a>
			strcpy(Rconfig.CKEY3, RB);
 801a5ba:	4b71      	ldr	r3, [pc, #452]	@ (801a780 <GET_Ckey+0x2d4>)
 801a5bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801a5be:	496e      	ldr	r1, [pc, #440]	@ (801a778 <GET_Ckey+0x2cc>)
 801a5c0:	4618      	mov	r0, r3
 801a5c2:	f004 fd82 	bl	801f0ca <strcpy>
			printc(MinDelay, "CKEY3: %s\n", Rconfig.CKEY3);
 801a5c6:	4b6e      	ldr	r3, [pc, #440]	@ (801a780 <GET_Ckey+0x2d4>)
 801a5c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801a5ca:	461a      	mov	r2, r3
 801a5cc:	4975      	ldr	r1, [pc, #468]	@ (801a7a4 <GET_Ckey+0x2f8>)
 801a5ce:	200a      	movs	r0, #10
 801a5d0:	f7e7 fa22 	bl	8001a18 <printc>
 801a5d4:	e008      	b.n	801a5e8 <GET_Ckey+0x13c>
		} else {
			printc(MinDelay, "Memory allocation failed for CKEY3!\n");
 801a5d6:	4974      	ldr	r1, [pc, #464]	@ (801a7a8 <GET_Ckey+0x2fc>)
 801a5d8:	200a      	movs	r0, #10
 801a5da:	f7e7 fa1d 	bl	8001a18 <printc>
 801a5de:	e003      	b.n	801a5e8 <GET_Ckey+0x13c>
		}
	} else {
		printc(MinDelay, "Failed to read CKEY3 from flash!\n");
 801a5e0:	4972      	ldr	r1, [pc, #456]	@ (801a7ac <GET_Ckey+0x300>)
 801a5e2:	200a      	movs	r0, #10
 801a5e4:	f7e7 fa18 	bl	8001a18 <printc>
	}
	memset(RB, 0, sizeof(RB));
 801a5e8:	2264      	movs	r2, #100	@ 0x64
 801a5ea:	2100      	movs	r1, #0
 801a5ec:	4862      	ldr	r0, [pc, #392]	@ (801a778 <GET_Ckey+0x2cc>)
 801a5ee:	f004 fc0f 	bl	801ee10 <memset>
	if (FLASH_Read_Buff(CKEY4_ADDR, RB, 32) == HAL_OK) {
 801a5f2:	2220      	movs	r2, #32
 801a5f4:	4960      	ldr	r1, [pc, #384]	@ (801a778 <GET_Ckey+0x2cc>)
 801a5f6:	486e      	ldr	r0, [pc, #440]	@ (801a7b0 <GET_Ckey+0x304>)
 801a5f8:	f7fc f80a 	bl	8016610 <FLASH_Read_Buff>
 801a5fc:	4603      	mov	r3, r0
 801a5fe:	2b00      	cmp	r3, #0
 801a600:	d122      	bne.n	801a648 <GET_Ckey+0x19c>
		Rconfig.CKEY4 = (char*) malloc(strlen(RB) + 1); // Allocate memory for string
 801a602:	485d      	ldr	r0, [pc, #372]	@ (801a778 <GET_Ckey+0x2cc>)
 801a604:	f7e5 fe4e 	bl	80002a4 <strlen>
 801a608:	4603      	mov	r3, r0
 801a60a:	3301      	adds	r3, #1
 801a60c:	4618      	mov	r0, r3
 801a60e:	f002 fb8f 	bl	801cd30 <malloc>
 801a612:	4603      	mov	r3, r0
 801a614:	461a      	mov	r2, r3
 801a616:	4b5a      	ldr	r3, [pc, #360]	@ (801a780 <GET_Ckey+0x2d4>)
 801a618:	669a      	str	r2, [r3, #104]	@ 0x68
		if (Rconfig.CKEY4 != NULL) {
 801a61a:	4b59      	ldr	r3, [pc, #356]	@ (801a780 <GET_Ckey+0x2d4>)
 801a61c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801a61e:	2b00      	cmp	r3, #0
 801a620:	d00d      	beq.n	801a63e <GET_Ckey+0x192>
			strcpy(Rconfig.CKEY4, RB);
 801a622:	4b57      	ldr	r3, [pc, #348]	@ (801a780 <GET_Ckey+0x2d4>)
 801a624:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801a626:	4954      	ldr	r1, [pc, #336]	@ (801a778 <GET_Ckey+0x2cc>)
 801a628:	4618      	mov	r0, r3
 801a62a:	f004 fd4e 	bl	801f0ca <strcpy>
			printc(MinDelay, "CKEY4: %s\n", Rconfig.CKEY4);
 801a62e:	4b54      	ldr	r3, [pc, #336]	@ (801a780 <GET_Ckey+0x2d4>)
 801a630:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801a632:	461a      	mov	r2, r3
 801a634:	495f      	ldr	r1, [pc, #380]	@ (801a7b4 <GET_Ckey+0x308>)
 801a636:	200a      	movs	r0, #10
 801a638:	f7e7 f9ee 	bl	8001a18 <printc>
 801a63c:	e008      	b.n	801a650 <GET_Ckey+0x1a4>
		} else {
			printc(MinDelay, "Memory allocation failed for CKEY4!\n");
 801a63e:	495e      	ldr	r1, [pc, #376]	@ (801a7b8 <GET_Ckey+0x30c>)
 801a640:	200a      	movs	r0, #10
 801a642:	f7e7 f9e9 	bl	8001a18 <printc>
 801a646:	e003      	b.n	801a650 <GET_Ckey+0x1a4>
		}
	} else {
		printc(MinDelay, "Failed to read CKEY4 from flash!\n");
 801a648:	495c      	ldr	r1, [pc, #368]	@ (801a7bc <GET_Ckey+0x310>)
 801a64a:	200a      	movs	r0, #10
 801a64c:	f7e7 f9e4 	bl	8001a18 <printc>
	}
	memset(RB, 0, sizeof(RB));
 801a650:	2264      	movs	r2, #100	@ 0x64
 801a652:	2100      	movs	r1, #0
 801a654:	4848      	ldr	r0, [pc, #288]	@ (801a778 <GET_Ckey+0x2cc>)
 801a656:	f004 fbdb 	bl	801ee10 <memset>
	if (FLASH_Read_Buff(CKEY5_ADDR, RB, 32) == HAL_OK) {
 801a65a:	2220      	movs	r2, #32
 801a65c:	4946      	ldr	r1, [pc, #280]	@ (801a778 <GET_Ckey+0x2cc>)
 801a65e:	4858      	ldr	r0, [pc, #352]	@ (801a7c0 <GET_Ckey+0x314>)
 801a660:	f7fb ffd6 	bl	8016610 <FLASH_Read_Buff>
 801a664:	4603      	mov	r3, r0
 801a666:	2b00      	cmp	r3, #0
 801a668:	d122      	bne.n	801a6b0 <GET_Ckey+0x204>
		Rconfig.CKEY5 = (char*) malloc(strlen(RB) + 1); // Allocate memory for string
 801a66a:	4843      	ldr	r0, [pc, #268]	@ (801a778 <GET_Ckey+0x2cc>)
 801a66c:	f7e5 fe1a 	bl	80002a4 <strlen>
 801a670:	4603      	mov	r3, r0
 801a672:	3301      	adds	r3, #1
 801a674:	4618      	mov	r0, r3
 801a676:	f002 fb5b 	bl	801cd30 <malloc>
 801a67a:	4603      	mov	r3, r0
 801a67c:	461a      	mov	r2, r3
 801a67e:	4b40      	ldr	r3, [pc, #256]	@ (801a780 <GET_Ckey+0x2d4>)
 801a680:	66da      	str	r2, [r3, #108]	@ 0x6c
		if (Rconfig.CKEY5 != NULL) {
 801a682:	4b3f      	ldr	r3, [pc, #252]	@ (801a780 <GET_Ckey+0x2d4>)
 801a684:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a686:	2b00      	cmp	r3, #0
 801a688:	d00d      	beq.n	801a6a6 <GET_Ckey+0x1fa>
			strcpy(Rconfig.CKEY5, RB);
 801a68a:	4b3d      	ldr	r3, [pc, #244]	@ (801a780 <GET_Ckey+0x2d4>)
 801a68c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a68e:	493a      	ldr	r1, [pc, #232]	@ (801a778 <GET_Ckey+0x2cc>)
 801a690:	4618      	mov	r0, r3
 801a692:	f004 fd1a 	bl	801f0ca <strcpy>
			printc(MinDelay, "CKEY5: %s\n", Rconfig.CKEY5);
 801a696:	4b3a      	ldr	r3, [pc, #232]	@ (801a780 <GET_Ckey+0x2d4>)
 801a698:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a69a:	461a      	mov	r2, r3
 801a69c:	4949      	ldr	r1, [pc, #292]	@ (801a7c4 <GET_Ckey+0x318>)
 801a69e:	200a      	movs	r0, #10
 801a6a0:	f7e7 f9ba 	bl	8001a18 <printc>
 801a6a4:	e008      	b.n	801a6b8 <GET_Ckey+0x20c>
		} else {
			printc(MinDelay, "Memory allocation failed for CKEY5!\n");
 801a6a6:	4948      	ldr	r1, [pc, #288]	@ (801a7c8 <GET_Ckey+0x31c>)
 801a6a8:	200a      	movs	r0, #10
 801a6aa:	f7e7 f9b5 	bl	8001a18 <printc>
 801a6ae:	e003      	b.n	801a6b8 <GET_Ckey+0x20c>
		}
	} else {
		printc(MinDelay, "Failed to read CKEY5 from flash!\n");
 801a6b0:	4946      	ldr	r1, [pc, #280]	@ (801a7cc <GET_Ckey+0x320>)
 801a6b2:	200a      	movs	r0, #10
 801a6b4:	f7e7 f9b0 	bl	8001a18 <printc>
	}
	memset(RB, 0, sizeof(RB));
 801a6b8:	2264      	movs	r2, #100	@ 0x64
 801a6ba:	2100      	movs	r1, #0
 801a6bc:	482e      	ldr	r0, [pc, #184]	@ (801a778 <GET_Ckey+0x2cc>)
 801a6be:	f004 fba7 	bl	801ee10 <memset>
	if (FLASH_Read_Buff(CKEY6_ADDR, RB, 32) == HAL_OK) {
 801a6c2:	2220      	movs	r2, #32
 801a6c4:	492c      	ldr	r1, [pc, #176]	@ (801a778 <GET_Ckey+0x2cc>)
 801a6c6:	4842      	ldr	r0, [pc, #264]	@ (801a7d0 <GET_Ckey+0x324>)
 801a6c8:	f7fb ffa2 	bl	8016610 <FLASH_Read_Buff>
 801a6cc:	4603      	mov	r3, r0
 801a6ce:	2b00      	cmp	r3, #0
 801a6d0:	d122      	bne.n	801a718 <GET_Ckey+0x26c>
		Rconfig.CKEY6 = (char*) malloc(strlen(RB) + 1); // Allocate memory for string
 801a6d2:	4829      	ldr	r0, [pc, #164]	@ (801a778 <GET_Ckey+0x2cc>)
 801a6d4:	f7e5 fde6 	bl	80002a4 <strlen>
 801a6d8:	4603      	mov	r3, r0
 801a6da:	3301      	adds	r3, #1
 801a6dc:	4618      	mov	r0, r3
 801a6de:	f002 fb27 	bl	801cd30 <malloc>
 801a6e2:	4603      	mov	r3, r0
 801a6e4:	461a      	mov	r2, r3
 801a6e6:	4b26      	ldr	r3, [pc, #152]	@ (801a780 <GET_Ckey+0x2d4>)
 801a6e8:	671a      	str	r2, [r3, #112]	@ 0x70
		if (Rconfig.CKEY6 != NULL) {
 801a6ea:	4b25      	ldr	r3, [pc, #148]	@ (801a780 <GET_Ckey+0x2d4>)
 801a6ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a6ee:	2b00      	cmp	r3, #0
 801a6f0:	d00d      	beq.n	801a70e <GET_Ckey+0x262>
			strcpy(Rconfig.CKEY6, RB);
 801a6f2:	4b23      	ldr	r3, [pc, #140]	@ (801a780 <GET_Ckey+0x2d4>)
 801a6f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a6f6:	4920      	ldr	r1, [pc, #128]	@ (801a778 <GET_Ckey+0x2cc>)
 801a6f8:	4618      	mov	r0, r3
 801a6fa:	f004 fce6 	bl	801f0ca <strcpy>
			printc(MinDelay, "CKEY6: %s\n", Rconfig.CKEY6);
 801a6fe:	4b20      	ldr	r3, [pc, #128]	@ (801a780 <GET_Ckey+0x2d4>)
 801a700:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a702:	461a      	mov	r2, r3
 801a704:	4933      	ldr	r1, [pc, #204]	@ (801a7d4 <GET_Ckey+0x328>)
 801a706:	200a      	movs	r0, #10
 801a708:	f7e7 f986 	bl	8001a18 <printc>
 801a70c:	e008      	b.n	801a720 <GET_Ckey+0x274>
		} else {
			printc(MinDelay, "Memory allocation failed for CKEY6!\n");
 801a70e:	4932      	ldr	r1, [pc, #200]	@ (801a7d8 <GET_Ckey+0x32c>)
 801a710:	200a      	movs	r0, #10
 801a712:	f7e7 f981 	bl	8001a18 <printc>
 801a716:	e003      	b.n	801a720 <GET_Ckey+0x274>
		}
	} else {
		printc(MinDelay, "Failed to read CKEY6 from flash!\n");
 801a718:	4930      	ldr	r1, [pc, #192]	@ (801a7dc <GET_Ckey+0x330>)
 801a71a:	200a      	movs	r0, #10
 801a71c:	f7e7 f97c 	bl	8001a18 <printc>
	}
	memset(RB, 0, sizeof(RB));
 801a720:	2264      	movs	r2, #100	@ 0x64
 801a722:	2100      	movs	r1, #0
 801a724:	4814      	ldr	r0, [pc, #80]	@ (801a778 <GET_Ckey+0x2cc>)
 801a726:	f004 fb73 	bl	801ee10 <memset>
	if (FLASH_Read_Buff(CKEY7_ADDR, RB, 32) == HAL_OK) {
 801a72a:	2220      	movs	r2, #32
 801a72c:	4912      	ldr	r1, [pc, #72]	@ (801a778 <GET_Ckey+0x2cc>)
 801a72e:	482c      	ldr	r0, [pc, #176]	@ (801a7e0 <GET_Ckey+0x334>)
 801a730:	f7fb ff6e 	bl	8016610 <FLASH_Read_Buff>
 801a734:	4603      	mov	r3, r0
 801a736:	2b00      	cmp	r3, #0
 801a738:	d15b      	bne.n	801a7f2 <GET_Ckey+0x346>
		Rconfig.CKEY7 = (char*) malloc(strlen(RB) + 1); // Allocate memory for string
 801a73a:	480f      	ldr	r0, [pc, #60]	@ (801a778 <GET_Ckey+0x2cc>)
 801a73c:	f7e5 fdb2 	bl	80002a4 <strlen>
 801a740:	4603      	mov	r3, r0
 801a742:	3301      	adds	r3, #1
 801a744:	4618      	mov	r0, r3
 801a746:	f002 faf3 	bl	801cd30 <malloc>
 801a74a:	4603      	mov	r3, r0
 801a74c:	461a      	mov	r2, r3
 801a74e:	4b0c      	ldr	r3, [pc, #48]	@ (801a780 <GET_Ckey+0x2d4>)
 801a750:	675a      	str	r2, [r3, #116]	@ 0x74
		if (Rconfig.CKEY7 != NULL) {
 801a752:	4b0b      	ldr	r3, [pc, #44]	@ (801a780 <GET_Ckey+0x2d4>)
 801a754:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801a756:	2b00      	cmp	r3, #0
 801a758:	d046      	beq.n	801a7e8 <GET_Ckey+0x33c>
			strcpy(Rconfig.CKEY7, RB);
 801a75a:	4b09      	ldr	r3, [pc, #36]	@ (801a780 <GET_Ckey+0x2d4>)
 801a75c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801a75e:	4906      	ldr	r1, [pc, #24]	@ (801a778 <GET_Ckey+0x2cc>)
 801a760:	4618      	mov	r0, r3
 801a762:	f004 fcb2 	bl	801f0ca <strcpy>
			printc(MinDelay, "CKEY7: %s\n", Rconfig.CKEY7);
 801a766:	4b06      	ldr	r3, [pc, #24]	@ (801a780 <GET_Ckey+0x2d4>)
 801a768:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801a76a:	461a      	mov	r2, r3
 801a76c:	491d      	ldr	r1, [pc, #116]	@ (801a7e4 <GET_Ckey+0x338>)
 801a76e:	200a      	movs	r0, #10
 801a770:	f7e7 f952 	bl	8001a18 <printc>
 801a774:	e041      	b.n	801a7fa <GET_Ckey+0x34e>
 801a776:	bf00      	nop
 801a778:	20014db8 	.word	0x20014db8
 801a77c:	0816a430 	.word	0x0816a430
 801a780:	20014d28 	.word	0x20014d28
 801a784:	08023a38 	.word	0x08023a38
 801a788:	08023a44 	.word	0x08023a44
 801a78c:	08023a6c 	.word	0x08023a6c
 801a790:	0816a450 	.word	0x0816a450
 801a794:	08023a90 	.word	0x08023a90
 801a798:	08023a9c 	.word	0x08023a9c
 801a79c:	08023ac4 	.word	0x08023ac4
 801a7a0:	0816a470 	.word	0x0816a470
 801a7a4:	08023ae8 	.word	0x08023ae8
 801a7a8:	08023af4 	.word	0x08023af4
 801a7ac:	08023b1c 	.word	0x08023b1c
 801a7b0:	0816a490 	.word	0x0816a490
 801a7b4:	08023b40 	.word	0x08023b40
 801a7b8:	08023b4c 	.word	0x08023b4c
 801a7bc:	08023b74 	.word	0x08023b74
 801a7c0:	0816a4b0 	.word	0x0816a4b0
 801a7c4:	08023b98 	.word	0x08023b98
 801a7c8:	08023ba4 	.word	0x08023ba4
 801a7cc:	08023bcc 	.word	0x08023bcc
 801a7d0:	0816a4d0 	.word	0x0816a4d0
 801a7d4:	08023bf0 	.word	0x08023bf0
 801a7d8:	08023bfc 	.word	0x08023bfc
 801a7dc:	08023c24 	.word	0x08023c24
 801a7e0:	0816a4f0 	.word	0x0816a4f0
 801a7e4:	08023c48 	.word	0x08023c48
		} else {
			printc(MinDelay, "Memory allocation failed for CKEY7!\n");
 801a7e8:	491f      	ldr	r1, [pc, #124]	@ (801a868 <GET_Ckey+0x3bc>)
 801a7ea:	200a      	movs	r0, #10
 801a7ec:	f7e7 f914 	bl	8001a18 <printc>
 801a7f0:	e003      	b.n	801a7fa <GET_Ckey+0x34e>
		}
	} else {
		printc(MinDelay, "Failed to read CKEY7 from flash!\n");
 801a7f2:	491e      	ldr	r1, [pc, #120]	@ (801a86c <GET_Ckey+0x3c0>)
 801a7f4:	200a      	movs	r0, #10
 801a7f6:	f7e7 f90f 	bl	8001a18 <printc>
	}
	memset(RB, 0, sizeof(RB));
 801a7fa:	2264      	movs	r2, #100	@ 0x64
 801a7fc:	2100      	movs	r1, #0
 801a7fe:	481c      	ldr	r0, [pc, #112]	@ (801a870 <GET_Ckey+0x3c4>)
 801a800:	f004 fb06 	bl	801ee10 <memset>
	if (FLASH_Read_Buff(CKEY8_ADDR, RB, 32) == HAL_OK) {
 801a804:	2220      	movs	r2, #32
 801a806:	491a      	ldr	r1, [pc, #104]	@ (801a870 <GET_Ckey+0x3c4>)
 801a808:	481a      	ldr	r0, [pc, #104]	@ (801a874 <GET_Ckey+0x3c8>)
 801a80a:	f7fb ff01 	bl	8016610 <FLASH_Read_Buff>
 801a80e:	4603      	mov	r3, r0
 801a810:	2b00      	cmp	r3, #0
 801a812:	d122      	bne.n	801a85a <GET_Ckey+0x3ae>
		Rconfig.CKEY8 = (char*) malloc(strlen(RB) + 1); // Allocate memory for string
 801a814:	4816      	ldr	r0, [pc, #88]	@ (801a870 <GET_Ckey+0x3c4>)
 801a816:	f7e5 fd45 	bl	80002a4 <strlen>
 801a81a:	4603      	mov	r3, r0
 801a81c:	3301      	adds	r3, #1
 801a81e:	4618      	mov	r0, r3
 801a820:	f002 fa86 	bl	801cd30 <malloc>
 801a824:	4603      	mov	r3, r0
 801a826:	461a      	mov	r2, r3
 801a828:	4b13      	ldr	r3, [pc, #76]	@ (801a878 <GET_Ckey+0x3cc>)
 801a82a:	679a      	str	r2, [r3, #120]	@ 0x78
		if (Rconfig.CKEY8 != NULL) {
 801a82c:	4b12      	ldr	r3, [pc, #72]	@ (801a878 <GET_Ckey+0x3cc>)
 801a82e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801a830:	2b00      	cmp	r3, #0
 801a832:	d00d      	beq.n	801a850 <GET_Ckey+0x3a4>
			strcpy(Rconfig.CKEY8, RB);
 801a834:	4b10      	ldr	r3, [pc, #64]	@ (801a878 <GET_Ckey+0x3cc>)
 801a836:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801a838:	490d      	ldr	r1, [pc, #52]	@ (801a870 <GET_Ckey+0x3c4>)
 801a83a:	4618      	mov	r0, r3
 801a83c:	f004 fc45 	bl	801f0ca <strcpy>
			printc(MinDelay, "CKEY8: %s\n", Rconfig.CKEY8);
 801a840:	4b0d      	ldr	r3, [pc, #52]	@ (801a878 <GET_Ckey+0x3cc>)
 801a842:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801a844:	461a      	mov	r2, r3
 801a846:	490d      	ldr	r1, [pc, #52]	@ (801a87c <GET_Ckey+0x3d0>)
 801a848:	200a      	movs	r0, #10
 801a84a:	f7e7 f8e5 	bl	8001a18 <printc>
 801a84e:	e008      	b.n	801a862 <GET_Ckey+0x3b6>
		} else {
			printc(MinDelay, "Memory allocation failed for CKEY8!\n");
 801a850:	490b      	ldr	r1, [pc, #44]	@ (801a880 <GET_Ckey+0x3d4>)
 801a852:	200a      	movs	r0, #10
 801a854:	f7e7 f8e0 	bl	8001a18 <printc>
 801a858:	e003      	b.n	801a862 <GET_Ckey+0x3b6>
		}
	} else {
		printc(MinDelay, "Failed to read CKEY8 from flash!\n");
 801a85a:	490a      	ldr	r1, [pc, #40]	@ (801a884 <GET_Ckey+0x3d8>)
 801a85c:	200a      	movs	r0, #10
 801a85e:	f7e7 f8db 	bl	8001a18 <printc>
	}

}
 801a862:	bf00      	nop
 801a864:	4618      	mov	r0, r3
 801a866:	bd80      	pop	{r7, pc}
 801a868:	08023c54 	.word	0x08023c54
 801a86c:	08023c7c 	.word	0x08023c7c
 801a870:	20014db8 	.word	0x20014db8
 801a874:	0816a520 	.word	0x0816a520
 801a878:	20014d28 	.word	0x20014d28
 801a87c:	08023ca0 	.word	0x08023ca0
 801a880:	08023cac 	.word	0x08023cac
 801a884:	08023cd4 	.word	0x08023cd4

0801a888 <fotaReqestKey>:
#include "main.h"
#include "ledblink.h"
#include "sms.h"
extern char PHnum[10];

void fotaReqestKey() {
 801a888:	b580      	push	{r7, lr}
 801a88a:	af00      	add	r7, sp, #0
	WriteF_SKey();
 801a88c:	f7fb ff08 	bl	80166a0 <WriteF_SKey>
	EC200_HTTP_POST(1);
 801a890:	2001      	movs	r0, #1
 801a892:	f7fb f9cb 	bl	8015c2c <EC200_HTTP_POST>

	WriteF_CKey();
 801a896:	f7fb ff3b 	bl	8016710 <WriteF_CKey>
}
 801a89a:	bf00      	nop
 801a89c:	bd80      	pop	{r7, pc}

0801a89e <fotaUpdate>:
bool fotaUpdate() {
 801a89e:	b580      	push	{r7, lr}
 801a8a0:	af00      	add	r7, sp, #0
	return EC200_HTTP_POST(6);
 801a8a2:	2006      	movs	r0, #6
 801a8a4:	f7fb f9c2 	bl	8015c2c <EC200_HTTP_POST>
 801a8a8:	4603      	mov	r3, r0
 801a8aa:	2b00      	cmp	r3, #0
 801a8ac:	bf14      	ite	ne
 801a8ae:	2301      	movne	r3, #1
 801a8b0:	2300      	moveq	r3, #0
 801a8b2:	b2db      	uxtb	r3, r3
}
 801a8b4:	4618      	mov	r0, r3
 801a8b6:	bd80      	pop	{r7, pc}

0801a8b8 <update>:

void COTA_Update() {
	EC200_HTTP_POST(5);
}

bool update() {
 801a8b8:	b5b0      	push	{r4, r5, r7, lr}
 801a8ba:	b08c      	sub	sp, #48	@ 0x30
 801a8bc:	af00      	add	r7, sp, #0

	EC200_Init();
 801a8be:	f7e6 fca1 	bl	8001204 <EC200_Init>
	FUpdate();
 801a8c2:	f000 fdf3 	bl	801b4ac <FUpdate>
	fotaReqestKey();
 801a8c6:	f7ff ffdf 	bl	801a888 <fotaReqestKey>

//	COTA_Update();
	if (!fotaUpdate()) {
 801a8ca:	f7ff ffe8 	bl	801a89e <fotaUpdate>
 801a8ce:	4603      	mov	r3, r0
 801a8d0:	f083 0301 	eor.w	r3, r3, #1
 801a8d4:	b2db      	uxtb	r3, r3
 801a8d6:	2b00      	cmp	r3, #0
 801a8d8:	d010      	beq.n	801a8fc <update+0x44>
		char SBf[] = { "FOTA_Download Failed" };
 801a8da:	4b18      	ldr	r3, [pc, #96]	@ (801a93c <update+0x84>)
 801a8dc:	463c      	mov	r4, r7
 801a8de:	461d      	mov	r5, r3
 801a8e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a8e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a8e4:	e895 0003 	ldmia.w	r5, {r0, r1}
 801a8e8:	6020      	str	r0, [r4, #0]
 801a8ea:	3404      	adds	r4, #4
 801a8ec:	7021      	strb	r1, [r4, #0]
		SMS_FSend(PHnum, SBf);
 801a8ee:	463b      	mov	r3, r7
 801a8f0:	4619      	mov	r1, r3
 801a8f2:	4813      	ldr	r0, [pc, #76]	@ (801a940 <update+0x88>)
 801a8f4:	f001 ff9e 	bl	801c834 <SMS_FSend>
		return false;
 801a8f8:	2300      	movs	r3, #0
 801a8fa:	e01b      	b.n	801a934 <update+0x7c>
	}
	FupdateC();
 801a8fc:	f000 fde8 	bl	801b4d0 <FupdateC>

	char SBf[] = { "FOTA_Download Complete" };
 801a900:	4b10      	ldr	r3, [pc, #64]	@ (801a944 <update+0x8c>)
 801a902:	f107 0418 	add.w	r4, r7, #24
 801a906:	461d      	mov	r5, r3
 801a908:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a90a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a90c:	e895 0003 	ldmia.w	r5, {r0, r1}
 801a910:	6020      	str	r0, [r4, #0]
 801a912:	3404      	adds	r4, #4
 801a914:	8021      	strh	r1, [r4, #0]
 801a916:	3402      	adds	r4, #2
 801a918:	0c0b      	lsrs	r3, r1, #16
 801a91a:	7023      	strb	r3, [r4, #0]
	SMS_FSend(PHnum, SBf);
 801a91c:	f107 0318 	add.w	r3, r7, #24
 801a920:	4619      	mov	r1, r3
 801a922:	4807      	ldr	r0, [pc, #28]	@ (801a940 <update+0x88>)
 801a924:	f001 ff86 	bl	801c834 <SMS_FSend>
	SET_PHNUM(PHnum);
 801a928:	4805      	ldr	r0, [pc, #20]	@ (801a940 <update+0x88>)
 801a92a:	f7fe fa4f 	bl	8018dcc <SET_PHNUM>
	SET_RESET();
 801a92e:	f7fe fa6f 	bl	8018e10 <SET_RESET>

	return true;
 801a932:	2301      	movs	r3, #1

}
 801a934:	4618      	mov	r0, r3
 801a936:	3730      	adds	r7, #48	@ 0x30
 801a938:	46bd      	mov	sp, r7
 801a93a:	bdb0      	pop	{r4, r5, r7, pc}
 801a93c:	08023cf8 	.word	0x08023cf8
 801a940:	200138d0 	.word	0x200138d0
 801a944:	08023d10 	.word	0x08023d10

0801a948 <ReadF_Loc>:

void ReadF_Loc(int KeyType, int KeyNumber)
// KeyType Can be 1 or 2 ,  #KeyNumber Should be 1-3 for KeyType-1, #KeyNumber Should be 1-8 for KeyType-2
{
 801a948:	b580      	push	{r7, lr}
 801a94a:	b082      	sub	sp, #8
 801a94c:	af00      	add	r7, sp, #0
 801a94e:	6078      	str	r0, [r7, #4]
 801a950:	6039      	str	r1, [r7, #0]
	switch (KeyType) {
 801a952:	687b      	ldr	r3, [r7, #4]
 801a954:	2b01      	cmp	r3, #1
 801a956:	d003      	beq.n	801a960 <ReadF_Loc+0x18>
 801a958:	687b      	ldr	r3, [r7, #4]
 801a95a:	2b02      	cmp	r3, #2
 801a95c:	d004      	beq.n	801a968 <ReadF_Loc+0x20>
		ReadF_sKey(KeyNumber);
		break;
	case 2:
		ReadF_cKey(KeyNumber);
	default:
		break;
 801a95e:	e006      	b.n	801a96e <ReadF_Loc+0x26>
		ReadF_sKey(KeyNumber);
 801a960:	6838      	ldr	r0, [r7, #0]
 801a962:	f7fb ff41 	bl	80167e8 <ReadF_sKey>
		break;
 801a966:	e003      	b.n	801a970 <ReadF_Loc+0x28>
		ReadF_cKey(KeyNumber);
 801a968:	6838      	ldr	r0, [r7, #0]
 801a96a:	f7fb ffa7 	bl	80168bc <ReadF_cKey>
		break;
 801a96e:	bf00      	nop
	}

}
 801a970:	bf00      	nop
 801a972:	3708      	adds	r7, #8
 801a974:	46bd      	mov	sp, r7
 801a976:	bd80      	pop	{r7, pc}

0801a978 <__NVIC_GetPriorityGrouping>:
{
 801a978:	b480      	push	{r7}
 801a97a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801a97c:	4b04      	ldr	r3, [pc, #16]	@ (801a990 <__NVIC_GetPriorityGrouping+0x18>)
 801a97e:	68db      	ldr	r3, [r3, #12]
 801a980:	0a1b      	lsrs	r3, r3, #8
 801a982:	f003 0307 	and.w	r3, r3, #7
}
 801a986:	4618      	mov	r0, r3
 801a988:	46bd      	mov	sp, r7
 801a98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a98e:	4770      	bx	lr
 801a990:	e000ed00 	.word	0xe000ed00

0801a994 <__NVIC_EnableIRQ>:
{
 801a994:	b480      	push	{r7}
 801a996:	b083      	sub	sp, #12
 801a998:	af00      	add	r7, sp, #0
 801a99a:	4603      	mov	r3, r0
 801a99c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 801a99e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801a9a2:	2b00      	cmp	r3, #0
 801a9a4:	db0b      	blt.n	801a9be <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801a9a6:	88fb      	ldrh	r3, [r7, #6]
 801a9a8:	f003 021f 	and.w	r2, r3, #31
 801a9ac:	4907      	ldr	r1, [pc, #28]	@ (801a9cc <__NVIC_EnableIRQ+0x38>)
 801a9ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801a9b2:	095b      	lsrs	r3, r3, #5
 801a9b4:	2001      	movs	r0, #1
 801a9b6:	fa00 f202 	lsl.w	r2, r0, r2
 801a9ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801a9be:	bf00      	nop
 801a9c0:	370c      	adds	r7, #12
 801a9c2:	46bd      	mov	sp, r7
 801a9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9c8:	4770      	bx	lr
 801a9ca:	bf00      	nop
 801a9cc:	e000e100 	.word	0xe000e100

0801a9d0 <__NVIC_SetPriority>:
{
 801a9d0:	b480      	push	{r7}
 801a9d2:	b083      	sub	sp, #12
 801a9d4:	af00      	add	r7, sp, #0
 801a9d6:	4603      	mov	r3, r0
 801a9d8:	6039      	str	r1, [r7, #0]
 801a9da:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 801a9dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801a9e0:	2b00      	cmp	r3, #0
 801a9e2:	db0a      	blt.n	801a9fa <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801a9e4:	683b      	ldr	r3, [r7, #0]
 801a9e6:	b2da      	uxtb	r2, r3
 801a9e8:	490c      	ldr	r1, [pc, #48]	@ (801aa1c <__NVIC_SetPriority+0x4c>)
 801a9ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801a9ee:	0112      	lsls	r2, r2, #4
 801a9f0:	b2d2      	uxtb	r2, r2
 801a9f2:	440b      	add	r3, r1
 801a9f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 801a9f8:	e00a      	b.n	801aa10 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801a9fa:	683b      	ldr	r3, [r7, #0]
 801a9fc:	b2da      	uxtb	r2, r3
 801a9fe:	4908      	ldr	r1, [pc, #32]	@ (801aa20 <__NVIC_SetPriority+0x50>)
 801aa00:	88fb      	ldrh	r3, [r7, #6]
 801aa02:	f003 030f 	and.w	r3, r3, #15
 801aa06:	3b04      	subs	r3, #4
 801aa08:	0112      	lsls	r2, r2, #4
 801aa0a:	b2d2      	uxtb	r2, r2
 801aa0c:	440b      	add	r3, r1
 801aa0e:	761a      	strb	r2, [r3, #24]
}
 801aa10:	bf00      	nop
 801aa12:	370c      	adds	r7, #12
 801aa14:	46bd      	mov	sp, r7
 801aa16:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa1a:	4770      	bx	lr
 801aa1c:	e000e100 	.word	0xe000e100
 801aa20:	e000ed00 	.word	0xe000ed00

0801aa24 <NVIC_EncodePriority>:
{
 801aa24:	b480      	push	{r7}
 801aa26:	b089      	sub	sp, #36	@ 0x24
 801aa28:	af00      	add	r7, sp, #0
 801aa2a:	60f8      	str	r0, [r7, #12]
 801aa2c:	60b9      	str	r1, [r7, #8]
 801aa2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801aa30:	68fb      	ldr	r3, [r7, #12]
 801aa32:	f003 0307 	and.w	r3, r3, #7
 801aa36:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801aa38:	69fb      	ldr	r3, [r7, #28]
 801aa3a:	f1c3 0307 	rsb	r3, r3, #7
 801aa3e:	2b04      	cmp	r3, #4
 801aa40:	bf28      	it	cs
 801aa42:	2304      	movcs	r3, #4
 801aa44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801aa46:	69fb      	ldr	r3, [r7, #28]
 801aa48:	3304      	adds	r3, #4
 801aa4a:	2b06      	cmp	r3, #6
 801aa4c:	d902      	bls.n	801aa54 <NVIC_EncodePriority+0x30>
 801aa4e:	69fb      	ldr	r3, [r7, #28]
 801aa50:	3b03      	subs	r3, #3
 801aa52:	e000      	b.n	801aa56 <NVIC_EncodePriority+0x32>
 801aa54:	2300      	movs	r3, #0
 801aa56:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801aa58:	f04f 32ff 	mov.w	r2, #4294967295
 801aa5c:	69bb      	ldr	r3, [r7, #24]
 801aa5e:	fa02 f303 	lsl.w	r3, r2, r3
 801aa62:	43da      	mvns	r2, r3
 801aa64:	68bb      	ldr	r3, [r7, #8]
 801aa66:	401a      	ands	r2, r3
 801aa68:	697b      	ldr	r3, [r7, #20]
 801aa6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801aa6c:	f04f 31ff 	mov.w	r1, #4294967295
 801aa70:	697b      	ldr	r3, [r7, #20]
 801aa72:	fa01 f303 	lsl.w	r3, r1, r3
 801aa76:	43d9      	mvns	r1, r3
 801aa78:	687b      	ldr	r3, [r7, #4]
 801aa7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801aa7c:	4313      	orrs	r3, r2
}
 801aa7e:	4618      	mov	r0, r3
 801aa80:	3724      	adds	r7, #36	@ 0x24
 801aa82:	46bd      	mov	sp, r7
 801aa84:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa88:	4770      	bx	lr

0801aa8a <LL_GPIO_SetPinMode>:
{
 801aa8a:	b480      	push	{r7}
 801aa8c:	b08b      	sub	sp, #44	@ 0x2c
 801aa8e:	af00      	add	r7, sp, #0
 801aa90:	60f8      	str	r0, [r7, #12]
 801aa92:	60b9      	str	r1, [r7, #8]
 801aa94:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * GPIO_MODER_MODE1_Pos)),
 801aa96:	68fb      	ldr	r3, [r7, #12]
 801aa98:	681a      	ldr	r2, [r3, #0]
 801aa9a:	68bb      	ldr	r3, [r7, #8]
 801aa9c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801aa9e:	697b      	ldr	r3, [r7, #20]
 801aaa0:	fa93 f3a3 	rbit	r3, r3
 801aaa4:	613b      	str	r3, [r7, #16]
  return result;
 801aaa6:	693b      	ldr	r3, [r7, #16]
 801aaa8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801aaaa:	69bb      	ldr	r3, [r7, #24]
 801aaac:	2b00      	cmp	r3, #0
 801aaae:	d101      	bne.n	801aab4 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 801aab0:	2320      	movs	r3, #32
 801aab2:	e003      	b.n	801aabc <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 801aab4:	69bb      	ldr	r3, [r7, #24]
 801aab6:	fab3 f383 	clz	r3, r3
 801aaba:	b2db      	uxtb	r3, r3
 801aabc:	005b      	lsls	r3, r3, #1
 801aabe:	2103      	movs	r1, #3
 801aac0:	fa01 f303 	lsl.w	r3, r1, r3
 801aac4:	43db      	mvns	r3, r3
 801aac6:	401a      	ands	r2, r3
 801aac8:	68bb      	ldr	r3, [r7, #8]
 801aaca:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801aacc:	6a3b      	ldr	r3, [r7, #32]
 801aace:	fa93 f3a3 	rbit	r3, r3
 801aad2:	61fb      	str	r3, [r7, #28]
  return result;
 801aad4:	69fb      	ldr	r3, [r7, #28]
 801aad6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 801aad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aada:	2b00      	cmp	r3, #0
 801aadc:	d101      	bne.n	801aae2 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 801aade:	2320      	movs	r3, #32
 801aae0:	e003      	b.n	801aaea <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 801aae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aae4:	fab3 f383 	clz	r3, r3
 801aae8:	b2db      	uxtb	r3, r3
 801aaea:	005b      	lsls	r3, r3, #1
 801aaec:	6879      	ldr	r1, [r7, #4]
 801aaee:	fa01 f303 	lsl.w	r3, r1, r3
 801aaf2:	431a      	orrs	r2, r3
 801aaf4:	68fb      	ldr	r3, [r7, #12]
 801aaf6:	601a      	str	r2, [r3, #0]
}
 801aaf8:	bf00      	nop
 801aafa:	372c      	adds	r7, #44	@ 0x2c
 801aafc:	46bd      	mov	sp, r7
 801aafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab02:	4770      	bx	lr

0801ab04 <LL_GPIO_SetPinPull>:
{
 801ab04:	b480      	push	{r7}
 801ab06:	b08b      	sub	sp, #44	@ 0x2c
 801ab08:	af00      	add	r7, sp, #0
 801ab0a:	60f8      	str	r0, [r7, #12]
 801ab0c:	60b9      	str	r1, [r7, #8]
 801ab0e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * GPIO_PUPDR_PUPD1_Pos)),
 801ab10:	68fb      	ldr	r3, [r7, #12]
 801ab12:	68da      	ldr	r2, [r3, #12]
 801ab14:	68bb      	ldr	r3, [r7, #8]
 801ab16:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801ab18:	697b      	ldr	r3, [r7, #20]
 801ab1a:	fa93 f3a3 	rbit	r3, r3
 801ab1e:	613b      	str	r3, [r7, #16]
  return result;
 801ab20:	693b      	ldr	r3, [r7, #16]
 801ab22:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801ab24:	69bb      	ldr	r3, [r7, #24]
 801ab26:	2b00      	cmp	r3, #0
 801ab28:	d101      	bne.n	801ab2e <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 801ab2a:	2320      	movs	r3, #32
 801ab2c:	e003      	b.n	801ab36 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 801ab2e:	69bb      	ldr	r3, [r7, #24]
 801ab30:	fab3 f383 	clz	r3, r3
 801ab34:	b2db      	uxtb	r3, r3
 801ab36:	005b      	lsls	r3, r3, #1
 801ab38:	2103      	movs	r1, #3
 801ab3a:	fa01 f303 	lsl.w	r3, r1, r3
 801ab3e:	43db      	mvns	r3, r3
 801ab40:	401a      	ands	r2, r3
 801ab42:	68bb      	ldr	r3, [r7, #8]
 801ab44:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801ab46:	6a3b      	ldr	r3, [r7, #32]
 801ab48:	fa93 f3a3 	rbit	r3, r3
 801ab4c:	61fb      	str	r3, [r7, #28]
  return result;
 801ab4e:	69fb      	ldr	r3, [r7, #28]
 801ab50:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 801ab52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ab54:	2b00      	cmp	r3, #0
 801ab56:	d101      	bne.n	801ab5c <LL_GPIO_SetPinPull+0x58>
    return 32U;
 801ab58:	2320      	movs	r3, #32
 801ab5a:	e003      	b.n	801ab64 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 801ab5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ab5e:	fab3 f383 	clz	r3, r3
 801ab62:	b2db      	uxtb	r3, r3
 801ab64:	005b      	lsls	r3, r3, #1
 801ab66:	6879      	ldr	r1, [r7, #4]
 801ab68:	fa01 f303 	lsl.w	r3, r1, r3
 801ab6c:	431a      	orrs	r2, r3
 801ab6e:	68fb      	ldr	r3, [r7, #12]
 801ab70:	60da      	str	r2, [r3, #12]
}
 801ab72:	bf00      	nop
 801ab74:	372c      	adds	r7, #44	@ 0x2c
 801ab76:	46bd      	mov	sp, r7
 801ab78:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab7c:	4770      	bx	lr

0801ab7e <LL_GPIO_IsInputPinSet>:
{
 801ab7e:	b480      	push	{r7}
 801ab80:	b083      	sub	sp, #12
 801ab82:	af00      	add	r7, sp, #0
 801ab84:	6078      	str	r0, [r7, #4]
 801ab86:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 801ab88:	687b      	ldr	r3, [r7, #4]
 801ab8a:	691a      	ldr	r2, [r3, #16]
 801ab8c:	683b      	ldr	r3, [r7, #0]
 801ab8e:	4013      	ands	r3, r2
 801ab90:	683a      	ldr	r2, [r7, #0]
 801ab92:	429a      	cmp	r2, r3
 801ab94:	d101      	bne.n	801ab9a <LL_GPIO_IsInputPinSet+0x1c>
 801ab96:	2301      	movs	r3, #1
 801ab98:	e000      	b.n	801ab9c <LL_GPIO_IsInputPinSet+0x1e>
 801ab9a:	2300      	movs	r3, #0
}
 801ab9c:	4618      	mov	r0, r3
 801ab9e:	370c      	adds	r7, #12
 801aba0:	46bd      	mov	sp, r7
 801aba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aba6:	4770      	bx	lr

0801aba8 <LL_EXTI_ClearRisingFlag_0_31>:
{
 801aba8:	b480      	push	{r7}
 801abaa:	b083      	sub	sp, #12
 801abac:	af00      	add	r7, sp, #0
 801abae:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->RPR1, ExtiLine);
 801abb0:	4a04      	ldr	r2, [pc, #16]	@ (801abc4 <LL_EXTI_ClearRisingFlag_0_31+0x1c>)
 801abb2:	687b      	ldr	r3, [r7, #4]
 801abb4:	60d3      	str	r3, [r2, #12]
}
 801abb6:	bf00      	nop
 801abb8:	370c      	adds	r7, #12
 801abba:	46bd      	mov	sp, r7
 801abbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abc0:	4770      	bx	lr
 801abc2:	bf00      	nop
 801abc4:	44022000 	.word	0x44022000

0801abc8 <LL_EXTI_SetEXTISource>:
{
 801abc8:	b480      	push	{r7}
 801abca:	b083      	sub	sp, #12
 801abcc:	af00      	add	r7, sp, #0
 801abce:	6078      	str	r0, [r7, #4]
 801abd0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(EXTI->EXTICR[Line & 0x03U], EXTI_EXTICR1_EXTI0 << (Line >> LL_EXTI_REGISTER_PINPOS_SHFT), \
 801abd2:	4a10      	ldr	r2, [pc, #64]	@ (801ac14 <LL_EXTI_SetEXTISource+0x4c>)
 801abd4:	683b      	ldr	r3, [r7, #0]
 801abd6:	f003 0303 	and.w	r3, r3, #3
 801abda:	3318      	adds	r3, #24
 801abdc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801abe0:	683b      	ldr	r3, [r7, #0]
 801abe2:	0c1b      	lsrs	r3, r3, #16
 801abe4:	210f      	movs	r1, #15
 801abe6:	fa01 f303 	lsl.w	r3, r1, r3
 801abea:	43db      	mvns	r3, r3
 801abec:	ea02 0103 	and.w	r1, r2, r3
 801abf0:	683b      	ldr	r3, [r7, #0]
 801abf2:	0c1b      	lsrs	r3, r3, #16
 801abf4:	687a      	ldr	r2, [r7, #4]
 801abf6:	409a      	lsls	r2, r3
 801abf8:	4806      	ldr	r0, [pc, #24]	@ (801ac14 <LL_EXTI_SetEXTISource+0x4c>)
 801abfa:	683b      	ldr	r3, [r7, #0]
 801abfc:	f003 0303 	and.w	r3, r3, #3
 801ac00:	430a      	orrs	r2, r1
 801ac02:	3318      	adds	r3, #24
 801ac04:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 801ac08:	bf00      	nop
 801ac0a:	370c      	adds	r7, #12
 801ac0c:	46bd      	mov	sp, r7
 801ac0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac12:	4770      	bx	lr
 801ac14:	44022000 	.word	0x44022000

0801ac18 <getSleepStatus>:
extern TIM_HandleTypeDef htim6;
extern int FLAG_RESET_On_Sleep;
extern bool sendPDDataFlag;
int FLAG_RESET_On_Sleep =0;
uint32_t WRT_Time = 0x57E40; //0x36EE80;
bool getSleepStatus() {
 801ac18:	b480      	push	{r7}
 801ac1a:	af00      	add	r7, sp, #0
	return sleepStatus;
 801ac1c:	4b03      	ldr	r3, [pc, #12]	@ (801ac2c <getSleepStatus+0x14>)
 801ac1e:	781b      	ldrb	r3, [r3, #0]
}
 801ac20:	4618      	mov	r0, r3
 801ac22:	46bd      	mov	sp, r7
 801ac24:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac28:	4770      	bx	lr
 801ac2a:	bf00      	nop
 801ac2c:	20014e44 	.word	0x20014e44

0801ac30 <initEvb>:
void setSleppStatus(bool sleep) {
	sleepStatus = sleep;
}
void initEvb(ADC_HandleTypeDef *adc) {
 801ac30:	b480      	push	{r7}
 801ac32:	b083      	sub	sp, #12
 801ac34:	af00      	add	r7, sp, #0
 801ac36:	6078      	str	r0, [r7, #4]
	evbSense = adc;
 801ac38:	4a04      	ldr	r2, [pc, #16]	@ (801ac4c <initEvb+0x1c>)
 801ac3a:	687b      	ldr	r3, [r7, #4]
 801ac3c:	6013      	str	r3, [r2, #0]
}
 801ac3e:	bf00      	nop
 801ac40:	370c      	adds	r7, #12
 801ac42:	46bd      	mov	sp, r7
 801ac44:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac48:	4770      	bx	lr
 801ac4a:	bf00      	nop
 801ac4c:	20014e20 	.word	0x20014e20

0801ac50 <initIvb>:
void initIvb(ADC_HandleTypeDef *adc) {
 801ac50:	b480      	push	{r7}
 801ac52:	b083      	sub	sp, #12
 801ac54:	af00      	add	r7, sp, #0
 801ac56:	6078      	str	r0, [r7, #4]
	ivbSense = adc;
 801ac58:	4a04      	ldr	r2, [pc, #16]	@ (801ac6c <initIvb+0x1c>)
 801ac5a:	687b      	ldr	r3, [r7, #4]
 801ac5c:	6013      	str	r3, [r2, #0]
}
 801ac5e:	bf00      	nop
 801ac60:	370c      	adds	r7, #12
 801ac62:	46bd      	mov	sp, r7
 801ac64:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac68:	4770      	bx	lr
 801ac6a:	bf00      	nop
 801ac6c:	20014e24 	.word	0x20014e24

0801ac70 <getInputVoltage>:

bool getInputVoltage(float *opADC) {
 801ac70:	b580      	push	{r7, lr}
 801ac72:	b084      	sub	sp, #16
 801ac74:	af00      	add	r7, sp, #0
 801ac76:	6078      	str	r0, [r7, #4]
	uint16_t raw = 0;
 801ac78:	2300      	movs	r3, #0
 801ac7a:	81fb      	strh	r3, [r7, #14]
	// Wait for ADC conversion to complete
	HAL_ADC_Start(evbSense);
 801ac7c:	4b26      	ldr	r3, [pc, #152]	@ (801ad18 <getInputVoltage+0xa8>)
 801ac7e:	681b      	ldr	r3, [r3, #0]
 801ac80:	4618      	mov	r0, r3
 801ac82:	f7eb fab9 	bl	80061f8 <HAL_ADC_Start>
	if (HAL_ADC_PollForConversion(evbSense, 2000) == HAL_OK) {
 801ac86:	4b24      	ldr	r3, [pc, #144]	@ (801ad18 <getInputVoltage+0xa8>)
 801ac88:	681b      	ldr	r3, [r3, #0]
 801ac8a:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 801ac8e:	4618      	mov	r0, r3
 801ac90:	f7eb fba0 	bl	80063d4 <HAL_ADC_PollForConversion>
 801ac94:	4603      	mov	r3, r0
 801ac96:	2b00      	cmp	r3, #0
 801ac98:	d131      	bne.n	801acfe <getInputVoltage+0x8e>
		// Read ADC value
		raw = HAL_ADC_GetValue(evbSense);
 801ac9a:	4b1f      	ldr	r3, [pc, #124]	@ (801ad18 <getInputVoltage+0xa8>)
 801ac9c:	681b      	ldr	r3, [r3, #0]
 801ac9e:	4618      	mov	r0, r3
 801aca0:	f7eb fc70 	bl	8006584 <HAL_ADC_GetValue>
 801aca4:	4603      	mov	r3, r0
 801aca6:	81fb      	strh	r3, [r7, #14]
		*opADC = (raw * 3.3 * REFERANCE_VOLTAGE) / ((1 << 12) - 1);
 801aca8:	89fb      	ldrh	r3, [r7, #14]
 801acaa:	4618      	mov	r0, r3
 801acac:	f7e5 fc54 	bl	8000558 <__aeabi_i2d>
 801acb0:	a315      	add	r3, pc, #84	@ (adr r3, 801ad08 <getInputVoltage+0x98>)
 801acb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801acb6:	f7e5 fcb9 	bl	800062c <__aeabi_dmul>
 801acba:	4602      	mov	r2, r0
 801acbc:	460b      	mov	r3, r1
 801acbe:	4610      	mov	r0, r2
 801acc0:	4619      	mov	r1, r3
 801acc2:	f04f 0200 	mov.w	r2, #0
 801acc6:	4b15      	ldr	r3, [pc, #84]	@ (801ad1c <getInputVoltage+0xac>)
 801acc8:	f7e5 fcb0 	bl	800062c <__aeabi_dmul>
 801accc:	4602      	mov	r2, r0
 801acce:	460b      	mov	r3, r1
 801acd0:	4610      	mov	r0, r2
 801acd2:	4619      	mov	r1, r3
 801acd4:	a30e      	add	r3, pc, #56	@ (adr r3, 801ad10 <getInputVoltage+0xa0>)
 801acd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801acda:	f7e5 fdd1 	bl	8000880 <__aeabi_ddiv>
 801acde:	4602      	mov	r2, r0
 801ace0:	460b      	mov	r3, r1
 801ace2:	4610      	mov	r0, r2
 801ace4:	4619      	mov	r1, r3
 801ace6:	f7e5 ff99 	bl	8000c1c <__aeabi_d2f>
 801acea:	4602      	mov	r2, r0
 801acec:	687b      	ldr	r3, [r7, #4]
 801acee:	601a      	str	r2, [r3, #0]
		// Stop ADC conversion
		HAL_ADC_Stop(evbSense);
 801acf0:	4b09      	ldr	r3, [pc, #36]	@ (801ad18 <getInputVoltage+0xa8>)
 801acf2:	681b      	ldr	r3, [r3, #0]
 801acf4:	4618      	mov	r0, r3
 801acf6:	f7eb fb39 	bl	800636c <HAL_ADC_Stop>
		return true;
 801acfa:	2301      	movs	r3, #1
 801acfc:	e000      	b.n	801ad00 <getInputVoltage+0x90>
	}
	return false;
 801acfe:	2300      	movs	r3, #0
}
 801ad00:	4618      	mov	r0, r3
 801ad02:	3710      	adds	r7, #16
 801ad04:	46bd      	mov	sp, r7
 801ad06:	bd80      	pop	{r7, pc}
 801ad08:	66666666 	.word	0x66666666
 801ad0c:	400a6666 	.word	0x400a6666
 801ad10:	00000000 	.word	0x00000000
 801ad14:	40affe00 	.word	0x40affe00
 801ad18:	20014e20 	.word	0x20014e20
 801ad1c:	40260000 	.word	0x40260000

0801ad20 <getInternalBattery>:
bool getInternalBattery(float *opADC) {
 801ad20:	b580      	push	{r7, lr}
 801ad22:	b084      	sub	sp, #16
 801ad24:	af00      	add	r7, sp, #0
 801ad26:	6078      	str	r0, [r7, #4]
	uint16_t raw = 0;
 801ad28:	2300      	movs	r3, #0
 801ad2a:	81fb      	strh	r3, [r7, #14]
	// Wait for ADC conversion to complete
	HAL_ADC_Start(ivbSense);
 801ad2c:	4b28      	ldr	r3, [pc, #160]	@ (801add0 <getInternalBattery+0xb0>)
 801ad2e:	681b      	ldr	r3, [r3, #0]
 801ad30:	4618      	mov	r0, r3
 801ad32:	f7eb fa61 	bl	80061f8 <HAL_ADC_Start>
	if (HAL_ADC_PollForConversion(ivbSense, 2000) == HAL_OK) {
 801ad36:	4b26      	ldr	r3, [pc, #152]	@ (801add0 <getInternalBattery+0xb0>)
 801ad38:	681b      	ldr	r3, [r3, #0]
 801ad3a:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 801ad3e:	4618      	mov	r0, r3
 801ad40:	f7eb fb48 	bl	80063d4 <HAL_ADC_PollForConversion>
 801ad44:	4603      	mov	r3, r0
 801ad46:	2b00      	cmp	r3, #0
 801ad48:	d131      	bne.n	801adae <getInternalBattery+0x8e>
		// Read ADC value
		raw = HAL_ADC_GetValue(ivbSense);
 801ad4a:	4b21      	ldr	r3, [pc, #132]	@ (801add0 <getInternalBattery+0xb0>)
 801ad4c:	681b      	ldr	r3, [r3, #0]
 801ad4e:	4618      	mov	r0, r3
 801ad50:	f7eb fc18 	bl	8006584 <HAL_ADC_GetValue>
 801ad54:	4603      	mov	r3, r0
 801ad56:	81fb      	strh	r3, [r7, #14]
		*opADC = (raw * 3.3 * INTERNAL_BATTERY) / ((1 << 12) - 1);
 801ad58:	89fb      	ldrh	r3, [r7, #14]
 801ad5a:	4618      	mov	r0, r3
 801ad5c:	f7e5 fbfc 	bl	8000558 <__aeabi_i2d>
 801ad60:	a315      	add	r3, pc, #84	@ (adr r3, 801adb8 <getInternalBattery+0x98>)
 801ad62:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad66:	f7e5 fc61 	bl	800062c <__aeabi_dmul>
 801ad6a:	4602      	mov	r2, r0
 801ad6c:	460b      	mov	r3, r1
 801ad6e:	4610      	mov	r0, r2
 801ad70:	4619      	mov	r1, r3
 801ad72:	a313      	add	r3, pc, #76	@ (adr r3, 801adc0 <getInternalBattery+0xa0>)
 801ad74:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad78:	f7e5 fc58 	bl	800062c <__aeabi_dmul>
 801ad7c:	4602      	mov	r2, r0
 801ad7e:	460b      	mov	r3, r1
 801ad80:	4610      	mov	r0, r2
 801ad82:	4619      	mov	r1, r3
 801ad84:	a310      	add	r3, pc, #64	@ (adr r3, 801adc8 <getInternalBattery+0xa8>)
 801ad86:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad8a:	f7e5 fd79 	bl	8000880 <__aeabi_ddiv>
 801ad8e:	4602      	mov	r2, r0
 801ad90:	460b      	mov	r3, r1
 801ad92:	4610      	mov	r0, r2
 801ad94:	4619      	mov	r1, r3
 801ad96:	f7e5 ff41 	bl	8000c1c <__aeabi_d2f>
 801ad9a:	4602      	mov	r2, r0
 801ad9c:	687b      	ldr	r3, [r7, #4]
 801ad9e:	601a      	str	r2, [r3, #0]
		// Stop ADC conversion
		HAL_ADC_Stop(evbSense);
 801ada0:	4b0c      	ldr	r3, [pc, #48]	@ (801add4 <getInternalBattery+0xb4>)
 801ada2:	681b      	ldr	r3, [r3, #0]
 801ada4:	4618      	mov	r0, r3
 801ada6:	f7eb fae1 	bl	800636c <HAL_ADC_Stop>
		return true;
 801adaa:	2301      	movs	r3, #1
 801adac:	e000      	b.n	801adb0 <getInternalBattery+0x90>
	}
	return false;
 801adae:	2300      	movs	r3, #0
}
 801adb0:	4618      	mov	r0, r3
 801adb2:	3710      	adds	r7, #16
 801adb4:	46bd      	mov	sp, r7
 801adb6:	bd80      	pop	{r7, pc}
 801adb8:	66666666 	.word	0x66666666
 801adbc:	400a6666 	.word	0x400a6666
 801adc0:	66666666 	.word	0x66666666
 801adc4:	3ffe6666 	.word	0x3ffe6666
 801adc8:	00000000 	.word	0x00000000
 801adcc:	40affe00 	.word	0x40affe00
 801add0:	20014e24 	.word	0x20014e24
 801add4:	20014e20 	.word	0x20014e20

0801add8 <getIgnition>:

bool getIgnition() {
 801add8:	b580      	push	{r7, lr}
 801adda:	af00      	add	r7, sp, #0
	return LL_GPIO_IsInputPinSet(GPIOA, LL_GPIO_PIN_0);
 801addc:	2101      	movs	r1, #1
 801adde:	4805      	ldr	r0, [pc, #20]	@ (801adf4 <getIgnition+0x1c>)
 801ade0:	f7ff fecd 	bl	801ab7e <LL_GPIO_IsInputPinSet>
 801ade4:	4603      	mov	r3, r0
 801ade6:	2b00      	cmp	r3, #0
 801ade8:	bf14      	ite	ne
 801adea:	2301      	movne	r3, #1
 801adec:	2300      	moveq	r3, #0
 801adee:	b2db      	uxtb	r3, r3
}
 801adf0:	4618      	mov	r0, r3
 801adf2:	bd80      	pop	{r7, pc}
 801adf4:	42020000 	.word	0x42020000

0801adf8 <getTemperStatus>:

bool getTemperStatus() {
 801adf8:	b580      	push	{r7, lr}
 801adfa:	af00      	add	r7, sp, #0
	return LL_GPIO_IsInputPinSet(GPIOB, LL_GPIO_PIN_15);
 801adfc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 801ae00:	4805      	ldr	r0, [pc, #20]	@ (801ae18 <getTemperStatus+0x20>)
 801ae02:	f7ff febc 	bl	801ab7e <LL_GPIO_IsInputPinSet>
 801ae06:	4603      	mov	r3, r0
 801ae08:	2b00      	cmp	r3, #0
 801ae0a:	bf14      	ite	ne
 801ae0c:	2301      	movne	r3, #1
 801ae0e:	2300      	moveq	r3, #0
 801ae10:	b2db      	uxtb	r3, r3
}
 801ae12:	4618      	mov	r0, r3
 801ae14:	bd80      	pop	{r7, pc}
 801ae16:	bf00      	nop
 801ae18:	42020400 	.word	0x42020400

0801ae1c <initRTC>:

void initRTC(RTC_HandleTypeDef *hrtc) {
 801ae1c:	b480      	push	{r7}
 801ae1e:	b083      	sub	sp, #12
 801ae20:	af00      	add	r7, sp, #0
 801ae22:	6078      	str	r0, [r7, #4]
	rtc = hrtc;
 801ae24:	4a04      	ldr	r2, [pc, #16]	@ (801ae38 <initRTC+0x1c>)
 801ae26:	687b      	ldr	r3, [r7, #4]
 801ae28:	6013      	str	r3, [r2, #0]
}
 801ae2a:	bf00      	nop
 801ae2c:	370c      	adds	r7, #12
 801ae2e:	46bd      	mov	sp, r7
 801ae30:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae34:	4770      	bx	lr
 801ae36:	bf00      	nop
 801ae38:	20014e28 	.word	0x20014e28

0801ae3c <setTime>:
bool setTime(uint8_t hours, uint8_t minute, uint8_t second) {
 801ae3c:	b580      	push	{r7, lr}
 801ae3e:	b082      	sub	sp, #8
 801ae40:	af00      	add	r7, sp, #0
 801ae42:	4603      	mov	r3, r0
 801ae44:	71fb      	strb	r3, [r7, #7]
 801ae46:	460b      	mov	r3, r1
 801ae48:	71bb      	strb	r3, [r7, #6]
 801ae4a:	4613      	mov	r3, r2
 801ae4c:	717b      	strb	r3, [r7, #5]
	clearBuffer((uint8_t*) &sTime, sizeof(sTime));
 801ae4e:	2114      	movs	r1, #20
 801ae50:	480e      	ldr	r0, [pc, #56]	@ (801ae8c <setTime+0x50>)
 801ae52:	f7e6 fe39 	bl	8001ac8 <clearBuffer>
	sTime.Hours = hours;
 801ae56:	4a0d      	ldr	r2, [pc, #52]	@ (801ae8c <setTime+0x50>)
 801ae58:	79fb      	ldrb	r3, [r7, #7]
 801ae5a:	7013      	strb	r3, [r2, #0]
	sTime.Minutes = minute;
 801ae5c:	4a0b      	ldr	r2, [pc, #44]	@ (801ae8c <setTime+0x50>)
 801ae5e:	79bb      	ldrb	r3, [r7, #6]
 801ae60:	7053      	strb	r3, [r2, #1]
	sTime.Seconds = second;
 801ae62:	4a0a      	ldr	r2, [pc, #40]	@ (801ae8c <setTime+0x50>)
 801ae64:	797b      	ldrb	r3, [r7, #5]
 801ae66:	7093      	strb	r3, [r2, #2]
	if (HAL_RTC_SetTime(rtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) {
 801ae68:	4b09      	ldr	r3, [pc, #36]	@ (801ae90 <setTime+0x54>)
 801ae6a:	681b      	ldr	r3, [r3, #0]
 801ae6c:	2200      	movs	r2, #0
 801ae6e:	4907      	ldr	r1, [pc, #28]	@ (801ae8c <setTime+0x50>)
 801ae70:	4618      	mov	r0, r3
 801ae72:	f7f6 fe59 	bl	8011b28 <HAL_RTC_SetTime>
 801ae76:	4603      	mov	r3, r0
 801ae78:	2b00      	cmp	r3, #0
 801ae7a:	d001      	beq.n	801ae80 <setTime+0x44>
		// Handle error
		return false;
 801ae7c:	2300      	movs	r3, #0
 801ae7e:	e000      	b.n	801ae82 <setTime+0x46>
	}
	return true;
 801ae80:	2301      	movs	r3, #1
}
 801ae82:	4618      	mov	r0, r3
 801ae84:	3708      	adds	r7, #8
 801ae86:	46bd      	mov	sp, r7
 801ae88:	bd80      	pop	{r7, pc}
 801ae8a:	bf00      	nop
 801ae8c:	20014e2c 	.word	0x20014e2c
 801ae90:	20014e28 	.word	0x20014e28

0801ae94 <setDate>:
bool setDate(uint8_t date, uint8_t month, uint8_t year) {
 801ae94:	b580      	push	{r7, lr}
 801ae96:	b082      	sub	sp, #8
 801ae98:	af00      	add	r7, sp, #0
 801ae9a:	4603      	mov	r3, r0
 801ae9c:	71fb      	strb	r3, [r7, #7]
 801ae9e:	460b      	mov	r3, r1
 801aea0:	71bb      	strb	r3, [r7, #6]
 801aea2:	4613      	mov	r3, r2
 801aea4:	717b      	strb	r3, [r7, #5]
	clearBuffer((uint8_t*) &sDate, sizeof(sDate));
 801aea6:	2104      	movs	r1, #4
 801aea8:	480e      	ldr	r0, [pc, #56]	@ (801aee4 <setDate+0x50>)
 801aeaa:	f7e6 fe0d 	bl	8001ac8 <clearBuffer>
	sDate.Date = date;
 801aeae:	4a0d      	ldr	r2, [pc, #52]	@ (801aee4 <setDate+0x50>)
 801aeb0:	79fb      	ldrb	r3, [r7, #7]
 801aeb2:	7093      	strb	r3, [r2, #2]
	sDate.Month = month;
 801aeb4:	4a0b      	ldr	r2, [pc, #44]	@ (801aee4 <setDate+0x50>)
 801aeb6:	79bb      	ldrb	r3, [r7, #6]
 801aeb8:	7053      	strb	r3, [r2, #1]
	sDate.Year = year;
 801aeba:	4a0a      	ldr	r2, [pc, #40]	@ (801aee4 <setDate+0x50>)
 801aebc:	797b      	ldrb	r3, [r7, #5]
 801aebe:	70d3      	strb	r3, [r2, #3]
	if (HAL_RTC_SetDate(rtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) {
 801aec0:	4b09      	ldr	r3, [pc, #36]	@ (801aee8 <setDate+0x54>)
 801aec2:	681b      	ldr	r3, [r3, #0]
 801aec4:	2200      	movs	r2, #0
 801aec6:	4907      	ldr	r1, [pc, #28]	@ (801aee4 <setDate+0x50>)
 801aec8:	4618      	mov	r0, r3
 801aeca:	f7f6 ff21 	bl	8011d10 <HAL_RTC_SetDate>
 801aece:	4603      	mov	r3, r0
 801aed0:	2b00      	cmp	r3, #0
 801aed2:	d001      	beq.n	801aed8 <setDate+0x44>
		return false;
 801aed4:	2300      	movs	r3, #0
 801aed6:	e000      	b.n	801aeda <setDate+0x46>
	}
	return true;
 801aed8:	2301      	movs	r3, #1
}
 801aeda:	4618      	mov	r0, r3
 801aedc:	3708      	adds	r7, #8
 801aede:	46bd      	mov	sp, r7
 801aee0:	bd80      	pop	{r7, pc}
 801aee2:	bf00      	nop
 801aee4:	20014e40 	.word	0x20014e40
 801aee8:	20014e28 	.word	0x20014e28

0801aeec <getDateTime>:
bool getDateTime(char *opDate, char *opTime) {
 801aeec:	b580      	push	{r7, lr}
 801aeee:	b084      	sub	sp, #16
 801aef0:	af02      	add	r7, sp, #8
 801aef2:	6078      	str	r0, [r7, #4]
 801aef4:	6039      	str	r1, [r7, #0]
	clearBuffer((uint8_t*) &sTime, sizeof(sTime));
 801aef6:	2114      	movs	r1, #20
 801aef8:	481f      	ldr	r0, [pc, #124]	@ (801af78 <getDateTime+0x8c>)
 801aefa:	f7e6 fde5 	bl	8001ac8 <clearBuffer>
	clearBuffer((uint8_t*) &sDate, sizeof(sDate));
 801aefe:	2104      	movs	r1, #4
 801af00:	481e      	ldr	r0, [pc, #120]	@ (801af7c <getDateTime+0x90>)
 801af02:	f7e6 fde1 	bl	8001ac8 <clearBuffer>
	if (HAL_RTC_GetTime(rtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) {
 801af06:	4b1e      	ldr	r3, [pc, #120]	@ (801af80 <getDateTime+0x94>)
 801af08:	681b      	ldr	r3, [r3, #0]
 801af0a:	2200      	movs	r2, #0
 801af0c:	491a      	ldr	r1, [pc, #104]	@ (801af78 <getDateTime+0x8c>)
 801af0e:	4618      	mov	r0, r3
 801af10:	f7f6 fe9c 	bl	8011c4c <HAL_RTC_GetTime>
 801af14:	4603      	mov	r3, r0
 801af16:	2b00      	cmp	r3, #0
 801af18:	d001      	beq.n	801af1e <getDateTime+0x32>
		return false;
 801af1a:	2300      	movs	r3, #0
 801af1c:	e028      	b.n	801af70 <getDateTime+0x84>
	}
	if (HAL_RTC_GetDate(rtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) {
 801af1e:	4b18      	ldr	r3, [pc, #96]	@ (801af80 <getDateTime+0x94>)
 801af20:	681b      	ldr	r3, [r3, #0]
 801af22:	2200      	movs	r2, #0
 801af24:	4915      	ldr	r1, [pc, #84]	@ (801af7c <getDateTime+0x90>)
 801af26:	4618      	mov	r0, r3
 801af28:	f7f6 ff78 	bl	8011e1c <HAL_RTC_GetDate>
 801af2c:	4603      	mov	r3, r0
 801af2e:	2b00      	cmp	r3, #0
 801af30:	d001      	beq.n	801af36 <getDateTime+0x4a>
		return false;
 801af32:	2300      	movs	r3, #0
 801af34:	e01c      	b.n	801af70 <getDateTime+0x84>
	}

	sprintf(opDate, "%02d%02d20%02d", sDate.Date, sDate.Month, sDate.Year);
 801af36:	4b11      	ldr	r3, [pc, #68]	@ (801af7c <getDateTime+0x90>)
 801af38:	789b      	ldrb	r3, [r3, #2]
 801af3a:	461a      	mov	r2, r3
 801af3c:	4b0f      	ldr	r3, [pc, #60]	@ (801af7c <getDateTime+0x90>)
 801af3e:	785b      	ldrb	r3, [r3, #1]
 801af40:	4619      	mov	r1, r3
 801af42:	4b0e      	ldr	r3, [pc, #56]	@ (801af7c <getDateTime+0x90>)
 801af44:	78db      	ldrb	r3, [r3, #3]
 801af46:	9300      	str	r3, [sp, #0]
 801af48:	460b      	mov	r3, r1
 801af4a:	490e      	ldr	r1, [pc, #56]	@ (801af84 <getDateTime+0x98>)
 801af4c:	6878      	ldr	r0, [r7, #4]
 801af4e:	f003 fe03 	bl	801eb58 <siprintf>
	sprintf(opTime, "%02d%02d%02d", sTime.Hours, sTime.Minutes, sTime.Seconds);
 801af52:	4b09      	ldr	r3, [pc, #36]	@ (801af78 <getDateTime+0x8c>)
 801af54:	781b      	ldrb	r3, [r3, #0]
 801af56:	461a      	mov	r2, r3
 801af58:	4b07      	ldr	r3, [pc, #28]	@ (801af78 <getDateTime+0x8c>)
 801af5a:	785b      	ldrb	r3, [r3, #1]
 801af5c:	4619      	mov	r1, r3
 801af5e:	4b06      	ldr	r3, [pc, #24]	@ (801af78 <getDateTime+0x8c>)
 801af60:	789b      	ldrb	r3, [r3, #2]
 801af62:	9300      	str	r3, [sp, #0]
 801af64:	460b      	mov	r3, r1
 801af66:	4908      	ldr	r1, [pc, #32]	@ (801af88 <getDateTime+0x9c>)
 801af68:	6838      	ldr	r0, [r7, #0]
 801af6a:	f003 fdf5 	bl	801eb58 <siprintf>
	return true;
 801af6e:	2301      	movs	r3, #1
}
 801af70:	4618      	mov	r0, r3
 801af72:	3708      	adds	r7, #8
 801af74:	46bd      	mov	sp, r7
 801af76:	bd80      	pop	{r7, pc}
 801af78:	20014e2c 	.word	0x20014e2c
 801af7c:	20014e40 	.word	0x20014e40
 801af80:	20014e28 	.word	0x20014e28
 801af84:	08023d28 	.word	0x08023d28
 801af88:	08023d38 	.word	0x08023d38

0801af8c <config_IT>:

void config_IT() {
 801af8c:	b580      	push	{r7, lr}
 801af8e:	af00      	add	r7, sp, #0

	HAL_NVIC_DisableIRQ(EXTI8_IRQn);
 801af90:	2013      	movs	r0, #19
 801af92:	f7ec f9c0 	bl	8007316 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_SetPriority(EXTI8_IRQn, 0, 0);
 801af96:	2200      	movs	r2, #0
 801af98:	2100      	movs	r1, #0
 801af9a:	2013      	movs	r0, #19
 801af9c:	f7ec f993 	bl	80072c6 <HAL_NVIC_SetPriority>
	HAL_NVIC_DisableIRQ(EXTI15_IRQn);
 801afa0:	201a      	movs	r0, #26
 801afa2:	f7ec f9b8 	bl	8007316 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_SetPriority(EXTI15_IRQn, 0, 0);
 801afa6:	2200      	movs	r2, #0
 801afa8:	2100      	movs	r1, #0
 801afaa:	201a      	movs	r0, #26
 801afac:	f7ec f98b 	bl	80072c6 <HAL_NVIC_SetPriority>
	HAL_NVIC_DisableIRQ(TIM6_IRQn);
 801afb0:	2031      	movs	r0, #49	@ 0x31
 801afb2:	f7ec f9b0 	bl	8007316 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 801afb6:	2200      	movs	r2, #0
 801afb8:	2100      	movs	r1, #0
 801afba:	2031      	movs	r0, #49	@ 0x31
 801afbc:	f7ec f983 	bl	80072c6 <HAL_NVIC_SetPriority>
	HAL_NVIC_DisableIRQ(USART1_IRQn);
 801afc0:	203a      	movs	r0, #58	@ 0x3a
 801afc2:	f7ec f9a8 	bl	8007316 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 801afc6:	2200      	movs	r2, #0
 801afc8:	2100      	movs	r1, #0
 801afca:	203a      	movs	r0, #58	@ 0x3a
 801afcc:	f7ec f97b 	bl	80072c6 <HAL_NVIC_SetPriority>
	HAL_NVIC_DisableIRQ(UART5_IRQn);
 801afd0:	203e      	movs	r0, #62	@ 0x3e
 801afd2:	f7ec f9a0 	bl	8007316 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 801afd6:	2200      	movs	r2, #0
 801afd8:	2100      	movs	r1, #0
 801afda:	203e      	movs	r0, #62	@ 0x3e
 801afdc:	f7ec f973 	bl	80072c6 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 0, 0);
 801afe0:	2200      	movs	r2, #0
 801afe2:	2100      	movs	r1, #0
 801afe4:	206d      	movs	r0, #109	@ 0x6d
 801afe6:	f7ec f96e 	bl	80072c6 <HAL_NVIC_SetPriority>
	HAL_NVIC_DisableIRQ(FDCAN2_IT0_IRQn);
 801afea:	206d      	movs	r0, #109	@ 0x6d
 801afec:	f7ec f993 	bl	8007316 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_SetPriority(GPDMA1_Channel4_IRQn, 0, 0);
 801aff0:	2200      	movs	r2, #0
 801aff2:	2100      	movs	r1, #0
 801aff4:	201f      	movs	r0, #31
 801aff6:	f7ec f966 	bl	80072c6 <HAL_NVIC_SetPriority>
	HAL_NVIC_DisableIRQ(GPDMA1_Channel4_IRQn);
 801affa:	201f      	movs	r0, #31
 801affc:	f7ec f98b 	bl	8007316 <HAL_NVIC_DisableIRQ>

	HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 801b000:	2200      	movs	r2, #0
 801b002:	2100      	movs	r1, #0
 801b004:	2027      	movs	r0, #39	@ 0x27
 801b006:	f7ec f95e 	bl	80072c6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 801b00a:	2027      	movs	r0, #39	@ 0x27
 801b00c:	f7ec f975 	bl	80072fa <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(USART6_IRQn);
 801b010:	2055      	movs	r0, #85	@ 0x55
 801b012:	f7ec f972 	bl	80072fa <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 801b016:	2200      	movs	r2, #0
 801b018:	2100      	movs	r1, #0
 801b01a:	2055      	movs	r0, #85	@ 0x55
 801b01c:	f7ec f953 	bl	80072c6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(RTC_IRQn);
 801b020:	2002      	movs	r0, #2
 801b022:	f7ec f96a 	bl	80072fa <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 801b026:	2200      	movs	r2, #0
 801b028:	2100      	movs	r1, #0
 801b02a:	2002      	movs	r0, #2
 801b02c:	f7ec f94b 	bl	80072c6 <HAL_NVIC_SetPriority>

}
 801b030:	bf00      	nop
 801b032:	bd80      	pop	{r7, pc}

0801b034 <On_Wakeup_Config>:
void On_Wakeup_Config() {
 801b034:	b580      	push	{r7, lr}
 801b036:	af00      	add	r7, sp, #0

	HAL_NVIC_EnableIRQ(EXTI8_IRQn);
 801b038:	2013      	movs	r0, #19
 801b03a:	f7ec f95e 	bl	80072fa <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(EXTI8_IRQn, 0, 0);
 801b03e:	2200      	movs	r2, #0
 801b040:	2100      	movs	r1, #0
 801b042:	2013      	movs	r0, #19
 801b044:	f7ec f93f 	bl	80072c6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_IRQn);
 801b048:	201a      	movs	r0, #26
 801b04a:	f7ec f956 	bl	80072fa <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(EXTI15_IRQn, 0, 0);
 801b04e:	2200      	movs	r2, #0
 801b050:	2100      	movs	r1, #0
 801b052:	201a      	movs	r0, #26
 801b054:	f7ec f937 	bl	80072c6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM6_IRQn);
 801b058:	2031      	movs	r0, #49	@ 0x31
 801b05a:	f7ec f94e 	bl	80072fa <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 801b05e:	2200      	movs	r2, #0
 801b060:	2100      	movs	r1, #0
 801b062:	2031      	movs	r0, #49	@ 0x31
 801b064:	f7ec f92f 	bl	80072c6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 801b068:	203a      	movs	r0, #58	@ 0x3a
 801b06a:	f7ec f946 	bl	80072fa <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 801b06e:	2200      	movs	r2, #0
 801b070:	2100      	movs	r1, #0
 801b072:	203a      	movs	r0, #58	@ 0x3a
 801b074:	f7ec f927 	bl	80072c6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(UART5_IRQn);
 801b078:	203e      	movs	r0, #62	@ 0x3e
 801b07a:	f7ec f93e 	bl	80072fa <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 801b07e:	2200      	movs	r2, #0
 801b080:	2100      	movs	r1, #0
 801b082:	203e      	movs	r0, #62	@ 0x3e
 801b084:	f7ec f91f 	bl	80072c6 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 0, 0);
 801b088:	2200      	movs	r2, #0
 801b08a:	2100      	movs	r1, #0
 801b08c:	206d      	movs	r0, #109	@ 0x6d
 801b08e:	f7ec f91a 	bl	80072c6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 801b092:	206d      	movs	r0, #109	@ 0x6d
 801b094:	f7ec f931 	bl	80072fa <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(GPDMA1_Channel4_IRQn, 0, 0);
 801b098:	2200      	movs	r2, #0
 801b09a:	2100      	movs	r1, #0
 801b09c:	201f      	movs	r0, #31
 801b09e:	f7ec f912 	bl	80072c6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(GPDMA1_Channel4_IRQn);
 801b0a2:	201f      	movs	r0, #31
 801b0a4:	f7ec f929 	bl	80072fa <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 801b0a8:	2200      	movs	r2, #0
 801b0aa:	2100      	movs	r1, #0
 801b0ac:	2027      	movs	r0, #39	@ 0x27
 801b0ae:	f7ec f90a 	bl	80072c6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 801b0b2:	2027      	movs	r0, #39	@ 0x27
 801b0b4:	f7ec f921 	bl	80072fa <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(USART6_IRQn);
 801b0b8:	2055      	movs	r0, #85	@ 0x55
 801b0ba:	f7ec f91e 	bl	80072fa <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 801b0be:	2200      	movs	r2, #0
 801b0c0:	2100      	movs	r1, #0
 801b0c2:	2055      	movs	r0, #85	@ 0x55
 801b0c4:	f7ec f8ff 	bl	80072c6 <HAL_NVIC_SetPriority>
	HAL_NVIC_DisableIRQ(RTC_IRQn);
 801b0c8:	2002      	movs	r0, #2
 801b0ca:	f7ec f924 	bl	8007316 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 801b0ce:	2200      	movs	r2, #0
 801b0d0:	2100      	movs	r1, #0
 801b0d2:	2002      	movs	r0, #2
 801b0d4:	f7ec f8f7 	bl	80072c6 <HAL_NVIC_SetPriority>

}
 801b0d8:	bf00      	nop
 801b0da:	bd80      	pop	{r7, pc}

0801b0dc <Configure_RTC_WakeUp_Timer>:

void Configure_RTC_WakeUp_Timer() {
 801b0dc:	b580      	push	{r7, lr}
 801b0de:	af00      	add	r7, sp, #0

	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 1800,
 801b0e0:	2300      	movs	r3, #0
 801b0e2:	2204      	movs	r2, #4
 801b0e4:	f44f 61e1 	mov.w	r1, #1800	@ 0x708
 801b0e8:	4804      	ldr	r0, [pc, #16]	@ (801b0fc <Configure_RTC_WakeUp_Timer+0x20>)
 801b0ea:	f7f6 ffcd 	bl	8012088 <HAL_RTCEx_SetWakeUpTimer_IT>
 801b0ee:	4603      	mov	r3, r0
 801b0f0:	2b00      	cmp	r3, #0
 801b0f2:	d001      	beq.n	801b0f8 <Configure_RTC_WakeUp_Timer+0x1c>
	RTC_WAKEUPCLOCK_CK_SPRE_16BITS, 0) != HAL_OK) {
		Error_Handler();
 801b0f4:	f7e9 fb33 	bl	800475e <Error_Handler>
	}


}
 801b0f8:	bf00      	nop
 801b0fa:	bd80      	pop	{r7, pc}
 801b0fc:	20013bbc 	.word	0x20013bbc

0801b100 <GO_TO_SLEEP>:
void GO_TO_SLEEP() {
 801b100:	b580      	push	{r7, lr}
 801b102:	af00      	add	r7, sp, #0
	if (LL_GPIO_IsInputPinSet(GPIOA, LL_GPIO_PIN_0) == RESET) {
 801b104:	2101      	movs	r1, #1
 801b106:	480b      	ldr	r0, [pc, #44]	@ (801b134 <GO_TO_SLEEP+0x34>)
 801b108:	f7ff fd39 	bl	801ab7e <LL_GPIO_IsInputPinSet>
 801b10c:	4603      	mov	r3, r0
 801b10e:	2b00      	cmp	r3, #0
 801b110:	d10e      	bne.n	801b130 <GO_TO_SLEEP+0x30>
		printc(MinDelay, "Sleep_routine\r\n");
 801b112:	4909      	ldr	r1, [pc, #36]	@ (801b138 <GO_TO_SLEEP+0x38>)
 801b114:	200a      	movs	r0, #10
 801b116:	f7e6 fc7f 	bl	8001a18 <printc>
		FLAG_RESET_On_Sleep =1;
 801b11a:	4b08      	ldr	r3, [pc, #32]	@ (801b13c <GO_TO_SLEEP+0x3c>)
 801b11c:	2201      	movs	r2, #1
 801b11e:	601a      	str	r2, [r3, #0]
		Sleep_routine();
 801b120:	f7e7 fca4 	bl	8002a6c <Sleep_routine>


		printc(MinDelay, "Sleep_Mode\r\n");
 801b124:	4906      	ldr	r1, [pc, #24]	@ (801b140 <GO_TO_SLEEP+0x40>)
 801b126:	200a      	movs	r0, #10
 801b128:	f7e6 fc76 	bl	8001a18 <printc>
		HAL_NVIC_SystemReset();
 801b12c:	f7ec f901 	bl	8007332 <HAL_NVIC_SystemReset>
	}

}
 801b130:	bf00      	nop
 801b132:	bd80      	pop	{r7, pc}
 801b134:	42020000 	.word	0x42020000
 801b138:	08023d48 	.word	0x08023d48
 801b13c:	20014e48 	.word	0x20014e48
 801b140:	08023d58 	.word	0x08023d58

0801b144 <Disable_EXTI0>:

// Function to disable EXTI line 0 interrupt
void Disable_EXTI0() {
 801b144:	b580      	push	{r7, lr}
 801b146:	af00      	add	r7, sp, #0
	// Disable EXTI0 interrupt
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 801b148:	200b      	movs	r0, #11
 801b14a:	f7ec f8e4 	bl	8007316 <HAL_NVIC_DisableIRQ>
	// Clear any pending EXTI0 interrupt
	LL_EXTI_ClearRisingFlag_0_31(LL_EXTI_EXTI_LINE0);
 801b14e:	2000      	movs	r0, #0
 801b150:	f7ff fd2a 	bl	801aba8 <LL_EXTI_ClearRisingFlag_0_31>

}
 801b154:	bf00      	nop
 801b156:	bd80      	pop	{r7, pc}

0801b158 <SL_WK_GPIO_Int>:

void SL_WK_GPIO_Int() {
 801b158:	b580      	push	{r7, lr}
 801b15a:	b084      	sub	sp, #16
 801b15c:	af00      	add	r7, sp, #0

	LL_EXTI_InitTypeDef EXTI_InitStruct = { 0 };
 801b15e:	1d3b      	adds	r3, r7, #4
 801b160:	2200      	movs	r2, #0
 801b162:	601a      	str	r2, [r3, #0]
 801b164:	605a      	str	r2, [r3, #4]
 801b166:	609a      	str	r2, [r3, #8]
	LL_EXTI_SetEXTISource(LL_EXTI_EXTI_PORTA, LL_EXTI_EXTI_LINE0);
 801b168:	2100      	movs	r1, #0
 801b16a:	2000      	movs	r0, #0
 801b16c:	f7ff fd2c 	bl	801abc8 <LL_EXTI_SetEXTISource>

	EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 801b170:	2301      	movs	r3, #1
 801b172:	607b      	str	r3, [r7, #4]
	EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 801b174:	2300      	movs	r3, #0
 801b176:	60bb      	str	r3, [r7, #8]
	EXTI_InitStruct.LineCommand = ENABLE;
 801b178:	2301      	movs	r3, #1
 801b17a:	733b      	strb	r3, [r7, #12]
	EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 801b17c:	2300      	movs	r3, #0
 801b17e:	737b      	strb	r3, [r7, #13]
	EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 801b180:	2301      	movs	r3, #1
 801b182:	73bb      	strb	r3, [r7, #14]
	LL_EXTI_Init(&EXTI_InitStruct);
 801b184:	1d3b      	adds	r3, r7, #4
 801b186:	4618      	mov	r0, r3
 801b188:	f7fa f9ca 	bl	8015520 <LL_EXTI_Init>
	LL_GPIO_SetPinPull(GPIOA, LL_GPIO_PIN_0, LL_GPIO_PULL_NO);
 801b18c:	2200      	movs	r2, #0
 801b18e:	2101      	movs	r1, #1
 801b190:	480d      	ldr	r0, [pc, #52]	@ (801b1c8 <SL_WK_GPIO_Int+0x70>)
 801b192:	f7ff fcb7 	bl	801ab04 <LL_GPIO_SetPinPull>
	LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_0, LL_GPIO_MODE_INPUT);
 801b196:	2200      	movs	r2, #0
 801b198:	2101      	movs	r1, #1
 801b19a:	480b      	ldr	r0, [pc, #44]	@ (801b1c8 <SL_WK_GPIO_Int+0x70>)
 801b19c:	f7ff fc75 	bl	801aa8a <LL_GPIO_SetPinMode>
	NVIC_SetPriority(EXTI0_IRQn,
 801b1a0:	f7ff fbea 	bl	801a978 <__NVIC_GetPriorityGrouping>
 801b1a4:	4603      	mov	r3, r0
 801b1a6:	2200      	movs	r2, #0
 801b1a8:	2100      	movs	r1, #0
 801b1aa:	4618      	mov	r0, r3
 801b1ac:	f7ff fc3a 	bl	801aa24 <NVIC_EncodePriority>
 801b1b0:	4603      	mov	r3, r0
 801b1b2:	4619      	mov	r1, r3
 801b1b4:	200b      	movs	r0, #11
 801b1b6:	f7ff fc0b 	bl	801a9d0 <__NVIC_SetPriority>
			NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 0, 0));
	NVIC_EnableIRQ(EXTI0_IRQn);
 801b1ba:	200b      	movs	r0, #11
 801b1bc:	f7ff fbea 	bl	801a994 <__NVIC_EnableIRQ>
}
 801b1c0:	bf00      	nop
 801b1c2:	3710      	adds	r7, #16
 801b1c4:	46bd      	mov	sp, r7
 801b1c6:	bd80      	pop	{r7, pc}
 801b1c8:	42020000 	.word	0x42020000

0801b1cc <Turn_OFF_Modules>:
////	init();
//	Disable_EXTI0();
//	wakeUpRoutine();
//}

void Turn_OFF_Modules() {
 801b1cc:	b580      	push	{r7, lr}
 801b1ce:	af00      	add	r7, sp, #0
	GNSS_OFF();
 801b1d0:	2201      	movs	r2, #1
 801b1d2:	2104      	movs	r1, #4
 801b1d4:	480f      	ldr	r0, [pc, #60]	@ (801b214 <Turn_OFF_Modules+0x48>)
 801b1d6:	f7f0 fb3d 	bl	800b854 <HAL_GPIO_WritePin>
	GPIO_LTE_OFF();
 801b1da:	2200      	movs	r2, #0
 801b1dc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801b1e0:	480d      	ldr	r0, [pc, #52]	@ (801b218 <Turn_OFF_Modules+0x4c>)
 801b1e2:	f7f0 fb37 	bl	800b854 <HAL_GPIO_WritePin>
	GPS_LIGHT_OFF();
 801b1e6:	2201      	movs	r2, #1
 801b1e8:	2110      	movs	r1, #16
 801b1ea:	480c      	ldr	r0, [pc, #48]	@ (801b21c <Turn_OFF_Modules+0x50>)
 801b1ec:	f7f0 fb32 	bl	800b854 <HAL_GPIO_WritePin>
	PWR_LIGHT_OFF();
 801b1f0:	2201      	movs	r2, #1
 801b1f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801b1f6:	4809      	ldr	r0, [pc, #36]	@ (801b21c <Turn_OFF_Modules+0x50>)
 801b1f8:	f7f0 fb2c 	bl	800b854 <HAL_GPIO_WritePin>
	GSM_LIGHT_OFF();
 801b1fc:	2201      	movs	r2, #1
 801b1fe:	2180      	movs	r1, #128	@ 0x80
 801b200:	4806      	ldr	r0, [pc, #24]	@ (801b21c <Turn_OFF_Modules+0x50>)
 801b202:	f7f0 fb27 	bl	800b854 <HAL_GPIO_WritePin>
	GPIO_3V3_OFF();
 801b206:	2201      	movs	r2, #1
 801b208:	2108      	movs	r1, #8
 801b20a:	4804      	ldr	r0, [pc, #16]	@ (801b21c <Turn_OFF_Modules+0x50>)
 801b20c:	f7f0 fb22 	bl	800b854 <HAL_GPIO_WritePin>
}
 801b210:	bf00      	nop
 801b212:	bd80      	pop	{r7, pc}
 801b214:	42020c00 	.word	0x42020c00
 801b218:	42020800 	.word	0x42020800
 801b21c:	42020400 	.word	0x42020400

0801b220 <Sleep_Mode>:
	GNSS_ON();
	GPIO_LTE_ON();

}
void Sleep_Mode()
{
 801b220:	b580      	push	{r7, lr}
 801b222:	b082      	sub	sp, #8
 801b224:	af00      	add	r7, sp, #0
	char SF[8] = { 0 };
 801b226:	2300      	movs	r3, #0
 801b228:	603b      	str	r3, [r7, #0]
 801b22a:	2300      	movs	r3, #0
 801b22c:	607b      	str	r3, [r7, #4]
	FLASH_Read_Buff(FL_On_Sl_Addr, SF, 8);
 801b22e:	463b      	mov	r3, r7
 801b230:	2208      	movs	r2, #8
 801b232:	4619      	mov	r1, r3
 801b234:	4819      	ldr	r0, [pc, #100]	@ (801b29c <Sleep_Mode+0x7c>)
 801b236:	f7fb f9eb 	bl	8016610 <FLASH_Read_Buff>
	FLAG_RESET_On_Sleep = SF[0];
 801b23a:	783b      	ldrb	r3, [r7, #0]
 801b23c:	461a      	mov	r2, r3
 801b23e:	4b18      	ldr	r3, [pc, #96]	@ (801b2a0 <Sleep_Mode+0x80>)
 801b240:	601a      	str	r2, [r3, #0]
	if (FLAG_RESET_On_Sleep == 1) {
 801b242:	4b17      	ldr	r3, [pc, #92]	@ (801b2a0 <Sleep_Mode+0x80>)
 801b244:	681b      	ldr	r3, [r3, #0]
 801b246:	2b01      	cmp	r3, #1
 801b248:	d123      	bne.n	801b292 <Sleep_Mode+0x72>
		sendPDDataFlag = true;
 801b24a:	4b16      	ldr	r3, [pc, #88]	@ (801b2a4 <Sleep_Mode+0x84>)
 801b24c:	2201      	movs	r2, #1
 801b24e:	701a      	strb	r2, [r3, #0]
//		setSleppStatus(true);
		config_IT();
 801b250:	f7ff fe9c 	bl	801af8c <config_IT>
		SL_WK_GPIO_Int();
 801b254:	f7ff ff80 	bl	801b158 <SL_WK_GPIO_Int>
		Configure_RTC_WakeUp_Timer();
 801b258:	f7ff ff40 	bl	801b0dc <Configure_RTC_WakeUp_Timer>
		__HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);
 801b25c:	4b12      	ldr	r3, [pc, #72]	@ (801b2a8 <Sleep_Mode+0x88>)
 801b25e:	699b      	ldr	r3, [r3, #24]
 801b260:	4a11      	ldr	r2, [pc, #68]	@ (801b2a8 <Sleep_Mode+0x88>)
 801b262:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 801b266:	6193      	str	r3, [r2, #24]
		Turn_OFF_Modules();
 801b268:	f7ff ffb0 	bl	801b1cc <Turn_OFF_Modules>
		HAL_PWR_EnableSleepOnExit();
 801b26c:	f7f0 fbee 	bl	800ba4c <HAL_PWR_EnableSleepOnExit>
		HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 801b270:	2101      	movs	r1, #1
 801b272:	2000      	movs	r0, #0
 801b274:	f7f0 fbce 	bl	800ba14 <HAL_PWR_EnterSLEEPMode>

		getAllConfig();
 801b278:	f7fd ff20 	bl	80190bc <getAllConfig>
		FLAG_RESET_On_Sleep = 0;
 801b27c:	4b08      	ldr	r3, [pc, #32]	@ (801b2a0 <Sleep_Mode+0x80>)
 801b27e:	2200      	movs	r2, #0
 801b280:	601a      	str	r2, [r3, #0]
		FeedAllConfig();
 801b282:	f7fd ffcb 	bl	801921c <FeedAllConfig>
		Disable_EXTI0();
 801b286:	f7ff ff5d 	bl	801b144 <Disable_EXTI0>
		printc(MinDelay, "\r\nWokeUp\r\n");
 801b28a:	4908      	ldr	r1, [pc, #32]	@ (801b2ac <Sleep_Mode+0x8c>)
 801b28c:	200a      	movs	r0, #10
 801b28e:	f7e6 fbc3 	bl	8001a18 <printc>
//		setSleppStatus(false);
	}
}
 801b292:	bf00      	nop
 801b294:	3708      	adds	r7, #8
 801b296:	46bd      	mov	sp, r7
 801b298:	bd80      	pop	{r7, pc}
 801b29a:	bf00      	nop
 801b29c:	0816a660 	.word	0x0816a660
 801b2a0:	20014e48 	.word	0x20014e48
 801b2a4:	20012fb5 	.word	0x20012fb5
 801b2a8:	44007800 	.word	0x44007800
 801b2ac:	08023d68 	.word	0x08023d68

0801b2b0 <togleState>:
#define HEIGH_TIME 200
#define LOW_TIME 20
LedHendler ledHendler = { .gpsLedState = LOW, .gsmLedState = LOW, .pwrLedState =
		SOLID, .isGpsLightON = false, .isGsmLightON = false, .isPwrLightON =
false };
void togleState(bool *var) {
 801b2b0:	b480      	push	{r7}
 801b2b2:	b083      	sub	sp, #12
 801b2b4:	af00      	add	r7, sp, #0
 801b2b6:	6078      	str	r0, [r7, #4]
	*var = !(*var);
 801b2b8:	687b      	ldr	r3, [r7, #4]
 801b2ba:	781b      	ldrb	r3, [r3, #0]
 801b2bc:	2b00      	cmp	r3, #0
 801b2be:	bf14      	ite	ne
 801b2c0:	2301      	movne	r3, #1
 801b2c2:	2300      	moveq	r3, #0
 801b2c4:	b2db      	uxtb	r3, r3
 801b2c6:	f083 0301 	eor.w	r3, r3, #1
 801b2ca:	b2db      	uxtb	r3, r3
 801b2cc:	f003 0301 	and.w	r3, r3, #1
 801b2d0:	b2da      	uxtb	r2, r3
 801b2d2:	687b      	ldr	r3, [r7, #4]
 801b2d4:	701a      	strb	r2, [r3, #0]
}
 801b2d6:	bf00      	nop
 801b2d8:	370c      	adds	r7, #12
 801b2da:	46bd      	mov	sp, r7
 801b2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2e0:	4770      	bx	lr
	...

0801b2e4 <handleGps>:
void handleGps() {
 801b2e4:	b580      	push	{r7, lr}
 801b2e6:	af00      	add	r7, sp, #0
	if (ledHendler.isGpsLightON)
 801b2e8:	4b09      	ldr	r3, [pc, #36]	@ (801b310 <handleGps+0x2c>)
 801b2ea:	78db      	ldrb	r3, [r3, #3]
 801b2ec:	2b00      	cmp	r3, #0
 801b2ee:	d005      	beq.n	801b2fc <handleGps+0x18>
		GPS_LIGHT_ON();
 801b2f0:	2200      	movs	r2, #0
 801b2f2:	2110      	movs	r1, #16
 801b2f4:	4807      	ldr	r0, [pc, #28]	@ (801b314 <handleGps+0x30>)
 801b2f6:	f7f0 faad 	bl	800b854 <HAL_GPIO_WritePin>
 801b2fa:	e004      	b.n	801b306 <handleGps+0x22>
	else
		GPS_LIGHT_OFF();
 801b2fc:	2201      	movs	r2, #1
 801b2fe:	2110      	movs	r1, #16
 801b300:	4804      	ldr	r0, [pc, #16]	@ (801b314 <handleGps+0x30>)
 801b302:	f7f0 faa7 	bl	800b854 <HAL_GPIO_WritePin>
	togleState(&ledHendler.isGpsLightON);
 801b306:	4804      	ldr	r0, [pc, #16]	@ (801b318 <handleGps+0x34>)
 801b308:	f7ff ffd2 	bl	801b2b0 <togleState>
}
 801b30c:	bf00      	nop
 801b30e:	bd80      	pop	{r7, pc}
 801b310:	200000a4 	.word	0x200000a4
 801b314:	42020400 	.word	0x42020400
 801b318:	200000a7 	.word	0x200000a7

0801b31c <handleGsm>:
void handleGsm() {
 801b31c:	b580      	push	{r7, lr}
 801b31e:	af00      	add	r7, sp, #0
	if (ledHendler.isGsmLightON)
 801b320:	4b09      	ldr	r3, [pc, #36]	@ (801b348 <handleGsm+0x2c>)
 801b322:	791b      	ldrb	r3, [r3, #4]
 801b324:	2b00      	cmp	r3, #0
 801b326:	d005      	beq.n	801b334 <handleGsm+0x18>
		GSM_LIGHT_ON();
 801b328:	2200      	movs	r2, #0
 801b32a:	2180      	movs	r1, #128	@ 0x80
 801b32c:	4807      	ldr	r0, [pc, #28]	@ (801b34c <handleGsm+0x30>)
 801b32e:	f7f0 fa91 	bl	800b854 <HAL_GPIO_WritePin>
 801b332:	e004      	b.n	801b33e <handleGsm+0x22>
	else
		GSM_LIGHT_OFF();
 801b334:	2201      	movs	r2, #1
 801b336:	2180      	movs	r1, #128	@ 0x80
 801b338:	4804      	ldr	r0, [pc, #16]	@ (801b34c <handleGsm+0x30>)
 801b33a:	f7f0 fa8b 	bl	800b854 <HAL_GPIO_WritePin>
	togleState(&ledHendler.isGsmLightON);
 801b33e:	4804      	ldr	r0, [pc, #16]	@ (801b350 <handleGsm+0x34>)
 801b340:	f7ff ffb6 	bl	801b2b0 <togleState>
}
 801b344:	bf00      	nop
 801b346:	bd80      	pop	{r7, pc}
 801b348:	200000a4 	.word	0x200000a4
 801b34c:	42020400 	.word	0x42020400
 801b350:	200000a8 	.word	0x200000a8

0801b354 <handlePwr>:
void handlePwr() {
 801b354:	b580      	push	{r7, lr}
 801b356:	af00      	add	r7, sp, #0
	if (ledHendler.isPwrLightON)
 801b358:	4b0a      	ldr	r3, [pc, #40]	@ (801b384 <handlePwr+0x30>)
 801b35a:	795b      	ldrb	r3, [r3, #5]
 801b35c:	2b00      	cmp	r3, #0
 801b35e:	d006      	beq.n	801b36e <handlePwr+0x1a>
		PWR_LIGHT_ON();
 801b360:	2200      	movs	r2, #0
 801b362:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801b366:	4808      	ldr	r0, [pc, #32]	@ (801b388 <handlePwr+0x34>)
 801b368:	f7f0 fa74 	bl	800b854 <HAL_GPIO_WritePin>
 801b36c:	e005      	b.n	801b37a <handlePwr+0x26>
	else
		PWR_LIGHT_OFF();
 801b36e:	2201      	movs	r2, #1
 801b370:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801b374:	4804      	ldr	r0, [pc, #16]	@ (801b388 <handlePwr+0x34>)
 801b376:	f7f0 fa6d 	bl	800b854 <HAL_GPIO_WritePin>
	togleState(&ledHendler.isPwrLightON);
 801b37a:	4804      	ldr	r0, [pc, #16]	@ (801b38c <handlePwr+0x38>)
 801b37c:	f7ff ff98 	bl	801b2b0 <togleState>
}
 801b380:	bf00      	nop
 801b382:	bd80      	pop	{r7, pc}
 801b384:	200000a4 	.word	0x200000a4
 801b388:	42020400 	.word	0x42020400
 801b38c:	200000a9 	.word	0x200000a9

0801b390 <blinkLed>:
void blinkLed(int time) {
 801b390:	b580      	push	{r7, lr}
 801b392:	b082      	sub	sp, #8
 801b394:	af00      	add	r7, sp, #0
 801b396:	6078      	str	r0, [r7, #4]
	if ((time % HEIGH_TIME) == 0) {
 801b398:	687a      	ldr	r2, [r7, #4]
 801b39a:	4b40      	ldr	r3, [pc, #256]	@ (801b49c <blinkLed+0x10c>)
 801b39c:	fb83 1302 	smull	r1, r3, r3, r2
 801b3a0:	1199      	asrs	r1, r3, #6
 801b3a2:	17d3      	asrs	r3, r2, #31
 801b3a4:	1acb      	subs	r3, r1, r3
 801b3a6:	21c8      	movs	r1, #200	@ 0xc8
 801b3a8:	fb01 f303 	mul.w	r3, r1, r3
 801b3ac:	1ad3      	subs	r3, r2, r3
 801b3ae:	2b00      	cmp	r3, #0
 801b3b0:	d14f      	bne.n	801b452 <blinkLed+0xc2>
		if (ledHendler.gpsLedState == HEIGH)
 801b3b2:	4b3b      	ldr	r3, [pc, #236]	@ (801b4a0 <blinkLed+0x110>)
 801b3b4:	781b      	ldrb	r3, [r3, #0]
 801b3b6:	2b00      	cmp	r3, #0
 801b3b8:	d102      	bne.n	801b3c0 <blinkLed+0x30>
			handleGps();
 801b3ba:	f7ff ff93 	bl	801b2e4 <handleGps>
 801b3be:	e012      	b.n	801b3e6 <blinkLed+0x56>
		else if (ledHendler.gpsLedState == SOLID)
 801b3c0:	4b37      	ldr	r3, [pc, #220]	@ (801b4a0 <blinkLed+0x110>)
 801b3c2:	781b      	ldrb	r3, [r3, #0]
 801b3c4:	2b03      	cmp	r3, #3
 801b3c6:	d105      	bne.n	801b3d4 <blinkLed+0x44>
			GPS_LIGHT_ON();
 801b3c8:	2200      	movs	r2, #0
 801b3ca:	2110      	movs	r1, #16
 801b3cc:	4835      	ldr	r0, [pc, #212]	@ (801b4a4 <blinkLed+0x114>)
 801b3ce:	f7f0 fa41 	bl	800b854 <HAL_GPIO_WritePin>
 801b3d2:	e008      	b.n	801b3e6 <blinkLed+0x56>
		else if (ledHendler.gpsLedState == OFF)
 801b3d4:	4b32      	ldr	r3, [pc, #200]	@ (801b4a0 <blinkLed+0x110>)
 801b3d6:	781b      	ldrb	r3, [r3, #0]
 801b3d8:	2b02      	cmp	r3, #2
 801b3da:	d104      	bne.n	801b3e6 <blinkLed+0x56>
			GPS_LIGHT_OFF();
 801b3dc:	2201      	movs	r2, #1
 801b3de:	2110      	movs	r1, #16
 801b3e0:	4830      	ldr	r0, [pc, #192]	@ (801b4a4 <blinkLed+0x114>)
 801b3e2:	f7f0 fa37 	bl	800b854 <HAL_GPIO_WritePin>

		if (ledHendler.gsmLedState == HEIGH)
 801b3e6:	4b2e      	ldr	r3, [pc, #184]	@ (801b4a0 <blinkLed+0x110>)
 801b3e8:	785b      	ldrb	r3, [r3, #1]
 801b3ea:	2b00      	cmp	r3, #0
 801b3ec:	d102      	bne.n	801b3f4 <blinkLed+0x64>
			handleGsm();
 801b3ee:	f7ff ff95 	bl	801b31c <handleGsm>
 801b3f2:	e012      	b.n	801b41a <blinkLed+0x8a>
		else if (ledHendler.gsmLedState == SOLID)
 801b3f4:	4b2a      	ldr	r3, [pc, #168]	@ (801b4a0 <blinkLed+0x110>)
 801b3f6:	785b      	ldrb	r3, [r3, #1]
 801b3f8:	2b03      	cmp	r3, #3
 801b3fa:	d105      	bne.n	801b408 <blinkLed+0x78>
			GSM_LIGHT_ON();
 801b3fc:	2200      	movs	r2, #0
 801b3fe:	2180      	movs	r1, #128	@ 0x80
 801b400:	4828      	ldr	r0, [pc, #160]	@ (801b4a4 <blinkLed+0x114>)
 801b402:	f7f0 fa27 	bl	800b854 <HAL_GPIO_WritePin>
 801b406:	e008      	b.n	801b41a <blinkLed+0x8a>
		else if (ledHendler.gsmLedState == OFF)
 801b408:	4b25      	ldr	r3, [pc, #148]	@ (801b4a0 <blinkLed+0x110>)
 801b40a:	785b      	ldrb	r3, [r3, #1]
 801b40c:	2b02      	cmp	r3, #2
 801b40e:	d104      	bne.n	801b41a <blinkLed+0x8a>
			GSM_LIGHT_OFF();
 801b410:	2201      	movs	r2, #1
 801b412:	2180      	movs	r1, #128	@ 0x80
 801b414:	4823      	ldr	r0, [pc, #140]	@ (801b4a4 <blinkLed+0x114>)
 801b416:	f7f0 fa1d 	bl	800b854 <HAL_GPIO_WritePin>
		if (ledHendler.pwrLedState == SOLID)
 801b41a:	4b21      	ldr	r3, [pc, #132]	@ (801b4a0 <blinkLed+0x110>)
 801b41c:	789b      	ldrb	r3, [r3, #2]
 801b41e:	2b03      	cmp	r3, #3
 801b420:	d106      	bne.n	801b430 <blinkLed+0xa0>
			PWR_LIGHT_ON();
 801b422:	2200      	movs	r2, #0
 801b424:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801b428:	481e      	ldr	r0, [pc, #120]	@ (801b4a4 <blinkLed+0x114>)
 801b42a:	f7f0 fa13 	bl	800b854 <HAL_GPIO_WritePin>
 801b42e:	e010      	b.n	801b452 <blinkLed+0xc2>
		else if (ledHendler.pwrLedState == OFF)
 801b430:	4b1b      	ldr	r3, [pc, #108]	@ (801b4a0 <blinkLed+0x110>)
 801b432:	789b      	ldrb	r3, [r3, #2]
 801b434:	2b02      	cmp	r3, #2
 801b436:	d106      	bne.n	801b446 <blinkLed+0xb6>
			PWR_LIGHT_OFF();
 801b438:	2201      	movs	r2, #1
 801b43a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801b43e:	4819      	ldr	r0, [pc, #100]	@ (801b4a4 <blinkLed+0x114>)
 801b440:	f7f0 fa08 	bl	800b854 <HAL_GPIO_WritePin>
 801b444:	e005      	b.n	801b452 <blinkLed+0xc2>
		else if (ledHendler.pwrLedState == HEIGH)
 801b446:	4b16      	ldr	r3, [pc, #88]	@ (801b4a0 <blinkLed+0x110>)
 801b448:	789b      	ldrb	r3, [r3, #2]
 801b44a:	2b00      	cmp	r3, #0
 801b44c:	d101      	bne.n	801b452 <blinkLed+0xc2>
			handlePwr();
 801b44e:	f7ff ff81 	bl	801b354 <handlePwr>
	}
	if (time % LOW_TIME == 0) {
 801b452:	6879      	ldr	r1, [r7, #4]
 801b454:	4b14      	ldr	r3, [pc, #80]	@ (801b4a8 <blinkLed+0x118>)
 801b456:	fb83 2301 	smull	r2, r3, r3, r1
 801b45a:	10da      	asrs	r2, r3, #3
 801b45c:	17cb      	asrs	r3, r1, #31
 801b45e:	1ad2      	subs	r2, r2, r3
 801b460:	4613      	mov	r3, r2
 801b462:	009b      	lsls	r3, r3, #2
 801b464:	4413      	add	r3, r2
 801b466:	009b      	lsls	r3, r3, #2
 801b468:	1aca      	subs	r2, r1, r3
 801b46a:	2a00      	cmp	r2, #0
 801b46c:	d111      	bne.n	801b492 <blinkLed+0x102>
		if (ledHendler.gpsLedState == LOW)
 801b46e:	4b0c      	ldr	r3, [pc, #48]	@ (801b4a0 <blinkLed+0x110>)
 801b470:	781b      	ldrb	r3, [r3, #0]
 801b472:	2b01      	cmp	r3, #1
 801b474:	d101      	bne.n	801b47a <blinkLed+0xea>
			handleGps();
 801b476:	f7ff ff35 	bl	801b2e4 <handleGps>
		if (ledHendler.gsmLedState == LOW)
 801b47a:	4b09      	ldr	r3, [pc, #36]	@ (801b4a0 <blinkLed+0x110>)
 801b47c:	785b      	ldrb	r3, [r3, #1]
 801b47e:	2b01      	cmp	r3, #1
 801b480:	d101      	bne.n	801b486 <blinkLed+0xf6>
			handleGsm();
 801b482:	f7ff ff4b 	bl	801b31c <handleGsm>
		if (ledHendler.pwrLedState == LOW)
 801b486:	4b06      	ldr	r3, [pc, #24]	@ (801b4a0 <blinkLed+0x110>)
 801b488:	789b      	ldrb	r3, [r3, #2]
 801b48a:	2b01      	cmp	r3, #1
 801b48c:	d101      	bne.n	801b492 <blinkLed+0x102>
			handlePwr();
 801b48e:	f7ff ff61 	bl	801b354 <handlePwr>
	}

}
 801b492:	bf00      	nop
 801b494:	3708      	adds	r7, #8
 801b496:	46bd      	mov	sp, r7
 801b498:	bd80      	pop	{r7, pc}
 801b49a:	bf00      	nop
 801b49c:	51eb851f 	.word	0x51eb851f
 801b4a0:	200000a4 	.word	0x200000a4
 801b4a4:	42020400 	.word	0x42020400
 801b4a8:	66666667 	.word	0x66666667

0801b4ac <FUpdate>:

void FUpdate() {
 801b4ac:	b480      	push	{r7}
 801b4ae:	af00      	add	r7, sp, #0
		ledHendler.pwrLedState=HEIGH;
 801b4b0:	4b06      	ldr	r3, [pc, #24]	@ (801b4cc <FUpdate+0x20>)
 801b4b2:	2200      	movs	r2, #0
 801b4b4:	709a      	strb	r2, [r3, #2]
		ledHendler.gsmLedState=OFF;
 801b4b6:	4b05      	ldr	r3, [pc, #20]	@ (801b4cc <FUpdate+0x20>)
 801b4b8:	2202      	movs	r2, #2
 801b4ba:	705a      	strb	r2, [r3, #1]
		ledHendler.gpsLedState=OFF;
 801b4bc:	4b03      	ldr	r3, [pc, #12]	@ (801b4cc <FUpdate+0x20>)
 801b4be:	2202      	movs	r2, #2
 801b4c0:	701a      	strb	r2, [r3, #0]

		}
 801b4c2:	bf00      	nop
 801b4c4:	46bd      	mov	sp, r7
 801b4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4ca:	4770      	bx	lr
 801b4cc:	200000a4 	.word	0x200000a4

0801b4d0 <FupdateC>:
void FupdateC()
{
 801b4d0:	b580      	push	{r7, lr}
 801b4d2:	af00      	add	r7, sp, #0
	ledHendler.pwrLedState=SOLID;
 801b4d4:	4b0d      	ldr	r3, [pc, #52]	@ (801b50c <FupdateC+0x3c>)
 801b4d6:	2203      	movs	r2, #3
 801b4d8:	709a      	strb	r2, [r3, #2]
	ledHendler.gsmLedState=SOLID;
 801b4da:	4b0c      	ldr	r3, [pc, #48]	@ (801b50c <FupdateC+0x3c>)
 801b4dc:	2203      	movs	r2, #3
 801b4de:	705a      	strb	r2, [r3, #1]
	ledHendler.gpsLedState=SOLID;
 801b4e0:	4b0a      	ldr	r3, [pc, #40]	@ (801b50c <FupdateC+0x3c>)
 801b4e2:	2203      	movs	r2, #3
 801b4e4:	701a      	strb	r2, [r3, #0]
	PWR_LIGHT_ON();
 801b4e6:	2200      	movs	r2, #0
 801b4e8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801b4ec:	4808      	ldr	r0, [pc, #32]	@ (801b510 <FupdateC+0x40>)
 801b4ee:	f7f0 f9b1 	bl	800b854 <HAL_GPIO_WritePin>
	GPS_LIGHT_ON();
 801b4f2:	2200      	movs	r2, #0
 801b4f4:	2110      	movs	r1, #16
 801b4f6:	4806      	ldr	r0, [pc, #24]	@ (801b510 <FupdateC+0x40>)
 801b4f8:	f7f0 f9ac 	bl	800b854 <HAL_GPIO_WritePin>
	GSM_LIGHT_ON();
 801b4fc:	2200      	movs	r2, #0
 801b4fe:	2180      	movs	r1, #128	@ 0x80
 801b500:	4803      	ldr	r0, [pc, #12]	@ (801b510 <FupdateC+0x40>)
 801b502:	f7f0 f9a7 	bl	800b854 <HAL_GPIO_WritePin>
}
 801b506:	bf00      	nop
 801b508:	bd80      	pop	{r7, pc}
 801b50a:	bf00      	nop
 801b50c:	200000a4 	.word	0x200000a4
 801b510:	42020400 	.word	0x42020400

0801b514 <L86_setup>:
struct GPSData *GPSDataTmp = NULL;
bool isTimeSet = false;
bool isDateSet = false;
char hourStr[3], minuteStr[3], secondStr[3];

void L86_setup(UART_HandleTypeDef *uart) {
 801b514:	b580      	push	{r7, lr}
 801b516:	b082      	sub	sp, #8
 801b518:	af00      	add	r7, sp, #0
 801b51a:	6078      	str	r0, [r7, #4]
	L86_uart = uart;
 801b51c:	4a0b      	ldr	r2, [pc, #44]	@ (801b54c <L86_setup+0x38>)
 801b51e:	687b      	ldr	r3, [r7, #4]
 801b520:	6013      	str	r3, [r2, #0]
	POWER_3V3_ON();
 801b522:	2200      	movs	r2, #0
 801b524:	2108      	movs	r1, #8
 801b526:	480a      	ldr	r0, [pc, #40]	@ (801b550 <L86_setup+0x3c>)
 801b528:	f7f0 f994 	bl	800b854 <HAL_GPIO_WritePin>
	GPS_LIGHT_ON();
 801b52c:	2200      	movs	r2, #0
 801b52e:	2110      	movs	r1, #16
 801b530:	4807      	ldr	r0, [pc, #28]	@ (801b550 <L86_setup+0x3c>)
 801b532:	f7f0 f98f 	bl	800b854 <HAL_GPIO_WritePin>
	GNSS_ON();
 801b536:	2200      	movs	r2, #0
 801b538:	2104      	movs	r1, #4
 801b53a:	4806      	ldr	r0, [pc, #24]	@ (801b554 <L86_setup+0x40>)
 801b53c:	f7f0 f98a 	bl	800b854 <HAL_GPIO_WritePin>
	L86_uart_Init();
 801b540:	f000 f80a 	bl	801b558 <L86_uart_Init>
}
 801b544:	bf00      	nop
 801b546:	3708      	adds	r7, #8
 801b548:	46bd      	mov	sp, r7
 801b54a:	bd80      	pop	{r7, pc}
 801b54c:	20014e4c 	.word	0x20014e4c
 801b550:	42020400 	.word	0x42020400
 801b554:	42020c00 	.word	0x42020c00

0801b558 <L86_uart_Init>:
void L86_uart_Init(void) {
 801b558:	b5b0      	push	{r4, r5, r7, lr}
 801b55a:	b0dc      	sub	sp, #368	@ 0x170
 801b55c:	af00      	add	r7, sp, #0
	uint8_t data[200] = { };
 801b55e:	2300      	movs	r3, #0
 801b560:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 801b564:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 801b568:	22c4      	movs	r2, #196	@ 0xc4
 801b56a:	2100      	movs	r1, #0
 801b56c:	4618      	mov	r0, r3
 801b56e:	f003 fc4f 	bl	801ee10 <memset>
	uint8_t GGA[] = "$PAIR062,0,2*3C\r\n";
 801b572:	4bb6      	ldr	r3, [pc, #728]	@ (801b84c <L86_uart_Init+0x2f4>)
 801b574:	f107 0494 	add.w	r4, r7, #148	@ 0x94
 801b578:	461d      	mov	r5, r3
 801b57a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b57c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b57e:	682b      	ldr	r3, [r5, #0]
 801b580:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(L86_uart, (uint8_t*) GGA, 50, 1000);
 801b582:	4bb3      	ldr	r3, [pc, #716]	@ (801b850 <L86_uart_Init+0x2f8>)
 801b584:	6818      	ldr	r0, [r3, #0]
 801b586:	f107 0194 	add.w	r1, r7, #148	@ 0x94
 801b58a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801b58e:	2232      	movs	r2, #50	@ 0x32
 801b590:	f7f7 fb70 	bl	8012c74 <HAL_UART_Transmit>
	HAL_Delay(1000);
 801b594:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 801b598:	f7ea fa16 	bl	80059c8 <HAL_Delay>
	HAL_UART_Receive(L86_uart, data, 200, 500);
 801b59c:	4bac      	ldr	r3, [pc, #688]	@ (801b850 <L86_uart_Init+0x2f8>)
 801b59e:	6818      	ldr	r0, [r3, #0]
 801b5a0:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 801b5a4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 801b5a8:	22c8      	movs	r2, #200	@ 0xc8
 801b5aa:	f7f7 fc01 	bl	8012db0 <HAL_UART_Receive>
	print(100, data, 200);
 801b5ae:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 801b5b2:	22c8      	movs	r2, #200	@ 0xc8
 801b5b4:	4619      	mov	r1, r3
 801b5b6:	2064      	movs	r0, #100	@ 0x64
 801b5b8:	f7e6 fa6a 	bl	8001a90 <print>
	printc(MinDelay, "\n");
 801b5bc:	49a5      	ldr	r1, [pc, #660]	@ (801b854 <L86_uart_Init+0x2fc>)
 801b5be:	200a      	movs	r0, #10
 801b5c0:	f7e6 fa2a 	bl	8001a18 <printc>

	uint8_t GLL[] = "$PAIR062,1,0*3F\r\n";
 801b5c4:	4ba4      	ldr	r3, [pc, #656]	@ (801b858 <L86_uart_Init+0x300>)
 801b5c6:	f107 0480 	add.w	r4, r7, #128	@ 0x80
 801b5ca:	461d      	mov	r5, r3
 801b5cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b5ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b5d0:	682b      	ldr	r3, [r5, #0]
 801b5d2:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(L86_uart, (uint8_t*) GLL, 50, 1000);
 801b5d4:	4b9e      	ldr	r3, [pc, #632]	@ (801b850 <L86_uart_Init+0x2f8>)
 801b5d6:	6818      	ldr	r0, [r3, #0]
 801b5d8:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 801b5dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801b5e0:	2232      	movs	r2, #50	@ 0x32
 801b5e2:	f7f7 fb47 	bl	8012c74 <HAL_UART_Transmit>
	HAL_Delay(1000);
 801b5e6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 801b5ea:	f7ea f9ed 	bl	80059c8 <HAL_Delay>
	HAL_UART_Receive(L86_uart, data, 200, 500);
 801b5ee:	4b98      	ldr	r3, [pc, #608]	@ (801b850 <L86_uart_Init+0x2f8>)
 801b5f0:	6818      	ldr	r0, [r3, #0]
 801b5f2:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 801b5f6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 801b5fa:	22c8      	movs	r2, #200	@ 0xc8
 801b5fc:	f7f7 fbd8 	bl	8012db0 <HAL_UART_Receive>
	print(1000, data, 200);
 801b600:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 801b604:	22c8      	movs	r2, #200	@ 0xc8
 801b606:	4619      	mov	r1, r3
 801b608:	20e8      	movs	r0, #232	@ 0xe8
 801b60a:	f7e6 fa41 	bl	8001a90 <print>
	printc(MinDelay, "\n");
 801b60e:	4991      	ldr	r1, [pc, #580]	@ (801b854 <L86_uart_Init+0x2fc>)
 801b610:	200a      	movs	r0, #10
 801b612:	f7e6 fa01 	bl	8001a18 <printc>

	uint8_t GSA[] = "$PAIR062,2,2*3E\r\n";
 801b616:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 801b61a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 801b61e:	4a8f      	ldr	r2, [pc, #572]	@ (801b85c <L86_uart_Init+0x304>)
 801b620:	461c      	mov	r4, r3
 801b622:	4615      	mov	r5, r2
 801b624:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b626:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b628:	682b      	ldr	r3, [r5, #0]
 801b62a:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(L86_uart, (uint8_t*) GSA, 50, 1000);
 801b62c:	4b88      	ldr	r3, [pc, #544]	@ (801b850 <L86_uart_Init+0x2f8>)
 801b62e:	6818      	ldr	r0, [r3, #0]
 801b630:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 801b634:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801b638:	2232      	movs	r2, #50	@ 0x32
 801b63a:	f7f7 fb1b 	bl	8012c74 <HAL_UART_Transmit>
	HAL_Delay(100);
 801b63e:	2064      	movs	r0, #100	@ 0x64
 801b640:	f7ea f9c2 	bl	80059c8 <HAL_Delay>
	HAL_UART_Receive(L86_uart, data, 200, 500);
 801b644:	4b82      	ldr	r3, [pc, #520]	@ (801b850 <L86_uart_Init+0x2f8>)
 801b646:	6818      	ldr	r0, [r3, #0]
 801b648:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 801b64c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 801b650:	22c8      	movs	r2, #200	@ 0xc8
 801b652:	f7f7 fbad 	bl	8012db0 <HAL_UART_Receive>
	print(1000, data, 200);
 801b656:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 801b65a:	22c8      	movs	r2, #200	@ 0xc8
 801b65c:	4619      	mov	r1, r3
 801b65e:	20e8      	movs	r0, #232	@ 0xe8
 801b660:	f7e6 fa16 	bl	8001a90 <print>
	printc(MinDelay, "\n");
 801b664:	497b      	ldr	r1, [pc, #492]	@ (801b854 <L86_uart_Init+0x2fc>)
 801b666:	200a      	movs	r0, #10
 801b668:	f7e6 f9d6 	bl	8001a18 <printc>

	uint8_t GSV[] = "$PAIR062,3,0*3D\r\n";
 801b66c:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 801b670:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 801b674:	4a7a      	ldr	r2, [pc, #488]	@ (801b860 <L86_uart_Init+0x308>)
 801b676:	461c      	mov	r4, r3
 801b678:	4615      	mov	r5, r2
 801b67a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b67c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b67e:	682b      	ldr	r3, [r5, #0]
 801b680:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(L86_uart, (uint8_t*) GSV, 50, 1000);
 801b682:	4b73      	ldr	r3, [pc, #460]	@ (801b850 <L86_uart_Init+0x2f8>)
 801b684:	6818      	ldr	r0, [r3, #0]
 801b686:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 801b68a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801b68e:	2232      	movs	r2, #50	@ 0x32
 801b690:	f7f7 faf0 	bl	8012c74 <HAL_UART_Transmit>
	HAL_Delay(1000);
 801b694:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 801b698:	f7ea f996 	bl	80059c8 <HAL_Delay>
	HAL_UART_Receive(L86_uart, data, 200, 500);
 801b69c:	4b6c      	ldr	r3, [pc, #432]	@ (801b850 <L86_uart_Init+0x2f8>)
 801b69e:	6818      	ldr	r0, [r3, #0]
 801b6a0:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 801b6a4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 801b6a8:	22c8      	movs	r2, #200	@ 0xc8
 801b6aa:	f7f7 fb81 	bl	8012db0 <HAL_UART_Receive>
	print(100, data, 200);
 801b6ae:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 801b6b2:	22c8      	movs	r2, #200	@ 0xc8
 801b6b4:	4619      	mov	r1, r3
 801b6b6:	2064      	movs	r0, #100	@ 0x64
 801b6b8:	f7e6 f9ea 	bl	8001a90 <print>
	printc(MinDelay, "\n");
 801b6bc:	4965      	ldr	r1, [pc, #404]	@ (801b854 <L86_uart_Init+0x2fc>)
 801b6be:	200a      	movs	r0, #10
 801b6c0:	f7e6 f9aa 	bl	8001a18 <printc>

	uint8_t RMC[] = "$PAIR062,4,2*38\r\n";
 801b6c4:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 801b6c8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801b6cc:	4a65      	ldr	r2, [pc, #404]	@ (801b864 <L86_uart_Init+0x30c>)
 801b6ce:	461c      	mov	r4, r3
 801b6d0:	4615      	mov	r5, r2
 801b6d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b6d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b6d6:	682b      	ldr	r3, [r5, #0]
 801b6d8:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(L86_uart, (uint8_t*) RMC, 50, 1000);
 801b6da:	4b5d      	ldr	r3, [pc, #372]	@ (801b850 <L86_uart_Init+0x2f8>)
 801b6dc:	6818      	ldr	r0, [r3, #0]
 801b6de:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 801b6e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801b6e6:	2232      	movs	r2, #50	@ 0x32
 801b6e8:	f7f7 fac4 	bl	8012c74 <HAL_UART_Transmit>
	HAL_Delay(1000);
 801b6ec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 801b6f0:	f7ea f96a 	bl	80059c8 <HAL_Delay>
	HAL_UART_Receive(L86_uart, data, 200, 500);
 801b6f4:	4b56      	ldr	r3, [pc, #344]	@ (801b850 <L86_uart_Init+0x2f8>)
 801b6f6:	6818      	ldr	r0, [r3, #0]
 801b6f8:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 801b6fc:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 801b700:	22c8      	movs	r2, #200	@ 0xc8
 801b702:	f7f7 fb55 	bl	8012db0 <HAL_UART_Receive>
	print(100, data, 200);
 801b706:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 801b70a:	22c8      	movs	r2, #200	@ 0xc8
 801b70c:	4619      	mov	r1, r3
 801b70e:	2064      	movs	r0, #100	@ 0x64
 801b710:	f7e6 f9be 	bl	8001a90 <print>
	printc(MinDelay, "\n");
 801b714:	494f      	ldr	r1, [pc, #316]	@ (801b854 <L86_uart_Init+0x2fc>)
 801b716:	200a      	movs	r0, #10
 801b718:	f7e6 f97e 	bl	8001a18 <printc>

	uint8_t VTG[] = "$PAIR062,5,0*3B\r\n";
 801b71c:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 801b720:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 801b724:	4a50      	ldr	r2, [pc, #320]	@ (801b868 <L86_uart_Init+0x310>)
 801b726:	461c      	mov	r4, r3
 801b728:	4615      	mov	r5, r2
 801b72a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b72c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b72e:	682b      	ldr	r3, [r5, #0]
 801b730:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(L86_uart, (uint8_t*) VTG, 50, 1000);
 801b732:	4b47      	ldr	r3, [pc, #284]	@ (801b850 <L86_uart_Init+0x2f8>)
 801b734:	6818      	ldr	r0, [r3, #0]
 801b736:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 801b73a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801b73e:	2232      	movs	r2, #50	@ 0x32
 801b740:	f7f7 fa98 	bl	8012c74 <HAL_UART_Transmit>
	HAL_Delay(1000);
 801b744:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 801b748:	f7ea f93e 	bl	80059c8 <HAL_Delay>
	HAL_UART_Receive(L86_uart, data, 200, 500);
 801b74c:	4b40      	ldr	r3, [pc, #256]	@ (801b850 <L86_uart_Init+0x2f8>)
 801b74e:	6818      	ldr	r0, [r3, #0]
 801b750:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 801b754:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 801b758:	22c8      	movs	r2, #200	@ 0xc8
 801b75a:	f7f7 fb29 	bl	8012db0 <HAL_UART_Receive>
	print(100, data, 200);
 801b75e:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 801b762:	22c8      	movs	r2, #200	@ 0xc8
 801b764:	4619      	mov	r1, r3
 801b766:	2064      	movs	r0, #100	@ 0x64
 801b768:	f7e6 f992 	bl	8001a90 <print>
	printc(MinDelay, "\n");
 801b76c:	4939      	ldr	r1, [pc, #228]	@ (801b854 <L86_uart_Init+0x2fc>)
 801b76e:	200a      	movs	r0, #10
 801b770:	f7e6 f952 	bl	8001a18 <printc>

	uint8_t Baudrate[] = "$PAIR864,0,0,115200*1B\r\n";
 801b774:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 801b778:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 801b77c:	4a3b      	ldr	r2, [pc, #236]	@ (801b86c <L86_uart_Init+0x314>)
 801b77e:	461c      	mov	r4, r3
 801b780:	4615      	mov	r5, r2
 801b782:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b784:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b786:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801b78a:	c403      	stmia	r4!, {r0, r1}
 801b78c:	7022      	strb	r2, [r4, #0]
	HAL_UART_Transmit(L86_uart, (uint8_t*) Baudrate, strlen(Baudrate), 1000);
 801b78e:	4b30      	ldr	r3, [pc, #192]	@ (801b850 <L86_uart_Init+0x2f8>)
 801b790:	681c      	ldr	r4, [r3, #0]
 801b792:	f107 0314 	add.w	r3, r7, #20
 801b796:	4618      	mov	r0, r3
 801b798:	f7e4 fd84 	bl	80002a4 <strlen>
 801b79c:	4603      	mov	r3, r0
 801b79e:	b29a      	uxth	r2, r3
 801b7a0:	f107 0114 	add.w	r1, r7, #20
 801b7a4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801b7a8:	4620      	mov	r0, r4
 801b7aa:	f7f7 fa63 	bl	8012c74 <HAL_UART_Transmit>
	HAL_Delay(100);
 801b7ae:	2064      	movs	r0, #100	@ 0x64
 801b7b0:	f7ea f90a 	bl	80059c8 <HAL_Delay>
	HAL_UART_Receive(L86_uart, data, 200, 500);
 801b7b4:	4b26      	ldr	r3, [pc, #152]	@ (801b850 <L86_uart_Init+0x2f8>)
 801b7b6:	6818      	ldr	r0, [r3, #0]
 801b7b8:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 801b7bc:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 801b7c0:	22c8      	movs	r2, #200	@ 0xc8
 801b7c2:	f7f7 faf5 	bl	8012db0 <HAL_UART_Receive>
	print(100, data, 200);
 801b7c6:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 801b7ca:	22c8      	movs	r2, #200	@ 0xc8
 801b7cc:	4619      	mov	r1, r3
 801b7ce:	2064      	movs	r0, #100	@ 0x64
 801b7d0:	f7e6 f95e 	bl	8001a90 <print>
	printc(MinDelay, "\n");
 801b7d4:	491f      	ldr	r1, [pc, #124]	@ (801b854 <L86_uart_Init+0x2fc>)
 801b7d6:	200a      	movs	r0, #10
 801b7d8:	f7e6 f91e 	bl	8001a18 <printc>
	uint8_t SAVE_PARAM[] = "$PAIR513*3D\r\n";
 801b7dc:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 801b7e0:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 801b7e4:	4a22      	ldr	r2, [pc, #136]	@ (801b870 <L86_uart_Init+0x318>)
 801b7e6:	461c      	mov	r4, r3
 801b7e8:	4613      	mov	r3, r2
 801b7ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801b7ec:	c407      	stmia	r4!, {r0, r1, r2}
 801b7ee:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(L86_uart, (uint8_t*) SAVE_PARAM, 50, 1000);
 801b7f0:	4b17      	ldr	r3, [pc, #92]	@ (801b850 <L86_uart_Init+0x2f8>)
 801b7f2:	6818      	ldr	r0, [r3, #0]
 801b7f4:	1d39      	adds	r1, r7, #4
 801b7f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801b7fa:	2232      	movs	r2, #50	@ 0x32
 801b7fc:	f7f7 fa3a 	bl	8012c74 <HAL_UART_Transmit>
	HAL_Delay(1000);
 801b800:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 801b804:	f7ea f8e0 	bl	80059c8 <HAL_Delay>
	HAL_UART_Receive(L86_uart, data, 200, 500);
 801b808:	4b11      	ldr	r3, [pc, #68]	@ (801b850 <L86_uart_Init+0x2f8>)
 801b80a:	6818      	ldr	r0, [r3, #0]
 801b80c:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 801b810:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 801b814:	22c8      	movs	r2, #200	@ 0xc8
 801b816:	f7f7 facb 	bl	8012db0 <HAL_UART_Receive>
	print(100, data, 200);
 801b81a:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 801b81e:	22c8      	movs	r2, #200	@ 0xc8
 801b820:	4619      	mov	r1, r3
 801b822:	2064      	movs	r0, #100	@ 0x64
 801b824:	f7e6 f934 	bl	8001a90 <print>
	printc(MinDelay, "\n");
 801b828:	490a      	ldr	r1, [pc, #40]	@ (801b854 <L86_uart_Init+0x2fc>)
 801b82a:	200a      	movs	r0, #10
 801b82c:	f7e6 f8f4 	bl	8001a18 <printc>
	HAL_UART_Receive_DMA(L86_uart, (uint8_t*) L86Buffer, L86_BUFFER_SIZE);
 801b830:	4b07      	ldr	r3, [pc, #28]	@ (801b850 <L86_uart_Init+0x2f8>)
 801b832:	681b      	ldr	r3, [r3, #0]
 801b834:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801b838:	490e      	ldr	r1, [pc, #56]	@ (801b874 <L86_uart_Init+0x31c>)
 801b83a:	4618      	mov	r0, r3
 801b83c:	f7f7 fb90 	bl	8012f60 <HAL_UART_Receive_DMA>
}
 801b840:	bf00      	nop
 801b842:	f507 77b8 	add.w	r7, r7, #368	@ 0x170
 801b846:	46bd      	mov	sp, r7
 801b848:	bdb0      	pop	{r4, r5, r7, pc}
 801b84a:	bf00      	nop
 801b84c:	08023d78 	.word	0x08023d78
 801b850:	20014e4c 	.word	0x20014e4c
 801b854:	08023d74 	.word	0x08023d74
 801b858:	08023d8c 	.word	0x08023d8c
 801b85c:	08023da0 	.word	0x08023da0
 801b860:	08023db4 	.word	0x08023db4
 801b864:	08023dc8 	.word	0x08023dc8
 801b868:	08023ddc 	.word	0x08023ddc
 801b86c:	08023df0 	.word	0x08023df0
 801b870:	08023e0c 	.word	0x08023e0c
 801b874:	20014e50 	.word	0x20014e50

0801b878 <splitWithComma>:
int splitWithComma(char *data, char **output) {
 801b878:	b580      	push	{r7, lr}
 801b87a:	b084      	sub	sp, #16
 801b87c:	af00      	add	r7, sp, #0
 801b87e:	6078      	str	r0, [r7, #4]
 801b880:	6039      	str	r1, [r7, #0]
	char *token = strtok((char*) data, ",");
 801b882:	4910      	ldr	r1, [pc, #64]	@ (801b8c4 <splitWithComma+0x4c>)
 801b884:	6878      	ldr	r0, [r7, #4]
 801b886:	f003 fb27 	bl	801eed8 <strtok>
 801b88a:	60f8      	str	r0, [r7, #12]
	int i = 0;
 801b88c:	2300      	movs	r3, #0
 801b88e:	60bb      	str	r3, [r7, #8]
	while (token != NULL && i < 20) {
 801b890:	e00c      	b.n	801b8ac <splitWithComma+0x34>
		output[i++] = token;
 801b892:	68bb      	ldr	r3, [r7, #8]
 801b894:	1c5a      	adds	r2, r3, #1
 801b896:	60ba      	str	r2, [r7, #8]
 801b898:	009b      	lsls	r3, r3, #2
 801b89a:	683a      	ldr	r2, [r7, #0]
 801b89c:	4413      	add	r3, r2
 801b89e:	68fa      	ldr	r2, [r7, #12]
 801b8a0:	601a      	str	r2, [r3, #0]
		token = strtok(NULL, ",");
 801b8a2:	4908      	ldr	r1, [pc, #32]	@ (801b8c4 <splitWithComma+0x4c>)
 801b8a4:	2000      	movs	r0, #0
 801b8a6:	f003 fb17 	bl	801eed8 <strtok>
 801b8aa:	60f8      	str	r0, [r7, #12]
	while (token != NULL && i < 20) {
 801b8ac:	68fb      	ldr	r3, [r7, #12]
 801b8ae:	2b00      	cmp	r3, #0
 801b8b0:	d002      	beq.n	801b8b8 <splitWithComma+0x40>
 801b8b2:	68bb      	ldr	r3, [r7, #8]
 801b8b4:	2b13      	cmp	r3, #19
 801b8b6:	ddec      	ble.n	801b892 <splitWithComma+0x1a>
	}
	return i;
 801b8b8:	68bb      	ldr	r3, [r7, #8]
}
 801b8ba:	4618      	mov	r0, r3
 801b8bc:	3710      	adds	r7, #16
 801b8be:	46bd      	mov	sp, r7
 801b8c0:	bd80      	pop	{r7, pc}
 801b8c2:	bf00      	nop
 801b8c4:	08023e1c 	.word	0x08023e1c

0801b8c8 <convertToDegrees>:
double convertToDegrees(double input) {
 801b8c8:	b5b0      	push	{r4, r5, r7, lr}
 801b8ca:	b088      	sub	sp, #32
 801b8cc:	af00      	add	r7, sp, #0
 801b8ce:	ed87 0b00 	vstr	d0, [r7]
	int degrees = input / 100; // Extracting degrees
 801b8d2:	f04f 0200 	mov.w	r2, #0
 801b8d6:	4b1e      	ldr	r3, [pc, #120]	@ (801b950 <convertToDegrees+0x88>)
 801b8d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 801b8dc:	f7e4 ffd0 	bl	8000880 <__aeabi_ddiv>
 801b8e0:	4602      	mov	r2, r0
 801b8e2:	460b      	mov	r3, r1
 801b8e4:	4610      	mov	r0, r2
 801b8e6:	4619      	mov	r1, r3
 801b8e8:	f7e5 f950 	bl	8000b8c <__aeabi_d2iz>
 801b8ec:	4603      	mov	r3, r0
 801b8ee:	61fb      	str	r3, [r7, #28]
	double minutes = fmod(input, 100); // Extracting decimal minutes
 801b8f0:	ed9f 1b15 	vldr	d1, [pc, #84]	@ 801b948 <convertToDegrees+0x80>
 801b8f4:	ed97 0b00 	vldr	d0, [r7]
 801b8f8:	f006 fb68 	bl	8021fcc <fmod>
 801b8fc:	ed87 0b04 	vstr	d0, [r7, #16]
	double decimalDegrees = degrees + (minutes / 60); // Converting to decimal degrees
 801b900:	69f8      	ldr	r0, [r7, #28]
 801b902:	f7e4 fe29 	bl	8000558 <__aeabi_i2d>
 801b906:	4604      	mov	r4, r0
 801b908:	460d      	mov	r5, r1
 801b90a:	f04f 0200 	mov.w	r2, #0
 801b90e:	4b11      	ldr	r3, [pc, #68]	@ (801b954 <convertToDegrees+0x8c>)
 801b910:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801b914:	f7e4 ffb4 	bl	8000880 <__aeabi_ddiv>
 801b918:	4602      	mov	r2, r0
 801b91a:	460b      	mov	r3, r1
 801b91c:	4620      	mov	r0, r4
 801b91e:	4629      	mov	r1, r5
 801b920:	f7e4 fcce 	bl	80002c0 <__adddf3>
 801b924:	4602      	mov	r2, r0
 801b926:	460b      	mov	r3, r1
 801b928:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return decimalDegrees;
 801b92c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801b930:	ec43 2b17 	vmov	d7, r2, r3
}
 801b934:	eeb0 0a47 	vmov.f32	s0, s14
 801b938:	eef0 0a67 	vmov.f32	s1, s15
 801b93c:	3720      	adds	r7, #32
 801b93e:	46bd      	mov	sp, r7
 801b940:	bdb0      	pop	{r4, r5, r7, pc}
 801b942:	bf00      	nop
 801b944:	f3af 8000 	nop.w
 801b948:	00000000 	.word	0x00000000
 801b94c:	40590000 	.word	0x40590000
 801b950:	40590000 	.word	0x40590000
 801b954:	404e0000 	.word	0x404e0000

0801b958 <init_GPSData>:
bool init_GPSData(GPSData *GPSDataTmp) {
 801b958:	b480      	push	{r7}
 801b95a:	b083      	sub	sp, #12
 801b95c:	af00      	add	r7, sp, #0
 801b95e:	6078      	str	r0, [r7, #4]
//    GPSData* GPSDataTmp = (GPSData*)malloc(sizeof(GPSData));
	if (GPSDataTmp == NULL) {
 801b960:	687b      	ldr	r3, [r7, #4]
 801b962:	2b00      	cmp	r3, #0
 801b964:	d101      	bne.n	801b96a <init_GPSData+0x12>
		// Handle memory allocation failure
		return false;
 801b966:	2300      	movs	r3, #0
 801b968:	e031      	b.n	801b9ce <init_GPSData+0x76>
	}

	// Initialize members with default values
	GPSDataTmp->latitude = 0.0f;
 801b96a:	6879      	ldr	r1, [r7, #4]
 801b96c:	f04f 0200 	mov.w	r2, #0
 801b970:	f04f 0300 	mov.w	r3, #0
 801b974:	e9c1 2300 	strd	r2, r3, [r1]
	GPSDataTmp->lat_dir = 'N'; // Null terminator
 801b978:	687b      	ldr	r3, [r7, #4]
 801b97a:	224e      	movs	r2, #78	@ 0x4e
 801b97c:	721a      	strb	r2, [r3, #8]
	GPSDataTmp->longitude = 0.0f;
 801b97e:	6879      	ldr	r1, [r7, #4]
 801b980:	f04f 0200 	mov.w	r2, #0
 801b984:	f04f 0300 	mov.w	r3, #0
 801b988:	e9c1 2304 	strd	r2, r3, [r1, #16]
	GPSDataTmp->lon_dir = 'E'; // Null terminator
 801b98c:	687b      	ldr	r3, [r7, #4]
 801b98e:	2245      	movs	r2, #69	@ 0x45
 801b990:	761a      	strb	r2, [r3, #24]
	GPSDataTmp->speed = 0.0f;
 801b992:	687b      	ldr	r3, [r7, #4]
 801b994:	f04f 0200 	mov.w	r2, #0
 801b998:	61da      	str	r2, [r3, #28]
	GPSDataTmp->heading = 0;
 801b99a:	687b      	ldr	r3, [r7, #4]
 801b99c:	2200      	movs	r2, #0
 801b99e:	621a      	str	r2, [r3, #32]
	GPSDataTmp->sat_num = 0;
 801b9a0:	687b      	ldr	r3, [r7, #4]
 801b9a2:	2200      	movs	r2, #0
 801b9a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	GPSDataTmp->alt = 0;
 801b9a8:	687b      	ldr	r3, [r7, #4]
 801b9aa:	2200      	movs	r2, #0
 801b9ac:	629a      	str	r2, [r3, #40]	@ 0x28
	GPSDataTmp->PDOP = 0.0f;
 801b9ae:	687b      	ldr	r3, [r7, #4]
 801b9b0:	f04f 0200 	mov.w	r2, #0
 801b9b4:	62da      	str	r2, [r3, #44]	@ 0x2c
	GPSDataTmp->HDOP = 0.0f;
 801b9b6:	687b      	ldr	r3, [r7, #4]
 801b9b8:	f04f 0200 	mov.w	r2, #0
 801b9bc:	631a      	str	r2, [r3, #48]	@ 0x30
	GPSDataTmp->gps_fix = false;
 801b9be:	687b      	ldr	r3, [r7, #4]
 801b9c0:	2200      	movs	r2, #0
 801b9c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	GPSDataTmp->nextData = NULL;
 801b9c6:	687b      	ldr	r3, [r7, #4]
 801b9c8:	2200      	movs	r2, #0
 801b9ca:	639a      	str	r2, [r3, #56]	@ 0x38
	// Null terminator for date string
	return true;
 801b9cc:	2301      	movs	r3, #1
}
 801b9ce:	4618      	mov	r0, r3
 801b9d0:	370c      	adds	r7, #12
 801b9d2:	46bd      	mov	sp, r7
 801b9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9d8:	4770      	bx	lr
 801b9da:	0000      	movs	r0, r0
 801b9dc:	0000      	movs	r0, r0
	...

0801b9e0 <ProcessData>:
void ProcessData(uint8_t *data) {
 801b9e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b9e4:	f5ad 5da4 	sub.w	sp, sp, #5248	@ 0x1480
 801b9e8:	b083      	sub	sp, #12
 801b9ea:	af00      	add	r7, sp, #0
 801b9ec:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801b9f0:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 801b9f4:	6018      	str	r0, [r3, #0]
	int tmplen = 0;
 801b9f6:	2300      	movs	r3, #0
 801b9f8:	f507 52a4 	add.w	r2, r7, #5248	@ 0x1480
 801b9fc:	f102 0204 	add.w	r2, r2, #4
 801ba00:	6013      	str	r3, [r2, #0]
//		char *line = strtok((char *)data,"\n");
	printc(MinDelay, "Data size is %d\n", strlen(tmpData));
 801ba02:	489d      	ldr	r0, [pc, #628]	@ (801bc78 <ProcessData+0x298>)
 801ba04:	f7e4 fc4e 	bl	80002a4 <strlen>
 801ba08:	4603      	mov	r3, r0
 801ba0a:	461a      	mov	r2, r3
 801ba0c:	499b      	ldr	r1, [pc, #620]	@ (801bc7c <ProcessData+0x29c>)
 801ba0e:	200a      	movs	r0, #10
 801ba10:	f7e6 f802 	bl	8001a18 <printc>
	uint8_t *line = strstr(data, "\r\n");
 801ba14:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801ba18:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 801ba1c:	4998      	ldr	r1, [pc, #608]	@ (801bc80 <ProcessData+0x2a0>)
 801ba1e:	6818      	ldr	r0, [r3, #0]
 801ba20:	f003 fab6 	bl	801ef90 <strstr>
 801ba24:	f507 53a4 	add.w	r3, r7, #5248	@ 0x1480
 801ba28:	6018      	str	r0, [r3, #0]
	char lineBuff[20][255] = { };
 801ba2a:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801ba2e:	f2a3 431c 	subw	r3, r3, #1052	@ 0x41c
 801ba32:	4618      	mov	r0, r3
 801ba34:	f241 33ec 	movw	r3, #5100	@ 0x13ec
 801ba38:	461a      	mov	r2, r3
 801ba3a:	2100      	movs	r1, #0
 801ba3c:	f003 f9e8 	bl	801ee10 <memset>
	int i = 0;
 801ba40:	2300      	movs	r3, #0
 801ba42:	f507 52a3 	add.w	r2, r7, #5216	@ 0x1460
 801ba46:	f102 021c 	add.w	r2, r2, #28
 801ba4a:	6013      	str	r3, [r2, #0]
	while (line != NULL) {
 801ba4c:	e180      	b.n	801bd50 <ProcessData+0x370>
 801ba4e:	466b      	mov	r3, sp
 801ba50:	613b      	str	r3, [r7, #16]
		uint8_t length = line - data;
 801ba52:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801ba56:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 801ba5a:	f507 52a4 	add.w	r2, r7, #5248	@ 0x1480
 801ba5e:	6812      	ldr	r2, [r2, #0]
 801ba60:	681b      	ldr	r3, [r3, #0]
 801ba62:	1ad3      	subs	r3, r2, r3
 801ba64:	f507 52a3 	add.w	r2, r7, #5216	@ 0x1460
 801ba68:	f102 020f 	add.w	r2, r2, #15
 801ba6c:	7013      	strb	r3, [r2, #0]
		char substring[length];
 801ba6e:	f507 53a3 	add.w	r3, r7, #5216	@ 0x1460
 801ba72:	f103 030f 	add.w	r3, r3, #15
 801ba76:	7819      	ldrb	r1, [r3, #0]
 801ba78:	460b      	mov	r3, r1
 801ba7a:	3b01      	subs	r3, #1
 801ba7c:	f507 52a3 	add.w	r2, r7, #5216	@ 0x1460
 801ba80:	f102 0208 	add.w	r2, r2, #8
 801ba84:	6013      	str	r3, [r2, #0]
 801ba86:	b2cb      	uxtb	r3, r1
 801ba88:	2200      	movs	r2, #0
 801ba8a:	4698      	mov	r8, r3
 801ba8c:	4691      	mov	r9, r2
 801ba8e:	f04f 0200 	mov.w	r2, #0
 801ba92:	f04f 0300 	mov.w	r3, #0
 801ba96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801ba9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801ba9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801baa2:	b2cb      	uxtb	r3, r1
 801baa4:	2200      	movs	r2, #0
 801baa6:	469a      	mov	sl, r3
 801baa8:	4693      	mov	fp, r2
 801baaa:	f04f 0200 	mov.w	r2, #0
 801baae:	f04f 0300 	mov.w	r3, #0
 801bab2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 801bab6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 801baba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801babe:	460b      	mov	r3, r1
 801bac0:	3307      	adds	r3, #7
 801bac2:	08db      	lsrs	r3, r3, #3
 801bac4:	00db      	lsls	r3, r3, #3
 801bac6:	ebad 0d03 	sub.w	sp, sp, r3
 801baca:	466b      	mov	r3, sp
 801bacc:	3300      	adds	r3, #0
 801bace:	f507 52a3 	add.w	r2, r7, #5216	@ 0x1460
 801bad2:	f102 0204 	add.w	r2, r2, #4
 801bad6:	6013      	str	r3, [r2, #0]
		memset(substring, 0, length);
 801bad8:	f507 53a3 	add.w	r3, r7, #5216	@ 0x1460
 801badc:	f103 030f 	add.w	r3, r3, #15
 801bae0:	781b      	ldrb	r3, [r3, #0]
 801bae2:	461a      	mov	r2, r3
 801bae4:	2100      	movs	r1, #0
 801bae6:	f507 53a3 	add.w	r3, r7, #5216	@ 0x1460
 801baea:	f103 0304 	add.w	r3, r3, #4
 801baee:	6818      	ldr	r0, [r3, #0]
 801baf0:	f003 f98e 	bl	801ee10 <memset>
		if (substring == NULL) {
			printc(MinDelay, "Memory allocation failed\n");
			return;
		}
		memcpy(substring, data, length);
 801baf4:	f507 53a3 	add.w	r3, r7, #5216	@ 0x1460
 801baf8:	f103 030f 	add.w	r3, r3, #15
 801bafc:	781a      	ldrb	r2, [r3, #0]
 801bafe:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801bb02:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 801bb06:	6819      	ldr	r1, [r3, #0]
 801bb08:	f507 53a3 	add.w	r3, r7, #5216	@ 0x1460
 801bb0c:	f103 0304 	add.w	r3, r3, #4
 801bb10:	6818      	ldr	r0, [r3, #0]
 801bb12:	f003 faf0 	bl	801f0f6 <memcpy>
		data = line + 2;
 801bb16:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801bb1a:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 801bb1e:	f507 52a4 	add.w	r2, r7, #5248	@ 0x1480
 801bb22:	6812      	ldr	r2, [r2, #0]
 801bb24:	3202      	adds	r2, #2
 801bb26:	601a      	str	r2, [r3, #0]
		tmplen += length + 2;
 801bb28:	f507 53a3 	add.w	r3, r7, #5216	@ 0x1460
 801bb2c:	f103 030f 	add.w	r3, r3, #15
 801bb30:	781b      	ldrb	r3, [r3, #0]
 801bb32:	3302      	adds	r3, #2
 801bb34:	f507 52a4 	add.w	r2, r7, #5248	@ 0x1480
 801bb38:	f102 0204 	add.w	r2, r2, #4
 801bb3c:	6812      	ldr	r2, [r2, #0]
 801bb3e:	4413      	add	r3, r2
 801bb40:	f507 52a4 	add.w	r2, r7, #5248	@ 0x1480
 801bb44:	f102 0204 	add.w	r2, r2, #4
 801bb48:	6013      	str	r3, [r2, #0]
		printc(MinDelay, "sub string \n %s\n", substring);
 801bb4a:	f507 53a3 	add.w	r3, r7, #5216	@ 0x1460
 801bb4e:	f103 0304 	add.w	r3, r3, #4
 801bb52:	681a      	ldr	r2, [r3, #0]
 801bb54:	494b      	ldr	r1, [pc, #300]	@ (801bc84 <ProcessData+0x2a4>)
 801bb56:	200a      	movs	r0, #10
 801bb58:	f7e5 ff5e 	bl	8001a18 <printc>
		if (hasHalfData) {
 801bb5c:	4b4a      	ldr	r3, [pc, #296]	@ (801bc88 <ProcessData+0x2a8>)
 801bb5e:	781b      	ldrb	r3, [r3, #0]
 801bb60:	2b00      	cmp	r3, #0
 801bb62:	f000 8099 	beq.w	801bc98 <ProcessData+0x2b8>
 801bb66:	466b      	mov	r3, sp
 801bb68:	607b      	str	r3, [r7, #4]
			size_t total_length = strlen(tmpBuffer) + strlen(substring) + 1;
 801bb6a:	4848      	ldr	r0, [pc, #288]	@ (801bc8c <ProcessData+0x2ac>)
 801bb6c:	f7e4 fb9a 	bl	80002a4 <strlen>
 801bb70:	4604      	mov	r4, r0
 801bb72:	f507 52a3 	add.w	r2, r7, #5216	@ 0x1460
 801bb76:	f102 0204 	add.w	r2, r2, #4
 801bb7a:	6810      	ldr	r0, [r2, #0]
 801bb7c:	f7e4 fb92 	bl	80002a4 <strlen>
 801bb80:	4603      	mov	r3, r0
 801bb82:	4423      	add	r3, r4
 801bb84:	3301      	adds	r3, #1
 801bb86:	f507 52a3 	add.w	r2, r7, #5216	@ 0x1460
 801bb8a:	6013      	str	r3, [r2, #0]
			char tmp[total_length];
 801bb8c:	f507 52a3 	add.w	r2, r7, #5216	@ 0x1460
 801bb90:	6811      	ldr	r1, [r2, #0]
 801bb92:	460b      	mov	r3, r1
 801bb94:	3b01      	subs	r3, #1
 801bb96:	f507 52a2 	add.w	r2, r7, #5184	@ 0x1440
 801bb9a:	f102 021c 	add.w	r2, r2, #28
 801bb9e:	6013      	str	r3, [r2, #0]
 801bba0:	2300      	movs	r3, #0
 801bba2:	460d      	mov	r5, r1
 801bba4:	461e      	mov	r6, r3
 801bba6:	f04f 0200 	mov.w	r2, #0
 801bbaa:	f04f 0300 	mov.w	r3, #0
 801bbae:	00f3      	lsls	r3, r6, #3
 801bbb0:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 801bbb4:	00ea      	lsls	r2, r5, #3
 801bbb6:	2300      	movs	r3, #0
 801bbb8:	60b9      	str	r1, [r7, #8]
 801bbba:	60fb      	str	r3, [r7, #12]
 801bbbc:	f04f 0200 	mov.w	r2, #0
 801bbc0:	f04f 0300 	mov.w	r3, #0
 801bbc4:	68f8      	ldr	r0, [r7, #12]
 801bbc6:	00c3      	lsls	r3, r0, #3
 801bbc8:	68b8      	ldr	r0, [r7, #8]
 801bbca:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 801bbce:	68b8      	ldr	r0, [r7, #8]
 801bbd0:	00c2      	lsls	r2, r0, #3
 801bbd2:	1dcb      	adds	r3, r1, #7
 801bbd4:	08db      	lsrs	r3, r3, #3
 801bbd6:	00db      	lsls	r3, r3, #3
 801bbd8:	ebad 0d03 	sub.w	sp, sp, r3
 801bbdc:	466b      	mov	r3, sp
 801bbde:	3300      	adds	r3, #0
 801bbe0:	f507 52a2 	add.w	r2, r7, #5184	@ 0x1440
 801bbe4:	f102 0218 	add.w	r2, r2, #24
 801bbe8:	6013      	str	r3, [r2, #0]
			memset(tmp, 0, total_length);
 801bbea:	f507 52a3 	add.w	r2, r7, #5216	@ 0x1460
 801bbee:	6812      	ldr	r2, [r2, #0]
 801bbf0:	2100      	movs	r1, #0
 801bbf2:	f507 50a2 	add.w	r0, r7, #5184	@ 0x1440
 801bbf6:	f100 0018 	add.w	r0, r0, #24
 801bbfa:	6800      	ldr	r0, [r0, #0]
 801bbfc:	f003 f908 	bl	801ee10 <memset>
			if (tmp != NULL) {
				// Copy tmpBuffer and line into tmp
				sprintf(tmp, "%s%s", tmpBuffer, substring);
 801bc00:	f507 52a3 	add.w	r2, r7, #5216	@ 0x1460
 801bc04:	f102 0204 	add.w	r2, r2, #4
 801bc08:	6813      	ldr	r3, [r2, #0]
 801bc0a:	4a20      	ldr	r2, [pc, #128]	@ (801bc8c <ProcessData+0x2ac>)
 801bc0c:	4920      	ldr	r1, [pc, #128]	@ (801bc90 <ProcessData+0x2b0>)
 801bc0e:	f507 50a2 	add.w	r0, r7, #5184	@ 0x1440
 801bc12:	f100 0018 	add.w	r0, r0, #24
 801bc16:	6800      	ldr	r0, [r0, #0]
 801bc18:	f002 ff9e 	bl	801eb58 <siprintf>
				strcpy(&lineBuff[i++], tmp);
 801bc1c:	f507 52a3 	add.w	r2, r7, #5216	@ 0x1460
 801bc20:	f102 021c 	add.w	r2, r2, #28
 801bc24:	6811      	ldr	r1, [r2, #0]
 801bc26:	1c4b      	adds	r3, r1, #1
 801bc28:	f507 52a3 	add.w	r2, r7, #5216	@ 0x1460
 801bc2c:	f102 021c 	add.w	r2, r2, #28
 801bc30:	6013      	str	r3, [r2, #0]
 801bc32:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 801bc36:	3a1c      	subs	r2, #28
 801bc38:	460b      	mov	r3, r1
 801bc3a:	021b      	lsls	r3, r3, #8
 801bc3c:	1a5b      	subs	r3, r3, r1
 801bc3e:	4413      	add	r3, r2
 801bc40:	f507 52a2 	add.w	r2, r7, #5184	@ 0x1440
 801bc44:	f102 0218 	add.w	r2, r2, #24
 801bc48:	6811      	ldr	r1, [r2, #0]
 801bc4a:	4618      	mov	r0, r3
 801bc4c:	f003 fa3d 	bl	801f0ca <strcpy>
				printc(MinDelay, "Merged data is %s\n", tmp);
 801bc50:	f507 52a2 	add.w	r2, r7, #5184	@ 0x1440
 801bc54:	f102 0218 	add.w	r2, r2, #24
 801bc58:	6812      	ldr	r2, [r2, #0]
 801bc5a:	490e      	ldr	r1, [pc, #56]	@ (801bc94 <ProcessData+0x2b4>)
 801bc5c:	200a      	movs	r0, #10
 801bc5e:	f7e5 fedb 	bl	8001a18 <printc>
				// Free the memory allocated for tmp
				memset(tmpBuffer, 0, 200);
 801bc62:	22c8      	movs	r2, #200	@ 0xc8
 801bc64:	2100      	movs	r1, #0
 801bc66:	4809      	ldr	r0, [pc, #36]	@ (801bc8c <ProcessData+0x2ac>)
 801bc68:	f003 f8d2 	bl	801ee10 <memset>
				hasHalfData = false;
 801bc6c:	4b06      	ldr	r3, [pc, #24]	@ (801bc88 <ProcessData+0x2a8>)
 801bc6e:	2200      	movs	r2, #0
 801bc70:	701a      	strb	r2, [r3, #0]
 801bc72:	f8d7 d004 	ldr.w	sp, [r7, #4]
 801bc76:	e029      	b.n	801bccc <ProcessData+0x2ec>
 801bc78:	20015300 	.word	0x20015300
 801bc7c:	08023e20 	.word	0x08023e20
 801bc80:	08023e34 	.word	0x08023e34
 801bc84:	08023e38 	.word	0x08023e38
 801bc88:	200154f4 	.word	0x200154f4
 801bc8c:	20015238 	.word	0x20015238
 801bc90:	08023e4c 	.word	0x08023e4c
 801bc94:	08023e54 	.word	0x08023e54
			} else {
				// Handle memory allocation failure
				printf("Failed to allocate memory for tmp.\n");
			}
		} else {
			strcpy(&lineBuff[i++], substring);
 801bc98:	f507 53a3 	add.w	r3, r7, #5216	@ 0x1460
 801bc9c:	f103 031c 	add.w	r3, r3, #28
 801bca0:	6819      	ldr	r1, [r3, #0]
 801bca2:	1c4b      	adds	r3, r1, #1
 801bca4:	f507 52a3 	add.w	r2, r7, #5216	@ 0x1460
 801bca8:	f102 021c 	add.w	r2, r2, #28
 801bcac:	6013      	str	r3, [r2, #0]
 801bcae:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 801bcb2:	3a1c      	subs	r2, #28
 801bcb4:	460b      	mov	r3, r1
 801bcb6:	021b      	lsls	r3, r3, #8
 801bcb8:	1a5b      	subs	r3, r3, r1
 801bcba:	4413      	add	r3, r2
 801bcbc:	f507 52a3 	add.w	r2, r7, #5216	@ 0x1460
 801bcc0:	f102 0204 	add.w	r2, r2, #4
 801bcc4:	6811      	ldr	r1, [r2, #0]
 801bcc6:	4618      	mov	r0, r3
 801bcc8:	f003 f9ff 	bl	801f0ca <strcpy>
		}
		line = strstr(data, "\r\n");
 801bccc:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801bcd0:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 801bcd4:	49a3      	ldr	r1, [pc, #652]	@ (801bf64 <ProcessData+0x584>)
 801bcd6:	6818      	ldr	r0, [r3, #0]
 801bcd8:	f003 f95a 	bl	801ef90 <strstr>
 801bcdc:	f507 53a4 	add.w	r3, r7, #5248	@ 0x1480
 801bce0:	6018      	str	r0, [r3, #0]
		if (line == NULL) {
 801bce2:	f507 53a4 	add.w	r3, r7, #5248	@ 0x1480
 801bce6:	681b      	ldr	r3, [r3, #0]
 801bce8:	2b00      	cmp	r3, #0
 801bcea:	d12f      	bne.n	801bd4c <ProcessData+0x36c>
			printc(MinDelay, "last line %s\n", data);
 801bcec:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801bcf0:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 801bcf4:	681a      	ldr	r2, [r3, #0]
 801bcf6:	499c      	ldr	r1, [pc, #624]	@ (801bf68 <ProcessData+0x588>)
 801bcf8:	200a      	movs	r0, #10
 801bcfa:	f7e5 fe8d 	bl	8001a18 <printc>
			if (tmplen >= L86_BUFFER_SIZE / 2) {
 801bcfe:	f507 53a4 	add.w	r3, r7, #5248	@ 0x1480
 801bd02:	f103 0304 	add.w	r3, r3, #4
 801bd06:	681b      	ldr	r3, [r3, #0]
 801bd08:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 801bd0c:	da1e      	bge.n	801bd4c <ProcessData+0x36c>

			} else {
				sprintf(tmpBuffer, "%s", data);
 801bd0e:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801bd12:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 801bd16:	681a      	ldr	r2, [r3, #0]
 801bd18:	4994      	ldr	r1, [pc, #592]	@ (801bf6c <ProcessData+0x58c>)
 801bd1a:	4895      	ldr	r0, [pc, #596]	@ (801bf70 <ProcessData+0x590>)
 801bd1c:	f002 ff1c 	bl	801eb58 <siprintf>
				hasHalfData = true;
 801bd20:	4b94      	ldr	r3, [pc, #592]	@ (801bf74 <ProcessData+0x594>)
 801bd22:	2201      	movs	r2, #1
 801bd24:	701a      	strb	r2, [r3, #0]
				tmplen += strlen(data);
 801bd26:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801bd2a:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 801bd2e:	6818      	ldr	r0, [r3, #0]
 801bd30:	f7e4 fab8 	bl	80002a4 <strlen>
 801bd34:	4602      	mov	r2, r0
 801bd36:	f507 53a4 	add.w	r3, r7, #5248	@ 0x1480
 801bd3a:	f103 0304 	add.w	r3, r3, #4
 801bd3e:	681b      	ldr	r3, [r3, #0]
 801bd40:	4413      	add	r3, r2
 801bd42:	f507 52a4 	add.w	r2, r7, #5248	@ 0x1480
 801bd46:	f102 0204 	add.w	r2, r2, #4
 801bd4a:	6013      	str	r3, [r2, #0]
 801bd4c:	f8d7 d010 	ldr.w	sp, [r7, #16]
	while (line != NULL) {
 801bd50:	f507 53a4 	add.w	r3, r7, #5248	@ 0x1480
 801bd54:	681b      	ldr	r3, [r3, #0]
 801bd56:	2b00      	cmp	r3, #0
 801bd58:	f47f ae79 	bne.w	801ba4e <ProcessData+0x6e>
			}

		}
	}
	printc(MinDelay, "Length %d \n", tmplen);
 801bd5c:	f507 53a4 	add.w	r3, r7, #5248	@ 0x1480
 801bd60:	f103 0304 	add.w	r3, r3, #4
 801bd64:	681a      	ldr	r2, [r3, #0]
 801bd66:	4984      	ldr	r1, [pc, #528]	@ (801bf78 <ProcessData+0x598>)
 801bd68:	200a      	movs	r0, #10
 801bd6a:	f7e5 fe55 	bl	8001a18 <printc>
	if (tmplen < L86_BUFFER_SIZE / 2) {
 801bd6e:	f507 53a4 	add.w	r3, r7, #5248	@ 0x1480
 801bd72:	f103 0304 	add.w	r3, r3, #4
 801bd76:	681b      	ldr	r3, [r3, #0]
 801bd78:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 801bd7c:	da09      	bge.n	801bd92 <ProcessData+0x3b2>
		printc(MinDelay, "exit because Not able to parce all data  %d \n",
 801bd7e:	f507 53a4 	add.w	r3, r7, #5248	@ 0x1480
 801bd82:	f103 0304 	add.w	r3, r3, #4
 801bd86:	681a      	ldr	r2, [r3, #0]
 801bd88:	497c      	ldr	r1, [pc, #496]	@ (801bf7c <ProcessData+0x59c>)
 801bd8a:	200a      	movs	r0, #10
 801bd8c:	f7e5 fe44 	bl	8001a18 <printc>
				tmplen);
		return;
 801bd90:	e3a5      	b.n	801c4de <ProcessData+0xafe>
	}
	for (int x = 0; x < i; x++) {
 801bd92:	2300      	movs	r3, #0
 801bd94:	f507 52a3 	add.w	r2, r7, #5216	@ 0x1460
 801bd98:	f102 0218 	add.w	r2, r2, #24
 801bd9c:	6013      	str	r3, [r2, #0]
 801bd9e:	e38f      	b.n	801c4c0 <ProcessData+0xae0>
		char *values[20] = { };
 801bda0:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801bda4:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 801bda8:	4618      	mov	r0, r3
 801bdaa:	2350      	movs	r3, #80	@ 0x50
 801bdac:	461a      	mov	r2, r3
 801bdae:	2100      	movs	r1, #0
 801bdb0:	f003 f82e 	bl	801ee10 <memset>
		uint8_t size = 0;
 801bdb4:	2300      	movs	r3, #0
 801bdb6:	f507 52a3 	add.w	r2, r7, #5216	@ 0x1460
 801bdba:	f102 0217 	add.w	r2, r2, #23
 801bdbe:	7013      	strb	r3, [r2, #0]
		if (strncmp(lineBuff[x], "$GNRMC", 6) == 0) {
 801bdc0:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 801bdc4:	3a1c      	subs	r2, #28
 801bdc6:	f507 53a3 	add.w	r3, r7, #5216	@ 0x1460
 801bdca:	f103 0318 	add.w	r3, r3, #24
 801bdce:	6819      	ldr	r1, [r3, #0]
 801bdd0:	460b      	mov	r3, r1
 801bdd2:	021b      	lsls	r3, r3, #8
 801bdd4:	1a5b      	subs	r3, r3, r1
 801bdd6:	4413      	add	r3, r2
 801bdd8:	2206      	movs	r2, #6
 801bdda:	4969      	ldr	r1, [pc, #420]	@ (801bf80 <ProcessData+0x5a0>)
 801bddc:	4618      	mov	r0, r3
 801bdde:	f003 f856 	bl	801ee8e <strncmp>
 801bde2:	4603      	mov	r3, r0
 801bde4:	2b00      	cmp	r3, #0
 801bde6:	f040 822f 	bne.w	801c248 <ProcessData+0x868>
			if (GPSDataTmp != NULL) {
 801bdea:	4b66      	ldr	r3, [pc, #408]	@ (801bf84 <ProcessData+0x5a4>)
 801bdec:	681b      	ldr	r3, [r3, #0]
 801bdee:	2b00      	cmp	r3, #0
 801bdf0:	d00c      	beq.n	801be0c <ProcessData+0x42c>
				GPSDataCallback(GPSDataTmp);
 801bdf2:	4b64      	ldr	r3, [pc, #400]	@ (801bf84 <ProcessData+0x5a4>)
 801bdf4:	681b      	ldr	r3, [r3, #0]
 801bdf6:	4618      	mov	r0, r3
 801bdf8:	f7e7 f864 	bl	8002ec4 <GPSDataCallback>
				free(GPSDataTmp);
 801bdfc:	4b61      	ldr	r3, [pc, #388]	@ (801bf84 <ProcessData+0x5a4>)
 801bdfe:	681b      	ldr	r3, [r3, #0]
 801be00:	4618      	mov	r0, r3
 801be02:	f000 ff9d 	bl	801cd40 <free>
				GPSDataTmp = NULL;
 801be06:	4b5f      	ldr	r3, [pc, #380]	@ (801bf84 <ProcessData+0x5a4>)
 801be08:	2200      	movs	r2, #0
 801be0a:	601a      	str	r2, [r3, #0]
			}
			GPSDataTmp = malloc(sizeof(GPSData));
 801be0c:	2040      	movs	r0, #64	@ 0x40
 801be0e:	f000 ff8f 	bl	801cd30 <malloc>
 801be12:	4603      	mov	r3, r0
 801be14:	461a      	mov	r2, r3
 801be16:	4b5b      	ldr	r3, [pc, #364]	@ (801bf84 <ProcessData+0x5a4>)
 801be18:	601a      	str	r2, [r3, #0]
			if (!init_GPSData(GPSDataTmp)) {
 801be1a:	4b5a      	ldr	r3, [pc, #360]	@ (801bf84 <ProcessData+0x5a4>)
 801be1c:	681b      	ldr	r3, [r3, #0]
 801be1e:	4618      	mov	r0, r3
 801be20:	f7ff fd9a 	bl	801b958 <init_GPSData>
 801be24:	4603      	mov	r3, r0
 801be26:	f083 0301 	eor.w	r3, r3, #1
 801be2a:	b2db      	uxtb	r3, r3
 801be2c:	2b00      	cmp	r3, #0
 801be2e:	f040 8355 	bne.w	801c4dc <ProcessData+0xafc>
				return;
			}

			printc(MinDelay, "$GNRMC is %s\n", lineBuff[x]);
 801be32:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 801be36:	3a1c      	subs	r2, #28
 801be38:	f507 53a3 	add.w	r3, r7, #5216	@ 0x1460
 801be3c:	f103 0318 	add.w	r3, r3, #24
 801be40:	6819      	ldr	r1, [r3, #0]
 801be42:	460b      	mov	r3, r1
 801be44:	021b      	lsls	r3, r3, #8
 801be46:	1a5b      	subs	r3, r3, r1
 801be48:	4413      	add	r3, r2
 801be4a:	461a      	mov	r2, r3
 801be4c:	494e      	ldr	r1, [pc, #312]	@ (801bf88 <ProcessData+0x5a8>)
 801be4e:	200a      	movs	r0, #10
 801be50:	f7e5 fde2 	bl	8001a18 <printc>
			int len = splitWithComma(lineBuff[x], values);
 801be54:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 801be58:	3a1c      	subs	r2, #28
 801be5a:	f507 53a3 	add.w	r3, r7, #5216	@ 0x1460
 801be5e:	f103 0318 	add.w	r3, r3, #24
 801be62:	6819      	ldr	r1, [r3, #0]
 801be64:	460b      	mov	r3, r1
 801be66:	021b      	lsls	r3, r3, #8
 801be68:	1a5b      	subs	r3, r3, r1
 801be6a:	441a      	add	r2, r3
 801be6c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801be70:	3b0c      	subs	r3, #12
 801be72:	4619      	mov	r1, r3
 801be74:	4610      	mov	r0, r2
 801be76:	f7ff fcff 	bl	801b878 <splitWithComma>
 801be7a:	f507 53a3 	add.w	r3, r7, #5216	@ 0x1460
 801be7e:	f103 0310 	add.w	r3, r3, #16
 801be82:	6018      	str	r0, [r3, #0]

			if (values[1] == NULL)
 801be84:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801be88:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 801be8c:	685b      	ldr	r3, [r3, #4]
 801be8e:	2b00      	cmp	r3, #0
 801be90:	f000 82f6 	beq.w	801c480 <ProcessData+0xaa0>
				continue;

			if (values[2] == NULL)
 801be94:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801be98:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 801be9c:	689b      	ldr	r3, [r3, #8]
 801be9e:	2b00      	cmp	r3, #0
 801bea0:	f000 82f0 	beq.w	801c484 <ProcessData+0xaa4>
				continue;
			if (values[2][0] == 'A') {
 801bea4:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801bea8:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 801beac:	689b      	ldr	r3, [r3, #8]
 801beae:	781b      	ldrb	r3, [r3, #0]
 801beb0:	2b41      	cmp	r3, #65	@ 0x41
 801beb2:	d175      	bne.n	801bfa0 <ProcessData+0x5c0>
				GPSDataTmp->gps_fix = true;
 801beb4:	4b33      	ldr	r3, [pc, #204]	@ (801bf84 <ProcessData+0x5a4>)
 801beb6:	681b      	ldr	r3, [r3, #0]
 801beb8:	2201      	movs	r2, #1
 801beba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
				if (!isTimeSet) {
 801bebe:	4b33      	ldr	r3, [pc, #204]	@ (801bf8c <ProcessData+0x5ac>)
 801bec0:	781b      	ldrb	r3, [r3, #0]
 801bec2:	f083 0301 	eor.w	r3, r3, #1
 801bec6:	b2db      	uxtb	r3, r3
 801bec8:	2b00      	cmp	r3, #0
 801beca:	d06e      	beq.n	801bfaa <ProcessData+0x5ca>
					strncpy(hourStr, values[1], 2);
 801becc:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801bed0:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 801bed4:	685b      	ldr	r3, [r3, #4]
 801bed6:	2202      	movs	r2, #2
 801bed8:	4619      	mov	r1, r3
 801beda:	482d      	ldr	r0, [pc, #180]	@ (801bf90 <ProcessData+0x5b0>)
 801bedc:	f002 ffe9 	bl	801eeb2 <strncpy>
					hourStr[2] = '\0';
 801bee0:	4b2b      	ldr	r3, [pc, #172]	@ (801bf90 <ProcessData+0x5b0>)
 801bee2:	2200      	movs	r2, #0
 801bee4:	709a      	strb	r2, [r3, #2]
					strncpy(minuteStr, values[1] + 2, 2);
 801bee6:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801beea:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 801beee:	685b      	ldr	r3, [r3, #4]
 801bef0:	3302      	adds	r3, #2
 801bef2:	2202      	movs	r2, #2
 801bef4:	4619      	mov	r1, r3
 801bef6:	4827      	ldr	r0, [pc, #156]	@ (801bf94 <ProcessData+0x5b4>)
 801bef8:	f002 ffdb 	bl	801eeb2 <strncpy>
					minuteStr[2] = '\0';
 801befc:	4b25      	ldr	r3, [pc, #148]	@ (801bf94 <ProcessData+0x5b4>)
 801befe:	2200      	movs	r2, #0
 801bf00:	709a      	strb	r2, [r3, #2]
					strncpy(secondStr, values[1] + 4, 2);
 801bf02:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801bf06:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 801bf0a:	685b      	ldr	r3, [r3, #4]
 801bf0c:	3304      	adds	r3, #4
 801bf0e:	2202      	movs	r2, #2
 801bf10:	4619      	mov	r1, r3
 801bf12:	4821      	ldr	r0, [pc, #132]	@ (801bf98 <ProcessData+0x5b8>)
 801bf14:	f002 ffcd 	bl	801eeb2 <strncpy>
					secondStr[2] = '\0';
 801bf18:	4b1f      	ldr	r3, [pc, #124]	@ (801bf98 <ProcessData+0x5b8>)
 801bf1a:	2200      	movs	r2, #0
 801bf1c:	709a      	strb	r2, [r3, #2]
					if (setTime(atoi(hourStr), atoi(minuteStr),
 801bf1e:	481c      	ldr	r0, [pc, #112]	@ (801bf90 <ProcessData+0x5b0>)
 801bf20:	f000 ff01 	bl	801cd26 <atoi>
 801bf24:	4604      	mov	r4, r0
 801bf26:	481b      	ldr	r0, [pc, #108]	@ (801bf94 <ProcessData+0x5b4>)
 801bf28:	f000 fefd 	bl	801cd26 <atoi>
 801bf2c:	4605      	mov	r5, r0
 801bf2e:	481a      	ldr	r0, [pc, #104]	@ (801bf98 <ProcessData+0x5b8>)
 801bf30:	f000 fef9 	bl	801cd26 <atoi>
 801bf34:	4603      	mov	r3, r0
 801bf36:	461a      	mov	r2, r3
 801bf38:	4629      	mov	r1, r5
 801bf3a:	4620      	mov	r0, r4
 801bf3c:	f7fe ff7e 	bl	801ae3c <setTime>
 801bf40:	4603      	mov	r3, r0
 801bf42:	2b00      	cmp	r3, #0
 801bf44:	d002      	beq.n	801bf4c <ProcessData+0x56c>
							atoi(secondStr)))
						isTimeSet = true;
 801bf46:	4b11      	ldr	r3, [pc, #68]	@ (801bf8c <ProcessData+0x5ac>)
 801bf48:	2201      	movs	r2, #1
 801bf4a:	701a      	strb	r2, [r3, #0]
					printc(MinDelay, "$UTC Time %s \n", values[1]);
 801bf4c:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801bf50:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 801bf54:	685b      	ldr	r3, [r3, #4]
 801bf56:	461a      	mov	r2, r3
 801bf58:	4910      	ldr	r1, [pc, #64]	@ (801bf9c <ProcessData+0x5bc>)
 801bf5a:	200a      	movs	r0, #10
 801bf5c:	f7e5 fd5c 	bl	8001a18 <printc>
 801bf60:	e023      	b.n	801bfaa <ProcessData+0x5ca>
 801bf62:	bf00      	nop
 801bf64:	08023e34 	.word	0x08023e34
 801bf68:	08023e68 	.word	0x08023e68
 801bf6c:	08023e78 	.word	0x08023e78
 801bf70:	20015238 	.word	0x20015238
 801bf74:	200154f4 	.word	0x200154f4
 801bf78:	08023e7c 	.word	0x08023e7c
 801bf7c:	08023e88 	.word	0x08023e88
 801bf80:	08023eb8 	.word	0x08023eb8
 801bf84:	200154f8 	.word	0x200154f8
 801bf88:	08023ec0 	.word	0x08023ec0
 801bf8c:	200154fc 	.word	0x200154fc
 801bf90:	20015500 	.word	0x20015500
 801bf94:	20015504 	.word	0x20015504
 801bf98:	20015508 	.word	0x20015508
 801bf9c:	08023ed0 	.word	0x08023ed0
				}
			} else {
				GPSDataTmp->gps_fix = false;
 801bfa0:	4b9d      	ldr	r3, [pc, #628]	@ (801c218 <ProcessData+0x838>)
 801bfa2:	681b      	ldr	r3, [r3, #0]
 801bfa4:	2200      	movs	r2, #0
 801bfa6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
			}
			if (values[3] == NULL)
 801bfaa:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801bfae:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 801bfb2:	68db      	ldr	r3, [r3, #12]
 801bfb4:	2b00      	cmp	r3, #0
 801bfb6:	f000 8267 	beq.w	801c488 <ProcessData+0xaa8>
				continue;
			GPSDataTmp->latitude = convertToDegrees(atof(values[3]));
 801bfba:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801bfbe:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 801bfc2:	68db      	ldr	r3, [r3, #12]
 801bfc4:	4618      	mov	r0, r3
 801bfc6:	f000 feab 	bl	801cd20 <atof>
 801bfca:	eeb0 7a40 	vmov.f32	s14, s0
 801bfce:	eef0 7a60 	vmov.f32	s15, s1
 801bfd2:	4b91      	ldr	r3, [pc, #580]	@ (801c218 <ProcessData+0x838>)
 801bfd4:	681c      	ldr	r4, [r3, #0]
 801bfd6:	eeb0 0a47 	vmov.f32	s0, s14
 801bfda:	eef0 0a67 	vmov.f32	s1, s15
 801bfde:	f7ff fc73 	bl	801b8c8 <convertToDegrees>
 801bfe2:	eeb0 7a40 	vmov.f32	s14, s0
 801bfe6:	eef0 7a60 	vmov.f32	s15, s1
 801bfea:	ed84 7b00 	vstr	d7, [r4]
			printc(MinDelay, "$Latitude %s \n", values[3]);
 801bfee:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801bff2:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 801bff6:	68db      	ldr	r3, [r3, #12]
 801bff8:	461a      	mov	r2, r3
 801bffa:	4988      	ldr	r1, [pc, #544]	@ (801c21c <ProcessData+0x83c>)
 801bffc:	200a      	movs	r0, #10
 801bffe:	f7e5 fd0b 	bl	8001a18 <printc>
			GPSDataTmp->lat_dir = *values[4];
 801c002:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801c006:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 801c00a:	691a      	ldr	r2, [r3, #16]
 801c00c:	4b82      	ldr	r3, [pc, #520]	@ (801c218 <ProcessData+0x838>)
 801c00e:	681b      	ldr	r3, [r3, #0]
 801c010:	7812      	ldrb	r2, [r2, #0]
 801c012:	721a      	strb	r2, [r3, #8]
			printc(MinDelay, "$lat_Dir%s \n", values[4]);
 801c014:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801c018:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 801c01c:	691b      	ldr	r3, [r3, #16]
 801c01e:	461a      	mov	r2, r3
 801c020:	497f      	ldr	r1, [pc, #508]	@ (801c220 <ProcessData+0x840>)
 801c022:	200a      	movs	r0, #10
 801c024:	f7e5 fcf8 	bl	8001a18 <printc>
			GPSDataTmp->longitude = convertToDegrees(atof(values[5]));
 801c028:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801c02c:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 801c030:	695b      	ldr	r3, [r3, #20]
 801c032:	4618      	mov	r0, r3
 801c034:	f000 fe74 	bl	801cd20 <atof>
 801c038:	eeb0 7a40 	vmov.f32	s14, s0
 801c03c:	eef0 7a60 	vmov.f32	s15, s1
 801c040:	4b75      	ldr	r3, [pc, #468]	@ (801c218 <ProcessData+0x838>)
 801c042:	681c      	ldr	r4, [r3, #0]
 801c044:	eeb0 0a47 	vmov.f32	s0, s14
 801c048:	eef0 0a67 	vmov.f32	s1, s15
 801c04c:	f7ff fc3c 	bl	801b8c8 <convertToDegrees>
 801c050:	eeb0 7a40 	vmov.f32	s14, s0
 801c054:	eef0 7a60 	vmov.f32	s15, s1
 801c058:	ed84 7b04 	vstr	d7, [r4, #16]
			printc(MinDelay, "$Longitude %s \n", values[5]);
 801c05c:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801c060:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 801c064:	695b      	ldr	r3, [r3, #20]
 801c066:	461a      	mov	r2, r3
 801c068:	496e      	ldr	r1, [pc, #440]	@ (801c224 <ProcessData+0x844>)
 801c06a:	200a      	movs	r0, #10
 801c06c:	f7e5 fcd4 	bl	8001a18 <printc>
			if (values[6] == NULL)
 801c070:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801c074:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 801c078:	699b      	ldr	r3, [r3, #24]
 801c07a:	2b00      	cmp	r3, #0
 801c07c:	f000 8206 	beq.w	801c48c <ProcessData+0xaac>
				continue;
			GPSDataTmp->lon_dir = *values[6];
 801c080:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801c084:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 801c088:	699a      	ldr	r2, [r3, #24]
 801c08a:	4b63      	ldr	r3, [pc, #396]	@ (801c218 <ProcessData+0x838>)
 801c08c:	681b      	ldr	r3, [r3, #0]
 801c08e:	7812      	ldrb	r2, [r2, #0]
 801c090:	761a      	strb	r2, [r3, #24]
			printc(MinDelay, "$log_Dir %s \n", values[6]);
 801c092:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801c096:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 801c09a:	699b      	ldr	r3, [r3, #24]
 801c09c:	461a      	mov	r2, r3
 801c09e:	4962      	ldr	r1, [pc, #392]	@ (801c228 <ProcessData+0x848>)
 801c0a0:	200a      	movs	r0, #10
 801c0a2:	f7e5 fcb9 	bl	8001a18 <printc>
			if (values[7] == NULL)
 801c0a6:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801c0aa:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 801c0ae:	69db      	ldr	r3, [r3, #28]
 801c0b0:	2b00      	cmp	r3, #0
 801c0b2:	f000 81ed 	beq.w	801c490 <ProcessData+0xab0>
				continue;
			GPSDataTmp->speed = (atof(values[7])) * 1.852;
 801c0b6:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801c0ba:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 801c0be:	69db      	ldr	r3, [r3, #28]
 801c0c0:	4618      	mov	r0, r3
 801c0c2:	f000 fe2d 	bl	801cd20 <atof>
 801c0c6:	ec51 0b10 	vmov	r0, r1, d0
 801c0ca:	a351      	add	r3, pc, #324	@ (adr r3, 801c210 <ProcessData+0x830>)
 801c0cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c0d0:	f7e4 faac 	bl	800062c <__aeabi_dmul>
 801c0d4:	4602      	mov	r2, r0
 801c0d6:	460b      	mov	r3, r1
 801c0d8:	494f      	ldr	r1, [pc, #316]	@ (801c218 <ProcessData+0x838>)
 801c0da:	680c      	ldr	r4, [r1, #0]
 801c0dc:	4610      	mov	r0, r2
 801c0de:	4619      	mov	r1, r3
 801c0e0:	f7e4 fd9c 	bl	8000c1c <__aeabi_d2f>
 801c0e4:	4603      	mov	r3, r0
 801c0e6:	61e3      	str	r3, [r4, #28]
			printc(MinDelay, "$Speed %s \n", values[7]);
 801c0e8:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801c0ec:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 801c0f0:	69db      	ldr	r3, [r3, #28]
 801c0f2:	461a      	mov	r2, r3
 801c0f4:	494d      	ldr	r1, [pc, #308]	@ (801c22c <ProcessData+0x84c>)
 801c0f6:	200a      	movs	r0, #10
 801c0f8:	f7e5 fc8e 	bl	8001a18 <printc>
			if (values[8] == NULL)
 801c0fc:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801c100:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 801c104:	6a1b      	ldr	r3, [r3, #32]
 801c106:	2b00      	cmp	r3, #0
 801c108:	f000 81c4 	beq.w	801c494 <ProcessData+0xab4>
				continue;
			GPSDataTmp->heading = (int) atof(values[8]);
 801c10c:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801c110:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 801c114:	6a1b      	ldr	r3, [r3, #32]
 801c116:	4618      	mov	r0, r3
 801c118:	f000 fe02 	bl	801cd20 <atof>
 801c11c:	ec51 0b10 	vmov	r0, r1, d0
 801c120:	4b3d      	ldr	r3, [pc, #244]	@ (801c218 <ProcessData+0x838>)
 801c122:	681c      	ldr	r4, [r3, #0]
 801c124:	f7e4 fd32 	bl	8000b8c <__aeabi_d2iz>
 801c128:	4603      	mov	r3, r0
 801c12a:	6223      	str	r3, [r4, #32]
			printc(MinDelay, "Heading %s\n", values[8]);
 801c12c:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801c130:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 801c134:	6a1b      	ldr	r3, [r3, #32]
 801c136:	461a      	mov	r2, r3
 801c138:	493d      	ldr	r1, [pc, #244]	@ (801c230 <ProcessData+0x850>)
 801c13a:	200a      	movs	r0, #10
 801c13c:	f7e5 fc6c 	bl	8001a18 <printc>
			if (values[9] == NULL)
 801c140:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801c144:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 801c148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c14a:	2b00      	cmp	r3, #0
 801c14c:	f000 81a4 	beq.w	801c498 <ProcessData+0xab8>
				continue;
//				  setting up date
			if (!isDateSet) {
 801c150:	4b38      	ldr	r3, [pc, #224]	@ (801c234 <ProcessData+0x854>)
 801c152:	781b      	ldrb	r3, [r3, #0]
 801c154:	f083 0301 	eor.w	r3, r3, #1
 801c158:	b2db      	uxtb	r3, r3
 801c15a:	2b00      	cmp	r3, #0
 801c15c:	f000 81a5 	beq.w	801c4aa <ProcessData+0xaca>
				clearBuffer(hourStr, sizeof(hourStr));
 801c160:	2103      	movs	r1, #3
 801c162:	4835      	ldr	r0, [pc, #212]	@ (801c238 <ProcessData+0x858>)
 801c164:	f7e5 fcb0 	bl	8001ac8 <clearBuffer>
				clearBuffer(minuteStr, sizeof(minuteStr));
 801c168:	2103      	movs	r1, #3
 801c16a:	4834      	ldr	r0, [pc, #208]	@ (801c23c <ProcessData+0x85c>)
 801c16c:	f7e5 fcac 	bl	8001ac8 <clearBuffer>
				clearBuffer(secondStr, sizeof(secondStr));
 801c170:	2103      	movs	r1, #3
 801c172:	4833      	ldr	r0, [pc, #204]	@ (801c240 <ProcessData+0x860>)
 801c174:	f7e5 fca8 	bl	8001ac8 <clearBuffer>
				strncpy(hourStr, values[9], 2);
 801c178:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801c17c:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 801c180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c182:	2202      	movs	r2, #2
 801c184:	4619      	mov	r1, r3
 801c186:	482c      	ldr	r0, [pc, #176]	@ (801c238 <ProcessData+0x858>)
 801c188:	f002 fe93 	bl	801eeb2 <strncpy>
				hourStr[2] = '\0';
 801c18c:	4b2a      	ldr	r3, [pc, #168]	@ (801c238 <ProcessData+0x858>)
 801c18e:	2200      	movs	r2, #0
 801c190:	709a      	strb	r2, [r3, #2]
				strncpy(minuteStr, values[9] + 2, 2);
 801c192:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801c196:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 801c19a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c19c:	3302      	adds	r3, #2
 801c19e:	2202      	movs	r2, #2
 801c1a0:	4619      	mov	r1, r3
 801c1a2:	4826      	ldr	r0, [pc, #152]	@ (801c23c <ProcessData+0x85c>)
 801c1a4:	f002 fe85 	bl	801eeb2 <strncpy>
				minuteStr[2] = '\0';
 801c1a8:	4b24      	ldr	r3, [pc, #144]	@ (801c23c <ProcessData+0x85c>)
 801c1aa:	2200      	movs	r2, #0
 801c1ac:	709a      	strb	r2, [r3, #2]
				strncpy(secondStr, values[9] + 4, 2);
 801c1ae:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801c1b2:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 801c1b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c1b8:	3304      	adds	r3, #4
 801c1ba:	2202      	movs	r2, #2
 801c1bc:	4619      	mov	r1, r3
 801c1be:	4820      	ldr	r0, [pc, #128]	@ (801c240 <ProcessData+0x860>)
 801c1c0:	f002 fe77 	bl	801eeb2 <strncpy>
				secondStr[2] = '\0';
 801c1c4:	4b1e      	ldr	r3, [pc, #120]	@ (801c240 <ProcessData+0x860>)
 801c1c6:	2200      	movs	r2, #0
 801c1c8:	709a      	strb	r2, [r3, #2]
				if (setDate(atoi(hourStr), atoi(minuteStr), atoi(secondStr)))
 801c1ca:	481b      	ldr	r0, [pc, #108]	@ (801c238 <ProcessData+0x858>)
 801c1cc:	f000 fdab 	bl	801cd26 <atoi>
 801c1d0:	4604      	mov	r4, r0
 801c1d2:	481a      	ldr	r0, [pc, #104]	@ (801c23c <ProcessData+0x85c>)
 801c1d4:	f000 fda7 	bl	801cd26 <atoi>
 801c1d8:	4605      	mov	r5, r0
 801c1da:	4819      	ldr	r0, [pc, #100]	@ (801c240 <ProcessData+0x860>)
 801c1dc:	f000 fda3 	bl	801cd26 <atoi>
 801c1e0:	4603      	mov	r3, r0
 801c1e2:	461a      	mov	r2, r3
 801c1e4:	4629      	mov	r1, r5
 801c1e6:	4620      	mov	r0, r4
 801c1e8:	f7fe fe54 	bl	801ae94 <setDate>
 801c1ec:	4603      	mov	r3, r0
 801c1ee:	2b00      	cmp	r3, #0
 801c1f0:	d002      	beq.n	801c1f8 <ProcessData+0x818>
					isDateSet = true;
 801c1f2:	4b10      	ldr	r3, [pc, #64]	@ (801c234 <ProcessData+0x854>)
 801c1f4:	2201      	movs	r2, #1
 801c1f6:	701a      	strb	r2, [r3, #0]
				printc(MinDelay, "$Date %s \n", values[9]);
 801c1f8:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801c1fc:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 801c200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c202:	461a      	mov	r2, r3
 801c204:	490f      	ldr	r1, [pc, #60]	@ (801c244 <ProcessData+0x864>)
 801c206:	200a      	movs	r0, #10
 801c208:	f7e5 fc06 	bl	8001a18 <printc>
 801c20c:	e14d      	b.n	801c4aa <ProcessData+0xaca>
 801c20e:	bf00      	nop
 801c210:	c083126f 	.word	0xc083126f
 801c214:	3ffda1ca 	.word	0x3ffda1ca
 801c218:	200154f8 	.word	0x200154f8
 801c21c:	08023ee0 	.word	0x08023ee0
 801c220:	08023ef0 	.word	0x08023ef0
 801c224:	08023f00 	.word	0x08023f00
 801c228:	08023f10 	.word	0x08023f10
 801c22c:	08023f20 	.word	0x08023f20
 801c230:	08023f2c 	.word	0x08023f2c
 801c234:	200154fd 	.word	0x200154fd
 801c238:	20015500 	.word	0x20015500
 801c23c:	20015504 	.word	0x20015504
 801c240:	20015508 	.word	0x20015508
 801c244:	08023f38 	.word	0x08023f38
			}
		} else if (strncmp(lineBuff[x], "$GNGGA", 6) == 0) {
 801c248:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 801c24c:	3a1c      	subs	r2, #28
 801c24e:	f507 53a3 	add.w	r3, r7, #5216	@ 0x1460
 801c252:	f103 0318 	add.w	r3, r3, #24
 801c256:	6819      	ldr	r1, [r3, #0]
 801c258:	460b      	mov	r3, r1
 801c25a:	021b      	lsls	r3, r3, #8
 801c25c:	1a5b      	subs	r3, r3, r1
 801c25e:	4413      	add	r3, r2
 801c260:	2206      	movs	r2, #6
 801c262:	49a2      	ldr	r1, [pc, #648]	@ (801c4ec <ProcessData+0xb0c>)
 801c264:	4618      	mov	r0, r3
 801c266:	f002 fe12 	bl	801ee8e <strncmp>
 801c26a:	4603      	mov	r3, r0
 801c26c:	2b00      	cmp	r3, #0
 801c26e:	d16b      	bne.n	801c348 <ProcessData+0x968>
			if (GPSDataTmp == NULL) {
 801c270:	4b9f      	ldr	r3, [pc, #636]	@ (801c4f0 <ProcessData+0xb10>)
 801c272:	681b      	ldr	r3, [r3, #0]
 801c274:	2b00      	cmp	r3, #0
 801c276:	f000 8111 	beq.w	801c49c <ProcessData+0xabc>
				continue;
			}
			printc(MinDelay, "$GNGGA is %s\n", lineBuff[x]);
 801c27a:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 801c27e:	3a1c      	subs	r2, #28
 801c280:	f507 53a3 	add.w	r3, r7, #5216	@ 0x1460
 801c284:	f103 0318 	add.w	r3, r3, #24
 801c288:	6819      	ldr	r1, [r3, #0]
 801c28a:	460b      	mov	r3, r1
 801c28c:	021b      	lsls	r3, r3, #8
 801c28e:	1a5b      	subs	r3, r3, r1
 801c290:	4413      	add	r3, r2
 801c292:	461a      	mov	r2, r3
 801c294:	4997      	ldr	r1, [pc, #604]	@ (801c4f4 <ProcessData+0xb14>)
 801c296:	200a      	movs	r0, #10
 801c298:	f7e5 fbbe 	bl	8001a18 <printc>
			splitWithComma(lineBuff[x], values);
 801c29c:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 801c2a0:	3a1c      	subs	r2, #28
 801c2a2:	f507 53a3 	add.w	r3, r7, #5216	@ 0x1460
 801c2a6:	f103 0318 	add.w	r3, r3, #24
 801c2aa:	6819      	ldr	r1, [r3, #0]
 801c2ac:	460b      	mov	r3, r1
 801c2ae:	021b      	lsls	r3, r3, #8
 801c2b0:	1a5b      	subs	r3, r3, r1
 801c2b2:	441a      	add	r2, r3
 801c2b4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801c2b8:	3b0c      	subs	r3, #12
 801c2ba:	4619      	mov	r1, r3
 801c2bc:	4610      	mov	r0, r2
 801c2be:	f7ff fadb 	bl	801b878 <splitWithComma>
			if (values[7] == NULL)
 801c2c2:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801c2c6:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 801c2ca:	69db      	ldr	r3, [r3, #28]
 801c2cc:	2b00      	cmp	r3, #0
 801c2ce:	f000 80e7 	beq.w	801c4a0 <ProcessData+0xac0>
				continue;
			GPSDataTmp->sat_num = atoi(values[7]);
 801c2d2:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801c2d6:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 801c2da:	69db      	ldr	r3, [r3, #28]
 801c2dc:	4618      	mov	r0, r3
 801c2de:	f000 fd22 	bl	801cd26 <atoi>
 801c2e2:	4602      	mov	r2, r0
 801c2e4:	4b82      	ldr	r3, [pc, #520]	@ (801c4f0 <ProcessData+0xb10>)
 801c2e6:	681b      	ldr	r3, [r3, #0]
 801c2e8:	b2d2      	uxtb	r2, r2
 801c2ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			printc(MinDelay, "$sat_num%s \n", values[7]);
 801c2ee:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801c2f2:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 801c2f6:	69db      	ldr	r3, [r3, #28]
 801c2f8:	461a      	mov	r2, r3
 801c2fa:	497f      	ldr	r1, [pc, #508]	@ (801c4f8 <ProcessData+0xb18>)
 801c2fc:	200a      	movs	r0, #10
 801c2fe:	f7e5 fb8b 	bl	8001a18 <printc>
			if (values[9] != NULL) {
 801c302:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801c306:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 801c30a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c30c:	2b00      	cmp	r3, #0
 801c30e:	f000 80cc 	beq.w	801c4aa <ProcessData+0xaca>
				GPSDataTmp->alt = atof(values[9]);
 801c312:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801c316:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 801c31a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c31c:	4618      	mov	r0, r3
 801c31e:	f000 fcff 	bl	801cd20 <atof>
 801c322:	ec51 0b10 	vmov	r0, r1, d0
 801c326:	4b72      	ldr	r3, [pc, #456]	@ (801c4f0 <ProcessData+0xb10>)
 801c328:	681c      	ldr	r4, [r3, #0]
 801c32a:	f7e4 fc2f 	bl	8000b8c <__aeabi_d2iz>
 801c32e:	4603      	mov	r3, r0
 801c330:	62a3      	str	r3, [r4, #40]	@ 0x28
				printc(MinDelay, "alt %s \n", values[9]);
 801c332:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801c336:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 801c33a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c33c:	461a      	mov	r2, r3
 801c33e:	496f      	ldr	r1, [pc, #444]	@ (801c4fc <ProcessData+0xb1c>)
 801c340:	200a      	movs	r0, #10
 801c342:	f7e5 fb69 	bl	8001a18 <printc>
 801c346:	e0b0      	b.n	801c4aa <ProcessData+0xaca>
			}
		} else if (strncmp(lineBuff[x], "$GNGSA", 6) == 0) {
 801c348:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 801c34c:	3a1c      	subs	r2, #28
 801c34e:	f507 53a3 	add.w	r3, r7, #5216	@ 0x1460
 801c352:	f103 0318 	add.w	r3, r3, #24
 801c356:	6819      	ldr	r1, [r3, #0]
 801c358:	460b      	mov	r3, r1
 801c35a:	021b      	lsls	r3, r3, #8
 801c35c:	1a5b      	subs	r3, r3, r1
 801c35e:	4413      	add	r3, r2
 801c360:	2206      	movs	r2, #6
 801c362:	4967      	ldr	r1, [pc, #412]	@ (801c500 <ProcessData+0xb20>)
 801c364:	4618      	mov	r0, r3
 801c366:	f002 fd92 	bl	801ee8e <strncmp>
 801c36a:	4603      	mov	r3, r0
 801c36c:	2b00      	cmp	r3, #0
 801c36e:	f040 809c 	bne.w	801c4aa <ProcessData+0xaca>
			if (GPSDataTmp == NULL) {
 801c372:	4b5f      	ldr	r3, [pc, #380]	@ (801c4f0 <ProcessData+0xb10>)
 801c374:	681b      	ldr	r3, [r3, #0]
 801c376:	2b00      	cmp	r3, #0
 801c378:	f000 8094 	beq.w	801c4a4 <ProcessData+0xac4>
				continue;
			}
			printc(MinDelay, "$GNGSA is %s\n", lineBuff[x]);
 801c37c:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 801c380:	3a1c      	subs	r2, #28
 801c382:	f507 53a3 	add.w	r3, r7, #5216	@ 0x1460
 801c386:	f103 0318 	add.w	r3, r3, #24
 801c38a:	6819      	ldr	r1, [r3, #0]
 801c38c:	460b      	mov	r3, r1
 801c38e:	021b      	lsls	r3, r3, #8
 801c390:	1a5b      	subs	r3, r3, r1
 801c392:	4413      	add	r3, r2
 801c394:	461a      	mov	r2, r3
 801c396:	495b      	ldr	r1, [pc, #364]	@ (801c504 <ProcessData+0xb24>)
 801c398:	200a      	movs	r0, #10
 801c39a:	f7e5 fb3d 	bl	8001a18 <printc>
			size = splitWithComma(lineBuff[x], values);
 801c39e:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 801c3a2:	3a1c      	subs	r2, #28
 801c3a4:	f507 53a3 	add.w	r3, r7, #5216	@ 0x1460
 801c3a8:	f103 0318 	add.w	r3, r3, #24
 801c3ac:	6819      	ldr	r1, [r3, #0]
 801c3ae:	460b      	mov	r3, r1
 801c3b0:	021b      	lsls	r3, r3, #8
 801c3b2:	1a5b      	subs	r3, r3, r1
 801c3b4:	441a      	add	r2, r3
 801c3b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801c3ba:	3b0c      	subs	r3, #12
 801c3bc:	4619      	mov	r1, r3
 801c3be:	4610      	mov	r0, r2
 801c3c0:	f7ff fa5a 	bl	801b878 <splitWithComma>
 801c3c4:	4603      	mov	r3, r0
 801c3c6:	f507 52a3 	add.w	r2, r7, #5216	@ 0x1460
 801c3ca:	f102 0217 	add.w	r2, r2, #23
 801c3ce:	7013      	strb	r3, [r2, #0]
			if (size - 4 > 1)
 801c3d0:	f507 53a3 	add.w	r3, r7, #5216	@ 0x1460
 801c3d4:	f103 0317 	add.w	r3, r3, #23
 801c3d8:	781b      	ldrb	r3, [r3, #0]
 801c3da:	2b05      	cmp	r3, #5
 801c3dc:	d964      	bls.n	801c4a8 <ProcessData+0xac8>
				GPSDataTmp->PDOP = atof(values[size - 4]);
 801c3de:	f507 53a3 	add.w	r3, r7, #5216	@ 0x1460
 801c3e2:	f103 0317 	add.w	r3, r3, #23
 801c3e6:	781b      	ldrb	r3, [r3, #0]
 801c3e8:	1f1a      	subs	r2, r3, #4
 801c3ea:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801c3ee:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 801c3f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c3f6:	4618      	mov	r0, r3
 801c3f8:	f000 fc92 	bl	801cd20 <atof>
 801c3fc:	ec51 0b10 	vmov	r0, r1, d0
 801c400:	4b3b      	ldr	r3, [pc, #236]	@ (801c4f0 <ProcessData+0xb10>)
 801c402:	681c      	ldr	r4, [r3, #0]
 801c404:	f7e4 fc0a 	bl	8000c1c <__aeabi_d2f>
 801c408:	4603      	mov	r3, r0
 801c40a:	62e3      	str	r3, [r4, #44]	@ 0x2c
			else
				continue;
			printc(MinDelay, "$PDOP %s \n", values[size - 4]);
 801c40c:	f507 53a3 	add.w	r3, r7, #5216	@ 0x1460
 801c410:	f103 0317 	add.w	r3, r3, #23
 801c414:	781b      	ldrb	r3, [r3, #0]
 801c416:	1f1a      	subs	r2, r3, #4
 801c418:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801c41c:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 801c420:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c424:	461a      	mov	r2, r3
 801c426:	4938      	ldr	r1, [pc, #224]	@ (801c508 <ProcessData+0xb28>)
 801c428:	200a      	movs	r0, #10
 801c42a:	f7e5 faf5 	bl	8001a18 <printc>
			GPSDataTmp->HDOP = atof(values[size - 3]);
 801c42e:	f507 53a3 	add.w	r3, r7, #5216	@ 0x1460
 801c432:	f103 0317 	add.w	r3, r3, #23
 801c436:	781b      	ldrb	r3, [r3, #0]
 801c438:	1eda      	subs	r2, r3, #3
 801c43a:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801c43e:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 801c442:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c446:	4618      	mov	r0, r3
 801c448:	f000 fc6a 	bl	801cd20 <atof>
 801c44c:	ec51 0b10 	vmov	r0, r1, d0
 801c450:	4b27      	ldr	r3, [pc, #156]	@ (801c4f0 <ProcessData+0xb10>)
 801c452:	681c      	ldr	r4, [r3, #0]
 801c454:	f7e4 fbe2 	bl	8000c1c <__aeabi_d2f>
 801c458:	4603      	mov	r3, r0
 801c45a:	6323      	str	r3, [r4, #48]	@ 0x30
			printc(MinDelay, "$HDOP %s \n", values[size - 3]);
 801c45c:	f507 53a3 	add.w	r3, r7, #5216	@ 0x1460
 801c460:	f103 0317 	add.w	r3, r3, #23
 801c464:	781b      	ldrb	r3, [r3, #0]
 801c466:	1eda      	subs	r2, r3, #3
 801c468:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801c46c:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 801c470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c474:	461a      	mov	r2, r3
 801c476:	4925      	ldr	r1, [pc, #148]	@ (801c50c <ProcessData+0xb2c>)
 801c478:	200a      	movs	r0, #10
 801c47a:	f7e5 facd 	bl	8001a18 <printc>
 801c47e:	e014      	b.n	801c4aa <ProcessData+0xaca>
				continue;
 801c480:	bf00      	nop
 801c482:	e012      	b.n	801c4aa <ProcessData+0xaca>
				continue;
 801c484:	bf00      	nop
 801c486:	e010      	b.n	801c4aa <ProcessData+0xaca>
				continue;
 801c488:	bf00      	nop
 801c48a:	e00e      	b.n	801c4aa <ProcessData+0xaca>
				continue;
 801c48c:	bf00      	nop
 801c48e:	e00c      	b.n	801c4aa <ProcessData+0xaca>
				continue;
 801c490:	bf00      	nop
 801c492:	e00a      	b.n	801c4aa <ProcessData+0xaca>
				continue;
 801c494:	bf00      	nop
 801c496:	e008      	b.n	801c4aa <ProcessData+0xaca>
				continue;
 801c498:	bf00      	nop
 801c49a:	e006      	b.n	801c4aa <ProcessData+0xaca>
				continue;
 801c49c:	bf00      	nop
 801c49e:	e004      	b.n	801c4aa <ProcessData+0xaca>
				continue;
 801c4a0:	bf00      	nop
 801c4a2:	e002      	b.n	801c4aa <ProcessData+0xaca>
				continue;
 801c4a4:	bf00      	nop
 801c4a6:	e000      	b.n	801c4aa <ProcessData+0xaca>
				continue;
 801c4a8:	bf00      	nop
	for (int x = 0; x < i; x++) {
 801c4aa:	f507 53a3 	add.w	r3, r7, #5216	@ 0x1460
 801c4ae:	f103 0318 	add.w	r3, r3, #24
 801c4b2:	681b      	ldr	r3, [r3, #0]
 801c4b4:	3301      	adds	r3, #1
 801c4b6:	f507 52a3 	add.w	r2, r7, #5216	@ 0x1460
 801c4ba:	f102 0218 	add.w	r2, r2, #24
 801c4be:	6013      	str	r3, [r2, #0]
 801c4c0:	f507 53a3 	add.w	r3, r7, #5216	@ 0x1460
 801c4c4:	f103 0318 	add.w	r3, r3, #24
 801c4c8:	681a      	ldr	r2, [r3, #0]
 801c4ca:	f507 53a3 	add.w	r3, r7, #5216	@ 0x1460
 801c4ce:	f103 031c 	add.w	r3, r3, #28
 801c4d2:	681b      	ldr	r3, [r3, #0]
 801c4d4:	429a      	cmp	r2, r3
 801c4d6:	f6ff ac63 	blt.w	801bda0 <ProcessData+0x3c0>
 801c4da:	e000      	b.n	801c4de <ProcessData+0xafe>
				return;
 801c4dc:	bf00      	nop
		}
	}

}
 801c4de:	f507 57a4 	add.w	r7, r7, #5248	@ 0x1480
 801c4e2:	370c      	adds	r7, #12
 801c4e4:	46bd      	mov	sp, r7
 801c4e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c4ea:	bf00      	nop
 801c4ec:	08023f44 	.word	0x08023f44
 801c4f0:	200154f8 	.word	0x200154f8
 801c4f4:	08023f4c 	.word	0x08023f4c
 801c4f8:	08023f5c 	.word	0x08023f5c
 801c4fc:	08023f6c 	.word	0x08023f6c
 801c500:	08023f78 	.word	0x08023f78
 801c504:	08023f80 	.word	0x08023f80
 801c508:	08023f90 	.word	0x08023f90
 801c50c:	08023f9c 	.word	0x08023f9c

0801c510 <L86_RxHalfCpltCallback>:
void L86_RxHalfCpltCallback() {
 801c510:	b580      	push	{r7, lr}
 801c512:	af00      	add	r7, sp, #0
//	print(1000, L86Buffer, L86_BUFFER_SIZE/2);
//	printc(1000,"\n********************* First Half data*********************\n");
//	char tmpData[L86_BUFFER_SIZE/2+1]={'\0'};
	memset(tmpData, L86Buffer, L86_BUFFER_SIZE / 2 + 1);
 801c514:	4b0a      	ldr	r3, [pc, #40]	@ (801c540 <L86_RxHalfCpltCallback+0x30>)
 801c516:	f240 12f5 	movw	r2, #501	@ 0x1f5
 801c51a:	4619      	mov	r1, r3
 801c51c:	4809      	ldr	r0, [pc, #36]	@ (801c544 <L86_RxHalfCpltCallback+0x34>)
 801c51e:	f002 fc77 	bl	801ee10 <memset>
	memcpy(tmpData, L86Buffer, L86_BUFFER_SIZE / 2);
 801c522:	4a08      	ldr	r2, [pc, #32]	@ (801c544 <L86_RxHalfCpltCallback+0x34>)
 801c524:	4b06      	ldr	r3, [pc, #24]	@ (801c540 <L86_RxHalfCpltCallback+0x30>)
 801c526:	4610      	mov	r0, r2
 801c528:	4619      	mov	r1, r3
 801c52a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 801c52e:	461a      	mov	r2, r3
 801c530:	f002 fde1 	bl	801f0f6 <memcpy>
	ProcessData(tmpData);
 801c534:	4803      	ldr	r0, [pc, #12]	@ (801c544 <L86_RxHalfCpltCallback+0x34>)
 801c536:	f7ff fa53 	bl	801b9e0 <ProcessData>

}
 801c53a:	bf00      	nop
 801c53c:	bd80      	pop	{r7, pc}
 801c53e:	bf00      	nop
 801c540:	20014e50 	.word	0x20014e50
 801c544:	20015300 	.word	0x20015300

0801c548 <L86_RxCpltCallback>:

void L86_RxCpltCallback() {
 801c548:	b580      	push	{r7, lr}
 801c54a:	af00      	add	r7, sp, #0

//		print(1000, &L86Buffer[L86_BUFFER_SIZE/2], L86_BUFFER_SIZE/2);
//		printc(1000,"\nSecond Half data\n");
//		char tmpData[L86_BUFFER_SIZE/2+1]={'\0'};
	memset(tmpData, L86Buffer, L86_BUFFER_SIZE / 2 + 1);
 801c54c:	4b0a      	ldr	r3, [pc, #40]	@ (801c578 <L86_RxCpltCallback+0x30>)
 801c54e:	f240 12f5 	movw	r2, #501	@ 0x1f5
 801c552:	4619      	mov	r1, r3
 801c554:	4809      	ldr	r0, [pc, #36]	@ (801c57c <L86_RxCpltCallback+0x34>)
 801c556:	f002 fc5b 	bl	801ee10 <memset>
	memcpy(tmpData, &L86Buffer[L86_BUFFER_SIZE / 2], L86_BUFFER_SIZE / 2);
 801c55a:	4a08      	ldr	r2, [pc, #32]	@ (801c57c <L86_RxCpltCallback+0x34>)
 801c55c:	4b06      	ldr	r3, [pc, #24]	@ (801c578 <L86_RxCpltCallback+0x30>)
 801c55e:	4610      	mov	r0, r2
 801c560:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 801c564:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 801c568:	4619      	mov	r1, r3
 801c56a:	f002 fdc4 	bl	801f0f6 <memcpy>
	ProcessData(tmpData);
 801c56e:	4803      	ldr	r0, [pc, #12]	@ (801c57c <L86_RxCpltCallback+0x34>)
 801c570:	f7ff fa36 	bl	801b9e0 <ProcessData>

}
 801c574:	bf00      	nop
 801c576:	bd80      	pop	{r7, pc}
 801c578:	20014e50 	.word	0x20014e50
 801c57c:	20015300 	.word	0x20015300

0801c580 <clear_sms_resp_buff>:
#include "main.h"

char sms_resp_buff[250]; // Adjust buffer size if needed
bool messageStatus = false;

void clear_sms_resp_buff() {
 801c580:	b580      	push	{r7, lr}
 801c582:	af00      	add	r7, sp, #0
	clearBuffer(sms_resp_buff, sizeof(sms_resp_buff));
 801c584:	21fa      	movs	r1, #250	@ 0xfa
 801c586:	4802      	ldr	r0, [pc, #8]	@ (801c590 <clear_sms_resp_buff+0x10>)
 801c588:	f7e5 fa9e 	bl	8001ac8 <clearBuffer>
}
 801c58c:	bf00      	nop
 801c58e:	bd80      	pop	{r7, pc}
 801c590:	2001550c 	.word	0x2001550c

0801c594 <SMS_Init>:

bool SMS_Init() {
 801c594:	b580      	push	{r7, lr}
 801c596:	af00      	add	r7, sp, #0
	clear_sms_resp_buff();
 801c598:	f7ff fff2 	bl	801c580 <clear_sms_resp_buff>
	// 1. SMS Text Mode
//    if (!EC200_Transmit("ATD9857821331;\r\n", sms_resp_buff, 2000)) { return false; }
	if (!EC200_Transmit("AT+CMGF=1\r\n", sms_resp_buff, 2000)) {
 801c59c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 801c5a0:	492e      	ldr	r1, [pc, #184]	@ (801c65c <SMS_Init+0xc8>)
 801c5a2:	482f      	ldr	r0, [pc, #188]	@ (801c660 <SMS_Init+0xcc>)
 801c5a4:	f7e4 fe02 	bl	80011ac <EC200_Transmit>
 801c5a8:	4603      	mov	r3, r0
 801c5aa:	f083 0301 	eor.w	r3, r3, #1
 801c5ae:	b2db      	uxtb	r3, r3
 801c5b0:	2b00      	cmp	r3, #0
 801c5b2:	d001      	beq.n	801c5b8 <SMS_Init+0x24>
		return false;
 801c5b4:	2300      	movs	r3, #0
 801c5b6:	e04e      	b.n	801c656 <SMS_Init+0xc2>
	}
	if (strstr(sms_resp_buff, "OK") == NULL) {
 801c5b8:	492a      	ldr	r1, [pc, #168]	@ (801c664 <SMS_Init+0xd0>)
 801c5ba:	4828      	ldr	r0, [pc, #160]	@ (801c65c <SMS_Init+0xc8>)
 801c5bc:	f002 fce8 	bl	801ef90 <strstr>
 801c5c0:	4603      	mov	r3, r0
 801c5c2:	2b00      	cmp	r3, #0
 801c5c4:	d101      	bne.n	801c5ca <SMS_Init+0x36>
		return false;
 801c5c6:	2300      	movs	r3, #0
 801c5c8:	e045      	b.n	801c656 <SMS_Init+0xc2>
	}
	// 2. SMS Notifications
	if (!EC200_Transmit("AT+CNMI=2,1,0,0,0\r\n", sms_resp_buff, 2000)) {
 801c5ca:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 801c5ce:	4923      	ldr	r1, [pc, #140]	@ (801c65c <SMS_Init+0xc8>)
 801c5d0:	4825      	ldr	r0, [pc, #148]	@ (801c668 <SMS_Init+0xd4>)
 801c5d2:	f7e4 fdeb 	bl	80011ac <EC200_Transmit>
 801c5d6:	4603      	mov	r3, r0
 801c5d8:	f083 0301 	eor.w	r3, r3, #1
 801c5dc:	b2db      	uxtb	r3, r3
 801c5de:	2b00      	cmp	r3, #0
 801c5e0:	d001      	beq.n	801c5e6 <SMS_Init+0x52>
		return false;
 801c5e2:	2300      	movs	r3, #0
 801c5e4:	e037      	b.n	801c656 <SMS_Init+0xc2>
	}
	if (strstr(sms_resp_buff, "OK") == NULL) {
 801c5e6:	491f      	ldr	r1, [pc, #124]	@ (801c664 <SMS_Init+0xd0>)
 801c5e8:	481c      	ldr	r0, [pc, #112]	@ (801c65c <SMS_Init+0xc8>)
 801c5ea:	f002 fcd1 	bl	801ef90 <strstr>
 801c5ee:	4603      	mov	r3, r0
 801c5f0:	2b00      	cmp	r3, #0
 801c5f2:	d101      	bne.n	801c5f8 <SMS_Init+0x64>
		return false;
 801c5f4:	2300      	movs	r3, #0
 801c5f6:	e02e      	b.n	801c656 <SMS_Init+0xc2>
	}

	// 3. RI Pulse for Incoming SMS
	if (!EC200_Transmit("AT+QCFG=\"urc/ri/smsincoming\",\"pulse\",1200,1\r\n",
 801c5f8:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 801c5fc:	4917      	ldr	r1, [pc, #92]	@ (801c65c <SMS_Init+0xc8>)
 801c5fe:	481b      	ldr	r0, [pc, #108]	@ (801c66c <SMS_Init+0xd8>)
 801c600:	f7e4 fdd4 	bl	80011ac <EC200_Transmit>
 801c604:	4603      	mov	r3, r0
 801c606:	f083 0301 	eor.w	r3, r3, #1
 801c60a:	b2db      	uxtb	r3, r3
 801c60c:	2b00      	cmp	r3, #0
 801c60e:	d001      	beq.n	801c614 <SMS_Init+0x80>
			sms_resp_buff, 2000)) {
		return false;
 801c610:	2300      	movs	r3, #0
 801c612:	e020      	b.n	801c656 <SMS_Init+0xc2>
	}
	if (strstr(sms_resp_buff, "OK") == NULL) {
 801c614:	4913      	ldr	r1, [pc, #76]	@ (801c664 <SMS_Init+0xd0>)
 801c616:	4811      	ldr	r0, [pc, #68]	@ (801c65c <SMS_Init+0xc8>)
 801c618:	f002 fcba 	bl	801ef90 <strstr>
 801c61c:	4603      	mov	r3, r0
 801c61e:	2b00      	cmp	r3, #0
 801c620:	d101      	bne.n	801c626 <SMS_Init+0x92>
		return false;
 801c622:	2300      	movs	r3, #0
 801c624:	e017      	b.n	801c656 <SMS_Init+0xc2>
	}

	// 4. Set Character Set to GSM
	if (!EC200_Transmit("AT+CSCS=\"GSM\"\r\n", sms_resp_buff, 2000)) {
 801c626:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 801c62a:	490c      	ldr	r1, [pc, #48]	@ (801c65c <SMS_Init+0xc8>)
 801c62c:	4810      	ldr	r0, [pc, #64]	@ (801c670 <SMS_Init+0xdc>)
 801c62e:	f7e4 fdbd 	bl	80011ac <EC200_Transmit>
 801c632:	4603      	mov	r3, r0
 801c634:	f083 0301 	eor.w	r3, r3, #1
 801c638:	b2db      	uxtb	r3, r3
 801c63a:	2b00      	cmp	r3, #0
 801c63c:	d001      	beq.n	801c642 <SMS_Init+0xae>
		return false;
 801c63e:	2300      	movs	r3, #0
 801c640:	e009      	b.n	801c656 <SMS_Init+0xc2>
	}
	if (strstr(sms_resp_buff, "OK") == NULL) {
 801c642:	4908      	ldr	r1, [pc, #32]	@ (801c664 <SMS_Init+0xd0>)
 801c644:	4805      	ldr	r0, [pc, #20]	@ (801c65c <SMS_Init+0xc8>)
 801c646:	f002 fca3 	bl	801ef90 <strstr>
 801c64a:	4603      	mov	r3, r0
 801c64c:	2b00      	cmp	r3, #0
 801c64e:	d101      	bne.n	801c654 <SMS_Init+0xc0>
		return false;
 801c650:	2300      	movs	r3, #0
 801c652:	e000      	b.n	801c656 <SMS_Init+0xc2>
	}
//    SMS_Send("9467220879","How are you");
	return true;
 801c654:	2301      	movs	r3, #1
}
 801c656:	4618      	mov	r0, r3
 801c658:	bd80      	pop	{r7, pc}
 801c65a:	bf00      	nop
 801c65c:	2001550c 	.word	0x2001550c
 801c660:	08023fa8 	.word	0x08023fa8
 801c664:	08023fb4 	.word	0x08023fb4
 801c668:	08023fb8 	.word	0x08023fb8
 801c66c:	08023fcc 	.word	0x08023fcc
 801c670:	08023ffc 	.word	0x08023ffc

0801c674 <SMS_Read>:
bool SMS_Read(int index, uint8_t *message_buffer) {
 801c674:	b580      	push	{r7, lr}
 801c676:	b090      	sub	sp, #64	@ 0x40
 801c678:	af00      	add	r7, sp, #0
 801c67a:	6078      	str	r0, [r7, #4]
 801c67c:	6039      	str	r1, [r7, #0]
	char command[50] = { };
 801c67e:	2300      	movs	r3, #0
 801c680:	60fb      	str	r3, [r7, #12]
 801c682:	f107 0310 	add.w	r3, r7, #16
 801c686:	222e      	movs	r2, #46	@ 0x2e
 801c688:	2100      	movs	r1, #0
 801c68a:	4618      	mov	r0, r3
 801c68c:	f002 fbc0 	bl	801ee10 <memset>
	sprintf(command, "AT+CMGR=%d\r\n", index);
 801c690:	f107 030c 	add.w	r3, r7, #12
 801c694:	687a      	ldr	r2, [r7, #4]
 801c696:	490e      	ldr	r1, [pc, #56]	@ (801c6d0 <SMS_Read+0x5c>)
 801c698:	4618      	mov	r0, r3
 801c69a:	f002 fa5d 	bl	801eb58 <siprintf>
	if (!EC200_Transmit(command, message_buffer, 2000)) {
 801c69e:	f107 030c 	add.w	r3, r7, #12
 801c6a2:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 801c6a6:	6839      	ldr	r1, [r7, #0]
 801c6a8:	4618      	mov	r0, r3
 801c6aa:	f7e4 fd7f 	bl	80011ac <EC200_Transmit>
 801c6ae:	4603      	mov	r3, r0
 801c6b0:	f083 0301 	eor.w	r3, r3, #1
 801c6b4:	b2db      	uxtb	r3, r3
 801c6b6:	2b00      	cmp	r3, #0
 801c6b8:	d001      	beq.n	801c6be <SMS_Read+0x4a>
		return false;
 801c6ba:	2300      	movs	r3, #0
 801c6bc:	e003      	b.n	801c6c6 <SMS_Read+0x52>
	}
	return SMS_Delete(0); // Replace with actual parsing success/failure logic
 801c6be:	2000      	movs	r0, #0
 801c6c0:	f000 f862 	bl	801c788 <SMS_Delete>
 801c6c4:	4603      	mov	r3, r0
}
 801c6c6:	4618      	mov	r0, r3
 801c6c8:	3740      	adds	r7, #64	@ 0x40
 801c6ca:	46bd      	mov	sp, r7
 801c6cc:	bd80      	pop	{r7, pc}
 801c6ce:	bf00      	nop
 801c6d0:	0802400c 	.word	0x0802400c

0801c6d4 <SMS_Send>:
bool SMS_Send(char *number, char *message) {
 801c6d4:	b580      	push	{r7, lr}
 801c6d6:	b09e      	sub	sp, #120	@ 0x78
 801c6d8:	af00      	add	r7, sp, #0
 801c6da:	6078      	str	r0, [r7, #4]
 801c6dc:	6039      	str	r1, [r7, #0]
	char cmd[100] = { };
 801c6de:	2300      	movs	r3, #0
 801c6e0:	617b      	str	r3, [r7, #20]
 801c6e2:	f107 0318 	add.w	r3, r7, #24
 801c6e6:	2260      	movs	r2, #96	@ 0x60
 801c6e8:	2100      	movs	r1, #0
 801c6ea:	4618      	mov	r0, r3
 801c6ec:	f002 fb90 	bl	801ee10 <memset>
	number[10] = '\0';
 801c6f0:	687b      	ldr	r3, [r7, #4]
 801c6f2:	330a      	adds	r3, #10
 801c6f4:	2200      	movs	r2, #0
 801c6f6:	701a      	strb	r2, [r3, #0]
	sprintf(cmd, "AT+CMGS=\"%s\"\r\n", number);
 801c6f8:	f107 0314 	add.w	r3, r7, #20
 801c6fc:	687a      	ldr	r2, [r7, #4]
 801c6fe:	491b      	ldr	r1, [pc, #108]	@ (801c76c <SMS_Send+0x98>)
 801c700:	4618      	mov	r0, r3
 801c702:	f002 fa29 	bl	801eb58 <siprintf>
	if (!EC200_Transmit(cmd, sms_resp_buff, 2000)) {
 801c706:	f107 0314 	add.w	r3, r7, #20
 801c70a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 801c70e:	4918      	ldr	r1, [pc, #96]	@ (801c770 <SMS_Send+0x9c>)
 801c710:	4618      	mov	r0, r3
 801c712:	f7e4 fd4b 	bl	80011ac <EC200_Transmit>
 801c716:	4603      	mov	r3, r0
 801c718:	f083 0301 	eor.w	r3, r3, #1
 801c71c:	b2db      	uxtb	r3, r3
 801c71e:	2b00      	cmp	r3, #0
 801c720:	d001      	beq.n	801c726 <SMS_Send+0x52>
		return false;
 801c722:	2300      	movs	r3, #0
 801c724:	e01e      	b.n	801c764 <SMS_Send+0x90>
	}
	uint8_t ctrlz[10] = { };
 801c726:	2300      	movs	r3, #0
 801c728:	60bb      	str	r3, [r7, #8]
 801c72a:	f107 030c 	add.w	r3, r7, #12
 801c72e:	2200      	movs	r2, #0
 801c730:	601a      	str	r2, [r3, #0]
 801c732:	809a      	strh	r2, [r3, #4]
	sprintf(ctrlz, "%s\r\n%c", message, 26);
 801c734:	f107 0008 	add.w	r0, r7, #8
 801c738:	231a      	movs	r3, #26
 801c73a:	683a      	ldr	r2, [r7, #0]
 801c73c:	490d      	ldr	r1, [pc, #52]	@ (801c774 <SMS_Send+0xa0>)
 801c73e:	f002 fa0b 	bl	801eb58 <siprintf>
	if (!EC200_Transmit(ctrlz, sms_resp_buff, 2000)) {
 801c742:	f107 0308 	add.w	r3, r7, #8
 801c746:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 801c74a:	4909      	ldr	r1, [pc, #36]	@ (801c770 <SMS_Send+0x9c>)
 801c74c:	4618      	mov	r0, r3
 801c74e:	f7e4 fd2d 	bl	80011ac <EC200_Transmit>
 801c752:	4603      	mov	r3, r0
 801c754:	f083 0301 	eor.w	r3, r3, #1
 801c758:	b2db      	uxtb	r3, r3
 801c75a:	2b00      	cmp	r3, #0
 801c75c:	d001      	beq.n	801c762 <SMS_Send+0x8e>
		return false;
 801c75e:	2300      	movs	r3, #0
 801c760:	e000      	b.n	801c764 <SMS_Send+0x90>
	}
	return true;
 801c762:	2301      	movs	r3, #1
}
 801c764:	4618      	mov	r0, r3
 801c766:	3778      	adds	r7, #120	@ 0x78
 801c768:	46bd      	mov	sp, r7
 801c76a:	bd80      	pop	{r7, pc}
 801c76c:	0802401c 	.word	0x0802401c
 801c770:	2001550c 	.word	0x2001550c
 801c774:	0802402c 	.word	0x0802402c

0801c778 <onMessage>:
void onMessage() {
 801c778:	b580      	push	{r7, lr}
 801c77a:	af00      	add	r7, sp, #0
	setMessageStatus(true);
 801c77c:	2001      	movs	r0, #1
 801c77e:	f000 f849 	bl	801c814 <setMessageStatus>
}
 801c782:	bf00      	nop
 801c784:	bd80      	pop	{r7, pc}
	...

0801c788 <SMS_Delete>:
bool SMS_Delete(int index) {
 801c788:	b580      	push	{r7, lr}
 801c78a:	b090      	sub	sp, #64	@ 0x40
 801c78c:	af00      	add	r7, sp, #0
 801c78e:	6078      	str	r0, [r7, #4]
	clear_sms_resp_buff();
 801c790:	f7ff fef6 	bl	801c580 <clear_sms_resp_buff>
	char command[50] = { };
 801c794:	2300      	movs	r3, #0
 801c796:	60fb      	str	r3, [r7, #12]
 801c798:	f107 0310 	add.w	r3, r7, #16
 801c79c:	222e      	movs	r2, #46	@ 0x2e
 801c79e:	2100      	movs	r1, #0
 801c7a0:	4618      	mov	r0, r3
 801c7a2:	f002 fb35 	bl	801ee10 <memset>
	sprintf(command, "AT+CMGD=%d,4\r\n", index);
 801c7a6:	f107 030c 	add.w	r3, r7, #12
 801c7aa:	687a      	ldr	r2, [r7, #4]
 801c7ac:	4910      	ldr	r1, [pc, #64]	@ (801c7f0 <SMS_Delete+0x68>)
 801c7ae:	4618      	mov	r0, r3
 801c7b0:	f002 f9d2 	bl	801eb58 <siprintf>
	if (!EC200_Transmit(command, sms_resp_buff, 2000)) {
 801c7b4:	f107 030c 	add.w	r3, r7, #12
 801c7b8:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 801c7bc:	490d      	ldr	r1, [pc, #52]	@ (801c7f4 <SMS_Delete+0x6c>)
 801c7be:	4618      	mov	r0, r3
 801c7c0:	f7e4 fcf4 	bl	80011ac <EC200_Transmit>
 801c7c4:	4603      	mov	r3, r0
 801c7c6:	f083 0301 	eor.w	r3, r3, #1
 801c7ca:	b2db      	uxtb	r3, r3
 801c7cc:	2b00      	cmp	r3, #0
 801c7ce:	d001      	beq.n	801c7d4 <SMS_Delete+0x4c>
		return false;
 801c7d0:	2300      	movs	r3, #0
 801c7d2:	e009      	b.n	801c7e8 <SMS_Delete+0x60>
	}
	if (strstr(sms_resp_buff, "OK") == NULL) {
 801c7d4:	4908      	ldr	r1, [pc, #32]	@ (801c7f8 <SMS_Delete+0x70>)
 801c7d6:	4807      	ldr	r0, [pc, #28]	@ (801c7f4 <SMS_Delete+0x6c>)
 801c7d8:	f002 fbda 	bl	801ef90 <strstr>
 801c7dc:	4603      	mov	r3, r0
 801c7de:	2b00      	cmp	r3, #0
 801c7e0:	d101      	bne.n	801c7e6 <SMS_Delete+0x5e>
		return false;
 801c7e2:	2300      	movs	r3, #0
 801c7e4:	e000      	b.n	801c7e8 <SMS_Delete+0x60>
	}
	return true;
 801c7e6:	2301      	movs	r3, #1
}
 801c7e8:	4618      	mov	r0, r3
 801c7ea:	3740      	adds	r7, #64	@ 0x40
 801c7ec:	46bd      	mov	sp, r7
 801c7ee:	bd80      	pop	{r7, pc}
 801c7f0:	08024034 	.word	0x08024034
 801c7f4:	2001550c 	.word	0x2001550c
 801c7f8:	08023fb4 	.word	0x08023fb4

0801c7fc <getMessageStatus>:
bool getMessageStatus() {
 801c7fc:	b480      	push	{r7}
 801c7fe:	af00      	add	r7, sp, #0
	return messageStatus;
 801c800:	4b03      	ldr	r3, [pc, #12]	@ (801c810 <getMessageStatus+0x14>)
 801c802:	781b      	ldrb	r3, [r3, #0]
}
 801c804:	4618      	mov	r0, r3
 801c806:	46bd      	mov	sp, r7
 801c808:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c80c:	4770      	bx	lr
 801c80e:	bf00      	nop
 801c810:	20015606 	.word	0x20015606

0801c814 <setMessageStatus>:
void setMessageStatus(bool msgStatus) {
 801c814:	b480      	push	{r7}
 801c816:	b083      	sub	sp, #12
 801c818:	af00      	add	r7, sp, #0
 801c81a:	4603      	mov	r3, r0
 801c81c:	71fb      	strb	r3, [r7, #7]
	messageStatus = msgStatus;
 801c81e:	4a04      	ldr	r2, [pc, #16]	@ (801c830 <setMessageStatus+0x1c>)
 801c820:	79fb      	ldrb	r3, [r7, #7]
 801c822:	7013      	strb	r3, [r2, #0]
}
 801c824:	bf00      	nop
 801c826:	370c      	adds	r7, #12
 801c828:	46bd      	mov	sp, r7
 801c82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c82e:	4770      	bx	lr
 801c830:	20015606 	.word	0x20015606

0801c834 <SMS_FSend>:

bool SMS_FSend(char *number, char *message) {
 801c834:	b580      	push	{r7, lr}
 801c836:	b09e      	sub	sp, #120	@ 0x78
 801c838:	af00      	add	r7, sp, #0
 801c83a:	6078      	str	r0, [r7, #4]
 801c83c:	6039      	str	r1, [r7, #0]
	char cmd[100] = { };
 801c83e:	2300      	movs	r3, #0
 801c840:	617b      	str	r3, [r7, #20]
 801c842:	f107 0318 	add.w	r3, r7, #24
 801c846:	2260      	movs	r2, #96	@ 0x60
 801c848:	2100      	movs	r1, #0
 801c84a:	4618      	mov	r0, r3
 801c84c:	f002 fae0 	bl	801ee10 <memset>
	number[10] = '\0';
 801c850:	687b      	ldr	r3, [r7, #4]
 801c852:	330a      	adds	r3, #10
 801c854:	2200      	movs	r2, #0
 801c856:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1000);
 801c858:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 801c85c:	f7e9 f8b4 	bl	80059c8 <HAL_Delay>
	sprintf(cmd, "AT+CMGS=\"%s\"\r\n", number);
 801c860:	f107 0314 	add.w	r3, r7, #20
 801c864:	687a      	ldr	r2, [r7, #4]
 801c866:	4916      	ldr	r1, [pc, #88]	@ (801c8c0 <SMS_FSend+0x8c>)
 801c868:	4618      	mov	r0, r3
 801c86a:	f002 f975 	bl	801eb58 <siprintf>
	if (EC200_Transmit(cmd, sms_resp_buff, 2000)) {
 801c86e:	f107 0314 	add.w	r3, r7, #20
 801c872:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 801c876:	4913      	ldr	r1, [pc, #76]	@ (801c8c4 <SMS_FSend+0x90>)
 801c878:	4618      	mov	r0, r3
 801c87a:	f7e4 fc97 	bl	80011ac <EC200_Transmit>

	}
	uint8_t ctrlz[10] = { };
 801c87e:	2300      	movs	r3, #0
 801c880:	60bb      	str	r3, [r7, #8]
 801c882:	f107 030c 	add.w	r3, r7, #12
 801c886:	2200      	movs	r2, #0
 801c888:	601a      	str	r2, [r3, #0]
 801c88a:	809a      	strh	r2, [r3, #4]
	sprintf(ctrlz, "%s\r\n%c", message, 26);
 801c88c:	f107 0008 	add.w	r0, r7, #8
 801c890:	231a      	movs	r3, #26
 801c892:	683a      	ldr	r2, [r7, #0]
 801c894:	490c      	ldr	r1, [pc, #48]	@ (801c8c8 <SMS_FSend+0x94>)
 801c896:	f002 f95f 	bl	801eb58 <siprintf>
	if (EC200_Transmit(ctrlz, sms_resp_buff, 2000)) {
 801c89a:	f107 0308 	add.w	r3, r7, #8
 801c89e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 801c8a2:	4908      	ldr	r1, [pc, #32]	@ (801c8c4 <SMS_FSend+0x90>)
 801c8a4:	4618      	mov	r0, r3
 801c8a6:	f7e4 fc81 	bl	80011ac <EC200_Transmit>
 801c8aa:	4603      	mov	r3, r0
 801c8ac:	2b00      	cmp	r3, #0
 801c8ae:	d001      	beq.n	801c8b4 <SMS_FSend+0x80>
		return true;
 801c8b0:	2301      	movs	r3, #1
 801c8b2:	e000      	b.n	801c8b6 <SMS_FSend+0x82>
	}
	return false;
 801c8b4:	2300      	movs	r3, #0
}
 801c8b6:	4618      	mov	r0, r3
 801c8b8:	3778      	adds	r7, #120	@ 0x78
 801c8ba:	46bd      	mov	sp, r7
 801c8bc:	bd80      	pop	{r7, pc}
 801c8be:	bf00      	nop
 801c8c0:	0802401c 	.word	0x0802401c
 801c8c4:	2001550c 	.word	0x2001550c
 801c8c8:	0802402c 	.word	0x0802402c

0801c8cc <setTcpServerIP>:
#include "tcp.h"
char tcp_buff[250];
char SERVER_IP[16]={0};
int SERVER_PORT= 0;

void setTcpServerIP(char *ip){
 801c8cc:	b580      	push	{r7, lr}
 801c8ce:	b082      	sub	sp, #8
 801c8d0:	af00      	add	r7, sp, #0
 801c8d2:	6078      	str	r0, [r7, #4]
	clearBuffer(SERVER_IP, sizeof(SERVER_IP));
 801c8d4:	2110      	movs	r1, #16
 801c8d6:	4805      	ldr	r0, [pc, #20]	@ (801c8ec <setTcpServerIP+0x20>)
 801c8d8:	f7e5 f8f6 	bl	8001ac8 <clearBuffer>
	strcpy(SERVER_IP,ip);
 801c8dc:	6879      	ldr	r1, [r7, #4]
 801c8de:	4803      	ldr	r0, [pc, #12]	@ (801c8ec <setTcpServerIP+0x20>)
 801c8e0:	f002 fbf3 	bl	801f0ca <strcpy>
}
 801c8e4:	bf00      	nop
 801c8e6:	3708      	adds	r7, #8
 801c8e8:	46bd      	mov	sp, r7
 801c8ea:	bd80      	pop	{r7, pc}
 801c8ec:	20015704 	.word	0x20015704

0801c8f0 <setTcpPort>:
void setTcpPort(int port){
 801c8f0:	b480      	push	{r7}
 801c8f2:	b083      	sub	sp, #12
 801c8f4:	af00      	add	r7, sp, #0
 801c8f6:	6078      	str	r0, [r7, #4]
	SERVER_PORT=port;
 801c8f8:	4a04      	ldr	r2, [pc, #16]	@ (801c90c <setTcpPort+0x1c>)
 801c8fa:	687b      	ldr	r3, [r7, #4]
 801c8fc:	6013      	str	r3, [r2, #0]
}
 801c8fe:	bf00      	nop
 801c900:	370c      	adds	r7, #12
 801c902:	46bd      	mov	sp, r7
 801c904:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c908:	4770      	bx	lr
 801c90a:	bf00      	nop
 801c90c:	20015714 	.word	0x20015714

0801c910 <getTcpPort>:
int getTcpPort(){
 801c910:	b580      	push	{r7, lr}
 801c912:	b082      	sub	sp, #8
 801c914:	af00      	add	r7, sp, #0
	char port[6]={};
 801c916:	2300      	movs	r3, #0
 801c918:	603b      	str	r3, [r7, #0]
 801c91a:	2300      	movs	r3, #0
 801c91c:	80bb      	strh	r3, [r7, #4]
	SGET_PORT1(port);
 801c91e:	463b      	mov	r3, r7
 801c920:	4618      	mov	r0, r3
 801c922:	f7fb fe0d 	bl	8018540 <SGET_PORT1>
	return atoi(port);
 801c926:	463b      	mov	r3, r7
 801c928:	4618      	mov	r0, r3
 801c92a:	f000 f9fc 	bl	801cd26 <atoi>
 801c92e:	4603      	mov	r3, r0
}
 801c930:	4618      	mov	r0, r3
 801c932:	3708      	adds	r7, #8
 801c934:	46bd      	mov	sp, r7
 801c936:	bd80      	pop	{r7, pc}

0801c938 <getTcpServerIP>:
void getTcpServerIP(char *opIP){
 801c938:	b580      	push	{r7, lr}
 801c93a:	b082      	sub	sp, #8
 801c93c:	af00      	add	r7, sp, #0
 801c93e:	6078      	str	r0, [r7, #4]
	SGET_MIP(opIP);
 801c940:	6878      	ldr	r0, [r7, #4]
 801c942:	f7fb fded 	bl	8018520 <SGET_MIP>
//	strcpy(opIP,SERVER_IP);
}
 801c946:	bf00      	nop
 801c948:	3708      	adds	r7, #8
 801c94a:	46bd      	mov	sp, r7
 801c94c:	bd80      	pop	{r7, pc}
	...

0801c950 <clear_tcp_resp_buff>:
void clear_tcp_resp_buff()
{
 801c950:	b580      	push	{r7, lr}
 801c952:	af00      	add	r7, sp, #0
	clearBuffer(tcp_buff,sizeof(tcp_buff));
 801c954:	21fa      	movs	r1, #250	@ 0xfa
 801c956:	4802      	ldr	r0, [pc, #8]	@ (801c960 <clear_tcp_resp_buff+0x10>)
 801c958:	f7e5 f8b6 	bl	8001ac8 <clearBuffer>
}
 801c95c:	bf00      	nop
 801c95e:	bd80      	pop	{r7, pc}
 801c960:	20015608 	.word	0x20015608

0801c964 <TCP_init>:

bool TCP_init(void){
 801c964:	b580      	push	{r7, lr}
 801c966:	b082      	sub	sp, #8
 801c968:	af00      	add	r7, sp, #0

	if(TCP_config()){
 801c96a:	f000 f82d 	bl	801c9c8 <TCP_config>
 801c96e:	4603      	mov	r3, r0
 801c970:	2b00      	cmp	r3, #0
 801c972:	d017      	beq.n	801c9a4 <TCP_init+0x40>
		char data[]="Test";
 801c974:	4a10      	ldr	r2, [pc, #64]	@ (801c9b8 <TCP_init+0x54>)
 801c976:	463b      	mov	r3, r7
 801c978:	e892 0003 	ldmia.w	r2, {r0, r1}
 801c97c:	6018      	str	r0, [r3, #0]
 801c97e:	3304      	adds	r3, #4
 801c980:	7019      	strb	r1, [r3, #0]
		if(TCP_Send(data) )
 801c982:	463b      	mov	r3, r7
 801c984:	4618      	mov	r0, r3
 801c986:	f000 f945 	bl	801cc14 <TCP_Send>
 801c98a:	4603      	mov	r3, r0
 801c98c:	2b00      	cmp	r3, #0
 801c98e:	d004      	beq.n	801c99a <TCP_init+0x36>
		{
			printc(MinDelay, "Data Send Success Fully\n");
 801c990:	490a      	ldr	r1, [pc, #40]	@ (801c9bc <TCP_init+0x58>)
 801c992:	200a      	movs	r0, #10
 801c994:	f7e5 f840 	bl	8001a18 <printc>
 801c998:	e008      	b.n	801c9ac <TCP_init+0x48>
		}
		else{
		printc(MinDelay, "Some error Occur during Sending\n");
 801c99a:	4909      	ldr	r1, [pc, #36]	@ (801c9c0 <TCP_init+0x5c>)
 801c99c:	200a      	movs	r0, #10
 801c99e:	f7e5 f83b 	bl	8001a18 <printc>
 801c9a2:	e003      	b.n	801c9ac <TCP_init+0x48>
		}
	}
	else{
		printc(MinDelay,"Configuration Failed \n");
 801c9a4:	4907      	ldr	r1, [pc, #28]	@ (801c9c4 <TCP_init+0x60>)
 801c9a6:	200a      	movs	r0, #10
 801c9a8:	f7e5 f836 	bl	8001a18 <printc>
	}
}
 801c9ac:	bf00      	nop
 801c9ae:	4618      	mov	r0, r3
 801c9b0:	3708      	adds	r7, #8
 801c9b2:	46bd      	mov	sp, r7
 801c9b4:	bd80      	pop	{r7, pc}
 801c9b6:	bf00      	nop
 801c9b8:	0802409c 	.word	0x0802409c
 801c9bc:	08024044 	.word	0x08024044
 801c9c0:	08024060 	.word	0x08024060
 801c9c4:	08024084 	.word	0x08024084

0801c9c8 <TCP_config>:

bool TCP_config() {
 801c9c8:	b580      	push	{r7, lr}
 801c9ca:	af00      	add	r7, sp, #0

	clear_tcp_resp_buff();
 801c9cc:	f7ff ffc0 	bl	801c950 <clear_tcp_resp_buff>

    if(EC200_Transmit("AT+CPIN?\r\n",tcp_buff,2000))
 801c9d0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 801c9d4:	4947      	ldr	r1, [pc, #284]	@ (801caf4 <TCP_config+0x12c>)
 801c9d6:	4848      	ldr	r0, [pc, #288]	@ (801caf8 <TCP_config+0x130>)
 801c9d8:	f7e4 fbe8 	bl	80011ac <EC200_Transmit>
 801c9dc:	4603      	mov	r3, r0
 801c9de:	2b00      	cmp	r3, #0
 801c9e0:	d011      	beq.n	801ca06 <TCP_config+0x3e>
    {
    // Check if the response contains the desired string
       if (strstr(tcp_buff, "+CPIN: READY") != NULL) {
 801c9e2:	4946      	ldr	r1, [pc, #280]	@ (801cafc <TCP_config+0x134>)
 801c9e4:	4843      	ldr	r0, [pc, #268]	@ (801caf4 <TCP_config+0x12c>)
 801c9e6:	f002 fad3 	bl	801ef90 <strstr>
 801c9ea:	4603      	mov	r3, r0
 801c9ec:	2b00      	cmp	r3, #0
 801c9ee:	d004      	beq.n	801c9fa <TCP_config+0x32>
           printc(MinDelay, "SIM Ready\n");
 801c9f0:	4943      	ldr	r1, [pc, #268]	@ (801cb00 <TCP_config+0x138>)
 801c9f2:	200a      	movs	r0, #10
 801c9f4:	f7e5 f810 	bl	8001a18 <printc>
 801c9f8:	e005      	b.n	801ca06 <TCP_config+0x3e>
       } else {
           printc(MinDelay, "Not Ready\n");
 801c9fa:	4942      	ldr	r1, [pc, #264]	@ (801cb04 <TCP_config+0x13c>)
 801c9fc:	200a      	movs	r0, #10
 801c9fe:	f7e5 f80b 	bl	8001a18 <printc>
           return false;
 801ca02:	2300      	movs	r3, #0
 801ca04:	e074      	b.n	801caf0 <TCP_config+0x128>
       }
    }

    if(EC200_Transmit("AT+CREG?\r\n",tcp_buff,2000))
 801ca06:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 801ca0a:	493a      	ldr	r1, [pc, #232]	@ (801caf4 <TCP_config+0x12c>)
 801ca0c:	483e      	ldr	r0, [pc, #248]	@ (801cb08 <TCP_config+0x140>)
 801ca0e:	f7e4 fbcd 	bl	80011ac <EC200_Transmit>
 801ca12:	4603      	mov	r3, r0
 801ca14:	2b00      	cmp	r3, #0
 801ca16:	d011      	beq.n	801ca3c <TCP_config+0x74>
   {
    	// Check if the response contains the desired string
       if (strstr(tcp_buff, "+CREG: 0,1") != NULL) {
 801ca18:	493c      	ldr	r1, [pc, #240]	@ (801cb0c <TCP_config+0x144>)
 801ca1a:	4836      	ldr	r0, [pc, #216]	@ (801caf4 <TCP_config+0x12c>)
 801ca1c:	f002 fab8 	bl	801ef90 <strstr>
 801ca20:	4603      	mov	r3, r0
 801ca22:	2b00      	cmp	r3, #0
 801ca24:	d004      	beq.n	801ca30 <TCP_config+0x68>
           printc(MinDelay, "Registered at Home\n");
 801ca26:	493a      	ldr	r1, [pc, #232]	@ (801cb10 <TCP_config+0x148>)
 801ca28:	200a      	movs	r0, #10
 801ca2a:	f7e4 fff5 	bl	8001a18 <printc>
 801ca2e:	e005      	b.n	801ca3c <TCP_config+0x74>
       } else {
           printc(MinDelay, "Not Registered\n");
 801ca30:	4938      	ldr	r1, [pc, #224]	@ (801cb14 <TCP_config+0x14c>)
 801ca32:	200a      	movs	r0, #10
 801ca34:	f7e4 fff0 	bl	8001a18 <printc>
           return false;
 801ca38:	2300      	movs	r3, #0
 801ca3a:	e059      	b.n	801caf0 <TCP_config+0x128>
       }
   }

    if(EC200_Transmit("AT+QIDEACT=1\r\n",tcp_buff,2000))
 801ca3c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 801ca40:	492c      	ldr	r1, [pc, #176]	@ (801caf4 <TCP_config+0x12c>)
 801ca42:	4835      	ldr	r0, [pc, #212]	@ (801cb18 <TCP_config+0x150>)
 801ca44:	f7e4 fbb2 	bl	80011ac <EC200_Transmit>
 801ca48:	4603      	mov	r3, r0
 801ca4a:	2b00      	cmp	r3, #0
 801ca4c:	d018      	beq.n	801ca80 <TCP_config+0xb8>
    {
    // Check if the response contains "OK" or "+QIURC: \"closed\",0"
    if (strstr(tcp_buff, "OK") != NULL || strstr(tcp_buff, "+QIURC: \"closed\",0") != NULL) {
 801ca4e:	4933      	ldr	r1, [pc, #204]	@ (801cb1c <TCP_config+0x154>)
 801ca50:	4828      	ldr	r0, [pc, #160]	@ (801caf4 <TCP_config+0x12c>)
 801ca52:	f002 fa9d 	bl	801ef90 <strstr>
 801ca56:	4603      	mov	r3, r0
 801ca58:	2b00      	cmp	r3, #0
 801ca5a:	d106      	bne.n	801ca6a <TCP_config+0xa2>
 801ca5c:	4930      	ldr	r1, [pc, #192]	@ (801cb20 <TCP_config+0x158>)
 801ca5e:	4825      	ldr	r0, [pc, #148]	@ (801caf4 <TCP_config+0x12c>)
 801ca60:	f002 fa96 	bl	801ef90 <strstr>
 801ca64:	4603      	mov	r3, r0
 801ca66:	2b00      	cmp	r3, #0
 801ca68:	d004      	beq.n	801ca74 <TCP_config+0xac>
        printc(MinDelay, "Internet closed successfully\n");
 801ca6a:	492e      	ldr	r1, [pc, #184]	@ (801cb24 <TCP_config+0x15c>)
 801ca6c:	200a      	movs	r0, #10
 801ca6e:	f7e4 ffd3 	bl	8001a18 <printc>
 801ca72:	e005      	b.n	801ca80 <TCP_config+0xb8>

    } else {
        printc(MinDelay, "Failed to close the Internet\n");
 801ca74:	492c      	ldr	r1, [pc, #176]	@ (801cb28 <TCP_config+0x160>)
 801ca76:	200a      	movs	r0, #10
 801ca78:	f7e4 ffce 	bl	8001a18 <printc>
        return false;
 801ca7c:	2300      	movs	r3, #0
 801ca7e:	e037      	b.n	801caf0 <TCP_config+0x128>
    }
    }
    if(EC200_Transmit("AT+QICSGP=1,1,\"TAISYSNET\",\"\",\"\",0\r\n",tcp_buff,2000))
 801ca80:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 801ca84:	491b      	ldr	r1, [pc, #108]	@ (801caf4 <TCP_config+0x12c>)
 801ca86:	4829      	ldr	r0, [pc, #164]	@ (801cb2c <TCP_config+0x164>)
 801ca88:	f7e4 fb90 	bl	80011ac <EC200_Transmit>
 801ca8c:	4603      	mov	r3, r0
 801ca8e:	2b00      	cmp	r3, #0
 801ca90:	d011      	beq.n	801cab6 <TCP_config+0xee>
    {
        // Check if the response contains "OK"
        if (strstr(tcp_buff, "OK") != NULL) {
 801ca92:	4922      	ldr	r1, [pc, #136]	@ (801cb1c <TCP_config+0x154>)
 801ca94:	4817      	ldr	r0, [pc, #92]	@ (801caf4 <TCP_config+0x12c>)
 801ca96:	f002 fa7b 	bl	801ef90 <strstr>
 801ca9a:	4603      	mov	r3, r0
 801ca9c:	2b00      	cmp	r3, #0
 801ca9e:	d004      	beq.n	801caaa <TCP_config+0xe2>
            printc(MinDelay, "APN SET SUCESSFULLY\n");
 801caa0:	4923      	ldr	r1, [pc, #140]	@ (801cb30 <TCP_config+0x168>)
 801caa2:	200a      	movs	r0, #10
 801caa4:	f7e4 ffb8 	bl	8001a18 <printc>
 801caa8:	e005      	b.n	801cab6 <TCP_config+0xee>

        } else {
            printc(MinDelay, "Failed to SET APN\n");
 801caaa:	4922      	ldr	r1, [pc, #136]	@ (801cb34 <TCP_config+0x16c>)
 801caac:	200a      	movs	r0, #10
 801caae:	f7e4 ffb3 	bl	8001a18 <printc>
            return false;
 801cab2:	2300      	movs	r3, #0
 801cab4:	e01c      	b.n	801caf0 <TCP_config+0x128>
        }

    }
    if(EC200_Transmit("AT+QIACT=1\r\n",tcp_buff,2000))
 801cab6:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 801caba:	490e      	ldr	r1, [pc, #56]	@ (801caf4 <TCP_config+0x12c>)
 801cabc:	481e      	ldr	r0, [pc, #120]	@ (801cb38 <TCP_config+0x170>)
 801cabe:	f7e4 fb75 	bl	80011ac <EC200_Transmit>
 801cac2:	4603      	mov	r3, r0
 801cac4:	2b00      	cmp	r3, #0
 801cac6:	d012      	beq.n	801caee <TCP_config+0x126>
    {
    // Check if the response contains "OK"
           if (strstr(tcp_buff, "OK") != NULL) {
 801cac8:	4914      	ldr	r1, [pc, #80]	@ (801cb1c <TCP_config+0x154>)
 801caca:	480a      	ldr	r0, [pc, #40]	@ (801caf4 <TCP_config+0x12c>)
 801cacc:	f002 fa60 	bl	801ef90 <strstr>
 801cad0:	4603      	mov	r3, r0
 801cad2:	2b00      	cmp	r3, #0
 801cad4:	d005      	beq.n	801cae2 <TCP_config+0x11a>
               printc(MinDelay, "DATA ENABLED\n");
 801cad6:	4919      	ldr	r1, [pc, #100]	@ (801cb3c <TCP_config+0x174>)
 801cad8:	200a      	movs	r0, #10
 801cada:	f7e4 ff9d 	bl	8001a18 <printc>
               return true;
 801cade:	2301      	movs	r3, #1
 801cae0:	e006      	b.n	801caf0 <TCP_config+0x128>
           } else {
               printc(MinDelay, "Failed to DATA ENABLE\n");
 801cae2:	4917      	ldr	r1, [pc, #92]	@ (801cb40 <TCP_config+0x178>)
 801cae4:	200a      	movs	r0, #10
 801cae6:	f7e4 ff97 	bl	8001a18 <printc>
               return false;
 801caea:	2300      	movs	r3, #0
 801caec:	e000      	b.n	801caf0 <TCP_config+0x128>
           }
    }
    return true;
 801caee:	2301      	movs	r3, #1
}
 801caf0:	4618      	mov	r0, r3
 801caf2:	bd80      	pop	{r7, pc}
 801caf4:	20015608 	.word	0x20015608
 801caf8:	080240a4 	.word	0x080240a4
 801cafc:	080240b0 	.word	0x080240b0
 801cb00:	080240c0 	.word	0x080240c0
 801cb04:	080240cc 	.word	0x080240cc
 801cb08:	080240d8 	.word	0x080240d8
 801cb0c:	080240e4 	.word	0x080240e4
 801cb10:	080240f0 	.word	0x080240f0
 801cb14:	08024104 	.word	0x08024104
 801cb18:	08024114 	.word	0x08024114
 801cb1c:	08024124 	.word	0x08024124
 801cb20:	08024128 	.word	0x08024128
 801cb24:	0802413c 	.word	0x0802413c
 801cb28:	0802415c 	.word	0x0802415c
 801cb2c:	0802417c 	.word	0x0802417c
 801cb30:	080241a0 	.word	0x080241a0
 801cb34:	080241b8 	.word	0x080241b8
 801cb38:	080241cc 	.word	0x080241cc
 801cb3c:	080241dc 	.word	0x080241dc
 801cb40:	080241ec 	.word	0x080241ec

0801cb44 <TCP_Open>:

bool TCP_Open() {
 801cb44:	b580      	push	{r7, lr}
 801cb46:	b09a      	sub	sp, #104	@ 0x68
 801cb48:	af00      	add	r7, sp, #0
	getTcpServerIP(SERVER_IP);
 801cb4a:	4829      	ldr	r0, [pc, #164]	@ (801cbf0 <TCP_Open+0xac>)
 801cb4c:	f7ff fef4 	bl	801c938 <getTcpServerIP>
	SERVER_PORT=getTcpPort();
 801cb50:	f7ff fede 	bl	801c910 <getTcpPort>
 801cb54:	4603      	mov	r3, r0
 801cb56:	4a27      	ldr	r2, [pc, #156]	@ (801cbf4 <TCP_Open+0xb0>)
 801cb58:	6013      	str	r3, [r2, #0]
    char command[100]={0};
 801cb5a:	2300      	movs	r3, #0
 801cb5c:	607b      	str	r3, [r7, #4]
 801cb5e:	f107 0308 	add.w	r3, r7, #8
 801cb62:	2260      	movs	r2, #96	@ 0x60
 801cb64:	2100      	movs	r1, #0
 801cb66:	4618      	mov	r0, r3
 801cb68:	f002 f952 	bl	801ee10 <memset>
    sprintf(command, "AT+QIOPEN=1,0,\"TCP\",\"%s\",%d,0,1\r\n",SERVER_IP, SERVER_PORT);
 801cb6c:	4b21      	ldr	r3, [pc, #132]	@ (801cbf4 <TCP_Open+0xb0>)
 801cb6e:	681b      	ldr	r3, [r3, #0]
 801cb70:	1d38      	adds	r0, r7, #4
 801cb72:	4a1f      	ldr	r2, [pc, #124]	@ (801cbf0 <TCP_Open+0xac>)
 801cb74:	4920      	ldr	r1, [pc, #128]	@ (801cbf8 <TCP_Open+0xb4>)
 801cb76:	f001 ffef 	bl	801eb58 <siprintf>
    HAL_Delay(1000);
 801cb7a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 801cb7e:	f7e8 ff23 	bl	80059c8 <HAL_Delay>
    if(EC200_Transmit(command,tcp_buff,10000))
 801cb82:	1d3b      	adds	r3, r7, #4
 801cb84:	f242 7210 	movw	r2, #10000	@ 0x2710
 801cb88:	491c      	ldr	r1, [pc, #112]	@ (801cbfc <TCP_Open+0xb8>)
 801cb8a:	4618      	mov	r0, r3
 801cb8c:	f7e4 fb0e 	bl	80011ac <EC200_Transmit>
 801cb90:	4603      	mov	r3, r0
 801cb92:	2b00      	cmp	r3, #0
 801cb94:	d026      	beq.n	801cbe4 <TCP_Open+0xa0>
    {
    	if(wait_for_response(tcp_buff,30000))
 801cb96:	f247 5130 	movw	r1, #30000	@ 0x7530
 801cb9a:	4818      	ldr	r0, [pc, #96]	@ (801cbfc <TCP_Open+0xb8>)
 801cb9c:	f7e4 fab6 	bl	800110c <wait_for_response>
 801cba0:	4603      	mov	r3, r0
 801cba2:	2b00      	cmp	r3, #0
 801cba4:	d018      	beq.n	801cbd8 <TCP_Open+0x94>
    	{

    	  // Check if the response contains "OK" and "+QIOPEN: 0,0"
    	        if ((strstr(tcp_buff, "+QIOPEN: 0,0") != NULL)||(strstr(tcp_buff, "+QIOPEN: 0,563") != NULL) ) {
 801cba6:	4916      	ldr	r1, [pc, #88]	@ (801cc00 <TCP_Open+0xbc>)
 801cba8:	4814      	ldr	r0, [pc, #80]	@ (801cbfc <TCP_Open+0xb8>)
 801cbaa:	f002 f9f1 	bl	801ef90 <strstr>
 801cbae:	4603      	mov	r3, r0
 801cbb0:	2b00      	cmp	r3, #0
 801cbb2:	d106      	bne.n	801cbc2 <TCP_Open+0x7e>
 801cbb4:	4913      	ldr	r1, [pc, #76]	@ (801cc04 <TCP_Open+0xc0>)
 801cbb6:	4811      	ldr	r0, [pc, #68]	@ (801cbfc <TCP_Open+0xb8>)
 801cbb8:	f002 f9ea 	bl	801ef90 <strstr>
 801cbbc:	4603      	mov	r3, r0
 801cbbe:	2b00      	cmp	r3, #0
 801cbc0:	d004      	beq.n	801cbcc <TCP_Open+0x88>
    	            printc(MinDelay, "TCP connection opened successfully\n");
 801cbc2:	4911      	ldr	r1, [pc, #68]	@ (801cc08 <TCP_Open+0xc4>)
 801cbc4:	200a      	movs	r0, #10
 801cbc6:	f7e4 ff27 	bl	8001a18 <printc>
 801cbca:	e00b      	b.n	801cbe4 <TCP_Open+0xa0>
    	        } else {
    	            printc(MinDelay, "Failed to open TCP connection\n");
 801cbcc:	490f      	ldr	r1, [pc, #60]	@ (801cc0c <TCP_Open+0xc8>)
 801cbce:	200a      	movs	r0, #10
 801cbd0:	f7e4 ff22 	bl	8001a18 <printc>
    	            return false;
 801cbd4:	2300      	movs	r3, #0
 801cbd6:	e006      	b.n	801cbe6 <TCP_Open+0xa2>
    	        }
    	}
    	else
    	{
    		printc(MinDelay, "TCP timeout\n");
 801cbd8:	490d      	ldr	r1, [pc, #52]	@ (801cc10 <TCP_Open+0xcc>)
 801cbda:	200a      	movs	r0, #10
 801cbdc:	f7e4 ff1c 	bl	8001a18 <printc>
    		return false;
 801cbe0:	2300      	movs	r3, #0
 801cbe2:	e000      	b.n	801cbe6 <TCP_Open+0xa2>
    	}

    }
return true;
 801cbe4:	2301      	movs	r3, #1
}
 801cbe6:	4618      	mov	r0, r3
 801cbe8:	3768      	adds	r7, #104	@ 0x68
 801cbea:	46bd      	mov	sp, r7
 801cbec:	bd80      	pop	{r7, pc}
 801cbee:	bf00      	nop
 801cbf0:	20015704 	.word	0x20015704
 801cbf4:	20015714 	.word	0x20015714
 801cbf8:	08024204 	.word	0x08024204
 801cbfc:	20015608 	.word	0x20015608
 801cc00:	08024228 	.word	0x08024228
 801cc04:	08024238 	.word	0x08024238
 801cc08:	08024248 	.word	0x08024248
 801cc0c:	0802426c 	.word	0x0802426c
 801cc10:	0802428c 	.word	0x0802428c

0801cc14 <TCP_Send>:

bool TCP_Send(const char *data) {
 801cc14:	b580      	push	{r7, lr}
 801cc16:	b09c      	sub	sp, #112	@ 0x70
 801cc18:	af00      	add	r7, sp, #0
 801cc1a:	6078      	str	r0, [r7, #4]
	uint8_t command[100];
	TCP_DEACT();
 801cc1c:	f000 f850 	bl	801ccc0 <TCP_DEACT>
	if(TCP_Open()){
 801cc20:	f7ff ff90 	bl	801cb44 <TCP_Open>
 801cc24:	4603      	mov	r3, r0
 801cc26:	2b00      	cmp	r3, #0
 801cc28:	d033      	beq.n	801cc92 <TCP_Send+0x7e>
		sprintf(command,"AT+QISEND=0,%d\r\n",strlen(data));
 801cc2a:	6878      	ldr	r0, [r7, #4]
 801cc2c:	f7e3 fb3a 	bl	80002a4 <strlen>
 801cc30:	4602      	mov	r2, r0
 801cc32:	f107 030c 	add.w	r3, r7, #12
 801cc36:	491b      	ldr	r1, [pc, #108]	@ (801cca4 <TCP_Send+0x90>)
 801cc38:	4618      	mov	r0, r3
 801cc3a:	f001 ff8d 	bl	801eb58 <siprintf>
		EC200_Transmit(command,tcp_buff,2000);
 801cc3e:	f107 030c 	add.w	r3, r7, #12
 801cc42:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 801cc46:	4918      	ldr	r1, [pc, #96]	@ (801cca8 <TCP_Send+0x94>)
 801cc48:	4618      	mov	r0, r3
 801cc4a:	f7e4 faaf 	bl	80011ac <EC200_Transmit>
		if(EC200_Transmit(data,tcp_buff,2000))
 801cc4e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 801cc52:	4915      	ldr	r1, [pc, #84]	@ (801cca8 <TCP_Send+0x94>)
 801cc54:	6878      	ldr	r0, [r7, #4]
 801cc56:	f7e4 faa9 	bl	80011ac <EC200_Transmit>
 801cc5a:	4603      	mov	r3, r0
 801cc5c:	2b00      	cmp	r3, #0
 801cc5e:	d012      	beq.n	801cc86 <TCP_Send+0x72>
		{
		// Check if the response contains "SEND OK"
			if (strstr(tcp_buff, "SEND OK") != NULL) {
 801cc60:	4912      	ldr	r1, [pc, #72]	@ (801ccac <TCP_Send+0x98>)
 801cc62:	4811      	ldr	r0, [pc, #68]	@ (801cca8 <TCP_Send+0x94>)
 801cc64:	f002 f994 	bl	801ef90 <strstr>
 801cc68:	4603      	mov	r3, r0
 801cc6a:	2b00      	cmp	r3, #0
 801cc6c:	d005      	beq.n	801cc7a <TCP_Send+0x66>
				printc(MinDelay, "Data sent successfully\n");
 801cc6e:	4910      	ldr	r1, [pc, #64]	@ (801ccb0 <TCP_Send+0x9c>)
 801cc70:	200a      	movs	r0, #10
 801cc72:	f7e4 fed1 	bl	8001a18 <printc>
				return true;
 801cc76:	2301      	movs	r3, #1
 801cc78:	e010      	b.n	801cc9c <TCP_Send+0x88>
			} else {
				printc(MinDelay, "Failed to send data\n");
 801cc7a:	490e      	ldr	r1, [pc, #56]	@ (801ccb4 <TCP_Send+0xa0>)
 801cc7c:	200a      	movs	r0, #10
 801cc7e:	f7e4 fecb 	bl	8001a18 <printc>
				return false;
 801cc82:	2300      	movs	r3, #0
 801cc84:	e00a      	b.n	801cc9c <TCP_Send+0x88>
			}
		}
		else{
			printc(MinDelay, "Don't get response for AT+QISEND=0 \n");
 801cc86:	490c      	ldr	r1, [pc, #48]	@ (801ccb8 <TCP_Send+0xa4>)
 801cc88:	200a      	movs	r0, #10
 801cc8a:	f7e4 fec5 	bl	8001a18 <printc>
			return false;
 801cc8e:	2300      	movs	r3, #0
 801cc90:	e004      	b.n	801cc9c <TCP_Send+0x88>
		}
	}
	else{
		printc(MinDelay, "Open Failed\n");
 801cc92:	490a      	ldr	r1, [pc, #40]	@ (801ccbc <TCP_Send+0xa8>)
 801cc94:	200a      	movs	r0, #10
 801cc96:	f7e4 febf 	bl	8001a18 <printc>
		return false;
 801cc9a:	2300      	movs	r3, #0

	}
}
 801cc9c:	4618      	mov	r0, r3
 801cc9e:	3770      	adds	r7, #112	@ 0x70
 801cca0:	46bd      	mov	sp, r7
 801cca2:	bd80      	pop	{r7, pc}
 801cca4:	0802429c 	.word	0x0802429c
 801cca8:	20015608 	.word	0x20015608
 801ccac:	080242b0 	.word	0x080242b0
 801ccb0:	080242b8 	.word	0x080242b8
 801ccb4:	080242d0 	.word	0x080242d0
 801ccb8:	080242e8 	.word	0x080242e8
 801ccbc:	08024310 	.word	0x08024310

0801ccc0 <TCP_DEACT>:
void TCP_DEACT()
{
 801ccc0:	b580      	push	{r7, lr}
 801ccc2:	af00      	add	r7, sp, #0
	if(EC200_Transmit("AT+QIDEACT=1\r\n",tcp_buff,2000))
 801ccc4:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 801ccc8:	490f      	ldr	r1, [pc, #60]	@ (801cd08 <TCP_DEACT+0x48>)
 801ccca:	4810      	ldr	r0, [pc, #64]	@ (801cd0c <TCP_DEACT+0x4c>)
 801cccc:	f7e4 fa6e 	bl	80011ac <EC200_Transmit>
 801ccd0:	4603      	mov	r3, r0
 801ccd2:	2b00      	cmp	r3, #0
 801ccd4:	d017      	beq.n	801cd06 <TCP_DEACT+0x46>
	    {
	    // Check if the response contains "OK" or "+QIURC: \"closed\",0"
	    if (strstr(tcp_buff, "OK") != NULL || strstr(tcp_buff, "+QIURC: \"closed\",0") != NULL) {
 801ccd6:	490e      	ldr	r1, [pc, #56]	@ (801cd10 <TCP_DEACT+0x50>)
 801ccd8:	480b      	ldr	r0, [pc, #44]	@ (801cd08 <TCP_DEACT+0x48>)
 801ccda:	f002 f959 	bl	801ef90 <strstr>
 801ccde:	4603      	mov	r3, r0
 801cce0:	2b00      	cmp	r3, #0
 801cce2:	d106      	bne.n	801ccf2 <TCP_DEACT+0x32>
 801cce4:	490b      	ldr	r1, [pc, #44]	@ (801cd14 <TCP_DEACT+0x54>)
 801cce6:	4808      	ldr	r0, [pc, #32]	@ (801cd08 <TCP_DEACT+0x48>)
 801cce8:	f002 f952 	bl	801ef90 <strstr>
 801ccec:	4603      	mov	r3, r0
 801ccee:	2b00      	cmp	r3, #0
 801ccf0:	d004      	beq.n	801ccfc <TCP_DEACT+0x3c>
	        printc(MinDelay, "Internet closed successfully\n");
 801ccf2:	4909      	ldr	r1, [pc, #36]	@ (801cd18 <TCP_DEACT+0x58>)
 801ccf4:	200a      	movs	r0, #10
 801ccf6:	f7e4 fe8f 	bl	8001a18 <printc>
 801ccfa:	e004      	b.n	801cd06 <TCP_DEACT+0x46>

	    } else {
	        printc(MinDelay, "Failed to close the Internet\n");
 801ccfc:	4907      	ldr	r1, [pc, #28]	@ (801cd1c <TCP_DEACT+0x5c>)
 801ccfe:	200a      	movs	r0, #10
 801cd00:	f7e4 fe8a 	bl	8001a18 <printc>
	        return false;
 801cd04:	bf00      	nop
	    }
}
}
 801cd06:	bd80      	pop	{r7, pc}
 801cd08:	20015608 	.word	0x20015608
 801cd0c:	08024114 	.word	0x08024114
 801cd10:	08024124 	.word	0x08024124
 801cd14:	08024128 	.word	0x08024128
 801cd18:	0802413c 	.word	0x0802413c
 801cd1c:	0802415c 	.word	0x0802415c

0801cd20 <atof>:
 801cd20:	2100      	movs	r1, #0
 801cd22:	f000 becb 	b.w	801dabc <strtod>

0801cd26 <atoi>:
 801cd26:	220a      	movs	r2, #10
 801cd28:	2100      	movs	r1, #0
 801cd2a:	f000 bf4f 	b.w	801dbcc <strtol>
	...

0801cd30 <malloc>:
 801cd30:	4b02      	ldr	r3, [pc, #8]	@ (801cd3c <malloc+0xc>)
 801cd32:	4601      	mov	r1, r0
 801cd34:	6818      	ldr	r0, [r3, #0]
 801cd36:	f000 b82d 	b.w	801cd94 <_malloc_r>
 801cd3a:	bf00      	nop
 801cd3c:	20000224 	.word	0x20000224

0801cd40 <free>:
 801cd40:	4b02      	ldr	r3, [pc, #8]	@ (801cd4c <free+0xc>)
 801cd42:	4601      	mov	r1, r0
 801cd44:	6818      	ldr	r0, [r3, #0]
 801cd46:	f003 b863 	b.w	801fe10 <_free_r>
 801cd4a:	bf00      	nop
 801cd4c:	20000224 	.word	0x20000224

0801cd50 <sbrk_aligned>:
 801cd50:	b570      	push	{r4, r5, r6, lr}
 801cd52:	4e0f      	ldr	r6, [pc, #60]	@ (801cd90 <sbrk_aligned+0x40>)
 801cd54:	460c      	mov	r4, r1
 801cd56:	4605      	mov	r5, r0
 801cd58:	6831      	ldr	r1, [r6, #0]
 801cd5a:	b911      	cbnz	r1, 801cd62 <sbrk_aligned+0x12>
 801cd5c:	f002 f966 	bl	801f02c <_sbrk_r>
 801cd60:	6030      	str	r0, [r6, #0]
 801cd62:	4621      	mov	r1, r4
 801cd64:	4628      	mov	r0, r5
 801cd66:	f002 f961 	bl	801f02c <_sbrk_r>
 801cd6a:	1c43      	adds	r3, r0, #1
 801cd6c:	d103      	bne.n	801cd76 <sbrk_aligned+0x26>
 801cd6e:	f04f 34ff 	mov.w	r4, #4294967295
 801cd72:	4620      	mov	r0, r4
 801cd74:	bd70      	pop	{r4, r5, r6, pc}
 801cd76:	1cc4      	adds	r4, r0, #3
 801cd78:	f024 0403 	bic.w	r4, r4, #3
 801cd7c:	42a0      	cmp	r0, r4
 801cd7e:	d0f8      	beq.n	801cd72 <sbrk_aligned+0x22>
 801cd80:	1a21      	subs	r1, r4, r0
 801cd82:	4628      	mov	r0, r5
 801cd84:	f002 f952 	bl	801f02c <_sbrk_r>
 801cd88:	3001      	adds	r0, #1
 801cd8a:	d1f2      	bne.n	801cd72 <sbrk_aligned+0x22>
 801cd8c:	e7ef      	b.n	801cd6e <sbrk_aligned+0x1e>
 801cd8e:	bf00      	nop
 801cd90:	20015718 	.word	0x20015718

0801cd94 <_malloc_r>:
 801cd94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cd98:	1ccd      	adds	r5, r1, #3
 801cd9a:	4606      	mov	r6, r0
 801cd9c:	f025 0503 	bic.w	r5, r5, #3
 801cda0:	3508      	adds	r5, #8
 801cda2:	2d0c      	cmp	r5, #12
 801cda4:	bf38      	it	cc
 801cda6:	250c      	movcc	r5, #12
 801cda8:	2d00      	cmp	r5, #0
 801cdaa:	db01      	blt.n	801cdb0 <_malloc_r+0x1c>
 801cdac:	42a9      	cmp	r1, r5
 801cdae:	d904      	bls.n	801cdba <_malloc_r+0x26>
 801cdb0:	230c      	movs	r3, #12
 801cdb2:	6033      	str	r3, [r6, #0]
 801cdb4:	2000      	movs	r0, #0
 801cdb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cdba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801ce90 <_malloc_r+0xfc>
 801cdbe:	f000 f869 	bl	801ce94 <__malloc_lock>
 801cdc2:	f8d8 3000 	ldr.w	r3, [r8]
 801cdc6:	461c      	mov	r4, r3
 801cdc8:	bb44      	cbnz	r4, 801ce1c <_malloc_r+0x88>
 801cdca:	4629      	mov	r1, r5
 801cdcc:	4630      	mov	r0, r6
 801cdce:	f7ff ffbf 	bl	801cd50 <sbrk_aligned>
 801cdd2:	1c43      	adds	r3, r0, #1
 801cdd4:	4604      	mov	r4, r0
 801cdd6:	d158      	bne.n	801ce8a <_malloc_r+0xf6>
 801cdd8:	f8d8 4000 	ldr.w	r4, [r8]
 801cddc:	4627      	mov	r7, r4
 801cdde:	2f00      	cmp	r7, #0
 801cde0:	d143      	bne.n	801ce6a <_malloc_r+0xd6>
 801cde2:	2c00      	cmp	r4, #0
 801cde4:	d04b      	beq.n	801ce7e <_malloc_r+0xea>
 801cde6:	6823      	ldr	r3, [r4, #0]
 801cde8:	4639      	mov	r1, r7
 801cdea:	4630      	mov	r0, r6
 801cdec:	eb04 0903 	add.w	r9, r4, r3
 801cdf0:	f002 f91c 	bl	801f02c <_sbrk_r>
 801cdf4:	4581      	cmp	r9, r0
 801cdf6:	d142      	bne.n	801ce7e <_malloc_r+0xea>
 801cdf8:	6821      	ldr	r1, [r4, #0]
 801cdfa:	4630      	mov	r0, r6
 801cdfc:	1a6d      	subs	r5, r5, r1
 801cdfe:	4629      	mov	r1, r5
 801ce00:	f7ff ffa6 	bl	801cd50 <sbrk_aligned>
 801ce04:	3001      	adds	r0, #1
 801ce06:	d03a      	beq.n	801ce7e <_malloc_r+0xea>
 801ce08:	6823      	ldr	r3, [r4, #0]
 801ce0a:	442b      	add	r3, r5
 801ce0c:	6023      	str	r3, [r4, #0]
 801ce0e:	f8d8 3000 	ldr.w	r3, [r8]
 801ce12:	685a      	ldr	r2, [r3, #4]
 801ce14:	bb62      	cbnz	r2, 801ce70 <_malloc_r+0xdc>
 801ce16:	f8c8 7000 	str.w	r7, [r8]
 801ce1a:	e00f      	b.n	801ce3c <_malloc_r+0xa8>
 801ce1c:	6822      	ldr	r2, [r4, #0]
 801ce1e:	1b52      	subs	r2, r2, r5
 801ce20:	d420      	bmi.n	801ce64 <_malloc_r+0xd0>
 801ce22:	2a0b      	cmp	r2, #11
 801ce24:	d917      	bls.n	801ce56 <_malloc_r+0xc2>
 801ce26:	1961      	adds	r1, r4, r5
 801ce28:	42a3      	cmp	r3, r4
 801ce2a:	6025      	str	r5, [r4, #0]
 801ce2c:	bf18      	it	ne
 801ce2e:	6059      	strne	r1, [r3, #4]
 801ce30:	6863      	ldr	r3, [r4, #4]
 801ce32:	bf08      	it	eq
 801ce34:	f8c8 1000 	streq.w	r1, [r8]
 801ce38:	5162      	str	r2, [r4, r5]
 801ce3a:	604b      	str	r3, [r1, #4]
 801ce3c:	4630      	mov	r0, r6
 801ce3e:	f000 f82f 	bl	801cea0 <__malloc_unlock>
 801ce42:	f104 000b 	add.w	r0, r4, #11
 801ce46:	1d23      	adds	r3, r4, #4
 801ce48:	f020 0007 	bic.w	r0, r0, #7
 801ce4c:	1ac2      	subs	r2, r0, r3
 801ce4e:	bf1c      	itt	ne
 801ce50:	1a1b      	subne	r3, r3, r0
 801ce52:	50a3      	strne	r3, [r4, r2]
 801ce54:	e7af      	b.n	801cdb6 <_malloc_r+0x22>
 801ce56:	6862      	ldr	r2, [r4, #4]
 801ce58:	42a3      	cmp	r3, r4
 801ce5a:	bf0c      	ite	eq
 801ce5c:	f8c8 2000 	streq.w	r2, [r8]
 801ce60:	605a      	strne	r2, [r3, #4]
 801ce62:	e7eb      	b.n	801ce3c <_malloc_r+0xa8>
 801ce64:	4623      	mov	r3, r4
 801ce66:	6864      	ldr	r4, [r4, #4]
 801ce68:	e7ae      	b.n	801cdc8 <_malloc_r+0x34>
 801ce6a:	463c      	mov	r4, r7
 801ce6c:	687f      	ldr	r7, [r7, #4]
 801ce6e:	e7b6      	b.n	801cdde <_malloc_r+0x4a>
 801ce70:	461a      	mov	r2, r3
 801ce72:	685b      	ldr	r3, [r3, #4]
 801ce74:	42a3      	cmp	r3, r4
 801ce76:	d1fb      	bne.n	801ce70 <_malloc_r+0xdc>
 801ce78:	2300      	movs	r3, #0
 801ce7a:	6053      	str	r3, [r2, #4]
 801ce7c:	e7de      	b.n	801ce3c <_malloc_r+0xa8>
 801ce7e:	230c      	movs	r3, #12
 801ce80:	4630      	mov	r0, r6
 801ce82:	6033      	str	r3, [r6, #0]
 801ce84:	f000 f80c 	bl	801cea0 <__malloc_unlock>
 801ce88:	e794      	b.n	801cdb4 <_malloc_r+0x20>
 801ce8a:	6005      	str	r5, [r0, #0]
 801ce8c:	e7d6      	b.n	801ce3c <_malloc_r+0xa8>
 801ce8e:	bf00      	nop
 801ce90:	2001571c 	.word	0x2001571c

0801ce94 <__malloc_lock>:
 801ce94:	4801      	ldr	r0, [pc, #4]	@ (801ce9c <__malloc_lock+0x8>)
 801ce96:	f002 b916 	b.w	801f0c6 <__retarget_lock_acquire_recursive>
 801ce9a:	bf00      	nop
 801ce9c:	20015860 	.word	0x20015860

0801cea0 <__malloc_unlock>:
 801cea0:	4801      	ldr	r0, [pc, #4]	@ (801cea8 <__malloc_unlock+0x8>)
 801cea2:	f002 b911 	b.w	801f0c8 <__retarget_lock_release_recursive>
 801cea6:	bf00      	nop
 801cea8:	20015860 	.word	0x20015860

0801ceac <sulp>:
 801ceac:	b570      	push	{r4, r5, r6, lr}
 801ceae:	4604      	mov	r4, r0
 801ceb0:	460d      	mov	r5, r1
 801ceb2:	4616      	mov	r6, r2
 801ceb4:	ec45 4b10 	vmov	d0, r4, r5
 801ceb8:	f003 feb6 	bl	8020c28 <__ulp>
 801cebc:	ec51 0b10 	vmov	r0, r1, d0
 801cec0:	b17e      	cbz	r6, 801cee2 <sulp+0x36>
 801cec2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801cec6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801ceca:	2b00      	cmp	r3, #0
 801cecc:	dd09      	ble.n	801cee2 <sulp+0x36>
 801cece:	051b      	lsls	r3, r3, #20
 801ced0:	2400      	movs	r4, #0
 801ced2:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 801ced6:	4622      	mov	r2, r4
 801ced8:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 801cedc:	462b      	mov	r3, r5
 801cede:	f7e3 fba5 	bl	800062c <__aeabi_dmul>
 801cee2:	ec41 0b10 	vmov	d0, r0, r1
 801cee6:	bd70      	pop	{r4, r5, r6, pc}

0801cee8 <_strtod_l>:
 801cee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ceec:	b09f      	sub	sp, #124	@ 0x7c
 801ceee:	460c      	mov	r4, r1
 801cef0:	f04f 0a00 	mov.w	sl, #0
 801cef4:	f04f 0b00 	mov.w	fp, #0
 801cef8:	9217      	str	r2, [sp, #92]	@ 0x5c
 801cefa:	2200      	movs	r2, #0
 801cefc:	9005      	str	r0, [sp, #20]
 801cefe:	921a      	str	r2, [sp, #104]	@ 0x68
 801cf00:	460a      	mov	r2, r1
 801cf02:	9219      	str	r2, [sp, #100]	@ 0x64
 801cf04:	7811      	ldrb	r1, [r2, #0]
 801cf06:	292b      	cmp	r1, #43	@ 0x2b
 801cf08:	d04a      	beq.n	801cfa0 <_strtod_l+0xb8>
 801cf0a:	d838      	bhi.n	801cf7e <_strtod_l+0x96>
 801cf0c:	290d      	cmp	r1, #13
 801cf0e:	d832      	bhi.n	801cf76 <_strtod_l+0x8e>
 801cf10:	2908      	cmp	r1, #8
 801cf12:	d832      	bhi.n	801cf7a <_strtod_l+0x92>
 801cf14:	2900      	cmp	r1, #0
 801cf16:	d03b      	beq.n	801cf90 <_strtod_l+0xa8>
 801cf18:	2200      	movs	r2, #0
 801cf1a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801cf1c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 801cf1e:	782a      	ldrb	r2, [r5, #0]
 801cf20:	2a30      	cmp	r2, #48	@ 0x30
 801cf22:	f040 80b3 	bne.w	801d08c <_strtod_l+0x1a4>
 801cf26:	786a      	ldrb	r2, [r5, #1]
 801cf28:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801cf2c:	2a58      	cmp	r2, #88	@ 0x58
 801cf2e:	d16e      	bne.n	801d00e <_strtod_l+0x126>
 801cf30:	9302      	str	r3, [sp, #8]
 801cf32:	a919      	add	r1, sp, #100	@ 0x64
 801cf34:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801cf36:	4a90      	ldr	r2, [pc, #576]	@ (801d178 <_strtod_l+0x290>)
 801cf38:	9301      	str	r3, [sp, #4]
 801cf3a:	ab1a      	add	r3, sp, #104	@ 0x68
 801cf3c:	9805      	ldr	r0, [sp, #20]
 801cf3e:	9300      	str	r3, [sp, #0]
 801cf40:	ab1b      	add	r3, sp, #108	@ 0x6c
 801cf42:	f003 f815 	bl	801ff70 <__gethex>
 801cf46:	f010 060f 	ands.w	r6, r0, #15
 801cf4a:	4604      	mov	r4, r0
 801cf4c:	d005      	beq.n	801cf5a <_strtod_l+0x72>
 801cf4e:	2e06      	cmp	r6, #6
 801cf50:	d128      	bne.n	801cfa4 <_strtod_l+0xbc>
 801cf52:	3501      	adds	r5, #1
 801cf54:	2300      	movs	r3, #0
 801cf56:	9519      	str	r5, [sp, #100]	@ 0x64
 801cf58:	930b      	str	r3, [sp, #44]	@ 0x2c
 801cf5a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801cf5c:	2b00      	cmp	r3, #0
 801cf5e:	f040 858e 	bne.w	801da7e <_strtod_l+0xb96>
 801cf62:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801cf64:	b1cb      	cbz	r3, 801cf9a <_strtod_l+0xb2>
 801cf66:	4652      	mov	r2, sl
 801cf68:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 801cf6c:	ec43 2b10 	vmov	d0, r2, r3
 801cf70:	b01f      	add	sp, #124	@ 0x7c
 801cf72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cf76:	2920      	cmp	r1, #32
 801cf78:	d1ce      	bne.n	801cf18 <_strtod_l+0x30>
 801cf7a:	3201      	adds	r2, #1
 801cf7c:	e7c1      	b.n	801cf02 <_strtod_l+0x1a>
 801cf7e:	292d      	cmp	r1, #45	@ 0x2d
 801cf80:	d1ca      	bne.n	801cf18 <_strtod_l+0x30>
 801cf82:	2101      	movs	r1, #1
 801cf84:	910b      	str	r1, [sp, #44]	@ 0x2c
 801cf86:	1c51      	adds	r1, r2, #1
 801cf88:	9119      	str	r1, [sp, #100]	@ 0x64
 801cf8a:	7852      	ldrb	r2, [r2, #1]
 801cf8c:	2a00      	cmp	r2, #0
 801cf8e:	d1c5      	bne.n	801cf1c <_strtod_l+0x34>
 801cf90:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801cf92:	9419      	str	r4, [sp, #100]	@ 0x64
 801cf94:	2b00      	cmp	r3, #0
 801cf96:	f040 8570 	bne.w	801da7a <_strtod_l+0xb92>
 801cf9a:	4652      	mov	r2, sl
 801cf9c:	465b      	mov	r3, fp
 801cf9e:	e7e5      	b.n	801cf6c <_strtod_l+0x84>
 801cfa0:	2100      	movs	r1, #0
 801cfa2:	e7ef      	b.n	801cf84 <_strtod_l+0x9c>
 801cfa4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801cfa6:	b13a      	cbz	r2, 801cfb8 <_strtod_l+0xd0>
 801cfa8:	2135      	movs	r1, #53	@ 0x35
 801cfaa:	a81c      	add	r0, sp, #112	@ 0x70
 801cfac:	f003 ff3a 	bl	8020e24 <__copybits>
 801cfb0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801cfb2:	9805      	ldr	r0, [sp, #20]
 801cfb4:	f003 fafe 	bl	80205b4 <_Bfree>
 801cfb8:	3e01      	subs	r6, #1
 801cfba:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801cfbc:	2e04      	cmp	r6, #4
 801cfbe:	d806      	bhi.n	801cfce <_strtod_l+0xe6>
 801cfc0:	e8df f006 	tbb	[pc, r6]
 801cfc4:	201d0314 	.word	0x201d0314
 801cfc8:	14          	.byte	0x14
 801cfc9:	00          	.byte	0x00
 801cfca:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 801cfce:	05e1      	lsls	r1, r4, #23
 801cfd0:	bf48      	it	mi
 801cfd2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 801cfd6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801cfda:	0d1b      	lsrs	r3, r3, #20
 801cfdc:	051b      	lsls	r3, r3, #20
 801cfde:	2b00      	cmp	r3, #0
 801cfe0:	d1bb      	bne.n	801cf5a <_strtod_l+0x72>
 801cfe2:	f002 f845 	bl	801f070 <__errno>
 801cfe6:	2322      	movs	r3, #34	@ 0x22
 801cfe8:	6003      	str	r3, [r0, #0]
 801cfea:	e7b6      	b.n	801cf5a <_strtod_l+0x72>
 801cfec:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 801cff0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801cff4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 801cff8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801cffc:	e7e7      	b.n	801cfce <_strtod_l+0xe6>
 801cffe:	f8df b180 	ldr.w	fp, [pc, #384]	@ 801d180 <_strtod_l+0x298>
 801d002:	e7e4      	b.n	801cfce <_strtod_l+0xe6>
 801d004:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 801d008:	f04f 3aff 	mov.w	sl, #4294967295
 801d00c:	e7df      	b.n	801cfce <_strtod_l+0xe6>
 801d00e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801d010:	1c5a      	adds	r2, r3, #1
 801d012:	9219      	str	r2, [sp, #100]	@ 0x64
 801d014:	785b      	ldrb	r3, [r3, #1]
 801d016:	2b30      	cmp	r3, #48	@ 0x30
 801d018:	d0f9      	beq.n	801d00e <_strtod_l+0x126>
 801d01a:	2b00      	cmp	r3, #0
 801d01c:	d09d      	beq.n	801cf5a <_strtod_l+0x72>
 801d01e:	2301      	movs	r3, #1
 801d020:	9309      	str	r3, [sp, #36]	@ 0x24
 801d022:	220a      	movs	r2, #10
 801d024:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801d026:	930c      	str	r3, [sp, #48]	@ 0x30
 801d028:	2300      	movs	r3, #0
 801d02a:	461f      	mov	r7, r3
 801d02c:	9308      	str	r3, [sp, #32]
 801d02e:	930a      	str	r3, [sp, #40]	@ 0x28
 801d030:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801d032:	7805      	ldrb	r5, [r0, #0]
 801d034:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 801d038:	b2d9      	uxtb	r1, r3
 801d03a:	2909      	cmp	r1, #9
 801d03c:	d928      	bls.n	801d090 <_strtod_l+0x1a8>
 801d03e:	2201      	movs	r2, #1
 801d040:	494e      	ldr	r1, [pc, #312]	@ (801d17c <_strtod_l+0x294>)
 801d042:	f001 ff24 	bl	801ee8e <strncmp>
 801d046:	2800      	cmp	r0, #0
 801d048:	d033      	beq.n	801d0b2 <_strtod_l+0x1ca>
 801d04a:	2000      	movs	r0, #0
 801d04c:	462a      	mov	r2, r5
 801d04e:	463d      	mov	r5, r7
 801d050:	4681      	mov	r9, r0
 801d052:	4603      	mov	r3, r0
 801d054:	2a65      	cmp	r2, #101	@ 0x65
 801d056:	d001      	beq.n	801d05c <_strtod_l+0x174>
 801d058:	2a45      	cmp	r2, #69	@ 0x45
 801d05a:	d114      	bne.n	801d086 <_strtod_l+0x19e>
 801d05c:	b91d      	cbnz	r5, 801d066 <_strtod_l+0x17e>
 801d05e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d060:	4302      	orrs	r2, r0
 801d062:	d095      	beq.n	801cf90 <_strtod_l+0xa8>
 801d064:	2500      	movs	r5, #0
 801d066:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 801d068:	1c62      	adds	r2, r4, #1
 801d06a:	9219      	str	r2, [sp, #100]	@ 0x64
 801d06c:	7862      	ldrb	r2, [r4, #1]
 801d06e:	2a2b      	cmp	r2, #43	@ 0x2b
 801d070:	d078      	beq.n	801d164 <_strtod_l+0x27c>
 801d072:	2a2d      	cmp	r2, #45	@ 0x2d
 801d074:	d07c      	beq.n	801d170 <_strtod_l+0x288>
 801d076:	f04f 0c00 	mov.w	ip, #0
 801d07a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 801d07e:	2909      	cmp	r1, #9
 801d080:	f240 8084 	bls.w	801d18c <_strtod_l+0x2a4>
 801d084:	9419      	str	r4, [sp, #100]	@ 0x64
 801d086:	f04f 0800 	mov.w	r8, #0
 801d08a:	e0a4      	b.n	801d1d6 <_strtod_l+0x2ee>
 801d08c:	2300      	movs	r3, #0
 801d08e:	e7c7      	b.n	801d020 <_strtod_l+0x138>
 801d090:	2f08      	cmp	r7, #8
 801d092:	f100 0001 	add.w	r0, r0, #1
 801d096:	f107 0701 	add.w	r7, r7, #1
 801d09a:	bfd5      	itete	le
 801d09c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 801d09e:	9908      	ldrgt	r1, [sp, #32]
 801d0a0:	fb02 3301 	mlale	r3, r2, r1, r3
 801d0a4:	fb02 3301 	mlagt	r3, r2, r1, r3
 801d0a8:	bfd4      	ite	le
 801d0aa:	930a      	strle	r3, [sp, #40]	@ 0x28
 801d0ac:	9308      	strgt	r3, [sp, #32]
 801d0ae:	9019      	str	r0, [sp, #100]	@ 0x64
 801d0b0:	e7be      	b.n	801d030 <_strtod_l+0x148>
 801d0b2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801d0b4:	1c5a      	adds	r2, r3, #1
 801d0b6:	9219      	str	r2, [sp, #100]	@ 0x64
 801d0b8:	785a      	ldrb	r2, [r3, #1]
 801d0ba:	b37f      	cbz	r7, 801d11c <_strtod_l+0x234>
 801d0bc:	4681      	mov	r9, r0
 801d0be:	463d      	mov	r5, r7
 801d0c0:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 801d0c4:	2b09      	cmp	r3, #9
 801d0c6:	d912      	bls.n	801d0ee <_strtod_l+0x206>
 801d0c8:	2301      	movs	r3, #1
 801d0ca:	e7c3      	b.n	801d054 <_strtod_l+0x16c>
 801d0cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801d0ce:	3001      	adds	r0, #1
 801d0d0:	1c5a      	adds	r2, r3, #1
 801d0d2:	9219      	str	r2, [sp, #100]	@ 0x64
 801d0d4:	785a      	ldrb	r2, [r3, #1]
 801d0d6:	2a30      	cmp	r2, #48	@ 0x30
 801d0d8:	d0f8      	beq.n	801d0cc <_strtod_l+0x1e4>
 801d0da:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 801d0de:	2b08      	cmp	r3, #8
 801d0e0:	f200 84d2 	bhi.w	801da88 <_strtod_l+0xba0>
 801d0e4:	4681      	mov	r9, r0
 801d0e6:	2000      	movs	r0, #0
 801d0e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801d0ea:	4605      	mov	r5, r0
 801d0ec:	930c      	str	r3, [sp, #48]	@ 0x30
 801d0ee:	3a30      	subs	r2, #48	@ 0x30
 801d0f0:	f100 0301 	add.w	r3, r0, #1
 801d0f4:	d02a      	beq.n	801d14c <_strtod_l+0x264>
 801d0f6:	4499      	add	r9, r3
 801d0f8:	eb00 0c05 	add.w	ip, r0, r5
 801d0fc:	462b      	mov	r3, r5
 801d0fe:	210a      	movs	r1, #10
 801d100:	4563      	cmp	r3, ip
 801d102:	d10d      	bne.n	801d120 <_strtod_l+0x238>
 801d104:	1c69      	adds	r1, r5, #1
 801d106:	4401      	add	r1, r0
 801d108:	4428      	add	r0, r5
 801d10a:	2808      	cmp	r0, #8
 801d10c:	dc16      	bgt.n	801d13c <_strtod_l+0x254>
 801d10e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801d110:	230a      	movs	r3, #10
 801d112:	fb03 2300 	mla	r3, r3, r0, r2
 801d116:	930a      	str	r3, [sp, #40]	@ 0x28
 801d118:	2300      	movs	r3, #0
 801d11a:	e018      	b.n	801d14e <_strtod_l+0x266>
 801d11c:	4638      	mov	r0, r7
 801d11e:	e7da      	b.n	801d0d6 <_strtod_l+0x1ee>
 801d120:	2b08      	cmp	r3, #8
 801d122:	f103 0301 	add.w	r3, r3, #1
 801d126:	dc03      	bgt.n	801d130 <_strtod_l+0x248>
 801d128:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801d12a:	434e      	muls	r6, r1
 801d12c:	960a      	str	r6, [sp, #40]	@ 0x28
 801d12e:	e7e7      	b.n	801d100 <_strtod_l+0x218>
 801d130:	2b10      	cmp	r3, #16
 801d132:	bfde      	ittt	le
 801d134:	9e08      	ldrle	r6, [sp, #32]
 801d136:	434e      	mulle	r6, r1
 801d138:	9608      	strle	r6, [sp, #32]
 801d13a:	e7e1      	b.n	801d100 <_strtod_l+0x218>
 801d13c:	280f      	cmp	r0, #15
 801d13e:	dceb      	bgt.n	801d118 <_strtod_l+0x230>
 801d140:	9808      	ldr	r0, [sp, #32]
 801d142:	230a      	movs	r3, #10
 801d144:	fb03 2300 	mla	r3, r3, r0, r2
 801d148:	9308      	str	r3, [sp, #32]
 801d14a:	e7e5      	b.n	801d118 <_strtod_l+0x230>
 801d14c:	4629      	mov	r1, r5
 801d14e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801d150:	460d      	mov	r5, r1
 801d152:	1c50      	adds	r0, r2, #1
 801d154:	9019      	str	r0, [sp, #100]	@ 0x64
 801d156:	4618      	mov	r0, r3
 801d158:	7852      	ldrb	r2, [r2, #1]
 801d15a:	e7b1      	b.n	801d0c0 <_strtod_l+0x1d8>
 801d15c:	f04f 0900 	mov.w	r9, #0
 801d160:	2301      	movs	r3, #1
 801d162:	e77c      	b.n	801d05e <_strtod_l+0x176>
 801d164:	f04f 0c00 	mov.w	ip, #0
 801d168:	1ca2      	adds	r2, r4, #2
 801d16a:	9219      	str	r2, [sp, #100]	@ 0x64
 801d16c:	78a2      	ldrb	r2, [r4, #2]
 801d16e:	e784      	b.n	801d07a <_strtod_l+0x192>
 801d170:	f04f 0c01 	mov.w	ip, #1
 801d174:	e7f8      	b.n	801d168 <_strtod_l+0x280>
 801d176:	bf00      	nop
 801d178:	080243bc 	.word	0x080243bc
 801d17c:	080243a4 	.word	0x080243a4
 801d180:	7ff00000 	.word	0x7ff00000
 801d184:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801d186:	1c51      	adds	r1, r2, #1
 801d188:	9119      	str	r1, [sp, #100]	@ 0x64
 801d18a:	7852      	ldrb	r2, [r2, #1]
 801d18c:	2a30      	cmp	r2, #48	@ 0x30
 801d18e:	d0f9      	beq.n	801d184 <_strtod_l+0x29c>
 801d190:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 801d194:	2908      	cmp	r1, #8
 801d196:	f63f af76 	bhi.w	801d086 <_strtod_l+0x19e>
 801d19a:	3a30      	subs	r2, #48	@ 0x30
 801d19c:	f04f 080a 	mov.w	r8, #10
 801d1a0:	920e      	str	r2, [sp, #56]	@ 0x38
 801d1a2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801d1a4:	920f      	str	r2, [sp, #60]	@ 0x3c
 801d1a6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801d1a8:	1c56      	adds	r6, r2, #1
 801d1aa:	9619      	str	r6, [sp, #100]	@ 0x64
 801d1ac:	7852      	ldrb	r2, [r2, #1]
 801d1ae:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 801d1b2:	f1be 0f09 	cmp.w	lr, #9
 801d1b6:	d939      	bls.n	801d22c <_strtod_l+0x344>
 801d1b8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801d1ba:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 801d1be:	1a76      	subs	r6, r6, r1
 801d1c0:	2e08      	cmp	r6, #8
 801d1c2:	dc03      	bgt.n	801d1cc <_strtod_l+0x2e4>
 801d1c4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801d1c6:	4588      	cmp	r8, r1
 801d1c8:	bfa8      	it	ge
 801d1ca:	4688      	movge	r8, r1
 801d1cc:	f1bc 0f00 	cmp.w	ip, #0
 801d1d0:	d001      	beq.n	801d1d6 <_strtod_l+0x2ee>
 801d1d2:	f1c8 0800 	rsb	r8, r8, #0
 801d1d6:	2d00      	cmp	r5, #0
 801d1d8:	d14e      	bne.n	801d278 <_strtod_l+0x390>
 801d1da:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801d1dc:	4308      	orrs	r0, r1
 801d1de:	f47f aebc 	bne.w	801cf5a <_strtod_l+0x72>
 801d1e2:	2b00      	cmp	r3, #0
 801d1e4:	f47f aed4 	bne.w	801cf90 <_strtod_l+0xa8>
 801d1e8:	2a69      	cmp	r2, #105	@ 0x69
 801d1ea:	d028      	beq.n	801d23e <_strtod_l+0x356>
 801d1ec:	dc25      	bgt.n	801d23a <_strtod_l+0x352>
 801d1ee:	2a49      	cmp	r2, #73	@ 0x49
 801d1f0:	d025      	beq.n	801d23e <_strtod_l+0x356>
 801d1f2:	2a4e      	cmp	r2, #78	@ 0x4e
 801d1f4:	f47f aecc 	bne.w	801cf90 <_strtod_l+0xa8>
 801d1f8:	499b      	ldr	r1, [pc, #620]	@ (801d468 <_strtod_l+0x580>)
 801d1fa:	a819      	add	r0, sp, #100	@ 0x64
 801d1fc:	f003 f8d8 	bl	80203b0 <__match>
 801d200:	2800      	cmp	r0, #0
 801d202:	f43f aec5 	beq.w	801cf90 <_strtod_l+0xa8>
 801d206:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801d208:	781b      	ldrb	r3, [r3, #0]
 801d20a:	2b28      	cmp	r3, #40	@ 0x28
 801d20c:	d12e      	bne.n	801d26c <_strtod_l+0x384>
 801d20e:	aa1c      	add	r2, sp, #112	@ 0x70
 801d210:	4996      	ldr	r1, [pc, #600]	@ (801d46c <_strtod_l+0x584>)
 801d212:	a819      	add	r0, sp, #100	@ 0x64
 801d214:	f003 f8e0 	bl	80203d8 <__hexnan>
 801d218:	2805      	cmp	r0, #5
 801d21a:	d127      	bne.n	801d26c <_strtod_l+0x384>
 801d21c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801d21e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 801d222:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 801d226:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 801d22a:	e696      	b.n	801cf5a <_strtod_l+0x72>
 801d22c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801d22e:	fb08 2101 	mla	r1, r8, r1, r2
 801d232:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 801d236:	920e      	str	r2, [sp, #56]	@ 0x38
 801d238:	e7b5      	b.n	801d1a6 <_strtod_l+0x2be>
 801d23a:	2a6e      	cmp	r2, #110	@ 0x6e
 801d23c:	e7da      	b.n	801d1f4 <_strtod_l+0x30c>
 801d23e:	498c      	ldr	r1, [pc, #560]	@ (801d470 <_strtod_l+0x588>)
 801d240:	a819      	add	r0, sp, #100	@ 0x64
 801d242:	f003 f8b5 	bl	80203b0 <__match>
 801d246:	2800      	cmp	r0, #0
 801d248:	f43f aea2 	beq.w	801cf90 <_strtod_l+0xa8>
 801d24c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801d24e:	a819      	add	r0, sp, #100	@ 0x64
 801d250:	4988      	ldr	r1, [pc, #544]	@ (801d474 <_strtod_l+0x58c>)
 801d252:	3b01      	subs	r3, #1
 801d254:	9319      	str	r3, [sp, #100]	@ 0x64
 801d256:	f003 f8ab 	bl	80203b0 <__match>
 801d25a:	b910      	cbnz	r0, 801d262 <_strtod_l+0x37a>
 801d25c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801d25e:	3301      	adds	r3, #1
 801d260:	9319      	str	r3, [sp, #100]	@ 0x64
 801d262:	f8df b220 	ldr.w	fp, [pc, #544]	@ 801d484 <_strtod_l+0x59c>
 801d266:	f04f 0a00 	mov.w	sl, #0
 801d26a:	e676      	b.n	801cf5a <_strtod_l+0x72>
 801d26c:	4882      	ldr	r0, [pc, #520]	@ (801d478 <_strtod_l+0x590>)
 801d26e:	f001 ff4f 	bl	801f110 <nan>
 801d272:	ec5b ab10 	vmov	sl, fp, d0
 801d276:	e670      	b.n	801cf5a <_strtod_l+0x72>
 801d278:	eba8 0309 	sub.w	r3, r8, r9
 801d27c:	2f00      	cmp	r7, #0
 801d27e:	bf08      	it	eq
 801d280:	462f      	moveq	r7, r5
 801d282:	2d10      	cmp	r5, #16
 801d284:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801d286:	462c      	mov	r4, r5
 801d288:	9309      	str	r3, [sp, #36]	@ 0x24
 801d28a:	bfa8      	it	ge
 801d28c:	2410      	movge	r4, #16
 801d28e:	f7e3 f953 	bl	8000538 <__aeabi_ui2d>
 801d292:	2d09      	cmp	r5, #9
 801d294:	4682      	mov	sl, r0
 801d296:	468b      	mov	fp, r1
 801d298:	dc13      	bgt.n	801d2c2 <_strtod_l+0x3da>
 801d29a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d29c:	2b00      	cmp	r3, #0
 801d29e:	f43f ae5c 	beq.w	801cf5a <_strtod_l+0x72>
 801d2a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d2a4:	dd78      	ble.n	801d398 <_strtod_l+0x4b0>
 801d2a6:	2b16      	cmp	r3, #22
 801d2a8:	dc5f      	bgt.n	801d36a <_strtod_l+0x482>
 801d2aa:	4974      	ldr	r1, [pc, #464]	@ (801d47c <_strtod_l+0x594>)
 801d2ac:	4652      	mov	r2, sl
 801d2ae:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801d2b2:	465b      	mov	r3, fp
 801d2b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d2b8:	f7e3 f9b8 	bl	800062c <__aeabi_dmul>
 801d2bc:	4682      	mov	sl, r0
 801d2be:	468b      	mov	fp, r1
 801d2c0:	e64b      	b.n	801cf5a <_strtod_l+0x72>
 801d2c2:	4b6e      	ldr	r3, [pc, #440]	@ (801d47c <_strtod_l+0x594>)
 801d2c4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801d2c8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 801d2cc:	f7e3 f9ae 	bl	800062c <__aeabi_dmul>
 801d2d0:	4682      	mov	sl, r0
 801d2d2:	468b      	mov	fp, r1
 801d2d4:	9808      	ldr	r0, [sp, #32]
 801d2d6:	f7e3 f92f 	bl	8000538 <__aeabi_ui2d>
 801d2da:	4602      	mov	r2, r0
 801d2dc:	460b      	mov	r3, r1
 801d2de:	4650      	mov	r0, sl
 801d2e0:	4659      	mov	r1, fp
 801d2e2:	f7e2 ffed 	bl	80002c0 <__adddf3>
 801d2e6:	2d0f      	cmp	r5, #15
 801d2e8:	4682      	mov	sl, r0
 801d2ea:	468b      	mov	fp, r1
 801d2ec:	ddd5      	ble.n	801d29a <_strtod_l+0x3b2>
 801d2ee:	1b2c      	subs	r4, r5, r4
 801d2f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d2f2:	441c      	add	r4, r3
 801d2f4:	2c00      	cmp	r4, #0
 801d2f6:	f340 8096 	ble.w	801d426 <_strtod_l+0x53e>
 801d2fa:	f014 030f 	ands.w	r3, r4, #15
 801d2fe:	d00a      	beq.n	801d316 <_strtod_l+0x42e>
 801d300:	495e      	ldr	r1, [pc, #376]	@ (801d47c <_strtod_l+0x594>)
 801d302:	4652      	mov	r2, sl
 801d304:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801d308:	465b      	mov	r3, fp
 801d30a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d30e:	f7e3 f98d 	bl	800062c <__aeabi_dmul>
 801d312:	4682      	mov	sl, r0
 801d314:	468b      	mov	fp, r1
 801d316:	f034 040f 	bics.w	r4, r4, #15
 801d31a:	d073      	beq.n	801d404 <_strtod_l+0x51c>
 801d31c:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 801d320:	dd48      	ble.n	801d3b4 <_strtod_l+0x4cc>
 801d322:	2400      	movs	r4, #0
 801d324:	46a0      	mov	r8, r4
 801d326:	46a1      	mov	r9, r4
 801d328:	940a      	str	r4, [sp, #40]	@ 0x28
 801d32a:	2322      	movs	r3, #34	@ 0x22
 801d32c:	9a05      	ldr	r2, [sp, #20]
 801d32e:	f8df b154 	ldr.w	fp, [pc, #340]	@ 801d484 <_strtod_l+0x59c>
 801d332:	f04f 0a00 	mov.w	sl, #0
 801d336:	6013      	str	r3, [r2, #0]
 801d338:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d33a:	2b00      	cmp	r3, #0
 801d33c:	f43f ae0d 	beq.w	801cf5a <_strtod_l+0x72>
 801d340:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801d342:	9805      	ldr	r0, [sp, #20]
 801d344:	f003 f936 	bl	80205b4 <_Bfree>
 801d348:	4649      	mov	r1, r9
 801d34a:	9805      	ldr	r0, [sp, #20]
 801d34c:	f003 f932 	bl	80205b4 <_Bfree>
 801d350:	4641      	mov	r1, r8
 801d352:	9805      	ldr	r0, [sp, #20]
 801d354:	f003 f92e 	bl	80205b4 <_Bfree>
 801d358:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801d35a:	9805      	ldr	r0, [sp, #20]
 801d35c:	f003 f92a 	bl	80205b4 <_Bfree>
 801d360:	4621      	mov	r1, r4
 801d362:	9805      	ldr	r0, [sp, #20]
 801d364:	f003 f926 	bl	80205b4 <_Bfree>
 801d368:	e5f7      	b.n	801cf5a <_strtod_l+0x72>
 801d36a:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 801d36e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d370:	4293      	cmp	r3, r2
 801d372:	dbbc      	blt.n	801d2ee <_strtod_l+0x406>
 801d374:	f1c5 050f 	rsb	r5, r5, #15
 801d378:	4c40      	ldr	r4, [pc, #256]	@ (801d47c <_strtod_l+0x594>)
 801d37a:	4652      	mov	r2, sl
 801d37c:	465b      	mov	r3, fp
 801d37e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801d382:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d386:	f7e3 f951 	bl	800062c <__aeabi_dmul>
 801d38a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d38c:	1b5d      	subs	r5, r3, r5
 801d38e:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801d392:	e9d4 2300 	ldrd	r2, r3, [r4]
 801d396:	e78f      	b.n	801d2b8 <_strtod_l+0x3d0>
 801d398:	3316      	adds	r3, #22
 801d39a:	dba8      	blt.n	801d2ee <_strtod_l+0x406>
 801d39c:	eba9 0808 	sub.w	r8, r9, r8
 801d3a0:	4b36      	ldr	r3, [pc, #216]	@ (801d47c <_strtod_l+0x594>)
 801d3a2:	4650      	mov	r0, sl
 801d3a4:	4659      	mov	r1, fp
 801d3a6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 801d3aa:	e9d8 2300 	ldrd	r2, r3, [r8]
 801d3ae:	f7e3 fa67 	bl	8000880 <__aeabi_ddiv>
 801d3b2:	e783      	b.n	801d2bc <_strtod_l+0x3d4>
 801d3b4:	4b32      	ldr	r3, [pc, #200]	@ (801d480 <_strtod_l+0x598>)
 801d3b6:	1124      	asrs	r4, r4, #4
 801d3b8:	4650      	mov	r0, sl
 801d3ba:	4659      	mov	r1, fp
 801d3bc:	9308      	str	r3, [sp, #32]
 801d3be:	2300      	movs	r3, #0
 801d3c0:	461e      	mov	r6, r3
 801d3c2:	2c01      	cmp	r4, #1
 801d3c4:	dc21      	bgt.n	801d40a <_strtod_l+0x522>
 801d3c6:	b10b      	cbz	r3, 801d3cc <_strtod_l+0x4e4>
 801d3c8:	4682      	mov	sl, r0
 801d3ca:	468b      	mov	fp, r1
 801d3cc:	492c      	ldr	r1, [pc, #176]	@ (801d480 <_strtod_l+0x598>)
 801d3ce:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 801d3d2:	4652      	mov	r2, sl
 801d3d4:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 801d3d8:	465b      	mov	r3, fp
 801d3da:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d3de:	f7e3 f925 	bl	800062c <__aeabi_dmul>
 801d3e2:	4b28      	ldr	r3, [pc, #160]	@ (801d484 <_strtod_l+0x59c>)
 801d3e4:	460a      	mov	r2, r1
 801d3e6:	4682      	mov	sl, r0
 801d3e8:	400b      	ands	r3, r1
 801d3ea:	4927      	ldr	r1, [pc, #156]	@ (801d488 <_strtod_l+0x5a0>)
 801d3ec:	428b      	cmp	r3, r1
 801d3ee:	d898      	bhi.n	801d322 <_strtod_l+0x43a>
 801d3f0:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 801d3f4:	428b      	cmp	r3, r1
 801d3f6:	bf86      	itte	hi
 801d3f8:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 801d48c <_strtod_l+0x5a4>
 801d3fc:	f04f 3aff 	movhi.w	sl, #4294967295
 801d400:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 801d404:	2300      	movs	r3, #0
 801d406:	9308      	str	r3, [sp, #32]
 801d408:	e07a      	b.n	801d500 <_strtod_l+0x618>
 801d40a:	07e2      	lsls	r2, r4, #31
 801d40c:	d505      	bpl.n	801d41a <_strtod_l+0x532>
 801d40e:	9b08      	ldr	r3, [sp, #32]
 801d410:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d414:	f7e3 f90a 	bl	800062c <__aeabi_dmul>
 801d418:	2301      	movs	r3, #1
 801d41a:	9a08      	ldr	r2, [sp, #32]
 801d41c:	3601      	adds	r6, #1
 801d41e:	1064      	asrs	r4, r4, #1
 801d420:	3208      	adds	r2, #8
 801d422:	9208      	str	r2, [sp, #32]
 801d424:	e7cd      	b.n	801d3c2 <_strtod_l+0x4da>
 801d426:	d0ed      	beq.n	801d404 <_strtod_l+0x51c>
 801d428:	4264      	negs	r4, r4
 801d42a:	f014 020f 	ands.w	r2, r4, #15
 801d42e:	d00a      	beq.n	801d446 <_strtod_l+0x55e>
 801d430:	4b12      	ldr	r3, [pc, #72]	@ (801d47c <_strtod_l+0x594>)
 801d432:	4650      	mov	r0, sl
 801d434:	4659      	mov	r1, fp
 801d436:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801d43a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d43e:	f7e3 fa1f 	bl	8000880 <__aeabi_ddiv>
 801d442:	4682      	mov	sl, r0
 801d444:	468b      	mov	fp, r1
 801d446:	1124      	asrs	r4, r4, #4
 801d448:	d0dc      	beq.n	801d404 <_strtod_l+0x51c>
 801d44a:	2c1f      	cmp	r4, #31
 801d44c:	dd20      	ble.n	801d490 <_strtod_l+0x5a8>
 801d44e:	2400      	movs	r4, #0
 801d450:	46a0      	mov	r8, r4
 801d452:	46a1      	mov	r9, r4
 801d454:	940a      	str	r4, [sp, #40]	@ 0x28
 801d456:	2322      	movs	r3, #34	@ 0x22
 801d458:	9a05      	ldr	r2, [sp, #20]
 801d45a:	f04f 0a00 	mov.w	sl, #0
 801d45e:	f04f 0b00 	mov.w	fp, #0
 801d462:	6013      	str	r3, [r2, #0]
 801d464:	e768      	b.n	801d338 <_strtod_l+0x450>
 801d466:	bf00      	nop
 801d468:	08024506 	.word	0x08024506
 801d46c:	080243a8 	.word	0x080243a8
 801d470:	080244fe 	.word	0x080244fe
 801d474:	080245e8 	.word	0x080245e8
 801d478:	080245e4 	.word	0x080245e4
 801d47c:	08024748 	.word	0x08024748
 801d480:	08024720 	.word	0x08024720
 801d484:	7ff00000 	.word	0x7ff00000
 801d488:	7ca00000 	.word	0x7ca00000
 801d48c:	7fefffff 	.word	0x7fefffff
 801d490:	f014 0310 	ands.w	r3, r4, #16
 801d494:	4650      	mov	r0, sl
 801d496:	4659      	mov	r1, fp
 801d498:	4ea9      	ldr	r6, [pc, #676]	@ (801d740 <_strtod_l+0x858>)
 801d49a:	bf18      	it	ne
 801d49c:	236a      	movne	r3, #106	@ 0x6a
 801d49e:	9308      	str	r3, [sp, #32]
 801d4a0:	2300      	movs	r3, #0
 801d4a2:	07e2      	lsls	r2, r4, #31
 801d4a4:	d504      	bpl.n	801d4b0 <_strtod_l+0x5c8>
 801d4a6:	e9d6 2300 	ldrd	r2, r3, [r6]
 801d4aa:	f7e3 f8bf 	bl	800062c <__aeabi_dmul>
 801d4ae:	2301      	movs	r3, #1
 801d4b0:	1064      	asrs	r4, r4, #1
 801d4b2:	f106 0608 	add.w	r6, r6, #8
 801d4b6:	d1f4      	bne.n	801d4a2 <_strtod_l+0x5ba>
 801d4b8:	b10b      	cbz	r3, 801d4be <_strtod_l+0x5d6>
 801d4ba:	4682      	mov	sl, r0
 801d4bc:	468b      	mov	fp, r1
 801d4be:	9b08      	ldr	r3, [sp, #32]
 801d4c0:	b1b3      	cbz	r3, 801d4f0 <_strtod_l+0x608>
 801d4c2:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801d4c6:	4659      	mov	r1, fp
 801d4c8:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 801d4cc:	2b00      	cmp	r3, #0
 801d4ce:	dd0f      	ble.n	801d4f0 <_strtod_l+0x608>
 801d4d0:	2b1f      	cmp	r3, #31
 801d4d2:	dd55      	ble.n	801d580 <_strtod_l+0x698>
 801d4d4:	2b34      	cmp	r3, #52	@ 0x34
 801d4d6:	f04f 0a00 	mov.w	sl, #0
 801d4da:	bfdb      	ittet	le
 801d4dc:	f04f 33ff 	movle.w	r3, #4294967295
 801d4e0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 801d4e4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 801d4e8:	4093      	lslle	r3, r2
 801d4ea:	bfd8      	it	le
 801d4ec:	ea03 0b01 	andle.w	fp, r3, r1
 801d4f0:	2200      	movs	r2, #0
 801d4f2:	2300      	movs	r3, #0
 801d4f4:	4650      	mov	r0, sl
 801d4f6:	4659      	mov	r1, fp
 801d4f8:	f7e3 fb00 	bl	8000afc <__aeabi_dcmpeq>
 801d4fc:	2800      	cmp	r0, #0
 801d4fe:	d1a6      	bne.n	801d44e <_strtod_l+0x566>
 801d500:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d502:	463a      	mov	r2, r7
 801d504:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801d506:	9300      	str	r3, [sp, #0]
 801d508:	462b      	mov	r3, r5
 801d50a:	9805      	ldr	r0, [sp, #20]
 801d50c:	f003 f8bc 	bl	8020688 <__s2b>
 801d510:	900a      	str	r0, [sp, #40]	@ 0x28
 801d512:	2800      	cmp	r0, #0
 801d514:	f43f af05 	beq.w	801d322 <_strtod_l+0x43a>
 801d518:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d51a:	eba9 0308 	sub.w	r3, r9, r8
 801d51e:	2400      	movs	r4, #0
 801d520:	2a00      	cmp	r2, #0
 801d522:	46a0      	mov	r8, r4
 801d524:	bfa8      	it	ge
 801d526:	2300      	movge	r3, #0
 801d528:	9312      	str	r3, [sp, #72]	@ 0x48
 801d52a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801d52e:	9316      	str	r3, [sp, #88]	@ 0x58
 801d530:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d532:	9805      	ldr	r0, [sp, #20]
 801d534:	6859      	ldr	r1, [r3, #4]
 801d536:	f002 fffd 	bl	8020534 <_Balloc>
 801d53a:	4681      	mov	r9, r0
 801d53c:	2800      	cmp	r0, #0
 801d53e:	f43f aef4 	beq.w	801d32a <_strtod_l+0x442>
 801d542:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d544:	300c      	adds	r0, #12
 801d546:	691a      	ldr	r2, [r3, #16]
 801d548:	f103 010c 	add.w	r1, r3, #12
 801d54c:	3202      	adds	r2, #2
 801d54e:	0092      	lsls	r2, r2, #2
 801d550:	f001 fdd1 	bl	801f0f6 <memcpy>
 801d554:	aa1c      	add	r2, sp, #112	@ 0x70
 801d556:	a91b      	add	r1, sp, #108	@ 0x6c
 801d558:	9805      	ldr	r0, [sp, #20]
 801d55a:	ec4b ab10 	vmov	d0, sl, fp
 801d55e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 801d562:	f003 fbd5 	bl	8020d10 <__d2b>
 801d566:	901a      	str	r0, [sp, #104]	@ 0x68
 801d568:	2800      	cmp	r0, #0
 801d56a:	f43f aede 	beq.w	801d32a <_strtod_l+0x442>
 801d56e:	2101      	movs	r1, #1
 801d570:	9805      	ldr	r0, [sp, #20]
 801d572:	f003 f91f 	bl	80207b4 <__i2b>
 801d576:	4680      	mov	r8, r0
 801d578:	b948      	cbnz	r0, 801d58e <_strtod_l+0x6a6>
 801d57a:	f04f 0800 	mov.w	r8, #0
 801d57e:	e6d4      	b.n	801d32a <_strtod_l+0x442>
 801d580:	f04f 32ff 	mov.w	r2, #4294967295
 801d584:	fa02 f303 	lsl.w	r3, r2, r3
 801d588:	ea03 0a0a 	and.w	sl, r3, sl
 801d58c:	e7b0      	b.n	801d4f0 <_strtod_l+0x608>
 801d58e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 801d590:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801d592:	2d00      	cmp	r5, #0
 801d594:	bfa9      	itett	ge
 801d596:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 801d598:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 801d59a:	18ef      	addge	r7, r5, r3
 801d59c:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 801d59e:	bfb8      	it	lt
 801d5a0:	1b5e      	sublt	r6, r3, r5
 801d5a2:	9b08      	ldr	r3, [sp, #32]
 801d5a4:	bfb8      	it	lt
 801d5a6:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 801d5a8:	1aed      	subs	r5, r5, r3
 801d5aa:	4b66      	ldr	r3, [pc, #408]	@ (801d744 <_strtod_l+0x85c>)
 801d5ac:	4415      	add	r5, r2
 801d5ae:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 801d5b2:	3d01      	subs	r5, #1
 801d5b4:	429d      	cmp	r5, r3
 801d5b6:	da4f      	bge.n	801d658 <_strtod_l+0x770>
 801d5b8:	1b5b      	subs	r3, r3, r5
 801d5ba:	2101      	movs	r1, #1
 801d5bc:	2b1f      	cmp	r3, #31
 801d5be:	eba2 0203 	sub.w	r2, r2, r3
 801d5c2:	dc3d      	bgt.n	801d640 <_strtod_l+0x758>
 801d5c4:	fa01 f303 	lsl.w	r3, r1, r3
 801d5c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 801d5ca:	2300      	movs	r3, #0
 801d5cc:	9310      	str	r3, [sp, #64]	@ 0x40
 801d5ce:	18bd      	adds	r5, r7, r2
 801d5d0:	9b08      	ldr	r3, [sp, #32]
 801d5d2:	4416      	add	r6, r2
 801d5d4:	42af      	cmp	r7, r5
 801d5d6:	441e      	add	r6, r3
 801d5d8:	463b      	mov	r3, r7
 801d5da:	bfa8      	it	ge
 801d5dc:	462b      	movge	r3, r5
 801d5de:	42b3      	cmp	r3, r6
 801d5e0:	bfa8      	it	ge
 801d5e2:	4633      	movge	r3, r6
 801d5e4:	2b00      	cmp	r3, #0
 801d5e6:	bfc2      	ittt	gt
 801d5e8:	1aed      	subgt	r5, r5, r3
 801d5ea:	1af6      	subgt	r6, r6, r3
 801d5ec:	1aff      	subgt	r7, r7, r3
 801d5ee:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801d5f0:	2b00      	cmp	r3, #0
 801d5f2:	dd16      	ble.n	801d622 <_strtod_l+0x73a>
 801d5f4:	4641      	mov	r1, r8
 801d5f6:	461a      	mov	r2, r3
 801d5f8:	9805      	ldr	r0, [sp, #20]
 801d5fa:	f003 f99b 	bl	8020934 <__pow5mult>
 801d5fe:	4680      	mov	r8, r0
 801d600:	2800      	cmp	r0, #0
 801d602:	d0ba      	beq.n	801d57a <_strtod_l+0x692>
 801d604:	4601      	mov	r1, r0
 801d606:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801d608:	9805      	ldr	r0, [sp, #20]
 801d60a:	f003 f8e9 	bl	80207e0 <__multiply>
 801d60e:	900e      	str	r0, [sp, #56]	@ 0x38
 801d610:	2800      	cmp	r0, #0
 801d612:	f43f ae8a 	beq.w	801d32a <_strtod_l+0x442>
 801d616:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801d618:	9805      	ldr	r0, [sp, #20]
 801d61a:	f002 ffcb 	bl	80205b4 <_Bfree>
 801d61e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d620:	931a      	str	r3, [sp, #104]	@ 0x68
 801d622:	2d00      	cmp	r5, #0
 801d624:	dc1d      	bgt.n	801d662 <_strtod_l+0x77a>
 801d626:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d628:	2b00      	cmp	r3, #0
 801d62a:	dd23      	ble.n	801d674 <_strtod_l+0x78c>
 801d62c:	4649      	mov	r1, r9
 801d62e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801d630:	9805      	ldr	r0, [sp, #20]
 801d632:	f003 f97f 	bl	8020934 <__pow5mult>
 801d636:	4681      	mov	r9, r0
 801d638:	b9e0      	cbnz	r0, 801d674 <_strtod_l+0x78c>
 801d63a:	f04f 0900 	mov.w	r9, #0
 801d63e:	e674      	b.n	801d32a <_strtod_l+0x442>
 801d640:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 801d644:	9113      	str	r1, [sp, #76]	@ 0x4c
 801d646:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 801d64a:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 801d64e:	35e2      	adds	r5, #226	@ 0xe2
 801d650:	fa01 f305 	lsl.w	r3, r1, r5
 801d654:	9310      	str	r3, [sp, #64]	@ 0x40
 801d656:	e7ba      	b.n	801d5ce <_strtod_l+0x6e6>
 801d658:	2300      	movs	r3, #0
 801d65a:	9310      	str	r3, [sp, #64]	@ 0x40
 801d65c:	2301      	movs	r3, #1
 801d65e:	9313      	str	r3, [sp, #76]	@ 0x4c
 801d660:	e7b5      	b.n	801d5ce <_strtod_l+0x6e6>
 801d662:	462a      	mov	r2, r5
 801d664:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801d666:	9805      	ldr	r0, [sp, #20]
 801d668:	f003 f9be 	bl	80209e8 <__lshift>
 801d66c:	901a      	str	r0, [sp, #104]	@ 0x68
 801d66e:	2800      	cmp	r0, #0
 801d670:	d1d9      	bne.n	801d626 <_strtod_l+0x73e>
 801d672:	e65a      	b.n	801d32a <_strtod_l+0x442>
 801d674:	2e00      	cmp	r6, #0
 801d676:	dd07      	ble.n	801d688 <_strtod_l+0x7a0>
 801d678:	4649      	mov	r1, r9
 801d67a:	4632      	mov	r2, r6
 801d67c:	9805      	ldr	r0, [sp, #20]
 801d67e:	f003 f9b3 	bl	80209e8 <__lshift>
 801d682:	4681      	mov	r9, r0
 801d684:	2800      	cmp	r0, #0
 801d686:	d0d8      	beq.n	801d63a <_strtod_l+0x752>
 801d688:	2f00      	cmp	r7, #0
 801d68a:	dd08      	ble.n	801d69e <_strtod_l+0x7b6>
 801d68c:	4641      	mov	r1, r8
 801d68e:	463a      	mov	r2, r7
 801d690:	9805      	ldr	r0, [sp, #20]
 801d692:	f003 f9a9 	bl	80209e8 <__lshift>
 801d696:	4680      	mov	r8, r0
 801d698:	2800      	cmp	r0, #0
 801d69a:	f43f ae46 	beq.w	801d32a <_strtod_l+0x442>
 801d69e:	464a      	mov	r2, r9
 801d6a0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801d6a2:	9805      	ldr	r0, [sp, #20]
 801d6a4:	f003 fa28 	bl	8020af8 <__mdiff>
 801d6a8:	4604      	mov	r4, r0
 801d6aa:	2800      	cmp	r0, #0
 801d6ac:	f43f ae3d 	beq.w	801d32a <_strtod_l+0x442>
 801d6b0:	68c3      	ldr	r3, [r0, #12]
 801d6b2:	4641      	mov	r1, r8
 801d6b4:	930f      	str	r3, [sp, #60]	@ 0x3c
 801d6b6:	2300      	movs	r3, #0
 801d6b8:	60c3      	str	r3, [r0, #12]
 801d6ba:	f003 fa01 	bl	8020ac0 <__mcmp>
 801d6be:	2800      	cmp	r0, #0
 801d6c0:	da46      	bge.n	801d750 <_strtod_l+0x868>
 801d6c2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d6c4:	ea53 030a 	orrs.w	r3, r3, sl
 801d6c8:	d16c      	bne.n	801d7a4 <_strtod_l+0x8bc>
 801d6ca:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801d6ce:	2b00      	cmp	r3, #0
 801d6d0:	d168      	bne.n	801d7a4 <_strtod_l+0x8bc>
 801d6d2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801d6d6:	0d1b      	lsrs	r3, r3, #20
 801d6d8:	051b      	lsls	r3, r3, #20
 801d6da:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801d6de:	d961      	bls.n	801d7a4 <_strtod_l+0x8bc>
 801d6e0:	6963      	ldr	r3, [r4, #20]
 801d6e2:	b913      	cbnz	r3, 801d6ea <_strtod_l+0x802>
 801d6e4:	6923      	ldr	r3, [r4, #16]
 801d6e6:	2b01      	cmp	r3, #1
 801d6e8:	dd5c      	ble.n	801d7a4 <_strtod_l+0x8bc>
 801d6ea:	4621      	mov	r1, r4
 801d6ec:	2201      	movs	r2, #1
 801d6ee:	9805      	ldr	r0, [sp, #20]
 801d6f0:	f003 f97a 	bl	80209e8 <__lshift>
 801d6f4:	4641      	mov	r1, r8
 801d6f6:	4604      	mov	r4, r0
 801d6f8:	f003 f9e2 	bl	8020ac0 <__mcmp>
 801d6fc:	2800      	cmp	r0, #0
 801d6fe:	dd51      	ble.n	801d7a4 <_strtod_l+0x8bc>
 801d700:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801d704:	9a08      	ldr	r2, [sp, #32]
 801d706:	0d1b      	lsrs	r3, r3, #20
 801d708:	051b      	lsls	r3, r3, #20
 801d70a:	2a00      	cmp	r2, #0
 801d70c:	d06b      	beq.n	801d7e6 <_strtod_l+0x8fe>
 801d70e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801d712:	d868      	bhi.n	801d7e6 <_strtod_l+0x8fe>
 801d714:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 801d718:	f67f ae9d 	bls.w	801d456 <_strtod_l+0x56e>
 801d71c:	4b0a      	ldr	r3, [pc, #40]	@ (801d748 <_strtod_l+0x860>)
 801d71e:	4650      	mov	r0, sl
 801d720:	4659      	mov	r1, fp
 801d722:	2200      	movs	r2, #0
 801d724:	f7e2 ff82 	bl	800062c <__aeabi_dmul>
 801d728:	4b08      	ldr	r3, [pc, #32]	@ (801d74c <_strtod_l+0x864>)
 801d72a:	4682      	mov	sl, r0
 801d72c:	468b      	mov	fp, r1
 801d72e:	400b      	ands	r3, r1
 801d730:	2b00      	cmp	r3, #0
 801d732:	f47f ae05 	bne.w	801d340 <_strtod_l+0x458>
 801d736:	2322      	movs	r3, #34	@ 0x22
 801d738:	9a05      	ldr	r2, [sp, #20]
 801d73a:	6013      	str	r3, [r2, #0]
 801d73c:	e600      	b.n	801d340 <_strtod_l+0x458>
 801d73e:	bf00      	nop
 801d740:	080243d0 	.word	0x080243d0
 801d744:	fffffc02 	.word	0xfffffc02
 801d748:	39500000 	.word	0x39500000
 801d74c:	7ff00000 	.word	0x7ff00000
 801d750:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 801d754:	d165      	bne.n	801d822 <_strtod_l+0x93a>
 801d756:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801d758:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801d75c:	b35a      	cbz	r2, 801d7b6 <_strtod_l+0x8ce>
 801d75e:	4a9e      	ldr	r2, [pc, #632]	@ (801d9d8 <_strtod_l+0xaf0>)
 801d760:	4293      	cmp	r3, r2
 801d762:	d12b      	bne.n	801d7bc <_strtod_l+0x8d4>
 801d764:	9b08      	ldr	r3, [sp, #32]
 801d766:	4651      	mov	r1, sl
 801d768:	b303      	cbz	r3, 801d7ac <_strtod_l+0x8c4>
 801d76a:	465a      	mov	r2, fp
 801d76c:	4b9b      	ldr	r3, [pc, #620]	@ (801d9dc <_strtod_l+0xaf4>)
 801d76e:	4013      	ands	r3, r2
 801d770:	f04f 32ff 	mov.w	r2, #4294967295
 801d774:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 801d778:	d81b      	bhi.n	801d7b2 <_strtod_l+0x8ca>
 801d77a:	0d1b      	lsrs	r3, r3, #20
 801d77c:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801d780:	fa02 f303 	lsl.w	r3, r2, r3
 801d784:	4299      	cmp	r1, r3
 801d786:	d119      	bne.n	801d7bc <_strtod_l+0x8d4>
 801d788:	4b95      	ldr	r3, [pc, #596]	@ (801d9e0 <_strtod_l+0xaf8>)
 801d78a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d78c:	429a      	cmp	r2, r3
 801d78e:	d102      	bne.n	801d796 <_strtod_l+0x8ae>
 801d790:	3101      	adds	r1, #1
 801d792:	f43f adca 	beq.w	801d32a <_strtod_l+0x442>
 801d796:	4b91      	ldr	r3, [pc, #580]	@ (801d9dc <_strtod_l+0xaf4>)
 801d798:	f04f 0a00 	mov.w	sl, #0
 801d79c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d79e:	401a      	ands	r2, r3
 801d7a0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 801d7a4:	9b08      	ldr	r3, [sp, #32]
 801d7a6:	2b00      	cmp	r3, #0
 801d7a8:	d1b8      	bne.n	801d71c <_strtod_l+0x834>
 801d7aa:	e5c9      	b.n	801d340 <_strtod_l+0x458>
 801d7ac:	f04f 33ff 	mov.w	r3, #4294967295
 801d7b0:	e7e8      	b.n	801d784 <_strtod_l+0x89c>
 801d7b2:	4613      	mov	r3, r2
 801d7b4:	e7e6      	b.n	801d784 <_strtod_l+0x89c>
 801d7b6:	ea53 030a 	orrs.w	r3, r3, sl
 801d7ba:	d0a1      	beq.n	801d700 <_strtod_l+0x818>
 801d7bc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d7be:	b1db      	cbz	r3, 801d7f8 <_strtod_l+0x910>
 801d7c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d7c2:	4213      	tst	r3, r2
 801d7c4:	d0ee      	beq.n	801d7a4 <_strtod_l+0x8bc>
 801d7c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d7c8:	4650      	mov	r0, sl
 801d7ca:	9a08      	ldr	r2, [sp, #32]
 801d7cc:	4659      	mov	r1, fp
 801d7ce:	b1bb      	cbz	r3, 801d800 <_strtod_l+0x918>
 801d7d0:	f7ff fb6c 	bl	801ceac <sulp>
 801d7d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801d7d8:	ec53 2b10 	vmov	r2, r3, d0
 801d7dc:	f7e2 fd70 	bl	80002c0 <__adddf3>
 801d7e0:	4682      	mov	sl, r0
 801d7e2:	468b      	mov	fp, r1
 801d7e4:	e7de      	b.n	801d7a4 <_strtod_l+0x8bc>
 801d7e6:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801d7ea:	f04f 3aff 	mov.w	sl, #4294967295
 801d7ee:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801d7f2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801d7f6:	e7d5      	b.n	801d7a4 <_strtod_l+0x8bc>
 801d7f8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801d7fa:	ea13 0f0a 	tst.w	r3, sl
 801d7fe:	e7e1      	b.n	801d7c4 <_strtod_l+0x8dc>
 801d800:	f7ff fb54 	bl	801ceac <sulp>
 801d804:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801d808:	ec53 2b10 	vmov	r2, r3, d0
 801d80c:	f7e2 fd56 	bl	80002bc <__aeabi_dsub>
 801d810:	2200      	movs	r2, #0
 801d812:	2300      	movs	r3, #0
 801d814:	4682      	mov	sl, r0
 801d816:	468b      	mov	fp, r1
 801d818:	f7e3 f970 	bl	8000afc <__aeabi_dcmpeq>
 801d81c:	2800      	cmp	r0, #0
 801d81e:	d0c1      	beq.n	801d7a4 <_strtod_l+0x8bc>
 801d820:	e619      	b.n	801d456 <_strtod_l+0x56e>
 801d822:	4641      	mov	r1, r8
 801d824:	4620      	mov	r0, r4
 801d826:	f003 facb 	bl	8020dc0 <__ratio>
 801d82a:	2200      	movs	r2, #0
 801d82c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801d830:	ec57 6b10 	vmov	r6, r7, d0
 801d834:	4630      	mov	r0, r6
 801d836:	4639      	mov	r1, r7
 801d838:	f7e3 f974 	bl	8000b24 <__aeabi_dcmple>
 801d83c:	2800      	cmp	r0, #0
 801d83e:	d06f      	beq.n	801d920 <_strtod_l+0xa38>
 801d840:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d842:	2b00      	cmp	r3, #0
 801d844:	d17a      	bne.n	801d93c <_strtod_l+0xa54>
 801d846:	f1ba 0f00 	cmp.w	sl, #0
 801d84a:	d158      	bne.n	801d8fe <_strtod_l+0xa16>
 801d84c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d84e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801d852:	2b00      	cmp	r3, #0
 801d854:	d15a      	bne.n	801d90c <_strtod_l+0xa24>
 801d856:	2200      	movs	r2, #0
 801d858:	4b62      	ldr	r3, [pc, #392]	@ (801d9e4 <_strtod_l+0xafc>)
 801d85a:	4630      	mov	r0, r6
 801d85c:	4639      	mov	r1, r7
 801d85e:	f7e3 f957 	bl	8000b10 <__aeabi_dcmplt>
 801d862:	2800      	cmp	r0, #0
 801d864:	d159      	bne.n	801d91a <_strtod_l+0xa32>
 801d866:	4630      	mov	r0, r6
 801d868:	4639      	mov	r1, r7
 801d86a:	2200      	movs	r2, #0
 801d86c:	4b5e      	ldr	r3, [pc, #376]	@ (801d9e8 <_strtod_l+0xb00>)
 801d86e:	f7e2 fedd 	bl	800062c <__aeabi_dmul>
 801d872:	4606      	mov	r6, r0
 801d874:	460f      	mov	r7, r1
 801d876:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 801d87a:	9606      	str	r6, [sp, #24]
 801d87c:	9307      	str	r3, [sp, #28]
 801d87e:	4d57      	ldr	r5, [pc, #348]	@ (801d9dc <_strtod_l+0xaf4>)
 801d880:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801d884:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801d888:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d88a:	401d      	ands	r5, r3
 801d88c:	4b57      	ldr	r3, [pc, #348]	@ (801d9ec <_strtod_l+0xb04>)
 801d88e:	429d      	cmp	r5, r3
 801d890:	f040 80b0 	bne.w	801d9f4 <_strtod_l+0xb0c>
 801d894:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d896:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 801d89a:	ec4b ab10 	vmov	d0, sl, fp
 801d89e:	f003 f9c3 	bl	8020c28 <__ulp>
 801d8a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801d8a6:	ec51 0b10 	vmov	r0, r1, d0
 801d8aa:	f7e2 febf 	bl	800062c <__aeabi_dmul>
 801d8ae:	4652      	mov	r2, sl
 801d8b0:	465b      	mov	r3, fp
 801d8b2:	f7e2 fd05 	bl	80002c0 <__adddf3>
 801d8b6:	460b      	mov	r3, r1
 801d8b8:	4948      	ldr	r1, [pc, #288]	@ (801d9dc <_strtod_l+0xaf4>)
 801d8ba:	4682      	mov	sl, r0
 801d8bc:	4a4c      	ldr	r2, [pc, #304]	@ (801d9f0 <_strtod_l+0xb08>)
 801d8be:	4019      	ands	r1, r3
 801d8c0:	4291      	cmp	r1, r2
 801d8c2:	d942      	bls.n	801d94a <_strtod_l+0xa62>
 801d8c4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801d8c6:	4b46      	ldr	r3, [pc, #280]	@ (801d9e0 <_strtod_l+0xaf8>)
 801d8c8:	429a      	cmp	r2, r3
 801d8ca:	d103      	bne.n	801d8d4 <_strtod_l+0x9ec>
 801d8cc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d8ce:	3301      	adds	r3, #1
 801d8d0:	f43f ad2b 	beq.w	801d32a <_strtod_l+0x442>
 801d8d4:	f8df b108 	ldr.w	fp, [pc, #264]	@ 801d9e0 <_strtod_l+0xaf8>
 801d8d8:	f04f 3aff 	mov.w	sl, #4294967295
 801d8dc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801d8de:	9805      	ldr	r0, [sp, #20]
 801d8e0:	f002 fe68 	bl	80205b4 <_Bfree>
 801d8e4:	4649      	mov	r1, r9
 801d8e6:	9805      	ldr	r0, [sp, #20]
 801d8e8:	f002 fe64 	bl	80205b4 <_Bfree>
 801d8ec:	4641      	mov	r1, r8
 801d8ee:	9805      	ldr	r0, [sp, #20]
 801d8f0:	f002 fe60 	bl	80205b4 <_Bfree>
 801d8f4:	4621      	mov	r1, r4
 801d8f6:	9805      	ldr	r0, [sp, #20]
 801d8f8:	f002 fe5c 	bl	80205b4 <_Bfree>
 801d8fc:	e618      	b.n	801d530 <_strtod_l+0x648>
 801d8fe:	f1ba 0f01 	cmp.w	sl, #1
 801d902:	d103      	bne.n	801d90c <_strtod_l+0xa24>
 801d904:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d906:	2b00      	cmp	r3, #0
 801d908:	f43f ada5 	beq.w	801d456 <_strtod_l+0x56e>
 801d90c:	2600      	movs	r6, #0
 801d90e:	4f35      	ldr	r7, [pc, #212]	@ (801d9e4 <_strtod_l+0xafc>)
 801d910:	ed9f 7b29 	vldr	d7, [pc, #164]	@ 801d9b8 <_strtod_l+0xad0>
 801d914:	ed8d 7b06 	vstr	d7, [sp, #24]
 801d918:	e7b1      	b.n	801d87e <_strtod_l+0x996>
 801d91a:	2600      	movs	r6, #0
 801d91c:	4f32      	ldr	r7, [pc, #200]	@ (801d9e8 <_strtod_l+0xb00>)
 801d91e:	e7aa      	b.n	801d876 <_strtod_l+0x98e>
 801d920:	4b31      	ldr	r3, [pc, #196]	@ (801d9e8 <_strtod_l+0xb00>)
 801d922:	4630      	mov	r0, r6
 801d924:	4639      	mov	r1, r7
 801d926:	2200      	movs	r2, #0
 801d928:	f7e2 fe80 	bl	800062c <__aeabi_dmul>
 801d92c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d92e:	4606      	mov	r6, r0
 801d930:	460f      	mov	r7, r1
 801d932:	2b00      	cmp	r3, #0
 801d934:	d09f      	beq.n	801d876 <_strtod_l+0x98e>
 801d936:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801d93a:	e7a0      	b.n	801d87e <_strtod_l+0x996>
 801d93c:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 801d9c0 <_strtod_l+0xad8>
 801d940:	ec57 6b17 	vmov	r6, r7, d7
 801d944:	ed8d 7b06 	vstr	d7, [sp, #24]
 801d948:	e799      	b.n	801d87e <_strtod_l+0x996>
 801d94a:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801d94e:	9b08      	ldr	r3, [sp, #32]
 801d950:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 801d954:	2b00      	cmp	r3, #0
 801d956:	d1c1      	bne.n	801d8dc <_strtod_l+0x9f4>
 801d958:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801d95c:	0d1b      	lsrs	r3, r3, #20
 801d95e:	051b      	lsls	r3, r3, #20
 801d960:	429d      	cmp	r5, r3
 801d962:	d1bb      	bne.n	801d8dc <_strtod_l+0x9f4>
 801d964:	4630      	mov	r0, r6
 801d966:	4639      	mov	r1, r7
 801d968:	f7e3 f9c0 	bl	8000cec <__aeabi_d2lz>
 801d96c:	f7e2 fe30 	bl	80005d0 <__aeabi_l2d>
 801d970:	4602      	mov	r2, r0
 801d972:	460b      	mov	r3, r1
 801d974:	4630      	mov	r0, r6
 801d976:	4639      	mov	r1, r7
 801d978:	f3cb 0613 	ubfx	r6, fp, #0, #20
 801d97c:	f7e2 fc9e 	bl	80002bc <__aeabi_dsub>
 801d980:	460b      	mov	r3, r1
 801d982:	4602      	mov	r2, r0
 801d984:	ea46 060a 	orr.w	r6, r6, sl
 801d988:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 801d98c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d98e:	431e      	orrs	r6, r3
 801d990:	d06d      	beq.n	801da6e <_strtod_l+0xb86>
 801d992:	a30d      	add	r3, pc, #52	@ (adr r3, 801d9c8 <_strtod_l+0xae0>)
 801d994:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d998:	f7e3 f8ba 	bl	8000b10 <__aeabi_dcmplt>
 801d99c:	2800      	cmp	r0, #0
 801d99e:	f47f accf 	bne.w	801d340 <_strtod_l+0x458>
 801d9a2:	a30b      	add	r3, pc, #44	@ (adr r3, 801d9d0 <_strtod_l+0xae8>)
 801d9a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d9a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801d9ac:	f7e3 f8ce 	bl	8000b4c <__aeabi_dcmpgt>
 801d9b0:	2800      	cmp	r0, #0
 801d9b2:	d093      	beq.n	801d8dc <_strtod_l+0x9f4>
 801d9b4:	e4c4      	b.n	801d340 <_strtod_l+0x458>
 801d9b6:	bf00      	nop
 801d9b8:	00000000 	.word	0x00000000
 801d9bc:	bff00000 	.word	0xbff00000
 801d9c0:	00000000 	.word	0x00000000
 801d9c4:	3ff00000 	.word	0x3ff00000
 801d9c8:	94a03595 	.word	0x94a03595
 801d9cc:	3fdfffff 	.word	0x3fdfffff
 801d9d0:	35afe535 	.word	0x35afe535
 801d9d4:	3fe00000 	.word	0x3fe00000
 801d9d8:	000fffff 	.word	0x000fffff
 801d9dc:	7ff00000 	.word	0x7ff00000
 801d9e0:	7fefffff 	.word	0x7fefffff
 801d9e4:	3ff00000 	.word	0x3ff00000
 801d9e8:	3fe00000 	.word	0x3fe00000
 801d9ec:	7fe00000 	.word	0x7fe00000
 801d9f0:	7c9fffff 	.word	0x7c9fffff
 801d9f4:	9b08      	ldr	r3, [sp, #32]
 801d9f6:	b323      	cbz	r3, 801da42 <_strtod_l+0xb5a>
 801d9f8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 801d9fc:	d821      	bhi.n	801da42 <_strtod_l+0xb5a>
 801d9fe:	4630      	mov	r0, r6
 801da00:	4639      	mov	r1, r7
 801da02:	a327      	add	r3, pc, #156	@ (adr r3, 801daa0 <_strtod_l+0xbb8>)
 801da04:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da08:	f7e3 f88c 	bl	8000b24 <__aeabi_dcmple>
 801da0c:	b1a0      	cbz	r0, 801da38 <_strtod_l+0xb50>
 801da0e:	4639      	mov	r1, r7
 801da10:	4630      	mov	r0, r6
 801da12:	f7e3 f8e3 	bl	8000bdc <__aeabi_d2uiz>
 801da16:	2801      	cmp	r0, #1
 801da18:	bf38      	it	cc
 801da1a:	2001      	movcc	r0, #1
 801da1c:	f7e2 fd8c 	bl	8000538 <__aeabi_ui2d>
 801da20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801da22:	4606      	mov	r6, r0
 801da24:	460f      	mov	r7, r1
 801da26:	b9fb      	cbnz	r3, 801da68 <_strtod_l+0xb80>
 801da28:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801da2c:	9014      	str	r0, [sp, #80]	@ 0x50
 801da2e:	9315      	str	r3, [sp, #84]	@ 0x54
 801da30:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 801da34:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801da38:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801da3a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 801da3e:	1b5b      	subs	r3, r3, r5
 801da40:	9311      	str	r3, [sp, #68]	@ 0x44
 801da42:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 801da46:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801da4a:	f003 f8ed 	bl	8020c28 <__ulp>
 801da4e:	4650      	mov	r0, sl
 801da50:	4659      	mov	r1, fp
 801da52:	ec53 2b10 	vmov	r2, r3, d0
 801da56:	f7e2 fde9 	bl	800062c <__aeabi_dmul>
 801da5a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801da5e:	f7e2 fc2f 	bl	80002c0 <__adddf3>
 801da62:	4682      	mov	sl, r0
 801da64:	468b      	mov	fp, r1
 801da66:	e772      	b.n	801d94e <_strtod_l+0xa66>
 801da68:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 801da6c:	e7e0      	b.n	801da30 <_strtod_l+0xb48>
 801da6e:	a30e      	add	r3, pc, #56	@ (adr r3, 801daa8 <_strtod_l+0xbc0>)
 801da70:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da74:	f7e3 f84c 	bl	8000b10 <__aeabi_dcmplt>
 801da78:	e79a      	b.n	801d9b0 <_strtod_l+0xac8>
 801da7a:	2300      	movs	r3, #0
 801da7c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801da7e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801da80:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801da82:	6013      	str	r3, [r2, #0]
 801da84:	f7ff ba6d 	b.w	801cf62 <_strtod_l+0x7a>
 801da88:	2a65      	cmp	r2, #101	@ 0x65
 801da8a:	f43f ab67 	beq.w	801d15c <_strtod_l+0x274>
 801da8e:	2a45      	cmp	r2, #69	@ 0x45
 801da90:	f43f ab64 	beq.w	801d15c <_strtod_l+0x274>
 801da94:	2301      	movs	r3, #1
 801da96:	f7ff bba0 	b.w	801d1da <_strtod_l+0x2f2>
 801da9a:	bf00      	nop
 801da9c:	f3af 8000 	nop.w
 801daa0:	ffc00000 	.word	0xffc00000
 801daa4:	41dfffff 	.word	0x41dfffff
 801daa8:	94a03595 	.word	0x94a03595
 801daac:	3fcfffff 	.word	0x3fcfffff

0801dab0 <_strtod_r>:
 801dab0:	4b01      	ldr	r3, [pc, #4]	@ (801dab8 <_strtod_r+0x8>)
 801dab2:	f7ff ba19 	b.w	801cee8 <_strtod_l>
 801dab6:	bf00      	nop
 801dab8:	200000b8 	.word	0x200000b8

0801dabc <strtod>:
 801dabc:	460a      	mov	r2, r1
 801dabe:	4601      	mov	r1, r0
 801dac0:	4802      	ldr	r0, [pc, #8]	@ (801dacc <strtod+0x10>)
 801dac2:	4b03      	ldr	r3, [pc, #12]	@ (801dad0 <strtod+0x14>)
 801dac4:	6800      	ldr	r0, [r0, #0]
 801dac6:	f7ff ba0f 	b.w	801cee8 <_strtod_l>
 801daca:	bf00      	nop
 801dacc:	20000224 	.word	0x20000224
 801dad0:	200000b8 	.word	0x200000b8

0801dad4 <_strtol_l.constprop.0>:
 801dad4:	2b24      	cmp	r3, #36	@ 0x24
 801dad6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dada:	4686      	mov	lr, r0
 801dadc:	4690      	mov	r8, r2
 801dade:	d801      	bhi.n	801dae4 <_strtol_l.constprop.0+0x10>
 801dae0:	2b01      	cmp	r3, #1
 801dae2:	d106      	bne.n	801daf2 <_strtol_l.constprop.0+0x1e>
 801dae4:	f001 fac4 	bl	801f070 <__errno>
 801dae8:	2316      	movs	r3, #22
 801daea:	6003      	str	r3, [r0, #0]
 801daec:	2000      	movs	r0, #0
 801daee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801daf2:	460d      	mov	r5, r1
 801daf4:	4833      	ldr	r0, [pc, #204]	@ (801dbc4 <_strtol_l.constprop.0+0xf0>)
 801daf6:	462a      	mov	r2, r5
 801daf8:	f815 4b01 	ldrb.w	r4, [r5], #1
 801dafc:	5d06      	ldrb	r6, [r0, r4]
 801dafe:	f016 0608 	ands.w	r6, r6, #8
 801db02:	d1f8      	bne.n	801daf6 <_strtol_l.constprop.0+0x22>
 801db04:	2c2d      	cmp	r4, #45	@ 0x2d
 801db06:	d12d      	bne.n	801db64 <_strtol_l.constprop.0+0x90>
 801db08:	782c      	ldrb	r4, [r5, #0]
 801db0a:	2601      	movs	r6, #1
 801db0c:	1c95      	adds	r5, r2, #2
 801db0e:	f033 0210 	bics.w	r2, r3, #16
 801db12:	d109      	bne.n	801db28 <_strtol_l.constprop.0+0x54>
 801db14:	2c30      	cmp	r4, #48	@ 0x30
 801db16:	d12a      	bne.n	801db6e <_strtol_l.constprop.0+0x9a>
 801db18:	782a      	ldrb	r2, [r5, #0]
 801db1a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801db1e:	2a58      	cmp	r2, #88	@ 0x58
 801db20:	d125      	bne.n	801db6e <_strtol_l.constprop.0+0x9a>
 801db22:	786c      	ldrb	r4, [r5, #1]
 801db24:	2310      	movs	r3, #16
 801db26:	3502      	adds	r5, #2
 801db28:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801db2c:	2200      	movs	r2, #0
 801db2e:	f10c 3cff 	add.w	ip, ip, #4294967295
 801db32:	4610      	mov	r0, r2
 801db34:	fbbc f9f3 	udiv	r9, ip, r3
 801db38:	fb03 ca19 	mls	sl, r3, r9, ip
 801db3c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801db40:	2f09      	cmp	r7, #9
 801db42:	d81b      	bhi.n	801db7c <_strtol_l.constprop.0+0xa8>
 801db44:	463c      	mov	r4, r7
 801db46:	42a3      	cmp	r3, r4
 801db48:	dd27      	ble.n	801db9a <_strtol_l.constprop.0+0xc6>
 801db4a:	1c57      	adds	r7, r2, #1
 801db4c:	d007      	beq.n	801db5e <_strtol_l.constprop.0+0x8a>
 801db4e:	4581      	cmp	r9, r0
 801db50:	d320      	bcc.n	801db94 <_strtol_l.constprop.0+0xc0>
 801db52:	d101      	bne.n	801db58 <_strtol_l.constprop.0+0x84>
 801db54:	45a2      	cmp	sl, r4
 801db56:	db1d      	blt.n	801db94 <_strtol_l.constprop.0+0xc0>
 801db58:	fb00 4003 	mla	r0, r0, r3, r4
 801db5c:	2201      	movs	r2, #1
 801db5e:	f815 4b01 	ldrb.w	r4, [r5], #1
 801db62:	e7eb      	b.n	801db3c <_strtol_l.constprop.0+0x68>
 801db64:	2c2b      	cmp	r4, #43	@ 0x2b
 801db66:	bf04      	itt	eq
 801db68:	782c      	ldrbeq	r4, [r5, #0]
 801db6a:	1c95      	addeq	r5, r2, #2
 801db6c:	e7cf      	b.n	801db0e <_strtol_l.constprop.0+0x3a>
 801db6e:	2b00      	cmp	r3, #0
 801db70:	d1da      	bne.n	801db28 <_strtol_l.constprop.0+0x54>
 801db72:	2c30      	cmp	r4, #48	@ 0x30
 801db74:	bf0c      	ite	eq
 801db76:	2308      	moveq	r3, #8
 801db78:	230a      	movne	r3, #10
 801db7a:	e7d5      	b.n	801db28 <_strtol_l.constprop.0+0x54>
 801db7c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801db80:	2f19      	cmp	r7, #25
 801db82:	d801      	bhi.n	801db88 <_strtol_l.constprop.0+0xb4>
 801db84:	3c37      	subs	r4, #55	@ 0x37
 801db86:	e7de      	b.n	801db46 <_strtol_l.constprop.0+0x72>
 801db88:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801db8c:	2f19      	cmp	r7, #25
 801db8e:	d804      	bhi.n	801db9a <_strtol_l.constprop.0+0xc6>
 801db90:	3c57      	subs	r4, #87	@ 0x57
 801db92:	e7d8      	b.n	801db46 <_strtol_l.constprop.0+0x72>
 801db94:	f04f 32ff 	mov.w	r2, #4294967295
 801db98:	e7e1      	b.n	801db5e <_strtol_l.constprop.0+0x8a>
 801db9a:	1c53      	adds	r3, r2, #1
 801db9c:	d108      	bne.n	801dbb0 <_strtol_l.constprop.0+0xdc>
 801db9e:	2322      	movs	r3, #34	@ 0x22
 801dba0:	4660      	mov	r0, ip
 801dba2:	f8ce 3000 	str.w	r3, [lr]
 801dba6:	f1b8 0f00 	cmp.w	r8, #0
 801dbaa:	d0a0      	beq.n	801daee <_strtol_l.constprop.0+0x1a>
 801dbac:	1e69      	subs	r1, r5, #1
 801dbae:	e006      	b.n	801dbbe <_strtol_l.constprop.0+0xea>
 801dbb0:	b106      	cbz	r6, 801dbb4 <_strtol_l.constprop.0+0xe0>
 801dbb2:	4240      	negs	r0, r0
 801dbb4:	f1b8 0f00 	cmp.w	r8, #0
 801dbb8:	d099      	beq.n	801daee <_strtol_l.constprop.0+0x1a>
 801dbba:	2a00      	cmp	r2, #0
 801dbbc:	d1f6      	bne.n	801dbac <_strtol_l.constprop.0+0xd8>
 801dbbe:	f8c8 1000 	str.w	r1, [r8]
 801dbc2:	e794      	b.n	801daee <_strtol_l.constprop.0+0x1a>
 801dbc4:	080243f9 	.word	0x080243f9

0801dbc8 <_strtol_r>:
 801dbc8:	f7ff bf84 	b.w	801dad4 <_strtol_l.constprop.0>

0801dbcc <strtol>:
 801dbcc:	4613      	mov	r3, r2
 801dbce:	460a      	mov	r2, r1
 801dbd0:	4601      	mov	r1, r0
 801dbd2:	4802      	ldr	r0, [pc, #8]	@ (801dbdc <strtol+0x10>)
 801dbd4:	6800      	ldr	r0, [r0, #0]
 801dbd6:	f7ff bf7d 	b.w	801dad4 <_strtol_l.constprop.0>
 801dbda:	bf00      	nop
 801dbdc:	20000224 	.word	0x20000224

0801dbe0 <__cvt>:
 801dbe0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801dbe4:	ec57 6b10 	vmov	r6, r7, d0
 801dbe8:	2f00      	cmp	r7, #0
 801dbea:	460c      	mov	r4, r1
 801dbec:	4619      	mov	r1, r3
 801dbee:	463b      	mov	r3, r7
 801dbf0:	bfb4      	ite	lt
 801dbf2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801dbf6:	2300      	movge	r3, #0
 801dbf8:	4691      	mov	r9, r2
 801dbfa:	bfbf      	itttt	lt
 801dbfc:	4632      	movlt	r2, r6
 801dbfe:	461f      	movlt	r7, r3
 801dc00:	232d      	movlt	r3, #45	@ 0x2d
 801dc02:	4616      	movlt	r6, r2
 801dc04:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801dc08:	700b      	strb	r3, [r1, #0]
 801dc0a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801dc0c:	f023 0820 	bic.w	r8, r3, #32
 801dc10:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801dc14:	d005      	beq.n	801dc22 <__cvt+0x42>
 801dc16:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801dc1a:	d100      	bne.n	801dc1e <__cvt+0x3e>
 801dc1c:	3401      	adds	r4, #1
 801dc1e:	2102      	movs	r1, #2
 801dc20:	e000      	b.n	801dc24 <__cvt+0x44>
 801dc22:	2103      	movs	r1, #3
 801dc24:	ab03      	add	r3, sp, #12
 801dc26:	4622      	mov	r2, r4
 801dc28:	9301      	str	r3, [sp, #4]
 801dc2a:	ab02      	add	r3, sp, #8
 801dc2c:	ec47 6b10 	vmov	d0, r6, r7
 801dc30:	9300      	str	r3, [sp, #0]
 801dc32:	4653      	mov	r3, sl
 801dc34:	f001 fb28 	bl	801f288 <_dtoa_r>
 801dc38:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801dc3c:	4605      	mov	r5, r0
 801dc3e:	d119      	bne.n	801dc74 <__cvt+0x94>
 801dc40:	f019 0f01 	tst.w	r9, #1
 801dc44:	d00e      	beq.n	801dc64 <__cvt+0x84>
 801dc46:	eb00 0904 	add.w	r9, r0, r4
 801dc4a:	2200      	movs	r2, #0
 801dc4c:	2300      	movs	r3, #0
 801dc4e:	4630      	mov	r0, r6
 801dc50:	4639      	mov	r1, r7
 801dc52:	f7e2 ff53 	bl	8000afc <__aeabi_dcmpeq>
 801dc56:	b108      	cbz	r0, 801dc5c <__cvt+0x7c>
 801dc58:	f8cd 900c 	str.w	r9, [sp, #12]
 801dc5c:	2230      	movs	r2, #48	@ 0x30
 801dc5e:	9b03      	ldr	r3, [sp, #12]
 801dc60:	454b      	cmp	r3, r9
 801dc62:	d31e      	bcc.n	801dca2 <__cvt+0xc2>
 801dc64:	9b03      	ldr	r3, [sp, #12]
 801dc66:	4628      	mov	r0, r5
 801dc68:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801dc6a:	1b5b      	subs	r3, r3, r5
 801dc6c:	6013      	str	r3, [r2, #0]
 801dc6e:	b004      	add	sp, #16
 801dc70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dc74:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801dc78:	eb00 0904 	add.w	r9, r0, r4
 801dc7c:	d1e5      	bne.n	801dc4a <__cvt+0x6a>
 801dc7e:	7803      	ldrb	r3, [r0, #0]
 801dc80:	2b30      	cmp	r3, #48	@ 0x30
 801dc82:	d10a      	bne.n	801dc9a <__cvt+0xba>
 801dc84:	2200      	movs	r2, #0
 801dc86:	2300      	movs	r3, #0
 801dc88:	4630      	mov	r0, r6
 801dc8a:	4639      	mov	r1, r7
 801dc8c:	f7e2 ff36 	bl	8000afc <__aeabi_dcmpeq>
 801dc90:	b918      	cbnz	r0, 801dc9a <__cvt+0xba>
 801dc92:	f1c4 0401 	rsb	r4, r4, #1
 801dc96:	f8ca 4000 	str.w	r4, [sl]
 801dc9a:	f8da 3000 	ldr.w	r3, [sl]
 801dc9e:	4499      	add	r9, r3
 801dca0:	e7d3      	b.n	801dc4a <__cvt+0x6a>
 801dca2:	1c59      	adds	r1, r3, #1
 801dca4:	9103      	str	r1, [sp, #12]
 801dca6:	701a      	strb	r2, [r3, #0]
 801dca8:	e7d9      	b.n	801dc5e <__cvt+0x7e>

0801dcaa <__exponent>:
 801dcaa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801dcac:	2900      	cmp	r1, #0
 801dcae:	7002      	strb	r2, [r0, #0]
 801dcb0:	bfba      	itte	lt
 801dcb2:	4249      	neglt	r1, r1
 801dcb4:	232d      	movlt	r3, #45	@ 0x2d
 801dcb6:	232b      	movge	r3, #43	@ 0x2b
 801dcb8:	2909      	cmp	r1, #9
 801dcba:	7043      	strb	r3, [r0, #1]
 801dcbc:	dd28      	ble.n	801dd10 <__exponent+0x66>
 801dcbe:	f10d 0307 	add.w	r3, sp, #7
 801dcc2:	270a      	movs	r7, #10
 801dcc4:	461d      	mov	r5, r3
 801dcc6:	461a      	mov	r2, r3
 801dcc8:	3b01      	subs	r3, #1
 801dcca:	fbb1 f6f7 	udiv	r6, r1, r7
 801dcce:	fb07 1416 	mls	r4, r7, r6, r1
 801dcd2:	3430      	adds	r4, #48	@ 0x30
 801dcd4:	f802 4c01 	strb.w	r4, [r2, #-1]
 801dcd8:	460c      	mov	r4, r1
 801dcda:	4631      	mov	r1, r6
 801dcdc:	2c63      	cmp	r4, #99	@ 0x63
 801dcde:	dcf2      	bgt.n	801dcc6 <__exponent+0x1c>
 801dce0:	3130      	adds	r1, #48	@ 0x30
 801dce2:	1e94      	subs	r4, r2, #2
 801dce4:	f803 1c01 	strb.w	r1, [r3, #-1]
 801dce8:	1c41      	adds	r1, r0, #1
 801dcea:	4623      	mov	r3, r4
 801dcec:	42ab      	cmp	r3, r5
 801dcee:	d30a      	bcc.n	801dd06 <__exponent+0x5c>
 801dcf0:	f10d 0309 	add.w	r3, sp, #9
 801dcf4:	1a9b      	subs	r3, r3, r2
 801dcf6:	42ac      	cmp	r4, r5
 801dcf8:	bf88      	it	hi
 801dcfa:	2300      	movhi	r3, #0
 801dcfc:	3302      	adds	r3, #2
 801dcfe:	4403      	add	r3, r0
 801dd00:	1a18      	subs	r0, r3, r0
 801dd02:	b003      	add	sp, #12
 801dd04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dd06:	f813 6b01 	ldrb.w	r6, [r3], #1
 801dd0a:	f801 6f01 	strb.w	r6, [r1, #1]!
 801dd0e:	e7ed      	b.n	801dcec <__exponent+0x42>
 801dd10:	2330      	movs	r3, #48	@ 0x30
 801dd12:	3130      	adds	r1, #48	@ 0x30
 801dd14:	7083      	strb	r3, [r0, #2]
 801dd16:	1d03      	adds	r3, r0, #4
 801dd18:	70c1      	strb	r1, [r0, #3]
 801dd1a:	e7f1      	b.n	801dd00 <__exponent+0x56>

0801dd1c <_printf_float>:
 801dd1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dd20:	b08d      	sub	sp, #52	@ 0x34
 801dd22:	460c      	mov	r4, r1
 801dd24:	4616      	mov	r6, r2
 801dd26:	461f      	mov	r7, r3
 801dd28:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801dd2c:	4605      	mov	r5, r0
 801dd2e:	f001 f945 	bl	801efbc <_localeconv_r>
 801dd32:	6803      	ldr	r3, [r0, #0]
 801dd34:	4618      	mov	r0, r3
 801dd36:	9304      	str	r3, [sp, #16]
 801dd38:	f7e2 fab4 	bl	80002a4 <strlen>
 801dd3c:	2300      	movs	r3, #0
 801dd3e:	9005      	str	r0, [sp, #20]
 801dd40:	930a      	str	r3, [sp, #40]	@ 0x28
 801dd42:	f8d8 3000 	ldr.w	r3, [r8]
 801dd46:	f894 a018 	ldrb.w	sl, [r4, #24]
 801dd4a:	3307      	adds	r3, #7
 801dd4c:	f8d4 b000 	ldr.w	fp, [r4]
 801dd50:	f023 0307 	bic.w	r3, r3, #7
 801dd54:	f103 0208 	add.w	r2, r3, #8
 801dd58:	f8c8 2000 	str.w	r2, [r8]
 801dd5c:	f04f 32ff 	mov.w	r2, #4294967295
 801dd60:	e9d3 8900 	ldrd	r8, r9, [r3]
 801dd64:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801dd68:	f8cd 8018 	str.w	r8, [sp, #24]
 801dd6c:	9307      	str	r3, [sp, #28]
 801dd6e:	4b9d      	ldr	r3, [pc, #628]	@ (801dfe4 <_printf_float+0x2c8>)
 801dd70:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801dd74:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801dd78:	f7e2 fef2 	bl	8000b60 <__aeabi_dcmpun>
 801dd7c:	bb70      	cbnz	r0, 801dddc <_printf_float+0xc0>
 801dd7e:	f04f 32ff 	mov.w	r2, #4294967295
 801dd82:	4b98      	ldr	r3, [pc, #608]	@ (801dfe4 <_printf_float+0x2c8>)
 801dd84:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801dd88:	f7e2 fecc 	bl	8000b24 <__aeabi_dcmple>
 801dd8c:	bb30      	cbnz	r0, 801dddc <_printf_float+0xc0>
 801dd8e:	2200      	movs	r2, #0
 801dd90:	2300      	movs	r3, #0
 801dd92:	4640      	mov	r0, r8
 801dd94:	4649      	mov	r1, r9
 801dd96:	f7e2 febb 	bl	8000b10 <__aeabi_dcmplt>
 801dd9a:	b110      	cbz	r0, 801dda2 <_printf_float+0x86>
 801dd9c:	232d      	movs	r3, #45	@ 0x2d
 801dd9e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801dda2:	4a91      	ldr	r2, [pc, #580]	@ (801dfe8 <_printf_float+0x2cc>)
 801dda4:	4b91      	ldr	r3, [pc, #580]	@ (801dfec <_printf_float+0x2d0>)
 801dda6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801ddaa:	bf94      	ite	ls
 801ddac:	4690      	movls	r8, r2
 801ddae:	4698      	movhi	r8, r3
 801ddb0:	2303      	movs	r3, #3
 801ddb2:	f04f 0900 	mov.w	r9, #0
 801ddb6:	6123      	str	r3, [r4, #16]
 801ddb8:	f02b 0304 	bic.w	r3, fp, #4
 801ddbc:	6023      	str	r3, [r4, #0]
 801ddbe:	4633      	mov	r3, r6
 801ddc0:	aa0b      	add	r2, sp, #44	@ 0x2c
 801ddc2:	4621      	mov	r1, r4
 801ddc4:	4628      	mov	r0, r5
 801ddc6:	9700      	str	r7, [sp, #0]
 801ddc8:	f000 f9d2 	bl	801e170 <_printf_common>
 801ddcc:	3001      	adds	r0, #1
 801ddce:	f040 808d 	bne.w	801deec <_printf_float+0x1d0>
 801ddd2:	f04f 30ff 	mov.w	r0, #4294967295
 801ddd6:	b00d      	add	sp, #52	@ 0x34
 801ddd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dddc:	4642      	mov	r2, r8
 801ddde:	464b      	mov	r3, r9
 801dde0:	4640      	mov	r0, r8
 801dde2:	4649      	mov	r1, r9
 801dde4:	f7e2 febc 	bl	8000b60 <__aeabi_dcmpun>
 801dde8:	b140      	cbz	r0, 801ddfc <_printf_float+0xe0>
 801ddea:	464b      	mov	r3, r9
 801ddec:	4a80      	ldr	r2, [pc, #512]	@ (801dff0 <_printf_float+0x2d4>)
 801ddee:	2b00      	cmp	r3, #0
 801ddf0:	bfbc      	itt	lt
 801ddf2:	232d      	movlt	r3, #45	@ 0x2d
 801ddf4:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801ddf8:	4b7e      	ldr	r3, [pc, #504]	@ (801dff4 <_printf_float+0x2d8>)
 801ddfa:	e7d4      	b.n	801dda6 <_printf_float+0x8a>
 801ddfc:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801de00:	6863      	ldr	r3, [r4, #4]
 801de02:	9206      	str	r2, [sp, #24]
 801de04:	1c5a      	adds	r2, r3, #1
 801de06:	d13b      	bne.n	801de80 <_printf_float+0x164>
 801de08:	2306      	movs	r3, #6
 801de0a:	6063      	str	r3, [r4, #4]
 801de0c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801de10:	2300      	movs	r3, #0
 801de12:	4628      	mov	r0, r5
 801de14:	6022      	str	r2, [r4, #0]
 801de16:	9303      	str	r3, [sp, #12]
 801de18:	ab0a      	add	r3, sp, #40	@ 0x28
 801de1a:	e9cd a301 	strd	sl, r3, [sp, #4]
 801de1e:	ab09      	add	r3, sp, #36	@ 0x24
 801de20:	ec49 8b10 	vmov	d0, r8, r9
 801de24:	9300      	str	r3, [sp, #0]
 801de26:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801de2a:	6861      	ldr	r1, [r4, #4]
 801de2c:	f7ff fed8 	bl	801dbe0 <__cvt>
 801de30:	9b06      	ldr	r3, [sp, #24]
 801de32:	4680      	mov	r8, r0
 801de34:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801de36:	2b47      	cmp	r3, #71	@ 0x47
 801de38:	d129      	bne.n	801de8e <_printf_float+0x172>
 801de3a:	1cc8      	adds	r0, r1, #3
 801de3c:	db02      	blt.n	801de44 <_printf_float+0x128>
 801de3e:	6863      	ldr	r3, [r4, #4]
 801de40:	4299      	cmp	r1, r3
 801de42:	dd41      	ble.n	801dec8 <_printf_float+0x1ac>
 801de44:	f1aa 0a02 	sub.w	sl, sl, #2
 801de48:	fa5f fa8a 	uxtb.w	sl, sl
 801de4c:	3901      	subs	r1, #1
 801de4e:	4652      	mov	r2, sl
 801de50:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801de54:	9109      	str	r1, [sp, #36]	@ 0x24
 801de56:	f7ff ff28 	bl	801dcaa <__exponent>
 801de5a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801de5c:	4681      	mov	r9, r0
 801de5e:	1813      	adds	r3, r2, r0
 801de60:	2a01      	cmp	r2, #1
 801de62:	6123      	str	r3, [r4, #16]
 801de64:	dc02      	bgt.n	801de6c <_printf_float+0x150>
 801de66:	6822      	ldr	r2, [r4, #0]
 801de68:	07d2      	lsls	r2, r2, #31
 801de6a:	d501      	bpl.n	801de70 <_printf_float+0x154>
 801de6c:	3301      	adds	r3, #1
 801de6e:	6123      	str	r3, [r4, #16]
 801de70:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801de74:	2b00      	cmp	r3, #0
 801de76:	d0a2      	beq.n	801ddbe <_printf_float+0xa2>
 801de78:	232d      	movs	r3, #45	@ 0x2d
 801de7a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801de7e:	e79e      	b.n	801ddbe <_printf_float+0xa2>
 801de80:	9a06      	ldr	r2, [sp, #24]
 801de82:	2a47      	cmp	r2, #71	@ 0x47
 801de84:	d1c2      	bne.n	801de0c <_printf_float+0xf0>
 801de86:	2b00      	cmp	r3, #0
 801de88:	d1c0      	bne.n	801de0c <_printf_float+0xf0>
 801de8a:	2301      	movs	r3, #1
 801de8c:	e7bd      	b.n	801de0a <_printf_float+0xee>
 801de8e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801de92:	d9db      	bls.n	801de4c <_printf_float+0x130>
 801de94:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801de98:	d118      	bne.n	801decc <_printf_float+0x1b0>
 801de9a:	2900      	cmp	r1, #0
 801de9c:	6863      	ldr	r3, [r4, #4]
 801de9e:	dd0b      	ble.n	801deb8 <_printf_float+0x19c>
 801dea0:	6121      	str	r1, [r4, #16]
 801dea2:	b913      	cbnz	r3, 801deaa <_printf_float+0x18e>
 801dea4:	6822      	ldr	r2, [r4, #0]
 801dea6:	07d0      	lsls	r0, r2, #31
 801dea8:	d502      	bpl.n	801deb0 <_printf_float+0x194>
 801deaa:	3301      	adds	r3, #1
 801deac:	440b      	add	r3, r1
 801deae:	6123      	str	r3, [r4, #16]
 801deb0:	f04f 0900 	mov.w	r9, #0
 801deb4:	65a1      	str	r1, [r4, #88]	@ 0x58
 801deb6:	e7db      	b.n	801de70 <_printf_float+0x154>
 801deb8:	b913      	cbnz	r3, 801dec0 <_printf_float+0x1a4>
 801deba:	6822      	ldr	r2, [r4, #0]
 801debc:	07d2      	lsls	r2, r2, #31
 801debe:	d501      	bpl.n	801dec4 <_printf_float+0x1a8>
 801dec0:	3302      	adds	r3, #2
 801dec2:	e7f4      	b.n	801deae <_printf_float+0x192>
 801dec4:	2301      	movs	r3, #1
 801dec6:	e7f2      	b.n	801deae <_printf_float+0x192>
 801dec8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801decc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801dece:	4299      	cmp	r1, r3
 801ded0:	db05      	blt.n	801dede <_printf_float+0x1c2>
 801ded2:	6823      	ldr	r3, [r4, #0]
 801ded4:	6121      	str	r1, [r4, #16]
 801ded6:	07d8      	lsls	r0, r3, #31
 801ded8:	d5ea      	bpl.n	801deb0 <_printf_float+0x194>
 801deda:	1c4b      	adds	r3, r1, #1
 801dedc:	e7e7      	b.n	801deae <_printf_float+0x192>
 801dede:	2900      	cmp	r1, #0
 801dee0:	bfd4      	ite	le
 801dee2:	f1c1 0202 	rsble	r2, r1, #2
 801dee6:	2201      	movgt	r2, #1
 801dee8:	4413      	add	r3, r2
 801deea:	e7e0      	b.n	801deae <_printf_float+0x192>
 801deec:	6823      	ldr	r3, [r4, #0]
 801deee:	055a      	lsls	r2, r3, #21
 801def0:	d407      	bmi.n	801df02 <_printf_float+0x1e6>
 801def2:	6923      	ldr	r3, [r4, #16]
 801def4:	4642      	mov	r2, r8
 801def6:	4631      	mov	r1, r6
 801def8:	4628      	mov	r0, r5
 801defa:	47b8      	blx	r7
 801defc:	3001      	adds	r0, #1
 801defe:	d12b      	bne.n	801df58 <_printf_float+0x23c>
 801df00:	e767      	b.n	801ddd2 <_printf_float+0xb6>
 801df02:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801df06:	f240 80dd 	bls.w	801e0c4 <_printf_float+0x3a8>
 801df0a:	2200      	movs	r2, #0
 801df0c:	2300      	movs	r3, #0
 801df0e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801df12:	f7e2 fdf3 	bl	8000afc <__aeabi_dcmpeq>
 801df16:	2800      	cmp	r0, #0
 801df18:	d033      	beq.n	801df82 <_printf_float+0x266>
 801df1a:	2301      	movs	r3, #1
 801df1c:	4a36      	ldr	r2, [pc, #216]	@ (801dff8 <_printf_float+0x2dc>)
 801df1e:	4631      	mov	r1, r6
 801df20:	4628      	mov	r0, r5
 801df22:	47b8      	blx	r7
 801df24:	3001      	adds	r0, #1
 801df26:	f43f af54 	beq.w	801ddd2 <_printf_float+0xb6>
 801df2a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801df2e:	4543      	cmp	r3, r8
 801df30:	db02      	blt.n	801df38 <_printf_float+0x21c>
 801df32:	6823      	ldr	r3, [r4, #0]
 801df34:	07d8      	lsls	r0, r3, #31
 801df36:	d50f      	bpl.n	801df58 <_printf_float+0x23c>
 801df38:	4631      	mov	r1, r6
 801df3a:	4628      	mov	r0, r5
 801df3c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801df40:	47b8      	blx	r7
 801df42:	3001      	adds	r0, #1
 801df44:	f43f af45 	beq.w	801ddd2 <_printf_float+0xb6>
 801df48:	f04f 0900 	mov.w	r9, #0
 801df4c:	f108 38ff 	add.w	r8, r8, #4294967295
 801df50:	f104 0a1a 	add.w	sl, r4, #26
 801df54:	45c8      	cmp	r8, r9
 801df56:	dc09      	bgt.n	801df6c <_printf_float+0x250>
 801df58:	6823      	ldr	r3, [r4, #0]
 801df5a:	079b      	lsls	r3, r3, #30
 801df5c:	f100 8103 	bmi.w	801e166 <_printf_float+0x44a>
 801df60:	68e0      	ldr	r0, [r4, #12]
 801df62:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801df64:	4298      	cmp	r0, r3
 801df66:	bfb8      	it	lt
 801df68:	4618      	movlt	r0, r3
 801df6a:	e734      	b.n	801ddd6 <_printf_float+0xba>
 801df6c:	2301      	movs	r3, #1
 801df6e:	4652      	mov	r2, sl
 801df70:	4631      	mov	r1, r6
 801df72:	4628      	mov	r0, r5
 801df74:	47b8      	blx	r7
 801df76:	3001      	adds	r0, #1
 801df78:	f43f af2b 	beq.w	801ddd2 <_printf_float+0xb6>
 801df7c:	f109 0901 	add.w	r9, r9, #1
 801df80:	e7e8      	b.n	801df54 <_printf_float+0x238>
 801df82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801df84:	2b00      	cmp	r3, #0
 801df86:	dc39      	bgt.n	801dffc <_printf_float+0x2e0>
 801df88:	2301      	movs	r3, #1
 801df8a:	4a1b      	ldr	r2, [pc, #108]	@ (801dff8 <_printf_float+0x2dc>)
 801df8c:	4631      	mov	r1, r6
 801df8e:	4628      	mov	r0, r5
 801df90:	47b8      	blx	r7
 801df92:	3001      	adds	r0, #1
 801df94:	f43f af1d 	beq.w	801ddd2 <_printf_float+0xb6>
 801df98:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801df9c:	ea59 0303 	orrs.w	r3, r9, r3
 801dfa0:	d102      	bne.n	801dfa8 <_printf_float+0x28c>
 801dfa2:	6823      	ldr	r3, [r4, #0]
 801dfa4:	07d9      	lsls	r1, r3, #31
 801dfa6:	d5d7      	bpl.n	801df58 <_printf_float+0x23c>
 801dfa8:	4631      	mov	r1, r6
 801dfaa:	4628      	mov	r0, r5
 801dfac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801dfb0:	47b8      	blx	r7
 801dfb2:	3001      	adds	r0, #1
 801dfb4:	f43f af0d 	beq.w	801ddd2 <_printf_float+0xb6>
 801dfb8:	f04f 0a00 	mov.w	sl, #0
 801dfbc:	f104 0b1a 	add.w	fp, r4, #26
 801dfc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dfc2:	425b      	negs	r3, r3
 801dfc4:	4553      	cmp	r3, sl
 801dfc6:	dc01      	bgt.n	801dfcc <_printf_float+0x2b0>
 801dfc8:	464b      	mov	r3, r9
 801dfca:	e793      	b.n	801def4 <_printf_float+0x1d8>
 801dfcc:	2301      	movs	r3, #1
 801dfce:	465a      	mov	r2, fp
 801dfd0:	4631      	mov	r1, r6
 801dfd2:	4628      	mov	r0, r5
 801dfd4:	47b8      	blx	r7
 801dfd6:	3001      	adds	r0, #1
 801dfd8:	f43f aefb 	beq.w	801ddd2 <_printf_float+0xb6>
 801dfdc:	f10a 0a01 	add.w	sl, sl, #1
 801dfe0:	e7ee      	b.n	801dfc0 <_printf_float+0x2a4>
 801dfe2:	bf00      	nop
 801dfe4:	7fefffff 	.word	0x7fefffff
 801dfe8:	080244f9 	.word	0x080244f9
 801dfec:	080244fd 	.word	0x080244fd
 801dff0:	08024501 	.word	0x08024501
 801dff4:	08024505 	.word	0x08024505
 801dff8:	08024837 	.word	0x08024837
 801dffc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801dffe:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801e002:	4553      	cmp	r3, sl
 801e004:	bfa8      	it	ge
 801e006:	4653      	movge	r3, sl
 801e008:	2b00      	cmp	r3, #0
 801e00a:	4699      	mov	r9, r3
 801e00c:	dc36      	bgt.n	801e07c <_printf_float+0x360>
 801e00e:	f04f 0b00 	mov.w	fp, #0
 801e012:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801e016:	f104 021a 	add.w	r2, r4, #26
 801e01a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801e01c:	9306      	str	r3, [sp, #24]
 801e01e:	eba3 0309 	sub.w	r3, r3, r9
 801e022:	455b      	cmp	r3, fp
 801e024:	dc31      	bgt.n	801e08a <_printf_float+0x36e>
 801e026:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e028:	459a      	cmp	sl, r3
 801e02a:	dc3a      	bgt.n	801e0a2 <_printf_float+0x386>
 801e02c:	6823      	ldr	r3, [r4, #0]
 801e02e:	07da      	lsls	r2, r3, #31
 801e030:	d437      	bmi.n	801e0a2 <_printf_float+0x386>
 801e032:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e034:	ebaa 0903 	sub.w	r9, sl, r3
 801e038:	9b06      	ldr	r3, [sp, #24]
 801e03a:	ebaa 0303 	sub.w	r3, sl, r3
 801e03e:	4599      	cmp	r9, r3
 801e040:	bfa8      	it	ge
 801e042:	4699      	movge	r9, r3
 801e044:	f1b9 0f00 	cmp.w	r9, #0
 801e048:	dc33      	bgt.n	801e0b2 <_printf_float+0x396>
 801e04a:	f04f 0800 	mov.w	r8, #0
 801e04e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801e052:	f104 0b1a 	add.w	fp, r4, #26
 801e056:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e058:	ebaa 0303 	sub.w	r3, sl, r3
 801e05c:	eba3 0309 	sub.w	r3, r3, r9
 801e060:	4543      	cmp	r3, r8
 801e062:	f77f af79 	ble.w	801df58 <_printf_float+0x23c>
 801e066:	2301      	movs	r3, #1
 801e068:	465a      	mov	r2, fp
 801e06a:	4631      	mov	r1, r6
 801e06c:	4628      	mov	r0, r5
 801e06e:	47b8      	blx	r7
 801e070:	3001      	adds	r0, #1
 801e072:	f43f aeae 	beq.w	801ddd2 <_printf_float+0xb6>
 801e076:	f108 0801 	add.w	r8, r8, #1
 801e07a:	e7ec      	b.n	801e056 <_printf_float+0x33a>
 801e07c:	4642      	mov	r2, r8
 801e07e:	4631      	mov	r1, r6
 801e080:	4628      	mov	r0, r5
 801e082:	47b8      	blx	r7
 801e084:	3001      	adds	r0, #1
 801e086:	d1c2      	bne.n	801e00e <_printf_float+0x2f2>
 801e088:	e6a3      	b.n	801ddd2 <_printf_float+0xb6>
 801e08a:	2301      	movs	r3, #1
 801e08c:	4631      	mov	r1, r6
 801e08e:	4628      	mov	r0, r5
 801e090:	9206      	str	r2, [sp, #24]
 801e092:	47b8      	blx	r7
 801e094:	3001      	adds	r0, #1
 801e096:	f43f ae9c 	beq.w	801ddd2 <_printf_float+0xb6>
 801e09a:	f10b 0b01 	add.w	fp, fp, #1
 801e09e:	9a06      	ldr	r2, [sp, #24]
 801e0a0:	e7bb      	b.n	801e01a <_printf_float+0x2fe>
 801e0a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801e0a6:	4631      	mov	r1, r6
 801e0a8:	4628      	mov	r0, r5
 801e0aa:	47b8      	blx	r7
 801e0ac:	3001      	adds	r0, #1
 801e0ae:	d1c0      	bne.n	801e032 <_printf_float+0x316>
 801e0b0:	e68f      	b.n	801ddd2 <_printf_float+0xb6>
 801e0b2:	9a06      	ldr	r2, [sp, #24]
 801e0b4:	464b      	mov	r3, r9
 801e0b6:	4631      	mov	r1, r6
 801e0b8:	4628      	mov	r0, r5
 801e0ba:	4442      	add	r2, r8
 801e0bc:	47b8      	blx	r7
 801e0be:	3001      	adds	r0, #1
 801e0c0:	d1c3      	bne.n	801e04a <_printf_float+0x32e>
 801e0c2:	e686      	b.n	801ddd2 <_printf_float+0xb6>
 801e0c4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801e0c8:	f1ba 0f01 	cmp.w	sl, #1
 801e0cc:	dc01      	bgt.n	801e0d2 <_printf_float+0x3b6>
 801e0ce:	07db      	lsls	r3, r3, #31
 801e0d0:	d536      	bpl.n	801e140 <_printf_float+0x424>
 801e0d2:	2301      	movs	r3, #1
 801e0d4:	4642      	mov	r2, r8
 801e0d6:	4631      	mov	r1, r6
 801e0d8:	4628      	mov	r0, r5
 801e0da:	47b8      	blx	r7
 801e0dc:	3001      	adds	r0, #1
 801e0de:	f43f ae78 	beq.w	801ddd2 <_printf_float+0xb6>
 801e0e2:	4631      	mov	r1, r6
 801e0e4:	4628      	mov	r0, r5
 801e0e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801e0ea:	47b8      	blx	r7
 801e0ec:	3001      	adds	r0, #1
 801e0ee:	f43f ae70 	beq.w	801ddd2 <_printf_float+0xb6>
 801e0f2:	2200      	movs	r2, #0
 801e0f4:	2300      	movs	r3, #0
 801e0f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e0fa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801e0fe:	f7e2 fcfd 	bl	8000afc <__aeabi_dcmpeq>
 801e102:	b9c0      	cbnz	r0, 801e136 <_printf_float+0x41a>
 801e104:	4653      	mov	r3, sl
 801e106:	f108 0201 	add.w	r2, r8, #1
 801e10a:	4631      	mov	r1, r6
 801e10c:	4628      	mov	r0, r5
 801e10e:	47b8      	blx	r7
 801e110:	3001      	adds	r0, #1
 801e112:	d10c      	bne.n	801e12e <_printf_float+0x412>
 801e114:	e65d      	b.n	801ddd2 <_printf_float+0xb6>
 801e116:	2301      	movs	r3, #1
 801e118:	465a      	mov	r2, fp
 801e11a:	4631      	mov	r1, r6
 801e11c:	4628      	mov	r0, r5
 801e11e:	47b8      	blx	r7
 801e120:	3001      	adds	r0, #1
 801e122:	f43f ae56 	beq.w	801ddd2 <_printf_float+0xb6>
 801e126:	f108 0801 	add.w	r8, r8, #1
 801e12a:	45d0      	cmp	r8, sl
 801e12c:	dbf3      	blt.n	801e116 <_printf_float+0x3fa>
 801e12e:	464b      	mov	r3, r9
 801e130:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801e134:	e6df      	b.n	801def6 <_printf_float+0x1da>
 801e136:	f04f 0800 	mov.w	r8, #0
 801e13a:	f104 0b1a 	add.w	fp, r4, #26
 801e13e:	e7f4      	b.n	801e12a <_printf_float+0x40e>
 801e140:	2301      	movs	r3, #1
 801e142:	4642      	mov	r2, r8
 801e144:	e7e1      	b.n	801e10a <_printf_float+0x3ee>
 801e146:	2301      	movs	r3, #1
 801e148:	464a      	mov	r2, r9
 801e14a:	4631      	mov	r1, r6
 801e14c:	4628      	mov	r0, r5
 801e14e:	47b8      	blx	r7
 801e150:	3001      	adds	r0, #1
 801e152:	f43f ae3e 	beq.w	801ddd2 <_printf_float+0xb6>
 801e156:	f108 0801 	add.w	r8, r8, #1
 801e15a:	68e3      	ldr	r3, [r4, #12]
 801e15c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801e15e:	1a5b      	subs	r3, r3, r1
 801e160:	4543      	cmp	r3, r8
 801e162:	dcf0      	bgt.n	801e146 <_printf_float+0x42a>
 801e164:	e6fc      	b.n	801df60 <_printf_float+0x244>
 801e166:	f04f 0800 	mov.w	r8, #0
 801e16a:	f104 0919 	add.w	r9, r4, #25
 801e16e:	e7f4      	b.n	801e15a <_printf_float+0x43e>

0801e170 <_printf_common>:
 801e170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e174:	4616      	mov	r6, r2
 801e176:	4698      	mov	r8, r3
 801e178:	688a      	ldr	r2, [r1, #8]
 801e17a:	4607      	mov	r7, r0
 801e17c:	690b      	ldr	r3, [r1, #16]
 801e17e:	460c      	mov	r4, r1
 801e180:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801e184:	4293      	cmp	r3, r2
 801e186:	bfb8      	it	lt
 801e188:	4613      	movlt	r3, r2
 801e18a:	6033      	str	r3, [r6, #0]
 801e18c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801e190:	b10a      	cbz	r2, 801e196 <_printf_common+0x26>
 801e192:	3301      	adds	r3, #1
 801e194:	6033      	str	r3, [r6, #0]
 801e196:	6823      	ldr	r3, [r4, #0]
 801e198:	0699      	lsls	r1, r3, #26
 801e19a:	bf42      	ittt	mi
 801e19c:	6833      	ldrmi	r3, [r6, #0]
 801e19e:	3302      	addmi	r3, #2
 801e1a0:	6033      	strmi	r3, [r6, #0]
 801e1a2:	6825      	ldr	r5, [r4, #0]
 801e1a4:	f015 0506 	ands.w	r5, r5, #6
 801e1a8:	d106      	bne.n	801e1b8 <_printf_common+0x48>
 801e1aa:	f104 0a19 	add.w	sl, r4, #25
 801e1ae:	68e3      	ldr	r3, [r4, #12]
 801e1b0:	6832      	ldr	r2, [r6, #0]
 801e1b2:	1a9b      	subs	r3, r3, r2
 801e1b4:	42ab      	cmp	r3, r5
 801e1b6:	dc2b      	bgt.n	801e210 <_printf_common+0xa0>
 801e1b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801e1bc:	6822      	ldr	r2, [r4, #0]
 801e1be:	3b00      	subs	r3, #0
 801e1c0:	bf18      	it	ne
 801e1c2:	2301      	movne	r3, #1
 801e1c4:	0692      	lsls	r2, r2, #26
 801e1c6:	d430      	bmi.n	801e22a <_printf_common+0xba>
 801e1c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801e1cc:	4641      	mov	r1, r8
 801e1ce:	4638      	mov	r0, r7
 801e1d0:	47c8      	blx	r9
 801e1d2:	3001      	adds	r0, #1
 801e1d4:	d023      	beq.n	801e21e <_printf_common+0xae>
 801e1d6:	6823      	ldr	r3, [r4, #0]
 801e1d8:	341a      	adds	r4, #26
 801e1da:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 801e1de:	f003 0306 	and.w	r3, r3, #6
 801e1e2:	2b04      	cmp	r3, #4
 801e1e4:	bf0a      	itet	eq
 801e1e6:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 801e1ea:	2500      	movne	r5, #0
 801e1ec:	6833      	ldreq	r3, [r6, #0]
 801e1ee:	f04f 0600 	mov.w	r6, #0
 801e1f2:	bf08      	it	eq
 801e1f4:	1aed      	subeq	r5, r5, r3
 801e1f6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 801e1fa:	bf08      	it	eq
 801e1fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801e200:	4293      	cmp	r3, r2
 801e202:	bfc4      	itt	gt
 801e204:	1a9b      	subgt	r3, r3, r2
 801e206:	18ed      	addgt	r5, r5, r3
 801e208:	42b5      	cmp	r5, r6
 801e20a:	d11a      	bne.n	801e242 <_printf_common+0xd2>
 801e20c:	2000      	movs	r0, #0
 801e20e:	e008      	b.n	801e222 <_printf_common+0xb2>
 801e210:	2301      	movs	r3, #1
 801e212:	4652      	mov	r2, sl
 801e214:	4641      	mov	r1, r8
 801e216:	4638      	mov	r0, r7
 801e218:	47c8      	blx	r9
 801e21a:	3001      	adds	r0, #1
 801e21c:	d103      	bne.n	801e226 <_printf_common+0xb6>
 801e21e:	f04f 30ff 	mov.w	r0, #4294967295
 801e222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e226:	3501      	adds	r5, #1
 801e228:	e7c1      	b.n	801e1ae <_printf_common+0x3e>
 801e22a:	18e1      	adds	r1, r4, r3
 801e22c:	1c5a      	adds	r2, r3, #1
 801e22e:	2030      	movs	r0, #48	@ 0x30
 801e230:	3302      	adds	r3, #2
 801e232:	4422      	add	r2, r4
 801e234:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801e238:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801e23c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801e240:	e7c2      	b.n	801e1c8 <_printf_common+0x58>
 801e242:	2301      	movs	r3, #1
 801e244:	4622      	mov	r2, r4
 801e246:	4641      	mov	r1, r8
 801e248:	4638      	mov	r0, r7
 801e24a:	47c8      	blx	r9
 801e24c:	3001      	adds	r0, #1
 801e24e:	d0e6      	beq.n	801e21e <_printf_common+0xae>
 801e250:	3601      	adds	r6, #1
 801e252:	e7d9      	b.n	801e208 <_printf_common+0x98>

0801e254 <_printf_i>:
 801e254:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801e258:	7e0f      	ldrb	r7, [r1, #24]
 801e25a:	4691      	mov	r9, r2
 801e25c:	4680      	mov	r8, r0
 801e25e:	460c      	mov	r4, r1
 801e260:	2f78      	cmp	r7, #120	@ 0x78
 801e262:	469a      	mov	sl, r3
 801e264:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801e266:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801e26a:	d807      	bhi.n	801e27c <_printf_i+0x28>
 801e26c:	2f62      	cmp	r7, #98	@ 0x62
 801e26e:	d80a      	bhi.n	801e286 <_printf_i+0x32>
 801e270:	2f00      	cmp	r7, #0
 801e272:	f000 80d2 	beq.w	801e41a <_printf_i+0x1c6>
 801e276:	2f58      	cmp	r7, #88	@ 0x58
 801e278:	f000 80b9 	beq.w	801e3ee <_printf_i+0x19a>
 801e27c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801e280:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801e284:	e03a      	b.n	801e2fc <_printf_i+0xa8>
 801e286:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801e28a:	2b15      	cmp	r3, #21
 801e28c:	d8f6      	bhi.n	801e27c <_printf_i+0x28>
 801e28e:	a101      	add	r1, pc, #4	@ (adr r1, 801e294 <_printf_i+0x40>)
 801e290:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801e294:	0801e2ed 	.word	0x0801e2ed
 801e298:	0801e301 	.word	0x0801e301
 801e29c:	0801e27d 	.word	0x0801e27d
 801e2a0:	0801e27d 	.word	0x0801e27d
 801e2a4:	0801e27d 	.word	0x0801e27d
 801e2a8:	0801e27d 	.word	0x0801e27d
 801e2ac:	0801e301 	.word	0x0801e301
 801e2b0:	0801e27d 	.word	0x0801e27d
 801e2b4:	0801e27d 	.word	0x0801e27d
 801e2b8:	0801e27d 	.word	0x0801e27d
 801e2bc:	0801e27d 	.word	0x0801e27d
 801e2c0:	0801e401 	.word	0x0801e401
 801e2c4:	0801e32b 	.word	0x0801e32b
 801e2c8:	0801e3bb 	.word	0x0801e3bb
 801e2cc:	0801e27d 	.word	0x0801e27d
 801e2d0:	0801e27d 	.word	0x0801e27d
 801e2d4:	0801e423 	.word	0x0801e423
 801e2d8:	0801e27d 	.word	0x0801e27d
 801e2dc:	0801e32b 	.word	0x0801e32b
 801e2e0:	0801e27d 	.word	0x0801e27d
 801e2e4:	0801e27d 	.word	0x0801e27d
 801e2e8:	0801e3c3 	.word	0x0801e3c3
 801e2ec:	6833      	ldr	r3, [r6, #0]
 801e2ee:	1d1a      	adds	r2, r3, #4
 801e2f0:	681b      	ldr	r3, [r3, #0]
 801e2f2:	6032      	str	r2, [r6, #0]
 801e2f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801e2f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801e2fc:	2301      	movs	r3, #1
 801e2fe:	e09d      	b.n	801e43c <_printf_i+0x1e8>
 801e300:	6833      	ldr	r3, [r6, #0]
 801e302:	6820      	ldr	r0, [r4, #0]
 801e304:	1d19      	adds	r1, r3, #4
 801e306:	6031      	str	r1, [r6, #0]
 801e308:	0606      	lsls	r6, r0, #24
 801e30a:	d501      	bpl.n	801e310 <_printf_i+0xbc>
 801e30c:	681d      	ldr	r5, [r3, #0]
 801e30e:	e003      	b.n	801e318 <_printf_i+0xc4>
 801e310:	0645      	lsls	r5, r0, #25
 801e312:	d5fb      	bpl.n	801e30c <_printf_i+0xb8>
 801e314:	f9b3 5000 	ldrsh.w	r5, [r3]
 801e318:	2d00      	cmp	r5, #0
 801e31a:	da03      	bge.n	801e324 <_printf_i+0xd0>
 801e31c:	232d      	movs	r3, #45	@ 0x2d
 801e31e:	426d      	negs	r5, r5
 801e320:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801e324:	4859      	ldr	r0, [pc, #356]	@ (801e48c <_printf_i+0x238>)
 801e326:	230a      	movs	r3, #10
 801e328:	e011      	b.n	801e34e <_printf_i+0xfa>
 801e32a:	6821      	ldr	r1, [r4, #0]
 801e32c:	6833      	ldr	r3, [r6, #0]
 801e32e:	0608      	lsls	r0, r1, #24
 801e330:	f853 5b04 	ldr.w	r5, [r3], #4
 801e334:	d402      	bmi.n	801e33c <_printf_i+0xe8>
 801e336:	0649      	lsls	r1, r1, #25
 801e338:	bf48      	it	mi
 801e33a:	b2ad      	uxthmi	r5, r5
 801e33c:	2f6f      	cmp	r7, #111	@ 0x6f
 801e33e:	6033      	str	r3, [r6, #0]
 801e340:	4852      	ldr	r0, [pc, #328]	@ (801e48c <_printf_i+0x238>)
 801e342:	bf14      	ite	ne
 801e344:	230a      	movne	r3, #10
 801e346:	2308      	moveq	r3, #8
 801e348:	2100      	movs	r1, #0
 801e34a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801e34e:	6866      	ldr	r6, [r4, #4]
 801e350:	2e00      	cmp	r6, #0
 801e352:	60a6      	str	r6, [r4, #8]
 801e354:	bfa2      	ittt	ge
 801e356:	6821      	ldrge	r1, [r4, #0]
 801e358:	f021 0104 	bicge.w	r1, r1, #4
 801e35c:	6021      	strge	r1, [r4, #0]
 801e35e:	b90d      	cbnz	r5, 801e364 <_printf_i+0x110>
 801e360:	2e00      	cmp	r6, #0
 801e362:	d04b      	beq.n	801e3fc <_printf_i+0x1a8>
 801e364:	4616      	mov	r6, r2
 801e366:	fbb5 f1f3 	udiv	r1, r5, r3
 801e36a:	fb03 5711 	mls	r7, r3, r1, r5
 801e36e:	5dc7      	ldrb	r7, [r0, r7]
 801e370:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801e374:	462f      	mov	r7, r5
 801e376:	460d      	mov	r5, r1
 801e378:	42bb      	cmp	r3, r7
 801e37a:	d9f4      	bls.n	801e366 <_printf_i+0x112>
 801e37c:	2b08      	cmp	r3, #8
 801e37e:	d10b      	bne.n	801e398 <_printf_i+0x144>
 801e380:	6823      	ldr	r3, [r4, #0]
 801e382:	07df      	lsls	r7, r3, #31
 801e384:	d508      	bpl.n	801e398 <_printf_i+0x144>
 801e386:	6923      	ldr	r3, [r4, #16]
 801e388:	6861      	ldr	r1, [r4, #4]
 801e38a:	4299      	cmp	r1, r3
 801e38c:	bfde      	ittt	le
 801e38e:	2330      	movle	r3, #48	@ 0x30
 801e390:	f806 3c01 	strble.w	r3, [r6, #-1]
 801e394:	f106 36ff 	addle.w	r6, r6, #4294967295
 801e398:	1b92      	subs	r2, r2, r6
 801e39a:	6122      	str	r2, [r4, #16]
 801e39c:	464b      	mov	r3, r9
 801e39e:	aa03      	add	r2, sp, #12
 801e3a0:	4621      	mov	r1, r4
 801e3a2:	4640      	mov	r0, r8
 801e3a4:	f8cd a000 	str.w	sl, [sp]
 801e3a8:	f7ff fee2 	bl	801e170 <_printf_common>
 801e3ac:	3001      	adds	r0, #1
 801e3ae:	d14a      	bne.n	801e446 <_printf_i+0x1f2>
 801e3b0:	f04f 30ff 	mov.w	r0, #4294967295
 801e3b4:	b004      	add	sp, #16
 801e3b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e3ba:	6823      	ldr	r3, [r4, #0]
 801e3bc:	f043 0320 	orr.w	r3, r3, #32
 801e3c0:	6023      	str	r3, [r4, #0]
 801e3c2:	2778      	movs	r7, #120	@ 0x78
 801e3c4:	4832      	ldr	r0, [pc, #200]	@ (801e490 <_printf_i+0x23c>)
 801e3c6:	6823      	ldr	r3, [r4, #0]
 801e3c8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801e3cc:	061f      	lsls	r7, r3, #24
 801e3ce:	6831      	ldr	r1, [r6, #0]
 801e3d0:	f851 5b04 	ldr.w	r5, [r1], #4
 801e3d4:	d402      	bmi.n	801e3dc <_printf_i+0x188>
 801e3d6:	065f      	lsls	r7, r3, #25
 801e3d8:	bf48      	it	mi
 801e3da:	b2ad      	uxthmi	r5, r5
 801e3dc:	6031      	str	r1, [r6, #0]
 801e3de:	07d9      	lsls	r1, r3, #31
 801e3e0:	bf44      	itt	mi
 801e3e2:	f043 0320 	orrmi.w	r3, r3, #32
 801e3e6:	6023      	strmi	r3, [r4, #0]
 801e3e8:	b11d      	cbz	r5, 801e3f2 <_printf_i+0x19e>
 801e3ea:	2310      	movs	r3, #16
 801e3ec:	e7ac      	b.n	801e348 <_printf_i+0xf4>
 801e3ee:	4827      	ldr	r0, [pc, #156]	@ (801e48c <_printf_i+0x238>)
 801e3f0:	e7e9      	b.n	801e3c6 <_printf_i+0x172>
 801e3f2:	6823      	ldr	r3, [r4, #0]
 801e3f4:	f023 0320 	bic.w	r3, r3, #32
 801e3f8:	6023      	str	r3, [r4, #0]
 801e3fa:	e7f6      	b.n	801e3ea <_printf_i+0x196>
 801e3fc:	4616      	mov	r6, r2
 801e3fe:	e7bd      	b.n	801e37c <_printf_i+0x128>
 801e400:	6833      	ldr	r3, [r6, #0]
 801e402:	6825      	ldr	r5, [r4, #0]
 801e404:	1d18      	adds	r0, r3, #4
 801e406:	6961      	ldr	r1, [r4, #20]
 801e408:	6030      	str	r0, [r6, #0]
 801e40a:	062e      	lsls	r6, r5, #24
 801e40c:	681b      	ldr	r3, [r3, #0]
 801e40e:	d501      	bpl.n	801e414 <_printf_i+0x1c0>
 801e410:	6019      	str	r1, [r3, #0]
 801e412:	e002      	b.n	801e41a <_printf_i+0x1c6>
 801e414:	0668      	lsls	r0, r5, #25
 801e416:	d5fb      	bpl.n	801e410 <_printf_i+0x1bc>
 801e418:	8019      	strh	r1, [r3, #0]
 801e41a:	2300      	movs	r3, #0
 801e41c:	4616      	mov	r6, r2
 801e41e:	6123      	str	r3, [r4, #16]
 801e420:	e7bc      	b.n	801e39c <_printf_i+0x148>
 801e422:	6833      	ldr	r3, [r6, #0]
 801e424:	2100      	movs	r1, #0
 801e426:	1d1a      	adds	r2, r3, #4
 801e428:	6032      	str	r2, [r6, #0]
 801e42a:	681e      	ldr	r6, [r3, #0]
 801e42c:	6862      	ldr	r2, [r4, #4]
 801e42e:	4630      	mov	r0, r6
 801e430:	f000 fe53 	bl	801f0da <memchr>
 801e434:	b108      	cbz	r0, 801e43a <_printf_i+0x1e6>
 801e436:	1b80      	subs	r0, r0, r6
 801e438:	6060      	str	r0, [r4, #4]
 801e43a:	6863      	ldr	r3, [r4, #4]
 801e43c:	6123      	str	r3, [r4, #16]
 801e43e:	2300      	movs	r3, #0
 801e440:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801e444:	e7aa      	b.n	801e39c <_printf_i+0x148>
 801e446:	6923      	ldr	r3, [r4, #16]
 801e448:	4632      	mov	r2, r6
 801e44a:	4649      	mov	r1, r9
 801e44c:	4640      	mov	r0, r8
 801e44e:	47d0      	blx	sl
 801e450:	3001      	adds	r0, #1
 801e452:	d0ad      	beq.n	801e3b0 <_printf_i+0x15c>
 801e454:	6823      	ldr	r3, [r4, #0]
 801e456:	079b      	lsls	r3, r3, #30
 801e458:	d413      	bmi.n	801e482 <_printf_i+0x22e>
 801e45a:	68e0      	ldr	r0, [r4, #12]
 801e45c:	9b03      	ldr	r3, [sp, #12]
 801e45e:	4298      	cmp	r0, r3
 801e460:	bfb8      	it	lt
 801e462:	4618      	movlt	r0, r3
 801e464:	e7a6      	b.n	801e3b4 <_printf_i+0x160>
 801e466:	2301      	movs	r3, #1
 801e468:	4632      	mov	r2, r6
 801e46a:	4649      	mov	r1, r9
 801e46c:	4640      	mov	r0, r8
 801e46e:	47d0      	blx	sl
 801e470:	3001      	adds	r0, #1
 801e472:	d09d      	beq.n	801e3b0 <_printf_i+0x15c>
 801e474:	3501      	adds	r5, #1
 801e476:	68e3      	ldr	r3, [r4, #12]
 801e478:	9903      	ldr	r1, [sp, #12]
 801e47a:	1a5b      	subs	r3, r3, r1
 801e47c:	42ab      	cmp	r3, r5
 801e47e:	dcf2      	bgt.n	801e466 <_printf_i+0x212>
 801e480:	e7eb      	b.n	801e45a <_printf_i+0x206>
 801e482:	2500      	movs	r5, #0
 801e484:	f104 0619 	add.w	r6, r4, #25
 801e488:	e7f5      	b.n	801e476 <_printf_i+0x222>
 801e48a:	bf00      	nop
 801e48c:	08024509 	.word	0x08024509
 801e490:	0802451a 	.word	0x0802451a

0801e494 <_scanf_float>:
 801e494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e498:	b087      	sub	sp, #28
 801e49a:	4617      	mov	r7, r2
 801e49c:	4680      	mov	r8, r0
 801e49e:	460c      	mov	r4, r1
 801e4a0:	9303      	str	r3, [sp, #12]
 801e4a2:	688b      	ldr	r3, [r1, #8]
 801e4a4:	1e5a      	subs	r2, r3, #1
 801e4a6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801e4aa:	460a      	mov	r2, r1
 801e4ac:	bf89      	itett	hi
 801e4ae:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801e4b2:	f04f 0b00 	movls.w	fp, #0
 801e4b6:	eb03 0b05 	addhi.w	fp, r3, r5
 801e4ba:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801e4be:	f04f 0500 	mov.w	r5, #0
 801e4c2:	bf88      	it	hi
 801e4c4:	608b      	strhi	r3, [r1, #8]
 801e4c6:	680b      	ldr	r3, [r1, #0]
 801e4c8:	46aa      	mov	sl, r5
 801e4ca:	46a9      	mov	r9, r5
 801e4cc:	9502      	str	r5, [sp, #8]
 801e4ce:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 801e4d2:	f842 3b1c 	str.w	r3, [r2], #28
 801e4d6:	4616      	mov	r6, r2
 801e4d8:	9201      	str	r2, [sp, #4]
 801e4da:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801e4de:	68a2      	ldr	r2, [r4, #8]
 801e4e0:	b152      	cbz	r2, 801e4f8 <_scanf_float+0x64>
 801e4e2:	683b      	ldr	r3, [r7, #0]
 801e4e4:	781b      	ldrb	r3, [r3, #0]
 801e4e6:	2b4e      	cmp	r3, #78	@ 0x4e
 801e4e8:	d864      	bhi.n	801e5b4 <_scanf_float+0x120>
 801e4ea:	2b40      	cmp	r3, #64	@ 0x40
 801e4ec:	d83c      	bhi.n	801e568 <_scanf_float+0xd4>
 801e4ee:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 801e4f2:	b2c8      	uxtb	r0, r1
 801e4f4:	280e      	cmp	r0, #14
 801e4f6:	d93a      	bls.n	801e56e <_scanf_float+0xda>
 801e4f8:	f1b9 0f00 	cmp.w	r9, #0
 801e4fc:	d003      	beq.n	801e506 <_scanf_float+0x72>
 801e4fe:	6823      	ldr	r3, [r4, #0]
 801e500:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801e504:	6023      	str	r3, [r4, #0]
 801e506:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e50a:	f1ba 0f01 	cmp.w	sl, #1
 801e50e:	f200 8117 	bhi.w	801e740 <_scanf_float+0x2ac>
 801e512:	9b01      	ldr	r3, [sp, #4]
 801e514:	429e      	cmp	r6, r3
 801e516:	f200 8108 	bhi.w	801e72a <_scanf_float+0x296>
 801e51a:	2001      	movs	r0, #1
 801e51c:	b007      	add	sp, #28
 801e51e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e522:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 801e526:	2a0d      	cmp	r2, #13
 801e528:	d8e6      	bhi.n	801e4f8 <_scanf_float+0x64>
 801e52a:	a101      	add	r1, pc, #4	@ (adr r1, 801e530 <_scanf_float+0x9c>)
 801e52c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801e530:	0801e677 	.word	0x0801e677
 801e534:	0801e4f9 	.word	0x0801e4f9
 801e538:	0801e4f9 	.word	0x0801e4f9
 801e53c:	0801e4f9 	.word	0x0801e4f9
 801e540:	0801e6d7 	.word	0x0801e6d7
 801e544:	0801e6af 	.word	0x0801e6af
 801e548:	0801e4f9 	.word	0x0801e4f9
 801e54c:	0801e4f9 	.word	0x0801e4f9
 801e550:	0801e685 	.word	0x0801e685
 801e554:	0801e4f9 	.word	0x0801e4f9
 801e558:	0801e4f9 	.word	0x0801e4f9
 801e55c:	0801e4f9 	.word	0x0801e4f9
 801e560:	0801e4f9 	.word	0x0801e4f9
 801e564:	0801e63d 	.word	0x0801e63d
 801e568:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 801e56c:	e7db      	b.n	801e526 <_scanf_float+0x92>
 801e56e:	290e      	cmp	r1, #14
 801e570:	d8c2      	bhi.n	801e4f8 <_scanf_float+0x64>
 801e572:	a001      	add	r0, pc, #4	@ (adr r0, 801e578 <_scanf_float+0xe4>)
 801e574:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801e578:	0801e62d 	.word	0x0801e62d
 801e57c:	0801e4f9 	.word	0x0801e4f9
 801e580:	0801e62d 	.word	0x0801e62d
 801e584:	0801e6c3 	.word	0x0801e6c3
 801e588:	0801e4f9 	.word	0x0801e4f9
 801e58c:	0801e5d5 	.word	0x0801e5d5
 801e590:	0801e613 	.word	0x0801e613
 801e594:	0801e613 	.word	0x0801e613
 801e598:	0801e613 	.word	0x0801e613
 801e59c:	0801e613 	.word	0x0801e613
 801e5a0:	0801e613 	.word	0x0801e613
 801e5a4:	0801e613 	.word	0x0801e613
 801e5a8:	0801e613 	.word	0x0801e613
 801e5ac:	0801e613 	.word	0x0801e613
 801e5b0:	0801e613 	.word	0x0801e613
 801e5b4:	2b6e      	cmp	r3, #110	@ 0x6e
 801e5b6:	d809      	bhi.n	801e5cc <_scanf_float+0x138>
 801e5b8:	2b60      	cmp	r3, #96	@ 0x60
 801e5ba:	d8b2      	bhi.n	801e522 <_scanf_float+0x8e>
 801e5bc:	2b54      	cmp	r3, #84	@ 0x54
 801e5be:	d07b      	beq.n	801e6b8 <_scanf_float+0x224>
 801e5c0:	2b59      	cmp	r3, #89	@ 0x59
 801e5c2:	d199      	bne.n	801e4f8 <_scanf_float+0x64>
 801e5c4:	2d07      	cmp	r5, #7
 801e5c6:	d197      	bne.n	801e4f8 <_scanf_float+0x64>
 801e5c8:	2508      	movs	r5, #8
 801e5ca:	e02c      	b.n	801e626 <_scanf_float+0x192>
 801e5cc:	2b74      	cmp	r3, #116	@ 0x74
 801e5ce:	d073      	beq.n	801e6b8 <_scanf_float+0x224>
 801e5d0:	2b79      	cmp	r3, #121	@ 0x79
 801e5d2:	e7f6      	b.n	801e5c2 <_scanf_float+0x12e>
 801e5d4:	6821      	ldr	r1, [r4, #0]
 801e5d6:	05c8      	lsls	r0, r1, #23
 801e5d8:	d51b      	bpl.n	801e612 <_scanf_float+0x17e>
 801e5da:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 801e5de:	f109 0901 	add.w	r9, r9, #1
 801e5e2:	6021      	str	r1, [r4, #0]
 801e5e4:	f1bb 0f00 	cmp.w	fp, #0
 801e5e8:	d003      	beq.n	801e5f2 <_scanf_float+0x15e>
 801e5ea:	3201      	adds	r2, #1
 801e5ec:	f10b 3bff 	add.w	fp, fp, #4294967295
 801e5f0:	60a2      	str	r2, [r4, #8]
 801e5f2:	68a3      	ldr	r3, [r4, #8]
 801e5f4:	3b01      	subs	r3, #1
 801e5f6:	60a3      	str	r3, [r4, #8]
 801e5f8:	6923      	ldr	r3, [r4, #16]
 801e5fa:	3301      	adds	r3, #1
 801e5fc:	6123      	str	r3, [r4, #16]
 801e5fe:	687b      	ldr	r3, [r7, #4]
 801e600:	3b01      	subs	r3, #1
 801e602:	2b00      	cmp	r3, #0
 801e604:	607b      	str	r3, [r7, #4]
 801e606:	f340 8087 	ble.w	801e718 <_scanf_float+0x284>
 801e60a:	683b      	ldr	r3, [r7, #0]
 801e60c:	3301      	adds	r3, #1
 801e60e:	603b      	str	r3, [r7, #0]
 801e610:	e765      	b.n	801e4de <_scanf_float+0x4a>
 801e612:	eb1a 0105 	adds.w	r1, sl, r5
 801e616:	f47f af6f 	bne.w	801e4f8 <_scanf_float+0x64>
 801e61a:	6822      	ldr	r2, [r4, #0]
 801e61c:	460d      	mov	r5, r1
 801e61e:	468a      	mov	sl, r1
 801e620:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 801e624:	6022      	str	r2, [r4, #0]
 801e626:	f806 3b01 	strb.w	r3, [r6], #1
 801e62a:	e7e2      	b.n	801e5f2 <_scanf_float+0x15e>
 801e62c:	6822      	ldr	r2, [r4, #0]
 801e62e:	0610      	lsls	r0, r2, #24
 801e630:	f57f af62 	bpl.w	801e4f8 <_scanf_float+0x64>
 801e634:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801e638:	6022      	str	r2, [r4, #0]
 801e63a:	e7f4      	b.n	801e626 <_scanf_float+0x192>
 801e63c:	f1ba 0f00 	cmp.w	sl, #0
 801e640:	d10e      	bne.n	801e660 <_scanf_float+0x1cc>
 801e642:	f1b9 0f00 	cmp.w	r9, #0
 801e646:	d10e      	bne.n	801e666 <_scanf_float+0x1d2>
 801e648:	6822      	ldr	r2, [r4, #0]
 801e64a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801e64e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801e652:	d108      	bne.n	801e666 <_scanf_float+0x1d2>
 801e654:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801e658:	f04f 0a01 	mov.w	sl, #1
 801e65c:	6022      	str	r2, [r4, #0]
 801e65e:	e7e2      	b.n	801e626 <_scanf_float+0x192>
 801e660:	f1ba 0f02 	cmp.w	sl, #2
 801e664:	d055      	beq.n	801e712 <_scanf_float+0x27e>
 801e666:	2d01      	cmp	r5, #1
 801e668:	d002      	beq.n	801e670 <_scanf_float+0x1dc>
 801e66a:	2d04      	cmp	r5, #4
 801e66c:	f47f af44 	bne.w	801e4f8 <_scanf_float+0x64>
 801e670:	3501      	adds	r5, #1
 801e672:	b2ed      	uxtb	r5, r5
 801e674:	e7d7      	b.n	801e626 <_scanf_float+0x192>
 801e676:	f1ba 0f01 	cmp.w	sl, #1
 801e67a:	f47f af3d 	bne.w	801e4f8 <_scanf_float+0x64>
 801e67e:	f04f 0a02 	mov.w	sl, #2
 801e682:	e7d0      	b.n	801e626 <_scanf_float+0x192>
 801e684:	b97d      	cbnz	r5, 801e6a6 <_scanf_float+0x212>
 801e686:	f1b9 0f00 	cmp.w	r9, #0
 801e68a:	f47f af38 	bne.w	801e4fe <_scanf_float+0x6a>
 801e68e:	6822      	ldr	r2, [r4, #0]
 801e690:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801e694:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801e698:	f040 8107 	bne.w	801e8aa <_scanf_float+0x416>
 801e69c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801e6a0:	2501      	movs	r5, #1
 801e6a2:	6022      	str	r2, [r4, #0]
 801e6a4:	e7bf      	b.n	801e626 <_scanf_float+0x192>
 801e6a6:	2d03      	cmp	r5, #3
 801e6a8:	d0e2      	beq.n	801e670 <_scanf_float+0x1dc>
 801e6aa:	2d05      	cmp	r5, #5
 801e6ac:	e7de      	b.n	801e66c <_scanf_float+0x1d8>
 801e6ae:	2d02      	cmp	r5, #2
 801e6b0:	f47f af22 	bne.w	801e4f8 <_scanf_float+0x64>
 801e6b4:	2503      	movs	r5, #3
 801e6b6:	e7b6      	b.n	801e626 <_scanf_float+0x192>
 801e6b8:	2d06      	cmp	r5, #6
 801e6ba:	f47f af1d 	bne.w	801e4f8 <_scanf_float+0x64>
 801e6be:	2507      	movs	r5, #7
 801e6c0:	e7b1      	b.n	801e626 <_scanf_float+0x192>
 801e6c2:	6822      	ldr	r2, [r4, #0]
 801e6c4:	0591      	lsls	r1, r2, #22
 801e6c6:	f57f af17 	bpl.w	801e4f8 <_scanf_float+0x64>
 801e6ca:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 801e6ce:	f8cd 9008 	str.w	r9, [sp, #8]
 801e6d2:	6022      	str	r2, [r4, #0]
 801e6d4:	e7a7      	b.n	801e626 <_scanf_float+0x192>
 801e6d6:	6822      	ldr	r2, [r4, #0]
 801e6d8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 801e6dc:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801e6e0:	d006      	beq.n	801e6f0 <_scanf_float+0x25c>
 801e6e2:	0550      	lsls	r0, r2, #21
 801e6e4:	f57f af08 	bpl.w	801e4f8 <_scanf_float+0x64>
 801e6e8:	f1b9 0f00 	cmp.w	r9, #0
 801e6ec:	f000 80dd 	beq.w	801e8aa <_scanf_float+0x416>
 801e6f0:	0591      	lsls	r1, r2, #22
 801e6f2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801e6f6:	bf58      	it	pl
 801e6f8:	9902      	ldrpl	r1, [sp, #8]
 801e6fa:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 801e6fe:	bf58      	it	pl
 801e700:	eba9 0101 	subpl.w	r1, r9, r1
 801e704:	6022      	str	r2, [r4, #0]
 801e706:	f04f 0900 	mov.w	r9, #0
 801e70a:	bf58      	it	pl
 801e70c:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801e710:	e789      	b.n	801e626 <_scanf_float+0x192>
 801e712:	f04f 0a03 	mov.w	sl, #3
 801e716:	e786      	b.n	801e626 <_scanf_float+0x192>
 801e718:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801e71c:	4639      	mov	r1, r7
 801e71e:	4640      	mov	r0, r8
 801e720:	4798      	blx	r3
 801e722:	2800      	cmp	r0, #0
 801e724:	f43f aedb 	beq.w	801e4de <_scanf_float+0x4a>
 801e728:	e6e6      	b.n	801e4f8 <_scanf_float+0x64>
 801e72a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801e72e:	463a      	mov	r2, r7
 801e730:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801e734:	4640      	mov	r0, r8
 801e736:	4798      	blx	r3
 801e738:	6923      	ldr	r3, [r4, #16]
 801e73a:	3b01      	subs	r3, #1
 801e73c:	6123      	str	r3, [r4, #16]
 801e73e:	e6e8      	b.n	801e512 <_scanf_float+0x7e>
 801e740:	1e6b      	subs	r3, r5, #1
 801e742:	2b06      	cmp	r3, #6
 801e744:	d824      	bhi.n	801e790 <_scanf_float+0x2fc>
 801e746:	2d02      	cmp	r5, #2
 801e748:	d836      	bhi.n	801e7b8 <_scanf_float+0x324>
 801e74a:	9b01      	ldr	r3, [sp, #4]
 801e74c:	429e      	cmp	r6, r3
 801e74e:	f67f aee4 	bls.w	801e51a <_scanf_float+0x86>
 801e752:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801e756:	463a      	mov	r2, r7
 801e758:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801e75c:	4640      	mov	r0, r8
 801e75e:	4798      	blx	r3
 801e760:	6923      	ldr	r3, [r4, #16]
 801e762:	3b01      	subs	r3, #1
 801e764:	6123      	str	r3, [r4, #16]
 801e766:	e7f0      	b.n	801e74a <_scanf_float+0x2b6>
 801e768:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801e76c:	463a      	mov	r2, r7
 801e76e:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 801e772:	4640      	mov	r0, r8
 801e774:	4798      	blx	r3
 801e776:	6923      	ldr	r3, [r4, #16]
 801e778:	3b01      	subs	r3, #1
 801e77a:	6123      	str	r3, [r4, #16]
 801e77c:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e780:	fa5f fa8a 	uxtb.w	sl, sl
 801e784:	f1ba 0f02 	cmp.w	sl, #2
 801e788:	d1ee      	bne.n	801e768 <_scanf_float+0x2d4>
 801e78a:	3d03      	subs	r5, #3
 801e78c:	b2ed      	uxtb	r5, r5
 801e78e:	1b76      	subs	r6, r6, r5
 801e790:	6823      	ldr	r3, [r4, #0]
 801e792:	05da      	lsls	r2, r3, #23
 801e794:	d52f      	bpl.n	801e7f6 <_scanf_float+0x362>
 801e796:	055b      	lsls	r3, r3, #21
 801e798:	d511      	bpl.n	801e7be <_scanf_float+0x32a>
 801e79a:	9b01      	ldr	r3, [sp, #4]
 801e79c:	429e      	cmp	r6, r3
 801e79e:	f67f aebc 	bls.w	801e51a <_scanf_float+0x86>
 801e7a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801e7a6:	463a      	mov	r2, r7
 801e7a8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801e7ac:	4640      	mov	r0, r8
 801e7ae:	4798      	blx	r3
 801e7b0:	6923      	ldr	r3, [r4, #16]
 801e7b2:	3b01      	subs	r3, #1
 801e7b4:	6123      	str	r3, [r4, #16]
 801e7b6:	e7f0      	b.n	801e79a <_scanf_float+0x306>
 801e7b8:	46aa      	mov	sl, r5
 801e7ba:	46b3      	mov	fp, r6
 801e7bc:	e7de      	b.n	801e77c <_scanf_float+0x2e8>
 801e7be:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801e7c2:	1e75      	subs	r5, r6, #1
 801e7c4:	6923      	ldr	r3, [r4, #16]
 801e7c6:	2965      	cmp	r1, #101	@ 0x65
 801e7c8:	f103 33ff 	add.w	r3, r3, #4294967295
 801e7cc:	6123      	str	r3, [r4, #16]
 801e7ce:	d00c      	beq.n	801e7ea <_scanf_float+0x356>
 801e7d0:	2945      	cmp	r1, #69	@ 0x45
 801e7d2:	d00a      	beq.n	801e7ea <_scanf_float+0x356>
 801e7d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801e7d8:	463a      	mov	r2, r7
 801e7da:	4640      	mov	r0, r8
 801e7dc:	1eb5      	subs	r5, r6, #2
 801e7de:	4798      	blx	r3
 801e7e0:	6923      	ldr	r3, [r4, #16]
 801e7e2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801e7e6:	3b01      	subs	r3, #1
 801e7e8:	6123      	str	r3, [r4, #16]
 801e7ea:	462e      	mov	r6, r5
 801e7ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801e7f0:	463a      	mov	r2, r7
 801e7f2:	4640      	mov	r0, r8
 801e7f4:	4798      	blx	r3
 801e7f6:	6822      	ldr	r2, [r4, #0]
 801e7f8:	f012 0210 	ands.w	r2, r2, #16
 801e7fc:	d001      	beq.n	801e802 <_scanf_float+0x36e>
 801e7fe:	2000      	movs	r0, #0
 801e800:	e68c      	b.n	801e51c <_scanf_float+0x88>
 801e802:	7032      	strb	r2, [r6, #0]
 801e804:	6823      	ldr	r3, [r4, #0]
 801e806:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 801e80a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801e80e:	d11c      	bne.n	801e84a <_scanf_float+0x3b6>
 801e810:	9b02      	ldr	r3, [sp, #8]
 801e812:	454b      	cmp	r3, r9
 801e814:	eba3 0209 	sub.w	r2, r3, r9
 801e818:	d123      	bne.n	801e862 <_scanf_float+0x3ce>
 801e81a:	2200      	movs	r2, #0
 801e81c:	9901      	ldr	r1, [sp, #4]
 801e81e:	4640      	mov	r0, r8
 801e820:	f7ff f946 	bl	801dab0 <_strtod_r>
 801e824:	6821      	ldr	r1, [r4, #0]
 801e826:	9b03      	ldr	r3, [sp, #12]
 801e828:	f011 0f02 	tst.w	r1, #2
 801e82c:	681b      	ldr	r3, [r3, #0]
 801e82e:	ec57 6b10 	vmov	r6, r7, d0
 801e832:	f103 0204 	add.w	r2, r3, #4
 801e836:	d01f      	beq.n	801e878 <_scanf_float+0x3e4>
 801e838:	9903      	ldr	r1, [sp, #12]
 801e83a:	600a      	str	r2, [r1, #0]
 801e83c:	681b      	ldr	r3, [r3, #0]
 801e83e:	e9c3 6700 	strd	r6, r7, [r3]
 801e842:	68e3      	ldr	r3, [r4, #12]
 801e844:	3301      	adds	r3, #1
 801e846:	60e3      	str	r3, [r4, #12]
 801e848:	e7d9      	b.n	801e7fe <_scanf_float+0x36a>
 801e84a:	9b04      	ldr	r3, [sp, #16]
 801e84c:	2b00      	cmp	r3, #0
 801e84e:	d0e4      	beq.n	801e81a <_scanf_float+0x386>
 801e850:	9905      	ldr	r1, [sp, #20]
 801e852:	230a      	movs	r3, #10
 801e854:	4640      	mov	r0, r8
 801e856:	3101      	adds	r1, #1
 801e858:	f7ff f9b6 	bl	801dbc8 <_strtol_r>
 801e85c:	9b04      	ldr	r3, [sp, #16]
 801e85e:	9e05      	ldr	r6, [sp, #20]
 801e860:	1ac2      	subs	r2, r0, r3
 801e862:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 801e866:	4912      	ldr	r1, [pc, #72]	@ (801e8b0 <_scanf_float+0x41c>)
 801e868:	429e      	cmp	r6, r3
 801e86a:	bf28      	it	cs
 801e86c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 801e870:	4630      	mov	r0, r6
 801e872:	f000 f971 	bl	801eb58 <siprintf>
 801e876:	e7d0      	b.n	801e81a <_scanf_float+0x386>
 801e878:	f011 0f04 	tst.w	r1, #4
 801e87c:	9903      	ldr	r1, [sp, #12]
 801e87e:	600a      	str	r2, [r1, #0]
 801e880:	d1dc      	bne.n	801e83c <_scanf_float+0x3a8>
 801e882:	681d      	ldr	r5, [r3, #0]
 801e884:	4632      	mov	r2, r6
 801e886:	463b      	mov	r3, r7
 801e888:	4630      	mov	r0, r6
 801e88a:	4639      	mov	r1, r7
 801e88c:	f7e2 f968 	bl	8000b60 <__aeabi_dcmpun>
 801e890:	b128      	cbz	r0, 801e89e <_scanf_float+0x40a>
 801e892:	4808      	ldr	r0, [pc, #32]	@ (801e8b4 <_scanf_float+0x420>)
 801e894:	f000 fc44 	bl	801f120 <nanf>
 801e898:	ed85 0a00 	vstr	s0, [r5]
 801e89c:	e7d1      	b.n	801e842 <_scanf_float+0x3ae>
 801e89e:	4630      	mov	r0, r6
 801e8a0:	4639      	mov	r1, r7
 801e8a2:	f7e2 f9bb 	bl	8000c1c <__aeabi_d2f>
 801e8a6:	6028      	str	r0, [r5, #0]
 801e8a8:	e7cb      	b.n	801e842 <_scanf_float+0x3ae>
 801e8aa:	f04f 0900 	mov.w	r9, #0
 801e8ae:	e62a      	b.n	801e506 <_scanf_float+0x72>
 801e8b0:	0802452b 	.word	0x0802452b
 801e8b4:	080245e4 	.word	0x080245e4

0801e8b8 <std>:
 801e8b8:	2300      	movs	r3, #0
 801e8ba:	b510      	push	{r4, lr}
 801e8bc:	4604      	mov	r4, r0
 801e8be:	6083      	str	r3, [r0, #8]
 801e8c0:	8181      	strh	r1, [r0, #12]
 801e8c2:	4619      	mov	r1, r3
 801e8c4:	6643      	str	r3, [r0, #100]	@ 0x64
 801e8c6:	81c2      	strh	r2, [r0, #14]
 801e8c8:	2208      	movs	r2, #8
 801e8ca:	6183      	str	r3, [r0, #24]
 801e8cc:	e9c0 3300 	strd	r3, r3, [r0]
 801e8d0:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801e8d4:	305c      	adds	r0, #92	@ 0x5c
 801e8d6:	f000 fa9b 	bl	801ee10 <memset>
 801e8da:	4b0d      	ldr	r3, [pc, #52]	@ (801e910 <std+0x58>)
 801e8dc:	6224      	str	r4, [r4, #32]
 801e8de:	6263      	str	r3, [r4, #36]	@ 0x24
 801e8e0:	4b0c      	ldr	r3, [pc, #48]	@ (801e914 <std+0x5c>)
 801e8e2:	62a3      	str	r3, [r4, #40]	@ 0x28
 801e8e4:	4b0c      	ldr	r3, [pc, #48]	@ (801e918 <std+0x60>)
 801e8e6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801e8e8:	4b0c      	ldr	r3, [pc, #48]	@ (801e91c <std+0x64>)
 801e8ea:	6323      	str	r3, [r4, #48]	@ 0x30
 801e8ec:	4b0c      	ldr	r3, [pc, #48]	@ (801e920 <std+0x68>)
 801e8ee:	429c      	cmp	r4, r3
 801e8f0:	d006      	beq.n	801e900 <std+0x48>
 801e8f2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801e8f6:	4294      	cmp	r4, r2
 801e8f8:	d002      	beq.n	801e900 <std+0x48>
 801e8fa:	33d0      	adds	r3, #208	@ 0xd0
 801e8fc:	429c      	cmp	r4, r3
 801e8fe:	d105      	bne.n	801e90c <std+0x54>
 801e900:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801e904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e908:	f000 bbdc 	b.w	801f0c4 <__retarget_lock_init_recursive>
 801e90c:	bd10      	pop	{r4, pc}
 801e90e:	bf00      	nop
 801e910:	0801ebed 	.word	0x0801ebed
 801e914:	0801ec13 	.word	0x0801ec13
 801e918:	0801ec4b 	.word	0x0801ec4b
 801e91c:	0801ec6f 	.word	0x0801ec6f
 801e920:	20015720 	.word	0x20015720

0801e924 <stdio_exit_handler>:
 801e924:	4a02      	ldr	r2, [pc, #8]	@ (801e930 <stdio_exit_handler+0xc>)
 801e926:	4903      	ldr	r1, [pc, #12]	@ (801e934 <stdio_exit_handler+0x10>)
 801e928:	4803      	ldr	r0, [pc, #12]	@ (801e938 <stdio_exit_handler+0x14>)
 801e92a:	f000 b869 	b.w	801ea00 <_fwalk_sglue>
 801e92e:	bf00      	nop
 801e930:	200000ac 	.word	0x200000ac
 801e934:	08021b31 	.word	0x08021b31
 801e938:	20000228 	.word	0x20000228

0801e93c <cleanup_stdio>:
 801e93c:	6841      	ldr	r1, [r0, #4]
 801e93e:	4b0c      	ldr	r3, [pc, #48]	@ (801e970 <cleanup_stdio+0x34>)
 801e940:	4299      	cmp	r1, r3
 801e942:	b510      	push	{r4, lr}
 801e944:	4604      	mov	r4, r0
 801e946:	d001      	beq.n	801e94c <cleanup_stdio+0x10>
 801e948:	f003 f8f2 	bl	8021b30 <_fflush_r>
 801e94c:	68a1      	ldr	r1, [r4, #8]
 801e94e:	4b09      	ldr	r3, [pc, #36]	@ (801e974 <cleanup_stdio+0x38>)
 801e950:	4299      	cmp	r1, r3
 801e952:	d002      	beq.n	801e95a <cleanup_stdio+0x1e>
 801e954:	4620      	mov	r0, r4
 801e956:	f003 f8eb 	bl	8021b30 <_fflush_r>
 801e95a:	68e1      	ldr	r1, [r4, #12]
 801e95c:	4b06      	ldr	r3, [pc, #24]	@ (801e978 <cleanup_stdio+0x3c>)
 801e95e:	4299      	cmp	r1, r3
 801e960:	d004      	beq.n	801e96c <cleanup_stdio+0x30>
 801e962:	4620      	mov	r0, r4
 801e964:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e968:	f003 b8e2 	b.w	8021b30 <_fflush_r>
 801e96c:	bd10      	pop	{r4, pc}
 801e96e:	bf00      	nop
 801e970:	20015720 	.word	0x20015720
 801e974:	20015788 	.word	0x20015788
 801e978:	200157f0 	.word	0x200157f0

0801e97c <global_stdio_init.part.0>:
 801e97c:	b510      	push	{r4, lr}
 801e97e:	4b0b      	ldr	r3, [pc, #44]	@ (801e9ac <global_stdio_init.part.0+0x30>)
 801e980:	2104      	movs	r1, #4
 801e982:	4c0b      	ldr	r4, [pc, #44]	@ (801e9b0 <global_stdio_init.part.0+0x34>)
 801e984:	4a0b      	ldr	r2, [pc, #44]	@ (801e9b4 <global_stdio_init.part.0+0x38>)
 801e986:	4620      	mov	r0, r4
 801e988:	601a      	str	r2, [r3, #0]
 801e98a:	2200      	movs	r2, #0
 801e98c:	f7ff ff94 	bl	801e8b8 <std>
 801e990:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801e994:	2201      	movs	r2, #1
 801e996:	2109      	movs	r1, #9
 801e998:	f7ff ff8e 	bl	801e8b8 <std>
 801e99c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801e9a0:	2202      	movs	r2, #2
 801e9a2:	2112      	movs	r1, #18
 801e9a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e9a8:	f7ff bf86 	b.w	801e8b8 <std>
 801e9ac:	20015858 	.word	0x20015858
 801e9b0:	20015720 	.word	0x20015720
 801e9b4:	0801e925 	.word	0x0801e925

0801e9b8 <__sfp_lock_acquire>:
 801e9b8:	4801      	ldr	r0, [pc, #4]	@ (801e9c0 <__sfp_lock_acquire+0x8>)
 801e9ba:	f000 bb84 	b.w	801f0c6 <__retarget_lock_acquire_recursive>
 801e9be:	bf00      	nop
 801e9c0:	20015861 	.word	0x20015861

0801e9c4 <__sfp_lock_release>:
 801e9c4:	4801      	ldr	r0, [pc, #4]	@ (801e9cc <__sfp_lock_release+0x8>)
 801e9c6:	f000 bb7f 	b.w	801f0c8 <__retarget_lock_release_recursive>
 801e9ca:	bf00      	nop
 801e9cc:	20015861 	.word	0x20015861

0801e9d0 <__sinit>:
 801e9d0:	b510      	push	{r4, lr}
 801e9d2:	4604      	mov	r4, r0
 801e9d4:	f7ff fff0 	bl	801e9b8 <__sfp_lock_acquire>
 801e9d8:	6a23      	ldr	r3, [r4, #32]
 801e9da:	b11b      	cbz	r3, 801e9e4 <__sinit+0x14>
 801e9dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e9e0:	f7ff bff0 	b.w	801e9c4 <__sfp_lock_release>
 801e9e4:	4b04      	ldr	r3, [pc, #16]	@ (801e9f8 <__sinit+0x28>)
 801e9e6:	6223      	str	r3, [r4, #32]
 801e9e8:	4b04      	ldr	r3, [pc, #16]	@ (801e9fc <__sinit+0x2c>)
 801e9ea:	681b      	ldr	r3, [r3, #0]
 801e9ec:	2b00      	cmp	r3, #0
 801e9ee:	d1f5      	bne.n	801e9dc <__sinit+0xc>
 801e9f0:	f7ff ffc4 	bl	801e97c <global_stdio_init.part.0>
 801e9f4:	e7f2      	b.n	801e9dc <__sinit+0xc>
 801e9f6:	bf00      	nop
 801e9f8:	0801e93d 	.word	0x0801e93d
 801e9fc:	20015858 	.word	0x20015858

0801ea00 <_fwalk_sglue>:
 801ea00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ea04:	4607      	mov	r7, r0
 801ea06:	4688      	mov	r8, r1
 801ea08:	4614      	mov	r4, r2
 801ea0a:	2600      	movs	r6, #0
 801ea0c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801ea10:	f1b9 0901 	subs.w	r9, r9, #1
 801ea14:	d505      	bpl.n	801ea22 <_fwalk_sglue+0x22>
 801ea16:	6824      	ldr	r4, [r4, #0]
 801ea18:	2c00      	cmp	r4, #0
 801ea1a:	d1f7      	bne.n	801ea0c <_fwalk_sglue+0xc>
 801ea1c:	4630      	mov	r0, r6
 801ea1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ea22:	89ab      	ldrh	r3, [r5, #12]
 801ea24:	2b01      	cmp	r3, #1
 801ea26:	d907      	bls.n	801ea38 <_fwalk_sglue+0x38>
 801ea28:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801ea2c:	3301      	adds	r3, #1
 801ea2e:	d003      	beq.n	801ea38 <_fwalk_sglue+0x38>
 801ea30:	4629      	mov	r1, r5
 801ea32:	4638      	mov	r0, r7
 801ea34:	47c0      	blx	r8
 801ea36:	4306      	orrs	r6, r0
 801ea38:	3568      	adds	r5, #104	@ 0x68
 801ea3a:	e7e9      	b.n	801ea10 <_fwalk_sglue+0x10>

0801ea3c <_fwrite_r>:
 801ea3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ea40:	9c08      	ldr	r4, [sp, #32]
 801ea42:	468a      	mov	sl, r1
 801ea44:	4690      	mov	r8, r2
 801ea46:	fb02 f903 	mul.w	r9, r2, r3
 801ea4a:	4606      	mov	r6, r0
 801ea4c:	b118      	cbz	r0, 801ea56 <_fwrite_r+0x1a>
 801ea4e:	6a03      	ldr	r3, [r0, #32]
 801ea50:	b90b      	cbnz	r3, 801ea56 <_fwrite_r+0x1a>
 801ea52:	f7ff ffbd 	bl	801e9d0 <__sinit>
 801ea56:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801ea58:	07dd      	lsls	r5, r3, #31
 801ea5a:	d405      	bmi.n	801ea68 <_fwrite_r+0x2c>
 801ea5c:	89a3      	ldrh	r3, [r4, #12]
 801ea5e:	0598      	lsls	r0, r3, #22
 801ea60:	d402      	bmi.n	801ea68 <_fwrite_r+0x2c>
 801ea62:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ea64:	f000 fb2f 	bl	801f0c6 <__retarget_lock_acquire_recursive>
 801ea68:	89a3      	ldrh	r3, [r4, #12]
 801ea6a:	0719      	lsls	r1, r3, #28
 801ea6c:	d516      	bpl.n	801ea9c <_fwrite_r+0x60>
 801ea6e:	6923      	ldr	r3, [r4, #16]
 801ea70:	b1a3      	cbz	r3, 801ea9c <_fwrite_r+0x60>
 801ea72:	2500      	movs	r5, #0
 801ea74:	454d      	cmp	r5, r9
 801ea76:	d01f      	beq.n	801eab8 <_fwrite_r+0x7c>
 801ea78:	68a7      	ldr	r7, [r4, #8]
 801ea7a:	f81a 1005 	ldrb.w	r1, [sl, r5]
 801ea7e:	3f01      	subs	r7, #1
 801ea80:	2f00      	cmp	r7, #0
 801ea82:	60a7      	str	r7, [r4, #8]
 801ea84:	da04      	bge.n	801ea90 <_fwrite_r+0x54>
 801ea86:	69a3      	ldr	r3, [r4, #24]
 801ea88:	429f      	cmp	r7, r3
 801ea8a:	db0f      	blt.n	801eaac <_fwrite_r+0x70>
 801ea8c:	290a      	cmp	r1, #10
 801ea8e:	d00d      	beq.n	801eaac <_fwrite_r+0x70>
 801ea90:	6823      	ldr	r3, [r4, #0]
 801ea92:	1c5a      	adds	r2, r3, #1
 801ea94:	6022      	str	r2, [r4, #0]
 801ea96:	7019      	strb	r1, [r3, #0]
 801ea98:	3501      	adds	r5, #1
 801ea9a:	e7eb      	b.n	801ea74 <_fwrite_r+0x38>
 801ea9c:	4621      	mov	r1, r4
 801ea9e:	4630      	mov	r0, r6
 801eaa0:	f000 f960 	bl	801ed64 <__swsetup_r>
 801eaa4:	2800      	cmp	r0, #0
 801eaa6:	d0e4      	beq.n	801ea72 <_fwrite_r+0x36>
 801eaa8:	2500      	movs	r5, #0
 801eaaa:	e005      	b.n	801eab8 <_fwrite_r+0x7c>
 801eaac:	4622      	mov	r2, r4
 801eaae:	4630      	mov	r0, r6
 801eab0:	f000 f91a 	bl	801ece8 <__swbuf_r>
 801eab4:	3001      	adds	r0, #1
 801eab6:	d1ef      	bne.n	801ea98 <_fwrite_r+0x5c>
 801eab8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801eaba:	07da      	lsls	r2, r3, #31
 801eabc:	d405      	bmi.n	801eaca <_fwrite_r+0x8e>
 801eabe:	89a3      	ldrh	r3, [r4, #12]
 801eac0:	059b      	lsls	r3, r3, #22
 801eac2:	d402      	bmi.n	801eaca <_fwrite_r+0x8e>
 801eac4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801eac6:	f000 faff 	bl	801f0c8 <__retarget_lock_release_recursive>
 801eaca:	fbb5 f0f8 	udiv	r0, r5, r8
 801eace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801ead4 <fwrite>:
 801ead4:	b507      	push	{r0, r1, r2, lr}
 801ead6:	9300      	str	r3, [sp, #0]
 801ead8:	4613      	mov	r3, r2
 801eada:	460a      	mov	r2, r1
 801eadc:	4601      	mov	r1, r0
 801eade:	4803      	ldr	r0, [pc, #12]	@ (801eaec <fwrite+0x18>)
 801eae0:	6800      	ldr	r0, [r0, #0]
 801eae2:	f7ff ffab 	bl	801ea3c <_fwrite_r>
 801eae6:	b003      	add	sp, #12
 801eae8:	f85d fb04 	ldr.w	pc, [sp], #4
 801eaec:	20000224 	.word	0x20000224

0801eaf0 <sniprintf>:
 801eaf0:	b40c      	push	{r2, r3}
 801eaf2:	4b18      	ldr	r3, [pc, #96]	@ (801eb54 <sniprintf+0x64>)
 801eaf4:	b530      	push	{r4, r5, lr}
 801eaf6:	1e0c      	subs	r4, r1, #0
 801eaf8:	b09d      	sub	sp, #116	@ 0x74
 801eafa:	681d      	ldr	r5, [r3, #0]
 801eafc:	da08      	bge.n	801eb10 <sniprintf+0x20>
 801eafe:	238b      	movs	r3, #139	@ 0x8b
 801eb00:	f04f 30ff 	mov.w	r0, #4294967295
 801eb04:	602b      	str	r3, [r5, #0]
 801eb06:	b01d      	add	sp, #116	@ 0x74
 801eb08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801eb0c:	b002      	add	sp, #8
 801eb0e:	4770      	bx	lr
 801eb10:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801eb14:	9002      	str	r0, [sp, #8]
 801eb16:	9006      	str	r0, [sp, #24]
 801eb18:	a902      	add	r1, sp, #8
 801eb1a:	f8ad 3014 	strh.w	r3, [sp, #20]
 801eb1e:	bf14      	ite	ne
 801eb20:	f104 33ff 	addne.w	r3, r4, #4294967295
 801eb24:	4623      	moveq	r3, r4
 801eb26:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801eb28:	4628      	mov	r0, r5
 801eb2a:	9304      	str	r3, [sp, #16]
 801eb2c:	9307      	str	r3, [sp, #28]
 801eb2e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801eb32:	f8ad 3016 	strh.w	r3, [sp, #22]
 801eb36:	ab21      	add	r3, sp, #132	@ 0x84
 801eb38:	9301      	str	r3, [sp, #4]
 801eb3a:	f002 fa1f 	bl	8020f7c <_svfiprintf_r>
 801eb3e:	1c43      	adds	r3, r0, #1
 801eb40:	bfbc      	itt	lt
 801eb42:	238b      	movlt	r3, #139	@ 0x8b
 801eb44:	602b      	strlt	r3, [r5, #0]
 801eb46:	2c00      	cmp	r4, #0
 801eb48:	d0dd      	beq.n	801eb06 <sniprintf+0x16>
 801eb4a:	9b02      	ldr	r3, [sp, #8]
 801eb4c:	2200      	movs	r2, #0
 801eb4e:	701a      	strb	r2, [r3, #0]
 801eb50:	e7d9      	b.n	801eb06 <sniprintf+0x16>
 801eb52:	bf00      	nop
 801eb54:	20000224 	.word	0x20000224

0801eb58 <siprintf>:
 801eb58:	b40e      	push	{r1, r2, r3}
 801eb5a:	b500      	push	{lr}
 801eb5c:	b09c      	sub	sp, #112	@ 0x70
 801eb5e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801eb62:	ab1d      	add	r3, sp, #116	@ 0x74
 801eb64:	9002      	str	r0, [sp, #8]
 801eb66:	9006      	str	r0, [sp, #24]
 801eb68:	9107      	str	r1, [sp, #28]
 801eb6a:	9104      	str	r1, [sp, #16]
 801eb6c:	4808      	ldr	r0, [pc, #32]	@ (801eb90 <siprintf+0x38>)
 801eb6e:	4909      	ldr	r1, [pc, #36]	@ (801eb94 <siprintf+0x3c>)
 801eb70:	f853 2b04 	ldr.w	r2, [r3], #4
 801eb74:	9105      	str	r1, [sp, #20]
 801eb76:	a902      	add	r1, sp, #8
 801eb78:	6800      	ldr	r0, [r0, #0]
 801eb7a:	9301      	str	r3, [sp, #4]
 801eb7c:	f002 f9fe 	bl	8020f7c <_svfiprintf_r>
 801eb80:	9b02      	ldr	r3, [sp, #8]
 801eb82:	2200      	movs	r2, #0
 801eb84:	701a      	strb	r2, [r3, #0]
 801eb86:	b01c      	add	sp, #112	@ 0x70
 801eb88:	f85d eb04 	ldr.w	lr, [sp], #4
 801eb8c:	b003      	add	sp, #12
 801eb8e:	4770      	bx	lr
 801eb90:	20000224 	.word	0x20000224
 801eb94:	ffff0208 	.word	0xffff0208

0801eb98 <siscanf>:
 801eb98:	b40e      	push	{r1, r2, r3}
 801eb9a:	b530      	push	{r4, r5, lr}
 801eb9c:	b09c      	sub	sp, #112	@ 0x70
 801eb9e:	f44f 7201 	mov.w	r2, #516	@ 0x204
 801eba2:	ac1f      	add	r4, sp, #124	@ 0x7c
 801eba4:	f8ad 2014 	strh.w	r2, [sp, #20]
 801eba8:	9002      	str	r0, [sp, #8]
 801ebaa:	f854 5b04 	ldr.w	r5, [r4], #4
 801ebae:	9006      	str	r0, [sp, #24]
 801ebb0:	f7e1 fb78 	bl	80002a4 <strlen>
 801ebb4:	4b0b      	ldr	r3, [pc, #44]	@ (801ebe4 <siscanf+0x4c>)
 801ebb6:	462a      	mov	r2, r5
 801ebb8:	9003      	str	r0, [sp, #12]
 801ebba:	a902      	add	r1, sp, #8
 801ebbc:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ebbe:	2300      	movs	r3, #0
 801ebc0:	9007      	str	r0, [sp, #28]
 801ebc2:	930f      	str	r3, [sp, #60]	@ 0x3c
 801ebc4:	9314      	str	r3, [sp, #80]	@ 0x50
 801ebc6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801ebca:	4807      	ldr	r0, [pc, #28]	@ (801ebe8 <siscanf+0x50>)
 801ebcc:	f8ad 3016 	strh.w	r3, [sp, #22]
 801ebd0:	4623      	mov	r3, r4
 801ebd2:	6800      	ldr	r0, [r0, #0]
 801ebd4:	9401      	str	r4, [sp, #4]
 801ebd6:	f002 fb25 	bl	8021224 <__ssvfiscanf_r>
 801ebda:	b01c      	add	sp, #112	@ 0x70
 801ebdc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ebe0:	b003      	add	sp, #12
 801ebe2:	4770      	bx	lr
 801ebe4:	0801ec0f 	.word	0x0801ec0f
 801ebe8:	20000224 	.word	0x20000224

0801ebec <__sread>:
 801ebec:	b510      	push	{r4, lr}
 801ebee:	460c      	mov	r4, r1
 801ebf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ebf4:	f000 fa08 	bl	801f008 <_read_r>
 801ebf8:	2800      	cmp	r0, #0
 801ebfa:	bfab      	itete	ge
 801ebfc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801ebfe:	89a3      	ldrhlt	r3, [r4, #12]
 801ec00:	181b      	addge	r3, r3, r0
 801ec02:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801ec06:	bfac      	ite	ge
 801ec08:	6563      	strge	r3, [r4, #84]	@ 0x54
 801ec0a:	81a3      	strhlt	r3, [r4, #12]
 801ec0c:	bd10      	pop	{r4, pc}

0801ec0e <__seofread>:
 801ec0e:	2000      	movs	r0, #0
 801ec10:	4770      	bx	lr

0801ec12 <__swrite>:
 801ec12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ec16:	461f      	mov	r7, r3
 801ec18:	898b      	ldrh	r3, [r1, #12]
 801ec1a:	4605      	mov	r5, r0
 801ec1c:	460c      	mov	r4, r1
 801ec1e:	05db      	lsls	r3, r3, #23
 801ec20:	4616      	mov	r6, r2
 801ec22:	d505      	bpl.n	801ec30 <__swrite+0x1e>
 801ec24:	2302      	movs	r3, #2
 801ec26:	2200      	movs	r2, #0
 801ec28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ec2c:	f000 f9da 	bl	801efe4 <_lseek_r>
 801ec30:	89a3      	ldrh	r3, [r4, #12]
 801ec32:	4632      	mov	r2, r6
 801ec34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ec38:	4628      	mov	r0, r5
 801ec3a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801ec3e:	81a3      	strh	r3, [r4, #12]
 801ec40:	463b      	mov	r3, r7
 801ec42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ec46:	f000 ba01 	b.w	801f04c <_write_r>

0801ec4a <__sseek>:
 801ec4a:	b510      	push	{r4, lr}
 801ec4c:	460c      	mov	r4, r1
 801ec4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ec52:	f000 f9c7 	bl	801efe4 <_lseek_r>
 801ec56:	1c43      	adds	r3, r0, #1
 801ec58:	89a3      	ldrh	r3, [r4, #12]
 801ec5a:	bf15      	itete	ne
 801ec5c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801ec5e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801ec62:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801ec66:	81a3      	strheq	r3, [r4, #12]
 801ec68:	bf18      	it	ne
 801ec6a:	81a3      	strhne	r3, [r4, #12]
 801ec6c:	bd10      	pop	{r4, pc}

0801ec6e <__sclose>:
 801ec6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ec72:	f000 b9a7 	b.w	801efc4 <_close_r>

0801ec76 <_vsniprintf_r>:
 801ec76:	b530      	push	{r4, r5, lr}
 801ec78:	4614      	mov	r4, r2
 801ec7a:	b09b      	sub	sp, #108	@ 0x6c
 801ec7c:	4605      	mov	r5, r0
 801ec7e:	461a      	mov	r2, r3
 801ec80:	2c00      	cmp	r4, #0
 801ec82:	da05      	bge.n	801ec90 <_vsniprintf_r+0x1a>
 801ec84:	238b      	movs	r3, #139	@ 0x8b
 801ec86:	6003      	str	r3, [r0, #0]
 801ec88:	f04f 30ff 	mov.w	r0, #4294967295
 801ec8c:	b01b      	add	sp, #108	@ 0x6c
 801ec8e:	bd30      	pop	{r4, r5, pc}
 801ec90:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801ec94:	9100      	str	r1, [sp, #0]
 801ec96:	9104      	str	r1, [sp, #16]
 801ec98:	4669      	mov	r1, sp
 801ec9a:	f8ad 300c 	strh.w	r3, [sp, #12]
 801ec9e:	bf14      	ite	ne
 801eca0:	f104 33ff 	addne.w	r3, r4, #4294967295
 801eca4:	4623      	moveq	r3, r4
 801eca6:	9302      	str	r3, [sp, #8]
 801eca8:	9305      	str	r3, [sp, #20]
 801ecaa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801ecae:	f8ad 300e 	strh.w	r3, [sp, #14]
 801ecb2:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801ecb4:	f002 f962 	bl	8020f7c <_svfiprintf_r>
 801ecb8:	1c43      	adds	r3, r0, #1
 801ecba:	bfbc      	itt	lt
 801ecbc:	238b      	movlt	r3, #139	@ 0x8b
 801ecbe:	602b      	strlt	r3, [r5, #0]
 801ecc0:	2c00      	cmp	r4, #0
 801ecc2:	d0e3      	beq.n	801ec8c <_vsniprintf_r+0x16>
 801ecc4:	9b00      	ldr	r3, [sp, #0]
 801ecc6:	2200      	movs	r2, #0
 801ecc8:	701a      	strb	r2, [r3, #0]
 801ecca:	e7df      	b.n	801ec8c <_vsniprintf_r+0x16>

0801eccc <vsniprintf>:
 801eccc:	b507      	push	{r0, r1, r2, lr}
 801ecce:	9300      	str	r3, [sp, #0]
 801ecd0:	4613      	mov	r3, r2
 801ecd2:	460a      	mov	r2, r1
 801ecd4:	4601      	mov	r1, r0
 801ecd6:	4803      	ldr	r0, [pc, #12]	@ (801ece4 <vsniprintf+0x18>)
 801ecd8:	6800      	ldr	r0, [r0, #0]
 801ecda:	f7ff ffcc 	bl	801ec76 <_vsniprintf_r>
 801ecde:	b003      	add	sp, #12
 801ece0:	f85d fb04 	ldr.w	pc, [sp], #4
 801ece4:	20000224 	.word	0x20000224

0801ece8 <__swbuf_r>:
 801ece8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ecea:	460e      	mov	r6, r1
 801ecec:	4614      	mov	r4, r2
 801ecee:	4605      	mov	r5, r0
 801ecf0:	b118      	cbz	r0, 801ecfa <__swbuf_r+0x12>
 801ecf2:	6a03      	ldr	r3, [r0, #32]
 801ecf4:	b90b      	cbnz	r3, 801ecfa <__swbuf_r+0x12>
 801ecf6:	f7ff fe6b 	bl	801e9d0 <__sinit>
 801ecfa:	69a3      	ldr	r3, [r4, #24]
 801ecfc:	60a3      	str	r3, [r4, #8]
 801ecfe:	89a3      	ldrh	r3, [r4, #12]
 801ed00:	071a      	lsls	r2, r3, #28
 801ed02:	d501      	bpl.n	801ed08 <__swbuf_r+0x20>
 801ed04:	6923      	ldr	r3, [r4, #16]
 801ed06:	b943      	cbnz	r3, 801ed1a <__swbuf_r+0x32>
 801ed08:	4621      	mov	r1, r4
 801ed0a:	4628      	mov	r0, r5
 801ed0c:	f000 f82a 	bl	801ed64 <__swsetup_r>
 801ed10:	b118      	cbz	r0, 801ed1a <__swbuf_r+0x32>
 801ed12:	f04f 37ff 	mov.w	r7, #4294967295
 801ed16:	4638      	mov	r0, r7
 801ed18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ed1a:	6823      	ldr	r3, [r4, #0]
 801ed1c:	b2f6      	uxtb	r6, r6
 801ed1e:	6922      	ldr	r2, [r4, #16]
 801ed20:	4637      	mov	r7, r6
 801ed22:	1a98      	subs	r0, r3, r2
 801ed24:	6963      	ldr	r3, [r4, #20]
 801ed26:	4283      	cmp	r3, r0
 801ed28:	dc05      	bgt.n	801ed36 <__swbuf_r+0x4e>
 801ed2a:	4621      	mov	r1, r4
 801ed2c:	4628      	mov	r0, r5
 801ed2e:	f002 feff 	bl	8021b30 <_fflush_r>
 801ed32:	2800      	cmp	r0, #0
 801ed34:	d1ed      	bne.n	801ed12 <__swbuf_r+0x2a>
 801ed36:	68a3      	ldr	r3, [r4, #8]
 801ed38:	3b01      	subs	r3, #1
 801ed3a:	60a3      	str	r3, [r4, #8]
 801ed3c:	6823      	ldr	r3, [r4, #0]
 801ed3e:	1c5a      	adds	r2, r3, #1
 801ed40:	6022      	str	r2, [r4, #0]
 801ed42:	701e      	strb	r6, [r3, #0]
 801ed44:	1c43      	adds	r3, r0, #1
 801ed46:	6962      	ldr	r2, [r4, #20]
 801ed48:	429a      	cmp	r2, r3
 801ed4a:	d004      	beq.n	801ed56 <__swbuf_r+0x6e>
 801ed4c:	89a3      	ldrh	r3, [r4, #12]
 801ed4e:	07db      	lsls	r3, r3, #31
 801ed50:	d5e1      	bpl.n	801ed16 <__swbuf_r+0x2e>
 801ed52:	2e0a      	cmp	r6, #10
 801ed54:	d1df      	bne.n	801ed16 <__swbuf_r+0x2e>
 801ed56:	4621      	mov	r1, r4
 801ed58:	4628      	mov	r0, r5
 801ed5a:	f002 fee9 	bl	8021b30 <_fflush_r>
 801ed5e:	2800      	cmp	r0, #0
 801ed60:	d0d9      	beq.n	801ed16 <__swbuf_r+0x2e>
 801ed62:	e7d6      	b.n	801ed12 <__swbuf_r+0x2a>

0801ed64 <__swsetup_r>:
 801ed64:	b538      	push	{r3, r4, r5, lr}
 801ed66:	4b29      	ldr	r3, [pc, #164]	@ (801ee0c <__swsetup_r+0xa8>)
 801ed68:	4605      	mov	r5, r0
 801ed6a:	460c      	mov	r4, r1
 801ed6c:	6818      	ldr	r0, [r3, #0]
 801ed6e:	b118      	cbz	r0, 801ed78 <__swsetup_r+0x14>
 801ed70:	6a03      	ldr	r3, [r0, #32]
 801ed72:	b90b      	cbnz	r3, 801ed78 <__swsetup_r+0x14>
 801ed74:	f7ff fe2c 	bl	801e9d0 <__sinit>
 801ed78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ed7c:	0719      	lsls	r1, r3, #28
 801ed7e:	d422      	bmi.n	801edc6 <__swsetup_r+0x62>
 801ed80:	06da      	lsls	r2, r3, #27
 801ed82:	d407      	bmi.n	801ed94 <__swsetup_r+0x30>
 801ed84:	2209      	movs	r2, #9
 801ed86:	602a      	str	r2, [r5, #0]
 801ed88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ed8c:	f04f 30ff 	mov.w	r0, #4294967295
 801ed90:	81a3      	strh	r3, [r4, #12]
 801ed92:	e033      	b.n	801edfc <__swsetup_r+0x98>
 801ed94:	0758      	lsls	r0, r3, #29
 801ed96:	d512      	bpl.n	801edbe <__swsetup_r+0x5a>
 801ed98:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801ed9a:	b141      	cbz	r1, 801edae <__swsetup_r+0x4a>
 801ed9c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801eda0:	4299      	cmp	r1, r3
 801eda2:	d002      	beq.n	801edaa <__swsetup_r+0x46>
 801eda4:	4628      	mov	r0, r5
 801eda6:	f001 f833 	bl	801fe10 <_free_r>
 801edaa:	2300      	movs	r3, #0
 801edac:	6363      	str	r3, [r4, #52]	@ 0x34
 801edae:	89a3      	ldrh	r3, [r4, #12]
 801edb0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801edb4:	81a3      	strh	r3, [r4, #12]
 801edb6:	2300      	movs	r3, #0
 801edb8:	6063      	str	r3, [r4, #4]
 801edba:	6923      	ldr	r3, [r4, #16]
 801edbc:	6023      	str	r3, [r4, #0]
 801edbe:	89a3      	ldrh	r3, [r4, #12]
 801edc0:	f043 0308 	orr.w	r3, r3, #8
 801edc4:	81a3      	strh	r3, [r4, #12]
 801edc6:	6923      	ldr	r3, [r4, #16]
 801edc8:	b94b      	cbnz	r3, 801edde <__swsetup_r+0x7a>
 801edca:	89a3      	ldrh	r3, [r4, #12]
 801edcc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801edd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801edd4:	d003      	beq.n	801edde <__swsetup_r+0x7a>
 801edd6:	4621      	mov	r1, r4
 801edd8:	4628      	mov	r0, r5
 801edda:	f002 ff08 	bl	8021bee <__smakebuf_r>
 801edde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ede2:	f013 0201 	ands.w	r2, r3, #1
 801ede6:	d00a      	beq.n	801edfe <__swsetup_r+0x9a>
 801ede8:	2200      	movs	r2, #0
 801edea:	60a2      	str	r2, [r4, #8]
 801edec:	6962      	ldr	r2, [r4, #20]
 801edee:	4252      	negs	r2, r2
 801edf0:	61a2      	str	r2, [r4, #24]
 801edf2:	6922      	ldr	r2, [r4, #16]
 801edf4:	b942      	cbnz	r2, 801ee08 <__swsetup_r+0xa4>
 801edf6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801edfa:	d1c5      	bne.n	801ed88 <__swsetup_r+0x24>
 801edfc:	bd38      	pop	{r3, r4, r5, pc}
 801edfe:	0799      	lsls	r1, r3, #30
 801ee00:	bf58      	it	pl
 801ee02:	6962      	ldrpl	r2, [r4, #20]
 801ee04:	60a2      	str	r2, [r4, #8]
 801ee06:	e7f4      	b.n	801edf2 <__swsetup_r+0x8e>
 801ee08:	2000      	movs	r0, #0
 801ee0a:	e7f7      	b.n	801edfc <__swsetup_r+0x98>
 801ee0c:	20000224 	.word	0x20000224

0801ee10 <memset>:
 801ee10:	4402      	add	r2, r0
 801ee12:	4603      	mov	r3, r0
 801ee14:	4293      	cmp	r3, r2
 801ee16:	d100      	bne.n	801ee1a <memset+0xa>
 801ee18:	4770      	bx	lr
 801ee1a:	f803 1b01 	strb.w	r1, [r3], #1
 801ee1e:	e7f9      	b.n	801ee14 <memset+0x4>

0801ee20 <strcat>:
 801ee20:	4602      	mov	r2, r0
 801ee22:	b510      	push	{r4, lr}
 801ee24:	7814      	ldrb	r4, [r2, #0]
 801ee26:	4613      	mov	r3, r2
 801ee28:	3201      	adds	r2, #1
 801ee2a:	2c00      	cmp	r4, #0
 801ee2c:	d1fa      	bne.n	801ee24 <strcat+0x4>
 801ee2e:	3b01      	subs	r3, #1
 801ee30:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ee34:	f803 2f01 	strb.w	r2, [r3, #1]!
 801ee38:	2a00      	cmp	r2, #0
 801ee3a:	d1f9      	bne.n	801ee30 <strcat+0x10>
 801ee3c:	bd10      	pop	{r4, pc}

0801ee3e <strchr>:
 801ee3e:	b2c9      	uxtb	r1, r1
 801ee40:	4603      	mov	r3, r0
 801ee42:	4618      	mov	r0, r3
 801ee44:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ee48:	b112      	cbz	r2, 801ee50 <strchr+0x12>
 801ee4a:	428a      	cmp	r2, r1
 801ee4c:	d1f9      	bne.n	801ee42 <strchr+0x4>
 801ee4e:	4770      	bx	lr
 801ee50:	2900      	cmp	r1, #0
 801ee52:	bf18      	it	ne
 801ee54:	2000      	movne	r0, #0
 801ee56:	4770      	bx	lr

0801ee58 <strdup>:
 801ee58:	4b02      	ldr	r3, [pc, #8]	@ (801ee64 <strdup+0xc>)
 801ee5a:	4601      	mov	r1, r0
 801ee5c:	6818      	ldr	r0, [r3, #0]
 801ee5e:	f000 b803 	b.w	801ee68 <_strdup_r>
 801ee62:	bf00      	nop
 801ee64:	20000224 	.word	0x20000224

0801ee68 <_strdup_r>:
 801ee68:	b570      	push	{r4, r5, r6, lr}
 801ee6a:	4604      	mov	r4, r0
 801ee6c:	4608      	mov	r0, r1
 801ee6e:	460d      	mov	r5, r1
 801ee70:	f7e1 fa18 	bl	80002a4 <strlen>
 801ee74:	1c46      	adds	r6, r0, #1
 801ee76:	4620      	mov	r0, r4
 801ee78:	4631      	mov	r1, r6
 801ee7a:	f7fd ff8b 	bl	801cd94 <_malloc_r>
 801ee7e:	4604      	mov	r4, r0
 801ee80:	b118      	cbz	r0, 801ee8a <_strdup_r+0x22>
 801ee82:	4632      	mov	r2, r6
 801ee84:	4629      	mov	r1, r5
 801ee86:	f000 f936 	bl	801f0f6 <memcpy>
 801ee8a:	4620      	mov	r0, r4
 801ee8c:	bd70      	pop	{r4, r5, r6, pc}

0801ee8e <strncmp>:
 801ee8e:	b510      	push	{r4, lr}
 801ee90:	b16a      	cbz	r2, 801eeae <strncmp+0x20>
 801ee92:	3901      	subs	r1, #1
 801ee94:	1884      	adds	r4, r0, r2
 801ee96:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ee9a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801ee9e:	429a      	cmp	r2, r3
 801eea0:	d103      	bne.n	801eeaa <strncmp+0x1c>
 801eea2:	42a0      	cmp	r0, r4
 801eea4:	d001      	beq.n	801eeaa <strncmp+0x1c>
 801eea6:	2a00      	cmp	r2, #0
 801eea8:	d1f5      	bne.n	801ee96 <strncmp+0x8>
 801eeaa:	1ad0      	subs	r0, r2, r3
 801eeac:	bd10      	pop	{r4, pc}
 801eeae:	4610      	mov	r0, r2
 801eeb0:	e7fc      	b.n	801eeac <strncmp+0x1e>

0801eeb2 <strncpy>:
 801eeb2:	3901      	subs	r1, #1
 801eeb4:	4603      	mov	r3, r0
 801eeb6:	b510      	push	{r4, lr}
 801eeb8:	b132      	cbz	r2, 801eec8 <strncpy+0x16>
 801eeba:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801eebe:	3a01      	subs	r2, #1
 801eec0:	f803 4b01 	strb.w	r4, [r3], #1
 801eec4:	2c00      	cmp	r4, #0
 801eec6:	d1f7      	bne.n	801eeb8 <strncpy+0x6>
 801eec8:	441a      	add	r2, r3
 801eeca:	2100      	movs	r1, #0
 801eecc:	4293      	cmp	r3, r2
 801eece:	d100      	bne.n	801eed2 <strncpy+0x20>
 801eed0:	bd10      	pop	{r4, pc}
 801eed2:	f803 1b01 	strb.w	r1, [r3], #1
 801eed6:	e7f9      	b.n	801eecc <strncpy+0x1a>

0801eed8 <strtok>:
 801eed8:	4b16      	ldr	r3, [pc, #88]	@ (801ef34 <strtok+0x5c>)
 801eeda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801eede:	681f      	ldr	r7, [r3, #0]
 801eee0:	4605      	mov	r5, r0
 801eee2:	460e      	mov	r6, r1
 801eee4:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 801eee6:	b9ec      	cbnz	r4, 801ef24 <strtok+0x4c>
 801eee8:	2050      	movs	r0, #80	@ 0x50
 801eeea:	f7fd ff21 	bl	801cd30 <malloc>
 801eeee:	4602      	mov	r2, r0
 801eef0:	6478      	str	r0, [r7, #68]	@ 0x44
 801eef2:	b920      	cbnz	r0, 801eefe <strtok+0x26>
 801eef4:	4b10      	ldr	r3, [pc, #64]	@ (801ef38 <strtok+0x60>)
 801eef6:	215b      	movs	r1, #91	@ 0x5b
 801eef8:	4810      	ldr	r0, [pc, #64]	@ (801ef3c <strtok+0x64>)
 801eefa:	f000 f917 	bl	801f12c <__assert_func>
 801eefe:	e9c0 4400 	strd	r4, r4, [r0]
 801ef02:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801ef06:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801ef0a:	6184      	str	r4, [r0, #24]
 801ef0c:	7704      	strb	r4, [r0, #28]
 801ef0e:	6244      	str	r4, [r0, #36]	@ 0x24
 801ef10:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 801ef14:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 801ef18:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 801ef1c:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 801ef20:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 801ef24:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801ef26:	4631      	mov	r1, r6
 801ef28:	4628      	mov	r0, r5
 801ef2a:	2301      	movs	r3, #1
 801ef2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ef30:	f000 b806 	b.w	801ef40 <__strtok_r>
 801ef34:	20000224 	.word	0x20000224
 801ef38:	08024530 	.word	0x08024530
 801ef3c:	08024547 	.word	0x08024547

0801ef40 <__strtok_r>:
 801ef40:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ef42:	4604      	mov	r4, r0
 801ef44:	b908      	cbnz	r0, 801ef4a <__strtok_r+0xa>
 801ef46:	6814      	ldr	r4, [r2, #0]
 801ef48:	b144      	cbz	r4, 801ef5c <__strtok_r+0x1c>
 801ef4a:	4620      	mov	r0, r4
 801ef4c:	460f      	mov	r7, r1
 801ef4e:	f814 5b01 	ldrb.w	r5, [r4], #1
 801ef52:	f817 6b01 	ldrb.w	r6, [r7], #1
 801ef56:	b91e      	cbnz	r6, 801ef60 <__strtok_r+0x20>
 801ef58:	b965      	cbnz	r5, 801ef74 <__strtok_r+0x34>
 801ef5a:	6015      	str	r5, [r2, #0]
 801ef5c:	2000      	movs	r0, #0
 801ef5e:	e005      	b.n	801ef6c <__strtok_r+0x2c>
 801ef60:	42b5      	cmp	r5, r6
 801ef62:	d1f6      	bne.n	801ef52 <__strtok_r+0x12>
 801ef64:	2b00      	cmp	r3, #0
 801ef66:	d1f0      	bne.n	801ef4a <__strtok_r+0xa>
 801ef68:	6014      	str	r4, [r2, #0]
 801ef6a:	7003      	strb	r3, [r0, #0]
 801ef6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ef6e:	461c      	mov	r4, r3
 801ef70:	e00c      	b.n	801ef8c <__strtok_r+0x4c>
 801ef72:	b915      	cbnz	r5, 801ef7a <__strtok_r+0x3a>
 801ef74:	f814 3b01 	ldrb.w	r3, [r4], #1
 801ef78:	460e      	mov	r6, r1
 801ef7a:	f816 5b01 	ldrb.w	r5, [r6], #1
 801ef7e:	42ab      	cmp	r3, r5
 801ef80:	d1f7      	bne.n	801ef72 <__strtok_r+0x32>
 801ef82:	2b00      	cmp	r3, #0
 801ef84:	d0f3      	beq.n	801ef6e <__strtok_r+0x2e>
 801ef86:	2300      	movs	r3, #0
 801ef88:	f804 3c01 	strb.w	r3, [r4, #-1]
 801ef8c:	6014      	str	r4, [r2, #0]
 801ef8e:	e7ed      	b.n	801ef6c <__strtok_r+0x2c>

0801ef90 <strstr>:
 801ef90:	780a      	ldrb	r2, [r1, #0]
 801ef92:	b570      	push	{r4, r5, r6, lr}
 801ef94:	b96a      	cbnz	r2, 801efb2 <strstr+0x22>
 801ef96:	bd70      	pop	{r4, r5, r6, pc}
 801ef98:	429a      	cmp	r2, r3
 801ef9a:	d109      	bne.n	801efb0 <strstr+0x20>
 801ef9c:	460c      	mov	r4, r1
 801ef9e:	4605      	mov	r5, r0
 801efa0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801efa4:	2b00      	cmp	r3, #0
 801efa6:	d0f6      	beq.n	801ef96 <strstr+0x6>
 801efa8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801efac:	429e      	cmp	r6, r3
 801efae:	d0f7      	beq.n	801efa0 <strstr+0x10>
 801efb0:	3001      	adds	r0, #1
 801efb2:	7803      	ldrb	r3, [r0, #0]
 801efb4:	2b00      	cmp	r3, #0
 801efb6:	d1ef      	bne.n	801ef98 <strstr+0x8>
 801efb8:	4618      	mov	r0, r3
 801efba:	e7ec      	b.n	801ef96 <strstr+0x6>

0801efbc <_localeconv_r>:
 801efbc:	4800      	ldr	r0, [pc, #0]	@ (801efc0 <_localeconv_r+0x4>)
 801efbe:	4770      	bx	lr
 801efc0:	200001a8 	.word	0x200001a8

0801efc4 <_close_r>:
 801efc4:	b538      	push	{r3, r4, r5, lr}
 801efc6:	2300      	movs	r3, #0
 801efc8:	4d05      	ldr	r5, [pc, #20]	@ (801efe0 <_close_r+0x1c>)
 801efca:	4604      	mov	r4, r0
 801efcc:	4608      	mov	r0, r1
 801efce:	602b      	str	r3, [r5, #0]
 801efd0:	f7e5 ffca 	bl	8004f68 <_close>
 801efd4:	1c43      	adds	r3, r0, #1
 801efd6:	d102      	bne.n	801efde <_close_r+0x1a>
 801efd8:	682b      	ldr	r3, [r5, #0]
 801efda:	b103      	cbz	r3, 801efde <_close_r+0x1a>
 801efdc:	6023      	str	r3, [r4, #0]
 801efde:	bd38      	pop	{r3, r4, r5, pc}
 801efe0:	2001585c 	.word	0x2001585c

0801efe4 <_lseek_r>:
 801efe4:	b538      	push	{r3, r4, r5, lr}
 801efe6:	4604      	mov	r4, r0
 801efe8:	4d06      	ldr	r5, [pc, #24]	@ (801f004 <_lseek_r+0x20>)
 801efea:	4608      	mov	r0, r1
 801efec:	4611      	mov	r1, r2
 801efee:	2200      	movs	r2, #0
 801eff0:	602a      	str	r2, [r5, #0]
 801eff2:	461a      	mov	r2, r3
 801eff4:	f7e5 ffdf 	bl	8004fb6 <_lseek>
 801eff8:	1c43      	adds	r3, r0, #1
 801effa:	d102      	bne.n	801f002 <_lseek_r+0x1e>
 801effc:	682b      	ldr	r3, [r5, #0]
 801effe:	b103      	cbz	r3, 801f002 <_lseek_r+0x1e>
 801f000:	6023      	str	r3, [r4, #0]
 801f002:	bd38      	pop	{r3, r4, r5, pc}
 801f004:	2001585c 	.word	0x2001585c

0801f008 <_read_r>:
 801f008:	b538      	push	{r3, r4, r5, lr}
 801f00a:	4604      	mov	r4, r0
 801f00c:	4d06      	ldr	r5, [pc, #24]	@ (801f028 <_read_r+0x20>)
 801f00e:	4608      	mov	r0, r1
 801f010:	4611      	mov	r1, r2
 801f012:	2200      	movs	r2, #0
 801f014:	602a      	str	r2, [r5, #0]
 801f016:	461a      	mov	r2, r3
 801f018:	f7e5 ff6d 	bl	8004ef6 <_read>
 801f01c:	1c43      	adds	r3, r0, #1
 801f01e:	d102      	bne.n	801f026 <_read_r+0x1e>
 801f020:	682b      	ldr	r3, [r5, #0]
 801f022:	b103      	cbz	r3, 801f026 <_read_r+0x1e>
 801f024:	6023      	str	r3, [r4, #0]
 801f026:	bd38      	pop	{r3, r4, r5, pc}
 801f028:	2001585c 	.word	0x2001585c

0801f02c <_sbrk_r>:
 801f02c:	b538      	push	{r3, r4, r5, lr}
 801f02e:	2300      	movs	r3, #0
 801f030:	4d05      	ldr	r5, [pc, #20]	@ (801f048 <_sbrk_r+0x1c>)
 801f032:	4604      	mov	r4, r0
 801f034:	4608      	mov	r0, r1
 801f036:	602b      	str	r3, [r5, #0]
 801f038:	f7e5 ffca 	bl	8004fd0 <_sbrk>
 801f03c:	1c43      	adds	r3, r0, #1
 801f03e:	d102      	bne.n	801f046 <_sbrk_r+0x1a>
 801f040:	682b      	ldr	r3, [r5, #0]
 801f042:	b103      	cbz	r3, 801f046 <_sbrk_r+0x1a>
 801f044:	6023      	str	r3, [r4, #0]
 801f046:	bd38      	pop	{r3, r4, r5, pc}
 801f048:	2001585c 	.word	0x2001585c

0801f04c <_write_r>:
 801f04c:	b538      	push	{r3, r4, r5, lr}
 801f04e:	4604      	mov	r4, r0
 801f050:	4d06      	ldr	r5, [pc, #24]	@ (801f06c <_write_r+0x20>)
 801f052:	4608      	mov	r0, r1
 801f054:	4611      	mov	r1, r2
 801f056:	2200      	movs	r2, #0
 801f058:	602a      	str	r2, [r5, #0]
 801f05a:	461a      	mov	r2, r3
 801f05c:	f7e5 ff68 	bl	8004f30 <_write>
 801f060:	1c43      	adds	r3, r0, #1
 801f062:	d102      	bne.n	801f06a <_write_r+0x1e>
 801f064:	682b      	ldr	r3, [r5, #0]
 801f066:	b103      	cbz	r3, 801f06a <_write_r+0x1e>
 801f068:	6023      	str	r3, [r4, #0]
 801f06a:	bd38      	pop	{r3, r4, r5, pc}
 801f06c:	2001585c 	.word	0x2001585c

0801f070 <__errno>:
 801f070:	4b01      	ldr	r3, [pc, #4]	@ (801f078 <__errno+0x8>)
 801f072:	6818      	ldr	r0, [r3, #0]
 801f074:	4770      	bx	lr
 801f076:	bf00      	nop
 801f078:	20000224 	.word	0x20000224

0801f07c <__libc_init_array>:
 801f07c:	b570      	push	{r4, r5, r6, lr}
 801f07e:	4d0d      	ldr	r5, [pc, #52]	@ (801f0b4 <__libc_init_array+0x38>)
 801f080:	2600      	movs	r6, #0
 801f082:	4c0d      	ldr	r4, [pc, #52]	@ (801f0b8 <__libc_init_array+0x3c>)
 801f084:	1b64      	subs	r4, r4, r5
 801f086:	10a4      	asrs	r4, r4, #2
 801f088:	42a6      	cmp	r6, r4
 801f08a:	d109      	bne.n	801f0a0 <__libc_init_array+0x24>
 801f08c:	4d0b      	ldr	r5, [pc, #44]	@ (801f0bc <__libc_init_array+0x40>)
 801f08e:	2600      	movs	r6, #0
 801f090:	4c0b      	ldr	r4, [pc, #44]	@ (801f0c0 <__libc_init_array+0x44>)
 801f092:	f003 f8d3 	bl	802223c <_init>
 801f096:	1b64      	subs	r4, r4, r5
 801f098:	10a4      	asrs	r4, r4, #2
 801f09a:	42a6      	cmp	r6, r4
 801f09c:	d105      	bne.n	801f0aa <__libc_init_array+0x2e>
 801f09e:	bd70      	pop	{r4, r5, r6, pc}
 801f0a0:	f855 3b04 	ldr.w	r3, [r5], #4
 801f0a4:	3601      	adds	r6, #1
 801f0a6:	4798      	blx	r3
 801f0a8:	e7ee      	b.n	801f088 <__libc_init_array+0xc>
 801f0aa:	f855 3b04 	ldr.w	r3, [r5], #4
 801f0ae:	3601      	adds	r6, #1
 801f0b0:	4798      	blx	r3
 801f0b2:	e7f2      	b.n	801f09a <__libc_init_array+0x1e>
 801f0b4:	08024858 	.word	0x08024858
 801f0b8:	08024858 	.word	0x08024858
 801f0bc:	08024858 	.word	0x08024858
 801f0c0:	0802485c 	.word	0x0802485c

0801f0c4 <__retarget_lock_init_recursive>:
 801f0c4:	4770      	bx	lr

0801f0c6 <__retarget_lock_acquire_recursive>:
 801f0c6:	4770      	bx	lr

0801f0c8 <__retarget_lock_release_recursive>:
 801f0c8:	4770      	bx	lr

0801f0ca <strcpy>:
 801f0ca:	4603      	mov	r3, r0
 801f0cc:	f811 2b01 	ldrb.w	r2, [r1], #1
 801f0d0:	f803 2b01 	strb.w	r2, [r3], #1
 801f0d4:	2a00      	cmp	r2, #0
 801f0d6:	d1f9      	bne.n	801f0cc <strcpy+0x2>
 801f0d8:	4770      	bx	lr

0801f0da <memchr>:
 801f0da:	b2c9      	uxtb	r1, r1
 801f0dc:	4603      	mov	r3, r0
 801f0de:	4402      	add	r2, r0
 801f0e0:	b510      	push	{r4, lr}
 801f0e2:	4293      	cmp	r3, r2
 801f0e4:	4618      	mov	r0, r3
 801f0e6:	d101      	bne.n	801f0ec <memchr+0x12>
 801f0e8:	2000      	movs	r0, #0
 801f0ea:	e003      	b.n	801f0f4 <memchr+0x1a>
 801f0ec:	7804      	ldrb	r4, [r0, #0]
 801f0ee:	3301      	adds	r3, #1
 801f0f0:	428c      	cmp	r4, r1
 801f0f2:	d1f6      	bne.n	801f0e2 <memchr+0x8>
 801f0f4:	bd10      	pop	{r4, pc}

0801f0f6 <memcpy>:
 801f0f6:	440a      	add	r2, r1
 801f0f8:	1e43      	subs	r3, r0, #1
 801f0fa:	4291      	cmp	r1, r2
 801f0fc:	d100      	bne.n	801f100 <memcpy+0xa>
 801f0fe:	4770      	bx	lr
 801f100:	b510      	push	{r4, lr}
 801f102:	f811 4b01 	ldrb.w	r4, [r1], #1
 801f106:	4291      	cmp	r1, r2
 801f108:	f803 4f01 	strb.w	r4, [r3, #1]!
 801f10c:	d1f9      	bne.n	801f102 <memcpy+0xc>
 801f10e:	bd10      	pop	{r4, pc}

0801f110 <nan>:
 801f110:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801f118 <nan+0x8>
 801f114:	4770      	bx	lr
 801f116:	bf00      	nop
 801f118:	00000000 	.word	0x00000000
 801f11c:	7ff80000 	.word	0x7ff80000

0801f120 <nanf>:
 801f120:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801f128 <nanf+0x8>
 801f124:	4770      	bx	lr
 801f126:	bf00      	nop
 801f128:	7fc00000 	.word	0x7fc00000

0801f12c <__assert_func>:
 801f12c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801f12e:	4614      	mov	r4, r2
 801f130:	461a      	mov	r2, r3
 801f132:	4b09      	ldr	r3, [pc, #36]	@ (801f158 <__assert_func+0x2c>)
 801f134:	4605      	mov	r5, r0
 801f136:	681b      	ldr	r3, [r3, #0]
 801f138:	68d8      	ldr	r0, [r3, #12]
 801f13a:	b954      	cbnz	r4, 801f152 <__assert_func+0x26>
 801f13c:	4b07      	ldr	r3, [pc, #28]	@ (801f15c <__assert_func+0x30>)
 801f13e:	461c      	mov	r4, r3
 801f140:	9100      	str	r1, [sp, #0]
 801f142:	4907      	ldr	r1, [pc, #28]	@ (801f160 <__assert_func+0x34>)
 801f144:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801f148:	462b      	mov	r3, r5
 801f14a:	f002 fd19 	bl	8021b80 <fiprintf>
 801f14e:	f002 fe37 	bl	8021dc0 <abort>
 801f152:	4b04      	ldr	r3, [pc, #16]	@ (801f164 <__assert_func+0x38>)
 801f154:	e7f4      	b.n	801f140 <__assert_func+0x14>
 801f156:	bf00      	nop
 801f158:	20000224 	.word	0x20000224
 801f15c:	080245e4 	.word	0x080245e4
 801f160:	080245b6 	.word	0x080245b6
 801f164:	080245a9 	.word	0x080245a9

0801f168 <quorem>:
 801f168:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f16c:	6903      	ldr	r3, [r0, #16]
 801f16e:	4607      	mov	r7, r0
 801f170:	690c      	ldr	r4, [r1, #16]
 801f172:	42a3      	cmp	r3, r4
 801f174:	f2c0 8083 	blt.w	801f27e <quorem+0x116>
 801f178:	3c01      	subs	r4, #1
 801f17a:	f100 0514 	add.w	r5, r0, #20
 801f17e:	f101 0814 	add.w	r8, r1, #20
 801f182:	00a3      	lsls	r3, r4, #2
 801f184:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801f188:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801f18c:	9300      	str	r3, [sp, #0]
 801f18e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801f192:	9301      	str	r3, [sp, #4]
 801f194:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801f198:	3301      	adds	r3, #1
 801f19a:	429a      	cmp	r2, r3
 801f19c:	fbb2 f6f3 	udiv	r6, r2, r3
 801f1a0:	d331      	bcc.n	801f206 <quorem+0x9e>
 801f1a2:	f04f 0a00 	mov.w	sl, #0
 801f1a6:	46c4      	mov	ip, r8
 801f1a8:	46ae      	mov	lr, r5
 801f1aa:	46d3      	mov	fp, sl
 801f1ac:	f85c 3b04 	ldr.w	r3, [ip], #4
 801f1b0:	b298      	uxth	r0, r3
 801f1b2:	45e1      	cmp	r9, ip
 801f1b4:	ea4f 4313 	mov.w	r3, r3, lsr #16
 801f1b8:	fb06 a000 	mla	r0, r6, r0, sl
 801f1bc:	ea4f 4210 	mov.w	r2, r0, lsr #16
 801f1c0:	b280      	uxth	r0, r0
 801f1c2:	fb06 2303 	mla	r3, r6, r3, r2
 801f1c6:	f8de 2000 	ldr.w	r2, [lr]
 801f1ca:	b292      	uxth	r2, r2
 801f1cc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801f1d0:	eba2 0200 	sub.w	r2, r2, r0
 801f1d4:	b29b      	uxth	r3, r3
 801f1d6:	f8de 0000 	ldr.w	r0, [lr]
 801f1da:	445a      	add	r2, fp
 801f1dc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801f1e0:	b292      	uxth	r2, r2
 801f1e2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801f1e6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801f1ea:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801f1ee:	f84e 2b04 	str.w	r2, [lr], #4
 801f1f2:	d2db      	bcs.n	801f1ac <quorem+0x44>
 801f1f4:	9b00      	ldr	r3, [sp, #0]
 801f1f6:	58eb      	ldr	r3, [r5, r3]
 801f1f8:	b92b      	cbnz	r3, 801f206 <quorem+0x9e>
 801f1fa:	9b01      	ldr	r3, [sp, #4]
 801f1fc:	3b04      	subs	r3, #4
 801f1fe:	429d      	cmp	r5, r3
 801f200:	461a      	mov	r2, r3
 801f202:	d330      	bcc.n	801f266 <quorem+0xfe>
 801f204:	613c      	str	r4, [r7, #16]
 801f206:	4638      	mov	r0, r7
 801f208:	f001 fc5a 	bl	8020ac0 <__mcmp>
 801f20c:	2800      	cmp	r0, #0
 801f20e:	db26      	blt.n	801f25e <quorem+0xf6>
 801f210:	4629      	mov	r1, r5
 801f212:	2000      	movs	r0, #0
 801f214:	f858 2b04 	ldr.w	r2, [r8], #4
 801f218:	f8d1 c000 	ldr.w	ip, [r1]
 801f21c:	fa1f fe82 	uxth.w	lr, r2
 801f220:	45c1      	cmp	r9, r8
 801f222:	fa1f f38c 	uxth.w	r3, ip
 801f226:	ea4f 4212 	mov.w	r2, r2, lsr #16
 801f22a:	eba3 030e 	sub.w	r3, r3, lr
 801f22e:	4403      	add	r3, r0
 801f230:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801f234:	b29b      	uxth	r3, r3
 801f236:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801f23a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801f23e:	ea4f 4022 	mov.w	r0, r2, asr #16
 801f242:	f841 3b04 	str.w	r3, [r1], #4
 801f246:	d2e5      	bcs.n	801f214 <quorem+0xac>
 801f248:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801f24c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801f250:	b922      	cbnz	r2, 801f25c <quorem+0xf4>
 801f252:	3b04      	subs	r3, #4
 801f254:	429d      	cmp	r5, r3
 801f256:	461a      	mov	r2, r3
 801f258:	d30b      	bcc.n	801f272 <quorem+0x10a>
 801f25a:	613c      	str	r4, [r7, #16]
 801f25c:	3601      	adds	r6, #1
 801f25e:	4630      	mov	r0, r6
 801f260:	b003      	add	sp, #12
 801f262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f266:	6812      	ldr	r2, [r2, #0]
 801f268:	3b04      	subs	r3, #4
 801f26a:	2a00      	cmp	r2, #0
 801f26c:	d1ca      	bne.n	801f204 <quorem+0x9c>
 801f26e:	3c01      	subs	r4, #1
 801f270:	e7c5      	b.n	801f1fe <quorem+0x96>
 801f272:	6812      	ldr	r2, [r2, #0]
 801f274:	3b04      	subs	r3, #4
 801f276:	2a00      	cmp	r2, #0
 801f278:	d1ef      	bne.n	801f25a <quorem+0xf2>
 801f27a:	3c01      	subs	r4, #1
 801f27c:	e7ea      	b.n	801f254 <quorem+0xec>
 801f27e:	2000      	movs	r0, #0
 801f280:	e7ee      	b.n	801f260 <quorem+0xf8>
 801f282:	0000      	movs	r0, r0
 801f284:	0000      	movs	r0, r0
	...

0801f288 <_dtoa_r>:
 801f288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f28c:	69c7      	ldr	r7, [r0, #28]
 801f28e:	b099      	sub	sp, #100	@ 0x64
 801f290:	4683      	mov	fp, r0
 801f292:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801f294:	9109      	str	r1, [sp, #36]	@ 0x24
 801f296:	920e      	str	r2, [sp, #56]	@ 0x38
 801f298:	9313      	str	r3, [sp, #76]	@ 0x4c
 801f29a:	ec55 4b10 	vmov	r4, r5, d0
 801f29e:	ed8d 0b02 	vstr	d0, [sp, #8]
 801f2a2:	b97f      	cbnz	r7, 801f2c4 <_dtoa_r+0x3c>
 801f2a4:	2010      	movs	r0, #16
 801f2a6:	f7fd fd43 	bl	801cd30 <malloc>
 801f2aa:	4602      	mov	r2, r0
 801f2ac:	f8cb 001c 	str.w	r0, [fp, #28]
 801f2b0:	b920      	cbnz	r0, 801f2bc <_dtoa_r+0x34>
 801f2b2:	4ba7      	ldr	r3, [pc, #668]	@ (801f550 <_dtoa_r+0x2c8>)
 801f2b4:	21ef      	movs	r1, #239	@ 0xef
 801f2b6:	48a7      	ldr	r0, [pc, #668]	@ (801f554 <_dtoa_r+0x2cc>)
 801f2b8:	f7ff ff38 	bl	801f12c <__assert_func>
 801f2bc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801f2c0:	6007      	str	r7, [r0, #0]
 801f2c2:	60c7      	str	r7, [r0, #12]
 801f2c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 801f2c8:	6819      	ldr	r1, [r3, #0]
 801f2ca:	b159      	cbz	r1, 801f2e4 <_dtoa_r+0x5c>
 801f2cc:	685a      	ldr	r2, [r3, #4]
 801f2ce:	2301      	movs	r3, #1
 801f2d0:	4658      	mov	r0, fp
 801f2d2:	4093      	lsls	r3, r2
 801f2d4:	604a      	str	r2, [r1, #4]
 801f2d6:	608b      	str	r3, [r1, #8]
 801f2d8:	f001 f96c 	bl	80205b4 <_Bfree>
 801f2dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 801f2e0:	2200      	movs	r2, #0
 801f2e2:	601a      	str	r2, [r3, #0]
 801f2e4:	1e2b      	subs	r3, r5, #0
 801f2e6:	bfb7      	itett	lt
 801f2e8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801f2ec:	2300      	movge	r3, #0
 801f2ee:	2201      	movlt	r2, #1
 801f2f0:	9303      	strlt	r3, [sp, #12]
 801f2f2:	bfa8      	it	ge
 801f2f4:	6033      	strge	r3, [r6, #0]
 801f2f6:	9f03      	ldr	r7, [sp, #12]
 801f2f8:	4b97      	ldr	r3, [pc, #604]	@ (801f558 <_dtoa_r+0x2d0>)
 801f2fa:	bfb8      	it	lt
 801f2fc:	6032      	strlt	r2, [r6, #0]
 801f2fe:	43bb      	bics	r3, r7
 801f300:	d112      	bne.n	801f328 <_dtoa_r+0xa0>
 801f302:	f242 730f 	movw	r3, #9999	@ 0x270f
 801f306:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801f308:	6013      	str	r3, [r2, #0]
 801f30a:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801f30e:	4323      	orrs	r3, r4
 801f310:	f000 854c 	beq.w	801fdac <_dtoa_r+0xb24>
 801f314:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801f316:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801f56c <_dtoa_r+0x2e4>
 801f31a:	2b00      	cmp	r3, #0
 801f31c:	f000 854e 	beq.w	801fdbc <_dtoa_r+0xb34>
 801f320:	f10a 0303 	add.w	r3, sl, #3
 801f324:	f000 bd48 	b.w	801fdb8 <_dtoa_r+0xb30>
 801f328:	ed9d 7b02 	vldr	d7, [sp, #8]
 801f32c:	2200      	movs	r2, #0
 801f32e:	2300      	movs	r3, #0
 801f330:	ec51 0b17 	vmov	r0, r1, d7
 801f334:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801f338:	f7e1 fbe0 	bl	8000afc <__aeabi_dcmpeq>
 801f33c:	4680      	mov	r8, r0
 801f33e:	b158      	cbz	r0, 801f358 <_dtoa_r+0xd0>
 801f340:	2301      	movs	r3, #1
 801f342:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801f344:	6013      	str	r3, [r2, #0]
 801f346:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801f348:	b113      	cbz	r3, 801f350 <_dtoa_r+0xc8>
 801f34a:	4b84      	ldr	r3, [pc, #528]	@ (801f55c <_dtoa_r+0x2d4>)
 801f34c:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801f34e:	6013      	str	r3, [r2, #0]
 801f350:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 801f570 <_dtoa_r+0x2e8>
 801f354:	f000 bd32 	b.w	801fdbc <_dtoa_r+0xb34>
 801f358:	f3c7 560a 	ubfx	r6, r7, #20, #11
 801f35c:	aa16      	add	r2, sp, #88	@ 0x58
 801f35e:	a917      	add	r1, sp, #92	@ 0x5c
 801f360:	4658      	mov	r0, fp
 801f362:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801f366:	f001 fcd3 	bl	8020d10 <__d2b>
 801f36a:	4681      	mov	r9, r0
 801f36c:	2e00      	cmp	r6, #0
 801f36e:	d075      	beq.n	801f45c <_dtoa_r+0x1d4>
 801f370:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f372:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801f376:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801f37a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801f37e:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801f382:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801f386:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801f38a:	4619      	mov	r1, r3
 801f38c:	2200      	movs	r2, #0
 801f38e:	4b74      	ldr	r3, [pc, #464]	@ (801f560 <_dtoa_r+0x2d8>)
 801f390:	f7e0 ff94 	bl	80002bc <__aeabi_dsub>
 801f394:	a368      	add	r3, pc, #416	@ (adr r3, 801f538 <_dtoa_r+0x2b0>)
 801f396:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f39a:	f7e1 f947 	bl	800062c <__aeabi_dmul>
 801f39e:	a368      	add	r3, pc, #416	@ (adr r3, 801f540 <_dtoa_r+0x2b8>)
 801f3a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f3a4:	f7e0 ff8c 	bl	80002c0 <__adddf3>
 801f3a8:	4604      	mov	r4, r0
 801f3aa:	460d      	mov	r5, r1
 801f3ac:	4630      	mov	r0, r6
 801f3ae:	f7e1 f8d3 	bl	8000558 <__aeabi_i2d>
 801f3b2:	a365      	add	r3, pc, #404	@ (adr r3, 801f548 <_dtoa_r+0x2c0>)
 801f3b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f3b8:	f7e1 f938 	bl	800062c <__aeabi_dmul>
 801f3bc:	4602      	mov	r2, r0
 801f3be:	460b      	mov	r3, r1
 801f3c0:	4620      	mov	r0, r4
 801f3c2:	4629      	mov	r1, r5
 801f3c4:	f7e0 ff7c 	bl	80002c0 <__adddf3>
 801f3c8:	4604      	mov	r4, r0
 801f3ca:	460d      	mov	r5, r1
 801f3cc:	f7e1 fbde 	bl	8000b8c <__aeabi_d2iz>
 801f3d0:	2200      	movs	r2, #0
 801f3d2:	4607      	mov	r7, r0
 801f3d4:	2300      	movs	r3, #0
 801f3d6:	4620      	mov	r0, r4
 801f3d8:	4629      	mov	r1, r5
 801f3da:	f7e1 fb99 	bl	8000b10 <__aeabi_dcmplt>
 801f3de:	b140      	cbz	r0, 801f3f2 <_dtoa_r+0x16a>
 801f3e0:	4638      	mov	r0, r7
 801f3e2:	f7e1 f8b9 	bl	8000558 <__aeabi_i2d>
 801f3e6:	4622      	mov	r2, r4
 801f3e8:	462b      	mov	r3, r5
 801f3ea:	f7e1 fb87 	bl	8000afc <__aeabi_dcmpeq>
 801f3ee:	b900      	cbnz	r0, 801f3f2 <_dtoa_r+0x16a>
 801f3f0:	3f01      	subs	r7, #1
 801f3f2:	2f16      	cmp	r7, #22
 801f3f4:	d851      	bhi.n	801f49a <_dtoa_r+0x212>
 801f3f6:	4b5b      	ldr	r3, [pc, #364]	@ (801f564 <_dtoa_r+0x2dc>)
 801f3f8:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801f3fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801f400:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f404:	f7e1 fb84 	bl	8000b10 <__aeabi_dcmplt>
 801f408:	2800      	cmp	r0, #0
 801f40a:	d048      	beq.n	801f49e <_dtoa_r+0x216>
 801f40c:	3f01      	subs	r7, #1
 801f40e:	2300      	movs	r3, #0
 801f410:	9312      	str	r3, [sp, #72]	@ 0x48
 801f412:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801f414:	1b9b      	subs	r3, r3, r6
 801f416:	1e5a      	subs	r2, r3, #1
 801f418:	bf46      	itte	mi
 801f41a:	f1c3 0801 	rsbmi	r8, r3, #1
 801f41e:	2300      	movmi	r3, #0
 801f420:	f04f 0800 	movpl.w	r8, #0
 801f424:	9208      	str	r2, [sp, #32]
 801f426:	bf48      	it	mi
 801f428:	9308      	strmi	r3, [sp, #32]
 801f42a:	2f00      	cmp	r7, #0
 801f42c:	db39      	blt.n	801f4a2 <_dtoa_r+0x21a>
 801f42e:	9b08      	ldr	r3, [sp, #32]
 801f430:	970f      	str	r7, [sp, #60]	@ 0x3c
 801f432:	443b      	add	r3, r7
 801f434:	9308      	str	r3, [sp, #32]
 801f436:	2300      	movs	r3, #0
 801f438:	930a      	str	r3, [sp, #40]	@ 0x28
 801f43a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f43c:	2b09      	cmp	r3, #9
 801f43e:	d864      	bhi.n	801f50a <_dtoa_r+0x282>
 801f440:	2b05      	cmp	r3, #5
 801f442:	bfc5      	ittet	gt
 801f444:	3b04      	subgt	r3, #4
 801f446:	2400      	movgt	r4, #0
 801f448:	2401      	movle	r4, #1
 801f44a:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801f44c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f44e:	3b02      	subs	r3, #2
 801f450:	2b03      	cmp	r3, #3
 801f452:	d865      	bhi.n	801f520 <_dtoa_r+0x298>
 801f454:	e8df f003 	tbb	[pc, r3]
 801f458:	5737392c 	.word	0x5737392c
 801f45c:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801f460:	441e      	add	r6, r3
 801f462:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801f466:	2b20      	cmp	r3, #32
 801f468:	bfc9      	itett	gt
 801f46a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801f46e:	f1c3 0320 	rsble	r3, r3, #32
 801f472:	409f      	lslgt	r7, r3
 801f474:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801f478:	bfd8      	it	le
 801f47a:	fa04 f003 	lslle.w	r0, r4, r3
 801f47e:	f106 36ff 	add.w	r6, r6, #4294967295
 801f482:	bfc4      	itt	gt
 801f484:	fa24 f303 	lsrgt.w	r3, r4, r3
 801f488:	ea47 0003 	orrgt.w	r0, r7, r3
 801f48c:	f7e1 f854 	bl	8000538 <__aeabi_ui2d>
 801f490:	2201      	movs	r2, #1
 801f492:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801f496:	9214      	str	r2, [sp, #80]	@ 0x50
 801f498:	e777      	b.n	801f38a <_dtoa_r+0x102>
 801f49a:	2301      	movs	r3, #1
 801f49c:	e7b8      	b.n	801f410 <_dtoa_r+0x188>
 801f49e:	9012      	str	r0, [sp, #72]	@ 0x48
 801f4a0:	e7b7      	b.n	801f412 <_dtoa_r+0x18a>
 801f4a2:	427b      	negs	r3, r7
 801f4a4:	eba8 0807 	sub.w	r8, r8, r7
 801f4a8:	930a      	str	r3, [sp, #40]	@ 0x28
 801f4aa:	2300      	movs	r3, #0
 801f4ac:	930f      	str	r3, [sp, #60]	@ 0x3c
 801f4ae:	e7c4      	b.n	801f43a <_dtoa_r+0x1b2>
 801f4b0:	2300      	movs	r3, #0
 801f4b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f4b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f4b6:	2b00      	cmp	r3, #0
 801f4b8:	dc35      	bgt.n	801f526 <_dtoa_r+0x29e>
 801f4ba:	2301      	movs	r3, #1
 801f4bc:	461a      	mov	r2, r3
 801f4be:	9300      	str	r3, [sp, #0]
 801f4c0:	9307      	str	r3, [sp, #28]
 801f4c2:	920e      	str	r2, [sp, #56]	@ 0x38
 801f4c4:	e00b      	b.n	801f4de <_dtoa_r+0x256>
 801f4c6:	2301      	movs	r3, #1
 801f4c8:	e7f3      	b.n	801f4b2 <_dtoa_r+0x22a>
 801f4ca:	2300      	movs	r3, #0
 801f4cc:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f4ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f4d0:	18fb      	adds	r3, r7, r3
 801f4d2:	9300      	str	r3, [sp, #0]
 801f4d4:	3301      	adds	r3, #1
 801f4d6:	2b01      	cmp	r3, #1
 801f4d8:	9307      	str	r3, [sp, #28]
 801f4da:	bfb8      	it	lt
 801f4dc:	2301      	movlt	r3, #1
 801f4de:	f8db 001c 	ldr.w	r0, [fp, #28]
 801f4e2:	2100      	movs	r1, #0
 801f4e4:	2204      	movs	r2, #4
 801f4e6:	f102 0514 	add.w	r5, r2, #20
 801f4ea:	429d      	cmp	r5, r3
 801f4ec:	d91f      	bls.n	801f52e <_dtoa_r+0x2a6>
 801f4ee:	6041      	str	r1, [r0, #4]
 801f4f0:	4658      	mov	r0, fp
 801f4f2:	f001 f81f 	bl	8020534 <_Balloc>
 801f4f6:	4682      	mov	sl, r0
 801f4f8:	2800      	cmp	r0, #0
 801f4fa:	d13b      	bne.n	801f574 <_dtoa_r+0x2ec>
 801f4fc:	4b1a      	ldr	r3, [pc, #104]	@ (801f568 <_dtoa_r+0x2e0>)
 801f4fe:	4602      	mov	r2, r0
 801f500:	f240 11af 	movw	r1, #431	@ 0x1af
 801f504:	e6d7      	b.n	801f2b6 <_dtoa_r+0x2e>
 801f506:	2301      	movs	r3, #1
 801f508:	e7e0      	b.n	801f4cc <_dtoa_r+0x244>
 801f50a:	2401      	movs	r4, #1
 801f50c:	2300      	movs	r3, #0
 801f50e:	940b      	str	r4, [sp, #44]	@ 0x2c
 801f510:	9309      	str	r3, [sp, #36]	@ 0x24
 801f512:	f04f 33ff 	mov.w	r3, #4294967295
 801f516:	2200      	movs	r2, #0
 801f518:	9300      	str	r3, [sp, #0]
 801f51a:	9307      	str	r3, [sp, #28]
 801f51c:	2312      	movs	r3, #18
 801f51e:	e7d0      	b.n	801f4c2 <_dtoa_r+0x23a>
 801f520:	2301      	movs	r3, #1
 801f522:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f524:	e7f5      	b.n	801f512 <_dtoa_r+0x28a>
 801f526:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f528:	9300      	str	r3, [sp, #0]
 801f52a:	9307      	str	r3, [sp, #28]
 801f52c:	e7d7      	b.n	801f4de <_dtoa_r+0x256>
 801f52e:	3101      	adds	r1, #1
 801f530:	0052      	lsls	r2, r2, #1
 801f532:	e7d8      	b.n	801f4e6 <_dtoa_r+0x25e>
 801f534:	f3af 8000 	nop.w
 801f538:	636f4361 	.word	0x636f4361
 801f53c:	3fd287a7 	.word	0x3fd287a7
 801f540:	8b60c8b3 	.word	0x8b60c8b3
 801f544:	3fc68a28 	.word	0x3fc68a28
 801f548:	509f79fb 	.word	0x509f79fb
 801f54c:	3fd34413 	.word	0x3fd34413
 801f550:	08024530 	.word	0x08024530
 801f554:	080245f2 	.word	0x080245f2
 801f558:	7ff00000 	.word	0x7ff00000
 801f55c:	08024838 	.word	0x08024838
 801f560:	3ff80000 	.word	0x3ff80000
 801f564:	08024748 	.word	0x08024748
 801f568:	0802464a 	.word	0x0802464a
 801f56c:	080245ee 	.word	0x080245ee
 801f570:	08024837 	.word	0x08024837
 801f574:	f8db 301c 	ldr.w	r3, [fp, #28]
 801f578:	6018      	str	r0, [r3, #0]
 801f57a:	9b07      	ldr	r3, [sp, #28]
 801f57c:	2b0e      	cmp	r3, #14
 801f57e:	f200 80a4 	bhi.w	801f6ca <_dtoa_r+0x442>
 801f582:	2c00      	cmp	r4, #0
 801f584:	f000 80a1 	beq.w	801f6ca <_dtoa_r+0x442>
 801f588:	2f00      	cmp	r7, #0
 801f58a:	dd33      	ble.n	801f5f4 <_dtoa_r+0x36c>
 801f58c:	f007 020f 	and.w	r2, r7, #15
 801f590:	4bac      	ldr	r3, [pc, #688]	@ (801f844 <_dtoa_r+0x5bc>)
 801f592:	05f8      	lsls	r0, r7, #23
 801f594:	ea4f 1427 	mov.w	r4, r7, asr #4
 801f598:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801f59c:	ed93 7b00 	vldr	d7, [r3]
 801f5a0:	ed8d 7b04 	vstr	d7, [sp, #16]
 801f5a4:	d516      	bpl.n	801f5d4 <_dtoa_r+0x34c>
 801f5a6:	4ba8      	ldr	r3, [pc, #672]	@ (801f848 <_dtoa_r+0x5c0>)
 801f5a8:	f004 040f 	and.w	r4, r4, #15
 801f5ac:	2603      	movs	r6, #3
 801f5ae:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801f5b2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801f5b6:	f7e1 f963 	bl	8000880 <__aeabi_ddiv>
 801f5ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f5be:	4da2      	ldr	r5, [pc, #648]	@ (801f848 <_dtoa_r+0x5c0>)
 801f5c0:	b954      	cbnz	r4, 801f5d8 <_dtoa_r+0x350>
 801f5c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801f5c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f5ca:	f7e1 f959 	bl	8000880 <__aeabi_ddiv>
 801f5ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f5d2:	e028      	b.n	801f626 <_dtoa_r+0x39e>
 801f5d4:	2602      	movs	r6, #2
 801f5d6:	e7f2      	b.n	801f5be <_dtoa_r+0x336>
 801f5d8:	07e1      	lsls	r1, r4, #31
 801f5da:	d508      	bpl.n	801f5ee <_dtoa_r+0x366>
 801f5dc:	3601      	adds	r6, #1
 801f5de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801f5e2:	e9d5 2300 	ldrd	r2, r3, [r5]
 801f5e6:	f7e1 f821 	bl	800062c <__aeabi_dmul>
 801f5ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801f5ee:	1064      	asrs	r4, r4, #1
 801f5f0:	3508      	adds	r5, #8
 801f5f2:	e7e5      	b.n	801f5c0 <_dtoa_r+0x338>
 801f5f4:	f000 80d2 	beq.w	801f79c <_dtoa_r+0x514>
 801f5f8:	427c      	negs	r4, r7
 801f5fa:	4b92      	ldr	r3, [pc, #584]	@ (801f844 <_dtoa_r+0x5bc>)
 801f5fc:	4d92      	ldr	r5, [pc, #584]	@ (801f848 <_dtoa_r+0x5c0>)
 801f5fe:	2602      	movs	r6, #2
 801f600:	f004 020f 	and.w	r2, r4, #15
 801f604:	1124      	asrs	r4, r4, #4
 801f606:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801f60a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801f60e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f612:	f7e1 f80b 	bl	800062c <__aeabi_dmul>
 801f616:	2300      	movs	r3, #0
 801f618:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f61c:	2c00      	cmp	r4, #0
 801f61e:	f040 80b2 	bne.w	801f786 <_dtoa_r+0x4fe>
 801f622:	2b00      	cmp	r3, #0
 801f624:	d1d3      	bne.n	801f5ce <_dtoa_r+0x346>
 801f626:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801f628:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801f62c:	2b00      	cmp	r3, #0
 801f62e:	f000 80b7 	beq.w	801f7a0 <_dtoa_r+0x518>
 801f632:	2200      	movs	r2, #0
 801f634:	4b85      	ldr	r3, [pc, #532]	@ (801f84c <_dtoa_r+0x5c4>)
 801f636:	4620      	mov	r0, r4
 801f638:	4629      	mov	r1, r5
 801f63a:	f7e1 fa69 	bl	8000b10 <__aeabi_dcmplt>
 801f63e:	2800      	cmp	r0, #0
 801f640:	f000 80ae 	beq.w	801f7a0 <_dtoa_r+0x518>
 801f644:	9b07      	ldr	r3, [sp, #28]
 801f646:	2b00      	cmp	r3, #0
 801f648:	f000 80aa 	beq.w	801f7a0 <_dtoa_r+0x518>
 801f64c:	9b00      	ldr	r3, [sp, #0]
 801f64e:	2b00      	cmp	r3, #0
 801f650:	dd37      	ble.n	801f6c2 <_dtoa_r+0x43a>
 801f652:	1e7b      	subs	r3, r7, #1
 801f654:	4620      	mov	r0, r4
 801f656:	2200      	movs	r2, #0
 801f658:	4629      	mov	r1, r5
 801f65a:	9304      	str	r3, [sp, #16]
 801f65c:	3601      	adds	r6, #1
 801f65e:	4b7c      	ldr	r3, [pc, #496]	@ (801f850 <_dtoa_r+0x5c8>)
 801f660:	f7e0 ffe4 	bl	800062c <__aeabi_dmul>
 801f664:	9c00      	ldr	r4, [sp, #0]
 801f666:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f66a:	4630      	mov	r0, r6
 801f66c:	f7e0 ff74 	bl	8000558 <__aeabi_i2d>
 801f670:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801f674:	f7e0 ffda 	bl	800062c <__aeabi_dmul>
 801f678:	2200      	movs	r2, #0
 801f67a:	4b76      	ldr	r3, [pc, #472]	@ (801f854 <_dtoa_r+0x5cc>)
 801f67c:	f7e0 fe20 	bl	80002c0 <__adddf3>
 801f680:	4605      	mov	r5, r0
 801f682:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801f686:	2c00      	cmp	r4, #0
 801f688:	f040 808d 	bne.w	801f7a6 <_dtoa_r+0x51e>
 801f68c:	2200      	movs	r2, #0
 801f68e:	4b72      	ldr	r3, [pc, #456]	@ (801f858 <_dtoa_r+0x5d0>)
 801f690:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f694:	f7e0 fe12 	bl	80002bc <__aeabi_dsub>
 801f698:	4602      	mov	r2, r0
 801f69a:	460b      	mov	r3, r1
 801f69c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801f6a0:	462a      	mov	r2, r5
 801f6a2:	4633      	mov	r3, r6
 801f6a4:	f7e1 fa52 	bl	8000b4c <__aeabi_dcmpgt>
 801f6a8:	2800      	cmp	r0, #0
 801f6aa:	f040 828b 	bne.w	801fbc4 <_dtoa_r+0x93c>
 801f6ae:	462a      	mov	r2, r5
 801f6b0:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801f6b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f6b8:	f7e1 fa2a 	bl	8000b10 <__aeabi_dcmplt>
 801f6bc:	2800      	cmp	r0, #0
 801f6be:	f040 8128 	bne.w	801f912 <_dtoa_r+0x68a>
 801f6c2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801f6c6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801f6ca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801f6cc:	2b00      	cmp	r3, #0
 801f6ce:	f2c0 815a 	blt.w	801f986 <_dtoa_r+0x6fe>
 801f6d2:	2f0e      	cmp	r7, #14
 801f6d4:	f300 8157 	bgt.w	801f986 <_dtoa_r+0x6fe>
 801f6d8:	4b5a      	ldr	r3, [pc, #360]	@ (801f844 <_dtoa_r+0x5bc>)
 801f6da:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801f6de:	ed93 7b00 	vldr	d7, [r3]
 801f6e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f6e4:	2b00      	cmp	r3, #0
 801f6e6:	ed8d 7b00 	vstr	d7, [sp]
 801f6ea:	da03      	bge.n	801f6f4 <_dtoa_r+0x46c>
 801f6ec:	9b07      	ldr	r3, [sp, #28]
 801f6ee:	2b00      	cmp	r3, #0
 801f6f0:	f340 8101 	ble.w	801f8f6 <_dtoa_r+0x66e>
 801f6f4:	4656      	mov	r6, sl
 801f6f6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801f6fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f6fe:	4620      	mov	r0, r4
 801f700:	4629      	mov	r1, r5
 801f702:	f7e1 f8bd 	bl	8000880 <__aeabi_ddiv>
 801f706:	f7e1 fa41 	bl	8000b8c <__aeabi_d2iz>
 801f70a:	4680      	mov	r8, r0
 801f70c:	f7e0 ff24 	bl	8000558 <__aeabi_i2d>
 801f710:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f714:	f7e0 ff8a 	bl	800062c <__aeabi_dmul>
 801f718:	4602      	mov	r2, r0
 801f71a:	4620      	mov	r0, r4
 801f71c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801f720:	460b      	mov	r3, r1
 801f722:	4629      	mov	r1, r5
 801f724:	f7e0 fdca 	bl	80002bc <__aeabi_dsub>
 801f728:	9d07      	ldr	r5, [sp, #28]
 801f72a:	f806 4b01 	strb.w	r4, [r6], #1
 801f72e:	eba6 040a 	sub.w	r4, r6, sl
 801f732:	4602      	mov	r2, r0
 801f734:	460b      	mov	r3, r1
 801f736:	42a5      	cmp	r5, r4
 801f738:	f040 8117 	bne.w	801f96a <_dtoa_r+0x6e2>
 801f73c:	f7e0 fdc0 	bl	80002c0 <__adddf3>
 801f740:	4604      	mov	r4, r0
 801f742:	460d      	mov	r5, r1
 801f744:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f748:	f7e1 fa00 	bl	8000b4c <__aeabi_dcmpgt>
 801f74c:	2800      	cmp	r0, #0
 801f74e:	f040 80f9 	bne.w	801f944 <_dtoa_r+0x6bc>
 801f752:	4620      	mov	r0, r4
 801f754:	4629      	mov	r1, r5
 801f756:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f75a:	f7e1 f9cf 	bl	8000afc <__aeabi_dcmpeq>
 801f75e:	b118      	cbz	r0, 801f768 <_dtoa_r+0x4e0>
 801f760:	f018 0f01 	tst.w	r8, #1
 801f764:	f040 80ee 	bne.w	801f944 <_dtoa_r+0x6bc>
 801f768:	4649      	mov	r1, r9
 801f76a:	4658      	mov	r0, fp
 801f76c:	f000 ff22 	bl	80205b4 <_Bfree>
 801f770:	2300      	movs	r3, #0
 801f772:	3701      	adds	r7, #1
 801f774:	7033      	strb	r3, [r6, #0]
 801f776:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f778:	601f      	str	r7, [r3, #0]
 801f77a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801f77c:	2b00      	cmp	r3, #0
 801f77e:	f000 831d 	beq.w	801fdbc <_dtoa_r+0xb34>
 801f782:	601e      	str	r6, [r3, #0]
 801f784:	e31a      	b.n	801fdbc <_dtoa_r+0xb34>
 801f786:	07e2      	lsls	r2, r4, #31
 801f788:	d505      	bpl.n	801f796 <_dtoa_r+0x50e>
 801f78a:	3601      	adds	r6, #1
 801f78c:	e9d5 2300 	ldrd	r2, r3, [r5]
 801f790:	f7e0 ff4c 	bl	800062c <__aeabi_dmul>
 801f794:	2301      	movs	r3, #1
 801f796:	1064      	asrs	r4, r4, #1
 801f798:	3508      	adds	r5, #8
 801f79a:	e73f      	b.n	801f61c <_dtoa_r+0x394>
 801f79c:	2602      	movs	r6, #2
 801f79e:	e742      	b.n	801f626 <_dtoa_r+0x39e>
 801f7a0:	9c07      	ldr	r4, [sp, #28]
 801f7a2:	9704      	str	r7, [sp, #16]
 801f7a4:	e761      	b.n	801f66a <_dtoa_r+0x3e2>
 801f7a6:	4b27      	ldr	r3, [pc, #156]	@ (801f844 <_dtoa_r+0x5bc>)
 801f7a8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801f7aa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801f7ae:	4454      	add	r4, sl
 801f7b0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801f7b4:	2900      	cmp	r1, #0
 801f7b6:	d053      	beq.n	801f860 <_dtoa_r+0x5d8>
 801f7b8:	2000      	movs	r0, #0
 801f7ba:	4928      	ldr	r1, [pc, #160]	@ (801f85c <_dtoa_r+0x5d4>)
 801f7bc:	f7e1 f860 	bl	8000880 <__aeabi_ddiv>
 801f7c0:	4633      	mov	r3, r6
 801f7c2:	4656      	mov	r6, sl
 801f7c4:	462a      	mov	r2, r5
 801f7c6:	f7e0 fd79 	bl	80002bc <__aeabi_dsub>
 801f7ca:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801f7ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f7d2:	f7e1 f9db 	bl	8000b8c <__aeabi_d2iz>
 801f7d6:	4605      	mov	r5, r0
 801f7d8:	f7e0 febe 	bl	8000558 <__aeabi_i2d>
 801f7dc:	4602      	mov	r2, r0
 801f7de:	460b      	mov	r3, r1
 801f7e0:	3530      	adds	r5, #48	@ 0x30
 801f7e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f7e6:	f7e0 fd69 	bl	80002bc <__aeabi_dsub>
 801f7ea:	4602      	mov	r2, r0
 801f7ec:	460b      	mov	r3, r1
 801f7ee:	f806 5b01 	strb.w	r5, [r6], #1
 801f7f2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801f7f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801f7fa:	f7e1 f989 	bl	8000b10 <__aeabi_dcmplt>
 801f7fe:	2800      	cmp	r0, #0
 801f800:	d171      	bne.n	801f8e6 <_dtoa_r+0x65e>
 801f802:	2000      	movs	r0, #0
 801f804:	4911      	ldr	r1, [pc, #68]	@ (801f84c <_dtoa_r+0x5c4>)
 801f806:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801f80a:	f7e0 fd57 	bl	80002bc <__aeabi_dsub>
 801f80e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801f812:	f7e1 f97d 	bl	8000b10 <__aeabi_dcmplt>
 801f816:	2800      	cmp	r0, #0
 801f818:	f040 8095 	bne.w	801f946 <_dtoa_r+0x6be>
 801f81c:	42a6      	cmp	r6, r4
 801f81e:	f43f af50 	beq.w	801f6c2 <_dtoa_r+0x43a>
 801f822:	2200      	movs	r2, #0
 801f824:	4b0a      	ldr	r3, [pc, #40]	@ (801f850 <_dtoa_r+0x5c8>)
 801f826:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801f82a:	f7e0 feff 	bl	800062c <__aeabi_dmul>
 801f82e:	2200      	movs	r2, #0
 801f830:	4b07      	ldr	r3, [pc, #28]	@ (801f850 <_dtoa_r+0x5c8>)
 801f832:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801f836:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f83a:	f7e0 fef7 	bl	800062c <__aeabi_dmul>
 801f83e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f842:	e7c4      	b.n	801f7ce <_dtoa_r+0x546>
 801f844:	08024748 	.word	0x08024748
 801f848:	08024720 	.word	0x08024720
 801f84c:	3ff00000 	.word	0x3ff00000
 801f850:	40240000 	.word	0x40240000
 801f854:	401c0000 	.word	0x401c0000
 801f858:	40140000 	.word	0x40140000
 801f85c:	3fe00000 	.word	0x3fe00000
 801f860:	4631      	mov	r1, r6
 801f862:	4656      	mov	r6, sl
 801f864:	4628      	mov	r0, r5
 801f866:	f7e0 fee1 	bl	800062c <__aeabi_dmul>
 801f86a:	9415      	str	r4, [sp, #84]	@ 0x54
 801f86c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801f870:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f874:	f7e1 f98a 	bl	8000b8c <__aeabi_d2iz>
 801f878:	4605      	mov	r5, r0
 801f87a:	f7e0 fe6d 	bl	8000558 <__aeabi_i2d>
 801f87e:	4602      	mov	r2, r0
 801f880:	3530      	adds	r5, #48	@ 0x30
 801f882:	460b      	mov	r3, r1
 801f884:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f888:	f7e0 fd18 	bl	80002bc <__aeabi_dsub>
 801f88c:	f806 5b01 	strb.w	r5, [r6], #1
 801f890:	4602      	mov	r2, r0
 801f892:	460b      	mov	r3, r1
 801f894:	42a6      	cmp	r6, r4
 801f896:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801f89a:	f04f 0200 	mov.w	r2, #0
 801f89e:	d124      	bne.n	801f8ea <_dtoa_r+0x662>
 801f8a0:	4bac      	ldr	r3, [pc, #688]	@ (801fb54 <_dtoa_r+0x8cc>)
 801f8a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801f8a6:	f7e0 fd0b 	bl	80002c0 <__adddf3>
 801f8aa:	4602      	mov	r2, r0
 801f8ac:	460b      	mov	r3, r1
 801f8ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f8b2:	f7e1 f94b 	bl	8000b4c <__aeabi_dcmpgt>
 801f8b6:	2800      	cmp	r0, #0
 801f8b8:	d145      	bne.n	801f946 <_dtoa_r+0x6be>
 801f8ba:	2000      	movs	r0, #0
 801f8bc:	49a5      	ldr	r1, [pc, #660]	@ (801fb54 <_dtoa_r+0x8cc>)
 801f8be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801f8c2:	f7e0 fcfb 	bl	80002bc <__aeabi_dsub>
 801f8c6:	4602      	mov	r2, r0
 801f8c8:	460b      	mov	r3, r1
 801f8ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f8ce:	f7e1 f91f 	bl	8000b10 <__aeabi_dcmplt>
 801f8d2:	2800      	cmp	r0, #0
 801f8d4:	f43f aef5 	beq.w	801f6c2 <_dtoa_r+0x43a>
 801f8d8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801f8da:	1e73      	subs	r3, r6, #1
 801f8dc:	9315      	str	r3, [sp, #84]	@ 0x54
 801f8de:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801f8e2:	2b30      	cmp	r3, #48	@ 0x30
 801f8e4:	d0f8      	beq.n	801f8d8 <_dtoa_r+0x650>
 801f8e6:	9f04      	ldr	r7, [sp, #16]
 801f8e8:	e73e      	b.n	801f768 <_dtoa_r+0x4e0>
 801f8ea:	4b9b      	ldr	r3, [pc, #620]	@ (801fb58 <_dtoa_r+0x8d0>)
 801f8ec:	f7e0 fe9e 	bl	800062c <__aeabi_dmul>
 801f8f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f8f4:	e7bc      	b.n	801f870 <_dtoa_r+0x5e8>
 801f8f6:	d10c      	bne.n	801f912 <_dtoa_r+0x68a>
 801f8f8:	2200      	movs	r2, #0
 801f8fa:	4b98      	ldr	r3, [pc, #608]	@ (801fb5c <_dtoa_r+0x8d4>)
 801f8fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 801f900:	f7e0 fe94 	bl	800062c <__aeabi_dmul>
 801f904:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801f908:	f7e1 f916 	bl	8000b38 <__aeabi_dcmpge>
 801f90c:	2800      	cmp	r0, #0
 801f90e:	f000 8157 	beq.w	801fbc0 <_dtoa_r+0x938>
 801f912:	2400      	movs	r4, #0
 801f914:	4625      	mov	r5, r4
 801f916:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f918:	4656      	mov	r6, sl
 801f91a:	43db      	mvns	r3, r3
 801f91c:	9304      	str	r3, [sp, #16]
 801f91e:	2700      	movs	r7, #0
 801f920:	4621      	mov	r1, r4
 801f922:	4658      	mov	r0, fp
 801f924:	f000 fe46 	bl	80205b4 <_Bfree>
 801f928:	2d00      	cmp	r5, #0
 801f92a:	d0dc      	beq.n	801f8e6 <_dtoa_r+0x65e>
 801f92c:	b12f      	cbz	r7, 801f93a <_dtoa_r+0x6b2>
 801f92e:	42af      	cmp	r7, r5
 801f930:	d003      	beq.n	801f93a <_dtoa_r+0x6b2>
 801f932:	4639      	mov	r1, r7
 801f934:	4658      	mov	r0, fp
 801f936:	f000 fe3d 	bl	80205b4 <_Bfree>
 801f93a:	4629      	mov	r1, r5
 801f93c:	4658      	mov	r0, fp
 801f93e:	f000 fe39 	bl	80205b4 <_Bfree>
 801f942:	e7d0      	b.n	801f8e6 <_dtoa_r+0x65e>
 801f944:	9704      	str	r7, [sp, #16]
 801f946:	4633      	mov	r3, r6
 801f948:	461e      	mov	r6, r3
 801f94a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801f94e:	2a39      	cmp	r2, #57	@ 0x39
 801f950:	d107      	bne.n	801f962 <_dtoa_r+0x6da>
 801f952:	459a      	cmp	sl, r3
 801f954:	d1f8      	bne.n	801f948 <_dtoa_r+0x6c0>
 801f956:	9a04      	ldr	r2, [sp, #16]
 801f958:	3201      	adds	r2, #1
 801f95a:	9204      	str	r2, [sp, #16]
 801f95c:	2230      	movs	r2, #48	@ 0x30
 801f95e:	f88a 2000 	strb.w	r2, [sl]
 801f962:	781a      	ldrb	r2, [r3, #0]
 801f964:	3201      	adds	r2, #1
 801f966:	701a      	strb	r2, [r3, #0]
 801f968:	e7bd      	b.n	801f8e6 <_dtoa_r+0x65e>
 801f96a:	2200      	movs	r2, #0
 801f96c:	4b7a      	ldr	r3, [pc, #488]	@ (801fb58 <_dtoa_r+0x8d0>)
 801f96e:	f7e0 fe5d 	bl	800062c <__aeabi_dmul>
 801f972:	2200      	movs	r2, #0
 801f974:	2300      	movs	r3, #0
 801f976:	4604      	mov	r4, r0
 801f978:	460d      	mov	r5, r1
 801f97a:	f7e1 f8bf 	bl	8000afc <__aeabi_dcmpeq>
 801f97e:	2800      	cmp	r0, #0
 801f980:	f43f aebb 	beq.w	801f6fa <_dtoa_r+0x472>
 801f984:	e6f0      	b.n	801f768 <_dtoa_r+0x4e0>
 801f986:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801f988:	2a00      	cmp	r2, #0
 801f98a:	f000 80db 	beq.w	801fb44 <_dtoa_r+0x8bc>
 801f98e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f990:	2a01      	cmp	r2, #1
 801f992:	f300 80bf 	bgt.w	801fb14 <_dtoa_r+0x88c>
 801f996:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801f998:	2a00      	cmp	r2, #0
 801f99a:	f000 80b7 	beq.w	801fb0c <_dtoa_r+0x884>
 801f99e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801f9a2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801f9a4:	4646      	mov	r6, r8
 801f9a6:	9a08      	ldr	r2, [sp, #32]
 801f9a8:	2101      	movs	r1, #1
 801f9aa:	4658      	mov	r0, fp
 801f9ac:	4498      	add	r8, r3
 801f9ae:	441a      	add	r2, r3
 801f9b0:	9208      	str	r2, [sp, #32]
 801f9b2:	f000 feff 	bl	80207b4 <__i2b>
 801f9b6:	4605      	mov	r5, r0
 801f9b8:	b15e      	cbz	r6, 801f9d2 <_dtoa_r+0x74a>
 801f9ba:	9b08      	ldr	r3, [sp, #32]
 801f9bc:	2b00      	cmp	r3, #0
 801f9be:	dd08      	ble.n	801f9d2 <_dtoa_r+0x74a>
 801f9c0:	42b3      	cmp	r3, r6
 801f9c2:	9a08      	ldr	r2, [sp, #32]
 801f9c4:	bfa8      	it	ge
 801f9c6:	4633      	movge	r3, r6
 801f9c8:	eba8 0803 	sub.w	r8, r8, r3
 801f9cc:	1af6      	subs	r6, r6, r3
 801f9ce:	1ad3      	subs	r3, r2, r3
 801f9d0:	9308      	str	r3, [sp, #32]
 801f9d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f9d4:	b1f3      	cbz	r3, 801fa14 <_dtoa_r+0x78c>
 801f9d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f9d8:	2b00      	cmp	r3, #0
 801f9da:	f000 80b7 	beq.w	801fb4c <_dtoa_r+0x8c4>
 801f9de:	b18c      	cbz	r4, 801fa04 <_dtoa_r+0x77c>
 801f9e0:	4629      	mov	r1, r5
 801f9e2:	4622      	mov	r2, r4
 801f9e4:	4658      	mov	r0, fp
 801f9e6:	f000 ffa5 	bl	8020934 <__pow5mult>
 801f9ea:	464a      	mov	r2, r9
 801f9ec:	4601      	mov	r1, r0
 801f9ee:	4605      	mov	r5, r0
 801f9f0:	4658      	mov	r0, fp
 801f9f2:	f000 fef5 	bl	80207e0 <__multiply>
 801f9f6:	4649      	mov	r1, r9
 801f9f8:	9004      	str	r0, [sp, #16]
 801f9fa:	4658      	mov	r0, fp
 801f9fc:	f000 fdda 	bl	80205b4 <_Bfree>
 801fa00:	9b04      	ldr	r3, [sp, #16]
 801fa02:	4699      	mov	r9, r3
 801fa04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801fa06:	1b1a      	subs	r2, r3, r4
 801fa08:	d004      	beq.n	801fa14 <_dtoa_r+0x78c>
 801fa0a:	4649      	mov	r1, r9
 801fa0c:	4658      	mov	r0, fp
 801fa0e:	f000 ff91 	bl	8020934 <__pow5mult>
 801fa12:	4681      	mov	r9, r0
 801fa14:	2101      	movs	r1, #1
 801fa16:	4658      	mov	r0, fp
 801fa18:	f000 fecc 	bl	80207b4 <__i2b>
 801fa1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801fa1e:	4604      	mov	r4, r0
 801fa20:	2b00      	cmp	r3, #0
 801fa22:	f000 81cf 	beq.w	801fdc4 <_dtoa_r+0xb3c>
 801fa26:	461a      	mov	r2, r3
 801fa28:	4601      	mov	r1, r0
 801fa2a:	4658      	mov	r0, fp
 801fa2c:	f000 ff82 	bl	8020934 <__pow5mult>
 801fa30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fa32:	4604      	mov	r4, r0
 801fa34:	2b01      	cmp	r3, #1
 801fa36:	f300 8095 	bgt.w	801fb64 <_dtoa_r+0x8dc>
 801fa3a:	9b02      	ldr	r3, [sp, #8]
 801fa3c:	2b00      	cmp	r3, #0
 801fa3e:	f040 8087 	bne.w	801fb50 <_dtoa_r+0x8c8>
 801fa42:	9b03      	ldr	r3, [sp, #12]
 801fa44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801fa48:	2b00      	cmp	r3, #0
 801fa4a:	f040 8089 	bne.w	801fb60 <_dtoa_r+0x8d8>
 801fa4e:	9b03      	ldr	r3, [sp, #12]
 801fa50:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801fa54:	0d1b      	lsrs	r3, r3, #20
 801fa56:	051b      	lsls	r3, r3, #20
 801fa58:	b12b      	cbz	r3, 801fa66 <_dtoa_r+0x7de>
 801fa5a:	9b08      	ldr	r3, [sp, #32]
 801fa5c:	f108 0801 	add.w	r8, r8, #1
 801fa60:	3301      	adds	r3, #1
 801fa62:	9308      	str	r3, [sp, #32]
 801fa64:	2301      	movs	r3, #1
 801fa66:	930a      	str	r3, [sp, #40]	@ 0x28
 801fa68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801fa6a:	2b00      	cmp	r3, #0
 801fa6c:	f000 81b0 	beq.w	801fdd0 <_dtoa_r+0xb48>
 801fa70:	6923      	ldr	r3, [r4, #16]
 801fa72:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801fa76:	6918      	ldr	r0, [r3, #16]
 801fa78:	f000 fe50 	bl	802071c <__hi0bits>
 801fa7c:	f1c0 0020 	rsb	r0, r0, #32
 801fa80:	9b08      	ldr	r3, [sp, #32]
 801fa82:	4418      	add	r0, r3
 801fa84:	f010 001f 	ands.w	r0, r0, #31
 801fa88:	d077      	beq.n	801fb7a <_dtoa_r+0x8f2>
 801fa8a:	f1c0 0320 	rsb	r3, r0, #32
 801fa8e:	2b04      	cmp	r3, #4
 801fa90:	dd6b      	ble.n	801fb6a <_dtoa_r+0x8e2>
 801fa92:	f1c0 001c 	rsb	r0, r0, #28
 801fa96:	9b08      	ldr	r3, [sp, #32]
 801fa98:	4480      	add	r8, r0
 801fa9a:	4403      	add	r3, r0
 801fa9c:	4406      	add	r6, r0
 801fa9e:	9308      	str	r3, [sp, #32]
 801faa0:	f1b8 0f00 	cmp.w	r8, #0
 801faa4:	dd05      	ble.n	801fab2 <_dtoa_r+0x82a>
 801faa6:	4649      	mov	r1, r9
 801faa8:	4642      	mov	r2, r8
 801faaa:	4658      	mov	r0, fp
 801faac:	f000 ff9c 	bl	80209e8 <__lshift>
 801fab0:	4681      	mov	r9, r0
 801fab2:	9b08      	ldr	r3, [sp, #32]
 801fab4:	2b00      	cmp	r3, #0
 801fab6:	dd05      	ble.n	801fac4 <_dtoa_r+0x83c>
 801fab8:	4621      	mov	r1, r4
 801faba:	461a      	mov	r2, r3
 801fabc:	4658      	mov	r0, fp
 801fabe:	f000 ff93 	bl	80209e8 <__lshift>
 801fac2:	4604      	mov	r4, r0
 801fac4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801fac6:	2b00      	cmp	r3, #0
 801fac8:	d059      	beq.n	801fb7e <_dtoa_r+0x8f6>
 801faca:	4621      	mov	r1, r4
 801facc:	4648      	mov	r0, r9
 801face:	f000 fff7 	bl	8020ac0 <__mcmp>
 801fad2:	2800      	cmp	r0, #0
 801fad4:	da53      	bge.n	801fb7e <_dtoa_r+0x8f6>
 801fad6:	1e7b      	subs	r3, r7, #1
 801fad8:	4649      	mov	r1, r9
 801fada:	220a      	movs	r2, #10
 801fadc:	4658      	mov	r0, fp
 801fade:	9304      	str	r3, [sp, #16]
 801fae0:	2300      	movs	r3, #0
 801fae2:	f000 fd89 	bl	80205f8 <__multadd>
 801fae6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801fae8:	4681      	mov	r9, r0
 801faea:	2b00      	cmp	r3, #0
 801faec:	f000 8172 	beq.w	801fdd4 <_dtoa_r+0xb4c>
 801faf0:	2300      	movs	r3, #0
 801faf2:	4629      	mov	r1, r5
 801faf4:	220a      	movs	r2, #10
 801faf6:	4658      	mov	r0, fp
 801faf8:	f000 fd7e 	bl	80205f8 <__multadd>
 801fafc:	9b00      	ldr	r3, [sp, #0]
 801fafe:	4605      	mov	r5, r0
 801fb00:	2b00      	cmp	r3, #0
 801fb02:	dc67      	bgt.n	801fbd4 <_dtoa_r+0x94c>
 801fb04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fb06:	2b02      	cmp	r3, #2
 801fb08:	dc41      	bgt.n	801fb8e <_dtoa_r+0x906>
 801fb0a:	e063      	b.n	801fbd4 <_dtoa_r+0x94c>
 801fb0c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801fb0e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801fb12:	e746      	b.n	801f9a2 <_dtoa_r+0x71a>
 801fb14:	9b07      	ldr	r3, [sp, #28]
 801fb16:	1e5c      	subs	r4, r3, #1
 801fb18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801fb1a:	42a3      	cmp	r3, r4
 801fb1c:	bfb7      	itett	lt
 801fb1e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801fb20:	1b1c      	subge	r4, r3, r4
 801fb22:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801fb24:	1ae3      	sublt	r3, r4, r3
 801fb26:	bfbe      	ittt	lt
 801fb28:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801fb2a:	2400      	movlt	r4, #0
 801fb2c:	18d2      	addlt	r2, r2, r3
 801fb2e:	9b07      	ldr	r3, [sp, #28]
 801fb30:	bfb8      	it	lt
 801fb32:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801fb34:	2b00      	cmp	r3, #0
 801fb36:	bfb5      	itete	lt
 801fb38:	eba8 0603 	sublt.w	r6, r8, r3
 801fb3c:	4646      	movge	r6, r8
 801fb3e:	2300      	movlt	r3, #0
 801fb40:	9b07      	ldrge	r3, [sp, #28]
 801fb42:	e730      	b.n	801f9a6 <_dtoa_r+0x71e>
 801fb44:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801fb46:	4646      	mov	r6, r8
 801fb48:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801fb4a:	e735      	b.n	801f9b8 <_dtoa_r+0x730>
 801fb4c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801fb4e:	e75c      	b.n	801fa0a <_dtoa_r+0x782>
 801fb50:	2300      	movs	r3, #0
 801fb52:	e788      	b.n	801fa66 <_dtoa_r+0x7de>
 801fb54:	3fe00000 	.word	0x3fe00000
 801fb58:	40240000 	.word	0x40240000
 801fb5c:	40140000 	.word	0x40140000
 801fb60:	9b02      	ldr	r3, [sp, #8]
 801fb62:	e780      	b.n	801fa66 <_dtoa_r+0x7de>
 801fb64:	2300      	movs	r3, #0
 801fb66:	930a      	str	r3, [sp, #40]	@ 0x28
 801fb68:	e782      	b.n	801fa70 <_dtoa_r+0x7e8>
 801fb6a:	d099      	beq.n	801faa0 <_dtoa_r+0x818>
 801fb6c:	331c      	adds	r3, #28
 801fb6e:	9a08      	ldr	r2, [sp, #32]
 801fb70:	441a      	add	r2, r3
 801fb72:	4498      	add	r8, r3
 801fb74:	441e      	add	r6, r3
 801fb76:	9208      	str	r2, [sp, #32]
 801fb78:	e792      	b.n	801faa0 <_dtoa_r+0x818>
 801fb7a:	4603      	mov	r3, r0
 801fb7c:	e7f6      	b.n	801fb6c <_dtoa_r+0x8e4>
 801fb7e:	9b07      	ldr	r3, [sp, #28]
 801fb80:	9704      	str	r7, [sp, #16]
 801fb82:	2b00      	cmp	r3, #0
 801fb84:	dc20      	bgt.n	801fbc8 <_dtoa_r+0x940>
 801fb86:	9300      	str	r3, [sp, #0]
 801fb88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fb8a:	2b02      	cmp	r3, #2
 801fb8c:	dd1e      	ble.n	801fbcc <_dtoa_r+0x944>
 801fb8e:	9b00      	ldr	r3, [sp, #0]
 801fb90:	2b00      	cmp	r3, #0
 801fb92:	f47f aec0 	bne.w	801f916 <_dtoa_r+0x68e>
 801fb96:	4621      	mov	r1, r4
 801fb98:	2205      	movs	r2, #5
 801fb9a:	4658      	mov	r0, fp
 801fb9c:	f000 fd2c 	bl	80205f8 <__multadd>
 801fba0:	4601      	mov	r1, r0
 801fba2:	4604      	mov	r4, r0
 801fba4:	4648      	mov	r0, r9
 801fba6:	f000 ff8b 	bl	8020ac0 <__mcmp>
 801fbaa:	2800      	cmp	r0, #0
 801fbac:	f77f aeb3 	ble.w	801f916 <_dtoa_r+0x68e>
 801fbb0:	2331      	movs	r3, #49	@ 0x31
 801fbb2:	4656      	mov	r6, sl
 801fbb4:	f806 3b01 	strb.w	r3, [r6], #1
 801fbb8:	9b04      	ldr	r3, [sp, #16]
 801fbba:	3301      	adds	r3, #1
 801fbbc:	9304      	str	r3, [sp, #16]
 801fbbe:	e6ae      	b.n	801f91e <_dtoa_r+0x696>
 801fbc0:	9c07      	ldr	r4, [sp, #28]
 801fbc2:	9704      	str	r7, [sp, #16]
 801fbc4:	4625      	mov	r5, r4
 801fbc6:	e7f3      	b.n	801fbb0 <_dtoa_r+0x928>
 801fbc8:	9b07      	ldr	r3, [sp, #28]
 801fbca:	9300      	str	r3, [sp, #0]
 801fbcc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801fbce:	2b00      	cmp	r3, #0
 801fbd0:	f000 8104 	beq.w	801fddc <_dtoa_r+0xb54>
 801fbd4:	2e00      	cmp	r6, #0
 801fbd6:	dd05      	ble.n	801fbe4 <_dtoa_r+0x95c>
 801fbd8:	4629      	mov	r1, r5
 801fbda:	4632      	mov	r2, r6
 801fbdc:	4658      	mov	r0, fp
 801fbde:	f000 ff03 	bl	80209e8 <__lshift>
 801fbe2:	4605      	mov	r5, r0
 801fbe4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801fbe6:	2b00      	cmp	r3, #0
 801fbe8:	d05a      	beq.n	801fca0 <_dtoa_r+0xa18>
 801fbea:	6869      	ldr	r1, [r5, #4]
 801fbec:	4658      	mov	r0, fp
 801fbee:	f000 fca1 	bl	8020534 <_Balloc>
 801fbf2:	4606      	mov	r6, r0
 801fbf4:	b928      	cbnz	r0, 801fc02 <_dtoa_r+0x97a>
 801fbf6:	4b84      	ldr	r3, [pc, #528]	@ (801fe08 <_dtoa_r+0xb80>)
 801fbf8:	4602      	mov	r2, r0
 801fbfa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801fbfe:	f7ff bb5a 	b.w	801f2b6 <_dtoa_r+0x2e>
 801fc02:	692a      	ldr	r2, [r5, #16]
 801fc04:	f105 010c 	add.w	r1, r5, #12
 801fc08:	300c      	adds	r0, #12
 801fc0a:	3202      	adds	r2, #2
 801fc0c:	0092      	lsls	r2, r2, #2
 801fc0e:	f7ff fa72 	bl	801f0f6 <memcpy>
 801fc12:	2201      	movs	r2, #1
 801fc14:	4631      	mov	r1, r6
 801fc16:	4658      	mov	r0, fp
 801fc18:	f000 fee6 	bl	80209e8 <__lshift>
 801fc1c:	f10a 0301 	add.w	r3, sl, #1
 801fc20:	462f      	mov	r7, r5
 801fc22:	4605      	mov	r5, r0
 801fc24:	9307      	str	r3, [sp, #28]
 801fc26:	9b00      	ldr	r3, [sp, #0]
 801fc28:	4453      	add	r3, sl
 801fc2a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801fc2c:	9b02      	ldr	r3, [sp, #8]
 801fc2e:	f003 0301 	and.w	r3, r3, #1
 801fc32:	930a      	str	r3, [sp, #40]	@ 0x28
 801fc34:	9b07      	ldr	r3, [sp, #28]
 801fc36:	4621      	mov	r1, r4
 801fc38:	4648      	mov	r0, r9
 801fc3a:	3b01      	subs	r3, #1
 801fc3c:	9300      	str	r3, [sp, #0]
 801fc3e:	f7ff fa93 	bl	801f168 <quorem>
 801fc42:	4639      	mov	r1, r7
 801fc44:	9002      	str	r0, [sp, #8]
 801fc46:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801fc4a:	4648      	mov	r0, r9
 801fc4c:	f000 ff38 	bl	8020ac0 <__mcmp>
 801fc50:	462a      	mov	r2, r5
 801fc52:	9008      	str	r0, [sp, #32]
 801fc54:	4621      	mov	r1, r4
 801fc56:	4658      	mov	r0, fp
 801fc58:	f000 ff4e 	bl	8020af8 <__mdiff>
 801fc5c:	68c2      	ldr	r2, [r0, #12]
 801fc5e:	4606      	mov	r6, r0
 801fc60:	bb02      	cbnz	r2, 801fca4 <_dtoa_r+0xa1c>
 801fc62:	4601      	mov	r1, r0
 801fc64:	4648      	mov	r0, r9
 801fc66:	f000 ff2b 	bl	8020ac0 <__mcmp>
 801fc6a:	4602      	mov	r2, r0
 801fc6c:	4631      	mov	r1, r6
 801fc6e:	4658      	mov	r0, fp
 801fc70:	920e      	str	r2, [sp, #56]	@ 0x38
 801fc72:	f000 fc9f 	bl	80205b4 <_Bfree>
 801fc76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fc78:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801fc7a:	9e07      	ldr	r6, [sp, #28]
 801fc7c:	ea43 0102 	orr.w	r1, r3, r2
 801fc80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801fc82:	4319      	orrs	r1, r3
 801fc84:	d110      	bne.n	801fca8 <_dtoa_r+0xa20>
 801fc86:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801fc8a:	d029      	beq.n	801fce0 <_dtoa_r+0xa58>
 801fc8c:	9b08      	ldr	r3, [sp, #32]
 801fc8e:	2b00      	cmp	r3, #0
 801fc90:	dd02      	ble.n	801fc98 <_dtoa_r+0xa10>
 801fc92:	9b02      	ldr	r3, [sp, #8]
 801fc94:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 801fc98:	9b00      	ldr	r3, [sp, #0]
 801fc9a:	f883 8000 	strb.w	r8, [r3]
 801fc9e:	e63f      	b.n	801f920 <_dtoa_r+0x698>
 801fca0:	4628      	mov	r0, r5
 801fca2:	e7bb      	b.n	801fc1c <_dtoa_r+0x994>
 801fca4:	2201      	movs	r2, #1
 801fca6:	e7e1      	b.n	801fc6c <_dtoa_r+0x9e4>
 801fca8:	9b08      	ldr	r3, [sp, #32]
 801fcaa:	2b00      	cmp	r3, #0
 801fcac:	db04      	blt.n	801fcb8 <_dtoa_r+0xa30>
 801fcae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801fcb0:	430b      	orrs	r3, r1
 801fcb2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fcb4:	430b      	orrs	r3, r1
 801fcb6:	d120      	bne.n	801fcfa <_dtoa_r+0xa72>
 801fcb8:	2a00      	cmp	r2, #0
 801fcba:	dded      	ble.n	801fc98 <_dtoa_r+0xa10>
 801fcbc:	4649      	mov	r1, r9
 801fcbe:	2201      	movs	r2, #1
 801fcc0:	4658      	mov	r0, fp
 801fcc2:	f000 fe91 	bl	80209e8 <__lshift>
 801fcc6:	4621      	mov	r1, r4
 801fcc8:	4681      	mov	r9, r0
 801fcca:	f000 fef9 	bl	8020ac0 <__mcmp>
 801fcce:	2800      	cmp	r0, #0
 801fcd0:	dc03      	bgt.n	801fcda <_dtoa_r+0xa52>
 801fcd2:	d1e1      	bne.n	801fc98 <_dtoa_r+0xa10>
 801fcd4:	f018 0f01 	tst.w	r8, #1
 801fcd8:	d0de      	beq.n	801fc98 <_dtoa_r+0xa10>
 801fcda:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801fcde:	d1d8      	bne.n	801fc92 <_dtoa_r+0xa0a>
 801fce0:	2339      	movs	r3, #57	@ 0x39
 801fce2:	9a00      	ldr	r2, [sp, #0]
 801fce4:	7013      	strb	r3, [r2, #0]
 801fce6:	4633      	mov	r3, r6
 801fce8:	461e      	mov	r6, r3
 801fcea:	3b01      	subs	r3, #1
 801fcec:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801fcf0:	2a39      	cmp	r2, #57	@ 0x39
 801fcf2:	d052      	beq.n	801fd9a <_dtoa_r+0xb12>
 801fcf4:	3201      	adds	r2, #1
 801fcf6:	701a      	strb	r2, [r3, #0]
 801fcf8:	e612      	b.n	801f920 <_dtoa_r+0x698>
 801fcfa:	2a00      	cmp	r2, #0
 801fcfc:	dd07      	ble.n	801fd0e <_dtoa_r+0xa86>
 801fcfe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801fd02:	d0ed      	beq.n	801fce0 <_dtoa_r+0xa58>
 801fd04:	f108 0301 	add.w	r3, r8, #1
 801fd08:	9a00      	ldr	r2, [sp, #0]
 801fd0a:	7013      	strb	r3, [r2, #0]
 801fd0c:	e608      	b.n	801f920 <_dtoa_r+0x698>
 801fd0e:	9b07      	ldr	r3, [sp, #28]
 801fd10:	9a07      	ldr	r2, [sp, #28]
 801fd12:	f803 8c01 	strb.w	r8, [r3, #-1]
 801fd16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801fd18:	4293      	cmp	r3, r2
 801fd1a:	d028      	beq.n	801fd6e <_dtoa_r+0xae6>
 801fd1c:	4649      	mov	r1, r9
 801fd1e:	2300      	movs	r3, #0
 801fd20:	220a      	movs	r2, #10
 801fd22:	4658      	mov	r0, fp
 801fd24:	f000 fc68 	bl	80205f8 <__multadd>
 801fd28:	42af      	cmp	r7, r5
 801fd2a:	4681      	mov	r9, r0
 801fd2c:	f04f 0300 	mov.w	r3, #0
 801fd30:	f04f 020a 	mov.w	r2, #10
 801fd34:	4639      	mov	r1, r7
 801fd36:	4658      	mov	r0, fp
 801fd38:	d107      	bne.n	801fd4a <_dtoa_r+0xac2>
 801fd3a:	f000 fc5d 	bl	80205f8 <__multadd>
 801fd3e:	4607      	mov	r7, r0
 801fd40:	4605      	mov	r5, r0
 801fd42:	9b07      	ldr	r3, [sp, #28]
 801fd44:	3301      	adds	r3, #1
 801fd46:	9307      	str	r3, [sp, #28]
 801fd48:	e774      	b.n	801fc34 <_dtoa_r+0x9ac>
 801fd4a:	f000 fc55 	bl	80205f8 <__multadd>
 801fd4e:	4629      	mov	r1, r5
 801fd50:	4607      	mov	r7, r0
 801fd52:	2300      	movs	r3, #0
 801fd54:	220a      	movs	r2, #10
 801fd56:	4658      	mov	r0, fp
 801fd58:	f000 fc4e 	bl	80205f8 <__multadd>
 801fd5c:	4605      	mov	r5, r0
 801fd5e:	e7f0      	b.n	801fd42 <_dtoa_r+0xaba>
 801fd60:	9b00      	ldr	r3, [sp, #0]
 801fd62:	2700      	movs	r7, #0
 801fd64:	2b00      	cmp	r3, #0
 801fd66:	bfcc      	ite	gt
 801fd68:	461e      	movgt	r6, r3
 801fd6a:	2601      	movle	r6, #1
 801fd6c:	4456      	add	r6, sl
 801fd6e:	4649      	mov	r1, r9
 801fd70:	2201      	movs	r2, #1
 801fd72:	4658      	mov	r0, fp
 801fd74:	f000 fe38 	bl	80209e8 <__lshift>
 801fd78:	4621      	mov	r1, r4
 801fd7a:	4681      	mov	r9, r0
 801fd7c:	f000 fea0 	bl	8020ac0 <__mcmp>
 801fd80:	2800      	cmp	r0, #0
 801fd82:	dcb0      	bgt.n	801fce6 <_dtoa_r+0xa5e>
 801fd84:	d102      	bne.n	801fd8c <_dtoa_r+0xb04>
 801fd86:	f018 0f01 	tst.w	r8, #1
 801fd8a:	d1ac      	bne.n	801fce6 <_dtoa_r+0xa5e>
 801fd8c:	4633      	mov	r3, r6
 801fd8e:	461e      	mov	r6, r3
 801fd90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801fd94:	2a30      	cmp	r2, #48	@ 0x30
 801fd96:	d0fa      	beq.n	801fd8e <_dtoa_r+0xb06>
 801fd98:	e5c2      	b.n	801f920 <_dtoa_r+0x698>
 801fd9a:	459a      	cmp	sl, r3
 801fd9c:	d1a4      	bne.n	801fce8 <_dtoa_r+0xa60>
 801fd9e:	9b04      	ldr	r3, [sp, #16]
 801fda0:	3301      	adds	r3, #1
 801fda2:	9304      	str	r3, [sp, #16]
 801fda4:	2331      	movs	r3, #49	@ 0x31
 801fda6:	f88a 3000 	strb.w	r3, [sl]
 801fdaa:	e5b9      	b.n	801f920 <_dtoa_r+0x698>
 801fdac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801fdae:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801fe0c <_dtoa_r+0xb84>
 801fdb2:	b11b      	cbz	r3, 801fdbc <_dtoa_r+0xb34>
 801fdb4:	f10a 0308 	add.w	r3, sl, #8
 801fdb8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801fdba:	6013      	str	r3, [r2, #0]
 801fdbc:	4650      	mov	r0, sl
 801fdbe:	b019      	add	sp, #100	@ 0x64
 801fdc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fdc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fdc6:	2b01      	cmp	r3, #1
 801fdc8:	f77f ae37 	ble.w	801fa3a <_dtoa_r+0x7b2>
 801fdcc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801fdce:	930a      	str	r3, [sp, #40]	@ 0x28
 801fdd0:	2001      	movs	r0, #1
 801fdd2:	e655      	b.n	801fa80 <_dtoa_r+0x7f8>
 801fdd4:	9b00      	ldr	r3, [sp, #0]
 801fdd6:	2b00      	cmp	r3, #0
 801fdd8:	f77f aed6 	ble.w	801fb88 <_dtoa_r+0x900>
 801fddc:	4656      	mov	r6, sl
 801fdde:	4621      	mov	r1, r4
 801fde0:	4648      	mov	r0, r9
 801fde2:	f7ff f9c1 	bl	801f168 <quorem>
 801fde6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801fdea:	9b00      	ldr	r3, [sp, #0]
 801fdec:	f806 8b01 	strb.w	r8, [r6], #1
 801fdf0:	eba6 020a 	sub.w	r2, r6, sl
 801fdf4:	4293      	cmp	r3, r2
 801fdf6:	ddb3      	ble.n	801fd60 <_dtoa_r+0xad8>
 801fdf8:	4649      	mov	r1, r9
 801fdfa:	2300      	movs	r3, #0
 801fdfc:	220a      	movs	r2, #10
 801fdfe:	4658      	mov	r0, fp
 801fe00:	f000 fbfa 	bl	80205f8 <__multadd>
 801fe04:	4681      	mov	r9, r0
 801fe06:	e7ea      	b.n	801fdde <_dtoa_r+0xb56>
 801fe08:	0802464a 	.word	0x0802464a
 801fe0c:	080245e5 	.word	0x080245e5

0801fe10 <_free_r>:
 801fe10:	b538      	push	{r3, r4, r5, lr}
 801fe12:	4605      	mov	r5, r0
 801fe14:	2900      	cmp	r1, #0
 801fe16:	d041      	beq.n	801fe9c <_free_r+0x8c>
 801fe18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801fe1c:	1f0c      	subs	r4, r1, #4
 801fe1e:	2b00      	cmp	r3, #0
 801fe20:	bfb8      	it	lt
 801fe22:	18e4      	addlt	r4, r4, r3
 801fe24:	f7fd f836 	bl	801ce94 <__malloc_lock>
 801fe28:	4a1d      	ldr	r2, [pc, #116]	@ (801fea0 <_free_r+0x90>)
 801fe2a:	6813      	ldr	r3, [r2, #0]
 801fe2c:	b933      	cbnz	r3, 801fe3c <_free_r+0x2c>
 801fe2e:	6063      	str	r3, [r4, #4]
 801fe30:	6014      	str	r4, [r2, #0]
 801fe32:	4628      	mov	r0, r5
 801fe34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801fe38:	f7fd b832 	b.w	801cea0 <__malloc_unlock>
 801fe3c:	42a3      	cmp	r3, r4
 801fe3e:	d908      	bls.n	801fe52 <_free_r+0x42>
 801fe40:	6820      	ldr	r0, [r4, #0]
 801fe42:	1821      	adds	r1, r4, r0
 801fe44:	428b      	cmp	r3, r1
 801fe46:	bf01      	itttt	eq
 801fe48:	6819      	ldreq	r1, [r3, #0]
 801fe4a:	685b      	ldreq	r3, [r3, #4]
 801fe4c:	1809      	addeq	r1, r1, r0
 801fe4e:	6021      	streq	r1, [r4, #0]
 801fe50:	e7ed      	b.n	801fe2e <_free_r+0x1e>
 801fe52:	461a      	mov	r2, r3
 801fe54:	685b      	ldr	r3, [r3, #4]
 801fe56:	b10b      	cbz	r3, 801fe5c <_free_r+0x4c>
 801fe58:	42a3      	cmp	r3, r4
 801fe5a:	d9fa      	bls.n	801fe52 <_free_r+0x42>
 801fe5c:	6811      	ldr	r1, [r2, #0]
 801fe5e:	1850      	adds	r0, r2, r1
 801fe60:	42a0      	cmp	r0, r4
 801fe62:	d10b      	bne.n	801fe7c <_free_r+0x6c>
 801fe64:	6820      	ldr	r0, [r4, #0]
 801fe66:	4401      	add	r1, r0
 801fe68:	1850      	adds	r0, r2, r1
 801fe6a:	6011      	str	r1, [r2, #0]
 801fe6c:	4283      	cmp	r3, r0
 801fe6e:	d1e0      	bne.n	801fe32 <_free_r+0x22>
 801fe70:	6818      	ldr	r0, [r3, #0]
 801fe72:	685b      	ldr	r3, [r3, #4]
 801fe74:	4408      	add	r0, r1
 801fe76:	6053      	str	r3, [r2, #4]
 801fe78:	6010      	str	r0, [r2, #0]
 801fe7a:	e7da      	b.n	801fe32 <_free_r+0x22>
 801fe7c:	d902      	bls.n	801fe84 <_free_r+0x74>
 801fe7e:	230c      	movs	r3, #12
 801fe80:	602b      	str	r3, [r5, #0]
 801fe82:	e7d6      	b.n	801fe32 <_free_r+0x22>
 801fe84:	6820      	ldr	r0, [r4, #0]
 801fe86:	1821      	adds	r1, r4, r0
 801fe88:	428b      	cmp	r3, r1
 801fe8a:	bf02      	ittt	eq
 801fe8c:	6819      	ldreq	r1, [r3, #0]
 801fe8e:	685b      	ldreq	r3, [r3, #4]
 801fe90:	1809      	addeq	r1, r1, r0
 801fe92:	6063      	str	r3, [r4, #4]
 801fe94:	bf08      	it	eq
 801fe96:	6021      	streq	r1, [r4, #0]
 801fe98:	6054      	str	r4, [r2, #4]
 801fe9a:	e7ca      	b.n	801fe32 <_free_r+0x22>
 801fe9c:	bd38      	pop	{r3, r4, r5, pc}
 801fe9e:	bf00      	nop
 801fea0:	2001571c 	.word	0x2001571c

0801fea4 <rshift>:
 801fea4:	6903      	ldr	r3, [r0, #16]
 801fea6:	114a      	asrs	r2, r1, #5
 801fea8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801feac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801feb0:	f100 0414 	add.w	r4, r0, #20
 801feb4:	dd45      	ble.n	801ff42 <rshift+0x9e>
 801feb6:	f011 011f 	ands.w	r1, r1, #31
 801feba:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801febe:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801fec2:	d10c      	bne.n	801fede <rshift+0x3a>
 801fec4:	f100 0710 	add.w	r7, r0, #16
 801fec8:	4629      	mov	r1, r5
 801feca:	42b1      	cmp	r1, r6
 801fecc:	d334      	bcc.n	801ff38 <rshift+0x94>
 801fece:	1a9b      	subs	r3, r3, r2
 801fed0:	1eea      	subs	r2, r5, #3
 801fed2:	009b      	lsls	r3, r3, #2
 801fed4:	4296      	cmp	r6, r2
 801fed6:	bf38      	it	cc
 801fed8:	2300      	movcc	r3, #0
 801feda:	4423      	add	r3, r4
 801fedc:	e015      	b.n	801ff0a <rshift+0x66>
 801fede:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801fee2:	f1c1 0820 	rsb	r8, r1, #32
 801fee6:	f105 0e04 	add.w	lr, r5, #4
 801feea:	46a1      	mov	r9, r4
 801feec:	40cf      	lsrs	r7, r1
 801feee:	4576      	cmp	r6, lr
 801fef0:	46f4      	mov	ip, lr
 801fef2:	d815      	bhi.n	801ff20 <rshift+0x7c>
 801fef4:	1a9a      	subs	r2, r3, r2
 801fef6:	3501      	adds	r5, #1
 801fef8:	0092      	lsls	r2, r2, #2
 801fefa:	3a04      	subs	r2, #4
 801fefc:	42ae      	cmp	r6, r5
 801fefe:	bf38      	it	cc
 801ff00:	2200      	movcc	r2, #0
 801ff02:	18a3      	adds	r3, r4, r2
 801ff04:	50a7      	str	r7, [r4, r2]
 801ff06:	b107      	cbz	r7, 801ff0a <rshift+0x66>
 801ff08:	3304      	adds	r3, #4
 801ff0a:	1b1a      	subs	r2, r3, r4
 801ff0c:	42a3      	cmp	r3, r4
 801ff0e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801ff12:	bf08      	it	eq
 801ff14:	2300      	moveq	r3, #0
 801ff16:	6102      	str	r2, [r0, #16]
 801ff18:	bf08      	it	eq
 801ff1a:	6143      	streq	r3, [r0, #20]
 801ff1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ff20:	f8dc c000 	ldr.w	ip, [ip]
 801ff24:	fa0c fc08 	lsl.w	ip, ip, r8
 801ff28:	ea4c 0707 	orr.w	r7, ip, r7
 801ff2c:	f849 7b04 	str.w	r7, [r9], #4
 801ff30:	f85e 7b04 	ldr.w	r7, [lr], #4
 801ff34:	40cf      	lsrs	r7, r1
 801ff36:	e7da      	b.n	801feee <rshift+0x4a>
 801ff38:	f851 cb04 	ldr.w	ip, [r1], #4
 801ff3c:	f847 cf04 	str.w	ip, [r7, #4]!
 801ff40:	e7c3      	b.n	801feca <rshift+0x26>
 801ff42:	4623      	mov	r3, r4
 801ff44:	e7e1      	b.n	801ff0a <rshift+0x66>

0801ff46 <__hexdig_fun>:
 801ff46:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801ff4a:	2b09      	cmp	r3, #9
 801ff4c:	d802      	bhi.n	801ff54 <__hexdig_fun+0xe>
 801ff4e:	3820      	subs	r0, #32
 801ff50:	b2c0      	uxtb	r0, r0
 801ff52:	4770      	bx	lr
 801ff54:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801ff58:	2b05      	cmp	r3, #5
 801ff5a:	d801      	bhi.n	801ff60 <__hexdig_fun+0x1a>
 801ff5c:	3847      	subs	r0, #71	@ 0x47
 801ff5e:	e7f7      	b.n	801ff50 <__hexdig_fun+0xa>
 801ff60:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801ff64:	2b05      	cmp	r3, #5
 801ff66:	d801      	bhi.n	801ff6c <__hexdig_fun+0x26>
 801ff68:	3827      	subs	r0, #39	@ 0x27
 801ff6a:	e7f1      	b.n	801ff50 <__hexdig_fun+0xa>
 801ff6c:	2000      	movs	r0, #0
 801ff6e:	4770      	bx	lr

0801ff70 <__gethex>:
 801ff70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ff74:	b085      	sub	sp, #20
 801ff76:	468a      	mov	sl, r1
 801ff78:	4690      	mov	r8, r2
 801ff7a:	9302      	str	r3, [sp, #8]
 801ff7c:	680b      	ldr	r3, [r1, #0]
 801ff7e:	9001      	str	r0, [sp, #4]
 801ff80:	1c9c      	adds	r4, r3, #2
 801ff82:	46a1      	mov	r9, r4
 801ff84:	f814 0b01 	ldrb.w	r0, [r4], #1
 801ff88:	2830      	cmp	r0, #48	@ 0x30
 801ff8a:	d0fa      	beq.n	801ff82 <__gethex+0x12>
 801ff8c:	eba9 0303 	sub.w	r3, r9, r3
 801ff90:	f1a3 0b02 	sub.w	fp, r3, #2
 801ff94:	f7ff ffd7 	bl	801ff46 <__hexdig_fun>
 801ff98:	4605      	mov	r5, r0
 801ff9a:	2800      	cmp	r0, #0
 801ff9c:	d166      	bne.n	802006c <__gethex+0xfc>
 801ff9e:	2201      	movs	r2, #1
 801ffa0:	499e      	ldr	r1, [pc, #632]	@ (802021c <__gethex+0x2ac>)
 801ffa2:	4648      	mov	r0, r9
 801ffa4:	f7fe ff73 	bl	801ee8e <strncmp>
 801ffa8:	4607      	mov	r7, r0
 801ffaa:	2800      	cmp	r0, #0
 801ffac:	d165      	bne.n	802007a <__gethex+0x10a>
 801ffae:	f899 0001 	ldrb.w	r0, [r9, #1]
 801ffb2:	4626      	mov	r6, r4
 801ffb4:	f7ff ffc7 	bl	801ff46 <__hexdig_fun>
 801ffb8:	2800      	cmp	r0, #0
 801ffba:	d060      	beq.n	802007e <__gethex+0x10e>
 801ffbc:	4623      	mov	r3, r4
 801ffbe:	7818      	ldrb	r0, [r3, #0]
 801ffc0:	4699      	mov	r9, r3
 801ffc2:	3301      	adds	r3, #1
 801ffc4:	2830      	cmp	r0, #48	@ 0x30
 801ffc6:	d0fa      	beq.n	801ffbe <__gethex+0x4e>
 801ffc8:	f7ff ffbd 	bl	801ff46 <__hexdig_fun>
 801ffcc:	fab0 f580 	clz	r5, r0
 801ffd0:	f04f 0b01 	mov.w	fp, #1
 801ffd4:	096d      	lsrs	r5, r5, #5
 801ffd6:	464a      	mov	r2, r9
 801ffd8:	4616      	mov	r6, r2
 801ffda:	3201      	adds	r2, #1
 801ffdc:	7830      	ldrb	r0, [r6, #0]
 801ffde:	f7ff ffb2 	bl	801ff46 <__hexdig_fun>
 801ffe2:	2800      	cmp	r0, #0
 801ffe4:	d1f8      	bne.n	801ffd8 <__gethex+0x68>
 801ffe6:	2201      	movs	r2, #1
 801ffe8:	498c      	ldr	r1, [pc, #560]	@ (802021c <__gethex+0x2ac>)
 801ffea:	4630      	mov	r0, r6
 801ffec:	f7fe ff4f 	bl	801ee8e <strncmp>
 801fff0:	2800      	cmp	r0, #0
 801fff2:	d13e      	bne.n	8020072 <__gethex+0x102>
 801fff4:	b944      	cbnz	r4, 8020008 <__gethex+0x98>
 801fff6:	1c74      	adds	r4, r6, #1
 801fff8:	4622      	mov	r2, r4
 801fffa:	4616      	mov	r6, r2
 801fffc:	3201      	adds	r2, #1
 801fffe:	7830      	ldrb	r0, [r6, #0]
 8020000:	f7ff ffa1 	bl	801ff46 <__hexdig_fun>
 8020004:	2800      	cmp	r0, #0
 8020006:	d1f8      	bne.n	801fffa <__gethex+0x8a>
 8020008:	1ba4      	subs	r4, r4, r6
 802000a:	00a7      	lsls	r7, r4, #2
 802000c:	7833      	ldrb	r3, [r6, #0]
 802000e:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8020012:	2b50      	cmp	r3, #80	@ 0x50
 8020014:	d13d      	bne.n	8020092 <__gethex+0x122>
 8020016:	7873      	ldrb	r3, [r6, #1]
 8020018:	2b2b      	cmp	r3, #43	@ 0x2b
 802001a:	d032      	beq.n	8020082 <__gethex+0x112>
 802001c:	2b2d      	cmp	r3, #45	@ 0x2d
 802001e:	d033      	beq.n	8020088 <__gethex+0x118>
 8020020:	1c71      	adds	r1, r6, #1
 8020022:	2400      	movs	r4, #0
 8020024:	7808      	ldrb	r0, [r1, #0]
 8020026:	f7ff ff8e 	bl	801ff46 <__hexdig_fun>
 802002a:	1e43      	subs	r3, r0, #1
 802002c:	b2db      	uxtb	r3, r3
 802002e:	2b18      	cmp	r3, #24
 8020030:	d82f      	bhi.n	8020092 <__gethex+0x122>
 8020032:	f1a0 0210 	sub.w	r2, r0, #16
 8020036:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 802003a:	f7ff ff84 	bl	801ff46 <__hexdig_fun>
 802003e:	f100 3cff 	add.w	ip, r0, #4294967295
 8020042:	230a      	movs	r3, #10
 8020044:	fa5f fc8c 	uxtb.w	ip, ip
 8020048:	f1bc 0f18 	cmp.w	ip, #24
 802004c:	d91e      	bls.n	802008c <__gethex+0x11c>
 802004e:	b104      	cbz	r4, 8020052 <__gethex+0xe2>
 8020050:	4252      	negs	r2, r2
 8020052:	4417      	add	r7, r2
 8020054:	f8ca 1000 	str.w	r1, [sl]
 8020058:	b1ed      	cbz	r5, 8020096 <__gethex+0x126>
 802005a:	f1bb 0f00 	cmp.w	fp, #0
 802005e:	bf0c      	ite	eq
 8020060:	2506      	moveq	r5, #6
 8020062:	2500      	movne	r5, #0
 8020064:	4628      	mov	r0, r5
 8020066:	b005      	add	sp, #20
 8020068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802006c:	2500      	movs	r5, #0
 802006e:	462c      	mov	r4, r5
 8020070:	e7b1      	b.n	801ffd6 <__gethex+0x66>
 8020072:	2c00      	cmp	r4, #0
 8020074:	d1c8      	bne.n	8020008 <__gethex+0x98>
 8020076:	4627      	mov	r7, r4
 8020078:	e7c8      	b.n	802000c <__gethex+0x9c>
 802007a:	464e      	mov	r6, r9
 802007c:	462f      	mov	r7, r5
 802007e:	2501      	movs	r5, #1
 8020080:	e7c4      	b.n	802000c <__gethex+0x9c>
 8020082:	2400      	movs	r4, #0
 8020084:	1cb1      	adds	r1, r6, #2
 8020086:	e7cd      	b.n	8020024 <__gethex+0xb4>
 8020088:	2401      	movs	r4, #1
 802008a:	e7fb      	b.n	8020084 <__gethex+0x114>
 802008c:	fb03 0002 	mla	r0, r3, r2, r0
 8020090:	e7cf      	b.n	8020032 <__gethex+0xc2>
 8020092:	4631      	mov	r1, r6
 8020094:	e7de      	b.n	8020054 <__gethex+0xe4>
 8020096:	eba6 0309 	sub.w	r3, r6, r9
 802009a:	4629      	mov	r1, r5
 802009c:	3b01      	subs	r3, #1
 802009e:	2b07      	cmp	r3, #7
 80200a0:	dc0a      	bgt.n	80200b8 <__gethex+0x148>
 80200a2:	9801      	ldr	r0, [sp, #4]
 80200a4:	f000 fa46 	bl	8020534 <_Balloc>
 80200a8:	4604      	mov	r4, r0
 80200aa:	b940      	cbnz	r0, 80200be <__gethex+0x14e>
 80200ac:	4b5c      	ldr	r3, [pc, #368]	@ (8020220 <__gethex+0x2b0>)
 80200ae:	4602      	mov	r2, r0
 80200b0:	21e4      	movs	r1, #228	@ 0xe4
 80200b2:	485c      	ldr	r0, [pc, #368]	@ (8020224 <__gethex+0x2b4>)
 80200b4:	f7ff f83a 	bl	801f12c <__assert_func>
 80200b8:	3101      	adds	r1, #1
 80200ba:	105b      	asrs	r3, r3, #1
 80200bc:	e7ef      	b.n	802009e <__gethex+0x12e>
 80200be:	f100 0a14 	add.w	sl, r0, #20
 80200c2:	2300      	movs	r3, #0
 80200c4:	4655      	mov	r5, sl
 80200c6:	469b      	mov	fp, r3
 80200c8:	45b1      	cmp	r9, r6
 80200ca:	d337      	bcc.n	802013c <__gethex+0x1cc>
 80200cc:	f845 bb04 	str.w	fp, [r5], #4
 80200d0:	eba5 050a 	sub.w	r5, r5, sl
 80200d4:	4658      	mov	r0, fp
 80200d6:	10ad      	asrs	r5, r5, #2
 80200d8:	6125      	str	r5, [r4, #16]
 80200da:	016d      	lsls	r5, r5, #5
 80200dc:	f000 fb1e 	bl	802071c <__hi0bits>
 80200e0:	f8d8 6000 	ldr.w	r6, [r8]
 80200e4:	1a2d      	subs	r5, r5, r0
 80200e6:	42b5      	cmp	r5, r6
 80200e8:	dd54      	ble.n	8020194 <__gethex+0x224>
 80200ea:	1bad      	subs	r5, r5, r6
 80200ec:	4620      	mov	r0, r4
 80200ee:	4629      	mov	r1, r5
 80200f0:	f000 febb 	bl	8020e6a <__any_on>
 80200f4:	4681      	mov	r9, r0
 80200f6:	b178      	cbz	r0, 8020118 <__gethex+0x1a8>
 80200f8:	1e6b      	subs	r3, r5, #1
 80200fa:	f04f 0901 	mov.w	r9, #1
 80200fe:	1159      	asrs	r1, r3, #5
 8020100:	f003 021f 	and.w	r2, r3, #31
 8020104:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8020108:	fa09 f202 	lsl.w	r2, r9, r2
 802010c:	420a      	tst	r2, r1
 802010e:	d003      	beq.n	8020118 <__gethex+0x1a8>
 8020110:	454b      	cmp	r3, r9
 8020112:	dc36      	bgt.n	8020182 <__gethex+0x212>
 8020114:	f04f 0902 	mov.w	r9, #2
 8020118:	442f      	add	r7, r5
 802011a:	4629      	mov	r1, r5
 802011c:	4620      	mov	r0, r4
 802011e:	f7ff fec1 	bl	801fea4 <rshift>
 8020122:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8020126:	42bb      	cmp	r3, r7
 8020128:	da42      	bge.n	80201b0 <__gethex+0x240>
 802012a:	4621      	mov	r1, r4
 802012c:	9801      	ldr	r0, [sp, #4]
 802012e:	f000 fa41 	bl	80205b4 <_Bfree>
 8020132:	2300      	movs	r3, #0
 8020134:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020136:	25a3      	movs	r5, #163	@ 0xa3
 8020138:	6013      	str	r3, [r2, #0]
 802013a:	e793      	b.n	8020064 <__gethex+0xf4>
 802013c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8020140:	2a2e      	cmp	r2, #46	@ 0x2e
 8020142:	d012      	beq.n	802016a <__gethex+0x1fa>
 8020144:	2b20      	cmp	r3, #32
 8020146:	d104      	bne.n	8020152 <__gethex+0x1e2>
 8020148:	f845 bb04 	str.w	fp, [r5], #4
 802014c:	f04f 0b00 	mov.w	fp, #0
 8020150:	465b      	mov	r3, fp
 8020152:	7830      	ldrb	r0, [r6, #0]
 8020154:	9303      	str	r3, [sp, #12]
 8020156:	f7ff fef6 	bl	801ff46 <__hexdig_fun>
 802015a:	9b03      	ldr	r3, [sp, #12]
 802015c:	f000 000f 	and.w	r0, r0, #15
 8020160:	4098      	lsls	r0, r3
 8020162:	3304      	adds	r3, #4
 8020164:	ea4b 0b00 	orr.w	fp, fp, r0
 8020168:	e7ae      	b.n	80200c8 <__gethex+0x158>
 802016a:	45b1      	cmp	r9, r6
 802016c:	d8ea      	bhi.n	8020144 <__gethex+0x1d4>
 802016e:	2201      	movs	r2, #1
 8020170:	492a      	ldr	r1, [pc, #168]	@ (802021c <__gethex+0x2ac>)
 8020172:	4630      	mov	r0, r6
 8020174:	9303      	str	r3, [sp, #12]
 8020176:	f7fe fe8a 	bl	801ee8e <strncmp>
 802017a:	9b03      	ldr	r3, [sp, #12]
 802017c:	2800      	cmp	r0, #0
 802017e:	d1e1      	bne.n	8020144 <__gethex+0x1d4>
 8020180:	e7a2      	b.n	80200c8 <__gethex+0x158>
 8020182:	1ea9      	subs	r1, r5, #2
 8020184:	4620      	mov	r0, r4
 8020186:	f000 fe70 	bl	8020e6a <__any_on>
 802018a:	2800      	cmp	r0, #0
 802018c:	d0c2      	beq.n	8020114 <__gethex+0x1a4>
 802018e:	f04f 0903 	mov.w	r9, #3
 8020192:	e7c1      	b.n	8020118 <__gethex+0x1a8>
 8020194:	da09      	bge.n	80201aa <__gethex+0x23a>
 8020196:	1b75      	subs	r5, r6, r5
 8020198:	4621      	mov	r1, r4
 802019a:	9801      	ldr	r0, [sp, #4]
 802019c:	462a      	mov	r2, r5
 802019e:	1b7f      	subs	r7, r7, r5
 80201a0:	f000 fc22 	bl	80209e8 <__lshift>
 80201a4:	4604      	mov	r4, r0
 80201a6:	f100 0a14 	add.w	sl, r0, #20
 80201aa:	f04f 0900 	mov.w	r9, #0
 80201ae:	e7b8      	b.n	8020122 <__gethex+0x1b2>
 80201b0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80201b4:	42bd      	cmp	r5, r7
 80201b6:	dd6f      	ble.n	8020298 <__gethex+0x328>
 80201b8:	1bed      	subs	r5, r5, r7
 80201ba:	42ae      	cmp	r6, r5
 80201bc:	dc34      	bgt.n	8020228 <__gethex+0x2b8>
 80201be:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80201c2:	2b02      	cmp	r3, #2
 80201c4:	d022      	beq.n	802020c <__gethex+0x29c>
 80201c6:	2b03      	cmp	r3, #3
 80201c8:	d024      	beq.n	8020214 <__gethex+0x2a4>
 80201ca:	2b01      	cmp	r3, #1
 80201cc:	d115      	bne.n	80201fa <__gethex+0x28a>
 80201ce:	42ae      	cmp	r6, r5
 80201d0:	d113      	bne.n	80201fa <__gethex+0x28a>
 80201d2:	2e01      	cmp	r6, #1
 80201d4:	d10b      	bne.n	80201ee <__gethex+0x27e>
 80201d6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80201da:	2562      	movs	r5, #98	@ 0x62
 80201dc:	9a02      	ldr	r2, [sp, #8]
 80201de:	6013      	str	r3, [r2, #0]
 80201e0:	2301      	movs	r3, #1
 80201e2:	6123      	str	r3, [r4, #16]
 80201e4:	f8ca 3000 	str.w	r3, [sl]
 80201e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80201ea:	601c      	str	r4, [r3, #0]
 80201ec:	e73a      	b.n	8020064 <__gethex+0xf4>
 80201ee:	1e71      	subs	r1, r6, #1
 80201f0:	4620      	mov	r0, r4
 80201f2:	f000 fe3a 	bl	8020e6a <__any_on>
 80201f6:	2800      	cmp	r0, #0
 80201f8:	d1ed      	bne.n	80201d6 <__gethex+0x266>
 80201fa:	4621      	mov	r1, r4
 80201fc:	9801      	ldr	r0, [sp, #4]
 80201fe:	f000 f9d9 	bl	80205b4 <_Bfree>
 8020202:	2300      	movs	r3, #0
 8020204:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020206:	2550      	movs	r5, #80	@ 0x50
 8020208:	6013      	str	r3, [r2, #0]
 802020a:	e72b      	b.n	8020064 <__gethex+0xf4>
 802020c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802020e:	2b00      	cmp	r3, #0
 8020210:	d1f3      	bne.n	80201fa <__gethex+0x28a>
 8020212:	e7e0      	b.n	80201d6 <__gethex+0x266>
 8020214:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020216:	2b00      	cmp	r3, #0
 8020218:	d1dd      	bne.n	80201d6 <__gethex+0x266>
 802021a:	e7ee      	b.n	80201fa <__gethex+0x28a>
 802021c:	080243a4 	.word	0x080243a4
 8020220:	0802464a 	.word	0x0802464a
 8020224:	0802465b 	.word	0x0802465b
 8020228:	1e6f      	subs	r7, r5, #1
 802022a:	f1b9 0f00 	cmp.w	r9, #0
 802022e:	d130      	bne.n	8020292 <__gethex+0x322>
 8020230:	b127      	cbz	r7, 802023c <__gethex+0x2cc>
 8020232:	4639      	mov	r1, r7
 8020234:	4620      	mov	r0, r4
 8020236:	f000 fe18 	bl	8020e6a <__any_on>
 802023a:	4681      	mov	r9, r0
 802023c:	117a      	asrs	r2, r7, #5
 802023e:	2301      	movs	r3, #1
 8020240:	f007 071f 	and.w	r7, r7, #31
 8020244:	4629      	mov	r1, r5
 8020246:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 802024a:	4620      	mov	r0, r4
 802024c:	40bb      	lsls	r3, r7
 802024e:	1b76      	subs	r6, r6, r5
 8020250:	2502      	movs	r5, #2
 8020252:	4213      	tst	r3, r2
 8020254:	bf18      	it	ne
 8020256:	f049 0902 	orrne.w	r9, r9, #2
 802025a:	f7ff fe23 	bl	801fea4 <rshift>
 802025e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8020262:	f1b9 0f00 	cmp.w	r9, #0
 8020266:	d047      	beq.n	80202f8 <__gethex+0x388>
 8020268:	f8d8 300c 	ldr.w	r3, [r8, #12]
 802026c:	2b02      	cmp	r3, #2
 802026e:	d015      	beq.n	802029c <__gethex+0x32c>
 8020270:	2b03      	cmp	r3, #3
 8020272:	d017      	beq.n	80202a4 <__gethex+0x334>
 8020274:	2b01      	cmp	r3, #1
 8020276:	d109      	bne.n	802028c <__gethex+0x31c>
 8020278:	f019 0f02 	tst.w	r9, #2
 802027c:	d006      	beq.n	802028c <__gethex+0x31c>
 802027e:	f8da 3000 	ldr.w	r3, [sl]
 8020282:	ea49 0903 	orr.w	r9, r9, r3
 8020286:	f019 0f01 	tst.w	r9, #1
 802028a:	d10e      	bne.n	80202aa <__gethex+0x33a>
 802028c:	f045 0510 	orr.w	r5, r5, #16
 8020290:	e032      	b.n	80202f8 <__gethex+0x388>
 8020292:	f04f 0901 	mov.w	r9, #1
 8020296:	e7d1      	b.n	802023c <__gethex+0x2cc>
 8020298:	2501      	movs	r5, #1
 802029a:	e7e2      	b.n	8020262 <__gethex+0x2f2>
 802029c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802029e:	f1c3 0301 	rsb	r3, r3, #1
 80202a2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80202a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80202a6:	2b00      	cmp	r3, #0
 80202a8:	d0f0      	beq.n	802028c <__gethex+0x31c>
 80202aa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80202ae:	f104 0314 	add.w	r3, r4, #20
 80202b2:	f04f 0c00 	mov.w	ip, #0
 80202b6:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80202ba:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80202be:	4618      	mov	r0, r3
 80202c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80202c4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80202c8:	d01b      	beq.n	8020302 <__gethex+0x392>
 80202ca:	3201      	adds	r2, #1
 80202cc:	6002      	str	r2, [r0, #0]
 80202ce:	2d02      	cmp	r5, #2
 80202d0:	f104 0314 	add.w	r3, r4, #20
 80202d4:	d13c      	bne.n	8020350 <__gethex+0x3e0>
 80202d6:	f8d8 2000 	ldr.w	r2, [r8]
 80202da:	3a01      	subs	r2, #1
 80202dc:	42b2      	cmp	r2, r6
 80202de:	d109      	bne.n	80202f4 <__gethex+0x384>
 80202e0:	1171      	asrs	r1, r6, #5
 80202e2:	2201      	movs	r2, #1
 80202e4:	f006 061f 	and.w	r6, r6, #31
 80202e8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80202ec:	fa02 f606 	lsl.w	r6, r2, r6
 80202f0:	421e      	tst	r6, r3
 80202f2:	d13a      	bne.n	802036a <__gethex+0x3fa>
 80202f4:	f045 0520 	orr.w	r5, r5, #32
 80202f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80202fa:	601c      	str	r4, [r3, #0]
 80202fc:	9b02      	ldr	r3, [sp, #8]
 80202fe:	601f      	str	r7, [r3, #0]
 8020300:	e6b0      	b.n	8020064 <__gethex+0xf4>
 8020302:	4299      	cmp	r1, r3
 8020304:	f843 cc04 	str.w	ip, [r3, #-4]
 8020308:	d8d9      	bhi.n	80202be <__gethex+0x34e>
 802030a:	68a3      	ldr	r3, [r4, #8]
 802030c:	459b      	cmp	fp, r3
 802030e:	db17      	blt.n	8020340 <__gethex+0x3d0>
 8020310:	6861      	ldr	r1, [r4, #4]
 8020312:	9801      	ldr	r0, [sp, #4]
 8020314:	3101      	adds	r1, #1
 8020316:	f000 f90d 	bl	8020534 <_Balloc>
 802031a:	4681      	mov	r9, r0
 802031c:	b918      	cbnz	r0, 8020326 <__gethex+0x3b6>
 802031e:	4b1a      	ldr	r3, [pc, #104]	@ (8020388 <__gethex+0x418>)
 8020320:	4602      	mov	r2, r0
 8020322:	2184      	movs	r1, #132	@ 0x84
 8020324:	e6c5      	b.n	80200b2 <__gethex+0x142>
 8020326:	6922      	ldr	r2, [r4, #16]
 8020328:	f104 010c 	add.w	r1, r4, #12
 802032c:	300c      	adds	r0, #12
 802032e:	3202      	adds	r2, #2
 8020330:	0092      	lsls	r2, r2, #2
 8020332:	f7fe fee0 	bl	801f0f6 <memcpy>
 8020336:	4621      	mov	r1, r4
 8020338:	464c      	mov	r4, r9
 802033a:	9801      	ldr	r0, [sp, #4]
 802033c:	f000 f93a 	bl	80205b4 <_Bfree>
 8020340:	6923      	ldr	r3, [r4, #16]
 8020342:	1c5a      	adds	r2, r3, #1
 8020344:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8020348:	6122      	str	r2, [r4, #16]
 802034a:	2201      	movs	r2, #1
 802034c:	615a      	str	r2, [r3, #20]
 802034e:	e7be      	b.n	80202ce <__gethex+0x35e>
 8020350:	6922      	ldr	r2, [r4, #16]
 8020352:	455a      	cmp	r2, fp
 8020354:	dd0b      	ble.n	802036e <__gethex+0x3fe>
 8020356:	2101      	movs	r1, #1
 8020358:	4620      	mov	r0, r4
 802035a:	f7ff fda3 	bl	801fea4 <rshift>
 802035e:	3701      	adds	r7, #1
 8020360:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8020364:	42bb      	cmp	r3, r7
 8020366:	f6ff aee0 	blt.w	802012a <__gethex+0x1ba>
 802036a:	2501      	movs	r5, #1
 802036c:	e7c2      	b.n	80202f4 <__gethex+0x384>
 802036e:	f016 061f 	ands.w	r6, r6, #31
 8020372:	d0fa      	beq.n	802036a <__gethex+0x3fa>
 8020374:	4453      	add	r3, sl
 8020376:	f1c6 0620 	rsb	r6, r6, #32
 802037a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 802037e:	f000 f9cd 	bl	802071c <__hi0bits>
 8020382:	42b0      	cmp	r0, r6
 8020384:	dbe7      	blt.n	8020356 <__gethex+0x3e6>
 8020386:	e7f0      	b.n	802036a <__gethex+0x3fa>
 8020388:	0802464a 	.word	0x0802464a

0802038c <L_shift>:
 802038c:	f1c2 0208 	rsb	r2, r2, #8
 8020390:	0092      	lsls	r2, r2, #2
 8020392:	b570      	push	{r4, r5, r6, lr}
 8020394:	f1c2 0620 	rsb	r6, r2, #32
 8020398:	6843      	ldr	r3, [r0, #4]
 802039a:	6804      	ldr	r4, [r0, #0]
 802039c:	fa03 f506 	lsl.w	r5, r3, r6
 80203a0:	40d3      	lsrs	r3, r2
 80203a2:	432c      	orrs	r4, r5
 80203a4:	6004      	str	r4, [r0, #0]
 80203a6:	f840 3f04 	str.w	r3, [r0, #4]!
 80203aa:	4288      	cmp	r0, r1
 80203ac:	d3f4      	bcc.n	8020398 <L_shift+0xc>
 80203ae:	bd70      	pop	{r4, r5, r6, pc}

080203b0 <__match>:
 80203b0:	6803      	ldr	r3, [r0, #0]
 80203b2:	3301      	adds	r3, #1
 80203b4:	b530      	push	{r4, r5, lr}
 80203b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80203ba:	b914      	cbnz	r4, 80203c2 <__match+0x12>
 80203bc:	6003      	str	r3, [r0, #0]
 80203be:	2001      	movs	r0, #1
 80203c0:	bd30      	pop	{r4, r5, pc}
 80203c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80203c6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80203ca:	2d19      	cmp	r5, #25
 80203cc:	bf98      	it	ls
 80203ce:	3220      	addls	r2, #32
 80203d0:	42a2      	cmp	r2, r4
 80203d2:	d0f0      	beq.n	80203b6 <__match+0x6>
 80203d4:	2000      	movs	r0, #0
 80203d6:	e7f3      	b.n	80203c0 <__match+0x10>

080203d8 <__hexnan>:
 80203d8:	680b      	ldr	r3, [r1, #0]
 80203da:	6801      	ldr	r1, [r0, #0]
 80203dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80203e0:	115e      	asrs	r6, r3, #5
 80203e2:	f013 031f 	ands.w	r3, r3, #31
 80203e6:	f04f 0500 	mov.w	r5, #0
 80203ea:	b087      	sub	sp, #28
 80203ec:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80203f0:	4682      	mov	sl, r0
 80203f2:	4690      	mov	r8, r2
 80203f4:	46ab      	mov	fp, r5
 80203f6:	bf18      	it	ne
 80203f8:	3604      	addne	r6, #4
 80203fa:	9301      	str	r3, [sp, #4]
 80203fc:	9502      	str	r5, [sp, #8]
 80203fe:	1f37      	subs	r7, r6, #4
 8020400:	f846 5c04 	str.w	r5, [r6, #-4]
 8020404:	46b9      	mov	r9, r7
 8020406:	463c      	mov	r4, r7
 8020408:	1c4b      	adds	r3, r1, #1
 802040a:	784a      	ldrb	r2, [r1, #1]
 802040c:	9303      	str	r3, [sp, #12]
 802040e:	b342      	cbz	r2, 8020462 <__hexnan+0x8a>
 8020410:	4610      	mov	r0, r2
 8020412:	9105      	str	r1, [sp, #20]
 8020414:	9204      	str	r2, [sp, #16]
 8020416:	f7ff fd96 	bl	801ff46 <__hexdig_fun>
 802041a:	2800      	cmp	r0, #0
 802041c:	d151      	bne.n	80204c2 <__hexnan+0xea>
 802041e:	9a04      	ldr	r2, [sp, #16]
 8020420:	9905      	ldr	r1, [sp, #20]
 8020422:	2a20      	cmp	r2, #32
 8020424:	d818      	bhi.n	8020458 <__hexnan+0x80>
 8020426:	9b02      	ldr	r3, [sp, #8]
 8020428:	459b      	cmp	fp, r3
 802042a:	dd13      	ble.n	8020454 <__hexnan+0x7c>
 802042c:	454c      	cmp	r4, r9
 802042e:	d206      	bcs.n	802043e <__hexnan+0x66>
 8020430:	2d07      	cmp	r5, #7
 8020432:	dc04      	bgt.n	802043e <__hexnan+0x66>
 8020434:	462a      	mov	r2, r5
 8020436:	4649      	mov	r1, r9
 8020438:	4620      	mov	r0, r4
 802043a:	f7ff ffa7 	bl	802038c <L_shift>
 802043e:	4544      	cmp	r4, r8
 8020440:	d951      	bls.n	80204e6 <__hexnan+0x10e>
 8020442:	2300      	movs	r3, #0
 8020444:	f1a4 0904 	sub.w	r9, r4, #4
 8020448:	f8cd b008 	str.w	fp, [sp, #8]
 802044c:	f844 3c04 	str.w	r3, [r4, #-4]
 8020450:	461d      	mov	r5, r3
 8020452:	464c      	mov	r4, r9
 8020454:	9903      	ldr	r1, [sp, #12]
 8020456:	e7d7      	b.n	8020408 <__hexnan+0x30>
 8020458:	2a29      	cmp	r2, #41	@ 0x29
 802045a:	d156      	bne.n	802050a <__hexnan+0x132>
 802045c:	3102      	adds	r1, #2
 802045e:	f8ca 1000 	str.w	r1, [sl]
 8020462:	f1bb 0f00 	cmp.w	fp, #0
 8020466:	d050      	beq.n	802050a <__hexnan+0x132>
 8020468:	454c      	cmp	r4, r9
 802046a:	d206      	bcs.n	802047a <__hexnan+0xa2>
 802046c:	2d07      	cmp	r5, #7
 802046e:	dc04      	bgt.n	802047a <__hexnan+0xa2>
 8020470:	462a      	mov	r2, r5
 8020472:	4649      	mov	r1, r9
 8020474:	4620      	mov	r0, r4
 8020476:	f7ff ff89 	bl	802038c <L_shift>
 802047a:	4544      	cmp	r4, r8
 802047c:	d935      	bls.n	80204ea <__hexnan+0x112>
 802047e:	f1a8 0204 	sub.w	r2, r8, #4
 8020482:	4623      	mov	r3, r4
 8020484:	f853 1b04 	ldr.w	r1, [r3], #4
 8020488:	429f      	cmp	r7, r3
 802048a:	f842 1f04 	str.w	r1, [r2, #4]!
 802048e:	d2f9      	bcs.n	8020484 <__hexnan+0xac>
 8020490:	1b3b      	subs	r3, r7, r4
 8020492:	3e03      	subs	r6, #3
 8020494:	3401      	adds	r4, #1
 8020496:	2200      	movs	r2, #0
 8020498:	f023 0303 	bic.w	r3, r3, #3
 802049c:	3304      	adds	r3, #4
 802049e:	42b4      	cmp	r4, r6
 80204a0:	bf88      	it	hi
 80204a2:	2304      	movhi	r3, #4
 80204a4:	4443      	add	r3, r8
 80204a6:	f843 2b04 	str.w	r2, [r3], #4
 80204aa:	429f      	cmp	r7, r3
 80204ac:	d2fb      	bcs.n	80204a6 <__hexnan+0xce>
 80204ae:	683b      	ldr	r3, [r7, #0]
 80204b0:	b91b      	cbnz	r3, 80204ba <__hexnan+0xe2>
 80204b2:	4547      	cmp	r7, r8
 80204b4:	d127      	bne.n	8020506 <__hexnan+0x12e>
 80204b6:	2301      	movs	r3, #1
 80204b8:	603b      	str	r3, [r7, #0]
 80204ba:	2005      	movs	r0, #5
 80204bc:	b007      	add	sp, #28
 80204be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80204c2:	3501      	adds	r5, #1
 80204c4:	f10b 0b01 	add.w	fp, fp, #1
 80204c8:	2d08      	cmp	r5, #8
 80204ca:	dd05      	ble.n	80204d8 <__hexnan+0x100>
 80204cc:	4544      	cmp	r4, r8
 80204ce:	d9c1      	bls.n	8020454 <__hexnan+0x7c>
 80204d0:	2300      	movs	r3, #0
 80204d2:	3c04      	subs	r4, #4
 80204d4:	2501      	movs	r5, #1
 80204d6:	6023      	str	r3, [r4, #0]
 80204d8:	6822      	ldr	r2, [r4, #0]
 80204da:	f000 000f 	and.w	r0, r0, #15
 80204de:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80204e2:	6020      	str	r0, [r4, #0]
 80204e4:	e7b6      	b.n	8020454 <__hexnan+0x7c>
 80204e6:	2508      	movs	r5, #8
 80204e8:	e7b4      	b.n	8020454 <__hexnan+0x7c>
 80204ea:	9b01      	ldr	r3, [sp, #4]
 80204ec:	2b00      	cmp	r3, #0
 80204ee:	d0de      	beq.n	80204ae <__hexnan+0xd6>
 80204f0:	f1c3 0320 	rsb	r3, r3, #32
 80204f4:	f04f 32ff 	mov.w	r2, #4294967295
 80204f8:	40da      	lsrs	r2, r3
 80204fa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80204fe:	4013      	ands	r3, r2
 8020500:	f846 3c04 	str.w	r3, [r6, #-4]
 8020504:	e7d3      	b.n	80204ae <__hexnan+0xd6>
 8020506:	3f04      	subs	r7, #4
 8020508:	e7d1      	b.n	80204ae <__hexnan+0xd6>
 802050a:	2004      	movs	r0, #4
 802050c:	e7d6      	b.n	80204bc <__hexnan+0xe4>

0802050e <__ascii_mbtowc>:
 802050e:	b082      	sub	sp, #8
 8020510:	b901      	cbnz	r1, 8020514 <__ascii_mbtowc+0x6>
 8020512:	a901      	add	r1, sp, #4
 8020514:	b142      	cbz	r2, 8020528 <__ascii_mbtowc+0x1a>
 8020516:	b14b      	cbz	r3, 802052c <__ascii_mbtowc+0x1e>
 8020518:	7813      	ldrb	r3, [r2, #0]
 802051a:	600b      	str	r3, [r1, #0]
 802051c:	7812      	ldrb	r2, [r2, #0]
 802051e:	1e10      	subs	r0, r2, #0
 8020520:	bf18      	it	ne
 8020522:	2001      	movne	r0, #1
 8020524:	b002      	add	sp, #8
 8020526:	4770      	bx	lr
 8020528:	4610      	mov	r0, r2
 802052a:	e7fb      	b.n	8020524 <__ascii_mbtowc+0x16>
 802052c:	f06f 0001 	mvn.w	r0, #1
 8020530:	e7f8      	b.n	8020524 <__ascii_mbtowc+0x16>
	...

08020534 <_Balloc>:
 8020534:	b570      	push	{r4, r5, r6, lr}
 8020536:	69c6      	ldr	r6, [r0, #28]
 8020538:	4604      	mov	r4, r0
 802053a:	460d      	mov	r5, r1
 802053c:	b976      	cbnz	r6, 802055c <_Balloc+0x28>
 802053e:	2010      	movs	r0, #16
 8020540:	f7fc fbf6 	bl	801cd30 <malloc>
 8020544:	4602      	mov	r2, r0
 8020546:	61e0      	str	r0, [r4, #28]
 8020548:	b920      	cbnz	r0, 8020554 <_Balloc+0x20>
 802054a:	4b18      	ldr	r3, [pc, #96]	@ (80205ac <_Balloc+0x78>)
 802054c:	216b      	movs	r1, #107	@ 0x6b
 802054e:	4818      	ldr	r0, [pc, #96]	@ (80205b0 <_Balloc+0x7c>)
 8020550:	f7fe fdec 	bl	801f12c <__assert_func>
 8020554:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8020558:	6006      	str	r6, [r0, #0]
 802055a:	60c6      	str	r6, [r0, #12]
 802055c:	69e6      	ldr	r6, [r4, #28]
 802055e:	68f3      	ldr	r3, [r6, #12]
 8020560:	b183      	cbz	r3, 8020584 <_Balloc+0x50>
 8020562:	69e3      	ldr	r3, [r4, #28]
 8020564:	68db      	ldr	r3, [r3, #12]
 8020566:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 802056a:	b9b8      	cbnz	r0, 802059c <_Balloc+0x68>
 802056c:	2101      	movs	r1, #1
 802056e:	4620      	mov	r0, r4
 8020570:	fa01 f605 	lsl.w	r6, r1, r5
 8020574:	1d72      	adds	r2, r6, #5
 8020576:	0092      	lsls	r2, r2, #2
 8020578:	f001 fc29 	bl	8021dce <_calloc_r>
 802057c:	b160      	cbz	r0, 8020598 <_Balloc+0x64>
 802057e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8020582:	e00e      	b.n	80205a2 <_Balloc+0x6e>
 8020584:	2221      	movs	r2, #33	@ 0x21
 8020586:	2104      	movs	r1, #4
 8020588:	4620      	mov	r0, r4
 802058a:	f001 fc20 	bl	8021dce <_calloc_r>
 802058e:	69e3      	ldr	r3, [r4, #28]
 8020590:	60f0      	str	r0, [r6, #12]
 8020592:	68db      	ldr	r3, [r3, #12]
 8020594:	2b00      	cmp	r3, #0
 8020596:	d1e4      	bne.n	8020562 <_Balloc+0x2e>
 8020598:	2000      	movs	r0, #0
 802059a:	bd70      	pop	{r4, r5, r6, pc}
 802059c:	6802      	ldr	r2, [r0, #0]
 802059e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80205a2:	2300      	movs	r3, #0
 80205a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80205a8:	e7f7      	b.n	802059a <_Balloc+0x66>
 80205aa:	bf00      	nop
 80205ac:	08024530 	.word	0x08024530
 80205b0:	080246bb 	.word	0x080246bb

080205b4 <_Bfree>:
 80205b4:	b570      	push	{r4, r5, r6, lr}
 80205b6:	69c6      	ldr	r6, [r0, #28]
 80205b8:	4605      	mov	r5, r0
 80205ba:	460c      	mov	r4, r1
 80205bc:	b976      	cbnz	r6, 80205dc <_Bfree+0x28>
 80205be:	2010      	movs	r0, #16
 80205c0:	f7fc fbb6 	bl	801cd30 <malloc>
 80205c4:	4602      	mov	r2, r0
 80205c6:	61e8      	str	r0, [r5, #28]
 80205c8:	b920      	cbnz	r0, 80205d4 <_Bfree+0x20>
 80205ca:	4b09      	ldr	r3, [pc, #36]	@ (80205f0 <_Bfree+0x3c>)
 80205cc:	218f      	movs	r1, #143	@ 0x8f
 80205ce:	4809      	ldr	r0, [pc, #36]	@ (80205f4 <_Bfree+0x40>)
 80205d0:	f7fe fdac 	bl	801f12c <__assert_func>
 80205d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80205d8:	6006      	str	r6, [r0, #0]
 80205da:	60c6      	str	r6, [r0, #12]
 80205dc:	b13c      	cbz	r4, 80205ee <_Bfree+0x3a>
 80205de:	69eb      	ldr	r3, [r5, #28]
 80205e0:	6862      	ldr	r2, [r4, #4]
 80205e2:	68db      	ldr	r3, [r3, #12]
 80205e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80205e8:	6021      	str	r1, [r4, #0]
 80205ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80205ee:	bd70      	pop	{r4, r5, r6, pc}
 80205f0:	08024530 	.word	0x08024530
 80205f4:	080246bb 	.word	0x080246bb

080205f8 <__multadd>:
 80205f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80205fc:	f101 0c14 	add.w	ip, r1, #20
 8020600:	4607      	mov	r7, r0
 8020602:	460c      	mov	r4, r1
 8020604:	461e      	mov	r6, r3
 8020606:	690d      	ldr	r5, [r1, #16]
 8020608:	2000      	movs	r0, #0
 802060a:	f8dc 3000 	ldr.w	r3, [ip]
 802060e:	3001      	adds	r0, #1
 8020610:	b299      	uxth	r1, r3
 8020612:	4285      	cmp	r5, r0
 8020614:	fb02 6101 	mla	r1, r2, r1, r6
 8020618:	ea4f 4613 	mov.w	r6, r3, lsr #16
 802061c:	ea4f 4311 	mov.w	r3, r1, lsr #16
 8020620:	b289      	uxth	r1, r1
 8020622:	fb02 3306 	mla	r3, r2, r6, r3
 8020626:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 802062a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 802062e:	f84c 1b04 	str.w	r1, [ip], #4
 8020632:	dcea      	bgt.n	802060a <__multadd+0x12>
 8020634:	b30e      	cbz	r6, 802067a <__multadd+0x82>
 8020636:	68a3      	ldr	r3, [r4, #8]
 8020638:	42ab      	cmp	r3, r5
 802063a:	dc19      	bgt.n	8020670 <__multadd+0x78>
 802063c:	6861      	ldr	r1, [r4, #4]
 802063e:	4638      	mov	r0, r7
 8020640:	3101      	adds	r1, #1
 8020642:	f7ff ff77 	bl	8020534 <_Balloc>
 8020646:	4680      	mov	r8, r0
 8020648:	b928      	cbnz	r0, 8020656 <__multadd+0x5e>
 802064a:	4602      	mov	r2, r0
 802064c:	4b0c      	ldr	r3, [pc, #48]	@ (8020680 <__multadd+0x88>)
 802064e:	21ba      	movs	r1, #186	@ 0xba
 8020650:	480c      	ldr	r0, [pc, #48]	@ (8020684 <__multadd+0x8c>)
 8020652:	f7fe fd6b 	bl	801f12c <__assert_func>
 8020656:	6922      	ldr	r2, [r4, #16]
 8020658:	f104 010c 	add.w	r1, r4, #12
 802065c:	300c      	adds	r0, #12
 802065e:	3202      	adds	r2, #2
 8020660:	0092      	lsls	r2, r2, #2
 8020662:	f7fe fd48 	bl	801f0f6 <memcpy>
 8020666:	4621      	mov	r1, r4
 8020668:	4644      	mov	r4, r8
 802066a:	4638      	mov	r0, r7
 802066c:	f7ff ffa2 	bl	80205b4 <_Bfree>
 8020670:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8020674:	3501      	adds	r5, #1
 8020676:	615e      	str	r6, [r3, #20]
 8020678:	6125      	str	r5, [r4, #16]
 802067a:	4620      	mov	r0, r4
 802067c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020680:	0802464a 	.word	0x0802464a
 8020684:	080246bb 	.word	0x080246bb

08020688 <__s2b>:
 8020688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802068c:	4615      	mov	r5, r2
 802068e:	461f      	mov	r7, r3
 8020690:	2209      	movs	r2, #9
 8020692:	3308      	adds	r3, #8
 8020694:	460c      	mov	r4, r1
 8020696:	4606      	mov	r6, r0
 8020698:	2100      	movs	r1, #0
 802069a:	fb93 f3f2 	sdiv	r3, r3, r2
 802069e:	2201      	movs	r2, #1
 80206a0:	429a      	cmp	r2, r3
 80206a2:	db09      	blt.n	80206b8 <__s2b+0x30>
 80206a4:	4630      	mov	r0, r6
 80206a6:	f7ff ff45 	bl	8020534 <_Balloc>
 80206aa:	b940      	cbnz	r0, 80206be <__s2b+0x36>
 80206ac:	4602      	mov	r2, r0
 80206ae:	4b19      	ldr	r3, [pc, #100]	@ (8020714 <__s2b+0x8c>)
 80206b0:	21d3      	movs	r1, #211	@ 0xd3
 80206b2:	4819      	ldr	r0, [pc, #100]	@ (8020718 <__s2b+0x90>)
 80206b4:	f7fe fd3a 	bl	801f12c <__assert_func>
 80206b8:	0052      	lsls	r2, r2, #1
 80206ba:	3101      	adds	r1, #1
 80206bc:	e7f0      	b.n	80206a0 <__s2b+0x18>
 80206be:	9b08      	ldr	r3, [sp, #32]
 80206c0:	2d09      	cmp	r5, #9
 80206c2:	6143      	str	r3, [r0, #20]
 80206c4:	f04f 0301 	mov.w	r3, #1
 80206c8:	6103      	str	r3, [r0, #16]
 80206ca:	dd16      	ble.n	80206fa <__s2b+0x72>
 80206cc:	f104 0909 	add.w	r9, r4, #9
 80206d0:	442c      	add	r4, r5
 80206d2:	46c8      	mov	r8, r9
 80206d4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80206d8:	4601      	mov	r1, r0
 80206da:	220a      	movs	r2, #10
 80206dc:	4630      	mov	r0, r6
 80206de:	3b30      	subs	r3, #48	@ 0x30
 80206e0:	f7ff ff8a 	bl	80205f8 <__multadd>
 80206e4:	45a0      	cmp	r8, r4
 80206e6:	d1f5      	bne.n	80206d4 <__s2b+0x4c>
 80206e8:	f1a5 0408 	sub.w	r4, r5, #8
 80206ec:	444c      	add	r4, r9
 80206ee:	1b2d      	subs	r5, r5, r4
 80206f0:	1963      	adds	r3, r4, r5
 80206f2:	42bb      	cmp	r3, r7
 80206f4:	db04      	blt.n	8020700 <__s2b+0x78>
 80206f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80206fa:	340a      	adds	r4, #10
 80206fc:	2509      	movs	r5, #9
 80206fe:	e7f6      	b.n	80206ee <__s2b+0x66>
 8020700:	f814 3b01 	ldrb.w	r3, [r4], #1
 8020704:	4601      	mov	r1, r0
 8020706:	220a      	movs	r2, #10
 8020708:	4630      	mov	r0, r6
 802070a:	3b30      	subs	r3, #48	@ 0x30
 802070c:	f7ff ff74 	bl	80205f8 <__multadd>
 8020710:	e7ee      	b.n	80206f0 <__s2b+0x68>
 8020712:	bf00      	nop
 8020714:	0802464a 	.word	0x0802464a
 8020718:	080246bb 	.word	0x080246bb

0802071c <__hi0bits>:
 802071c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8020720:	4603      	mov	r3, r0
 8020722:	bf36      	itet	cc
 8020724:	0403      	lslcc	r3, r0, #16
 8020726:	2000      	movcs	r0, #0
 8020728:	2010      	movcc	r0, #16
 802072a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 802072e:	bf3c      	itt	cc
 8020730:	021b      	lslcc	r3, r3, #8
 8020732:	3008      	addcc	r0, #8
 8020734:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8020738:	bf3c      	itt	cc
 802073a:	011b      	lslcc	r3, r3, #4
 802073c:	3004      	addcc	r0, #4
 802073e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8020742:	bf3c      	itt	cc
 8020744:	009b      	lslcc	r3, r3, #2
 8020746:	3002      	addcc	r0, #2
 8020748:	2b00      	cmp	r3, #0
 802074a:	db05      	blt.n	8020758 <__hi0bits+0x3c>
 802074c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8020750:	f100 0001 	add.w	r0, r0, #1
 8020754:	bf08      	it	eq
 8020756:	2020      	moveq	r0, #32
 8020758:	4770      	bx	lr

0802075a <__lo0bits>:
 802075a:	6803      	ldr	r3, [r0, #0]
 802075c:	4602      	mov	r2, r0
 802075e:	f013 0007 	ands.w	r0, r3, #7
 8020762:	d00b      	beq.n	802077c <__lo0bits+0x22>
 8020764:	07d9      	lsls	r1, r3, #31
 8020766:	d421      	bmi.n	80207ac <__lo0bits+0x52>
 8020768:	0798      	lsls	r0, r3, #30
 802076a:	bf47      	ittee	mi
 802076c:	085b      	lsrmi	r3, r3, #1
 802076e:	2001      	movmi	r0, #1
 8020770:	089b      	lsrpl	r3, r3, #2
 8020772:	2002      	movpl	r0, #2
 8020774:	bf4c      	ite	mi
 8020776:	6013      	strmi	r3, [r2, #0]
 8020778:	6013      	strpl	r3, [r2, #0]
 802077a:	4770      	bx	lr
 802077c:	b299      	uxth	r1, r3
 802077e:	b909      	cbnz	r1, 8020784 <__lo0bits+0x2a>
 8020780:	0c1b      	lsrs	r3, r3, #16
 8020782:	2010      	movs	r0, #16
 8020784:	b2d9      	uxtb	r1, r3
 8020786:	b909      	cbnz	r1, 802078c <__lo0bits+0x32>
 8020788:	3008      	adds	r0, #8
 802078a:	0a1b      	lsrs	r3, r3, #8
 802078c:	0719      	lsls	r1, r3, #28
 802078e:	bf04      	itt	eq
 8020790:	091b      	lsreq	r3, r3, #4
 8020792:	3004      	addeq	r0, #4
 8020794:	0799      	lsls	r1, r3, #30
 8020796:	bf04      	itt	eq
 8020798:	089b      	lsreq	r3, r3, #2
 802079a:	3002      	addeq	r0, #2
 802079c:	07d9      	lsls	r1, r3, #31
 802079e:	d403      	bmi.n	80207a8 <__lo0bits+0x4e>
 80207a0:	085b      	lsrs	r3, r3, #1
 80207a2:	f100 0001 	add.w	r0, r0, #1
 80207a6:	d003      	beq.n	80207b0 <__lo0bits+0x56>
 80207a8:	6013      	str	r3, [r2, #0]
 80207aa:	4770      	bx	lr
 80207ac:	2000      	movs	r0, #0
 80207ae:	4770      	bx	lr
 80207b0:	2020      	movs	r0, #32
 80207b2:	4770      	bx	lr

080207b4 <__i2b>:
 80207b4:	b510      	push	{r4, lr}
 80207b6:	460c      	mov	r4, r1
 80207b8:	2101      	movs	r1, #1
 80207ba:	f7ff febb 	bl	8020534 <_Balloc>
 80207be:	4602      	mov	r2, r0
 80207c0:	b928      	cbnz	r0, 80207ce <__i2b+0x1a>
 80207c2:	4b05      	ldr	r3, [pc, #20]	@ (80207d8 <__i2b+0x24>)
 80207c4:	f240 1145 	movw	r1, #325	@ 0x145
 80207c8:	4804      	ldr	r0, [pc, #16]	@ (80207dc <__i2b+0x28>)
 80207ca:	f7fe fcaf 	bl	801f12c <__assert_func>
 80207ce:	2301      	movs	r3, #1
 80207d0:	6144      	str	r4, [r0, #20]
 80207d2:	6103      	str	r3, [r0, #16]
 80207d4:	bd10      	pop	{r4, pc}
 80207d6:	bf00      	nop
 80207d8:	0802464a 	.word	0x0802464a
 80207dc:	080246bb 	.word	0x080246bb

080207e0 <__multiply>:
 80207e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80207e4:	4614      	mov	r4, r2
 80207e6:	690a      	ldr	r2, [r1, #16]
 80207e8:	460f      	mov	r7, r1
 80207ea:	b085      	sub	sp, #20
 80207ec:	6923      	ldr	r3, [r4, #16]
 80207ee:	429a      	cmp	r2, r3
 80207f0:	bfa2      	ittt	ge
 80207f2:	4623      	movge	r3, r4
 80207f4:	460c      	movge	r4, r1
 80207f6:	461f      	movge	r7, r3
 80207f8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80207fc:	68a3      	ldr	r3, [r4, #8]
 80207fe:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8020802:	6861      	ldr	r1, [r4, #4]
 8020804:	eb0a 0609 	add.w	r6, sl, r9
 8020808:	42b3      	cmp	r3, r6
 802080a:	bfb8      	it	lt
 802080c:	3101      	addlt	r1, #1
 802080e:	f7ff fe91 	bl	8020534 <_Balloc>
 8020812:	b930      	cbnz	r0, 8020822 <__multiply+0x42>
 8020814:	4602      	mov	r2, r0
 8020816:	4b45      	ldr	r3, [pc, #276]	@ (802092c <__multiply+0x14c>)
 8020818:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 802081c:	4844      	ldr	r0, [pc, #272]	@ (8020930 <__multiply+0x150>)
 802081e:	f7fe fc85 	bl	801f12c <__assert_func>
 8020822:	f100 0514 	add.w	r5, r0, #20
 8020826:	2200      	movs	r2, #0
 8020828:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 802082c:	462b      	mov	r3, r5
 802082e:	4543      	cmp	r3, r8
 8020830:	d321      	bcc.n	8020876 <__multiply+0x96>
 8020832:	f107 0114 	add.w	r1, r7, #20
 8020836:	f104 0214 	add.w	r2, r4, #20
 802083a:	f104 0715 	add.w	r7, r4, #21
 802083e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8020842:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8020846:	9302      	str	r3, [sp, #8]
 8020848:	1b13      	subs	r3, r2, r4
 802084a:	3b15      	subs	r3, #21
 802084c:	f023 0303 	bic.w	r3, r3, #3
 8020850:	3304      	adds	r3, #4
 8020852:	42ba      	cmp	r2, r7
 8020854:	bf38      	it	cc
 8020856:	2304      	movcc	r3, #4
 8020858:	9301      	str	r3, [sp, #4]
 802085a:	9b02      	ldr	r3, [sp, #8]
 802085c:	9103      	str	r1, [sp, #12]
 802085e:	428b      	cmp	r3, r1
 8020860:	d80c      	bhi.n	802087c <__multiply+0x9c>
 8020862:	2e00      	cmp	r6, #0
 8020864:	dd03      	ble.n	802086e <__multiply+0x8e>
 8020866:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 802086a:	2b00      	cmp	r3, #0
 802086c:	d05b      	beq.n	8020926 <__multiply+0x146>
 802086e:	6106      	str	r6, [r0, #16]
 8020870:	b005      	add	sp, #20
 8020872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020876:	f843 2b04 	str.w	r2, [r3], #4
 802087a:	e7d8      	b.n	802082e <__multiply+0x4e>
 802087c:	f8b1 a000 	ldrh.w	sl, [r1]
 8020880:	f1ba 0f00 	cmp.w	sl, #0
 8020884:	d024      	beq.n	80208d0 <__multiply+0xf0>
 8020886:	f104 0e14 	add.w	lr, r4, #20
 802088a:	46a9      	mov	r9, r5
 802088c:	f04f 0c00 	mov.w	ip, #0
 8020890:	f85e 7b04 	ldr.w	r7, [lr], #4
 8020894:	f8d9 3000 	ldr.w	r3, [r9]
 8020898:	fa1f fb87 	uxth.w	fp, r7
 802089c:	4572      	cmp	r2, lr
 802089e:	b29b      	uxth	r3, r3
 80208a0:	fb0a 330b 	mla	r3, sl, fp, r3
 80208a4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80208a8:	f8d9 7000 	ldr.w	r7, [r9]
 80208ac:	4463      	add	r3, ip
 80208ae:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80208b2:	fb0a c70b 	mla	r7, sl, fp, ip
 80208b6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80208ba:	b29b      	uxth	r3, r3
 80208bc:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80208c0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80208c4:	f849 3b04 	str.w	r3, [r9], #4
 80208c8:	d8e2      	bhi.n	8020890 <__multiply+0xb0>
 80208ca:	9b01      	ldr	r3, [sp, #4]
 80208cc:	f845 c003 	str.w	ip, [r5, r3]
 80208d0:	9b03      	ldr	r3, [sp, #12]
 80208d2:	3104      	adds	r1, #4
 80208d4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80208d8:	f1b9 0f00 	cmp.w	r9, #0
 80208dc:	d021      	beq.n	8020922 <__multiply+0x142>
 80208de:	682b      	ldr	r3, [r5, #0]
 80208e0:	f104 0c14 	add.w	ip, r4, #20
 80208e4:	46ae      	mov	lr, r5
 80208e6:	f04f 0a00 	mov.w	sl, #0
 80208ea:	f8bc b000 	ldrh.w	fp, [ip]
 80208ee:	b29b      	uxth	r3, r3
 80208f0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80208f4:	fb09 770b 	mla	r7, r9, fp, r7
 80208f8:	4457      	add	r7, sl
 80208fa:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80208fe:	f84e 3b04 	str.w	r3, [lr], #4
 8020902:	f85c 3b04 	ldr.w	r3, [ip], #4
 8020906:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802090a:	f8be 3000 	ldrh.w	r3, [lr]
 802090e:	4562      	cmp	r2, ip
 8020910:	fb09 330a 	mla	r3, r9, sl, r3
 8020914:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8020918:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802091c:	d8e5      	bhi.n	80208ea <__multiply+0x10a>
 802091e:	9f01      	ldr	r7, [sp, #4]
 8020920:	51eb      	str	r3, [r5, r7]
 8020922:	3504      	adds	r5, #4
 8020924:	e799      	b.n	802085a <__multiply+0x7a>
 8020926:	3e01      	subs	r6, #1
 8020928:	e79b      	b.n	8020862 <__multiply+0x82>
 802092a:	bf00      	nop
 802092c:	0802464a 	.word	0x0802464a
 8020930:	080246bb 	.word	0x080246bb

08020934 <__pow5mult>:
 8020934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020938:	4615      	mov	r5, r2
 802093a:	f012 0203 	ands.w	r2, r2, #3
 802093e:	4607      	mov	r7, r0
 8020940:	460e      	mov	r6, r1
 8020942:	d007      	beq.n	8020954 <__pow5mult+0x20>
 8020944:	3a01      	subs	r2, #1
 8020946:	4c25      	ldr	r4, [pc, #148]	@ (80209dc <__pow5mult+0xa8>)
 8020948:	2300      	movs	r3, #0
 802094a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802094e:	f7ff fe53 	bl	80205f8 <__multadd>
 8020952:	4606      	mov	r6, r0
 8020954:	10ad      	asrs	r5, r5, #2
 8020956:	d03d      	beq.n	80209d4 <__pow5mult+0xa0>
 8020958:	69fc      	ldr	r4, [r7, #28]
 802095a:	b97c      	cbnz	r4, 802097c <__pow5mult+0x48>
 802095c:	2010      	movs	r0, #16
 802095e:	f7fc f9e7 	bl	801cd30 <malloc>
 8020962:	4602      	mov	r2, r0
 8020964:	61f8      	str	r0, [r7, #28]
 8020966:	b928      	cbnz	r0, 8020974 <__pow5mult+0x40>
 8020968:	4b1d      	ldr	r3, [pc, #116]	@ (80209e0 <__pow5mult+0xac>)
 802096a:	f240 11b3 	movw	r1, #435	@ 0x1b3
 802096e:	481d      	ldr	r0, [pc, #116]	@ (80209e4 <__pow5mult+0xb0>)
 8020970:	f7fe fbdc 	bl	801f12c <__assert_func>
 8020974:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8020978:	6004      	str	r4, [r0, #0]
 802097a:	60c4      	str	r4, [r0, #12]
 802097c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8020980:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8020984:	b94c      	cbnz	r4, 802099a <__pow5mult+0x66>
 8020986:	f240 2171 	movw	r1, #625	@ 0x271
 802098a:	4638      	mov	r0, r7
 802098c:	f7ff ff12 	bl	80207b4 <__i2b>
 8020990:	2300      	movs	r3, #0
 8020992:	4604      	mov	r4, r0
 8020994:	f8c8 0008 	str.w	r0, [r8, #8]
 8020998:	6003      	str	r3, [r0, #0]
 802099a:	f04f 0900 	mov.w	r9, #0
 802099e:	07eb      	lsls	r3, r5, #31
 80209a0:	d50a      	bpl.n	80209b8 <__pow5mult+0x84>
 80209a2:	4631      	mov	r1, r6
 80209a4:	4622      	mov	r2, r4
 80209a6:	4638      	mov	r0, r7
 80209a8:	f7ff ff1a 	bl	80207e0 <__multiply>
 80209ac:	4680      	mov	r8, r0
 80209ae:	4631      	mov	r1, r6
 80209b0:	4638      	mov	r0, r7
 80209b2:	4646      	mov	r6, r8
 80209b4:	f7ff fdfe 	bl	80205b4 <_Bfree>
 80209b8:	106d      	asrs	r5, r5, #1
 80209ba:	d00b      	beq.n	80209d4 <__pow5mult+0xa0>
 80209bc:	6820      	ldr	r0, [r4, #0]
 80209be:	b938      	cbnz	r0, 80209d0 <__pow5mult+0x9c>
 80209c0:	4622      	mov	r2, r4
 80209c2:	4621      	mov	r1, r4
 80209c4:	4638      	mov	r0, r7
 80209c6:	f7ff ff0b 	bl	80207e0 <__multiply>
 80209ca:	6020      	str	r0, [r4, #0]
 80209cc:	f8c0 9000 	str.w	r9, [r0]
 80209d0:	4604      	mov	r4, r0
 80209d2:	e7e4      	b.n	802099e <__pow5mult+0x6a>
 80209d4:	4630      	mov	r0, r6
 80209d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80209da:	bf00      	nop
 80209dc:	08024714 	.word	0x08024714
 80209e0:	08024530 	.word	0x08024530
 80209e4:	080246bb 	.word	0x080246bb

080209e8 <__lshift>:
 80209e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80209ec:	460c      	mov	r4, r1
 80209ee:	4607      	mov	r7, r0
 80209f0:	4691      	mov	r9, r2
 80209f2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80209f6:	6923      	ldr	r3, [r4, #16]
 80209f8:	6849      	ldr	r1, [r1, #4]
 80209fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80209fe:	68a3      	ldr	r3, [r4, #8]
 8020a00:	f108 0601 	add.w	r6, r8, #1
 8020a04:	42b3      	cmp	r3, r6
 8020a06:	db0b      	blt.n	8020a20 <__lshift+0x38>
 8020a08:	4638      	mov	r0, r7
 8020a0a:	f7ff fd93 	bl	8020534 <_Balloc>
 8020a0e:	4605      	mov	r5, r0
 8020a10:	b948      	cbnz	r0, 8020a26 <__lshift+0x3e>
 8020a12:	4602      	mov	r2, r0
 8020a14:	4b28      	ldr	r3, [pc, #160]	@ (8020ab8 <__lshift+0xd0>)
 8020a16:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8020a1a:	4828      	ldr	r0, [pc, #160]	@ (8020abc <__lshift+0xd4>)
 8020a1c:	f7fe fb86 	bl	801f12c <__assert_func>
 8020a20:	3101      	adds	r1, #1
 8020a22:	005b      	lsls	r3, r3, #1
 8020a24:	e7ee      	b.n	8020a04 <__lshift+0x1c>
 8020a26:	2300      	movs	r3, #0
 8020a28:	f100 0114 	add.w	r1, r0, #20
 8020a2c:	f100 0210 	add.w	r2, r0, #16
 8020a30:	4618      	mov	r0, r3
 8020a32:	4553      	cmp	r3, sl
 8020a34:	db33      	blt.n	8020a9e <__lshift+0xb6>
 8020a36:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8020a3a:	f104 0314 	add.w	r3, r4, #20
 8020a3e:	6920      	ldr	r0, [r4, #16]
 8020a40:	f019 091f 	ands.w	r9, r9, #31
 8020a44:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8020a48:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8020a4c:	d02b      	beq.n	8020aa6 <__lshift+0xbe>
 8020a4e:	f1c9 0e20 	rsb	lr, r9, #32
 8020a52:	468a      	mov	sl, r1
 8020a54:	2200      	movs	r2, #0
 8020a56:	6818      	ldr	r0, [r3, #0]
 8020a58:	fa00 f009 	lsl.w	r0, r0, r9
 8020a5c:	4310      	orrs	r0, r2
 8020a5e:	f84a 0b04 	str.w	r0, [sl], #4
 8020a62:	f853 2b04 	ldr.w	r2, [r3], #4
 8020a66:	459c      	cmp	ip, r3
 8020a68:	fa22 f20e 	lsr.w	r2, r2, lr
 8020a6c:	d8f3      	bhi.n	8020a56 <__lshift+0x6e>
 8020a6e:	ebac 0304 	sub.w	r3, ip, r4
 8020a72:	f104 0015 	add.w	r0, r4, #21
 8020a76:	3b15      	subs	r3, #21
 8020a78:	f023 0303 	bic.w	r3, r3, #3
 8020a7c:	3304      	adds	r3, #4
 8020a7e:	4584      	cmp	ip, r0
 8020a80:	bf38      	it	cc
 8020a82:	2304      	movcc	r3, #4
 8020a84:	50ca      	str	r2, [r1, r3]
 8020a86:	b10a      	cbz	r2, 8020a8c <__lshift+0xa4>
 8020a88:	f108 0602 	add.w	r6, r8, #2
 8020a8c:	3e01      	subs	r6, #1
 8020a8e:	4638      	mov	r0, r7
 8020a90:	4621      	mov	r1, r4
 8020a92:	612e      	str	r6, [r5, #16]
 8020a94:	f7ff fd8e 	bl	80205b4 <_Bfree>
 8020a98:	4628      	mov	r0, r5
 8020a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020a9e:	3301      	adds	r3, #1
 8020aa0:	f842 0f04 	str.w	r0, [r2, #4]!
 8020aa4:	e7c5      	b.n	8020a32 <__lshift+0x4a>
 8020aa6:	3904      	subs	r1, #4
 8020aa8:	f853 2b04 	ldr.w	r2, [r3], #4
 8020aac:	459c      	cmp	ip, r3
 8020aae:	f841 2f04 	str.w	r2, [r1, #4]!
 8020ab2:	d8f9      	bhi.n	8020aa8 <__lshift+0xc0>
 8020ab4:	e7ea      	b.n	8020a8c <__lshift+0xa4>
 8020ab6:	bf00      	nop
 8020ab8:	0802464a 	.word	0x0802464a
 8020abc:	080246bb 	.word	0x080246bb

08020ac0 <__mcmp>:
 8020ac0:	4603      	mov	r3, r0
 8020ac2:	690a      	ldr	r2, [r1, #16]
 8020ac4:	6900      	ldr	r0, [r0, #16]
 8020ac6:	1a80      	subs	r0, r0, r2
 8020ac8:	b530      	push	{r4, r5, lr}
 8020aca:	d10e      	bne.n	8020aea <__mcmp+0x2a>
 8020acc:	3314      	adds	r3, #20
 8020ace:	3114      	adds	r1, #20
 8020ad0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8020ad4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8020ad8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8020adc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8020ae0:	4295      	cmp	r5, r2
 8020ae2:	d003      	beq.n	8020aec <__mcmp+0x2c>
 8020ae4:	d205      	bcs.n	8020af2 <__mcmp+0x32>
 8020ae6:	f04f 30ff 	mov.w	r0, #4294967295
 8020aea:	bd30      	pop	{r4, r5, pc}
 8020aec:	42a3      	cmp	r3, r4
 8020aee:	d3f3      	bcc.n	8020ad8 <__mcmp+0x18>
 8020af0:	e7fb      	b.n	8020aea <__mcmp+0x2a>
 8020af2:	2001      	movs	r0, #1
 8020af4:	e7f9      	b.n	8020aea <__mcmp+0x2a>
	...

08020af8 <__mdiff>:
 8020af8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020afc:	4689      	mov	r9, r1
 8020afe:	4606      	mov	r6, r0
 8020b00:	4611      	mov	r1, r2
 8020b02:	4614      	mov	r4, r2
 8020b04:	4648      	mov	r0, r9
 8020b06:	f7ff ffdb 	bl	8020ac0 <__mcmp>
 8020b0a:	1e05      	subs	r5, r0, #0
 8020b0c:	d112      	bne.n	8020b34 <__mdiff+0x3c>
 8020b0e:	4629      	mov	r1, r5
 8020b10:	4630      	mov	r0, r6
 8020b12:	f7ff fd0f 	bl	8020534 <_Balloc>
 8020b16:	4602      	mov	r2, r0
 8020b18:	b928      	cbnz	r0, 8020b26 <__mdiff+0x2e>
 8020b1a:	4b41      	ldr	r3, [pc, #260]	@ (8020c20 <__mdiff+0x128>)
 8020b1c:	f240 2137 	movw	r1, #567	@ 0x237
 8020b20:	4840      	ldr	r0, [pc, #256]	@ (8020c24 <__mdiff+0x12c>)
 8020b22:	f7fe fb03 	bl	801f12c <__assert_func>
 8020b26:	2301      	movs	r3, #1
 8020b28:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8020b2c:	4610      	mov	r0, r2
 8020b2e:	b003      	add	sp, #12
 8020b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020b34:	bfbc      	itt	lt
 8020b36:	464b      	movlt	r3, r9
 8020b38:	46a1      	movlt	r9, r4
 8020b3a:	4630      	mov	r0, r6
 8020b3c:	bfb8      	it	lt
 8020b3e:	2501      	movlt	r5, #1
 8020b40:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8020b44:	bfb4      	ite	lt
 8020b46:	461c      	movlt	r4, r3
 8020b48:	2500      	movge	r5, #0
 8020b4a:	f7ff fcf3 	bl	8020534 <_Balloc>
 8020b4e:	4602      	mov	r2, r0
 8020b50:	b918      	cbnz	r0, 8020b5a <__mdiff+0x62>
 8020b52:	4b33      	ldr	r3, [pc, #204]	@ (8020c20 <__mdiff+0x128>)
 8020b54:	f240 2145 	movw	r1, #581	@ 0x245
 8020b58:	e7e2      	b.n	8020b20 <__mdiff+0x28>
 8020b5a:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8020b5e:	f104 0e14 	add.w	lr, r4, #20
 8020b62:	6926      	ldr	r6, [r4, #16]
 8020b64:	f100 0b14 	add.w	fp, r0, #20
 8020b68:	60c5      	str	r5, [r0, #12]
 8020b6a:	f109 0514 	add.w	r5, r9, #20
 8020b6e:	f109 0310 	add.w	r3, r9, #16
 8020b72:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8020b76:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8020b7a:	46d9      	mov	r9, fp
 8020b7c:	f04f 0c00 	mov.w	ip, #0
 8020b80:	9301      	str	r3, [sp, #4]
 8020b82:	9b01      	ldr	r3, [sp, #4]
 8020b84:	f85e 0b04 	ldr.w	r0, [lr], #4
 8020b88:	f853 af04 	ldr.w	sl, [r3, #4]!
 8020b8c:	4576      	cmp	r6, lr
 8020b8e:	9301      	str	r3, [sp, #4]
 8020b90:	fa1f f38a 	uxth.w	r3, sl
 8020b94:	4619      	mov	r1, r3
 8020b96:	b283      	uxth	r3, r0
 8020b98:	ea4f 4010 	mov.w	r0, r0, lsr #16
 8020b9c:	eba1 0303 	sub.w	r3, r1, r3
 8020ba0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8020ba4:	4463      	add	r3, ip
 8020ba6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8020baa:	b29b      	uxth	r3, r3
 8020bac:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8020bb0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8020bb4:	f849 3b04 	str.w	r3, [r9], #4
 8020bb8:	d8e3      	bhi.n	8020b82 <__mdiff+0x8a>
 8020bba:	1b33      	subs	r3, r6, r4
 8020bbc:	3415      	adds	r4, #21
 8020bbe:	3b15      	subs	r3, #21
 8020bc0:	f023 0303 	bic.w	r3, r3, #3
 8020bc4:	3304      	adds	r3, #4
 8020bc6:	42a6      	cmp	r6, r4
 8020bc8:	bf38      	it	cc
 8020bca:	2304      	movcc	r3, #4
 8020bcc:	441d      	add	r5, r3
 8020bce:	445b      	add	r3, fp
 8020bd0:	462c      	mov	r4, r5
 8020bd2:	461e      	mov	r6, r3
 8020bd4:	4544      	cmp	r4, r8
 8020bd6:	d30e      	bcc.n	8020bf6 <__mdiff+0xfe>
 8020bd8:	f108 0103 	add.w	r1, r8, #3
 8020bdc:	1b49      	subs	r1, r1, r5
 8020bde:	3d03      	subs	r5, #3
 8020be0:	f021 0103 	bic.w	r1, r1, #3
 8020be4:	45a8      	cmp	r8, r5
 8020be6:	bf38      	it	cc
 8020be8:	2100      	movcc	r1, #0
 8020bea:	440b      	add	r3, r1
 8020bec:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8020bf0:	b199      	cbz	r1, 8020c1a <__mdiff+0x122>
 8020bf2:	6117      	str	r7, [r2, #16]
 8020bf4:	e79a      	b.n	8020b2c <__mdiff+0x34>
 8020bf6:	f854 1b04 	ldr.w	r1, [r4], #4
 8020bfa:	46e6      	mov	lr, ip
 8020bfc:	fa1f fc81 	uxth.w	ip, r1
 8020c00:	0c08      	lsrs	r0, r1, #16
 8020c02:	4471      	add	r1, lr
 8020c04:	44f4      	add	ip, lr
 8020c06:	b289      	uxth	r1, r1
 8020c08:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8020c0c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8020c10:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8020c14:	f846 1b04 	str.w	r1, [r6], #4
 8020c18:	e7dc      	b.n	8020bd4 <__mdiff+0xdc>
 8020c1a:	3f01      	subs	r7, #1
 8020c1c:	e7e6      	b.n	8020bec <__mdiff+0xf4>
 8020c1e:	bf00      	nop
 8020c20:	0802464a 	.word	0x0802464a
 8020c24:	080246bb 	.word	0x080246bb

08020c28 <__ulp>:
 8020c28:	b082      	sub	sp, #8
 8020c2a:	4b11      	ldr	r3, [pc, #68]	@ (8020c70 <__ulp+0x48>)
 8020c2c:	ed8d 0b00 	vstr	d0, [sp]
 8020c30:	9a01      	ldr	r2, [sp, #4]
 8020c32:	4013      	ands	r3, r2
 8020c34:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8020c38:	2b00      	cmp	r3, #0
 8020c3a:	dc08      	bgt.n	8020c4e <__ulp+0x26>
 8020c3c:	425b      	negs	r3, r3
 8020c3e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8020c42:	ea4f 5223 	mov.w	r2, r3, asr #20
 8020c46:	da04      	bge.n	8020c52 <__ulp+0x2a>
 8020c48:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8020c4c:	4113      	asrs	r3, r2
 8020c4e:	2200      	movs	r2, #0
 8020c50:	e008      	b.n	8020c64 <__ulp+0x3c>
 8020c52:	f1a2 0314 	sub.w	r3, r2, #20
 8020c56:	2b1e      	cmp	r3, #30
 8020c58:	bfd6      	itet	le
 8020c5a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8020c5e:	2201      	movgt	r2, #1
 8020c60:	40da      	lsrle	r2, r3
 8020c62:	2300      	movs	r3, #0
 8020c64:	4619      	mov	r1, r3
 8020c66:	4610      	mov	r0, r2
 8020c68:	ec41 0b10 	vmov	d0, r0, r1
 8020c6c:	b002      	add	sp, #8
 8020c6e:	4770      	bx	lr
 8020c70:	7ff00000 	.word	0x7ff00000

08020c74 <__b2d>:
 8020c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020c78:	6906      	ldr	r6, [r0, #16]
 8020c7a:	f100 0814 	add.w	r8, r0, #20
 8020c7e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8020c82:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8020c86:	1f37      	subs	r7, r6, #4
 8020c88:	4610      	mov	r0, r2
 8020c8a:	f7ff fd47 	bl	802071c <__hi0bits>
 8020c8e:	f1c0 0320 	rsb	r3, r0, #32
 8020c92:	280a      	cmp	r0, #10
 8020c94:	600b      	str	r3, [r1, #0]
 8020c96:	491d      	ldr	r1, [pc, #116]	@ (8020d0c <__b2d+0x98>)
 8020c98:	dc16      	bgt.n	8020cc8 <__b2d+0x54>
 8020c9a:	f1c0 0c0b 	rsb	ip, r0, #11
 8020c9e:	45b8      	cmp	r8, r7
 8020ca0:	f100 0015 	add.w	r0, r0, #21
 8020ca4:	fa22 f30c 	lsr.w	r3, r2, ip
 8020ca8:	fa02 f000 	lsl.w	r0, r2, r0
 8020cac:	ea43 0501 	orr.w	r5, r3, r1
 8020cb0:	bf34      	ite	cc
 8020cb2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8020cb6:	2300      	movcs	r3, #0
 8020cb8:	fa23 f30c 	lsr.w	r3, r3, ip
 8020cbc:	4303      	orrs	r3, r0
 8020cbe:	461c      	mov	r4, r3
 8020cc0:	ec45 4b10 	vmov	d0, r4, r5
 8020cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020cc8:	45b8      	cmp	r8, r7
 8020cca:	bf3a      	itte	cc
 8020ccc:	f1a6 0708 	subcc.w	r7, r6, #8
 8020cd0:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8020cd4:	2300      	movcs	r3, #0
 8020cd6:	380b      	subs	r0, #11
 8020cd8:	d014      	beq.n	8020d04 <__b2d+0x90>
 8020cda:	f1c0 0120 	rsb	r1, r0, #32
 8020cde:	4082      	lsls	r2, r0
 8020ce0:	4547      	cmp	r7, r8
 8020ce2:	fa23 f401 	lsr.w	r4, r3, r1
 8020ce6:	fa03 f300 	lsl.w	r3, r3, r0
 8020cea:	ea42 0204 	orr.w	r2, r2, r4
 8020cee:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8020cf2:	bf8c      	ite	hi
 8020cf4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8020cf8:	2200      	movls	r2, #0
 8020cfa:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8020cfe:	40ca      	lsrs	r2, r1
 8020d00:	4313      	orrs	r3, r2
 8020d02:	e7dc      	b.n	8020cbe <__b2d+0x4a>
 8020d04:	ea42 0501 	orr.w	r5, r2, r1
 8020d08:	e7d9      	b.n	8020cbe <__b2d+0x4a>
 8020d0a:	bf00      	nop
 8020d0c:	3ff00000 	.word	0x3ff00000

08020d10 <__d2b>:
 8020d10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8020d14:	460f      	mov	r7, r1
 8020d16:	2101      	movs	r1, #1
 8020d18:	4616      	mov	r6, r2
 8020d1a:	ec59 8b10 	vmov	r8, r9, d0
 8020d1e:	f7ff fc09 	bl	8020534 <_Balloc>
 8020d22:	4604      	mov	r4, r0
 8020d24:	b930      	cbnz	r0, 8020d34 <__d2b+0x24>
 8020d26:	4602      	mov	r2, r0
 8020d28:	4b23      	ldr	r3, [pc, #140]	@ (8020db8 <__d2b+0xa8>)
 8020d2a:	f240 310f 	movw	r1, #783	@ 0x30f
 8020d2e:	4823      	ldr	r0, [pc, #140]	@ (8020dbc <__d2b+0xac>)
 8020d30:	f7fe f9fc 	bl	801f12c <__assert_func>
 8020d34:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8020d38:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8020d3c:	b10d      	cbz	r5, 8020d42 <__d2b+0x32>
 8020d3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8020d42:	9301      	str	r3, [sp, #4]
 8020d44:	f1b8 0300 	subs.w	r3, r8, #0
 8020d48:	d023      	beq.n	8020d92 <__d2b+0x82>
 8020d4a:	4668      	mov	r0, sp
 8020d4c:	9300      	str	r3, [sp, #0]
 8020d4e:	f7ff fd04 	bl	802075a <__lo0bits>
 8020d52:	e9dd 1200 	ldrd	r1, r2, [sp]
 8020d56:	b1d0      	cbz	r0, 8020d8e <__d2b+0x7e>
 8020d58:	f1c0 0320 	rsb	r3, r0, #32
 8020d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8020d60:	40c2      	lsrs	r2, r0
 8020d62:	430b      	orrs	r3, r1
 8020d64:	9201      	str	r2, [sp, #4]
 8020d66:	6163      	str	r3, [r4, #20]
 8020d68:	9b01      	ldr	r3, [sp, #4]
 8020d6a:	2b00      	cmp	r3, #0
 8020d6c:	61a3      	str	r3, [r4, #24]
 8020d6e:	bf0c      	ite	eq
 8020d70:	2201      	moveq	r2, #1
 8020d72:	2202      	movne	r2, #2
 8020d74:	6122      	str	r2, [r4, #16]
 8020d76:	b1a5      	cbz	r5, 8020da2 <__d2b+0x92>
 8020d78:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8020d7c:	4405      	add	r5, r0
 8020d7e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8020d82:	603d      	str	r5, [r7, #0]
 8020d84:	6030      	str	r0, [r6, #0]
 8020d86:	4620      	mov	r0, r4
 8020d88:	b003      	add	sp, #12
 8020d8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020d8e:	6161      	str	r1, [r4, #20]
 8020d90:	e7ea      	b.n	8020d68 <__d2b+0x58>
 8020d92:	a801      	add	r0, sp, #4
 8020d94:	f7ff fce1 	bl	802075a <__lo0bits>
 8020d98:	9b01      	ldr	r3, [sp, #4]
 8020d9a:	3020      	adds	r0, #32
 8020d9c:	2201      	movs	r2, #1
 8020d9e:	6163      	str	r3, [r4, #20]
 8020da0:	e7e8      	b.n	8020d74 <__d2b+0x64>
 8020da2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8020da6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8020daa:	6038      	str	r0, [r7, #0]
 8020dac:	6918      	ldr	r0, [r3, #16]
 8020dae:	f7ff fcb5 	bl	802071c <__hi0bits>
 8020db2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8020db6:	e7e5      	b.n	8020d84 <__d2b+0x74>
 8020db8:	0802464a 	.word	0x0802464a
 8020dbc:	080246bb 	.word	0x080246bb

08020dc0 <__ratio>:
 8020dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020dc4:	b085      	sub	sp, #20
 8020dc6:	e9cd 1000 	strd	r1, r0, [sp]
 8020dca:	a902      	add	r1, sp, #8
 8020dcc:	f7ff ff52 	bl	8020c74 <__b2d>
 8020dd0:	a903      	add	r1, sp, #12
 8020dd2:	9800      	ldr	r0, [sp, #0]
 8020dd4:	ec55 4b10 	vmov	r4, r5, d0
 8020dd8:	f7ff ff4c 	bl	8020c74 <__b2d>
 8020ddc:	9b01      	ldr	r3, [sp, #4]
 8020dde:	462f      	mov	r7, r5
 8020de0:	4620      	mov	r0, r4
 8020de2:	6919      	ldr	r1, [r3, #16]
 8020de4:	9b00      	ldr	r3, [sp, #0]
 8020de6:	691b      	ldr	r3, [r3, #16]
 8020de8:	1ac9      	subs	r1, r1, r3
 8020dea:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8020dee:	ec5b ab10 	vmov	sl, fp, d0
 8020df2:	1a9b      	subs	r3, r3, r2
 8020df4:	46d9      	mov	r9, fp
 8020df6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8020dfa:	2b00      	cmp	r3, #0
 8020dfc:	bfcd      	iteet	gt
 8020dfe:	462a      	movgt	r2, r5
 8020e00:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8020e04:	465a      	movle	r2, fp
 8020e06:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8020e0a:	bfd8      	it	le
 8020e0c:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8020e10:	4652      	mov	r2, sl
 8020e12:	4639      	mov	r1, r7
 8020e14:	464b      	mov	r3, r9
 8020e16:	f7df fd33 	bl	8000880 <__aeabi_ddiv>
 8020e1a:	ec41 0b10 	vmov	d0, r0, r1
 8020e1e:	b005      	add	sp, #20
 8020e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020e24 <__copybits>:
 8020e24:	3901      	subs	r1, #1
 8020e26:	f102 0314 	add.w	r3, r2, #20
 8020e2a:	1149      	asrs	r1, r1, #5
 8020e2c:	b570      	push	{r4, r5, r6, lr}
 8020e2e:	3101      	adds	r1, #1
 8020e30:	6914      	ldr	r4, [r2, #16]
 8020e32:	1f05      	subs	r5, r0, #4
 8020e34:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8020e38:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8020e3c:	42a3      	cmp	r3, r4
 8020e3e:	d30c      	bcc.n	8020e5a <__copybits+0x36>
 8020e40:	1aa3      	subs	r3, r4, r2
 8020e42:	3211      	adds	r2, #17
 8020e44:	3b11      	subs	r3, #17
 8020e46:	f023 0303 	bic.w	r3, r3, #3
 8020e4a:	42a2      	cmp	r2, r4
 8020e4c:	bf88      	it	hi
 8020e4e:	2300      	movhi	r3, #0
 8020e50:	4418      	add	r0, r3
 8020e52:	2300      	movs	r3, #0
 8020e54:	4288      	cmp	r0, r1
 8020e56:	d305      	bcc.n	8020e64 <__copybits+0x40>
 8020e58:	bd70      	pop	{r4, r5, r6, pc}
 8020e5a:	f853 6b04 	ldr.w	r6, [r3], #4
 8020e5e:	f845 6f04 	str.w	r6, [r5, #4]!
 8020e62:	e7eb      	b.n	8020e3c <__copybits+0x18>
 8020e64:	f840 3b04 	str.w	r3, [r0], #4
 8020e68:	e7f4      	b.n	8020e54 <__copybits+0x30>

08020e6a <__any_on>:
 8020e6a:	f100 0214 	add.w	r2, r0, #20
 8020e6e:	114b      	asrs	r3, r1, #5
 8020e70:	6900      	ldr	r0, [r0, #16]
 8020e72:	4298      	cmp	r0, r3
 8020e74:	b510      	push	{r4, lr}
 8020e76:	db11      	blt.n	8020e9c <__any_on+0x32>
 8020e78:	dd0a      	ble.n	8020e90 <__any_on+0x26>
 8020e7a:	f011 011f 	ands.w	r1, r1, #31
 8020e7e:	d007      	beq.n	8020e90 <__any_on+0x26>
 8020e80:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8020e84:	fa24 f001 	lsr.w	r0, r4, r1
 8020e88:	fa00 f101 	lsl.w	r1, r0, r1
 8020e8c:	428c      	cmp	r4, r1
 8020e8e:	d10b      	bne.n	8020ea8 <__any_on+0x3e>
 8020e90:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8020e94:	4293      	cmp	r3, r2
 8020e96:	d803      	bhi.n	8020ea0 <__any_on+0x36>
 8020e98:	2000      	movs	r0, #0
 8020e9a:	bd10      	pop	{r4, pc}
 8020e9c:	4603      	mov	r3, r0
 8020e9e:	e7f7      	b.n	8020e90 <__any_on+0x26>
 8020ea0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8020ea4:	2900      	cmp	r1, #0
 8020ea6:	d0f5      	beq.n	8020e94 <__any_on+0x2a>
 8020ea8:	2001      	movs	r0, #1
 8020eaa:	e7f6      	b.n	8020e9a <__any_on+0x30>

08020eac <__ascii_wctomb>:
 8020eac:	4603      	mov	r3, r0
 8020eae:	4608      	mov	r0, r1
 8020eb0:	b141      	cbz	r1, 8020ec4 <__ascii_wctomb+0x18>
 8020eb2:	2aff      	cmp	r2, #255	@ 0xff
 8020eb4:	d904      	bls.n	8020ec0 <__ascii_wctomb+0x14>
 8020eb6:	228a      	movs	r2, #138	@ 0x8a
 8020eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8020ebc:	601a      	str	r2, [r3, #0]
 8020ebe:	4770      	bx	lr
 8020ec0:	2001      	movs	r0, #1
 8020ec2:	700a      	strb	r2, [r1, #0]
 8020ec4:	4770      	bx	lr

08020ec6 <__ssputs_r>:
 8020ec6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020eca:	461f      	mov	r7, r3
 8020ecc:	688e      	ldr	r6, [r1, #8]
 8020ece:	4682      	mov	sl, r0
 8020ed0:	460c      	mov	r4, r1
 8020ed2:	42be      	cmp	r6, r7
 8020ed4:	4690      	mov	r8, r2
 8020ed6:	680b      	ldr	r3, [r1, #0]
 8020ed8:	d82d      	bhi.n	8020f36 <__ssputs_r+0x70>
 8020eda:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8020ede:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8020ee2:	d026      	beq.n	8020f32 <__ssputs_r+0x6c>
 8020ee4:	6965      	ldr	r5, [r4, #20]
 8020ee6:	6909      	ldr	r1, [r1, #16]
 8020ee8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020eec:	eba3 0901 	sub.w	r9, r3, r1
 8020ef0:	1c7b      	adds	r3, r7, #1
 8020ef2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8020ef6:	444b      	add	r3, r9
 8020ef8:	106d      	asrs	r5, r5, #1
 8020efa:	429d      	cmp	r5, r3
 8020efc:	bf38      	it	cc
 8020efe:	461d      	movcc	r5, r3
 8020f00:	0553      	lsls	r3, r2, #21
 8020f02:	d527      	bpl.n	8020f54 <__ssputs_r+0x8e>
 8020f04:	4629      	mov	r1, r5
 8020f06:	f7fb ff45 	bl	801cd94 <_malloc_r>
 8020f0a:	4606      	mov	r6, r0
 8020f0c:	b360      	cbz	r0, 8020f68 <__ssputs_r+0xa2>
 8020f0e:	464a      	mov	r2, r9
 8020f10:	6921      	ldr	r1, [r4, #16]
 8020f12:	f7fe f8f0 	bl	801f0f6 <memcpy>
 8020f16:	89a3      	ldrh	r3, [r4, #12]
 8020f18:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8020f1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8020f20:	81a3      	strh	r3, [r4, #12]
 8020f22:	6126      	str	r6, [r4, #16]
 8020f24:	444e      	add	r6, r9
 8020f26:	6165      	str	r5, [r4, #20]
 8020f28:	eba5 0509 	sub.w	r5, r5, r9
 8020f2c:	6026      	str	r6, [r4, #0]
 8020f2e:	463e      	mov	r6, r7
 8020f30:	60a5      	str	r5, [r4, #8]
 8020f32:	42be      	cmp	r6, r7
 8020f34:	d900      	bls.n	8020f38 <__ssputs_r+0x72>
 8020f36:	463e      	mov	r6, r7
 8020f38:	4632      	mov	r2, r6
 8020f3a:	4641      	mov	r1, r8
 8020f3c:	6820      	ldr	r0, [r4, #0]
 8020f3e:	f000 ff02 	bl	8021d46 <memmove>
 8020f42:	68a3      	ldr	r3, [r4, #8]
 8020f44:	2000      	movs	r0, #0
 8020f46:	1b9b      	subs	r3, r3, r6
 8020f48:	60a3      	str	r3, [r4, #8]
 8020f4a:	6823      	ldr	r3, [r4, #0]
 8020f4c:	4433      	add	r3, r6
 8020f4e:	6023      	str	r3, [r4, #0]
 8020f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020f54:	462a      	mov	r2, r5
 8020f56:	f000 ff4e 	bl	8021df6 <_realloc_r>
 8020f5a:	4606      	mov	r6, r0
 8020f5c:	2800      	cmp	r0, #0
 8020f5e:	d1e0      	bne.n	8020f22 <__ssputs_r+0x5c>
 8020f60:	6921      	ldr	r1, [r4, #16]
 8020f62:	4650      	mov	r0, sl
 8020f64:	f7fe ff54 	bl	801fe10 <_free_r>
 8020f68:	230c      	movs	r3, #12
 8020f6a:	f04f 30ff 	mov.w	r0, #4294967295
 8020f6e:	f8ca 3000 	str.w	r3, [sl]
 8020f72:	89a3      	ldrh	r3, [r4, #12]
 8020f74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8020f78:	81a3      	strh	r3, [r4, #12]
 8020f7a:	e7e9      	b.n	8020f50 <__ssputs_r+0x8a>

08020f7c <_svfiprintf_r>:
 8020f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020f80:	4698      	mov	r8, r3
 8020f82:	898b      	ldrh	r3, [r1, #12]
 8020f84:	b09d      	sub	sp, #116	@ 0x74
 8020f86:	4607      	mov	r7, r0
 8020f88:	061b      	lsls	r3, r3, #24
 8020f8a:	460d      	mov	r5, r1
 8020f8c:	4614      	mov	r4, r2
 8020f8e:	d510      	bpl.n	8020fb2 <_svfiprintf_r+0x36>
 8020f90:	690b      	ldr	r3, [r1, #16]
 8020f92:	b973      	cbnz	r3, 8020fb2 <_svfiprintf_r+0x36>
 8020f94:	2140      	movs	r1, #64	@ 0x40
 8020f96:	f7fb fefd 	bl	801cd94 <_malloc_r>
 8020f9a:	6028      	str	r0, [r5, #0]
 8020f9c:	6128      	str	r0, [r5, #16]
 8020f9e:	b930      	cbnz	r0, 8020fae <_svfiprintf_r+0x32>
 8020fa0:	230c      	movs	r3, #12
 8020fa2:	603b      	str	r3, [r7, #0]
 8020fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8020fa8:	b01d      	add	sp, #116	@ 0x74
 8020faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020fae:	2340      	movs	r3, #64	@ 0x40
 8020fb0:	616b      	str	r3, [r5, #20]
 8020fb2:	2300      	movs	r3, #0
 8020fb4:	f8cd 800c 	str.w	r8, [sp, #12]
 8020fb8:	f04f 0901 	mov.w	r9, #1
 8020fbc:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 8021160 <_svfiprintf_r+0x1e4>
 8020fc0:	9309      	str	r3, [sp, #36]	@ 0x24
 8020fc2:	2320      	movs	r3, #32
 8020fc4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8020fc8:	2330      	movs	r3, #48	@ 0x30
 8020fca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8020fce:	4623      	mov	r3, r4
 8020fd0:	469a      	mov	sl, r3
 8020fd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020fd6:	b10a      	cbz	r2, 8020fdc <_svfiprintf_r+0x60>
 8020fd8:	2a25      	cmp	r2, #37	@ 0x25
 8020fda:	d1f9      	bne.n	8020fd0 <_svfiprintf_r+0x54>
 8020fdc:	ebba 0b04 	subs.w	fp, sl, r4
 8020fe0:	d00b      	beq.n	8020ffa <_svfiprintf_r+0x7e>
 8020fe2:	465b      	mov	r3, fp
 8020fe4:	4622      	mov	r2, r4
 8020fe6:	4629      	mov	r1, r5
 8020fe8:	4638      	mov	r0, r7
 8020fea:	f7ff ff6c 	bl	8020ec6 <__ssputs_r>
 8020fee:	3001      	adds	r0, #1
 8020ff0:	f000 80a7 	beq.w	8021142 <_svfiprintf_r+0x1c6>
 8020ff4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020ff6:	445a      	add	r2, fp
 8020ff8:	9209      	str	r2, [sp, #36]	@ 0x24
 8020ffa:	f89a 3000 	ldrb.w	r3, [sl]
 8020ffe:	2b00      	cmp	r3, #0
 8021000:	f000 809f 	beq.w	8021142 <_svfiprintf_r+0x1c6>
 8021004:	2300      	movs	r3, #0
 8021006:	f04f 32ff 	mov.w	r2, #4294967295
 802100a:	f10a 0a01 	add.w	sl, sl, #1
 802100e:	9304      	str	r3, [sp, #16]
 8021010:	9307      	str	r3, [sp, #28]
 8021012:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8021016:	931a      	str	r3, [sp, #104]	@ 0x68
 8021018:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802101c:	4654      	mov	r4, sl
 802101e:	2205      	movs	r2, #5
 8021020:	484f      	ldr	r0, [pc, #316]	@ (8021160 <_svfiprintf_r+0x1e4>)
 8021022:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021026:	f7fe f858 	bl	801f0da <memchr>
 802102a:	9a04      	ldr	r2, [sp, #16]
 802102c:	b9d8      	cbnz	r0, 8021066 <_svfiprintf_r+0xea>
 802102e:	06d0      	lsls	r0, r2, #27
 8021030:	bf44      	itt	mi
 8021032:	2320      	movmi	r3, #32
 8021034:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8021038:	0711      	lsls	r1, r2, #28
 802103a:	bf44      	itt	mi
 802103c:	232b      	movmi	r3, #43	@ 0x2b
 802103e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8021042:	f89a 3000 	ldrb.w	r3, [sl]
 8021046:	2b2a      	cmp	r3, #42	@ 0x2a
 8021048:	d015      	beq.n	8021076 <_svfiprintf_r+0xfa>
 802104a:	9a07      	ldr	r2, [sp, #28]
 802104c:	4654      	mov	r4, sl
 802104e:	2000      	movs	r0, #0
 8021050:	f04f 0c0a 	mov.w	ip, #10
 8021054:	4621      	mov	r1, r4
 8021056:	f811 3b01 	ldrb.w	r3, [r1], #1
 802105a:	3b30      	subs	r3, #48	@ 0x30
 802105c:	2b09      	cmp	r3, #9
 802105e:	d94b      	bls.n	80210f8 <_svfiprintf_r+0x17c>
 8021060:	b1b0      	cbz	r0, 8021090 <_svfiprintf_r+0x114>
 8021062:	9207      	str	r2, [sp, #28]
 8021064:	e014      	b.n	8021090 <_svfiprintf_r+0x114>
 8021066:	eba0 0308 	sub.w	r3, r0, r8
 802106a:	46a2      	mov	sl, r4
 802106c:	fa09 f303 	lsl.w	r3, r9, r3
 8021070:	4313      	orrs	r3, r2
 8021072:	9304      	str	r3, [sp, #16]
 8021074:	e7d2      	b.n	802101c <_svfiprintf_r+0xa0>
 8021076:	9b03      	ldr	r3, [sp, #12]
 8021078:	1d19      	adds	r1, r3, #4
 802107a:	681b      	ldr	r3, [r3, #0]
 802107c:	2b00      	cmp	r3, #0
 802107e:	9103      	str	r1, [sp, #12]
 8021080:	bfbb      	ittet	lt
 8021082:	425b      	neglt	r3, r3
 8021084:	f042 0202 	orrlt.w	r2, r2, #2
 8021088:	9307      	strge	r3, [sp, #28]
 802108a:	9307      	strlt	r3, [sp, #28]
 802108c:	bfb8      	it	lt
 802108e:	9204      	strlt	r2, [sp, #16]
 8021090:	7823      	ldrb	r3, [r4, #0]
 8021092:	2b2e      	cmp	r3, #46	@ 0x2e
 8021094:	d10a      	bne.n	80210ac <_svfiprintf_r+0x130>
 8021096:	7863      	ldrb	r3, [r4, #1]
 8021098:	2b2a      	cmp	r3, #42	@ 0x2a
 802109a:	d132      	bne.n	8021102 <_svfiprintf_r+0x186>
 802109c:	9b03      	ldr	r3, [sp, #12]
 802109e:	3402      	adds	r4, #2
 80210a0:	1d1a      	adds	r2, r3, #4
 80210a2:	681b      	ldr	r3, [r3, #0]
 80210a4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80210a8:	9203      	str	r2, [sp, #12]
 80210aa:	9305      	str	r3, [sp, #20]
 80210ac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8021170 <_svfiprintf_r+0x1f4>
 80210b0:	2203      	movs	r2, #3
 80210b2:	7821      	ldrb	r1, [r4, #0]
 80210b4:	4650      	mov	r0, sl
 80210b6:	f7fe f810 	bl	801f0da <memchr>
 80210ba:	b138      	cbz	r0, 80210cc <_svfiprintf_r+0x150>
 80210bc:	eba0 000a 	sub.w	r0, r0, sl
 80210c0:	2240      	movs	r2, #64	@ 0x40
 80210c2:	9b04      	ldr	r3, [sp, #16]
 80210c4:	3401      	adds	r4, #1
 80210c6:	4082      	lsls	r2, r0
 80210c8:	4313      	orrs	r3, r2
 80210ca:	9304      	str	r3, [sp, #16]
 80210cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80210d0:	2206      	movs	r2, #6
 80210d2:	4824      	ldr	r0, [pc, #144]	@ (8021164 <_svfiprintf_r+0x1e8>)
 80210d4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80210d8:	f7fd ffff 	bl	801f0da <memchr>
 80210dc:	2800      	cmp	r0, #0
 80210de:	d036      	beq.n	802114e <_svfiprintf_r+0x1d2>
 80210e0:	4b21      	ldr	r3, [pc, #132]	@ (8021168 <_svfiprintf_r+0x1ec>)
 80210e2:	bb1b      	cbnz	r3, 802112c <_svfiprintf_r+0x1b0>
 80210e4:	9b03      	ldr	r3, [sp, #12]
 80210e6:	3307      	adds	r3, #7
 80210e8:	f023 0307 	bic.w	r3, r3, #7
 80210ec:	3308      	adds	r3, #8
 80210ee:	9303      	str	r3, [sp, #12]
 80210f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80210f2:	4433      	add	r3, r6
 80210f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80210f6:	e76a      	b.n	8020fce <_svfiprintf_r+0x52>
 80210f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80210fc:	460c      	mov	r4, r1
 80210fe:	2001      	movs	r0, #1
 8021100:	e7a8      	b.n	8021054 <_svfiprintf_r+0xd8>
 8021102:	2300      	movs	r3, #0
 8021104:	3401      	adds	r4, #1
 8021106:	f04f 0c0a 	mov.w	ip, #10
 802110a:	4619      	mov	r1, r3
 802110c:	9305      	str	r3, [sp, #20]
 802110e:	4620      	mov	r0, r4
 8021110:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021114:	3a30      	subs	r2, #48	@ 0x30
 8021116:	2a09      	cmp	r2, #9
 8021118:	d903      	bls.n	8021122 <_svfiprintf_r+0x1a6>
 802111a:	2b00      	cmp	r3, #0
 802111c:	d0c6      	beq.n	80210ac <_svfiprintf_r+0x130>
 802111e:	9105      	str	r1, [sp, #20]
 8021120:	e7c4      	b.n	80210ac <_svfiprintf_r+0x130>
 8021122:	fb0c 2101 	mla	r1, ip, r1, r2
 8021126:	4604      	mov	r4, r0
 8021128:	2301      	movs	r3, #1
 802112a:	e7f0      	b.n	802110e <_svfiprintf_r+0x192>
 802112c:	ab03      	add	r3, sp, #12
 802112e:	462a      	mov	r2, r5
 8021130:	a904      	add	r1, sp, #16
 8021132:	4638      	mov	r0, r7
 8021134:	9300      	str	r3, [sp, #0]
 8021136:	4b0d      	ldr	r3, [pc, #52]	@ (802116c <_svfiprintf_r+0x1f0>)
 8021138:	f7fc fdf0 	bl	801dd1c <_printf_float>
 802113c:	1c42      	adds	r2, r0, #1
 802113e:	4606      	mov	r6, r0
 8021140:	d1d6      	bne.n	80210f0 <_svfiprintf_r+0x174>
 8021142:	89ab      	ldrh	r3, [r5, #12]
 8021144:	065b      	lsls	r3, r3, #25
 8021146:	f53f af2d 	bmi.w	8020fa4 <_svfiprintf_r+0x28>
 802114a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802114c:	e72c      	b.n	8020fa8 <_svfiprintf_r+0x2c>
 802114e:	ab03      	add	r3, sp, #12
 8021150:	462a      	mov	r2, r5
 8021152:	a904      	add	r1, sp, #16
 8021154:	4638      	mov	r0, r7
 8021156:	9300      	str	r3, [sp, #0]
 8021158:	4b04      	ldr	r3, [pc, #16]	@ (802116c <_svfiprintf_r+0x1f0>)
 802115a:	f7fd f87b 	bl	801e254 <_printf_i>
 802115e:	e7ed      	b.n	802113c <_svfiprintf_r+0x1c0>
 8021160:	08024810 	.word	0x08024810
 8021164:	0802481a 	.word	0x0802481a
 8021168:	0801dd1d 	.word	0x0801dd1d
 802116c:	08020ec7 	.word	0x08020ec7
 8021170:	08024816 	.word	0x08024816

08021174 <_sungetc_r>:
 8021174:	b538      	push	{r3, r4, r5, lr}
 8021176:	1c4b      	adds	r3, r1, #1
 8021178:	4614      	mov	r4, r2
 802117a:	d103      	bne.n	8021184 <_sungetc_r+0x10>
 802117c:	f04f 35ff 	mov.w	r5, #4294967295
 8021180:	4628      	mov	r0, r5
 8021182:	bd38      	pop	{r3, r4, r5, pc}
 8021184:	8993      	ldrh	r3, [r2, #12]
 8021186:	b2cd      	uxtb	r5, r1
 8021188:	f023 0320 	bic.w	r3, r3, #32
 802118c:	8193      	strh	r3, [r2, #12]
 802118e:	6853      	ldr	r3, [r2, #4]
 8021190:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8021192:	b18a      	cbz	r2, 80211b8 <_sungetc_r+0x44>
 8021194:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8021196:	429a      	cmp	r2, r3
 8021198:	dd08      	ble.n	80211ac <_sungetc_r+0x38>
 802119a:	6823      	ldr	r3, [r4, #0]
 802119c:	1e5a      	subs	r2, r3, #1
 802119e:	6022      	str	r2, [r4, #0]
 80211a0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80211a4:	6863      	ldr	r3, [r4, #4]
 80211a6:	3301      	adds	r3, #1
 80211a8:	6063      	str	r3, [r4, #4]
 80211aa:	e7e9      	b.n	8021180 <_sungetc_r+0xc>
 80211ac:	4621      	mov	r1, r4
 80211ae:	f000 fd93 	bl	8021cd8 <__submore>
 80211b2:	2800      	cmp	r0, #0
 80211b4:	d0f1      	beq.n	802119a <_sungetc_r+0x26>
 80211b6:	e7e1      	b.n	802117c <_sungetc_r+0x8>
 80211b8:	6921      	ldr	r1, [r4, #16]
 80211ba:	6822      	ldr	r2, [r4, #0]
 80211bc:	b141      	cbz	r1, 80211d0 <_sungetc_r+0x5c>
 80211be:	4291      	cmp	r1, r2
 80211c0:	d206      	bcs.n	80211d0 <_sungetc_r+0x5c>
 80211c2:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80211c6:	42a9      	cmp	r1, r5
 80211c8:	d102      	bne.n	80211d0 <_sungetc_r+0x5c>
 80211ca:	3a01      	subs	r2, #1
 80211cc:	6022      	str	r2, [r4, #0]
 80211ce:	e7ea      	b.n	80211a6 <_sungetc_r+0x32>
 80211d0:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 80211d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80211d8:	6363      	str	r3, [r4, #52]	@ 0x34
 80211da:	2303      	movs	r3, #3
 80211dc:	63a3      	str	r3, [r4, #56]	@ 0x38
 80211de:	4623      	mov	r3, r4
 80211e0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80211e4:	6023      	str	r3, [r4, #0]
 80211e6:	2301      	movs	r3, #1
 80211e8:	e7de      	b.n	80211a8 <_sungetc_r+0x34>

080211ea <__ssrefill_r>:
 80211ea:	b510      	push	{r4, lr}
 80211ec:	460c      	mov	r4, r1
 80211ee:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80211f0:	b169      	cbz	r1, 802120e <__ssrefill_r+0x24>
 80211f2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80211f6:	4299      	cmp	r1, r3
 80211f8:	d001      	beq.n	80211fe <__ssrefill_r+0x14>
 80211fa:	f7fe fe09 	bl	801fe10 <_free_r>
 80211fe:	2000      	movs	r0, #0
 8021200:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8021202:	6360      	str	r0, [r4, #52]	@ 0x34
 8021204:	6063      	str	r3, [r4, #4]
 8021206:	b113      	cbz	r3, 802120e <__ssrefill_r+0x24>
 8021208:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 802120a:	6023      	str	r3, [r4, #0]
 802120c:	bd10      	pop	{r4, pc}
 802120e:	6923      	ldr	r3, [r4, #16]
 8021210:	f04f 30ff 	mov.w	r0, #4294967295
 8021214:	6023      	str	r3, [r4, #0]
 8021216:	2300      	movs	r3, #0
 8021218:	6063      	str	r3, [r4, #4]
 802121a:	89a3      	ldrh	r3, [r4, #12]
 802121c:	f043 0320 	orr.w	r3, r3, #32
 8021220:	81a3      	strh	r3, [r4, #12]
 8021222:	e7f3      	b.n	802120c <__ssrefill_r+0x22>

08021224 <__ssvfiscanf_r>:
 8021224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021228:	460c      	mov	r4, r1
 802122a:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 802122e:	2100      	movs	r1, #0
 8021230:	4606      	mov	r6, r0
 8021232:	f10d 0804 	add.w	r8, sp, #4
 8021236:	4fa5      	ldr	r7, [pc, #660]	@ (80214cc <__ssvfiscanf_r+0x2a8>)
 8021238:	9300      	str	r3, [sp, #0]
 802123a:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 802123e:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8021242:	49a3      	ldr	r1, [pc, #652]	@ (80214d0 <__ssvfiscanf_r+0x2ac>)
 8021244:	91a0      	str	r1, [sp, #640]	@ 0x280
 8021246:	49a3      	ldr	r1, [pc, #652]	@ (80214d4 <__ssvfiscanf_r+0x2b0>)
 8021248:	91a1      	str	r1, [sp, #644]	@ 0x284
 802124a:	7813      	ldrb	r3, [r2, #0]
 802124c:	2b00      	cmp	r3, #0
 802124e:	f000 8158 	beq.w	8021502 <__ssvfiscanf_r+0x2de>
 8021252:	5cf9      	ldrb	r1, [r7, r3]
 8021254:	1c55      	adds	r5, r2, #1
 8021256:	f011 0108 	ands.w	r1, r1, #8
 802125a:	d019      	beq.n	8021290 <__ssvfiscanf_r+0x6c>
 802125c:	6863      	ldr	r3, [r4, #4]
 802125e:	2b00      	cmp	r3, #0
 8021260:	dd0f      	ble.n	8021282 <__ssvfiscanf_r+0x5e>
 8021262:	6823      	ldr	r3, [r4, #0]
 8021264:	781a      	ldrb	r2, [r3, #0]
 8021266:	5cba      	ldrb	r2, [r7, r2]
 8021268:	0712      	lsls	r2, r2, #28
 802126a:	d401      	bmi.n	8021270 <__ssvfiscanf_r+0x4c>
 802126c:	462a      	mov	r2, r5
 802126e:	e7ec      	b.n	802124a <__ssvfiscanf_r+0x26>
 8021270:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8021272:	3301      	adds	r3, #1
 8021274:	3201      	adds	r2, #1
 8021276:	6023      	str	r3, [r4, #0]
 8021278:	9245      	str	r2, [sp, #276]	@ 0x114
 802127a:	6862      	ldr	r2, [r4, #4]
 802127c:	3a01      	subs	r2, #1
 802127e:	6062      	str	r2, [r4, #4]
 8021280:	e7ec      	b.n	802125c <__ssvfiscanf_r+0x38>
 8021282:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8021284:	4621      	mov	r1, r4
 8021286:	4630      	mov	r0, r6
 8021288:	4798      	blx	r3
 802128a:	2800      	cmp	r0, #0
 802128c:	d0e9      	beq.n	8021262 <__ssvfiscanf_r+0x3e>
 802128e:	e7ed      	b.n	802126c <__ssvfiscanf_r+0x48>
 8021290:	2b25      	cmp	r3, #37	@ 0x25
 8021292:	d012      	beq.n	80212ba <__ssvfiscanf_r+0x96>
 8021294:	4699      	mov	r9, r3
 8021296:	6863      	ldr	r3, [r4, #4]
 8021298:	2b00      	cmp	r3, #0
 802129a:	f340 8094 	ble.w	80213c6 <__ssvfiscanf_r+0x1a2>
 802129e:	6822      	ldr	r2, [r4, #0]
 80212a0:	7813      	ldrb	r3, [r2, #0]
 80212a2:	454b      	cmp	r3, r9
 80212a4:	f040 812d 	bne.w	8021502 <__ssvfiscanf_r+0x2de>
 80212a8:	6863      	ldr	r3, [r4, #4]
 80212aa:	3201      	adds	r2, #1
 80212ac:	3b01      	subs	r3, #1
 80212ae:	6022      	str	r2, [r4, #0]
 80212b0:	6063      	str	r3, [r4, #4]
 80212b2:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80212b4:	3301      	adds	r3, #1
 80212b6:	9345      	str	r3, [sp, #276]	@ 0x114
 80212b8:	e7d8      	b.n	802126c <__ssvfiscanf_r+0x48>
 80212ba:	9141      	str	r1, [sp, #260]	@ 0x104
 80212bc:	9143      	str	r1, [sp, #268]	@ 0x10c
 80212be:	7853      	ldrb	r3, [r2, #1]
 80212c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80212c2:	bf04      	itt	eq
 80212c4:	2310      	moveq	r3, #16
 80212c6:	1c95      	addeq	r5, r2, #2
 80212c8:	f04f 020a 	mov.w	r2, #10
 80212cc:	bf08      	it	eq
 80212ce:	9341      	streq	r3, [sp, #260]	@ 0x104
 80212d0:	46a9      	mov	r9, r5
 80212d2:	f819 1b01 	ldrb.w	r1, [r9], #1
 80212d6:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80212da:	2b09      	cmp	r3, #9
 80212dc:	d91e      	bls.n	802131c <__ssvfiscanf_r+0xf8>
 80212de:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 80214d8 <__ssvfiscanf_r+0x2b4>
 80212e2:	2203      	movs	r2, #3
 80212e4:	4650      	mov	r0, sl
 80212e6:	f7fd fef8 	bl	801f0da <memchr>
 80212ea:	b138      	cbz	r0, 80212fc <__ssvfiscanf_r+0xd8>
 80212ec:	eba0 000a 	sub.w	r0, r0, sl
 80212f0:	2301      	movs	r3, #1
 80212f2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80212f4:	464d      	mov	r5, r9
 80212f6:	4083      	lsls	r3, r0
 80212f8:	4313      	orrs	r3, r2
 80212fa:	9341      	str	r3, [sp, #260]	@ 0x104
 80212fc:	f815 3b01 	ldrb.w	r3, [r5], #1
 8021300:	2b78      	cmp	r3, #120	@ 0x78
 8021302:	d806      	bhi.n	8021312 <__ssvfiscanf_r+0xee>
 8021304:	2b57      	cmp	r3, #87	@ 0x57
 8021306:	d810      	bhi.n	802132a <__ssvfiscanf_r+0x106>
 8021308:	2b25      	cmp	r3, #37	@ 0x25
 802130a:	d0c3      	beq.n	8021294 <__ssvfiscanf_r+0x70>
 802130c:	d856      	bhi.n	80213bc <__ssvfiscanf_r+0x198>
 802130e:	2b00      	cmp	r3, #0
 8021310:	d064      	beq.n	80213dc <__ssvfiscanf_r+0x1b8>
 8021312:	2303      	movs	r3, #3
 8021314:	9347      	str	r3, [sp, #284]	@ 0x11c
 8021316:	230a      	movs	r3, #10
 8021318:	9342      	str	r3, [sp, #264]	@ 0x108
 802131a:	e077      	b.n	802140c <__ssvfiscanf_r+0x1e8>
 802131c:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 802131e:	464d      	mov	r5, r9
 8021320:	fb02 1103 	mla	r1, r2, r3, r1
 8021324:	3930      	subs	r1, #48	@ 0x30
 8021326:	9143      	str	r1, [sp, #268]	@ 0x10c
 8021328:	e7d2      	b.n	80212d0 <__ssvfiscanf_r+0xac>
 802132a:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 802132e:	2a20      	cmp	r2, #32
 8021330:	d8ef      	bhi.n	8021312 <__ssvfiscanf_r+0xee>
 8021332:	a101      	add	r1, pc, #4	@ (adr r1, 8021338 <__ssvfiscanf_r+0x114>)
 8021334:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8021338:	080213eb 	.word	0x080213eb
 802133c:	08021313 	.word	0x08021313
 8021340:	08021313 	.word	0x08021313
 8021344:	08021445 	.word	0x08021445
 8021348:	08021313 	.word	0x08021313
 802134c:	08021313 	.word	0x08021313
 8021350:	08021313 	.word	0x08021313
 8021354:	08021313 	.word	0x08021313
 8021358:	08021313 	.word	0x08021313
 802135c:	08021313 	.word	0x08021313
 8021360:	08021313 	.word	0x08021313
 8021364:	0802145b 	.word	0x0802145b
 8021368:	08021441 	.word	0x08021441
 802136c:	080213c3 	.word	0x080213c3
 8021370:	080213c3 	.word	0x080213c3
 8021374:	080213c3 	.word	0x080213c3
 8021378:	08021313 	.word	0x08021313
 802137c:	080213fd 	.word	0x080213fd
 8021380:	08021313 	.word	0x08021313
 8021384:	08021313 	.word	0x08021313
 8021388:	08021313 	.word	0x08021313
 802138c:	08021313 	.word	0x08021313
 8021390:	0802146b 	.word	0x0802146b
 8021394:	08021405 	.word	0x08021405
 8021398:	080213e3 	.word	0x080213e3
 802139c:	08021313 	.word	0x08021313
 80213a0:	08021313 	.word	0x08021313
 80213a4:	08021467 	.word	0x08021467
 80213a8:	08021313 	.word	0x08021313
 80213ac:	08021441 	.word	0x08021441
 80213b0:	08021313 	.word	0x08021313
 80213b4:	08021313 	.word	0x08021313
 80213b8:	080213eb 	.word	0x080213eb
 80213bc:	3b45      	subs	r3, #69	@ 0x45
 80213be:	2b02      	cmp	r3, #2
 80213c0:	d8a7      	bhi.n	8021312 <__ssvfiscanf_r+0xee>
 80213c2:	2305      	movs	r3, #5
 80213c4:	e021      	b.n	802140a <__ssvfiscanf_r+0x1e6>
 80213c6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80213c8:	4621      	mov	r1, r4
 80213ca:	4630      	mov	r0, r6
 80213cc:	4798      	blx	r3
 80213ce:	2800      	cmp	r0, #0
 80213d0:	f43f af65 	beq.w	802129e <__ssvfiscanf_r+0x7a>
 80213d4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80213d6:	2800      	cmp	r0, #0
 80213d8:	f040 808b 	bne.w	80214f2 <__ssvfiscanf_r+0x2ce>
 80213dc:	f04f 30ff 	mov.w	r0, #4294967295
 80213e0:	e08b      	b.n	80214fa <__ssvfiscanf_r+0x2d6>
 80213e2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80213e4:	f042 0220 	orr.w	r2, r2, #32
 80213e8:	9241      	str	r2, [sp, #260]	@ 0x104
 80213ea:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80213ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80213f0:	9241      	str	r2, [sp, #260]	@ 0x104
 80213f2:	2210      	movs	r2, #16
 80213f4:	2b6e      	cmp	r3, #110	@ 0x6e
 80213f6:	9242      	str	r2, [sp, #264]	@ 0x108
 80213f8:	d902      	bls.n	8021400 <__ssvfiscanf_r+0x1dc>
 80213fa:	e005      	b.n	8021408 <__ssvfiscanf_r+0x1e4>
 80213fc:	2300      	movs	r3, #0
 80213fe:	9342      	str	r3, [sp, #264]	@ 0x108
 8021400:	2303      	movs	r3, #3
 8021402:	e002      	b.n	802140a <__ssvfiscanf_r+0x1e6>
 8021404:	2308      	movs	r3, #8
 8021406:	9342      	str	r3, [sp, #264]	@ 0x108
 8021408:	2304      	movs	r3, #4
 802140a:	9347      	str	r3, [sp, #284]	@ 0x11c
 802140c:	6863      	ldr	r3, [r4, #4]
 802140e:	2b00      	cmp	r3, #0
 8021410:	dd3a      	ble.n	8021488 <__ssvfiscanf_r+0x264>
 8021412:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8021414:	0659      	lsls	r1, r3, #25
 8021416:	d404      	bmi.n	8021422 <__ssvfiscanf_r+0x1fe>
 8021418:	6823      	ldr	r3, [r4, #0]
 802141a:	781a      	ldrb	r2, [r3, #0]
 802141c:	5cba      	ldrb	r2, [r7, r2]
 802141e:	0712      	lsls	r2, r2, #28
 8021420:	d439      	bmi.n	8021496 <__ssvfiscanf_r+0x272>
 8021422:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8021424:	2b02      	cmp	r3, #2
 8021426:	dc48      	bgt.n	80214ba <__ssvfiscanf_r+0x296>
 8021428:	466b      	mov	r3, sp
 802142a:	4622      	mov	r2, r4
 802142c:	a941      	add	r1, sp, #260	@ 0x104
 802142e:	4630      	mov	r0, r6
 8021430:	f000 f9ae 	bl	8021790 <_scanf_chars>
 8021434:	2801      	cmp	r0, #1
 8021436:	d064      	beq.n	8021502 <__ssvfiscanf_r+0x2de>
 8021438:	2802      	cmp	r0, #2
 802143a:	f47f af17 	bne.w	802126c <__ssvfiscanf_r+0x48>
 802143e:	e7c9      	b.n	80213d4 <__ssvfiscanf_r+0x1b0>
 8021440:	220a      	movs	r2, #10
 8021442:	e7d7      	b.n	80213f4 <__ssvfiscanf_r+0x1d0>
 8021444:	4629      	mov	r1, r5
 8021446:	4640      	mov	r0, r8
 8021448:	f000 fc0d 	bl	8021c66 <__sccl>
 802144c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 802144e:	4605      	mov	r5, r0
 8021450:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8021454:	9341      	str	r3, [sp, #260]	@ 0x104
 8021456:	2301      	movs	r3, #1
 8021458:	e7d7      	b.n	802140a <__ssvfiscanf_r+0x1e6>
 802145a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 802145c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8021460:	9341      	str	r3, [sp, #260]	@ 0x104
 8021462:	2300      	movs	r3, #0
 8021464:	e7d1      	b.n	802140a <__ssvfiscanf_r+0x1e6>
 8021466:	2302      	movs	r3, #2
 8021468:	e7cf      	b.n	802140a <__ssvfiscanf_r+0x1e6>
 802146a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 802146c:	06c3      	lsls	r3, r0, #27
 802146e:	f53f aefd 	bmi.w	802126c <__ssvfiscanf_r+0x48>
 8021472:	9b00      	ldr	r3, [sp, #0]
 8021474:	07c0      	lsls	r0, r0, #31
 8021476:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8021478:	f103 0104 	add.w	r1, r3, #4
 802147c:	9100      	str	r1, [sp, #0]
 802147e:	681b      	ldr	r3, [r3, #0]
 8021480:	bf4c      	ite	mi
 8021482:	801a      	strhmi	r2, [r3, #0]
 8021484:	601a      	strpl	r2, [r3, #0]
 8021486:	e6f1      	b.n	802126c <__ssvfiscanf_r+0x48>
 8021488:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 802148a:	4621      	mov	r1, r4
 802148c:	4630      	mov	r0, r6
 802148e:	4798      	blx	r3
 8021490:	2800      	cmp	r0, #0
 8021492:	d0be      	beq.n	8021412 <__ssvfiscanf_r+0x1ee>
 8021494:	e79e      	b.n	80213d4 <__ssvfiscanf_r+0x1b0>
 8021496:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8021498:	3201      	adds	r2, #1
 802149a:	9245      	str	r2, [sp, #276]	@ 0x114
 802149c:	6862      	ldr	r2, [r4, #4]
 802149e:	3a01      	subs	r2, #1
 80214a0:	2a00      	cmp	r2, #0
 80214a2:	6062      	str	r2, [r4, #4]
 80214a4:	dd02      	ble.n	80214ac <__ssvfiscanf_r+0x288>
 80214a6:	3301      	adds	r3, #1
 80214a8:	6023      	str	r3, [r4, #0]
 80214aa:	e7b5      	b.n	8021418 <__ssvfiscanf_r+0x1f4>
 80214ac:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80214ae:	4621      	mov	r1, r4
 80214b0:	4630      	mov	r0, r6
 80214b2:	4798      	blx	r3
 80214b4:	2800      	cmp	r0, #0
 80214b6:	d0af      	beq.n	8021418 <__ssvfiscanf_r+0x1f4>
 80214b8:	e78c      	b.n	80213d4 <__ssvfiscanf_r+0x1b0>
 80214ba:	2b04      	cmp	r3, #4
 80214bc:	dc0e      	bgt.n	80214dc <__ssvfiscanf_r+0x2b8>
 80214be:	466b      	mov	r3, sp
 80214c0:	4622      	mov	r2, r4
 80214c2:	a941      	add	r1, sp, #260	@ 0x104
 80214c4:	4630      	mov	r0, r6
 80214c6:	f000 f9bd 	bl	8021844 <_scanf_i>
 80214ca:	e7b3      	b.n	8021434 <__ssvfiscanf_r+0x210>
 80214cc:	080243f9 	.word	0x080243f9
 80214d0:	08021175 	.word	0x08021175
 80214d4:	080211eb 	.word	0x080211eb
 80214d8:	08024816 	.word	0x08024816
 80214dc:	4b0a      	ldr	r3, [pc, #40]	@ (8021508 <__ssvfiscanf_r+0x2e4>)
 80214de:	2b00      	cmp	r3, #0
 80214e0:	f43f aec4 	beq.w	802126c <__ssvfiscanf_r+0x48>
 80214e4:	466b      	mov	r3, sp
 80214e6:	4622      	mov	r2, r4
 80214e8:	a941      	add	r1, sp, #260	@ 0x104
 80214ea:	4630      	mov	r0, r6
 80214ec:	f7fc ffd2 	bl	801e494 <_scanf_float>
 80214f0:	e7a0      	b.n	8021434 <__ssvfiscanf_r+0x210>
 80214f2:	89a3      	ldrh	r3, [r4, #12]
 80214f4:	065b      	lsls	r3, r3, #25
 80214f6:	f53f af71 	bmi.w	80213dc <__ssvfiscanf_r+0x1b8>
 80214fa:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 80214fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021502:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8021504:	e7f9      	b.n	80214fa <__ssvfiscanf_r+0x2d6>
 8021506:	bf00      	nop
 8021508:	0801e495 	.word	0x0801e495

0802150c <__sfputc_r>:
 802150c:	6893      	ldr	r3, [r2, #8]
 802150e:	3b01      	subs	r3, #1
 8021510:	2b00      	cmp	r3, #0
 8021512:	6093      	str	r3, [r2, #8]
 8021514:	b410      	push	{r4}
 8021516:	da08      	bge.n	802152a <__sfputc_r+0x1e>
 8021518:	6994      	ldr	r4, [r2, #24]
 802151a:	42a3      	cmp	r3, r4
 802151c:	db01      	blt.n	8021522 <__sfputc_r+0x16>
 802151e:	290a      	cmp	r1, #10
 8021520:	d103      	bne.n	802152a <__sfputc_r+0x1e>
 8021522:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021526:	f7fd bbdf 	b.w	801ece8 <__swbuf_r>
 802152a:	6813      	ldr	r3, [r2, #0]
 802152c:	1c58      	adds	r0, r3, #1
 802152e:	6010      	str	r0, [r2, #0]
 8021530:	4608      	mov	r0, r1
 8021532:	7019      	strb	r1, [r3, #0]
 8021534:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021538:	4770      	bx	lr

0802153a <__sfputs_r>:
 802153a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802153c:	4606      	mov	r6, r0
 802153e:	460f      	mov	r7, r1
 8021540:	4614      	mov	r4, r2
 8021542:	18d5      	adds	r5, r2, r3
 8021544:	42ac      	cmp	r4, r5
 8021546:	d101      	bne.n	802154c <__sfputs_r+0x12>
 8021548:	2000      	movs	r0, #0
 802154a:	e007      	b.n	802155c <__sfputs_r+0x22>
 802154c:	463a      	mov	r2, r7
 802154e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021552:	4630      	mov	r0, r6
 8021554:	f7ff ffda 	bl	802150c <__sfputc_r>
 8021558:	1c43      	adds	r3, r0, #1
 802155a:	d1f3      	bne.n	8021544 <__sfputs_r+0xa>
 802155c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08021560 <_vfiprintf_r>:
 8021560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021564:	460d      	mov	r5, r1
 8021566:	b09d      	sub	sp, #116	@ 0x74
 8021568:	4614      	mov	r4, r2
 802156a:	4698      	mov	r8, r3
 802156c:	4606      	mov	r6, r0
 802156e:	b118      	cbz	r0, 8021578 <_vfiprintf_r+0x18>
 8021570:	6a03      	ldr	r3, [r0, #32]
 8021572:	b90b      	cbnz	r3, 8021578 <_vfiprintf_r+0x18>
 8021574:	f7fd fa2c 	bl	801e9d0 <__sinit>
 8021578:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802157a:	07d9      	lsls	r1, r3, #31
 802157c:	d405      	bmi.n	802158a <_vfiprintf_r+0x2a>
 802157e:	89ab      	ldrh	r3, [r5, #12]
 8021580:	059a      	lsls	r2, r3, #22
 8021582:	d402      	bmi.n	802158a <_vfiprintf_r+0x2a>
 8021584:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8021586:	f7fd fd9e 	bl	801f0c6 <__retarget_lock_acquire_recursive>
 802158a:	89ab      	ldrh	r3, [r5, #12]
 802158c:	071b      	lsls	r3, r3, #28
 802158e:	d501      	bpl.n	8021594 <_vfiprintf_r+0x34>
 8021590:	692b      	ldr	r3, [r5, #16]
 8021592:	b99b      	cbnz	r3, 80215bc <_vfiprintf_r+0x5c>
 8021594:	4629      	mov	r1, r5
 8021596:	4630      	mov	r0, r6
 8021598:	f7fd fbe4 	bl	801ed64 <__swsetup_r>
 802159c:	b170      	cbz	r0, 80215bc <_vfiprintf_r+0x5c>
 802159e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80215a0:	07dc      	lsls	r4, r3, #31
 80215a2:	d504      	bpl.n	80215ae <_vfiprintf_r+0x4e>
 80215a4:	f04f 30ff 	mov.w	r0, #4294967295
 80215a8:	b01d      	add	sp, #116	@ 0x74
 80215aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80215ae:	89ab      	ldrh	r3, [r5, #12]
 80215b0:	0598      	lsls	r0, r3, #22
 80215b2:	d4f7      	bmi.n	80215a4 <_vfiprintf_r+0x44>
 80215b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80215b6:	f7fd fd87 	bl	801f0c8 <__retarget_lock_release_recursive>
 80215ba:	e7f3      	b.n	80215a4 <_vfiprintf_r+0x44>
 80215bc:	2300      	movs	r3, #0
 80215be:	f8cd 800c 	str.w	r8, [sp, #12]
 80215c2:	f04f 0901 	mov.w	r9, #1
 80215c6:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 802177c <_vfiprintf_r+0x21c>
 80215ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80215cc:	2320      	movs	r3, #32
 80215ce:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80215d2:	2330      	movs	r3, #48	@ 0x30
 80215d4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80215d8:	4623      	mov	r3, r4
 80215da:	469a      	mov	sl, r3
 80215dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80215e0:	b10a      	cbz	r2, 80215e6 <_vfiprintf_r+0x86>
 80215e2:	2a25      	cmp	r2, #37	@ 0x25
 80215e4:	d1f9      	bne.n	80215da <_vfiprintf_r+0x7a>
 80215e6:	ebba 0b04 	subs.w	fp, sl, r4
 80215ea:	d00b      	beq.n	8021604 <_vfiprintf_r+0xa4>
 80215ec:	465b      	mov	r3, fp
 80215ee:	4622      	mov	r2, r4
 80215f0:	4629      	mov	r1, r5
 80215f2:	4630      	mov	r0, r6
 80215f4:	f7ff ffa1 	bl	802153a <__sfputs_r>
 80215f8:	3001      	adds	r0, #1
 80215fa:	f000 80a7 	beq.w	802174c <_vfiprintf_r+0x1ec>
 80215fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021600:	445a      	add	r2, fp
 8021602:	9209      	str	r2, [sp, #36]	@ 0x24
 8021604:	f89a 3000 	ldrb.w	r3, [sl]
 8021608:	2b00      	cmp	r3, #0
 802160a:	f000 809f 	beq.w	802174c <_vfiprintf_r+0x1ec>
 802160e:	2300      	movs	r3, #0
 8021610:	f04f 32ff 	mov.w	r2, #4294967295
 8021614:	f10a 0a01 	add.w	sl, sl, #1
 8021618:	9304      	str	r3, [sp, #16]
 802161a:	9307      	str	r3, [sp, #28]
 802161c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8021620:	931a      	str	r3, [sp, #104]	@ 0x68
 8021622:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021626:	4654      	mov	r4, sl
 8021628:	2205      	movs	r2, #5
 802162a:	4854      	ldr	r0, [pc, #336]	@ (802177c <_vfiprintf_r+0x21c>)
 802162c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021630:	f7fd fd53 	bl	801f0da <memchr>
 8021634:	9a04      	ldr	r2, [sp, #16]
 8021636:	b9d8      	cbnz	r0, 8021670 <_vfiprintf_r+0x110>
 8021638:	06d1      	lsls	r1, r2, #27
 802163a:	bf44      	itt	mi
 802163c:	2320      	movmi	r3, #32
 802163e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8021642:	0713      	lsls	r3, r2, #28
 8021644:	bf44      	itt	mi
 8021646:	232b      	movmi	r3, #43	@ 0x2b
 8021648:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802164c:	f89a 3000 	ldrb.w	r3, [sl]
 8021650:	2b2a      	cmp	r3, #42	@ 0x2a
 8021652:	d015      	beq.n	8021680 <_vfiprintf_r+0x120>
 8021654:	9a07      	ldr	r2, [sp, #28]
 8021656:	4654      	mov	r4, sl
 8021658:	2000      	movs	r0, #0
 802165a:	f04f 0c0a 	mov.w	ip, #10
 802165e:	4621      	mov	r1, r4
 8021660:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021664:	3b30      	subs	r3, #48	@ 0x30
 8021666:	2b09      	cmp	r3, #9
 8021668:	d94b      	bls.n	8021702 <_vfiprintf_r+0x1a2>
 802166a:	b1b0      	cbz	r0, 802169a <_vfiprintf_r+0x13a>
 802166c:	9207      	str	r2, [sp, #28]
 802166e:	e014      	b.n	802169a <_vfiprintf_r+0x13a>
 8021670:	eba0 0308 	sub.w	r3, r0, r8
 8021674:	46a2      	mov	sl, r4
 8021676:	fa09 f303 	lsl.w	r3, r9, r3
 802167a:	4313      	orrs	r3, r2
 802167c:	9304      	str	r3, [sp, #16]
 802167e:	e7d2      	b.n	8021626 <_vfiprintf_r+0xc6>
 8021680:	9b03      	ldr	r3, [sp, #12]
 8021682:	1d19      	adds	r1, r3, #4
 8021684:	681b      	ldr	r3, [r3, #0]
 8021686:	2b00      	cmp	r3, #0
 8021688:	9103      	str	r1, [sp, #12]
 802168a:	bfbb      	ittet	lt
 802168c:	425b      	neglt	r3, r3
 802168e:	f042 0202 	orrlt.w	r2, r2, #2
 8021692:	9307      	strge	r3, [sp, #28]
 8021694:	9307      	strlt	r3, [sp, #28]
 8021696:	bfb8      	it	lt
 8021698:	9204      	strlt	r2, [sp, #16]
 802169a:	7823      	ldrb	r3, [r4, #0]
 802169c:	2b2e      	cmp	r3, #46	@ 0x2e
 802169e:	d10a      	bne.n	80216b6 <_vfiprintf_r+0x156>
 80216a0:	7863      	ldrb	r3, [r4, #1]
 80216a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80216a4:	d132      	bne.n	802170c <_vfiprintf_r+0x1ac>
 80216a6:	9b03      	ldr	r3, [sp, #12]
 80216a8:	3402      	adds	r4, #2
 80216aa:	1d1a      	adds	r2, r3, #4
 80216ac:	681b      	ldr	r3, [r3, #0]
 80216ae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80216b2:	9203      	str	r2, [sp, #12]
 80216b4:	9305      	str	r3, [sp, #20]
 80216b6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 802178c <_vfiprintf_r+0x22c>
 80216ba:	2203      	movs	r2, #3
 80216bc:	7821      	ldrb	r1, [r4, #0]
 80216be:	4650      	mov	r0, sl
 80216c0:	f7fd fd0b 	bl	801f0da <memchr>
 80216c4:	b138      	cbz	r0, 80216d6 <_vfiprintf_r+0x176>
 80216c6:	eba0 000a 	sub.w	r0, r0, sl
 80216ca:	2240      	movs	r2, #64	@ 0x40
 80216cc:	9b04      	ldr	r3, [sp, #16]
 80216ce:	3401      	adds	r4, #1
 80216d0:	4082      	lsls	r2, r0
 80216d2:	4313      	orrs	r3, r2
 80216d4:	9304      	str	r3, [sp, #16]
 80216d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80216da:	2206      	movs	r2, #6
 80216dc:	4828      	ldr	r0, [pc, #160]	@ (8021780 <_vfiprintf_r+0x220>)
 80216de:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80216e2:	f7fd fcfa 	bl	801f0da <memchr>
 80216e6:	2800      	cmp	r0, #0
 80216e8:	d03f      	beq.n	802176a <_vfiprintf_r+0x20a>
 80216ea:	4b26      	ldr	r3, [pc, #152]	@ (8021784 <_vfiprintf_r+0x224>)
 80216ec:	bb1b      	cbnz	r3, 8021736 <_vfiprintf_r+0x1d6>
 80216ee:	9b03      	ldr	r3, [sp, #12]
 80216f0:	3307      	adds	r3, #7
 80216f2:	f023 0307 	bic.w	r3, r3, #7
 80216f6:	3308      	adds	r3, #8
 80216f8:	9303      	str	r3, [sp, #12]
 80216fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80216fc:	443b      	add	r3, r7
 80216fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8021700:	e76a      	b.n	80215d8 <_vfiprintf_r+0x78>
 8021702:	fb0c 3202 	mla	r2, ip, r2, r3
 8021706:	460c      	mov	r4, r1
 8021708:	2001      	movs	r0, #1
 802170a:	e7a8      	b.n	802165e <_vfiprintf_r+0xfe>
 802170c:	2300      	movs	r3, #0
 802170e:	3401      	adds	r4, #1
 8021710:	f04f 0c0a 	mov.w	ip, #10
 8021714:	4619      	mov	r1, r3
 8021716:	9305      	str	r3, [sp, #20]
 8021718:	4620      	mov	r0, r4
 802171a:	f810 2b01 	ldrb.w	r2, [r0], #1
 802171e:	3a30      	subs	r2, #48	@ 0x30
 8021720:	2a09      	cmp	r2, #9
 8021722:	d903      	bls.n	802172c <_vfiprintf_r+0x1cc>
 8021724:	2b00      	cmp	r3, #0
 8021726:	d0c6      	beq.n	80216b6 <_vfiprintf_r+0x156>
 8021728:	9105      	str	r1, [sp, #20]
 802172a:	e7c4      	b.n	80216b6 <_vfiprintf_r+0x156>
 802172c:	fb0c 2101 	mla	r1, ip, r1, r2
 8021730:	4604      	mov	r4, r0
 8021732:	2301      	movs	r3, #1
 8021734:	e7f0      	b.n	8021718 <_vfiprintf_r+0x1b8>
 8021736:	ab03      	add	r3, sp, #12
 8021738:	462a      	mov	r2, r5
 802173a:	a904      	add	r1, sp, #16
 802173c:	4630      	mov	r0, r6
 802173e:	9300      	str	r3, [sp, #0]
 8021740:	4b11      	ldr	r3, [pc, #68]	@ (8021788 <_vfiprintf_r+0x228>)
 8021742:	f7fc faeb 	bl	801dd1c <_printf_float>
 8021746:	4607      	mov	r7, r0
 8021748:	1c78      	adds	r0, r7, #1
 802174a:	d1d6      	bne.n	80216fa <_vfiprintf_r+0x19a>
 802174c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802174e:	07d9      	lsls	r1, r3, #31
 8021750:	d405      	bmi.n	802175e <_vfiprintf_r+0x1fe>
 8021752:	89ab      	ldrh	r3, [r5, #12]
 8021754:	059a      	lsls	r2, r3, #22
 8021756:	d402      	bmi.n	802175e <_vfiprintf_r+0x1fe>
 8021758:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802175a:	f7fd fcb5 	bl	801f0c8 <__retarget_lock_release_recursive>
 802175e:	89ab      	ldrh	r3, [r5, #12]
 8021760:	065b      	lsls	r3, r3, #25
 8021762:	f53f af1f 	bmi.w	80215a4 <_vfiprintf_r+0x44>
 8021766:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8021768:	e71e      	b.n	80215a8 <_vfiprintf_r+0x48>
 802176a:	ab03      	add	r3, sp, #12
 802176c:	462a      	mov	r2, r5
 802176e:	a904      	add	r1, sp, #16
 8021770:	4630      	mov	r0, r6
 8021772:	9300      	str	r3, [sp, #0]
 8021774:	4b04      	ldr	r3, [pc, #16]	@ (8021788 <_vfiprintf_r+0x228>)
 8021776:	f7fc fd6d 	bl	801e254 <_printf_i>
 802177a:	e7e4      	b.n	8021746 <_vfiprintf_r+0x1e6>
 802177c:	08024810 	.word	0x08024810
 8021780:	0802481a 	.word	0x0802481a
 8021784:	0801dd1d 	.word	0x0801dd1d
 8021788:	0802153b 	.word	0x0802153b
 802178c:	08024816 	.word	0x08024816

08021790 <_scanf_chars>:
 8021790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021794:	4615      	mov	r5, r2
 8021796:	688a      	ldr	r2, [r1, #8]
 8021798:	4680      	mov	r8, r0
 802179a:	460c      	mov	r4, r1
 802179c:	b932      	cbnz	r2, 80217ac <_scanf_chars+0x1c>
 802179e:	698a      	ldr	r2, [r1, #24]
 80217a0:	2a00      	cmp	r2, #0
 80217a2:	bf14      	ite	ne
 80217a4:	f04f 32ff 	movne.w	r2, #4294967295
 80217a8:	2201      	moveq	r2, #1
 80217aa:	608a      	str	r2, [r1, #8]
 80217ac:	6822      	ldr	r2, [r4, #0]
 80217ae:	2700      	movs	r7, #0
 80217b0:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 8021840 <_scanf_chars+0xb0>
 80217b4:	06d1      	lsls	r1, r2, #27
 80217b6:	bf5f      	itttt	pl
 80217b8:	681a      	ldrpl	r2, [r3, #0]
 80217ba:	1d11      	addpl	r1, r2, #4
 80217bc:	6019      	strpl	r1, [r3, #0]
 80217be:	6816      	ldrpl	r6, [r2, #0]
 80217c0:	69a0      	ldr	r0, [r4, #24]
 80217c2:	b188      	cbz	r0, 80217e8 <_scanf_chars+0x58>
 80217c4:	2801      	cmp	r0, #1
 80217c6:	d107      	bne.n	80217d8 <_scanf_chars+0x48>
 80217c8:	682b      	ldr	r3, [r5, #0]
 80217ca:	781a      	ldrb	r2, [r3, #0]
 80217cc:	6963      	ldr	r3, [r4, #20]
 80217ce:	5c9b      	ldrb	r3, [r3, r2]
 80217d0:	b953      	cbnz	r3, 80217e8 <_scanf_chars+0x58>
 80217d2:	2f00      	cmp	r7, #0
 80217d4:	d031      	beq.n	802183a <_scanf_chars+0xaa>
 80217d6:	e022      	b.n	802181e <_scanf_chars+0x8e>
 80217d8:	2802      	cmp	r0, #2
 80217da:	d120      	bne.n	802181e <_scanf_chars+0x8e>
 80217dc:	682b      	ldr	r3, [r5, #0]
 80217de:	781b      	ldrb	r3, [r3, #0]
 80217e0:	f819 3003 	ldrb.w	r3, [r9, r3]
 80217e4:	071b      	lsls	r3, r3, #28
 80217e6:	d41a      	bmi.n	802181e <_scanf_chars+0x8e>
 80217e8:	6823      	ldr	r3, [r4, #0]
 80217ea:	3701      	adds	r7, #1
 80217ec:	06da      	lsls	r2, r3, #27
 80217ee:	bf5e      	ittt	pl
 80217f0:	682b      	ldrpl	r3, [r5, #0]
 80217f2:	781b      	ldrbpl	r3, [r3, #0]
 80217f4:	f806 3b01 	strbpl.w	r3, [r6], #1
 80217f8:	682a      	ldr	r2, [r5, #0]
 80217fa:	686b      	ldr	r3, [r5, #4]
 80217fc:	3201      	adds	r2, #1
 80217fe:	3b01      	subs	r3, #1
 8021800:	602a      	str	r2, [r5, #0]
 8021802:	68a2      	ldr	r2, [r4, #8]
 8021804:	606b      	str	r3, [r5, #4]
 8021806:	3a01      	subs	r2, #1
 8021808:	60a2      	str	r2, [r4, #8]
 802180a:	b142      	cbz	r2, 802181e <_scanf_chars+0x8e>
 802180c:	2b00      	cmp	r3, #0
 802180e:	dcd7      	bgt.n	80217c0 <_scanf_chars+0x30>
 8021810:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8021814:	4629      	mov	r1, r5
 8021816:	4640      	mov	r0, r8
 8021818:	4798      	blx	r3
 802181a:	2800      	cmp	r0, #0
 802181c:	d0d0      	beq.n	80217c0 <_scanf_chars+0x30>
 802181e:	6823      	ldr	r3, [r4, #0]
 8021820:	f013 0310 	ands.w	r3, r3, #16
 8021824:	d105      	bne.n	8021832 <_scanf_chars+0xa2>
 8021826:	68e2      	ldr	r2, [r4, #12]
 8021828:	3201      	adds	r2, #1
 802182a:	60e2      	str	r2, [r4, #12]
 802182c:	69a2      	ldr	r2, [r4, #24]
 802182e:	b102      	cbz	r2, 8021832 <_scanf_chars+0xa2>
 8021830:	7033      	strb	r3, [r6, #0]
 8021832:	6923      	ldr	r3, [r4, #16]
 8021834:	2000      	movs	r0, #0
 8021836:	443b      	add	r3, r7
 8021838:	6123      	str	r3, [r4, #16]
 802183a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802183e:	bf00      	nop
 8021840:	080243f9 	.word	0x080243f9

08021844 <_scanf_i>:
 8021844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021848:	4698      	mov	r8, r3
 802184a:	b087      	sub	sp, #28
 802184c:	4b72      	ldr	r3, [pc, #456]	@ (8021a18 <_scanf_i+0x1d4>)
 802184e:	460c      	mov	r4, r1
 8021850:	4682      	mov	sl, r0
 8021852:	4616      	mov	r6, r2
 8021854:	4627      	mov	r7, r4
 8021856:	f04f 0b00 	mov.w	fp, #0
 802185a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 802185e:	ab03      	add	r3, sp, #12
 8021860:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8021864:	4b6d      	ldr	r3, [pc, #436]	@ (8021a1c <_scanf_i+0x1d8>)
 8021866:	69a1      	ldr	r1, [r4, #24]
 8021868:	4a6d      	ldr	r2, [pc, #436]	@ (8021a20 <_scanf_i+0x1dc>)
 802186a:	2903      	cmp	r1, #3
 802186c:	bf08      	it	eq
 802186e:	461a      	moveq	r2, r3
 8021870:	68a3      	ldr	r3, [r4, #8]
 8021872:	9201      	str	r2, [sp, #4]
 8021874:	1e5a      	subs	r2, r3, #1
 8021876:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 802187a:	bf89      	itett	hi
 802187c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8021880:	f04f 0900 	movls.w	r9, #0
 8021884:	eb03 0905 	addhi.w	r9, r3, r5
 8021888:	f240 135d 	movwhi	r3, #349	@ 0x15d
 802188c:	bf88      	it	hi
 802188e:	60a3      	strhi	r3, [r4, #8]
 8021890:	f857 3b1c 	ldr.w	r3, [r7], #28
 8021894:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8021898:	463d      	mov	r5, r7
 802189a:	6023      	str	r3, [r4, #0]
 802189c:	6831      	ldr	r1, [r6, #0]
 802189e:	ab03      	add	r3, sp, #12
 80218a0:	2202      	movs	r2, #2
 80218a2:	7809      	ldrb	r1, [r1, #0]
 80218a4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80218a8:	f7fd fc17 	bl	801f0da <memchr>
 80218ac:	b328      	cbz	r0, 80218fa <_scanf_i+0xb6>
 80218ae:	f1bb 0f01 	cmp.w	fp, #1
 80218b2:	d159      	bne.n	8021968 <_scanf_i+0x124>
 80218b4:	6862      	ldr	r2, [r4, #4]
 80218b6:	b92a      	cbnz	r2, 80218c4 <_scanf_i+0x80>
 80218b8:	6822      	ldr	r2, [r4, #0]
 80218ba:	2108      	movs	r1, #8
 80218bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80218c0:	6061      	str	r1, [r4, #4]
 80218c2:	6022      	str	r2, [r4, #0]
 80218c4:	6822      	ldr	r2, [r4, #0]
 80218c6:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 80218ca:	6022      	str	r2, [r4, #0]
 80218cc:	68a2      	ldr	r2, [r4, #8]
 80218ce:	1e51      	subs	r1, r2, #1
 80218d0:	60a1      	str	r1, [r4, #8]
 80218d2:	b192      	cbz	r2, 80218fa <_scanf_i+0xb6>
 80218d4:	6832      	ldr	r2, [r6, #0]
 80218d6:	1c51      	adds	r1, r2, #1
 80218d8:	6031      	str	r1, [r6, #0]
 80218da:	7812      	ldrb	r2, [r2, #0]
 80218dc:	f805 2b01 	strb.w	r2, [r5], #1
 80218e0:	6872      	ldr	r2, [r6, #4]
 80218e2:	3a01      	subs	r2, #1
 80218e4:	2a00      	cmp	r2, #0
 80218e6:	6072      	str	r2, [r6, #4]
 80218e8:	dc07      	bgt.n	80218fa <_scanf_i+0xb6>
 80218ea:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 80218ee:	4631      	mov	r1, r6
 80218f0:	4650      	mov	r0, sl
 80218f2:	4790      	blx	r2
 80218f4:	2800      	cmp	r0, #0
 80218f6:	f040 8085 	bne.w	8021a04 <_scanf_i+0x1c0>
 80218fa:	f10b 0b01 	add.w	fp, fp, #1
 80218fe:	f1bb 0f03 	cmp.w	fp, #3
 8021902:	d1cb      	bne.n	802189c <_scanf_i+0x58>
 8021904:	6863      	ldr	r3, [r4, #4]
 8021906:	b90b      	cbnz	r3, 802190c <_scanf_i+0xc8>
 8021908:	230a      	movs	r3, #10
 802190a:	6063      	str	r3, [r4, #4]
 802190c:	6863      	ldr	r3, [r4, #4]
 802190e:	f04f 0b00 	mov.w	fp, #0
 8021912:	4944      	ldr	r1, [pc, #272]	@ (8021a24 <_scanf_i+0x1e0>)
 8021914:	6960      	ldr	r0, [r4, #20]
 8021916:	1ac9      	subs	r1, r1, r3
 8021918:	f000 f9a5 	bl	8021c66 <__sccl>
 802191c:	68a3      	ldr	r3, [r4, #8]
 802191e:	6822      	ldr	r2, [r4, #0]
 8021920:	2b00      	cmp	r3, #0
 8021922:	d03d      	beq.n	80219a0 <_scanf_i+0x15c>
 8021924:	6831      	ldr	r1, [r6, #0]
 8021926:	6960      	ldr	r0, [r4, #20]
 8021928:	f891 c000 	ldrb.w	ip, [r1]
 802192c:	f810 000c 	ldrb.w	r0, [r0, ip]
 8021930:	2800      	cmp	r0, #0
 8021932:	d035      	beq.n	80219a0 <_scanf_i+0x15c>
 8021934:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8021938:	d124      	bne.n	8021984 <_scanf_i+0x140>
 802193a:	0510      	lsls	r0, r2, #20
 802193c:	d522      	bpl.n	8021984 <_scanf_i+0x140>
 802193e:	f10b 0b01 	add.w	fp, fp, #1
 8021942:	f1b9 0f00 	cmp.w	r9, #0
 8021946:	d003      	beq.n	8021950 <_scanf_i+0x10c>
 8021948:	3301      	adds	r3, #1
 802194a:	f109 39ff 	add.w	r9, r9, #4294967295
 802194e:	60a3      	str	r3, [r4, #8]
 8021950:	6873      	ldr	r3, [r6, #4]
 8021952:	3b01      	subs	r3, #1
 8021954:	2b00      	cmp	r3, #0
 8021956:	6073      	str	r3, [r6, #4]
 8021958:	dd1b      	ble.n	8021992 <_scanf_i+0x14e>
 802195a:	6833      	ldr	r3, [r6, #0]
 802195c:	3301      	adds	r3, #1
 802195e:	6033      	str	r3, [r6, #0]
 8021960:	68a3      	ldr	r3, [r4, #8]
 8021962:	3b01      	subs	r3, #1
 8021964:	60a3      	str	r3, [r4, #8]
 8021966:	e7d9      	b.n	802191c <_scanf_i+0xd8>
 8021968:	f1bb 0f02 	cmp.w	fp, #2
 802196c:	d1ae      	bne.n	80218cc <_scanf_i+0x88>
 802196e:	6822      	ldr	r2, [r4, #0]
 8021970:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8021974:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8021978:	d1bf      	bne.n	80218fa <_scanf_i+0xb6>
 802197a:	2110      	movs	r1, #16
 802197c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8021980:	6061      	str	r1, [r4, #4]
 8021982:	e7a2      	b.n	80218ca <_scanf_i+0x86>
 8021984:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8021988:	6022      	str	r2, [r4, #0]
 802198a:	780b      	ldrb	r3, [r1, #0]
 802198c:	f805 3b01 	strb.w	r3, [r5], #1
 8021990:	e7de      	b.n	8021950 <_scanf_i+0x10c>
 8021992:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8021996:	4631      	mov	r1, r6
 8021998:	4650      	mov	r0, sl
 802199a:	4798      	blx	r3
 802199c:	2800      	cmp	r0, #0
 802199e:	d0df      	beq.n	8021960 <_scanf_i+0x11c>
 80219a0:	6823      	ldr	r3, [r4, #0]
 80219a2:	05d9      	lsls	r1, r3, #23
 80219a4:	d50d      	bpl.n	80219c2 <_scanf_i+0x17e>
 80219a6:	42bd      	cmp	r5, r7
 80219a8:	d909      	bls.n	80219be <_scanf_i+0x17a>
 80219aa:	f105 39ff 	add.w	r9, r5, #4294967295
 80219ae:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80219b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80219b6:	4632      	mov	r2, r6
 80219b8:	464d      	mov	r5, r9
 80219ba:	4650      	mov	r0, sl
 80219bc:	4798      	blx	r3
 80219be:	42bd      	cmp	r5, r7
 80219c0:	d028      	beq.n	8021a14 <_scanf_i+0x1d0>
 80219c2:	6822      	ldr	r2, [r4, #0]
 80219c4:	f012 0210 	ands.w	r2, r2, #16
 80219c8:	d113      	bne.n	80219f2 <_scanf_i+0x1ae>
 80219ca:	702a      	strb	r2, [r5, #0]
 80219cc:	4639      	mov	r1, r7
 80219ce:	6863      	ldr	r3, [r4, #4]
 80219d0:	4650      	mov	r0, sl
 80219d2:	9e01      	ldr	r6, [sp, #4]
 80219d4:	47b0      	blx	r6
 80219d6:	f8d8 3000 	ldr.w	r3, [r8]
 80219da:	6821      	ldr	r1, [r4, #0]
 80219dc:	1d1a      	adds	r2, r3, #4
 80219de:	f011 0f20 	tst.w	r1, #32
 80219e2:	f8c8 2000 	str.w	r2, [r8]
 80219e6:	681b      	ldr	r3, [r3, #0]
 80219e8:	d00f      	beq.n	8021a0a <_scanf_i+0x1c6>
 80219ea:	6018      	str	r0, [r3, #0]
 80219ec:	68e3      	ldr	r3, [r4, #12]
 80219ee:	3301      	adds	r3, #1
 80219f0:	60e3      	str	r3, [r4, #12]
 80219f2:	1bed      	subs	r5, r5, r7
 80219f4:	6923      	ldr	r3, [r4, #16]
 80219f6:	2000      	movs	r0, #0
 80219f8:	445d      	add	r5, fp
 80219fa:	442b      	add	r3, r5
 80219fc:	6123      	str	r3, [r4, #16]
 80219fe:	b007      	add	sp, #28
 8021a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021a04:	f04f 0b00 	mov.w	fp, #0
 8021a08:	e7ca      	b.n	80219a0 <_scanf_i+0x15c>
 8021a0a:	07ca      	lsls	r2, r1, #31
 8021a0c:	bf4c      	ite	mi
 8021a0e:	8018      	strhmi	r0, [r3, #0]
 8021a10:	6018      	strpl	r0, [r3, #0]
 8021a12:	e7eb      	b.n	80219ec <_scanf_i+0x1a8>
 8021a14:	2001      	movs	r0, #1
 8021a16:	e7f2      	b.n	80219fe <_scanf_i+0x1ba>
 8021a18:	08024320 	.word	0x08024320
 8021a1c:	0801dbc9 	.word	0x0801dbc9
 8021a20:	08021f31 	.word	0x08021f31
 8021a24:	08024831 	.word	0x08024831

08021a28 <__sflush_r>:
 8021a28:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8021a2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021a30:	0716      	lsls	r6, r2, #28
 8021a32:	4605      	mov	r5, r0
 8021a34:	460c      	mov	r4, r1
 8021a36:	d454      	bmi.n	8021ae2 <__sflush_r+0xba>
 8021a38:	684b      	ldr	r3, [r1, #4]
 8021a3a:	2b00      	cmp	r3, #0
 8021a3c:	dc02      	bgt.n	8021a44 <__sflush_r+0x1c>
 8021a3e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8021a40:	2b00      	cmp	r3, #0
 8021a42:	dd48      	ble.n	8021ad6 <__sflush_r+0xae>
 8021a44:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8021a46:	2e00      	cmp	r6, #0
 8021a48:	d045      	beq.n	8021ad6 <__sflush_r+0xae>
 8021a4a:	2300      	movs	r3, #0
 8021a4c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8021a50:	682f      	ldr	r7, [r5, #0]
 8021a52:	6a21      	ldr	r1, [r4, #32]
 8021a54:	602b      	str	r3, [r5, #0]
 8021a56:	d030      	beq.n	8021aba <__sflush_r+0x92>
 8021a58:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8021a5a:	89a3      	ldrh	r3, [r4, #12]
 8021a5c:	0759      	lsls	r1, r3, #29
 8021a5e:	d505      	bpl.n	8021a6c <__sflush_r+0x44>
 8021a60:	6863      	ldr	r3, [r4, #4]
 8021a62:	1ad2      	subs	r2, r2, r3
 8021a64:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8021a66:	b10b      	cbz	r3, 8021a6c <__sflush_r+0x44>
 8021a68:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8021a6a:	1ad2      	subs	r2, r2, r3
 8021a6c:	2300      	movs	r3, #0
 8021a6e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8021a70:	6a21      	ldr	r1, [r4, #32]
 8021a72:	4628      	mov	r0, r5
 8021a74:	47b0      	blx	r6
 8021a76:	1c43      	adds	r3, r0, #1
 8021a78:	89a3      	ldrh	r3, [r4, #12]
 8021a7a:	d106      	bne.n	8021a8a <__sflush_r+0x62>
 8021a7c:	6829      	ldr	r1, [r5, #0]
 8021a7e:	291d      	cmp	r1, #29
 8021a80:	d82b      	bhi.n	8021ada <__sflush_r+0xb2>
 8021a82:	4a2a      	ldr	r2, [pc, #168]	@ (8021b2c <__sflush_r+0x104>)
 8021a84:	410a      	asrs	r2, r1
 8021a86:	07d6      	lsls	r6, r2, #31
 8021a88:	d427      	bmi.n	8021ada <__sflush_r+0xb2>
 8021a8a:	2200      	movs	r2, #0
 8021a8c:	04d9      	lsls	r1, r3, #19
 8021a8e:	6062      	str	r2, [r4, #4]
 8021a90:	6922      	ldr	r2, [r4, #16]
 8021a92:	6022      	str	r2, [r4, #0]
 8021a94:	d504      	bpl.n	8021aa0 <__sflush_r+0x78>
 8021a96:	1c42      	adds	r2, r0, #1
 8021a98:	d101      	bne.n	8021a9e <__sflush_r+0x76>
 8021a9a:	682b      	ldr	r3, [r5, #0]
 8021a9c:	b903      	cbnz	r3, 8021aa0 <__sflush_r+0x78>
 8021a9e:	6560      	str	r0, [r4, #84]	@ 0x54
 8021aa0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8021aa2:	602f      	str	r7, [r5, #0]
 8021aa4:	b1b9      	cbz	r1, 8021ad6 <__sflush_r+0xae>
 8021aa6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8021aaa:	4299      	cmp	r1, r3
 8021aac:	d002      	beq.n	8021ab4 <__sflush_r+0x8c>
 8021aae:	4628      	mov	r0, r5
 8021ab0:	f7fe f9ae 	bl	801fe10 <_free_r>
 8021ab4:	2300      	movs	r3, #0
 8021ab6:	6363      	str	r3, [r4, #52]	@ 0x34
 8021ab8:	e00d      	b.n	8021ad6 <__sflush_r+0xae>
 8021aba:	2301      	movs	r3, #1
 8021abc:	4628      	mov	r0, r5
 8021abe:	47b0      	blx	r6
 8021ac0:	4602      	mov	r2, r0
 8021ac2:	1c50      	adds	r0, r2, #1
 8021ac4:	d1c9      	bne.n	8021a5a <__sflush_r+0x32>
 8021ac6:	682b      	ldr	r3, [r5, #0]
 8021ac8:	2b00      	cmp	r3, #0
 8021aca:	d0c6      	beq.n	8021a5a <__sflush_r+0x32>
 8021acc:	2b1d      	cmp	r3, #29
 8021ace:	d001      	beq.n	8021ad4 <__sflush_r+0xac>
 8021ad0:	2b16      	cmp	r3, #22
 8021ad2:	d11d      	bne.n	8021b10 <__sflush_r+0xe8>
 8021ad4:	602f      	str	r7, [r5, #0]
 8021ad6:	2000      	movs	r0, #0
 8021ad8:	e021      	b.n	8021b1e <__sflush_r+0xf6>
 8021ada:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8021ade:	b21b      	sxth	r3, r3
 8021ae0:	e01a      	b.n	8021b18 <__sflush_r+0xf0>
 8021ae2:	690f      	ldr	r7, [r1, #16]
 8021ae4:	2f00      	cmp	r7, #0
 8021ae6:	d0f6      	beq.n	8021ad6 <__sflush_r+0xae>
 8021ae8:	0793      	lsls	r3, r2, #30
 8021aea:	680e      	ldr	r6, [r1, #0]
 8021aec:	600f      	str	r7, [r1, #0]
 8021aee:	bf0c      	ite	eq
 8021af0:	694b      	ldreq	r3, [r1, #20]
 8021af2:	2300      	movne	r3, #0
 8021af4:	eba6 0807 	sub.w	r8, r6, r7
 8021af8:	608b      	str	r3, [r1, #8]
 8021afa:	f1b8 0f00 	cmp.w	r8, #0
 8021afe:	ddea      	ble.n	8021ad6 <__sflush_r+0xae>
 8021b00:	4643      	mov	r3, r8
 8021b02:	463a      	mov	r2, r7
 8021b04:	6a21      	ldr	r1, [r4, #32]
 8021b06:	4628      	mov	r0, r5
 8021b08:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8021b0a:	47b0      	blx	r6
 8021b0c:	2800      	cmp	r0, #0
 8021b0e:	dc08      	bgt.n	8021b22 <__sflush_r+0xfa>
 8021b10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021b14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8021b18:	f04f 30ff 	mov.w	r0, #4294967295
 8021b1c:	81a3      	strh	r3, [r4, #12]
 8021b1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021b22:	4407      	add	r7, r0
 8021b24:	eba8 0800 	sub.w	r8, r8, r0
 8021b28:	e7e7      	b.n	8021afa <__sflush_r+0xd2>
 8021b2a:	bf00      	nop
 8021b2c:	dfbffffe 	.word	0xdfbffffe

08021b30 <_fflush_r>:
 8021b30:	b538      	push	{r3, r4, r5, lr}
 8021b32:	690b      	ldr	r3, [r1, #16]
 8021b34:	4605      	mov	r5, r0
 8021b36:	460c      	mov	r4, r1
 8021b38:	b913      	cbnz	r3, 8021b40 <_fflush_r+0x10>
 8021b3a:	2500      	movs	r5, #0
 8021b3c:	4628      	mov	r0, r5
 8021b3e:	bd38      	pop	{r3, r4, r5, pc}
 8021b40:	b118      	cbz	r0, 8021b4a <_fflush_r+0x1a>
 8021b42:	6a03      	ldr	r3, [r0, #32]
 8021b44:	b90b      	cbnz	r3, 8021b4a <_fflush_r+0x1a>
 8021b46:	f7fc ff43 	bl	801e9d0 <__sinit>
 8021b4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021b4e:	2b00      	cmp	r3, #0
 8021b50:	d0f3      	beq.n	8021b3a <_fflush_r+0xa>
 8021b52:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8021b54:	07d0      	lsls	r0, r2, #31
 8021b56:	d404      	bmi.n	8021b62 <_fflush_r+0x32>
 8021b58:	0599      	lsls	r1, r3, #22
 8021b5a:	d402      	bmi.n	8021b62 <_fflush_r+0x32>
 8021b5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8021b5e:	f7fd fab2 	bl	801f0c6 <__retarget_lock_acquire_recursive>
 8021b62:	4628      	mov	r0, r5
 8021b64:	4621      	mov	r1, r4
 8021b66:	f7ff ff5f 	bl	8021a28 <__sflush_r>
 8021b6a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8021b6c:	4605      	mov	r5, r0
 8021b6e:	07da      	lsls	r2, r3, #31
 8021b70:	d4e4      	bmi.n	8021b3c <_fflush_r+0xc>
 8021b72:	89a3      	ldrh	r3, [r4, #12]
 8021b74:	059b      	lsls	r3, r3, #22
 8021b76:	d4e1      	bmi.n	8021b3c <_fflush_r+0xc>
 8021b78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8021b7a:	f7fd faa5 	bl	801f0c8 <__retarget_lock_release_recursive>
 8021b7e:	e7dd      	b.n	8021b3c <_fflush_r+0xc>

08021b80 <fiprintf>:
 8021b80:	b40e      	push	{r1, r2, r3}
 8021b82:	b503      	push	{r0, r1, lr}
 8021b84:	ab03      	add	r3, sp, #12
 8021b86:	4601      	mov	r1, r0
 8021b88:	4805      	ldr	r0, [pc, #20]	@ (8021ba0 <fiprintf+0x20>)
 8021b8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8021b8e:	6800      	ldr	r0, [r0, #0]
 8021b90:	9301      	str	r3, [sp, #4]
 8021b92:	f7ff fce5 	bl	8021560 <_vfiprintf_r>
 8021b96:	b002      	add	sp, #8
 8021b98:	f85d eb04 	ldr.w	lr, [sp], #4
 8021b9c:	b003      	add	sp, #12
 8021b9e:	4770      	bx	lr
 8021ba0:	20000224 	.word	0x20000224

08021ba4 <__swhatbuf_r>:
 8021ba4:	b570      	push	{r4, r5, r6, lr}
 8021ba6:	460c      	mov	r4, r1
 8021ba8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021bac:	b096      	sub	sp, #88	@ 0x58
 8021bae:	4615      	mov	r5, r2
 8021bb0:	2900      	cmp	r1, #0
 8021bb2:	461e      	mov	r6, r3
 8021bb4:	da0c      	bge.n	8021bd0 <__swhatbuf_r+0x2c>
 8021bb6:	89a3      	ldrh	r3, [r4, #12]
 8021bb8:	2100      	movs	r1, #0
 8021bba:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8021bbe:	bf14      	ite	ne
 8021bc0:	2340      	movne	r3, #64	@ 0x40
 8021bc2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8021bc6:	2000      	movs	r0, #0
 8021bc8:	6031      	str	r1, [r6, #0]
 8021bca:	602b      	str	r3, [r5, #0]
 8021bcc:	b016      	add	sp, #88	@ 0x58
 8021bce:	bd70      	pop	{r4, r5, r6, pc}
 8021bd0:	466a      	mov	r2, sp
 8021bd2:	f000 f8d3 	bl	8021d7c <_fstat_r>
 8021bd6:	2800      	cmp	r0, #0
 8021bd8:	dbed      	blt.n	8021bb6 <__swhatbuf_r+0x12>
 8021bda:	9901      	ldr	r1, [sp, #4]
 8021bdc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8021be0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8021be4:	4259      	negs	r1, r3
 8021be6:	4159      	adcs	r1, r3
 8021be8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8021bec:	e7eb      	b.n	8021bc6 <__swhatbuf_r+0x22>

08021bee <__smakebuf_r>:
 8021bee:	898b      	ldrh	r3, [r1, #12]
 8021bf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021bf2:	079d      	lsls	r5, r3, #30
 8021bf4:	4606      	mov	r6, r0
 8021bf6:	460c      	mov	r4, r1
 8021bf8:	d507      	bpl.n	8021c0a <__smakebuf_r+0x1c>
 8021bfa:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8021bfe:	6023      	str	r3, [r4, #0]
 8021c00:	6123      	str	r3, [r4, #16]
 8021c02:	2301      	movs	r3, #1
 8021c04:	6163      	str	r3, [r4, #20]
 8021c06:	b003      	add	sp, #12
 8021c08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021c0a:	ab01      	add	r3, sp, #4
 8021c0c:	466a      	mov	r2, sp
 8021c0e:	f7ff ffc9 	bl	8021ba4 <__swhatbuf_r>
 8021c12:	9f00      	ldr	r7, [sp, #0]
 8021c14:	4605      	mov	r5, r0
 8021c16:	4630      	mov	r0, r6
 8021c18:	4639      	mov	r1, r7
 8021c1a:	f7fb f8bb 	bl	801cd94 <_malloc_r>
 8021c1e:	b948      	cbnz	r0, 8021c34 <__smakebuf_r+0x46>
 8021c20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021c24:	059a      	lsls	r2, r3, #22
 8021c26:	d4ee      	bmi.n	8021c06 <__smakebuf_r+0x18>
 8021c28:	f023 0303 	bic.w	r3, r3, #3
 8021c2c:	f043 0302 	orr.w	r3, r3, #2
 8021c30:	81a3      	strh	r3, [r4, #12]
 8021c32:	e7e2      	b.n	8021bfa <__smakebuf_r+0xc>
 8021c34:	89a3      	ldrh	r3, [r4, #12]
 8021c36:	6020      	str	r0, [r4, #0]
 8021c38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8021c3c:	81a3      	strh	r3, [r4, #12]
 8021c3e:	9b01      	ldr	r3, [sp, #4]
 8021c40:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8021c44:	b15b      	cbz	r3, 8021c5e <__smakebuf_r+0x70>
 8021c46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8021c4a:	4630      	mov	r0, r6
 8021c4c:	f000 f8a8 	bl	8021da0 <_isatty_r>
 8021c50:	b128      	cbz	r0, 8021c5e <__smakebuf_r+0x70>
 8021c52:	89a3      	ldrh	r3, [r4, #12]
 8021c54:	f023 0303 	bic.w	r3, r3, #3
 8021c58:	f043 0301 	orr.w	r3, r3, #1
 8021c5c:	81a3      	strh	r3, [r4, #12]
 8021c5e:	89a3      	ldrh	r3, [r4, #12]
 8021c60:	431d      	orrs	r5, r3
 8021c62:	81a5      	strh	r5, [r4, #12]
 8021c64:	e7cf      	b.n	8021c06 <__smakebuf_r+0x18>

08021c66 <__sccl>:
 8021c66:	b570      	push	{r4, r5, r6, lr}
 8021c68:	780b      	ldrb	r3, [r1, #0]
 8021c6a:	4604      	mov	r4, r0
 8021c6c:	3801      	subs	r0, #1
 8021c6e:	2b5e      	cmp	r3, #94	@ 0x5e
 8021c70:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8021c74:	bf13      	iteet	ne
 8021c76:	1c4a      	addne	r2, r1, #1
 8021c78:	1c8a      	addeq	r2, r1, #2
 8021c7a:	784b      	ldrbeq	r3, [r1, #1]
 8021c7c:	2100      	movne	r1, #0
 8021c7e:	bf08      	it	eq
 8021c80:	2101      	moveq	r1, #1
 8021c82:	f800 1f01 	strb.w	r1, [r0, #1]!
 8021c86:	42a8      	cmp	r0, r5
 8021c88:	d1fb      	bne.n	8021c82 <__sccl+0x1c>
 8021c8a:	b90b      	cbnz	r3, 8021c90 <__sccl+0x2a>
 8021c8c:	1e50      	subs	r0, r2, #1
 8021c8e:	bd70      	pop	{r4, r5, r6, pc}
 8021c90:	f081 0101 	eor.w	r1, r1, #1
 8021c94:	4610      	mov	r0, r2
 8021c96:	54e1      	strb	r1, [r4, r3]
 8021c98:	4602      	mov	r2, r0
 8021c9a:	f812 5b01 	ldrb.w	r5, [r2], #1
 8021c9e:	2d2d      	cmp	r5, #45	@ 0x2d
 8021ca0:	d005      	beq.n	8021cae <__sccl+0x48>
 8021ca2:	2d5d      	cmp	r5, #93	@ 0x5d
 8021ca4:	d016      	beq.n	8021cd4 <__sccl+0x6e>
 8021ca6:	2d00      	cmp	r5, #0
 8021ca8:	d0f1      	beq.n	8021c8e <__sccl+0x28>
 8021caa:	462b      	mov	r3, r5
 8021cac:	e7f2      	b.n	8021c94 <__sccl+0x2e>
 8021cae:	7846      	ldrb	r6, [r0, #1]
 8021cb0:	2e5d      	cmp	r6, #93	@ 0x5d
 8021cb2:	d0fa      	beq.n	8021caa <__sccl+0x44>
 8021cb4:	42b3      	cmp	r3, r6
 8021cb6:	dcf8      	bgt.n	8021caa <__sccl+0x44>
 8021cb8:	3002      	adds	r0, #2
 8021cba:	461a      	mov	r2, r3
 8021cbc:	3201      	adds	r2, #1
 8021cbe:	4296      	cmp	r6, r2
 8021cc0:	54a1      	strb	r1, [r4, r2]
 8021cc2:	dcfb      	bgt.n	8021cbc <__sccl+0x56>
 8021cc4:	1af2      	subs	r2, r6, r3
 8021cc6:	1c5d      	adds	r5, r3, #1
 8021cc8:	3a01      	subs	r2, #1
 8021cca:	42b3      	cmp	r3, r6
 8021ccc:	bfa8      	it	ge
 8021cce:	2200      	movge	r2, #0
 8021cd0:	18ab      	adds	r3, r5, r2
 8021cd2:	e7e1      	b.n	8021c98 <__sccl+0x32>
 8021cd4:	4610      	mov	r0, r2
 8021cd6:	e7da      	b.n	8021c8e <__sccl+0x28>

08021cd8 <__submore>:
 8021cd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021cdc:	460c      	mov	r4, r1
 8021cde:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8021ce0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8021ce4:	4299      	cmp	r1, r3
 8021ce6:	d11a      	bne.n	8021d1e <__submore+0x46>
 8021ce8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8021cec:	f7fb f852 	bl	801cd94 <_malloc_r>
 8021cf0:	b918      	cbnz	r0, 8021cfa <__submore+0x22>
 8021cf2:	f04f 30ff 	mov.w	r0, #4294967295
 8021cf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021cfa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8021cfe:	6360      	str	r0, [r4, #52]	@ 0x34
 8021d00:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8021d04:	63a3      	str	r3, [r4, #56]	@ 0x38
 8021d06:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8021d0a:	7083      	strb	r3, [r0, #2]
 8021d0c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8021d10:	7043      	strb	r3, [r0, #1]
 8021d12:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8021d16:	7003      	strb	r3, [r0, #0]
 8021d18:	6020      	str	r0, [r4, #0]
 8021d1a:	2000      	movs	r0, #0
 8021d1c:	e7eb      	b.n	8021cf6 <__submore+0x1e>
 8021d1e:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8021d20:	0077      	lsls	r7, r6, #1
 8021d22:	463a      	mov	r2, r7
 8021d24:	f000 f867 	bl	8021df6 <_realloc_r>
 8021d28:	4605      	mov	r5, r0
 8021d2a:	2800      	cmp	r0, #0
 8021d2c:	d0e1      	beq.n	8021cf2 <__submore+0x1a>
 8021d2e:	eb00 0806 	add.w	r8, r0, r6
 8021d32:	4601      	mov	r1, r0
 8021d34:	4632      	mov	r2, r6
 8021d36:	4640      	mov	r0, r8
 8021d38:	f7fd f9dd 	bl	801f0f6 <memcpy>
 8021d3c:	f8c4 8000 	str.w	r8, [r4]
 8021d40:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8021d44:	e7e9      	b.n	8021d1a <__submore+0x42>

08021d46 <memmove>:
 8021d46:	4288      	cmp	r0, r1
 8021d48:	b510      	push	{r4, lr}
 8021d4a:	eb01 0402 	add.w	r4, r1, r2
 8021d4e:	d902      	bls.n	8021d56 <memmove+0x10>
 8021d50:	4284      	cmp	r4, r0
 8021d52:	4623      	mov	r3, r4
 8021d54:	d807      	bhi.n	8021d66 <memmove+0x20>
 8021d56:	1e43      	subs	r3, r0, #1
 8021d58:	42a1      	cmp	r1, r4
 8021d5a:	d008      	beq.n	8021d6e <memmove+0x28>
 8021d5c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8021d60:	f803 2f01 	strb.w	r2, [r3, #1]!
 8021d64:	e7f8      	b.n	8021d58 <memmove+0x12>
 8021d66:	4402      	add	r2, r0
 8021d68:	4601      	mov	r1, r0
 8021d6a:	428a      	cmp	r2, r1
 8021d6c:	d100      	bne.n	8021d70 <memmove+0x2a>
 8021d6e:	bd10      	pop	{r4, pc}
 8021d70:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8021d74:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8021d78:	e7f7      	b.n	8021d6a <memmove+0x24>
	...

08021d7c <_fstat_r>:
 8021d7c:	b538      	push	{r3, r4, r5, lr}
 8021d7e:	2300      	movs	r3, #0
 8021d80:	4d06      	ldr	r5, [pc, #24]	@ (8021d9c <_fstat_r+0x20>)
 8021d82:	4604      	mov	r4, r0
 8021d84:	4608      	mov	r0, r1
 8021d86:	4611      	mov	r1, r2
 8021d88:	602b      	str	r3, [r5, #0]
 8021d8a:	f7e3 f8f9 	bl	8004f80 <_fstat>
 8021d8e:	1c43      	adds	r3, r0, #1
 8021d90:	d102      	bne.n	8021d98 <_fstat_r+0x1c>
 8021d92:	682b      	ldr	r3, [r5, #0]
 8021d94:	b103      	cbz	r3, 8021d98 <_fstat_r+0x1c>
 8021d96:	6023      	str	r3, [r4, #0]
 8021d98:	bd38      	pop	{r3, r4, r5, pc}
 8021d9a:	bf00      	nop
 8021d9c:	2001585c 	.word	0x2001585c

08021da0 <_isatty_r>:
 8021da0:	b538      	push	{r3, r4, r5, lr}
 8021da2:	2300      	movs	r3, #0
 8021da4:	4d05      	ldr	r5, [pc, #20]	@ (8021dbc <_isatty_r+0x1c>)
 8021da6:	4604      	mov	r4, r0
 8021da8:	4608      	mov	r0, r1
 8021daa:	602b      	str	r3, [r5, #0]
 8021dac:	f7e3 f8f8 	bl	8004fa0 <_isatty>
 8021db0:	1c43      	adds	r3, r0, #1
 8021db2:	d102      	bne.n	8021dba <_isatty_r+0x1a>
 8021db4:	682b      	ldr	r3, [r5, #0]
 8021db6:	b103      	cbz	r3, 8021dba <_isatty_r+0x1a>
 8021db8:	6023      	str	r3, [r4, #0]
 8021dba:	bd38      	pop	{r3, r4, r5, pc}
 8021dbc:	2001585c 	.word	0x2001585c

08021dc0 <abort>:
 8021dc0:	2006      	movs	r0, #6
 8021dc2:	b508      	push	{r3, lr}
 8021dc4:	f000 f8de 	bl	8021f84 <raise>
 8021dc8:	2001      	movs	r0, #1
 8021dca:	f7e3 f889 	bl	8004ee0 <_exit>

08021dce <_calloc_r>:
 8021dce:	b570      	push	{r4, r5, r6, lr}
 8021dd0:	fba1 5402 	umull	r5, r4, r1, r2
 8021dd4:	b93c      	cbnz	r4, 8021de6 <_calloc_r+0x18>
 8021dd6:	4629      	mov	r1, r5
 8021dd8:	f7fa ffdc 	bl	801cd94 <_malloc_r>
 8021ddc:	4606      	mov	r6, r0
 8021dde:	b928      	cbnz	r0, 8021dec <_calloc_r+0x1e>
 8021de0:	2600      	movs	r6, #0
 8021de2:	4630      	mov	r0, r6
 8021de4:	bd70      	pop	{r4, r5, r6, pc}
 8021de6:	220c      	movs	r2, #12
 8021de8:	6002      	str	r2, [r0, #0]
 8021dea:	e7f9      	b.n	8021de0 <_calloc_r+0x12>
 8021dec:	462a      	mov	r2, r5
 8021dee:	4621      	mov	r1, r4
 8021df0:	f7fd f80e 	bl	801ee10 <memset>
 8021df4:	e7f5      	b.n	8021de2 <_calloc_r+0x14>

08021df6 <_realloc_r>:
 8021df6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021dfa:	4680      	mov	r8, r0
 8021dfc:	4615      	mov	r5, r2
 8021dfe:	460c      	mov	r4, r1
 8021e00:	b921      	cbnz	r1, 8021e0c <_realloc_r+0x16>
 8021e02:	4611      	mov	r1, r2
 8021e04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021e08:	f7fa bfc4 	b.w	801cd94 <_malloc_r>
 8021e0c:	b92a      	cbnz	r2, 8021e1a <_realloc_r+0x24>
 8021e0e:	f7fd ffff 	bl	801fe10 <_free_r>
 8021e12:	2400      	movs	r4, #0
 8021e14:	4620      	mov	r0, r4
 8021e16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021e1a:	f000 f8cf 	bl	8021fbc <_malloc_usable_size_r>
 8021e1e:	4285      	cmp	r5, r0
 8021e20:	4606      	mov	r6, r0
 8021e22:	d802      	bhi.n	8021e2a <_realloc_r+0x34>
 8021e24:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8021e28:	d8f4      	bhi.n	8021e14 <_realloc_r+0x1e>
 8021e2a:	4629      	mov	r1, r5
 8021e2c:	4640      	mov	r0, r8
 8021e2e:	f7fa ffb1 	bl	801cd94 <_malloc_r>
 8021e32:	4607      	mov	r7, r0
 8021e34:	2800      	cmp	r0, #0
 8021e36:	d0ec      	beq.n	8021e12 <_realloc_r+0x1c>
 8021e38:	42b5      	cmp	r5, r6
 8021e3a:	462a      	mov	r2, r5
 8021e3c:	4621      	mov	r1, r4
 8021e3e:	bf28      	it	cs
 8021e40:	4632      	movcs	r2, r6
 8021e42:	f7fd f958 	bl	801f0f6 <memcpy>
 8021e46:	4621      	mov	r1, r4
 8021e48:	4640      	mov	r0, r8
 8021e4a:	463c      	mov	r4, r7
 8021e4c:	f7fd ffe0 	bl	801fe10 <_free_r>
 8021e50:	e7e0      	b.n	8021e14 <_realloc_r+0x1e>
	...

08021e54 <_strtoul_l.constprop.0>:
 8021e54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021e58:	4686      	mov	lr, r0
 8021e5a:	460d      	mov	r5, r1
 8021e5c:	4e33      	ldr	r6, [pc, #204]	@ (8021f2c <_strtoul_l.constprop.0+0xd8>)
 8021e5e:	4628      	mov	r0, r5
 8021e60:	f815 4b01 	ldrb.w	r4, [r5], #1
 8021e64:	5d37      	ldrb	r7, [r6, r4]
 8021e66:	f017 0708 	ands.w	r7, r7, #8
 8021e6a:	d1f8      	bne.n	8021e5e <_strtoul_l.constprop.0+0xa>
 8021e6c:	2c2d      	cmp	r4, #45	@ 0x2d
 8021e6e:	d12f      	bne.n	8021ed0 <_strtoul_l.constprop.0+0x7c>
 8021e70:	782c      	ldrb	r4, [r5, #0]
 8021e72:	2701      	movs	r7, #1
 8021e74:	1c85      	adds	r5, r0, #2
 8021e76:	f033 0010 	bics.w	r0, r3, #16
 8021e7a:	d109      	bne.n	8021e90 <_strtoul_l.constprop.0+0x3c>
 8021e7c:	2c30      	cmp	r4, #48	@ 0x30
 8021e7e:	d12c      	bne.n	8021eda <_strtoul_l.constprop.0+0x86>
 8021e80:	7828      	ldrb	r0, [r5, #0]
 8021e82:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8021e86:	2858      	cmp	r0, #88	@ 0x58
 8021e88:	d127      	bne.n	8021eda <_strtoul_l.constprop.0+0x86>
 8021e8a:	786c      	ldrb	r4, [r5, #1]
 8021e8c:	2310      	movs	r3, #16
 8021e8e:	3502      	adds	r5, #2
 8021e90:	f04f 38ff 	mov.w	r8, #4294967295
 8021e94:	2600      	movs	r6, #0
 8021e96:	fbb8 f8f3 	udiv	r8, r8, r3
 8021e9a:	fb03 f908 	mul.w	r9, r3, r8
 8021e9e:	4630      	mov	r0, r6
 8021ea0:	ea6f 0909 	mvn.w	r9, r9
 8021ea4:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8021ea8:	f1bc 0f09 	cmp.w	ip, #9
 8021eac:	d81c      	bhi.n	8021ee8 <_strtoul_l.constprop.0+0x94>
 8021eae:	4664      	mov	r4, ip
 8021eb0:	42a3      	cmp	r3, r4
 8021eb2:	dd2a      	ble.n	8021f0a <_strtoul_l.constprop.0+0xb6>
 8021eb4:	f1b6 3fff 	cmp.w	r6, #4294967295
 8021eb8:	d007      	beq.n	8021eca <_strtoul_l.constprop.0+0x76>
 8021eba:	4580      	cmp	r8, r0
 8021ebc:	d322      	bcc.n	8021f04 <_strtoul_l.constprop.0+0xb0>
 8021ebe:	d101      	bne.n	8021ec4 <_strtoul_l.constprop.0+0x70>
 8021ec0:	45a1      	cmp	r9, r4
 8021ec2:	db1f      	blt.n	8021f04 <_strtoul_l.constprop.0+0xb0>
 8021ec4:	fb00 4003 	mla	r0, r0, r3, r4
 8021ec8:	2601      	movs	r6, #1
 8021eca:	f815 4b01 	ldrb.w	r4, [r5], #1
 8021ece:	e7e9      	b.n	8021ea4 <_strtoul_l.constprop.0+0x50>
 8021ed0:	2c2b      	cmp	r4, #43	@ 0x2b
 8021ed2:	bf04      	itt	eq
 8021ed4:	782c      	ldrbeq	r4, [r5, #0]
 8021ed6:	1c85      	addeq	r5, r0, #2
 8021ed8:	e7cd      	b.n	8021e76 <_strtoul_l.constprop.0+0x22>
 8021eda:	2b00      	cmp	r3, #0
 8021edc:	d1d8      	bne.n	8021e90 <_strtoul_l.constprop.0+0x3c>
 8021ede:	2c30      	cmp	r4, #48	@ 0x30
 8021ee0:	bf0c      	ite	eq
 8021ee2:	2308      	moveq	r3, #8
 8021ee4:	230a      	movne	r3, #10
 8021ee6:	e7d3      	b.n	8021e90 <_strtoul_l.constprop.0+0x3c>
 8021ee8:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8021eec:	f1bc 0f19 	cmp.w	ip, #25
 8021ef0:	d801      	bhi.n	8021ef6 <_strtoul_l.constprop.0+0xa2>
 8021ef2:	3c37      	subs	r4, #55	@ 0x37
 8021ef4:	e7dc      	b.n	8021eb0 <_strtoul_l.constprop.0+0x5c>
 8021ef6:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8021efa:	f1bc 0f19 	cmp.w	ip, #25
 8021efe:	d804      	bhi.n	8021f0a <_strtoul_l.constprop.0+0xb6>
 8021f00:	3c57      	subs	r4, #87	@ 0x57
 8021f02:	e7d5      	b.n	8021eb0 <_strtoul_l.constprop.0+0x5c>
 8021f04:	f04f 36ff 	mov.w	r6, #4294967295
 8021f08:	e7df      	b.n	8021eca <_strtoul_l.constprop.0+0x76>
 8021f0a:	1c73      	adds	r3, r6, #1
 8021f0c:	d106      	bne.n	8021f1c <_strtoul_l.constprop.0+0xc8>
 8021f0e:	2322      	movs	r3, #34	@ 0x22
 8021f10:	4630      	mov	r0, r6
 8021f12:	f8ce 3000 	str.w	r3, [lr]
 8021f16:	b932      	cbnz	r2, 8021f26 <_strtoul_l.constprop.0+0xd2>
 8021f18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021f1c:	b107      	cbz	r7, 8021f20 <_strtoul_l.constprop.0+0xcc>
 8021f1e:	4240      	negs	r0, r0
 8021f20:	2a00      	cmp	r2, #0
 8021f22:	d0f9      	beq.n	8021f18 <_strtoul_l.constprop.0+0xc4>
 8021f24:	b106      	cbz	r6, 8021f28 <_strtoul_l.constprop.0+0xd4>
 8021f26:	1e69      	subs	r1, r5, #1
 8021f28:	6011      	str	r1, [r2, #0]
 8021f2a:	e7f5      	b.n	8021f18 <_strtoul_l.constprop.0+0xc4>
 8021f2c:	080243f9 	.word	0x080243f9

08021f30 <_strtoul_r>:
 8021f30:	f7ff bf90 	b.w	8021e54 <_strtoul_l.constprop.0>

08021f34 <_raise_r>:
 8021f34:	291f      	cmp	r1, #31
 8021f36:	b538      	push	{r3, r4, r5, lr}
 8021f38:	4605      	mov	r5, r0
 8021f3a:	460c      	mov	r4, r1
 8021f3c:	d904      	bls.n	8021f48 <_raise_r+0x14>
 8021f3e:	2316      	movs	r3, #22
 8021f40:	6003      	str	r3, [r0, #0]
 8021f42:	f04f 30ff 	mov.w	r0, #4294967295
 8021f46:	bd38      	pop	{r3, r4, r5, pc}
 8021f48:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8021f4a:	b112      	cbz	r2, 8021f52 <_raise_r+0x1e>
 8021f4c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8021f50:	b94b      	cbnz	r3, 8021f66 <_raise_r+0x32>
 8021f52:	4628      	mov	r0, r5
 8021f54:	f000 f830 	bl	8021fb8 <_getpid_r>
 8021f58:	4622      	mov	r2, r4
 8021f5a:	4601      	mov	r1, r0
 8021f5c:	4628      	mov	r0, r5
 8021f5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021f62:	f000 b817 	b.w	8021f94 <_kill_r>
 8021f66:	2b01      	cmp	r3, #1
 8021f68:	d00a      	beq.n	8021f80 <_raise_r+0x4c>
 8021f6a:	1c59      	adds	r1, r3, #1
 8021f6c:	d103      	bne.n	8021f76 <_raise_r+0x42>
 8021f6e:	2316      	movs	r3, #22
 8021f70:	6003      	str	r3, [r0, #0]
 8021f72:	2001      	movs	r0, #1
 8021f74:	e7e7      	b.n	8021f46 <_raise_r+0x12>
 8021f76:	2100      	movs	r1, #0
 8021f78:	4620      	mov	r0, r4
 8021f7a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8021f7e:	4798      	blx	r3
 8021f80:	2000      	movs	r0, #0
 8021f82:	e7e0      	b.n	8021f46 <_raise_r+0x12>

08021f84 <raise>:
 8021f84:	4b02      	ldr	r3, [pc, #8]	@ (8021f90 <raise+0xc>)
 8021f86:	4601      	mov	r1, r0
 8021f88:	6818      	ldr	r0, [r3, #0]
 8021f8a:	f7ff bfd3 	b.w	8021f34 <_raise_r>
 8021f8e:	bf00      	nop
 8021f90:	20000224 	.word	0x20000224

08021f94 <_kill_r>:
 8021f94:	b538      	push	{r3, r4, r5, lr}
 8021f96:	2300      	movs	r3, #0
 8021f98:	4d06      	ldr	r5, [pc, #24]	@ (8021fb4 <_kill_r+0x20>)
 8021f9a:	4604      	mov	r4, r0
 8021f9c:	4608      	mov	r0, r1
 8021f9e:	4611      	mov	r1, r2
 8021fa0:	602b      	str	r3, [r5, #0]
 8021fa2:	f7e2 ff8d 	bl	8004ec0 <_kill>
 8021fa6:	1c43      	adds	r3, r0, #1
 8021fa8:	d102      	bne.n	8021fb0 <_kill_r+0x1c>
 8021faa:	682b      	ldr	r3, [r5, #0]
 8021fac:	b103      	cbz	r3, 8021fb0 <_kill_r+0x1c>
 8021fae:	6023      	str	r3, [r4, #0]
 8021fb0:	bd38      	pop	{r3, r4, r5, pc}
 8021fb2:	bf00      	nop
 8021fb4:	2001585c 	.word	0x2001585c

08021fb8 <_getpid_r>:
 8021fb8:	f7e2 bf7a 	b.w	8004eb0 <_getpid>

08021fbc <_malloc_usable_size_r>:
 8021fbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8021fc0:	1f18      	subs	r0, r3, #4
 8021fc2:	2b00      	cmp	r3, #0
 8021fc4:	bfbc      	itt	lt
 8021fc6:	580b      	ldrlt	r3, [r1, r0]
 8021fc8:	18c0      	addlt	r0, r0, r3
 8021fca:	4770      	bx	lr

08021fcc <fmod>:
 8021fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021fce:	ec57 6b10 	vmov	r6, r7, d0
 8021fd2:	ec55 4b11 	vmov	r4, r5, d1
 8021fd6:	ed2d 8b02 	vpush	{d8}
 8021fda:	f000 f825 	bl	8022028 <__ieee754_fmod>
 8021fde:	4622      	mov	r2, r4
 8021fe0:	462b      	mov	r3, r5
 8021fe2:	4630      	mov	r0, r6
 8021fe4:	4639      	mov	r1, r7
 8021fe6:	eeb0 8a40 	vmov.f32	s16, s0
 8021fea:	eef0 8a60 	vmov.f32	s17, s1
 8021fee:	f7de fdb7 	bl	8000b60 <__aeabi_dcmpun>
 8021ff2:	b990      	cbnz	r0, 802201a <fmod+0x4e>
 8021ff4:	2200      	movs	r2, #0
 8021ff6:	2300      	movs	r3, #0
 8021ff8:	4620      	mov	r0, r4
 8021ffa:	4629      	mov	r1, r5
 8021ffc:	f7de fd7e 	bl	8000afc <__aeabi_dcmpeq>
 8022000:	b158      	cbz	r0, 802201a <fmod+0x4e>
 8022002:	f7fd f835 	bl	801f070 <__errno>
 8022006:	2321      	movs	r3, #33	@ 0x21
 8022008:	2200      	movs	r2, #0
 802200a:	6003      	str	r3, [r0, #0]
 802200c:	2300      	movs	r3, #0
 802200e:	4610      	mov	r0, r2
 8022010:	4619      	mov	r1, r3
 8022012:	f7de fc35 	bl	8000880 <__aeabi_ddiv>
 8022016:	ec41 0b18 	vmov	d8, r0, r1
 802201a:	eeb0 0a48 	vmov.f32	s0, s16
 802201e:	eef0 0a68 	vmov.f32	s1, s17
 8022022:	ecbd 8b02 	vpop	{d8}
 8022026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08022028 <__ieee754_fmod>:
 8022028:	ec53 2b11 	vmov	r2, r3, d1
 802202c:	f023 4c00 	bic.w	ip, r3, #2147483648	@ 0x80000000
 8022030:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022034:	ea52 040c 	orrs.w	r4, r2, ip
 8022038:	461e      	mov	r6, r3
 802203a:	4617      	mov	r7, r2
 802203c:	4696      	mov	lr, r2
 802203e:	ec51 0b10 	vmov	r0, r1, d0
 8022042:	d00c      	beq.n	802205e <__ieee754_fmod+0x36>
 8022044:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 8022048:	4c76      	ldr	r4, [pc, #472]	@ (8022224 <__ieee754_fmod+0x1fc>)
 802204a:	4689      	mov	r9, r1
 802204c:	45a0      	cmp	r8, r4
 802204e:	d806      	bhi.n	802205e <__ieee754_fmod+0x36>
 8022050:	4254      	negs	r4, r2
 8022052:	4d75      	ldr	r5, [pc, #468]	@ (8022228 <__ieee754_fmod+0x200>)
 8022054:	4314      	orrs	r4, r2
 8022056:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 802205a:	42ac      	cmp	r4, r5
 802205c:	d909      	bls.n	8022072 <__ieee754_fmod+0x4a>
 802205e:	f7de fae5 	bl	800062c <__aeabi_dmul>
 8022062:	4602      	mov	r2, r0
 8022064:	460b      	mov	r3, r1
 8022066:	f7de fc0b 	bl	8000880 <__aeabi_ddiv>
 802206a:	ec41 0b10 	vmov	d0, r0, r1
 802206e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022072:	45e0      	cmp	r8, ip
 8022074:	4682      	mov	sl, r0
 8022076:	4604      	mov	r4, r0
 8022078:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 802207c:	dc09      	bgt.n	8022092 <__ieee754_fmod+0x6a>
 802207e:	dbf4      	blt.n	802206a <__ieee754_fmod+0x42>
 8022080:	4282      	cmp	r2, r0
 8022082:	d8f2      	bhi.n	802206a <__ieee754_fmod+0x42>
 8022084:	d105      	bne.n	8022092 <__ieee754_fmod+0x6a>
 8022086:	4b69      	ldr	r3, [pc, #420]	@ (802222c <__ieee754_fmod+0x204>)
 8022088:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 802208c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8022090:	e7eb      	b.n	802206a <__ieee754_fmod+0x42>
 8022092:	4a65      	ldr	r2, [pc, #404]	@ (8022228 <__ieee754_fmod+0x200>)
 8022094:	ea19 0f02 	tst.w	r9, r2
 8022098:	d148      	bne.n	802212c <__ieee754_fmod+0x104>
 802209a:	f1b8 0f00 	cmp.w	r8, #0
 802209e:	d13d      	bne.n	802211c <__ieee754_fmod+0xf4>
 80220a0:	4653      	mov	r3, sl
 80220a2:	4963      	ldr	r1, [pc, #396]	@ (8022230 <__ieee754_fmod+0x208>)
 80220a4:	2b00      	cmp	r3, #0
 80220a6:	dc36      	bgt.n	8022116 <__ieee754_fmod+0xee>
 80220a8:	4216      	tst	r6, r2
 80220aa:	d14f      	bne.n	802214c <__ieee754_fmod+0x124>
 80220ac:	f1bc 0f00 	cmp.w	ip, #0
 80220b0:	d144      	bne.n	802213c <__ieee754_fmod+0x114>
 80220b2:	463b      	mov	r3, r7
 80220b4:	4a5e      	ldr	r2, [pc, #376]	@ (8022230 <__ieee754_fmod+0x208>)
 80220b6:	2b00      	cmp	r3, #0
 80220b8:	dc3d      	bgt.n	8022136 <__ieee754_fmod+0x10e>
 80220ba:	485e      	ldr	r0, [pc, #376]	@ (8022234 <__ieee754_fmod+0x20c>)
 80220bc:	4281      	cmp	r1, r0
 80220be:	db4a      	blt.n	8022156 <__ieee754_fmod+0x12e>
 80220c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80220c4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80220c8:	485a      	ldr	r0, [pc, #360]	@ (8022234 <__ieee754_fmod+0x20c>)
 80220ca:	4282      	cmp	r2, r0
 80220cc:	db57      	blt.n	802217e <__ieee754_fmod+0x156>
 80220ce:	f3c6 0613 	ubfx	r6, r6, #0, #20
 80220d2:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 80220d6:	1a89      	subs	r1, r1, r2
 80220d8:	1b98      	subs	r0, r3, r6
 80220da:	eba4 070e 	sub.w	r7, r4, lr
 80220de:	2900      	cmp	r1, #0
 80220e0:	d162      	bne.n	80221a8 <__ieee754_fmod+0x180>
 80220e2:	4574      	cmp	r4, lr
 80220e4:	bf38      	it	cc
 80220e6:	f100 30ff 	addcc.w	r0, r0, #4294967295
 80220ea:	2800      	cmp	r0, #0
 80220ec:	bfa4      	itt	ge
 80220ee:	463c      	movge	r4, r7
 80220f0:	4603      	movge	r3, r0
 80220f2:	ea53 0104 	orrs.w	r1, r3, r4
 80220f6:	d0c6      	beq.n	8022086 <__ieee754_fmod+0x5e>
 80220f8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80220fc:	db69      	blt.n	80221d2 <__ieee754_fmod+0x1aa>
 80220fe:	494d      	ldr	r1, [pc, #308]	@ (8022234 <__ieee754_fmod+0x20c>)
 8022100:	428a      	cmp	r2, r1
 8022102:	db6c      	blt.n	80221de <__ieee754_fmod+0x1b6>
 8022104:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8022108:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 802210c:	4620      	mov	r0, r4
 802210e:	432b      	orrs	r3, r5
 8022110:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8022114:	e7a9      	b.n	802206a <__ieee754_fmod+0x42>
 8022116:	3901      	subs	r1, #1
 8022118:	005b      	lsls	r3, r3, #1
 802211a:	e7c3      	b.n	80220a4 <__ieee754_fmod+0x7c>
 802211c:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8022120:	4944      	ldr	r1, [pc, #272]	@ (8022234 <__ieee754_fmod+0x20c>)
 8022122:	2b00      	cmp	r3, #0
 8022124:	ddc0      	ble.n	80220a8 <__ieee754_fmod+0x80>
 8022126:	3901      	subs	r1, #1
 8022128:	005b      	lsls	r3, r3, #1
 802212a:	e7fa      	b.n	8022122 <__ieee754_fmod+0xfa>
 802212c:	ea4f 5128 	mov.w	r1, r8, asr #20
 8022130:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8022134:	e7b8      	b.n	80220a8 <__ieee754_fmod+0x80>
 8022136:	3a01      	subs	r2, #1
 8022138:	005b      	lsls	r3, r3, #1
 802213a:	e7bc      	b.n	80220b6 <__ieee754_fmod+0x8e>
 802213c:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 8022140:	4a3c      	ldr	r2, [pc, #240]	@ (8022234 <__ieee754_fmod+0x20c>)
 8022142:	2b00      	cmp	r3, #0
 8022144:	ddb9      	ble.n	80220ba <__ieee754_fmod+0x92>
 8022146:	3a01      	subs	r2, #1
 8022148:	005b      	lsls	r3, r3, #1
 802214a:	e7fa      	b.n	8022142 <__ieee754_fmod+0x11a>
 802214c:	ea4f 522c 	mov.w	r2, ip, asr #20
 8022150:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8022154:	e7b1      	b.n	80220ba <__ieee754_fmod+0x92>
 8022156:	1a40      	subs	r0, r0, r1
 8022158:	281f      	cmp	r0, #31
 802215a:	dc0a      	bgt.n	8022172 <__ieee754_fmod+0x14a>
 802215c:	f201 431e 	addw	r3, r1, #1054	@ 0x41e
 8022160:	fa08 f800 	lsl.w	r8, r8, r0
 8022164:	fa0a f400 	lsl.w	r4, sl, r0
 8022168:	fa2a f303 	lsr.w	r3, sl, r3
 802216c:	ea43 0308 	orr.w	r3, r3, r8
 8022170:	e7aa      	b.n	80220c8 <__ieee754_fmod+0xa0>
 8022172:	4b31      	ldr	r3, [pc, #196]	@ (8022238 <__ieee754_fmod+0x210>)
 8022174:	2400      	movs	r4, #0
 8022176:	1a5b      	subs	r3, r3, r1
 8022178:	fa0a f303 	lsl.w	r3, sl, r3
 802217c:	e7a4      	b.n	80220c8 <__ieee754_fmod+0xa0>
 802217e:	1a80      	subs	r0, r0, r2
 8022180:	281f      	cmp	r0, #31
 8022182:	dc0a      	bgt.n	802219a <__ieee754_fmod+0x172>
 8022184:	f202 461e 	addw	r6, r2, #1054	@ 0x41e
 8022188:	fa0c fc00 	lsl.w	ip, ip, r0
 802218c:	fa07 fe00 	lsl.w	lr, r7, r0
 8022190:	fa27 f606 	lsr.w	r6, r7, r6
 8022194:	ea46 060c 	orr.w	r6, r6, ip
 8022198:	e79d      	b.n	80220d6 <__ieee754_fmod+0xae>
 802219a:	4e27      	ldr	r6, [pc, #156]	@ (8022238 <__ieee754_fmod+0x210>)
 802219c:	f04f 0e00 	mov.w	lr, #0
 80221a0:	1ab6      	subs	r6, r6, r2
 80221a2:	fa07 f606 	lsl.w	r6, r7, r6
 80221a6:	e796      	b.n	80220d6 <__ieee754_fmod+0xae>
 80221a8:	4574      	cmp	r4, lr
 80221aa:	bf38      	it	cc
 80221ac:	f100 30ff 	addcc.w	r0, r0, #4294967295
 80221b0:	2800      	cmp	r0, #0
 80221b2:	da05      	bge.n	80221c0 <__ieee754_fmod+0x198>
 80221b4:	0fe0      	lsrs	r0, r4, #31
 80221b6:	0064      	lsls	r4, r4, #1
 80221b8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80221bc:	3901      	subs	r1, #1
 80221be:	e78b      	b.n	80220d8 <__ieee754_fmod+0xb0>
 80221c0:	ea50 0307 	orrs.w	r3, r0, r7
 80221c4:	f43f af5f 	beq.w	8022086 <__ieee754_fmod+0x5e>
 80221c8:	0ffb      	lsrs	r3, r7, #31
 80221ca:	007c      	lsls	r4, r7, #1
 80221cc:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80221d0:	e7f4      	b.n	80221bc <__ieee754_fmod+0x194>
 80221d2:	0fe1      	lsrs	r1, r4, #31
 80221d4:	3a01      	subs	r2, #1
 80221d6:	0064      	lsls	r4, r4, #1
 80221d8:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80221dc:	e78c      	b.n	80220f8 <__ieee754_fmod+0xd0>
 80221de:	1a89      	subs	r1, r1, r2
 80221e0:	2914      	cmp	r1, #20
 80221e2:	dc0a      	bgt.n	80221fa <__ieee754_fmod+0x1d2>
 80221e4:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 80221e8:	40cc      	lsrs	r4, r1
 80221ea:	fa03 f202 	lsl.w	r2, r3, r2
 80221ee:	410b      	asrs	r3, r1
 80221f0:	4322      	orrs	r2, r4
 80221f2:	ea43 0105 	orr.w	r1, r3, r5
 80221f6:	4610      	mov	r0, r2
 80221f8:	e737      	b.n	802206a <__ieee754_fmod+0x42>
 80221fa:	291f      	cmp	r1, #31
 80221fc:	dc07      	bgt.n	802220e <__ieee754_fmod+0x1e6>
 80221fe:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8022202:	40cc      	lsrs	r4, r1
 8022204:	fa03 f202 	lsl.w	r2, r3, r2
 8022208:	4322      	orrs	r2, r4
 802220a:	462b      	mov	r3, r5
 802220c:	e7f1      	b.n	80221f2 <__ieee754_fmod+0x1ca>
 802220e:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 8022212:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 8022216:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 802221a:	32e2      	adds	r2, #226	@ 0xe2
 802221c:	fa43 f202 	asr.w	r2, r3, r2
 8022220:	e7f3      	b.n	802220a <__ieee754_fmod+0x1e2>
 8022222:	bf00      	nop
 8022224:	7fefffff 	.word	0x7fefffff
 8022228:	7ff00000 	.word	0x7ff00000
 802222c:	08024840 	.word	0x08024840
 8022230:	fffffbed 	.word	0xfffffbed
 8022234:	fffffc02 	.word	0xfffffc02
 8022238:	fffffbe2 	.word	0xfffffbe2

0802223c <_init>:
 802223c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802223e:	bf00      	nop
 8022240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022242:	bc08      	pop	{r3}
 8022244:	469e      	mov	lr, r3
 8022246:	4770      	bx	lr

08022248 <_fini>:
 8022248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802224a:	bf00      	nop
 802224c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802224e:	bc08      	pop	{r3}
 8022250:	469e      	mov	lr, r3
 8022252:	4770      	bx	lr
