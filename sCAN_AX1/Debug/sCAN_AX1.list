
sCAN_AX1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00022024  08000250  08000250  00001250  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000025d0  08022278  08022278  00023278  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08024848  08024848  00026274  2**0
                  CONTENTS
  4 .ARM          00000008  08024848  08024848  00025848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08024850  08024850  00026274  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08024850  08024850  00025850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08024854  08024854  00025854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000274  20000000  08024858  00026000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00015564  20000278  08024acc  00026278  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200157dc  08024acc  000267dc  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00026274  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003cd9a  00000000  00000000  000262aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008d71  00000000  00000000  00063044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002ef0  00000000  00000000  0006bdb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000023fe  00000000  00000000  0006eca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000467a6  00000000  00000000  000710a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00048372  00000000  00000000  000b784c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001879df  00000000  00000000  000ffbbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0028759d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000df9c  00000000  00000000  002875e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  0029557c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	@ (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	20000278 	.word	0x20000278
 800026c:	00000000 	.word	0x00000000
 8000270:	0802225c 	.word	0x0802225c

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	@ (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	@ (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	@ (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	2000027c 	.word	0x2000027c
 800028c:	0802225c 	.word	0x0802225c

08000290 <strcmp>:
 8000290:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000294:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000298:	2a01      	cmp	r2, #1
 800029a:	bf28      	it	cs
 800029c:	429a      	cmpcs	r2, r3
 800029e:	d0f7      	beq.n	8000290 <strcmp>
 80002a0:	1ad0      	subs	r0, r2, r3
 80002a2:	4770      	bx	lr

080002a4 <strlen>:
 80002a4:	4603      	mov	r3, r0
 80002a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002aa:	2a00      	cmp	r2, #0
 80002ac:	d1fb      	bne.n	80002a6 <strlen+0x2>
 80002ae:	1a18      	subs	r0, r3, r0
 80002b0:	3801      	subs	r0, #1
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_drsub>:
 80002b4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b8:	e002      	b.n	80002c0 <__adddf3>
 80002ba:	bf00      	nop

080002bc <__aeabi_dsub>:
 80002bc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002c0 <__adddf3>:
 80002c0:	b530      	push	{r4, r5, lr}
 80002c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ca:	ea94 0f05 	teq	r4, r5
 80002ce:	bf08      	it	eq
 80002d0:	ea90 0f02 	teqeq	r0, r2
 80002d4:	bf1f      	itttt	ne
 80002d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e6:	f000 80e2 	beq.w	80004ae <__adddf3+0x1ee>
 80002ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f2:	bfb8      	it	lt
 80002f4:	426d      	neglt	r5, r5
 80002f6:	dd0c      	ble.n	8000312 <__adddf3+0x52>
 80002f8:	442c      	add	r4, r5
 80002fa:	ea80 0202 	eor.w	r2, r0, r2
 80002fe:	ea81 0303 	eor.w	r3, r1, r3
 8000302:	ea82 0000 	eor.w	r0, r2, r0
 8000306:	ea83 0101 	eor.w	r1, r3, r1
 800030a:	ea80 0202 	eor.w	r2, r0, r2
 800030e:	ea81 0303 	eor.w	r3, r1, r3
 8000312:	2d36      	cmp	r5, #54	@ 0x36
 8000314:	bf88      	it	hi
 8000316:	bd30      	pophi	{r4, r5, pc}
 8000318:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800031c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000320:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000324:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x70>
 800032a:	4240      	negs	r0, r0
 800032c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000330:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000334:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000338:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x84>
 800033e:	4252      	negs	r2, r2
 8000340:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000344:	ea94 0f05 	teq	r4, r5
 8000348:	f000 80a7 	beq.w	800049a <__adddf3+0x1da>
 800034c:	f1a4 0401 	sub.w	r4, r4, #1
 8000350:	f1d5 0e20 	rsbs	lr, r5, #32
 8000354:	db0d      	blt.n	8000372 <__adddf3+0xb2>
 8000356:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035a:	fa22 f205 	lsr.w	r2, r2, r5
 800035e:	1880      	adds	r0, r0, r2
 8000360:	f141 0100 	adc.w	r1, r1, #0
 8000364:	fa03 f20e 	lsl.w	r2, r3, lr
 8000368:	1880      	adds	r0, r0, r2
 800036a:	fa43 f305 	asr.w	r3, r3, r5
 800036e:	4159      	adcs	r1, r3
 8000370:	e00e      	b.n	8000390 <__adddf3+0xd0>
 8000372:	f1a5 0520 	sub.w	r5, r5, #32
 8000376:	f10e 0e20 	add.w	lr, lr, #32
 800037a:	2a01      	cmp	r2, #1
 800037c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000380:	bf28      	it	cs
 8000382:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	18c0      	adds	r0, r0, r3
 800038c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000390:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000394:	d507      	bpl.n	80003a6 <__adddf3+0xe6>
 8000396:	f04f 0e00 	mov.w	lr, #0
 800039a:	f1dc 0c00 	rsbs	ip, ip, #0
 800039e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003aa:	d31b      	bcc.n	80003e4 <__adddf3+0x124>
 80003ac:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003b0:	d30c      	bcc.n	80003cc <__adddf3+0x10c>
 80003b2:	0849      	lsrs	r1, r1, #1
 80003b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003bc:	f104 0401 	add.w	r4, r4, #1
 80003c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c8:	f080 809a 	bcs.w	8000500 <__adddf3+0x240>
 80003cc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003d0:	bf08      	it	eq
 80003d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d6:	f150 0000 	adcs.w	r0, r0, #0
 80003da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003de:	ea41 0105 	orr.w	r1, r1, r5
 80003e2:	bd30      	pop	{r4, r5, pc}
 80003e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e8:	4140      	adcs	r0, r0
 80003ea:	eb41 0101 	adc.w	r1, r1, r1
 80003ee:	3c01      	subs	r4, #1
 80003f0:	bf28      	it	cs
 80003f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f6:	d2e9      	bcs.n	80003cc <__adddf3+0x10c>
 80003f8:	f091 0f00 	teq	r1, #0
 80003fc:	bf04      	itt	eq
 80003fe:	4601      	moveq	r1, r0
 8000400:	2000      	moveq	r0, #0
 8000402:	fab1 f381 	clz	r3, r1
 8000406:	bf08      	it	eq
 8000408:	3320      	addeq	r3, #32
 800040a:	f1a3 030b 	sub.w	r3, r3, #11
 800040e:	f1b3 0220 	subs.w	r2, r3, #32
 8000412:	da0c      	bge.n	800042e <__adddf3+0x16e>
 8000414:	320c      	adds	r2, #12
 8000416:	dd08      	ble.n	800042a <__adddf3+0x16a>
 8000418:	f102 0c14 	add.w	ip, r2, #20
 800041c:	f1c2 020c 	rsb	r2, r2, #12
 8000420:	fa01 f00c 	lsl.w	r0, r1, ip
 8000424:	fa21 f102 	lsr.w	r1, r1, r2
 8000428:	e00c      	b.n	8000444 <__adddf3+0x184>
 800042a:	f102 0214 	add.w	r2, r2, #20
 800042e:	bfd8      	it	le
 8000430:	f1c2 0c20 	rsble	ip, r2, #32
 8000434:	fa01 f102 	lsl.w	r1, r1, r2
 8000438:	fa20 fc0c 	lsr.w	ip, r0, ip
 800043c:	bfdc      	itt	le
 800043e:	ea41 010c 	orrle.w	r1, r1, ip
 8000442:	4090      	lslle	r0, r2
 8000444:	1ae4      	subs	r4, r4, r3
 8000446:	bfa2      	ittt	ge
 8000448:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800044c:	4329      	orrge	r1, r5
 800044e:	bd30      	popge	{r4, r5, pc}
 8000450:	ea6f 0404 	mvn.w	r4, r4
 8000454:	3c1f      	subs	r4, #31
 8000456:	da1c      	bge.n	8000492 <__adddf3+0x1d2>
 8000458:	340c      	adds	r4, #12
 800045a:	dc0e      	bgt.n	800047a <__adddf3+0x1ba>
 800045c:	f104 0414 	add.w	r4, r4, #20
 8000460:	f1c4 0220 	rsb	r2, r4, #32
 8000464:	fa20 f004 	lsr.w	r0, r0, r4
 8000468:	fa01 f302 	lsl.w	r3, r1, r2
 800046c:	ea40 0003 	orr.w	r0, r0, r3
 8000470:	fa21 f304 	lsr.w	r3, r1, r4
 8000474:	ea45 0103 	orr.w	r1, r5, r3
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	f1c4 040c 	rsb	r4, r4, #12
 800047e:	f1c4 0220 	rsb	r2, r4, #32
 8000482:	fa20 f002 	lsr.w	r0, r0, r2
 8000486:	fa01 f304 	lsl.w	r3, r1, r4
 800048a:	ea40 0003 	orr.w	r0, r0, r3
 800048e:	4629      	mov	r1, r5
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	fa21 f004 	lsr.w	r0, r1, r4
 8000496:	4629      	mov	r1, r5
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	f094 0f00 	teq	r4, #0
 800049e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004a2:	bf06      	itte	eq
 80004a4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a8:	3401      	addeq	r4, #1
 80004aa:	3d01      	subne	r5, #1
 80004ac:	e74e      	b.n	800034c <__adddf3+0x8c>
 80004ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b2:	bf18      	it	ne
 80004b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b8:	d029      	beq.n	800050e <__adddf3+0x24e>
 80004ba:	ea94 0f05 	teq	r4, r5
 80004be:	bf08      	it	eq
 80004c0:	ea90 0f02 	teqeq	r0, r2
 80004c4:	d005      	beq.n	80004d2 <__adddf3+0x212>
 80004c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ca:	bf04      	itt	eq
 80004cc:	4619      	moveq	r1, r3
 80004ce:	4610      	moveq	r0, r2
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	ea91 0f03 	teq	r1, r3
 80004d6:	bf1e      	ittt	ne
 80004d8:	2100      	movne	r1, #0
 80004da:	2000      	movne	r0, #0
 80004dc:	bd30      	popne	{r4, r5, pc}
 80004de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e2:	d105      	bne.n	80004f0 <__adddf3+0x230>
 80004e4:	0040      	lsls	r0, r0, #1
 80004e6:	4149      	adcs	r1, r1
 80004e8:	bf28      	it	cs
 80004ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f4:	bf3c      	itt	cc
 80004f6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004fa:	bd30      	popcc	{r4, r5, pc}
 80004fc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000500:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000504:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000508:	f04f 0000 	mov.w	r0, #0
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000512:	bf1a      	itte	ne
 8000514:	4619      	movne	r1, r3
 8000516:	4610      	movne	r0, r2
 8000518:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800051c:	bf1c      	itt	ne
 800051e:	460b      	movne	r3, r1
 8000520:	4602      	movne	r2, r0
 8000522:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000526:	bf06      	itte	eq
 8000528:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800052c:	ea91 0f03 	teqeq	r1, r3
 8000530:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	bf00      	nop

08000538 <__aeabi_ui2d>:
 8000538:	f090 0f00 	teq	r0, #0
 800053c:	bf04      	itt	eq
 800053e:	2100      	moveq	r1, #0
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000548:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800054c:	f04f 0500 	mov.w	r5, #0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e750      	b.n	80003f8 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_i2d>:
 8000558:	f090 0f00 	teq	r0, #0
 800055c:	bf04      	itt	eq
 800055e:	2100      	moveq	r1, #0
 8000560:	4770      	bxeq	lr
 8000562:	b530      	push	{r4, r5, lr}
 8000564:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000568:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000570:	bf48      	it	mi
 8000572:	4240      	negmi	r0, r0
 8000574:	f04f 0100 	mov.w	r1, #0
 8000578:	e73e      	b.n	80003f8 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_f2d>:
 800057c:	0042      	lsls	r2, r0, #1
 800057e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000582:	ea4f 0131 	mov.w	r1, r1, rrx
 8000586:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058a:	bf1f      	itttt	ne
 800058c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000590:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000594:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000598:	4770      	bxne	lr
 800059a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059e:	bf08      	it	eq
 80005a0:	4770      	bxeq	lr
 80005a2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a6:	bf04      	itt	eq
 80005a8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005bc:	e71c      	b.n	80003f8 <__adddf3+0x138>
 80005be:	bf00      	nop

080005c0 <__aeabi_ul2d>:
 80005c0:	ea50 0201 	orrs.w	r2, r0, r1
 80005c4:	bf08      	it	eq
 80005c6:	4770      	bxeq	lr
 80005c8:	b530      	push	{r4, r5, lr}
 80005ca:	f04f 0500 	mov.w	r5, #0
 80005ce:	e00a      	b.n	80005e6 <__aeabi_l2d+0x16>

080005d0 <__aeabi_l2d>:
 80005d0:	ea50 0201 	orrs.w	r2, r0, r1
 80005d4:	bf08      	it	eq
 80005d6:	4770      	bxeq	lr
 80005d8:	b530      	push	{r4, r5, lr}
 80005da:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005de:	d502      	bpl.n	80005e6 <__aeabi_l2d+0x16>
 80005e0:	4240      	negs	r0, r0
 80005e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005ea:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f2:	f43f aed8 	beq.w	80003a6 <__adddf3+0xe6>
 80005f6:	f04f 0203 	mov.w	r2, #3
 80005fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fe:	bf18      	it	ne
 8000600:	3203      	addne	r2, #3
 8000602:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000606:	bf18      	it	ne
 8000608:	3203      	addne	r2, #3
 800060a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060e:	f1c2 0320 	rsb	r3, r2, #32
 8000612:	fa00 fc03 	lsl.w	ip, r0, r3
 8000616:	fa20 f002 	lsr.w	r0, r0, r2
 800061a:	fa01 fe03 	lsl.w	lr, r1, r3
 800061e:	ea40 000e 	orr.w	r0, r0, lr
 8000622:	fa21 f102 	lsr.w	r1, r1, r2
 8000626:	4414      	add	r4, r2
 8000628:	e6bd      	b.n	80003a6 <__adddf3+0xe6>
 800062a:	bf00      	nop

0800062c <__aeabi_dmul>:
 800062c:	b570      	push	{r4, r5, r6, lr}
 800062e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000632:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000636:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063a:	bf1d      	ittte	ne
 800063c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000640:	ea94 0f0c 	teqne	r4, ip
 8000644:	ea95 0f0c 	teqne	r5, ip
 8000648:	f000 f8de 	bleq	8000808 <__aeabi_dmul+0x1dc>
 800064c:	442c      	add	r4, r5
 800064e:	ea81 0603 	eor.w	r6, r1, r3
 8000652:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000656:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065e:	bf18      	it	ne
 8000660:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800066c:	d038      	beq.n	80006e0 <__aeabi_dmul+0xb4>
 800066e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000672:	f04f 0500 	mov.w	r5, #0
 8000676:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000682:	f04f 0600 	mov.w	r6, #0
 8000686:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068a:	f09c 0f00 	teq	ip, #0
 800068e:	bf18      	it	ne
 8000690:	f04e 0e01 	orrne.w	lr, lr, #1
 8000694:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000698:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800069c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006a0:	d204      	bcs.n	80006ac <__aeabi_dmul+0x80>
 80006a2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a6:	416d      	adcs	r5, r5
 80006a8:	eb46 0606 	adc.w	r6, r6, r6
 80006ac:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006bc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c0:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c4:	bf88      	it	hi
 80006c6:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006ca:	d81e      	bhi.n	800070a <__aeabi_dmul+0xde>
 80006cc:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006d0:	bf08      	it	eq
 80006d2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d6:	f150 0000 	adcs.w	r0, r0, #0
 80006da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e4:	ea46 0101 	orr.w	r1, r6, r1
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	ea81 0103 	eor.w	r1, r1, r3
 80006f0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f4:	bfc2      	ittt	gt
 80006f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000700:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000704:	f04f 0e00 	mov.w	lr, #0
 8000708:	3c01      	subs	r4, #1
 800070a:	f300 80ab 	bgt.w	8000864 <__aeabi_dmul+0x238>
 800070e:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000712:	bfde      	ittt	le
 8000714:	2000      	movle	r0, #0
 8000716:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800071a:	bd70      	pople	{r4, r5, r6, pc}
 800071c:	f1c4 0400 	rsb	r4, r4, #0
 8000720:	3c20      	subs	r4, #32
 8000722:	da35      	bge.n	8000790 <__aeabi_dmul+0x164>
 8000724:	340c      	adds	r4, #12
 8000726:	dc1b      	bgt.n	8000760 <__aeabi_dmul+0x134>
 8000728:	f104 0414 	add.w	r4, r4, #20
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f305 	lsl.w	r3, r0, r5
 8000734:	fa20 f004 	lsr.w	r0, r0, r4
 8000738:	fa01 f205 	lsl.w	r2, r1, r5
 800073c:	ea40 0002 	orr.w	r0, r0, r2
 8000740:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000744:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	fa21 f604 	lsr.w	r6, r1, r4
 8000750:	eb42 0106 	adc.w	r1, r2, r6
 8000754:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000758:	bf08      	it	eq
 800075a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075e:	bd70      	pop	{r4, r5, r6, pc}
 8000760:	f1c4 040c 	rsb	r4, r4, #12
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f304 	lsl.w	r3, r0, r4
 800076c:	fa20 f005 	lsr.w	r0, r0, r5
 8000770:	fa01 f204 	lsl.w	r2, r1, r4
 8000774:	ea40 0002 	orr.w	r0, r0, r2
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000780:	f141 0100 	adc.w	r1, r1, #0
 8000784:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000788:	bf08      	it	eq
 800078a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078e:	bd70      	pop	{r4, r5, r6, pc}
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f205 	lsl.w	r2, r0, r5
 8000798:	ea4e 0e02 	orr.w	lr, lr, r2
 800079c:	fa20 f304 	lsr.w	r3, r0, r4
 80007a0:	fa01 f205 	lsl.w	r2, r1, r5
 80007a4:	ea43 0302 	orr.w	r3, r3, r2
 80007a8:	fa21 f004 	lsr.w	r0, r1, r4
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b0:	fa21 f204 	lsr.w	r2, r1, r4
 80007b4:	ea20 0002 	bic.w	r0, r0, r2
 80007b8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c0:	bf08      	it	eq
 80007c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c6:	bd70      	pop	{r4, r5, r6, pc}
 80007c8:	f094 0f00 	teq	r4, #0
 80007cc:	d10f      	bne.n	80007ee <__aeabi_dmul+0x1c2>
 80007ce:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007d2:	0040      	lsls	r0, r0, #1
 80007d4:	eb41 0101 	adc.w	r1, r1, r1
 80007d8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007dc:	bf08      	it	eq
 80007de:	3c01      	subeq	r4, #1
 80007e0:	d0f7      	beq.n	80007d2 <__aeabi_dmul+0x1a6>
 80007e2:	ea41 0106 	orr.w	r1, r1, r6
 80007e6:	f095 0f00 	teq	r5, #0
 80007ea:	bf18      	it	ne
 80007ec:	4770      	bxne	lr
 80007ee:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007f2:	0052      	lsls	r2, r2, #1
 80007f4:	eb43 0303 	adc.w	r3, r3, r3
 80007f8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007fc:	bf08      	it	eq
 80007fe:	3d01      	subeq	r5, #1
 8000800:	d0f7      	beq.n	80007f2 <__aeabi_dmul+0x1c6>
 8000802:	ea43 0306 	orr.w	r3, r3, r6
 8000806:	4770      	bx	lr
 8000808:	ea94 0f0c 	teq	r4, ip
 800080c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000810:	bf18      	it	ne
 8000812:	ea95 0f0c 	teqne	r5, ip
 8000816:	d00c      	beq.n	8000832 <__aeabi_dmul+0x206>
 8000818:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800081c:	bf18      	it	ne
 800081e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000822:	d1d1      	bne.n	80007c8 <__aeabi_dmul+0x19c>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000836:	bf06      	itte	eq
 8000838:	4610      	moveq	r0, r2
 800083a:	4619      	moveq	r1, r3
 800083c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000840:	d019      	beq.n	8000876 <__aeabi_dmul+0x24a>
 8000842:	ea94 0f0c 	teq	r4, ip
 8000846:	d102      	bne.n	800084e <__aeabi_dmul+0x222>
 8000848:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800084c:	d113      	bne.n	8000876 <__aeabi_dmul+0x24a>
 800084e:	ea95 0f0c 	teq	r5, ip
 8000852:	d105      	bne.n	8000860 <__aeabi_dmul+0x234>
 8000854:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000858:	bf1c      	itt	ne
 800085a:	4610      	movne	r0, r2
 800085c:	4619      	movne	r1, r3
 800085e:	d10a      	bne.n	8000876 <__aeabi_dmul+0x24a>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000868:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800086c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000870:	f04f 0000 	mov.w	r0, #0
 8000874:	bd70      	pop	{r4, r5, r6, pc}
 8000876:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800087a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087e:	bd70      	pop	{r4, r5, r6, pc}

08000880 <__aeabi_ddiv>:
 8000880:	b570      	push	{r4, r5, r6, lr}
 8000882:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000886:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800088a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088e:	bf1d      	ittte	ne
 8000890:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000894:	ea94 0f0c 	teqne	r4, ip
 8000898:	ea95 0f0c 	teqne	r5, ip
 800089c:	f000 f8a7 	bleq	80009ee <__aeabi_ddiv+0x16e>
 80008a0:	eba4 0405 	sub.w	r4, r4, r5
 80008a4:	ea81 0e03 	eor.w	lr, r1, r3
 80008a8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b0:	f000 8088 	beq.w	80009c4 <__aeabi_ddiv+0x144>
 80008b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b8:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008bc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008cc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d4:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d8:	429d      	cmp	r5, r3
 80008da:	bf08      	it	eq
 80008dc:	4296      	cmpeq	r6, r2
 80008de:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008e2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e6:	d202      	bcs.n	80008ee <__aeabi_ddiv+0x6e>
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	1ab6      	subs	r6, r6, r2
 80008f0:	eb65 0503 	sbc.w	r5, r5, r3
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fe:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000902:	ebb6 0e02 	subs.w	lr, r6, r2
 8000906:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090a:	bf22      	ittt	cs
 800090c:	1ab6      	subcs	r6, r6, r2
 800090e:	4675      	movcs	r5, lr
 8000910:	ea40 000c 	orrcs.w	r0, r0, ip
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	ebb6 0e02 	subs.w	lr, r6, r2
 800091e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000922:	bf22      	ittt	cs
 8000924:	1ab6      	subcs	r6, r6, r2
 8000926:	4675      	movcs	r5, lr
 8000928:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800092c:	085b      	lsrs	r3, r3, #1
 800092e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000932:	ebb6 0e02 	subs.w	lr, r6, r2
 8000936:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093a:	bf22      	ittt	cs
 800093c:	1ab6      	subcs	r6, r6, r2
 800093e:	4675      	movcs	r5, lr
 8000940:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000944:	085b      	lsrs	r3, r3, #1
 8000946:	ea4f 0232 	mov.w	r2, r2, rrx
 800094a:	ebb6 0e02 	subs.w	lr, r6, r2
 800094e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000952:	bf22      	ittt	cs
 8000954:	1ab6      	subcs	r6, r6, r2
 8000956:	4675      	movcs	r5, lr
 8000958:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800095c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000960:	d018      	beq.n	8000994 <__aeabi_ddiv+0x114>
 8000962:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000966:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000972:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000976:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097e:	d1c0      	bne.n	8000902 <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	d10b      	bne.n	800099e <__aeabi_ddiv+0x11e>
 8000986:	ea41 0100 	orr.w	r1, r1, r0
 800098a:	f04f 0000 	mov.w	r0, #0
 800098e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000992:	e7b6      	b.n	8000902 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000998:	bf04      	itt	eq
 800099a:	4301      	orreq	r1, r0
 800099c:	2000      	moveq	r0, #0
 800099e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009a2:	bf88      	it	hi
 80009a4:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a8:	f63f aeaf 	bhi.w	800070a <__aeabi_dmul+0xde>
 80009ac:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b0:	bf04      	itt	eq
 80009b2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ba:	f150 0000 	adcs.w	r0, r0, #0
 80009be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c2:	bd70      	pop	{r4, r5, r6, pc}
 80009c4:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009cc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d0:	bfc2      	ittt	gt
 80009d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009da:	bd70      	popgt	{r4, r5, r6, pc}
 80009dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009e0:	f04f 0e00 	mov.w	lr, #0
 80009e4:	3c01      	subs	r4, #1
 80009e6:	e690      	b.n	800070a <__aeabi_dmul+0xde>
 80009e8:	ea45 0e06 	orr.w	lr, r5, r6
 80009ec:	e68d      	b.n	800070a <__aeabi_dmul+0xde>
 80009ee:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f2:	ea94 0f0c 	teq	r4, ip
 80009f6:	bf08      	it	eq
 80009f8:	ea95 0f0c 	teqeq	r5, ip
 80009fc:	f43f af3b 	beq.w	8000876 <__aeabi_dmul+0x24a>
 8000a00:	ea94 0f0c 	teq	r4, ip
 8000a04:	d10a      	bne.n	8000a1c <__aeabi_ddiv+0x19c>
 8000a06:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0a:	f47f af34 	bne.w	8000876 <__aeabi_dmul+0x24a>
 8000a0e:	ea95 0f0c 	teq	r5, ip
 8000a12:	f47f af25 	bne.w	8000860 <__aeabi_dmul+0x234>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e72c      	b.n	8000876 <__aeabi_dmul+0x24a>
 8000a1c:	ea95 0f0c 	teq	r5, ip
 8000a20:	d106      	bne.n	8000a30 <__aeabi_ddiv+0x1b0>
 8000a22:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a26:	f43f aefd 	beq.w	8000824 <__aeabi_dmul+0x1f8>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e722      	b.n	8000876 <__aeabi_dmul+0x24a>
 8000a30:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a34:	bf18      	it	ne
 8000a36:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3a:	f47f aec5 	bne.w	80007c8 <__aeabi_dmul+0x19c>
 8000a3e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a42:	f47f af0d 	bne.w	8000860 <__aeabi_dmul+0x234>
 8000a46:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4a:	f47f aeeb 	bne.w	8000824 <__aeabi_dmul+0x1f8>
 8000a4e:	e712      	b.n	8000876 <__aeabi_dmul+0x24a>

08000a50 <__gedf2>:
 8000a50:	f04f 3cff 	mov.w	ip, #4294967295
 8000a54:	e006      	b.n	8000a64 <__cmpdf2+0x4>
 8000a56:	bf00      	nop

08000a58 <__ledf2>:
 8000a58:	f04f 0c01 	mov.w	ip, #1
 8000a5c:	e002      	b.n	8000a64 <__cmpdf2+0x4>
 8000a5e:	bf00      	nop

08000a60 <__cmpdf2>:
 8000a60:	f04f 0c01 	mov.w	ip, #1
 8000a64:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a68:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a6c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a74:	bf18      	it	ne
 8000a76:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a7a:	d01b      	beq.n	8000ab4 <__cmpdf2+0x54>
 8000a7c:	b001      	add	sp, #4
 8000a7e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a82:	bf0c      	ite	eq
 8000a84:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a88:	ea91 0f03 	teqne	r1, r3
 8000a8c:	bf02      	ittt	eq
 8000a8e:	ea90 0f02 	teqeq	r0, r2
 8000a92:	2000      	moveq	r0, #0
 8000a94:	4770      	bxeq	lr
 8000a96:	f110 0f00 	cmn.w	r0, #0
 8000a9a:	ea91 0f03 	teq	r1, r3
 8000a9e:	bf58      	it	pl
 8000aa0:	4299      	cmppl	r1, r3
 8000aa2:	bf08      	it	eq
 8000aa4:	4290      	cmpeq	r0, r2
 8000aa6:	bf2c      	ite	cs
 8000aa8:	17d8      	asrcs	r0, r3, #31
 8000aaa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aae:	f040 0001 	orr.w	r0, r0, #1
 8000ab2:	4770      	bx	lr
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__cmpdf2+0x64>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d107      	bne.n	8000ad4 <__cmpdf2+0x74>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d1d6      	bne.n	8000a7c <__cmpdf2+0x1c>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d0d3      	beq.n	8000a7c <__cmpdf2+0x1c>
 8000ad4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop

08000adc <__aeabi_cdrcmple>:
 8000adc:	4684      	mov	ip, r0
 8000ade:	4610      	mov	r0, r2
 8000ae0:	4662      	mov	r2, ip
 8000ae2:	468c      	mov	ip, r1
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4663      	mov	r3, ip
 8000ae8:	e000      	b.n	8000aec <__aeabi_cdcmpeq>
 8000aea:	bf00      	nop

08000aec <__aeabi_cdcmpeq>:
 8000aec:	b501      	push	{r0, lr}
 8000aee:	f7ff ffb7 	bl	8000a60 <__cmpdf2>
 8000af2:	2800      	cmp	r0, #0
 8000af4:	bf48      	it	mi
 8000af6:	f110 0f00 	cmnmi.w	r0, #0
 8000afa:	bd01      	pop	{r0, pc}

08000afc <__aeabi_dcmpeq>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff fff4 	bl	8000aec <__aeabi_cdcmpeq>
 8000b04:	bf0c      	ite	eq
 8000b06:	2001      	moveq	r0, #1
 8000b08:	2000      	movne	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmplt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffea 	bl	8000aec <__aeabi_cdcmpeq>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmple>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffe0 	bl	8000aec <__aeabi_cdcmpeq>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpge>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffce 	bl	8000adc <__aeabi_cdrcmple>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpgt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffc4 	bl	8000adc <__aeabi_cdrcmple>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpun>:
 8000b60:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b68:	d102      	bne.n	8000b70 <__aeabi_dcmpun+0x10>
 8000b6a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6e:	d10a      	bne.n	8000b86 <__aeabi_dcmpun+0x26>
 8000b70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b78:	d102      	bne.n	8000b80 <__aeabi_dcmpun+0x20>
 8000b7a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7e:	d102      	bne.n	8000b86 <__aeabi_dcmpun+0x26>
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	f04f 0001 	mov.w	r0, #1
 8000b8a:	4770      	bx	lr

08000b8c <__aeabi_d2iz>:
 8000b8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b90:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b94:	d215      	bcs.n	8000bc2 <__aeabi_d2iz+0x36>
 8000b96:	d511      	bpl.n	8000bbc <__aeabi_d2iz+0x30>
 8000b98:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba0:	d912      	bls.n	8000bc8 <__aeabi_d2iz+0x3c>
 8000ba2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000baa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bae:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bb2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb6:	bf18      	it	ne
 8000bb8:	4240      	negne	r0, r0
 8000bba:	4770      	bx	lr
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc6:	d105      	bne.n	8000bd4 <__aeabi_d2iz+0x48>
 8000bc8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bcc:	bf08      	it	eq
 8000bce:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bd2:	4770      	bx	lr
 8000bd4:	f04f 0000 	mov.w	r0, #0
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop

08000bdc <__aeabi_d2uiz>:
 8000bdc:	004a      	lsls	r2, r1, #1
 8000bde:	d211      	bcs.n	8000c04 <__aeabi_d2uiz+0x28>
 8000be0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000be4:	d211      	bcs.n	8000c0a <__aeabi_d2uiz+0x2e>
 8000be6:	d50d      	bpl.n	8000c04 <__aeabi_d2uiz+0x28>
 8000be8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bf0:	d40e      	bmi.n	8000c10 <__aeabi_d2uiz+0x34>
 8000bf2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bfa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfe:	fa23 f002 	lsr.w	r0, r3, r2
 8000c02:	4770      	bx	lr
 8000c04:	f04f 0000 	mov.w	r0, #0
 8000c08:	4770      	bx	lr
 8000c0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0e:	d102      	bne.n	8000c16 <__aeabi_d2uiz+0x3a>
 8000c10:	f04f 30ff 	mov.w	r0, #4294967295
 8000c14:	4770      	bx	lr
 8000c16:	f04f 0000 	mov.w	r0, #0
 8000c1a:	4770      	bx	lr

08000c1c <__aeabi_d2f>:
 8000c1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c24:	bf24      	itt	cs
 8000c26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c2e:	d90d      	bls.n	8000c4c <__aeabi_d2f+0x30>
 8000c30:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c3c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c44:	bf08      	it	eq
 8000c46:	f020 0001 	biceq.w	r0, r0, #1
 8000c4a:	4770      	bx	lr
 8000c4c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c50:	d121      	bne.n	8000c96 <__aeabi_d2f+0x7a>
 8000c52:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c56:	bfbc      	itt	lt
 8000c58:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c5c:	4770      	bxlt	lr
 8000c5e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c66:	f1c2 0218 	rsb	r2, r2, #24
 8000c6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c72:	fa20 f002 	lsr.w	r0, r0, r2
 8000c76:	bf18      	it	ne
 8000c78:	f040 0001 	orrne.w	r0, r0, #1
 8000c7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c88:	ea40 000c 	orr.w	r0, r0, ip
 8000c8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c94:	e7cc      	b.n	8000c30 <__aeabi_d2f+0x14>
 8000c96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c9a:	d107      	bne.n	8000cac <__aeabi_d2f+0x90>
 8000c9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ca0:	bf1e      	ittt	ne
 8000ca2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ca6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000caa:	4770      	bxne	lr
 8000cac:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cb0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop

08000cbc <__aeabi_uldivmod>:
 8000cbc:	b953      	cbnz	r3, 8000cd4 <__aeabi_uldivmod+0x18>
 8000cbe:	b94a      	cbnz	r2, 8000cd4 <__aeabi_uldivmod+0x18>
 8000cc0:	2900      	cmp	r1, #0
 8000cc2:	bf08      	it	eq
 8000cc4:	2800      	cmpeq	r0, #0
 8000cc6:	bf1c      	itt	ne
 8000cc8:	f04f 31ff 	movne.w	r1, #4294967295
 8000ccc:	f04f 30ff 	movne.w	r0, #4294967295
 8000cd0:	f000 b9b4 	b.w	800103c <__aeabi_idiv0>
 8000cd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cdc:	f000 f83c 	bl	8000d58 <__udivmoddi4>
 8000ce0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce8:	b004      	add	sp, #16
 8000cea:	4770      	bx	lr

08000cec <__aeabi_d2lz>:
 8000cec:	b538      	push	{r3, r4, r5, lr}
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	4604      	mov	r4, r0
 8000cf4:	460d      	mov	r5, r1
 8000cf6:	f7ff ff0b 	bl	8000b10 <__aeabi_dcmplt>
 8000cfa:	b928      	cbnz	r0, 8000d08 <__aeabi_d2lz+0x1c>
 8000cfc:	4620      	mov	r0, r4
 8000cfe:	4629      	mov	r1, r5
 8000d00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d04:	f000 b80a 	b.w	8000d1c <__aeabi_d2ulz>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d0e:	f000 f805 	bl	8000d1c <__aeabi_d2ulz>
 8000d12:	4240      	negs	r0, r0
 8000d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d18:	bd38      	pop	{r3, r4, r5, pc}
 8000d1a:	bf00      	nop

08000d1c <__aeabi_d2ulz>:
 8000d1c:	b5d0      	push	{r4, r6, r7, lr}
 8000d1e:	2200      	movs	r2, #0
 8000d20:	4b0b      	ldr	r3, [pc, #44]	@ (8000d50 <__aeabi_d2ulz+0x34>)
 8000d22:	4606      	mov	r6, r0
 8000d24:	460f      	mov	r7, r1
 8000d26:	f7ff fc81 	bl	800062c <__aeabi_dmul>
 8000d2a:	f7ff ff57 	bl	8000bdc <__aeabi_d2uiz>
 8000d2e:	4604      	mov	r4, r0
 8000d30:	f7ff fc02 	bl	8000538 <__aeabi_ui2d>
 8000d34:	2200      	movs	r2, #0
 8000d36:	4b07      	ldr	r3, [pc, #28]	@ (8000d54 <__aeabi_d2ulz+0x38>)
 8000d38:	f7ff fc78 	bl	800062c <__aeabi_dmul>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	460b      	mov	r3, r1
 8000d40:	4630      	mov	r0, r6
 8000d42:	4639      	mov	r1, r7
 8000d44:	f7ff faba 	bl	80002bc <__aeabi_dsub>
 8000d48:	f7ff ff48 	bl	8000bdc <__aeabi_d2uiz>
 8000d4c:	4621      	mov	r1, r4
 8000d4e:	bdd0      	pop	{r4, r6, r7, pc}
 8000d50:	3df00000 	.word	0x3df00000
 8000d54:	41f00000 	.word	0x41f00000

08000d58 <__udivmoddi4>:
 8000d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d5c:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000d5e:	460c      	mov	r4, r1
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d14d      	bne.n	8000e00 <__udivmoddi4+0xa8>
 8000d64:	428a      	cmp	r2, r1
 8000d66:	460f      	mov	r7, r1
 8000d68:	4684      	mov	ip, r0
 8000d6a:	4696      	mov	lr, r2
 8000d6c:	fab2 f382 	clz	r3, r2
 8000d70:	d960      	bls.n	8000e34 <__udivmoddi4+0xdc>
 8000d72:	b14b      	cbz	r3, 8000d88 <__udivmoddi4+0x30>
 8000d74:	fa02 fe03 	lsl.w	lr, r2, r3
 8000d78:	f1c3 0220 	rsb	r2, r3, #32
 8000d7c:	409f      	lsls	r7, r3
 8000d7e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000d82:	fa20 f202 	lsr.w	r2, r0, r2
 8000d86:	4317      	orrs	r7, r2
 8000d88:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000d8c:	fa1f f48e 	uxth.w	r4, lr
 8000d90:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000d94:	fbb7 f1f6 	udiv	r1, r7, r6
 8000d98:	fb06 7711 	mls	r7, r6, r1, r7
 8000d9c:	fb01 f004 	mul.w	r0, r1, r4
 8000da0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000da4:	4290      	cmp	r0, r2
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x62>
 8000da8:	eb1e 0202 	adds.w	r2, lr, r2
 8000dac:	f101 37ff 	add.w	r7, r1, #4294967295
 8000db0:	d202      	bcs.n	8000db8 <__udivmoddi4+0x60>
 8000db2:	4290      	cmp	r0, r2
 8000db4:	f200 812d 	bhi.w	8001012 <__udivmoddi4+0x2ba>
 8000db8:	4639      	mov	r1, r7
 8000dba:	1a12      	subs	r2, r2, r0
 8000dbc:	fa1f fc8c 	uxth.w	ip, ip
 8000dc0:	fbb2 f0f6 	udiv	r0, r2, r6
 8000dc4:	fb06 2210 	mls	r2, r6, r0, r2
 8000dc8:	fb00 f404 	mul.w	r4, r0, r4
 8000dcc:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000dd0:	4564      	cmp	r4, ip
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x8e>
 8000dd4:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000dd8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ddc:	d202      	bcs.n	8000de4 <__udivmoddi4+0x8c>
 8000dde:	4564      	cmp	r4, ip
 8000de0:	f200 811a 	bhi.w	8001018 <__udivmoddi4+0x2c0>
 8000de4:	4610      	mov	r0, r2
 8000de6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dea:	ebac 0c04 	sub.w	ip, ip, r4
 8000dee:	2100      	movs	r1, #0
 8000df0:	b125      	cbz	r5, 8000dfc <__udivmoddi4+0xa4>
 8000df2:	fa2c f303 	lsr.w	r3, ip, r3
 8000df6:	2200      	movs	r2, #0
 8000df8:	e9c5 3200 	strd	r3, r2, [r5]
 8000dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000e00:	428b      	cmp	r3, r1
 8000e02:	d905      	bls.n	8000e10 <__udivmoddi4+0xb8>
 8000e04:	b10d      	cbz	r5, 8000e0a <__udivmoddi4+0xb2>
 8000e06:	e9c5 0100 	strd	r0, r1, [r5]
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	e7f5      	b.n	8000dfc <__udivmoddi4+0xa4>
 8000e10:	fab3 f183 	clz	r1, r3
 8000e14:	2900      	cmp	r1, #0
 8000e16:	d14d      	bne.n	8000eb4 <__udivmoddi4+0x15c>
 8000e18:	42a3      	cmp	r3, r4
 8000e1a:	f0c0 80f2 	bcc.w	8001002 <__udivmoddi4+0x2aa>
 8000e1e:	4290      	cmp	r0, r2
 8000e20:	f080 80ef 	bcs.w	8001002 <__udivmoddi4+0x2aa>
 8000e24:	4606      	mov	r6, r0
 8000e26:	4623      	mov	r3, r4
 8000e28:	4608      	mov	r0, r1
 8000e2a:	2d00      	cmp	r5, #0
 8000e2c:	d0e6      	beq.n	8000dfc <__udivmoddi4+0xa4>
 8000e2e:	e9c5 6300 	strd	r6, r3, [r5]
 8000e32:	e7e3      	b.n	8000dfc <__udivmoddi4+0xa4>
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	f040 80a2 	bne.w	8000f7e <__udivmoddi4+0x226>
 8000e3a:	1a8a      	subs	r2, r1, r2
 8000e3c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000e40:	fa1f f68e 	uxth.w	r6, lr
 8000e44:	2101      	movs	r1, #1
 8000e46:	fbb2 f4f7 	udiv	r4, r2, r7
 8000e4a:	fb07 2014 	mls	r0, r7, r4, r2
 8000e4e:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000e52:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e56:	fb06 f004 	mul.w	r0, r6, r4
 8000e5a:	4290      	cmp	r0, r2
 8000e5c:	d90f      	bls.n	8000e7e <__udivmoddi4+0x126>
 8000e5e:	eb1e 0202 	adds.w	r2, lr, r2
 8000e62:	f104 38ff 	add.w	r8, r4, #4294967295
 8000e66:	bf2c      	ite	cs
 8000e68:	f04f 0901 	movcs.w	r9, #1
 8000e6c:	f04f 0900 	movcc.w	r9, #0
 8000e70:	4290      	cmp	r0, r2
 8000e72:	d903      	bls.n	8000e7c <__udivmoddi4+0x124>
 8000e74:	f1b9 0f00 	cmp.w	r9, #0
 8000e78:	f000 80c8 	beq.w	800100c <__udivmoddi4+0x2b4>
 8000e7c:	4644      	mov	r4, r8
 8000e7e:	1a12      	subs	r2, r2, r0
 8000e80:	fa1f fc8c 	uxth.w	ip, ip
 8000e84:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e88:	fb07 2210 	mls	r2, r7, r0, r2
 8000e8c:	fb00 f606 	mul.w	r6, r0, r6
 8000e90:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000e94:	4566      	cmp	r6, ip
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x152>
 8000e98:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000e9c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ea0:	d202      	bcs.n	8000ea8 <__udivmoddi4+0x150>
 8000ea2:	4566      	cmp	r6, ip
 8000ea4:	f200 80bb 	bhi.w	800101e <__udivmoddi4+0x2c6>
 8000ea8:	4610      	mov	r0, r2
 8000eaa:	ebac 0c06 	sub.w	ip, ip, r6
 8000eae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000eb2:	e79d      	b.n	8000df0 <__udivmoddi4+0x98>
 8000eb4:	f1c1 0620 	rsb	r6, r1, #32
 8000eb8:	408b      	lsls	r3, r1
 8000eba:	fa04 fe01 	lsl.w	lr, r4, r1
 8000ebe:	fa22 f706 	lsr.w	r7, r2, r6
 8000ec2:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ec6:	40f4      	lsrs	r4, r6
 8000ec8:	408a      	lsls	r2, r1
 8000eca:	431f      	orrs	r7, r3
 8000ecc:	ea4e 030c 	orr.w	r3, lr, ip
 8000ed0:	fa00 fe01 	lsl.w	lr, r0, r1
 8000ed4:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ed8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000edc:	fa1f fc87 	uxth.w	ip, r7
 8000ee0:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ee4:	fb08 4410 	mls	r4, r8, r0, r4
 8000ee8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eec:	fb00 f90c 	mul.w	r9, r0, ip
 8000ef0:	45a1      	cmp	r9, r4
 8000ef2:	d90e      	bls.n	8000f12 <__udivmoddi4+0x1ba>
 8000ef4:	193c      	adds	r4, r7, r4
 8000ef6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000efa:	bf2c      	ite	cs
 8000efc:	f04f 0b01 	movcs.w	fp, #1
 8000f00:	f04f 0b00 	movcc.w	fp, #0
 8000f04:	45a1      	cmp	r9, r4
 8000f06:	d903      	bls.n	8000f10 <__udivmoddi4+0x1b8>
 8000f08:	f1bb 0f00 	cmp.w	fp, #0
 8000f0c:	f000 8093 	beq.w	8001036 <__udivmoddi4+0x2de>
 8000f10:	4650      	mov	r0, sl
 8000f12:	eba4 0409 	sub.w	r4, r4, r9
 8000f16:	fa1f f983 	uxth.w	r9, r3
 8000f1a:	fbb4 f3f8 	udiv	r3, r4, r8
 8000f1e:	fb08 4413 	mls	r4, r8, r3, r4
 8000f22:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f26:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2a:	45a4      	cmp	ip, r4
 8000f2c:	d906      	bls.n	8000f3c <__udivmoddi4+0x1e4>
 8000f2e:	193c      	adds	r4, r7, r4
 8000f30:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f34:	d201      	bcs.n	8000f3a <__udivmoddi4+0x1e2>
 8000f36:	45a4      	cmp	ip, r4
 8000f38:	d87a      	bhi.n	8001030 <__udivmoddi4+0x2d8>
 8000f3a:	4643      	mov	r3, r8
 8000f3c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f40:	eba4 040c 	sub.w	r4, r4, ip
 8000f44:	fba0 9802 	umull	r9, r8, r0, r2
 8000f48:	4544      	cmp	r4, r8
 8000f4a:	46cc      	mov	ip, r9
 8000f4c:	4643      	mov	r3, r8
 8000f4e:	d302      	bcc.n	8000f56 <__udivmoddi4+0x1fe>
 8000f50:	d106      	bne.n	8000f60 <__udivmoddi4+0x208>
 8000f52:	45ce      	cmp	lr, r9
 8000f54:	d204      	bcs.n	8000f60 <__udivmoddi4+0x208>
 8000f56:	3801      	subs	r0, #1
 8000f58:	ebb9 0c02 	subs.w	ip, r9, r2
 8000f5c:	eb68 0307 	sbc.w	r3, r8, r7
 8000f60:	b15d      	cbz	r5, 8000f7a <__udivmoddi4+0x222>
 8000f62:	ebbe 020c 	subs.w	r2, lr, ip
 8000f66:	eb64 0403 	sbc.w	r4, r4, r3
 8000f6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6e:	fa22 f301 	lsr.w	r3, r2, r1
 8000f72:	40cc      	lsrs	r4, r1
 8000f74:	431e      	orrs	r6, r3
 8000f76:	e9c5 6400 	strd	r6, r4, [r5]
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	e73e      	b.n	8000dfc <__udivmoddi4+0xa4>
 8000f7e:	fa02 fe03 	lsl.w	lr, r2, r3
 8000f82:	f1c3 0120 	rsb	r1, r3, #32
 8000f86:	fa04 f203 	lsl.w	r2, r4, r3
 8000f8a:	fa00 fc03 	lsl.w	ip, r0, r3
 8000f8e:	40cc      	lsrs	r4, r1
 8000f90:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000f94:	fa20 f101 	lsr.w	r1, r0, r1
 8000f98:	fa1f f68e 	uxth.w	r6, lr
 8000f9c:	fbb4 f0f7 	udiv	r0, r4, r7
 8000fa0:	430a      	orrs	r2, r1
 8000fa2:	fb07 4410 	mls	r4, r7, r0, r4
 8000fa6:	0c11      	lsrs	r1, r2, #16
 8000fa8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000fac:	fb00 f406 	mul.w	r4, r0, r6
 8000fb0:	428c      	cmp	r4, r1
 8000fb2:	d90e      	bls.n	8000fd2 <__udivmoddi4+0x27a>
 8000fb4:	eb1e 0101 	adds.w	r1, lr, r1
 8000fb8:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fbc:	bf2c      	ite	cs
 8000fbe:	f04f 0901 	movcs.w	r9, #1
 8000fc2:	f04f 0900 	movcc.w	r9, #0
 8000fc6:	428c      	cmp	r4, r1
 8000fc8:	d902      	bls.n	8000fd0 <__udivmoddi4+0x278>
 8000fca:	f1b9 0f00 	cmp.w	r9, #0
 8000fce:	d02c      	beq.n	800102a <__udivmoddi4+0x2d2>
 8000fd0:	4640      	mov	r0, r8
 8000fd2:	1b09      	subs	r1, r1, r4
 8000fd4:	b292      	uxth	r2, r2
 8000fd6:	fbb1 f4f7 	udiv	r4, r1, r7
 8000fda:	fb07 1114 	mls	r1, r7, r4, r1
 8000fde:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fe2:	fb04 f106 	mul.w	r1, r4, r6
 8000fe6:	4291      	cmp	r1, r2
 8000fe8:	d907      	bls.n	8000ffa <__udivmoddi4+0x2a2>
 8000fea:	eb1e 0202 	adds.w	r2, lr, r2
 8000fee:	f104 38ff 	add.w	r8, r4, #4294967295
 8000ff2:	d201      	bcs.n	8000ff8 <__udivmoddi4+0x2a0>
 8000ff4:	4291      	cmp	r1, r2
 8000ff6:	d815      	bhi.n	8001024 <__udivmoddi4+0x2cc>
 8000ff8:	4644      	mov	r4, r8
 8000ffa:	1a52      	subs	r2, r2, r1
 8000ffc:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8001000:	e721      	b.n	8000e46 <__udivmoddi4+0xee>
 8001002:	1a86      	subs	r6, r0, r2
 8001004:	eb64 0303 	sbc.w	r3, r4, r3
 8001008:	2001      	movs	r0, #1
 800100a:	e70e      	b.n	8000e2a <__udivmoddi4+0xd2>
 800100c:	3c02      	subs	r4, #2
 800100e:	4472      	add	r2, lr
 8001010:	e735      	b.n	8000e7e <__udivmoddi4+0x126>
 8001012:	3902      	subs	r1, #2
 8001014:	4472      	add	r2, lr
 8001016:	e6d0      	b.n	8000dba <__udivmoddi4+0x62>
 8001018:	44f4      	add	ip, lr
 800101a:	3802      	subs	r0, #2
 800101c:	e6e3      	b.n	8000de6 <__udivmoddi4+0x8e>
 800101e:	44f4      	add	ip, lr
 8001020:	3802      	subs	r0, #2
 8001022:	e742      	b.n	8000eaa <__udivmoddi4+0x152>
 8001024:	3c02      	subs	r4, #2
 8001026:	4472      	add	r2, lr
 8001028:	e7e7      	b.n	8000ffa <__udivmoddi4+0x2a2>
 800102a:	3802      	subs	r0, #2
 800102c:	4471      	add	r1, lr
 800102e:	e7d0      	b.n	8000fd2 <__udivmoddi4+0x27a>
 8001030:	3b02      	subs	r3, #2
 8001032:	443c      	add	r4, r7
 8001034:	e782      	b.n	8000f3c <__udivmoddi4+0x1e4>
 8001036:	3802      	subs	r0, #2
 8001038:	443c      	add	r4, r7
 800103a:	e76a      	b.n	8000f12 <__udivmoddi4+0x1ba>

0800103c <__aeabi_idiv0>:
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <getCANData>:
extern int sleepcount;
Map canDataMap;
extern FDCAN_HandleTypeDef hfdcan1;
extern FDCAN_HandleTypeDef hfdcan2;

void getCANData(Map *canDataCopy) {
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
    memcpy(canDataCopy, &canDataMap,sizeof(Map));
 8001048:	f44f 72d4 	mov.w	r2, #424	@ 0x1a8
 800104c:	4906      	ldr	r1, [pc, #24]	@ (8001068 <getCANData+0x28>)
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f01e f861 	bl	801f116 <memcpy>
    clearBuffer(&canDataMap,sizeof(Map));
 8001054:	f44f 71d4 	mov.w	r1, #424	@ 0x1a8
 8001058:	4803      	ldr	r0, [pc, #12]	@ (8001068 <getCANData+0x28>)
 800105a:	f000 fd35 	bl	8001ac8 <clearBuffer>
}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	200002a4 	.word	0x200002a4

0800106c <initCan>:
	}
}
void processCAN1(uint32_t id,uint8_t *data,uint8_t length){
	addToMap(&canDataMap,id,data,length);
}
void initCan(void){
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
//	TX_DataCAN();
	clearBuffer(&canDataMap,sizeof(Map));
 8001070:	f44f 71d4 	mov.w	r1, #424	@ 0x1a8
 8001074:	4802      	ldr	r0, [pc, #8]	@ (8001080 <initCan+0x14>)
 8001076:	f000 fd27 	bl	8001ac8 <clearBuffer>
}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	200002a4 	.word	0x200002a4

08001084 <processCAN2>:

void processCAN2(FDCAN_RxHeaderTypeDef *rxHeader,uint8_t *data){
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	6039      	str	r1, [r7, #0]
	addToMap(&canDataMap,rxHeader->Identifier,data,rxHeader->DataLength);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6819      	ldr	r1, [r3, #0]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	68db      	ldr	r3, [r3, #12]
 8001096:	683a      	ldr	r2, [r7, #0]
 8001098:	4803      	ldr	r0, [pc, #12]	@ (80010a8 <processCAN2+0x24>)
 800109a:	f000 fdd5 	bl	8001c48 <addToMap>
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	200002a4 	.word	0x200002a4

080010ac <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
  static uint32_t dataIndex = 0;

  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) == SET)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	f003 0301 	and.w	r3, r3, #1
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d015      	beq.n	80010ec <HAL_FDCAN_RxFifo0Callback+0x40>
  { sleepcount =0;
 80010c0:	4b0c      	ldr	r3, [pc, #48]	@ (80010f4 <HAL_FDCAN_RxFifo0Callback+0x48>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
		if(HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxCAN_1_DATA) == HAL_OK){
 80010c6:	4b0c      	ldr	r3, [pc, #48]	@ (80010f8 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 80010c8:	4a0c      	ldr	r2, [pc, #48]	@ (80010fc <HAL_FDCAN_RxFifo0Callback+0x50>)
 80010ca:	2140      	movs	r1, #64	@ 0x40
 80010cc:	480c      	ldr	r0, [pc, #48]	@ (8001100 <HAL_FDCAN_RxFifo0Callback+0x54>)
 80010ce:	f009 fbb9 	bl	800a844 <HAL_FDCAN_GetRxMessage>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d103      	bne.n	80010e0 <HAL_FDCAN_RxFifo0Callback+0x34>
			    processCAN2(&RxHeader,&RxCAN_1_DATA);
 80010d8:	4907      	ldr	r1, [pc, #28]	@ (80010f8 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 80010da:	4808      	ldr	r0, [pc, #32]	@ (80010fc <HAL_FDCAN_RxFifo0Callback+0x50>)
 80010dc:	f7ff ffd2 	bl	8001084 <processCAN2>
		}
		if(HAL_FDCAN_GetRxMessage(&hfdcan2, FDCAN_RX_FIFO0, &RxHeader,RxCAN_2_DATA) == HAL_OK){
 80010e0:	4b08      	ldr	r3, [pc, #32]	@ (8001104 <HAL_FDCAN_RxFifo0Callback+0x58>)
 80010e2:	4a06      	ldr	r2, [pc, #24]	@ (80010fc <HAL_FDCAN_RxFifo0Callback+0x50>)
 80010e4:	2140      	movs	r1, #64	@ 0x40
 80010e6:	4808      	ldr	r0, [pc, #32]	@ (8001108 <HAL_FDCAN_RxFifo0Callback+0x5c>)
 80010e8:	f009 fbac 	bl	800a844 <HAL_FDCAN_GetRxMessage>
				//processCAN2(&RxHeader,&RxCAN_2_DATA);
		}
    }

}
 80010ec:	bf00      	nop
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	20000ed4 	.word	0x20000ed4
 80010f8:	20000294 	.word	0x20000294
 80010fc:	200139e4 	.word	0x200139e4
 8001100:	20013a54 	.word	0x20013a54
 8001104:	2000029c 	.word	0x2000029c
 8001108:	20013ab8 	.word	0x20013ab8

0800110c <wait_for_response>:
int responseIndex=0;
bool enable_Idle = true;
bool FLAG_EC200RESONSE=false;
char tmpbuff[100]={};

bool wait_for_response(char *resBuff,int timeout){
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af02      	add	r7, sp, #8
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6039      	str	r1, [r7, #0]
	bool status=false;
 8001116:	2300      	movs	r3, #0
 8001118:	73fb      	strb	r3, [r7, #15]
	FLAG_EC200RESONSE=false;
 800111a:	4b21      	ldr	r3, [pc, #132]	@ (80011a0 <wait_for_response+0x94>)
 800111c:	2200      	movs	r2, #0
 800111e:	701a      	strb	r2, [r3, #0]
	int count=0;
 8001120:	2300      	movs	r3, #0
 8001122:	60bb      	str	r3, [r7, #8]
	while(!FLAG_EC200RESONSE&&(HAL_GetTick()% timeout)!=0)
 8001124:	e002      	b.n	800112c <wait_for_response+0x20>
	     {
		   count++;
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	3301      	adds	r3, #1
 800112a:	60bb      	str	r3, [r7, #8]
	while(!FLAG_EC200RESONSE&&(HAL_GetTick()% timeout)!=0)
 800112c:	4b1c      	ldr	r3, [pc, #112]	@ (80011a0 <wait_for_response+0x94>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	f083 0301 	eor.w	r3, r3, #1
 8001134:	b2db      	uxtb	r3, r3
 8001136:	2b00      	cmp	r3, #0
 8001138:	d00a      	beq.n	8001150 <wait_for_response+0x44>
 800113a:	f004 fc49 	bl	80059d0 <HAL_GetTick>
 800113e:	4602      	mov	r2, r0
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	fbb2 f1f3 	udiv	r1, r2, r3
 8001146:	fb01 f303 	mul.w	r3, r1, r3
 800114a:	1ad3      	subs	r3, r2, r3
 800114c:	2b00      	cmp	r3, #0
 800114e:	d1ea      	bne.n	8001126 <wait_for_response+0x1a>
//	    	 printc(MinDelay,"Waiting for response %d\n",HAL_GetTick()% EC200MAXRESONSETIME);
	     }
	     if(FLAG_EC200RESONSE){
 8001150:	4b13      	ldr	r3, [pc, #76]	@ (80011a0 <wait_for_response+0x94>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d010      	beq.n	800117a <wait_for_response+0x6e>
	    	 memcpy(resBuff,EC200_ResponseBuff,strlen(EC200_ResponseBuff));
 8001158:	4812      	ldr	r0, [pc, #72]	@ (80011a4 <wait_for_response+0x98>)
 800115a:	f7ff f8a3 	bl	80002a4 <strlen>
 800115e:	4603      	mov	r3, r0
 8001160:	461a      	mov	r2, r3
 8001162:	4910      	ldr	r1, [pc, #64]	@ (80011a4 <wait_for_response+0x98>)
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f01d ffd6 	bl	801f116 <memcpy>
	    	 memset(EC200_ResponseBuff,0,RESBUFF_SIZE);
 800116a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800116e:	2100      	movs	r1, #0
 8001170:	480c      	ldr	r0, [pc, #48]	@ (80011a4 <wait_for_response+0x98>)
 8001172:	f01d fe5d 	bl	801ee30 <memset>
	    	 status=true;
 8001176:	2301      	movs	r3, #1
 8001178:	73fb      	strb	r3, [r7, #15]
	     }
	 printc(MinDelay,"wait Response count %d  flag %d status %d\n",count,FLAG_EC200RESONSE,status);
 800117a:	4b09      	ldr	r3, [pc, #36]	@ (80011a0 <wait_for_response+0x94>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	461a      	mov	r2, r3
 8001180:	7bfb      	ldrb	r3, [r7, #15]
 8001182:	9300      	str	r3, [sp, #0]
 8001184:	4613      	mov	r3, r2
 8001186:	68ba      	ldr	r2, [r7, #8]
 8001188:	4907      	ldr	r1, [pc, #28]	@ (80011a8 <wait_for_response+0x9c>)
 800118a:	200a      	movs	r0, #10
 800118c:	f000 fc44 	bl	8001a18 <printc>
	 FLAG_EC200RESONSE=false;
 8001190:	4b03      	ldr	r3, [pc, #12]	@ (80011a0 <wait_for_response+0x94>)
 8001192:	2200      	movs	r2, #0
 8001194:	701a      	strb	r2, [r3, #0]
	 return status;
 8001196:	7bfb      	ldrb	r3, [r7, #15]
}
 8001198:	4618      	mov	r0, r3
 800119a:	3710      	adds	r7, #16
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	20000c50 	.word	0x20000c50
 80011a4:	20000450 	.word	0x20000450
 80011a8:	08022278 	.word	0x08022278

080011ac <EC200_Transmit>:
bool EC200_Transmit(const char *command,char *resBuff,int timeout){
 80011ac:	b590      	push	{r4, r7, lr}
 80011ae:	b085      	sub	sp, #20
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	60b9      	str	r1, [r7, #8]
 80011b6:	607a      	str	r2, [r7, #4]
	clearBuffer(resBuff, strlen(resBuff));
 80011b8:	68b8      	ldr	r0, [r7, #8]
 80011ba:	f7ff f873 	bl	80002a4 <strlen>
 80011be:	4603      	mov	r3, r0
 80011c0:	4619      	mov	r1, r3
 80011c2:	68b8      	ldr	r0, [r7, #8]
 80011c4:	f000 fc80 	bl	8001ac8 <clearBuffer>
     HAL_UART_Transmit(ec200MqttUart, (uint8_t*)command,strlen(command), 2000);
 80011c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001200 <EC200_Transmit+0x54>)
 80011ca:	681c      	ldr	r4, [r3, #0]
 80011cc:	68f8      	ldr	r0, [r7, #12]
 80011ce:	f7ff f869 	bl	80002a4 <strlen>
 80011d2:	4603      	mov	r3, r0
 80011d4:	b29a      	uxth	r2, r3
 80011d6:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80011da:	68f9      	ldr	r1, [r7, #12]
 80011dc:	4620      	mov	r0, r4
 80011de:	f011 fd59 	bl	8012c94 <HAL_UART_Transmit>
     if(resBuff==NULL)
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d101      	bne.n	80011ec <EC200_Transmit+0x40>
    	 return false;
 80011e8:	2300      	movs	r3, #0
 80011ea:	e004      	b.n	80011f6 <EC200_Transmit+0x4a>
     return wait_for_response(resBuff,timeout);
 80011ec:	6879      	ldr	r1, [r7, #4]
 80011ee:	68b8      	ldr	r0, [r7, #8]
 80011f0:	f7ff ff8c 	bl	800110c <wait_for_response>
 80011f4:	4603      	mov	r3, r0
 }
 80011f6:	4618      	mov	r0, r3
 80011f8:	3714      	adds	r7, #20
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd90      	pop	{r4, r7, pc}
 80011fe:	bf00      	nop
 8001200:	2000044c 	.word	0x2000044c

08001204 <EC200_Init>:
bool EC200_Init(void) {
 8001204:	b580      	push	{r7, lr}
 8001206:	b0e6      	sub	sp, #408	@ 0x198
 8001208:	af00      	add	r7, sp, #0
	int EC200_counter=0;
 800120a:	2300      	movs	r3, #0
 800120c:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
    //Transmit AT commands for EC20 initialization
	uint32_t resbuff[100]={};
 8001210:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8001214:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001218:	4618      	mov	r0, r3
 800121a:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800121e:	461a      	mov	r2, r3
 8001220:	2100      	movs	r1, #0
 8001222:	f01d fe05 	bl	801ee30 <memset>
    if(EC200_Transmit("AT\r\n",resbuff,EC200MINRESONSETIME))
 8001226:	1d3b      	adds	r3, r7, #4
 8001228:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800122c:	4619      	mov	r1, r3
 800122e:	48be      	ldr	r0, [pc, #760]	@ (8001528 <EC200_Init+0x324>)
 8001230:	f7ff ffbc 	bl	80011ac <EC200_Transmit>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d005      	beq.n	8001246 <EC200_Init+0x42>
    {
    	printc(MinDelay,"Res For At is %s\n",resbuff);
 800123a:	1d3b      	adds	r3, r7, #4
 800123c:	461a      	mov	r2, r3
 800123e:	49bb      	ldr	r1, [pc, #748]	@ (800152c <EC200_Init+0x328>)
 8001240:	200a      	movs	r0, #10
 8001242:	f000 fbe9 	bl	8001a18 <printc>
    }
    memset(resbuff,0,100);
 8001246:	1d3b      	adds	r3, r7, #4
 8001248:	2264      	movs	r2, #100	@ 0x64
 800124a:	2100      	movs	r1, #0
 800124c:	4618      	mov	r0, r3
 800124e:	f01d fdef 	bl	801ee30 <memset>
    if(EC200_Transmit("AT+QURCCFG=\"urcport\",\"uart1\"\r\n",resbuff,EC200MINRESONSETIME))
 8001252:	1d3b      	adds	r3, r7, #4
 8001254:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001258:	4619      	mov	r1, r3
 800125a:	48b5      	ldr	r0, [pc, #724]	@ (8001530 <EC200_Init+0x32c>)
 800125c:	f7ff ffa6 	bl	80011ac <EC200_Transmit>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d005      	beq.n	8001272 <EC200_Init+0x6e>
    {
    	printc(MinDelay,"Res For AT+QURCCFG=\"urcport\",\"uart1\"\r\n is %s\n",resbuff);
 8001266:	1d3b      	adds	r3, r7, #4
 8001268:	461a      	mov	r2, r3
 800126a:	49b2      	ldr	r1, [pc, #712]	@ (8001534 <EC200_Init+0x330>)
 800126c:	200a      	movs	r0, #10
 800126e:	f000 fbd3 	bl	8001a18 <printc>
    }
    memset(resbuff,0,100);
 8001272:	1d3b      	adds	r3, r7, #4
 8001274:	2264      	movs	r2, #100	@ 0x64
 8001276:	2100      	movs	r1, #0
 8001278:	4618      	mov	r0, r3
 800127a:	f01d fdd9 	bl	801ee30 <memset>
    if(EC200_Transmit("AT+IPR=115200\r\n",resbuff,EC200MINRESONSETIME))
 800127e:	1d3b      	adds	r3, r7, #4
 8001280:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001284:	4619      	mov	r1, r3
 8001286:	48ac      	ldr	r0, [pc, #688]	@ (8001538 <EC200_Init+0x334>)
 8001288:	f7ff ff90 	bl	80011ac <EC200_Transmit>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d005      	beq.n	800129e <EC200_Init+0x9a>
	{
		printc(MinDelay,"Res For AT+IPR=115200 is %s\n",resbuff);
 8001292:	1d3b      	adds	r3, r7, #4
 8001294:	461a      	mov	r2, r3
 8001296:	49a9      	ldr	r1, [pc, #676]	@ (800153c <EC200_Init+0x338>)
 8001298:	200a      	movs	r0, #10
 800129a:	f000 fbbd 	bl	8001a18 <printc>
	}
    memset(resbuff,0,100);
 800129e:	1d3b      	adds	r3, r7, #4
 80012a0:	2264      	movs	r2, #100	@ 0x64
 80012a2:	2100      	movs	r1, #0
 80012a4:	4618      	mov	r0, r3
 80012a6:	f01d fdc3 	bl	801ee30 <memset>
    if(EC200_Transmit("ATV1\r\n",resbuff,EC200MINRESONSETIME))
 80012aa:	1d3b      	adds	r3, r7, #4
 80012ac:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80012b0:	4619      	mov	r1, r3
 80012b2:	48a3      	ldr	r0, [pc, #652]	@ (8001540 <EC200_Init+0x33c>)
 80012b4:	f7ff ff7a 	bl	80011ac <EC200_Transmit>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d005      	beq.n	80012ca <EC200_Init+0xc6>
   {
    		printc(MinDelay,"Res For ATV1 is %s\n",resbuff);
 80012be:	1d3b      	adds	r3, r7, #4
 80012c0:	461a      	mov	r2, r3
 80012c2:	49a0      	ldr	r1, [pc, #640]	@ (8001544 <EC200_Init+0x340>)
 80012c4:	200a      	movs	r0, #10
 80012c6:	f000 fba7 	bl	8001a18 <printc>
    }
    memset(resbuff,0,100);
 80012ca:	1d3b      	adds	r3, r7, #4
 80012cc:	2264      	movs	r2, #100	@ 0x64
 80012ce:	2100      	movs	r1, #0
 80012d0:	4618      	mov	r0, r3
 80012d2:	f01d fdad 	bl	801ee30 <memset>
    if(EC200_Transmit("ATE0\r\n",resbuff,EC200MINRESONSETIME))
 80012d6:	1d3b      	adds	r3, r7, #4
 80012d8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80012dc:	4619      	mov	r1, r3
 80012de:	489a      	ldr	r0, [pc, #616]	@ (8001548 <EC200_Init+0x344>)
 80012e0:	f7ff ff64 	bl	80011ac <EC200_Transmit>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d005      	beq.n	80012f6 <EC200_Init+0xf2>
   {
    		printc(MinDelay,"Res For ATE1 is %s\n",resbuff);
 80012ea:	1d3b      	adds	r3, r7, #4
 80012ec:	461a      	mov	r2, r3
 80012ee:	4997      	ldr	r1, [pc, #604]	@ (800154c <EC200_Init+0x348>)
 80012f0:	200a      	movs	r0, #10
 80012f2:	f000 fb91 	bl	8001a18 <printc>
    }
    memset(resbuff,0,100);
 80012f6:	1d3b      	adds	r3, r7, #4
 80012f8:	2264      	movs	r2, #100	@ 0x64
 80012fa:	2100      	movs	r1, #0
 80012fc:	4618      	mov	r0, r3
 80012fe:	f01d fd97 	bl	801ee30 <memset>
    if(EC200_Transmit("AT+CMEE=2\r\n",resbuff,EC200MINRESONSETIME))
 8001302:	1d3b      	adds	r3, r7, #4
 8001304:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001308:	4619      	mov	r1, r3
 800130a:	4891      	ldr	r0, [pc, #580]	@ (8001550 <EC200_Init+0x34c>)
 800130c:	f7ff ff4e 	bl	80011ac <EC200_Transmit>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d005      	beq.n	8001322 <EC200_Init+0x11e>
     {
      		printc(MinDelay,"Res For AT+CMEE=2 is %s\n",resbuff);
 8001316:	1d3b      	adds	r3, r7, #4
 8001318:	461a      	mov	r2, r3
 800131a:	498e      	ldr	r1, [pc, #568]	@ (8001554 <EC200_Init+0x350>)
 800131c:	200a      	movs	r0, #10
 800131e:	f000 fb7b 	bl	8001a18 <printc>
      }
    memset(resbuff,0,100);
 8001322:	1d3b      	adds	r3, r7, #4
 8001324:	2264      	movs	r2, #100	@ 0x64
 8001326:	2100      	movs	r1, #0
 8001328:	4618      	mov	r0, r3
 800132a:	f01d fd81 	bl	801ee30 <memset>
    if(EC200_Transmit("ATI\r\n",resbuff,EC200MINRESONSETIME))
 800132e:	1d3b      	adds	r3, r7, #4
 8001330:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001334:	4619      	mov	r1, r3
 8001336:	4888      	ldr	r0, [pc, #544]	@ (8001558 <EC200_Init+0x354>)
 8001338:	f7ff ff38 	bl	80011ac <EC200_Transmit>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d005      	beq.n	800134e <EC200_Init+0x14a>
      {
          		printc(MinDelay,"Res For ATI is %s\n",resbuff);
 8001342:	1d3b      	adds	r3, r7, #4
 8001344:	461a      	mov	r2, r3
 8001346:	4985      	ldr	r1, [pc, #532]	@ (800155c <EC200_Init+0x358>)
 8001348:	200a      	movs	r0, #10
 800134a:	f000 fb65 	bl	8001a18 <printc>
        }
    memset(resbuff,0,100);
 800134e:	1d3b      	adds	r3, r7, #4
 8001350:	2264      	movs	r2, #100	@ 0x64
 8001352:	2100      	movs	r1, #0
 8001354:	4618      	mov	r0, r3
 8001356:	f01d fd6b 	bl	801ee30 <memset>
    if (EC200_Transmit("AT+GSN\r\n", resbuff,EC200MINRESONSETIME)) {
 800135a:	1d3b      	adds	r3, r7, #4
 800135c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001360:	4619      	mov	r1, r3
 8001362:	487f      	ldr	r0, [pc, #508]	@ (8001560 <EC200_Init+0x35c>)
 8001364:	f7ff ff22 	bl	80011ac <EC200_Transmit>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d005      	beq.n	800137a <EC200_Init+0x176>
        printc(MinDelay, "Res For GSN is %s\n", resbuff);
 800136e:	1d3b      	adds	r3, r7, #4
 8001370:	461a      	mov	r2, r3
 8001372:	497c      	ldr	r1, [pc, #496]	@ (8001564 <EC200_Init+0x360>)
 8001374:	200a      	movs	r0, #10
 8001376:	f000 fb4f 	bl	8001a18 <printc>
    }

    memset(resbuff,0,sizeof(resbuff));
 800137a:	1d3b      	adds	r3, r7, #4
 800137c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001380:	2100      	movs	r1, #0
 8001382:	4618      	mov	r0, r3
 8001384:	f01d fd54 	bl	801ee30 <memset>
    CPIN:
	EC200_counter=0;
 8001388:	2300      	movs	r3, #0
 800138a:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
    if (EC200_Transmit("AT+CPIN?\r\n", resbuff,EC200MINRESONSETIME)) {
 800138e:	1d3b      	adds	r3, r7, #4
 8001390:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001394:	4619      	mov	r1, r3
 8001396:	4874      	ldr	r0, [pc, #464]	@ (8001568 <EC200_Init+0x364>)
 8001398:	f7ff ff08 	bl	80011ac <EC200_Transmit>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d01d      	beq.n	80013de <EC200_Init+0x1da>
        printc(MinDelay, "Res For CPIN is %s\n", resbuff);
 80013a2:	1d3b      	adds	r3, r7, #4
 80013a4:	461a      	mov	r2, r3
 80013a6:	4971      	ldr	r1, [pc, #452]	@ (800156c <EC200_Init+0x368>)
 80013a8:	200a      	movs	r0, #10
 80013aa:	f000 fb35 	bl	8001a18 <printc>
        if(strstr(resbuff,"+CPIN: READY")==NULL){
 80013ae:	1d3b      	adds	r3, r7, #4
 80013b0:	496f      	ldr	r1, [pc, #444]	@ (8001570 <EC200_Init+0x36c>)
 80013b2:	4618      	mov	r0, r3
 80013b4:	f01d fdfc 	bl	801efb0 <strstr>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d10f      	bne.n	80013de <EC200_Init+0x1da>
        	if(EC200_counter<3){
 80013be:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	dc05      	bgt.n	80013d2 <EC200_Init+0x1ce>
        		EC200_counter++;
 80013c6:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80013ca:	3301      	adds	r3, #1
 80013cc:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
        		goto CPIN;
 80013d0:	e7da      	b.n	8001388 <EC200_Init+0x184>
        	}
        	else{
        		printc(MinDelay,"Sim Not Detected");
 80013d2:	4968      	ldr	r1, [pc, #416]	@ (8001574 <EC200_Init+0x370>)
 80013d4:	200a      	movs	r0, #10
 80013d6:	f000 fb1f 	bl	8001a18 <printc>
        		return false;
 80013da:	2300      	movs	r3, #0
 80013dc:	e09f      	b.n	800151e <EC200_Init+0x31a>
        	}
        }
    }
    memset(resbuff,0,sizeof(resbuff));
 80013de:	1d3b      	adds	r3, r7, #4
 80013e0:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80013e4:	2100      	movs	r1, #0
 80013e6:	4618      	mov	r0, r3
 80013e8:	f01d fd22 	bl	801ee30 <memset>
    network:
	EC200_counter=0;
 80013ec:	2300      	movs	r3, #0
 80013ee:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
    if (EC200_Transmit("AT+CSQ\r\n", resbuff,2000)) {
 80013f2:	1d3b      	adds	r3, r7, #4
 80013f4:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80013f8:	4619      	mov	r1, r3
 80013fa:	485f      	ldr	r0, [pc, #380]	@ (8001578 <EC200_Init+0x374>)
 80013fc:	f7ff fed6 	bl	80011ac <EC200_Transmit>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d01d      	beq.n	8001442 <EC200_Init+0x23e>
        printc(MinDelay, "Res For CSQ is %s\n", resbuff);
 8001406:	1d3b      	adds	r3, r7, #4
 8001408:	461a      	mov	r2, r3
 800140a:	495c      	ldr	r1, [pc, #368]	@ (800157c <EC200_Init+0x378>)
 800140c:	200a      	movs	r0, #10
 800140e:	f000 fb03 	bl	8001a18 <printc>
        if(strstr(resbuff,"+CSQ: 99,99")!=NULL){
 8001412:	1d3b      	adds	r3, r7, #4
 8001414:	495a      	ldr	r1, [pc, #360]	@ (8001580 <EC200_Init+0x37c>)
 8001416:	4618      	mov	r0, r3
 8001418:	f01d fdca 	bl	801efb0 <strstr>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d00f      	beq.n	8001442 <EC200_Init+0x23e>
        	if(EC200_counter<3){
 8001422:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001426:	2b02      	cmp	r3, #2
 8001428:	dc05      	bgt.n	8001436 <EC200_Init+0x232>
        		EC200_counter++;
 800142a:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800142e:	3301      	adds	r3, #1
 8001430:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
        		goto network;
 8001434:	e7da      	b.n	80013ec <EC200_Init+0x1e8>

        	}
			else{
				printc(MinDelay,"Signal Not found");
 8001436:	4953      	ldr	r1, [pc, #332]	@ (8001584 <EC200_Init+0x380>)
 8001438:	200a      	movs	r0, #10
 800143a:	f000 faed 	bl	8001a18 <printc>
				return false;
 800143e:	2300      	movs	r3, #0
 8001440:	e06d      	b.n	800151e <EC200_Init+0x31a>
			}
        }


    }
    memset(resbuff,0,100);
 8001442:	1d3b      	adds	r3, r7, #4
 8001444:	2264      	movs	r2, #100	@ 0x64
 8001446:	2100      	movs	r1, #0
 8001448:	4618      	mov	r0, r3
 800144a:	f01d fcf1 	bl	801ee30 <memset>

    if (EC200_Transmit("AT+CREG?\r\n", resbuff,EC200MINRESONSETIME)) {
 800144e:	1d3b      	adds	r3, r7, #4
 8001450:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001454:	4619      	mov	r1, r3
 8001456:	484c      	ldr	r0, [pc, #304]	@ (8001588 <EC200_Init+0x384>)
 8001458:	f7ff fea8 	bl	80011ac <EC200_Transmit>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d005      	beq.n	800146e <EC200_Init+0x26a>
        printc(MinDelay, "Res For CREG is %s\n", resbuff);
 8001462:	1d3b      	adds	r3, r7, #4
 8001464:	461a      	mov	r2, r3
 8001466:	4949      	ldr	r1, [pc, #292]	@ (800158c <EC200_Init+0x388>)
 8001468:	200a      	movs	r0, #10
 800146a:	f000 fad5 	bl	8001a18 <printc>
    }
    memset(resbuff,0,100);
 800146e:	1d3b      	adds	r3, r7, #4
 8001470:	2264      	movs	r2, #100	@ 0x64
 8001472:	2100      	movs	r1, #0
 8001474:	4618      	mov	r0, r3
 8001476:	f01d fcdb 	bl	801ee30 <memset>

    if (EC200_Transmit("AT+CGREG?\r\n", resbuff,EC200MINRESONSETIME)) {
 800147a:	1d3b      	adds	r3, r7, #4
 800147c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001480:	4619      	mov	r1, r3
 8001482:	4843      	ldr	r0, [pc, #268]	@ (8001590 <EC200_Init+0x38c>)
 8001484:	f7ff fe92 	bl	80011ac <EC200_Transmit>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d005      	beq.n	800149a <EC200_Init+0x296>
        printc(MinDelay, "Res For CGREG is %s\n", resbuff);
 800148e:	1d3b      	adds	r3, r7, #4
 8001490:	461a      	mov	r2, r3
 8001492:	4940      	ldr	r1, [pc, #256]	@ (8001594 <EC200_Init+0x390>)
 8001494:	200a      	movs	r0, #10
 8001496:	f000 fabf 	bl	8001a18 <printc>
    }
    memset(resbuff,0,100);
 800149a:	1d3b      	adds	r3, r7, #4
 800149c:	2264      	movs	r2, #100	@ 0x64
 800149e:	2100      	movs	r1, #0
 80014a0:	4618      	mov	r0, r3
 80014a2:	f01d fcc5 	bl	801ee30 <memset>
    if (EC200_Transmit("AT+COPS?\r\n", resbuff,EC200MINRESONSETIME)) {
 80014a6:	1d3b      	adds	r3, r7, #4
 80014a8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80014ac:	4619      	mov	r1, r3
 80014ae:	483a      	ldr	r0, [pc, #232]	@ (8001598 <EC200_Init+0x394>)
 80014b0:	f7ff fe7c 	bl	80011ac <EC200_Transmit>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d005      	beq.n	80014c6 <EC200_Init+0x2c2>
        printc(MinDelay, "Res For COPS is %s\n", resbuff);
 80014ba:	1d3b      	adds	r3, r7, #4
 80014bc:	461a      	mov	r2, r3
 80014be:	4937      	ldr	r1, [pc, #220]	@ (800159c <EC200_Init+0x398>)
 80014c0:	200a      	movs	r0, #10
 80014c2:	f000 faa9 	bl	8001a18 <printc>
    }
    memset(resbuff,0,100);
 80014c6:	1d3b      	adds	r3, r7, #4
 80014c8:	2264      	movs	r2, #100	@ 0x64
 80014ca:	2100      	movs	r1, #0
 80014cc:	4618      	mov	r0, r3
 80014ce:	f01d fcaf 	bl	801ee30 <memset>
    if (EC200_Transmit("AT+QCCID\r\n", resbuff,EC200MINRESONSETIME)) {
 80014d2:	1d3b      	adds	r3, r7, #4
 80014d4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80014d8:	4619      	mov	r1, r3
 80014da:	4831      	ldr	r0, [pc, #196]	@ (80015a0 <EC200_Init+0x39c>)
 80014dc:	f7ff fe66 	bl	80011ac <EC200_Transmit>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d005      	beq.n	80014f2 <EC200_Init+0x2ee>
        printc(MinDelay, "Res For QCCID is %s\n", resbuff);
 80014e6:	1d3b      	adds	r3, r7, #4
 80014e8:	461a      	mov	r2, r3
 80014ea:	492e      	ldr	r1, [pc, #184]	@ (80015a4 <EC200_Init+0x3a0>)
 80014ec:	200a      	movs	r0, #10
 80014ee:	f000 fa93 	bl	8001a18 <printc>
    }
    memset(resbuff,0,100);
 80014f2:	1d3b      	adds	r3, r7, #4
 80014f4:	2264      	movs	r2, #100	@ 0x64
 80014f6:	2100      	movs	r1, #0
 80014f8:	4618      	mov	r0, r3
 80014fa:	f01d fc99 	bl	801ee30 <memset>
    if (EC200_Transmit("AT+CIMI\r\n", resbuff,EC200MINRESONSETIME)) {
 80014fe:	1d3b      	adds	r3, r7, #4
 8001500:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001504:	4619      	mov	r1, r3
 8001506:	4828      	ldr	r0, [pc, #160]	@ (80015a8 <EC200_Init+0x3a4>)
 8001508:	f7ff fe50 	bl	80011ac <EC200_Transmit>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d005      	beq.n	800151e <EC200_Init+0x31a>
        printc(MinDelay, "Res For CIMI is %s\n", resbuff);
 8001512:	1d3b      	adds	r3, r7, #4
 8001514:	461a      	mov	r2, r3
 8001516:	4925      	ldr	r1, [pc, #148]	@ (80015ac <EC200_Init+0x3a8>)
 8001518:	200a      	movs	r0, #10
 800151a:	f000 fa7d 	bl	8001a18 <printc>
    }

}
 800151e:	4618      	mov	r0, r3
 8001520:	f507 77cc 	add.w	r7, r7, #408	@ 0x198
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	080222a4 	.word	0x080222a4
 800152c:	080222ac 	.word	0x080222ac
 8001530:	080222c0 	.word	0x080222c0
 8001534:	080222e0 	.word	0x080222e0
 8001538:	08022310 	.word	0x08022310
 800153c:	08022320 	.word	0x08022320
 8001540:	08022340 	.word	0x08022340
 8001544:	08022348 	.word	0x08022348
 8001548:	0802235c 	.word	0x0802235c
 800154c:	08022364 	.word	0x08022364
 8001550:	08022378 	.word	0x08022378
 8001554:	08022384 	.word	0x08022384
 8001558:	080223a0 	.word	0x080223a0
 800155c:	080223a8 	.word	0x080223a8
 8001560:	080223bc 	.word	0x080223bc
 8001564:	080223c8 	.word	0x080223c8
 8001568:	080223dc 	.word	0x080223dc
 800156c:	080223e8 	.word	0x080223e8
 8001570:	080223fc 	.word	0x080223fc
 8001574:	0802240c 	.word	0x0802240c
 8001578:	08022420 	.word	0x08022420
 800157c:	0802242c 	.word	0x0802242c
 8001580:	08022440 	.word	0x08022440
 8001584:	0802244c 	.word	0x0802244c
 8001588:	08022460 	.word	0x08022460
 800158c:	0802246c 	.word	0x0802246c
 8001590:	08022480 	.word	0x08022480
 8001594:	0802248c 	.word	0x0802248c
 8001598:	080224a4 	.word	0x080224a4
 800159c:	080224b0 	.word	0x080224b0
 80015a0:	080224c4 	.word	0x080224c4
 80015a4:	080224d0 	.word	0x080224d0
 80015a8:	080224e8 	.word	0x080224e8
 80015ac:	080224f4 	.word	0x080224f4

080015b0 <getIMEI>:
//will fill the opbuffer if value available else return false
bool getIMEI(char *opbuffer){
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b088      	sub	sp, #32
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
	char tmpIMEI[15]={0};
 80015b8:	2300      	movs	r3, #0
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	f107 0310 	add.w	r3, r7, #16
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	f8c3 2007 	str.w	r2, [r3, #7]
	if(EC200_Transmit("AT+GSN\r\n",opbuffer,EC200MINRESONSETIME))
 80015ca:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80015ce:	6879      	ldr	r1, [r7, #4]
 80015d0:	4817      	ldr	r0, [pc, #92]	@ (8001630 <getIMEI+0x80>)
 80015d2:	f7ff fdeb 	bl	80011ac <EC200_Transmit>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d023      	beq.n	8001624 <getIMEI+0x74>
	 {
//			i have to check why string split function is not working
			int length=(int)(strstr(&opbuffer[2],"\r\n")-(char*)&opbuffer[2]);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	3302      	adds	r3, #2
 80015e0:	4914      	ldr	r1, [pc, #80]	@ (8001634 <getIMEI+0x84>)
 80015e2:	4618      	mov	r0, r3
 80015e4:	f01d fce4 	bl	801efb0 <strstr>
 80015e8:	4602      	mov	r2, r0
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	3302      	adds	r3, #2
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	61fb      	str	r3, [r7, #28]
			memcpy(tmpIMEI,&opbuffer[2],length);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	1c99      	adds	r1, r3, #2
 80015f6:	69fa      	ldr	r2, [r7, #28]
 80015f8:	f107 030c 	add.w	r3, r7, #12
 80015fc:	4618      	mov	r0, r3
 80015fe:	f01d fd8a 	bl	801f116 <memcpy>
			clearBuffer(tmpbuff,sizeof(tmpbuff));
 8001602:	2164      	movs	r1, #100	@ 0x64
 8001604:	480c      	ldr	r0, [pc, #48]	@ (8001638 <getIMEI+0x88>)
 8001606:	f000 fa5f 	bl	8001ac8 <clearBuffer>
			strcpy(opbuffer,tmpIMEI);
 800160a:	f107 030c 	add.w	r3, r7, #12
 800160e:	4619      	mov	r1, r3
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	f01d fd6a 	bl	801f0ea <strcpy>
			printc(MinDelay,"Res For AT+GSN %s\n",opbuffer);
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	4908      	ldr	r1, [pc, #32]	@ (800163c <getIMEI+0x8c>)
 800161a:	200a      	movs	r0, #10
 800161c:	f000 f9fc 	bl	8001a18 <printc>
	    	return true;
 8001620:	2301      	movs	r3, #1
 8001622:	e000      	b.n	8001626 <getIMEI+0x76>
	 }
	return false;
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3720      	adds	r7, #32
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	080223bc 	.word	0x080223bc
 8001634:	08022508 	.word	0x08022508
 8001638:	20000c54 	.word	0x20000c54
 800163c:	0802250c 	.word	0x0802250c

08001640 <getSignal>:
int getSignal(void){
 8001640:	b580      	push	{r7, lr}
 8001642:	b09a      	sub	sp, #104	@ 0x68
 8001644:	af00      	add	r7, sp, #0
	uint8_t resbuff[100]={};
 8001646:	2300      	movs	r3, #0
 8001648:	607b      	str	r3, [r7, #4]
 800164a:	f107 0308 	add.w	r3, r7, #8
 800164e:	2260      	movs	r2, #96	@ 0x60
 8001650:	2100      	movs	r1, #0
 8001652:	4618      	mov	r0, r3
 8001654:	f01d fbec 	bl	801ee30 <memset>
	uint8_t signal=-1;
 8001658:	23ff      	movs	r3, #255	@ 0xff
 800165a:	70fb      	strb	r3, [r7, #3]
	memset(resbuff,0,sizeof(resbuff));
 800165c:	1d3b      	adds	r3, r7, #4
 800165e:	2264      	movs	r2, #100	@ 0x64
 8001660:	2100      	movs	r1, #0
 8001662:	4618      	mov	r0, r3
 8001664:	f01d fbe4 	bl	801ee30 <memset>
	if(EC200_Transmit("AT+CSQ\r\n",resbuff,EC200MINRESONSETIME))
 8001668:	1d3b      	adds	r3, r7, #4
 800166a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800166e:	4619      	mov	r1, r3
 8001670:	480c      	ldr	r0, [pc, #48]	@ (80016a4 <getSignal+0x64>)
 8001672:	f7ff fd9b 	bl	80011ac <EC200_Transmit>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d00d      	beq.n	8001698 <getSignal+0x58>
	{
		sscanf(resbuff,"\r\n+CSQ: %d",&signal);
 800167c:	1cfa      	adds	r2, r7, #3
 800167e:	1d3b      	adds	r3, r7, #4
 8001680:	4909      	ldr	r1, [pc, #36]	@ (80016a8 <getSignal+0x68>)
 8001682:	4618      	mov	r0, r3
 8001684:	f01d fa98 	bl	801ebb8 <siscanf>
		printc(MinDelay,"RSSI For AT+CSQ %s\n",resbuff);
 8001688:	1d3b      	adds	r3, r7, #4
 800168a:	461a      	mov	r2, r3
 800168c:	4907      	ldr	r1, [pc, #28]	@ (80016ac <getSignal+0x6c>)
 800168e:	200a      	movs	r0, #10
 8001690:	f000 f9c2 	bl	8001a18 <printc>
		return signal;
 8001694:	78fb      	ldrb	r3, [r7, #3]
 8001696:	e001      	b.n	800169c <getSignal+0x5c>
	}
		return -1;
 8001698:	f04f 33ff 	mov.w	r3, #4294967295

}
 800169c:	4618      	mov	r0, r3
 800169e:	3768      	adds	r7, #104	@ 0x68
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	08022420 	.word	0x08022420
 80016a8:	08022520 	.word	0x08022520
 80016ac:	0802252c 	.word	0x0802252c

080016b0 <getOperatorName>:

bool getOperatorName(char *opbuffer){
 80016b0:	b580      	push	{r7, lr}
 80016b2:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80016bc:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80016c0:	6018      	str	r0, [r3, #0]
	uint8_t split[5][100]={};
 80016c2:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80016c6:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80016ca:	4618      	mov	r0, r3
 80016cc:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80016d0:	461a      	mov	r2, r3
 80016d2:	2100      	movs	r1, #0
 80016d4:	f01d fbac 	bl	801ee30 <memset>
	uint8_t resbuff[100]={};
 80016d8:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80016dc:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	3304      	adds	r3, #4
 80016e6:	2260      	movs	r2, #96	@ 0x60
 80016e8:	2100      	movs	r1, #0
 80016ea:	4618      	mov	r0, r3
 80016ec:	f01d fba0 	bl	801ee30 <memset>
	memset(resbuff,0,sizeof(resbuff));
 80016f0:	f107 0308 	add.w	r3, r7, #8
 80016f4:	2264      	movs	r2, #100	@ 0x64
 80016f6:	2100      	movs	r1, #0
 80016f8:	4618      	mov	r0, r3
 80016fa:	f01d fb99 	bl	801ee30 <memset>
	if(EC200_Transmit("AT+COPS?\r\n",resbuff,2000))
 80016fe:	f107 0308 	add.w	r3, r7, #8
 8001702:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001706:	4619      	mov	r1, r3
 8001708:	481a      	ldr	r0, [pc, #104]	@ (8001774 <getOperatorName+0xc4>)
 800170a:	f7ff fd4f 	bl	80011ac <EC200_Transmit>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d029      	beq.n	8001768 <getOperatorName+0xb8>
	  {
			clearBuffer(split, sizeof(split));
 8001714:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001718:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800171c:	4618      	mov	r0, r3
 800171e:	f000 f9d3 	bl	8001ac8 <clearBuffer>
			splitString(resbuff,",",split);
 8001722:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8001726:	f107 0308 	add.w	r3, r7, #8
 800172a:	4913      	ldr	r1, [pc, #76]	@ (8001778 <getOperatorName+0xc8>)
 800172c:	4618      	mov	r0, r3
 800172e:	f000 f9d9 	bl	8001ae4 <splitString>
			memcpy(opbuffer,split[2],strlen(split[2]));
 8001732:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001736:	33c8      	adds	r3, #200	@ 0xc8
 8001738:	4618      	mov	r0, r3
 800173a:	f7fe fdb3 	bl	80002a4 <strlen>
 800173e:	4602      	mov	r2, r0
 8001740:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001744:	f103 01c8 	add.w	r1, r3, #200	@ 0xc8
 8001748:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800174c:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8001750:	6818      	ldr	r0, [r3, #0]
 8001752:	f01d fce0 	bl	801f116 <memcpy>
			printc(MinDelay,"Res For AT+COPS? %s\n",resbuff);
 8001756:	f107 0308 	add.w	r3, r7, #8
 800175a:	461a      	mov	r2, r3
 800175c:	4907      	ldr	r1, [pc, #28]	@ (800177c <getOperatorName+0xcc>)
 800175e:	200a      	movs	r0, #10
 8001760:	f000 f95a 	bl	8001a18 <printc>
			return true;
 8001764:	2301      	movs	r3, #1
 8001766:	e000      	b.n	800176a <getOperatorName+0xba>
		}
		return false;
 8001768:	2300      	movs	r3, #0
}
 800176a:	4618      	mov	r0, r3
 800176c:	f507 7718 	add.w	r7, r7, #608	@ 0x260
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	080224a4 	.word	0x080224a4
 8001778:	08022540 	.word	0x08022540
 800177c:	08022544 	.word	0x08022544

08001780 <get_MCC_MNC_CellID>:

bool get_MCC_MNC_CellID(char *opMMC,char *opMNC,char *opCELL,char *CellID){
 8001780:	b590      	push	{r4, r7, lr}
 8001782:	f2ad 7de4 	subw	sp, sp, #2020	@ 0x7e4
 8001786:	af00      	add	r7, sp, #0
 8001788:	f507 64fc 	add.w	r4, r7, #2016	@ 0x7e0
 800178c:	f2a4 74d4 	subw	r4, r4, #2004	@ 0x7d4
 8001790:	6020      	str	r0, [r4, #0]
 8001792:	f507 60fc 	add.w	r0, r7, #2016	@ 0x7e0
 8001796:	f5a0 60fb 	sub.w	r0, r0, #2008	@ 0x7d8
 800179a:	6001      	str	r1, [r0, #0]
 800179c:	f507 61fc 	add.w	r1, r7, #2016	@ 0x7e0
 80017a0:	f2a1 71dc 	subw	r1, r1, #2012	@ 0x7dc
 80017a4:	600a      	str	r2, [r1, #0]
 80017a6:	f507 62fc 	add.w	r2, r7, #2016	@ 0x7e0
 80017aa:	f5a2 62fc 	sub.w	r2, r2, #2016	@ 0x7e0
 80017ae:	6013      	str	r3, [r2, #0]
	    uint8_t split[19][100]={};
 80017b0:	f507 63fc 	add.w	r3, r7, #2016	@ 0x7e0
 80017b4:	f2a3 736c 	subw	r3, r3, #1900	@ 0x76c
 80017b8:	4618      	mov	r0, r3
 80017ba:	f240 736c 	movw	r3, #1900	@ 0x76c
 80017be:	461a      	mov	r2, r3
 80017c0:	2100      	movs	r1, #0
 80017c2:	f01d fb35 	bl	801ee30 <memset>
	    uint8_t resbuff[100]={};
 80017c6:	f507 63fc 	add.w	r3, r7, #2016	@ 0x7e0
 80017ca:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	3304      	adds	r3, #4
 80017d4:	2260      	movs	r2, #96	@ 0x60
 80017d6:	2100      	movs	r1, #0
 80017d8:	4618      	mov	r0, r3
 80017da:	f01d fb29 	bl	801ee30 <memset>
		memset(resbuff,0,sizeof(resbuff));
 80017de:	f107 0310 	add.w	r3, r7, #16
 80017e2:	2264      	movs	r2, #100	@ 0x64
 80017e4:	2100      	movs	r1, #0
 80017e6:	4618      	mov	r0, r3
 80017e8:	f01d fb22 	bl	801ee30 <memset>
		if(EC200_Transmit("AT+QENG=\"servingcell\"\r\n",resbuff,EC200MINRESONSETIME))
 80017ec:	f107 0310 	add.w	r3, r7, #16
 80017f0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80017f4:	4619      	mov	r1, r3
 80017f6:	4823      	ldr	r0, [pc, #140]	@ (8001884 <get_MCC_MNC_CellID+0x104>)
 80017f8:	f7ff fcd8 	bl	80011ac <EC200_Transmit>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d039      	beq.n	8001876 <get_MCC_MNC_CellID+0xf6>
		{
			splitString(resbuff,",",split);
 8001802:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 8001806:	f107 0310 	add.w	r3, r7, #16
 800180a:	491f      	ldr	r1, [pc, #124]	@ (8001888 <get_MCC_MNC_CellID+0x108>)
 800180c:	4618      	mov	r0, r3
 800180e:	f000 f969 	bl	8001ae4 <splitString>
			strcpy(opMMC,split[4]);
 8001812:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001816:	f503 72c8 	add.w	r2, r3, #400	@ 0x190
 800181a:	f507 63fc 	add.w	r3, r7, #2016	@ 0x7e0
 800181e:	f2a3 73d4 	subw	r3, r3, #2004	@ 0x7d4
 8001822:	4611      	mov	r1, r2
 8001824:	6818      	ldr	r0, [r3, #0]
 8001826:	f01d fc60 	bl	801f0ea <strcpy>
			strcpy(opMNC,split[5]);
 800182a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800182e:	f503 72fa 	add.w	r2, r3, #500	@ 0x1f4
 8001832:	f507 63fc 	add.w	r3, r7, #2016	@ 0x7e0
 8001836:	f5a3 63fb 	sub.w	r3, r3, #2008	@ 0x7d8
 800183a:	4611      	mov	r1, r2
 800183c:	6818      	ldr	r0, [r3, #0]
 800183e:	f01d fc54 	bl	801f0ea <strcpy>
			strcpy(opCELL,split[6]);
 8001842:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001846:	f503 7216 	add.w	r2, r3, #600	@ 0x258
 800184a:	f507 63fc 	add.w	r3, r7, #2016	@ 0x7e0
 800184e:	f2a3 73dc 	subw	r3, r3, #2012	@ 0x7dc
 8001852:	4611      	mov	r1, r2
 8001854:	6818      	ldr	r0, [r3, #0]
 8001856:	f01d fc48 	bl	801f0ea <strcpy>
			strcpy(CellID,split[7]);
 800185a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800185e:	f503 722f 	add.w	r2, r3, #700	@ 0x2bc
 8001862:	f507 63fc 	add.w	r3, r7, #2016	@ 0x7e0
 8001866:	f5a3 63fc 	sub.w	r3, r3, #2016	@ 0x7e0
 800186a:	4611      	mov	r1, r2
 800186c:	6818      	ldr	r0, [r3, #0]
 800186e:	f01d fc3c 	bl	801f0ea <strcpy>
//			printc(MinDelay,"Res For AT+QENG? %s\n",resbuff);
			return true;
 8001872:	2301      	movs	r3, #1
 8001874:	e000      	b.n	8001878 <get_MCC_MNC_CellID+0xf8>
		}
		return false;
 8001876:	2300      	movs	r3, #0
}
 8001878:	4618      	mov	r0, r3
 800187a:	f207 77e4 	addw	r7, r7, #2020	@ 0x7e4
 800187e:	46bd      	mov	sp, r7
 8001880:	bd90      	pop	{r4, r7, pc}
 8001882:	bf00      	nop
 8001884:	0802255c 	.word	0x0802255c
 8001888:	08022540 	.word	0x08022540

0800188c <setupEc200>:

bool setupEc200(UART_HandleTypeDef *uart){
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
	  ec200MqttUart=uart;
 8001894:	4a23      	ldr	r2, [pc, #140]	@ (8001924 <setupEc200+0x98>)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6013      	str	r3, [r2, #0]
	  GNSS_ON();
 800189a:	2200      	movs	r2, #0
 800189c:	2104      	movs	r1, #4
 800189e:	4822      	ldr	r0, [pc, #136]	@ (8001928 <setupEc200+0x9c>)
 80018a0:	f009 ffe8 	bl	800b874 <HAL_GPIO_WritePin>
	  GPIO_LTE_ON();
 80018a4:	2201      	movs	r2, #1
 80018a6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018aa:	4820      	ldr	r0, [pc, #128]	@ (800192c <setupEc200+0xa0>)
 80018ac:	f009 ffe2 	bl	800b874 <HAL_GPIO_WritePin>
	  GPIO_3V3_ON();
 80018b0:	2200      	movs	r2, #0
 80018b2:	2108      	movs	r1, #8
 80018b4:	481e      	ldr	r0, [pc, #120]	@ (8001930 <setupEc200+0xa4>)
 80018b6:	f009 ffdd 	bl	800b874 <HAL_GPIO_WritePin>
	  GPS_LIGHT_ON();
 80018ba:	2200      	movs	r2, #0
 80018bc:	2110      	movs	r1, #16
 80018be:	481c      	ldr	r0, [pc, #112]	@ (8001930 <setupEc200+0xa4>)
 80018c0:	f009 ffd8 	bl	800b874 <HAL_GPIO_WritePin>
	  enableIdle();
 80018c4:	f000 f878 	bl	80019b8 <enableIdle>
	  ec200start:
	  if(EC200_Transmit("AT\r\n",tmpbuff,EC200MINRESONSETIME)){
 80018c8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80018cc:	4919      	ldr	r1, [pc, #100]	@ (8001934 <setupEc200+0xa8>)
 80018ce:	481a      	ldr	r0, [pc, #104]	@ (8001938 <setupEc200+0xac>)
 80018d0:	f7ff fc6c 	bl	80011ac <EC200_Transmit>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d0f6      	beq.n	80018c8 <setupEc200+0x3c>
		  printc(MinDelay,"%s",tmpbuff);
 80018da:	4a16      	ldr	r2, [pc, #88]	@ (8001934 <setupEc200+0xa8>)
 80018dc:	4917      	ldr	r1, [pc, #92]	@ (800193c <setupEc200+0xb0>)
 80018de:	200a      	movs	r0, #10
 80018e0:	f000 f89a 	bl	8001a18 <printc>
	  }
	  else{
		 goto ec200start;
	  }
	  HAL_Delay(5000);
 80018e4:	f241 3088 	movw	r0, #5000	@ 0x1388
 80018e8:	f004 f87e 	bl	80059e8 <HAL_Delay>
	  EC200_Init();
 80018ec:	f7ff fc8a 	bl	8001204 <EC200_Init>
	  gsmParameterUpdate();
 80018f0:	f001 f93c 	bl	8002b6c <gsmParameterUpdate>
	  clearBuffer(tmpbuff,sizeof(tmpbuff));
 80018f4:	2164      	movs	r1, #100	@ 0x64
 80018f6:	480f      	ldr	r0, [pc, #60]	@ (8001934 <setupEc200+0xa8>)
 80018f8:	f000 f8e6 	bl	8001ac8 <clearBuffer>
	  if(getIMEI(tmpbuff)){
 80018fc:	480d      	ldr	r0, [pc, #52]	@ (8001934 <setupEc200+0xa8>)
 80018fe:	f7ff fe57 	bl	80015b0 <getIMEI>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d004      	beq.n	8001912 <setupEc200+0x86>
		   setIMEI(tmpbuff);
 8001908:	480a      	ldr	r0, [pc, #40]	@ (8001934 <setupEc200+0xa8>)
 800190a:	f001 f8af 	bl	8002a6c <setIMEI>
	  }
	  else{
		  printc(MinDelay,"Don't get IMEI\n");
		  return false;
	  }
	  return true;
 800190e:	2301      	movs	r3, #1
 8001910:	e004      	b.n	800191c <setupEc200+0x90>
		  printc(MinDelay,"Don't get IMEI\n");
 8001912:	490b      	ldr	r1, [pc, #44]	@ (8001940 <setupEc200+0xb4>)
 8001914:	200a      	movs	r0, #10
 8001916:	f000 f87f 	bl	8001a18 <printc>
		  return false;
 800191a:	2300      	movs	r3, #0

}
 800191c:	4618      	mov	r0, r3
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	2000044c 	.word	0x2000044c
 8001928:	42020c00 	.word	0x42020c00
 800192c:	42020800 	.word	0x42020800
 8001930:	42020400 	.word	0x42020400
 8001934:	20000c54 	.word	0x20000c54
 8001938:	080222a4 	.word	0x080222a4
 800193c:	08022574 	.word	0x08022574
 8001940:	08022578 	.word	0x08022578

08001944 <E200_RxHAlfCpltCallback>:


 void E200_RxHAlfCpltCallback(void){
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
	 printc(MinDelay,"Half Callback\n %s \n",EC200_ResponseBuff);
 8001948:	4a03      	ldr	r2, [pc, #12]	@ (8001958 <E200_RxHAlfCpltCallback+0x14>)
 800194a:	4904      	ldr	r1, [pc, #16]	@ (800195c <E200_RxHAlfCpltCallback+0x18>)
 800194c:	200a      	movs	r0, #10
 800194e:	f000 f863 	bl	8001a18 <printc>
 }
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	20000450 	.word	0x20000450
 800195c:	08022588 	.word	0x08022588

08001960 <Ec200_RxEventCallback>:

 void Ec200_RxEventCallback(uint16_t size){
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	80fb      	strh	r3, [r7, #6]
	 printc(MinDelay,"Event Callback %d %s\n",size,EC200_ResponseBuff);
 800196a:	88fa      	ldrh	r2, [r7, #6]
 800196c:	4b05      	ldr	r3, [pc, #20]	@ (8001984 <Ec200_RxEventCallback+0x24>)
 800196e:	4906      	ldr	r1, [pc, #24]	@ (8001988 <Ec200_RxEventCallback+0x28>)
 8001970:	200a      	movs	r0, #10
 8001972:	f000 f851 	bl	8001a18 <printc>
	 FLAG_EC200RESONSE=true;
 8001976:	4b05      	ldr	r3, [pc, #20]	@ (800198c <Ec200_RxEventCallback+0x2c>)
 8001978:	2201      	movs	r2, #1
 800197a:	701a      	strb	r2, [r3, #0]
 }
 800197c:	bf00      	nop
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	20000450 	.word	0x20000450
 8001988:	0802259c 	.word	0x0802259c
 800198c:	20000c50 	.word	0x20000c50

08001990 <switchIdle>:
 void E200_RXCpltCallback(void){
	 printc(MinDelay,"Complete Callback %s \n",EC200_ResponseBuff);
 }
void switchIdle()
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
	if(enable_Idle)
 8001994:	4b07      	ldr	r3, [pc, #28]	@ (80019b4 <switchIdle+0x24>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d003      	beq.n	80019a4 <switchIdle+0x14>
		enable_Idle = false;
 800199c:	4b05      	ldr	r3, [pc, #20]	@ (80019b4 <switchIdle+0x24>)
 800199e:	2200      	movs	r2, #0
 80019a0:	701a      	strb	r2, [r3, #0]
	else
		enable_Idle = true;


}
 80019a2:	e002      	b.n	80019aa <switchIdle+0x1a>
		enable_Idle = true;
 80019a4:	4b03      	ldr	r3, [pc, #12]	@ (80019b4 <switchIdle+0x24>)
 80019a6:	2201      	movs	r2, #1
 80019a8:	701a      	strb	r2, [r3, #0]
}
 80019aa:	bf00      	nop
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr
 80019b4:	20000000 	.word	0x20000000

080019b8 <enableIdle>:
void enableIdle(){
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
	if(enable_Idle)
 80019bc:	4b06      	ldr	r3, [pc, #24]	@ (80019d8 <enableIdle+0x20>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d007      	beq.n	80019d4 <enableIdle+0x1c>
    	HAL_UARTEx_ReceiveToIdle_IT(ec200MqttUart,EC200_ResponseBuff,RESBUFF_SIZE);
 80019c4:	4b05      	ldr	r3, [pc, #20]	@ (80019dc <enableIdle+0x24>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80019cc:	4904      	ldr	r1, [pc, #16]	@ (80019e0 <enableIdle+0x28>)
 80019ce:	4618      	mov	r0, r3
 80019d0:	f013 fbd8 	bl	8015184 <HAL_UARTEx_ReceiveToIdle_IT>
}
 80019d4:	bf00      	nop
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	20000000 	.word	0x20000000
 80019dc:	2000044c 	.word	0x2000044c
 80019e0:	20000450 	.word	0x20000450

080019e4 <setupPrintUart>:

UART_HandleTypeDef *printUart;
int printUartSet=0;
bool enablePrintUartIdle=true;
uint8_t printUart_ResponseBuff[PRINT_RESBUFF_SIZE]={};
void setupPrintUart(UART_HandleTypeDef *uart,bool debug){
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	460b      	mov	r3, r1
 80019ee:	70fb      	strb	r3, [r7, #3]
	printUart=uart;
 80019f0:	4a07      	ldr	r2, [pc, #28]	@ (8001a10 <setupPrintUart+0x2c>)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6013      	str	r3, [r2, #0]
	if(debug)
 80019f6:	78fb      	ldrb	r3, [r7, #3]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d002      	beq.n	8001a02 <setupPrintUart+0x1e>
		printUartSet=1;
 80019fc:	4b05      	ldr	r3, [pc, #20]	@ (8001a14 <setupPrintUart+0x30>)
 80019fe:	2201      	movs	r2, #1
 8001a00:	601a      	str	r2, [r3, #0]
//	openPrintUartIdle();
}
 8001a02:	bf00      	nop
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	20000cb8 	.word	0x20000cb8
 8001a14:	20000cbc 	.word	0x20000cbc

08001a18 <printc>:
void printc(uint8_t delay,const char* msg, ...) {
 8001a18:	b40e      	push	{r1, r2, r3}
 8001a1a:	b590      	push	{r4, r7, lr}
 8001a1c:	f5ad 6dff 	sub.w	sp, sp, #2040	@ 0x7f8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	4602      	mov	r2, r0
 8001a24:	f507 63ff 	add.w	r3, r7, #2040	@ 0x7f8
 8001a28:	f2a3 73f1 	subw	r3, r3, #2033	@ 0x7f1
 8001a2c:	701a      	strb	r2, [r3, #0]
	if(printUartSet){
 8001a2e:	4b16      	ldr	r3, [pc, #88]	@ (8001a88 <printc+0x70>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d020      	beq.n	8001a78 <printc+0x60>
			char message[2024];
			va_list args;
			va_start(args, msg);
 8001a36:	f607 0308 	addw	r3, r7, #2056	@ 0x808
 8001a3a:	f8c7 37f4 	str.w	r3, [r7, #2036]	@ 0x7f4
			vsnprintf(message, sizeof(message), msg, args);
 8001a3e:	f107 000c 	add.w	r0, r7, #12
 8001a42:	f8d7 37f4 	ldr.w	r3, [r7, #2036]	@ 0x7f4
 8001a46:	f8d7 2804 	ldr.w	r2, [r7, #2052]	@ 0x804
 8001a4a:	f44f 61fd 	mov.w	r1, #2024	@ 0x7e8
 8001a4e:	f01d f94d 	bl	801ecec <vsniprintf>
			va_end(args);
			HAL_UART_Transmit(printUart, (uint8_t*)message, strlen(message), delay);
 8001a52:	4b0e      	ldr	r3, [pc, #56]	@ (8001a8c <printc+0x74>)
 8001a54:	681c      	ldr	r4, [r3, #0]
 8001a56:	f107 030c 	add.w	r3, r7, #12
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7fe fc22 	bl	80002a4 <strlen>
 8001a60:	4603      	mov	r3, r0
 8001a62:	b29a      	uxth	r2, r3
 8001a64:	f507 63ff 	add.w	r3, r7, #2040	@ 0x7f8
 8001a68:	f2a3 73f1 	subw	r3, r3, #2033	@ 0x7f1
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	f107 010c 	add.w	r1, r7, #12
 8001a72:	4620      	mov	r0, r4
 8001a74:	f011 f90e 	bl	8012c94 <HAL_UART_Transmit>
	}
}
 8001a78:	bf00      	nop
 8001a7a:	f507 67ff 	add.w	r7, r7, #2040	@ 0x7f8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001a84:	b003      	add	sp, #12
 8001a86:	4770      	bx	lr
 8001a88:	20000cbc 	.word	0x20000cbc
 8001a8c:	20000cb8 	.word	0x20000cb8

08001a90 <print>:
void print(uint8_t delay,uint8_t* data,int size){
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	60b9      	str	r1, [r7, #8]
 8001a9a:	607a      	str	r2, [r7, #4]
 8001a9c:	73fb      	strb	r3, [r7, #15]
	if(printUartSet){
 8001a9e:	4b08      	ldr	r3, [pc, #32]	@ (8001ac0 <print+0x30>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d007      	beq.n	8001ab6 <print+0x26>
		HAL_UART_Transmit(printUart,data,size, delay);
 8001aa6:	4b07      	ldr	r3, [pc, #28]	@ (8001ac4 <print+0x34>)
 8001aa8:	6818      	ldr	r0, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	b29a      	uxth	r2, r3
 8001aae:	7bfb      	ldrb	r3, [r7, #15]
 8001ab0:	68b9      	ldr	r1, [r7, #8]
 8001ab2:	f011 f8ef 	bl	8012c94 <HAL_UART_Transmit>
	}
}
 8001ab6:	bf00      	nop
 8001ab8:	3710      	adds	r7, #16
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	20000cbc 	.word	0x20000cbc
 8001ac4:	20000cb8 	.word	0x20000cb8

08001ac8 <clearBuffer>:
void clearBuffer(uint8_t* buffer, size_t size) {
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
    // Use memset to fill the buffer with zeros
    memset(buffer, 0, size);
 8001ad2:	683a      	ldr	r2, [r7, #0]
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f01d f9aa 	bl	801ee30 <memset>
}
 8001adc:	bf00      	nop
 8001ade:	3708      	adds	r7, #8
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <splitString>:
				sprintf(hex, "%02X ", data[i]);  // Format each byte as a two-digit hexadecimal number
				HAL_UART_Transmit(printUart, (uint8_t*)hex, strlen(hex), delay);
			}
	}
}
bool splitString(uint8_t *string,char *spliter,uint8_t opbuffer[][100]){
 8001ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ae8:	b08a      	sub	sp, #40	@ 0x28
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	60f8      	str	r0, [r7, #12]
 8001aee:	60b9      	str	r1, [r7, #8]
 8001af0:	607a      	str	r2, [r7, #4]
	uint8_t *line=strstr(string,spliter);
 8001af2:	68b9      	ldr	r1, [r7, #8]
 8001af4:	68f8      	ldr	r0, [r7, #12]
 8001af6:	f01d fa5b 	bl	801efb0 <strstr>
 8001afa:	6278      	str	r0, [r7, #36]	@ 0x24
	int i=0;
 8001afc:	2300      	movs	r3, #0
 8001afe:	623b      	str	r3, [r7, #32]
	if(line==NULL){
 8001b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d17b      	bne.n	8001bfe <splitString+0x11a>
		memcpy(opbuffer[i++],string,strlen(string));
 8001b06:	6a3b      	ldr	r3, [r7, #32]
 8001b08:	1c5a      	adds	r2, r3, #1
 8001b0a:	623a      	str	r2, [r7, #32]
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	2364      	movs	r3, #100	@ 0x64
 8001b10:	fb02 f303 	mul.w	r3, r2, r3
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	18d6      	adds	r6, r2, r3
 8001b18:	68f8      	ldr	r0, [r7, #12]
 8001b1a:	f7fe fbc3 	bl	80002a4 <strlen>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	461a      	mov	r2, r3
 8001b22:	68f9      	ldr	r1, [r7, #12]
 8001b24:	4630      	mov	r0, r6
 8001b26:	f01d faf6 	bl	801f116 <memcpy>
	}
	while(line!=NULL){
 8001b2a:	e068      	b.n	8001bfe <splitString+0x11a>
 8001b2c:	466b      	mov	r3, sp
 8001b2e:	469a      	mov	sl, r3
		uint8_t length = line - string;
 8001b30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	77fb      	strb	r3, [r7, #31]
		char substring[length];
 8001b38:	7ff9      	ldrb	r1, [r7, #31]
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	3b01      	subs	r3, #1
 8001b3e:	61bb      	str	r3, [r7, #24]
 8001b40:	b2cb      	uxtb	r3, r1
 8001b42:	2200      	movs	r2, #0
 8001b44:	461c      	mov	r4, r3
 8001b46:	4615      	mov	r5, r2
 8001b48:	f04f 0200 	mov.w	r2, #0
 8001b4c:	f04f 0300 	mov.w	r3, #0
 8001b50:	00eb      	lsls	r3, r5, #3
 8001b52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b56:	00e2      	lsls	r2, r4, #3
 8001b58:	b2cb      	uxtb	r3, r1
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	4698      	mov	r8, r3
 8001b5e:	4691      	mov	r9, r2
 8001b60:	f04f 0200 	mov.w	r2, #0
 8001b64:	f04f 0300 	mov.w	r3, #0
 8001b68:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b6c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b70:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b74:	460b      	mov	r3, r1
 8001b76:	3307      	adds	r3, #7
 8001b78:	08db      	lsrs	r3, r3, #3
 8001b7a:	00db      	lsls	r3, r3, #3
 8001b7c:	ebad 0d03 	sub.w	sp, sp, r3
 8001b80:	466b      	mov	r3, sp
 8001b82:	3300      	adds	r3, #0
 8001b84:	617b      	str	r3, [r7, #20]
		memset(substring,0,length);
 8001b86:	7ffb      	ldrb	r3, [r7, #31]
 8001b88:	461a      	mov	r2, r3
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	6978      	ldr	r0, [r7, #20]
 8001b8e:	f01d f94f 	bl	801ee30 <memset>
		if (substring == NULL) {
				printc(MinDelay,"Memory allocation failed\n");
				return false;
		}
		memcpy(substring,string,length);
 8001b92:	7ffb      	ldrb	r3, [r7, #31]
 8001b94:	461a      	mov	r2, r3
 8001b96:	68f9      	ldr	r1, [r7, #12]
 8001b98:	6978      	ldr	r0, [r7, #20]
 8001b9a:	f01d fabc 	bl	801f116 <memcpy>
		string=line+strlen(spliter);
 8001b9e:	68b8      	ldr	r0, [r7, #8]
 8001ba0:	f7fe fb80 	bl	80002a4 <strlen>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba8:	4413      	add	r3, r2
 8001baa:	60fb      	str	r3, [r7, #12]
//		printc(MinDelay,"sub string \n %s\n",substring);
		if(substring==NULL)
			return false;
		memcpy((uint8_t*)opbuffer[i++],substring,length);
 8001bac:	6a3b      	ldr	r3, [r7, #32]
 8001bae:	1c5a      	adds	r2, r3, #1
 8001bb0:	623a      	str	r2, [r7, #32]
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	2364      	movs	r3, #100	@ 0x64
 8001bb6:	fb02 f303 	mul.w	r3, r2, r3
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	7ffa      	ldrb	r2, [r7, #31]
 8001bc0:	6979      	ldr	r1, [r7, #20]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f01d faa7 	bl	801f116 <memcpy>
		line=strstr(string,spliter);
 8001bc8:	68b9      	ldr	r1, [r7, #8]
 8001bca:	68f8      	ldr	r0, [r7, #12]
 8001bcc:	f01d f9f0 	bl	801efb0 <strstr>
 8001bd0:	6278      	str	r0, [r7, #36]	@ 0x24
		if(line==NULL){
 8001bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d111      	bne.n	8001bfc <splitString+0x118>
//			printc(MinDelay,"last line %s\n",string);
			memcpy(opbuffer[i++],string,strlen(string));
 8001bd8:	6a3b      	ldr	r3, [r7, #32]
 8001bda:	1c5a      	adds	r2, r3, #1
 8001bdc:	623a      	str	r2, [r7, #32]
 8001bde:	461a      	mov	r2, r3
 8001be0:	2364      	movs	r3, #100	@ 0x64
 8001be2:	fb02 f303 	mul.w	r3, r2, r3
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	18d6      	adds	r6, r2, r3
 8001bea:	68f8      	ldr	r0, [r7, #12]
 8001bec:	f7fe fb5a 	bl	80002a4 <strlen>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	68f9      	ldr	r1, [r7, #12]
 8001bf6:	4630      	mov	r0, r6
 8001bf8:	f01d fa8d 	bl	801f116 <memcpy>
 8001bfc:	46d5      	mov	sp, sl
	while(line!=NULL){
 8001bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d193      	bne.n	8001b2c <splitString+0x48>
		}
	}
	return true;
 8001c04:	2301      	movs	r3, #1
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3728      	adds	r7, #40	@ 0x28
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08001c10 <print_RxEventCallback>:
}
void openPrintUartIdle(){
//	if(enablePrintUartIdle)
    	//HAL_UARTEx_ReceiveToIdle_IT(printUart,printUart_ResponseBuff,PRINT_RESBUFF_SIZE);
}
void print_RxEventCallback(uint16_t size){
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	4603      	mov	r3, r0
 8001c18:	80fb      	strh	r3, [r7, #6]
	 printc(MinDelay,"Callback From Print Uart %d %s\n",size,printUart_ResponseBuff);
 8001c1a:	88fa      	ldrh	r2, [r7, #6]
 8001c1c:	4b08      	ldr	r3, [pc, #32]	@ (8001c40 <print_RxEventCallback+0x30>)
 8001c1e:	4909      	ldr	r1, [pc, #36]	@ (8001c44 <print_RxEventCallback+0x34>)
 8001c20:	200a      	movs	r0, #10
 8001c22:	f7ff fef9 	bl	8001a18 <printc>
	 onPrintUartCmd(printUart_ResponseBuff);
 8001c26:	4806      	ldr	r0, [pc, #24]	@ (8001c40 <print_RxEventCallback+0x30>)
 8001c28:	f000 ff8a 	bl	8002b40 <onPrintUartCmd>
	 clearBuffer(printUart_ResponseBuff,PRINT_RESBUFF_SIZE);
 8001c2c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001c30:	4803      	ldr	r0, [pc, #12]	@ (8001c40 <print_RxEventCallback+0x30>)
 8001c32:	f7ff ff49 	bl	8001ac8 <clearBuffer>
 }
 8001c36:	bf00      	nop
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	20000cc0 	.word	0x20000cc0
 8001c44:	080225d4 	.word	0x080225d4

08001c48 <addToMap>:


// Function to create a new ma

// Function to add a key-value pair to the map
void addToMap(Map* map, const uint32_t key, uint8_t *value,uint32_t size) {
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	60b9      	str	r1, [r7, #8]
 8001c52:	607a      	str	r2, [r7, #4]
 8001c54:	603b      	str	r3, [r7, #0]
    // Find an empty slot in the map
    int i;
    for (i = 0; i < map->size; i++) {
 8001c56:	2300      	movs	r3, #0
 8001c58:	617b      	str	r3, [r7, #20]
 8001c5a:	e028      	b.n	8001cae <addToMap+0x66>
        if (map->pairs[i].key==key ) {
 8001c5c:	68f9      	ldr	r1, [r7, #12]
 8001c5e:	697a      	ldr	r2, [r7, #20]
 8001c60:	4613      	mov	r3, r2
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	4413      	add	r3, r2
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	440b      	add	r3, r1
 8001c6a:	881b      	ldrh	r3, [r3, #0]
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d119      	bne.n	8001ca8 <addToMap+0x60>
            clearBuffer(map->pairs[i].value, sizeof(map->pairs[i].value));
 8001c74:	697a      	ldr	r2, [r7, #20]
 8001c76:	4613      	mov	r3, r2
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	4413      	add	r3, r2
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	68fa      	ldr	r2, [r7, #12]
 8001c80:	4413      	add	r3, r2
 8001c82:	3302      	adds	r3, #2
 8001c84:	2109      	movs	r1, #9
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff ff1e 	bl	8001ac8 <clearBuffer>
            memcpy(map->pairs[i].value,value,size);
 8001c8c:	697a      	ldr	r2, [r7, #20]
 8001c8e:	4613      	mov	r3, r2
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	4413      	add	r3, r2
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	68fa      	ldr	r2, [r7, #12]
 8001c98:	4413      	add	r3, r2
 8001c9a:	3302      	adds	r3, #2
 8001c9c:	683a      	ldr	r2, [r7, #0]
 8001c9e:	6879      	ldr	r1, [r7, #4]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f01d fa38 	bl	801f116 <memcpy>
            return;
 8001ca6:	e043      	b.n	8001d30 <addToMap+0xe8>
    for (i = 0; i < map->size; i++) {
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	3301      	adds	r3, #1
 8001cac:	617b      	str	r3, [r7, #20]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
 8001cb4:	697a      	ldr	r2, [r7, #20]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	dbd0      	blt.n	8001c5c <addToMap+0x14>
        }
    }
    if(map->size >=MAX_MAP_DATA){
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
 8001cc0:	2b22      	cmp	r3, #34	@ 0x22
 8001cc2:	dd04      	ble.n	8001cce <addToMap+0x86>
    	printc(MinDelay,"Map is full\n");
 8001cc4:	491c      	ldr	r1, [pc, #112]	@ (8001d38 <addToMap+0xf0>)
 8001cc6:	200a      	movs	r0, #10
 8001cc8:	f7ff fea6 	bl	8001a18 <printc>
 8001ccc:	e030      	b.n	8001d30 <addToMap+0xe8>
    }
    else{
    	clearBuffer(map->pairs[map->size].value, sizeof(map->pairs[map->size].value));
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	f8d3 21a4 	ldr.w	r2, [r3, #420]	@ 0x1a4
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	4413      	add	r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	68fa      	ldr	r2, [r7, #12]
 8001cde:	4413      	add	r3, r2
 8001ce0:	3302      	adds	r3, #2
 8001ce2:	2109      	movs	r1, #9
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7ff feef 	bl	8001ac8 <clearBuffer>
    	map->pairs[map->size].key=key;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	f8d3 21a4 	ldr.w	r2, [r3, #420]	@ 0x1a4
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	b298      	uxth	r0, r3
 8001cf4:	68f9      	ldr	r1, [r7, #12]
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	4413      	add	r3, r2
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	440b      	add	r3, r1
 8001d00:	4602      	mov	r2, r0
 8001d02:	801a      	strh	r2, [r3, #0]
    	memcpy(map->pairs[map->size].value,value,size);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f8d3 21a4 	ldr.w	r2, [r3, #420]	@ 0x1a4
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	4413      	add	r3, r2
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	68fa      	ldr	r2, [r7, #12]
 8001d14:	4413      	add	r3, r2
 8001d16:	3302      	adds	r3, #2
 8001d18:	683a      	ldr	r2, [r7, #0]
 8001d1a:	6879      	ldr	r1, [r7, #4]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f01d f9fa 	bl	801f116 <memcpy>
    	map->size++;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
 8001d28:	1c5a      	adds	r2, r3, #1
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	f8c3 21a4 	str.w	r2, [r3, #420]	@ 0x1a4
    }

}
 8001d30:	3718      	adds	r7, #24
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	080225f4 	.word	0x080225f4

08001d3c <initializeStack>:
 *      Author: CEINFO
 */
#include <stack.h>

// Function to initialize the stack
void initializeStack(Stack *stack) {
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
    stack->top = -1; // Initialize top index to -1 (empty stack)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d50:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
}
 8001d54:	bf00      	nop
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <full>:

// Function to check if the stack is full
int full(Stack *stack) {
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
    return stack->top == MAX_STACK_DATA - 1; // Stack is full if top is at max index
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8001d6e:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	@ 0xc00
 8001d72:	2b22      	cmp	r3, #34	@ 0x22
 8001d74:	bf0c      	ite	eq
 8001d76:	2301      	moveq	r3, #1
 8001d78:	2300      	movne	r3, #0
 8001d7a:	b2db      	uxtb	r3, r3
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <empty>:

// Function to check if the stack is empty
int empty(Stack *stack) {
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
    return stack->top == -1; // Stack is empty if top is -1
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8001d96:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	@ 0xc00
 8001d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d9e:	bf0c      	ite	eq
 8001da0:	2301      	moveq	r3, #1
 8001da2:	2300      	movne	r3, #0
 8001da4:	b2db      	uxtb	r3, r3
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
	...

08001db4 <push>:

// Function to push an array onto the stack
bool push(Stack *stack, const uint8_t *array,uint32_t size) {
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
    if (full(stack)) {
 8001dc0:	68f8      	ldr	r0, [r7, #12]
 8001dc2:	f7ff ffcd 	bl	8001d60 <full>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d005      	beq.n	8001dd8 <push+0x24>
        printc(MinDelay,"Error: Stack overflow\n");
 8001dcc:	4917      	ldr	r1, [pc, #92]	@ (8001e2c <push+0x78>)
 8001dce:	200a      	movs	r0, #10
 8001dd0:	f7ff fe22 	bl	8001a18 <printc>
        return false; // Exit function if stack is full
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	e025      	b.n	8001e24 <push+0x70>
    }

    stack->top++; // Increment top index
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8001dde:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	@ 0xc00
 8001de2:	3301      	adds	r3, #1
 8001de4:	68fa      	ldr	r2, [r7, #12]
 8001de6:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8001dea:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
    clearBuffer(stack->data[stack->top],sizeof(stack->data[stack->top]));
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8001df4:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	@ 0xc00
 8001df8:	029b      	lsls	r3, r3, #10
 8001dfa:	68fa      	ldr	r2, [r7, #12]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7ff fe60 	bl	8001ac8 <clearBuffer>
    memcpy(stack->data[stack->top], array, size); // Copy array to stack
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8001e0e:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	@ 0xc00
 8001e12:	029b      	lsls	r3, r3, #10
 8001e14:	68fa      	ldr	r2, [r7, #12]
 8001e16:	4413      	add	r3, r2
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	68b9      	ldr	r1, [r7, #8]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f01d f97a 	bl	801f116 <memcpy>
//    print("Pushed array onto the stack\n");
    return true;
 8001e22:	2301      	movs	r3, #1
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3710      	adds	r7, #16
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	08022614 	.word	0x08022614

08001e30 <pop>:

// Function to pop an array from the stack
bool pop(Stack *stack, uint8_t *result) {
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
    if (empty(stack)) {
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f7ff ffa4 	bl	8001d88 <empty>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d005      	beq.n	8001e52 <pop+0x22>
        printc(MinDelay,"Error: Stack underflow\n");
 8001e46:	4911      	ldr	r1, [pc, #68]	@ (8001e8c <pop+0x5c>)
 8001e48:	200a      	movs	r0, #10
 8001e4a:	f7ff fde5 	bl	8001a18 <printc>
        return false; // Exit function if stack is empty
 8001e4e:	2300      	movs	r3, #0
 8001e50:	e017      	b.n	8001e82 <pop+0x52>
    }
    strcpy(result,stack->data[stack->top]);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8001e58:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	@ 0xc00
 8001e5c:	029b      	lsls	r3, r3, #10
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	4413      	add	r3, r2
 8001e62:	4619      	mov	r1, r3
 8001e64:	6838      	ldr	r0, [r7, #0]
 8001e66:	f01d f940 	bl	801f0ea <strcpy>
    //memcpy(result, stack->data[stack->top], size); // Copy array from stack
    stack->top--; // Decrement top index
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8001e70:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	@ 0xc00
 8001e74:	3b01      	subs	r3, #1
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8001e7c:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
    return true;
 8001e80:	2301      	movs	r3, #1
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	0802262c 	.word	0x0802262c

08001e90 <encrypt>:
 */
#include "main.h"

extern CRYP_HandleTypeDef hcryp;

int encrypt(char *Data, uint8_t En_data[]) {
 8001e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e94:	b091      	sub	sp, #68	@ 0x44
 8001e96:	af02      	add	r7, sp, #8
 8001e98:	60f8      	str	r0, [r7, #12]
 8001e9a:	60b9      	str	r1, [r7, #8]
 8001e9c:	466b      	mov	r3, sp
 8001e9e:	461e      	mov	r6, r3
	size_t string_length = strlen(Data);
 8001ea0:	68f8      	ldr	r0, [r7, #12]
 8001ea2:	f7fe f9ff 	bl	80002a4 <strlen>
 8001ea6:	62b8      	str	r0, [r7, #40]	@ 0x28

	addPadding((uint8_t*) Data, string_length);
 8001ea8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001eaa:	68f8      	ldr	r0, [r7, #12]
 8001eac:	f000 fb70 	bl	8002590 <addPadding>
//	printc(MinDelay,"padded data = %s,%d \r\n", &Data, strlen(Data));
	string_length = strlen(Data);
 8001eb0:	68f8      	ldr	r0, [r7, #12]
 8001eb2:	f7fe f9f7 	bl	80002a4 <strlen>
 8001eb6:	62b8      	str	r0, [r7, #40]	@ 0x28
	size_t num_uint32 = (string_length + 3) / 4;
 8001eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001eba:	3303      	adds	r3, #3
 8001ebc:	089b      	lsrs	r3, r3, #2
 8001ebe:	627b      	str	r3, [r7, #36]	@ 0x24

	uint32_t SWData[num_uint32];
 8001ec0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	3b01      	subs	r3, #1
 8001ec6:	623b      	str	r3, [r7, #32]
 8001ec8:	2300      	movs	r3, #0
 8001eca:	6039      	str	r1, [r7, #0]
 8001ecc:	607b      	str	r3, [r7, #4]
 8001ece:	f04f 0200 	mov.w	r2, #0
 8001ed2:	f04f 0300 	mov.w	r3, #0
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	0143      	lsls	r3, r0, #5
 8001eda:	6838      	ldr	r0, [r7, #0]
 8001edc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001ee0:	6838      	ldr	r0, [r7, #0]
 8001ee2:	0142      	lsls	r2, r0, #5
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	468a      	mov	sl, r1
 8001ee8:	469b      	mov	fp, r3
 8001eea:	f04f 0200 	mov.w	r2, #0
 8001eee:	f04f 0300 	mov.w	r3, #0
 8001ef2:	ea4f 134b 	mov.w	r3, fp, lsl #5
 8001ef6:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8001efa:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8001efe:	008b      	lsls	r3, r1, #2
 8001f00:	3307      	adds	r3, #7
 8001f02:	08db      	lsrs	r3, r3, #3
 8001f04:	00db      	lsls	r3, r3, #3
 8001f06:	ebad 0d03 	sub.w	sp, sp, r3
 8001f0a:	ab02      	add	r3, sp, #8
 8001f0c:	3303      	adds	r3, #3
 8001f0e:	089b      	lsrs	r3, r3, #2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	61fb      	str	r3, [r7, #28]
	for (size_t i = 0; i < num_uint32; i++) {
 8001f14:	2300      	movs	r3, #0
 8001f16:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f18:	e026      	b.n	8001f68 <encrypt+0xd8>
		SWData[i] = (uint32_t) (Data[i * 4 + 3])
 8001f1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	3303      	adds	r3, #3
 8001f20:	68fa      	ldr	r2, [r7, #12]
 8001f22:	4413      	add	r3, r2
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	4619      	mov	r1, r3
				| (uint32_t) (Data[i * 4 + 2]) << 8
 8001f28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	3302      	adds	r3, #2
 8001f2e:	68fa      	ldr	r2, [r7, #12]
 8001f30:	4413      	add	r3, r2
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	021b      	lsls	r3, r3, #8
 8001f36:	ea41 0203 	orr.w	r2, r1, r3
				| (uint32_t) (Data[i * 4 + 1]) << 16
 8001f3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	3301      	adds	r3, #1
 8001f40:	68f9      	ldr	r1, [r7, #12]
 8001f42:	440b      	add	r3, r1
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	041b      	lsls	r3, r3, #16
 8001f48:	431a      	orrs	r2, r3
				| (uint32_t) (Data[i * 4 + 0]) << 24;
 8001f4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	68f9      	ldr	r1, [r7, #12]
 8001f50:	440b      	add	r3, r1
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	061b      	lsls	r3, r3, #24
 8001f56:	ea42 0103 	orr.w	r1, r2, r3
		SWData[i] = (uint32_t) (Data[i * 4 + 3])
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001f5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (size_t i = 0; i < num_uint32; i++) {
 8001f62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f64:	3301      	adds	r3, #1
 8001f66:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f68:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d3d4      	bcc.n	8001f1a <encrypt+0x8a>
	}

	// Encrypt the string
	uint32_t encryptedStr[num_uint32]; // Declaration
 8001f70:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001f72:	460b      	mov	r3, r1
 8001f74:	3b01      	subs	r3, #1
 8001f76:	61bb      	str	r3, [r7, #24]
 8001f78:	2300      	movs	r3, #0
 8001f7a:	4688      	mov	r8, r1
 8001f7c:	4699      	mov	r9, r3
 8001f7e:	f04f 0200 	mov.w	r2, #0
 8001f82:	f04f 0300 	mov.w	r3, #0
 8001f86:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8001f8a:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8001f8e:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8001f92:	2300      	movs	r3, #0
 8001f94:	460c      	mov	r4, r1
 8001f96:	461d      	mov	r5, r3
 8001f98:	f04f 0200 	mov.w	r2, #0
 8001f9c:	f04f 0300 	mov.w	r3, #0
 8001fa0:	016b      	lsls	r3, r5, #5
 8001fa2:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8001fa6:	0162      	lsls	r2, r4, #5
 8001fa8:	008b      	lsls	r3, r1, #2
 8001faa:	3307      	adds	r3, #7
 8001fac:	08db      	lsrs	r3, r3, #3
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	ebad 0d03 	sub.w	sp, sp, r3
 8001fb4:	ab02      	add	r3, sp, #8
 8001fb6:	3303      	adds	r3, #3
 8001fb8:	089b      	lsrs	r3, r3, #2
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	617b      	str	r3, [r7, #20]
	memset(encryptedStr, 0, num_uint32 * sizeof(uint32_t)); // Initialization
 8001fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	6978      	ldr	r0, [r7, #20]
 8001fc8:	f01c ff32 	bl	801ee30 <memset>
	memset(En_data, 0, sizeof(En_data));
 8001fcc:	2204      	movs	r2, #4
 8001fce:	2100      	movs	r1, #0
 8001fd0:	68b8      	ldr	r0, [r7, #8]
 8001fd2:	f01c ff2d 	bl	801ee30 <memset>
	HAL_CRYP_Encrypt(&hcryp, SWData, num_uint32, encryptedStr, 2000);
 8001fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd8:	b29a      	uxth	r2, r3
 8001fda:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001fde:	9300      	str	r3, [sp, #0]
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	69f9      	ldr	r1, [r7, #28]
 8001fe4:	482e      	ldr	r0, [pc, #184]	@ (80020a0 <encrypt+0x210>)
 8001fe6:	f005 fd2b 	bl	8007a40 <HAL_CRYP_Encrypt>

	// Convert encryptedStr to char array
	for (int i = 0; i < num_uint32; i++) {
 8001fea:	2300      	movs	r3, #0
 8001fec:	633b      	str	r3, [r7, #48]	@ 0x30
 8001fee:	e031      	b.n	8002054 <encrypt+0x1c4>
		En_data[i * 4 + 0] = (encryptedStr[i] >> 24) & 0xFF;
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001ff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ff8:	0e1a      	lsrs	r2, r3, #24
 8001ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	4619      	mov	r1, r3
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	440b      	add	r3, r1
 8002004:	b2d2      	uxtb	r2, r2
 8002006:	701a      	strb	r2, [r3, #0]
		En_data[i * 4 + 1] = (encryptedStr[i] >> 16) & 0xFF;
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800200c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002010:	0c19      	lsrs	r1, r3, #16
 8002012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	3301      	adds	r3, #1
 8002018:	68ba      	ldr	r2, [r7, #8]
 800201a:	4413      	add	r3, r2
 800201c:	b2ca      	uxtb	r2, r1
 800201e:	701a      	strb	r2, [r3, #0]
		En_data[i * 4 + 2] = (encryptedStr[i] >> 8) & 0xFF;
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002024:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002028:	0a19      	lsrs	r1, r3, #8
 800202a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	3302      	adds	r3, #2
 8002030:	68ba      	ldr	r2, [r7, #8]
 8002032:	4413      	add	r3, r2
 8002034:	b2ca      	uxtb	r2, r1
 8002036:	701a      	strb	r2, [r3, #0]
		En_data[i * 4 + 3] = encryptedStr[i] & 0xFF;
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800203c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	3303      	adds	r3, #3
 8002046:	68ba      	ldr	r2, [r7, #8]
 8002048:	4413      	add	r3, r2
 800204a:	b2ca      	uxtb	r2, r1
 800204c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < num_uint32; i++) {
 800204e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002050:	3301      	adds	r3, #1
 8002052:	633b      	str	r3, [r7, #48]	@ 0x30
 8002054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002056:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002058:	429a      	cmp	r2, r3
 800205a:	d8c9      	bhi.n	8001ff0 <encrypt+0x160>
	}

	printc(MinDelay,"Encrypted data String: ");
 800205c:	4911      	ldr	r1, [pc, #68]	@ (80020a4 <encrypt+0x214>)
 800205e:	200a      	movs	r0, #10
 8002060:	f7ff fcda 	bl	8001a18 <printc>
	for (int i = 0; i < string_length; i++) {
 8002064:	2300      	movs	r3, #0
 8002066:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002068:	e00b      	b.n	8002082 <encrypt+0x1f2>
		printc(MinDelay,"%02X", En_data[i]);
 800206a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800206c:	68ba      	ldr	r2, [r7, #8]
 800206e:	4413      	add	r3, r2
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	461a      	mov	r2, r3
 8002074:	490c      	ldr	r1, [pc, #48]	@ (80020a8 <encrypt+0x218>)
 8002076:	200a      	movs	r0, #10
 8002078:	f7ff fcce 	bl	8001a18 <printc>
	for (int i = 0; i < string_length; i++) {
 800207c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800207e:	3301      	adds	r3, #1
 8002080:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002082:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002084:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002086:	429a      	cmp	r2, r3
 8002088:	d8ef      	bhi.n	800206a <encrypt+0x1da>
	}
	printc(MinDelay,"\n\r");
 800208a:	4908      	ldr	r1, [pc, #32]	@ (80020ac <encrypt+0x21c>)
 800208c:	200a      	movs	r0, #10
 800208e:	f7ff fcc3 	bl	8001a18 <printc>
	return string_length;
 8002092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002094:	46b5      	mov	sp, r6
}
 8002096:	4618      	mov	r0, r3
 8002098:	373c      	adds	r7, #60	@ 0x3c
 800209a:	46bd      	mov	sp, r7
 800209c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80020a0:	20013938 	.word	0x20013938
 80020a4:	08022644 	.word	0x08022644
 80020a8:	0802265c 	.word	0x0802265c
 80020ac:	08022664 	.word	0x08022664

080020b0 <Decrypt>:

/*******************De-cryption Function************************/

void Decrypt(char *Data, uint8_t *De_data, int Key) {
 80020b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020b4:	b097      	sub	sp, #92	@ 0x5c
 80020b6:	af02      	add	r7, sp, #8
 80020b8:	6278      	str	r0, [r7, #36]	@ 0x24
 80020ba:	6239      	str	r1, [r7, #32]
 80020bc:	61fa      	str	r2, [r7, #28]
 80020be:	466b      	mov	r3, sp
 80020c0:	461e      	mov	r6, r3
	printc(100,"%s\n",Data);
 80020c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020c4:	4990      	ldr	r1, [pc, #576]	@ (8002308 <Decrypt+0x258>)
 80020c6:	2064      	movs	r0, #100	@ 0x64
 80020c8:	f7ff fca6 	bl	8001a18 <printc>
	size_t string_length = strlen(Data);
 80020cc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80020ce:	f7fe f8e9 	bl	80002a4 <strlen>
 80020d2:	6478      	str	r0, [r7, #68]	@ 0x44
	size_t num_uint32 = ((string_length /2) + 3) / 4;
 80020d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020d6:	085b      	lsrs	r3, r3, #1
 80020d8:	3303      	adds	r3, #3
 80020da:	089b      	lsrs	r3, r3, #2
 80020dc:	643b      	str	r3, [r7, #64]	@ 0x40
	uint8_t E_Data[string_length/2];
 80020de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020e0:	0859      	lsrs	r1, r3, #1
 80020e2:	460b      	mov	r3, r1
 80020e4:	3b01      	subs	r3, #1
 80020e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80020e8:	2300      	movs	r3, #0
 80020ea:	460c      	mov	r4, r1
 80020ec:	461d      	mov	r5, r3
 80020ee:	f04f 0200 	mov.w	r2, #0
 80020f2:	f04f 0300 	mov.w	r3, #0
 80020f6:	00eb      	lsls	r3, r5, #3
 80020f8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80020fc:	00e2      	lsls	r2, r4, #3
 80020fe:	2300      	movs	r3, #0
 8002100:	6139      	str	r1, [r7, #16]
 8002102:	617b      	str	r3, [r7, #20]
 8002104:	f04f 0200 	mov.w	r2, #0
 8002108:	f04f 0300 	mov.w	r3, #0
 800210c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002110:	4628      	mov	r0, r5
 8002112:	00c3      	lsls	r3, r0, #3
 8002114:	4620      	mov	r0, r4
 8002116:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800211a:	4620      	mov	r0, r4
 800211c:	00c2      	lsls	r2, r0, #3
 800211e:	1dcb      	adds	r3, r1, #7
 8002120:	08db      	lsrs	r3, r3, #3
 8002122:	00db      	lsls	r3, r3, #3
 8002124:	ebad 0d03 	sub.w	sp, sp, r3
 8002128:	ab02      	add	r3, sp, #8
 800212a:	3300      	adds	r3, #0
 800212c:	63bb      	str	r3, [r7, #56]	@ 0x38
	ReadF_Loc(2, Key);
 800212e:	69f9      	ldr	r1, [r7, #28]
 8002130:	2002      	movs	r0, #2
 8002132:	f018 fc19 	bl	801a968 <ReadF_Loc>
	cKey_update(Key - 1);
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	3b01      	subs	r3, #1
 800213a:	4618      	mov	r0, r3
 800213c:	f001 fc5c 	bl	80039f8 <cKey_update>
	// Convert Data to uint32_t array
 	string_to_hex_array(Data, E_Data);
 8002140:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002142:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002144:	f000 fa4c 	bl	80025e0 <string_to_hex_array>
	uint32_t encryptedStr[num_uint32];
 8002148:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800214a:	460b      	mov	r3, r1
 800214c:	3b01      	subs	r3, #1
 800214e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002150:	2300      	movs	r3, #0
 8002152:	60b9      	str	r1, [r7, #8]
 8002154:	60fb      	str	r3, [r7, #12]
 8002156:	f04f 0200 	mov.w	r2, #0
 800215a:	f04f 0300 	mov.w	r3, #0
 800215e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002162:	4628      	mov	r0, r5
 8002164:	0143      	lsls	r3, r0, #5
 8002166:	4620      	mov	r0, r4
 8002168:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800216c:	4620      	mov	r0, r4
 800216e:	0142      	lsls	r2, r0, #5
 8002170:	2300      	movs	r3, #0
 8002172:	6039      	str	r1, [r7, #0]
 8002174:	607b      	str	r3, [r7, #4]
 8002176:	f04f 0200 	mov.w	r2, #0
 800217a:	f04f 0300 	mov.w	r3, #0
 800217e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002182:	4628      	mov	r0, r5
 8002184:	0143      	lsls	r3, r0, #5
 8002186:	4620      	mov	r0, r4
 8002188:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800218c:	4620      	mov	r0, r4
 800218e:	0142      	lsls	r2, r0, #5
 8002190:	008b      	lsls	r3, r1, #2
 8002192:	3307      	adds	r3, #7
 8002194:	08db      	lsrs	r3, r3, #3
 8002196:	00db      	lsls	r3, r3, #3
 8002198:	ebad 0d03 	sub.w	sp, sp, r3
 800219c:	ab02      	add	r3, sp, #8
 800219e:	3303      	adds	r3, #3
 80021a0:	089b      	lsrs	r3, r3, #2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	633b      	str	r3, [r7, #48]	@ 0x30
	memset(encryptedStr,0,num_uint32*sizeof(uint32_t));
 80021a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	461a      	mov	r2, r3
 80021ac:	2100      	movs	r1, #0
 80021ae:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80021b0:	f01c fe3e 	bl	801ee30 <memset>
	for (int i = 0; i < num_uint32; i++) {
 80021b4:	2300      	movs	r3, #0
 80021b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80021b8:	e020      	b.n	80021fc <Decrypt+0x14c>
		encryptedStr[i] = (uint32_t) (E_Data[i * 4 + 0]) << 24
 80021ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80021c0:	5cd3      	ldrb	r3, [r2, r3]
 80021c2:	061a      	lsls	r2, r3, #24
				| (uint32_t) (E_Data[i * 4 + 1]) << 16
 80021c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	3301      	adds	r3, #1
 80021ca:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80021cc:	5ccb      	ldrb	r3, [r1, r3]
 80021ce:	041b      	lsls	r3, r3, #16
 80021d0:	431a      	orrs	r2, r3
				| (uint32_t) (E_Data[i * 4 + 2]) << 8
 80021d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	3302      	adds	r3, #2
 80021d8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80021da:	5ccb      	ldrb	r3, [r1, r3]
 80021dc:	021b      	lsls	r3, r3, #8
 80021de:	4313      	orrs	r3, r2
				| (uint32_t) (E_Data[i * 4 + 3]);
 80021e0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80021e2:	0092      	lsls	r2, r2, #2
 80021e4:	3203      	adds	r2, #3
 80021e6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80021e8:	5c8a      	ldrb	r2, [r1, r2]
 80021ea:	ea43 0102 	orr.w	r1, r3, r2
		encryptedStr[i] = (uint32_t) (E_Data[i * 4 + 0]) << 24
 80021ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021f0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80021f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (int i = 0; i < num_uint32; i++) {
 80021f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80021f8:	3301      	adds	r3, #1
 80021fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80021fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80021fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002200:	429a      	cmp	r2, r3
 8002202:	d8da      	bhi.n	80021ba <Decrypt+0x10a>
	}

	// Decrypt the string
	uint32_t decryptedStr[num_uint32]; // Declaration
 8002204:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002206:	460b      	mov	r3, r1
 8002208:	3b01      	subs	r3, #1
 800220a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800220c:	2300      	movs	r3, #0
 800220e:	468a      	mov	sl, r1
 8002210:	469b      	mov	fp, r3
 8002212:	f04f 0200 	mov.w	r2, #0
 8002216:	f04f 0300 	mov.w	r3, #0
 800221a:	ea4f 134b 	mov.w	r3, fp, lsl #5
 800221e:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8002222:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8002226:	2300      	movs	r3, #0
 8002228:	4688      	mov	r8, r1
 800222a:	4699      	mov	r9, r3
 800222c:	f04f 0200 	mov.w	r2, #0
 8002230:	f04f 0300 	mov.w	r3, #0
 8002234:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8002238:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 800223c:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8002240:	008b      	lsls	r3, r1, #2
 8002242:	3307      	adds	r3, #7
 8002244:	08db      	lsrs	r3, r3, #3
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	ebad 0d03 	sub.w	sp, sp, r3
 800224c:	ab02      	add	r3, sp, #8
 800224e:	3303      	adds	r3, #3
 8002250:	089b      	lsrs	r3, r3, #2
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	62bb      	str	r3, [r7, #40]	@ 0x28
	memset(decryptedStr, 0, num_uint32 * sizeof(uint32_t)); // Initialization
 8002256:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	461a      	mov	r2, r3
 800225c:	2100      	movs	r1, #0
 800225e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002260:	f01c fde6 	bl	801ee30 <memset>
	HAL_CRYP_Decrypt(&hcryp, encryptedStr, num_uint32, decryptedStr, 2000);
 8002264:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002266:	b29a      	uxth	r2, r3
 8002268:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800226c:	9300      	str	r3, [sp, #0]
 800226e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002270:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002272:	4826      	ldr	r0, [pc, #152]	@ (800230c <Decrypt+0x25c>)
 8002274:	f005 fc92 	bl	8007b9c <HAL_CRYP_Decrypt>

	// Convert decryptedStr to char array
	for (int i = 0; i < num_uint32; i++) {
 8002278:	2300      	movs	r3, #0
 800227a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800227c:	e031      	b.n	80022e2 <Decrypt+0x232>
		// Since char is 8 bits and uint32_t is 32 bits,
		// we can use bitwise AND operations to extract
		// individual bytes from the uint32_t and store them in De_data
		De_data[i * 4 + 0] = (decryptedStr[i] >> 24) & 0xFF;
 800227e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002280:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002282:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002286:	0e1a      	lsrs	r2, r3, #24
 8002288:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	4619      	mov	r1, r3
 800228e:	6a3b      	ldr	r3, [r7, #32]
 8002290:	440b      	add	r3, r1
 8002292:	b2d2      	uxtb	r2, r2
 8002294:	701a      	strb	r2, [r3, #0]
		De_data[i * 4 + 1] = (decryptedStr[i] >> 16) & 0xFF;
 8002296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002298:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800229a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800229e:	0c19      	lsrs	r1, r3, #16
 80022a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	3301      	adds	r3, #1
 80022a6:	6a3a      	ldr	r2, [r7, #32]
 80022a8:	4413      	add	r3, r2
 80022aa:	b2ca      	uxtb	r2, r1
 80022ac:	701a      	strb	r2, [r3, #0]
		De_data[i * 4 + 2] = (decryptedStr[i] >> 8) & 0xFF;
 80022ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80022b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022b6:	0a19      	lsrs	r1, r3, #8
 80022b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	3302      	adds	r3, #2
 80022be:	6a3a      	ldr	r2, [r7, #32]
 80022c0:	4413      	add	r3, r2
 80022c2:	b2ca      	uxtb	r2, r1
 80022c4:	701a      	strb	r2, [r3, #0]
		De_data[i * 4 + 3] = decryptedStr[i] & 0xFF;
 80022c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80022ca:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80022ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	3303      	adds	r3, #3
 80022d4:	6a3a      	ldr	r2, [r7, #32]
 80022d6:	4413      	add	r3, r2
 80022d8:	b2ca      	uxtb	r2, r1
 80022da:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < num_uint32; i++) {
 80022dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80022de:	3301      	adds	r3, #1
 80022e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80022e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80022e4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d8c9      	bhi.n	800227e <Decrypt+0x1ce>
	}
	string_length = strlen(De_data);
 80022ea:	6a38      	ldr	r0, [r7, #32]
 80022ec:	f7fd ffda 	bl	80002a4 <strlen>
 80022f0:	6478      	str	r0, [r7, #68]	@ 0x44
	// Null-terminate the decrypted string to print it properly
	De_data[string_length] = '\0';
 80022f2:	6a3a      	ldr	r2, [r7, #32]
 80022f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022f6:	4413      	add	r3, r2
 80022f8:	2200      	movs	r2, #0
 80022fa:	701a      	strb	r2, [r3, #0]
 80022fc:	46b5      	mov	sp, r6
//	printc(MinDelay,"Decrypted data String: ");
////	for (int i = 0; i < string_length; i++) {
//	print(1000,De_data,sizeof(De_data));
////	}
//	printc(MinDelay,"\n\r");
}
 80022fe:	bf00      	nop
 8002300:	3754      	adds	r7, #84	@ 0x54
 8002302:	46bd      	mov	sp, r7
 8002304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002308:	08022668 	.word	0x08022668
 800230c:	20013938 	.word	0x20013938

08002310 <k_Decrypt>:
void k_Decrypt(char *Data, uint8_t *De_data, int Key) {
 8002310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002314:	b097      	sub	sp, #92	@ 0x5c
 8002316:	af02      	add	r7, sp, #8
 8002318:	6278      	str	r0, [r7, #36]	@ 0x24
 800231a:	6239      	str	r1, [r7, #32]
 800231c:	61fa      	str	r2, [r7, #28]
 800231e:	466b      	mov	r3, sp
 8002320:	461e      	mov	r6, r3
	printc(100,"%s\n",Data);
 8002322:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002324:	4995      	ldr	r1, [pc, #596]	@ (800257c <k_Decrypt+0x26c>)
 8002326:	2064      	movs	r0, #100	@ 0x64
 8002328:	f7ff fb76 	bl	8001a18 <printc>
	size_t string_length = strlen(Data);
 800232c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800232e:	f7fd ffb9 	bl	80002a4 <strlen>
 8002332:	6478      	str	r0, [r7, #68]	@ 0x44
	size_t num_uint32 = ((string_length /2) + 3) / 4;
 8002334:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002336:	085b      	lsrs	r3, r3, #1
 8002338:	3303      	adds	r3, #3
 800233a:	089b      	lsrs	r3, r3, #2
 800233c:	643b      	str	r3, [r7, #64]	@ 0x40
	uint8_t E_Data[string_length/2];
 800233e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002340:	0859      	lsrs	r1, r3, #1
 8002342:	460b      	mov	r3, r1
 8002344:	3b01      	subs	r3, #1
 8002346:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002348:	2300      	movs	r3, #0
 800234a:	460c      	mov	r4, r1
 800234c:	461d      	mov	r5, r3
 800234e:	f04f 0200 	mov.w	r2, #0
 8002352:	f04f 0300 	mov.w	r3, #0
 8002356:	00eb      	lsls	r3, r5, #3
 8002358:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800235c:	00e2      	lsls	r2, r4, #3
 800235e:	2300      	movs	r3, #0
 8002360:	6139      	str	r1, [r7, #16]
 8002362:	617b      	str	r3, [r7, #20]
 8002364:	f04f 0200 	mov.w	r2, #0
 8002368:	f04f 0300 	mov.w	r3, #0
 800236c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002370:	4628      	mov	r0, r5
 8002372:	00c3      	lsls	r3, r0, #3
 8002374:	4620      	mov	r0, r4
 8002376:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800237a:	4620      	mov	r0, r4
 800237c:	00c2      	lsls	r2, r0, #3
 800237e:	1dcb      	adds	r3, r1, #7
 8002380:	08db      	lsrs	r3, r3, #3
 8002382:	00db      	lsls	r3, r3, #3
 8002384:	ebad 0d03 	sub.w	sp, sp, r3
 8002388:	ab02      	add	r3, sp, #8
 800238a:	3300      	adds	r3, #0
 800238c:	63bb      	str	r3, [r7, #56]	@ 0x38
	sKey_update(Key - 1);
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	3b01      	subs	r3, #1
 8002392:	4618      	mov	r0, r3
 8002394:	f001 fb08 	bl	80039a8 <sKey_update>
	// Convert Data to uint32_t array
 	string_to_hex_array(Data, E_Data);
 8002398:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800239a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800239c:	f000 f920 	bl	80025e0 <string_to_hex_array>
	uint32_t encryptedStr[num_uint32];
 80023a0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80023a2:	460b      	mov	r3, r1
 80023a4:	3b01      	subs	r3, #1
 80023a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80023a8:	2300      	movs	r3, #0
 80023aa:	60b9      	str	r1, [r7, #8]
 80023ac:	60fb      	str	r3, [r7, #12]
 80023ae:	f04f 0200 	mov.w	r2, #0
 80023b2:	f04f 0300 	mov.w	r3, #0
 80023b6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80023ba:	4628      	mov	r0, r5
 80023bc:	0143      	lsls	r3, r0, #5
 80023be:	4620      	mov	r0, r4
 80023c0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80023c4:	4620      	mov	r0, r4
 80023c6:	0142      	lsls	r2, r0, #5
 80023c8:	2300      	movs	r3, #0
 80023ca:	6039      	str	r1, [r7, #0]
 80023cc:	607b      	str	r3, [r7, #4]
 80023ce:	f04f 0200 	mov.w	r2, #0
 80023d2:	f04f 0300 	mov.w	r3, #0
 80023d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023da:	4628      	mov	r0, r5
 80023dc:	0143      	lsls	r3, r0, #5
 80023de:	4620      	mov	r0, r4
 80023e0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80023e4:	4620      	mov	r0, r4
 80023e6:	0142      	lsls	r2, r0, #5
 80023e8:	008b      	lsls	r3, r1, #2
 80023ea:	3307      	adds	r3, #7
 80023ec:	08db      	lsrs	r3, r3, #3
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	ebad 0d03 	sub.w	sp, sp, r3
 80023f4:	ab02      	add	r3, sp, #8
 80023f6:	3303      	adds	r3, #3
 80023f8:	089b      	lsrs	r3, r3, #2
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	633b      	str	r3, [r7, #48]	@ 0x30
	memset(encryptedStr,0,num_uint32*sizeof(uint32_t));
 80023fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	461a      	mov	r2, r3
 8002404:	2100      	movs	r1, #0
 8002406:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002408:	f01c fd12 	bl	801ee30 <memset>
	for (int i = 0; i < num_uint32; i++) {
 800240c:	2300      	movs	r3, #0
 800240e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002410:	e020      	b.n	8002454 <k_Decrypt+0x144>
		encryptedStr[i] = (uint32_t) (E_Data[i * 4 + 0]) << 24
 8002412:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002418:	5cd3      	ldrb	r3, [r2, r3]
 800241a:	061a      	lsls	r2, r3, #24
				| (uint32_t) (E_Data[i * 4 + 1]) << 16
 800241c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	3301      	adds	r3, #1
 8002422:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002424:	5ccb      	ldrb	r3, [r1, r3]
 8002426:	041b      	lsls	r3, r3, #16
 8002428:	431a      	orrs	r2, r3
				| (uint32_t) (E_Data[i * 4 + 2]) << 8
 800242a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	3302      	adds	r3, #2
 8002430:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002432:	5ccb      	ldrb	r3, [r1, r3]
 8002434:	021b      	lsls	r3, r3, #8
 8002436:	4313      	orrs	r3, r2
				| (uint32_t) (E_Data[i * 4 + 3]);
 8002438:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800243a:	0092      	lsls	r2, r2, #2
 800243c:	3203      	adds	r2, #3
 800243e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002440:	5c8a      	ldrb	r2, [r1, r2]
 8002442:	ea43 0102 	orr.w	r1, r3, r2
		encryptedStr[i] = (uint32_t) (E_Data[i * 4 + 0]) << 24
 8002446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002448:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800244a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (int i = 0; i < num_uint32; i++) {
 800244e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002450:	3301      	adds	r3, #1
 8002452:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002454:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002456:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002458:	429a      	cmp	r2, r3
 800245a:	d8da      	bhi.n	8002412 <k_Decrypt+0x102>
	}

	// Decrypt the string
	uint32_t decryptedStr[num_uint32]; // Declaration
 800245c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800245e:	460b      	mov	r3, r1
 8002460:	3b01      	subs	r3, #1
 8002462:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002464:	2300      	movs	r3, #0
 8002466:	468a      	mov	sl, r1
 8002468:	469b      	mov	fp, r3
 800246a:	f04f 0200 	mov.w	r2, #0
 800246e:	f04f 0300 	mov.w	r3, #0
 8002472:	ea4f 134b 	mov.w	r3, fp, lsl #5
 8002476:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 800247a:	ea4f 124a 	mov.w	r2, sl, lsl #5
 800247e:	2300      	movs	r3, #0
 8002480:	4688      	mov	r8, r1
 8002482:	4699      	mov	r9, r3
 8002484:	f04f 0200 	mov.w	r2, #0
 8002488:	f04f 0300 	mov.w	r3, #0
 800248c:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8002490:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8002494:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8002498:	008b      	lsls	r3, r1, #2
 800249a:	3307      	adds	r3, #7
 800249c:	08db      	lsrs	r3, r3, #3
 800249e:	00db      	lsls	r3, r3, #3
 80024a0:	ebad 0d03 	sub.w	sp, sp, r3
 80024a4:	ab02      	add	r3, sp, #8
 80024a6:	3303      	adds	r3, #3
 80024a8:	089b      	lsrs	r3, r3, #2
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	62bb      	str	r3, [r7, #40]	@ 0x28
	memset(decryptedStr, 0, num_uint32 * sizeof(uint32_t)); // Initialization
 80024ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	461a      	mov	r2, r3
 80024b4:	2100      	movs	r1, #0
 80024b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80024b8:	f01c fcba 	bl	801ee30 <memset>
	HAL_CRYP_Decrypt(&hcryp, encryptedStr, num_uint32, decryptedStr, 2000);
 80024bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024be:	b29a      	uxth	r2, r3
 80024c0:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80024c4:	9300      	str	r3, [sp, #0]
 80024c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024c8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80024ca:	482d      	ldr	r0, [pc, #180]	@ (8002580 <k_Decrypt+0x270>)
 80024cc:	f005 fb66 	bl	8007b9c <HAL_CRYP_Decrypt>

	// Convert decryptedStr to char array
	for (int i = 0; i < num_uint32; i++) {
 80024d0:	2300      	movs	r3, #0
 80024d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80024d4:	e031      	b.n	800253a <k_Decrypt+0x22a>
		// Since char is 8 bits and uint32_t is 32 bits,
		// we can use bitwise AND operations to extract
		// individual bytes from the uint32_t and store them in De_data
		De_data[i * 4 + 0] = (decryptedStr[i] >> 24) & 0xFF;
 80024d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80024da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024de:	0e1a      	lsrs	r2, r3, #24
 80024e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	4619      	mov	r1, r3
 80024e6:	6a3b      	ldr	r3, [r7, #32]
 80024e8:	440b      	add	r3, r1
 80024ea:	b2d2      	uxtb	r2, r2
 80024ec:	701a      	strb	r2, [r3, #0]
		De_data[i * 4 + 1] = (decryptedStr[i] >> 16) & 0xFF;
 80024ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80024f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024f6:	0c19      	lsrs	r1, r3, #16
 80024f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	3301      	adds	r3, #1
 80024fe:	6a3a      	ldr	r2, [r7, #32]
 8002500:	4413      	add	r3, r2
 8002502:	b2ca      	uxtb	r2, r1
 8002504:	701a      	strb	r2, [r3, #0]
		De_data[i * 4 + 2] = (decryptedStr[i] >> 8) & 0xFF;
 8002506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002508:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800250a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800250e:	0a19      	lsrs	r1, r3, #8
 8002510:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	3302      	adds	r3, #2
 8002516:	6a3a      	ldr	r2, [r7, #32]
 8002518:	4413      	add	r3, r2
 800251a:	b2ca      	uxtb	r2, r1
 800251c:	701a      	strb	r2, [r3, #0]
		De_data[i * 4 + 3] = decryptedStr[i] & 0xFF;
 800251e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002520:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002522:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002526:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	3303      	adds	r3, #3
 800252c:	6a3a      	ldr	r2, [r7, #32]
 800252e:	4413      	add	r3, r2
 8002530:	b2ca      	uxtb	r2, r1
 8002532:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < num_uint32; i++) {
 8002534:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002536:	3301      	adds	r3, #1
 8002538:	64bb      	str	r3, [r7, #72]	@ 0x48
 800253a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800253c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800253e:	429a      	cmp	r2, r3
 8002540:	d8c9      	bhi.n	80024d6 <k_Decrypt+0x1c6>
	}
	string_length = strlen(De_data);
 8002542:	6a38      	ldr	r0, [r7, #32]
 8002544:	f7fd feae 	bl	80002a4 <strlen>
 8002548:	6478      	str	r0, [r7, #68]	@ 0x44
	// Null-terminate the decrypted string to print it properly
	De_data[string_length] = '\0';
 800254a:	6a3a      	ldr	r2, [r7, #32]
 800254c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800254e:	4413      	add	r3, r2
 8002550:	2200      	movs	r2, #0
 8002552:	701a      	strb	r2, [r3, #0]

//	 Print the decrypted string
	printc(MinDelay,"Decrypted data String: ");
 8002554:	490b      	ldr	r1, [pc, #44]	@ (8002584 <k_Decrypt+0x274>)
 8002556:	200a      	movs	r0, #10
 8002558:	f7ff fa5e 	bl	8001a18 <printc>
//	for (int i = 0; i < string_length; i++) {
	printc(MinDelay,"%s", De_data);
 800255c:	6a3a      	ldr	r2, [r7, #32]
 800255e:	490a      	ldr	r1, [pc, #40]	@ (8002588 <k_Decrypt+0x278>)
 8002560:	200a      	movs	r0, #10
 8002562:	f7ff fa59 	bl	8001a18 <printc>
//	}
	printc(MinDelay,"\n\r");
 8002566:	4909      	ldr	r1, [pc, #36]	@ (800258c <k_Decrypt+0x27c>)
 8002568:	200a      	movs	r0, #10
 800256a:	f7ff fa55 	bl	8001a18 <printc>
 800256e:	46b5      	mov	sp, r6
}
 8002570:	bf00      	nop
 8002572:	3754      	adds	r7, #84	@ 0x54
 8002574:	46bd      	mov	sp, r7
 8002576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800257a:	bf00      	nop
 800257c:	08022668 	.word	0x08022668
 8002580:	20013938 	.word	0x20013938
 8002584:	0802266c 	.word	0x0802266c
 8002588:	08022684 	.word	0x08022684
 800258c:	08022664 	.word	0x08022664

08002590 <addPadding>:
		dataBuffer++;
	}
	return checksum;
}

void addPadding(uint8_t *dataBody, size_t num_elements) {
 8002590:	b480      	push	{r7}
 8002592:	b085      	sub	sp, #20
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
	uint8_t padding_size = 16 - (num_elements % 16);
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	b2db      	uxtb	r3, r3
 800259e:	f003 030f 	and.w	r3, r3, #15
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	f1c3 0310 	rsb	r3, r3, #16
 80025a8:	72fb      	strb	r3, [r7, #11]
	if (padding_size < 16) {
 80025aa:	7afb      	ldrb	r3, [r7, #11]
 80025ac:	2b0f      	cmp	r3, #15
 80025ae:	d810      	bhi.n	80025d2 <addPadding+0x42>
		for (size_t i = num_elements; i < num_elements + padding_size; i++) {
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	60fb      	str	r3, [r7, #12]
 80025b4:	e007      	b.n	80025c6 <addPadding+0x36>
			dataBody[i] = padding_size;
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	4413      	add	r3, r2
 80025bc:	7afa      	ldrb	r2, [r7, #11]
 80025be:	701a      	strb	r2, [r3, #0]
		for (size_t i = num_elements; i < num_elements + padding_size; i++) {
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	3301      	adds	r3, #1
 80025c4:	60fb      	str	r3, [r7, #12]
 80025c6:	7afa      	ldrb	r2, [r7, #11]
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	4413      	add	r3, r2
 80025cc:	68fa      	ldr	r2, [r7, #12]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d3f1      	bcc.n	80025b6 <addPadding+0x26>
		}
	}
}
 80025d2:	bf00      	nop
 80025d4:	3714      	adds	r7, #20
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
	...

080025e0 <string_to_hex_array>:

void string_to_hex_array(const char hex_string [],uint8_t hex_array[]) {
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b086      	sub	sp, #24
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]
	// Calculate the length of the hex string
	size_t hex_string_length = strlen(hex_string);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f7fd fe5a 	bl	80002a4 <strlen>
 80025f0:	6138      	str	r0, [r7, #16]
	size_t array_length1;

	// Check if the length is even
	if (hex_string_length % 2 != 0) {
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	f003 0301 	and.w	r3, r3, #1
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d008      	beq.n	800260e <string_to_hex_array+0x2e>
		fprintf(stderr, "Input string length must be even.\n");
 80025fc:	4b11      	ldr	r3, [pc, #68]	@ (8002644 <string_to_hex_array+0x64>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	2222      	movs	r2, #34	@ 0x22
 8002604:	2101      	movs	r1, #1
 8002606:	4810      	ldr	r0, [pc, #64]	@ (8002648 <string_to_hex_array+0x68>)
 8002608:	f01c fa74 	bl	801eaf4 <fwrite>
		return NULL;
 800260c:	e017      	b.n	800263e <string_to_hex_array+0x5e>
	}

	// Calculate the length of the resulting array
	array_length1 = hex_string_length / 2;
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	085b      	lsrs	r3, r3, #1
 8002612:	60fb      	str	r3, [r7, #12]

	// Allocate memory for the array

	// Convert the hex string to hex values and store in the array
	for (size_t i = 0; i < array_length1; ++i) {
 8002614:	2300      	movs	r3, #0
 8002616:	617b      	str	r3, [r7, #20]
 8002618:	e00d      	b.n	8002636 <string_to_hex_array+0x56>
		sscanf(hex_string + 2 * i, "%2X", &hex_array[i]);
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	18d0      	adds	r0, r2, r3
 8002622:	683a      	ldr	r2, [r7, #0]
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	4413      	add	r3, r2
 8002628:	461a      	mov	r2, r3
 800262a:	4908      	ldr	r1, [pc, #32]	@ (800264c <string_to_hex_array+0x6c>)
 800262c:	f01c fac4 	bl	801ebb8 <siscanf>
	for (size_t i = 0; i < array_length1; ++i) {
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	3301      	adds	r3, #1
 8002634:	617b      	str	r3, [r7, #20]
 8002636:	697a      	ldr	r2, [r7, #20]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	429a      	cmp	r2, r3
 800263c:	d3ed      	bcc.n	800261a <string_to_hex_array+0x3a>
	}
}
 800263e:	3718      	adds	r7, #24
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	20000224 	.word	0x20000224
 8002648:	08022688 	.word	0x08022688
 800264c:	080226ac 	.word	0x080226ac

08002650 <MX_FLASH_Init>:

/* USER CODE END 0 */

/* FLASH init function */
void MX_FLASH_Init(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b090      	sub	sp, #64	@ 0x40
 8002654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FLASH_Init 0 */

  /* USER CODE END FLASH_Init 0 */

  FLASH_OBProgramInitTypeDef pOBInit = {0};
 8002656:	1d3b      	adds	r3, r7, #4
 8002658:	223c      	movs	r2, #60	@ 0x3c
 800265a:	2100      	movs	r1, #0
 800265c:	4618      	mov	r0, r3
 800265e:	f01c fbe7 	bl	801ee30 <memset>

  /* USER CODE BEGIN FLASH_Init 1 */

  /* USER CODE END FLASH_Init 1 */
  if (HAL_FLASH_Unlock() != HAL_OK)
 8002662:	f008 fd45 	bl	800b0f0 <HAL_FLASH_Unlock>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d001      	beq.n	8002670 <MX_FLASH_Init+0x20>
  {
    Error_Handler();
 800266c:	f002 f887 	bl	800477e <Error_Handler>
  }

  /* Option Bytes settings */

  if (HAL_FLASH_OB_Unlock() != HAL_OK)
 8002670:	f008 fd80 	bl	800b174 <HAL_FLASH_OB_Unlock>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <MX_FLASH_Init+0x2e>
  {
    Error_Handler();
 800267a:	f002 f880 	bl	800477e <Error_Handler>
   //!!! HAL_FLASHEx_OBProgram is commented because some parameters are missing
  //pOBInit.OptionType = OPTIONBYTE_PROD_STATE|OPTIONBYTE_USER;
  //pOBInit.USERType = ;
  //pOBInit.USERConfig = ;
    //HAL_FLASHEx_OBProgram(&pOBInit);
  if (HAL_FLASH_OB_Lock() != HAL_OK)
 800267e:	f008 fd9b 	bl	800b1b8 <HAL_FLASH_OB_Lock>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <MX_FLASH_Init+0x3c>
  {
    Error_Handler();
 8002688:	f002 f879 	bl	800477e <Error_Handler>
  }
  if (HAL_FLASH_Lock() != HAL_OK)
 800268c:	f008 fd56 	bl	800b13c <HAL_FLASH_Lock>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <MX_FLASH_Init+0x4a>
  {
    Error_Handler();
 8002696:	f002 f872 	bl	800477e <Error_Handler>

  /* USER CODE BEGIN FLASH_Init 2 */

  /* USER CODE END FLASH_Init 2 */

}
 800269a:	bf00      	nop
 800269c:	3740      	adds	r7, #64	@ 0x40
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
	...

080026a4 <init>:
		"NA", temper = 'C';
extern uint64_t CP, CD;
char CP_Data[8] = { 0 };
char tmpSplit[5][100];
char PHnum[10] = { 0 };
void init() {
 80026a4:	b5b0      	push	{r4, r5, r7, lr}
 80026a6:	b088      	sub	sp, #32
 80026a8:	af02      	add	r7, sp, #8
	init_GPSData(&L86Data);
 80026aa:	483b      	ldr	r0, [pc, #236]	@ (8002798 <init+0xf4>)
 80026ac:	f019 f964 	bl	801b978 <init_GPSData>
	initRTC(&hrtc);
 80026b0:	483a      	ldr	r0, [pc, #232]	@ (800279c <init+0xf8>)
 80026b2:	f018 fbc3 	bl	801ae3c <initRTC>
	setupPrintUart(&huart6, true);
 80026b6:	2101      	movs	r1, #1
 80026b8:	4839      	ldr	r0, [pc, #228]	@ (80027a0 <init+0xfc>)
 80026ba:	f7ff f993 	bl	80019e4 <setupPrintUart>
	clear_RConfiguration();
 80026be:	f015 fabf 	bl	8017c40 <clear_RConfiguration>
	getAllConfig();
 80026c2:	f016 fd0b 	bl	80190dc <getAllConfig>
	SGET_LAT(&latHitory);
 80026c6:	4837      	ldr	r0, [pc, #220]	@ (80027a4 <init+0x100>)
 80026c8:	f015 ffbe 	bl	8018648 <SGET_LAT>
	SGET_LON(&lonHistory);
 80026cc:	4836      	ldr	r0, [pc, #216]	@ (80027a8 <init+0x104>)
 80026ce:	f015 ffcf 	bl	8018670 <SGET_LON>
	initializeStack(&dataQueue);
 80026d2:	4836      	ldr	r0, [pc, #216]	@ (80027ac <init+0x108>)
 80026d4:	f7ff fb32 	bl	8001d3c <initializeStack>
	initializeStack(&packetHistoryQueue);
 80026d8:	4835      	ldr	r0, [pc, #212]	@ (80027b0 <init+0x10c>)
 80026da:	f7ff fb2f 	bl	8001d3c <initializeStack>
	HAL_TIM_Base_Start_IT(&htim6);
 80026de:	4835      	ldr	r0, [pc, #212]	@ (80027b4 <init+0x110>)
 80026e0:	f00f fe22 	bl	8012328 <HAL_TIM_Base_Start_IT>
	initEvb(&hadc1);
 80026e4:	4834      	ldr	r0, [pc, #208]	@ (80027b8 <init+0x114>)
 80026e6:	f018 fab3 	bl	801ac50 <initEvb>
	initIvb(&hadc2);
 80026ea:	4834      	ldr	r0, [pc, #208]	@ (80027bc <init+0x118>)
 80026ec:	f018 fac0 	bl	801ac70 <initIvb>

	printc(MinDelay, "\nTML Set Up Started.....\n\r Version %s",
 80026f0:	4a33      	ldr	r2, [pc, #204]	@ (80027c0 <init+0x11c>)
 80026f2:	4934      	ldr	r1, [pc, #208]	@ (80027c4 <init+0x120>)
 80026f4:	200a      	movs	r0, #10
 80026f6:	f7ff f98f 	bl	8001a18 <printc>
			Firmware_Version);
	resetEC200: if (setupEc200(&huart1)) {
 80026fa:	4833      	ldr	r0, [pc, #204]	@ (80027c8 <init+0x124>)
 80026fc:	f7ff f8c6 	bl	800188c <setupEc200>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d014      	beq.n	8002730 <init+0x8c>
		printc(MinDelay, "SetupEc200Done\n");
 8002706:	4931      	ldr	r1, [pc, #196]	@ (80027cc <init+0x128>)
 8002708:	200a      	movs	r0, #10
 800270a:	f7ff f985 	bl	8001a18 <printc>
	} else {
		printc(MinDelay, "SetupEc200 Failed\n");
		goto resetEC200;
	}
	SET_FOTA_SIZE("155");
 800270e:	4830      	ldr	r0, [pc, #192]	@ (80027d0 <init+0x12c>)
 8002710:	f016 fc64 	bl	8018fdc <SET_FOTA_SIZE>

	SET_FOTA_UPDATE("5.0.9");
 8002714:	482f      	ldr	r0, [pc, #188]	@ (80027d4 <init+0x130>)
 8002716:	f016 fca5 	bl	8019064 <SET_FOTA_UPDATE>
//	updateStatus = true;
//		SET_SKEY3("1D68A17E0EE8525CC9876BD573C9CDCC");
//		SET_SKEY2("967B9E42EC8F3E5F3D2DE0A5003F9129");
//		SET_SKEY1("0F402D78266379087F7C1E0A02AD1D6D");

	SMS_Init();
 800271a:	f019 ff4b 	bl	801c5b4 <SMS_Init>
	Check_USMS();
 800271e:	f000 ff01 	bl	8003524 <Check_USMS>
	if (SP == 1) {
 8002722:	4b2d      	ldr	r3, [pc, #180]	@ (80027d8 <init+0x134>)
 8002724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002728:	1e51      	subs	r1, r2, #1
 800272a:	430b      	orrs	r3, r1
 800272c:	d124      	bne.n	8002778 <init+0xd4>
 800272e:	e004      	b.n	800273a <init+0x96>
		printc(MinDelay, "SetupEc200 Failed\n");
 8002730:	492a      	ldr	r1, [pc, #168]	@ (80027dc <init+0x138>)
 8002732:	200a      	movs	r0, #10
 8002734:	f7ff f970 	bl	8001a18 <printc>
		goto resetEC200;
 8002738:	e7df      	b.n	80026fa <init+0x56>
		if (PHnum != NULL) {
			char SmBuff[] = { "FOTA Update Complete" };
 800273a:	4b29      	ldr	r3, [pc, #164]	@ (80027e0 <init+0x13c>)
 800273c:	463c      	mov	r4, r7
 800273e:	461d      	mov	r5, r3
 8002740:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002742:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002744:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002748:	6020      	str	r0, [r4, #0]
 800274a:	3404      	adds	r4, #4
 800274c:	7021      	strb	r1, [r4, #0]
			SMS_FSend(PHnum, SmBuff);
 800274e:	463b      	mov	r3, r7
 8002750:	4619      	mov	r1, r3
 8002752:	4824      	ldr	r0, [pc, #144]	@ (80027e4 <init+0x140>)
 8002754:	f01a f87e 	bl	801c854 <SMS_FSend>
			writeF_CP((uint64_t) 1, (uint64_t) 0, (uint64_t) 0);
 8002758:	f04f 0200 	mov.w	r2, #0
 800275c:	f04f 0300 	mov.w	r3, #0
 8002760:	e9cd 2300 	strd	r2, r3, [sp]
 8002764:	f04f 0200 	mov.w	r2, #0
 8002768:	f04f 0300 	mov.w	r3, #0
 800276c:	f04f 0001 	mov.w	r0, #1
 8002770:	f04f 0100 	mov.w	r1, #0
 8002774:	f014 f80e 	bl	8016794 <writeF_CP>
		}
	}
	TCP_init();
 8002778:	f01a f904 	bl	801c984 <TCP_init>
	initCan();
 800277c:	f7fe fc76 	bl	800106c <initCan>
	L86_setup(&huart5);
 8002780:	4819      	ldr	r0, [pc, #100]	@ (80027e8 <init+0x144>)
 8002782:	f018 fed7 	bl	801b534 <L86_setup>

	printc(MinDelay, "\nTML Set Up Done.....\n\r");
 8002786:	4919      	ldr	r1, [pc, #100]	@ (80027ec <init+0x148>)
 8002788:	200a      	movs	r0, #10
 800278a:	f7ff f945 	bl	8001a18 <printc>
}
 800278e:	bf00      	nop
 8002790:	3718      	adds	r7, #24
 8002792:	46bd      	mov	sp, r7
 8002794:	bdb0      	pop	{r4, r5, r7, pc}
 8002796:	bf00      	nop
 8002798:	20000ed8 	.word	0x20000ed8
 800279c:	20013b34 	.word	0x20013b34
 80027a0:	20013ce0 	.word	0x20013ce0
 80027a4:	20000ec0 	.word	0x20000ec0
 80027a8:	20000ec8 	.word	0x20000ec8
 80027ac:	20001724 	.word	0x20001724
 80027b0:	2000a328 	.word	0x2000a328
 80027b4:	20013b6c 	.word	0x20013b6c
 80027b8:	20013854 	.word	0x20013854
 80027bc:	200138bc 	.word	0x200138bc
 80027c0:	2000001c 	.word	0x2000001c
 80027c4:	080226b0 	.word	0x080226b0
 80027c8:	20013c4c 	.word	0x20013c4c
 80027cc:	080226d8 	.word	0x080226d8
 80027d0:	080226fc 	.word	0x080226fc
 80027d4:	08022700 	.word	0x08022700
 80027d8:	20001718 	.word	0x20001718
 80027dc:	080226e8 	.word	0x080226e8
 80027e0:	08022720 	.word	0x08022720
 80027e4:	20013848 	.word	0x20013848
 80027e8:	20013bb8 	.word	0x20013bb8
 80027ec:	08022708 	.word	0x08022708

080027f0 <loop>:
float internal = 0;
void loop() {
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b0b2      	sub	sp, #200	@ 0xc8
 80027f4:	af00      	add	r7, sp, #0

//	Every 1 minute will check for gsmParameter and Go to sleep when ignition is off
	if (HAL_GetTick() % 10000 == 0) {
 80027f6:	f003 f8eb 	bl	80059d0 <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	4b3a      	ldr	r3, [pc, #232]	@ (80028e8 <loop+0xf8>)
 80027fe:	fba3 1302 	umull	r1, r3, r3, r2
 8002802:	0b5b      	lsrs	r3, r3, #13
 8002804:	f242 7110 	movw	r1, #10000	@ 0x2710
 8002808:	fb01 f303 	mul.w	r3, r1, r3
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b00      	cmp	r3, #0
 8002810:	d111      	bne.n	8002836 <loop+0x46>
		if (count >= 6) {
 8002812:	4b36      	ldr	r3, [pc, #216]	@ (80028ec <loop+0xfc>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2b05      	cmp	r3, #5
 8002818:	dd08      	ble.n	800282c <loop+0x3c>
			printc(MinDelay, "Came inside for gsm update ");
 800281a:	4935      	ldr	r1, [pc, #212]	@ (80028f0 <loop+0x100>)
 800281c:	200a      	movs	r0, #10
 800281e:	f7ff f8fb 	bl	8001a18 <printc>
			gsmParameterUpdate();
 8002822:	f000 f9a3 	bl	8002b6c <gsmParameterUpdate>
			count = 0;
 8002826:	4b31      	ldr	r3, [pc, #196]	@ (80028ec <loop+0xfc>)
 8002828:	2200      	movs	r2, #0
 800282a:	601a      	str	r2, [r3, #0]

			//will
		}

		count++;
 800282c:	4b2f      	ldr	r3, [pc, #188]	@ (80028ec <loop+0xfc>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	3301      	adds	r3, #1
 8002832:	4a2e      	ldr	r2, [pc, #184]	@ (80028ec <loop+0xfc>)
 8002834:	6013      	str	r3, [r2, #0]
	}
	if (sleepcount > 6) {
 8002836:	4b2f      	ldr	r3, [pc, #188]	@ (80028f4 <loop+0x104>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2b06      	cmp	r3, #6
 800283c:	dd04      	ble.n	8002848 <loop+0x58>
		GO_TO_SLEEP();
 800283e:	f018 fc6f 	bl	801b120 <GO_TO_SLEEP>
		sleepcount = 0;
 8002842:	4b2c      	ldr	r3, [pc, #176]	@ (80028f4 <loop+0x104>)
 8002844:	2200      	movs	r2, #0
 8002846:	601a      	str	r2, [r3, #0]
	}
	if (FLAG_IGN == 1) {
 8002848:	4b2b      	ldr	r3, [pc, #172]	@ (80028f8 <loop+0x108>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2b01      	cmp	r3, #1
 800284e:	d10a      	bne.n	8002866 <loop+0x76>
		generateData("IN");
 8002850:	482a      	ldr	r0, [pc, #168]	@ (80028fc <loop+0x10c>)
 8002852:	f000 fbf1 	bl	8003038 <generateData>
		sendPDDataFlag = true;
 8002856:	4b2a      	ldr	r3, [pc, #168]	@ (8002900 <loop+0x110>)
 8002858:	2201      	movs	r2, #1
 800285a:	701a      	strb	r2, [r3, #0]
		task2();
 800285c:	f000 fb5c 	bl	8002f18 <task2>
		FLAG_IGN = 0;
 8002860:	4b25      	ldr	r3, [pc, #148]	@ (80028f8 <loop+0x108>)
 8002862:	2200      	movs	r2, #0
 8002864:	601a      	str	r2, [r3, #0]
	}
// Read uart Cmd for cota and handle it
	if (getPrintUartCmdStatus()) {
 8002866:	f000 f95f 	bl	8002b28 <getPrintUartCmdStatus>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d01d      	beq.n	80028ac <loop+0xbc>
		char cotaResp[200] = { };
 8002870:	2300      	movs	r3, #0
 8002872:	603b      	str	r3, [r7, #0]
 8002874:	1d3b      	adds	r3, r7, #4
 8002876:	22c4      	movs	r2, #196	@ 0xc4
 8002878:	2100      	movs	r1, #0
 800287a:	4618      	mov	r0, r3
 800287c:	f01c fad8 	bl	801ee30 <memset>
		if (SMS_COTA(CMD_Buf, cotaResp)) {
 8002880:	463b      	mov	r3, r7
 8002882:	4619      	mov	r1, r3
 8002884:	481f      	ldr	r0, [pc, #124]	@ (8002904 <loop+0x114>)
 8002886:	f015 f9e5 	bl	8017c54 <SMS_COTA>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d006      	beq.n	800289e <loop+0xae>
			printc(MinDelay, "SMS COTA Success %s\n", cotaResp);
 8002890:	463b      	mov	r3, r7
 8002892:	461a      	mov	r2, r3
 8002894:	491c      	ldr	r1, [pc, #112]	@ (8002908 <loop+0x118>)
 8002896:	200a      	movs	r0, #10
 8002898:	f7ff f8be 	bl	8001a18 <printc>
 800289c:	e003      	b.n	80028a6 <loop+0xb6>
		} else {
			printc(MinDelay, "SMS COTA Fail\n");
 800289e:	491b      	ldr	r1, [pc, #108]	@ (800290c <loop+0x11c>)
 80028a0:	200a      	movs	r0, #10
 80028a2:	f7ff f8b9 	bl	8001a18 <printc>
		}
		setPrintUartCmdStatus(false);
 80028a6:	2000      	movs	r0, #0
 80028a8:	f000 f92e 	bl	8002b08 <setPrintUartCmdStatus>
	}
// Handle When any SMS come for get information
	if (getMessageStatus())
 80028ac:	f019 ffb6 	bl	801c81c <getMessageStatus>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d001      	beq.n	80028ba <loop+0xca>
		handleCotaSMS();
 80028b6:	f000 f837 	bl	8002928 <handleCotaSMS>
//When update is available it will update the device
	if (getUpdateStatus()) {
 80028ba:	f015 f9a5 	bl	8017c08 <getUpdateStatus>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d00a      	beq.n	80028da <loop+0xea>
		GNSS_OFF();
 80028c4:	2201      	movs	r2, #1
 80028c6:	2104      	movs	r1, #4
 80028c8:	4811      	ldr	r0, [pc, #68]	@ (8002910 <loop+0x120>)
 80028ca:	f008 ffd3 	bl	800b874 <HAL_GPIO_WritePin>
		update();
 80028ce:	f018 f803 	bl	801a8d8 <update>
//		char SBf[]={"FOTA_Updated"};
//		SMS_Send(PHnum,SBf );
		setUpdateStaus(false);
 80028d2:	2000      	movs	r0, #0
 80028d4:	f015 f9a4 	bl	8017c20 <setUpdateStaus>

	} else {
		task2();
	}

}
 80028d8:	e001      	b.n	80028de <loop+0xee>
		task2();
 80028da:	f000 fb1d 	bl	8002f18 <task2>
}
 80028de:	bf00      	nop
 80028e0:	37c8      	adds	r7, #200	@ 0xc8
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	d1b71759 	.word	0xd1b71759
 80028ec:	20000ed0 	.word	0x20000ed0
 80028f0:	08022738 	.word	0x08022738
 80028f4:	20000ed4 	.word	0x20000ed4
 80028f8:	20012f30 	.word	0x20012f30
 80028fc:	08022754 	.word	0x08022754
 8002900:	20012f2d 	.word	0x20012f2d
 8002904:	20012f40 	.word	0x20012f40
 8002908:	08022758 	.word	0x08022758
 800290c:	08022770 	.word	0x08022770
 8002910:	42020c00 	.word	0x42020c00

08002914 <onTemperCallback>:
void onTemperCallback() {
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
	generateData("TA");
 8002918:	4802      	ldr	r0, [pc, #8]	@ (8002924 <onTemperCallback+0x10>)
 800291a:	f000 fb8d 	bl	8003038 <generateData>
}
 800291e:	bf00      	nop
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	08022780 	.word	0x08022780

08002928 <handleCotaSMS>:
void handleCotaSMS() {
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
	clearBuffer(CMD_Buf, sizeof(CMD_Buf));
 800292e:	21c8      	movs	r1, #200	@ 0xc8
 8002930:	483a      	ldr	r0, [pc, #232]	@ (8002a1c <handleCotaSMS+0xf4>)
 8002932:	f7ff f8c9 	bl	8001ac8 <clearBuffer>
	SMS_Read(0, CMD_Buf);
 8002936:	4939      	ldr	r1, [pc, #228]	@ (8002a1c <handleCotaSMS+0xf4>)
 8002938:	2000      	movs	r0, #0
 800293a:	f019 feab 	bl	801c694 <SMS_Read>
	if (strlen(CMD_Buf) > 6) {
 800293e:	4837      	ldr	r0, [pc, #220]	@ (8002a1c <handleCotaSMS+0xf4>)
 8002940:	f7fd fcb0 	bl	80002a4 <strlen>
 8002944:	4603      	mov	r3, r0
 8002946:	2b06      	cmp	r3, #6
 8002948:	d957      	bls.n	80029fa <handleCotaSMS+0xd2>
		clearBuffer(tmpSplit, sizeof(tmpSplit));
 800294a:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800294e:	4834      	ldr	r0, [pc, #208]	@ (8002a20 <handleCotaSMS+0xf8>)
 8002950:	f7ff f8ba 	bl	8001ac8 <clearBuffer>
		splitString(CMD_Buf, "\r\n", tmpSplit);
 8002954:	4a32      	ldr	r2, [pc, #200]	@ (8002a20 <handleCotaSMS+0xf8>)
 8002956:	4933      	ldr	r1, [pc, #204]	@ (8002a24 <handleCotaSMS+0xfc>)
 8002958:	4830      	ldr	r0, [pc, #192]	@ (8002a1c <handleCotaSMS+0xf4>)
 800295a:	f7ff f8c3 	bl	8001ae4 <splitString>
		clearBuffer(CMD_Buf, sizeof(CMD_Buf));
 800295e:	21c8      	movs	r1, #200	@ 0xc8
 8002960:	482e      	ldr	r0, [pc, #184]	@ (8002a1c <handleCotaSMS+0xf4>)
 8002962:	f7ff f8b1 	bl	8001ac8 <clearBuffer>
			printc(MinDelay, "Failed to Parse Message");
			clearBuffer(CMD_Buf, sizeof(CMD_Buf));
			strcpy(CMD_Buf, "Failed to Parse Message\n");
			goto sendMsg;
		}
		printc(MinDelay, "Received MSG %s", CMD_Buf);
 8002966:	4a2d      	ldr	r2, [pc, #180]	@ (8002a1c <handleCotaSMS+0xf4>)
 8002968:	492f      	ldr	r1, [pc, #188]	@ (8002a28 <handleCotaSMS+0x100>)
 800296a:	200a      	movs	r0, #10
 800296c:	f7ff f854 	bl	8001a18 <printc>
		if (!SMS_COTA(tmpSplit[2], CMD_Buf)) {
 8002970:	492a      	ldr	r1, [pc, #168]	@ (8002a1c <handleCotaSMS+0xf4>)
 8002972:	482e      	ldr	r0, [pc, #184]	@ (8002a2c <handleCotaSMS+0x104>)
 8002974:	f015 f96e 	bl	8017c54 <SMS_COTA>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d109      	bne.n	8002992 <handleCotaSMS+0x6a>
			clearBuffer(CMD_Buf, sizeof(CMD_Buf));
 800297e:	21c8      	movs	r1, #200	@ 0xc8
 8002980:	4826      	ldr	r0, [pc, #152]	@ (8002a1c <handleCotaSMS+0xf4>)
 8002982:	f7ff f8a1 	bl	8001ac8 <clearBuffer>
			strcpy(CMD_Buf, "INVALID CMD");
 8002986:	4b25      	ldr	r3, [pc, #148]	@ (8002a1c <handleCotaSMS+0xf4>)
 8002988:	4a29      	ldr	r2, [pc, #164]	@ (8002a30 <handleCotaSMS+0x108>)
 800298a:	ca07      	ldmia	r2, {r0, r1, r2}
 800298c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002990:	e00a      	b.n	80029a8 <handleCotaSMS+0x80>
		} else {
			char *tmpData = strdup(CMD_Buf);
 8002992:	4822      	ldr	r0, [pc, #136]	@ (8002a1c <handleCotaSMS+0xf4>)
 8002994:	f01c fa70 	bl	801ee78 <strdup>
 8002998:	4603      	mov	r3, r0
 800299a:	607b      	str	r3, [r7, #4]
			sprintf(CMD_Buf, "Device-%s %s", IMEI, tmpData);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4a25      	ldr	r2, [pc, #148]	@ (8002a34 <handleCotaSMS+0x10c>)
 80029a0:	4925      	ldr	r1, [pc, #148]	@ (8002a38 <handleCotaSMS+0x110>)
 80029a2:	481e      	ldr	r0, [pc, #120]	@ (8002a1c <handleCotaSMS+0xf4>)
 80029a4:	f01c f8e8 	bl	801eb78 <siprintf>
		}
		sendMsg: char *number = strdup(tmpSplit[1]);
 80029a8:	4824      	ldr	r0, [pc, #144]	@ (8002a3c <handleCotaSMS+0x114>)
 80029aa:	f01c fa65 	bl	801ee78 <strdup>
 80029ae:	4603      	mov	r3, r0
 80029b0:	603b      	str	r3, [r7, #0]

		clearBuffer(tmpSplit, sizeof(tmpSplit));
 80029b2:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80029b6:	481a      	ldr	r0, [pc, #104]	@ (8002a20 <handleCotaSMS+0xf8>)
 80029b8:	f7ff f886 	bl	8001ac8 <clearBuffer>
		splitString(number, ",", tmpSplit);
 80029bc:	4a18      	ldr	r2, [pc, #96]	@ (8002a20 <handleCotaSMS+0xf8>)
 80029be:	4920      	ldr	r1, [pc, #128]	@ (8002a40 <handleCotaSMS+0x118>)
 80029c0:	6838      	ldr	r0, [r7, #0]
 80029c2:	f7ff f88f 	bl	8001ae4 <splitString>
		SMS_Send(&tmpSplit[1][4], CMD_Buf);
 80029c6:	4915      	ldr	r1, [pc, #84]	@ (8002a1c <handleCotaSMS+0xf4>)
 80029c8:	481e      	ldr	r0, [pc, #120]	@ (8002a44 <handleCotaSMS+0x11c>)
 80029ca:	f019 fe93 	bl	801c6f4 <SMS_Send>
		if (tmpSplit[1][2] != NULL) {
 80029ce:	4b14      	ldr	r3, [pc, #80]	@ (8002a20 <handleCotaSMS+0xf8>)
 80029d0:	f893 3066 	ldrb.w	r3, [r3, #102]	@ 0x66
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d00a      	beq.n	80029ee <handleCotaSMS+0xc6>
			memset(PHnum, 0, sizeof(PHnum));
 80029d8:	220a      	movs	r2, #10
 80029da:	2100      	movs	r1, #0
 80029dc:	481a      	ldr	r0, [pc, #104]	@ (8002a48 <handleCotaSMS+0x120>)
 80029de:	f01c fa27 	bl	801ee30 <memset>
			memcpy(PHnum, &tmpSplit[1][4], 10);
 80029e2:	4b19      	ldr	r3, [pc, #100]	@ (8002a48 <handleCotaSMS+0x120>)
 80029e4:	4a0e      	ldr	r2, [pc, #56]	@ (8002a20 <handleCotaSMS+0xf8>)
 80029e6:	3268      	adds	r2, #104	@ 0x68
 80029e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80029ea:	c303      	stmia	r3!, {r0, r1}
 80029ec:	801a      	strh	r2, [r3, #0]
		}
		printc(MinDelay, "\n phone No is: %s\n", tmpSplit[1]);
 80029ee:	4a13      	ldr	r2, [pc, #76]	@ (8002a3c <handleCotaSMS+0x114>)
 80029f0:	4916      	ldr	r1, [pc, #88]	@ (8002a4c <handleCotaSMS+0x124>)
 80029f2:	200a      	movs	r0, #10
 80029f4:	f7ff f810 	bl	8001a18 <printc>
 80029f8:	e003      	b.n	8002a02 <handleCotaSMS+0xda>

	} else {
		printc(MinDelay, "UNABLE TO Parse Message");
 80029fa:	4915      	ldr	r1, [pc, #84]	@ (8002a50 <handleCotaSMS+0x128>)
 80029fc:	200a      	movs	r0, #10
 80029fe:	f7ff f80b 	bl	8001a18 <printc>
	}
	setMessageStatus(false);
 8002a02:	2000      	movs	r0, #0
 8002a04:	f019 ff16 	bl	801c834 <setMessageStatus>
	if (SRESET_FLAG == true) {
 8002a08:	4b12      	ldr	r3, [pc, #72]	@ (8002a54 <handleCotaSMS+0x12c>)
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d001      	beq.n	8002a14 <handleCotaSMS+0xec>
		SET_RESET();
 8002a10:	f016 fa0e 	bl	8018e30 <SET_RESET>
	}

}
 8002a14:	3708      	adds	r7, #8
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	20012f40 	.word	0x20012f40
 8002a20:	20013654 	.word	0x20013654
 8002a24:	08022784 	.word	0x08022784
 8002a28:	08022788 	.word	0x08022788
 8002a2c:	2001371c 	.word	0x2001371c
 8002a30:	08022798 	.word	0x08022798
 8002a34:	2000002c 	.word	0x2000002c
 8002a38:	080227a4 	.word	0x080227a4
 8002a3c:	200136b8 	.word	0x200136b8
 8002a40:	080227b4 	.word	0x080227b4
 8002a44:	200136bc 	.word	0x200136bc
 8002a48:	20013848 	.word	0x20013848
 8002a4c:	080227b8 	.word	0x080227b8
 8002a50:	080227cc 	.word	0x080227cc
 8002a54:	20014d94 	.word	0x20014d94

08002a58 <getUpdateVersion>:

char* getUpdateVersion() {
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0
	return updateVersion;
 8002a5c:	4b02      	ldr	r3, [pc, #8]	@ (8002a68 <getUpdateVersion+0x10>)
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr
 8002a68:	20013008 	.word	0x20013008

08002a6c <setIMEI>:
void setIMEI(char *imei) {
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
	if (imei == NULL)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d008      	beq.n	8002a8c <setIMEI+0x20>
		return;
	clearBuffer(IMEI, sizeof(IMEI));
 8002a7a:	2110      	movs	r1, #16
 8002a7c:	4805      	ldr	r0, [pc, #20]	@ (8002a94 <setIMEI+0x28>)
 8002a7e:	f7ff f823 	bl	8001ac8 <clearBuffer>
	strcpy(IMEI, imei);
 8002a82:	6879      	ldr	r1, [r7, #4]
 8002a84:	4803      	ldr	r0, [pc, #12]	@ (8002a94 <setIMEI+0x28>)
 8002a86:	f01c fb30 	bl	801f0ea <strcpy>
 8002a8a:	e000      	b.n	8002a8e <setIMEI+0x22>
		return;
 8002a8c:	bf00      	nop
}
 8002a8e:	3708      	adds	r7, #8
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	2000002c 	.word	0x2000002c

08002a98 <Sleep_routine>:
void Sleep_routine() {
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b088      	sub	sp, #32
 8002a9c:	af00      	add	r7, sp, #0
//	ledHendler.pwrLedState=OFF;
//	ledHendler.gsmLedState=OFF;
//	ledHendler.gpsLedState=OFF;
	char tmpVal[15] = { };
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	613b      	str	r3, [r7, #16]
 8002aa2:	f107 0314 	add.w	r3, r7, #20
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	601a      	str	r2, [r3, #0]
 8002aaa:	605a      	str	r2, [r3, #4]
 8002aac:	f8c3 2007 	str.w	r2, [r3, #7]
		char tmpVal1[15] = { };
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	603b      	str	r3, [r7, #0]
 8002ab4:	1d3b      	adds	r3, r7, #4
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	601a      	str	r2, [r3, #0]
 8002aba:	605a      	str	r2, [r3, #4]
 8002abc:	f8c3 2007 	str.w	r2, [r3, #7]
		sprintf(tmpVal1, "%.6f", latHitory);
 8002ac0:	4b0e      	ldr	r3, [pc, #56]	@ (8002afc <Sleep_routine+0x64>)
 8002ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ac6:	4638      	mov	r0, r7
 8002ac8:	490d      	ldr	r1, [pc, #52]	@ (8002b00 <Sleep_routine+0x68>)
 8002aca:	f01c f855 	bl	801eb78 <siprintf>
		sprintf(tmpVal, "%.6f", lonHistory);
 8002ace:	4b0d      	ldr	r3, [pc, #52]	@ (8002b04 <Sleep_routine+0x6c>)
 8002ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ad4:	f107 0010 	add.w	r0, r7, #16
 8002ad8:	4909      	ldr	r1, [pc, #36]	@ (8002b00 <Sleep_routine+0x68>)
 8002ada:	f01c f84d 	bl	801eb78 <siprintf>
		SET_LAT_LON(tmpVal1,tmpVal);
 8002ade:	f107 0210 	add.w	r2, r7, #16
 8002ae2:	463b      	mov	r3, r7
 8002ae4:	4611      	mov	r1, r2
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f016 f94a 	bl	8018d80 <SET_LAT_LON>
	FeedAllConfig();
 8002aec:	f016 fba6 	bl	801923c <FeedAllConfig>

	task2();
 8002af0:	f000 fa12 	bl	8002f18 <task2>
//	GNSS_OFF();
//	sendPDDataFlag = true;
//	setSleppStatus(true);

}
 8002af4:	bf00      	nop
 8002af6:	3720      	adds	r7, #32
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	20000ec0 	.word	0x20000ec0
 8002b00:	080227e4 	.word	0x080227e4
 8002b04:	20000ec8 	.word	0x20000ec8

08002b08 <setPrintUartCmdStatus>:
//		task2();
//		FLAG_IGN = 0;
//	}
//
//}
void setPrintUartCmdStatus(bool tmpStatus) {
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	4603      	mov	r3, r0
 8002b10:	71fb      	strb	r3, [r7, #7]
	uartCmdStatus = tmpStatus;
 8002b12:	4a04      	ldr	r2, [pc, #16]	@ (8002b24 <setPrintUartCmdStatus+0x1c>)
 8002b14:	79fb      	ldrb	r3, [r7, #7]
 8002b16:	7013      	strb	r3, [r2, #0]
}
 8002b18:	bf00      	nop
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr
 8002b24:	20012f3d 	.word	0x20012f3d

08002b28 <getPrintUartCmdStatus>:
bool getPrintUartCmdStatus() {
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0
	return uartCmdStatus;
 8002b2c:	4b03      	ldr	r3, [pc, #12]	@ (8002b3c <getPrintUartCmdStatus+0x14>)
 8002b2e:	781b      	ldrb	r3, [r3, #0]
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	20012f3d 	.word	0x20012f3d

08002b40 <onPrintUartCmd>:
void onPrintUartCmd(char *cmd) {
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
	clearBuffer(CMD_Buf, sizeof(CMD_Buf));
 8002b48:	21c8      	movs	r1, #200	@ 0xc8
 8002b4a:	4807      	ldr	r0, [pc, #28]	@ (8002b68 <onPrintUartCmd+0x28>)
 8002b4c:	f7fe ffbc 	bl	8001ac8 <clearBuffer>
	strcpy(CMD_Buf, cmd);
 8002b50:	6879      	ldr	r1, [r7, #4]
 8002b52:	4805      	ldr	r0, [pc, #20]	@ (8002b68 <onPrintUartCmd+0x28>)
 8002b54:	f01c fac9 	bl	801f0ea <strcpy>
	setPrintUartCmdStatus(true);
 8002b58:	2001      	movs	r0, #1
 8002b5a:	f7ff ffd5 	bl	8002b08 <setPrintUartCmdStatus>
}
 8002b5e:	bf00      	nop
 8002b60:	3708      	adds	r7, #8
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	20012f40 	.word	0x20012f40

08002b6c <gsmParameterUpdate>:
void gsmParameterUpdate() {
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
	signalStrength = getSignal();
 8002b72:	f7fe fd65 	bl	8001640 <getSignal>
 8002b76:	4603      	mov	r3, r0
 8002b78:	b25a      	sxtb	r2, r3
 8002b7a:	4b41      	ldr	r3, [pc, #260]	@ (8002c80 <gsmParameterUpdate+0x114>)
 8002b7c:	701a      	strb	r2, [r3, #0]
	if (signalStrength == -1) {
 8002b7e:	4b40      	ldr	r3, [pc, #256]	@ (8002c80 <gsmParameterUpdate+0x114>)
 8002b80:	f993 3000 	ldrsb.w	r3, [r3]
 8002b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b88:	d106      	bne.n	8002b98 <gsmParameterUpdate+0x2c>
		printc(MinDelay, "Fail to get Signal");
 8002b8a:	493e      	ldr	r1, [pc, #248]	@ (8002c84 <gsmParameterUpdate+0x118>)
 8002b8c:	200a      	movs	r0, #10
 8002b8e:	f7fe ff43 	bl	8001a18 <printc>
		signalStrength = 0;
 8002b92:	4b3b      	ldr	r3, [pc, #236]	@ (8002c80 <gsmParameterUpdate+0x114>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	701a      	strb	r2, [r3, #0]
	}
	clearBuffer(MCC, sizeof(MCC));
 8002b98:	2114      	movs	r1, #20
 8002b9a:	483b      	ldr	r0, [pc, #236]	@ (8002c88 <gsmParameterUpdate+0x11c>)
 8002b9c:	f7fe ff94 	bl	8001ac8 <clearBuffer>
	clearBuffer(MNC, sizeof(MNC));
 8002ba0:	2114      	movs	r1, #20
 8002ba2:	483a      	ldr	r0, [pc, #232]	@ (8002c8c <gsmParameterUpdate+0x120>)
 8002ba4:	f7fe ff90 	bl	8001ac8 <clearBuffer>
	clearBuffer(LAC, sizeof(LAC));
 8002ba8:	2114      	movs	r1, #20
 8002baa:	4839      	ldr	r0, [pc, #228]	@ (8002c90 <gsmParameterUpdate+0x124>)
 8002bac:	f7fe ff8c 	bl	8001ac8 <clearBuffer>
	clearBuffer(Celid, sizeof(Celid));
 8002bb0:	2114      	movs	r1, #20
 8002bb2:	4838      	ldr	r0, [pc, #224]	@ (8002c94 <gsmParameterUpdate+0x128>)
 8002bb4:	f7fe ff88 	bl	8001ac8 <clearBuffer>
	bool tmpStatus = get_MCC_MNC_CellID(MCC, MNC, LAC, Celid);
 8002bb8:	4b36      	ldr	r3, [pc, #216]	@ (8002c94 <gsmParameterUpdate+0x128>)
 8002bba:	4a35      	ldr	r2, [pc, #212]	@ (8002c90 <gsmParameterUpdate+0x124>)
 8002bbc:	4933      	ldr	r1, [pc, #204]	@ (8002c8c <gsmParameterUpdate+0x120>)
 8002bbe:	4832      	ldr	r0, [pc, #200]	@ (8002c88 <gsmParameterUpdate+0x11c>)
 8002bc0:	f7fe fdde 	bl	8001780 <get_MCC_MNC_CellID>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	71fb      	strb	r3, [r7, #7]
	if (!tmpStatus) {
 8002bc8:	79fb      	ldrb	r3, [r7, #7]
 8002bca:	f083 0301 	eor.w	r3, r3, #1
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d023      	beq.n	8002c1c <gsmParameterUpdate+0xb0>
		printc(MinDelay, "Don't get MMC  MNC Celid \n");
 8002bd4:	4930      	ldr	r1, [pc, #192]	@ (8002c98 <gsmParameterUpdate+0x12c>)
 8002bd6:	200a      	movs	r0, #10
 8002bd8:	f7fe ff1e 	bl	8001a18 <printc>
		strcpy(MCC, "NA");
 8002bdc:	4b2a      	ldr	r3, [pc, #168]	@ (8002c88 <gsmParameterUpdate+0x11c>)
 8002bde:	4a2f      	ldr	r2, [pc, #188]	@ (8002c9c <gsmParameterUpdate+0x130>)
 8002be0:	6812      	ldr	r2, [r2, #0]
 8002be2:	4611      	mov	r1, r2
 8002be4:	8019      	strh	r1, [r3, #0]
 8002be6:	3302      	adds	r3, #2
 8002be8:	0c12      	lsrs	r2, r2, #16
 8002bea:	701a      	strb	r2, [r3, #0]
		strcpy(MNC, "NA");
 8002bec:	4b27      	ldr	r3, [pc, #156]	@ (8002c8c <gsmParameterUpdate+0x120>)
 8002bee:	4a2b      	ldr	r2, [pc, #172]	@ (8002c9c <gsmParameterUpdate+0x130>)
 8002bf0:	6812      	ldr	r2, [r2, #0]
 8002bf2:	4611      	mov	r1, r2
 8002bf4:	8019      	strh	r1, [r3, #0]
 8002bf6:	3302      	adds	r3, #2
 8002bf8:	0c12      	lsrs	r2, r2, #16
 8002bfa:	701a      	strb	r2, [r3, #0]
		strcpy(LAC, "NA");
 8002bfc:	4b24      	ldr	r3, [pc, #144]	@ (8002c90 <gsmParameterUpdate+0x124>)
 8002bfe:	4a27      	ldr	r2, [pc, #156]	@ (8002c9c <gsmParameterUpdate+0x130>)
 8002c00:	6812      	ldr	r2, [r2, #0]
 8002c02:	4611      	mov	r1, r2
 8002c04:	8019      	strh	r1, [r3, #0]
 8002c06:	3302      	adds	r3, #2
 8002c08:	0c12      	lsrs	r2, r2, #16
 8002c0a:	701a      	strb	r2, [r3, #0]
		strcpy(Celid, "NA");
 8002c0c:	4b21      	ldr	r3, [pc, #132]	@ (8002c94 <gsmParameterUpdate+0x128>)
 8002c0e:	4a23      	ldr	r2, [pc, #140]	@ (8002c9c <gsmParameterUpdate+0x130>)
 8002c10:	6812      	ldr	r2, [r2, #0]
 8002c12:	4611      	mov	r1, r2
 8002c14:	8019      	strh	r1, [r3, #0]
 8002c16:	3302      	adds	r3, #2
 8002c18:	0c12      	lsrs	r2, r2, #16
 8002c1a:	701a      	strb	r2, [r3, #0]
	}
	clearBuffer(Network, sizeof(Network));
 8002c1c:	211e      	movs	r1, #30
 8002c1e:	4820      	ldr	r0, [pc, #128]	@ (8002ca0 <gsmParameterUpdate+0x134>)
 8002c20:	f7fe ff52 	bl	8001ac8 <clearBuffer>
	tmpStatus = getOperatorName(Network);
 8002c24:	481e      	ldr	r0, [pc, #120]	@ (8002ca0 <gsmParameterUpdate+0x134>)
 8002c26:	f7fe fd43 	bl	80016b0 <getOperatorName>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	bf14      	ite	ne
 8002c30:	2301      	movne	r3, #1
 8002c32:	2300      	moveq	r3, #0
 8002c34:	71fb      	strb	r3, [r7, #7]
	Network[strlen(Network) - 1] = '\0';
 8002c36:	481a      	ldr	r0, [pc, #104]	@ (8002ca0 <gsmParameterUpdate+0x134>)
 8002c38:	f7fd fb34 	bl	80002a4 <strlen>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	4a17      	ldr	r2, [pc, #92]	@ (8002ca0 <gsmParameterUpdate+0x134>)
 8002c42:	2100      	movs	r1, #0
 8002c44:	54d1      	strb	r1, [r2, r3]
	if (!tmpStatus) {
 8002c46:	79fb      	ldrb	r3, [r7, #7]
 8002c48:	f083 0301 	eor.w	r3, r3, #1
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d00f      	beq.n	8002c72 <gsmParameterUpdate+0x106>
		printc(MinDelay, "Don't get NETWRORK \n");
 8002c52:	4914      	ldr	r1, [pc, #80]	@ (8002ca4 <gsmParameterUpdate+0x138>)
 8002c54:	200a      	movs	r0, #10
 8002c56:	f7fe fedf 	bl	8001a18 <printc>
		strcpy(Network, "NA");
 8002c5a:	4b11      	ldr	r3, [pc, #68]	@ (8002ca0 <gsmParameterUpdate+0x134>)
 8002c5c:	4a0f      	ldr	r2, [pc, #60]	@ (8002c9c <gsmParameterUpdate+0x130>)
 8002c5e:	6812      	ldr	r2, [r2, #0]
 8002c60:	4611      	mov	r1, r2
 8002c62:	8019      	strh	r1, [r3, #0]
 8002c64:	3302      	adds	r3, #2
 8002c66:	0c12      	lsrs	r2, r2, #16
 8002c68:	701a      	strb	r2, [r3, #0]
		ledHendler.gsmLedState = LOW;
 8002c6a:	4b0f      	ldr	r3, [pc, #60]	@ (8002ca8 <gsmParameterUpdate+0x13c>)
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	705a      	strb	r2, [r3, #1]
	} else {
		ledHendler.gsmLedState = HEIGH;
	}
}
 8002c70:	e002      	b.n	8002c78 <gsmParameterUpdate+0x10c>
		ledHendler.gsmLedState = HEIGH;
 8002c72:	4b0d      	ldr	r3, [pc, #52]	@ (8002ca8 <gsmParameterUpdate+0x13c>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	705a      	strb	r2, [r3, #1]
}
 8002c78:	bf00      	nop
 8002c7a:	3708      	adds	r7, #8
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	20013600 	.word	0x20013600
 8002c84:	080227ec 	.word	0x080227ec
 8002c88:	20013618 	.word	0x20013618
 8002c8c:	20013604 	.word	0x20013604
 8002c90:	2001362c 	.word	0x2001362c
 8002c94:	20013640 	.word	0x20013640
 8002c98:	08022800 	.word	0x08022800
 8002c9c:	0802281c 	.word	0x0802281c
 8002ca0:	20000048 	.word	0x20000048
 8002ca4:	08022820 	.word	0x08022820
 8002ca8:	200000a4 	.word	0x200000a4

08002cac <makeMessageHeader>:

void makeMessageHeader(char *mqttString, char *Packet_Type) {
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b088      	sub	sp, #32
 8002cb0:	af06      	add	r7, sp, #24
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
	sprintf(mqttString, "$%s,%s,%s,%s,%s,%s,%s,%s", Packet_Header,
 8002cb6:	4b0b      	ldr	r3, [pc, #44]	@ (8002ce4 <makeMessageHeader+0x38>)
 8002cb8:	9305      	str	r3, [sp, #20]
 8002cba:	4b0b      	ldr	r3, [pc, #44]	@ (8002ce8 <makeMessageHeader+0x3c>)
 8002cbc:	9304      	str	r3, [sp, #16]
 8002cbe:	4b0b      	ldr	r3, [pc, #44]	@ (8002cec <makeMessageHeader+0x40>)
 8002cc0:	9303      	str	r3, [sp, #12]
 8002cc2:	4b0b      	ldr	r3, [pc, #44]	@ (8002cf0 <makeMessageHeader+0x44>)
 8002cc4:	9302      	str	r3, [sp, #8]
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	9301      	str	r3, [sp, #4]
 8002cca:	4b0a      	ldr	r3, [pc, #40]	@ (8002cf4 <makeMessageHeader+0x48>)
 8002ccc:	9300      	str	r3, [sp, #0]
 8002cce:	4b0a      	ldr	r3, [pc, #40]	@ (8002cf8 <makeMessageHeader+0x4c>)
 8002cd0:	4a0a      	ldr	r2, [pc, #40]	@ (8002cfc <makeMessageHeader+0x50>)
 8002cd2:	490b      	ldr	r1, [pc, #44]	@ (8002d00 <makeMessageHeader+0x54>)
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f01b ff4f 	bl	801eb78 <siprintf>
			Hardware_Version, Firmware_Version, Packet_Type, Message_ID,
			Packet_Status, IMEI, Vehicle_Reg_No);
}
 8002cda:	bf00      	nop
 8002cdc:	3708      	adds	r7, #8
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	2000003c 	.word	0x2000003c
 8002ce8:	2000002c 	.word	0x2000002c
 8002cec:	20000028 	.word	0x20000028
 8002cf0:	20000024 	.word	0x20000024
 8002cf4:	2000001c 	.word	0x2000001c
 8002cf8:	20000014 	.word	0x20000014
 8002cfc:	2000000c 	.word	0x2000000c
 8002d00:	08022838 	.word	0x08022838

08002d04 <addGSMData>:
void addGSMData(char *tmp_str) {
 8002d04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d06:	b095      	sub	sp, #84	@ 0x54
 8002d08:	af10      	add	r7, sp, #64	@ 0x40
 8002d0a:	60f8      	str	r0, [r7, #12]

	temper = 'C';
 8002d0c:	4b24      	ldr	r3, [pc, #144]	@ (8002da0 <addGSMData+0x9c>)
 8002d0e:	2243      	movs	r2, #67	@ 0x43
 8002d10:	701a      	strb	r2, [r3, #0]
	if (getTemperStatus()) {
 8002d12:	f018 f881 	bl	801ae18 <getTemperStatus>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d002      	beq.n	8002d22 <addGSMData+0x1e>
		temper = 'O';
 8002d1c:	4b20      	ldr	r3, [pc, #128]	@ (8002da0 <addGSMData+0x9c>)
 8002d1e:	224f      	movs	r2, #79	@ 0x4f
 8002d20:	701a      	strb	r2, [r3, #0]
	}
	sprintf(tmp_str, "%s,%d,%d,%.2f,%.2f,%c,%d,%s,%s,%s,%s,%s,%s,%s,%s",
 8002d22:	f018 f869 	bl	801adf8 <getIgnition>
 8002d26:	4606      	mov	r6, r0
 8002d28:	4b1e      	ldr	r3, [pc, #120]	@ (8002da4 <addGSMData+0xa0>)
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	60bb      	str	r3, [r7, #8]
 8002d2e:	4b1e      	ldr	r3, [pc, #120]	@ (8002da8 <addGSMData+0xa4>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7fd fc22 	bl	800057c <__aeabi_f2d>
 8002d38:	4604      	mov	r4, r0
 8002d3a:	460d      	mov	r5, r1
 8002d3c:	4b1b      	ldr	r3, [pc, #108]	@ (8002dac <addGSMData+0xa8>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7fd fc1b 	bl	800057c <__aeabi_f2d>
 8002d46:	4602      	mov	r2, r0
 8002d48:	460b      	mov	r3, r1
 8002d4a:	4915      	ldr	r1, [pc, #84]	@ (8002da0 <addGSMData+0x9c>)
 8002d4c:	7809      	ldrb	r1, [r1, #0]
 8002d4e:	4608      	mov	r0, r1
 8002d50:	4917      	ldr	r1, [pc, #92]	@ (8002db0 <addGSMData+0xac>)
 8002d52:	f991 1000 	ldrsb.w	r1, [r1]
 8002d56:	6079      	str	r1, [r7, #4]
 8002d58:	4916      	ldr	r1, [pc, #88]	@ (8002db4 <addGSMData+0xb0>)
 8002d5a:	910f      	str	r1, [sp, #60]	@ 0x3c
 8002d5c:	4916      	ldr	r1, [pc, #88]	@ (8002db8 <addGSMData+0xb4>)
 8002d5e:	910e      	str	r1, [sp, #56]	@ 0x38
 8002d60:	4916      	ldr	r1, [pc, #88]	@ (8002dbc <addGSMData+0xb8>)
 8002d62:	910d      	str	r1, [sp, #52]	@ 0x34
 8002d64:	4916      	ldr	r1, [pc, #88]	@ (8002dc0 <addGSMData+0xbc>)
 8002d66:	910c      	str	r1, [sp, #48]	@ 0x30
 8002d68:	4916      	ldr	r1, [pc, #88]	@ (8002dc4 <addGSMData+0xc0>)
 8002d6a:	910b      	str	r1, [sp, #44]	@ 0x2c
 8002d6c:	4916      	ldr	r1, [pc, #88]	@ (8002dc8 <addGSMData+0xc4>)
 8002d6e:	910a      	str	r1, [sp, #40]	@ 0x28
 8002d70:	4916      	ldr	r1, [pc, #88]	@ (8002dcc <addGSMData+0xc8>)
 8002d72:	9109      	str	r1, [sp, #36]	@ 0x24
 8002d74:	4916      	ldr	r1, [pc, #88]	@ (8002dd0 <addGSMData+0xcc>)
 8002d76:	9108      	str	r1, [sp, #32]
 8002d78:	6879      	ldr	r1, [r7, #4]
 8002d7a:	9107      	str	r1, [sp, #28]
 8002d7c:	9006      	str	r0, [sp, #24]
 8002d7e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002d82:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	9300      	str	r3, [sp, #0]
 8002d8a:	4633      	mov	r3, r6
 8002d8c:	4a11      	ldr	r2, [pc, #68]	@ (8002dd4 <addGSMData+0xd0>)
 8002d8e:	4912      	ldr	r1, [pc, #72]	@ (8002dd8 <addGSMData+0xd4>)
 8002d90:	68f8      	ldr	r0, [r7, #12]
 8002d92:	f01b fef1 	bl	801eb78 <siprintf>
			"1000",	//"Digital Input",
			"10",	//"Digital Output",
			"0.3",	//"Analog Input 1",
			"0.3,"	//"Analog Input 2,"
			);
}
 8002d96:	bf00      	nop
 8002d98:	3714      	adds	r7, #20
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	20000066 	.word	0x20000066
 8002da4:	20012f3c 	.word	0x20012f3c
 8002da8:	20012f34 	.word	0x20012f34
 8002dac:	20012f38 	.word	0x20012f38
 8002db0:	20013600 	.word	0x20013600
 8002db4:	08022888 	.word	0x08022888
 8002db8:	08022890 	.word	0x08022890
 8002dbc:	08022894 	.word	0x08022894
 8002dc0:	08022898 	.word	0x08022898
 8002dc4:	20013640 	.word	0x20013640
 8002dc8:	2001362c 	.word	0x2001362c
 8002dcc:	20013604 	.word	0x20013604
 8002dd0:	20013618 	.word	0x20013618
 8002dd4:	20000049 	.word	0x20000049
 8002dd8:	08022854 	.word	0x08022854

08002ddc <addGPSData>:

void addGPSData(GPSData *data, char *tmp_str, char *tmpTime, char *tmpDate) {
 8002ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002de0:	b0a1      	sub	sp, #132	@ 0x84
 8002de2:	af14      	add	r7, sp, #80	@ 0x50
 8002de4:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8002de6:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002de8:	627a      	str	r2, [r7, #36]	@ 0x24
 8002dea:	623b      	str	r3, [r7, #32]
	if (data->latitude != 0 && data->longitude != 0) {
 8002dec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dee:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002df2:	f04f 0200 	mov.w	r2, #0
 8002df6:	f04f 0300 	mov.w	r3, #0
 8002dfa:	f7fd fe7f 	bl	8000afc <__aeabi_dcmpeq>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d118      	bne.n	8002e36 <addGPSData+0x5a>
 8002e04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e06:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002e0a:	f04f 0200 	mov.w	r2, #0
 8002e0e:	f04f 0300 	mov.w	r3, #0
 8002e12:	f7fd fe73 	bl	8000afc <__aeabi_dcmpeq>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d10c      	bne.n	8002e36 <addGPSData+0x5a>
		latHitory = data->latitude;
 8002e1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e22:	492f      	ldr	r1, [pc, #188]	@ (8002ee0 <addGPSData+0x104>)
 8002e24:	e9c1 2300 	strd	r2, r3, [r1]
		lonHistory = data->longitude;
 8002e28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e2a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002e2e:	492d      	ldr	r1, [pc, #180]	@ (8002ee4 <addGPSData+0x108>)
 8002e30:	e9c1 2300 	strd	r2, r3, [r1]
 8002e34:	e004      	b.n	8002e40 <addGPSData+0x64>
	}
	else{
		printc(MinDelay,"geting lat 0 long 0 at time %s\n",tmpTime);
 8002e36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e38:	492b      	ldr	r1, [pc, #172]	@ (8002ee8 <addGPSData+0x10c>)
 8002e3a:	200a      	movs	r0, #10
 8002e3c:	f7fe fdec 	bl	8001a18 <printc>
	}
	sprintf(tmp_str, ",%d,%s,%s,%.6f,%c,%.6f,%c,%.2f,%d,%d,%d,%.2f,%.2f,",
			data->gps_fix, // Convert bool to int
 8002e40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e42:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
	sprintf(tmp_str, ",%d,%s,%s,%.6f,%c,%.6f,%c,%.2f,%d,%d,%d,%.2f,%.2f,",
 8002e46:	61fb      	str	r3, [r7, #28]
 8002e48:	4b25      	ldr	r3, [pc, #148]	@ (8002ee0 <addGPSData+0x104>)
 8002e4a:	e9d3 8900 	ldrd	r8, r9, [r3]
			tmpDate, tmpTime, latHitory, data->lat_dir, lonHistory,
 8002e4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e50:	7a1b      	ldrb	r3, [r3, #8]
	sprintf(tmp_str, ",%d,%s,%s,%.6f,%c,%.6f,%c,%.2f,%d,%d,%d,%.2f,%.2f,",
 8002e52:	61bb      	str	r3, [r7, #24]
 8002e54:	4b23      	ldr	r3, [pc, #140]	@ (8002ee4 <addGPSData+0x108>)
 8002e56:	e9d3 ab00 	ldrd	sl, fp, [r3]
			data->lon_dir, data->speed, data->heading, data->sat_num, data->alt,
 8002e5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e5c:	7e1b      	ldrb	r3, [r3, #24]
	sprintf(tmp_str, ",%d,%s,%s,%.6f,%c,%.6f,%c,%.2f,%d,%d,%d,%.2f,%.2f,",
 8002e5e:	617b      	str	r3, [r7, #20]
			data->lon_dir, data->speed, data->heading, data->sat_num, data->alt,
 8002e60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e62:	69db      	ldr	r3, [r3, #28]
	sprintf(tmp_str, ",%d,%s,%s,%.6f,%c,%.6f,%c,%.2f,%d,%d,%d,%.2f,%.2f,",
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7fd fb89 	bl	800057c <__aeabi_f2d>
 8002e6a:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002e6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e70:	6a1e      	ldr	r6, [r3, #32]
			data->lon_dir, data->speed, data->heading, data->sat_num, data->alt,
 8002e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e74:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
	sprintf(tmp_str, ",%d,%s,%s,%.6f,%c,%.6f,%c,%.2f,%d,%d,%d,%.2f,%.2f,",
 8002e78:	613b      	str	r3, [r7, #16]
 8002e7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e7c:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8002e7e:	6079      	str	r1, [r7, #4]
			data->PDOP, data->HDOP);
 8002e80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
	sprintf(tmp_str, ",%d,%s,%s,%.6f,%c,%.6f,%c,%.2f,%d,%d,%d,%.2f,%.2f,",
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7fd fb79 	bl	800057c <__aeabi_f2d>
 8002e8a:	4604      	mov	r4, r0
 8002e8c:	460d      	mov	r5, r1
			data->PDOP, data->HDOP);
 8002e8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
	sprintf(tmp_str, ",%d,%s,%s,%.6f,%c,%.6f,%c,%.2f,%d,%d,%d,%.2f,%.2f,",
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7fd fb72 	bl	800057c <__aeabi_f2d>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	460b      	mov	r3, r1
 8002e9c:	e9cd 2312 	strd	r2, r3, [sp, #72]	@ 0x48
 8002ea0:	e9cd 4510 	strd	r4, r5, [sp, #64]	@ 0x40
 8002ea4:	6879      	ldr	r1, [r7, #4]
 8002ea6:	910e      	str	r1, [sp, #56]	@ 0x38
 8002ea8:	6939      	ldr	r1, [r7, #16]
 8002eaa:	910d      	str	r1, [sp, #52]	@ 0x34
 8002eac:	960c      	str	r6, [sp, #48]	@ 0x30
 8002eae:	ed97 7b02 	vldr	d7, [r7, #8]
 8002eb2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8002eb6:	6979      	ldr	r1, [r7, #20]
 8002eb8:	9108      	str	r1, [sp, #32]
 8002eba:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8002ebe:	69b9      	ldr	r1, [r7, #24]
 8002ec0:	9104      	str	r1, [sp, #16]
 8002ec2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec8:	9300      	str	r3, [sp, #0]
 8002eca:	6a3b      	ldr	r3, [r7, #32]
 8002ecc:	69fa      	ldr	r2, [r7, #28]
 8002ece:	4907      	ldr	r1, [pc, #28]	@ (8002eec <addGPSData+0x110>)
 8002ed0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002ed2:	f01b fe51 	bl	801eb78 <siprintf>
}
 8002ed6:	bf00      	nop
 8002ed8:	3734      	adds	r7, #52	@ 0x34
 8002eda:	46bd      	mov	sp, r7
 8002edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ee0:	20000ec0 	.word	0x20000ec0
 8002ee4:	20000ec8 	.word	0x20000ec8
 8002ee8:	080228a0 	.word	0x080228a0
 8002eec:	080228c0 	.word	0x080228c0

08002ef0 <GPSDataCallback>:

void GPSDataCallback(GPSData *gpsData) {
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
	clearBuffer(&L86Data, sizeof(GPSData));
 8002ef8:	2140      	movs	r1, #64	@ 0x40
 8002efa:	4806      	ldr	r0, [pc, #24]	@ (8002f14 <GPSDataCallback+0x24>)
 8002efc:	f7fe fde4 	bl	8001ac8 <clearBuffer>
	memcpy(&L86Data, gpsData, sizeof(GPSData));
 8002f00:	2240      	movs	r2, #64	@ 0x40
 8002f02:	6879      	ldr	r1, [r7, #4]
 8002f04:	4803      	ldr	r0, [pc, #12]	@ (8002f14 <GPSDataCallback+0x24>)
 8002f06:	f01c f906 	bl	801f116 <memcpy>
}
 8002f0a:	bf00      	nop
 8002f0c:	3708      	adds	r7, #8
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	20000ed8 	.word	0x20000ed8

08002f18 <task2>:
void task2() {
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0

	int Flen = strlen(Firmware_Version);
 8002f1e:	483f      	ldr	r0, [pc, #252]	@ (800301c <task2+0x104>)
 8002f20:	f7fd f9c0 	bl	80002a4 <strlen>
 8002f24:	4603      	mov	r3, r0
 8002f26:	607b      	str	r3, [r7, #4]
	if (sendPDDataFlag) {
 8002f28:	4b3d      	ldr	r3, [pc, #244]	@ (8003020 <task2+0x108>)
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d045      	beq.n	8002fbc <task2+0xa4>
		clearBuffer(finalData, sizeof(finalData));
 8002f30:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002f34:	483b      	ldr	r0, [pc, #236]	@ (8003024 <task2+0x10c>)
 8002f36:	f7fe fdc7 	bl	8001ac8 <clearBuffer>
		if (dataQueue.top >= 0) {
 8002f3a:	4b3b      	ldr	r3, [pc, #236]	@ (8003028 <task2+0x110>)
 8002f3c:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8002f40:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	@ 0xc00
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	db39      	blt.n	8002fbc <task2+0xa4>
			pop(&dataQueue, finalData);
 8002f48:	4936      	ldr	r1, [pc, #216]	@ (8003024 <task2+0x10c>)
 8002f4a:	4837      	ldr	r0, [pc, #220]	@ (8003028 <task2+0x110>)
 8002f4c:	f7fe ff70 	bl	8001e30 <pop>

			//send the rest of the data in the dataqueue to history queue
			while (dataQueue.top >= 0) {
 8002f50:	e016      	b.n	8002f80 <task2+0x68>
				clearBuffer(historyData, sizeof(historyData));
 8002f52:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002f56:	4835      	ldr	r0, [pc, #212]	@ (800302c <task2+0x114>)
 8002f58:	f7fe fdb6 	bl	8001ac8 <clearBuffer>
				pop(&dataQueue, historyData);
 8002f5c:	4933      	ldr	r1, [pc, #204]	@ (800302c <task2+0x114>)
 8002f5e:	4832      	ldr	r0, [pc, #200]	@ (8003028 <task2+0x110>)
 8002f60:	f7fe ff66 	bl	8001e30 <pop>
				historyData[20 + Flen] = 'H';
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	3314      	adds	r3, #20
 8002f68:	4a30      	ldr	r2, [pc, #192]	@ (800302c <task2+0x114>)
 8002f6a:	2148      	movs	r1, #72	@ 0x48
 8002f6c:	54d1      	strb	r1, [r2, r3]
				push(&packetHistoryQueue, historyData, strlen(historyData));
 8002f6e:	482f      	ldr	r0, [pc, #188]	@ (800302c <task2+0x114>)
 8002f70:	f7fd f998 	bl	80002a4 <strlen>
 8002f74:	4603      	mov	r3, r0
 8002f76:	461a      	mov	r2, r3
 8002f78:	492c      	ldr	r1, [pc, #176]	@ (800302c <task2+0x114>)
 8002f7a:	482d      	ldr	r0, [pc, #180]	@ (8003030 <task2+0x118>)
 8002f7c:	f7fe ff1a 	bl	8001db4 <push>
			while (dataQueue.top >= 0) {
 8002f80:	4b29      	ldr	r3, [pc, #164]	@ (8003028 <task2+0x110>)
 8002f82:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8002f86:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	@ 0xc00
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	dae1      	bge.n	8002f52 <task2+0x3a>
				//writeL86Data(finalData, strlen(finalData));

			}
			if (!TCP_Send(finalData)) {
 8002f8e:	4825      	ldr	r0, [pc, #148]	@ (8003024 <task2+0x10c>)
 8002f90:	f019 fe50 	bl	801cc34 <TCP_Send>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10d      	bne.n	8002fb6 <task2+0x9e>
				finalData[20 + Flen] = 'H';
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	3314      	adds	r3, #20
 8002f9e:	4a21      	ldr	r2, [pc, #132]	@ (8003024 <task2+0x10c>)
 8002fa0:	2148      	movs	r1, #72	@ 0x48
 8002fa2:	54d1      	strb	r1, [r2, r3]
				push(&packetHistoryQueue, finalData, strlen(finalData));
 8002fa4:	481f      	ldr	r0, [pc, #124]	@ (8003024 <task2+0x10c>)
 8002fa6:	f7fd f97d 	bl	80002a4 <strlen>
 8002faa:	4603      	mov	r3, r0
 8002fac:	461a      	mov	r2, r3
 8002fae:	491d      	ldr	r1, [pc, #116]	@ (8003024 <task2+0x10c>)
 8002fb0:	481f      	ldr	r0, [pc, #124]	@ (8003030 <task2+0x118>)
 8002fb2:	f7fe feff 	bl	8001db4 <push>
				//writeL86Data(finalData, strlen(finalData));

			}

			sendPDDataFlag = false;
 8002fb6:	4b1a      	ldr	r3, [pc, #104]	@ (8003020 <task2+0x108>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	701a      	strb	r2, [r3, #0]
		}
	}

	if (interflag) {
 8002fbc:	4b1d      	ldr	r3, [pc, #116]	@ (8003034 <task2+0x11c>)
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d026      	beq.n	8003012 <task2+0xfa>

		if (packetHistoryQueue.top >= 0) {
 8002fc4:	4b1a      	ldr	r3, [pc, #104]	@ (8003030 <task2+0x118>)
 8002fc6:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8002fca:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	@ 0xc00
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	db1f      	blt.n	8003012 <task2+0xfa>
			clearBuffer(finalData, sizeof(finalData));
 8002fd2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002fd6:	4813      	ldr	r0, [pc, #76]	@ (8003024 <task2+0x10c>)
 8002fd8:	f7fe fd76 	bl	8001ac8 <clearBuffer>
			pop(&packetHistoryQueue, finalData);
 8002fdc:	4911      	ldr	r1, [pc, #68]	@ (8003024 <task2+0x10c>)
 8002fde:	4814      	ldr	r0, [pc, #80]	@ (8003030 <task2+0x118>)
 8002fe0:	f7fe ff26 	bl	8001e30 <pop>
			if (!TCP_Send(finalData)) {
 8002fe4:	480f      	ldr	r0, [pc, #60]	@ (8003024 <task2+0x10c>)
 8002fe6:	f019 fe25 	bl	801cc34 <TCP_Send>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d10d      	bne.n	800300c <task2+0xf4>
				finalData[20 + Flen] = 'H';
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	3314      	adds	r3, #20
 8002ff4:	4a0b      	ldr	r2, [pc, #44]	@ (8003024 <task2+0x10c>)
 8002ff6:	2148      	movs	r1, #72	@ 0x48
 8002ff8:	54d1      	strb	r1, [r2, r3]
				push(&packetHistoryQueue, finalData, strlen(finalData));
 8002ffa:	480a      	ldr	r0, [pc, #40]	@ (8003024 <task2+0x10c>)
 8002ffc:	f7fd f952 	bl	80002a4 <strlen>
 8003000:	4603      	mov	r3, r0
 8003002:	461a      	mov	r2, r3
 8003004:	4907      	ldr	r1, [pc, #28]	@ (8003024 <task2+0x10c>)
 8003006:	480a      	ldr	r0, [pc, #40]	@ (8003030 <task2+0x118>)
 8003008:	f7fe fed4 	bl	8001db4 <push>

				//check for historyqueue overflow

			}

			interflag = false;
 800300c:	4b09      	ldr	r3, [pc, #36]	@ (8003034 <task2+0x11c>)
 800300e:	2200      	movs	r2, #0
 8003010:	701a      	strb	r2, [r3, #0]
		}

	}

}
 8003012:	bf00      	nop
 8003014:	3708      	adds	r7, #8
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	2000001c 	.word	0x2000001c
 8003020:	20012f2d 	.word	0x20012f2d
 8003024:	20000f18 	.word	0x20000f18
 8003028:	20001724 	.word	0x20001724
 800302c:	20001318 	.word	0x20001318
 8003030:	2000a328 	.word	0x2000a328
 8003034:	20012f2c 	.word	0x20012f2c

08003038 <generateData>:

void generateData(char *packetType) {
 8003038:	b590      	push	{r4, r7, lr}
 800303a:	f6ad 2db4 	subw	sp, sp, #2740	@ 0xab4
 800303e:	af00      	add	r7, sp, #0
 8003040:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 8003044:	f6a3 23ac 	subw	r3, r3, #2732	@ 0xaac
 8003048:	6018      	str	r0, [r3, #0]
	memset(mqttString, 0, sizeof(mqttString));
 800304a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800304e:	2100      	movs	r1, #0
 8003050:	48a4      	ldr	r0, [pc, #656]	@ (80032e4 <generateData+0x2ac>)
 8003052:	f01b feed 	bl	801ee30 <memset>
	makeMessageHeader(mqttString, packetType);
 8003056:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 800305a:	f6a3 23ac 	subw	r3, r3, #2732	@ 0xaac
 800305e:	6819      	ldr	r1, [r3, #0]
 8003060:	48a0      	ldr	r0, [pc, #640]	@ (80032e4 <generateData+0x2ac>)
 8003062:	f7ff fe23 	bl	8002cac <makeMessageHeader>
	char tmpTime[7] = { 0 };
 8003066:	2300      	movs	r3, #0
 8003068:	f8c7 3aa0 	str.w	r3, [r7, #2720]	@ 0xaa0
 800306c:	f607 23a4 	addw	r3, r7, #2724	@ 0xaa4
 8003070:	2100      	movs	r1, #0
 8003072:	460a      	mov	r2, r1
 8003074:	801a      	strh	r2, [r3, #0]
 8003076:	460a      	mov	r2, r1
 8003078:	709a      	strb	r2, [r3, #2]
	char tmpDate[9] = { 0 };
 800307a:	2300      	movs	r3, #0
 800307c:	f8c7 3a94 	str.w	r3, [r7, #2708]	@ 0xa94
 8003080:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 8003084:	2200      	movs	r2, #0
 8003086:	601a      	str	r2, [r3, #0]
 8003088:	711a      	strb	r2, [r3, #4]
	getDateTime(tmpDate, tmpTime);
 800308a:	f507 622a 	add.w	r2, r7, #2720	@ 0xaa0
 800308e:	f607 2394 	addw	r3, r7, #2708	@ 0xa94
 8003092:	4611      	mov	r1, r2
 8003094:	4618      	mov	r0, r3
 8003096:	f017 ff39 	bl	801af0c <getDateTime>
//add GPS DATA
	clearBuffer(tmp_str, sizeof(tmp_str));
 800309a:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800309e:	4892      	ldr	r0, [pc, #584]	@ (80032e8 <generateData+0x2b0>)
 80030a0:	f7fe fd12 	bl	8001ac8 <clearBuffer>
	addGPSData(&L86Data, tmp_str, tmpTime, tmpDate);
 80030a4:	f607 2394 	addw	r3, r7, #2708	@ 0xa94
 80030a8:	f507 622a 	add.w	r2, r7, #2720	@ 0xaa0
 80030ac:	498e      	ldr	r1, [pc, #568]	@ (80032e8 <generateData+0x2b0>)
 80030ae:	488f      	ldr	r0, [pc, #572]	@ (80032ec <generateData+0x2b4>)
 80030b0:	f7ff fe94 	bl	8002ddc <addGPSData>
	strcat(mqttString, tmp_str);
 80030b4:	498c      	ldr	r1, [pc, #560]	@ (80032e8 <generateData+0x2b0>)
 80030b6:	488b      	ldr	r0, [pc, #556]	@ (80032e4 <generateData+0x2ac>)
 80030b8:	f01b fec2 	bl	801ee40 <strcat>

	memset(tmp_str, 0, sizeof(tmp_str));
 80030bc:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80030c0:	2100      	movs	r1, #0
 80030c2:	4889      	ldr	r0, [pc, #548]	@ (80032e8 <generateData+0x2b0>)
 80030c4:	f01b feb4 	bl	801ee30 <memset>
	inputVoltage = 0;
 80030c8:	4b89      	ldr	r3, [pc, #548]	@ (80032f0 <generateData+0x2b8>)
 80030ca:	f04f 0200 	mov.w	r2, #0
 80030ce:	601a      	str	r2, [r3, #0]
	vehicalBatteryStatus = false;
 80030d0:	4b88      	ldr	r3, [pc, #544]	@ (80032f4 <generateData+0x2bc>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	701a      	strb	r2, [r3, #0]
	if (getInputVoltage(&inputVoltage)) {
 80030d6:	4886      	ldr	r0, [pc, #536]	@ (80032f0 <generateData+0x2b8>)
 80030d8:	f017 fdda 	bl	801ac90 <getInputVoltage>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d00c      	beq.n	80030fc <generateData+0xc4>
		if (inputVoltage > 7) {
 80030e2:	4b83      	ldr	r3, [pc, #524]	@ (80032f0 <generateData+0x2b8>)
 80030e4:	edd3 7a00 	vldr	s15, [r3]
 80030e8:	eeb1 7a0c 	vmov.f32	s14, #28	@ 0x40e00000  7.0
 80030ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030f4:	dd02      	ble.n	80030fc <generateData+0xc4>
			vehicalBatteryStatus = true;
 80030f6:	4b7f      	ldr	r3, [pc, #508]	@ (80032f4 <generateData+0x2bc>)
 80030f8:	2201      	movs	r2, #1
 80030fa:	701a      	strb	r2, [r3, #0]
		}
	}
	internalVoltage = 0;
 80030fc:	4b7e      	ldr	r3, [pc, #504]	@ (80032f8 <generateData+0x2c0>)
 80030fe:	f04f 0200 	mov.w	r2, #0
 8003102:	601a      	str	r2, [r3, #0]
	getInternalBattery(&internalVoltage);
 8003104:	487c      	ldr	r0, [pc, #496]	@ (80032f8 <generateData+0x2c0>)
 8003106:	f017 fe1b 	bl	801ad40 <getInternalBattery>
	addGSMData(tmp_str);
 800310a:	4877      	ldr	r0, [pc, #476]	@ (80032e8 <generateData+0x2b0>)
 800310c:	f7ff fdfa 	bl	8002d04 <addGSMData>
	strcat(mqttString, tmp_str);
 8003110:	4975      	ldr	r1, [pc, #468]	@ (80032e8 <generateData+0x2b0>)
 8003112:	4874      	ldr	r0, [pc, #464]	@ (80032e4 <generateData+0x2ac>)
 8003114:	f01b fe94 	bl	801ee40 <strcat>
	memset(tmp_str, 0, sizeof(tmp_str));
 8003118:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800311c:	2100      	movs	r1, #0
 800311e:	4872      	ldr	r0, [pc, #456]	@ (80032e8 <generateData+0x2b0>)
 8003120:	f01b fe86 	bl	801ee30 <memset>
	Map copyCanData;
	getCANData(&copyCanData);
 8003124:	f607 03ec 	addw	r3, r7, #2284	@ 0x8ec
 8003128:	4618      	mov	r0, r3
 800312a:	f7fd ff89 	bl	8001040 <getCANData>
	char canStr[NUM_PID * 8 * 8] = { };
 800312e:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 8003132:	f6a3 2384 	subw	r3, r3, #2692	@ 0xa84
 8003136:	2200      	movs	r2, #0
 8003138:	601a      	str	r2, [r3, #0]
 800313a:	3304      	adds	r3, #4
 800313c:	f640 02bc 	movw	r2, #2236	@ 0x8bc
 8003140:	2100      	movs	r1, #0
 8003142:	4618      	mov	r0, r3
 8003144:	f01b fe74 	bl	801ee30 <memset>
	for (int i = 0; i < copyCanData.size; i++) {
 8003148:	2300      	movs	r3, #0
 800314a:	f8c7 3aac 	str.w	r3, [r7, #2732]	@ 0xaac
 800314e:	e073      	b.n	8003238 <generateData+0x200>
		char tmpCan[32] = { };
 8003150:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 8003154:	f6a3 23a4 	subw	r3, r3, #2724	@ 0xaa4
 8003158:	2200      	movs	r2, #0
 800315a:	601a      	str	r2, [r3, #0]
 800315c:	3304      	adds	r3, #4
 800315e:	2200      	movs	r2, #0
 8003160:	601a      	str	r2, [r3, #0]
 8003162:	605a      	str	r2, [r3, #4]
 8003164:	609a      	str	r2, [r3, #8]
 8003166:	60da      	str	r2, [r3, #12]
 8003168:	611a      	str	r2, [r3, #16]
 800316a:	615a      	str	r2, [r3, #20]
 800316c:	619a      	str	r2, [r3, #24]
		sprintf(tmpCan, "%04X:", copyCanData.pairs[i].key);
 800316e:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 8003172:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 8003176:	f8d7 2aac 	ldr.w	r2, [r7, #2732]	@ 0xaac
 800317a:	4613      	mov	r3, r2
 800317c:	005b      	lsls	r3, r3, #1
 800317e:	4413      	add	r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	440b      	add	r3, r1
 8003184:	881b      	ldrh	r3, [r3, #0]
 8003186:	461a      	mov	r2, r3
 8003188:	f107 030c 	add.w	r3, r7, #12
 800318c:	495b      	ldr	r1, [pc, #364]	@ (80032fc <generateData+0x2c4>)
 800318e:	4618      	mov	r0, r3
 8003190:	f01b fcf2 	bl	801eb78 <siprintf>
		for (uint8_t x = 0; x < 8; x++)
 8003194:	2300      	movs	r3, #0
 8003196:	f887 3aab 	strb.w	r3, [r7, #2731]	@ 0xaab
 800319a:	e022      	b.n	80031e2 <generateData+0x1aa>
			sprintf(tmpCan + strlen(tmpCan), "%02X",
 800319c:	f107 030c 	add.w	r3, r7, #12
 80031a0:	4618      	mov	r0, r3
 80031a2:	f7fd f87f 	bl	80002a4 <strlen>
 80031a6:	4602      	mov	r2, r0
 80031a8:	f107 030c 	add.w	r3, r7, #12
 80031ac:	189c      	adds	r4, r3, r2
					copyCanData.pairs[i].value[x]);
 80031ae:	f897 1aab 	ldrb.w	r1, [r7, #2731]	@ 0xaab
 80031b2:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 80031b6:	f5a3 70e2 	sub.w	r0, r3, #452	@ 0x1c4
 80031ba:	f8d7 2aac 	ldr.w	r2, [r7, #2732]	@ 0xaac
 80031be:	4613      	mov	r3, r2
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	4413      	add	r3, r2
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	4403      	add	r3, r0
 80031c8:	440b      	add	r3, r1
 80031ca:	3302      	adds	r3, #2
 80031cc:	781b      	ldrb	r3, [r3, #0]
			sprintf(tmpCan + strlen(tmpCan), "%02X",
 80031ce:	461a      	mov	r2, r3
 80031d0:	494b      	ldr	r1, [pc, #300]	@ (8003300 <generateData+0x2c8>)
 80031d2:	4620      	mov	r0, r4
 80031d4:	f01b fcd0 	bl	801eb78 <siprintf>
		for (uint8_t x = 0; x < 8; x++)
 80031d8:	f897 3aab 	ldrb.w	r3, [r7, #2731]	@ 0xaab
 80031dc:	3301      	adds	r3, #1
 80031de:	f887 3aab 	strb.w	r3, [r7, #2731]	@ 0xaab
 80031e2:	f897 3aab 	ldrb.w	r3, [r7, #2731]	@ 0xaab
 80031e6:	2b07      	cmp	r3, #7
 80031e8:	d9d8      	bls.n	800319c <generateData+0x164>
		if (i + 1 != copyCanData.size) {
 80031ea:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	@ 0xaac
 80031ee:	1c5a      	adds	r2, r3, #1
 80031f0:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 80031f4:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80031f8:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d00e      	beq.n	800321e <generateData+0x1e6>
			strcat(tmpCan, ";");
 8003200:	f107 030c 	add.w	r3, r7, #12
 8003204:	4618      	mov	r0, r3
 8003206:	f7fd f84d 	bl	80002a4 <strlen>
 800320a:	4603      	mov	r3, r0
 800320c:	461a      	mov	r2, r3
 800320e:	f107 030c 	add.w	r3, r7, #12
 8003212:	4413      	add	r3, r2
 8003214:	493b      	ldr	r1, [pc, #236]	@ (8003304 <generateData+0x2cc>)
 8003216:	461a      	mov	r2, r3
 8003218:	460b      	mov	r3, r1
 800321a:	881b      	ldrh	r3, [r3, #0]
 800321c:	8013      	strh	r3, [r2, #0]
		}
		strcat(canStr, tmpCan);
 800321e:	f107 020c 	add.w	r2, r7, #12
 8003222:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003226:	4611      	mov	r1, r2
 8003228:	4618      	mov	r0, r3
 800322a:	f01b fe09 	bl	801ee40 <strcat>
	for (int i = 0; i < copyCanData.size; i++) {
 800322e:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	@ 0xaac
 8003232:	3301      	adds	r3, #1
 8003234:	f8c7 3aac 	str.w	r3, [r7, #2732]	@ 0xaac
 8003238:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 800323c:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003240:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
 8003244:	f8d7 2aac 	ldr.w	r2, [r7, #2732]	@ 0xaac
 8003248:	429a      	cmp	r2, r3
 800324a:	db81      	blt.n	8003150 <generateData+0x118>
	}
	strcat(mqttString, canStr);
 800324c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003250:	4619      	mov	r1, r3
 8003252:	4824      	ldr	r0, [pc, #144]	@ (80032e4 <generateData+0x2ac>)
 8003254:	f01b fdf4 	bl	801ee40 <strcat>
	strcat(mqttString, ",()"); //OTA
 8003258:	4822      	ldr	r0, [pc, #136]	@ (80032e4 <generateData+0x2ac>)
 800325a:	f7fd f823 	bl	80002a4 <strlen>
 800325e:	4603      	mov	r3, r0
 8003260:	461a      	mov	r2, r3
 8003262:	4b20      	ldr	r3, [pc, #128]	@ (80032e4 <generateData+0x2ac>)
 8003264:	4413      	add	r3, r2
 8003266:	4a28      	ldr	r2, [pc, #160]	@ (8003308 <generateData+0x2d0>)
 8003268:	6810      	ldr	r0, [r2, #0]
 800326a:	6018      	str	r0, [r3, #0]
	sprintf(mqttString + strlen(mqttString), ",%d", FRAME_NUMBER);
 800326c:	481d      	ldr	r0, [pc, #116]	@ (80032e4 <generateData+0x2ac>)
 800326e:	f7fd f819 	bl	80002a4 <strlen>
 8003272:	4603      	mov	r3, r0
 8003274:	4a1b      	ldr	r2, [pc, #108]	@ (80032e4 <generateData+0x2ac>)
 8003276:	4413      	add	r3, r2
 8003278:	4a24      	ldr	r2, [pc, #144]	@ (800330c <generateData+0x2d4>)
 800327a:	6812      	ldr	r2, [r2, #0]
 800327c:	4924      	ldr	r1, [pc, #144]	@ (8003310 <generateData+0x2d8>)
 800327e:	4618      	mov	r0, r3
 8003280:	f01b fc7a 	bl	801eb78 <siprintf>
	uint8_t checksum = Calculate_CRC8(&mqttString[1], strlen(mqttString) - 1);
 8003284:	4817      	ldr	r0, [pc, #92]	@ (80032e4 <generateData+0x2ac>)
 8003286:	f7fd f80d 	bl	80002a4 <strlen>
 800328a:	4603      	mov	r3, r0
 800328c:	3b01      	subs	r3, #1
 800328e:	4619      	mov	r1, r3
 8003290:	4820      	ldr	r0, [pc, #128]	@ (8003314 <generateData+0x2dc>)
 8003292:	f014 fc73 	bl	8017b7c <Calculate_CRC8>
 8003296:	4603      	mov	r3, r0
 8003298:	f887 3aaa 	strb.w	r3, [r7, #2730]	@ 0xaaa
	sprintf(mqttString + strlen(mqttString), "*%02X", checksum);
 800329c:	4811      	ldr	r0, [pc, #68]	@ (80032e4 <generateData+0x2ac>)
 800329e:	f7fd f801 	bl	80002a4 <strlen>
 80032a2:	4603      	mov	r3, r0
 80032a4:	4a0f      	ldr	r2, [pc, #60]	@ (80032e4 <generateData+0x2ac>)
 80032a6:	4413      	add	r3, r2
 80032a8:	f897 2aaa 	ldrb.w	r2, [r7, #2730]	@ 0xaaa
 80032ac:	491a      	ldr	r1, [pc, #104]	@ (8003318 <generateData+0x2e0>)
 80032ae:	4618      	mov	r0, r3
 80032b0:	f01b fc62 	bl	801eb78 <siprintf>
	printc(1000, "Data To Send\n%s\n", mqttString);
 80032b4:	4a0b      	ldr	r2, [pc, #44]	@ (80032e4 <generateData+0x2ac>)
 80032b6:	4919      	ldr	r1, [pc, #100]	@ (800331c <generateData+0x2e4>)
 80032b8:	20e8      	movs	r0, #232	@ 0xe8
 80032ba:	f7fe fbad 	bl	8001a18 <printc>
	//enqueue(&dataQueue, mqttString);
	push(&dataQueue, mqttString, strlen(mqttString));
 80032be:	4809      	ldr	r0, [pc, #36]	@ (80032e4 <generateData+0x2ac>)
 80032c0:	f7fc fff0 	bl	80002a4 <strlen>
 80032c4:	4603      	mov	r3, r0
 80032c6:	461a      	mov	r2, r3
 80032c8:	4906      	ldr	r1, [pc, #24]	@ (80032e4 <generateData+0x2ac>)
 80032ca:	4815      	ldr	r0, [pc, #84]	@ (8003320 <generateData+0x2e8>)
 80032cc:	f7fe fd72 	bl	8001db4 <push>
	FRAME_NUMBER++;
 80032d0:	4b0e      	ldr	r3, [pc, #56]	@ (800330c <generateData+0x2d4>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	3301      	adds	r3, #1
 80032d6:	4a0d      	ldr	r2, [pc, #52]	@ (800330c <generateData+0x2d4>)
 80032d8:	6013      	str	r3, [r2, #0]

}
 80032da:	bf00      	nop
 80032dc:	f607 27b4 	addw	r7, r7, #2740	@ 0xab4
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd90      	pop	{r4, r7, pc}
 80032e4:	20013200 	.word	0x20013200
 80032e8:	2001300c 	.word	0x2001300c
 80032ec:	20000ed8 	.word	0x20000ed8
 80032f0:	20012f34 	.word	0x20012f34
 80032f4:	20012f3c 	.word	0x20012f3c
 80032f8:	20012f38 	.word	0x20012f38
 80032fc:	080228f4 	.word	0x080228f4
 8003300:	080228fc 	.word	0x080228fc
 8003304:	08022904 	.word	0x08022904
 8003308:	08022908 	.word	0x08022908
 800330c:	20000004 	.word	0x20000004
 8003310:	0802290c 	.word	0x0802290c
 8003314:	20013201 	.word	0x20013201
 8003318:	08022910 	.word	0x08022910
 800331c:	08022918 	.word	0x08022918
 8003320:	20001724 	.word	0x20001724

08003324 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim6) {
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]

	if (htim6->Instance == TIM6) {
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a3e      	ldr	r2, [pc, #248]	@ (800342c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d109      	bne.n	800334a <HAL_TIM_PeriodElapsedCallback+0x26>
		seconds++;
 8003336:	4b3e      	ldr	r3, [pc, #248]	@ (8003430 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	3301      	adds	r3, #1
 800333c:	4a3c      	ldr	r2, [pc, #240]	@ (8003430 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800333e:	6013      	str	r3, [r2, #0]
		nsam_seconds++;
 8003340:	4b3c      	ldr	r3, [pc, #240]	@ (8003434 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	3301      	adds	r3, #1
 8003346:	4a3b      	ldr	r2, [pc, #236]	@ (8003434 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8003348:	6013      	str	r3, [r2, #0]
	}

	blinkLed(seconds);
 800334a:	4b39      	ldr	r3, [pc, #228]	@ (8003430 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4618      	mov	r0, r3
 8003350:	f018 f82e 	bl	801b3b0 <blinkLed>
	if (getSleepStatus())
 8003354:	f017 fc70 	bl	801ac38 <getSleepStatus>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d162      	bne.n	8003424 <HAL_TIM_PeriodElapsedCallback+0x100>
		return;
//	Setting Up sampling frequency if we have latitude and longitude
	if ((seconds / (100 * SAMPLIMG_FREQUENCY)) > 0) {
 800335e:	4b34      	ldr	r3, [pc, #208]	@ (8003430 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	4b35      	ldr	r3, [pc, #212]	@ (8003438 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2164      	movs	r1, #100	@ 0x64
 8003368:	fb01 f303 	mul.w	r3, r1, r3
 800336c:	fb92 f3f3 	sdiv	r3, r2, r3
 8003370:	2b00      	cmp	r3, #0
 8003372:	dd2a      	ble.n	80033ca <HAL_TIM_PeriodElapsedCallback+0xa6>
		//generateData("NR");
		if (!getUpdateStatus()) {
 8003374:	f014 fc48 	bl	8017c08 <getUpdateStatus>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d106      	bne.n	800338c <HAL_TIM_PeriodElapsedCallback+0x68>
			ledHendler.gpsLedState = HEIGH;
 800337e:	4b2f      	ldr	r3, [pc, #188]	@ (800343c <HAL_TIM_PeriodElapsedCallback+0x118>)
 8003380:	2200      	movs	r2, #0
 8003382:	701a      	strb	r2, [r3, #0]
			generateData("NR");
 8003384:	482e      	ldr	r0, [pc, #184]	@ (8003440 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8003386:	f7ff fe57 	bl	8003038 <generateData>
 800338a:	e002      	b.n	8003392 <HAL_TIM_PeriodElapsedCallback+0x6e>
		} else {
			ledHendler.gpsLedState = LOW;
 800338c:	4b2b      	ldr	r3, [pc, #172]	@ (800343c <HAL_TIM_PeriodElapsedCallback+0x118>)
 800338e:	2201      	movs	r2, #1
 8003390:	701a      	strb	r2, [r3, #0]

		}
		seconds = 0;
 8003392:	4b27      	ldr	r3, [pc, #156]	@ (8003430 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8003394:	2200      	movs	r2, #0
 8003396:	601a      	str	r2, [r3, #0]
		if (!getIgnition()) {
 8003398:	f017 fd2e 	bl	801adf8 <getIgnition>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d110      	bne.n	80033c4 <HAL_TIM_PeriodElapsedCallback+0xa0>
			if (sleepcount == 0 && SendIFDataFlag) {
 80033a2:	4b28      	ldr	r3, [pc, #160]	@ (8003444 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d106      	bne.n	80033b8 <HAL_TIM_PeriodElapsedCallback+0x94>
 80033aa:	4b27      	ldr	r3, [pc, #156]	@ (8003448 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d002      	beq.n	80033b8 <HAL_TIM_PeriodElapsedCallback+0x94>
				generateData("IF");
 80033b2:	4826      	ldr	r0, [pc, #152]	@ (800344c <HAL_TIM_PeriodElapsedCallback+0x128>)
 80033b4:	f7ff fe40 	bl	8003038 <generateData>
				SendIFDataFlag == false;
			}
			sleepcount++;
 80033b8:	4b22      	ldr	r3, [pc, #136]	@ (8003444 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	3301      	adds	r3, #1
 80033be:	4a21      	ldr	r2, [pc, #132]	@ (8003444 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80033c0:	6013      	str	r3, [r2, #0]
 80033c2:	e002      	b.n	80033ca <HAL_TIM_PeriodElapsedCallback+0xa6>
		} else {
			sleepcount = 0;
 80033c4:	4b1f      	ldr	r3, [pc, #124]	@ (8003444 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	601a      	str	r2, [r3, #0]
			SendIFDataFlag == true;
		}
	}
	//gen data greater than, right now considering same sampling freq
	if ((nsam_seconds / (100 * SAMPLIMG_FREQUENCY)) > 0) {
 80033ca:	4b1a      	ldr	r3, [pc, #104]	@ (8003434 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	4b1a      	ldr	r3, [pc, #104]	@ (8003438 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2164      	movs	r1, #100	@ 0x64
 80033d4:	fb01 f303 	mul.w	r3, r1, r3
 80033d8:	fb92 f3f3 	sdiv	r3, r2, r3
 80033dc:	2b00      	cmp	r3, #0
 80033de:	dd08      	ble.n	80033f2 <HAL_TIM_PeriodElapsedCallback+0xce>
		sendPDDataFlag = true;
 80033e0:	4b1b      	ldr	r3, [pc, #108]	@ (8003450 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80033e2:	2201      	movs	r2, #1
 80033e4:	701a      	strb	r2, [r3, #0]
		interflag = false;
 80033e6:	4b1b      	ldr	r3, [pc, #108]	@ (8003454 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	701a      	strb	r2, [r3, #0]
		nsam_seconds = 0;
 80033ec:	4b11      	ldr	r3, [pc, #68]	@ (8003434 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	601a      	str	r2, [r3, #0]
	}
	if (!((nsam_seconds > ((SAMPLIMG_FREQUENCY - 3) * 100)) || (sendPDDataFlag))) {
 80033f2:	4b11      	ldr	r3, [pc, #68]	@ (8003438 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	3b03      	subs	r3, #3
 80033f8:	2264      	movs	r2, #100	@ 0x64
 80033fa:	fb03 f202 	mul.w	r2, r3, r2
 80033fe:	4b0d      	ldr	r3, [pc, #52]	@ (8003434 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	429a      	cmp	r2, r3
 8003404:	db0a      	blt.n	800341c <HAL_TIM_PeriodElapsedCallback+0xf8>
 8003406:	4b12      	ldr	r3, [pc, #72]	@ (8003450 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	f083 0301 	eor.w	r3, r3, #1
 800340e:	b2db      	uxtb	r3, r3
 8003410:	2b00      	cmp	r3, #0
 8003412:	d003      	beq.n	800341c <HAL_TIM_PeriodElapsedCallback+0xf8>
		interflag = true;
 8003414:	4b0f      	ldr	r3, [pc, #60]	@ (8003454 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8003416:	2201      	movs	r2, #1
 8003418:	701a      	strb	r2, [r3, #0]
 800341a:	e004      	b.n	8003426 <HAL_TIM_PeriodElapsedCallback+0x102>
	} else {
		interflag = false;
 800341c:	4b0d      	ldr	r3, [pc, #52]	@ (8003454 <HAL_TIM_PeriodElapsedCallback+0x130>)
 800341e:	2200      	movs	r2, #0
 8003420:	701a      	strb	r2, [r3, #0]
 8003422:	e000      	b.n	8003426 <HAL_TIM_PeriodElapsedCallback+0x102>
		return;
 8003424:	bf00      	nop
	}

}
 8003426:	3708      	adds	r7, #8
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}
 800342c:	40001000 	.word	0x40001000
 8003430:	20000eb4 	.word	0x20000eb4
 8003434:	20000eb8 	.word	0x20000eb8
 8003438:	20000008 	.word	0x20000008
 800343c:	200000a4 	.word	0x200000a4
 8003440:	0802292c 	.word	0x0802292c
 8003444:	20000ed4 	.word	0x20000ed4
 8003448:	20001720 	.word	0x20001720
 800344c:	08022930 	.word	0x08022930
 8003450:	20012f2d 	.word	0x20012f2d
 8003454:	20012f2c 	.word	0x20012f2c

08003458 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]

	if (huart->Instance == UART5) {
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a04      	ldr	r2, [pc, #16]	@ (8003478 <HAL_UART_RxCpltCallback+0x20>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d101      	bne.n	800346e <HAL_UART_RxCpltCallback+0x16>
		L86_RxCpltCallback();
 800346a:	f019 f87d 	bl	801c568 <L86_RxCpltCallback>
	} else if (huart->Instance == USART1) {
		void E200_RXCpltCallback();
	}
}
 800346e:	bf00      	nop
 8003470:	3708      	adds	r7, #8
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	40005000 	.word	0x40005000

0800347c <HAL_UART_RxHalfCpltCallback>:
void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart) {
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
	if (huart->Instance == UART5) {
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a08      	ldr	r2, [pc, #32]	@ (80034ac <HAL_UART_RxHalfCpltCallback+0x30>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d102      	bne.n	8003494 <HAL_UART_RxHalfCpltCallback+0x18>
		L86_RxHalfCpltCallback();
 800348e:	f019 f84f 	bl	801c530 <L86_RxHalfCpltCallback>
	} else if (huart->Instance == USART1) {
		E200_RxHAlfCpltCallback();
	}
}
 8003492:	e006      	b.n	80034a2 <HAL_UART_RxHalfCpltCallback+0x26>
	} else if (huart->Instance == USART1) {
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a05      	ldr	r2, [pc, #20]	@ (80034b0 <HAL_UART_RxHalfCpltCallback+0x34>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d101      	bne.n	80034a2 <HAL_UART_RxHalfCpltCallback+0x26>
		E200_RxHAlfCpltCallback();
 800349e:	f7fe fa51 	bl	8001944 <E200_RxHAlfCpltCallback>
}
 80034a2:	bf00      	nop
 80034a4:	3708      	adds	r7, #8
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	40005000 	.word	0x40005000
 80034b0:	40013800 	.word	0x40013800

080034b4 <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	460b      	mov	r3, r1
 80034be:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == UART5) {
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a0c      	ldr	r2, [pc, #48]	@ (80034f8 <HAL_UARTEx_RxEventCallback+0x44>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d012      	beq.n	80034f0 <HAL_UARTEx_RxEventCallback+0x3c>
//			L86_RxCpltCallback();
	} else if (huart->Instance == USART1) {
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a0b      	ldr	r2, [pc, #44]	@ (80034fc <HAL_UARTEx_RxEventCallback+0x48>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d104      	bne.n	80034de <HAL_UARTEx_RxEventCallback+0x2a>
		Ec200_RxEventCallback(Size);
 80034d4:	887b      	ldrh	r3, [r7, #2]
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7fe fa42 	bl	8001960 <Ec200_RxEventCallback>
	} else if (huart->Instance == USART6) {
		print_RxEventCallback(Size);
	}

}
 80034dc:	e008      	b.n	80034f0 <HAL_UARTEx_RxEventCallback+0x3c>
	} else if (huart->Instance == USART6) {
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a07      	ldr	r2, [pc, #28]	@ (8003500 <HAL_UARTEx_RxEventCallback+0x4c>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d103      	bne.n	80034f0 <HAL_UARTEx_RxEventCallback+0x3c>
		print_RxEventCallback(Size);
 80034e8:	887b      	ldrh	r3, [r7, #2]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7fe fb90 	bl	8001c10 <print_RxEventCallback>
}
 80034f0:	bf00      	nop
 80034f2:	3708      	adds	r7, #8
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	40005000 	.word	0x40005000
 80034fc:	40013800 	.word	0x40013800
 8003500:	40006400 	.word	0x40006400

08003504 <setSampling>:
void setSampling(int sampling) {
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
	SAMPLIMG_FREQUENCY = sampling;
 800350c:	4a04      	ldr	r2, [pc, #16]	@ (8003520 <setSampling+0x1c>)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6013      	str	r3, [r2, #0]
}
 8003512:	bf00      	nop
 8003514:	370c      	adds	r7, #12
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	20000008 	.word	0x20000008

08003524 <Check_USMS>:

void Check_USMS() {
 8003524:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003528:	b086      	sub	sp, #24
 800352a:	af00      	add	r7, sp, #0
	char CP_Data[8] = { 0 };
 800352c:	2300      	movs	r3, #0
 800352e:	613b      	str	r3, [r7, #16]
 8003530:	2300      	movs	r3, #0
 8003532:	617b      	str	r3, [r7, #20]
	char CD_Data[8] = { 0 };
 8003534:	2300      	movs	r3, #0
 8003536:	60bb      	str	r3, [r7, #8]
 8003538:	2300      	movs	r3, #0
 800353a:	60fb      	str	r3, [r7, #12]
	char Sp_Data[8] = { 0 };
 800353c:	2300      	movs	r3, #0
 800353e:	603b      	str	r3, [r7, #0]
 8003540:	2300      	movs	r3, #0
 8003542:	607b      	str	r3, [r7, #4]
	FLASH_Read_Buff(Current_App_LOC, CP_Data, 8);
 8003544:	f107 0310 	add.w	r3, r7, #16
 8003548:	2208      	movs	r2, #8
 800354a:	4619      	mov	r1, r3
 800354c:	4816      	ldr	r0, [pc, #88]	@ (80035a8 <Check_USMS+0x84>)
 800354e:	f013 f86f 	bl	8016630 <FLASH_Read_Buff>
	FLASH_Read_Buff(Current_App_LOC + 16, CD_Data, 8);
 8003552:	f107 0308 	add.w	r3, r7, #8
 8003556:	2208      	movs	r2, #8
 8003558:	4619      	mov	r1, r3
 800355a:	4814      	ldr	r0, [pc, #80]	@ (80035ac <Check_USMS+0x88>)
 800355c:	f013 f868 	bl	8016630 <FLASH_Read_Buff>
	FLASH_Read_Buff(Current_App_LOC + 32, Sp_Data, 8);
 8003560:	463b      	mov	r3, r7
 8003562:	2208      	movs	r2, #8
 8003564:	4619      	mov	r1, r3
 8003566:	4812      	ldr	r0, [pc, #72]	@ (80035b0 <Check_USMS+0x8c>)
 8003568:	f013 f862 	bl	8016630 <FLASH_Read_Buff>
	CP = CP_Data[0];
 800356c:	7c3b      	ldrb	r3, [r7, #16]
 800356e:	b2db      	uxtb	r3, r3
 8003570:	2200      	movs	r2, #0
 8003572:	469a      	mov	sl, r3
 8003574:	4693      	mov	fp, r2
 8003576:	4b0f      	ldr	r3, [pc, #60]	@ (80035b4 <Check_USMS+0x90>)
 8003578:	e9c3 ab00 	strd	sl, fp, [r3]
	CD = CD_Data[0];
 800357c:	7a3b      	ldrb	r3, [r7, #8]
 800357e:	b2db      	uxtb	r3, r3
 8003580:	2200      	movs	r2, #0
 8003582:	4698      	mov	r8, r3
 8003584:	4691      	mov	r9, r2
 8003586:	4b0c      	ldr	r3, [pc, #48]	@ (80035b8 <Check_USMS+0x94>)
 8003588:	e9c3 8900 	strd	r8, r9, [r3]
	SP = Sp_Data[0];
 800358c:	783b      	ldrb	r3, [r7, #0]
 800358e:	b2db      	uxtb	r3, r3
 8003590:	2200      	movs	r2, #0
 8003592:	461c      	mov	r4, r3
 8003594:	4615      	mov	r5, r2
 8003596:	4b09      	ldr	r3, [pc, #36]	@ (80035bc <Check_USMS+0x98>)
 8003598:	e9c3 4500 	strd	r4, r5, [r3]
}
 800359c:	bf00      	nop
 800359e:	3718      	adds	r7, #24
 80035a0:	46bd      	mov	sp, r7
 80035a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035a6:	bf00      	nop
 80035a8:	08168000 	.word	0x08168000
 80035ac:	08168010 	.word	0x08168010
 80035b0:	08168020 	.word	0x08168020
 80035b4:	200139b0 	.word	0x200139b0
 80035b8:	200139b8 	.word	0x200139b8
 80035bc:	20001718 	.word	0x20001718

080035c0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b088      	sub	sp, #32
 80035c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80035c6:	463b      	mov	r3, r7
 80035c8:	2220      	movs	r2, #32
 80035ca:	2100      	movs	r1, #0
 80035cc:	4618      	mov	r0, r3
 80035ce:	f01b fc2f 	bl	801ee30 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80035d2:	4b2b      	ldr	r3, [pc, #172]	@ (8003680 <MX_ADC1_Init+0xc0>)
 80035d4:	4a2b      	ldr	r2, [pc, #172]	@ (8003684 <MX_ADC1_Init+0xc4>)
 80035d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80035d8:	4b29      	ldr	r3, [pc, #164]	@ (8003680 <MX_ADC1_Init+0xc0>)
 80035da:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80035de:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80035e0:	4b27      	ldr	r3, [pc, #156]	@ (8003680 <MX_ADC1_Init+0xc0>)
 80035e2:	2200      	movs	r2, #0
 80035e4:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80035e6:	4b26      	ldr	r3, [pc, #152]	@ (8003680 <MX_ADC1_Init+0xc0>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80035ec:	4b24      	ldr	r3, [pc, #144]	@ (8003680 <MX_ADC1_Init+0xc0>)
 80035ee:	2200      	movs	r2, #0
 80035f0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80035f2:	4b23      	ldr	r3, [pc, #140]	@ (8003680 <MX_ADC1_Init+0xc0>)
 80035f4:	2204      	movs	r2, #4
 80035f6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80035f8:	4b21      	ldr	r3, [pc, #132]	@ (8003680 <MX_ADC1_Init+0xc0>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80035fe:	4b20      	ldr	r3, [pc, #128]	@ (8003680 <MX_ADC1_Init+0xc0>)
 8003600:	2200      	movs	r2, #0
 8003602:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8003604:	4b1e      	ldr	r3, [pc, #120]	@ (8003680 <MX_ADC1_Init+0xc0>)
 8003606:	2201      	movs	r2, #1
 8003608:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800360a:	4b1d      	ldr	r3, [pc, #116]	@ (8003680 <MX_ADC1_Init+0xc0>)
 800360c:	2200      	movs	r2, #0
 800360e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003612:	4b1b      	ldr	r3, [pc, #108]	@ (8003680 <MX_ADC1_Init+0xc0>)
 8003614:	2200      	movs	r2, #0
 8003616:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003618:	4b19      	ldr	r3, [pc, #100]	@ (8003680 <MX_ADC1_Init+0xc0>)
 800361a:	2200      	movs	r2, #0
 800361c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800361e:	4b18      	ldr	r3, [pc, #96]	@ (8003680 <MX_ADC1_Init+0xc0>)
 8003620:	2200      	movs	r2, #0
 8003622:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8003626:	4b16      	ldr	r3, [pc, #88]	@ (8003680 <MX_ADC1_Init+0xc0>)
 8003628:	2200      	movs	r2, #0
 800362a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800362c:	4b14      	ldr	r3, [pc, #80]	@ (8003680 <MX_ADC1_Init+0xc0>)
 800362e:	2200      	movs	r2, #0
 8003630:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8003632:	4b13      	ldr	r3, [pc, #76]	@ (8003680 <MX_ADC1_Init+0xc0>)
 8003634:	2200      	movs	r2, #0
 8003636:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800363a:	4811      	ldr	r0, [pc, #68]	@ (8003680 <MX_ADC1_Init+0xc0>)
 800363c:	f002 fc98 	bl	8005f70 <HAL_ADC_Init>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d001      	beq.n	800364a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8003646:	f001 f89a 	bl	800477e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800364a:	4b0f      	ldr	r3, [pc, #60]	@ (8003688 <MX_ADC1_Init+0xc8>)
 800364c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800364e:	2306      	movs	r3, #6
 8003650:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8003652:	2300      	movs	r3, #0
 8003654:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003656:	237f      	movs	r3, #127	@ 0x7f
 8003658:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800365a:	2304      	movs	r3, #4
 800365c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800365e:	2300      	movs	r3, #0
 8003660:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003662:	463b      	mov	r3, r7
 8003664:	4619      	mov	r1, r3
 8003666:	4806      	ldr	r0, [pc, #24]	@ (8003680 <MX_ADC1_Init+0xc0>)
 8003668:	f002 ffaa 	bl	80065c0 <HAL_ADC_ConfigChannel>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d001      	beq.n	8003676 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8003672:	f001 f884 	bl	800477e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003676:	bf00      	nop
 8003678:	3720      	adds	r7, #32
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	20013854 	.word	0x20013854
 8003684:	42028000 	.word	0x42028000
 8003688:	04300002 	.word	0x04300002

0800368c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b088      	sub	sp, #32
 8003690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003692:	463b      	mov	r3, r7
 8003694:	2220      	movs	r2, #32
 8003696:	2100      	movs	r1, #0
 8003698:	4618      	mov	r0, r3
 800369a:	f01b fbc9 	bl	801ee30 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800369e:	4b2b      	ldr	r3, [pc, #172]	@ (800374c <MX_ADC2_Init+0xc0>)
 80036a0:	4a2b      	ldr	r2, [pc, #172]	@ (8003750 <MX_ADC2_Init+0xc4>)
 80036a2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80036a4:	4b29      	ldr	r3, [pc, #164]	@ (800374c <MX_ADC2_Init+0xc0>)
 80036a6:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80036aa:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80036ac:	4b27      	ldr	r3, [pc, #156]	@ (800374c <MX_ADC2_Init+0xc0>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80036b2:	4b26      	ldr	r3, [pc, #152]	@ (800374c <MX_ADC2_Init+0xc0>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80036b8:	4b24      	ldr	r3, [pc, #144]	@ (800374c <MX_ADC2_Init+0xc0>)
 80036ba:	2200      	movs	r2, #0
 80036bc:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80036be:	4b23      	ldr	r3, [pc, #140]	@ (800374c <MX_ADC2_Init+0xc0>)
 80036c0:	2204      	movs	r2, #4
 80036c2:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80036c4:	4b21      	ldr	r3, [pc, #132]	@ (800374c <MX_ADC2_Init+0xc0>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80036ca:	4b20      	ldr	r3, [pc, #128]	@ (800374c <MX_ADC2_Init+0xc0>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 80036d0:	4b1e      	ldr	r3, [pc, #120]	@ (800374c <MX_ADC2_Init+0xc0>)
 80036d2:	2201      	movs	r2, #1
 80036d4:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80036d6:	4b1d      	ldr	r3, [pc, #116]	@ (800374c <MX_ADC2_Init+0xc0>)
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80036de:	4b1b      	ldr	r3, [pc, #108]	@ (800374c <MX_ADC2_Init+0xc0>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80036e4:	4b19      	ldr	r3, [pc, #100]	@ (800374c <MX_ADC2_Init+0xc0>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80036ea:	4b18      	ldr	r3, [pc, #96]	@ (800374c <MX_ADC2_Init+0xc0>)
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hadc2.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 80036f2:	4b16      	ldr	r3, [pc, #88]	@ (800374c <MX_ADC2_Init+0xc0>)
 80036f4:	2200      	movs	r2, #0
 80036f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80036f8:	4b14      	ldr	r3, [pc, #80]	@ (800374c <MX_ADC2_Init+0xc0>)
 80036fa:	2200      	movs	r2, #0
 80036fc:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc2.Init.OversamplingMode = DISABLE;
 80036fe:	4b13      	ldr	r3, [pc, #76]	@ (800374c <MX_ADC2_Init+0xc0>)
 8003700:	2200      	movs	r2, #0
 8003702:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003706:	4811      	ldr	r0, [pc, #68]	@ (800374c <MX_ADC2_Init+0xc0>)
 8003708:	f002 fc32 	bl	8005f70 <HAL_ADC_Init>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d001      	beq.n	8003716 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8003712:	f001 f834 	bl	800477e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8003716:	4b0f      	ldr	r3, [pc, #60]	@ (8003754 <MX_ADC2_Init+0xc8>)
 8003718:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800371a:	2306      	movs	r3, #6
 800371c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800371e:	2300      	movs	r3, #0
 8003720:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003722:	237f      	movs	r3, #127	@ 0x7f
 8003724:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003726:	2304      	movs	r3, #4
 8003728:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800372a:	2300      	movs	r3, #0
 800372c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800372e:	463b      	mov	r3, r7
 8003730:	4619      	mov	r1, r3
 8003732:	4806      	ldr	r0, [pc, #24]	@ (800374c <MX_ADC2_Init+0xc0>)
 8003734:	f002 ff44 	bl	80065c0 <HAL_ADC_ConfigChannel>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d001      	beq.n	8003742 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 800373e:	f001 f81e 	bl	800477e <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8003742:	bf00      	nop
 8003744:	3720      	adds	r7, #32
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	200138bc 	.word	0x200138bc
 8003750:	42028100 	.word	0x42028100
 8003754:	2a000400 	.word	0x2a000400

08003758 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b0d0      	sub	sp, #320	@ 0x140
 800375c:	af00      	add	r7, sp, #0
 800375e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003762:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003766:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003768:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 800376c:	2200      	movs	r2, #0
 800376e:	601a      	str	r2, [r3, #0]
 8003770:	605a      	str	r2, [r3, #4]
 8003772:	609a      	str	r2, [r3, #8]
 8003774:	60da      	str	r2, [r3, #12]
 8003776:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003778:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800377c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003780:	4618      	mov	r0, r3
 8003782:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8003786:	461a      	mov	r2, r3
 8003788:	2100      	movs	r1, #0
 800378a:	f01b fb51 	bl	801ee30 <memset>
  if(adcHandle->Instance==ADC1)
 800378e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003792:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a7d      	ldr	r2, [pc, #500]	@ (8003990 <HAL_ADC_MspInit+0x238>)
 800379c:	4293      	cmp	r3, r2
 800379e:	f040 8088 	bne.w	80038b2 <HAL_ADC_MspInit+0x15a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 80037a2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80037a6:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 80037aa:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80037ae:	f04f 0300 	mov.w	r3, #0
 80037b2:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HCLK;
 80037b6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80037ba:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80037be:	2200      	movs	r2, #0
 80037c0:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80037c4:	f107 0320 	add.w	r3, r7, #32
 80037c8:	4618      	mov	r0, r3
 80037ca:	f009 f8e9 	bl	800c9a0 <HAL_RCCEx_PeriphCLKConfig>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d001      	beq.n	80037d8 <HAL_ADC_MspInit+0x80>
    {
      Error_Handler();
 80037d4:	f000 ffd3 	bl	800477e <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 80037d8:	4b6e      	ldr	r3, [pc, #440]	@ (8003994 <HAL_ADC_MspInit+0x23c>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	3301      	adds	r3, #1
 80037de:	4a6d      	ldr	r2, [pc, #436]	@ (8003994 <HAL_ADC_MspInit+0x23c>)
 80037e0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80037e2:	4b6c      	ldr	r3, [pc, #432]	@ (8003994 <HAL_ADC_MspInit+0x23c>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d116      	bne.n	8003818 <HAL_ADC_MspInit+0xc0>
      __HAL_RCC_ADC_CLK_ENABLE();
 80037ea:	4b6b      	ldr	r3, [pc, #428]	@ (8003998 <HAL_ADC_MspInit+0x240>)
 80037ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80037f0:	4a69      	ldr	r2, [pc, #420]	@ (8003998 <HAL_ADC_MspInit+0x240>)
 80037f2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80037f6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80037fa:	4b67      	ldr	r3, [pc, #412]	@ (8003998 <HAL_ADC_MspInit+0x240>)
 80037fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003800:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8003804:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003808:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800380c:	601a      	str	r2, [r3, #0]
 800380e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003812:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003816:	681b      	ldr	r3, [r3, #0]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003818:	4b5f      	ldr	r3, [pc, #380]	@ (8003998 <HAL_ADC_MspInit+0x240>)
 800381a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800381e:	4a5e      	ldr	r2, [pc, #376]	@ (8003998 <HAL_ADC_MspInit+0x240>)
 8003820:	f043 0304 	orr.w	r3, r3, #4
 8003824:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003828:	4b5b      	ldr	r3, [pc, #364]	@ (8003998 <HAL_ADC_MspInit+0x240>)
 800382a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800382e:	f003 0204 	and.w	r2, r3, #4
 8003832:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003836:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800383a:	601a      	str	r2, [r3, #0]
 800383c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003840:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003844:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003846:	4b54      	ldr	r3, [pc, #336]	@ (8003998 <HAL_ADC_MspInit+0x240>)
 8003848:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800384c:	4a52      	ldr	r2, [pc, #328]	@ (8003998 <HAL_ADC_MspInit+0x240>)
 800384e:	f043 0301 	orr.w	r3, r3, #1
 8003852:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003856:	4b50      	ldr	r3, [pc, #320]	@ (8003998 <HAL_ADC_MspInit+0x240>)
 8003858:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800385c:	f003 0201 	and.w	r2, r3, #1
 8003860:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003864:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003868:	601a      	str	r2, [r3, #0]
 800386a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800386e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003872:	681b      	ldr	r3, [r3, #0]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    PA1     ------> ADC1_INP1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003874:	2301      	movs	r3, #1
 8003876:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800387a:	2303      	movs	r3, #3
 800387c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003880:	2300      	movs	r3, #0
 8003882:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003886:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 800388a:	4619      	mov	r1, r3
 800388c:	4843      	ldr	r0, [pc, #268]	@ (800399c <HAL_ADC_MspInit+0x244>)
 800388e:	f007 fe9f 	bl	800b5d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003892:	2302      	movs	r3, #2
 8003894:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003898:	2303      	movs	r3, #3
 800389a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800389e:	2300      	movs	r3, #0
 80038a0:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038a4:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 80038a8:	4619      	mov	r1, r3
 80038aa:	483d      	ldr	r0, [pc, #244]	@ (80039a0 <HAL_ADC_MspInit+0x248>)
 80038ac:	f007 fe90 	bl	800b5d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80038b0:	e069      	b.n	8003986 <HAL_ADC_MspInit+0x22e>
  else if(adcHandle->Instance==ADC2)
 80038b2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80038b6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a39      	ldr	r2, [pc, #228]	@ (80039a4 <HAL_ADC_MspInit+0x24c>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d160      	bne.n	8003986 <HAL_ADC_MspInit+0x22e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 80038c4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80038c8:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 80038cc:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80038d0:	f04f 0300 	mov.w	r3, #0
 80038d4:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HCLK;
 80038d8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80038dc:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80038e0:	2200      	movs	r2, #0
 80038e2:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80038e6:	f107 0320 	add.w	r3, r7, #32
 80038ea:	4618      	mov	r0, r3
 80038ec:	f009 f858 	bl	800c9a0 <HAL_RCCEx_PeriphCLKConfig>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d001      	beq.n	80038fa <HAL_ADC_MspInit+0x1a2>
      Error_Handler();
 80038f6:	f000 ff42 	bl	800477e <Error_Handler>
    HAL_RCC_ADC_CLK_ENABLED++;
 80038fa:	4b26      	ldr	r3, [pc, #152]	@ (8003994 <HAL_ADC_MspInit+0x23c>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	3301      	adds	r3, #1
 8003900:	4a24      	ldr	r2, [pc, #144]	@ (8003994 <HAL_ADC_MspInit+0x23c>)
 8003902:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8003904:	4b23      	ldr	r3, [pc, #140]	@ (8003994 <HAL_ADC_MspInit+0x23c>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2b01      	cmp	r3, #1
 800390a:	d116      	bne.n	800393a <HAL_ADC_MspInit+0x1e2>
      __HAL_RCC_ADC_CLK_ENABLE();
 800390c:	4b22      	ldr	r3, [pc, #136]	@ (8003998 <HAL_ADC_MspInit+0x240>)
 800390e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003912:	4a21      	ldr	r2, [pc, #132]	@ (8003998 <HAL_ADC_MspInit+0x240>)
 8003914:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003918:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800391c:	4b1e      	ldr	r3, [pc, #120]	@ (8003998 <HAL_ADC_MspInit+0x240>)
 800391e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003922:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8003926:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800392a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800392e:	601a      	str	r2, [r3, #0]
 8003930:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003934:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003938:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800393a:	4b17      	ldr	r3, [pc, #92]	@ (8003998 <HAL_ADC_MspInit+0x240>)
 800393c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003940:	4a15      	ldr	r2, [pc, #84]	@ (8003998 <HAL_ADC_MspInit+0x240>)
 8003942:	f043 0304 	orr.w	r3, r3, #4
 8003946:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800394a:	4b13      	ldr	r3, [pc, #76]	@ (8003998 <HAL_ADC_MspInit+0x240>)
 800394c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003950:	f003 0204 	and.w	r2, r3, #4
 8003954:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003958:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800395c:	601a      	str	r2, [r3, #0]
 800395e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003962:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003966:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003968:	2301      	movs	r3, #1
 800396a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800396e:	2303      	movs	r3, #3
 8003970:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003974:	2300      	movs	r3, #0
 8003976:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800397a:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 800397e:	4619      	mov	r1, r3
 8003980:	4806      	ldr	r0, [pc, #24]	@ (800399c <HAL_ADC_MspInit+0x244>)
 8003982:	f007 fe25 	bl	800b5d0 <HAL_GPIO_Init>
}
 8003986:	bf00      	nop
 8003988:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	42028000 	.word	0x42028000
 8003994:	20013924 	.word	0x20013924
 8003998:	44020c00 	.word	0x44020c00
 800399c:	42020800 	.word	0x42020800
 80039a0:	42020000 	.word	0x42020000
 80039a4:	42028100 	.word	0x42028100

080039a8 <sKey_update>:
#include "main.h"
uint32_t pKeyAES1[4];
extern char ComKeys [8][33];
extern char StatKeys[3][33];
void sKey_update(int key)   // update the key based input
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
	 hexStringToUint32Array(StatKeys[key], pKeyAES1);
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	4613      	mov	r3, r2
 80039b4:	015b      	lsls	r3, r3, #5
 80039b6:	4413      	add	r3, r2
 80039b8:	4a0b      	ldr	r2, [pc, #44]	@ (80039e8 <sKey_update+0x40>)
 80039ba:	4413      	add	r3, r2
 80039bc:	490b      	ldr	r1, [pc, #44]	@ (80039ec <sKey_update+0x44>)
 80039be:	4618      	mov	r0, r3
 80039c0:	f000 f842 	bl	8003a48 <hexStringToUint32Array>
	 hcryp.Init.pKey = (uint32_t *)pKeyAES1;
 80039c4:	4b0a      	ldr	r3, [pc, #40]	@ (80039f0 <sKey_update+0x48>)
 80039c6:	4a09      	ldr	r2, [pc, #36]	@ (80039ec <sKey_update+0x44>)
 80039c8:	60da      	str	r2, [r3, #12]

	    // Print the converted values
	    printc(100,"staticKey[]: %s\n", StatKeys[key]);
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	4613      	mov	r3, r2
 80039ce:	015b      	lsls	r3, r3, #5
 80039d0:	4413      	add	r3, r2
 80039d2:	4a05      	ldr	r2, [pc, #20]	@ (80039e8 <sKey_update+0x40>)
 80039d4:	4413      	add	r3, r2
 80039d6:	461a      	mov	r2, r3
 80039d8:	4906      	ldr	r1, [pc, #24]	@ (80039f4 <sKey_update+0x4c>)
 80039da:	2064      	movs	r0, #100	@ 0x64
 80039dc:	f7fe f81c 	bl	8001a18 <printc>
//	    printc(100,("pKeyAES[0]: 0x%08X\n", pKeyAES1[0]);
//	    printc(100,("pKeyAES[1]: 0x%08X\n", pKeyAES1[1]);
//	    printc(100,("pKeyAES[2]: 0x%08X\n", pKeyAES1[2]);
//	    printc(100,("pKeyAES[3]: 0x%08X\n", pKeyAES1[3]);
}
 80039e0:	bf00      	nop
 80039e2:	3708      	adds	r7, #8
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	20014a68 	.word	0x20014a68
 80039ec:	20013928 	.word	0x20013928
 80039f0:	20013938 	.word	0x20013938
 80039f4:	08022934 	.word	0x08022934

080039f8 <cKey_update>:
void cKey_update(int key)   // update the key based input
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
	 hexStringToUint32Array(ComKeys[key], pKeyAES1);
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	4613      	mov	r3, r2
 8003a04:	015b      	lsls	r3, r3, #5
 8003a06:	4413      	add	r3, r2
 8003a08:	4a0b      	ldr	r2, [pc, #44]	@ (8003a38 <cKey_update+0x40>)
 8003a0a:	4413      	add	r3, r2
 8003a0c:	490b      	ldr	r1, [pc, #44]	@ (8003a3c <cKey_update+0x44>)
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f000 f81a 	bl	8003a48 <hexStringToUint32Array>
	 hcryp.Init.pKey = (uint32_t *)pKeyAES1;
 8003a14:	4b0a      	ldr	r3, [pc, #40]	@ (8003a40 <cKey_update+0x48>)
 8003a16:	4a09      	ldr	r2, [pc, #36]	@ (8003a3c <cKey_update+0x44>)
 8003a18:	60da      	str	r2, [r3, #12]
    // Print the converted values
	    printc(100,"ComKeys[]: %s\n", ComKeys[key]);
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	015b      	lsls	r3, r3, #5
 8003a20:	4413      	add	r3, r2
 8003a22:	4a05      	ldr	r2, [pc, #20]	@ (8003a38 <cKey_update+0x40>)
 8003a24:	4413      	add	r3, r2
 8003a26:	461a      	mov	r2, r3
 8003a28:	4906      	ldr	r1, [pc, #24]	@ (8003a44 <cKey_update+0x4c>)
 8003a2a:	2064      	movs	r0, #100	@ 0x64
 8003a2c:	f7fd fff4 	bl	8001a18 <printc>
//	    printc(100,"pKeyAES[0]: 0x%08X\n", pKeyAES1[0]);
//	    printc(100,"pKeyAES[1]: 0x%08X\n", pKeyAES1[1]);
//	    printc(100,"pKeyAES[2]: 0x%08X\n", pKeyAES1[2]);
//	    printc(100,"pKeyAES[3]: 0x%08X\n", pKeyAES1[3]);
}
 8003a30:	bf00      	nop
 8003a32:	3708      	adds	r7, #8
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	20014acc 	.word	0x20014acc
 8003a3c:	20013928 	.word	0x20013928
 8003a40:	20013938 	.word	0x20013938
 8003a44:	08022948 	.word	0x08022948

08003a48 <hexStringToUint32Array>:
void hexStringToUint32Array(const char *hexString, uint32_t *uintArray) {
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b086      	sub	sp, #24
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
    int len = strlen(hexString);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f7fc fc26 	bl	80002a4 <strlen>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	60fb      	str	r3, [r7, #12]
    int i, j;

    for (i = 0, j = 0; i < len; i += 8, j++) {
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	617b      	str	r3, [r7, #20]
 8003a60:	2300      	movs	r3, #0
 8003a62:	613b      	str	r3, [r7, #16]
 8003a64:	e010      	b.n	8003a88 <hexStringToUint32Array+0x40>
        sscanf(hexString + i, "%8x", &uintArray[j]);
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	18d0      	adds	r0, r2, r3
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	683a      	ldr	r2, [r7, #0]
 8003a72:	4413      	add	r3, r2
 8003a74:	461a      	mov	r2, r3
 8003a76:	4909      	ldr	r1, [pc, #36]	@ (8003a9c <hexStringToUint32Array+0x54>)
 8003a78:	f01b f89e 	bl	801ebb8 <siscanf>
    for (i = 0, j = 0; i < len; i += 8, j++) {
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	3308      	adds	r3, #8
 8003a80:	617b      	str	r3, [r7, #20]
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	3301      	adds	r3, #1
 8003a86:	613b      	str	r3, [r7, #16]
 8003a88:	697a      	ldr	r2, [r7, #20]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	dbea      	blt.n	8003a66 <hexStringToUint32Array+0x1e>
    }
}
 8003a90:	bf00      	nop
 8003a92:	bf00      	nop
 8003a94:	3718      	adds	r7, #24
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	08022958 	.word	0x08022958

08003aa0 <MX_AES_Init>:
CRYP_HandleTypeDef hcryp;
uint32_t pKeyAES[4] = {0x00000000,0x00000000,0x00000000,0x00000000};

/* AES init function */
void MX_AES_Init(void)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	af00      	add	r7, sp, #0
  /* USER CODE END AES_Init 0 */

  /* USER CODE BEGIN AES_Init 1 */

  /* USER CODE END AES_Init 1 */
  hcryp.Instance = AES;
 8003aa4:	4b12      	ldr	r3, [pc, #72]	@ (8003af0 <MX_AES_Init+0x50>)
 8003aa6:	4a13      	ldr	r2, [pc, #76]	@ (8003af4 <MX_AES_Init+0x54>)
 8003aa8:	601a      	str	r2, [r3, #0]
  hcryp.Init.DataType = CRYP_NO_SWAP;
 8003aaa:	4b11      	ldr	r3, [pc, #68]	@ (8003af0 <MX_AES_Init+0x50>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	605a      	str	r2, [r3, #4]
  hcryp.Init.KeySize = CRYP_KEYSIZE_128B;
 8003ab0:	4b0f      	ldr	r3, [pc, #60]	@ (8003af0 <MX_AES_Init+0x50>)
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	609a      	str	r2, [r3, #8]
  hcryp.Init.pKey = (uint32_t *)pKeyAES;
 8003ab6:	4b0e      	ldr	r3, [pc, #56]	@ (8003af0 <MX_AES_Init+0x50>)
 8003ab8:	4a0f      	ldr	r2, [pc, #60]	@ (8003af8 <MX_AES_Init+0x58>)
 8003aba:	60da      	str	r2, [r3, #12]
  hcryp.Init.Algorithm = CRYP_AES_ECB;
 8003abc:	4b0c      	ldr	r3, [pc, #48]	@ (8003af0 <MX_AES_Init+0x50>)
 8003abe:	2200      	movs	r2, #0
 8003ac0:	615a      	str	r2, [r3, #20]
  hcryp.Init.DataWidthUnit = CRYP_DATAWIDTHUNIT_WORD;
 8003ac2:	4b0b      	ldr	r3, [pc, #44]	@ (8003af0 <MX_AES_Init+0x50>)
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	625a      	str	r2, [r3, #36]	@ 0x24
  hcryp.Init.HeaderWidthUnit = CRYP_HEADERWIDTHUNIT_WORD;
 8003ac8:	4b09      	ldr	r3, [pc, #36]	@ (8003af0 <MX_AES_Init+0x50>)
 8003aca:	2200      	movs	r2, #0
 8003acc:	629a      	str	r2, [r3, #40]	@ 0x28
  hcryp.Init.KeyIVConfigSkip = CRYP_KEYIVCONFIG_ALWAYS;
 8003ace:	4b08      	ldr	r3, [pc, #32]	@ (8003af0 <MX_AES_Init+0x50>)
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hcryp.Init.KeyMode = CRYP_KEYMODE_NORMAL;
 8003ad4:	4b06      	ldr	r3, [pc, #24]	@ (8003af0 <MX_AES_Init+0x50>)
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_CRYP_Init(&hcryp) != HAL_OK)
 8003ada:	4805      	ldr	r0, [pc, #20]	@ (8003af0 <MX_AES_Init+0x50>)
 8003adc:	f003 fef4 	bl	80078c8 <HAL_CRYP_Init>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d001      	beq.n	8003aea <MX_AES_Init+0x4a>
  {
    Error_Handler();
 8003ae6:	f000 fe4a 	bl	800477e <Error_Handler>
  }
  /* USER CODE BEGIN AES_Init 2 */

  /* USER CODE END AES_Init 2 */

}
 8003aea:	bf00      	nop
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	20013938 	.word	0x20013938
 8003af4:	420c0000 	.word	0x420c0000
 8003af8:	200139a0 	.word	0x200139a0

08003afc <HAL_CRYP_MspInit>:

void HAL_CRYP_MspInit(CRYP_HandleTypeDef* crypHandle)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b085      	sub	sp, #20
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]

  if(crypHandle->Instance==AES)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a0b      	ldr	r2, [pc, #44]	@ (8003b38 <HAL_CRYP_MspInit+0x3c>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d10e      	bne.n	8003b2c <HAL_CRYP_MspInit+0x30>
  {
  /* USER CODE BEGIN AES_MspInit 0 */

  /* USER CODE END AES_MspInit 0 */
    /* AES clock enable */
    __HAL_RCC_AES_CLK_ENABLE();
 8003b0e:	4b0b      	ldr	r3, [pc, #44]	@ (8003b3c <HAL_CRYP_MspInit+0x40>)
 8003b10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b14:	4a09      	ldr	r2, [pc, #36]	@ (8003b3c <HAL_CRYP_MspInit+0x40>)
 8003b16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b1a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003b1e:	4b07      	ldr	r3, [pc, #28]	@ (8003b3c <HAL_CRYP_MspInit+0x40>)
 8003b20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b28:	60fb      	str	r3, [r7, #12]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN AES_MspInit 1 */

  /* USER CODE END AES_MspInit 1 */
  }
}
 8003b2c:	bf00      	nop
 8003b2e:	3714      	adds	r7, #20
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr
 8003b38:	420c0000 	.word	0x420c0000
 8003b3c:	44020c00 	.word	0x44020c00

08003b40 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8003b44:	4b12      	ldr	r3, [pc, #72]	@ (8003b90 <MX_CRC_Init+0x50>)
 8003b46:	4a13      	ldr	r2, [pc, #76]	@ (8003b94 <MX_CRC_Init+0x54>)
 8003b48:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 8003b4a:	4b11      	ldr	r3, [pc, #68]	@ (8003b90 <MX_CRC_Init+0x50>)
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8003b50:	4b0f      	ldr	r3, [pc, #60]	@ (8003b90 <MX_CRC_Init+0x50>)
 8003b52:	2201      	movs	r2, #1
 8003b54:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 7;
 8003b56:	4b0e      	ldr	r3, [pc, #56]	@ (8003b90 <MX_CRC_Init+0x50>)
 8003b58:	2207      	movs	r2, #7
 8003b5a:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;
 8003b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8003b90 <MX_CRC_Init+0x50>)
 8003b5e:	2210      	movs	r2, #16
 8003b60:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0;
 8003b62:	4b0b      	ldr	r3, [pc, #44]	@ (8003b90 <MX_CRC_Init+0x50>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8003b68:	4b09      	ldr	r3, [pc, #36]	@ (8003b90 <MX_CRC_Init+0x50>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8003b6e:	4b08      	ldr	r3, [pc, #32]	@ (8003b90 <MX_CRC_Init+0x50>)
 8003b70:	2200      	movs	r2, #0
 8003b72:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8003b74:	4b06      	ldr	r3, [pc, #24]	@ (8003b90 <MX_CRC_Init+0x50>)
 8003b76:	2201      	movs	r2, #1
 8003b78:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8003b7a:	4805      	ldr	r0, [pc, #20]	@ (8003b90 <MX_CRC_Init+0x50>)
 8003b7c:	f003 fc9e 	bl	80074bc <HAL_CRC_Init>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d001      	beq.n	8003b8a <MX_CRC_Init+0x4a>
  {
    Error_Handler();
 8003b86:	f000 fdfa 	bl	800477e <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8003b8a:	bf00      	nop
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	200139c0 	.word	0x200139c0
 8003b94:	40023000 	.word	0x40023000

08003b98 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b085      	sub	sp, #20
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a0b      	ldr	r2, [pc, #44]	@ (8003bd4 <HAL_CRC_MspInit+0x3c>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d10e      	bne.n	8003bc8 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8003baa:	4b0b      	ldr	r3, [pc, #44]	@ (8003bd8 <HAL_CRC_MspInit+0x40>)
 8003bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bb0:	4a09      	ldr	r2, [pc, #36]	@ (8003bd8 <HAL_CRC_MspInit+0x40>)
 8003bb2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003bb6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8003bba:	4b07      	ldr	r3, [pc, #28]	@ (8003bd8 <HAL_CRC_MspInit+0x40>)
 8003bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bc0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003bc4:	60fb      	str	r3, [r7, #12]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8003bc8:	bf00      	nop
 8003bca:	3714      	adds	r7, #20
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr
 8003bd4:	40023000 	.word	0x40023000
 8003bd8:	44020c00 	.word	0x44020c00

08003bdc <MX_FDCAN1_Init>:
FDCAN_HandleTypeDef hfdcan1;
FDCAN_HandleTypeDef hfdcan2;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b086      	sub	sp, #24
 8003be0:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8003be2:	4b4e      	ldr	r3, [pc, #312]	@ (8003d1c <MX_FDCAN1_Init+0x140>)
 8003be4:	4a4e      	ldr	r2, [pc, #312]	@ (8003d20 <MX_FDCAN1_Init+0x144>)
 8003be6:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8003be8:	4b4c      	ldr	r3, [pc, #304]	@ (8003d1c <MX_FDCAN1_Init+0x140>)
 8003bea:	2200      	movs	r2, #0
 8003bec:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8003bee:	4b4b      	ldr	r3, [pc, #300]	@ (8003d1c <MX_FDCAN1_Init+0x140>)
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8003bf4:	4b49      	ldr	r3, [pc, #292]	@ (8003d1c <MX_FDCAN1_Init+0x140>)
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8003bfa:	4b48      	ldr	r3, [pc, #288]	@ (8003d1c <MX_FDCAN1_Init+0x140>)
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8003c00:	4b46      	ldr	r3, [pc, #280]	@ (8003d1c <MX_FDCAN1_Init+0x140>)
 8003c02:	2200      	movs	r2, #0
 8003c04:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = ENABLE;
 8003c06:	4b45      	ldr	r3, [pc, #276]	@ (8003d1c <MX_FDCAN1_Init+0x140>)
 8003c08:	2201      	movs	r2, #1
 8003c0a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8003c0c:	4b43      	ldr	r3, [pc, #268]	@ (8003d1c <MX_FDCAN1_Init+0x140>)
 8003c0e:	2201      	movs	r2, #1
 8003c10:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 13;
 8003c12:	4b42      	ldr	r3, [pc, #264]	@ (8003d1c <MX_FDCAN1_Init+0x140>)
 8003c14:	220d      	movs	r2, #13
 8003c16:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 86;
 8003c18:	4b40      	ldr	r3, [pc, #256]	@ (8003d1c <MX_FDCAN1_Init+0x140>)
 8003c1a:	2256      	movs	r2, #86	@ 0x56
 8003c1c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 13;
 8003c1e:	4b3f      	ldr	r3, [pc, #252]	@ (8003d1c <MX_FDCAN1_Init+0x140>)
 8003c20:	220d      	movs	r2, #13
 8003c22:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 4;
 8003c24:	4b3d      	ldr	r3, [pc, #244]	@ (8003d1c <MX_FDCAN1_Init+0x140>)
 8003c26:	2204      	movs	r2, #4
 8003c28:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 9;
 8003c2a:	4b3c      	ldr	r3, [pc, #240]	@ (8003d1c <MX_FDCAN1_Init+0x140>)
 8003c2c:	2209      	movs	r2, #9
 8003c2e:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 15;
 8003c30:	4b3a      	ldr	r3, [pc, #232]	@ (8003d1c <MX_FDCAN1_Init+0x140>)
 8003c32:	220f      	movs	r2, #15
 8003c34:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 9;
 8003c36:	4b39      	ldr	r3, [pc, #228]	@ (8003d1c <MX_FDCAN1_Init+0x140>)
 8003c38:	2209      	movs	r2, #9
 8003c3a:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8003c3c:	4b37      	ldr	r3, [pc, #220]	@ (8003d1c <MX_FDCAN1_Init+0x140>)
 8003c3e:	2200      	movs	r2, #0
 8003c40:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8003c42:	4b36      	ldr	r3, [pc, #216]	@ (8003d1c <MX_FDCAN1_Init+0x140>)
 8003c44:	2200      	movs	r2, #0
 8003c46:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8003c48:	4b34      	ldr	r3, [pc, #208]	@ (8003d1c <MX_FDCAN1_Init+0x140>)
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8003c4e:	4833      	ldr	r0, [pc, #204]	@ (8003d1c <MX_FDCAN1_Init+0x140>)
 8003c50:	f006 fc1c 	bl	800a48c <HAL_FDCAN_Init>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d001      	beq.n	8003c5e <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8003c5a:	f000 fd90 	bl	800477e <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig = {0};              /* clearing all the filter configuration */
 8003c5e:	463b      	mov	r3, r7
 8003c60:	2200      	movs	r2, #0
 8003c62:	601a      	str	r2, [r3, #0]
 8003c64:	605a      	str	r2, [r3, #4]
 8003c66:	609a      	str	r2, [r3, #8]
 8003c68:	60da      	str	r2, [r3, #12]
 8003c6a:	611a      	str	r2, [r3, #16]
 8003c6c:	615a      	str	r2, [r3, #20]

  	    /* FDCAN Tx header structure configuration */
  	  TxHeader.Identifier          = 0x123;                /*  taking default identifier  */
 8003c6e:	4b2d      	ldr	r3, [pc, #180]	@ (8003d24 <MX_FDCAN1_Init+0x148>)
 8003c70:	f240 1223 	movw	r2, #291	@ 0x123
 8003c74:	601a      	str	r2, [r3, #0]
  	  TxHeader.IdType              = FDCAN_EXTENDED_ID;    /*  0 and 0x7FF, if IdType is FDCAN_STANDARD_ID , 0 and 0x1FFFFFFF, if IdType is FDCAN_EXTENDED_ID  */
 8003c76:	4b2b      	ldr	r3, [pc, #172]	@ (8003d24 <MX_FDCAN1_Init+0x148>)
 8003c78:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003c7c:	605a      	str	r2, [r3, #4]
  	  TxHeader.TxFrameType         = FDCAN_DATA_FRAME;     /*  Specifies the frame type of the message that will be transmitted.  */
 8003c7e:	4b29      	ldr	r3, [pc, #164]	@ (8003d24 <MX_FDCAN1_Init+0x148>)
 8003c80:	2200      	movs	r2, #0
 8003c82:	609a      	str	r2, [r3, #8]
  	  TxHeader.DataLength          = FDCAN_DLC_BYTES_8;    /*  the length of the transmitted frame 8 bytes.  */
 8003c84:	4b27      	ldr	r3, [pc, #156]	@ (8003d24 <MX_FDCAN1_Init+0x148>)
 8003c86:	2208      	movs	r2, #8
 8003c88:	60da      	str	r2, [r3, #12]
  	  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;     /*  FDCAN_error_state_indicator,node is error active  */
 8003c8a:	4b26      	ldr	r3, [pc, #152]	@ (8003d24 <MX_FDCAN1_Init+0x148>)
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	611a      	str	r2, [r3, #16]
  	  TxHeader.BitRateSwitch       = FDCAN_BRS_OFF;        /*  frames transmitted/received without bit rate switching  */
 8003c90:	4b24      	ldr	r3, [pc, #144]	@ (8003d24 <MX_FDCAN1_Init+0x148>)
 8003c92:	2200      	movs	r2, #0
 8003c94:	615a      	str	r2, [r3, #20]
  	  TxHeader.FDFormat            = FDCAN_CLASSIC_CAN;    /*  Frame transmitted/received in Classic CAN format  */
 8003c96:	4b23      	ldr	r3, [pc, #140]	@ (8003d24 <MX_FDCAN1_Init+0x148>)
 8003c98:	2200      	movs	r2, #0
 8003c9a:	619a      	str	r2, [r3, #24]
  	  TxHeader.TxEventFifoControl  = FDCAN_NO_TX_EVENTS;   /*  Do not store Tx events */
 8003c9c:	4b21      	ldr	r3, [pc, #132]	@ (8003d24 <MX_FDCAN1_Init+0x148>)
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	61da      	str	r2, [r3, #28]
  	  TxHeader.MessageMarker       = 0;
 8003ca2:	4b20      	ldr	r3, [pc, #128]	@ (8003d24 <MX_FDCAN1_Init+0x148>)
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	621a      	str	r2, [r3, #32]

  	//  /* Configure Rx filter */
  	  sFilterConfig.IdType       = FDCAN_EXTENDED_ID;
 8003ca8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003cac:	603b      	str	r3, [r7, #0]
  	  sFilterConfig.FilterIndex  = 1;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	607b      	str	r3, [r7, #4]
  	  sFilterConfig.FilterType   = FDCAN_FILTER_RANGE;//
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	60bb      	str	r3, [r7, #8]
  	  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	60fb      	str	r3, [r7, #12]
  	  sFilterConfig.FilterID1    = 0x800;
 8003cba:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003cbe:	613b      	str	r3, [r7, #16]
  	  sFilterConfig.FilterID2    = 0x835;
 8003cc0:	f640 0335 	movw	r3, #2101	@ 0x835
 8003cc4:	617b      	str	r3, [r7, #20]


  	  /* Configure the FDCAN reception filter */
  	  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8003cc6:	463b      	mov	r3, r7
 8003cc8:	4619      	mov	r1, r3
 8003cca:	4814      	ldr	r0, [pc, #80]	@ (8003d1c <MX_FDCAN1_Init+0x140>)
 8003ccc:	f006 fd38 	bl	800a740 <HAL_FDCAN_ConfigFilter>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d001      	beq.n	8003cda <MX_FDCAN1_Init+0xfe>
  	  {
  	    Error_Handler();
 8003cd6:	f000 fd52 	bl	800477e <Error_Handler>
  	  }

  	  /* Start the FDCAN module */
  	  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 8003cda:	4810      	ldr	r0, [pc, #64]	@ (8003d1c <MX_FDCAN1_Init+0x140>)
 8003cdc:	f006 fd8a 	bl	800a7f4 <HAL_FDCAN_Start>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d001      	beq.n	8003cea <MX_FDCAN1_Init+0x10e>
  	  {
  	    Error_Handler();
 8003ce6:	f000 fd4a 	bl	800477e <Error_Handler>
  	  }
  	  /* Enable interrupts */
  	  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8003cea:	2200      	movs	r2, #0
 8003cec:	2101      	movs	r1, #1
 8003cee:	480b      	ldr	r0, [pc, #44]	@ (8003d1c <MX_FDCAN1_Init+0x140>)
 8003cf0:	f006 feb0 	bl	800aa54 <HAL_FDCAN_ActivateNotification>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d001      	beq.n	8003cfe <MX_FDCAN1_Init+0x122>
  	  {
  	    Error_Handler();
 8003cfa:	f000 fd40 	bl	800477e <Error_Handler>
  	  }
  	  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_TX_FIFO_EMPTY, 0) != HAL_OK) {
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003d04:	4805      	ldr	r0, [pc, #20]	@ (8003d1c <MX_FDCAN1_Init+0x140>)
 8003d06:	f006 fea5 	bl	800aa54 <HAL_FDCAN_ActivateNotification>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d001      	beq.n	8003d14 <MX_FDCAN1_Init+0x138>
  	  		/* Notification Error */
  	  		Error_Handler();
 8003d10:	f000 fd35 	bl	800477e <Error_Handler>
  	  	}
  /* USER CODE END FDCAN1_Init 2 */

}
 8003d14:	bf00      	nop
 8003d16:	3718      	adds	r7, #24
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	20013a54 	.word	0x20013a54
 8003d20:	4000a400 	.word	0x4000a400
 8003d24:	20013a0c 	.word	0x20013a0c

08003d28 <MX_FDCAN2_Init>:
/* FDCAN2 init function */
void MX_FDCAN2_Init(void)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b086      	sub	sp, #24
 8003d2c:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8003d2e:	4b4e      	ldr	r3, [pc, #312]	@ (8003e68 <MX_FDCAN2_Init+0x140>)
 8003d30:	4a4e      	ldr	r2, [pc, #312]	@ (8003e6c <MX_FDCAN2_Init+0x144>)
 8003d32:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8003d34:	4b4c      	ldr	r3, [pc, #304]	@ (8003e68 <MX_FDCAN2_Init+0x140>)
 8003d36:	2200      	movs	r2, #0
 8003d38:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8003d3a:	4b4b      	ldr	r3, [pc, #300]	@ (8003e68 <MX_FDCAN2_Init+0x140>)
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8003d40:	4b49      	ldr	r3, [pc, #292]	@ (8003e68 <MX_FDCAN2_Init+0x140>)
 8003d42:	2200      	movs	r2, #0
 8003d44:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = ENABLE;
 8003d46:	4b48      	ldr	r3, [pc, #288]	@ (8003e68 <MX_FDCAN2_Init+0x140>)
 8003d48:	2201      	movs	r2, #1
 8003d4a:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8003d4c:	4b46      	ldr	r3, [pc, #280]	@ (8003e68 <MX_FDCAN2_Init+0x140>)
 8003d4e:	2200      	movs	r2, #0
 8003d50:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = ENABLE;
 8003d52:	4b45      	ldr	r3, [pc, #276]	@ (8003e68 <MX_FDCAN2_Init+0x140>)
 8003d54:	2201      	movs	r2, #1
 8003d56:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8003d58:	4b43      	ldr	r3, [pc, #268]	@ (8003e68 <MX_FDCAN2_Init+0x140>)
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 13;
 8003d5e:	4b42      	ldr	r3, [pc, #264]	@ (8003e68 <MX_FDCAN2_Init+0x140>)
 8003d60:	220d      	movs	r2, #13
 8003d62:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 86;
 8003d64:	4b40      	ldr	r3, [pc, #256]	@ (8003e68 <MX_FDCAN2_Init+0x140>)
 8003d66:	2256      	movs	r2, #86	@ 0x56
 8003d68:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 13;
 8003d6a:	4b3f      	ldr	r3, [pc, #252]	@ (8003e68 <MX_FDCAN2_Init+0x140>)
 8003d6c:	220d      	movs	r2, #13
 8003d6e:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 4;
 8003d70:	4b3d      	ldr	r3, [pc, #244]	@ (8003e68 <MX_FDCAN2_Init+0x140>)
 8003d72:	2204      	movs	r2, #4
 8003d74:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 9;
 8003d76:	4b3c      	ldr	r3, [pc, #240]	@ (8003e68 <MX_FDCAN2_Init+0x140>)
 8003d78:	2209      	movs	r2, #9
 8003d7a:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 15;
 8003d7c:	4b3a      	ldr	r3, [pc, #232]	@ (8003e68 <MX_FDCAN2_Init+0x140>)
 8003d7e:	220f      	movs	r2, #15
 8003d80:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 9;
 8003d82:	4b39      	ldr	r3, [pc, #228]	@ (8003e68 <MX_FDCAN2_Init+0x140>)
 8003d84:	2209      	movs	r2, #9
 8003d86:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 8003d88:	4b37      	ldr	r3, [pc, #220]	@ (8003e68 <MX_FDCAN2_Init+0x140>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8003d8e:	4b36      	ldr	r3, [pc, #216]	@ (8003e68 <MX_FDCAN2_Init+0x140>)
 8003d90:	2200      	movs	r2, #0
 8003d92:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8003d94:	4b34      	ldr	r3, [pc, #208]	@ (8003e68 <MX_FDCAN2_Init+0x140>)
 8003d96:	2200      	movs	r2, #0
 8003d98:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8003d9a:	4833      	ldr	r0, [pc, #204]	@ (8003e68 <MX_FDCAN2_Init+0x140>)
 8003d9c:	f006 fb76 	bl	800a48c <HAL_FDCAN_Init>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d001      	beq.n	8003daa <MX_FDCAN2_Init+0x82>
  {
    Error_Handler();
 8003da6:	f000 fcea 	bl	800477e <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig = {0};              /* clearing all the filter configuration */
 8003daa:	463b      	mov	r3, r7
 8003dac:	2200      	movs	r2, #0
 8003dae:	601a      	str	r2, [r3, #0]
 8003db0:	605a      	str	r2, [r3, #4]
 8003db2:	609a      	str	r2, [r3, #8]
 8003db4:	60da      	str	r2, [r3, #12]
 8003db6:	611a      	str	r2, [r3, #16]
 8003db8:	615a      	str	r2, [r3, #20]

  	    /* FDCAN Tx header structure configuration */
  	  TxHeader1.Identifier          = 0x234;                /*  taking default identifier  */
 8003dba:	4b2d      	ldr	r3, [pc, #180]	@ (8003e70 <MX_FDCAN2_Init+0x148>)
 8003dbc:	f44f 720d 	mov.w	r2, #564	@ 0x234
 8003dc0:	601a      	str	r2, [r3, #0]
  	  TxHeader1.IdType              = FDCAN_EXTENDED_ID;    /*  0 and 0x7FF, if IdType is FDCAN_STANDARD_ID , 0 and 0x1FFFFFFF, if IdType is FDCAN_EXTENDED_ID  */
 8003dc2:	4b2b      	ldr	r3, [pc, #172]	@ (8003e70 <MX_FDCAN2_Init+0x148>)
 8003dc4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003dc8:	605a      	str	r2, [r3, #4]
  	  TxHeader1.TxFrameType         = FDCAN_DATA_FRAME;     /*  Specifies the frame type of the message that will be transmitted.  */
 8003dca:	4b29      	ldr	r3, [pc, #164]	@ (8003e70 <MX_FDCAN2_Init+0x148>)
 8003dcc:	2200      	movs	r2, #0
 8003dce:	609a      	str	r2, [r3, #8]
  	  TxHeader1.DataLength          = FDCAN_DLC_BYTES_8;    /*  the length of the transmitted frame 8 bytes.  */
 8003dd0:	4b27      	ldr	r3, [pc, #156]	@ (8003e70 <MX_FDCAN2_Init+0x148>)
 8003dd2:	2208      	movs	r2, #8
 8003dd4:	60da      	str	r2, [r3, #12]
  	  TxHeader1.ErrorStateIndicator = FDCAN_ESI_ACTIVE;     /*  FDCAN_error_state_indicator,node is error active  */
 8003dd6:	4b26      	ldr	r3, [pc, #152]	@ (8003e70 <MX_FDCAN2_Init+0x148>)
 8003dd8:	2200      	movs	r2, #0
 8003dda:	611a      	str	r2, [r3, #16]
  	  TxHeader1.BitRateSwitch       = FDCAN_BRS_OFF;        /*  frames transmitted/received without bit rate switching  */
 8003ddc:	4b24      	ldr	r3, [pc, #144]	@ (8003e70 <MX_FDCAN2_Init+0x148>)
 8003dde:	2200      	movs	r2, #0
 8003de0:	615a      	str	r2, [r3, #20]
  	  TxHeader1.FDFormat            = FDCAN_CLASSIC_CAN;    /*  Frame transmitted/received in Classic CAN format  */
 8003de2:	4b23      	ldr	r3, [pc, #140]	@ (8003e70 <MX_FDCAN2_Init+0x148>)
 8003de4:	2200      	movs	r2, #0
 8003de6:	619a      	str	r2, [r3, #24]
  	  TxHeader1.TxEventFifoControl  = FDCAN_NO_TX_EVENTS;   /*  Do not store Tx events */
 8003de8:	4b21      	ldr	r3, [pc, #132]	@ (8003e70 <MX_FDCAN2_Init+0x148>)
 8003dea:	2200      	movs	r2, #0
 8003dec:	61da      	str	r2, [r3, #28]
  	  TxHeader1.MessageMarker       = 0;
 8003dee:	4b20      	ldr	r3, [pc, #128]	@ (8003e70 <MX_FDCAN2_Init+0x148>)
 8003df0:	2200      	movs	r2, #0
 8003df2:	621a      	str	r2, [r3, #32]

  	//  /* Configure Rx filter */
  	  sFilterConfig.IdType       = FDCAN_EXTENDED_ID;
 8003df4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003df8:	603b      	str	r3, [r7, #0]
  	  sFilterConfig.FilterIndex  = 1;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	607b      	str	r3, [r7, #4]
  	  sFilterConfig.FilterType   = FDCAN_FILTER_RANGE;//
 8003dfe:	2300      	movs	r3, #0
 8003e00:	60bb      	str	r3, [r7, #8]
  	  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8003e02:	2301      	movs	r3, #1
 8003e04:	60fb      	str	r3, [r7, #12]
  	  sFilterConfig.FilterID1    = 0x800;
 8003e06:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003e0a:	613b      	str	r3, [r7, #16]
  	  sFilterConfig.FilterID2    = 0x835;
 8003e0c:	f640 0335 	movw	r3, #2101	@ 0x835
 8003e10:	617b      	str	r3, [r7, #20]


  	  /* Configure the FDCAN reception filter */
  	  if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK)
 8003e12:	463b      	mov	r3, r7
 8003e14:	4619      	mov	r1, r3
 8003e16:	4814      	ldr	r0, [pc, #80]	@ (8003e68 <MX_FDCAN2_Init+0x140>)
 8003e18:	f006 fc92 	bl	800a740 <HAL_FDCAN_ConfigFilter>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d001      	beq.n	8003e26 <MX_FDCAN2_Init+0xfe>
  	  {
  	    Error_Handler();
 8003e22:	f000 fcac 	bl	800477e <Error_Handler>
  	  }

  	  /* Start the FDCAN module */
  	  if (HAL_FDCAN_Start(&hfdcan2) != HAL_OK)
 8003e26:	4810      	ldr	r0, [pc, #64]	@ (8003e68 <MX_FDCAN2_Init+0x140>)
 8003e28:	f006 fce4 	bl	800a7f4 <HAL_FDCAN_Start>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d001      	beq.n	8003e36 <MX_FDCAN2_Init+0x10e>
  	  {
  	    Error_Handler();
 8003e32:	f000 fca4 	bl	800477e <Error_Handler>
  	  }
  	  /* Enable interrupts */
  	  if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8003e36:	2200      	movs	r2, #0
 8003e38:	2101      	movs	r1, #1
 8003e3a:	480b      	ldr	r0, [pc, #44]	@ (8003e68 <MX_FDCAN2_Init+0x140>)
 8003e3c:	f006 fe0a 	bl	800aa54 <HAL_FDCAN_ActivateNotification>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d001      	beq.n	8003e4a <MX_FDCAN2_Init+0x122>
  	  {
  	    Error_Handler();
 8003e46:	f000 fc9a 	bl	800477e <Error_Handler>
  	  }
  	  if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_TX_FIFO_EMPTY, 0) != HAL_OK) {
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003e50:	4805      	ldr	r0, [pc, #20]	@ (8003e68 <MX_FDCAN2_Init+0x140>)
 8003e52:	f006 fdff 	bl	800aa54 <HAL_FDCAN_ActivateNotification>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d001      	beq.n	8003e60 <MX_FDCAN2_Init+0x138>
  	  		/* Notification Error */
  	  		Error_Handler();
 8003e5c:	f000 fc8f 	bl	800477e <Error_Handler>
  	  	}
  /* USER CODE END FDCAN2_Init 2 */

}
 8003e60:	bf00      	nop
 8003e62:	3718      	adds	r7, #24
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}
 8003e68:	20013ab8 	.word	0x20013ab8
 8003e6c:	4000a800 	.word	0x4000a800
 8003e70:	20013a30 	.word	0x20013a30

08003e74 <HAL_FDCAN_MspInit>:

static uint32_t HAL_RCC_FDCAN_CLK_ENABLED=0;

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b08c      	sub	sp, #48	@ 0x30
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e7c:	f107 031c 	add.w	r3, r7, #28
 8003e80:	2200      	movs	r2, #0
 8003e82:	601a      	str	r2, [r3, #0]
 8003e84:	605a      	str	r2, [r3, #4]
 8003e86:	609a      	str	r2, [r3, #8]
 8003e88:	60da      	str	r2, [r3, #12]
 8003e8a:	611a      	str	r2, [r3, #16]
  if(fdcanHandle->Instance==FDCAN1)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a46      	ldr	r2, [pc, #280]	@ (8003fac <HAL_FDCAN_MspInit+0x138>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d140      	bne.n	8003f18 <HAL_FDCAN_MspInit+0xa4>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* FDCAN1 clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8003e96:	4b46      	ldr	r3, [pc, #280]	@ (8003fb0 <HAL_FDCAN_MspInit+0x13c>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	4a44      	ldr	r2, [pc, #272]	@ (8003fb0 <HAL_FDCAN_MspInit+0x13c>)
 8003e9e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8003ea0:	4b43      	ldr	r3, [pc, #268]	@ (8003fb0 <HAL_FDCAN_MspInit+0x13c>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d10e      	bne.n	8003ec6 <HAL_FDCAN_MspInit+0x52>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8003ea8:	4b42      	ldr	r3, [pc, #264]	@ (8003fb4 <HAL_FDCAN_MspInit+0x140>)
 8003eaa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003eae:	4a41      	ldr	r2, [pc, #260]	@ (8003fb4 <HAL_FDCAN_MspInit+0x140>)
 8003eb0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003eb4:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 8003eb8:	4b3e      	ldr	r3, [pc, #248]	@ (8003fb4 <HAL_FDCAN_MspInit+0x140>)
 8003eba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003ebe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ec2:	61bb      	str	r3, [r7, #24]
 8003ec4:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ec6:	4b3b      	ldr	r3, [pc, #236]	@ (8003fb4 <HAL_FDCAN_MspInit+0x140>)
 8003ec8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ecc:	4a39      	ldr	r2, [pc, #228]	@ (8003fb4 <HAL_FDCAN_MspInit+0x140>)
 8003ece:	f043 0301 	orr.w	r3, r3, #1
 8003ed2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003ed6:	4b37      	ldr	r3, [pc, #220]	@ (8003fb4 <HAL_FDCAN_MspInit+0x140>)
 8003ed8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003edc:	f003 0301 	and.w	r3, r3, #1
 8003ee0:	617b      	str	r3, [r7, #20]
 8003ee2:	697b      	ldr	r3, [r7, #20]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003ee4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8003ee8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eea:	2302      	movs	r3, #2
 8003eec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8003ef6:	2309      	movs	r3, #9
 8003ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003efa:	f107 031c 	add.w	r3, r7, #28
 8003efe:	4619      	mov	r1, r3
 8003f00:	482d      	ldr	r0, [pc, #180]	@ (8003fb8 <HAL_FDCAN_MspInit+0x144>)
 8003f02:	f007 fb65 	bl	800b5d0 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8003f06:	2200      	movs	r2, #0
 8003f08:	2100      	movs	r1, #0
 8003f0a:	2027      	movs	r0, #39	@ 0x27
 8003f0c:	f003 f9eb 	bl	80072e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8003f10:	2027      	movs	r0, #39	@ 0x27
 8003f12:	f003 fa02 	bl	800731a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 8003f16:	e044      	b.n	8003fa2 <HAL_FDCAN_MspInit+0x12e>
  else if(fdcanHandle->Instance==FDCAN2)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a27      	ldr	r2, [pc, #156]	@ (8003fbc <HAL_FDCAN_MspInit+0x148>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d13f      	bne.n	8003fa2 <HAL_FDCAN_MspInit+0x12e>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8003f22:	4b23      	ldr	r3, [pc, #140]	@ (8003fb0 <HAL_FDCAN_MspInit+0x13c>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	3301      	adds	r3, #1
 8003f28:	4a21      	ldr	r2, [pc, #132]	@ (8003fb0 <HAL_FDCAN_MspInit+0x13c>)
 8003f2a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8003f2c:	4b20      	ldr	r3, [pc, #128]	@ (8003fb0 <HAL_FDCAN_MspInit+0x13c>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d10e      	bne.n	8003f52 <HAL_FDCAN_MspInit+0xde>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8003f34:	4b1f      	ldr	r3, [pc, #124]	@ (8003fb4 <HAL_FDCAN_MspInit+0x140>)
 8003f36:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003f3a:	4a1e      	ldr	r2, [pc, #120]	@ (8003fb4 <HAL_FDCAN_MspInit+0x140>)
 8003f3c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003f40:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 8003f44:	4b1b      	ldr	r3, [pc, #108]	@ (8003fb4 <HAL_FDCAN_MspInit+0x140>)
 8003f46:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003f4a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f4e:	613b      	str	r3, [r7, #16]
 8003f50:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f52:	4b18      	ldr	r3, [pc, #96]	@ (8003fb4 <HAL_FDCAN_MspInit+0x140>)
 8003f54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f58:	4a16      	ldr	r2, [pc, #88]	@ (8003fb4 <HAL_FDCAN_MspInit+0x140>)
 8003f5a:	f043 0302 	orr.w	r3, r3, #2
 8003f5e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003f62:	4b14      	ldr	r3, [pc, #80]	@ (8003fb4 <HAL_FDCAN_MspInit+0x140>)
 8003f64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f68:	f003 0302 	and.w	r3, r3, #2
 8003f6c:	60fb      	str	r3, [r7, #12]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003f70:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8003f74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f76:	2302      	movs	r3, #2
 8003f78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8003f82:	2309      	movs	r3, #9
 8003f84:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f86:	f107 031c 	add.w	r3, r7, #28
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	480c      	ldr	r0, [pc, #48]	@ (8003fc0 <HAL_FDCAN_MspInit+0x14c>)
 8003f8e:	f007 fb1f 	bl	800b5d0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 0, 0);
 8003f92:	2200      	movs	r2, #0
 8003f94:	2100      	movs	r1, #0
 8003f96:	206d      	movs	r0, #109	@ 0x6d
 8003f98:	f003 f9a5 	bl	80072e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 8003f9c:	206d      	movs	r0, #109	@ 0x6d
 8003f9e:	f003 f9bc 	bl	800731a <HAL_NVIC_EnableIRQ>
}
 8003fa2:	bf00      	nop
 8003fa4:	3730      	adds	r7, #48	@ 0x30
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	4000a400 	.word	0x4000a400
 8003fb0:	20013b1c 	.word	0x20013b1c
 8003fb4:	44020c00 	.word	0x44020c00
 8003fb8:	42020000 	.word	0x42020000
 8003fbc:	4000a800 	.word	0x4000a800
 8003fc0:	42020400 	.word	0x42020400

08003fc4 <MX_GPDMA1_Init>:

/* USER CODE END 0 */

/* GPDMA1 init function */
void MX_GPDMA1_Init(void)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8003fca:	4b0d      	ldr	r3, [pc, #52]	@ (8004000 <MX_GPDMA1_Init+0x3c>)
 8003fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fd0:	4a0b      	ldr	r2, [pc, #44]	@ (8004000 <MX_GPDMA1_Init+0x3c>)
 8003fd2:	f043 0301 	orr.w	r3, r3, #1
 8003fd6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8003fda:	4b09      	ldr	r3, [pc, #36]	@ (8004000 <MX_GPDMA1_Init+0x3c>)
 8003fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fe0:	f003 0301 	and.w	r3, r3, #1
 8003fe4:	607b      	str	r3, [r7, #4]
 8003fe6:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel4_IRQn, 0, 0);
 8003fe8:	2200      	movs	r2, #0
 8003fea:	2100      	movs	r1, #0
 8003fec:	201f      	movs	r0, #31
 8003fee:	f003 f97a 	bl	80072e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel4_IRQn);
 8003ff2:	201f      	movs	r0, #31
 8003ff4:	f003 f991 	bl	800731a <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8003ff8:	bf00      	nop
 8003ffa:	3708      	adds	r7, #8
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	44020c00 	.word	0x44020c00

08004004 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004004:	b480      	push	{r7}
 8004006:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004008:	4b04      	ldr	r3, [pc, #16]	@ (800401c <__NVIC_GetPriorityGrouping+0x18>)
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	0a1b      	lsrs	r3, r3, #8
 800400e:	f003 0307 	and.w	r3, r3, #7
}
 8004012:	4618      	mov	r0, r3
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr
 800401c:	e000ed00 	.word	0xe000ed00

08004020 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	4603      	mov	r3, r0
 8004028:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800402a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800402e:	2b00      	cmp	r3, #0
 8004030:	db0b      	blt.n	800404a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004032:	88fb      	ldrh	r3, [r7, #6]
 8004034:	f003 021f 	and.w	r2, r3, #31
 8004038:	4907      	ldr	r1, [pc, #28]	@ (8004058 <__NVIC_EnableIRQ+0x38>)
 800403a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800403e:	095b      	lsrs	r3, r3, #5
 8004040:	2001      	movs	r0, #1
 8004042:	fa00 f202 	lsl.w	r2, r0, r2
 8004046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800404a:	bf00      	nop
 800404c:	370c      	adds	r7, #12
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop
 8004058:	e000e100 	.word	0xe000e100

0800405c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
 8004062:	4603      	mov	r3, r0
 8004064:	6039      	str	r1, [r7, #0]
 8004066:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004068:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800406c:	2b00      	cmp	r3, #0
 800406e:	db0a      	blt.n	8004086 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	b2da      	uxtb	r2, r3
 8004074:	490c      	ldr	r1, [pc, #48]	@ (80040a8 <__NVIC_SetPriority+0x4c>)
 8004076:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800407a:	0112      	lsls	r2, r2, #4
 800407c:	b2d2      	uxtb	r2, r2
 800407e:	440b      	add	r3, r1
 8004080:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004084:	e00a      	b.n	800409c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	b2da      	uxtb	r2, r3
 800408a:	4908      	ldr	r1, [pc, #32]	@ (80040ac <__NVIC_SetPriority+0x50>)
 800408c:	88fb      	ldrh	r3, [r7, #6]
 800408e:	f003 030f 	and.w	r3, r3, #15
 8004092:	3b04      	subs	r3, #4
 8004094:	0112      	lsls	r2, r2, #4
 8004096:	b2d2      	uxtb	r2, r2
 8004098:	440b      	add	r3, r1
 800409a:	761a      	strb	r2, [r3, #24]
}
 800409c:	bf00      	nop
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr
 80040a8:	e000e100 	.word	0xe000e100
 80040ac:	e000ed00 	.word	0xe000ed00

080040b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b089      	sub	sp, #36	@ 0x24
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f003 0307 	and.w	r3, r3, #7
 80040c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	f1c3 0307 	rsb	r3, r3, #7
 80040ca:	2b04      	cmp	r3, #4
 80040cc:	bf28      	it	cs
 80040ce:	2304      	movcs	r3, #4
 80040d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	3304      	adds	r3, #4
 80040d6:	2b06      	cmp	r3, #6
 80040d8:	d902      	bls.n	80040e0 <NVIC_EncodePriority+0x30>
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	3b03      	subs	r3, #3
 80040de:	e000      	b.n	80040e2 <NVIC_EncodePriority+0x32>
 80040e0:	2300      	movs	r3, #0
 80040e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040e4:	f04f 32ff 	mov.w	r2, #4294967295
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	fa02 f303 	lsl.w	r3, r2, r3
 80040ee:	43da      	mvns	r2, r3
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	401a      	ands	r2, r3
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040f8:	f04f 31ff 	mov.w	r1, #4294967295
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004102:	43d9      	mvns	r1, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004108:	4313      	orrs	r3, r2
         );
}
 800410a:	4618      	mov	r0, r3
 800410c:	3724      	adds	r7, #36	@ 0x24
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr

08004116 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8004116:	b480      	push	{r7}
 8004118:	b08b      	sub	sp, #44	@ 0x2c
 800411a:	af00      	add	r7, sp, #0
 800411c:	60f8      	str	r0, [r7, #12]
 800411e:	60b9      	str	r1, [r7, #8]
 8004120:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * GPIO_MODER_MODE1_Pos)),
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	fa93 f3a3 	rbit	r3, r3
 8004130:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004136:	69bb      	ldr	r3, [r7, #24]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d101      	bne.n	8004140 <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 800413c:	2320      	movs	r3, #32
 800413e:	e003      	b.n	8004148 <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	fab3 f383 	clz	r3, r3
 8004146:	b2db      	uxtb	r3, r3
 8004148:	005b      	lsls	r3, r3, #1
 800414a:	2103      	movs	r1, #3
 800414c:	fa01 f303 	lsl.w	r3, r1, r3
 8004150:	43db      	mvns	r3, r3
 8004152:	401a      	ands	r2, r3
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004158:	6a3b      	ldr	r3, [r7, #32]
 800415a:	fa93 f3a3 	rbit	r3, r3
 800415e:	61fb      	str	r3, [r7, #28]
  return result;
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004166:	2b00      	cmp	r3, #0
 8004168:	d101      	bne.n	800416e <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800416a:	2320      	movs	r3, #32
 800416c:	e003      	b.n	8004176 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800416e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004170:	fab3 f383 	clz	r3, r3
 8004174:	b2db      	uxtb	r3, r3
 8004176:	005b      	lsls	r3, r3, #1
 8004178:	6879      	ldr	r1, [r7, #4]
 800417a:	fa01 f303 	lsl.w	r3, r1, r3
 800417e:	431a      	orrs	r2, r3
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	601a      	str	r2, [r3, #0]
             (Mode << (POSITION_VAL(Pin) * GPIO_MODER_MODE1_Pos)));
}
 8004184:	bf00      	nop
 8004186:	372c      	adds	r7, #44	@ 0x2c
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8004190:	b480      	push	{r7}
 8004192:	b08b      	sub	sp, #44	@ 0x2c
 8004194:	af00      	add	r7, sp, #0
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * GPIO_PUPDR_PUPD1_Pos)),
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	68da      	ldr	r2, [r3, #12]
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	fa93 f3a3 	rbit	r3, r3
 80041aa:	613b      	str	r3, [r7, #16]
  return result;
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80041b0:	69bb      	ldr	r3, [r7, #24]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d101      	bne.n	80041ba <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80041b6:	2320      	movs	r3, #32
 80041b8:	e003      	b.n	80041c2 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	fab3 f383 	clz	r3, r3
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	005b      	lsls	r3, r3, #1
 80041c4:	2103      	movs	r1, #3
 80041c6:	fa01 f303 	lsl.w	r3, r1, r3
 80041ca:	43db      	mvns	r3, r3
 80041cc:	401a      	ands	r2, r3
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041d2:	6a3b      	ldr	r3, [r7, #32]
 80041d4:	fa93 f3a3 	rbit	r3, r3
 80041d8:	61fb      	str	r3, [r7, #28]
  return result;
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80041de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d101      	bne.n	80041e8 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80041e4:	2320      	movs	r3, #32
 80041e6:	e003      	b.n	80041f0 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80041e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ea:	fab3 f383 	clz	r3, r3
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	005b      	lsls	r3, r3, #1
 80041f2:	6879      	ldr	r1, [r7, #4]
 80041f4:	fa01 f303 	lsl.w	r3, r1, r3
 80041f8:	431a      	orrs	r2, r3
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	60da      	str	r2, [r3, #12]
             (Pull << (POSITION_VAL(Pin) * GPIO_PUPDR_PUPD1_Pos)));
}
 80041fe:	bf00      	nop
 8004200:	372c      	adds	r7, #44	@ 0x2c
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr

0800420a <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800420a:	b480      	push	{r7}
 800420c:	b083      	sub	sp, #12
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
 8004212:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	683a      	ldr	r2, [r7, #0]
 8004218:	619a      	str	r2, [r3, #24]
}
 800421a:	bf00      	nop
 800421c:	370c      	adds	r7, #12
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr

08004226 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8004226:	b480      	push	{r7}
 8004228:	b083      	sub	sp, #12
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
 800422e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	683a      	ldr	r2, [r7, #0]
 8004234:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004236:	bf00      	nop
 8004238:	370c      	adds	r7, #12
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
	...

08004244 <LL_EXTI_SetEXTISource>:
  *         @arg @ref LL_EXTI_EXTI_LINE14
  *         @arg @ref LL_EXTI_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(EXTI->EXTICR[Line & 0x03U], EXTI_EXTICR1_EXTI0 << (Line >> LL_EXTI_REGISTER_PINPOS_SHFT), \
 800424e:	4a10      	ldr	r2, [pc, #64]	@ (8004290 <LL_EXTI_SetEXTISource+0x4c>)
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	f003 0303 	and.w	r3, r3, #3
 8004256:	3318      	adds	r3, #24
 8004258:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	0c1b      	lsrs	r3, r3, #16
 8004260:	210f      	movs	r1, #15
 8004262:	fa01 f303 	lsl.w	r3, r1, r3
 8004266:	43db      	mvns	r3, r3
 8004268:	ea02 0103 	and.w	r1, r2, r3
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	0c1b      	lsrs	r3, r3, #16
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	409a      	lsls	r2, r3
 8004274:	4806      	ldr	r0, [pc, #24]	@ (8004290 <LL_EXTI_SetEXTISource+0x4c>)
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	f003 0303 	and.w	r3, r3, #3
 800427c:	430a      	orrs	r2, r1
 800427e:	3318      	adds	r3, #24
 8004280:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
             Port << (Line >> LL_EXTI_REGISTER_PINPOS_SHFT));
}
 8004284:	bf00      	nop
 8004286:	370c      	adds	r7, #12
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr
 8004290:	44022000 	.word	0x44022000

08004294 <LL_AHB2_GRP1_EnableClock>:
  *
  *  (*)  : Not available for all stm32h5xxxx family lines.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8004294:	b480      	push	{r7}
 8004296:	b085      	sub	sp, #20
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800429c:	4b0a      	ldr	r3, [pc, #40]	@ (80042c8 <LL_AHB2_GRP1_EnableClock+0x34>)
 800429e:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80042a2:	4909      	ldr	r1, [pc, #36]	@ (80042c8 <LL_AHB2_GRP1_EnableClock+0x34>)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80042ac:	4b06      	ldr	r3, [pc, #24]	@ (80042c8 <LL_AHB2_GRP1_EnableClock+0x34>)
 80042ae:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4013      	ands	r3, r2
 80042b6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80042b8:	68fb      	ldr	r3, [r7, #12]
}
 80042ba:	bf00      	nop
 80042bc:	3714      	adds	r7, #20
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	44020c00 	.word	0x44020c00

080042cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b08a      	sub	sp, #40	@ 0x28
 80042d0:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80042d2:	f107 031c 	add.w	r3, r7, #28
 80042d6:	2200      	movs	r2, #0
 80042d8:	601a      	str	r2, [r3, #0]
 80042da:	605a      	str	r2, [r3, #4]
 80042dc:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042de:	1d3b      	adds	r3, r7, #4
 80042e0:	2200      	movs	r2, #0
 80042e2:	601a      	str	r2, [r3, #0]
 80042e4:	605a      	str	r2, [r3, #4]
 80042e6:	609a      	str	r2, [r3, #8]
 80042e8:	60da      	str	r2, [r3, #12]
 80042ea:	611a      	str	r2, [r3, #16]
 80042ec:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 80042ee:	2004      	movs	r0, #4
 80042f0:	f7ff ffd0 	bl	8004294 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80042f4:	2001      	movs	r0, #1
 80042f6:	f7ff ffcd 	bl	8004294 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80042fa:	2002      	movs	r0, #2
 80042fc:	f7ff ffca 	bl	8004294 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);
 8004300:	2008      	movs	r0, #8
 8004302:	f7ff ffc7 	bl	8004294 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_1);
 8004306:	2102      	movs	r1, #2
 8004308:	486e      	ldr	r0, [pc, #440]	@ (80044c4 <MX_GPIO_Init+0x1f8>)
 800430a:	f7ff ff7e 	bl	800420a <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(SPI3_CS_GPIO_Port, SPI3_CS_Pin);
 800430e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004312:	486d      	ldr	r0, [pc, #436]	@ (80044c8 <MX_GPIO_Init+0x1fc>)
 8004314:	f7ff ff79 	bl	800420a <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_2);
 8004318:	2104      	movs	r1, #4
 800431a:	486b      	ldr	r0, [pc, #428]	@ (80044c8 <MX_GPIO_Init+0x1fc>)
 800431c:	f7ff ff83 	bl	8004226 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_10|LL_GPIO_PIN_14|ON_OFF_3_3_Pin|LED_GPS_Pin
 8004320:	f244 5198 	movw	r1, #17816	@ 0x4598
 8004324:	4869      	ldr	r0, [pc, #420]	@ (80044cc <MX_GPIO_Init+0x200>)
 8004326:	f7ff ff7e 	bl	8004226 <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_7|LL_GPIO_PIN_8);

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_8|LL_GPIO_PIN_9);
 800432a:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800432e:	4865      	ldr	r0, [pc, #404]	@ (80044c4 <MX_GPIO_Init+0x1f8>)
 8004330:	f7ff ff79 	bl	8004226 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LC86_ON_OFF_GPIO_Port, LC86_ON_OFF_Pin);
 8004334:	2104      	movs	r1, #4
 8004336:	4866      	ldr	r0, [pc, #408]	@ (80044d0 <MX_GPIO_Init+0x204>)
 8004338:	f7ff ff75 	bl	8004226 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1|LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 800433c:	f240 3302 	movw	r3, #770	@ 0x302
 8004340:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004342:	2301      	movs	r3, #1
 8004344:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004346:	2300      	movs	r3, #0
 8004348:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800434a:	2300      	movs	r3, #0
 800434c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800434e:	2300      	movs	r3, #0
 8004350:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004352:	1d3b      	adds	r3, r7, #4
 8004354:	4619      	mov	r1, r3
 8004356:	485b      	ldr	r0, [pc, #364]	@ (80044c4 <MX_GPIO_Init+0x1f8>)
 8004358:	f011 fb2d 	bl	80159b6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 800435c:	2301      	movs	r3, #1
 800435e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8004360:	2300      	movs	r3, #0
 8004362:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004364:	2300      	movs	r3, #0
 8004366:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004368:	1d3b      	adds	r3, r7, #4
 800436a:	4619      	mov	r1, r3
 800436c:	4856      	ldr	r0, [pc, #344]	@ (80044c8 <MX_GPIO_Init+0x1fc>)
 800436e:	f011 fb22 	bl	80159b6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8004372:	2304      	movs	r3, #4
 8004374:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004376:	2301      	movs	r3, #1
 8004378:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800437a:	2300      	movs	r3, #0
 800437c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800437e:	2300      	movs	r3, #0
 8004380:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004382:	2300      	movs	r3, #0
 8004384:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004386:	1d3b      	adds	r3, r7, #4
 8004388:	4619      	mov	r1, r3
 800438a:	484f      	ldr	r0, [pc, #316]	@ (80044c8 <MX_GPIO_Init+0x1fc>)
 800438c:	f011 fb13 	bl	80159b6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_14|ON_OFF_3_3_Pin|LED_GPS_Pin
 8004390:	f244 5398 	movw	r3, #17816	@ 0x4598
 8004394:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_7|LL_GPIO_PIN_8;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004396:	2301      	movs	r3, #1
 8004398:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800439a:	2300      	movs	r3, #0
 800439c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800439e:	2300      	movs	r3, #0
 80043a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80043a2:	2300      	movs	r3, #0
 80043a4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043a6:	1d3b      	adds	r3, r7, #4
 80043a8:	4619      	mov	r1, r3
 80043aa:	4848      	ldr	r0, [pc, #288]	@ (80044cc <MX_GPIO_Init+0x200>)
 80043ac:	f011 fb03 	bl	80159b6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 80043b0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043b4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80043b6:	2301      	movs	r3, #1
 80043b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80043ba:	2303      	movs	r3, #3
 80043bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80043be:	2300      	movs	r3, #0
 80043c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80043c2:	2300      	movs	r3, #0
 80043c4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 80043c6:	1d3b      	adds	r3, r7, #4
 80043c8:	4619      	mov	r1, r3
 80043ca:	483f      	ldr	r0, [pc, #252]	@ (80044c8 <MX_GPIO_Init+0x1fc>)
 80043cc:	f011 faf3 	bl	80159b6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LC86_ON_OFF_Pin;
 80043d0:	2304      	movs	r3, #4
 80043d2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80043d4:	2301      	movs	r3, #1
 80043d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80043d8:	2300      	movs	r3, #0
 80043da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80043dc:	2300      	movs	r3, #0
 80043de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80043e0:	2300      	movs	r3, #0
 80043e2:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(LC86_ON_OFF_GPIO_Port, &GPIO_InitStruct);
 80043e4:	1d3b      	adds	r3, r7, #4
 80043e6:	4619      	mov	r1, r3
 80043e8:	4839      	ldr	r0, [pc, #228]	@ (80044d0 <MX_GPIO_Init+0x204>)
 80043ea:	f011 fae4 	bl	80159b6 <LL_GPIO_Init>

  /**/
  LL_EXTI_SetEXTISource(LL_EXTI_EXTI_PORTB, LL_EXTI_EXTI_LINE15);
 80043ee:	4939      	ldr	r1, [pc, #228]	@ (80044d4 <MX_GPIO_Init+0x208>)
 80043f0:	2001      	movs	r0, #1
 80043f2:	f7ff ff27 	bl	8004244 <LL_EXTI_SetEXTISource>

  /**/
  LL_EXTI_SetEXTISource(LL_EXTI_EXTI_PORTA, LL_EXTI_EXTI_LINE8);
 80043f6:	2102      	movs	r1, #2
 80043f8:	2000      	movs	r0, #0
 80043fa:	f7ff ff23 	bl	8004244 <LL_EXTI_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 80043fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004402:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8004404:	2300      	movs	r3, #0
 8004406:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8004408:	2301      	movs	r3, #1
 800440a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800440e:	2300      	movs	r3, #0
 8004410:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8004414:	2302      	movs	r3, #2
 8004416:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 800441a:	f107 031c 	add.w	r3, r7, #28
 800441e:	4618      	mov	r0, r3
 8004420:	f011 f88e 	bl	8015540 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_8;
 8004424:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004428:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 800442a:	2300      	movs	r3, #0
 800442c:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 800442e:	2301      	movs	r3, #1
 8004430:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8004434:	2300      	movs	r3, #0
 8004436:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 800443a:	2302      	movs	r3, #2
 800443c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8004440:	f107 031c 	add.w	r3, r7, #28
 8004444:	4618      	mov	r0, r3
 8004446:	f011 f87b 	bl	8015540 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_15, LL_GPIO_PULL_NO);
 800444a:	2200      	movs	r2, #0
 800444c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004450:	481e      	ldr	r0, [pc, #120]	@ (80044cc <MX_GPIO_Init+0x200>)
 8004452:	f7ff fe9d 	bl	8004190 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(RingIndicator_GPIO_Port, RingIndicator_Pin, LL_GPIO_PULL_NO);
 8004456:	2200      	movs	r2, #0
 8004458:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800445c:	481a      	ldr	r0, [pc, #104]	@ (80044c8 <MX_GPIO_Init+0x1fc>)
 800445e:	f7ff fe97 	bl	8004190 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_15, LL_GPIO_MODE_INPUT);
 8004462:	2200      	movs	r2, #0
 8004464:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004468:	4818      	ldr	r0, [pc, #96]	@ (80044cc <MX_GPIO_Init+0x200>)
 800446a:	f7ff fe54 	bl	8004116 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(RingIndicator_GPIO_Port, RingIndicator_Pin, LL_GPIO_MODE_INPUT);
 800446e:	2200      	movs	r2, #0
 8004470:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004474:	4814      	ldr	r0, [pc, #80]	@ (80044c8 <MX_GPIO_Init+0x1fc>)
 8004476:	f7ff fe4e 	bl	8004116 <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI8_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800447a:	f7ff fdc3 	bl	8004004 <__NVIC_GetPriorityGrouping>
 800447e:	4603      	mov	r3, r0
 8004480:	2200      	movs	r2, #0
 8004482:	2100      	movs	r1, #0
 8004484:	4618      	mov	r0, r3
 8004486:	f7ff fe13 	bl	80040b0 <NVIC_EncodePriority>
 800448a:	4603      	mov	r3, r0
 800448c:	4619      	mov	r1, r3
 800448e:	2013      	movs	r0, #19
 8004490:	f7ff fde4 	bl	800405c <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI8_IRQn);
 8004494:	2013      	movs	r0, #19
 8004496:	f7ff fdc3 	bl	8004020 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800449a:	f7ff fdb3 	bl	8004004 <__NVIC_GetPriorityGrouping>
 800449e:	4603      	mov	r3, r0
 80044a0:	2200      	movs	r2, #0
 80044a2:	2100      	movs	r1, #0
 80044a4:	4618      	mov	r0, r3
 80044a6:	f7ff fe03 	bl	80040b0 <NVIC_EncodePriority>
 80044aa:	4603      	mov	r3, r0
 80044ac:	4619      	mov	r1, r3
 80044ae:	201a      	movs	r0, #26
 80044b0:	f7ff fdd4 	bl	800405c <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_IRQn);
 80044b4:	201a      	movs	r0, #26
 80044b6:	f7ff fdb3 	bl	8004020 <__NVIC_EnableIRQ>

}
 80044ba:	bf00      	nop
 80044bc:	3728      	adds	r7, #40	@ 0x28
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	42020800 	.word	0x42020800
 80044c8:	42020000 	.word	0x42020000
 80044cc:	42020400 	.word	0x42020400
 80044d0:	42020c00 	.word	0x42020c00
 80044d4:	00180003 	.word	0x00180003

080044d8 <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80044dc:	2000      	movs	r0, #0
 80044de:	f007 f9e1 	bl	800b8a4 <HAL_ICACHE_ConfigAssociativityMode>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d001      	beq.n	80044ec <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80044e8:	f000 f949 	bl	800477e <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80044ec:	f007 f9fa 	bl	800b8e4 <HAL_ICACHE_Enable>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d001      	beq.n	80044fa <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80044f6:	f000 f942 	bl	800477e <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80044fa:	bf00      	nop
 80044fc:	bd80      	pop	{r7, pc}
	...

08004500 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	af00      	add	r7, sp, #0
//	  hiwdg.Init.Prescaler = IWDG_PRESCALER_1024;
//	  hiwdg.Init.Window = IWDG_WINDOW_DISABLE;
//	  hiwdg.Init.Reload = 3749;
//	  hiwdg.Init.EWI = IWDG_EWI_DISABLE;
  /* USER CODE END IWDG_Init 1 */
		  hiwdg.Instance = IWDG;
 8004504:	4b0d      	ldr	r3, [pc, #52]	@ (800453c <MX_IWDG_Init+0x3c>)
 8004506:	4a0e      	ldr	r2, [pc, #56]	@ (8004540 <MX_IWDG_Init+0x40>)
 8004508:	601a      	str	r2, [r3, #0]
		  hiwdg.Init.Prescaler = IWDG_PRESCALER_1024;
 800450a:	4b0c      	ldr	r3, [pc, #48]	@ (800453c <MX_IWDG_Init+0x3c>)
 800450c:	2208      	movs	r2, #8
 800450e:	605a      	str	r2, [r3, #4]
		  hiwdg.Init.Window = IWDG_WINDOW_DISABLE;
 8004510:	4b0a      	ldr	r3, [pc, #40]	@ (800453c <MX_IWDG_Init+0x3c>)
 8004512:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8004516:	60da      	str	r2, [r3, #12]
		  hiwdg.Init.Reload = 3749;
 8004518:	4b08      	ldr	r3, [pc, #32]	@ (800453c <MX_IWDG_Init+0x3c>)
 800451a:	f640 62a5 	movw	r2, #3749	@ 0xea5
 800451e:	609a      	str	r2, [r3, #8]
		  hiwdg.Init.EWI = IWDG_EWI_DISABLE;
 8004520:	4b06      	ldr	r3, [pc, #24]	@ (800453c <MX_IWDG_Init+0x3c>)
 8004522:	2200      	movs	r2, #0
 8004524:	611a      	str	r2, [r3, #16]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8004526:	4805      	ldr	r0, [pc, #20]	@ (800453c <MX_IWDG_Init+0x3c>)
 8004528:	f007 f9ec 	bl	800b904 <HAL_IWDG_Init>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d001      	beq.n	8004536 <MX_IWDG_Init+0x36>
  {
    Error_Handler();
 8004532:	f000 f924 	bl	800477e <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8004536:	bf00      	nop
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	20013b20 	.word	0x20013b20
 8004540:	40003000 	.word	0x40003000

08004544 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8004544:	b580      	push	{r7, lr}
 8004546:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN 1 */
	SCB->VTOR = 0x08000000;
 8004548:	4b1c      	ldr	r3, [pc, #112]	@ (80045bc <main+0x78>)
 800454a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800454e:	609a      	str	r2, [r3, #8]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8004550:	f001 f98c 	bl	800586c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8004554:	f000 f836 	bl	80045c4 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 8004558:	f000 f8a6 	bl	80046a8 <PeriphCommonClock_Config>

	/* USER CODE BEGIN SysInit */
	MX_GPIO_Init();
 800455c:	f7ff feb6 	bl	80042cc <MX_GPIO_Init>
	MX_FDCAN1_Init();
 8004560:	f7ff fb3c 	bl	8003bdc <MX_FDCAN1_Init>
	MX_RTC_Init();
 8004564:	f000 f912 	bl	800478c <MX_RTC_Init>

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */

	MX_GPDMA1_Init();
 8004568:	f7ff fd2c 	bl	8003fc4 <MX_GPDMA1_Init>
	MX_UART5_Init();
 800456c:	f000 fe54 	bl	8005218 <MX_UART5_Init>
	MX_ICACHE_Init();
 8004570:	f7ff ffb2 	bl	80044d8 <MX_ICACHE_Init>
	MX_USART6_UART_Init();
 8004574:	f000 fee8 	bl	8005348 <MX_USART6_UART_Init>
	MX_USART1_UART_Init();
 8004578:	f000 fe9a 	bl	80052b0 <MX_USART1_UART_Init>
	MX_FDCAN2_Init();
 800457c:	f7ff fbd4 	bl	8003d28 <MX_FDCAN2_Init>
	MX_TIM6_Init();
 8004580:	f000 fdec 	bl	800515c <MX_TIM6_Init>
	MX_AES_Init();
 8004584:	f7ff fa8c 	bl	8003aa0 <MX_AES_Init>
	MX_CRC_Init();
 8004588:	f7ff fada 	bl	8003b40 <MX_CRC_Init>
	MX_SPI3_Init();
 800458c:	f000 fa30 	bl	80049f0 <MX_SPI3_Init>
	MX_FLASH_Init();
 8004590:	f7fe f85e 	bl	8002650 <MX_FLASH_Init>
	MX_ADC1_Init();
 8004594:	f7ff f814 	bl	80035c0 <MX_ADC1_Init>

	MX_ADC2_Init();
 8004598:	f7ff f878 	bl	800368c <MX_ADC2_Init>

	/* USER CODE BEGIN 2 */

	Sleep_Mode();
 800459c:	f016 fe50 	bl	801b240 <Sleep_Mode>
	MX_IWDG_Init();
 80045a0:	f7ff ffae 	bl	8004500 <MX_IWDG_Init>
	On_Wakeup_Config();
 80045a4:	f016 fd56 	bl	801b054 <On_Wakeup_Config>
	init();
 80045a8:	f7fe f87c 	bl	80026a4 <init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		HAL_IWDG_Refresh(&hiwdg);
 80045ac:	4804      	ldr	r0, [pc, #16]	@ (80045c0 <main+0x7c>)
 80045ae:	f007 fa31 	bl	800ba14 <HAL_IWDG_Refresh>
		loop();
 80045b2:	f7fe f91d 	bl	80027f0 <loop>
		HAL_IWDG_Refresh(&hiwdg);
 80045b6:	bf00      	nop
 80045b8:	e7f8      	b.n	80045ac <main+0x68>
 80045ba:	bf00      	nop
 80045bc:	e000ed00 	.word	0xe000ed00
 80045c0:	20013b20 	.word	0x20013b20

080045c4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b09c      	sub	sp, #112	@ 0x70
 80045c8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80045ca:	f107 0320 	add.w	r3, r7, #32
 80045ce:	2250      	movs	r2, #80	@ 0x50
 80045d0:	2100      	movs	r1, #0
 80045d2:	4618      	mov	r0, r3
 80045d4:	f01a fc2c 	bl	801ee30 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80045d8:	f107 0308 	add.w	r3, r7, #8
 80045dc:	2200      	movs	r2, #0
 80045de:	601a      	str	r2, [r3, #0]
 80045e0:	605a      	str	r2, [r3, #4]
 80045e2:	609a      	str	r2, [r3, #8]
 80045e4:	60da      	str	r2, [r3, #12]
 80045e6:	611a      	str	r2, [r3, #16]
 80045e8:	615a      	str	r2, [r3, #20]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80045ea:	4b2e      	ldr	r3, [pc, #184]	@ (80046a4 <SystemClock_Config+0xe0>)
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	4a2d      	ldr	r2, [pc, #180]	@ (80046a4 <SystemClock_Config+0xe0>)
 80045f0:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80045f4:	6113      	str	r3, [r2, #16]
 80045f6:	4b2b      	ldr	r3, [pc, #172]	@ (80046a4 <SystemClock_Config+0xe0>)
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80045fe:	607b      	str	r3, [r7, #4]
 8004600:	687b      	ldr	r3, [r7, #4]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 8004602:	bf00      	nop
 8004604:	4b27      	ldr	r3, [pc, #156]	@ (80046a4 <SystemClock_Config+0xe0>)
 8004606:	695b      	ldr	r3, [r3, #20]
 8004608:	f003 0308 	and.w	r3, r3, #8
 800460c:	2b08      	cmp	r3, #8
 800460e:	d1f9      	bne.n	8004604 <SystemClock_Config+0x40>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8004610:	231a      	movs	r3, #26
 8004612:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_CSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004614:	2301      	movs	r3, #1
 8004616:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8004618:	2300      	movs	r3, #0
 800461a:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800461c:	2340      	movs	r3, #64	@ 0x40
 800461e:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004620:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004624:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8004626:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800462a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 800462c:	2320      	movs	r3, #32
 800462e:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004630:	2302      	movs	r3, #2
 8004632:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSI;
 8004634:	2301      	movs	r3, #1
 8004636:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8004638:	2304      	movs	r3, #4
 800463a:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLN = 8;
 800463c:	2308      	movs	r3, #8
 800463e:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 8004640:	2302      	movs	r3, #2
 8004642:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8004644:	2302      	movs	r3, #2
 8004646:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8004648:	2302      	movs	r3, #2
 800464a:	663b      	str	r3, [r7, #96]	@ 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 800464c:	230c      	movs	r3, #12
 800464e:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8004650:	2300      	movs	r3, #0
 8004652:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8004654:	2300      	movs	r3, #0
 8004656:	66fb      	str	r3, [r7, #108]	@ 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8004658:	f107 0320 	add.w	r3, r7, #32
 800465c:	4618      	mov	r0, r3
 800465e:	f007 fa25 	bl	800baac <HAL_RCC_OscConfig>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d001      	beq.n	800466c <SystemClock_Config+0xa8>
		Error_Handler();
 8004668:	f000 f889 	bl	800477e <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800466c:	231f      	movs	r3, #31
 800466e:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004670:	2303      	movs	r3, #3
 8004672:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8004674:	2308      	movs	r3, #8
 8004676:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004678:	2300      	movs	r3, #0
 800467a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800467c:	2300      	movs	r3, #0
 800467e:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8004680:	2300      	movs	r3, #0
 8004682:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 8004684:	f107 0308 	add.w	r3, r7, #8
 8004688:	2103      	movs	r1, #3
 800468a:	4618      	mov	r0, r3
 800468c:	f007 fe46 	bl	800c31c <HAL_RCC_ClockConfig>
 8004690:	4603      	mov	r3, r0
 8004692:	2b00      	cmp	r3, #0
 8004694:	d001      	beq.n	800469a <SystemClock_Config+0xd6>
		Error_Handler();
 8004696:	f000 f872 	bl	800477e <Error_Handler>
	}
}
 800469a:	bf00      	nop
 800469c:	3770      	adds	r7, #112	@ 0x70
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	44020800 	.word	0x44020800

080046a8 <PeriphCommonClock_Config>:

/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void) {
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b0c2      	sub	sp, #264	@ 0x108
 80046ac:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 80046ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80046b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80046b6:	4618      	mov	r0, r3
 80046b8:	f44f 7384 	mov.w	r3, #264	@ 0x108
 80046bc:	461a      	mov	r2, r3
 80046be:	2100      	movs	r1, #0
 80046c0:	f01a fbb6 	bl	801ee30 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC
 80046c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80046c8:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 80046cc:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80046d0:	f04f 0304 	mov.w	r3, #4
 80046d4:	e9c1 2300 	strd	r2, r3, [r1]
			| RCC_PERIPHCLK_FDCAN;
	PeriphClkInitStruct.PLL2.PLL2Source = RCC_PLL2_SOURCE_CSI;
 80046d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80046dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80046e0:	2202      	movs	r2, #2
 80046e2:	609a      	str	r2, [r3, #8]
	PeriphClkInitStruct.PLL2.PLL2M = 1;
 80046e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80046e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80046ec:	2201      	movs	r2, #1
 80046ee:	60da      	str	r2, [r3, #12]
	PeriphClkInitStruct.PLL2.PLL2N = 50;
 80046f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80046f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80046f8:	2232      	movs	r2, #50	@ 0x32
 80046fa:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLL2.PLL2P = 2;
 80046fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004700:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004704:	2202      	movs	r2, #2
 8004706:	615a      	str	r2, [r3, #20]
	PeriphClkInitStruct.PLL2.PLL2Q = 4;
 8004708:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800470c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004710:	2204      	movs	r2, #4
 8004712:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLL2.PLL2R = 2;
 8004714:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004718:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800471c:	2202      	movs	r2, #2
 800471e:	61da      	str	r2, [r3, #28]
	PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2_VCIRANGE_2;
 8004720:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004724:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004728:	2208      	movs	r2, #8
 800472a:	621a      	str	r2, [r3, #32]
	PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2_VCORANGE_WIDE;
 800472c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004730:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004734:	2200      	movs	r2, #0
 8004736:	625a      	str	r2, [r3, #36]	@ 0x24
	PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8004738:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800473c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004740:	2200      	movs	r2, #0
 8004742:	629a      	str	r2, [r3, #40]	@ 0x28
	PeriphClkInitStruct.PLL2.PLL2ClockOut = RCC_PLL2_DIVQ;
 8004744:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004748:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800474c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004750:	62da      	str	r2, [r3, #44]	@ 0x2c
	PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2Q;
 8004752:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004756:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800475a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800475e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8004762:	463b      	mov	r3, r7
 8004764:	4618      	mov	r0, r3
 8004766:	f008 f91b 	bl	800c9a0 <HAL_RCCEx_PeriphCLKConfig>
 800476a:	4603      	mov	r3, r0
 800476c:	2b00      	cmp	r3, #0
 800476e:	d001      	beq.n	8004774 <PeriphCommonClock_Config+0xcc>
		Error_Handler();
 8004770:	f000 f805 	bl	800477e <Error_Handler>
	}
}
 8004774:	bf00      	nop
 8004776:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}

0800477e <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800477e:	b480      	push	{r7}
 8004780:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004782:	b672      	cpsid	i
}
 8004784:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8004786:	bf00      	nop
 8004788:	e7fd      	b.n	8004786 <Error_Handler+0x8>
	...

0800478c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b088      	sub	sp, #32
 8004790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8004792:	1d3b      	adds	r3, r7, #4
 8004794:	2200      	movs	r2, #0
 8004796:	601a      	str	r2, [r3, #0]
 8004798:	605a      	str	r2, [r3, #4]
 800479a:	609a      	str	r2, [r3, #8]
 800479c:	60da      	str	r2, [r3, #12]
 800479e:	611a      	str	r2, [r3, #16]
 80047a0:	615a      	str	r2, [r3, #20]
 80047a2:	619a      	str	r2, [r3, #24]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80047a4:	4b1e      	ldr	r3, [pc, #120]	@ (8004820 <MX_RTC_Init+0x94>)
 80047a6:	4a1f      	ldr	r2, [pc, #124]	@ (8004824 <MX_RTC_Init+0x98>)
 80047a8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80047aa:	4b1d      	ldr	r3, [pc, #116]	@ (8004820 <MX_RTC_Init+0x94>)
 80047ac:	2200      	movs	r2, #0
 80047ae:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80047b0:	4b1b      	ldr	r3, [pc, #108]	@ (8004820 <MX_RTC_Init+0x94>)
 80047b2:	227f      	movs	r2, #127	@ 0x7f
 80047b4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80047b6:	4b1a      	ldr	r3, [pc, #104]	@ (8004820 <MX_RTC_Init+0x94>)
 80047b8:	22ff      	movs	r2, #255	@ 0xff
 80047ba:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80047bc:	4b18      	ldr	r3, [pc, #96]	@ (8004820 <MX_RTC_Init+0x94>)
 80047be:	2200      	movs	r2, #0
 80047c0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80047c2:	4b17      	ldr	r3, [pc, #92]	@ (8004820 <MX_RTC_Init+0x94>)
 80047c4:	2200      	movs	r2, #0
 80047c6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80047c8:	4b15      	ldr	r3, [pc, #84]	@ (8004820 <MX_RTC_Init+0x94>)
 80047ca:	2200      	movs	r2, #0
 80047cc:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80047ce:	4b14      	ldr	r3, [pc, #80]	@ (8004820 <MX_RTC_Init+0x94>)
 80047d0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80047d4:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80047d6:	4b12      	ldr	r3, [pc, #72]	@ (8004820 <MX_RTC_Init+0x94>)
 80047d8:	2200      	movs	r2, #0
 80047da:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 80047dc:	4b10      	ldr	r3, [pc, #64]	@ (8004820 <MX_RTC_Init+0x94>)
 80047de:	2200      	movs	r2, #0
 80047e0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80047e2:	480f      	ldr	r0, [pc, #60]	@ (8004820 <MX_RTC_Init+0x94>)
 80047e4:	f00d f92e 	bl	8011a44 <HAL_RTC_Init>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d001      	beq.n	80047f2 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 80047ee:	f7ff ffc6 	bl	800477e <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 80047f2:	2300      	movs	r3, #0
 80047f4:	607b      	str	r3, [r7, #4]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 80047f6:	2300      	movs	r3, #0
 80047f8:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 80047fa:	2300      	movs	r3, #0
 80047fc:	617b      	str	r3, [r7, #20]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 80047fe:	2300      	movs	r3, #0
 8004800:	61bb      	str	r3, [r7, #24]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8004802:	1d3b      	adds	r3, r7, #4
 8004804:	4619      	mov	r1, r3
 8004806:	4806      	ldr	r0, [pc, #24]	@ (8004820 <MX_RTC_Init+0x94>)
 8004808:	f00d fd08 	bl	801221c <HAL_RTCEx_PrivilegeModeSet>
 800480c:	4603      	mov	r3, r0
 800480e:	2b00      	cmp	r3, #0
 8004810:	d001      	beq.n	8004816 <MX_RTC_Init+0x8a>
  {
    Error_Handler();
 8004812:	f7ff ffb4 	bl	800477e <Error_Handler>
//  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8004816:	bf00      	nop
 8004818:	3720      	adds	r7, #32
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
 800481e:	bf00      	nop
 8004820:	20013b34 	.word	0x20013b34
 8004824:	44007800 	.word	0x44007800

08004828 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b0c6      	sub	sp, #280	@ 0x118
 800482c:	af00      	add	r7, sp, #0
 800482e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004832:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004836:	6018      	str	r0, [r3, #0]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004838:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800483c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004840:	4618      	mov	r0, r3
 8004842:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8004846:	461a      	mov	r2, r3
 8004848:	2100      	movs	r1, #0
 800484a:	f01a faf1 	bl	801ee30 <memset>
  if(rtcHandle->Instance==RTC)
 800484e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004852:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a25      	ldr	r2, [pc, #148]	@ (80048f0 <HAL_RTC_MspInit+0xc8>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d142      	bne.n	80048e6 <HAL_RTC_MspInit+0xbe>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004860:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004864:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 8004868:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800486c:	f04f 0300 	mov.w	r3, #0
 8004870:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004874:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004878:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800487c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004880:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004884:	f107 0310 	add.w	r3, r7, #16
 8004888:	4618      	mov	r0, r3
 800488a:	f008 f889 	bl	800c9a0 <HAL_RCCEx_PeriphCLKConfig>
 800488e:	4603      	mov	r3, r0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d001      	beq.n	8004898 <HAL_RTC_MspInit+0x70>
    {
      Error_Handler();
 8004894:	f7ff ff73 	bl	800477e <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004898:	4b16      	ldr	r3, [pc, #88]	@ (80048f4 <HAL_RTC_MspInit+0xcc>)
 800489a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800489e:	4a15      	ldr	r2, [pc, #84]	@ (80048f4 <HAL_RTC_MspInit+0xcc>)
 80048a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048a4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80048a8:	4b12      	ldr	r3, [pc, #72]	@ (80048f4 <HAL_RTC_MspInit+0xcc>)
 80048aa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80048ae:	4a11      	ldr	r2, [pc, #68]	@ (80048f4 <HAL_RTC_MspInit+0xcc>)
 80048b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80048b4:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 80048b8:	4b0e      	ldr	r3, [pc, #56]	@ (80048f4 <HAL_RTC_MspInit+0xcc>)
 80048ba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80048be:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80048c2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80048c6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80048ca:	601a      	str	r2, [r3, #0]
 80048cc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80048d0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80048d4:	681b      	ldr	r3, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80048d6:	2200      	movs	r2, #0
 80048d8:	2100      	movs	r1, #0
 80048da:	2002      	movs	r0, #2
 80048dc:	f002 fd03 	bl	80072e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 80048e0:	2002      	movs	r0, #2
 80048e2:	f002 fd1a 	bl	800731a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80048e6:	bf00      	nop
 80048e8:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	44007800 	.word	0x44007800
 80048f4:	44020c00 	.word	0x44020c00

080048f8 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f043 0201 	orr.w	r2, r3, #1
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	601a      	str	r2, [r3, #0]
}
 800490c:	bf00      	nop
 800490e:	370c      	adds	r7, #12
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <LL_SPI_StartMasterTransfer>:
  * @rmtoll CR1          CSTART        LL_SPI_StartMasterTransfer
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_StartMasterTransfer(SPI_TypeDef *SPIx)
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_CSTART);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	601a      	str	r2, [r3, #0]
}
 800492c:	bf00      	nop
 800492e:	370c      	adds	r7, #12
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CFG2, SPI_CFG2_SP, Standard);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	f423 1260 	bic.w	r2, r3, #3670016	@ 0x380000
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	431a      	orrs	r2, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	60da      	str	r2, [r3, #12]
}
 8004952:	bf00      	nop
 8004954:	370c      	adds	r7, #12
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr

0800495e <LL_SPI_DisableNSSPulseMgt>:
  * @rmtoll CFG2         SSOM          LL_SPI_DisableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 800495e:	b480      	push	{r7}
 8004960:	b083      	sub	sp, #12
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CFG2, SPI_CFG2_SSOM);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	60da      	str	r2, [r3, #12]
}
 8004972:	bf00      	nop
 8004974:	370c      	adds	r7, #12
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
	...

08004980 <LL_AHB2_GRP1_EnableClock>:
{
 8004980:	b480      	push	{r7}
 8004982:	b085      	sub	sp, #20
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004988:	4b0a      	ldr	r3, [pc, #40]	@ (80049b4 <LL_AHB2_GRP1_EnableClock+0x34>)
 800498a:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800498e:	4909      	ldr	r1, [pc, #36]	@ (80049b4 <LL_AHB2_GRP1_EnableClock+0x34>)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4313      	orrs	r3, r2
 8004994:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004998:	4b06      	ldr	r3, [pc, #24]	@ (80049b4 <LL_AHB2_GRP1_EnableClock+0x34>)
 800499a:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4013      	ands	r3, r2
 80049a2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80049a4:	68fb      	ldr	r3, [r7, #12]
}
 80049a6:	bf00      	nop
 80049a8:	3714      	adds	r7, #20
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr
 80049b2:	bf00      	nop
 80049b4:	44020c00 	.word	0x44020c00

080049b8 <LL_APB1_GRP1_EnableClock>:
  *
  *  (*)  : Not available for all stm32h5xxxx family lines.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b085      	sub	sp, #20
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1LENR, Periphs);
 80049c0:	4b0a      	ldr	r3, [pc, #40]	@ (80049ec <LL_APB1_GRP1_EnableClock+0x34>)
 80049c2:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80049c6:	4909      	ldr	r1, [pc, #36]	@ (80049ec <LL_APB1_GRP1_EnableClock+0x34>)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1LENR, Periphs);
 80049d0:	4b06      	ldr	r3, [pc, #24]	@ (80049ec <LL_APB1_GRP1_EnableClock+0x34>)
 80049d2:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4013      	ands	r3, r2
 80049da:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80049dc:	68fb      	ldr	r3, [r7, #12]
}
 80049de:	bf00      	nop
 80049e0:	3714      	adds	r7, #20
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr
 80049ea:	bf00      	nop
 80049ec:	44020c00 	.word	0x44020c00

080049f0 <MX_SPI3_Init>:

/* USER CODE END 0 */

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b0d2      	sub	sp, #328	@ 0x148
 80049f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80049f6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80049fa:	2228      	movs	r2, #40	@ 0x28
 80049fc:	2100      	movs	r1, #0
 80049fe:	4618      	mov	r0, r3
 8004a00:	f01a fa16 	bl	801ee30 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a08:	2200      	movs	r2, #0
 8004a0a:	601a      	str	r2, [r3, #0]
 8004a0c:	605a      	str	r2, [r3, #4]
 8004a0e:	609a      	str	r2, [r3, #8]
 8004a10:	60da      	str	r2, [r3, #12]
 8004a12:	611a      	str	r2, [r3, #16]
 8004a14:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004a16:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004a1a:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8004a24:	461a      	mov	r2, r3
 8004a26:	2100      	movs	r1, #0
 8004a28:	f01a fa02 	bl	801ee30 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8004a2c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004a30:	f5a3 71a4 	sub.w	r1, r3, #328	@ 0x148
 8004a34:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8004a38:	f04f 0300 	mov.w	r3, #0
 8004a3c:	e9c1 2300 	strd	r2, r3, [r1]
  PeriphClkInitStruct.Spi3ClockSelection = RCC_SPI3CLKSOURCE_PLL1Q;
 8004a40:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004a44:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004a4e:	463b      	mov	r3, r7
 8004a50:	4618      	mov	r0, r3
 8004a52:	f007 ffa5 	bl	800c9a0 <HAL_RCCEx_PeriphCLKConfig>
 8004a56:	4603      	mov	r3, r0
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d001      	beq.n	8004a60 <MX_SPI3_Init+0x70>
  {
    Error_Handler();
 8004a5c:	f7ff fe8f 	bl	800477e <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8004a60:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8004a64:	f7ff ffa8 	bl	80049b8 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8004a68:	2004      	movs	r0, #4
 8004a6a:	f7ff ff89 	bl	8004980 <LL_AHB2_GRP1_EnableClock>
  /**SPI3 GPIO Configuration
  PC10   ------> SPI3_SCK
  PC11   ------> SPI3_MISO
  PC12   ------> SPI3_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 8004a6e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8004a72:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004a76:	2302      	movs	r3, #2
 8004a78:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004a82:	2300      	movs	r3, #0
 8004a84:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8004a8e:	2306      	movs	r3, #6
 8004a90:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a98:	4619      	mov	r1, r3
 8004a9a:	481f      	ldr	r0, [pc, #124]	@ (8004b18 <MX_SPI3_Init+0x128>)
 8004a9c:	f010 ff8b 	bl	80159b6 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8004aa6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004aaa:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8004aae:	2307      	movs	r3, #7
 8004ab0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8004ab4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004ab8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8004abc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004ac0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8004ac4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004ac8:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV128;
 8004acc:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 8004ad0:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8004ada:	2300      	movs	r3, #0
 8004adc:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
  SPI_InitStruct.CRCPoly = 0x7;
 8004ae0:	2307      	movs	r3, #7
 8004ae2:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 8004ae6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004aea:	4619      	mov	r1, r3
 8004aec:	480b      	ldr	r0, [pc, #44]	@ (8004b1c <MX_SPI3_Init+0x12c>)
 8004aee:	f011 f823 	bl	8015b38 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 8004af2:	2100      	movs	r1, #0
 8004af4:	4809      	ldr	r0, [pc, #36]	@ (8004b1c <MX_SPI3_Init+0x12c>)
 8004af6:	f7ff ff1f 	bl	8004938 <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI3);
 8004afa:	4808      	ldr	r0, [pc, #32]	@ (8004b1c <MX_SPI3_Init+0x12c>)
 8004afc:	f7ff ff2f 	bl	800495e <LL_SPI_DisableNSSPulseMgt>
  /* USER CODE BEGIN SPI3_Init 2 */
  	LL_SPI_Enable(SPI3);
 8004b00:	4806      	ldr	r0, [pc, #24]	@ (8004b1c <MX_SPI3_Init+0x12c>)
 8004b02:	f7ff fef9 	bl	80048f8 <LL_SPI_Enable>

  	LL_SPI_StartMasterTransfer(SPI3);
 8004b06:	4805      	ldr	r0, [pc, #20]	@ (8004b1c <MX_SPI3_Init+0x12c>)
 8004b08:	f7ff ff06 	bl	8004918 <LL_SPI_StartMasterTransfer>
  /* USER CODE END SPI3_Init 2 */

}
 8004b0c:	bf00      	nop
 8004b0e:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	42020800 	.word	0x42020800
 8004b1c:	40003c00 	.word	0x40003c00

08004b20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004b20:	b480      	push	{r7}
 8004b22:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004b24:	bf00      	nop
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr
	...

08004b30 <LL_EXTI_IsActiveFallingFlag_0_31>:
{
 8004b30:	b480      	push	{r7}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->FPR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8004b38:	4b07      	ldr	r3, [pc, #28]	@ (8004b58 <LL_EXTI_IsActiveFallingFlag_0_31+0x28>)
 8004b3a:	691a      	ldr	r2, [r3, #16]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	4013      	ands	r3, r2
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d101      	bne.n	8004b4a <LL_EXTI_IsActiveFallingFlag_0_31+0x1a>
 8004b46:	2301      	movs	r3, #1
 8004b48:	e000      	b.n	8004b4c <LL_EXTI_IsActiveFallingFlag_0_31+0x1c>
 8004b4a:	2300      	movs	r3, #0
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	370c      	adds	r7, #12
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr
 8004b58:	44022000 	.word	0x44022000

08004b5c <LL_EXTI_ClearFallingFlag_0_31>:
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->FPR1, ExtiLine);
 8004b64:	4a04      	ldr	r2, [pc, #16]	@ (8004b78 <LL_EXTI_ClearFallingFlag_0_31+0x1c>)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6113      	str	r3, [r2, #16]
}
 8004b6a:	bf00      	nop
 8004b6c:	370c      	adds	r7, #12
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr
 8004b76:	bf00      	nop
 8004b78:	44022000 	.word	0x44022000

08004b7c <LL_EXTI_IsActiveRisingFlag_0_31>:
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->RPR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8004b84:	4b07      	ldr	r3, [pc, #28]	@ (8004ba4 <LL_EXTI_IsActiveRisingFlag_0_31+0x28>)
 8004b86:	68da      	ldr	r2, [r3, #12]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d101      	bne.n	8004b96 <LL_EXTI_IsActiveRisingFlag_0_31+0x1a>
 8004b92:	2301      	movs	r3, #1
 8004b94:	e000      	b.n	8004b98 <LL_EXTI_IsActiveRisingFlag_0_31+0x1c>
 8004b96:	2300      	movs	r3, #0
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	370c      	adds	r7, #12
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr
 8004ba4:	44022000 	.word	0x44022000

08004ba8 <LL_EXTI_ClearRisingFlag_0_31>:
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->RPR1, ExtiLine);
 8004bb0:	4a04      	ldr	r2, [pc, #16]	@ (8004bc4 <LL_EXTI_ClearRisingFlag_0_31+0x1c>)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	60d3      	str	r3, [r2, #12]
}
 8004bb6:	bf00      	nop
 8004bb8:	370c      	adds	r7, #12
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	44022000 	.word	0x44022000

08004bc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004bcc:	bf00      	nop
 8004bce:	e7fd      	b.n	8004bcc <NMI_Handler+0x4>

08004bd0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b0ca      	sub	sp, #296	@ 0x128
 8004bd4:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN HardFault_IRQn 0 */
	uint32_t hfsr = SCB->HFSR;
 8004bd6:	4b1e      	ldr	r3, [pc, #120]	@ (8004c50 <HardFault_Handler+0x80>)
 8004bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bda:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
	uint32_t mmfsr = SCB->CFSR & 0xFF;       // Memory Management Fault Status
 8004bde:	4b1c      	ldr	r3, [pc, #112]	@ (8004c50 <HardFault_Handler+0x80>)
 8004be0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
	uint32_t bfsr = (SCB->CFSR >> 8) & 0xFF; // Bus Fault Status
 8004be8:	4b19      	ldr	r3, [pc, #100]	@ (8004c50 <HardFault_Handler+0x80>)
 8004bea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bec:	0a1b      	lsrs	r3, r3, #8
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
	uint32_t ufsr = (SCB->CFSR >> 16) & 0xFF; // Usage Fault Status
 8004bf4:	4b16      	ldr	r3, [pc, #88]	@ (8004c50 <HardFault_Handler+0x80>)
 8004bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bf8:	0c1b      	lsrs	r3, r3, #16
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108

	 char buffer[256] = {0};
 8004c00:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004c04:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004c08:	2200      	movs	r2, #0
 8004c0a:	601a      	str	r2, [r3, #0]
 8004c0c:	3304      	adds	r3, #4
 8004c0e:	22fc      	movs	r2, #252	@ 0xfc
 8004c10:	2100      	movs	r1, #0
 8004c12:	4618      	mov	r0, r3
 8004c14:	f01a f90c 	bl	801ee30 <memset>
	    int len = snprintf(buffer, sizeof(buffer),
 8004c18:	1d38      	adds	r0, r7, #4
 8004c1a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8004c1e:	9302      	str	r3, [sp, #8]
 8004c20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c24:	9301      	str	r3, [sp, #4]
 8004c26:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004c2a:	9300      	str	r3, [sp, #0]
 8004c2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c30:	4a08      	ldr	r2, [pc, #32]	@ (8004c54 <HardFault_Handler+0x84>)
 8004c32:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004c36:	f019 ff6b 	bl	801eb10 <sniprintf>
 8004c3a:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
	                       "HardFault detected!\nHFSR: 0x%08lX\nMMFSR: 0x%02lX\nBFSR: 0x%02lX\nUFSR: 0x%02lX\n\n\r",
	                       hfsr, mmfsr, bfsr, ufsr);
	    printc(MinDelay,buffer);
 8004c3e:	1d3b      	adds	r3, r7, #4
 8004c40:	4619      	mov	r1, r3
 8004c42:	200a      	movs	r0, #10
 8004c44:	f7fc fee8 	bl	8001a18 <printc>

	    HAL_NVIC_SystemReset();
 8004c48:	f002 fb83 	bl	8007352 <HAL_NVIC_SystemReset>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004c4c:	bf00      	nop
 8004c4e:	e7fd      	b.n	8004c4c <HardFault_Handler+0x7c>
 8004c50:	e000ed00 	.word	0xe000ed00
 8004c54:	0802295c 	.word	0x0802295c

08004c58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b0c2      	sub	sp, #264	@ 0x108
 8004c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	uint32_t mmfsr = SCB->CFSR & 0xFF; // Memory Management Fault Status
 8004c5e:	4b11      	ldr	r3, [pc, #68]	@ (8004ca4 <MemManage_Handler+0x4c>)
 8004c60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

	    char buffer[256] = {0};
 8004c68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c6c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004c70:	2200      	movs	r2, #0
 8004c72:	601a      	str	r2, [r3, #0]
 8004c74:	3304      	adds	r3, #4
 8004c76:	22fc      	movs	r2, #252	@ 0xfc
 8004c78:	2100      	movs	r1, #0
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f01a f8d8 	bl	801ee30 <memset>
	    snprintf(buffer, sizeof(buffer),
 8004c80:	1d38      	adds	r0, r7, #4
 8004c82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c86:	4a08      	ldr	r2, [pc, #32]	@ (8004ca8 <MemManage_Handler+0x50>)
 8004c88:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004c8c:	f019 ff40 	bl	801eb10 <sniprintf>
	             "Memory Management Fault detected!\nMMFSR: 0x%02lX\n\n\r",
	             mmfsr);
	    printc(MinDelay, buffer);
 8004c90:	1d3b      	adds	r3, r7, #4
 8004c92:	4619      	mov	r1, r3
 8004c94:	200a      	movs	r0, #10
 8004c96:	f7fc febf 	bl	8001a18 <printc>
	HAL_NVIC_SystemReset();
 8004c9a:	f002 fb5a 	bl	8007352 <HAL_NVIC_SystemReset>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004c9e:	bf00      	nop
 8004ca0:	e7fd      	b.n	8004c9e <MemManage_Handler+0x46>
 8004ca2:	bf00      	nop
 8004ca4:	e000ed00 	.word	0xe000ed00
 8004ca8:	080229ac 	.word	0x080229ac

08004cac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b0c2      	sub	sp, #264	@ 0x108
 8004cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	 uint32_t bfsr = (SCB->CFSR >> 8) & 0xFF; // Bus Fault Status
 8004cb2:	4b11      	ldr	r3, [pc, #68]	@ (8004cf8 <BusFault_Handler+0x4c>)
 8004cb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cb6:	0a1b      	lsrs	r3, r3, #8
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

	    char buffer[256] = {0};
 8004cbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cc2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	601a      	str	r2, [r3, #0]
 8004cca:	3304      	adds	r3, #4
 8004ccc:	22fc      	movs	r2, #252	@ 0xfc
 8004cce:	2100      	movs	r1, #0
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f01a f8ad 	bl	801ee30 <memset>
	    snprintf(buffer, sizeof(buffer),
 8004cd6:	1d38      	adds	r0, r7, #4
 8004cd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cdc:	4a07      	ldr	r2, [pc, #28]	@ (8004cfc <BusFault_Handler+0x50>)
 8004cde:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004ce2:	f019 ff15 	bl	801eb10 <sniprintf>
	             "Bus Fault detected!\nBFSR: 0x%02lX\n\n\r",
	             bfsr);
	    printc(MinDelay, buffer);
 8004ce6:	1d3b      	adds	r3, r7, #4
 8004ce8:	4619      	mov	r1, r3
 8004cea:	200a      	movs	r0, #10
 8004cec:	f7fc fe94 	bl	8001a18 <printc>
	HAL_NVIC_SystemReset();
 8004cf0:	f002 fb2f 	bl	8007352 <HAL_NVIC_SystemReset>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004cf4:	bf00      	nop
 8004cf6:	e7fd      	b.n	8004cf4 <BusFault_Handler+0x48>
 8004cf8:	e000ed00 	.word	0xe000ed00
 8004cfc:	080229e0 	.word	0x080229e0

08004d00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b0c2      	sub	sp, #264	@ 0x108
 8004d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

    uint32_t ufsr = (SCB->CFSR >> 16) & 0xFF; // Usage Fault Status
 8004d06:	4b11      	ldr	r3, [pc, #68]	@ (8004d4c <UsageFault_Handler+0x4c>)
 8004d08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d0a:	0c1b      	lsrs	r3, r3, #16
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

    char buffer[256] = {0};
 8004d12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d16:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	601a      	str	r2, [r3, #0]
 8004d1e:	3304      	adds	r3, #4
 8004d20:	22fc      	movs	r2, #252	@ 0xfc
 8004d22:	2100      	movs	r1, #0
 8004d24:	4618      	mov	r0, r3
 8004d26:	f01a f883 	bl	801ee30 <memset>
    snprintf(buffer, sizeof(buffer),
 8004d2a:	1d38      	adds	r0, r7, #4
 8004d2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d30:	4a07      	ldr	r2, [pc, #28]	@ (8004d50 <UsageFault_Handler+0x50>)
 8004d32:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004d36:	f019 feeb 	bl	801eb10 <sniprintf>
             "Usage Fault detected!\nUFSR: 0x%02lX\n\n\r",
             ufsr);
    printc(MinDelay, buffer);
 8004d3a:	1d3b      	adds	r3, r7, #4
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	200a      	movs	r0, #10
 8004d40:	f7fc fe6a 	bl	8001a18 <printc>
	HAL_NVIC_SystemReset();
 8004d44:	f002 fb05 	bl	8007352 <HAL_NVIC_SystemReset>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004d48:	bf00      	nop
 8004d4a:	e7fd      	b.n	8004d48 <UsageFault_Handler+0x48>
 8004d4c:	e000ed00 	.word	0xe000ed00
 8004d50:	08022a08 	.word	0x08022a08

08004d54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004d54:	b480      	push	{r7}
 8004d56:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004d58:	bf00      	nop
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr

08004d62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004d62:	b480      	push	{r7}
 8004d64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004d66:	bf00      	nop
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr

08004d70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004d70:	b480      	push	{r7}
 8004d72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004d74:	bf00      	nop
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr

08004d7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004d7e:	b580      	push	{r7, lr}
 8004d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004d82:	f000 fe11 	bl	80059a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */
}
 8004d86:	bf00      	nop
 8004d88:	bd80      	pop	{r7, pc}
	...

08004d8c <RTC_IRQHandler>:

/**
  * @brief This function handles RTC non-secure interrupt.
  */
void RTC_IRQHandler(void)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8004d90:	4804      	ldr	r0, [pc, #16]	@ (8004da4 <RTC_IRQHandler+0x18>)
 8004d92:	f00d fa1f 	bl	80121d4 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */
	HAL_PWR_DisableSleepOnExit();
 8004d96:	f006 fe79 	bl	800ba8c <HAL_PWR_DisableSleepOnExit>
	HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8004d9a:	4802      	ldr	r0, [pc, #8]	@ (8004da4 <RTC_IRQHandler+0x18>)
 8004d9c:	f00d f9f0 	bl	8012180 <HAL_RTCEx_DeactivateWakeUpTimer>
  /* USER CODE END RTC_IRQn 1 */
}
 8004da0:	bf00      	nop
 8004da2:	bd80      	pop	{r7, pc}
 8004da4:	20013b34 	.word	0x20013b34

08004da8 <EXTI8_IRQHandler>:

/**
  * @brief This function handles EXTI Line8 interrupt.
  */
void EXTI8_IRQHandler(void)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI8_IRQn 0 */
	  onMessage();
 8004dac:	f017 fcf4 	bl	801c798 <onMessage>
  /* USER CODE END EXTI8_IRQn 0 */
  if (LL_EXTI_IsActiveFallingFlag_0_31(LL_EXTI_LINE_8) != RESET)
 8004db0:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8004db4:	f7ff febc 	bl	8004b30 <LL_EXTI_IsActiveFallingFlag_0_31>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d003      	beq.n	8004dc6 <EXTI8_IRQHandler+0x1e>
  {
    LL_EXTI_ClearFallingFlag_0_31(LL_EXTI_LINE_8);
 8004dbe:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8004dc2:	f7ff fecb 	bl	8004b5c <LL_EXTI_ClearFallingFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_8_FALLING */
  }
  /* USER CODE BEGIN EXTI8_IRQn 1 */

  /* USER CODE END EXTI8_IRQn 1 */
}
 8004dc6:	bf00      	nop
 8004dc8:	bd80      	pop	{r7, pc}

08004dca <EXTI15_IRQHandler>:

/**
  * @brief This function handles EXTI Line15 interrupt.
  */
void EXTI15_IRQHandler(void)
{
 8004dca:	b580      	push	{r7, lr}
 8004dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_IRQn 0 */

  /* USER CODE END EXTI15_IRQn 0 */
  if (LL_EXTI_IsActiveFallingFlag_0_31(LL_EXTI_LINE_15) != RESET)
 8004dce:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8004dd2:	f7ff fead 	bl	8004b30 <LL_EXTI_IsActiveFallingFlag_0_31>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d003      	beq.n	8004de4 <EXTI15_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFallingFlag_0_31(LL_EXTI_LINE_15);
 8004ddc:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8004de0:	f7ff febc 	bl	8004b5c <LL_EXTI_ClearFallingFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_15_FALLING */

    /* USER CODE END LL_EXTI_LINE_15_FALLING */
  }
  /* USER CODE BEGIN EXTI15_IRQn 1 */
  onTemperCallback();
 8004de4:	f7fd fd96 	bl	8002914 <onTemperCallback>
  /* USER CODE END EXTI15_IRQn 1 */
}
 8004de8:	bf00      	nop
 8004dea:	bd80      	pop	{r7, pc}

08004dec <GPDMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 4 global interrupt.
  */
void GPDMA1_Channel4_IRQHandler(void)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel4_IRQn 0 */

  /* USER CODE END GPDMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel4);
 8004df0:	4802      	ldr	r0, [pc, #8]	@ (8004dfc <GPDMA1_Channel4_IRQHandler+0x10>)
 8004df2:	f004 fa07 	bl	8009204 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel4_IRQn 1 */

  /* USER CODE END GPDMA1_Channel4_IRQn 1 */
}
 8004df6:	bf00      	nop
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	20013db0 	.word	0x20013db0

08004e00 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */
sleepcount =0;
 8004e04:	4b04      	ldr	r3, [pc, #16]	@ (8004e18 <FDCAN1_IT0_IRQHandler+0x18>)
 8004e06:	2200      	movs	r2, #0
 8004e08:	601a      	str	r2, [r3, #0]
  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8004e0a:	4804      	ldr	r0, [pc, #16]	@ (8004e1c <FDCAN1_IT0_IRQHandler+0x1c>)
 8004e0c:	f005 ff08 	bl	800ac20 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */
	HAL_PWR_DisableSleepOnExit();
 8004e10:	f006 fe3c 	bl	800ba8c <HAL_PWR_DisableSleepOnExit>
  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8004e14:	bf00      	nop
 8004e16:	bd80      	pop	{r7, pc}
 8004e18:	20000ed4 	.word	0x20000ed4
 8004e1c:	20013a54 	.word	0x20013a54

08004e20 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004e24:	4802      	ldr	r0, [pc, #8]	@ (8004e30 <TIM6_IRQHandler+0x10>)
 8004e26:	f00d fb2d 	bl	8012484 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8004e2a:	bf00      	nop
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	20013b6c 	.word	0x20013b6c

08004e34 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004e38:	4803      	ldr	r0, [pc, #12]	@ (8004e48 <USART1_IRQHandler+0x14>)
 8004e3a:	f00e f8f3 	bl	8013024 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  enableIdle();
 8004e3e:	f7fc fdbb 	bl	80019b8 <enableIdle>

  /* USER CODE END USART1_IRQn 1 */
}
 8004e42:	bf00      	nop
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	20013c4c 	.word	0x20013c4c

08004e4c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8004e50:	4802      	ldr	r0, [pc, #8]	@ (8004e5c <UART5_IRQHandler+0x10>)
 8004e52:	f00e f8e7 	bl	8013024 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8004e56:	bf00      	nop
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	20013bb8 	.word	0x20013bb8

08004e60 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8004e64:	4802      	ldr	r0, [pc, #8]	@ (8004e70 <USART6_IRQHandler+0x10>)
 8004e66:	f00e f8dd 	bl	8013024 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */
  //openPrintUartIdle();
  /* USER CODE END USART6_IRQn 1 */
}
 8004e6a:	bf00      	nop
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	20013ce0 	.word	0x20013ce0

08004e74 <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8004e78:	4802      	ldr	r0, [pc, #8]	@ (8004e84 <FDCAN2_IT0_IRQHandler+0x10>)
 8004e7a:	f005 fed1 	bl	800ac20 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 8004e7e:	bf00      	nop
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	20013ab8 	.word	0x20013ab8

08004e88 <EXTI0_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI0_IRQHandler(void) {
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	af00      	add	r7, sp, #0
	printc(MinDelay, "WokeBY 1");
 8004e8c:	490d      	ldr	r1, [pc, #52]	@ (8004ec4 <EXTI0_IRQHandler+0x3c>)
 8004e8e:	200a      	movs	r0, #10
 8004e90:	f7fc fdc2 	bl	8001a18 <printc>
	if (LL_EXTI_IsActiveRisingFlag_0_31(LL_EXTI_LINE_0) != RESET) {
 8004e94:	2001      	movs	r0, #1
 8004e96:	f7ff fe71 	bl	8004b7c <LL_EXTI_IsActiveRisingFlag_0_31>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d00e      	beq.n	8004ebe <EXTI0_IRQHandler+0x36>
		// Clear the EXTI line 0 interrupt flag
		LL_EXTI_ClearRisingFlag_0_31(LL_EXTI_LINE_0);
 8004ea0:	2001      	movs	r0, #1
 8004ea2:	f7ff fe81 	bl	8004ba8 <LL_EXTI_ClearRisingFlag_0_31>

		FLAG_IGN =1;
 8004ea6:	4b08      	ldr	r3, [pc, #32]	@ (8004ec8 <EXTI0_IRQHandler+0x40>)
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	601a      	str	r2, [r3, #0]
		// Disable sleep on exit
		HAL_PWR_DisableSleepOnExit();
 8004eac:	f006 fdee 	bl	800ba8c <HAL_PWR_DisableSleepOnExit>

		// Disable EXTI line 0 interrupt to avoid re-entering the interrupt handler
		HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8004eb0:	200b      	movs	r0, #11
 8004eb2:	f002 fa40 	bl	8007336 <HAL_NVIC_DisableIRQ>

		printc(MinDelay, "Wakeby EXTI");
 8004eb6:	4905      	ldr	r1, [pc, #20]	@ (8004ecc <EXTI0_IRQHandler+0x44>)
 8004eb8:	200a      	movs	r0, #10
 8004eba:	f7fc fdad 	bl	8001a18 <printc>

		// Perform wakeup routine
//        WAKEUP();
	}
}
 8004ebe:	bf00      	nop
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	08022a30 	.word	0x08022a30
 8004ec8:	20012f30 	.word	0x20012f30
 8004ecc:	08022a3c 	.word	0x08022a3c

08004ed0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	af00      	add	r7, sp, #0
  return 1;
 8004ed4:	2301      	movs	r3, #1
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr

08004ee0 <_kill>:

int _kill(int pid, int sig)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b082      	sub	sp, #8
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004eea:	f01a f8d1 	bl	801f090 <__errno>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	2216      	movs	r2, #22
 8004ef2:	601a      	str	r2, [r3, #0]
  return -1;
 8004ef4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3708      	adds	r7, #8
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <_exit>:

void _exit (int status)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b082      	sub	sp, #8
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004f08:	f04f 31ff 	mov.w	r1, #4294967295
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f7ff ffe7 	bl	8004ee0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004f12:	bf00      	nop
 8004f14:	e7fd      	b.n	8004f12 <_exit+0x12>

08004f16 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004f16:	b580      	push	{r7, lr}
 8004f18:	b086      	sub	sp, #24
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	60f8      	str	r0, [r7, #12]
 8004f1e:	60b9      	str	r1, [r7, #8]
 8004f20:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f22:	2300      	movs	r3, #0
 8004f24:	617b      	str	r3, [r7, #20]
 8004f26:	e00a      	b.n	8004f3e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004f28:	f3af 8000 	nop.w
 8004f2c:	4601      	mov	r1, r0
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	1c5a      	adds	r2, r3, #1
 8004f32:	60ba      	str	r2, [r7, #8]
 8004f34:	b2ca      	uxtb	r2, r1
 8004f36:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	3301      	adds	r3, #1
 8004f3c:	617b      	str	r3, [r7, #20]
 8004f3e:	697a      	ldr	r2, [r7, #20]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	429a      	cmp	r2, r3
 8004f44:	dbf0      	blt.n	8004f28 <_read+0x12>
  }

  return len;
 8004f46:	687b      	ldr	r3, [r7, #4]
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3718      	adds	r7, #24
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b086      	sub	sp, #24
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	617b      	str	r3, [r7, #20]
 8004f60:	e009      	b.n	8004f76 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	1c5a      	adds	r2, r3, #1
 8004f66:	60ba      	str	r2, [r7, #8]
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	3301      	adds	r3, #1
 8004f74:	617b      	str	r3, [r7, #20]
 8004f76:	697a      	ldr	r2, [r7, #20]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	dbf1      	blt.n	8004f62 <_write+0x12>
  }
  return len;
 8004f7e:	687b      	ldr	r3, [r7, #4]
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3718      	adds	r7, #24
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <_close>:

int _close(int file)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004f90:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	370c      	adds	r7, #12
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr

08004fa0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b083      	sub	sp, #12
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004fb0:	605a      	str	r2, [r3, #4]
  return 0;
 8004fb2:	2300      	movs	r3, #0
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	370c      	adds	r7, #12
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <_isatty>:

int _isatty(int file)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004fc8:	2301      	movs	r3, #1
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	370c      	adds	r7, #12
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr

08004fd6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004fd6:	b480      	push	{r7}
 8004fd8:	b085      	sub	sp, #20
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	60f8      	str	r0, [r7, #12]
 8004fde:	60b9      	str	r1, [r7, #8]
 8004fe0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004fe2:	2300      	movs	r3, #0
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3714      	adds	r7, #20
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr

08004ff0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b086      	sub	sp, #24
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004ff8:	4a14      	ldr	r2, [pc, #80]	@ (800504c <_sbrk+0x5c>)
 8004ffa:	4b15      	ldr	r3, [pc, #84]	@ (8005050 <_sbrk+0x60>)
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005004:	4b13      	ldr	r3, [pc, #76]	@ (8005054 <_sbrk+0x64>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d102      	bne.n	8005012 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800500c:	4b11      	ldr	r3, [pc, #68]	@ (8005054 <_sbrk+0x64>)
 800500e:	4a12      	ldr	r2, [pc, #72]	@ (8005058 <_sbrk+0x68>)
 8005010:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005012:	4b10      	ldr	r3, [pc, #64]	@ (8005054 <_sbrk+0x64>)
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4413      	add	r3, r2
 800501a:	693a      	ldr	r2, [r7, #16]
 800501c:	429a      	cmp	r2, r3
 800501e:	d207      	bcs.n	8005030 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005020:	f01a f836 	bl	801f090 <__errno>
 8005024:	4603      	mov	r3, r0
 8005026:	220c      	movs	r2, #12
 8005028:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800502a:	f04f 33ff 	mov.w	r3, #4294967295
 800502e:	e009      	b.n	8005044 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005030:	4b08      	ldr	r3, [pc, #32]	@ (8005054 <_sbrk+0x64>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005036:	4b07      	ldr	r3, [pc, #28]	@ (8005054 <_sbrk+0x64>)
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4413      	add	r3, r2
 800503e:	4a05      	ldr	r2, [pc, #20]	@ (8005054 <_sbrk+0x64>)
 8005040:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005042:	68fb      	ldr	r3, [r7, #12]
}
 8005044:	4618      	mov	r0, r3
 8005046:	3718      	adds	r7, #24
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}
 800504c:	200a0000 	.word	0x200a0000
 8005050:	00000400 	.word	0x00000400
 8005054:	20013b64 	.word	0x20013b64
 8005058:	200157e0 	.word	0x200157e0

0800505c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800505c:	b480      	push	{r7}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8005062:	4b36      	ldr	r3, [pc, #216]	@ (800513c <SystemInit+0xe0>)
 8005064:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005068:	4a34      	ldr	r2, [pc, #208]	@ (800513c <SystemInit+0xe0>)
 800506a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800506e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8005072:	4b33      	ldr	r3, [pc, #204]	@ (8005140 <SystemInit+0xe4>)
 8005074:	2201      	movs	r2, #1
 8005076:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8005078:	4b31      	ldr	r3, [pc, #196]	@ (8005140 <SystemInit+0xe4>)
 800507a:	2200      	movs	r2, #0
 800507c:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 800507e:	4b30      	ldr	r3, [pc, #192]	@ (8005140 <SystemInit+0xe4>)
 8005080:	2200      	movs	r2, #0
 8005082:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8005084:	4b2e      	ldr	r3, [pc, #184]	@ (8005140 <SystemInit+0xe4>)
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	492d      	ldr	r1, [pc, #180]	@ (8005140 <SystemInit+0xe4>)
 800508a:	4b2e      	ldr	r3, [pc, #184]	@ (8005144 <SystemInit+0xe8>)
 800508c:	4013      	ands	r3, r2
 800508e:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8005090:	4b2b      	ldr	r3, [pc, #172]	@ (8005140 <SystemInit+0xe4>)
 8005092:	2200      	movs	r2, #0
 8005094:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8005096:	4b2a      	ldr	r3, [pc, #168]	@ (8005140 <SystemInit+0xe4>)
 8005098:	2200      	movs	r2, #0
 800509a:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 800509c:	4b28      	ldr	r3, [pc, #160]	@ (8005140 <SystemInit+0xe4>)
 800509e:	2200      	movs	r2, #0
 80050a0:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 80050a2:	4b27      	ldr	r3, [pc, #156]	@ (8005140 <SystemInit+0xe4>)
 80050a4:	4a28      	ldr	r2, [pc, #160]	@ (8005148 <SystemInit+0xec>)
 80050a6:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 80050a8:	4b25      	ldr	r3, [pc, #148]	@ (8005140 <SystemInit+0xe4>)
 80050aa:	2200      	movs	r2, #0
 80050ac:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 80050ae:	4b24      	ldr	r3, [pc, #144]	@ (8005140 <SystemInit+0xe4>)
 80050b0:	4a25      	ldr	r2, [pc, #148]	@ (8005148 <SystemInit+0xec>)
 80050b2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 80050b4:	4b22      	ldr	r3, [pc, #136]	@ (8005140 <SystemInit+0xe4>)
 80050b6:	2200      	movs	r2, #0
 80050b8:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 80050ba:	4b21      	ldr	r3, [pc, #132]	@ (8005140 <SystemInit+0xe4>)
 80050bc:	4a22      	ldr	r2, [pc, #136]	@ (8005148 <SystemInit+0xec>)
 80050be:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 80050c0:	4b1f      	ldr	r3, [pc, #124]	@ (8005140 <SystemInit+0xe4>)
 80050c2:	2200      	movs	r2, #0
 80050c4:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80050c6:	4b1e      	ldr	r3, [pc, #120]	@ (8005140 <SystemInit+0xe4>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a1d      	ldr	r2, [pc, #116]	@ (8005140 <SystemInit+0xe4>)
 80050cc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80050d0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80050d2:	4b1b      	ldr	r3, [pc, #108]	@ (8005140 <SystemInit+0xe4>)
 80050d4:	2200      	movs	r2, #0
 80050d6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET ; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VT_OFF; /* Vector Table Relocation in Internal FLASH */
 80050d8:	4b1c      	ldr	r3, [pc, #112]	@ (800514c <SystemInit+0xf0>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a17      	ldr	r2, [pc, #92]	@ (800513c <SystemInit+0xe0>)
 80050de:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80050e2:	6093      	str	r3, [r2, #8]
#endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 80050e4:	4b1a      	ldr	r3, [pc, #104]	@ (8005150 <SystemInit+0xf4>)
 80050e6:	699b      	ldr	r3, [r3, #24]
 80050e8:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 80050ec:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 80050f4:	d003      	beq.n	80050fe <SystemInit+0xa2>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80050fc:	d117      	bne.n	800512e <SystemInit+0xd2>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 80050fe:	4b14      	ldr	r3, [pc, #80]	@ (8005150 <SystemInit+0xf4>)
 8005100:	69db      	ldr	r3, [r3, #28]
 8005102:	f003 0301 	and.w	r3, r3, #1
 8005106:	2b00      	cmp	r3, #0
 8005108:	d005      	beq.n	8005116 <SystemInit+0xba>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 800510a:	4b11      	ldr	r3, [pc, #68]	@ (8005150 <SystemInit+0xf4>)
 800510c:	4a11      	ldr	r2, [pc, #68]	@ (8005154 <SystemInit+0xf8>)
 800510e:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8005110:	4b0f      	ldr	r3, [pc, #60]	@ (8005150 <SystemInit+0xf4>)
 8005112:	4a11      	ldr	r2, [pc, #68]	@ (8005158 <SystemInit+0xfc>)
 8005114:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8005116:	4b0e      	ldr	r3, [pc, #56]	@ (8005150 <SystemInit+0xf4>)
 8005118:	69db      	ldr	r3, [r3, #28]
 800511a:	4a0d      	ldr	r2, [pc, #52]	@ (8005150 <SystemInit+0xf4>)
 800511c:	f043 0302 	orr.w	r3, r3, #2
 8005120:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8005122:	4b0b      	ldr	r3, [pc, #44]	@ (8005150 <SystemInit+0xf4>)
 8005124:	69db      	ldr	r3, [r3, #28]
 8005126:	4a0a      	ldr	r2, [pc, #40]	@ (8005150 <SystemInit+0xf4>)
 8005128:	f043 0301 	orr.w	r3, r3, #1
 800512c:	61d3      	str	r3, [r2, #28]
  }
}
 800512e:	bf00      	nop
 8005130:	370c      	adds	r7, #12
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr
 800513a:	bf00      	nop
 800513c:	e000ed00 	.word	0xe000ed00
 8005140:	44020c00 	.word	0x44020c00
 8005144:	eae2eae3 	.word	0xeae2eae3
 8005148:	01010280 	.word	0x01010280
 800514c:	20013b68 	.word	0x20013b68
 8005150:	40022000 	.word	0x40022000
 8005154:	08192a3b 	.word	0x08192a3b
 8005158:	4c5d6e7f 	.word	0x4c5d6e7f

0800515c <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b084      	sub	sp, #16
 8005160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005162:	1d3b      	adds	r3, r7, #4
 8005164:	2200      	movs	r2, #0
 8005166:	601a      	str	r2, [r3, #0]
 8005168:	605a      	str	r2, [r3, #4]
 800516a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800516c:	4b14      	ldr	r3, [pc, #80]	@ (80051c0 <MX_TIM6_Init+0x64>)
 800516e:	4a15      	ldr	r2, [pc, #84]	@ (80051c4 <MX_TIM6_Init+0x68>)
 8005170:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7;
 8005172:	4b13      	ldr	r3, [pc, #76]	@ (80051c0 <MX_TIM6_Init+0x64>)
 8005174:	2207      	movs	r2, #7
 8005176:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005178:	4b11      	ldr	r3, [pc, #68]	@ (80051c0 <MX_TIM6_Init+0x64>)
 800517a:	2200      	movs	r2, #0
 800517c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 49999;
 800517e:	4b10      	ldr	r3, [pc, #64]	@ (80051c0 <MX_TIM6_Init+0x64>)
 8005180:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8005184:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005186:	4b0e      	ldr	r3, [pc, #56]	@ (80051c0 <MX_TIM6_Init+0x64>)
 8005188:	2280      	movs	r2, #128	@ 0x80
 800518a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800518c:	480c      	ldr	r0, [pc, #48]	@ (80051c0 <MX_TIM6_Init+0x64>)
 800518e:	f00d f873 	bl	8012278 <HAL_TIM_Base_Init>
 8005192:	4603      	mov	r3, r0
 8005194:	2b00      	cmp	r3, #0
 8005196:	d001      	beq.n	800519c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8005198:	f7ff faf1 	bl	800477e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800519c:	2300      	movs	r3, #0
 800519e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80051a0:	2300      	movs	r3, #0
 80051a2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80051a4:	1d3b      	adds	r3, r7, #4
 80051a6:	4619      	mov	r1, r3
 80051a8:	4805      	ldr	r0, [pc, #20]	@ (80051c0 <MX_TIM6_Init+0x64>)
 80051aa:	f00d fc0d 	bl	80129c8 <HAL_TIMEx_MasterConfigSynchronization>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d001      	beq.n	80051b8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80051b4:	f7ff fae3 	bl	800477e <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80051b8:	bf00      	nop
 80051ba:	3710      	adds	r7, #16
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}
 80051c0:	20013b6c 	.word	0x20013b6c
 80051c4:	40001000 	.word	0x40001000

080051c8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a0e      	ldr	r2, [pc, #56]	@ (8005210 <HAL_TIM_Base_MspInit+0x48>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d116      	bne.n	8005208 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80051da:	4b0e      	ldr	r3, [pc, #56]	@ (8005214 <HAL_TIM_Base_MspInit+0x4c>)
 80051dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80051e0:	4a0c      	ldr	r2, [pc, #48]	@ (8005214 <HAL_TIM_Base_MspInit+0x4c>)
 80051e2:	f043 0310 	orr.w	r3, r3, #16
 80051e6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80051ea:	4b0a      	ldr	r3, [pc, #40]	@ (8005214 <HAL_TIM_Base_MspInit+0x4c>)
 80051ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80051f0:	f003 0310 	and.w	r3, r3, #16
 80051f4:	60fb      	str	r3, [r7, #12]
 80051f6:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 80051f8:	2200      	movs	r2, #0
 80051fa:	2100      	movs	r1, #0
 80051fc:	2031      	movs	r0, #49	@ 0x31
 80051fe:	f002 f872 	bl	80072e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8005202:	2031      	movs	r0, #49	@ 0x31
 8005204:	f002 f889 	bl	800731a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8005208:	bf00      	nop
 800520a:	3710      	adds	r7, #16
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}
 8005210:	40001000 	.word	0x40001000
 8005214:	44020c00 	.word	0x44020c00

08005218 <MX_UART5_Init>:
DMA_QListTypeDef List_GPDMA1_Channel4;
DMA_HandleTypeDef handle_GPDMA1_Channel4;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800521c:	4b22      	ldr	r3, [pc, #136]	@ (80052a8 <MX_UART5_Init+0x90>)
 800521e:	4a23      	ldr	r2, [pc, #140]	@ (80052ac <MX_UART5_Init+0x94>)
 8005220:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8005222:	4b21      	ldr	r3, [pc, #132]	@ (80052a8 <MX_UART5_Init+0x90>)
 8005224:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005228:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800522a:	4b1f      	ldr	r3, [pc, #124]	@ (80052a8 <MX_UART5_Init+0x90>)
 800522c:	2200      	movs	r2, #0
 800522e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8005230:	4b1d      	ldr	r3, [pc, #116]	@ (80052a8 <MX_UART5_Init+0x90>)
 8005232:	2200      	movs	r2, #0
 8005234:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8005236:	4b1c      	ldr	r3, [pc, #112]	@ (80052a8 <MX_UART5_Init+0x90>)
 8005238:	2200      	movs	r2, #0
 800523a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800523c:	4b1a      	ldr	r3, [pc, #104]	@ (80052a8 <MX_UART5_Init+0x90>)
 800523e:	220c      	movs	r2, #12
 8005240:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005242:	4b19      	ldr	r3, [pc, #100]	@ (80052a8 <MX_UART5_Init+0x90>)
 8005244:	2200      	movs	r2, #0
 8005246:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8005248:	4b17      	ldr	r3, [pc, #92]	@ (80052a8 <MX_UART5_Init+0x90>)
 800524a:	2200      	movs	r2, #0
 800524c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800524e:	4b16      	ldr	r3, [pc, #88]	@ (80052a8 <MX_UART5_Init+0x90>)
 8005250:	2200      	movs	r2, #0
 8005252:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005254:	4b14      	ldr	r3, [pc, #80]	@ (80052a8 <MX_UART5_Init+0x90>)
 8005256:	2200      	movs	r2, #0
 8005258:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800525a:	4b13      	ldr	r3, [pc, #76]	@ (80052a8 <MX_UART5_Init+0x90>)
 800525c:	2200      	movs	r2, #0
 800525e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8005260:	4811      	ldr	r0, [pc, #68]	@ (80052a8 <MX_UART5_Init+0x90>)
 8005262:	f00d fcc7 	bl	8012bf4 <HAL_UART_Init>
 8005266:	4603      	mov	r3, r0
 8005268:	2b00      	cmp	r3, #0
 800526a:	d001      	beq.n	8005270 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 800526c:	f7ff fa87 	bl	800477e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005270:	2100      	movs	r1, #0
 8005272:	480d      	ldr	r0, [pc, #52]	@ (80052a8 <MX_UART5_Init+0x90>)
 8005274:	f00f ff0a 	bl	801508c <HAL_UARTEx_SetTxFifoThreshold>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d001      	beq.n	8005282 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 800527e:	f7ff fa7e 	bl	800477e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005282:	2100      	movs	r1, #0
 8005284:	4808      	ldr	r0, [pc, #32]	@ (80052a8 <MX_UART5_Init+0x90>)
 8005286:	f00f ff3f 	bl	8015108 <HAL_UARTEx_SetRxFifoThreshold>
 800528a:	4603      	mov	r3, r0
 800528c:	2b00      	cmp	r3, #0
 800528e:	d001      	beq.n	8005294 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8005290:	f7ff fa75 	bl	800477e <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart5) != HAL_OK)
 8005294:	4804      	ldr	r0, [pc, #16]	@ (80052a8 <MX_UART5_Init+0x90>)
 8005296:	f00f fe85 	bl	8014fa4 <HAL_UARTEx_EnableFifoMode>
 800529a:	4603      	mov	r3, r0
 800529c:	2b00      	cmp	r3, #0
 800529e:	d001      	beq.n	80052a4 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 80052a0:	f7ff fa6d 	bl	800477e <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80052a4:	bf00      	nop
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	20013bb8 	.word	0x20013bb8
 80052ac:	40005000 	.word	0x40005000

080052b0 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80052b4:	4b22      	ldr	r3, [pc, #136]	@ (8005340 <MX_USART1_UART_Init+0x90>)
 80052b6:	4a23      	ldr	r2, [pc, #140]	@ (8005344 <MX_USART1_UART_Init+0x94>)
 80052b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80052ba:	4b21      	ldr	r3, [pc, #132]	@ (8005340 <MX_USART1_UART_Init+0x90>)
 80052bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80052c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80052c2:	4b1f      	ldr	r3, [pc, #124]	@ (8005340 <MX_USART1_UART_Init+0x90>)
 80052c4:	2200      	movs	r2, #0
 80052c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80052c8:	4b1d      	ldr	r3, [pc, #116]	@ (8005340 <MX_USART1_UART_Init+0x90>)
 80052ca:	2200      	movs	r2, #0
 80052cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80052ce:	4b1c      	ldr	r3, [pc, #112]	@ (8005340 <MX_USART1_UART_Init+0x90>)
 80052d0:	2200      	movs	r2, #0
 80052d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80052d4:	4b1a      	ldr	r3, [pc, #104]	@ (8005340 <MX_USART1_UART_Init+0x90>)
 80052d6:	220c      	movs	r2, #12
 80052d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80052da:	4b19      	ldr	r3, [pc, #100]	@ (8005340 <MX_USART1_UART_Init+0x90>)
 80052dc:	2200      	movs	r2, #0
 80052de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80052e0:	4b17      	ldr	r3, [pc, #92]	@ (8005340 <MX_USART1_UART_Init+0x90>)
 80052e2:	2200      	movs	r2, #0
 80052e4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80052e6:	4b16      	ldr	r3, [pc, #88]	@ (8005340 <MX_USART1_UART_Init+0x90>)
 80052e8:	2200      	movs	r2, #0
 80052ea:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80052ec:	4b14      	ldr	r3, [pc, #80]	@ (8005340 <MX_USART1_UART_Init+0x90>)
 80052ee:	2200      	movs	r2, #0
 80052f0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80052f2:	4b13      	ldr	r3, [pc, #76]	@ (8005340 <MX_USART1_UART_Init+0x90>)
 80052f4:	2200      	movs	r2, #0
 80052f6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80052f8:	4811      	ldr	r0, [pc, #68]	@ (8005340 <MX_USART1_UART_Init+0x90>)
 80052fa:	f00d fc7b 	bl	8012bf4 <HAL_UART_Init>
 80052fe:	4603      	mov	r3, r0
 8005300:	2b00      	cmp	r3, #0
 8005302:	d001      	beq.n	8005308 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8005304:	f7ff fa3b 	bl	800477e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005308:	2100      	movs	r1, #0
 800530a:	480d      	ldr	r0, [pc, #52]	@ (8005340 <MX_USART1_UART_Init+0x90>)
 800530c:	f00f febe 	bl	801508c <HAL_UARTEx_SetTxFifoThreshold>
 8005310:	4603      	mov	r3, r0
 8005312:	2b00      	cmp	r3, #0
 8005314:	d001      	beq.n	800531a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8005316:	f7ff fa32 	bl	800477e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800531a:	2100      	movs	r1, #0
 800531c:	4808      	ldr	r0, [pc, #32]	@ (8005340 <MX_USART1_UART_Init+0x90>)
 800531e:	f00f fef3 	bl	8015108 <HAL_UARTEx_SetRxFifoThreshold>
 8005322:	4603      	mov	r3, r0
 8005324:	2b00      	cmp	r3, #0
 8005326:	d001      	beq.n	800532c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8005328:	f7ff fa29 	bl	800477e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800532c:	4804      	ldr	r0, [pc, #16]	@ (8005340 <MX_USART1_UART_Init+0x90>)
 800532e:	f00f fe74 	bl	801501a <HAL_UARTEx_DisableFifoMode>
 8005332:	4603      	mov	r3, r0
 8005334:	2b00      	cmp	r3, #0
 8005336:	d001      	beq.n	800533c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8005338:	f7ff fa21 	bl	800477e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800533c:	bf00      	nop
 800533e:	bd80      	pop	{r7, pc}
 8005340:	20013c4c 	.word	0x20013c4c
 8005344:	40013800 	.word	0x40013800

08005348 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800534c:	4b23      	ldr	r3, [pc, #140]	@ (80053dc <MX_USART6_UART_Init+0x94>)
 800534e:	4a24      	ldr	r2, [pc, #144]	@ (80053e0 <MX_USART6_UART_Init+0x98>)
 8005350:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8005352:	4b22      	ldr	r3, [pc, #136]	@ (80053dc <MX_USART6_UART_Init+0x94>)
 8005354:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005358:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800535a:	4b20      	ldr	r3, [pc, #128]	@ (80053dc <MX_USART6_UART_Init+0x94>)
 800535c:	2200      	movs	r2, #0
 800535e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8005360:	4b1e      	ldr	r3, [pc, #120]	@ (80053dc <MX_USART6_UART_Init+0x94>)
 8005362:	2200      	movs	r2, #0
 8005364:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8005366:	4b1d      	ldr	r3, [pc, #116]	@ (80053dc <MX_USART6_UART_Init+0x94>)
 8005368:	2200      	movs	r2, #0
 800536a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800536c:	4b1b      	ldr	r3, [pc, #108]	@ (80053dc <MX_USART6_UART_Init+0x94>)
 800536e:	220c      	movs	r2, #12
 8005370:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005372:	4b1a      	ldr	r3, [pc, #104]	@ (80053dc <MX_USART6_UART_Init+0x94>)
 8005374:	2200      	movs	r2, #0
 8005376:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8005378:	4b18      	ldr	r3, [pc, #96]	@ (80053dc <MX_USART6_UART_Init+0x94>)
 800537a:	2200      	movs	r2, #0
 800537c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800537e:	4b17      	ldr	r3, [pc, #92]	@ (80053dc <MX_USART6_UART_Init+0x94>)
 8005380:	2200      	movs	r2, #0
 8005382:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005384:	4b15      	ldr	r3, [pc, #84]	@ (80053dc <MX_USART6_UART_Init+0x94>)
 8005386:	2200      	movs	r2, #0
 8005388:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800538a:	4b14      	ldr	r3, [pc, #80]	@ (80053dc <MX_USART6_UART_Init+0x94>)
 800538c:	2200      	movs	r2, #0
 800538e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8005390:	4812      	ldr	r0, [pc, #72]	@ (80053dc <MX_USART6_UART_Init+0x94>)
 8005392:	f00d fc2f 	bl	8012bf4 <HAL_UART_Init>
 8005396:	4603      	mov	r3, r0
 8005398:	2b00      	cmp	r3, #0
 800539a:	d001      	beq.n	80053a0 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 800539c:	f7ff f9ef 	bl	800477e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80053a0:	2100      	movs	r1, #0
 80053a2:	480e      	ldr	r0, [pc, #56]	@ (80053dc <MX_USART6_UART_Init+0x94>)
 80053a4:	f00f fe72 	bl	801508c <HAL_UARTEx_SetTxFifoThreshold>
 80053a8:	4603      	mov	r3, r0
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d001      	beq.n	80053b2 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 80053ae:	f7ff f9e6 	bl	800477e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 80053b2:	f04f 6120 	mov.w	r1, #167772160	@ 0xa000000
 80053b6:	4809      	ldr	r0, [pc, #36]	@ (80053dc <MX_USART6_UART_Init+0x94>)
 80053b8:	f00f fea6 	bl	8015108 <HAL_UARTEx_SetRxFifoThreshold>
 80053bc:	4603      	mov	r3, r0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d001      	beq.n	80053c6 <MX_USART6_UART_Init+0x7e>
  {
    Error_Handler();
 80053c2:	f7ff f9dc 	bl	800477e <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart6) != HAL_OK)
 80053c6:	4805      	ldr	r0, [pc, #20]	@ (80053dc <MX_USART6_UART_Init+0x94>)
 80053c8:	f00f fdec 	bl	8014fa4 <HAL_UARTEx_EnableFifoMode>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d001      	beq.n	80053d6 <MX_USART6_UART_Init+0x8e>
  {
    Error_Handler();
 80053d2:	f7ff f9d4 	bl	800477e <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80053d6:	bf00      	nop
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	20013ce0 	.word	0x20013ce0
 80053e0:	40006400 	.word	0x40006400

080053e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b0ea      	sub	sp, #424	@ 0x1a8
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 80053ee:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 80053f2:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053f4:	f507 73ca 	add.w	r3, r7, #404	@ 0x194
 80053f8:	2200      	movs	r2, #0
 80053fa:	601a      	str	r2, [r3, #0]
 80053fc:	605a      	str	r2, [r3, #4]
 80053fe:	609a      	str	r2, [r3, #8]
 8005400:	60da      	str	r2, [r3, #12]
 8005402:	611a      	str	r2, [r3, #16]
  DMA_NodeConfTypeDef NodeConfig= {0};
 8005404:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8005408:	226c      	movs	r2, #108	@ 0x6c
 800540a:	2100      	movs	r1, #0
 800540c:	4618      	mov	r0, r3
 800540e:	f019 fd0f 	bl	801ee30 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005412:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8005416:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800541a:	4618      	mov	r0, r3
 800541c:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8005420:	461a      	mov	r2, r3
 8005422:	2100      	movs	r1, #0
 8005424:	f019 fd04 	bl	801ee30 <memset>
  if(uartHandle->Instance==UART5)
 8005428:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 800542c:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4ab2      	ldr	r2, [pc, #712]	@ (8005700 <HAL_UART_MspInit+0x31c>)
 8005436:	4293      	cmp	r3, r2
 8005438:	f040 80f1 	bne.w	800561e <HAL_UART_MspInit+0x23a>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 800543c:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8005440:	f5a3 71c4 	sub.w	r1, r3, #392	@ 0x188
 8005444:	f04f 0210 	mov.w	r2, #16
 8005448:	f04f 0300 	mov.w	r3, #0
 800544c:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_HSI;
 8005450:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8005454:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8005458:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 800545c:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800545e:	f107 0320 	add.w	r3, r7, #32
 8005462:	4618      	mov	r0, r3
 8005464:	f007 fa9c 	bl	800c9a0 <HAL_RCCEx_PeriphCLKConfig>
 8005468:	4603      	mov	r3, r0
 800546a:	2b00      	cmp	r3, #0
 800546c:	d001      	beq.n	8005472 <HAL_UART_MspInit+0x8e>
    {
      Error_Handler();
 800546e:	f7ff f986 	bl	800477e <Error_Handler>
    }

    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8005472:	4ba4      	ldr	r3, [pc, #656]	@ (8005704 <HAL_UART_MspInit+0x320>)
 8005474:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005478:	4aa2      	ldr	r2, [pc, #648]	@ (8005704 <HAL_UART_MspInit+0x320>)
 800547a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800547e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8005482:	4ba0      	ldr	r3, [pc, #640]	@ (8005704 <HAL_UART_MspInit+0x320>)
 8005484:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005488:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 800548c:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8005490:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8005494:	601a      	str	r2, [r3, #0]
 8005496:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 800549a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800549e:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80054a0:	4b98      	ldr	r3, [pc, #608]	@ (8005704 <HAL_UART_MspInit+0x320>)
 80054a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80054a6:	4a97      	ldr	r2, [pc, #604]	@ (8005704 <HAL_UART_MspInit+0x320>)
 80054a8:	f043 0302 	orr.w	r3, r3, #2
 80054ac:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80054b0:	4b94      	ldr	r3, [pc, #592]	@ (8005704 <HAL_UART_MspInit+0x320>)
 80054b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80054b6:	f003 0202 	and.w	r2, r3, #2
 80054ba:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 80054be:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80054c2:	601a      	str	r2, [r3, #0]
 80054c4:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 80054c8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80054cc:	681b      	ldr	r3, [r3, #0]
    /**UART5 GPIO Configuration
    PB5     ------> UART5_RX
    PB6     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80054ce:	2360      	movs	r3, #96	@ 0x60
 80054d0:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054d4:	2302      	movs	r3, #2
 80054d6:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054da:	2300      	movs	r3, #0
 80054dc:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054e0:	2300      	movs	r3, #0
 80054e2:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 80054e6:	230e      	movs	r3, #14
 80054e8:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054ec:	f507 73ca 	add.w	r3, r7, #404	@ 0x194
 80054f0:	4619      	mov	r1, r3
 80054f2:	4885      	ldr	r0, [pc, #532]	@ (8005708 <HAL_UART_MspInit+0x324>)
 80054f4:	f006 f86c 	bl	800b5d0 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* GPDMA1_REQUEST_UART5_RX Init */
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 80054f8:	2321      	movs	r3, #33	@ 0x21
 80054fa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    NodeConfig.Init.Request = GPDMA1_REQUEST_UART5_RX;
 80054fe:	231d      	movs	r3, #29
 8005500:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8005504:	2300      	movs	r3, #0
 8005506:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800550a:	2300      	movs	r3, #0
 800550c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 8005510:	2300      	movs	r3, #0
 8005512:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 8005516:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800551a:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 800551e:	2300      	movs	r3, #0
 8005520:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8005524:	2300      	movs	r3, #0
 8005526:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    NodeConfig.Init.SrcBurstLength = 1;
 800552a:	2301      	movs	r3, #1
 800552c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
    NodeConfig.Init.DestBurstLength = 1;
 8005530:	2301      	movs	r3, #1
 8005532:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8005536:	2300      	movs	r3, #0
 8005538:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800553c:	2300      	movs	r3, #0
 800553e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
    NodeConfig.Init.Mode = DMA_NORMAL;
 8005542:	2300      	movs	r3, #0
 8005544:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 8005548:	2300      	movs	r3, #0
 800554a:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 800554e:	2300      	movs	r3, #0
 8005550:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 8005554:	2300      	movs	r3, #0
 8005556:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel4) != HAL_OK)
 800555a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800555e:	496b      	ldr	r1, [pc, #428]	@ (800570c <HAL_UART_MspInit+0x328>)
 8005560:	4618      	mov	r0, r3
 8005562:	f004 f9d1 	bl	8009908 <HAL_DMAEx_List_BuildNode>
 8005566:	4603      	mov	r3, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d001      	beq.n	8005570 <HAL_UART_MspInit+0x18c>
    {
      Error_Handler();
 800556c:	f7ff f907 	bl	800477e <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel4, NULL, &Node_GPDMA1_Channel4) != HAL_OK)
 8005570:	4a66      	ldr	r2, [pc, #408]	@ (800570c <HAL_UART_MspInit+0x328>)
 8005572:	2100      	movs	r1, #0
 8005574:	4866      	ldr	r0, [pc, #408]	@ (8005710 <HAL_UART_MspInit+0x32c>)
 8005576:	f004 f9dd 	bl	8009934 <HAL_DMAEx_List_InsertNode>
 800557a:	4603      	mov	r3, r0
 800557c:	2b00      	cmp	r3, #0
 800557e:	d001      	beq.n	8005584 <HAL_UART_MspInit+0x1a0>
    {
      Error_Handler();
 8005580:	f7ff f8fd 	bl	800477e <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel4) != HAL_OK)
 8005584:	4862      	ldr	r0, [pc, #392]	@ (8005710 <HAL_UART_MspInit+0x32c>)
 8005586:	f004 fa9e 	bl	8009ac6 <HAL_DMAEx_List_SetCircularMode>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d001      	beq.n	8005594 <HAL_UART_MspInit+0x1b0>
    {
      Error_Handler();
 8005590:	f7ff f8f5 	bl	800477e <Error_Handler>
    }

    handle_GPDMA1_Channel4.Instance = GPDMA1_Channel4;
 8005594:	4b5f      	ldr	r3, [pc, #380]	@ (8005714 <HAL_UART_MspInit+0x330>)
 8005596:	4a60      	ldr	r2, [pc, #384]	@ (8005718 <HAL_UART_MspInit+0x334>)
 8005598:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel4.InitLinkedList.Priority = DMA_HIGH_PRIORITY;
 800559a:	4b5e      	ldr	r3, [pc, #376]	@ (8005714 <HAL_UART_MspInit+0x330>)
 800559c:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80055a0:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel4.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 80055a2:	4b5c      	ldr	r3, [pc, #368]	@ (8005714 <HAL_UART_MspInit+0x330>)
 80055a4:	2200      	movs	r2, #0
 80055a6:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel4.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 80055a8:	4b5a      	ldr	r3, [pc, #360]	@ (8005714 <HAL_UART_MspInit+0x330>)
 80055aa:	2200      	movs	r2, #0
 80055ac:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel4.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80055ae:	4b59      	ldr	r3, [pc, #356]	@ (8005714 <HAL_UART_MspInit+0x330>)
 80055b0:	2200      	movs	r2, #0
 80055b2:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel4.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 80055b4:	4b57      	ldr	r3, [pc, #348]	@ (8005714 <HAL_UART_MspInit+0x330>)
 80055b6:	2281      	movs	r2, #129	@ 0x81
 80055b8:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel4) != HAL_OK)
 80055ba:	4856      	ldr	r0, [pc, #344]	@ (8005714 <HAL_UART_MspInit+0x330>)
 80055bc:	f003 ffe4 	bl	8009588 <HAL_DMAEx_List_Init>
 80055c0:	4603      	mov	r3, r0
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d001      	beq.n	80055ca <HAL_UART_MspInit+0x1e6>
    {
      Error_Handler();
 80055c6:	f7ff f8da 	bl	800477e <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel4, &List_GPDMA1_Channel4) != HAL_OK)
 80055ca:	4951      	ldr	r1, [pc, #324]	@ (8005710 <HAL_UART_MspInit+0x32c>)
 80055cc:	4851      	ldr	r0, [pc, #324]	@ (8005714 <HAL_UART_MspInit+0x330>)
 80055ce:	f004 fadb 	bl	8009b88 <HAL_DMAEx_List_LinkQ>
 80055d2:	4603      	mov	r3, r0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d001      	beq.n	80055dc <HAL_UART_MspInit+0x1f8>
    {
      Error_Handler();
 80055d8:	f7ff f8d1 	bl	800477e <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle, hdmarx, handle_GPDMA1_Channel4);
 80055dc:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 80055e0:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a4b      	ldr	r2, [pc, #300]	@ (8005714 <HAL_UART_MspInit+0x330>)
 80055e8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80055ec:	4a49      	ldr	r2, [pc, #292]	@ (8005714 <HAL_UART_MspInit+0x330>)
 80055ee:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 80055f2:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel4, DMA_CHANNEL_NPRIV) != HAL_OK)
 80055fa:	2110      	movs	r1, #16
 80055fc:	4845      	ldr	r0, [pc, #276]	@ (8005714 <HAL_UART_MspInit+0x330>)
 80055fe:	f003 ff62 	bl	80094c6 <HAL_DMA_ConfigChannelAttributes>
 8005602:	4603      	mov	r3, r0
 8005604:	2b00      	cmp	r3, #0
 8005606:	d001      	beq.n	800560c <HAL_UART_MspInit+0x228>
    {
      Error_Handler();
 8005608:	f7ff f8b9 	bl	800477e <Error_Handler>
    }

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 800560c:	2200      	movs	r2, #0
 800560e:	2100      	movs	r1, #0
 8005610:	203e      	movs	r0, #62	@ 0x3e
 8005612:	f001 fe68 	bl	80072e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8005616:	203e      	movs	r0, #62	@ 0x3e
 8005618:	f001 fe7f 	bl	800731a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800561c:	e0f1      	b.n	8005802 <HAL_UART_MspInit+0x41e>
  else if(uartHandle->Instance==USART1)
 800561e:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8005622:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a3c      	ldr	r2, [pc, #240]	@ (800571c <HAL_UART_MspInit+0x338>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d179      	bne.n	8005724 <HAL_UART_MspInit+0x340>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005630:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8005634:	f5a3 71c4 	sub.w	r1, r3, #392	@ 0x188
 8005638:	f04f 0201 	mov.w	r2, #1
 800563c:	f04f 0300 	mov.w	r3, #0
 8005640:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 8005644:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8005648:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800564c:	2203      	movs	r2, #3
 800564e:	65da      	str	r2, [r3, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005650:	f107 0320 	add.w	r3, r7, #32
 8005654:	4618      	mov	r0, r3
 8005656:	f007 f9a3 	bl	800c9a0 <HAL_RCCEx_PeriphCLKConfig>
 800565a:	4603      	mov	r3, r0
 800565c:	2b00      	cmp	r3, #0
 800565e:	d001      	beq.n	8005664 <HAL_UART_MspInit+0x280>
      Error_Handler();
 8005660:	f7ff f88d 	bl	800477e <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8005664:	4b27      	ldr	r3, [pc, #156]	@ (8005704 <HAL_UART_MspInit+0x320>)
 8005666:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800566a:	4a26      	ldr	r2, [pc, #152]	@ (8005704 <HAL_UART_MspInit+0x320>)
 800566c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005670:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8005674:	4b23      	ldr	r3, [pc, #140]	@ (8005704 <HAL_UART_MspInit+0x320>)
 8005676:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800567a:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 800567e:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8005682:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8005686:	601a      	str	r2, [r3, #0]
 8005688:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 800568c:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8005690:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005692:	4b1c      	ldr	r3, [pc, #112]	@ (8005704 <HAL_UART_MspInit+0x320>)
 8005694:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005698:	4a1a      	ldr	r2, [pc, #104]	@ (8005704 <HAL_UART_MspInit+0x320>)
 800569a:	f043 0301 	orr.w	r3, r3, #1
 800569e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80056a2:	4b18      	ldr	r3, [pc, #96]	@ (8005704 <HAL_UART_MspInit+0x320>)
 80056a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80056a8:	f003 0201 	and.w	r2, r3, #1
 80056ac:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 80056b0:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80056b4:	601a      	str	r2, [r3, #0]
 80056b6:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 80056ba:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80056be:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80056c0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80056c4:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056c8:	2302      	movs	r3, #2
 80056ca:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056ce:	2300      	movs	r3, #0
 80056d0:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056d4:	2300      	movs	r3, #0
 80056d6:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80056da:	2307      	movs	r3, #7
 80056dc:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056e0:	f507 73ca 	add.w	r3, r7, #404	@ 0x194
 80056e4:	4619      	mov	r1, r3
 80056e6:	480e      	ldr	r0, [pc, #56]	@ (8005720 <HAL_UART_MspInit+0x33c>)
 80056e8:	f005 ff72 	bl	800b5d0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80056ec:	2200      	movs	r2, #0
 80056ee:	2100      	movs	r1, #0
 80056f0:	203a      	movs	r0, #58	@ 0x3a
 80056f2:	f001 fdf8 	bl	80072e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80056f6:	203a      	movs	r0, #58	@ 0x3a
 80056f8:	f001 fe0f 	bl	800731a <HAL_NVIC_EnableIRQ>
}
 80056fc:	e081      	b.n	8005802 <HAL_UART_MspInit+0x41e>
 80056fe:	bf00      	nop
 8005700:	40005000 	.word	0x40005000
 8005704:	44020c00 	.word	0x44020c00
 8005708:	42020400 	.word	0x42020400
 800570c:	20013d74 	.word	0x20013d74
 8005710:	20013d98 	.word	0x20013d98
 8005714:	20013db0 	.word	0x20013db0
 8005718:	40020250 	.word	0x40020250
 800571c:	40013800 	.word	0x40013800
 8005720:	42020000 	.word	0x42020000
  else if(uartHandle->Instance==USART6)
 8005724:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8005728:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a36      	ldr	r2, [pc, #216]	@ (800580c <HAL_UART_MspInit+0x428>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d165      	bne.n	8005802 <HAL_UART_MspInit+0x41e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8005736:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 800573a:	f5a3 71c4 	sub.w	r1, r3, #392	@ 0x188
 800573e:	f04f 0220 	mov.w	r2, #32
 8005742:	f04f 0300 	mov.w	r3, #0
 8005746:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_HSI;
 800574a:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 800574e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8005752:	f44f 32c0 	mov.w	r2, #98304	@ 0x18000
 8005756:	671a      	str	r2, [r3, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005758:	f107 0320 	add.w	r3, r7, #32
 800575c:	4618      	mov	r0, r3
 800575e:	f007 f91f 	bl	800c9a0 <HAL_RCCEx_PeriphCLKConfig>
 8005762:	4603      	mov	r3, r0
 8005764:	2b00      	cmp	r3, #0
 8005766:	d001      	beq.n	800576c <HAL_UART_MspInit+0x388>
      Error_Handler();
 8005768:	f7ff f809 	bl	800477e <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 800576c:	4b28      	ldr	r3, [pc, #160]	@ (8005810 <HAL_UART_MspInit+0x42c>)
 800576e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005772:	4a27      	ldr	r2, [pc, #156]	@ (8005810 <HAL_UART_MspInit+0x42c>)
 8005774:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005778:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800577c:	4b24      	ldr	r3, [pc, #144]	@ (8005810 <HAL_UART_MspInit+0x42c>)
 800577e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005782:	f003 7200 	and.w	r2, r3, #33554432	@ 0x2000000
 8005786:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 800578a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800578e:	601a      	str	r2, [r3, #0]
 8005790:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8005794:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8005798:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800579a:	4b1d      	ldr	r3, [pc, #116]	@ (8005810 <HAL_UART_MspInit+0x42c>)
 800579c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80057a0:	4a1b      	ldr	r2, [pc, #108]	@ (8005810 <HAL_UART_MspInit+0x42c>)
 80057a2:	f043 0304 	orr.w	r3, r3, #4
 80057a6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80057aa:	4b19      	ldr	r3, [pc, #100]	@ (8005810 <HAL_UART_MspInit+0x42c>)
 80057ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80057b0:	f003 0204 	and.w	r2, r3, #4
 80057b4:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 80057b8:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80057bc:	601a      	str	r2, [r3, #0]
 80057be:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 80057c2:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80057c6:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80057c8:	23c0      	movs	r3, #192	@ 0xc0
 80057ca:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057ce:	2302      	movs	r3, #2
 80057d0:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057d4:	2300      	movs	r3, #0
 80057d6:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057da:	2300      	movs	r3, #0
 80057dc:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 80057e0:	2307      	movs	r3, #7
 80057e2:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80057e6:	f507 73ca 	add.w	r3, r7, #404	@ 0x194
 80057ea:	4619      	mov	r1, r3
 80057ec:	4809      	ldr	r0, [pc, #36]	@ (8005814 <HAL_UART_MspInit+0x430>)
 80057ee:	f005 feef 	bl	800b5d0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80057f2:	2200      	movs	r2, #0
 80057f4:	2100      	movs	r1, #0
 80057f6:	2055      	movs	r0, #85	@ 0x55
 80057f8:	f001 fd75 	bl	80072e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80057fc:	2055      	movs	r0, #85	@ 0x55
 80057fe:	f001 fd8c 	bl	800731a <HAL_NVIC_EnableIRQ>
}
 8005802:	bf00      	nop
 8005804:	f507 77d4 	add.w	r7, r7, #424	@ 0x1a8
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}
 800580c:	40006400 	.word	0x40006400
 8005810:	44020c00 	.word	0x44020c00
 8005814:	42020800 	.word	0x42020800

08005818 <Reset_Handler>:
 8005818:	480d      	ldr	r0, [pc, #52]	@ (8005850 <LoopForever+0x2>)
 800581a:	4685      	mov	sp, r0
 800581c:	f7ff fc1e 	bl	800505c <SystemInit>
 8005820:	480c      	ldr	r0, [pc, #48]	@ (8005854 <LoopForever+0x6>)
 8005822:	490d      	ldr	r1, [pc, #52]	@ (8005858 <LoopForever+0xa>)
 8005824:	4a0d      	ldr	r2, [pc, #52]	@ (800585c <LoopForever+0xe>)
 8005826:	2300      	movs	r3, #0
 8005828:	e002      	b.n	8005830 <LoopCopyDataInit>

0800582a <CopyDataInit>:
 800582a:	58d4      	ldr	r4, [r2, r3]
 800582c:	50c4      	str	r4, [r0, r3]
 800582e:	3304      	adds	r3, #4

08005830 <LoopCopyDataInit>:
 8005830:	18c4      	adds	r4, r0, r3
 8005832:	428c      	cmp	r4, r1
 8005834:	d3f9      	bcc.n	800582a <CopyDataInit>
 8005836:	4a0a      	ldr	r2, [pc, #40]	@ (8005860 <LoopForever+0x12>)
 8005838:	4c0a      	ldr	r4, [pc, #40]	@ (8005864 <LoopForever+0x16>)
 800583a:	2300      	movs	r3, #0
 800583c:	e001      	b.n	8005842 <LoopFillZerobss>

0800583e <FillZerobss>:
 800583e:	6013      	str	r3, [r2, #0]
 8005840:	3204      	adds	r2, #4

08005842 <LoopFillZerobss>:
 8005842:	42a2      	cmp	r2, r4
 8005844:	d3fb      	bcc.n	800583e <FillZerobss>
 8005846:	f019 fc29 	bl	801f09c <__libc_init_array>
 800584a:	f7fe fe7b 	bl	8004544 <main>

0800584e <LoopForever>:
 800584e:	e7fe      	b.n	800584e <LoopForever>
 8005850:	200a0000 	.word	0x200a0000
 8005854:	20000000 	.word	0x20000000
 8005858:	20000274 	.word	0x20000274
 800585c:	08024858 	.word	0x08024858
 8005860:	20000278 	.word	0x20000278
 8005864:	200157dc 	.word	0x200157dc

08005868 <ADC1_IRQHandler>:
 8005868:	e7fe      	b.n	8005868 <ADC1_IRQHandler>
	...

0800586c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005870:	2003      	movs	r0, #3
 8005872:	f001 fd2d 	bl	80072d0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005876:	f006 ff09 	bl	800c68c <HAL_RCC_GetSysClockFreq>
 800587a:	4602      	mov	r2, r0
 800587c:	4b0c      	ldr	r3, [pc, #48]	@ (80058b0 <HAL_Init+0x44>)
 800587e:	6a1b      	ldr	r3, [r3, #32]
 8005880:	f003 030f 	and.w	r3, r3, #15
 8005884:	490b      	ldr	r1, [pc, #44]	@ (80058b4 <HAL_Init+0x48>)
 8005886:	5ccb      	ldrb	r3, [r1, r3]
 8005888:	fa22 f303 	lsr.w	r3, r2, r3
 800588c:	4a0a      	ldr	r2, [pc, #40]	@ (80058b8 <HAL_Init+0x4c>)
 800588e:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8005890:	2004      	movs	r0, #4
 8005892:	f001 fd85 	bl	80073a0 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005896:	200f      	movs	r0, #15
 8005898:	f000 f810 	bl	80058bc <HAL_InitTick>
 800589c:	4603      	mov	r3, r0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d001      	beq.n	80058a6 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e002      	b.n	80058ac <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80058a6:	f7ff f93b 	bl	8004b20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80058aa:	2300      	movs	r3, #0
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	bd80      	pop	{r7, pc}
 80058b0:	44020c00 	.word	0x44020c00
 80058b4:	0802434c 	.word	0x0802434c
 80058b8:	20000074 	.word	0x20000074

080058bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b084      	sub	sp, #16
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 80058c4:	2300      	movs	r3, #0
 80058c6:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80058c8:	4b33      	ldr	r3, [pc, #204]	@ (8005998 <HAL_InitTick+0xdc>)
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d101      	bne.n	80058d4 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e05c      	b.n	800598e <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80058d4:	4b31      	ldr	r3, [pc, #196]	@ (800599c <HAL_InitTick+0xe0>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 0304 	and.w	r3, r3, #4
 80058dc:	2b04      	cmp	r3, #4
 80058de:	d10c      	bne.n	80058fa <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80058e0:	4b2f      	ldr	r3, [pc, #188]	@ (80059a0 <HAL_InitTick+0xe4>)
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	4b2c      	ldr	r3, [pc, #176]	@ (8005998 <HAL_InitTick+0xdc>)
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	4619      	mov	r1, r3
 80058ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80058ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80058f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80058f6:	60fb      	str	r3, [r7, #12]
 80058f8:	e037      	b.n	800596a <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80058fa:	f001 fda9 	bl	8007450 <HAL_SYSTICK_GetCLKSourceConfig>
 80058fe:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	2b02      	cmp	r3, #2
 8005904:	d023      	beq.n	800594e <HAL_InitTick+0x92>
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	2b02      	cmp	r3, #2
 800590a:	d82d      	bhi.n	8005968 <HAL_InitTick+0xac>
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d003      	beq.n	800591a <HAL_InitTick+0x5e>
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	2b01      	cmp	r3, #1
 8005916:	d00d      	beq.n	8005934 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8005918:	e026      	b.n	8005968 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 800591a:	4b21      	ldr	r3, [pc, #132]	@ (80059a0 <HAL_InitTick+0xe4>)
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	4b1e      	ldr	r3, [pc, #120]	@ (8005998 <HAL_InitTick+0xdc>)
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	4619      	mov	r1, r3
 8005924:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8005928:	fbb3 f3f1 	udiv	r3, r3, r1
 800592c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005930:	60fb      	str	r3, [r7, #12]
        break;
 8005932:	e01a      	b.n	800596a <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8005934:	4b18      	ldr	r3, [pc, #96]	@ (8005998 <HAL_InitTick+0xdc>)
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	461a      	mov	r2, r3
 800593a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800593e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005942:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8005946:	fbb2 f3f3 	udiv	r3, r2, r3
 800594a:	60fb      	str	r3, [r7, #12]
        break;
 800594c:	e00d      	b.n	800596a <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800594e:	4b12      	ldr	r3, [pc, #72]	@ (8005998 <HAL_InitTick+0xdc>)
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	461a      	mov	r2, r3
 8005954:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005958:	fbb3 f3f2 	udiv	r3, r3, r2
 800595c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8005960:	fbb2 f3f3 	udiv	r3, r2, r3
 8005964:	60fb      	str	r3, [r7, #12]
        break;
 8005966:	e000      	b.n	800596a <HAL_InitTick+0xae>
        break;
 8005968:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 800596a:	68f8      	ldr	r0, [r7, #12]
 800596c:	f001 fcf6 	bl	800735c <HAL_SYSTICK_Config>
 8005970:	4603      	mov	r3, r0
 8005972:	2b00      	cmp	r3, #0
 8005974:	d001      	beq.n	800597a <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	e009      	b.n	800598e <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800597a:	2200      	movs	r2, #0
 800597c:	6879      	ldr	r1, [r7, #4]
 800597e:	f04f 30ff 	mov.w	r0, #4294967295
 8005982:	f001 fcb0 	bl	80072e6 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8005986:	4a07      	ldr	r2, [pc, #28]	@ (80059a4 <HAL_InitTick+0xe8>)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800598c:	2300      	movs	r3, #0
}
 800598e:	4618      	mov	r0, r3
 8005990:	3710      	adds	r7, #16
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	2000007c 	.word	0x2000007c
 800599c:	e000e010 	.word	0xe000e010
 80059a0:	20000074 	.word	0x20000074
 80059a4:	20000078 	.word	0x20000078

080059a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80059a8:	b480      	push	{r7}
 80059aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80059ac:	4b06      	ldr	r3, [pc, #24]	@ (80059c8 <HAL_IncTick+0x20>)
 80059ae:	781b      	ldrb	r3, [r3, #0]
 80059b0:	461a      	mov	r2, r3
 80059b2:	4b06      	ldr	r3, [pc, #24]	@ (80059cc <HAL_IncTick+0x24>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4413      	add	r3, r2
 80059b8:	4a04      	ldr	r2, [pc, #16]	@ (80059cc <HAL_IncTick+0x24>)
 80059ba:	6013      	str	r3, [r2, #0]
}
 80059bc:	bf00      	nop
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr
 80059c6:	bf00      	nop
 80059c8:	2000007c 	.word	0x2000007c
 80059cc:	20013e28 	.word	0x20013e28

080059d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80059d0:	b480      	push	{r7}
 80059d2:	af00      	add	r7, sp, #0
  return uwTick;
 80059d4:	4b03      	ldr	r3, [pc, #12]	@ (80059e4 <HAL_GetTick+0x14>)
 80059d6:	681b      	ldr	r3, [r3, #0]
}
 80059d8:	4618      	mov	r0, r3
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr
 80059e2:	bf00      	nop
 80059e4:	20013e28 	.word	0x20013e28

080059e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80059f0:	f7ff ffee 	bl	80059d0 <HAL_GetTick>
 80059f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a00:	d005      	beq.n	8005a0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005a02:	4b0a      	ldr	r3, [pc, #40]	@ (8005a2c <HAL_Delay+0x44>)
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	461a      	mov	r2, r3
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	4413      	add	r3, r2
 8005a0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005a0e:	bf00      	nop
 8005a10:	f7ff ffde 	bl	80059d0 <HAL_GetTick>
 8005a14:	4602      	mov	r2, r0
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	1ad3      	subs	r3, r2, r3
 8005a1a:	68fa      	ldr	r2, [r7, #12]
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d8f7      	bhi.n	8005a10 <HAL_Delay+0x28>
  {
  }
}
 8005a20:	bf00      	nop
 8005a22:	bf00      	nop
 8005a24:	3710      	adds	r7, #16
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
 8005a2a:	bf00      	nop
 8005a2c:	2000007c 	.word	0x2000007c

08005a30 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b083      	sub	sp, #12
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	431a      	orrs	r2, r3
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	609a      	str	r2, [r3, #8]
}
 8005a4a:	bf00      	nop
 8005a4c:	370c      	adds	r7, #12
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr

08005a56 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005a56:	b480      	push	{r7}
 8005a58:	b083      	sub	sp, #12
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
 8005a5e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	431a      	orrs	r2, r3
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	609a      	str	r2, [r3, #8]
}
 8005a70:	bf00      	nop
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr

08005a7c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	370c      	adds	r7, #12
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr

08005a98 <LL_ADC_EnableChannelVDDcore>:
  * @rmtoll OR       OP0       LL_ADC_EnableChannelVDDcore
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableChannelVDDcore(ADC_TypeDef *ADCx)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b083      	sub	sp, #12
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->OR, ADC_OR_OP0);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8005aa6:	f043 0201 	orr.w	r2, r3, #1
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8005ab0:	bf00      	nop
 8005ab2:	370c      	adds	r7, #12
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr

08005abc <LL_ADC_EnableChannel0_GPIO>:
  * @rmtoll OR       OP0       LL_ADC_EnableChannel0_GPIO
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableChannel0_GPIO(const ADC_TypeDef *ADCx)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b083      	sub	sp, #12
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(ADCx);
  SET_BIT(ADC1->OR, ADC_OR_OP0);
 8005ac4:	4b06      	ldr	r3, [pc, #24]	@ (8005ae0 <LL_ADC_EnableChannel0_GPIO+0x24>)
 8005ac6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8005aca:	4a05      	ldr	r2, [pc, #20]	@ (8005ae0 <LL_ADC_EnableChannel0_GPIO+0x24>)
 8005acc:	f043 0301 	orr.w	r3, r3, #1
 8005ad0:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
}
 8005ad4:	bf00      	nop
 8005ad6:	370c      	adds	r7, #12
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr
 8005ae0:	42028000 	.word	0x42028000

08005ae4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b087      	sub	sp, #28
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	60f8      	str	r0, [r7, #12]
 8005aec:	60b9      	str	r1, [r7, #8]
 8005aee:	607a      	str	r2, [r7, #4]
 8005af0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	3360      	adds	r3, #96	@ 0x60
 8005af6:	461a      	mov	r2, r3
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	4413      	add	r3, r2
 8005afe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	4b08      	ldr	r3, [pc, #32]	@ (8005b28 <LL_ADC_SetOffset+0x44>)
 8005b06:	4013      	ands	r3, r2
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8005b0e:	683a      	ldr	r2, [r7, #0]
 8005b10:	430a      	orrs	r2, r1
 8005b12:	4313      	orrs	r3, r2
 8005b14:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005b1c:	bf00      	nop
 8005b1e:	371c      	adds	r7, #28
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr
 8005b28:	03fff000 	.word	0x03fff000

08005b2c <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b085      	sub	sp, #20
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	3360      	adds	r3, #96	@ 0x60
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	4413      	add	r3, r2
 8005b42:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3714      	adds	r7, #20
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b087      	sub	sp, #28
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	60f8      	str	r0, [r7, #12]
 8005b60:	60b9      	str	r1, [r7, #8]
 8005b62:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	3360      	adds	r3, #96	@ 0x60
 8005b68:	461a      	mov	r2, r3
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	4413      	add	r3, r2
 8005b70:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	431a      	orrs	r2, r3
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8005b82:	bf00      	nop
 8005b84:	371c      	adds	r7, #28
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr

08005b8e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8005b8e:	b480      	push	{r7}
 8005b90:	b087      	sub	sp, #28
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	60f8      	str	r0, [r7, #12]
 8005b96:	60b9      	str	r1, [r7, #8]
 8005b98:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	3360      	adds	r3, #96	@ 0x60
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	4413      	add	r3, r2
 8005ba6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	431a      	orrs	r2, r3
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8005bb8:	bf00      	nop
 8005bba:	371c      	adds	r7, #28
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr

08005bc4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b087      	sub	sp, #28
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	60f8      	str	r0, [r7, #12]
 8005bcc:	60b9      	str	r1, [r7, #8]
 8005bce:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	3360      	adds	r3, #96	@ 0x60
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	4413      	add	r3, r2
 8005bdc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	431a      	orrs	r2, r3
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8005bee:	bf00      	nop
 8005bf0:	371c      	adds	r7, #28
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr

08005bfa <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8005bfa:	b480      	push	{r7}
 8005bfc:	b083      	sub	sp, #12
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]
 8005c02:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	695b      	ldr	r3, [r3, #20]
 8005c08:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	431a      	orrs	r2, r3
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	615a      	str	r2, [r3, #20]
}
 8005c14:	bf00      	nop
 8005c16:	370c      	adds	r7, #12
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b083      	sub	sp, #12
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d101      	bne.n	8005c38 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005c34:	2301      	movs	r3, #1
 8005c36:	e000      	b.n	8005c3a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005c38:	2300      	movs	r3, #0
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	370c      	adds	r7, #12
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr

08005c46 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H5, fast channel allows: 2.5 (sampling) + 12.5 (conversion 12b) = 15 ADC clock cycles (fADC)
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005c46:	b480      	push	{r7}
 8005c48:	b087      	sub	sp, #28
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	60f8      	str	r0, [r7, #12]
 8005c4e:	60b9      	str	r1, [r7, #8]
 8005c50:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	3330      	adds	r3, #48	@ 0x30
 8005c56:	461a      	mov	r2, r3
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	0a1b      	lsrs	r3, r3, #8
 8005c5c:	009b      	lsls	r3, r3, #2
 8005c5e:	f003 030c 	and.w	r3, r3, #12
 8005c62:	4413      	add	r3, r2
 8005c64:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	681a      	ldr	r2, [r3, #0]
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	f003 031f 	and.w	r3, r3, #31
 8005c70:	211f      	movs	r1, #31
 8005c72:	fa01 f303 	lsl.w	r3, r1, r3
 8005c76:	43db      	mvns	r3, r3
 8005c78:	401a      	ands	r2, r3
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	0e9b      	lsrs	r3, r3, #26
 8005c7e:	f003 011f 	and.w	r1, r3, #31
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	f003 031f 	and.w	r3, r3, #31
 8005c88:	fa01 f303 	lsl.w	r3, r1, r3
 8005c8c:	431a      	orrs	r2, r3
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005c92:	bf00      	nop
 8005c94:	371c      	adds	r7, #28
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr

08005c9e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005c9e:	b480      	push	{r7}
 8005ca0:	b087      	sub	sp, #28
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	60f8      	str	r0, [r7, #12]
 8005ca6:	60b9      	str	r1, [r7, #8]
 8005ca8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	3314      	adds	r3, #20
 8005cae:	461a      	mov	r2, r3
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	0e5b      	lsrs	r3, r3, #25
 8005cb4:	009b      	lsls	r3, r3, #2
 8005cb6:	f003 0304 	and.w	r3, r3, #4
 8005cba:	4413      	add	r3, r2
 8005cbc:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	0d1b      	lsrs	r3, r3, #20
 8005cc6:	f003 031f 	and.w	r3, r3, #31
 8005cca:	2107      	movs	r1, #7
 8005ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8005cd0:	43db      	mvns	r3, r3
 8005cd2:	401a      	ands	r2, r3
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	0d1b      	lsrs	r3, r3, #20
 8005cd8:	f003 031f 	and.w	r3, r3, #31
 8005cdc:	6879      	ldr	r1, [r7, #4]
 8005cde:	fa01 f303 	lsl.w	r3, r1, r3
 8005ce2:	431a      	orrs	r2, r3
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005ce8:	bf00      	nop
 8005cea:	371c      	adds	r7, #28
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr

08005cf4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b085      	sub	sp, #20
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	60f8      	str	r0, [r7, #12]
 8005cfc:	60b9      	str	r1, [r7, #8]
 8005cfe:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d0c:	43db      	mvns	r3, r3
 8005d0e:	401a      	ands	r2, r3
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f003 0318 	and.w	r3, r3, #24
 8005d16:	4908      	ldr	r1, [pc, #32]	@ (8005d38 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005d18:	40d9      	lsrs	r1, r3
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	400b      	ands	r3, r1
 8005d1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d22:	431a      	orrs	r2, r3
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8005d2a:	bf00      	nop
 8005d2c:	3714      	adds	r7, #20
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr
 8005d36:	bf00      	nop
 8005d38:	000fffff 	.word	0x000fffff

08005d3c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b083      	sub	sp, #12
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	f003 031f 	and.w	r3, r3, #31
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	370c      	adds	r7, #12
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr

08005d58 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b083      	sub	sp, #12
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	370c      	adds	r7, #12
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr

08005d74 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8005d84:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	6093      	str	r3, [r2, #8]
}
 8005d8c:	bf00      	nop
 8005d8e:	370c      	adds	r7, #12
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b083      	sub	sp, #12
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005da8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005dac:	d101      	bne.n	8005db2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005dae:	2301      	movs	r3, #1
 8005db0:	e000      	b.n	8005db4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005db2:	2300      	movs	r3, #0
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	370c      	adds	r7, #12
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr

08005dc0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b083      	sub	sp, #12
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8005dd0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005dd4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005ddc:	bf00      	nop
 8005dde:	370c      	adds	r7, #12
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr

08005de8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005df8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005dfc:	d101      	bne.n	8005e02 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e000      	b.n	8005e04 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005e02:	2300      	movs	r3, #0
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	370c      	adds	r7, #12
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr

08005e10 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b083      	sub	sp, #12
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005e20:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005e24:	f043 0201 	orr.w	r2, r3, #1
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005e2c:	bf00      	nop
 8005e2e:	370c      	adds	r7, #12
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr

08005e38 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b083      	sub	sp, #12
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005e48:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005e4c:	f043 0202 	orr.w	r2, r3, #2
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8005e54:	bf00      	nop
 8005e56:	370c      	adds	r7, #12
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr

08005e60 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b083      	sub	sp, #12
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	f003 0301 	and.w	r3, r3, #1
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d101      	bne.n	8005e78 <LL_ADC_IsEnabled+0x18>
 8005e74:	2301      	movs	r3, #1
 8005e76:	e000      	b.n	8005e7a <LL_ADC_IsEnabled+0x1a>
 8005e78:	2300      	movs	r3, #0
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	370c      	adds	r7, #12
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr

08005e86 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8005e86:	b480      	push	{r7}
 8005e88:	b083      	sub	sp, #12
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	f003 0302 	and.w	r3, r3, #2
 8005e96:	2b02      	cmp	r3, #2
 8005e98:	d101      	bne.n	8005e9e <LL_ADC_IsDisableOngoing+0x18>
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e000      	b.n	8005ea0 <LL_ADC_IsDisableOngoing+0x1a>
 8005e9e:	2300      	movs	r3, #0
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	370c      	adds	r7, #12
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr

08005eac <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b083      	sub	sp, #12
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005ebc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005ec0:	f043 0204 	orr.w	r2, r3, #4
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005ec8:	bf00      	nop
 8005eca:	370c      	adds	r7, #12
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b083      	sub	sp, #12
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005ee4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005ee8:	f043 0210 	orr.w	r2, r3, #16
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8005ef0:	bf00      	nop
 8005ef2:	370c      	adds	r7, #12
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr

08005efc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b083      	sub	sp, #12
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	f003 0304 	and.w	r3, r3, #4
 8005f0c:	2b04      	cmp	r3, #4
 8005f0e:	d101      	bne.n	8005f14 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005f10:	2301      	movs	r3, #1
 8005f12:	e000      	b.n	8005f16 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005f14:	2300      	movs	r3, #0
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	370c      	adds	r7, #12
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr

08005f22 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8005f22:	b480      	push	{r7}
 8005f24:	b083      	sub	sp, #12
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005f32:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005f36:	f043 0220 	orr.w	r2, r3, #32
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8005f3e:	bf00      	nop
 8005f40:	370c      	adds	r7, #12
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr

08005f4a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005f4a:	b480      	push	{r7}
 8005f4c:	b083      	sub	sp, #12
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	f003 0308 	and.w	r3, r3, #8
 8005f5a:	2b08      	cmp	r3, #8
 8005f5c:	d101      	bne.n	8005f62 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e000      	b.n	8005f64 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005f62:	2300      	movs	r3, #0
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	370c      	adds	r7, #12
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr

08005f70 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005f70:	b590      	push	{r4, r7, lr}
 8005f72:	b089      	sub	sp, #36	@ 0x24
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d101      	bne.n	8005f8a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	e136      	b.n	80061f8 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d109      	bne.n	8005fac <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f7fd fbdd 	bl	8003758 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f7ff fef1 	bl	8005d98 <LL_ADC_IsDeepPowerDownEnabled>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d004      	beq.n	8005fc6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f7ff fed7 	bl	8005d74 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f7ff ff0c 	bl	8005de8 <LL_ADC_IsInternalRegulatorEnabled>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d115      	bne.n	8006002 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f7ff fef0 	bl	8005dc0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005fe0:	4b87      	ldr	r3, [pc, #540]	@ (8006200 <HAL_ADC_Init+0x290>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	099b      	lsrs	r3, r3, #6
 8005fe6:	4a87      	ldr	r2, [pc, #540]	@ (8006204 <HAL_ADC_Init+0x294>)
 8005fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8005fec:	099b      	lsrs	r3, r3, #6
 8005fee:	3301      	adds	r3, #1
 8005ff0:	005b      	lsls	r3, r3, #1
 8005ff2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005ff4:	e002      	b.n	8005ffc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	3b01      	subs	r3, #1
 8005ffa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d1f9      	bne.n	8005ff6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4618      	mov	r0, r3
 8006008:	f7ff feee 	bl	8005de8 <LL_ADC_IsInternalRegulatorEnabled>
 800600c:	4603      	mov	r3, r0
 800600e:	2b00      	cmp	r3, #0
 8006010:	d10d      	bne.n	800602e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006016:	f043 0210 	orr.w	r2, r3, #16
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006022:	f043 0201 	orr.w	r2, r3, #1
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800602a:	2301      	movs	r3, #1
 800602c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4618      	mov	r0, r3
 8006034:	f7ff ff62 	bl	8005efc <LL_ADC_REG_IsConversionOngoing>
 8006038:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800603e:	f003 0310 	and.w	r3, r3, #16
 8006042:	2b00      	cmp	r3, #0
 8006044:	f040 80cf 	bne.w	80061e6 <HAL_ADC_Init+0x276>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	2b00      	cmp	r3, #0
 800604c:	f040 80cb 	bne.w	80061e6 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006054:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8006058:	f043 0202 	orr.w	r2, r3, #2
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4618      	mov	r0, r3
 8006066:	f7ff fefb 	bl	8005e60 <LL_ADC_IsEnabled>
 800606a:	4603      	mov	r3, r0
 800606c:	2b00      	cmp	r3, #0
 800606e:	d110      	bne.n	8006092 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006070:	4865      	ldr	r0, [pc, #404]	@ (8006208 <HAL_ADC_Init+0x298>)
 8006072:	f7ff fef5 	bl	8005e60 <LL_ADC_IsEnabled>
 8006076:	4604      	mov	r4, r0
 8006078:	4864      	ldr	r0, [pc, #400]	@ (800620c <HAL_ADC_Init+0x29c>)
 800607a:	f7ff fef1 	bl	8005e60 <LL_ADC_IsEnabled>
 800607e:	4603      	mov	r3, r0
 8006080:	4323      	orrs	r3, r4
 8006082:	2b00      	cmp	r3, #0
 8006084:	d105      	bne.n	8006092 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	4619      	mov	r1, r3
 800608c:	4860      	ldr	r0, [pc, #384]	@ (8006210 <HAL_ADC_Init+0x2a0>)
 800608e:	f7ff fccf 	bl	8005a30 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	7e5b      	ldrb	r3, [r3, #25]
 8006096:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800609c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80060a2:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80060a8:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80060b0:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80060b2:	4313      	orrs	r3, r2
 80060b4:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d106      	bne.n	80060ce <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060c4:	3b01      	subs	r3, #1
 80060c6:	045b      	lsls	r3, r3, #17
 80060c8:	69ba      	ldr	r2, [r7, #24]
 80060ca:	4313      	orrs	r3, r2
 80060cc:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d009      	beq.n	80060ea <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060da:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060e2:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80060e4:	69ba      	ldr	r2, [r7, #24]
 80060e6:	4313      	orrs	r3, r2
 80060e8:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	68da      	ldr	r2, [r3, #12]
 80060f0:	4b48      	ldr	r3, [pc, #288]	@ (8006214 <HAL_ADC_Init+0x2a4>)
 80060f2:	4013      	ands	r3, r2
 80060f4:	687a      	ldr	r2, [r7, #4]
 80060f6:	6812      	ldr	r2, [r2, #0]
 80060f8:	69b9      	ldr	r1, [r7, #24]
 80060fa:	430b      	orrs	r3, r1
 80060fc:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	691b      	ldr	r3, [r3, #16]
 8006104:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	430a      	orrs	r2, r1
 8006112:	611a      	str	r2, [r3, #16]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4618      	mov	r0, r3
 800611a:	f7ff ff16 	bl	8005f4a <LL_ADC_INJ_IsConversionOngoing>
 800611e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d13d      	bne.n	80061a2 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d13a      	bne.n	80061a2 <HAL_ADC_Init+0x232>
       )
    {
      tmp_cfgr = (
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	7e1b      	ldrb	r3, [r3, #24]
 8006130:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006138:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (
 800613a:	4313      	orrs	r3, r2
 800613c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006148:	f023 0302 	bic.w	r3, r3, #2
 800614c:	687a      	ldr	r2, [r7, #4]
 800614e:	6812      	ldr	r2, [r2, #0]
 8006150:	69b9      	ldr	r1, [r7, #24]
 8006152:	430b      	orrs	r3, r1
 8006154:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800615c:	2b01      	cmp	r3, #1
 800615e:	d118      	bne.n	8006192 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	691b      	ldr	r3, [r3, #16]
 8006166:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800616a:	f023 0304 	bic.w	r3, r3, #4
 800616e:	687a      	ldr	r2, [r7, #4]
 8006170:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8006176:	4311      	orrs	r1, r2
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800617c:	4311      	orrs	r1, r2
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8006182:	430a      	orrs	r2, r1
 8006184:	431a      	orrs	r2, r3
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f042 0201 	orr.w	r2, r2, #1
 800618e:	611a      	str	r2, [r3, #16]
 8006190:	e007      	b.n	80061a2 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	691a      	ldr	r2, [r3, #16]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f022 0201 	bic.w	r2, r2, #1
 80061a0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	691b      	ldr	r3, [r3, #16]
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d10c      	bne.n	80061c4 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061b0:	f023 010f 	bic.w	r1, r3, #15
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	69db      	ldr	r3, [r3, #28]
 80061b8:	1e5a      	subs	r2, r3, #1
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	430a      	orrs	r2, r1
 80061c0:	631a      	str	r2, [r3, #48]	@ 0x30
 80061c2:	e007      	b.n	80061d4 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f022 020f 	bic.w	r2, r2, #15
 80061d2:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061d8:	f023 0303 	bic.w	r3, r3, #3
 80061dc:	f043 0201 	orr.w	r2, r3, #1
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	659a      	str	r2, [r3, #88]	@ 0x58
 80061e4:	e007      	b.n	80061f6 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061ea:	f043 0210 	orr.w	r2, r3, #16
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80061f2:	2301      	movs	r3, #1
 80061f4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80061f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3724      	adds	r7, #36	@ 0x24
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd90      	pop	{r4, r7, pc}
 8006200:	20000074 	.word	0x20000074
 8006204:	053e2d63 	.word	0x053e2d63
 8006208:	42028000 	.word	0x42028000
 800620c:	42028100 	.word	0x42028100
 8006210:	42028300 	.word	0x42028300
 8006214:	fff04007 	.word	0xfff04007

08006218 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b086      	sub	sp, #24
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006220:	4857      	ldr	r0, [pc, #348]	@ (8006380 <HAL_ADC_Start+0x168>)
 8006222:	f7ff fd8b 	bl	8005d3c <LL_ADC_GetMultimode>
 8006226:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4618      	mov	r0, r3
 800622e:	f7ff fe65 	bl	8005efc <LL_ADC_REG_IsConversionOngoing>
 8006232:	4603      	mov	r3, r0
 8006234:	2b00      	cmp	r3, #0
 8006236:	f040 809c 	bne.w	8006372 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006240:	2b01      	cmp	r3, #1
 8006242:	d101      	bne.n	8006248 <HAL_ADC_Start+0x30>
 8006244:	2302      	movs	r3, #2
 8006246:	e097      	b.n	8006378 <HAL_ADC_Start+0x160>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2201      	movs	r2, #1
 800624c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f000 fe73 	bl	8006f3c <ADC_Enable>
 8006256:	4603      	mov	r3, r0
 8006258:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800625a:	7dfb      	ldrb	r3, [r7, #23]
 800625c:	2b00      	cmp	r3, #0
 800625e:	f040 8083 	bne.w	8006368 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006266:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800626a:	f023 0301 	bic.w	r3, r3, #1
 800626e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	659a      	str	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a42      	ldr	r2, [pc, #264]	@ (8006384 <HAL_ADC_Start+0x16c>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d002      	beq.n	8006286 <HAL_ADC_Start+0x6e>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	e000      	b.n	8006288 <HAL_ADC_Start+0x70>
 8006286:	4b40      	ldr	r3, [pc, #256]	@ (8006388 <HAL_ADC_Start+0x170>)
 8006288:	687a      	ldr	r2, [r7, #4]
 800628a:	6812      	ldr	r2, [r2, #0]
 800628c:	4293      	cmp	r3, r2
 800628e:	d002      	beq.n	8006296 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d105      	bne.n	80062a2 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800629a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80062aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062ae:	d106      	bne.n	80062be <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062b4:	f023 0206 	bic.w	r2, r3, #6
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	65da      	str	r2, [r3, #92]	@ 0x5c
 80062bc:	e002      	b.n	80062c4 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2200      	movs	r2, #0
 80062c2:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	221c      	movs	r2, #28
 80062ca:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a2a      	ldr	r2, [pc, #168]	@ (8006384 <HAL_ADC_Start+0x16c>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d002      	beq.n	80062e4 <HAL_ADC_Start+0xcc>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	e000      	b.n	80062e6 <HAL_ADC_Start+0xce>
 80062e4:	4b28      	ldr	r3, [pc, #160]	@ (8006388 <HAL_ADC_Start+0x170>)
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	6812      	ldr	r2, [r2, #0]
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d008      	beq.n	8006300 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d005      	beq.n	8006300 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	2b05      	cmp	r3, #5
 80062f8:	d002      	beq.n	8006300 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	2b09      	cmp	r3, #9
 80062fe:	d114      	bne.n	800632a <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	68db      	ldr	r3, [r3, #12]
 8006306:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800630a:	2b00      	cmp	r3, #0
 800630c:	d007      	beq.n	800631e <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006312:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8006316:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4618      	mov	r0, r3
 8006324:	f7ff fdc2 	bl	8005eac <LL_ADC_REG_StartConversion>
 8006328:	e025      	b.n	8006376 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800632e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	659a      	str	r2, [r3, #88]	@ 0x58
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a12      	ldr	r2, [pc, #72]	@ (8006384 <HAL_ADC_Start+0x16c>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d002      	beq.n	8006346 <HAL_ADC_Start+0x12e>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	e000      	b.n	8006348 <HAL_ADC_Start+0x130>
 8006346:	4b10      	ldr	r3, [pc, #64]	@ (8006388 <HAL_ADC_Start+0x170>)
 8006348:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006352:	2b00      	cmp	r3, #0
 8006354:	d00f      	beq.n	8006376 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800635a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800635e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	659a      	str	r2, [r3, #88]	@ 0x58
 8006366:	e006      	b.n	8006376 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2200      	movs	r2, #0
 800636c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8006370:	e001      	b.n	8006376 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006372:	2302      	movs	r3, #2
 8006374:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8006376:	7dfb      	ldrb	r3, [r7, #23]
}
 8006378:	4618      	mov	r0, r3
 800637a:	3718      	adds	r7, #24
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}
 8006380:	42028300 	.word	0x42028300
 8006384:	42028100 	.word	0x42028100
 8006388:	42028000 	.word	0x42028000

0800638c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b084      	sub	sp, #16
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800639a:	2b01      	cmp	r3, #1
 800639c:	d101      	bne.n	80063a2 <HAL_ADC_Stop+0x16>
 800639e:	2302      	movs	r3, #2
 80063a0:	e023      	b.n	80063ea <HAL_ADC_Stop+0x5e>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2201      	movs	r2, #1
 80063a6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80063aa:	2103      	movs	r1, #3
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f000 fd09 	bl	8006dc4 <ADC_ConversionStop>
 80063b2:	4603      	mov	r3, r0
 80063b4:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80063b6:	7bfb      	ldrb	r3, [r7, #15]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d111      	bne.n	80063e0 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f000 fe3f 	bl	8007040 <ADC_Disable>
 80063c2:	4603      	mov	r3, r0
 80063c4:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80063c6:	7bfb      	ldrb	r3, [r7, #15]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d109      	bne.n	80063e0 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063d0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80063d4:	f023 0301 	bic.w	r3, r3, #1
 80063d8:	f043 0201 	orr.w	r2, r3, #1
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2200      	movs	r2, #0
 80063e4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80063e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3710      	adds	r7, #16
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}
	...

080063f4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b088      	sub	sp, #32
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80063fe:	4866      	ldr	r0, [pc, #408]	@ (8006598 <HAL_ADC_PollForConversion+0x1a4>)
 8006400:	f7ff fc9c 	bl	8005d3c <LL_ADC_GetMultimode>
 8006404:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	695b      	ldr	r3, [r3, #20]
 800640a:	2b08      	cmp	r3, #8
 800640c:	d102      	bne.n	8006414 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800640e:	2308      	movs	r3, #8
 8006410:	61fb      	str	r3, [r7, #28]
 8006412:	e02a      	b.n	800646a <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d005      	beq.n	8006426 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	2b05      	cmp	r3, #5
 800641e:	d002      	beq.n	8006426 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	2b09      	cmp	r3, #9
 8006424:	d111      	bne.n	800644a <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	68db      	ldr	r3, [r3, #12]
 800642c:	f003 0301 	and.w	r3, r3, #1
 8006430:	2b00      	cmp	r3, #0
 8006432:	d007      	beq.n	8006444 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006438:	f043 0220 	orr.w	r2, r3, #32
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	659a      	str	r2, [r3, #88]	@ 0x58
        return HAL_ERROR;
 8006440:	2301      	movs	r3, #1
 8006442:	e0a4      	b.n	800658e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8006444:	2304      	movs	r3, #4
 8006446:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8006448:	e00f      	b.n	800646a <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800644a:	4853      	ldr	r0, [pc, #332]	@ (8006598 <HAL_ADC_PollForConversion+0x1a4>)
 800644c:	f7ff fc84 	bl	8005d58 <LL_ADC_GetMultiDMATransfer>
 8006450:	4603      	mov	r3, r0
 8006452:	2b00      	cmp	r3, #0
 8006454:	d007      	beq.n	8006466 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800645a:	f043 0220 	orr.w	r2, r3, #32
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	659a      	str	r2, [r3, #88]	@ 0x58
        return HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	e093      	b.n	800658e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8006466:	2304      	movs	r3, #4
 8006468:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800646a:	f7ff fab1 	bl	80059d0 <HAL_GetTick>
 800646e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8006470:	e021      	b.n	80064b6 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006478:	d01d      	beq.n	80064b6 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800647a:	f7ff faa9 	bl	80059d0 <HAL_GetTick>
 800647e:	4602      	mov	r2, r0
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	1ad3      	subs	r3, r2, r3
 8006484:	683a      	ldr	r2, [r7, #0]
 8006486:	429a      	cmp	r2, r3
 8006488:	d302      	bcc.n	8006490 <HAL_ADC_PollForConversion+0x9c>
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d112      	bne.n	80064b6 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	681a      	ldr	r2, [r3, #0]
 8006496:	69fb      	ldr	r3, [r7, #28]
 8006498:	4013      	ands	r3, r2
 800649a:	2b00      	cmp	r3, #0
 800649c:	d10b      	bne.n	80064b6 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064a2:	f043 0204 	orr.w	r2, r3, #4
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2200      	movs	r2, #0
 80064ae:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 80064b2:	2303      	movs	r3, #3
 80064b4:	e06b      	b.n	800658e <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	69fb      	ldr	r3, [r7, #28]
 80064be:	4013      	ands	r3, r2
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d0d6      	beq.n	8006472 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064c8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4618      	mov	r0, r3
 80064d6:	f7ff fba3 	bl	8005c20 <LL_ADC_REG_IsTriggerSourceSWStart>
 80064da:	4603      	mov	r3, r0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d01c      	beq.n	800651a <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	7e5b      	ldrb	r3, [r3, #25]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d118      	bne.n	800651a <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f003 0308 	and.w	r3, r3, #8
 80064f2:	2b08      	cmp	r3, #8
 80064f4:	d111      	bne.n	800651a <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064fa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	659a      	str	r2, [r3, #88]	@ 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006506:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800650a:	2b00      	cmp	r3, #0
 800650c:	d105      	bne.n	800651a <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006512:	f043 0201 	orr.w	r2, r3, #1
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a1f      	ldr	r2, [pc, #124]	@ (800659c <HAL_ADC_PollForConversion+0x1a8>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d002      	beq.n	800652a <HAL_ADC_PollForConversion+0x136>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	e000      	b.n	800652c <HAL_ADC_PollForConversion+0x138>
 800652a:	4b1d      	ldr	r3, [pc, #116]	@ (80065a0 <HAL_ADC_PollForConversion+0x1ac>)
 800652c:	687a      	ldr	r2, [r7, #4]
 800652e:	6812      	ldr	r2, [r2, #0]
 8006530:	4293      	cmp	r3, r2
 8006532:	d008      	beq.n	8006546 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d005      	beq.n	8006546 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	2b05      	cmp	r3, #5
 800653e:	d002      	beq.n	8006546 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	2b09      	cmp	r3, #9
 8006544:	d104      	bne.n	8006550 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	68db      	ldr	r3, [r3, #12]
 800654c:	61bb      	str	r3, [r7, #24]
 800654e:	e00c      	b.n	800656a <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a11      	ldr	r2, [pc, #68]	@ (800659c <HAL_ADC_PollForConversion+0x1a8>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d002      	beq.n	8006560 <HAL_ADC_PollForConversion+0x16c>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	e000      	b.n	8006562 <HAL_ADC_PollForConversion+0x16e>
 8006560:	4b0f      	ldr	r3, [pc, #60]	@ (80065a0 <HAL_ADC_PollForConversion+0x1ac>)
 8006562:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	68db      	ldr	r3, [r3, #12]
 8006568:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800656a:	69fb      	ldr	r3, [r7, #28]
 800656c:	2b08      	cmp	r3, #8
 800656e:	d104      	bne.n	800657a <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	2208      	movs	r2, #8
 8006576:	601a      	str	r2, [r3, #0]
 8006578:	e008      	b.n	800658c <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800657a:	69bb      	ldr	r3, [r7, #24]
 800657c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006580:	2b00      	cmp	r3, #0
 8006582:	d103      	bne.n	800658c <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	220c      	movs	r2, #12
 800658a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800658c:	2300      	movs	r3, #0
}
 800658e:	4618      	mov	r0, r3
 8006590:	3720      	adds	r7, #32
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
 8006596:	bf00      	nop
 8006598:	42028300 	.word	0x42028300
 800659c:	42028100 	.word	0x42028100
 80065a0:	42028000 	.word	0x42028000

080065a4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b083      	sub	sp, #12
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	370c      	adds	r7, #12
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr
	...

080065c0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b0b6      	sub	sp, #216	@ 0xd8
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80065ca:	2300      	movs	r3, #0
 80065cc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80065d0:	2300      	movs	r3, #0
 80065d2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d101      	bne.n	80065e2 <HAL_ADC_ConfigChannel+0x22>
 80065de:	2302      	movs	r3, #2
 80065e0:	e3d8      	b.n	8006d94 <HAL_ADC_ConfigChannel+0x7d4>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2201      	movs	r2, #1
 80065e6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4618      	mov	r0, r3
 80065f0:	f7ff fc84 	bl	8005efc <LL_ADC_REG_IsConversionOngoing>
 80065f4:	4603      	mov	r3, r0
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	f040 83bd 	bne.w	8006d76 <HAL_ADC_ConfigChannel+0x7b6>
  {
    if (pConfig->Channel == ADC_CHANNEL_0)
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	2b01      	cmp	r3, #1
 8006602:	d104      	bne.n	800660e <HAL_ADC_ConfigChannel+0x4e>
    {
      LL_ADC_EnableChannel0_GPIO(hadc->Instance);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4618      	mov	r0, r3
 800660a:	f7ff fa57 	bl	8005abc <LL_ADC_EnableChannel0_GPIO>
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6818      	ldr	r0, [r3, #0]
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	6859      	ldr	r1, [r3, #4]
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	461a      	mov	r2, r3
 800661c:	f7ff fb13 	bl	8005c46 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4618      	mov	r0, r3
 8006626:	f7ff fc69 	bl	8005efc <LL_ADC_REG_IsConversionOngoing>
 800662a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4618      	mov	r0, r3
 8006634:	f7ff fc89 	bl	8005f4a <LL_ADC_INJ_IsConversionOngoing>
 8006638:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800663c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006640:	2b00      	cmp	r3, #0
 8006642:	f040 81d9 	bne.w	80069f8 <HAL_ADC_ConfigChannel+0x438>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006646:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800664a:	2b00      	cmp	r3, #0
 800664c:	f040 81d4 	bne.w	80069f8 <HAL_ADC_ConfigChannel+0x438>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006658:	d10f      	bne.n	800667a <HAL_ADC_ConfigChannel+0xba>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6818      	ldr	r0, [r3, #0]
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	2200      	movs	r2, #0
 8006664:	4619      	mov	r1, r3
 8006666:	f7ff fb1a 	bl	8005c9e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8006672:	4618      	mov	r0, r3
 8006674:	f7ff fac1 	bl	8005bfa <LL_ADC_SetSamplingTimeCommonConfig>
 8006678:	e00e      	b.n	8006698 <HAL_ADC_ConfigChannel+0xd8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6818      	ldr	r0, [r3, #0]
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	6819      	ldr	r1, [r3, #0]
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	461a      	mov	r2, r3
 8006688:	f7ff fb09 	bl	8005c9e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	2100      	movs	r1, #0
 8006692:	4618      	mov	r0, r3
 8006694:	f7ff fab1 	bl	8005bfa <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	695a      	ldr	r2, [r3, #20]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	68db      	ldr	r3, [r3, #12]
 80066a2:	08db      	lsrs	r3, r3, #3
 80066a4:	f003 0303 	and.w	r3, r3, #3
 80066a8:	005b      	lsls	r3, r3, #1
 80066aa:	fa02 f303 	lsl.w	r3, r2, r3
 80066ae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	691b      	ldr	r3, [r3, #16]
 80066b6:	2b04      	cmp	r3, #4
 80066b8:	d022      	beq.n	8006700 <HAL_ADC_ConfigChannel+0x140>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6818      	ldr	r0, [r3, #0]
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	6919      	ldr	r1, [r3, #16]
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	681a      	ldr	r2, [r3, #0]
 80066c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80066ca:	f7ff fa0b 	bl	8005ae4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6818      	ldr	r0, [r3, #0]
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	6919      	ldr	r1, [r3, #16]
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	699b      	ldr	r3, [r3, #24]
 80066da:	461a      	mov	r2, r3
 80066dc:	f7ff fa57 	bl	8005b8e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6818      	ldr	r0, [r3, #0]
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d102      	bne.n	80066f6 <HAL_ADC_ConfigChannel+0x136>
 80066f0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80066f4:	e000      	b.n	80066f8 <HAL_ADC_ConfigChannel+0x138>
 80066f6:	2300      	movs	r3, #0
 80066f8:	461a      	mov	r2, r3
 80066fa:	f7ff fa63 	bl	8005bc4 <LL_ADC_SetOffsetSaturation>
 80066fe:	e17b      	b.n	80069f8 <HAL_ADC_ConfigChannel+0x438>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	2100      	movs	r1, #0
 8006706:	4618      	mov	r0, r3
 8006708:	f7ff fa10 	bl	8005b2c <LL_ADC_GetOffsetChannel>
 800670c:	4603      	mov	r3, r0
 800670e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006712:	2b00      	cmp	r3, #0
 8006714:	d10a      	bne.n	800672c <HAL_ADC_ConfigChannel+0x16c>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	2100      	movs	r1, #0
 800671c:	4618      	mov	r0, r3
 800671e:	f7ff fa05 	bl	8005b2c <LL_ADC_GetOffsetChannel>
 8006722:	4603      	mov	r3, r0
 8006724:	0e9b      	lsrs	r3, r3, #26
 8006726:	f003 021f 	and.w	r2, r3, #31
 800672a:	e01e      	b.n	800676a <HAL_ADC_ConfigChannel+0x1aa>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	2100      	movs	r1, #0
 8006732:	4618      	mov	r0, r3
 8006734:	f7ff f9fa 	bl	8005b2c <LL_ADC_GetOffsetChannel>
 8006738:	4603      	mov	r3, r0
 800673a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800673e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006742:	fa93 f3a3 	rbit	r3, r3
 8006746:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  return result;
 800674a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800674e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  if (value == 0U)
 8006752:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006756:	2b00      	cmp	r3, #0
 8006758:	d101      	bne.n	800675e <HAL_ADC_ConfigChannel+0x19e>
    return 32U;
 800675a:	2320      	movs	r3, #32
 800675c:	e004      	b.n	8006768 <HAL_ADC_ConfigChannel+0x1a8>
  return __builtin_clz(value);
 800675e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006762:	fab3 f383 	clz	r3, r3
 8006766:	b2db      	uxtb	r3, r3
 8006768:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006772:	2b00      	cmp	r3, #0
 8006774:	d105      	bne.n	8006782 <HAL_ADC_ConfigChannel+0x1c2>
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	0e9b      	lsrs	r3, r3, #26
 800677c:	f003 031f 	and.w	r3, r3, #31
 8006780:	e018      	b.n	80067b4 <HAL_ADC_ConfigChannel+0x1f4>
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800678a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800678e:	fa93 f3a3 	rbit	r3, r3
 8006792:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8006796:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800679a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800679e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d101      	bne.n	80067aa <HAL_ADC_ConfigChannel+0x1ea>
    return 32U;
 80067a6:	2320      	movs	r3, #32
 80067a8:	e004      	b.n	80067b4 <HAL_ADC_ConfigChannel+0x1f4>
  return __builtin_clz(value);
 80067aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80067ae:	fab3 f383 	clz	r3, r3
 80067b2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80067b4:	429a      	cmp	r2, r3
 80067b6:	d106      	bne.n	80067c6 <HAL_ADC_ConfigChannel+0x206>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	2200      	movs	r2, #0
 80067be:	2100      	movs	r1, #0
 80067c0:	4618      	mov	r0, r3
 80067c2:	f7ff f9c9 	bl	8005b58 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	2101      	movs	r1, #1
 80067cc:	4618      	mov	r0, r3
 80067ce:	f7ff f9ad 	bl	8005b2c <LL_ADC_GetOffsetChannel>
 80067d2:	4603      	mov	r3, r0
 80067d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d10a      	bne.n	80067f2 <HAL_ADC_ConfigChannel+0x232>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	2101      	movs	r1, #1
 80067e2:	4618      	mov	r0, r3
 80067e4:	f7ff f9a2 	bl	8005b2c <LL_ADC_GetOffsetChannel>
 80067e8:	4603      	mov	r3, r0
 80067ea:	0e9b      	lsrs	r3, r3, #26
 80067ec:	f003 021f 	and.w	r2, r3, #31
 80067f0:	e01e      	b.n	8006830 <HAL_ADC_ConfigChannel+0x270>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	2101      	movs	r1, #1
 80067f8:	4618      	mov	r0, r3
 80067fa:	f7ff f997 	bl	8005b2c <LL_ADC_GetOffsetChannel>
 80067fe:	4603      	mov	r3, r0
 8006800:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006804:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006808:	fa93 f3a3 	rbit	r3, r3
 800680c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8006810:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006814:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8006818:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800681c:	2b00      	cmp	r3, #0
 800681e:	d101      	bne.n	8006824 <HAL_ADC_ConfigChannel+0x264>
    return 32U;
 8006820:	2320      	movs	r3, #32
 8006822:	e004      	b.n	800682e <HAL_ADC_ConfigChannel+0x26e>
  return __builtin_clz(value);
 8006824:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006828:	fab3 f383 	clz	r3, r3
 800682c:	b2db      	uxtb	r3, r3
 800682e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006838:	2b00      	cmp	r3, #0
 800683a:	d105      	bne.n	8006848 <HAL_ADC_ConfigChannel+0x288>
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	0e9b      	lsrs	r3, r3, #26
 8006842:	f003 031f 	and.w	r3, r3, #31
 8006846:	e018      	b.n	800687a <HAL_ADC_ConfigChannel+0x2ba>
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006850:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006854:	fa93 f3a3 	rbit	r3, r3
 8006858:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800685c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006860:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8006864:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006868:	2b00      	cmp	r3, #0
 800686a:	d101      	bne.n	8006870 <HAL_ADC_ConfigChannel+0x2b0>
    return 32U;
 800686c:	2320      	movs	r3, #32
 800686e:	e004      	b.n	800687a <HAL_ADC_ConfigChannel+0x2ba>
  return __builtin_clz(value);
 8006870:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006874:	fab3 f383 	clz	r3, r3
 8006878:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800687a:	429a      	cmp	r2, r3
 800687c:	d106      	bne.n	800688c <HAL_ADC_ConfigChannel+0x2cc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	2200      	movs	r2, #0
 8006884:	2101      	movs	r1, #1
 8006886:	4618      	mov	r0, r3
 8006888:	f7ff f966 	bl	8005b58 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	2102      	movs	r1, #2
 8006892:	4618      	mov	r0, r3
 8006894:	f7ff f94a 	bl	8005b2c <LL_ADC_GetOffsetChannel>
 8006898:	4603      	mov	r3, r0
 800689a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d10a      	bne.n	80068b8 <HAL_ADC_ConfigChannel+0x2f8>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	2102      	movs	r1, #2
 80068a8:	4618      	mov	r0, r3
 80068aa:	f7ff f93f 	bl	8005b2c <LL_ADC_GetOffsetChannel>
 80068ae:	4603      	mov	r3, r0
 80068b0:	0e9b      	lsrs	r3, r3, #26
 80068b2:	f003 021f 	and.w	r2, r3, #31
 80068b6:	e01e      	b.n	80068f6 <HAL_ADC_ConfigChannel+0x336>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	2102      	movs	r1, #2
 80068be:	4618      	mov	r0, r3
 80068c0:	f7ff f934 	bl	8005b2c <LL_ADC_GetOffsetChannel>
 80068c4:	4603      	mov	r3, r0
 80068c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80068ce:	fa93 f3a3 	rbit	r3, r3
 80068d2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80068d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80068da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80068de:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d101      	bne.n	80068ea <HAL_ADC_ConfigChannel+0x32a>
    return 32U;
 80068e6:	2320      	movs	r3, #32
 80068e8:	e004      	b.n	80068f4 <HAL_ADC_ConfigChannel+0x334>
  return __builtin_clz(value);
 80068ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80068ee:	fab3 f383 	clz	r3, r3
 80068f2:	b2db      	uxtb	r3, r3
 80068f4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d105      	bne.n	800690e <HAL_ADC_ConfigChannel+0x34e>
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	0e9b      	lsrs	r3, r3, #26
 8006908:	f003 031f 	and.w	r3, r3, #31
 800690c:	e016      	b.n	800693c <HAL_ADC_ConfigChannel+0x37c>
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006916:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800691a:	fa93 f3a3 	rbit	r3, r3
 800691e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8006920:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006922:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8006926:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800692a:	2b00      	cmp	r3, #0
 800692c:	d101      	bne.n	8006932 <HAL_ADC_ConfigChannel+0x372>
    return 32U;
 800692e:	2320      	movs	r3, #32
 8006930:	e004      	b.n	800693c <HAL_ADC_ConfigChannel+0x37c>
  return __builtin_clz(value);
 8006932:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006936:	fab3 f383 	clz	r3, r3
 800693a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800693c:	429a      	cmp	r2, r3
 800693e:	d106      	bne.n	800694e <HAL_ADC_ConfigChannel+0x38e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	2200      	movs	r2, #0
 8006946:	2102      	movs	r1, #2
 8006948:	4618      	mov	r0, r3
 800694a:	f7ff f905 	bl	8005b58 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	2103      	movs	r1, #3
 8006954:	4618      	mov	r0, r3
 8006956:	f7ff f8e9 	bl	8005b2c <LL_ADC_GetOffsetChannel>
 800695a:	4603      	mov	r3, r0
 800695c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006960:	2b00      	cmp	r3, #0
 8006962:	d10a      	bne.n	800697a <HAL_ADC_ConfigChannel+0x3ba>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	2103      	movs	r1, #3
 800696a:	4618      	mov	r0, r3
 800696c:	f7ff f8de 	bl	8005b2c <LL_ADC_GetOffsetChannel>
 8006970:	4603      	mov	r3, r0
 8006972:	0e9b      	lsrs	r3, r3, #26
 8006974:	f003 021f 	and.w	r2, r3, #31
 8006978:	e017      	b.n	80069aa <HAL_ADC_ConfigChannel+0x3ea>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	2103      	movs	r1, #3
 8006980:	4618      	mov	r0, r3
 8006982:	f7ff f8d3 	bl	8005b2c <LL_ADC_GetOffsetChannel>
 8006986:	4603      	mov	r3, r0
 8006988:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800698a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800698c:	fa93 f3a3 	rbit	r3, r3
 8006990:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8006992:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006994:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8006996:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006998:	2b00      	cmp	r3, #0
 800699a:	d101      	bne.n	80069a0 <HAL_ADC_ConfigChannel+0x3e0>
    return 32U;
 800699c:	2320      	movs	r3, #32
 800699e:	e003      	b.n	80069a8 <HAL_ADC_ConfigChannel+0x3e8>
  return __builtin_clz(value);
 80069a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80069a2:	fab3 f383 	clz	r3, r3
 80069a6:	b2db      	uxtb	r3, r3
 80069a8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d105      	bne.n	80069c2 <HAL_ADC_ConfigChannel+0x402>
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	0e9b      	lsrs	r3, r3, #26
 80069bc:	f003 031f 	and.w	r3, r3, #31
 80069c0:	e011      	b.n	80069e6 <HAL_ADC_ConfigChannel+0x426>
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80069ca:	fa93 f3a3 	rbit	r3, r3
 80069ce:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80069d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80069d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80069d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d101      	bne.n	80069de <HAL_ADC_ConfigChannel+0x41e>
    return 32U;
 80069da:	2320      	movs	r3, #32
 80069dc:	e003      	b.n	80069e6 <HAL_ADC_ConfigChannel+0x426>
  return __builtin_clz(value);
 80069de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80069e0:	fab3 f383 	clz	r3, r3
 80069e4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80069e6:	429a      	cmp	r2, r3
 80069e8:	d106      	bne.n	80069f8 <HAL_ADC_ConfigChannel+0x438>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	2200      	movs	r2, #0
 80069f0:	2103      	movs	r1, #3
 80069f2:	4618      	mov	r0, r3
 80069f4:	f7ff f8b0 	bl	8005b58 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4618      	mov	r0, r3
 80069fe:	f7ff fa2f 	bl	8005e60 <LL_ADC_IsEnabled>
 8006a02:	4603      	mov	r3, r0
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	f040 813f 	bne.w	8006c88 <HAL_ADC_ConfigChannel+0x6c8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6818      	ldr	r0, [r3, #0]
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	6819      	ldr	r1, [r3, #0]
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	68db      	ldr	r3, [r3, #12]
 8006a16:	461a      	mov	r2, r3
 8006a18:	f7ff f96c 	bl	8005cf4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	68db      	ldr	r3, [r3, #12]
 8006a20:	4a8e      	ldr	r2, [pc, #568]	@ (8006c5c <HAL_ADC_ConfigChannel+0x69c>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	f040 8130 	bne.w	8006c88 <HAL_ADC_ConfigChannel+0x6c8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d10b      	bne.n	8006a50 <HAL_ADC_ConfigChannel+0x490>
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	0e9b      	lsrs	r3, r3, #26
 8006a3e:	3301      	adds	r3, #1
 8006a40:	f003 031f 	and.w	r3, r3, #31
 8006a44:	2b09      	cmp	r3, #9
 8006a46:	bf94      	ite	ls
 8006a48:	2301      	movls	r3, #1
 8006a4a:	2300      	movhi	r3, #0
 8006a4c:	b2db      	uxtb	r3, r3
 8006a4e:	e019      	b.n	8006a84 <HAL_ADC_ConfigChannel+0x4c4>
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a56:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006a58:	fa93 f3a3 	rbit	r3, r3
 8006a5c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8006a5e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006a60:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8006a62:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d101      	bne.n	8006a6c <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8006a68:	2320      	movs	r3, #32
 8006a6a:	e003      	b.n	8006a74 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8006a6c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006a6e:	fab3 f383 	clz	r3, r3
 8006a72:	b2db      	uxtb	r3, r3
 8006a74:	3301      	adds	r3, #1
 8006a76:	f003 031f 	and.w	r3, r3, #31
 8006a7a:	2b09      	cmp	r3, #9
 8006a7c:	bf94      	ite	ls
 8006a7e:	2301      	movls	r3, #1
 8006a80:	2300      	movhi	r3, #0
 8006a82:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d079      	beq.n	8006b7c <HAL_ADC_ConfigChannel+0x5bc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d107      	bne.n	8006aa4 <HAL_ADC_ConfigChannel+0x4e4>
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	0e9b      	lsrs	r3, r3, #26
 8006a9a:	3301      	adds	r3, #1
 8006a9c:	069b      	lsls	r3, r3, #26
 8006a9e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006aa2:	e015      	b.n	8006ad0 <HAL_ADC_ConfigChannel+0x510>
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006aaa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006aac:	fa93 f3a3 	rbit	r3, r3
 8006ab0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8006ab2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ab4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8006ab6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d101      	bne.n	8006ac0 <HAL_ADC_ConfigChannel+0x500>
    return 32U;
 8006abc:	2320      	movs	r3, #32
 8006abe:	e003      	b.n	8006ac8 <HAL_ADC_ConfigChannel+0x508>
  return __builtin_clz(value);
 8006ac0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ac2:	fab3 f383 	clz	r3, r3
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	3301      	adds	r3, #1
 8006aca:	069b      	lsls	r3, r3, #26
 8006acc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d109      	bne.n	8006af0 <HAL_ADC_ConfigChannel+0x530>
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	0e9b      	lsrs	r3, r3, #26
 8006ae2:	3301      	adds	r3, #1
 8006ae4:	f003 031f 	and.w	r3, r3, #31
 8006ae8:	2101      	movs	r1, #1
 8006aea:	fa01 f303 	lsl.w	r3, r1, r3
 8006aee:	e017      	b.n	8006b20 <HAL_ADC_ConfigChannel+0x560>
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006af6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006af8:	fa93 f3a3 	rbit	r3, r3
 8006afc:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8006afe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b00:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8006b02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d101      	bne.n	8006b0c <HAL_ADC_ConfigChannel+0x54c>
    return 32U;
 8006b08:	2320      	movs	r3, #32
 8006b0a:	e003      	b.n	8006b14 <HAL_ADC_ConfigChannel+0x554>
  return __builtin_clz(value);
 8006b0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b0e:	fab3 f383 	clz	r3, r3
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	3301      	adds	r3, #1
 8006b16:	f003 031f 	and.w	r3, r3, #31
 8006b1a:	2101      	movs	r1, #1
 8006b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8006b20:	ea42 0103 	orr.w	r1, r2, r3
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d10a      	bne.n	8006b46 <HAL_ADC_ConfigChannel+0x586>
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	0e9b      	lsrs	r3, r3, #26
 8006b36:	3301      	adds	r3, #1
 8006b38:	f003 021f 	and.w	r2, r3, #31
 8006b3c:	4613      	mov	r3, r2
 8006b3e:	005b      	lsls	r3, r3, #1
 8006b40:	4413      	add	r3, r2
 8006b42:	051b      	lsls	r3, r3, #20
 8006b44:	e018      	b.n	8006b78 <HAL_ADC_ConfigChannel+0x5b8>
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b4e:	fa93 f3a3 	rbit	r3, r3
 8006b52:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8006b54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8006b58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d101      	bne.n	8006b62 <HAL_ADC_ConfigChannel+0x5a2>
    return 32U;
 8006b5e:	2320      	movs	r3, #32
 8006b60:	e003      	b.n	8006b6a <HAL_ADC_ConfigChannel+0x5aa>
  return __builtin_clz(value);
 8006b62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b64:	fab3 f383 	clz	r3, r3
 8006b68:	b2db      	uxtb	r3, r3
 8006b6a:	3301      	adds	r3, #1
 8006b6c:	f003 021f 	and.w	r2, r3, #31
 8006b70:	4613      	mov	r3, r2
 8006b72:	005b      	lsls	r3, r3, #1
 8006b74:	4413      	add	r3, r2
 8006b76:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006b78:	430b      	orrs	r3, r1
 8006b7a:	e080      	b.n	8006c7e <HAL_ADC_ConfigChannel+0x6be>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d107      	bne.n	8006b98 <HAL_ADC_ConfigChannel+0x5d8>
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	0e9b      	lsrs	r3, r3, #26
 8006b8e:	3301      	adds	r3, #1
 8006b90:	069b      	lsls	r3, r3, #26
 8006b92:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006b96:	e015      	b.n	8006bc4 <HAL_ADC_ConfigChannel+0x604>
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ba0:	fa93 f3a3 	rbit	r3, r3
 8006ba4:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8006ba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ba8:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8006baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d101      	bne.n	8006bb4 <HAL_ADC_ConfigChannel+0x5f4>
    return 32U;
 8006bb0:	2320      	movs	r3, #32
 8006bb2:	e003      	b.n	8006bbc <HAL_ADC_ConfigChannel+0x5fc>
  return __builtin_clz(value);
 8006bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bb6:	fab3 f383 	clz	r3, r3
 8006bba:	b2db      	uxtb	r3, r3
 8006bbc:	3301      	adds	r3, #1
 8006bbe:	069b      	lsls	r3, r3, #26
 8006bc0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d109      	bne.n	8006be4 <HAL_ADC_ConfigChannel+0x624>
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	0e9b      	lsrs	r3, r3, #26
 8006bd6:	3301      	adds	r3, #1
 8006bd8:	f003 031f 	and.w	r3, r3, #31
 8006bdc:	2101      	movs	r1, #1
 8006bde:	fa01 f303 	lsl.w	r3, r1, r3
 8006be2:	e017      	b.n	8006c14 <HAL_ADC_ConfigChannel+0x654>
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bea:	6a3b      	ldr	r3, [r7, #32]
 8006bec:	fa93 f3a3 	rbit	r3, r3
 8006bf0:	61fb      	str	r3, [r7, #28]
  return result;
 8006bf2:	69fb      	ldr	r3, [r7, #28]
 8006bf4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8006bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d101      	bne.n	8006c00 <HAL_ADC_ConfigChannel+0x640>
    return 32U;
 8006bfc:	2320      	movs	r3, #32
 8006bfe:	e003      	b.n	8006c08 <HAL_ADC_ConfigChannel+0x648>
  return __builtin_clz(value);
 8006c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c02:	fab3 f383 	clz	r3, r3
 8006c06:	b2db      	uxtb	r3, r3
 8006c08:	3301      	adds	r3, #1
 8006c0a:	f003 031f 	and.w	r3, r3, #31
 8006c0e:	2101      	movs	r1, #1
 8006c10:	fa01 f303 	lsl.w	r3, r1, r3
 8006c14:	ea42 0103 	orr.w	r1, r2, r3
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d10d      	bne.n	8006c40 <HAL_ADC_ConfigChannel+0x680>
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	0e9b      	lsrs	r3, r3, #26
 8006c2a:	3301      	adds	r3, #1
 8006c2c:	f003 021f 	and.w	r2, r3, #31
 8006c30:	4613      	mov	r3, r2
 8006c32:	005b      	lsls	r3, r3, #1
 8006c34:	4413      	add	r3, r2
 8006c36:	3b1e      	subs	r3, #30
 8006c38:	051b      	lsls	r3, r3, #20
 8006c3a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006c3e:	e01d      	b.n	8006c7c <HAL_ADC_ConfigChannel+0x6bc>
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	fa93 f3a3 	rbit	r3, r3
 8006c4c:	613b      	str	r3, [r7, #16]
  return result;
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006c52:	69bb      	ldr	r3, [r7, #24]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d103      	bne.n	8006c60 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8006c58:	2320      	movs	r3, #32
 8006c5a:	e005      	b.n	8006c68 <HAL_ADC_ConfigChannel+0x6a8>
 8006c5c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8006c60:	69bb      	ldr	r3, [r7, #24]
 8006c62:	fab3 f383 	clz	r3, r3
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	3301      	adds	r3, #1
 8006c6a:	f003 021f 	and.w	r2, r3, #31
 8006c6e:	4613      	mov	r3, r2
 8006c70:	005b      	lsls	r3, r3, #1
 8006c72:	4413      	add	r3, r2
 8006c74:	3b1e      	subs	r3, #30
 8006c76:	051b      	lsls	r3, r3, #20
 8006c78:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006c7c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8006c7e:	683a      	ldr	r2, [r7, #0]
 8006c80:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006c82:	4619      	mov	r1, r3
 8006c84:	f7ff f80b 	bl	8005c9e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	681a      	ldr	r2, [r3, #0]
 8006c8c:	4b43      	ldr	r3, [pc, #268]	@ (8006d9c <HAL_ADC_ConfigChannel+0x7dc>)
 8006c8e:	4013      	ands	r3, r2
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d079      	beq.n	8006d88 <HAL_ADC_ConfigChannel+0x7c8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006c94:	4842      	ldr	r0, [pc, #264]	@ (8006da0 <HAL_ADC_ConfigChannel+0x7e0>)
 8006c96:	f7fe fef1 	bl	8005a7c <LL_ADC_GetCommonPathInternalCh>
 8006c9a:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a40      	ldr	r2, [pc, #256]	@ (8006da4 <HAL_ADC_ConfigChannel+0x7e4>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d124      	bne.n	8006cf2 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006ca8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006cac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d11e      	bne.n	8006cf2 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a3b      	ldr	r2, [pc, #236]	@ (8006da8 <HAL_ADC_ConfigChannel+0x7e8>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d164      	bne.n	8006d88 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006cbe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006cc2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006cc6:	4619      	mov	r1, r3
 8006cc8:	4835      	ldr	r0, [pc, #212]	@ (8006da0 <HAL_ADC_ConfigChannel+0x7e0>)
 8006cca:	f7fe fec4 	bl	8005a56 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006cce:	4b37      	ldr	r3, [pc, #220]	@ (8006dac <HAL_ADC_ConfigChannel+0x7ec>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	099b      	lsrs	r3, r3, #6
 8006cd4:	4a36      	ldr	r2, [pc, #216]	@ (8006db0 <HAL_ADC_ConfigChannel+0x7f0>)
 8006cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8006cda:	099b      	lsrs	r3, r3, #6
 8006cdc:	3301      	adds	r3, #1
 8006cde:	005b      	lsls	r3, r3, #1
 8006ce0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006ce2:	e002      	b.n	8006cea <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	3b01      	subs	r3, #1
 8006ce8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d1f9      	bne.n	8006ce4 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006cf0:	e04a      	b.n	8006d88 <HAL_ADC_ConfigChannel+0x7c8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a2f      	ldr	r2, [pc, #188]	@ (8006db4 <HAL_ADC_ConfigChannel+0x7f4>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d113      	bne.n	8006d24 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006cfc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006d00:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d10d      	bne.n	8006d24 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a2a      	ldr	r2, [pc, #168]	@ (8006db8 <HAL_ADC_ConfigChannel+0x7f8>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d13a      	bne.n	8006d88 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006d12:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006d16:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006d1a:	4619      	mov	r1, r3
 8006d1c:	4820      	ldr	r0, [pc, #128]	@ (8006da0 <HAL_ADC_ConfigChannel+0x7e0>)
 8006d1e:	f7fe fe9a 	bl	8005a56 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006d22:	e031      	b.n	8006d88 <HAL_ADC_ConfigChannel+0x7c8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a24      	ldr	r2, [pc, #144]	@ (8006dbc <HAL_ADC_ConfigChannel+0x7fc>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d113      	bne.n	8006d56 <HAL_ADC_ConfigChannel+0x796>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006d2e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006d32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d10d      	bne.n	8006d56 <HAL_ADC_ConfigChannel+0x796>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a1a      	ldr	r2, [pc, #104]	@ (8006da8 <HAL_ADC_ConfigChannel+0x7e8>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d121      	bne.n	8006d88 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006d44:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006d48:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006d4c:	4619      	mov	r1, r3
 8006d4e:	4814      	ldr	r0, [pc, #80]	@ (8006da0 <HAL_ADC_ConfigChannel+0x7e0>)
 8006d50:	f7fe fe81 	bl	8005a56 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_VREFINT_INSTANCE(hadc))
 8006d54:	e018      	b.n	8006d88 <HAL_ADC_ConfigChannel+0x7c8>
                                         LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
        }
      }
      else if (pConfig->Channel == ADC_CHANNEL_VDDCORE)
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a19      	ldr	r2, [pc, #100]	@ (8006dc0 <HAL_ADC_ConfigChannel+0x800>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d113      	bne.n	8006d88 <HAL_ADC_ConfigChannel+0x7c8>
      {
        if (ADC_VDDCORE_INSTANCE(hadc))
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a10      	ldr	r2, [pc, #64]	@ (8006da8 <HAL_ADC_ConfigChannel+0x7e8>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d00e      	beq.n	8006d88 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_EnableChannelVDDcore(hadc->Instance);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f7fe fe92 	bl	8005a98 <LL_ADC_EnableChannelVDDcore>
 8006d74:	e008      	b.n	8006d88 <HAL_ADC_ConfigChannel+0x7c8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d7a:	f043 0220 	orr.w	r2, r3, #32
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8006d82:	2301      	movs	r3, #1
 8006d84:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8006d90:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	37d8      	adds	r7, #216	@ 0xd8
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}
 8006d9c:	80080000 	.word	0x80080000
 8006da0:	42028300 	.word	0x42028300
 8006da4:	c3210000 	.word	0xc3210000
 8006da8:	42028000 	.word	0x42028000
 8006dac:	20000074 	.word	0x20000074
 8006db0:	053e2d63 	.word	0x053e2d63
 8006db4:	43290000 	.word	0x43290000
 8006db8:	42028100 	.word	0x42028100
 8006dbc:	c7520000 	.word	0xc7520000
 8006dc0:	475a0000 	.word	0x475a0000

08006dc4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b088      	sub	sp, #32
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f7ff f88e 	bl	8005efc <LL_ADC_REG_IsConversionOngoing>
 8006de0:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4618      	mov	r0, r3
 8006de8:	f7ff f8af 	bl	8005f4a <LL_ADC_INJ_IsConversionOngoing>
 8006dec:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d103      	bne.n	8006dfc <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	f000 8098 	beq.w	8006f2c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	68db      	ldr	r3, [r3, #12]
 8006e02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d02a      	beq.n	8006e60 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	7e5b      	ldrb	r3, [r3, #25]
 8006e0e:	2b01      	cmp	r3, #1
 8006e10:	d126      	bne.n	8006e60 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	7e1b      	ldrb	r3, [r3, #24]
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d122      	bne.n	8006e60 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8006e1e:	e014      	b.n	8006e4a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8006e20:	69fb      	ldr	r3, [r7, #28]
 8006e22:	4a45      	ldr	r2, [pc, #276]	@ (8006f38 <ADC_ConversionStop+0x174>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d90d      	bls.n	8006e44 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e2c:	f043 0210 	orr.w	r2, r3, #16
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e38:	f043 0201 	orr.w	r2, r3, #1
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8006e40:	2301      	movs	r3, #1
 8006e42:	e074      	b.n	8006f2e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8006e44:	69fb      	ldr	r3, [r7, #28]
 8006e46:	3301      	adds	r3, #1
 8006e48:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e54:	2b40      	cmp	r3, #64	@ 0x40
 8006e56:	d1e3      	bne.n	8006e20 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	2240      	movs	r2, #64	@ 0x40
 8006e5e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8006e60:	69bb      	ldr	r3, [r7, #24]
 8006e62:	2b02      	cmp	r3, #2
 8006e64:	d014      	beq.n	8006e90 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f7ff f846 	bl	8005efc <LL_ADC_REG_IsConversionOngoing>
 8006e70:	4603      	mov	r3, r0
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d00c      	beq.n	8006e90 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f7ff f803 	bl	8005e86 <LL_ADC_IsDisableOngoing>
 8006e80:	4603      	mov	r3, r0
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d104      	bne.n	8006e90 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f7ff f822 	bl	8005ed4 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8006e90:	69bb      	ldr	r3, [r7, #24]
 8006e92:	2b01      	cmp	r3, #1
 8006e94:	d014      	beq.n	8006ec0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f7ff f855 	bl	8005f4a <LL_ADC_INJ_IsConversionOngoing>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d00c      	beq.n	8006ec0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f7fe ffeb 	bl	8005e86 <LL_ADC_IsDisableOngoing>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d104      	bne.n	8006ec0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f7ff f831 	bl	8005f22 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8006ec0:	69bb      	ldr	r3, [r7, #24]
 8006ec2:	2b02      	cmp	r3, #2
 8006ec4:	d005      	beq.n	8006ed2 <ADC_ConversionStop+0x10e>
 8006ec6:	69bb      	ldr	r3, [r7, #24]
 8006ec8:	2b03      	cmp	r3, #3
 8006eca:	d105      	bne.n	8006ed8 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8006ecc:	230c      	movs	r3, #12
 8006ece:	617b      	str	r3, [r7, #20]
        break;
 8006ed0:	e005      	b.n	8006ede <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8006ed2:	2308      	movs	r3, #8
 8006ed4:	617b      	str	r3, [r7, #20]
        break;
 8006ed6:	e002      	b.n	8006ede <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8006ed8:	2304      	movs	r3, #4
 8006eda:	617b      	str	r3, [r7, #20]
        break;
 8006edc:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8006ede:	f7fe fd77 	bl	80059d0 <HAL_GetTick>
 8006ee2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8006ee4:	e01b      	b.n	8006f1e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8006ee6:	f7fe fd73 	bl	80059d0 <HAL_GetTick>
 8006eea:	4602      	mov	r2, r0
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	1ad3      	subs	r3, r2, r3
 8006ef0:	2b05      	cmp	r3, #5
 8006ef2:	d914      	bls.n	8006f1e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	689a      	ldr	r2, [r3, #8]
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	4013      	ands	r3, r2
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d00d      	beq.n	8006f1e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f06:	f043 0210 	orr.w	r2, r3, #16
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f12:	f043 0201 	orr.w	r2, r3, #1
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	e007      	b.n	8006f2e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	689a      	ldr	r2, [r3, #8]
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	4013      	ands	r3, r2
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d1dc      	bne.n	8006ee6 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8006f2c:	2300      	movs	r3, #0
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	3720      	adds	r7, #32
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}
 8006f36:	bf00      	nop
 8006f38:	a33fffff 	.word	0xa33fffff

08006f3c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b084      	sub	sp, #16
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8006f44:	2300      	movs	r3, #0
 8006f46:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f7fe ff87 	bl	8005e60 <LL_ADC_IsEnabled>
 8006f52:	4603      	mov	r3, r0
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d166      	bne.n	8007026 <ADC_Enable+0xea>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	689a      	ldr	r2, [r3, #8]
 8006f5e:	4b34      	ldr	r3, [pc, #208]	@ (8007030 <ADC_Enable+0xf4>)
 8006f60:	4013      	ands	r3, r2
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d00d      	beq.n	8006f82 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f6a:	f043 0210 	orr.w	r2, r3, #16
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f76:	f043 0201 	orr.w	r2, r3, #1
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	e052      	b.n	8007028 <ADC_Enable+0xec>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4618      	mov	r0, r3
 8006f88:	f7fe ff42 	bl	8005e10 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8006f8c:	4829      	ldr	r0, [pc, #164]	@ (8007034 <ADC_Enable+0xf8>)
 8006f8e:	f7fe fd75 	bl	8005a7c <LL_ADC_GetCommonPathInternalCh>
 8006f92:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8006f94:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d010      	beq.n	8006fbe <ADC_Enable+0x82>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006f9c:	4b26      	ldr	r3, [pc, #152]	@ (8007038 <ADC_Enable+0xfc>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	099b      	lsrs	r3, r3, #6
 8006fa2:	4a26      	ldr	r2, [pc, #152]	@ (800703c <ADC_Enable+0x100>)
 8006fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8006fa8:	099b      	lsrs	r3, r3, #6
 8006faa:	3301      	adds	r3, #1
 8006fac:	005b      	lsls	r3, r3, #1
 8006fae:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006fb0:	e002      	b.n	8006fb8 <ADC_Enable+0x7c>
      {
        wait_loop_index--;
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	3b01      	subs	r3, #1
 8006fb6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d1f9      	bne.n	8006fb2 <ADC_Enable+0x76>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006fbe:	f7fe fd07 	bl	80059d0 <HAL_GetTick>
 8006fc2:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006fc4:	e028      	b.n	8007018 <ADC_Enable+0xdc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f7fe ff48 	bl	8005e60 <LL_ADC_IsEnabled>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d104      	bne.n	8006fe0 <ADC_Enable+0xa4>
      {
        LL_ADC_Enable(hadc->Instance);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f7fe ff18 	bl	8005e10 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006fe0:	f7fe fcf6 	bl	80059d0 <HAL_GetTick>
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	1ad3      	subs	r3, r2, r3
 8006fea:	2b02      	cmp	r3, #2
 8006fec:	d914      	bls.n	8007018 <ADC_Enable+0xdc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f003 0301 	and.w	r3, r3, #1
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d00d      	beq.n	8007018 <ADC_Enable+0xdc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007000:	f043 0210 	orr.w	r2, r3, #16
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800700c:	f043 0201 	orr.w	r2, r3, #1
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8007014:	2301      	movs	r3, #1
 8007016:	e007      	b.n	8007028 <ADC_Enable+0xec>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f003 0301 	and.w	r3, r3, #1
 8007022:	2b01      	cmp	r3, #1
 8007024:	d1cf      	bne.n	8006fc6 <ADC_Enable+0x8a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007026:	2300      	movs	r3, #0
}
 8007028:	4618      	mov	r0, r3
 800702a:	3710      	adds	r7, #16
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}
 8007030:	8000003f 	.word	0x8000003f
 8007034:	42028300 	.word	0x42028300
 8007038:	20000074 	.word	0x20000074
 800703c:	053e2d63 	.word	0x053e2d63

08007040 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b084      	sub	sp, #16
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4618      	mov	r0, r3
 800704e:	f7fe ff1a 	bl	8005e86 <LL_ADC_IsDisableOngoing>
 8007052:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4618      	mov	r0, r3
 800705a:	f7fe ff01 	bl	8005e60 <LL_ADC_IsEnabled>
 800705e:	4603      	mov	r3, r0
 8007060:	2b00      	cmp	r3, #0
 8007062:	d047      	beq.n	80070f4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d144      	bne.n	80070f4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	f003 030d 	and.w	r3, r3, #13
 8007074:	2b01      	cmp	r3, #1
 8007076:	d10c      	bne.n	8007092 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4618      	mov	r0, r3
 800707e:	f7fe fedb 	bl	8005e38 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	2203      	movs	r2, #3
 8007088:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800708a:	f7fe fca1 	bl	80059d0 <HAL_GetTick>
 800708e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007090:	e029      	b.n	80070e6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007096:	f043 0210 	orr.w	r2, r3, #16
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070a2:	f043 0201 	orr.w	r2, r3, #1
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 80070aa:	2301      	movs	r3, #1
 80070ac:	e023      	b.n	80070f6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80070ae:	f7fe fc8f 	bl	80059d0 <HAL_GetTick>
 80070b2:	4602      	mov	r2, r0
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	1ad3      	subs	r3, r2, r3
 80070b8:	2b02      	cmp	r3, #2
 80070ba:	d914      	bls.n	80070e6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	f003 0301 	and.w	r3, r3, #1
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d00d      	beq.n	80070e6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070ce:	f043 0210 	orr.w	r2, r3, #16
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070da:	f043 0201 	orr.w	r2, r3, #1
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80070e2:	2301      	movs	r3, #1
 80070e4:	e007      	b.n	80070f6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	689b      	ldr	r3, [r3, #8]
 80070ec:	f003 0301 	and.w	r3, r3, #1
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d1dc      	bne.n	80070ae <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80070f4:	2300      	movs	r3, #0
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3710      	adds	r7, #16
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}
	...

08007100 <__NVIC_SetPriorityGrouping>:
{
 8007100:	b480      	push	{r7}
 8007102:	b085      	sub	sp, #20
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f003 0307 	and.w	r3, r3, #7
 800710e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007110:	4b0c      	ldr	r3, [pc, #48]	@ (8007144 <__NVIC_SetPriorityGrouping+0x44>)
 8007112:	68db      	ldr	r3, [r3, #12]
 8007114:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007116:	68ba      	ldr	r2, [r7, #8]
 8007118:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800711c:	4013      	ands	r3, r2
 800711e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007128:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800712c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007130:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007132:	4a04      	ldr	r2, [pc, #16]	@ (8007144 <__NVIC_SetPriorityGrouping+0x44>)
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	60d3      	str	r3, [r2, #12]
}
 8007138:	bf00      	nop
 800713a:	3714      	adds	r7, #20
 800713c:	46bd      	mov	sp, r7
 800713e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007142:	4770      	bx	lr
 8007144:	e000ed00 	.word	0xe000ed00

08007148 <__NVIC_GetPriorityGrouping>:
{
 8007148:	b480      	push	{r7}
 800714a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800714c:	4b04      	ldr	r3, [pc, #16]	@ (8007160 <__NVIC_GetPriorityGrouping+0x18>)
 800714e:	68db      	ldr	r3, [r3, #12]
 8007150:	0a1b      	lsrs	r3, r3, #8
 8007152:	f003 0307 	and.w	r3, r3, #7
}
 8007156:	4618      	mov	r0, r3
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr
 8007160:	e000ed00 	.word	0xe000ed00

08007164 <__NVIC_EnableIRQ>:
{
 8007164:	b480      	push	{r7}
 8007166:	b083      	sub	sp, #12
 8007168:	af00      	add	r7, sp, #0
 800716a:	4603      	mov	r3, r0
 800716c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800716e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007172:	2b00      	cmp	r3, #0
 8007174:	db0b      	blt.n	800718e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007176:	88fb      	ldrh	r3, [r7, #6]
 8007178:	f003 021f 	and.w	r2, r3, #31
 800717c:	4907      	ldr	r1, [pc, #28]	@ (800719c <__NVIC_EnableIRQ+0x38>)
 800717e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007182:	095b      	lsrs	r3, r3, #5
 8007184:	2001      	movs	r0, #1
 8007186:	fa00 f202 	lsl.w	r2, r0, r2
 800718a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800718e:	bf00      	nop
 8007190:	370c      	adds	r7, #12
 8007192:	46bd      	mov	sp, r7
 8007194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007198:	4770      	bx	lr
 800719a:	bf00      	nop
 800719c:	e000e100 	.word	0xe000e100

080071a0 <__NVIC_DisableIRQ>:
{
 80071a0:	b480      	push	{r7}
 80071a2:	b083      	sub	sp, #12
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	4603      	mov	r3, r0
 80071a8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80071aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	db12      	blt.n	80071d8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80071b2:	88fb      	ldrh	r3, [r7, #6]
 80071b4:	f003 021f 	and.w	r2, r3, #31
 80071b8:	490a      	ldr	r1, [pc, #40]	@ (80071e4 <__NVIC_DisableIRQ+0x44>)
 80071ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80071be:	095b      	lsrs	r3, r3, #5
 80071c0:	2001      	movs	r0, #1
 80071c2:	fa00 f202 	lsl.w	r2, r0, r2
 80071c6:	3320      	adds	r3, #32
 80071c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80071cc:	f3bf 8f4f 	dsb	sy
}
 80071d0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80071d2:	f3bf 8f6f 	isb	sy
}
 80071d6:	bf00      	nop
}
 80071d8:	bf00      	nop
 80071da:	370c      	adds	r7, #12
 80071dc:	46bd      	mov	sp, r7
 80071de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e2:	4770      	bx	lr
 80071e4:	e000e100 	.word	0xe000e100

080071e8 <__NVIC_SetPriority>:
{
 80071e8:	b480      	push	{r7}
 80071ea:	b083      	sub	sp, #12
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	4603      	mov	r3, r0
 80071f0:	6039      	str	r1, [r7, #0]
 80071f2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80071f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	db0a      	blt.n	8007212 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	b2da      	uxtb	r2, r3
 8007200:	490c      	ldr	r1, [pc, #48]	@ (8007234 <__NVIC_SetPriority+0x4c>)
 8007202:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007206:	0112      	lsls	r2, r2, #4
 8007208:	b2d2      	uxtb	r2, r2
 800720a:	440b      	add	r3, r1
 800720c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007210:	e00a      	b.n	8007228 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	b2da      	uxtb	r2, r3
 8007216:	4908      	ldr	r1, [pc, #32]	@ (8007238 <__NVIC_SetPriority+0x50>)
 8007218:	88fb      	ldrh	r3, [r7, #6]
 800721a:	f003 030f 	and.w	r3, r3, #15
 800721e:	3b04      	subs	r3, #4
 8007220:	0112      	lsls	r2, r2, #4
 8007222:	b2d2      	uxtb	r2, r2
 8007224:	440b      	add	r3, r1
 8007226:	761a      	strb	r2, [r3, #24]
}
 8007228:	bf00      	nop
 800722a:	370c      	adds	r7, #12
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr
 8007234:	e000e100 	.word	0xe000e100
 8007238:	e000ed00 	.word	0xe000ed00

0800723c <NVIC_EncodePriority>:
{
 800723c:	b480      	push	{r7}
 800723e:	b089      	sub	sp, #36	@ 0x24
 8007240:	af00      	add	r7, sp, #0
 8007242:	60f8      	str	r0, [r7, #12]
 8007244:	60b9      	str	r1, [r7, #8]
 8007246:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f003 0307 	and.w	r3, r3, #7
 800724e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007250:	69fb      	ldr	r3, [r7, #28]
 8007252:	f1c3 0307 	rsb	r3, r3, #7
 8007256:	2b04      	cmp	r3, #4
 8007258:	bf28      	it	cs
 800725a:	2304      	movcs	r3, #4
 800725c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800725e:	69fb      	ldr	r3, [r7, #28]
 8007260:	3304      	adds	r3, #4
 8007262:	2b06      	cmp	r3, #6
 8007264:	d902      	bls.n	800726c <NVIC_EncodePriority+0x30>
 8007266:	69fb      	ldr	r3, [r7, #28]
 8007268:	3b03      	subs	r3, #3
 800726a:	e000      	b.n	800726e <NVIC_EncodePriority+0x32>
 800726c:	2300      	movs	r3, #0
 800726e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007270:	f04f 32ff 	mov.w	r2, #4294967295
 8007274:	69bb      	ldr	r3, [r7, #24]
 8007276:	fa02 f303 	lsl.w	r3, r2, r3
 800727a:	43da      	mvns	r2, r3
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	401a      	ands	r2, r3
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007284:	f04f 31ff 	mov.w	r1, #4294967295
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	fa01 f303 	lsl.w	r3, r1, r3
 800728e:	43d9      	mvns	r1, r3
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007294:	4313      	orrs	r3, r2
}
 8007296:	4618      	mov	r0, r3
 8007298:	3724      	adds	r7, #36	@ 0x24
 800729a:	46bd      	mov	sp, r7
 800729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a0:	4770      	bx	lr
	...

080072a4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80072a4:	b480      	push	{r7}
 80072a6:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80072a8:	f3bf 8f4f 	dsb	sy
}
 80072ac:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80072ae:	4b06      	ldr	r3, [pc, #24]	@ (80072c8 <__NVIC_SystemReset+0x24>)
 80072b0:	68db      	ldr	r3, [r3, #12]
 80072b2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80072b6:	4904      	ldr	r1, [pc, #16]	@ (80072c8 <__NVIC_SystemReset+0x24>)
 80072b8:	4b04      	ldr	r3, [pc, #16]	@ (80072cc <__NVIC_SystemReset+0x28>)
 80072ba:	4313      	orrs	r3, r2
 80072bc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80072be:	f3bf 8f4f 	dsb	sy
}
 80072c2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80072c4:	bf00      	nop
 80072c6:	e7fd      	b.n	80072c4 <__NVIC_SystemReset+0x20>
 80072c8:	e000ed00 	.word	0xe000ed00
 80072cc:	05fa0004 	.word	0x05fa0004

080072d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b082      	sub	sp, #8
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f7ff ff11 	bl	8007100 <__NVIC_SetPriorityGrouping>
}
 80072de:	bf00      	nop
 80072e0:	3708      	adds	r7, #8
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}

080072e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80072e6:	b580      	push	{r7, lr}
 80072e8:	b086      	sub	sp, #24
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	4603      	mov	r3, r0
 80072ee:	60b9      	str	r1, [r7, #8]
 80072f0:	607a      	str	r2, [r7, #4]
 80072f2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80072f4:	f7ff ff28 	bl	8007148 <__NVIC_GetPriorityGrouping>
 80072f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80072fa:	687a      	ldr	r2, [r7, #4]
 80072fc:	68b9      	ldr	r1, [r7, #8]
 80072fe:	6978      	ldr	r0, [r7, #20]
 8007300:	f7ff ff9c 	bl	800723c <NVIC_EncodePriority>
 8007304:	4602      	mov	r2, r0
 8007306:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800730a:	4611      	mov	r1, r2
 800730c:	4618      	mov	r0, r3
 800730e:	f7ff ff6b 	bl	80071e8 <__NVIC_SetPriority>
}
 8007312:	bf00      	nop
 8007314:	3718      	adds	r7, #24
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}

0800731a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800731a:	b580      	push	{r7, lr}
 800731c:	b082      	sub	sp, #8
 800731e:	af00      	add	r7, sp, #0
 8007320:	4603      	mov	r3, r0
 8007322:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007324:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007328:	4618      	mov	r0, r3
 800732a:	f7ff ff1b 	bl	8007164 <__NVIC_EnableIRQ>
}
 800732e:	bf00      	nop
 8007330:	3708      	adds	r7, #8
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}

08007336 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007336:	b580      	push	{r7, lr}
 8007338:	b082      	sub	sp, #8
 800733a:	af00      	add	r7, sp, #0
 800733c:	4603      	mov	r3, r0
 800733e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8007340:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007344:	4618      	mov	r0, r3
 8007346:	f7ff ff2b 	bl	80071a0 <__NVIC_DisableIRQ>
}
 800734a:	bf00      	nop
 800734c:	3708      	adds	r7, #8
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}

08007352 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8007352:	b580      	push	{r7, lr}
 8007354:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8007356:	f7ff ffa5 	bl	80072a4 <__NVIC_SystemReset>
	...

0800735c <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800735c:	b480      	push	{r7}
 800735e:	b083      	sub	sp, #12
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	3b01      	subs	r3, #1
 8007368:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800736c:	d301      	bcc.n	8007372 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 800736e:	2301      	movs	r3, #1
 8007370:	e00d      	b.n	800738e <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8007372:	4a0a      	ldr	r2, [pc, #40]	@ (800739c <HAL_SYSTICK_Config+0x40>)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	3b01      	subs	r3, #1
 8007378:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 800737a:	4b08      	ldr	r3, [pc, #32]	@ (800739c <HAL_SYSTICK_Config+0x40>)
 800737c:	2200      	movs	r2, #0
 800737e:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8007380:	4b06      	ldr	r3, [pc, #24]	@ (800739c <HAL_SYSTICK_Config+0x40>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a05      	ldr	r2, [pc, #20]	@ (800739c <HAL_SYSTICK_Config+0x40>)
 8007386:	f043 0303 	orr.w	r3, r3, #3
 800738a:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 800738c:	2300      	movs	r3, #0
}
 800738e:	4618      	mov	r0, r3
 8007390:	370c      	adds	r7, #12
 8007392:	46bd      	mov	sp, r7
 8007394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007398:	4770      	bx	lr
 800739a:	bf00      	nop
 800739c:	e000e010 	.word	0xe000e010

080073a0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b083      	sub	sp, #12
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2b04      	cmp	r3, #4
 80073ac:	d844      	bhi.n	8007438 <HAL_SYSTICK_CLKSourceConfig+0x98>
 80073ae:	a201      	add	r2, pc, #4	@ (adr r2, 80073b4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80073b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073b4:	080073d7 	.word	0x080073d7
 80073b8:	080073f5 	.word	0x080073f5
 80073bc:	08007417 	.word	0x08007417
 80073c0:	08007439 	.word	0x08007439
 80073c4:	080073c9 	.word	0x080073c9
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80073c8:	4b1f      	ldr	r3, [pc, #124]	@ (8007448 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a1e      	ldr	r2, [pc, #120]	@ (8007448 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80073ce:	f043 0304 	orr.w	r3, r3, #4
 80073d2:	6013      	str	r3, [r2, #0]
      break;
 80073d4:	e031      	b.n	800743a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80073d6:	4b1c      	ldr	r3, [pc, #112]	@ (8007448 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a1b      	ldr	r2, [pc, #108]	@ (8007448 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80073dc:	f023 0304 	bic.w	r3, r3, #4
 80073e0:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 80073e2:	4b1a      	ldr	r3, [pc, #104]	@ (800744c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80073e4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80073e8:	4a18      	ldr	r2, [pc, #96]	@ (800744c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80073ea:	f023 030c 	bic.w	r3, r3, #12
 80073ee:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80073f2:	e022      	b.n	800743a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80073f4:	4b14      	ldr	r3, [pc, #80]	@ (8007448 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a13      	ldr	r2, [pc, #76]	@ (8007448 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80073fa:	f023 0304 	bic.w	r3, r3, #4
 80073fe:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8007400:	4b12      	ldr	r3, [pc, #72]	@ (800744c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8007402:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007406:	f023 030c 	bic.w	r3, r3, #12
 800740a:	4a10      	ldr	r2, [pc, #64]	@ (800744c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800740c:	f043 0304 	orr.w	r3, r3, #4
 8007410:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8007414:	e011      	b.n	800743a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8007416:	4b0c      	ldr	r3, [pc, #48]	@ (8007448 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a0b      	ldr	r2, [pc, #44]	@ (8007448 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800741c:	f023 0304 	bic.w	r3, r3, #4
 8007420:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8007422:	4b0a      	ldr	r3, [pc, #40]	@ (800744c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8007424:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007428:	f023 030c 	bic.w	r3, r3, #12
 800742c:	4a07      	ldr	r2, [pc, #28]	@ (800744c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800742e:	f043 0308 	orr.w	r3, r3, #8
 8007432:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8007436:	e000      	b.n	800743a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8007438:	bf00      	nop
  }
}
 800743a:	bf00      	nop
 800743c:	370c      	adds	r7, #12
 800743e:	46bd      	mov	sp, r7
 8007440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007444:	4770      	bx	lr
 8007446:	bf00      	nop
 8007448:	e000e010 	.word	0xe000e010
 800744c:	44020c00 	.word	0x44020c00

08007450 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8007450:	b480      	push	{r7}
 8007452:	b083      	sub	sp, #12
 8007454:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8007456:	4b17      	ldr	r3, [pc, #92]	@ (80074b4 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f003 0304 	and.w	r3, r3, #4
 800745e:	2b00      	cmp	r3, #0
 8007460:	d002      	beq.n	8007468 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8007462:	2304      	movs	r3, #4
 8007464:	607b      	str	r3, [r7, #4]
 8007466:	e01e      	b.n	80074a6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8007468:	4b13      	ldr	r3, [pc, #76]	@ (80074b8 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 800746a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800746e:	f003 030c 	and.w	r3, r3, #12
 8007472:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	2b08      	cmp	r3, #8
 8007478:	d00f      	beq.n	800749a <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	2b08      	cmp	r3, #8
 800747e:	d80f      	bhi.n	80074a0 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d003      	beq.n	800748e <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	2b04      	cmp	r3, #4
 800748a:	d003      	beq.n	8007494 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 800748c:	e008      	b.n	80074a0 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800748e:	2300      	movs	r3, #0
 8007490:	607b      	str	r3, [r7, #4]
        break;
 8007492:	e008      	b.n	80074a6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8007494:	2301      	movs	r3, #1
 8007496:	607b      	str	r3, [r7, #4]
        break;
 8007498:	e005      	b.n	80074a6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 800749a:	2302      	movs	r3, #2
 800749c:	607b      	str	r3, [r7, #4]
        break;
 800749e:	e002      	b.n	80074a6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80074a0:	2300      	movs	r3, #0
 80074a2:	607b      	str	r3, [r7, #4]
        break;
 80074a4:	bf00      	nop
    }
  }
  return systick_source;
 80074a6:	687b      	ldr	r3, [r7, #4]
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	370c      	adds	r7, #12
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr
 80074b4:	e000e010 	.word	0xe000e010
 80074b8:	44020c00 	.word	0x44020c00

080074bc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b082      	sub	sp, #8
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d101      	bne.n	80074ce <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80074ca:	2301      	movs	r3, #1
 80074cc:	e054      	b.n	8007578 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	7f5b      	ldrb	r3, [r3, #29]
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d105      	bne.n	80074e4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2200      	movs	r2, #0
 80074dc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f7fc fb5a 	bl	8003b98 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2202      	movs	r2, #2
 80074e8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	791b      	ldrb	r3, [r3, #4]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d10c      	bne.n	800750c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a22      	ldr	r2, [pc, #136]	@ (8007580 <HAL_CRC_Init+0xc4>)
 80074f8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	689a      	ldr	r2, [r3, #8]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f022 0218 	bic.w	r2, r2, #24
 8007508:	609a      	str	r2, [r3, #8]
 800750a:	e00c      	b.n	8007526 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6899      	ldr	r1, [r3, #8]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	68db      	ldr	r3, [r3, #12]
 8007514:	461a      	mov	r2, r3
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f000 f948 	bl	80077ac <HAL_CRCEx_Polynomial_Set>
 800751c:	4603      	mov	r3, r0
 800751e:	2b00      	cmp	r3, #0
 8007520:	d001      	beq.n	8007526 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8007522:	2301      	movs	r3, #1
 8007524:	e028      	b.n	8007578 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	795b      	ldrb	r3, [r3, #5]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d105      	bne.n	800753a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f04f 32ff 	mov.w	r2, #4294967295
 8007536:	611a      	str	r2, [r3, #16]
 8007538:	e004      	b.n	8007544 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	687a      	ldr	r2, [r7, #4]
 8007540:	6912      	ldr	r2, [r2, #16]
 8007542:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	689b      	ldr	r3, [r3, #8]
 800754a:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	695a      	ldr	r2, [r3, #20]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	430a      	orrs	r2, r1
 8007558:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	689b      	ldr	r3, [r3, #8]
 8007560:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	699a      	ldr	r2, [r3, #24]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	430a      	orrs	r2, r1
 800756e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2201      	movs	r2, #1
 8007574:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8007576:	2300      	movs	r3, #0
}
 8007578:	4618      	mov	r0, r3
 800757a:	3708      	adds	r7, #8
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}
 8007580:	04c11db7 	.word	0x04c11db7

08007584 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b086      	sub	sp, #24
 8007588:	af00      	add	r7, sp, #0
 800758a:	60f8      	str	r0, [r7, #12]
 800758c:	60b9      	str	r1, [r7, #8]
 800758e:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8007590:	2300      	movs	r3, #0
 8007592:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2202      	movs	r2, #2
 8007598:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	689a      	ldr	r2, [r3, #8]
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f042 0201 	orr.w	r2, r2, #1
 80075a8:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	6a1b      	ldr	r3, [r3, #32]
 80075ae:	2b03      	cmp	r3, #3
 80075b0:	d006      	beq.n	80075c0 <HAL_CRC_Calculate+0x3c>
 80075b2:	2b03      	cmp	r3, #3
 80075b4:	d829      	bhi.n	800760a <HAL_CRC_Calculate+0x86>
 80075b6:	2b01      	cmp	r3, #1
 80075b8:	d019      	beq.n	80075ee <HAL_CRC_Calculate+0x6a>
 80075ba:	2b02      	cmp	r3, #2
 80075bc:	d01e      	beq.n	80075fc <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 80075be:	e024      	b.n	800760a <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 80075c0:	2300      	movs	r3, #0
 80075c2:	617b      	str	r3, [r7, #20]
 80075c4:	e00a      	b.n	80075dc <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	009b      	lsls	r3, r3, #2
 80075ca:	68ba      	ldr	r2, [r7, #8]
 80075cc:	441a      	add	r2, r3
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	6812      	ldr	r2, [r2, #0]
 80075d4:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	3301      	adds	r3, #1
 80075da:	617b      	str	r3, [r7, #20]
 80075dc:	697a      	ldr	r2, [r7, #20]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d3f0      	bcc.n	80075c6 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	613b      	str	r3, [r7, #16]
      break;
 80075ec:	e00e      	b.n	800760c <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 80075ee:	687a      	ldr	r2, [r7, #4]
 80075f0:	68b9      	ldr	r1, [r7, #8]
 80075f2:	68f8      	ldr	r0, [r7, #12]
 80075f4:	f000 f812 	bl	800761c <CRC_Handle_8>
 80075f8:	6138      	str	r0, [r7, #16]
      break;
 80075fa:	e007      	b.n	800760c <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 80075fc:	687a      	ldr	r2, [r7, #4]
 80075fe:	68b9      	ldr	r1, [r7, #8]
 8007600:	68f8      	ldr	r0, [r7, #12]
 8007602:	f000 f899 	bl	8007738 <CRC_Handle_16>
 8007606:	6138      	str	r0, [r7, #16]
      break;
 8007608:	e000      	b.n	800760c <HAL_CRC_Calculate+0x88>
      break;
 800760a:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2201      	movs	r2, #1
 8007610:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8007612:	693b      	ldr	r3, [r7, #16]
}
 8007614:	4618      	mov	r0, r3
 8007616:	3718      	adds	r7, #24
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}

0800761c <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800761c:	b480      	push	{r7}
 800761e:	b089      	sub	sp, #36	@ 0x24
 8007620:	af00      	add	r7, sp, #0
 8007622:	60f8      	str	r0, [r7, #12]
 8007624:	60b9      	str	r1, [r7, #8]
 8007626:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8007628:	2300      	movs	r3, #0
 800762a:	61fb      	str	r3, [r7, #28]
 800762c:	e023      	b.n	8007676 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800762e:	69fb      	ldr	r3, [r7, #28]
 8007630:	009b      	lsls	r3, r3, #2
 8007632:	68ba      	ldr	r2, [r7, #8]
 8007634:	4413      	add	r3, r2
 8007636:	781b      	ldrb	r3, [r3, #0]
 8007638:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800763a:	69fb      	ldr	r3, [r7, #28]
 800763c:	009b      	lsls	r3, r3, #2
 800763e:	3301      	adds	r3, #1
 8007640:	68b9      	ldr	r1, [r7, #8]
 8007642:	440b      	add	r3, r1
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8007648:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800764a:	69fb      	ldr	r3, [r7, #28]
 800764c:	009b      	lsls	r3, r3, #2
 800764e:	3302      	adds	r3, #2
 8007650:	68b9      	ldr	r1, [r7, #8]
 8007652:	440b      	add	r3, r1
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8007658:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 800765a:	69fb      	ldr	r3, [r7, #28]
 800765c:	009b      	lsls	r3, r3, #2
 800765e:	3303      	adds	r3, #3
 8007660:	68b9      	ldr	r1, [r7, #8]
 8007662:	440b      	add	r3, r1
 8007664:	781b      	ldrb	r3, [r3, #0]
 8007666:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800766c:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800766e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8007670:	69fb      	ldr	r3, [r7, #28]
 8007672:	3301      	adds	r3, #1
 8007674:	61fb      	str	r3, [r7, #28]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	089b      	lsrs	r3, r3, #2
 800767a:	69fa      	ldr	r2, [r7, #28]
 800767c:	429a      	cmp	r2, r3
 800767e:	d3d6      	bcc.n	800762e <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f003 0303 	and.w	r3, r3, #3
 8007686:	2b00      	cmp	r3, #0
 8007688:	d04d      	beq.n	8007726 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f003 0303 	and.w	r3, r3, #3
 8007690:	2b01      	cmp	r3, #1
 8007692:	d107      	bne.n	80076a4 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8007694:	69fb      	ldr	r3, [r7, #28]
 8007696:	009b      	lsls	r3, r3, #2
 8007698:	68ba      	ldr	r2, [r7, #8]
 800769a:	4413      	add	r3, r2
 800769c:	68fa      	ldr	r2, [r7, #12]
 800769e:	6812      	ldr	r2, [r2, #0]
 80076a0:	781b      	ldrb	r3, [r3, #0]
 80076a2:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f003 0303 	and.w	r3, r3, #3
 80076aa:	2b02      	cmp	r3, #2
 80076ac:	d116      	bne.n	80076dc <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80076ae:	69fb      	ldr	r3, [r7, #28]
 80076b0:	009b      	lsls	r3, r3, #2
 80076b2:	68ba      	ldr	r2, [r7, #8]
 80076b4:	4413      	add	r3, r2
 80076b6:	781b      	ldrb	r3, [r3, #0]
 80076b8:	021b      	lsls	r3, r3, #8
 80076ba:	b21a      	sxth	r2, r3
 80076bc:	69fb      	ldr	r3, [r7, #28]
 80076be:	009b      	lsls	r3, r3, #2
 80076c0:	3301      	adds	r3, #1
 80076c2:	68b9      	ldr	r1, [r7, #8]
 80076c4:	440b      	add	r3, r1
 80076c6:	781b      	ldrb	r3, [r3, #0]
 80076c8:	b21b      	sxth	r3, r3
 80076ca:	4313      	orrs	r3, r2
 80076cc:	b21b      	sxth	r3, r3
 80076ce:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	8b7a      	ldrh	r2, [r7, #26]
 80076da:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f003 0303 	and.w	r3, r3, #3
 80076e2:	2b03      	cmp	r3, #3
 80076e4:	d11f      	bne.n	8007726 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80076e6:	69fb      	ldr	r3, [r7, #28]
 80076e8:	009b      	lsls	r3, r3, #2
 80076ea:	68ba      	ldr	r2, [r7, #8]
 80076ec:	4413      	add	r3, r2
 80076ee:	781b      	ldrb	r3, [r3, #0]
 80076f0:	021b      	lsls	r3, r3, #8
 80076f2:	b21a      	sxth	r2, r3
 80076f4:	69fb      	ldr	r3, [r7, #28]
 80076f6:	009b      	lsls	r3, r3, #2
 80076f8:	3301      	adds	r3, #1
 80076fa:	68b9      	ldr	r1, [r7, #8]
 80076fc:	440b      	add	r3, r1
 80076fe:	781b      	ldrb	r3, [r3, #0]
 8007700:	b21b      	sxth	r3, r3
 8007702:	4313      	orrs	r3, r2
 8007704:	b21b      	sxth	r3, r3
 8007706:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	8b7a      	ldrh	r2, [r7, #26]
 8007712:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8007714:	69fb      	ldr	r3, [r7, #28]
 8007716:	009b      	lsls	r3, r3, #2
 8007718:	3302      	adds	r3, #2
 800771a:	68ba      	ldr	r2, [r7, #8]
 800771c:	4413      	add	r3, r2
 800771e:	68fa      	ldr	r2, [r7, #12]
 8007720:	6812      	ldr	r2, [r2, #0]
 8007722:	781b      	ldrb	r3, [r3, #0]
 8007724:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	681b      	ldr	r3, [r3, #0]
}
 800772c:	4618      	mov	r0, r3
 800772e:	3724      	adds	r7, #36	@ 0x24
 8007730:	46bd      	mov	sp, r7
 8007732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007736:	4770      	bx	lr

08007738 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8007738:	b480      	push	{r7}
 800773a:	b087      	sub	sp, #28
 800773c:	af00      	add	r7, sp, #0
 800773e:	60f8      	str	r0, [r7, #12]
 8007740:	60b9      	str	r1, [r7, #8]
 8007742:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8007744:	2300      	movs	r3, #0
 8007746:	617b      	str	r3, [r7, #20]
 8007748:	e013      	b.n	8007772 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	009b      	lsls	r3, r3, #2
 800774e:	68ba      	ldr	r2, [r7, #8]
 8007750:	4413      	add	r3, r2
 8007752:	881b      	ldrh	r3, [r3, #0]
 8007754:	041a      	lsls	r2, r3, #16
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	009b      	lsls	r3, r3, #2
 800775a:	3302      	adds	r3, #2
 800775c:	68b9      	ldr	r1, [r7, #8]
 800775e:	440b      	add	r3, r1
 8007760:	881b      	ldrh	r3, [r3, #0]
 8007762:	4619      	mov	r1, r3
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	430a      	orrs	r2, r1
 800776a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	3301      	adds	r3, #1
 8007770:	617b      	str	r3, [r7, #20]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	085b      	lsrs	r3, r3, #1
 8007776:	697a      	ldr	r2, [r7, #20]
 8007778:	429a      	cmp	r2, r3
 800777a:	d3e6      	bcc.n	800774a <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f003 0301 	and.w	r3, r3, #1
 8007782:	2b00      	cmp	r3, #0
 8007784:	d009      	beq.n	800779a <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	009b      	lsls	r3, r3, #2
 8007790:	68ba      	ldr	r2, [r7, #8]
 8007792:	4413      	add	r3, r2
 8007794:	881a      	ldrh	r2, [r3, #0]
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	681b      	ldr	r3, [r3, #0]
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	371c      	adds	r7, #28
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr

080077ac <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b087      	sub	sp, #28
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	60f8      	str	r0, [r7, #12]
 80077b4:	60b9      	str	r1, [r7, #8]
 80077b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80077b8:	2300      	movs	r3, #0
 80077ba:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80077bc:	231f      	movs	r3, #31
 80077be:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	f003 0301 	and.w	r3, r3, #1
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d102      	bne.n	80077d0 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80077ca:	2301      	movs	r3, #1
 80077cc:	75fb      	strb	r3, [r7, #23]
 80077ce:	e063      	b.n	8007898 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80077d0:	bf00      	nop
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	1e5a      	subs	r2, r3, #1
 80077d6:	613a      	str	r2, [r7, #16]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d009      	beq.n	80077f0 <HAL_CRCEx_Polynomial_Set+0x44>
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	f003 031f 	and.w	r3, r3, #31
 80077e2:	68ba      	ldr	r2, [r7, #8]
 80077e4:	fa22 f303 	lsr.w	r3, r2, r3
 80077e8:	f003 0301 	and.w	r3, r3, #1
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d0f0      	beq.n	80077d2 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2b18      	cmp	r3, #24
 80077f4:	d846      	bhi.n	8007884 <HAL_CRCEx_Polynomial_Set+0xd8>
 80077f6:	a201      	add	r2, pc, #4	@ (adr r2, 80077fc <HAL_CRCEx_Polynomial_Set+0x50>)
 80077f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077fc:	0800788b 	.word	0x0800788b
 8007800:	08007885 	.word	0x08007885
 8007804:	08007885 	.word	0x08007885
 8007808:	08007885 	.word	0x08007885
 800780c:	08007885 	.word	0x08007885
 8007810:	08007885 	.word	0x08007885
 8007814:	08007885 	.word	0x08007885
 8007818:	08007885 	.word	0x08007885
 800781c:	08007879 	.word	0x08007879
 8007820:	08007885 	.word	0x08007885
 8007824:	08007885 	.word	0x08007885
 8007828:	08007885 	.word	0x08007885
 800782c:	08007885 	.word	0x08007885
 8007830:	08007885 	.word	0x08007885
 8007834:	08007885 	.word	0x08007885
 8007838:	08007885 	.word	0x08007885
 800783c:	0800786d 	.word	0x0800786d
 8007840:	08007885 	.word	0x08007885
 8007844:	08007885 	.word	0x08007885
 8007848:	08007885 	.word	0x08007885
 800784c:	08007885 	.word	0x08007885
 8007850:	08007885 	.word	0x08007885
 8007854:	08007885 	.word	0x08007885
 8007858:	08007885 	.word	0x08007885
 800785c:	08007861 	.word	0x08007861
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	2b06      	cmp	r3, #6
 8007864:	d913      	bls.n	800788e <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8007866:	2301      	movs	r3, #1
 8007868:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800786a:	e010      	b.n	800788e <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	2b07      	cmp	r3, #7
 8007870:	d90f      	bls.n	8007892 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8007872:	2301      	movs	r3, #1
 8007874:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8007876:	e00c      	b.n	8007892 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	2b0f      	cmp	r3, #15
 800787c:	d90b      	bls.n	8007896 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800787e:	2301      	movs	r3, #1
 8007880:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8007882:	e008      	b.n	8007896 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8007884:	2301      	movs	r3, #1
 8007886:	75fb      	strb	r3, [r7, #23]
        break;
 8007888:	e006      	b.n	8007898 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800788a:	bf00      	nop
 800788c:	e004      	b.n	8007898 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800788e:	bf00      	nop
 8007890:	e002      	b.n	8007898 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8007892:	bf00      	nop
 8007894:	e000      	b.n	8007898 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8007896:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8007898:	7dfb      	ldrb	r3, [r7, #23]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d10d      	bne.n	80078ba <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	68ba      	ldr	r2, [r7, #8]
 80078a4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	689b      	ldr	r3, [r3, #8]
 80078ac:	f023 0118 	bic.w	r1, r3, #24
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	687a      	ldr	r2, [r7, #4]
 80078b6:	430a      	orrs	r2, r1
 80078b8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80078ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80078bc:	4618      	mov	r0, r3
 80078be:	371c      	adds	r7, #28
 80078c0:	46bd      	mov	sp, r7
 80078c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c6:	4770      	bx	lr

080078c8 <HAL_CRYP_Init>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYP_Init(CRYP_HandleTypeDef *hcryp)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b084      	sub	sp, #16
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
#if defined(SAES)
  uint32_t tickstart;
#endif /* SAES */

  /* Check the CRYP handle allocation */
  if (hcryp == NULL)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d101      	bne.n	80078da <HAL_CRYP_Init+0x12>
  {
    return HAL_ERROR;
 80078d6:	2301      	movs	r3, #1
 80078d8:	e0a7      	b.n	8007a2a <HAL_CRYP_Init+0x162>

    /* Init the low level hardware */
    hcryp->MspInitCallback(hcryp);
  }
#else
  if (hcryp->State == HAL_CRYP_STATE_RESET)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80078e0:	b2db      	uxtb	r3, r3
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d106      	bne.n	80078f4 <HAL_CRYP_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcryp->Lock = HAL_UNLOCKED;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2200      	movs	r2, #0
 80078ea:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Init the low level hardware */
    HAL_CRYP_MspInit(hcryp);
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f7fc f904 	bl	8003afc <HAL_CRYP_MspInit>
  }
#endif /* (USE_HAL_CRYP_REGISTER_CALLBACKS) */

  if (hcryp->Instance == AES)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4a4e      	ldr	r2, [pc, #312]	@ (8007a34 <HAL_CRYP_Init+0x16c>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d116      	bne.n	800792c <HAL_CRYP_Init+0x64>
  {
    /* Set the key size, data type and Algorithm */
    cr_value = (uint32_t)(hcryp->Init.DataType | hcryp->Init.KeySize | hcryp->Init.Algorithm | hcryp->Init.KeyMode);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	685a      	ldr	r2, [r3, #4]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	689b      	ldr	r3, [r3, #8]
 8007906:	431a      	orrs	r2, r3
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	695b      	ldr	r3, [r3, #20]
 800790c:	431a      	orrs	r2, r3
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007912:	4313      	orrs	r3, r2
 8007914:	60bb      	str	r3, [r7, #8]
    /* Set the key size, data type, algorithm and mode */
    MODIFY_REG(hcryp->Instance->CR, AES_CR_KMOD | AES_CR_DATATYPE | AES_CR_KEYSIZE | AES_CR_CHMOD, cr_value);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	681a      	ldr	r2, [r3, #0]
 800791c:	4b46      	ldr	r3, [pc, #280]	@ (8007a38 <HAL_CRYP_Init+0x170>)
 800791e:	4013      	ands	r3, r2
 8007920:	687a      	ldr	r2, [r7, #4]
 8007922:	6812      	ldr	r2, [r2, #0]
 8007924:	68b9      	ldr	r1, [r7, #8]
 8007926:	430b      	orrs	r3, r1
 8007928:	6013      	str	r3, [r2, #0]
 800792a:	e070      	b.n	8007a0e <HAL_CRYP_Init+0x146>
  }
  else
  {
    /* SAES is initializing, fetching random number from the RNG */
    tickstart = HAL_GetTick();
 800792c:	f7fe f850 	bl	80059d0 <HAL_GetTick>
 8007930:	60f8      	str	r0, [r7, #12]
    while (HAL_IS_BIT_SET(hcryp->Instance->SR, CRYP_FLAG_BUSY))
 8007932:	e01e      	b.n	8007972 <HAL_CRYP_Init+0xaa>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CRYP_GENERAL_TIMEOUT)
 8007934:	f7fe f84c 	bl	80059d0 <HAL_GetTick>
 8007938:	4602      	mov	r2, r0
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	1ad3      	subs	r3, r2, r3
 800793e:	2b52      	cmp	r3, #82	@ 0x52
 8007940:	d917      	bls.n	8007972 <HAL_CRYP_Init+0xaa>
      {
        __HAL_CRYP_DISABLE(hcryp);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	681a      	ldr	r2, [r3, #0]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f022 0201 	bic.w	r2, r2, #1
 8007950:	601a      	str	r2, [r3, #0]
        hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007956:	f043 0210 	orr.w	r2, r3, #16
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	65da      	str	r2, [r3, #92]	@ 0x5c
        hcryp->State = HAL_CRYP_STATE_READY;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2201      	movs	r2, #1
 8007962:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
        __HAL_UNLOCK(hcryp);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2200      	movs	r2, #0
 800796a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
        return HAL_ERROR;
 800796e:	2301      	movs	r3, #1
 8007970:	e05b      	b.n	8007a2a <HAL_CRYP_Init+0x162>
    while (HAL_IS_BIT_SET(hcryp->Instance->SR, CRYP_FLAG_BUSY))
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	f003 0308 	and.w	r3, r3, #8
 800797c:	2b08      	cmp	r3, #8
 800797e:	d0d9      	beq.n	8007934 <HAL_CRYP_Init+0x6c>
      }
    }
    /* SAES is initializing, no random number fetching error flagged */
    tickstart = HAL_GetTick();
 8007980:	f7fe f826 	bl	80059d0 <HAL_GetTick>
 8007984:	60f8      	str	r0, [r7, #12]
    while (HAL_IS_BIT_SET(hcryp->Instance->ISR, CRYP_FLAG_RNGEIF))
 8007986:	e01e      	b.n	80079c6 <HAL_CRYP_Init+0xfe>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CRYP_GENERAL_TIMEOUT)
 8007988:	f7fe f822 	bl	80059d0 <HAL_GetTick>
 800798c:	4602      	mov	r2, r0
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	1ad3      	subs	r3, r2, r3
 8007992:	2b52      	cmp	r3, #82	@ 0x52
 8007994:	d917      	bls.n	80079c6 <HAL_CRYP_Init+0xfe>
      {
        __HAL_CRYP_DISABLE(hcryp);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	681a      	ldr	r2, [r3, #0]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f022 0201 	bic.w	r2, r2, #1
 80079a4:	601a      	str	r2, [r3, #0]
        hcryp->ErrorCode |= HAL_CRYP_ERROR_RNG;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80079aa:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	65da      	str	r2, [r3, #92]	@ 0x5c
        hcryp->State = HAL_CRYP_STATE_READY;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2201      	movs	r2, #1
 80079b6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
        __HAL_UNLOCK(hcryp);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2200      	movs	r2, #0
 80079be:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
        return HAL_ERROR;
 80079c2:	2301      	movs	r3, #1
 80079c4:	e031      	b.n	8007a2a <HAL_CRYP_Init+0x162>
    while (HAL_IS_BIT_SET(hcryp->Instance->ISR, CRYP_FLAG_RNGEIF))
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f8d3 3304 	ldr.w	r3, [r3, #772]	@ 0x304
 80079ce:	f003 0308 	and.w	r3, r3, #8
 80079d2:	2b08      	cmp	r3, #8
 80079d4:	d0d8      	beq.n	8007988 <HAL_CRYP_Init+0xc0>
      }
    }
    cr_value = (uint32_t)(hcryp->Init.KeyMode | hcryp->Init.DataType | hcryp->Init.KeySize | \
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	431a      	orrs	r2, r3
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	689b      	ldr	r3, [r3, #8]
 80079e4:	431a      	orrs	r2, r3
                          hcryp->Init.Algorithm | hcryp->Init.KeySelect | hcryp->Init.KeyProtection);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	695b      	ldr	r3, [r3, #20]
    cr_value = (uint32_t)(hcryp->Init.KeyMode | hcryp->Init.DataType | hcryp->Init.KeySize | \
 80079ea:	431a      	orrs	r2, r3
                          hcryp->Init.Algorithm | hcryp->Init.KeySelect | hcryp->Init.KeyProtection);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079f0:	431a      	orrs	r2, r3
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
    cr_value = (uint32_t)(hcryp->Init.KeyMode | hcryp->Init.DataType | hcryp->Init.KeySize | \
 80079f6:	4313      	orrs	r3, r2
 80079f8:	60bb      	str	r3, [r7, #8]
    /* Set the key size, data type, algorithm, Key selection and key protection */
    MODIFY_REG(hcryp->Instance->CR, AES_CR_KMOD | AES_CR_DATATYPE | AES_CR_KEYSIZE | AES_CR_CHMOD | AES_CR_KEYSEL |
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	681a      	ldr	r2, [r3, #0]
 8007a00:	4b0e      	ldr	r3, [pc, #56]	@ (8007a3c <HAL_CRYP_Init+0x174>)
 8007a02:	4013      	ands	r3, r2
 8007a04:	687a      	ldr	r2, [r7, #4]
 8007a06:	6812      	ldr	r2, [r2, #0]
 8007a08:	68b9      	ldr	r1, [r7, #8]
 8007a0a:	430b      	orrs	r3, r1
 8007a0c:	6013      	str	r3, [r2, #0]
               AES_CR_KEYPROT, cr_value);
  }
  /* Reset Error Code field */
  hcryp->ErrorCode = HAL_CRYP_ERROR_NONE;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2200      	movs	r2, #0
 8007a12:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Reset peripheral Key and IV configuration flag */
  hcryp->KeyIVConfig = 0U;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2200      	movs	r2, #0
 8007a18:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_READY;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2201      	movs	r2, #1
 8007a1e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Set the default CRYP phase */
  hcryp->Phase = CRYP_PHASE_READY;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2201      	movs	r2, #1
 8007a26:	64da      	str	r2, [r3, #76]	@ 0x4c

  return HAL_OK;
 8007a28:	2300      	movs	r3, #0
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3710      	adds	r7, #16
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}
 8007a32:	bf00      	nop
 8007a34:	420c0000 	.word	0x420c0000
 8007a38:	fcfaff99 	.word	0xfcfaff99
 8007a3c:	8cf2ff99 	.word	0x8cf2ff99

08007a40 <HAL_CRYP_Encrypt>:
  * @param  Timeout Specify Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYP_Encrypt(CRYP_HandleTypeDef *hcryp, uint32_t *pInput, uint16_t Size, uint32_t *pOutput,
                                   uint32_t Timeout)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b086      	sub	sp, #24
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	60f8      	str	r0, [r7, #12]
 8007a48:	60b9      	str	r1, [r7, #8]
 8007a4a:	603b      	str	r3, [r7, #0]
 8007a4c:	4613      	mov	r3, r2
 8007a4e:	80fb      	strh	r3, [r7, #6]

  /* Check input buffer size */
  assert_param(IS_CRYP_BUFFERSIZE(algo_assert, hcryp->Init.DataWidthUnit, Size));
#endif /* USE_FULL_ASSERT */

  if (hcryp->State == HAL_CRYP_STATE_READY)
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007a56:	b2db      	uxtb	r3, r3
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	f040 808e 	bne.w	8007b7a <HAL_CRYP_Encrypt+0x13a>
  {
    /* Change state Busy */
    hcryp->State = HAL_CRYP_STATE_BUSY;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2202      	movs	r2, #2
 8007a62:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
    __HAL_LOCK(hcryp);
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	d101      	bne.n	8007a74 <HAL_CRYP_Encrypt+0x34>
 8007a70:	2302      	movs	r3, #2
 8007a72:	e08b      	b.n	8007b8c <HAL_CRYP_Encrypt+0x14c>
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	2201      	movs	r2, #1
 8007a78:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Reset CrypInCount, CrypOutCount and Initialize pCrypInBuffPtr and pCrypOutBuffPtr parameters */
    hcryp->CrypInCount = 0U;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hcryp->CrypOutCount = 0U;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2200      	movs	r2, #0
 8007a88:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    hcryp->pCrypInBuffPtr = pInput;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	68ba      	ldr	r2, [r7, #8]
 8007a90:	63da      	str	r2, [r3, #60]	@ 0x3c
    hcryp->pCrypOutBuffPtr = pOutput;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	683a      	ldr	r2, [r7, #0]
 8007a96:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Calculate Size parameter in Byte */
    if (hcryp->Init.DataWidthUnit == CRYP_DATAWIDTHUNIT_WORD)
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d106      	bne.n	8007aae <HAL_CRYP_Encrypt+0x6e>
    {
      hcryp->Size = Size * 4U;
 8007aa0:	88fb      	ldrh	r3, [r7, #6]
 8007aa2:	009b      	lsls	r3, r3, #2
 8007aa4:	b29a      	uxth	r2, r3
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
 8007aac:	e003      	b.n	8007ab6 <HAL_CRYP_Encrypt+0x76>
    }
    else
    {
      hcryp->Size = Size;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	88fa      	ldrh	r2, [r7, #6]
 8007ab2:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
    }

    if (hcryp->Instance == AES)
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a36      	ldr	r2, [pc, #216]	@ (8007b94 <HAL_CRYP_Encrypt+0x154>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d108      	bne.n	8007ad2 <HAL_CRYP_Encrypt+0x92>
    {
      /* Set the operating mode */
      MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_ENCRYPT);
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	681a      	ldr	r2, [r3, #0]
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f022 0218 	bic.w	r2, r2, #24
 8007ace:	601a      	str	r2, [r3, #0]
 8007ad0:	e009      	b.n	8007ae6 <HAL_CRYP_Encrypt+0xa6>
    }
    else
    {
      /* Set the operating mode and normal key selection */
      MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE | AES_CR_KMOD, CRYP_OPERATINGMODE_ENCRYPT | CRYP_KEYMODE_NORMAL);
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	68fa      	ldr	r2, [r7, #12]
 8007ada:	6812      	ldr	r2, [r2, #0]
 8007adc:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8007ae0:	f023 0318 	bic.w	r3, r3, #24
 8007ae4:	6013      	str	r3, [r2, #0]
    }
    /* Algo get algorithm selected */
    algo = hcryp->Instance->CR & AES_CR_CHMOD;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	681a      	ldr	r2, [r3, #0]
 8007aec:	4b2a      	ldr	r3, [pc, #168]	@ (8007b98 <HAL_CRYP_Encrypt+0x158>)
 8007aee:	4013      	ands	r3, r2
 8007af0:	613b      	str	r3, [r7, #16]

    switch (algo)
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007af8:	d023      	beq.n	8007b42 <HAL_CRYP_Encrypt+0x102>
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b00:	d826      	bhi.n	8007b50 <HAL_CRYP_Encrypt+0x110>
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	2b60      	cmp	r3, #96	@ 0x60
 8007b06:	d015      	beq.n	8007b34 <HAL_CRYP_Encrypt+0xf4>
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	2b60      	cmp	r3, #96	@ 0x60
 8007b0c:	d820      	bhi.n	8007b50 <HAL_CRYP_Encrypt+0x110>
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	2b40      	cmp	r3, #64	@ 0x40
 8007b12:	d008      	beq.n	8007b26 <HAL_CRYP_Encrypt+0xe6>
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	2b40      	cmp	r3, #64	@ 0x40
 8007b18:	d81a      	bhi.n	8007b50 <HAL_CRYP_Encrypt+0x110>
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d002      	beq.n	8007b26 <HAL_CRYP_Encrypt+0xe6>
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	2b20      	cmp	r3, #32
 8007b24:	d114      	bne.n	8007b50 <HAL_CRYP_Encrypt+0x110>
    {
      case CRYP_AES_ECB:
      case CRYP_AES_CBC:
      case CRYP_AES_CTR:
        /* AES encryption */
        status = CRYP_AES_Encrypt(hcryp, Timeout);
 8007b26:	6a39      	ldr	r1, [r7, #32]
 8007b28:	68f8      	ldr	r0, [r7, #12]
 8007b2a:	f000 f8df 	bl	8007cec <CRYP_AES_Encrypt>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	75fb      	strb	r3, [r7, #23]
        break;
 8007b32:	e016      	b.n	8007b62 <HAL_CRYP_Encrypt+0x122>

      case CRYP_AES_GCM_GMAC:
        /* AES GCM encryption */
        status = CRYP_AESGCM_Process(hcryp, Timeout);
 8007b34:	6a39      	ldr	r1, [r7, #32]
 8007b36:	68f8      	ldr	r0, [r7, #12]
 8007b38:	f000 fc94 	bl	8008464 <CRYP_AESGCM_Process>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	75fb      	strb	r3, [r7, #23]
        break;
 8007b40:	e00f      	b.n	8007b62 <HAL_CRYP_Encrypt+0x122>

      case CRYP_AES_CCM:
        /* AES CCM encryption */
        status = CRYP_AESCCM_Process(hcryp, Timeout);
 8007b42:	6a39      	ldr	r1, [r7, #32]
 8007b44:	68f8      	ldr	r0, [r7, #12]
 8007b46:	f000 fe6f 	bl	8008828 <CRYP_AESCCM_Process>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	75fb      	strb	r3, [r7, #23]
        break;
 8007b4e:	e008      	b.n	8007b62 <HAL_CRYP_Encrypt+0x122>

      default:
        hcryp->ErrorCode |= HAL_CRYP_ERROR_NOT_SUPPORTED;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b54:	f043 0220 	orr.w	r2, r3, #32
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	65da      	str	r2, [r3, #92]	@ 0x5c
        status = HAL_ERROR;
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	75fb      	strb	r3, [r7, #23]
        break;
 8007b60:	bf00      	nop
    }

    if (status == HAL_OK)
 8007b62:	7dfb      	ldrb	r3, [r7, #23]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d110      	bne.n	8007b8a <HAL_CRYP_Encrypt+0x14a>
    {
      /* Change the CRYP peripheral state */
      hcryp->State = HAL_CRYP_STATE_READY;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
      __HAL_UNLOCK(hcryp);
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	2200      	movs	r2, #0
 8007b74:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8007b78:	e007      	b.n	8007b8a <HAL_CRYP_Encrypt+0x14a>
    }
  }
  else
  {
    /* Busy error code field */
    hcryp->ErrorCode |= HAL_CRYP_ERROR_BUSY;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b7e:	f043 0208 	orr.w	r2, r3, #8
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	65da      	str	r2, [r3, #92]	@ 0x5c
    status = HAL_ERROR;
 8007b86:	2301      	movs	r3, #1
 8007b88:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007b8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3718      	adds	r7, #24
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}
 8007b94:	420c0000 	.word	0x420c0000
 8007b98:	00010060 	.word	0x00010060

08007b9c <HAL_CRYP_Decrypt>:
  * @param  Timeout Specify Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYP_Decrypt(CRYP_HandleTypeDef *hcryp, uint32_t *pInput, uint16_t Size, uint32_t *pOutput,
                                   uint32_t Timeout)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b086      	sub	sp, #24
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	60f8      	str	r0, [r7, #12]
 8007ba4:	60b9      	str	r1, [r7, #8]
 8007ba6:	603b      	str	r3, [r7, #0]
 8007ba8:	4613      	mov	r3, r2
 8007baa:	80fb      	strh	r3, [r7, #6]

  /* Check input buffer size */
  assert_param(IS_CRYP_BUFFERSIZE(algo_assert, hcryp->Init.DataWidthUnit, Size));
#endif /* USE_FULL_ASSERT */

  if (hcryp->State == HAL_CRYP_STATE_READY)
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007bb2:	b2db      	uxtb	r3, r3
 8007bb4:	2b01      	cmp	r3, #1
 8007bb6:	d17f      	bne.n	8007cb8 <HAL_CRYP_Decrypt+0x11c>
  {
    /* Change state Busy */
    hcryp->State = HAL_CRYP_STATE_BUSY;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2202      	movs	r2, #2
 8007bbc:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
    __HAL_LOCK(hcryp);
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8007bc6:	2b01      	cmp	r3, #1
 8007bc8:	d101      	bne.n	8007bce <HAL_CRYP_Decrypt+0x32>
 8007bca:	2302      	movs	r3, #2
 8007bcc:	e07d      	b.n	8007cca <HAL_CRYP_Decrypt+0x12e>
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	2201      	movs	r2, #1
 8007bd2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /*  Reset CrypInCount, CrypOutCount and Initialize pCrypInBuffPtr and pCrypOutBuffPtr  parameters*/
    hcryp->CrypInCount = 0U;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hcryp->CrypOutCount = 0U;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2200      	movs	r2, #0
 8007be2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    hcryp->pCrypInBuffPtr = pInput;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	68ba      	ldr	r2, [r7, #8]
 8007bea:	63da      	str	r2, [r3, #60]	@ 0x3c
    hcryp->pCrypOutBuffPtr = pOutput;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	683a      	ldr	r2, [r7, #0]
 8007bf0:	641a      	str	r2, [r3, #64]	@ 0x40

    /*  Calculate Size parameter in Byte*/
    if (hcryp->Init.DataWidthUnit == CRYP_DATAWIDTHUNIT_WORD)
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d106      	bne.n	8007c08 <HAL_CRYP_Decrypt+0x6c>
    {
      hcryp->Size = Size * 4U;
 8007bfa:	88fb      	ldrh	r3, [r7, #6]
 8007bfc:	009b      	lsls	r3, r3, #2
 8007bfe:	b29a      	uxth	r2, r3
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
 8007c06:	e003      	b.n	8007c10 <HAL_CRYP_Decrypt+0x74>
    }
    else
    {
      hcryp->Size = Size;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	88fa      	ldrh	r2, [r7, #6]
 8007c0c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
    }

    /* Set Decryption operating mode*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_DECRYPT);
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f023 0218 	bic.w	r2, r3, #24
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f042 0210 	orr.w	r2, r2, #16
 8007c22:	601a      	str	r2, [r3, #0]

    /* algo get algorithm selected */
    algo = hcryp->Instance->CR & AES_CR_CHMOD;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	681a      	ldr	r2, [r3, #0]
 8007c2a:	4b2a      	ldr	r3, [pc, #168]	@ (8007cd4 <HAL_CRYP_Decrypt+0x138>)
 8007c2c:	4013      	ands	r3, r2
 8007c2e:	613b      	str	r3, [r7, #16]

    switch (algo)
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c36:	d023      	beq.n	8007c80 <HAL_CRYP_Decrypt+0xe4>
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c3e:	d826      	bhi.n	8007c8e <HAL_CRYP_Decrypt+0xf2>
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	2b60      	cmp	r3, #96	@ 0x60
 8007c44:	d015      	beq.n	8007c72 <HAL_CRYP_Decrypt+0xd6>
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	2b60      	cmp	r3, #96	@ 0x60
 8007c4a:	d820      	bhi.n	8007c8e <HAL_CRYP_Decrypt+0xf2>
 8007c4c:	693b      	ldr	r3, [r7, #16]
 8007c4e:	2b40      	cmp	r3, #64	@ 0x40
 8007c50:	d008      	beq.n	8007c64 <HAL_CRYP_Decrypt+0xc8>
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	2b40      	cmp	r3, #64	@ 0x40
 8007c56:	d81a      	bhi.n	8007c8e <HAL_CRYP_Decrypt+0xf2>
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d002      	beq.n	8007c64 <HAL_CRYP_Decrypt+0xc8>
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	2b20      	cmp	r3, #32
 8007c62:	d114      	bne.n	8007c8e <HAL_CRYP_Decrypt+0xf2>
    {
      case CRYP_AES_ECB:
      case CRYP_AES_CBC:
      case CRYP_AES_CTR:
        /* AES decryption */
        status = CRYP_AES_Decrypt(hcryp, Timeout);
 8007c64:	6a39      	ldr	r1, [r7, #32]
 8007c66:	68f8      	ldr	r0, [r7, #12]
 8007c68:	f000 f930 	bl	8007ecc <CRYP_AES_Decrypt>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	75fb      	strb	r3, [r7, #23]
        break;
 8007c70:	e016      	b.n	8007ca0 <HAL_CRYP_Decrypt+0x104>

      case CRYP_AES_GCM_GMAC:
        /* AES GCM decryption */
        status = CRYP_AESGCM_Process(hcryp, Timeout);
 8007c72:	6a39      	ldr	r1, [r7, #32]
 8007c74:	68f8      	ldr	r0, [r7, #12]
 8007c76:	f000 fbf5 	bl	8008464 <CRYP_AESGCM_Process>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	75fb      	strb	r3, [r7, #23]
        break;
 8007c7e:	e00f      	b.n	8007ca0 <HAL_CRYP_Decrypt+0x104>

      case CRYP_AES_CCM:
        /* AES CCM decryption */
        status = CRYP_AESCCM_Process(hcryp, Timeout);
 8007c80:	6a39      	ldr	r1, [r7, #32]
 8007c82:	68f8      	ldr	r0, [r7, #12]
 8007c84:	f000 fdd0 	bl	8008828 <CRYP_AESCCM_Process>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	75fb      	strb	r3, [r7, #23]
        break;
 8007c8c:	e008      	b.n	8007ca0 <HAL_CRYP_Decrypt+0x104>

      default:
        hcryp->ErrorCode |= HAL_CRYP_ERROR_NOT_SUPPORTED;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c92:	f043 0220 	orr.w	r2, r3, #32
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	65da      	str	r2, [r3, #92]	@ 0x5c
        status = HAL_ERROR;
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	75fb      	strb	r3, [r7, #23]
        break;
 8007c9e:	bf00      	nop
    }

    if (status == HAL_OK)
 8007ca0:	7dfb      	ldrb	r3, [r7, #23]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d110      	bne.n	8007cc8 <HAL_CRYP_Decrypt+0x12c>
    {
      /* Change the CRYP peripheral state */
      hcryp->State = HAL_CRYP_STATE_READY;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2201      	movs	r2, #1
 8007caa:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
      __HAL_UNLOCK(hcryp);
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8007cb6:	e007      	b.n	8007cc8 <HAL_CRYP_Decrypt+0x12c>
    }
  }
  else
  {
    /* Busy error code field */
    hcryp->ErrorCode |= HAL_CRYP_ERROR_BUSY;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007cbc:	f043 0208 	orr.w	r2, r3, #8
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	65da      	str	r2, [r3, #92]	@ 0x5c
    status = HAL_ERROR;
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007cc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	3718      	adds	r7, #24
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}
 8007cd2:	bf00      	nop
 8007cd4:	00010060 	.word	0x00010060

08007cd8 <HAL_CRYP_ErrorCallback>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module.
  * @retval None
  */
__weak void HAL_CRYP_ErrorCallback(CRYP_HandleTypeDef *hcryp)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b083      	sub	sp, #12
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  UNUSED(hcryp);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_CRYP_ErrorCallback can be implemented in the user file
   */
}
 8007ce0:	bf00      	nop
 8007ce2:	370c      	adds	r7, #12
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr

08007cec <CRYP_AES_Encrypt>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure
  * @param  Timeout specify Timeout value
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_AES_Encrypt(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b086      	sub	sp, #24
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
 8007cf4:	6039      	str	r1, [r7, #0]
  uint16_t incount;  /* Temporary CrypInCount Value */
  uint16_t outcount;  /* Temporary CrypOutCount Value */
  uint32_t dokeyivconfig = 1U; /* By default, carry out peripheral Key and IV configuration */
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	613b      	str	r3, [r7, #16]
  uint32_t tickstart;

  if ((hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE) || (hcryp->Init.KeyIVConfigSkip == CRYP_IVCONFIG_ONCE))
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cfe:	2b01      	cmp	r3, #1
 8007d00:	d003      	beq.n	8007d0a <CRYP_AES_Encrypt+0x1e>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d06:	2b04      	cmp	r3, #4
 8007d08:	d109      	bne.n	8007d1e <CRYP_AES_Encrypt+0x32>
  {
    if (hcryp->KeyIVConfig == 1U)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d0e:	2b01      	cmp	r3, #1
 8007d10:	d102      	bne.n	8007d18 <CRYP_AES_Encrypt+0x2c>
    {
      /* If the Key and IV configuration has to be done only once
         and if it has already been done, skip it */
      dokeyivconfig = 0U;
 8007d12:	2300      	movs	r3, #0
 8007d14:	613b      	str	r3, [r7, #16]
 8007d16:	e002      	b.n	8007d1e <CRYP_AES_Encrypt+0x32>
    else
    {
      /* If the Key and IV configuration has to be done only once
         and if it has not been done already, do it and set KeyIVConfig
         to keep track it won't have to be done again next time */
      hcryp->KeyIVConfig = 1U;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  if (dokeyivconfig == 1U)
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	2b01      	cmp	r3, #1
 8007d22:	d17a      	bne.n	8007e1a <CRYP_AES_Encrypt+0x12e>
  {
    if ((hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE) || \
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d28:	2b01      	cmp	r3, #1
 8007d2a:	d003      	beq.n	8007d34 <CRYP_AES_Encrypt+0x48>
        (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ALWAYS))
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    if ((hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE) || \
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d160      	bne.n	8007df6 <CRYP_AES_Encrypt+0x10a>
    {
      if (hcryp->Instance == AES)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a63      	ldr	r2, [pc, #396]	@ (8007ec8 <CRYP_AES_Encrypt+0x1dc>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d114      	bne.n	8007d68 <CRYP_AES_Encrypt+0x7c>
      {
        /* Set the Key */
        if (hcryp->Init.KeyMode != CRYP_KEYMODE_SHARED)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d42:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007d46:	d006      	beq.n	8007d56 <CRYP_AES_Encrypt+0x6a>
        {
          CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	689b      	ldr	r3, [r3, #8]
 8007d4c:	4619      	mov	r1, r3
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f000 fb00 	bl	8008354 <CRYP_SetKey>
 8007d54:	e048      	b.n	8007de8 <CRYP_AES_Encrypt+0xfc>
        }
        else /* After sharing the key, AES should set KMOD[1:0] to 00.*/
        {
          hcryp->Instance->CR &=  ~CRYP_KEYMODE_SHARED;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	681a      	ldr	r2, [r3, #0]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 8007d64:	601a      	str	r2, [r3, #0]
 8007d66:	e03f      	b.n	8007de8 <CRYP_AES_Encrypt+0xfc>
        }
      }
      else
      {
        /* We should re-write Key, in the case where we change key after first operation */
        if ((hcryp->Init.KeySelect == CRYP_KEYSEL_NORMAL) && (hcryp->Init.KeyMode == CRYP_KEYMODE_NORMAL))
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d109      	bne.n	8007d84 <CRYP_AES_Encrypt+0x98>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d105      	bne.n	8007d84 <CRYP_AES_Encrypt+0x98>
        {
          /* Set the Key */
          CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	689b      	ldr	r3, [r3, #8]
 8007d7c:	4619      	mov	r1, r3
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f000 fae8 	bl	8008354 <CRYP_SetKey>
        }
        /* Get tick */
        tickstart = HAL_GetTick();
 8007d84:	f7fd fe24 	bl	80059d0 <HAL_GetTick>
 8007d88:	60f8      	str	r0, [r7, #12]

        while (HAL_IS_BIT_CLR(hcryp->Instance->SR, CRYP_FLAG_KEYVALID))
 8007d8a:	e026      	b.n	8007dda <CRYP_AES_Encrypt+0xee>
        {
          /* Check for the Timeout */
          if (Timeout != HAL_MAX_DELAY)
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d92:	d022      	beq.n	8007dda <CRYP_AES_Encrypt+0xee>
          {
            if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007d94:	f7fd fe1c 	bl	80059d0 <HAL_GetTick>
 8007d98:	4602      	mov	r2, r0
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	1ad3      	subs	r3, r2, r3
 8007d9e:	683a      	ldr	r2, [r7, #0]
 8007da0:	429a      	cmp	r2, r3
 8007da2:	d302      	bcc.n	8007daa <CRYP_AES_Encrypt+0xbe>
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d117      	bne.n	8007dda <CRYP_AES_Encrypt+0xee>
            {
              /* Disable the CRYP peripheral clock */
              __HAL_CRYP_DISABLE(hcryp);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	681a      	ldr	r2, [r3, #0]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f022 0201 	bic.w	r2, r2, #1
 8007db8:	601a      	str	r2, [r3, #0]

              /* Change state */
              hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007dbe:	f043 0210 	orr.w	r2, r3, #16
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	65da      	str	r2, [r3, #92]	@ 0x5c
              hcryp->State = HAL_CRYP_STATE_READY;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2201      	movs	r2, #1
 8007dca:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
              __HAL_UNLOCK(hcryp);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
              return HAL_ERROR;
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	e071      	b.n	8007ebe <CRYP_AES_Encrypt+0x1d2>
        while (HAL_IS_BIT_CLR(hcryp->Instance->SR, CRYP_FLAG_KEYVALID))
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	685b      	ldr	r3, [r3, #4]
 8007de0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d0d1      	beq.n	8007d8c <CRYP_AES_Encrypt+0xa0>
            }
          }
        }
      }
      if (hcryp->Init.Algorithm != CRYP_AES_ECB)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	695b      	ldr	r3, [r3, #20]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d002      	beq.n	8007df6 <CRYP_AES_Encrypt+0x10a>
      {
        /* Set the Initialization Vector */
        CRYP_SetIV(hcryp);
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f000 fb10 	bl	8008416 <CRYP_SetIV>
      }
    }
    /* key & IV configuration for CBC and CTR in interleave mode */
    if (hcryp->Init.KeyIVConfigSkip == CRYP_IVCONFIG_ONCE)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dfa:	2b04      	cmp	r3, #4
 8007dfc:	d117      	bne.n	8007e2e <CRYP_AES_Encrypt+0x142>
    {
      /* Set the Key */
      CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	689b      	ldr	r3, [r3, #8]
 8007e02:	4619      	mov	r1, r3
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f000 faa5 	bl	8008354 <CRYP_SetKey>
      if (hcryp->Init.Algorithm != CRYP_AES_ECB)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	695b      	ldr	r3, [r3, #20]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d00d      	beq.n	8007e2e <CRYP_AES_Encrypt+0x142>
      {
        /* Set the Initialization Vector*/
        CRYP_SetIV(hcryp);
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f000 faff 	bl	8008416 <CRYP_SetIV>
 8007e18:	e009      	b.n	8007e2e <CRYP_AES_Encrypt+0x142>
    }
  } /* If (dokeyivconfig == 1U) */
  else
  {
    /* interleave mode Key configuration  */
    if (hcryp->Init.KeyIVConfigSkip == CRYP_IVCONFIG_ONCE)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e1e:	2b04      	cmp	r3, #4
 8007e20:	d105      	bne.n	8007e2e <CRYP_AES_Encrypt+0x142>
    {
      /* Set the Key */
      CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	689b      	ldr	r3, [r3, #8]
 8007e26:	4619      	mov	r1, r3
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f000 fa93 	bl	8008354 <CRYP_SetKey>
    }
  }
  /* Peripheral Key configuration to not do, IV to configure for CBC */
  if (hcryp->Init.KeyIVConfigSkip == CRYP_KEYNOCONFIG)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e32:	2b02      	cmp	r3, #2
 8007e34:	d106      	bne.n	8007e44 <CRYP_AES_Encrypt+0x158>
  {
    if (hcryp->Init.Algorithm != CRYP_AES_ECB)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	695b      	ldr	r3, [r3, #20]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d002      	beq.n	8007e44 <CRYP_AES_Encrypt+0x158>
    {
      /* Set the Initialization Vector*/
      CRYP_SetIV(hcryp);
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f000 fae9 	bl	8008416 <CRYP_SetIV>
    }
  }

  /* Set the phase */
  hcryp->Phase = CRYP_PHASE_PROCESS;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2202      	movs	r2, #2
 8007e48:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable CRYP */
  __HAL_CRYP_ENABLE(hcryp);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	681a      	ldr	r2, [r3, #0]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f042 0201 	orr.w	r2, r2, #1
 8007e58:	601a      	str	r2, [r3, #0]

  incount = hcryp->CrypInCount;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007e60:	82fb      	strh	r3, [r7, #22]
  outcount = hcryp->CrypOutCount;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8007e68:	82bb      	strh	r3, [r7, #20]
  while ((incount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 8007e6a:	e00b      	b.n	8007e84 <CRYP_AES_Encrypt+0x198>
  {
    /* Write plain data and get cipher data */
    CRYP_AES_ProcessData(hcryp, Timeout);
 8007e6c:	6839      	ldr	r1, [r7, #0]
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 f9c0 	bl	80081f4 <CRYP_AES_ProcessData>
    incount = hcryp->CrypInCount;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007e7a:	82fb      	strh	r3, [r7, #22]
    outcount = hcryp->CrypOutCount;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8007e82:	82bb      	strh	r3, [r7, #20]
  while ((incount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8007e8a:	089b      	lsrs	r3, r3, #2
 8007e8c:	b29b      	uxth	r3, r3
 8007e8e:	8afa      	ldrh	r2, [r7, #22]
 8007e90:	429a      	cmp	r2, r3
 8007e92:	d207      	bcs.n	8007ea4 <CRYP_AES_Encrypt+0x1b8>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8007e9a:	089b      	lsrs	r3, r3, #2
 8007e9c:	b29b      	uxth	r3, r3
 8007e9e:	8aba      	ldrh	r2, [r7, #20]
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d3e3      	bcc.n	8007e6c <CRYP_AES_Encrypt+0x180>
  }

  /* Disable CRYP */
  __HAL_CRYP_DISABLE(hcryp);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	681a      	ldr	r2, [r3, #0]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f022 0201 	bic.w	r2, r2, #1
 8007eb2:	601a      	str	r2, [r3, #0]

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_READY;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  return HAL_OK;
 8007ebc:	2300      	movs	r3, #0
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3718      	adds	r7, #24
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}
 8007ec6:	bf00      	nop
 8007ec8:	420c0000 	.word	0x420c0000

08007ecc <CRYP_AES_Decrypt>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure
  * @param  Timeout Specify Timeout value
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_AES_Decrypt(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b084      	sub	sp, #16
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
 8007ed4:	6039      	str	r1, [r7, #0]
  uint16_t incount;  /* Temporary CrypInCount Value */
  uint16_t outcount;  /* Temporary CrypOutCount Value */
  uint32_t dokeyivconfig = 1U; /* By default, carry out peripheral Key and IV configuration */
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	60bb      	str	r3, [r7, #8]

  if ((hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE) || (hcryp->Init.KeyIVConfigSkip == CRYP_IVCONFIG_ONCE))
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ede:	2b01      	cmp	r3, #1
 8007ee0:	d003      	beq.n	8007eea <CRYP_AES_Decrypt+0x1e>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ee6:	2b04      	cmp	r3, #4
 8007ee8:	d109      	bne.n	8007efe <CRYP_AES_Decrypt+0x32>
  {
    if (hcryp->KeyIVConfig == 1U)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007eee:	2b01      	cmp	r3, #1
 8007ef0:	d102      	bne.n	8007ef8 <CRYP_AES_Decrypt+0x2c>
    {
      /* If the Key and IV configuration has to be done only once
         and if it has already been done, skip it */
      dokeyivconfig = 0U;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	60bb      	str	r3, [r7, #8]
 8007ef6:	e002      	b.n	8007efe <CRYP_AES_Decrypt+0x32>
    else
    {
      /* If the Key and IV configuration has to be done only once
         and if it has not been done already, do it and set KeyIVConfig
         to keep track it won't have to be done again next time */
      hcryp->KeyIVConfig = 1U;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2201      	movs	r2, #1
 8007efc:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  if (dokeyivconfig == 1U)
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	2b01      	cmp	r3, #1
 8007f02:	f040 80e1 	bne.w	80080c8 <CRYP_AES_Decrypt+0x1fc>
  {
    if (hcryp->Instance == AES)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4a95      	ldr	r2, [pc, #596]	@ (8008160 <CRYP_AES_Decrypt+0x294>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d17b      	bne.n	8008008 <CRYP_AES_Decrypt+0x13c>
    {
      /*  Key preparation for ECB/CBC */
      if (hcryp->Init.Algorithm != CRYP_AES_CTR)   /*ECB or CBC*/
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	695b      	ldr	r3, [r3, #20]
 8007f14:	2b40      	cmp	r3, #64	@ 0x40
 8007f16:	d05e      	beq.n	8007fd6 <CRYP_AES_Decrypt+0x10a>
      {
        /* key preparation for decryption, operating mode 2*/
        MODIFY_REG(hcryp->Instance->CR, AES_CR_KMOD, CRYP_KEYMODE_NORMAL);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	681a      	ldr	r2, [r3, #0]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8007f26:	601a      	str	r2, [r3, #0]
        MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_KEYDERIVATION);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f023 0218 	bic.w	r2, r3, #24
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f042 0208 	orr.w	r2, r2, #8
 8007f3a:	601a      	str	r2, [r3, #0]

        /* Set the Key */
        if ((hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE) || \
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f40:	2b01      	cmp	r3, #1
 8007f42:	d003      	beq.n	8007f4c <CRYP_AES_Decrypt+0x80>
            (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ALWAYS))
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if ((hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE) || \
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d114      	bne.n	8007f76 <CRYP_AES_Decrypt+0xaa>
        {
          if (hcryp->Init.KeyMode != CRYP_KEYMODE_SHARED)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f50:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007f54:	d006      	beq.n	8007f64 <CRYP_AES_Decrypt+0x98>
          {
            CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	689b      	ldr	r3, [r3, #8]
 8007f5a:	4619      	mov	r1, r3
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f000 f9f9 	bl	8008354 <CRYP_SetKey>
          if (hcryp->Init.KeyMode != CRYP_KEYMODE_SHARED)
 8007f62:	e012      	b.n	8007f8a <CRYP_AES_Decrypt+0xbe>
          }
          else /*after sharing the key, AES should set KMOD[1:0] to 00.*/
          {
            hcryp->Instance->CR &=  ~CRYP_KEYMODE_SHARED;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	681a      	ldr	r2, [r3, #0]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 8007f72:	601a      	str	r2, [r3, #0]
          if (hcryp->Init.KeyMode != CRYP_KEYMODE_SHARED)
 8007f74:	e009      	b.n	8007f8a <CRYP_AES_Decrypt+0xbe>
          }
        }

        /* interleave mode Key configuration  */
        else if (hcryp->Init.KeyIVConfigSkip == CRYP_IVCONFIG_ONCE)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f7a:	2b04      	cmp	r3, #4
 8007f7c:	d105      	bne.n	8007f8a <CRYP_AES_Decrypt+0xbe>
        {
          /* Set the Key */
          CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	689b      	ldr	r3, [r3, #8]
 8007f82:	4619      	mov	r1, r3
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f000 f9e5 	bl	8008354 <CRYP_SetKey>
        {
          /* Nothing to do */
        }

        /* Enable CRYP */
        __HAL_CRYP_ENABLE(hcryp);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	681a      	ldr	r2, [r3, #0]
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f042 0201 	orr.w	r2, r2, #1
 8007f98:	601a      	str	r2, [r3, #0]

        /* Wait for CCF flag to be raised */
        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8007f9a:	6839      	ldr	r1, [r7, #0]
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f000 ffef 	bl	8008f80 <CRYP_WaitOnCCFlag>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d001      	beq.n	8007fac <CRYP_AES_Decrypt+0xe0>
        {
          return HAL_ERROR;
 8007fa8:	2301      	movs	r3, #1
 8007faa:	e11e      	b.n	80081ea <CRYP_AES_Decrypt+0x31e>
        }
        /* Clear CCF Flag */
        __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CLEAR_CCF);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f8d3 2308 	ldr.w	r2, [r3, #776]	@ 0x308
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f042 0201 	orr.w	r2, r2, #1
 8007fbc:	f8c3 2308 	str.w	r2, [r3, #776]	@ 0x308

        /* Return to decryption operating mode(Mode 3)*/
        MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_DECRYPT);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f023 0218 	bic.w	r2, r3, #24
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f042 0210 	orr.w	r2, r2, #16
 8007fd2:	601a      	str	r2, [r3, #0]
 8007fd4:	e070      	b.n	80080b8 <CRYP_AES_Decrypt+0x1ec>
      }
      else  /*Algorithm CTR */
      {
        /* Set the Key */
        if (hcryp->Init.KeyIVConfigSkip != CRYP_KEYNOCONFIG)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fda:	2b02      	cmp	r3, #2
 8007fdc:	d06c      	beq.n	80080b8 <CRYP_AES_Decrypt+0x1ec>
        {
          if (hcryp->Init.KeyMode != CRYP_KEYMODE_SHARED)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fe2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007fe6:	d006      	beq.n	8007ff6 <CRYP_AES_Decrypt+0x12a>
          {
            CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	689b      	ldr	r3, [r3, #8]
 8007fec:	4619      	mov	r1, r3
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 f9b0 	bl	8008354 <CRYP_SetKey>
 8007ff4:	e060      	b.n	80080b8 <CRYP_AES_Decrypt+0x1ec>
          }
          else /*after sharing the key, AES should set KMOD[1:0] to 00.*/
          {
            hcryp->Instance->CR &=  ~CRYP_KEYMODE_SHARED;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	681a      	ldr	r2, [r3, #0]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 8008004:	601a      	str	r2, [r3, #0]
 8008006:	e057      	b.n	80080b8 <CRYP_AES_Decrypt+0x1ec>
        }
      }
    }
    else /*SAES*/
    {
      if (hcryp->Init.Algorithm != CRYP_AES_CTR)   /*ECB or CBC*/
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	695b      	ldr	r3, [r3, #20]
 800800c:	2b40      	cmp	r3, #64	@ 0x40
 800800e:	d041      	beq.n	8008094 <CRYP_AES_Decrypt+0x1c8>
      {
        /* key preparation for decryption, operating mode 2*/
        MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_KEYDERIVATION);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f023 0218 	bic.w	r2, r3, #24
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f042 0208 	orr.w	r2, r2, #8
 8008022:	601a      	str	r2, [r3, #0]

        /* we should re-write Key, in the case where we change key after first operation*/
        if ((hcryp->Init.KeySelect == CRYP_KEYSEL_NORMAL) && (hcryp->Init.KeyMode == CRYP_KEYMODE_NORMAL))
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008028:	2b00      	cmp	r3, #0
 800802a:	d10d      	bne.n	8008048 <CRYP_AES_Decrypt+0x17c>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008030:	2b00      	cmp	r3, #0
 8008032:	d109      	bne.n	8008048 <CRYP_AES_Decrypt+0x17c>
        {
          if (hcryp->Init.KeyIVConfigSkip != CRYP_KEYNOCONFIG)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008038:	2b02      	cmp	r3, #2
 800803a:	d005      	beq.n	8008048 <CRYP_AES_Decrypt+0x17c>
          {
            CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	689b      	ldr	r3, [r3, #8]
 8008040:	4619      	mov	r1, r3
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f000 f986 	bl	8008354 <CRYP_SetKey>
          }
        }

        /* Enable SAES */
        __HAL_CRYP_ENABLE(hcryp);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	681a      	ldr	r2, [r3, #0]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f042 0201 	orr.w	r2, r2, #1
 8008056:	601a      	str	r2, [r3, #0]

        /* Wait for CCF flag to be raised */
        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8008058:	6839      	ldr	r1, [r7, #0]
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f000 ff90 	bl	8008f80 <CRYP_WaitOnCCFlag>
 8008060:	4603      	mov	r3, r0
 8008062:	2b00      	cmp	r3, #0
 8008064:	d001      	beq.n	800806a <CRYP_AES_Decrypt+0x19e>
        {
          return HAL_ERROR;
 8008066:	2301      	movs	r3, #1
 8008068:	e0bf      	b.n	80081ea <CRYP_AES_Decrypt+0x31e>
        }
        /* Clear CCF Flag */
        __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CLEAR_CCF);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f8d3 2308 	ldr.w	r2, [r3, #776]	@ 0x308
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f042 0201 	orr.w	r2, r2, #1
 800807a:	f8c3 2308 	str.w	r2, [r3, #776]	@ 0x308

        /*  End of Key preparation for ECB/CBC */
        /* Return to decryption operating mode(Mode 3)*/
        MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_DECRYPT);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f023 0218 	bic.w	r2, r3, #24
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f042 0210 	orr.w	r2, r2, #16
 8008090:	601a      	str	r2, [r3, #0]
 8008092:	e011      	b.n	80080b8 <CRYP_AES_Decrypt+0x1ec>
      }
      else  /*Algorithm CTR */
      {
        /* we should re-write Key, in the case where we change key after first operation*/
        if ((hcryp->Init.KeySelect == CRYP_KEYSEL_NORMAL) && (hcryp->Init.KeyMode == CRYP_KEYMODE_NORMAL))
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008098:	2b00      	cmp	r3, #0
 800809a:	d10d      	bne.n	80080b8 <CRYP_AES_Decrypt+0x1ec>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d109      	bne.n	80080b8 <CRYP_AES_Decrypt+0x1ec>
        {
          if (hcryp->Init.KeyIVConfigSkip != CRYP_KEYNOCONFIG)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080a8:	2b02      	cmp	r3, #2
 80080aa:	d005      	beq.n	80080b8 <CRYP_AES_Decrypt+0x1ec>
          {
            CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	689b      	ldr	r3, [r3, #8]
 80080b0:	4619      	mov	r1, r3
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f000 f94e 	bl	8008354 <CRYP_SetKey>
          }
        }
      }
    }
    /* Set IV */
    if (hcryp->Init.Algorithm != CRYP_AES_ECB)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	695b      	ldr	r3, [r3, #20]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d057      	beq.n	8008170 <CRYP_AES_Decrypt+0x2a4>
    {
      /* Set the Initialization Vector*/
      CRYP_SetIV(hcryp);
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f000 f9a8 	bl	8008416 <CRYP_SetIV>
 80080c6:	e053      	b.n	8008170 <CRYP_AES_Decrypt+0x2a4>
  } /* if (dokeyivconfig == 1U) */

  else /* if (dokeyivconfig == 0U) */
  {
    /* interleave mode Key configuration  */
    if (hcryp->Init.KeyIVConfigSkip == CRYP_IVCONFIG_ONCE)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080cc:	2b04      	cmp	r3, #4
 80080ce:	d14f      	bne.n	8008170 <CRYP_AES_Decrypt+0x2a4>
    {
      if (hcryp->Instance == AES)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4a22      	ldr	r2, [pc, #136]	@ (8008160 <CRYP_AES_Decrypt+0x294>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d14a      	bne.n	8008170 <CRYP_AES_Decrypt+0x2a4>
      {
        /*  Key preparation for ECB/CBC */
        if (hcryp->Init.Algorithm != CRYP_AES_CTR)   /*ECB or CBC*/
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	695b      	ldr	r3, [r3, #20]
 80080de:	2b40      	cmp	r3, #64	@ 0x40
 80080e0:	d040      	beq.n	8008164 <CRYP_AES_Decrypt+0x298>
        {
          /* key preparation for decryption, operating mode 2*/
          MODIFY_REG(hcryp->Instance->CR, AES_CR_KMOD, CRYP_KEYMODE_NORMAL);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	681a      	ldr	r2, [r3, #0]
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80080f0:	601a      	str	r2, [r3, #0]
          MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_KEYDERIVATION);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f023 0218 	bic.w	r2, r3, #24
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f042 0208 	orr.w	r2, r2, #8
 8008104:	601a      	str	r2, [r3, #0]

          /* Set the Key */
          CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	689b      	ldr	r3, [r3, #8]
 800810a:	4619      	mov	r1, r3
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f000 f921 	bl	8008354 <CRYP_SetKey>

          /* Enable CRYP */
          __HAL_CRYP_ENABLE(hcryp);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	681a      	ldr	r2, [r3, #0]
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f042 0201 	orr.w	r2, r2, #1
 8008120:	601a      	str	r2, [r3, #0]

          /* Wait for CCF flag to be raised */
          if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8008122:	6839      	ldr	r1, [r7, #0]
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f000 ff2b 	bl	8008f80 <CRYP_WaitOnCCFlag>
 800812a:	4603      	mov	r3, r0
 800812c:	2b00      	cmp	r3, #0
 800812e:	d001      	beq.n	8008134 <CRYP_AES_Decrypt+0x268>
          {
            return HAL_ERROR;
 8008130:	2301      	movs	r3, #1
 8008132:	e05a      	b.n	80081ea <CRYP_AES_Decrypt+0x31e>
          }
          /* Clear CCF Flag */
          __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CLEAR_CCF);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f8d3 2308 	ldr.w	r2, [r3, #776]	@ 0x308
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f042 0201 	orr.w	r2, r2, #1
 8008144:	f8c3 2308 	str.w	r2, [r3, #776]	@ 0x308

          /* Return to decryption operating mode(Mode 3)*/
          MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_DECRYPT);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f023 0218 	bic.w	r2, r3, #24
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f042 0210 	orr.w	r2, r2, #16
 800815a:	601a      	str	r2, [r3, #0]
 800815c:	e008      	b.n	8008170 <CRYP_AES_Decrypt+0x2a4>
 800815e:	bf00      	nop
 8008160:	420c0000 	.word	0x420c0000
        }
        else  /*Algorithm CTR */
        {
          /* Set the Key */
          CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	689b      	ldr	r3, [r3, #8]
 8008168:	4619      	mov	r1, r3
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f000 f8f2 	bl	8008354 <CRYP_SetKey>
      }
    }

  }
  /* Set the phase */
  hcryp->Phase = CRYP_PHASE_PROCESS;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2202      	movs	r2, #2
 8008174:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable CRYP */
  __HAL_CRYP_ENABLE(hcryp);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	681a      	ldr	r2, [r3, #0]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f042 0201 	orr.w	r2, r2, #1
 8008184:	601a      	str	r2, [r3, #0]

  incount = hcryp->CrypInCount;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800818c:	81fb      	strh	r3, [r7, #14]
  outcount = hcryp->CrypOutCount;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8008194:	81bb      	strh	r3, [r7, #12]
  while ((incount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 8008196:	e00b      	b.n	80081b0 <CRYP_AES_Decrypt+0x2e4>
  {
    /* Write plain data and get cipher data */
    CRYP_AES_ProcessData(hcryp, Timeout);
 8008198:	6839      	ldr	r1, [r7, #0]
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f000 f82a 	bl	80081f4 <CRYP_AES_ProcessData>
    incount = hcryp->CrypInCount;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80081a6:	81fb      	strh	r3, [r7, #14]
    outcount = hcryp->CrypOutCount;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80081ae:	81bb      	strh	r3, [r7, #12]
  while ((incount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80081b6:	089b      	lsrs	r3, r3, #2
 80081b8:	b29b      	uxth	r3, r3
 80081ba:	89fa      	ldrh	r2, [r7, #14]
 80081bc:	429a      	cmp	r2, r3
 80081be:	d207      	bcs.n	80081d0 <CRYP_AES_Decrypt+0x304>
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80081c6:	089b      	lsrs	r3, r3, #2
 80081c8:	b29b      	uxth	r3, r3
 80081ca:	89ba      	ldrh	r2, [r7, #12]
 80081cc:	429a      	cmp	r2, r3
 80081ce:	d3e3      	bcc.n	8008198 <CRYP_AES_Decrypt+0x2cc>
  }
  /* Disable CRYP */
  __HAL_CRYP_DISABLE(hcryp);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	681a      	ldr	r2, [r3, #0]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f022 0201 	bic.w	r2, r2, #1
 80081de:	601a      	str	r2, [r3, #0]

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_READY;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2201      	movs	r2, #1
 80081e4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  return HAL_OK;
 80081e8:	2300      	movs	r3, #0
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3710      	adds	r7, #16
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}
 80081f2:	bf00      	nop

080081f4 <CRYP_AES_ProcessData>:
  *         the configuration information for CRYP module
  * @param  Timeout Specify Timeout value
  * @retval None
  */
static void CRYP_AES_ProcessData(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b088      	sub	sp, #32
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	6039      	str	r1, [r7, #0]

  uint32_t temp[4];  /* Temporary CrypOutBuff */
  uint32_t i;

  /* Write the input block in the IN FIFO */
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008208:	b29b      	uxth	r3, r3
 800820a:	009b      	lsls	r3, r3, #2
 800820c:	441a      	add	r2, r3
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	6812      	ldr	r2, [r2, #0]
 8008214:	609a      	str	r2, [r3, #8]
  hcryp->CrypInCount++;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800821c:	b29b      	uxth	r3, r3
 800821e:	3301      	adds	r3, #1
 8008220:	b29a      	uxth	r2, r3
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008232:	b29b      	uxth	r3, r3
 8008234:	009b      	lsls	r3, r3, #2
 8008236:	441a      	add	r2, r3
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	6812      	ldr	r2, [r2, #0]
 800823e:	609a      	str	r2, [r3, #8]
  hcryp->CrypInCount++;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008246:	b29b      	uxth	r3, r3
 8008248:	3301      	adds	r3, #1
 800824a:	b29a      	uxth	r2, r3
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800825c:	b29b      	uxth	r3, r3
 800825e:	009b      	lsls	r3, r3, #2
 8008260:	441a      	add	r2, r3
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	6812      	ldr	r2, [r2, #0]
 8008268:	609a      	str	r2, [r3, #8]
  hcryp->CrypInCount++;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008270:	b29b      	uxth	r3, r3
 8008272:	3301      	adds	r3, #1
 8008274:	b29a      	uxth	r2, r3
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008286:	b29b      	uxth	r3, r3
 8008288:	009b      	lsls	r3, r3, #2
 800828a:	441a      	add	r2, r3
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	6812      	ldr	r2, [r2, #0]
 8008292:	609a      	str	r2, [r3, #8]
  hcryp->CrypInCount++;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800829a:	b29b      	uxth	r3, r3
 800829c:	3301      	adds	r3, #1
 800829e:	b29a      	uxth	r2, r3
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Wait for CCF flag to be raised */
  if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 80082a6:	6839      	ldr	r1, [r7, #0]
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f000 fe69 	bl	8008f80 <CRYP_WaitOnCCFlag>
 80082ae:	4603      	mov	r3, r0
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d002      	beq.n	80082ba <CRYP_AES_ProcessData+0xc6>
    /*Call registered error callback*/
#if (USE_HAL_CRYP_REGISTER_CALLBACKS == 1U)
    hcryp->ErrorCallback(hcryp);
#else
    /*Call legacy weak error callback*/
    HAL_CRYP_ErrorCallback(hcryp);
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f7ff fd0f 	bl	8007cd8 <HAL_CRYP_ErrorCallback>
#endif /* USE_HAL_CRYP_REGISTER_CALLBACKS */
  }

  /* Clear CCF Flag */
  __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CLEAR_CCF);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f8d3 2308 	ldr.w	r2, [r3, #776]	@ 0x308
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f042 0201 	orr.w	r2, r2, #1
 80082ca:	f8c3 2308 	str.w	r2, [r3, #776]	@ 0x308

  /* Read the output block from the output FIFO and put them in temporary buffer then
     get CrypOutBuff from temporary buffer*/
  for (i = 0U; i < 4U; i++)
 80082ce:	2300      	movs	r3, #0
 80082d0:	61fb      	str	r3, [r7, #28]
 80082d2:	e00b      	b.n	80082ec <CRYP_AES_ProcessData+0xf8>
  {
    temp[i] = hcryp->Instance->DOUTR;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	68da      	ldr	r2, [r3, #12]
 80082da:	69fb      	ldr	r3, [r7, #28]
 80082dc:	009b      	lsls	r3, r3, #2
 80082de:	3320      	adds	r3, #32
 80082e0:	443b      	add	r3, r7
 80082e2:	f843 2c14 	str.w	r2, [r3, #-20]
  for (i = 0U; i < 4U; i++)
 80082e6:	69fb      	ldr	r3, [r7, #28]
 80082e8:	3301      	adds	r3, #1
 80082ea:	61fb      	str	r3, [r7, #28]
 80082ec:	69fb      	ldr	r3, [r7, #28]
 80082ee:	2b03      	cmp	r3, #3
 80082f0:	d9f0      	bls.n	80082d4 <CRYP_AES_ProcessData+0xe0>
  }
  i = 0U;
 80082f2:	2300      	movs	r3, #0
 80082f4:	61fb      	str	r3, [r7, #28]
  while ((hcryp->CrypOutCount < ((hcryp->Size + 3U) / 4U)) && (i < 4U))
 80082f6:	e01a      	b.n	800832e <CRYP_AES_ProcessData+0x13a>
  {
    *(uint32_t *)(hcryp->pCrypOutBuffPtr + hcryp->CrypOutCount) = temp[i];
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8008302:	b29b      	uxth	r3, r3
 8008304:	009b      	lsls	r3, r3, #2
 8008306:	441a      	add	r2, r3
 8008308:	69fb      	ldr	r3, [r7, #28]
 800830a:	009b      	lsls	r3, r3, #2
 800830c:	3320      	adds	r3, #32
 800830e:	443b      	add	r3, r7
 8008310:	f853 3c14 	ldr.w	r3, [r3, #-20]
 8008314:	6013      	str	r3, [r2, #0]
    hcryp->CrypOutCount++;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800831c:	b29b      	uxth	r3, r3
 800831e:	3301      	adds	r3, #1
 8008320:	b29a      	uxth	r2, r3
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    i++;
 8008328:	69fb      	ldr	r3, [r7, #28]
 800832a:	3301      	adds	r3, #1
 800832c:	61fb      	str	r3, [r7, #28]
  while ((hcryp->CrypOutCount < ((hcryp->Size + 3U) / 4U)) && (i < 4U))
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8008334:	b29b      	uxth	r3, r3
 8008336:	461a      	mov	r2, r3
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800833e:	3303      	adds	r3, #3
 8008340:	089b      	lsrs	r3, r3, #2
 8008342:	429a      	cmp	r2, r3
 8008344:	d202      	bcs.n	800834c <CRYP_AES_ProcessData+0x158>
 8008346:	69fb      	ldr	r3, [r7, #28]
 8008348:	2b03      	cmp	r3, #3
 800834a:	d9d5      	bls.n	80082f8 <CRYP_AES_ProcessData+0x104>
  }
}
 800834c:	bf00      	nop
 800834e:	3720      	adds	r7, #32
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}

08008354 <CRYP_SetKey>:
  * @param  KeySize Size of Key
  * @note   If pKey is NULL, the Key registers are not written.
  * @retval None
  */
static void CRYP_SetKey(CRYP_HandleTypeDef *hcryp, uint32_t KeySize)
{
 8008354:	b480      	push	{r7}
 8008356:	b083      	sub	sp, #12
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
 800835c:	6039      	str	r1, [r7, #0]
  if (hcryp->Init.pKey != NULL)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	68db      	ldr	r3, [r3, #12]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d051      	beq.n	800840a <CRYP_SetKey+0xb6>
  {
    switch (KeySize)
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d034      	beq.n	80083d6 <CRYP_SetKey+0x82>
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008372:	d149      	bne.n	8008408 <CRYP_SetKey+0xb4>
    {
      case CRYP_KEYSIZE_256B:
        hcryp->Instance->KEYR7 = *(uint32_t *)(hcryp->Init.pKey);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	68da      	ldr	r2, [r3, #12]
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	6812      	ldr	r2, [r2, #0]
 800837e:	63da      	str	r2, [r3, #60]	@ 0x3c
        hcryp->Instance->KEYR6 = *(uint32_t *)(hcryp->Init.pKey + 1U);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	68da      	ldr	r2, [r3, #12]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	6852      	ldr	r2, [r2, #4]
 800838a:	639a      	str	r2, [r3, #56]	@ 0x38
        hcryp->Instance->KEYR5 = *(uint32_t *)(hcryp->Init.pKey + 2U);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	68da      	ldr	r2, [r3, #12]
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	6892      	ldr	r2, [r2, #8]
 8008396:	635a      	str	r2, [r3, #52]	@ 0x34
        hcryp->Instance->KEYR4 = *(uint32_t *)(hcryp->Init.pKey + 3U);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	68da      	ldr	r2, [r3, #12]
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	68d2      	ldr	r2, [r2, #12]
 80083a2:	631a      	str	r2, [r3, #48]	@ 0x30
        hcryp->Instance->KEYR3 = *(uint32_t *)(hcryp->Init.pKey + 4U);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	68da      	ldr	r2, [r3, #12]
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	6912      	ldr	r2, [r2, #16]
 80083ae:	61da      	str	r2, [r3, #28]
        hcryp->Instance->KEYR2 = *(uint32_t *)(hcryp->Init.pKey + 5U);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	68da      	ldr	r2, [r3, #12]
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	6952      	ldr	r2, [r2, #20]
 80083ba:	619a      	str	r2, [r3, #24]
        hcryp->Instance->KEYR1 = *(uint32_t *)(hcryp->Init.pKey + 6U);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	68da      	ldr	r2, [r3, #12]
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	6992      	ldr	r2, [r2, #24]
 80083c6:	615a      	str	r2, [r3, #20]
        hcryp->Instance->KEYR0 = *(uint32_t *)(hcryp->Init.pKey + 7U);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	68da      	ldr	r2, [r3, #12]
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	69d2      	ldr	r2, [r2, #28]
 80083d2:	611a      	str	r2, [r3, #16]
        break;
 80083d4:	e019      	b.n	800840a <CRYP_SetKey+0xb6>
      case CRYP_KEYSIZE_128B:
        hcryp->Instance->KEYR3 = *(uint32_t *)(hcryp->Init.pKey);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	68da      	ldr	r2, [r3, #12]
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	6812      	ldr	r2, [r2, #0]
 80083e0:	61da      	str	r2, [r3, #28]
        hcryp->Instance->KEYR2 = *(uint32_t *)(hcryp->Init.pKey + 1U);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	68da      	ldr	r2, [r3, #12]
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	6852      	ldr	r2, [r2, #4]
 80083ec:	619a      	str	r2, [r3, #24]
        hcryp->Instance->KEYR1 = *(uint32_t *)(hcryp->Init.pKey + 2U);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	68da      	ldr	r2, [r3, #12]
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	6892      	ldr	r2, [r2, #8]
 80083f8:	615a      	str	r2, [r3, #20]
        hcryp->Instance->KEYR0 = *(uint32_t *)(hcryp->Init.pKey + 3U);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	68da      	ldr	r2, [r3, #12]
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	68d2      	ldr	r2, [r2, #12]
 8008404:	611a      	str	r2, [r3, #16]
        break;
 8008406:	e000      	b.n	800840a <CRYP_SetKey+0xb6>
      default:
        break;
 8008408:	bf00      	nop
    }
  }
}
 800840a:	bf00      	nop
 800840c:	370c      	adds	r7, #12
 800840e:	46bd      	mov	sp, r7
 8008410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008414:	4770      	bx	lr

08008416 <CRYP_SetIV>:
  *         the configuration information for CRYP module
  * @note   If IV is NULL, the IV registers are not written.
  * @retval None
  */
static void CRYP_SetIV(CRYP_HandleTypeDef *hcryp)
{
 8008416:	b480      	push	{r7}
 8008418:	b083      	sub	sp, #12
 800841a:	af00      	add	r7, sp, #0
 800841c:	6078      	str	r0, [r7, #4]
  if (hcryp->Init.pInitVect != NULL)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	691b      	ldr	r3, [r3, #16]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d017      	beq.n	8008456 <CRYP_SetIV+0x40>
  {
    /* Set the Initialization Vector*/
    hcryp->Instance->IVR3 = *(uint32_t *)(hcryp->Init.pInitVect);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	691a      	ldr	r2, [r3, #16]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	6812      	ldr	r2, [r2, #0]
 8008430:	62da      	str	r2, [r3, #44]	@ 0x2c
    hcryp->Instance->IVR2 = *(uint32_t *)(hcryp->Init.pInitVect + 1U);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	691a      	ldr	r2, [r3, #16]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	6852      	ldr	r2, [r2, #4]
 800843c:	629a      	str	r2, [r3, #40]	@ 0x28
    hcryp->Instance->IVR1 = *(uint32_t *)(hcryp->Init.pInitVect + 2U);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	691a      	ldr	r2, [r3, #16]
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	6892      	ldr	r2, [r2, #8]
 8008448:	625a      	str	r2, [r3, #36]	@ 0x24
    hcryp->Instance->IVR0 = *(uint32_t *)(hcryp->Init.pInitVect + 3U);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	691a      	ldr	r2, [r3, #16]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	68d2      	ldr	r2, [r2, #12]
 8008454:	621a      	str	r2, [r3, #32]
  }
}
 8008456:	bf00      	nop
 8008458:	370c      	adds	r7, #12
 800845a:	46bd      	mov	sp, r7
 800845c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008460:	4770      	bx	lr
	...

08008464 <CRYP_AESGCM_Process>:
  *         the configuration information for CRYP module
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_AESGCM_Process(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b08e      	sub	sp, #56	@ 0x38
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
 800846c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t wordsize = ((uint32_t)hcryp->Size / 4U);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8008474:	089b      	lsrs	r3, r3, #2
 8008476:	b29b      	uxth	r3, r3
 8008478:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t temp[4];  /* Temporary CrypOutBuff */
  uint32_t index;
  uint32_t lastwordsize;
  uint32_t incount;  /* Temporary CrypInCount Value */
  uint32_t outcount;  /* Temporary CrypOutCount Value */
  uint32_t dokeyivconfig = 1U; /* By default, carry out peripheral Key and IV configuration */
 800847a:	2301      	movs	r3, #1
 800847c:	623b      	str	r3, [r7, #32]

  if (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008482:	2b01      	cmp	r3, #1
 8008484:	d118      	bne.n	80084b8 <CRYP_AESGCM_Process+0x54>
  {
    if (hcryp->KeyIVConfig == 1U)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800848a:	2b01      	cmp	r3, #1
 800848c:	d10a      	bne.n	80084a4 <CRYP_AESGCM_Process+0x40>
    {
      /* If the Key and IV configuration has to be done only once
         and if it has already been done, skip it */
      dokeyivconfig = 0U;
 800848e:	2300      	movs	r3, #0
 8008490:	623b      	str	r3, [r7, #32]
      hcryp->SizesSum += hcryp->Size; /* Compute message total payload length */
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008496:	687a      	ldr	r2, [r7, #4]
 8008498:	f8b2 204a 	ldrh.w	r2, [r2, #74]	@ 0x4a
 800849c:	441a      	add	r2, r3
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	665a      	str	r2, [r3, #100]	@ 0x64
 80084a2:	e00f      	b.n	80084c4 <CRYP_AESGCM_Process+0x60>
    else
    {
      /* If the Key and IV configuration has to be done only once
         and if it has not been done already, do it and set KeyIVConfig
         to keep track it won't have to be done again next time */
      hcryp->KeyIVConfig = 1U;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2201      	movs	r2, #1
 80084a8:	661a      	str	r2, [r3, #96]	@ 0x60
      hcryp->SizesSum = hcryp->Size; /* Merely store payload length */
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80084b0:	461a      	mov	r2, r3
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	665a      	str	r2, [r3, #100]	@ 0x64
 80084b6:	e005      	b.n	80084c4 <CRYP_AESGCM_Process+0x60>
    }
  }
  else
  {
    hcryp->SizesSum = hcryp->Size;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80084be:	461a      	mov	r2, r3
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	665a      	str	r2, [r3, #100]	@ 0x64
  }

  if (dokeyivconfig == 1U)
 80084c4:	6a3b      	ldr	r3, [r7, #32]
 80084c6:	2b01      	cmp	r3, #1
 80084c8:	f040 80a6 	bne.w	8008618 <CRYP_AESGCM_Process+0x1b4>
  {

    /*  Reset CrypHeaderCount */
    hcryp->CrypHeaderCount = 0U;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2200      	movs	r2, #0
 80084d0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /****************************** Init phase **********************************/

    CRYP_SET_PHASE(hcryp, CRYP_PHASE_INIT);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	681a      	ldr	r2, [r3, #0]
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 80084e2:	601a      	str	r2, [r3, #0]
    /* Set the Key */
    if (hcryp->Init.KeyIVConfigSkip != CRYP_KEYNOCONFIG)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084e8:	2b02      	cmp	r3, #2
 80084ea:	d059      	beq.n	80085a0 <CRYP_AESGCM_Process+0x13c>
    {
      if (hcryp->Instance == AES)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4a92      	ldr	r2, [pc, #584]	@ (800873c <CRYP_AESGCM_Process+0x2d8>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d114      	bne.n	8008520 <CRYP_AESGCM_Process+0xbc>
      {
        if (hcryp->Init.KeyMode != CRYP_KEYMODE_SHARED)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084fa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80084fe:	d006      	beq.n	800850e <CRYP_AESGCM_Process+0xaa>
        {
          CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	689b      	ldr	r3, [r3, #8]
 8008504:	4619      	mov	r1, r3
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f7ff ff24 	bl	8008354 <CRYP_SetKey>
 800850c:	e048      	b.n	80085a0 <CRYP_AESGCM_Process+0x13c>
        }
        else /*after sharing the key, AES should set KMOD[1:0] to 00.*/
        {
          hcryp->Instance->CR &=  ~CRYP_KEYMODE_SHARED;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	681a      	ldr	r2, [r3, #0]
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 800851c:	601a      	str	r2, [r3, #0]
 800851e:	e03f      	b.n	80085a0 <CRYP_AESGCM_Process+0x13c>
        }
      }
      else /*SAES*/
      {
        /* We should re-write Key, in the case where we change key after first operation */
        if ((hcryp->Init.KeySelect == CRYP_KEYSEL_NORMAL) && (hcryp->Init.KeyMode == CRYP_KEYMODE_NORMAL))
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008524:	2b00      	cmp	r3, #0
 8008526:	d109      	bne.n	800853c <CRYP_AESGCM_Process+0xd8>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800852c:	2b00      	cmp	r3, #0
 800852e:	d105      	bne.n	800853c <CRYP_AESGCM_Process+0xd8>
        {
          /* Set the Key */
          CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	689b      	ldr	r3, [r3, #8]
 8008534:	4619      	mov	r1, r3
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f7ff ff0c 	bl	8008354 <CRYP_SetKey>
        }
        /* Get tick */
        tickstart = HAL_GetTick();
 800853c:	f7fd fa48 	bl	80059d0 <HAL_GetTick>
 8008540:	61f8      	str	r0, [r7, #28]

        while (HAL_IS_BIT_CLR(hcryp->Instance->SR, CRYP_FLAG_KEYVALID))
 8008542:	e026      	b.n	8008592 <CRYP_AESGCM_Process+0x12e>
        {
          /* Check for the Timeout */
          if (Timeout != HAL_MAX_DELAY)
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800854a:	d022      	beq.n	8008592 <CRYP_AESGCM_Process+0x12e>
          {
            if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800854c:	f7fd fa40 	bl	80059d0 <HAL_GetTick>
 8008550:	4602      	mov	r2, r0
 8008552:	69fb      	ldr	r3, [r7, #28]
 8008554:	1ad3      	subs	r3, r2, r3
 8008556:	683a      	ldr	r2, [r7, #0]
 8008558:	429a      	cmp	r2, r3
 800855a:	d302      	bcc.n	8008562 <CRYP_AESGCM_Process+0xfe>
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d117      	bne.n	8008592 <CRYP_AESGCM_Process+0x12e>
            {
              /* Disable the CRYP peripheral clock */
              __HAL_CRYP_DISABLE(hcryp);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	681a      	ldr	r2, [r3, #0]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f022 0201 	bic.w	r2, r2, #1
 8008570:	601a      	str	r2, [r3, #0]

              /* Change state */
              hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008576:	f043 0210 	orr.w	r2, r3, #16
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	65da      	str	r2, [r3, #92]	@ 0x5c
              hcryp->State = HAL_CRYP_STATE_READY;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2201      	movs	r2, #1
 8008582:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
              __HAL_UNLOCK(hcryp);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2200      	movs	r2, #0
 800858a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
              return HAL_ERROR;
 800858e:	2301      	movs	r3, #1
 8008590:	e146      	b.n	8008820 <CRYP_AESGCM_Process+0x3bc>
        while (HAL_IS_BIT_CLR(hcryp->Instance->SR, CRYP_FLAG_KEYVALID))
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	685b      	ldr	r3, [r3, #4]
 8008598:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800859c:	2b00      	cmp	r3, #0
 800859e:	d0d1      	beq.n	8008544 <CRYP_AESGCM_Process+0xe0>
          }
        }
      }
    }
    /* Set the initialization vector and the counter : Initial Counter Block (ICB)*/
    CRYP_SetIV(hcryp);
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f7ff ff38 	bl	8008416 <CRYP_SetIV>

    /* Enable the CRYP peripheral */
    __HAL_CRYP_ENABLE(hcryp);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	681a      	ldr	r2, [r3, #0]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f042 0201 	orr.w	r2, r2, #1
 80085b4:	601a      	str	r2, [r3, #0]

    /* just wait for hash computation */
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 80085b6:	6839      	ldr	r1, [r7, #0]
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f000 fce1 	bl	8008f80 <CRYP_WaitOnCCFlag>
 80085be:	4603      	mov	r3, r0
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d001      	beq.n	80085c8 <CRYP_AESGCM_Process+0x164>
    {
      return HAL_ERROR;
 80085c4:	2301      	movs	r3, #1
 80085c6:	e12b      	b.n	8008820 <CRYP_AESGCM_Process+0x3bc>
    }
    /* Clear CCF flag */
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CLEAR_CCF);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f8d3 2308 	ldr.w	r2, [r3, #776]	@ 0x308
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f042 0201 	orr.w	r2, r2, #1
 80085d8:	f8c3 2308 	str.w	r2, [r3, #776]	@ 0x308

    /************************ Header phase *************************************/

    if (CRYP_GCMCCM_SetHeaderPhase(hcryp,  Timeout) != HAL_OK)
 80085dc:	6839      	ldr	r1, [r7, #0]
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f000 fb18 	bl	8008c14 <CRYP_GCMCCM_SetHeaderPhase>
 80085e4:	4603      	mov	r3, r0
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d001      	beq.n	80085ee <CRYP_AESGCM_Process+0x18a>
    {
      return HAL_ERROR;
 80085ea:	2301      	movs	r3, #1
 80085ec:	e118      	b.n	8008820 <CRYP_AESGCM_Process+0x3bc>
    }

    /*************************Payload phase ************************************/

    /* Set the phase */
    hcryp->Phase = CRYP_PHASE_PROCESS;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2202      	movs	r2, #2
 80085f2:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Select payload phase once the header phase is performed */
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_PAYLOAD);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f423 42c0 	bic.w	r2, r3, #24576	@ 0x6000
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008606:	601a      	str	r2, [r3, #0]

    /* Set to 0 the number of non-valid bytes using NPBLB register*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, 0U);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	681a      	ldr	r2, [r3, #0]
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8008616:	601a      	str	r2, [r3, #0]

  } /* if (dokeyivconfig == 1U) */

  if ((hcryp->Size % 16U) != 0U)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800861e:	f003 030f 	and.w	r3, r3, #15
 8008622:	b29b      	uxth	r3, r3
 8008624:	2b00      	cmp	r3, #0
 8008626:	d003      	beq.n	8008630 <CRYP_AESGCM_Process+0x1cc>
  {
    /* recalculate  wordsize */
    wordsize = ((wordsize / 4U) * 4U);
 8008628:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800862a:	f023 0303 	bic.w	r3, r3, #3
 800862e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8008630:	f7fd f9ce 	bl	80059d0 <HAL_GetTick>
 8008634:	61f8      	str	r0, [r7, #28]

  /* Write input data and get output Data */
  incount = hcryp->CrypInCount;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800863c:	b29b      	uxth	r3, r3
 800863e:	62bb      	str	r3, [r7, #40]	@ 0x28
  outcount = hcryp->CrypOutCount;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8008646:	b29b      	uxth	r3, r3
 8008648:	627b      	str	r3, [r7, #36]	@ 0x24
  while ((incount < wordsize) && (outcount < wordsize))
 800864a:	e034      	b.n	80086b6 <CRYP_AESGCM_Process+0x252>
  {
    /* Write plain data and get cipher data */
    CRYP_AES_ProcessData(hcryp, Timeout);
 800864c:	6839      	ldr	r1, [r7, #0]
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f7ff fdd0 	bl	80081f4 <CRYP_AES_ProcessData>

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800865a:	d022      	beq.n	80086a2 <CRYP_AESGCM_Process+0x23e>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800865c:	f7fd f9b8 	bl	80059d0 <HAL_GetTick>
 8008660:	4602      	mov	r2, r0
 8008662:	69fb      	ldr	r3, [r7, #28]
 8008664:	1ad3      	subs	r3, r2, r3
 8008666:	683a      	ldr	r2, [r7, #0]
 8008668:	429a      	cmp	r2, r3
 800866a:	d302      	bcc.n	8008672 <CRYP_AESGCM_Process+0x20e>
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d117      	bne.n	80086a2 <CRYP_AESGCM_Process+0x23e>
      {
        /* Disable the CRYP peripheral clock */
        __HAL_CRYP_DISABLE(hcryp);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	681a      	ldr	r2, [r3, #0]
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f022 0201 	bic.w	r2, r2, #1
 8008680:	601a      	str	r2, [r3, #0]

        /* Change state & error code */
        hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008686:	f043 0210 	orr.w	r2, r3, #16
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	65da      	str	r2, [r3, #92]	@ 0x5c
        hcryp->State = HAL_CRYP_STATE_READY;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2201      	movs	r2, #1
 8008692:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
        __HAL_UNLOCK(hcryp);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2200      	movs	r2, #0
 800869a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
        return HAL_ERROR;
 800869e:	2301      	movs	r3, #1
 80086a0:	e0be      	b.n	8008820 <CRYP_AESGCM_Process+0x3bc>
      }
    }
    incount = hcryp->CrypInCount;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80086a8:	b29b      	uxth	r3, r3
 80086aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    outcount = hcryp->CrypOutCount;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80086b2:	b29b      	uxth	r3, r3
 80086b4:	627b      	str	r3, [r7, #36]	@ 0x24
  while ((incount < wordsize) && (outcount < wordsize))
 80086b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80086b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086ba:	429a      	cmp	r2, r3
 80086bc:	d203      	bcs.n	80086c6 <CRYP_AESGCM_Process+0x262>
 80086be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086c2:	429a      	cmp	r2, r3
 80086c4:	d3c2      	bcc.n	800864c <CRYP_AESGCM_Process+0x1e8>
  }

  if ((hcryp->Size % 16U) != 0U)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80086cc:	f003 030f 	and.w	r3, r3, #15
 80086d0:	b29b      	uxth	r3, r3
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	f000 80a3 	beq.w	800881e <CRYP_AESGCM_Process+0x3ba>
  {
    /* Compute the number of padding bytes in last block of payload */
    npblb = ((((uint32_t)hcryp->Size / 16U) + 1U) * 16U) - ((uint32_t)hcryp->Size);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80086de:	091b      	lsrs	r3, r3, #4
 80086e0:	b29b      	uxth	r3, r3
 80086e2:	3301      	adds	r3, #1
 80086e4:	011b      	lsls	r3, r3, #4
 80086e6:	687a      	ldr	r2, [r7, #4]
 80086e8:	f8b2 204a 	ldrh.w	r2, [r2, #74]	@ 0x4a
 80086ec:	1a9b      	subs	r3, r3, r2
 80086ee:	61bb      	str	r3, [r7, #24]

    /*  Set Npblb in case of AES GCM payload encryption to get right tag*/
    if ((hcryp->Instance->CR & AES_CR_MODE) == CRYP_OPERATINGMODE_ENCRYPT)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f003 0318 	and.w	r3, r3, #24
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d10a      	bne.n	8008714 <CRYP_AESGCM_Process+0x2b0>
    {
      /* Set to 0 the number of non-valid bytes using NPBLB register*/
      MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, npblb << 20U);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8008708:	69bb      	ldr	r3, [r7, #24]
 800870a:	051a      	lsls	r2, r3, #20
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	430a      	orrs	r2, r1
 8008712:	601a      	str	r2, [r3, #0]
    }
    /* Number of valid words (lastwordsize) in last block */
    if ((npblb % 4U) == 0U)
 8008714:	69bb      	ldr	r3, [r7, #24]
 8008716:	f003 0303 	and.w	r3, r3, #3
 800871a:	2b00      	cmp	r3, #0
 800871c:	d105      	bne.n	800872a <CRYP_AESGCM_Process+0x2c6>
    {
      lastwordsize = (16U - npblb) / 4U;
 800871e:	69bb      	ldr	r3, [r7, #24]
 8008720:	f1c3 0310 	rsb	r3, r3, #16
 8008724:	089b      	lsrs	r3, r3, #2
 8008726:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008728:	e005      	b.n	8008736 <CRYP_AESGCM_Process+0x2d2>
    }
    else
    {
      lastwordsize = ((16U - npblb) / 4U) + 1U;
 800872a:	69bb      	ldr	r3, [r7, #24]
 800872c:	f1c3 0310 	rsb	r3, r3, #16
 8008730:	089b      	lsrs	r3, r3, #2
 8008732:	3301      	adds	r3, #1
 8008734:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /*  last block optionally pad the data with zeros*/
    for (index = 0U; index < lastwordsize; index ++)
 8008736:	2300      	movs	r3, #0
 8008738:	633b      	str	r3, [r7, #48]	@ 0x30
 800873a:	e019      	b.n	8008770 <CRYP_AESGCM_Process+0x30c>
 800873c:	420c0000 	.word	0x420c0000
    {
      /* Write the last Input block in the IN FIFO */
      hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800874a:	b29b      	uxth	r3, r3
 800874c:	009b      	lsls	r3, r3, #2
 800874e:	441a      	add	r2, r3
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	6812      	ldr	r2, [r2, #0]
 8008756:	609a      	str	r2, [r3, #8]
      hcryp->CrypInCount++;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800875e:	b29b      	uxth	r3, r3
 8008760:	3301      	adds	r3, #1
 8008762:	b29a      	uxth	r2, r3
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    for (index = 0U; index < lastwordsize; index ++)
 800876a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800876c:	3301      	adds	r3, #1
 800876e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008770:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008772:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008774:	429a      	cmp	r2, r3
 8008776:	d3e3      	bcc.n	8008740 <CRYP_AESGCM_Process+0x2dc>
    }
    while (index < 4U)
 8008778:	e006      	b.n	8008788 <CRYP_AESGCM_Process+0x324>
    {
      /* pad the data with zeros to have a complete block */
      hcryp->Instance->DINR  = 0U;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	2200      	movs	r2, #0
 8008780:	609a      	str	r2, [r3, #8]
      index++;
 8008782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008784:	3301      	adds	r3, #1
 8008786:	633b      	str	r3, [r7, #48]	@ 0x30
    while (index < 4U)
 8008788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800878a:	2b03      	cmp	r3, #3
 800878c:	d9f5      	bls.n	800877a <CRYP_AESGCM_Process+0x316>
    }
    /* Wait for CCF flag to be raised */
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 800878e:	6839      	ldr	r1, [r7, #0]
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f000 fbf5 	bl	8008f80 <CRYP_WaitOnCCFlag>
 8008796:	4603      	mov	r3, r0
 8008798:	2b00      	cmp	r3, #0
 800879a:	d002      	beq.n	80087a2 <CRYP_AESGCM_Process+0x33e>
#if (USE_HAL_CRYP_REGISTER_CALLBACKS == 1U)
      /*Call registered error callback*/
      hcryp->ErrorCallback(hcryp);
#else
      /*Call legacy weak error callback*/
      HAL_CRYP_ErrorCallback(hcryp);
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f7ff fa9b 	bl	8007cd8 <HAL_CRYP_ErrorCallback>
#endif /* USE_HAL_CRYP_REGISTER_CALLBACKS */
    }

    /* Clear CCF Flag */
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CLEAR_CCF);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f8d3 2308 	ldr.w	r2, [r3, #776]	@ 0x308
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f042 0201 	orr.w	r2, r2, #1
 80087b2:	f8c3 2308 	str.w	r2, [r3, #776]	@ 0x308

    /*Read the output block from the output FIFO */
    for (index = 0U; index < 4U; index++)
 80087b6:	2300      	movs	r3, #0
 80087b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80087ba:	e00b      	b.n	80087d4 <CRYP_AESGCM_Process+0x370>
    {
      /* Read the output block from the output FIFO and put them in temporary buffer then
         get CrypOutBuff from temporary buffer */
      temp[index] = hcryp->Instance->DOUTR;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	68da      	ldr	r2, [r3, #12]
 80087c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087c4:	009b      	lsls	r3, r3, #2
 80087c6:	3338      	adds	r3, #56	@ 0x38
 80087c8:	443b      	add	r3, r7
 80087ca:	f843 2c30 	str.w	r2, [r3, #-48]
    for (index = 0U; index < 4U; index++)
 80087ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087d0:	3301      	adds	r3, #1
 80087d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80087d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087d6:	2b03      	cmp	r3, #3
 80087d8:	d9f0      	bls.n	80087bc <CRYP_AESGCM_Process+0x358>
    }
    for (index = 0U; index < lastwordsize; index++)
 80087da:	2300      	movs	r3, #0
 80087dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80087de:	e01a      	b.n	8008816 <CRYP_AESGCM_Process+0x3b2>
    {
      *(uint32_t *)(hcryp->pCrypOutBuffPtr + (hcryp->CrypOutCount)) = temp[index];
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80087ea:	b29b      	uxth	r3, r3
 80087ec:	009b      	lsls	r3, r3, #2
 80087ee:	441a      	add	r2, r3
 80087f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087f2:	009b      	lsls	r3, r3, #2
 80087f4:	3338      	adds	r3, #56	@ 0x38
 80087f6:	443b      	add	r3, r7
 80087f8:	f853 3c30 	ldr.w	r3, [r3, #-48]
 80087fc:	6013      	str	r3, [r2, #0]
      hcryp->CrypOutCount++;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8008804:	b29b      	uxth	r3, r3
 8008806:	3301      	adds	r3, #1
 8008808:	b29a      	uxth	r2, r3
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    for (index = 0U; index < lastwordsize; index++)
 8008810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008812:	3301      	adds	r3, #1
 8008814:	633b      	str	r3, [r7, #48]	@ 0x30
 8008816:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800881a:	429a      	cmp	r2, r3
 800881c:	d3e0      	bcc.n	80087e0 <CRYP_AESGCM_Process+0x37c>
    }
  }

  return HAL_OK;
 800881e:	2300      	movs	r3, #0
}
 8008820:	4618      	mov	r0, r3
 8008822:	3738      	adds	r7, #56	@ 0x38
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}

08008828 <CRYP_AESCCM_Process>:
  *         the configuration information for CRYP module
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_AESCCM_Process(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b08e      	sub	sp, #56	@ 0x38
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t wordsize = ((uint32_t)hcryp->Size / 4U);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8008838:	089b      	lsrs	r3, r3, #2
 800883a:	b29b      	uxth	r3, r3
 800883c:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t npblb;
  uint32_t lastwordsize;
  uint32_t temp[4];  /* Temporary CrypOutBuff */
  uint32_t incount;  /* Temporary CrypInCount Value */
  uint32_t outcount;  /* Temporary CrypOutCount Value */
  uint32_t dokeyivconfig = 1U; /* By default, carry out peripheral Key and IV configuration */
 800883e:	2301      	movs	r3, #1
 8008840:	623b      	str	r3, [r7, #32]

  if (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008846:	2b01      	cmp	r3, #1
 8008848:	d118      	bne.n	800887c <CRYP_AESCCM_Process+0x54>
  {
    if (hcryp->KeyIVConfig == 1U)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800884e:	2b01      	cmp	r3, #1
 8008850:	d10a      	bne.n	8008868 <CRYP_AESCCM_Process+0x40>
    {
      /* If the Key and IV configuration has to be done only once
         and if it has already been done, skip it */
      dokeyivconfig = 0U;
 8008852:	2300      	movs	r3, #0
 8008854:	623b      	str	r3, [r7, #32]
      hcryp->SizesSum += hcryp->Size; /* Compute message total payload length */
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800885a:	687a      	ldr	r2, [r7, #4]
 800885c:	f8b2 204a 	ldrh.w	r2, [r2, #74]	@ 0x4a
 8008860:	441a      	add	r2, r3
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	665a      	str	r2, [r3, #100]	@ 0x64
 8008866:	e00f      	b.n	8008888 <CRYP_AESCCM_Process+0x60>
    else
    {
      /* If the Key and IV configuration has to be done only once
         and if it has not been done already, do it and set KeyIVConfig
         to keep track it won't have to be done again next time */
      hcryp->KeyIVConfig = 1U;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2201      	movs	r2, #1
 800886c:	661a      	str	r2, [r3, #96]	@ 0x60
      hcryp->SizesSum = hcryp->Size; /* Merely store payload length */
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8008874:	461a      	mov	r2, r3
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	665a      	str	r2, [r3, #100]	@ 0x64
 800887a:	e005      	b.n	8008888 <CRYP_AESCCM_Process+0x60>
    }
  }
  else
  {
    hcryp->SizesSum = hcryp->Size;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8008882:	461a      	mov	r2, r3
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	665a      	str	r2, [r3, #100]	@ 0x64
  }

  if (dokeyivconfig == 1U)
 8008888:	6a3b      	ldr	r3, [r7, #32]
 800888a:	2b01      	cmp	r3, #1
 800888c:	f040 80bb 	bne.w	8008a06 <CRYP_AESCCM_Process+0x1de>
  {
    /*  Reset CrypHeaderCount */
    hcryp->CrypHeaderCount = 0U;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2200      	movs	r2, #0
 8008894:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /********************** Init phase ******************************************/

    CRYP_SET_PHASE(hcryp, CRYP_PHASE_INIT);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	681a      	ldr	r2, [r3, #0]
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 80088a6:	601a      	str	r2, [r3, #0]
    /* Set the Key */
    if (hcryp->Init.KeyIVConfigSkip != CRYP_KEYNOCONFIG)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088ac:	2b02      	cmp	r3, #2
 80088ae:	d059      	beq.n	8008964 <CRYP_AESCCM_Process+0x13c>
    {
      if (hcryp->Instance == AES)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	4a98      	ldr	r2, [pc, #608]	@ (8008b18 <CRYP_AESCCM_Process+0x2f0>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d114      	bne.n	80088e4 <CRYP_AESCCM_Process+0xbc>
      {
        if (hcryp->Init.KeyMode != CRYP_KEYMODE_SHARED)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80088c2:	d006      	beq.n	80088d2 <CRYP_AESCCM_Process+0xaa>
        {
          CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	689b      	ldr	r3, [r3, #8]
 80088c8:	4619      	mov	r1, r3
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f7ff fd42 	bl	8008354 <CRYP_SetKey>
 80088d0:	e048      	b.n	8008964 <CRYP_AESCCM_Process+0x13c>
        }
        else /*after sharing the key, AES should set KMOD[1:0] to 00.*/
        {
          hcryp->Instance->CR &=  ~CRYP_KEYMODE_SHARED;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	681a      	ldr	r2, [r3, #0]
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 80088e0:	601a      	str	r2, [r3, #0]
 80088e2:	e03f      	b.n	8008964 <CRYP_AESCCM_Process+0x13c>
        }
      }
      else /*SAES*/
      {
        /* We should re-write Key, in the case where we change key after first operation */
        if ((hcryp->Init.KeySelect == CRYP_KEYSEL_NORMAL) && (hcryp->Init.KeyMode == CRYP_KEYMODE_NORMAL))
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d109      	bne.n	8008900 <CRYP_AESCCM_Process+0xd8>
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d105      	bne.n	8008900 <CRYP_AESCCM_Process+0xd8>
        {
          /* Set the Key */
          CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	689b      	ldr	r3, [r3, #8]
 80088f8:	4619      	mov	r1, r3
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f7ff fd2a 	bl	8008354 <CRYP_SetKey>
        }
        /* Get tick */
        tickstart = HAL_GetTick();
 8008900:	f7fd f866 	bl	80059d0 <HAL_GetTick>
 8008904:	61f8      	str	r0, [r7, #28]

        while (HAL_IS_BIT_CLR(hcryp->Instance->SR, CRYP_FLAG_KEYVALID))
 8008906:	e026      	b.n	8008956 <CRYP_AESCCM_Process+0x12e>
        {
          /* Check for the Timeout */
          if (Timeout != HAL_MAX_DELAY)
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800890e:	d022      	beq.n	8008956 <CRYP_AESCCM_Process+0x12e>
          {
            if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008910:	f7fd f85e 	bl	80059d0 <HAL_GetTick>
 8008914:	4602      	mov	r2, r0
 8008916:	69fb      	ldr	r3, [r7, #28]
 8008918:	1ad3      	subs	r3, r2, r3
 800891a:	683a      	ldr	r2, [r7, #0]
 800891c:	429a      	cmp	r2, r3
 800891e:	d302      	bcc.n	8008926 <CRYP_AESCCM_Process+0xfe>
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d117      	bne.n	8008956 <CRYP_AESCCM_Process+0x12e>
            {
              /* Disable the CRYP peripheral clock */
              __HAL_CRYP_DISABLE(hcryp);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	681a      	ldr	r2, [r3, #0]
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f022 0201 	bic.w	r2, r2, #1
 8008934:	601a      	str	r2, [r3, #0]

              /* Change state */
              hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800893a:	f043 0210 	orr.w	r2, r3, #16
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	65da      	str	r2, [r3, #92]	@ 0x5c
              hcryp->State = HAL_CRYP_STATE_READY;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2201      	movs	r2, #1
 8008946:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
              __HAL_UNLOCK(hcryp);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2200      	movs	r2, #0
 800894e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
              return HAL_ERROR;
 8008952:	2301      	movs	r3, #1
 8008954:	e15a      	b.n	8008c0c <CRYP_AESCCM_Process+0x3e4>
        while (HAL_IS_BIT_CLR(hcryp->Instance->SR, CRYP_FLAG_KEYVALID))
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	685b      	ldr	r3, [r3, #4]
 800895c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008960:	2b00      	cmp	r3, #0
 8008962:	d0d1      	beq.n	8008908 <CRYP_AESCCM_Process+0xe0>
          }
        }
      }
    }
    /* Set the initialization vector (IV) with B0 */
    hcryp->Instance->IVR3 = *(uint32_t *)(hcryp->Init.B0);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6a1a      	ldr	r2, [r3, #32]
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	6812      	ldr	r2, [r2, #0]
 800896e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hcryp->Instance->IVR2 = *(uint32_t *)(hcryp->Init.B0 + 1U);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6a1a      	ldr	r2, [r3, #32]
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	6852      	ldr	r2, [r2, #4]
 800897a:	629a      	str	r2, [r3, #40]	@ 0x28
    hcryp->Instance->IVR1 = *(uint32_t *)(hcryp->Init.B0 + 2U);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6a1a      	ldr	r2, [r3, #32]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	6892      	ldr	r2, [r2, #8]
 8008986:	625a      	str	r2, [r3, #36]	@ 0x24
    hcryp->Instance->IVR0 = *(uint32_t *)(hcryp->Init.B0 + 3U);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6a1a      	ldr	r2, [r3, #32]
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	68d2      	ldr	r2, [r2, #12]
 8008992:	621a      	str	r2, [r3, #32]

    /* Enable the CRYP peripheral */
    __HAL_CRYP_ENABLE(hcryp);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	681a      	ldr	r2, [r3, #0]
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f042 0201 	orr.w	r2, r2, #1
 80089a2:	601a      	str	r2, [r3, #0]

    /* just wait for hash computation */
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 80089a4:	6839      	ldr	r1, [r7, #0]
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f000 faea 	bl	8008f80 <CRYP_WaitOnCCFlag>
 80089ac:	4603      	mov	r3, r0
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d001      	beq.n	80089b6 <CRYP_AESCCM_Process+0x18e>
    {
      return HAL_ERROR;
 80089b2:	2301      	movs	r3, #1
 80089b4:	e12a      	b.n	8008c0c <CRYP_AESCCM_Process+0x3e4>
    }
    /* Clear CCF flag */
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CLEAR_CCF);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f8d3 2308 	ldr.w	r2, [r3, #776]	@ 0x308
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f042 0201 	orr.w	r2, r2, #1
 80089c6:	f8c3 2308 	str.w	r2, [r3, #776]	@ 0x308

    /************************ Header phase *************************************/
    /* Header block(B1) : associated data length expressed in bytes concatenated
    with Associated Data (A)*/
    if (CRYP_GCMCCM_SetHeaderPhase(hcryp,  Timeout) != HAL_OK)
 80089ca:	6839      	ldr	r1, [r7, #0]
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f000 f921 	bl	8008c14 <CRYP_GCMCCM_SetHeaderPhase>
 80089d2:	4603      	mov	r3, r0
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d001      	beq.n	80089dc <CRYP_AESCCM_Process+0x1b4>
    {
      return HAL_ERROR;
 80089d8:	2301      	movs	r3, #1
 80089da:	e117      	b.n	8008c0c <CRYP_AESCCM_Process+0x3e4>
    }

    /*************************Payload phase ************************************/

    /* Set the phase */
    hcryp->Phase = CRYP_PHASE_PROCESS;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2202      	movs	r2, #2
 80089e0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Select payload phase once the header phase is performed */
    MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, CRYP_PHASE_PAYLOAD);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f423 42c0 	bic.w	r2, r3, #24576	@ 0x6000
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80089f4:	601a      	str	r2, [r3, #0]

    /* Set to 0 the number of non-valid bytes using NPBLB register*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, 0U);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	681a      	ldr	r2, [r3, #0]
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8008a04:	601a      	str	r2, [r3, #0]

  } /* if (dokeyivconfig == 1U) */

  if ((hcryp->Size % 16U) != 0U)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8008a0c:	f003 030f 	and.w	r3, r3, #15
 8008a10:	b29b      	uxth	r3, r3
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d003      	beq.n	8008a1e <CRYP_AESCCM_Process+0x1f6>
  {
    /* recalculate  wordsize */
    wordsize = ((wordsize / 4U) * 4U);
 8008a16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a18:	f023 0303 	bic.w	r3, r3, #3
 8008a1c:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8008a1e:	f7fc ffd7 	bl	80059d0 <HAL_GetTick>
 8008a22:	61f8      	str	r0, [r7, #28]

  /* Write input data and get output data */
  incount = hcryp->CrypInCount;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008a2a:	b29b      	uxth	r3, r3
 8008a2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  outcount = hcryp->CrypOutCount;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8008a34:	b29b      	uxth	r3, r3
 8008a36:	627b      	str	r3, [r7, #36]	@ 0x24
  while ((incount < wordsize) && (outcount < wordsize))
 8008a38:	e034      	b.n	8008aa4 <CRYP_AESCCM_Process+0x27c>
  {
    /* Write plain data and get cipher data */
    CRYP_AES_ProcessData(hcryp, Timeout);
 8008a3a:	6839      	ldr	r1, [r7, #0]
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f7ff fbd9 	bl	80081f4 <CRYP_AES_ProcessData>

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a48:	d022      	beq.n	8008a90 <CRYP_AESCCM_Process+0x268>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008a4a:	f7fc ffc1 	bl	80059d0 <HAL_GetTick>
 8008a4e:	4602      	mov	r2, r0
 8008a50:	69fb      	ldr	r3, [r7, #28]
 8008a52:	1ad3      	subs	r3, r2, r3
 8008a54:	683a      	ldr	r2, [r7, #0]
 8008a56:	429a      	cmp	r2, r3
 8008a58:	d302      	bcc.n	8008a60 <CRYP_AESCCM_Process+0x238>
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d117      	bne.n	8008a90 <CRYP_AESCCM_Process+0x268>
      {
        /* Disable the CRYP peripheral clock */
        __HAL_CRYP_DISABLE(hcryp);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	681a      	ldr	r2, [r3, #0]
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f022 0201 	bic.w	r2, r2, #1
 8008a6e:	601a      	str	r2, [r3, #0]

        /* Change state */
        hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a74:	f043 0210 	orr.w	r2, r3, #16
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hcryp->State = HAL_CRYP_STATE_READY;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2201      	movs	r2, #1
 8008a80:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
        __HAL_UNLOCK(hcryp);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2200      	movs	r2, #0
 8008a88:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
        return HAL_ERROR;
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	e0bd      	b.n	8008c0c <CRYP_AESCCM_Process+0x3e4>
      }
    }
    incount = hcryp->CrypInCount;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008a96:	b29b      	uxth	r3, r3
 8008a98:	62bb      	str	r3, [r7, #40]	@ 0x28
    outcount = hcryp->CrypOutCount;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8008aa0:	b29b      	uxth	r3, r3
 8008aa2:	627b      	str	r3, [r7, #36]	@ 0x24
  while ((incount < wordsize) && (outcount < wordsize))
 8008aa4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008aa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	d203      	bcs.n	8008ab4 <CRYP_AESCCM_Process+0x28c>
 8008aac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008aae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	d3c2      	bcc.n	8008a3a <CRYP_AESCCM_Process+0x212>
  }

  if ((hcryp->Size % 16U) != 0U)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8008aba:	f003 030f 	and.w	r3, r3, #15
 8008abe:	b29b      	uxth	r3, r3
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	f000 80a2 	beq.w	8008c0a <CRYP_AESCCM_Process+0x3e2>
  {
    /* Compute the number of padding bytes in last block of payload */
    npblb = ((((uint32_t)hcryp->Size / 16U) + 1U) * 16U) - ((uint32_t)hcryp->Size);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8008acc:	091b      	lsrs	r3, r3, #4
 8008ace:	b29b      	uxth	r3, r3
 8008ad0:	3301      	adds	r3, #1
 8008ad2:	011b      	lsls	r3, r3, #4
 8008ad4:	687a      	ldr	r2, [r7, #4]
 8008ad6:	f8b2 204a 	ldrh.w	r2, [r2, #74]	@ 0x4a
 8008ada:	1a9b      	subs	r3, r3, r2
 8008adc:	61bb      	str	r3, [r7, #24]

    if ((hcryp->Instance->CR & AES_CR_MODE) == CRYP_OPERATINGMODE_DECRYPT)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f003 0318 	and.w	r3, r3, #24
 8008ae8:	2b10      	cmp	r3, #16
 8008aea:	d10a      	bne.n	8008b02 <CRYP_AESCCM_Process+0x2da>
    {
      /* Set Npblb in case of AES CCM payload decryption to get right tag  */
      MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, npblb << 20);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8008af6:	69bb      	ldr	r3, [r7, #24]
 8008af8:	051a      	lsls	r2, r3, #20
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	430a      	orrs	r2, r1
 8008b00:	601a      	str	r2, [r3, #0]

    }
    /* Number of valid words (lastwordsize) in last block */
    if ((npblb % 4U) == 0U)
 8008b02:	69bb      	ldr	r3, [r7, #24]
 8008b04:	f003 0303 	and.w	r3, r3, #3
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d107      	bne.n	8008b1c <CRYP_AESCCM_Process+0x2f4>
    {
      lastwordsize = (16U - npblb) / 4U;
 8008b0c:	69bb      	ldr	r3, [r7, #24]
 8008b0e:	f1c3 0310 	rsb	r3, r3, #16
 8008b12:	089b      	lsrs	r3, r3, #2
 8008b14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008b16:	e007      	b.n	8008b28 <CRYP_AESCCM_Process+0x300>
 8008b18:	420c0000 	.word	0x420c0000
    }
    else
    {
      lastwordsize = ((16U - npblb) / 4U) + 1U;
 8008b1c:	69bb      	ldr	r3, [r7, #24]
 8008b1e:	f1c3 0310 	rsb	r3, r3, #16
 8008b22:	089b      	lsrs	r3, r3, #2
 8008b24:	3301      	adds	r3, #1
 8008b26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }

    /* Write the last input block in the IN FIFO */
    for (loopcounter = 0U; loopcounter < lastwordsize; loopcounter ++)
 8008b28:	2300      	movs	r3, #0
 8008b2a:	633b      	str	r3, [r7, #48]	@ 0x30
 8008b2c:	e017      	b.n	8008b5e <CRYP_AESCCM_Process+0x336>
    {
      hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008b38:	b29b      	uxth	r3, r3
 8008b3a:	009b      	lsls	r3, r3, #2
 8008b3c:	441a      	add	r2, r3
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	6812      	ldr	r2, [r2, #0]
 8008b44:	609a      	str	r2, [r3, #8]
      hcryp->CrypInCount++;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008b4c:	b29b      	uxth	r3, r3
 8008b4e:	3301      	adds	r3, #1
 8008b50:	b29a      	uxth	r2, r3
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    for (loopcounter = 0U; loopcounter < lastwordsize; loopcounter ++)
 8008b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b5a:	3301      	adds	r3, #1
 8008b5c:	633b      	str	r3, [r7, #48]	@ 0x30
 8008b5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b62:	429a      	cmp	r2, r3
 8008b64:	d3e3      	bcc.n	8008b2e <CRYP_AESCCM_Process+0x306>
    }

    /* Pad the data with zeros to have a complete block */
    while (loopcounter < 4U)
 8008b66:	e006      	b.n	8008b76 <CRYP_AESCCM_Process+0x34e>
    {
      hcryp->Instance->DINR  = 0U;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	609a      	str	r2, [r3, #8]
      loopcounter++;
 8008b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b72:	3301      	adds	r3, #1
 8008b74:	633b      	str	r3, [r7, #48]	@ 0x30
    while (loopcounter < 4U)
 8008b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b78:	2b03      	cmp	r3, #3
 8008b7a:	d9f5      	bls.n	8008b68 <CRYP_AESCCM_Process+0x340>
    }
    /* just wait for hash computation */
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8008b7c:	6839      	ldr	r1, [r7, #0]
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f000 f9fe 	bl	8008f80 <CRYP_WaitOnCCFlag>
 8008b84:	4603      	mov	r3, r0
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d001      	beq.n	8008b8e <CRYP_AESCCM_Process+0x366>
    {
      return HAL_ERROR;
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	e03e      	b.n	8008c0c <CRYP_AESCCM_Process+0x3e4>
    }
    /* Clear CCF flag */
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CLEAR_CCF);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f8d3 2308 	ldr.w	r2, [r3, #776]	@ 0x308
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f042 0201 	orr.w	r2, r2, #1
 8008b9e:	f8c3 2308 	str.w	r2, [r3, #776]	@ 0x308

    for (loopcounter = 0U; loopcounter < 4U; loopcounter++)
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	633b      	str	r3, [r7, #48]	@ 0x30
 8008ba6:	e00b      	b.n	8008bc0 <CRYP_AESCCM_Process+0x398>
    {
      /* Read the output block from the output FIFO and put them in temporary buffer then
         get CrypOutBuff from temporary buffer */
      temp[loopcounter] = hcryp->Instance->DOUTR;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	68da      	ldr	r2, [r3, #12]
 8008bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bb0:	009b      	lsls	r3, r3, #2
 8008bb2:	3338      	adds	r3, #56	@ 0x38
 8008bb4:	443b      	add	r3, r7
 8008bb6:	f843 2c30 	str.w	r2, [r3, #-48]
    for (loopcounter = 0U; loopcounter < 4U; loopcounter++)
 8008bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bbc:	3301      	adds	r3, #1
 8008bbe:	633b      	str	r3, [r7, #48]	@ 0x30
 8008bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bc2:	2b03      	cmp	r3, #3
 8008bc4:	d9f0      	bls.n	8008ba8 <CRYP_AESCCM_Process+0x380>
    }
    for (loopcounter = 0U; loopcounter < lastwordsize; loopcounter++)
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	633b      	str	r3, [r7, #48]	@ 0x30
 8008bca:	e01a      	b.n	8008c02 <CRYP_AESCCM_Process+0x3da>
    {
      *(uint32_t *)(hcryp->pCrypOutBuffPtr + hcryp->CrypOutCount) = temp[loopcounter];
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8008bd6:	b29b      	uxth	r3, r3
 8008bd8:	009b      	lsls	r3, r3, #2
 8008bda:	441a      	add	r2, r3
 8008bdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bde:	009b      	lsls	r3, r3, #2
 8008be0:	3338      	adds	r3, #56	@ 0x38
 8008be2:	443b      	add	r3, r7
 8008be4:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8008be8:	6013      	str	r3, [r2, #0]
      hcryp->CrypOutCount++;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8008bf0:	b29b      	uxth	r3, r3
 8008bf2:	3301      	adds	r3, #1
 8008bf4:	b29a      	uxth	r2, r3
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    for (loopcounter = 0U; loopcounter < lastwordsize; loopcounter++)
 8008bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bfe:	3301      	adds	r3, #1
 8008c00:	633b      	str	r3, [r7, #48]	@ 0x30
 8008c02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c06:	429a      	cmp	r2, r3
 8008c08:	d3e0      	bcc.n	8008bcc <CRYP_AESCCM_Process+0x3a4>
    }
  }

  return HAL_OK;
 8008c0a:	2300      	movs	r3, #0
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	3738      	adds	r7, #56	@ 0x38
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}

08008c14 <CRYP_GCMCCM_SetHeaderPhase>:
  *         the configuration information for CRYP module(Header & HeaderSize)
  * @param  Timeout Timeout value
  * @retval state
  */
static HAL_StatusTypeDef CRYP_GCMCCM_SetHeaderPhase(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 8008c14:	b5b0      	push	{r4, r5, r7, lr}
 8008c16:	b092      	sub	sp, #72	@ 0x48
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
 8008c1c:	6039      	str	r1, [r7, #0]
  uint32_t loopcounter;
  uint32_t size_in_bytes;
  uint32_t tmp;
  const uint32_t mask[12] = {0x0U, 0xFF000000U, 0xFFFF0000U, 0xFFFFFF00U,  /* 32-bit data type */
 8008c1e:	4b8e      	ldr	r3, [pc, #568]	@ (8008e58 <CRYP_GCMCCM_SetHeaderPhase+0x244>)
 8008c20:	f107 040c 	add.w	r4, r7, #12
 8008c24:	461d      	mov	r5, r3
 8008c26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008c28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008c2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008c2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008c2e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8008c32:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                             0x0U, 0x0000FF00U, 0x0000FFFFU, 0xFF00FFFFU,  /* 16-bit data type */
                             0x0U, 0x000000FFU, 0x0000FFFFU, 0x00FFFFFFU
                            }; /*  8-bit data type */

  /***************************** Header phase for GCM/GMAC or CCM *********************************/
  if (hcryp->Init.HeaderWidthUnit == CRYP_HEADERWIDTHUNIT_WORD)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d104      	bne.n	8008c48 <CRYP_GCMCCM_SetHeaderPhase+0x34>
  {
    size_in_bytes = hcryp->Init.HeaderSize * 4U;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	69db      	ldr	r3, [r3, #28]
 8008c42:	009b      	lsls	r3, r3, #2
 8008c44:	643b      	str	r3, [r7, #64]	@ 0x40
 8008c46:	e002      	b.n	8008c4e <CRYP_GCMCCM_SetHeaderPhase+0x3a>
  }
  else
  {
    size_in_bytes = hcryp->Init.HeaderSize;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	69db      	ldr	r3, [r3, #28]
 8008c4c:	643b      	str	r3, [r7, #64]	@ 0x40
  }

  if ((size_in_bytes != 0U))
 8008c4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	f000 8172 	beq.w	8008f3a <CRYP_GCMCCM_SetHeaderPhase+0x326>
  {
    /* Select header phase */
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_HEADER);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f423 42c0 	bic.w	r2, r3, #24576	@ 0x6000
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008c68:	601a      	str	r2, [r3, #0]

    /* Enable the CRYP peripheral */
    __HAL_CRYP_ENABLE(hcryp);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	681a      	ldr	r2, [r3, #0]
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f042 0201 	orr.w	r2, r2, #1
 8008c78:	601a      	str	r2, [r3, #0]

    /* If size_in_bytes is a multiple of blocks (a multiple of four 32-bits words ) */
    if ((size_in_bytes % 16U) == 0U)
 8008c7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008c7c:	f003 030f 	and.w	r3, r3, #15
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d172      	bne.n	8008d6a <CRYP_GCMCCM_SetHeaderPhase+0x156>
    {
      /*  No padding */
      for (loopcounter = 0U; (loopcounter < (size_in_bytes / 4U)); loopcounter += 4U)
 8008c84:	2300      	movs	r3, #0
 8008c86:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c88:	e069      	b.n	8008d5e <CRYP_GCMCCM_SetHeaderPhase+0x14a>
      {
        /* Write the input block in the data input register */
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	699a      	ldr	r2, [r3, #24]
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008c94:	b29b      	uxth	r3, r3
 8008c96:	009b      	lsls	r3, r3, #2
 8008c98:	441a      	add	r2, r3
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	6812      	ldr	r2, [r2, #0]
 8008ca0:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008ca8:	b29b      	uxth	r3, r3
 8008caa:	3301      	adds	r3, #1
 8008cac:	b29a      	uxth	r2, r3
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	699a      	ldr	r2, [r3, #24]
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008cbe:	b29b      	uxth	r3, r3
 8008cc0:	009b      	lsls	r3, r3, #2
 8008cc2:	441a      	add	r2, r3
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	6812      	ldr	r2, [r2, #0]
 8008cca:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008cd2:	b29b      	uxth	r3, r3
 8008cd4:	3301      	adds	r3, #1
 8008cd6:	b29a      	uxth	r2, r3
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
        hcryp->Instance->DINR  = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	699a      	ldr	r2, [r3, #24]
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008ce8:	b29b      	uxth	r3, r3
 8008cea:	009b      	lsls	r3, r3, #2
 8008cec:	441a      	add	r2, r3
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	6812      	ldr	r2, [r2, #0]
 8008cf4:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008cfc:	b29b      	uxth	r3, r3
 8008cfe:	3301      	adds	r3, #1
 8008d00:	b29a      	uxth	r2, r3
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	699a      	ldr	r2, [r3, #24]
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008d12:	b29b      	uxth	r3, r3
 8008d14:	009b      	lsls	r3, r3, #2
 8008d16:	441a      	add	r2, r3
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	6812      	ldr	r2, [r2, #0]
 8008d1e:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008d26:	b29b      	uxth	r3, r3
 8008d28:	3301      	adds	r3, #1
 8008d2a:	b29a      	uxth	r2, r3
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8008d32:	6839      	ldr	r1, [r7, #0]
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f000 f923 	bl	8008f80 <CRYP_WaitOnCCFlag>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d001      	beq.n	8008d44 <CRYP_GCMCCM_SetHeaderPhase+0x130>
        {
          return HAL_ERROR;
 8008d40:	2301      	movs	r3, #1
 8008d42:	e118      	b.n	8008f76 <CRYP_GCMCCM_SetHeaderPhase+0x362>
        }
        /* Clear CCF flag */
        __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CLEAR_CCF);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f8d3 2308 	ldr.w	r2, [r3, #776]	@ 0x308
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f042 0201 	orr.w	r2, r2, #1
 8008d54:	f8c3 2308 	str.w	r2, [r3, #776]	@ 0x308
      for (loopcounter = 0U; (loopcounter < (size_in_bytes / 4U)); loopcounter += 4U)
 8008d58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008d5a:	3304      	adds	r3, #4
 8008d5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8008d5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008d60:	089b      	lsrs	r3, r3, #2
 8008d62:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008d64:	429a      	cmp	r2, r3
 8008d66:	d390      	bcc.n	8008c8a <CRYP_GCMCCM_SetHeaderPhase+0x76>
 8008d68:	e104      	b.n	8008f74 <CRYP_GCMCCM_SetHeaderPhase+0x360>
      }
    }
    else
    {
      /* Write header block in the IN FIFO without last block */
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 16U) * 4U)); loopcounter += 4U)
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8008d6e:	e069      	b.n	8008e44 <CRYP_GCMCCM_SetHeaderPhase+0x230>
      {
        /* Write the input block in the data input register */
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	699a      	ldr	r2, [r3, #24]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008d7a:	b29b      	uxth	r3, r3
 8008d7c:	009b      	lsls	r3, r3, #2
 8008d7e:	441a      	add	r2, r3
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	6812      	ldr	r2, [r2, #0]
 8008d86:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008d8e:	b29b      	uxth	r3, r3
 8008d90:	3301      	adds	r3, #1
 8008d92:	b29a      	uxth	r2, r3
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	699a      	ldr	r2, [r3, #24]
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008da4:	b29b      	uxth	r3, r3
 8008da6:	009b      	lsls	r3, r3, #2
 8008da8:	441a      	add	r2, r3
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	6812      	ldr	r2, [r2, #0]
 8008db0:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008db8:	b29b      	uxth	r3, r3
 8008dba:	3301      	adds	r3, #1
 8008dbc:	b29a      	uxth	r2, r3
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
        hcryp->Instance->DINR  = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	699a      	ldr	r2, [r3, #24]
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008dce:	b29b      	uxth	r3, r3
 8008dd0:	009b      	lsls	r3, r3, #2
 8008dd2:	441a      	add	r2, r3
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	6812      	ldr	r2, [r2, #0]
 8008dda:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008de2:	b29b      	uxth	r3, r3
 8008de4:	3301      	adds	r3, #1
 8008de6:	b29a      	uxth	r2, r3
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	699a      	ldr	r2, [r3, #24]
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008df8:	b29b      	uxth	r3, r3
 8008dfa:	009b      	lsls	r3, r3, #2
 8008dfc:	441a      	add	r2, r3
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	6812      	ldr	r2, [r2, #0]
 8008e04:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008e0c:	b29b      	uxth	r3, r3
 8008e0e:	3301      	adds	r3, #1
 8008e10:	b29a      	uxth	r2, r3
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8008e18:	6839      	ldr	r1, [r7, #0]
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f000 f8b0 	bl	8008f80 <CRYP_WaitOnCCFlag>
 8008e20:	4603      	mov	r3, r0
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d001      	beq.n	8008e2a <CRYP_GCMCCM_SetHeaderPhase+0x216>
        {
          return HAL_ERROR;
 8008e26:	2301      	movs	r3, #1
 8008e28:	e0a5      	b.n	8008f76 <CRYP_GCMCCM_SetHeaderPhase+0x362>
        }
        /* Clear CCF flag */
        __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CLEAR_CCF);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f8d3 2308 	ldr.w	r2, [r3, #776]	@ 0x308
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f042 0201 	orr.w	r2, r2, #1
 8008e3a:	f8c3 2308 	str.w	r2, [r3, #776]	@ 0x308
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 16U) * 4U)); loopcounter += 4U)
 8008e3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008e40:	3304      	adds	r3, #4
 8008e42:	647b      	str	r3, [r7, #68]	@ 0x44
 8008e44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008e46:	091b      	lsrs	r3, r3, #4
 8008e48:	009b      	lsls	r3, r3, #2
 8008e4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008e4c:	429a      	cmp	r2, r3
 8008e4e:	d38f      	bcc.n	8008d70 <CRYP_GCMCCM_SetHeaderPhase+0x15c>
      }
      /* Write last complete words */
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 4U) % 4U)); loopcounter++)
 8008e50:	2300      	movs	r3, #0
 8008e52:	647b      	str	r3, [r7, #68]	@ 0x44
 8008e54:	e01a      	b.n	8008e8c <CRYP_GCMCCM_SetHeaderPhase+0x278>
 8008e56:	bf00      	nop
 8008e58:	08022a48 	.word	0x08022a48
      {
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	699a      	ldr	r2, [r3, #24]
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008e66:	b29b      	uxth	r3, r3
 8008e68:	009b      	lsls	r3, r3, #2
 8008e6a:	441a      	add	r2, r3
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	6812      	ldr	r2, [r2, #0]
 8008e72:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008e7a:	b29b      	uxth	r3, r3
 8008e7c:	3301      	adds	r3, #1
 8008e7e:	b29a      	uxth	r2, r3
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 4U) % 4U)); loopcounter++)
 8008e86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008e88:	3301      	adds	r3, #1
 8008e8a:	647b      	str	r3, [r7, #68]	@ 0x44
 8008e8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008e8e:	089b      	lsrs	r3, r3, #2
 8008e90:	f003 0303 	and.w	r3, r3, #3
 8008e94:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008e96:	429a      	cmp	r2, r3
 8008e98:	d3e0      	bcc.n	8008e5c <CRYP_GCMCCM_SetHeaderPhase+0x248>
      }
      /* If the header size is a multiple of words */
      if ((size_in_bytes % 4U) == 0U)
 8008e9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008e9c:	f003 0303 	and.w	r3, r3, #3
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d10b      	bne.n	8008ebc <CRYP_GCMCCM_SetHeaderPhase+0x2a8>
      {
        /* Pad the data with zeros to have a complete block */
        while (loopcounter < 4U)
 8008ea4:	e006      	b.n	8008eb4 <CRYP_GCMCCM_SetHeaderPhase+0x2a0>
        {
          hcryp->Instance->DINR = 0x0U;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	609a      	str	r2, [r3, #8]
          loopcounter++;
 8008eae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008eb0:	3301      	adds	r3, #1
 8008eb2:	647b      	str	r3, [r7, #68]	@ 0x44
        while (loopcounter < 4U)
 8008eb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008eb6:	2b03      	cmp	r3, #3
 8008eb8:	d9f5      	bls.n	8008ea6 <CRYP_GCMCCM_SetHeaderPhase+0x292>
 8008eba:	e02a      	b.n	8008f12 <CRYP_GCMCCM_SetHeaderPhase+0x2fe>
        }
      }
      else
      {
        /* Enter last bytes, padded with zeros */
        tmp =  *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	699a      	ldr	r2, [r3, #24]
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008ec6:	b29b      	uxth	r3, r3
 8008ec8:	009b      	lsls	r3, r3, #2
 8008eca:	4413      	add	r3, r2
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	63fb      	str	r3, [r7, #60]	@ 0x3c
        tmp &= mask[(hcryp->Init.DataType * 2U) + (size_in_bytes % 4U)];
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	685b      	ldr	r3, [r3, #4]
 8008ed4:	005a      	lsls	r2, r3, #1
 8008ed6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008ed8:	f003 0303 	and.w	r3, r3, #3
 8008edc:	4413      	add	r3, r2
 8008ede:	009b      	lsls	r3, r3, #2
 8008ee0:	3348      	adds	r3, #72	@ 0x48
 8008ee2:	443b      	add	r3, r7
 8008ee4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8008ee8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008eea:	4013      	ands	r3, r2
 8008eec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        hcryp->Instance->DINR = tmp;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008ef4:	609a      	str	r2, [r3, #8]
        loopcounter++;
 8008ef6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008ef8:	3301      	adds	r3, #1
 8008efa:	647b      	str	r3, [r7, #68]	@ 0x44
        /* Pad the data with zeros to have a complete block */
        while (loopcounter < 4U)
 8008efc:	e006      	b.n	8008f0c <CRYP_GCMCCM_SetHeaderPhase+0x2f8>
        {
          hcryp->Instance->DINR = 0x0U;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	2200      	movs	r2, #0
 8008f04:	609a      	str	r2, [r3, #8]
          loopcounter++;
 8008f06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008f08:	3301      	adds	r3, #1
 8008f0a:	647b      	str	r3, [r7, #68]	@ 0x44
        while (loopcounter < 4U)
 8008f0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008f0e:	2b03      	cmp	r3, #3
 8008f10:	d9f5      	bls.n	8008efe <CRYP_GCMCCM_SetHeaderPhase+0x2ea>
        }
      }

      if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8008f12:	6839      	ldr	r1, [r7, #0]
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f000 f833 	bl	8008f80 <CRYP_WaitOnCCFlag>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d001      	beq.n	8008f24 <CRYP_GCMCCM_SetHeaderPhase+0x310>
      {
        return HAL_ERROR;
 8008f20:	2301      	movs	r3, #1
 8008f22:	e028      	b.n	8008f76 <CRYP_GCMCCM_SetHeaderPhase+0x362>
      }
      /* Clear CCF flag */
      __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CLEAR_CCF);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f8d3 2308 	ldr.w	r2, [r3, #776]	@ 0x308
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f042 0201 	orr.w	r2, r2, #1
 8008f34:	f8c3 2308 	str.w	r2, [r3, #776]	@ 0x308
 8008f38:	e01c      	b.n	8008f74 <CRYP_GCMCCM_SetHeaderPhase+0x360>
    }
  }
  else
  {
    /*Workaround 1: only AES, before re-enabling the peripheral, datatype can be configured.*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE, hcryp->Init.DataType);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f023 0106 	bic.w	r1, r3, #6
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	685a      	ldr	r2, [r3, #4]
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	430a      	orrs	r2, r1
 8008f4e:	601a      	str	r2, [r3, #0]

    /* Select header phase */
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_HEADER);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f423 42c0 	bic.w	r2, r3, #24576	@ 0x6000
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008f62:	601a      	str	r2, [r3, #0]

    /* Enable the CRYP peripheral */
    __HAL_CRYP_ENABLE(hcryp);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	681a      	ldr	r2, [r3, #0]
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f042 0201 	orr.w	r2, r2, #1
 8008f72:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008f74:	2300      	movs	r3, #0
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	3748      	adds	r7, #72	@ 0x48
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bdb0      	pop	{r4, r5, r7, pc}
 8008f7e:	bf00      	nop

08008f80 <CRYP_WaitOnCCFlag>:
  * @param  Timeout Timeout duration.
  * @note   This function can only be used in thread mode.
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_WaitOnCCFlag(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b084      	sub	sp, #16
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
 8008f88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Get timeout */
  tickstart = HAL_GetTick();
 8008f8a:	f7fc fd21 	bl	80059d0 <HAL_GetTick>
 8008f8e:	60f8      	str	r0, [r7, #12]

  while (HAL_IS_BIT_CLR(hcryp->Instance->ISR, AES_ISR_CCF))
 8008f90:	e026      	b.n	8008fe0 <CRYP_WaitOnCCFlag+0x60>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f98:	d022      	beq.n	8008fe0 <CRYP_WaitOnCCFlag+0x60>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008f9a:	f7fc fd19 	bl	80059d0 <HAL_GetTick>
 8008f9e:	4602      	mov	r2, r0
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	1ad3      	subs	r3, r2, r3
 8008fa4:	683a      	ldr	r2, [r7, #0]
 8008fa6:	429a      	cmp	r2, r3
 8008fa8:	d302      	bcc.n	8008fb0 <CRYP_WaitOnCCFlag+0x30>
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d117      	bne.n	8008fe0 <CRYP_WaitOnCCFlag+0x60>
      {
        __HAL_CRYP_DISABLE(hcryp);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	681a      	ldr	r2, [r3, #0]
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f022 0201 	bic.w	r2, r2, #1
 8008fbe:	601a      	str	r2, [r3, #0]
        hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008fc4:	f043 0210 	orr.w	r2, r3, #16
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	65da      	str	r2, [r3, #92]	@ 0x5c
        hcryp->State = HAL_CRYP_STATE_READY;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2201      	movs	r2, #1
 8008fd0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
        __HAL_UNLOCK(hcryp);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
        return HAL_ERROR;
 8008fdc:	2301      	movs	r3, #1
 8008fde:	e008      	b.n	8008ff2 <CRYP_WaitOnCCFlag+0x72>
  while (HAL_IS_BIT_CLR(hcryp->Instance->ISR, AES_ISR_CCF))
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f8d3 3304 	ldr.w	r3, [r3, #772]	@ 0x304
 8008fe8:	f003 0301 	and.w	r3, r3, #1
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d0d0      	beq.n	8008f92 <CRYP_WaitOnCCFlag+0x12>
      }
    }
  }
  return HAL_OK;
 8008ff0:	2300      	movs	r3, #0
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3710      	adds	r7, #16
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}

08008ffa <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 8008ffa:	b580      	push	{r7, lr}
 8008ffc:	b084      	sub	sp, #16
 8008ffe:	af00      	add	r7, sp, #0
 8009000:	60f8      	str	r0, [r7, #12]
 8009002:	60b9      	str	r1, [r7, #8]
 8009004:	607a      	str	r2, [r7, #4]
 8009006:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d101      	bne.n	8009012 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 800900e:	2301      	movs	r3, #1
 8009010:	e04f      	b.n	80090b2 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8009018:	2b01      	cmp	r3, #1
 800901a:	d101      	bne.n	8009020 <HAL_DMA_Start_IT+0x26>
 800901c:	2302      	movs	r3, #2
 800901e:	e048      	b.n	80090b2 <HAL_DMA_Start_IT+0xb8>
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	2201      	movs	r2, #1
 8009024:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800902e:	b2db      	uxtb	r3, r3
 8009030:	2b01      	cmp	r3, #1
 8009032:	d136      	bne.n	80090a2 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	2202      	movs	r2, #2
 8009038:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	2200      	movs	r2, #0
 8009040:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	687a      	ldr	r2, [r7, #4]
 8009046:	68b9      	ldr	r1, [r7, #8]
 8009048:	68f8      	ldr	r0, [r7, #12]
 800904a:	f000 fa78 	bl	800953e <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	695a      	ldr	r2, [r3, #20]
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 800905c:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009062:	2b00      	cmp	r3, #0
 8009064:	d007      	beq.n	8009076 <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	695a      	ldr	r2, [r3, #20]
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009074:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800907a:	2b00      	cmp	r3, #0
 800907c:	d007      	beq.n	800908e <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	695a      	ldr	r2, [r3, #20]
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800908c:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	695a      	ldr	r2, [r3, #20]
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f042 0201 	orr.w	r2, r2, #1
 800909c:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 800909e:	2300      	movs	r3, #0
 80090a0:	e007      	b.n	80090b2 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	2240      	movs	r2, #64	@ 0x40
 80090a6:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	2200      	movs	r2, #0
 80090ac:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 80090b0:	2301      	movs	r3, #1
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	3710      	adds	r7, #16
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}

080090ba <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 80090ba:	b580      	push	{r7, lr}
 80090bc:	b084      	sub	sp, #16
 80090be:	af00      	add	r7, sp, #0
 80090c0:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 80090c2:	f7fc fc85 	bl	80059d0 <HAL_GetTick>
 80090c6:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d101      	bne.n	80090d2 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80090ce:	2301      	movs	r3, #1
 80090d0:	e06b      	b.n	80091aa <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80090d8:	b2db      	uxtb	r3, r3
 80090da:	2b02      	cmp	r3, #2
 80090dc:	d008      	beq.n	80090f0 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2220      	movs	r2, #32
 80090e2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2200      	movs	r2, #0
 80090e8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 80090ec:	2301      	movs	r3, #1
 80090ee:	e05c      	b.n	80091aa <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	695a      	ldr	r2, [r3, #20]
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f042 0204 	orr.w	r2, r2, #4
 80090fe:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2205      	movs	r2, #5
 8009104:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8009108:	e020      	b.n	800914c <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800910a:	f7fc fc61 	bl	80059d0 <HAL_GetTick>
 800910e:	4602      	mov	r2, r0
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	1ad3      	subs	r3, r2, r3
 8009114:	2b05      	cmp	r3, #5
 8009116:	d919      	bls.n	800914c <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800911c:	f043 0210 	orr.w	r2, r3, #16
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2203      	movs	r2, #3
 8009128:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009130:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009134:	2b00      	cmp	r3, #0
 8009136:	d003      	beq.n	8009140 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800913c:	2201      	movs	r2, #1
 800913e:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2200      	movs	r2, #0
 8009144:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 8009148:	2301      	movs	r3, #1
 800914a:	e02e      	b.n	80091aa <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	691b      	ldr	r3, [r3, #16]
 8009152:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009156:	2b00      	cmp	r3, #0
 8009158:	d0d7      	beq.n	800910a <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	695a      	ldr	r2, [r3, #20]
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f042 0202 	orr.w	r2, r2, #2
 8009168:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2204      	movs	r2, #4
 800916e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 800917a:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2201      	movs	r2, #1
 8009180:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009188:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800918c:	2b00      	cmp	r3, #0
 800918e:	d007      	beq.n	80091a0 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009194:	2201      	movs	r2, #1
 8009196:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	2200      	movs	r2, #0
 800919e:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2200      	movs	r2, #0
 80091a4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80091a8:	2300      	movs	r3, #0
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	3710      	adds	r7, #16
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}

080091b2 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 80091b2:	b480      	push	{r7}
 80091b4:	b083      	sub	sp, #12
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d101      	bne.n	80091c4 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80091c0:	2301      	movs	r3, #1
 80091c2:	e019      	b.n	80091f8 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80091ca:	b2db      	uxtb	r3, r3
 80091cc:	2b02      	cmp	r3, #2
 80091ce:	d004      	beq.n	80091da <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2220      	movs	r2, #32
 80091d4:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80091d6:	2301      	movs	r3, #1
 80091d8:	e00e      	b.n	80091f8 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2204      	movs	r2, #4
 80091de:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	695b      	ldr	r3, [r3, #20]
 80091e8:	687a      	ldr	r2, [r7, #4]
 80091ea:	6812      	ldr	r2, [r2, #0]
 80091ec:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80091f0:	f043 0304 	orr.w	r3, r3, #4
 80091f4:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 80091f6:	2300      	movs	r3, #0
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	370c      	adds	r7, #12
 80091fc:	46bd      	mov	sp, r7
 80091fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009202:	4770      	bx	lr

08009204 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b086      	sub	sp, #24
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8009214:	f023 030f 	bic.w	r3, r3, #15
 8009218:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009222:	3b50      	subs	r3, #80	@ 0x50
 8009224:	09db      	lsrs	r3, r3, #7
 8009226:	f003 031f 	and.w	r3, r3, #31
 800922a:	2201      	movs	r2, #1
 800922c:	fa02 f303 	lsl.w	r3, r2, r3
 8009230:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	68db      	ldr	r3, [r3, #12]
 8009236:	693a      	ldr	r2, [r7, #16]
 8009238:	4013      	ands	r3, r2
 800923a:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	2b00      	cmp	r3, #0
 8009240:	f000 813b 	beq.w	80094ba <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	691b      	ldr	r3, [r3, #16]
 800924a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800924e:	2b00      	cmp	r3, #0
 8009250:	d011      	beq.n	8009276 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	695b      	ldr	r3, [r3, #20]
 8009258:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800925c:	2b00      	cmp	r3, #0
 800925e:	d00a      	beq.n	8009276 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009268:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800926e:	f043 0201 	orr.w	r2, r3, #1
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	691b      	ldr	r3, [r3, #16]
 800927c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009280:	2b00      	cmp	r3, #0
 8009282:	d011      	beq.n	80092a8 <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	695b      	ldr	r3, [r3, #20]
 800928a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800928e:	2b00      	cmp	r3, #0
 8009290:	d00a      	beq.n	80092a8 <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800929a:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092a0:	f043 0202 	orr.w	r2, r3, #2
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	691b      	ldr	r3, [r3, #16]
 80092ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d011      	beq.n	80092da <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	695b      	ldr	r3, [r3, #20]
 80092bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d00a      	beq.n	80092da <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80092cc:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092d2:	f043 0204 	orr.w	r2, r3, #4
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	691b      	ldr	r3, [r3, #16]
 80092e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d011      	beq.n	800930c <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	695b      	ldr	r3, [r3, #20]
 80092ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d00a      	beq.n	800930c <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80092fe:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009304:	f043 0208 	orr.w	r2, r3, #8
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	691b      	ldr	r3, [r3, #16]
 8009312:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009316:	2b00      	cmp	r3, #0
 8009318:	d013      	beq.n	8009342 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	695b      	ldr	r3, [r3, #20]
 8009320:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009324:	2b00      	cmp	r3, #0
 8009326:	d00c      	beq.n	8009342 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009330:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009336:	2b00      	cmp	r3, #0
 8009338:	d003      	beq.n	8009342 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	691b      	ldr	r3, [r3, #16]
 8009348:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800934c:	2b00      	cmp	r3, #0
 800934e:	d04c      	beq.n	80093ea <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	695b      	ldr	r3, [r3, #20]
 8009356:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800935a:	2b00      	cmp	r3, #0
 800935c:	d045      	beq.n	80093ea <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8009366:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800936e:	b2db      	uxtb	r3, r3
 8009370:	2b04      	cmp	r3, #4
 8009372:	d12e      	bne.n	80093d2 <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	695a      	ldr	r2, [r3, #20]
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009382:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	695a      	ldr	r2, [r3, #20]
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f042 0202 	orr.w	r2, r2, #2
 8009392:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2201      	movs	r2, #1
 8009398:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d007      	beq.n	80093b8 <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80093ac:	2201      	movs	r2, #1
 80093ae:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	2200      	movs	r2, #0
 80093b6:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2200      	movs	r2, #0
 80093bc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d07a      	beq.n	80094be <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	4798      	blx	r3
        }

        return;
 80093d0:	e075      	b.n	80094be <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2205      	movs	r2, #5
 80093d6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d003      	beq.n	80093ea <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	691b      	ldr	r3, [r3, #16]
 80093f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d039      	beq.n	800946c <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	695b      	ldr	r3, [r3, #20]
 80093fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009402:	2b00      	cmp	r3, #0
 8009404:	d032      	beq.n	800946c <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800940a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800940e:	2b00      	cmp	r3, #0
 8009410:	d012      	beq.n	8009438 <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009418:	2b00      	cmp	r3, #0
 800941a:	d116      	bne.n	800944a <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009422:	2b00      	cmp	r3, #0
 8009424:	d111      	bne.n	800944a <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2201      	movs	r2, #1
 800942a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009432:	2201      	movs	r2, #1
 8009434:	731a      	strb	r2, [r3, #12]
 8009436:	e008      	b.n	800944a <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800943e:	2b00      	cmp	r3, #0
 8009440:	d103      	bne.n	800944a <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2201      	movs	r2, #1
 8009446:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8009452:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2200      	movs	r2, #0
 8009458:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009460:	2b00      	cmp	r3, #0
 8009462:	d003      	beq.n	800946c <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009470:	2b00      	cmp	r3, #0
 8009472:	d025      	beq.n	80094c0 <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	695a      	ldr	r2, [r3, #20]
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f042 0202 	orr.w	r2, r2, #2
 8009482:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2201      	movs	r2, #1
 8009488:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009490:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009494:	2b00      	cmp	r3, #0
 8009496:	d003      	beq.n	80094a0 <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800949c:	2201      	movs	r2, #1
 800949e:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2200      	movs	r2, #0
 80094a4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d007      	beq.n	80094c0 <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	4798      	blx	r3
 80094b8:	e002      	b.n	80094c0 <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 80094ba:	bf00      	nop
 80094bc:	e000      	b.n	80094c0 <HAL_DMA_IRQHandler+0x2bc>
        return;
 80094be:	bf00      	nop
    }
  }
}
 80094c0:	3718      	adds	r7, #24
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}

080094c6 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 80094c6:	b480      	push	{r7}
 80094c8:	b085      	sub	sp, #20
 80094ca:	af00      	add	r7, sp, #0
 80094cc:	6078      	str	r0, [r7, #4]
 80094ce:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d101      	bne.n	80094da <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 80094d6:	2301      	movs	r3, #1
 80094d8:	e02b      	b.n	8009532 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80094e2:	f023 030f 	bic.w	r3, r3, #15
 80094e6:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80094f0:	3b50      	subs	r3, #80	@ 0x50
 80094f2:	09db      	lsrs	r3, r3, #7
 80094f4:	f003 031f 	and.w	r3, r3, #31
 80094f8:	2201      	movs	r2, #1
 80094fa:	fa02 f303 	lsl.w	r3, r2, r3
 80094fe:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	f003 0310 	and.w	r3, r3, #16
 8009506:	2b00      	cmp	r3, #0
 8009508:	d012      	beq.n	8009530 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	f003 0311 	and.w	r3, r3, #17
 8009510:	2b11      	cmp	r3, #17
 8009512:	d106      	bne.n	8009522 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	685a      	ldr	r2, [r3, #4]
 8009518:	68bb      	ldr	r3, [r7, #8]
 800951a:	431a      	orrs	r2, r3
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	605a      	str	r2, [r3, #4]
 8009520:	e006      	b.n	8009530 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	685a      	ldr	r2, [r3, #4]
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	43db      	mvns	r3, r3
 800952a:	401a      	ands	r2, r3
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8009530:	2300      	movs	r3, #0
}
 8009532:	4618      	mov	r0, r3
 8009534:	3714      	adds	r7, #20
 8009536:	46bd      	mov	sp, r7
 8009538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953c:	4770      	bx	lr

0800953e <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 800953e:	b480      	push	{r7}
 8009540:	b085      	sub	sp, #20
 8009542:	af00      	add	r7, sp, #0
 8009544:	60f8      	str	r0, [r7, #12]
 8009546:	60b9      	str	r1, [r7, #8]
 8009548:	607a      	str	r2, [r7, #4]
 800954a:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009552:	0c1b      	lsrs	r3, r3, #16
 8009554:	041b      	lsls	r3, r3, #16
 8009556:	683a      	ldr	r2, [r7, #0]
 8009558:	b291      	uxth	r1, r2
 800955a:	68fa      	ldr	r2, [r7, #12]
 800955c:	6812      	ldr	r2, [r2, #0]
 800955e:	430b      	orrs	r3, r1
 8009560:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 800956a:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	68ba      	ldr	r2, [r7, #8]
 8009572:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	687a      	ldr	r2, [r7, #4]
 800957a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800957c:	bf00      	nop
 800957e:	3714      	adds	r7, #20
 8009580:	46bd      	mov	sp, r7
 8009582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009586:	4770      	bx	lr

08009588 <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b084      	sub	sp, #16
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8009590:	f7fc fa1e 	bl	80059d0 <HAL_GetTick>
 8009594:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d101      	bne.n	80095a0 <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 800959c:	2301      	movs	r3, #1
 800959e:	e0db      	b.n	8009758 <HAL_DMAEx_List_Init+0x1d0>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	4a6e      	ldr	r2, [pc, #440]	@ (8009760 <HAL_DMAEx_List_Init+0x1d8>)
 80095a6:	4293      	cmp	r3, r2
 80095a8:	f000 809f 	beq.w	80096ea <HAL_DMAEx_List_Init+0x162>
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	4a6c      	ldr	r2, [pc, #432]	@ (8009764 <HAL_DMAEx_List_Init+0x1dc>)
 80095b2:	4293      	cmp	r3, r2
 80095b4:	f000 8099 	beq.w	80096ea <HAL_DMAEx_List_Init+0x162>
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	4a6a      	ldr	r2, [pc, #424]	@ (8009768 <HAL_DMAEx_List_Init+0x1e0>)
 80095be:	4293      	cmp	r3, r2
 80095c0:	f000 8093 	beq.w	80096ea <HAL_DMAEx_List_Init+0x162>
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	4a68      	ldr	r2, [pc, #416]	@ (800976c <HAL_DMAEx_List_Init+0x1e4>)
 80095ca:	4293      	cmp	r3, r2
 80095cc:	f000 808d 	beq.w	80096ea <HAL_DMAEx_List_Init+0x162>
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	4a66      	ldr	r2, [pc, #408]	@ (8009770 <HAL_DMAEx_List_Init+0x1e8>)
 80095d6:	4293      	cmp	r3, r2
 80095d8:	f000 8087 	beq.w	80096ea <HAL_DMAEx_List_Init+0x162>
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	4a64      	ldr	r2, [pc, #400]	@ (8009774 <HAL_DMAEx_List_Init+0x1ec>)
 80095e2:	4293      	cmp	r3, r2
 80095e4:	f000 8081 	beq.w	80096ea <HAL_DMAEx_List_Init+0x162>
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	4a62      	ldr	r2, [pc, #392]	@ (8009778 <HAL_DMAEx_List_Init+0x1f0>)
 80095ee:	4293      	cmp	r3, r2
 80095f0:	d07b      	beq.n	80096ea <HAL_DMAEx_List_Init+0x162>
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	4a61      	ldr	r2, [pc, #388]	@ (800977c <HAL_DMAEx_List_Init+0x1f4>)
 80095f8:	4293      	cmp	r3, r2
 80095fa:	d076      	beq.n	80096ea <HAL_DMAEx_List_Init+0x162>
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	4a5f      	ldr	r2, [pc, #380]	@ (8009780 <HAL_DMAEx_List_Init+0x1f8>)
 8009602:	4293      	cmp	r3, r2
 8009604:	d071      	beq.n	80096ea <HAL_DMAEx_List_Init+0x162>
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	4a5e      	ldr	r2, [pc, #376]	@ (8009784 <HAL_DMAEx_List_Init+0x1fc>)
 800960c:	4293      	cmp	r3, r2
 800960e:	d06c      	beq.n	80096ea <HAL_DMAEx_List_Init+0x162>
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	4a5c      	ldr	r2, [pc, #368]	@ (8009788 <HAL_DMAEx_List_Init+0x200>)
 8009616:	4293      	cmp	r3, r2
 8009618:	d067      	beq.n	80096ea <HAL_DMAEx_List_Init+0x162>
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	4a5b      	ldr	r2, [pc, #364]	@ (800978c <HAL_DMAEx_List_Init+0x204>)
 8009620:	4293      	cmp	r3, r2
 8009622:	d062      	beq.n	80096ea <HAL_DMAEx_List_Init+0x162>
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	4a59      	ldr	r2, [pc, #356]	@ (8009790 <HAL_DMAEx_List_Init+0x208>)
 800962a:	4293      	cmp	r3, r2
 800962c:	d05d      	beq.n	80096ea <HAL_DMAEx_List_Init+0x162>
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	4a58      	ldr	r2, [pc, #352]	@ (8009794 <HAL_DMAEx_List_Init+0x20c>)
 8009634:	4293      	cmp	r3, r2
 8009636:	d058      	beq.n	80096ea <HAL_DMAEx_List_Init+0x162>
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	4a56      	ldr	r2, [pc, #344]	@ (8009798 <HAL_DMAEx_List_Init+0x210>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d053      	beq.n	80096ea <HAL_DMAEx_List_Init+0x162>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	4a55      	ldr	r2, [pc, #340]	@ (800979c <HAL_DMAEx_List_Init+0x214>)
 8009648:	4293      	cmp	r3, r2
 800964a:	d04e      	beq.n	80096ea <HAL_DMAEx_List_Init+0x162>
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	4a53      	ldr	r2, [pc, #332]	@ (80097a0 <HAL_DMAEx_List_Init+0x218>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d049      	beq.n	80096ea <HAL_DMAEx_List_Init+0x162>
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	4a52      	ldr	r2, [pc, #328]	@ (80097a4 <HAL_DMAEx_List_Init+0x21c>)
 800965c:	4293      	cmp	r3, r2
 800965e:	d044      	beq.n	80096ea <HAL_DMAEx_List_Init+0x162>
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	4a50      	ldr	r2, [pc, #320]	@ (80097a8 <HAL_DMAEx_List_Init+0x220>)
 8009666:	4293      	cmp	r3, r2
 8009668:	d03f      	beq.n	80096ea <HAL_DMAEx_List_Init+0x162>
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	4a4f      	ldr	r2, [pc, #316]	@ (80097ac <HAL_DMAEx_List_Init+0x224>)
 8009670:	4293      	cmp	r3, r2
 8009672:	d03a      	beq.n	80096ea <HAL_DMAEx_List_Init+0x162>
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	4a4d      	ldr	r2, [pc, #308]	@ (80097b0 <HAL_DMAEx_List_Init+0x228>)
 800967a:	4293      	cmp	r3, r2
 800967c:	d035      	beq.n	80096ea <HAL_DMAEx_List_Init+0x162>
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	4a4c      	ldr	r2, [pc, #304]	@ (80097b4 <HAL_DMAEx_List_Init+0x22c>)
 8009684:	4293      	cmp	r3, r2
 8009686:	d030      	beq.n	80096ea <HAL_DMAEx_List_Init+0x162>
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	4a4a      	ldr	r2, [pc, #296]	@ (80097b8 <HAL_DMAEx_List_Init+0x230>)
 800968e:	4293      	cmp	r3, r2
 8009690:	d02b      	beq.n	80096ea <HAL_DMAEx_List_Init+0x162>
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	4a49      	ldr	r2, [pc, #292]	@ (80097bc <HAL_DMAEx_List_Init+0x234>)
 8009698:	4293      	cmp	r3, r2
 800969a:	d026      	beq.n	80096ea <HAL_DMAEx_List_Init+0x162>
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	4a47      	ldr	r2, [pc, #284]	@ (80097c0 <HAL_DMAEx_List_Init+0x238>)
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d021      	beq.n	80096ea <HAL_DMAEx_List_Init+0x162>
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	4a46      	ldr	r2, [pc, #280]	@ (80097c4 <HAL_DMAEx_List_Init+0x23c>)
 80096ac:	4293      	cmp	r3, r2
 80096ae:	d01c      	beq.n	80096ea <HAL_DMAEx_List_Init+0x162>
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	4a44      	ldr	r2, [pc, #272]	@ (80097c8 <HAL_DMAEx_List_Init+0x240>)
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d017      	beq.n	80096ea <HAL_DMAEx_List_Init+0x162>
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	4a43      	ldr	r2, [pc, #268]	@ (80097cc <HAL_DMAEx_List_Init+0x244>)
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d012      	beq.n	80096ea <HAL_DMAEx_List_Init+0x162>
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	4a41      	ldr	r2, [pc, #260]	@ (80097d0 <HAL_DMAEx_List_Init+0x248>)
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d00d      	beq.n	80096ea <HAL_DMAEx_List_Init+0x162>
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	4a40      	ldr	r2, [pc, #256]	@ (80097d4 <HAL_DMAEx_List_Init+0x24c>)
 80096d4:	4293      	cmp	r3, r2
 80096d6:	d008      	beq.n	80096ea <HAL_DMAEx_List_Init+0x162>
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	4a3e      	ldr	r2, [pc, #248]	@ (80097d8 <HAL_DMAEx_List_Init+0x250>)
 80096de:	4293      	cmp	r3, r2
 80096e0:	d003      	beq.n	80096ea <HAL_DMAEx_List_Init+0x162>
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	4a3d      	ldr	r2, [pc, #244]	@ (80097dc <HAL_DMAEx_List_Init+0x254>)
 80096e8:	4293      	cmp	r3, r2
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2200      	movs	r2, #0
 80096ee:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2202      	movs	r2, #2
 80096f6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	695a      	ldr	r2, [r3, #20]
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f042 0206 	orr.w	r2, r2, #6
 8009708:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 800970a:	e00f      	b.n	800972c <HAL_DMAEx_List_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800970c:	f7fc f960 	bl	80059d0 <HAL_GetTick>
 8009710:	4602      	mov	r2, r0
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	1ad3      	subs	r3, r2, r3
 8009716:	2b05      	cmp	r3, #5
 8009718:	d908      	bls.n	800972c <HAL_DMAEx_List_Init+0x1a4>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2210      	movs	r2, #16
 800971e:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2203      	movs	r2, #3
 8009724:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8009728:	2301      	movs	r3, #1
 800972a:	e015      	b.n	8009758 <HAL_DMAEx_List_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	695b      	ldr	r3, [r3, #20]
 8009732:	f003 0301 	and.w	r3, r3, #1
 8009736:	2b00      	cmp	r3, #0
 8009738:	d1e8      	bne.n	800970c <HAL_DMAEx_List_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f000 faba 	bl	8009cb4 <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2200      	movs	r2, #0
 800974c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2201      	movs	r2, #1
 8009752:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8009756:	2300      	movs	r3, #0
}
 8009758:	4618      	mov	r0, r3
 800975a:	3710      	adds	r7, #16
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}
 8009760:	40020050 	.word	0x40020050
 8009764:	50020050 	.word	0x50020050
 8009768:	400200d0 	.word	0x400200d0
 800976c:	500200d0 	.word	0x500200d0
 8009770:	40020150 	.word	0x40020150
 8009774:	50020150 	.word	0x50020150
 8009778:	400201d0 	.word	0x400201d0
 800977c:	500201d0 	.word	0x500201d0
 8009780:	40020250 	.word	0x40020250
 8009784:	50020250 	.word	0x50020250
 8009788:	400202d0 	.word	0x400202d0
 800978c:	500202d0 	.word	0x500202d0
 8009790:	40020350 	.word	0x40020350
 8009794:	50020350 	.word	0x50020350
 8009798:	400203d0 	.word	0x400203d0
 800979c:	500203d0 	.word	0x500203d0
 80097a0:	40021050 	.word	0x40021050
 80097a4:	50021050 	.word	0x50021050
 80097a8:	400210d0 	.word	0x400210d0
 80097ac:	500210d0 	.word	0x500210d0
 80097b0:	40021150 	.word	0x40021150
 80097b4:	50021150 	.word	0x50021150
 80097b8:	400211d0 	.word	0x400211d0
 80097bc:	500211d0 	.word	0x500211d0
 80097c0:	40021250 	.word	0x40021250
 80097c4:	50021250 	.word	0x50021250
 80097c8:	400212d0 	.word	0x400212d0
 80097cc:	500212d0 	.word	0x500212d0
 80097d0:	40021350 	.word	0x40021350
 80097d4:	50021350 	.word	0x50021350
 80097d8:	400213d0 	.word	0x400213d0
 80097dc:	500213d0 	.word	0x500213d0

080097e0 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b086      	sub	sp, #24
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d003      	beq.n	80097f6 <HAL_DMAEx_List_Start_IT+0x16>
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d101      	bne.n	80097fa <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 80097f6:	2301      	movs	r3, #1
 80097f8:	e082      	b.n	8009900 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8009800:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	695b      	ldr	r3, [r3, #20]
 8009808:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800980c:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 800980e:	7dfb      	ldrb	r3, [r7, #23]
 8009810:	2b01      	cmp	r3, #1
 8009812:	d005      	beq.n	8009820 <HAL_DMAEx_List_Start_IT+0x40>
 8009814:	7dfb      	ldrb	r3, [r7, #23]
 8009816:	2b02      	cmp	r3, #2
 8009818:	d16a      	bne.n	80098f0 <HAL_DMAEx_List_Start_IT+0x110>
 800981a:	693b      	ldr	r3, [r7, #16]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d067      	beq.n	80098f0 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8009826:	b2db      	uxtb	r3, r3
 8009828:	2b01      	cmp	r3, #1
 800982a:	d157      	bne.n	80098dc <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8009832:	2b01      	cmp	r3, #1
 8009834:	d101      	bne.n	800983a <HAL_DMAEx_List_Start_IT+0x5a>
 8009836:	2302      	movs	r3, #2
 8009838:	e062      	b.n	8009900 <HAL_DMAEx_List_Start_IT+0x120>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2201      	movs	r2, #1
 800983e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2202      	movs	r2, #2
 8009846:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800984e:	2202      	movs	r2, #2
 8009850:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	2200      	movs	r2, #0
 8009856:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800985c:	2200      	movs	r2, #0
 800985e:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	695a      	ldr	r2, [r3, #20]
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 800986e:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009874:	2b00      	cmp	r3, #0
 8009876:	d007      	beq.n	8009888 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	695a      	ldr	r2, [r3, #20]
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009886:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800988c:	2b00      	cmp	r3, #0
 800988e:	d007      	beq.n	80098a0 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	695a      	ldr	r2, [r3, #20]
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800989e:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	f107 010c 	add.w	r1, r7, #12
 80098aa:	2200      	movs	r2, #0
 80098ac:	4618      	mov	r0, r3
 80098ae:	f000 fd1d 	bl	800a2ec <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	4619      	mov	r1, r3
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681a      	ldr	r2, [r3, #0]
 80098be:	0c0b      	lsrs	r3, r1, #16
 80098c0:	041b      	lsls	r3, r3, #16
 80098c2:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	461a      	mov	r2, r3
 80098cc:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80098d0:	4013      	ands	r3, r2
 80098d2:	68f9      	ldr	r1, [r7, #12]
 80098d4:	687a      	ldr	r2, [r7, #4]
 80098d6:	6812      	ldr	r2, [r2, #0]
 80098d8:	430b      	orrs	r3, r1
 80098da:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	695a      	ldr	r2, [r3, #20]
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f042 0201 	orr.w	r2, r2, #1
 80098ea:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 80098ec:	2300      	movs	r3, #0
 80098ee:	e007      	b.n	8009900 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2240      	movs	r2, #64	@ 0x40
 80098f4:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2200      	movs	r2, #0
 80098fa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 80098fe:	2301      	movs	r3, #1
}
 8009900:	4618      	mov	r0, r3
 8009902:	3718      	adds	r7, #24
 8009904:	46bd      	mov	sp, r7
 8009906:	bd80      	pop	{r7, pc}

08009908 <HAL_DMAEx_List_BuildNode>:
  *         addressable space.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b082      	sub	sp, #8
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
 8009910:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d002      	beq.n	800991e <HAL_DMAEx_List_BuildNode+0x16>
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d101      	bne.n	8009922 <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 800991e:	2301      	movs	r3, #1
 8009920:	e004      	b.n	800992c <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 8009922:	6839      	ldr	r1, [r7, #0]
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f000 fb1d 	bl	8009f64 <DMA_List_BuildNode>

  return HAL_OK;
 800992a:	2300      	movs	r3, #0
}
 800992c:	4618      	mov	r0, r3
 800992e:	3708      	adds	r7, #8
 8009930:	46bd      	mov	sp, r7
 8009932:	bd80      	pop	{r7, pc}

08009934 <HAL_DMAEx_List_InsertNode>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode(DMA_QListTypeDef *const pQList,
                                            DMA_NodeTypeDef *const pPrevNode,
                                            DMA_NodeTypeDef *const pNewNode)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b08c      	sub	sp, #48	@ 0x30
 8009938:	af00      	add	r7, sp, #0
 800993a:	60f8      	str	r0, [r7, #12]
 800993c:	60b9      	str	r1, [r7, #8]
 800993e:	607a      	str	r2, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d002      	beq.n	800994c <HAL_DMAEx_List_InsertNode+0x18>
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d101      	bne.n	8009950 <HAL_DMAEx_List_InsertNode+0x1c>
  {
    return HAL_ERROR;
 800994c:	2301      	movs	r3, #1
 800994e:	e0b6      	b.n	8009abe <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	695b      	ldr	r3, [r3, #20]
 8009954:	2b01      	cmp	r3, #1
 8009956:	d104      	bne.n	8009962 <HAL_DMAEx_List_InsertNode+0x2e>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	2204      	movs	r2, #4
 800995c:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800995e:	2301      	movs	r3, #1
 8009960:	e0ad      	b.n	8009abe <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pPrevNode, pNewNode) != 0U)
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	687a      	ldr	r2, [r7, #4]
 8009968:	68b9      	ldr	r1, [r7, #8]
 800996a:	4618      	mov	r0, r3
 800996c:	f000 fc52 	bl	800a214 <DMA_List_CheckNodesBaseAddresses>
 8009970:	4603      	mov	r3, r0
 8009972:	2b00      	cmp	r3, #0
 8009974:	d004      	beq.n	8009980 <HAL_DMAEx_List_InsertNode+0x4c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	2205      	movs	r2, #5
 800997a:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800997c:	2301      	movs	r3, #1
 800997e:	e09e      	b.n	8009abe <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pPrevNode, pNewNode) != 0U)
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	687a      	ldr	r2, [r7, #4]
 8009986:	68b9      	ldr	r1, [r7, #8]
 8009988:	4618      	mov	r0, r3
 800998a:	f000 fc73 	bl	800a274 <DMA_List_CheckNodesTypes>
 800998e:	4603      	mov	r3, r0
 8009990:	2b00      	cmp	r3, #0
 8009992:	d004      	beq.n	800999e <HAL_DMAEx_List_InsertNode+0x6a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	2204      	movs	r2, #4
 8009998:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800999a:	2301      	movs	r3, #1
 800999c:	e08f      	b.n	8009abe <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	2202      	movs	r2, #2
 80099a2:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	2200      	movs	r2, #0
 80099a8:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 80099aa:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80099ae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80099b2:	4619      	mov	r1, r3
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f000 fc99 	bl	800a2ec <DMA_List_GetCLLRNodeInfo>

  /* Empty queue */
  if (pQList->Head == NULL)
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d11a      	bne.n	80099f8 <HAL_DMAEx_List_InsertNode+0xc4>
  {
    /* Add only new node to queue */
    if (pPrevNode == NULL)
 80099c2:	68bb      	ldr	r3, [r7, #8]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d106      	bne.n	80099d6 <HAL_DMAEx_List_InsertNode+0xa2>
    {
      pQList->Head       = pNewNode;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	687a      	ldr	r2, [r7, #4]
 80099cc:	601a      	str	r2, [r3, #0]
      pQList->NodeNumber = 1U;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	2201      	movs	r2, #1
 80099d2:	609a      	str	r2, [r3, #8]
 80099d4:	e06c      	b.n	8009ab0 <HAL_DMAEx_List_InsertNode+0x17c>
    }
    /* Add previous node then new node to queue */
    else
    {
      pQList->Head                          = pPrevNode;
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	68ba      	ldr	r2, [r7, #8]
 80099da:	601a      	str	r2, [r3, #0]
      pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 80099dc:	687a      	ldr	r2, [r7, #4]
 80099de:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80099e2:	4013      	ands	r3, r2
 80099e4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80099e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80099e8:	4319      	orrs	r1, r3
 80099ea:	68bb      	ldr	r3, [r7, #8]
 80099ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->NodeNumber                    = 2U;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	2202      	movs	r2, #2
 80099f4:	609a      	str	r2, [r3, #8]
 80099f6:	e05b      	b.n	8009ab0 <HAL_DMAEx_List_InsertNode+0x17c>
  }
  /* Not empty queue */
  else
  {
    /* Add new node at the head of queue */
    if (pPrevNode == NULL)
 80099f8:	68bb      	ldr	r3, [r7, #8]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d10f      	bne.n	8009a1e <HAL_DMAEx_List_InsertNode+0xea>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	461a      	mov	r2, r3
 8009a04:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8009a08:	4013      	ands	r3, r2
 8009a0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009a0c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009a0e:	4319      	orrs	r1, r3
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->Head                         = pNewNode;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	687a      	ldr	r2, [r7, #4]
 8009a1a:	601a      	str	r2, [r3, #0]
 8009a1c:	e043      	b.n	8009aa6 <HAL_DMAEx_List_InsertNode+0x172>
    }
    /* Add new node according to selected position */
    else
    {
      /* Find node and get its position in selected queue */
      node_info.cllr_offset = cllr_offset;
 8009a1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a20:	617b      	str	r3, [r7, #20]
      if (DMA_List_FindNode(pQList, pPrevNode, &node_info) == 0U)
 8009a22:	f107 0314 	add.w	r3, r7, #20
 8009a26:	461a      	mov	r2, r3
 8009a28:	68b9      	ldr	r1, [r7, #8]
 8009a2a:	68f8      	ldr	r0, [r7, #12]
 8009a2c:	f000 fc8e 	bl	800a34c <DMA_List_FindNode>
 8009a30:	4603      	mov	r3, r0
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d132      	bne.n	8009a9c <HAL_DMAEx_List_InsertNode+0x168>
      {
        /* Selected node is the last queue node */
        if (node_info.currentnode_pos == pQList->NodeNumber)
 8009a36:	69fa      	ldr	r2, [r7, #28]
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	689b      	ldr	r3, [r3, #8]
 8009a3c:	429a      	cmp	r2, r3
 8009a3e:	d11a      	bne.n	8009a76 <HAL_DMAEx_List_InsertNode+0x142>
        {
          /* Check if queue is circular */
          if (pQList->FirstCircularNode != NULL)
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	685b      	ldr	r3, [r3, #4]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d00b      	beq.n	8009a60 <HAL_DMAEx_List_InsertNode+0x12c>
          {
            pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	685b      	ldr	r3, [r3, #4]
 8009a4c:	461a      	mov	r2, r3
 8009a4e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8009a52:	4013      	ands	r3, r2
 8009a54:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009a56:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009a58:	4319      	orrs	r1, r3
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          }

          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8009a60:	687a      	ldr	r2, [r7, #4]
 8009a62:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8009a66:	4013      	ands	r3, r2
 8009a68:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009a6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009a6c:	4319      	orrs	r1, r3
 8009a6e:	68bb      	ldr	r3, [r7, #8]
 8009a70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009a74:	e017      	b.n	8009aa6 <HAL_DMAEx_List_InsertNode+0x172>
        }
        /* Selected node is not the last queue node */
        else
        {
          pNewNode->LinkRegisters[cllr_offset] = pPrevNode->LinkRegisters[cllr_offset];
 8009a76:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009a78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009a7a:	68bb      	ldr	r3, [r7, #8]
 8009a7c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8009a86:	687a      	ldr	r2, [r7, #4]
 8009a88:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8009a8c:	4013      	ands	r3, r2
 8009a8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009a90:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009a92:	4319      	orrs	r1, r3
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009a9a:	e004      	b.n	8009aa6 <HAL_DMAEx_List_InsertNode+0x172>
        }
      }
      else
      {
        /* Update the queue error code */
        pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NOTFOUND;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	2206      	movs	r2, #6
 8009aa0:	611a      	str	r2, [r3, #16]

        return HAL_ERROR;
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	e00b      	b.n	8009abe <HAL_DMAEx_List_InsertNode+0x18a>
      }
    }

    /* Increment queue node number */
    pQList->NodeNumber++;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	689b      	ldr	r3, [r3, #8]
 8009aaa:	1c5a      	adds	r2, r3, #1
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	609a      	str	r2, [r3, #8]
  }

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	2201      	movs	r2, #1
 8009aba:	731a      	strb	r2, [r3, #12]

  return HAL_OK;
 8009abc:	2300      	movs	r3, #0
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3730      	adds	r7, #48	@ 0x30
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}

08009ac6 <HAL_DMAEx_List_SetCircularMode>:
  * @brief  Set circular mode for linked-list queue.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularMode(DMA_QListTypeDef *const pQList)
{
 8009ac6:	b580      	push	{r7, lr}
 8009ac8:	b08a      	sub	sp, #40	@ 0x28
 8009aca:	af00      	add	r7, sp, #0
 8009acc:	6078      	str	r0, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d101      	bne.n	8009ad8 <HAL_DMAEx_List_SetCircularMode+0x12>
  {
    return HAL_ERROR;
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	e052      	b.n	8009b7e <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d104      	bne.n	8009aea <HAL_DMAEx_List_SetCircularMode+0x24>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2202      	movs	r2, #2
 8009ae4:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	e049      	b.n	8009b7e <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	685b      	ldr	r3, [r3, #4]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d00c      	beq.n	8009b0c <HAL_DMAEx_List_SetCircularMode+0x46>
  {
    if (pQList->FirstCircularNode == pQList->Head)
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	685a      	ldr	r2, [r3, #4]
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	429a      	cmp	r2, r3
 8009afc:	d101      	bne.n	8009b02 <HAL_DMAEx_List_SetCircularMode+0x3c>
    {
      return HAL_OK;
 8009afe:	2300      	movs	r3, #0
 8009b00:	e03d      	b.n	8009b7e <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2204      	movs	r2, #4
 8009b06:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8009b08:	2301      	movs	r3, #1
 8009b0a:	e038      	b.n	8009b7e <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	695b      	ldr	r3, [r3, #20]
 8009b10:	2b01      	cmp	r3, #1
 8009b12:	d104      	bne.n	8009b1e <HAL_DMAEx_List_SetCircularMode+0x58>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2204      	movs	r2, #4
 8009b18:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	e02f      	b.n	8009b7e <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2202      	movs	r2, #2
 8009b22:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2200      	movs	r2, #0
 8009b28:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pQList->Head, &cllr_mask, &cllr_offset);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	f107 0220 	add.w	r2, r7, #32
 8009b32:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8009b36:	4618      	mov	r0, r3
 8009b38:	f000 fbd8 	bl	800a2ec <DMA_List_GetCLLRNodeInfo>

  /* Find the last queue node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 8009b3c:	6a3b      	ldr	r3, [r7, #32]
 8009b3e:	60fb      	str	r3, [r7, #12]
  (void)DMA_List_FindNode(pQList, NULL, &node_info);
 8009b40:	f107 030c 	add.w	r3, r7, #12
 8009b44:	461a      	mov	r2, r3
 8009b46:	2100      	movs	r1, #0
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	f000 fbff 	bl	800a34c <DMA_List_FindNode>

  /* Set circular mode */
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	461a      	mov	r2, r3
 8009b54:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8009b58:	4013      	ands	r3, r2
 8009b5a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8009b5c:	69ba      	ldr	r2, [r7, #24]
 8009b5e:	4610      	mov	r0, r2
 8009b60:	6a3a      	ldr	r2, [r7, #32]
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8009b62:	430b      	orrs	r3, r1
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8009b64:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Update linked-list circular state */
  pQList->FirstCircularNode = pQList->Head;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681a      	ldr	r2, [r3, #0]
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2200      	movs	r2, #0
 8009b74:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2201      	movs	r2, #1
 8009b7a:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 8009b7c:	2300      	movs	r3, #0
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	3728      	adds	r7, #40	@ 0x28
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}
	...

08009b88 <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 8009b88:	b480      	push	{r7}
 8009b8a:	b085      	sub	sp, #20
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
 8009b90:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d002      	beq.n	8009b9e <HAL_DMAEx_List_LinkQ+0x16>
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d101      	bne.n	8009ba2 <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 8009b9e:	2301      	movs	r3, #1
 8009ba0:	e072      	b.n	8009c88 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8009ba8:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8009bb0:	b2db      	uxtb	r3, r3
 8009bb2:	2b02      	cmp	r3, #2
 8009bb4:	d002      	beq.n	8009bbc <HAL_DMAEx_List_LinkQ+0x34>
 8009bb6:	7bfb      	ldrb	r3, [r7, #15]
 8009bb8:	2b05      	cmp	r3, #5
 8009bba:	d108      	bne.n	8009bce <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2240      	movs	r2, #64	@ 0x40
 8009bc0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8009bca:	2301      	movs	r3, #1
 8009bcc:	e05c      	b.n	8009c88 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	7b1b      	ldrb	r3, [r3, #12]
 8009bd2:	b2db      	uxtb	r3, r3
 8009bd4:	2b02      	cmp	r3, #2
 8009bd6:	d104      	bne.n	8009be2 <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	2201      	movs	r2, #1
 8009bdc:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8009bde:	2301      	movs	r3, #1
 8009be0:	e052      	b.n	8009c88 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	4a2b      	ldr	r2, [pc, #172]	@ (8009c94 <HAL_DMAEx_List_LinkQ+0x10c>)
 8009be8:	4293      	cmp	r3, r2
 8009bea:	d022      	beq.n	8009c32 <HAL_DMAEx_List_LinkQ+0xaa>
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	4a29      	ldr	r2, [pc, #164]	@ (8009c98 <HAL_DMAEx_List_LinkQ+0x110>)
 8009bf2:	4293      	cmp	r3, r2
 8009bf4:	d01d      	beq.n	8009c32 <HAL_DMAEx_List_LinkQ+0xaa>
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	4a28      	ldr	r2, [pc, #160]	@ (8009c9c <HAL_DMAEx_List_LinkQ+0x114>)
 8009bfc:	4293      	cmp	r3, r2
 8009bfe:	d018      	beq.n	8009c32 <HAL_DMAEx_List_LinkQ+0xaa>
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	4a26      	ldr	r2, [pc, #152]	@ (8009ca0 <HAL_DMAEx_List_LinkQ+0x118>)
 8009c06:	4293      	cmp	r3, r2
 8009c08:	d013      	beq.n	8009c32 <HAL_DMAEx_List_LinkQ+0xaa>
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	4a25      	ldr	r2, [pc, #148]	@ (8009ca4 <HAL_DMAEx_List_LinkQ+0x11c>)
 8009c10:	4293      	cmp	r3, r2
 8009c12:	d00e      	beq.n	8009c32 <HAL_DMAEx_List_LinkQ+0xaa>
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	4a23      	ldr	r2, [pc, #140]	@ (8009ca8 <HAL_DMAEx_List_LinkQ+0x120>)
 8009c1a:	4293      	cmp	r3, r2
 8009c1c:	d009      	beq.n	8009c32 <HAL_DMAEx_List_LinkQ+0xaa>
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	4a22      	ldr	r2, [pc, #136]	@ (8009cac <HAL_DMAEx_List_LinkQ+0x124>)
 8009c24:	4293      	cmp	r3, r2
 8009c26:	d004      	beq.n	8009c32 <HAL_DMAEx_List_LinkQ+0xaa>
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	4a20      	ldr	r2, [pc, #128]	@ (8009cb0 <HAL_DMAEx_List_LinkQ+0x128>)
 8009c2e:	4293      	cmp	r3, r2
 8009c30:	d101      	bne.n	8009c36 <HAL_DMAEx_List_LinkQ+0xae>
 8009c32:	2301      	movs	r3, #1
 8009c34:	e000      	b.n	8009c38 <HAL_DMAEx_List_LinkQ+0xb0>
 8009c36:	2300      	movs	r3, #0
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d10b      	bne.n	8009c54 <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	6a1b      	ldr	r3, [r3, #32]
 8009c42:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d004      	beq.n	8009c54 <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	2203      	movs	r2, #3
 8009c4e:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8009c50:	2301      	movs	r3, #1
 8009c52:	e019      	b.n	8009c88 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c58:	2b81      	cmp	r3, #129	@ 0x81
 8009c5a:	d108      	bne.n	8009c6e <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	685b      	ldr	r3, [r3, #4]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d10d      	bne.n	8009c80 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	2204      	movs	r2, #4
 8009c68:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8009c6a:	2301      	movs	r3, #1
 8009c6c:	e00c      	b.n	8009c88 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	685b      	ldr	r3, [r3, #4]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d004      	beq.n	8009c80 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	2204      	movs	r2, #4
 8009c7a:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8009c7c:	2301      	movs	r3, #1
 8009c7e:	e003      	b.n	8009c88 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	683a      	ldr	r2, [r7, #0]
 8009c84:	675a      	str	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 8009c86:	2300      	movs	r3, #0
}
 8009c88:	4618      	mov	r0, r3
 8009c8a:	3714      	adds	r7, #20
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c92:	4770      	bx	lr
 8009c94:	40020350 	.word	0x40020350
 8009c98:	50020350 	.word	0x50020350
 8009c9c:	400203d0 	.word	0x400203d0
 8009ca0:	500203d0 	.word	0x500203d0
 8009ca4:	40021350 	.word	0x40021350
 8009ca8:	50021350 	.word	0x50021350
 8009cac:	400213d0 	.word	0x400213d0
 8009cb0:	500213d0 	.word	0x500213d0

08009cb4 <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	b085      	sub	sp, #20
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009cc4:	4313      	orrs	r3, r2
 8009cc6:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	4a85      	ldr	r2, [pc, #532]	@ (8009ee4 <DMA_List_Init+0x230>)
 8009cce:	4293      	cmp	r3, r2
 8009cd0:	f000 80a0 	beq.w	8009e14 <DMA_List_Init+0x160>
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	4a83      	ldr	r2, [pc, #524]	@ (8009ee8 <DMA_List_Init+0x234>)
 8009cda:	4293      	cmp	r3, r2
 8009cdc:	f000 809a 	beq.w	8009e14 <DMA_List_Init+0x160>
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	4a81      	ldr	r2, [pc, #516]	@ (8009eec <DMA_List_Init+0x238>)
 8009ce6:	4293      	cmp	r3, r2
 8009ce8:	f000 8094 	beq.w	8009e14 <DMA_List_Init+0x160>
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	4a7f      	ldr	r2, [pc, #508]	@ (8009ef0 <DMA_List_Init+0x23c>)
 8009cf2:	4293      	cmp	r3, r2
 8009cf4:	f000 808e 	beq.w	8009e14 <DMA_List_Init+0x160>
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	4a7d      	ldr	r2, [pc, #500]	@ (8009ef4 <DMA_List_Init+0x240>)
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	f000 8088 	beq.w	8009e14 <DMA_List_Init+0x160>
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	4a7b      	ldr	r2, [pc, #492]	@ (8009ef8 <DMA_List_Init+0x244>)
 8009d0a:	4293      	cmp	r3, r2
 8009d0c:	f000 8082 	beq.w	8009e14 <DMA_List_Init+0x160>
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	4a79      	ldr	r2, [pc, #484]	@ (8009efc <DMA_List_Init+0x248>)
 8009d16:	4293      	cmp	r3, r2
 8009d18:	d07c      	beq.n	8009e14 <DMA_List_Init+0x160>
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	4a78      	ldr	r2, [pc, #480]	@ (8009f00 <DMA_List_Init+0x24c>)
 8009d20:	4293      	cmp	r3, r2
 8009d22:	d077      	beq.n	8009e14 <DMA_List_Init+0x160>
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	4a76      	ldr	r2, [pc, #472]	@ (8009f04 <DMA_List_Init+0x250>)
 8009d2a:	4293      	cmp	r3, r2
 8009d2c:	d072      	beq.n	8009e14 <DMA_List_Init+0x160>
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	4a75      	ldr	r2, [pc, #468]	@ (8009f08 <DMA_List_Init+0x254>)
 8009d34:	4293      	cmp	r3, r2
 8009d36:	d06d      	beq.n	8009e14 <DMA_List_Init+0x160>
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	4a73      	ldr	r2, [pc, #460]	@ (8009f0c <DMA_List_Init+0x258>)
 8009d3e:	4293      	cmp	r3, r2
 8009d40:	d068      	beq.n	8009e14 <DMA_List_Init+0x160>
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	4a72      	ldr	r2, [pc, #456]	@ (8009f10 <DMA_List_Init+0x25c>)
 8009d48:	4293      	cmp	r3, r2
 8009d4a:	d063      	beq.n	8009e14 <DMA_List_Init+0x160>
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	4a70      	ldr	r2, [pc, #448]	@ (8009f14 <DMA_List_Init+0x260>)
 8009d52:	4293      	cmp	r3, r2
 8009d54:	d05e      	beq.n	8009e14 <DMA_List_Init+0x160>
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	4a6f      	ldr	r2, [pc, #444]	@ (8009f18 <DMA_List_Init+0x264>)
 8009d5c:	4293      	cmp	r3, r2
 8009d5e:	d059      	beq.n	8009e14 <DMA_List_Init+0x160>
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	4a6d      	ldr	r2, [pc, #436]	@ (8009f1c <DMA_List_Init+0x268>)
 8009d66:	4293      	cmp	r3, r2
 8009d68:	d054      	beq.n	8009e14 <DMA_List_Init+0x160>
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	4a6c      	ldr	r2, [pc, #432]	@ (8009f20 <DMA_List_Init+0x26c>)
 8009d70:	4293      	cmp	r3, r2
 8009d72:	d04f      	beq.n	8009e14 <DMA_List_Init+0x160>
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	4a6a      	ldr	r2, [pc, #424]	@ (8009f24 <DMA_List_Init+0x270>)
 8009d7a:	4293      	cmp	r3, r2
 8009d7c:	d04a      	beq.n	8009e14 <DMA_List_Init+0x160>
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	4a69      	ldr	r2, [pc, #420]	@ (8009f28 <DMA_List_Init+0x274>)
 8009d84:	4293      	cmp	r3, r2
 8009d86:	d045      	beq.n	8009e14 <DMA_List_Init+0x160>
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	4a67      	ldr	r2, [pc, #412]	@ (8009f2c <DMA_List_Init+0x278>)
 8009d8e:	4293      	cmp	r3, r2
 8009d90:	d040      	beq.n	8009e14 <DMA_List_Init+0x160>
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	4a66      	ldr	r2, [pc, #408]	@ (8009f30 <DMA_List_Init+0x27c>)
 8009d98:	4293      	cmp	r3, r2
 8009d9a:	d03b      	beq.n	8009e14 <DMA_List_Init+0x160>
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	4a64      	ldr	r2, [pc, #400]	@ (8009f34 <DMA_List_Init+0x280>)
 8009da2:	4293      	cmp	r3, r2
 8009da4:	d036      	beq.n	8009e14 <DMA_List_Init+0x160>
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	4a63      	ldr	r2, [pc, #396]	@ (8009f38 <DMA_List_Init+0x284>)
 8009dac:	4293      	cmp	r3, r2
 8009dae:	d031      	beq.n	8009e14 <DMA_List_Init+0x160>
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	4a61      	ldr	r2, [pc, #388]	@ (8009f3c <DMA_List_Init+0x288>)
 8009db6:	4293      	cmp	r3, r2
 8009db8:	d02c      	beq.n	8009e14 <DMA_List_Init+0x160>
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	4a60      	ldr	r2, [pc, #384]	@ (8009f40 <DMA_List_Init+0x28c>)
 8009dc0:	4293      	cmp	r3, r2
 8009dc2:	d027      	beq.n	8009e14 <DMA_List_Init+0x160>
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	4a5e      	ldr	r2, [pc, #376]	@ (8009f44 <DMA_List_Init+0x290>)
 8009dca:	4293      	cmp	r3, r2
 8009dcc:	d022      	beq.n	8009e14 <DMA_List_Init+0x160>
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	4a5d      	ldr	r2, [pc, #372]	@ (8009f48 <DMA_List_Init+0x294>)
 8009dd4:	4293      	cmp	r3, r2
 8009dd6:	d01d      	beq.n	8009e14 <DMA_List_Init+0x160>
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	4a5b      	ldr	r2, [pc, #364]	@ (8009f4c <DMA_List_Init+0x298>)
 8009dde:	4293      	cmp	r3, r2
 8009de0:	d018      	beq.n	8009e14 <DMA_List_Init+0x160>
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	4a5a      	ldr	r2, [pc, #360]	@ (8009f50 <DMA_List_Init+0x29c>)
 8009de8:	4293      	cmp	r3, r2
 8009dea:	d013      	beq.n	8009e14 <DMA_List_Init+0x160>
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	4a58      	ldr	r2, [pc, #352]	@ (8009f54 <DMA_List_Init+0x2a0>)
 8009df2:	4293      	cmp	r3, r2
 8009df4:	d00e      	beq.n	8009e14 <DMA_List_Init+0x160>
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	4a57      	ldr	r2, [pc, #348]	@ (8009f58 <DMA_List_Init+0x2a4>)
 8009dfc:	4293      	cmp	r3, r2
 8009dfe:	d009      	beq.n	8009e14 <DMA_List_Init+0x160>
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	4a55      	ldr	r2, [pc, #340]	@ (8009f5c <DMA_List_Init+0x2a8>)
 8009e06:	4293      	cmp	r3, r2
 8009e08:	d004      	beq.n	8009e14 <DMA_List_Init+0x160>
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	4a54      	ldr	r2, [pc, #336]	@ (8009f60 <DMA_List_Init+0x2ac>)
 8009e10:	4293      	cmp	r3, r2
 8009e12:	d101      	bne.n	8009e18 <DMA_List_Init+0x164>
 8009e14:	2301      	movs	r3, #1
 8009e16:	e000      	b.n	8009e1a <DMA_List_Init+0x166>
 8009e18:	2300      	movs	r3, #0
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d004      	beq.n	8009e28 <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e22:	68fa      	ldr	r2, [r7, #12]
 8009e24:	4313      	orrs	r3, r2
 8009e26:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	695b      	ldr	r3, [r3, #20]
 8009e2e:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	68fa      	ldr	r2, [r7, #12]
 8009e38:	430a      	orrs	r2, r1
 8009e3a:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	2200      	movs	r2, #0
 8009e42:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	687a      	ldr	r2, [r7, #4]
 8009e4a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8009e4c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	2200      	movs	r2, #0
 8009e54:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	2200      	movs	r2, #0
 8009e64:	651a      	str	r2, [r3, #80]	@ 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	4a2a      	ldr	r2, [pc, #168]	@ (8009f14 <DMA_List_Init+0x260>)
 8009e6c:	4293      	cmp	r3, r2
 8009e6e:	d022      	beq.n	8009eb6 <DMA_List_Init+0x202>
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	4a28      	ldr	r2, [pc, #160]	@ (8009f18 <DMA_List_Init+0x264>)
 8009e76:	4293      	cmp	r3, r2
 8009e78:	d01d      	beq.n	8009eb6 <DMA_List_Init+0x202>
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	4a27      	ldr	r2, [pc, #156]	@ (8009f1c <DMA_List_Init+0x268>)
 8009e80:	4293      	cmp	r3, r2
 8009e82:	d018      	beq.n	8009eb6 <DMA_List_Init+0x202>
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	4a25      	ldr	r2, [pc, #148]	@ (8009f20 <DMA_List_Init+0x26c>)
 8009e8a:	4293      	cmp	r3, r2
 8009e8c:	d013      	beq.n	8009eb6 <DMA_List_Init+0x202>
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	4a30      	ldr	r2, [pc, #192]	@ (8009f54 <DMA_List_Init+0x2a0>)
 8009e94:	4293      	cmp	r3, r2
 8009e96:	d00e      	beq.n	8009eb6 <DMA_List_Init+0x202>
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	4a2e      	ldr	r2, [pc, #184]	@ (8009f58 <DMA_List_Init+0x2a4>)
 8009e9e:	4293      	cmp	r3, r2
 8009ea0:	d009      	beq.n	8009eb6 <DMA_List_Init+0x202>
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	4a2d      	ldr	r2, [pc, #180]	@ (8009f5c <DMA_List_Init+0x2a8>)
 8009ea8:	4293      	cmp	r3, r2
 8009eaa:	d004      	beq.n	8009eb6 <DMA_List_Init+0x202>
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	4a2b      	ldr	r2, [pc, #172]	@ (8009f60 <DMA_List_Init+0x2ac>)
 8009eb2:	4293      	cmp	r3, r2
 8009eb4:	d101      	bne.n	8009eba <DMA_List_Init+0x206>
 8009eb6:	2301      	movs	r3, #1
 8009eb8:	e000      	b.n	8009ebc <DMA_List_Init+0x208>
 8009eba:	2300      	movs	r3, #0
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d007      	beq.n	8009ed0 <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	2200      	movs	r2, #0
 8009ece:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8009ed8:	bf00      	nop
 8009eda:	3714      	adds	r7, #20
 8009edc:	46bd      	mov	sp, r7
 8009ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee2:	4770      	bx	lr
 8009ee4:	40020050 	.word	0x40020050
 8009ee8:	50020050 	.word	0x50020050
 8009eec:	400200d0 	.word	0x400200d0
 8009ef0:	500200d0 	.word	0x500200d0
 8009ef4:	40020150 	.word	0x40020150
 8009ef8:	50020150 	.word	0x50020150
 8009efc:	400201d0 	.word	0x400201d0
 8009f00:	500201d0 	.word	0x500201d0
 8009f04:	40020250 	.word	0x40020250
 8009f08:	50020250 	.word	0x50020250
 8009f0c:	400202d0 	.word	0x400202d0
 8009f10:	500202d0 	.word	0x500202d0
 8009f14:	40020350 	.word	0x40020350
 8009f18:	50020350 	.word	0x50020350
 8009f1c:	400203d0 	.word	0x400203d0
 8009f20:	500203d0 	.word	0x500203d0
 8009f24:	40021050 	.word	0x40021050
 8009f28:	50021050 	.word	0x50021050
 8009f2c:	400210d0 	.word	0x400210d0
 8009f30:	500210d0 	.word	0x500210d0
 8009f34:	40021150 	.word	0x40021150
 8009f38:	50021150 	.word	0x50021150
 8009f3c:	400211d0 	.word	0x400211d0
 8009f40:	500211d0 	.word	0x500211d0
 8009f44:	40021250 	.word	0x40021250
 8009f48:	50021250 	.word	0x50021250
 8009f4c:	400212d0 	.word	0x400212d0
 8009f50:	500212d0 	.word	0x500212d0
 8009f54:	40021350 	.word	0x40021350
 8009f58:	50021350 	.word	0x50021350
 8009f5c:	400213d0 	.word	0x400213d0
 8009f60:	500213d0 	.word	0x500213d0

08009f64 <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 8009f64:	b480      	push	{r7}
 8009f66:	b085      	sub	sp, #20
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
 8009f6c:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8009f76:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 8009f7c:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8009f82:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 8009f88:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	f003 0320 	and.w	r3, r3, #32
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d017      	beq.n	8009fca <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fa6:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fac:	3b01      	subs	r3, #1
 8009fae:	051b      	lsls	r3, r3, #20
 8009fb0:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8009fb4:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fba:	3b01      	subs	r3, #1
 8009fbc:	011b      	lsls	r3, r3, #4
 8009fbe:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8009fc2:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8009fc4:	431a      	orrs	r2, r3
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	6859      	ldr	r1, [r3, #4]
 8009fd2:	f240 23ff 	movw	r3, #767	@ 0x2ff
 8009fd6:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8009fd8:	431a      	orrs	r2, r3
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	68db      	ldr	r3, [r3, #12]
 8009fe2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009fe6:	d10c      	bne.n	800a002 <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	f003 0320 	and.w	r3, r3, #32
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d011      	beq.n	800a018 <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	685b      	ldr	r3, [r3, #4]
 8009ff8:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8009ffc:	683b      	ldr	r3, [r7, #0]
 8009ffe:	605a      	str	r2, [r3, #4]
 800a000:	e00a      	b.n	800a018 <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	68db      	ldr	r3, [r3, #12]
 800a006:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a00a:	d105      	bne.n	800a018 <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	685b      	ldr	r3, [r3, #4]
 800a010:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Configure HW Peripheral flow control selection */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= pNodeConfig->Init.Mode;
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	685a      	ldr	r2, [r3, #4]
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a020:	431a      	orrs	r2, r3
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	605a      	str	r2, [r3, #4]

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d00f      	beq.n	800a04e <DMA_List_BuildNode+0xea>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a03a:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a040:	041b      	lsls	r3, r3, #16
 800a042:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 800a046:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 800a048:	431a      	orrs	r2, r3
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a052:	b29a      	uxth	r2, r3
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	f003 0302 	and.w	r3, r3, #2
 800a060:	2b00      	cmp	r3, #0
 800a062:	d04e      	beq.n	800a102 <DMA_List_BuildNode+0x19e>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a06c:	3b01      	subs	r3, #1
 800a06e:	0419      	lsls	r1, r3, #16
 800a070:	4b66      	ldr	r3, [pc, #408]	@ (800a20c <DMA_List_BuildNode+0x2a8>)
 800a072:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 800a074:	431a      	orrs	r2, r3
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a07e:	2b00      	cmp	r3, #0
 800a080:	da06      	bge.n	800a090 <DMA_List_BuildNode+0x12c>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	689b      	ldr	r3, [r3, #8]
 800a086:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	609a      	str	r2, [r3, #8]
 800a08e:	e005      	b.n	800a09c <DMA_List_BuildNode+0x138>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	689b      	ldr	r3, [r3, #8]
 800a094:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	da06      	bge.n	800a0b2 <DMA_List_BuildNode+0x14e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	689b      	ldr	r3, [r3, #8]
 800a0a8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	609a      	str	r2, [r3, #8]
 800a0b0:	e005      	b.n	800a0be <DMA_List_BuildNode+0x15a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	689b      	ldr	r3, [r3, #8]
 800a0b6:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	da06      	bge.n	800a0d4 <DMA_List_BuildNode+0x170>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	689b      	ldr	r3, [r3, #8]
 800a0ca:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	609a      	str	r2, [r3, #8]
 800a0d2:	e005      	b.n	800a0e0 <DMA_List_BuildNode+0x17c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	689b      	ldr	r3, [r3, #8]
 800a0d8:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	da06      	bge.n	800a0f6 <DMA_List_BuildNode+0x192>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	689b      	ldr	r3, [r3, #8]
 800a0ec:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	609a      	str	r2, [r3, #8]
 800a0f4:	e005      	b.n	800a102 <DMA_List_BuildNode+0x19e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 800a0f6:	683b      	ldr	r3, [r7, #0]
 800a0f8:	689b      	ldr	r3, [r3, #8]
 800a0fa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f003 0302 	and.w	r3, r3, #2
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d059      	beq.n	800a1d2 <DMA_List_BuildNode+0x26e>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a122:	2b00      	cmp	r3, #0
 800a124:	da09      	bge.n	800a13a <DMA_List_BuildNode+0x1d6>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a12a:	425b      	negs	r3, r3
 800a12c:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	f3c3 020c 	ubfx	r2, r3, #0, #13
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	615a      	str	r2, [r3, #20]
 800a138:	e005      	b.n	800a146 <DMA_List_BuildNode+0x1e2>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a13e:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	da0d      	bge.n	800a16a <DMA_List_BuildNode+0x206>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a152:	425b      	negs	r3, r3
 800a154:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 800a156:	683b      	ldr	r3, [r7, #0]
 800a158:	695a      	ldr	r2, [r3, #20]
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	0419      	lsls	r1, r3, #16
 800a15e:	4b2c      	ldr	r3, [pc, #176]	@ (800a210 <DMA_List_BuildNode+0x2ac>)
 800a160:	400b      	ands	r3, r1
 800a162:	431a      	orrs	r2, r3
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	615a      	str	r2, [r3, #20]
 800a168:	e009      	b.n	800a17e <DMA_List_BuildNode+0x21a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a172:	0419      	lsls	r1, r3, #16
 800a174:	4b26      	ldr	r3, [pc, #152]	@ (800a210 <DMA_List_BuildNode+0x2ac>)
 800a176:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 800a178:	431a      	orrs	r2, r3
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a182:	2b00      	cmp	r3, #0
 800a184:	da08      	bge.n	800a198 <DMA_List_BuildNode+0x234>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a18a:	425b      	negs	r3, r3
 800a18c:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	b29a      	uxth	r2, r3
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	619a      	str	r2, [r3, #24]
 800a196:	e004      	b.n	800a1a2 <DMA_List_BuildNode+0x23e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a19c:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	da0b      	bge.n	800a1c2 <DMA_List_BuildNode+0x25e>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a1ae:	425b      	negs	r3, r3
 800a1b0:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 800a1ba:	431a      	orrs	r2, r3
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	619a      	str	r2, [r3, #24]
 800a1c0:	e007      	b.n	800a1d2 <DMA_List_BuildNode+0x26e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a1ca:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 800a1cc:	431a      	orrs	r2, r3
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	619a      	str	r2, [r3, #24]
  }


  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681a      	ldr	r2, [r3, #0]
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	f003 0302 	and.w	r3, r3, #2
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d006      	beq.n	800a1f4 <DMA_List_BuildNode+0x290>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	6a1b      	ldr	r3, [r3, #32]
 800a1ea:	f443 62e0 	orr.w	r2, r3, #1792	@ 0x700
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 800a1f2:	e005      	b.n	800a200 <DMA_List_BuildNode+0x29c>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	6a1b      	ldr	r3, [r3, #32]
 800a1f8:	f443 62a0 	orr.w	r2, r3, #1280	@ 0x500
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	621a      	str	r2, [r3, #32]
}
 800a200:	bf00      	nop
 800a202:	3714      	adds	r7, #20
 800a204:	46bd      	mov	sp, r7
 800a206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20a:	4770      	bx	lr
 800a20c:	07ff0000 	.word	0x07ff0000
 800a210:	1fff0000 	.word	0x1fff0000

0800a214 <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 800a214:	b480      	push	{r7}
 800a216:	b087      	sub	sp, #28
 800a218:	af00      	add	r7, sp, #0
 800a21a:	60f8      	str	r0, [r7, #12]
 800a21c:	60b9      	str	r1, [r7, #8]
 800a21e:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 800a220:	68fa      	ldr	r2, [r7, #12]
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	431a      	orrs	r2, r3
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	4313      	orrs	r3, r2
 800a22a:	0c1b      	lsrs	r3, r3, #16
 800a22c:	041b      	lsls	r3, r3, #16
 800a22e:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 800a230:	2300      	movs	r3, #0
 800a232:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d002      	beq.n	800a240 <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	617b      	str	r3, [r7, #20]
 800a23e:	e00a      	b.n	800a256 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 800a240:	68bb      	ldr	r3, [r7, #8]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d002      	beq.n	800a24c <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 800a246:	68bb      	ldr	r3, [r7, #8]
 800a248:	617b      	str	r3, [r7, #20]
 800a24a:	e004      	b.n	800a256 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d001      	beq.n	800a256 <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 800a256:	697b      	ldr	r3, [r7, #20]
 800a258:	0c1b      	lsrs	r3, r3, #16
 800a25a:	041b      	lsls	r3, r3, #16
 800a25c:	693a      	ldr	r2, [r7, #16]
 800a25e:	429a      	cmp	r2, r3
 800a260:	d001      	beq.n	800a266 <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 800a262:	2301      	movs	r3, #1
 800a264:	e000      	b.n	800a268 <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 800a266:	2300      	movs	r3, #0
}
 800a268:	4618      	mov	r0, r3
 800a26a:	371c      	adds	r7, #28
 800a26c:	46bd      	mov	sp, r7
 800a26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a272:	4770      	bx	lr

0800a274 <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 800a274:	b480      	push	{r7}
 800a276:	b087      	sub	sp, #28
 800a278:	af00      	add	r7, sp, #0
 800a27a:	60f8      	str	r0, [r7, #12]
 800a27c:	60b9      	str	r1, [r7, #8]
 800a27e:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 800a280:	2300      	movs	r3, #0
 800a282:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d004      	beq.n	800a294 <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	6a1b      	ldr	r3, [r3, #32]
 800a28e:	b2db      	uxtb	r3, r3
 800a290:	617b      	str	r3, [r7, #20]
 800a292:	e00e      	b.n	800a2b2 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d004      	beq.n	800a2a4 <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 800a29a:	68bb      	ldr	r3, [r7, #8]
 800a29c:	6a1b      	ldr	r3, [r3, #32]
 800a29e:	b2db      	uxtb	r3, r3
 800a2a0:	617b      	str	r3, [r7, #20]
 800a2a2:	e006      	b.n	800a2b2 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d003      	beq.n	800a2b2 <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6a1b      	ldr	r3, [r3, #32]
 800a2ae:	b2db      	uxtb	r3, r3
 800a2b0:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 800a2b2:	68bb      	ldr	r3, [r7, #8]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d007      	beq.n	800a2c8 <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	6a1b      	ldr	r3, [r3, #32]
 800a2bc:	b2db      	uxtb	r3, r3
 800a2be:	697a      	ldr	r2, [r7, #20]
 800a2c0:	429a      	cmp	r2, r3
 800a2c2:	d001      	beq.n	800a2c8 <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 800a2c4:	2302      	movs	r3, #2
 800a2c6:	e00b      	b.n	800a2e0 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d007      	beq.n	800a2de <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6a1b      	ldr	r3, [r3, #32]
 800a2d2:	b2db      	uxtb	r3, r3
 800a2d4:	697a      	ldr	r2, [r7, #20]
 800a2d6:	429a      	cmp	r2, r3
 800a2d8:	d001      	beq.n	800a2de <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 800a2da:	2303      	movs	r3, #3
 800a2dc:	e000      	b.n	800a2e0 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 800a2de:	2300      	movs	r3, #0
}
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	371c      	adds	r7, #28
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ea:	4770      	bx	lr

0800a2ec <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	b085      	sub	sp, #20
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	60f8      	str	r0, [r7, #12]
 800a2f4:	60b9      	str	r1, [r7, #8]
 800a2f6:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	6a1b      	ldr	r3, [r3, #32]
 800a2fc:	f003 0302 	and.w	r3, r3, #2
 800a300:	2b00      	cmp	r3, #0
 800a302:	d00c      	beq.n	800a31e <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d002      	beq.n	800a310 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	4a0d      	ldr	r2, [pc, #52]	@ (800a344 <DMA_List_GetCLLRNodeInfo+0x58>)
 800a30e:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d00f      	beq.n	800a336 <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2207      	movs	r2, #7
 800a31a:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 800a31c:	e00b      	b.n	800a336 <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 800a31e:	68bb      	ldr	r3, [r7, #8]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d002      	beq.n	800a32a <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 800a324:	68bb      	ldr	r3, [r7, #8]
 800a326:	4a08      	ldr	r2, [pc, #32]	@ (800a348 <DMA_List_GetCLLRNodeInfo+0x5c>)
 800a328:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d002      	beq.n	800a336 <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2205      	movs	r2, #5
 800a334:	601a      	str	r2, [r3, #0]
}
 800a336:	bf00      	nop
 800a338:	3714      	adds	r7, #20
 800a33a:	46bd      	mov	sp, r7
 800a33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a340:	4770      	bx	lr
 800a342:	bf00      	nop
 800a344:	fe010000 	.word	0xfe010000
 800a348:	f8010000 	.word	0xf8010000

0800a34c <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 800a34c:	b480      	push	{r7}
 800a34e:	b089      	sub	sp, #36	@ 0x24
 800a350:	af00      	add	r7, sp, #0
 800a352:	60f8      	str	r0, [r7, #12]
 800a354:	60b9      	str	r1, [r7, #8]
 800a356:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 800a358:	2300      	movs	r3, #0
 800a35a:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 800a35c:	2300      	movs	r3, #0
 800a35e:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 800a360:	2300      	movs	r3, #0
 800a362:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 800a36a:	68bb      	ldr	r3, [r7, #8]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d142      	bne.n	800a3f6 <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 800a370:	e01d      	b.n	800a3ae <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 800a372:	69fb      	ldr	r3, [r7, #28]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d107      	bne.n	800a388 <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	461a      	mov	r2, r3
 800a37e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800a382:	4013      	ands	r3, r2
 800a384:	61bb      	str	r3, [r7, #24]
 800a386:	e00f      	b.n	800a3a8 <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 800a388:	69bb      	ldr	r3, [r7, #24]
 800a38a:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	0c1b      	lsrs	r3, r3, #16
 800a392:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 800a394:	69ba      	ldr	r2, [r7, #24]
 800a396:	4413      	add	r3, r2
 800a398:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 800a39a:	693b      	ldr	r3, [r7, #16]
 800a39c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 800a3a0:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800a3a4:	4013      	ands	r3, r2
 800a3a6:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 800a3a8:	69fb      	ldr	r3, [r7, #28]
 800a3aa:	3301      	adds	r3, #1
 800a3ac:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	689b      	ldr	r3, [r3, #8]
 800a3b2:	69fa      	ldr	r2, [r7, #28]
 800a3b4:	429a      	cmp	r2, r3
 800a3b6:	d3dc      	bcc.n	800a372 <DMA_List_FindNode+0x26>
 800a3b8:	e029      	b.n	800a40e <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 800a3ba:	69fb      	ldr	r3, [r7, #28]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d107      	bne.n	800a3d0 <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	461a      	mov	r2, r3
 800a3c6:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800a3ca:	4013      	ands	r3, r2
 800a3cc:	61bb      	str	r3, [r7, #24]
 800a3ce:	e00f      	b.n	800a3f0 <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 800a3d0:	69bb      	ldr	r3, [r7, #24]
 800a3d2:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	0c1b      	lsrs	r3, r3, #16
 800a3da:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 800a3dc:	69ba      	ldr	r2, [r7, #24]
 800a3de:	4413      	add	r3, r2
 800a3e0:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 800a3e2:	693b      	ldr	r3, [r7, #16]
 800a3e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 800a3e8:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800a3ec:	4013      	ands	r3, r2
 800a3ee:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 800a3f0:	69fb      	ldr	r3, [r7, #28]
 800a3f2:	3301      	adds	r3, #1
 800a3f4:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	689b      	ldr	r3, [r3, #8]
 800a3fa:	69fa      	ldr	r2, [r7, #28]
 800a3fc:	429a      	cmp	r2, r3
 800a3fe:	d206      	bcs.n	800a40e <DMA_List_FindNode+0xc2>
 800a400:	68ba      	ldr	r2, [r7, #8]
 800a402:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800a406:	4013      	ands	r3, r2
 800a408:	69ba      	ldr	r2, [r7, #24]
 800a40a:	429a      	cmp	r2, r3
 800a40c:	d1d5      	bne.n	800a3ba <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d008      	beq.n	800a426 <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 800a414:	68ba      	ldr	r2, [r7, #8]
 800a416:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800a41a:	4013      	ands	r3, r2
 800a41c:	69ba      	ldr	r2, [r7, #24]
 800a41e:	429a      	cmp	r2, r3
 800a420:	d001      	beq.n	800a426 <DMA_List_FindNode+0xda>
    {
      return 1U;
 800a422:	2301      	movs	r3, #1
 800a424:	e02b      	b.n	800a47e <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	69fa      	ldr	r2, [r7, #28]
 800a42a:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	0c1b      	lsrs	r3, r3, #16
 800a432:	041b      	lsls	r3, r3, #16
 800a434:	697a      	ldr	r2, [r7, #20]
 800a436:	431a      	orrs	r2, r3
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	0c1b      	lsrs	r3, r3, #16
 800a442:	041b      	lsls	r3, r3, #16
 800a444:	69ba      	ldr	r2, [r7, #24]
 800a446:	431a      	orrs	r2, r3
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	68db      	ldr	r3, [r3, #12]
 800a450:	461a      	mov	r2, r3
 800a452:	693b      	ldr	r3, [r7, #16]
 800a454:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d00f      	beq.n	800a47c <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	68db      	ldr	r3, [r3, #12]
 800a460:	461a      	mov	r2, r3
 800a462:	693b      	ldr	r3, [r7, #16]
 800a464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a468:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 800a46c:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	0c1b      	lsrs	r3, r3, #16
 800a474:	041b      	lsls	r3, r3, #16
 800a476:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 800a47c:	2300      	movs	r3, #0
}
 800a47e:	4618      	mov	r0, r3
 800a480:	3724      	adds	r7, #36	@ 0x24
 800a482:	46bd      	mov	sp, r7
 800a484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a488:	4770      	bx	lr
	...

0800a48c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b084      	sub	sp, #16
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d101      	bne.n	800a49e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800a49a:	2301      	movs	r3, #1
 800a49c:	e147      	b.n	800a72e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800a4a4:	b2db      	uxtb	r3, r3
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d106      	bne.n	800a4b8 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800a4b2:	6878      	ldr	r0, [r7, #4]
 800a4b4:	f7f9 fcde 	bl	8003e74 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	699a      	ldr	r2, [r3, #24]
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	f022 0210 	bic.w	r2, r2, #16
 800a4c6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a4c8:	f7fb fa82 	bl	80059d0 <HAL_GetTick>
 800a4cc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800a4ce:	e012      	b.n	800a4f6 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800a4d0:	f7fb fa7e 	bl	80059d0 <HAL_GetTick>
 800a4d4:	4602      	mov	r2, r0
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	1ad3      	subs	r3, r2, r3
 800a4da:	2b0a      	cmp	r3, #10
 800a4dc:	d90b      	bls.n	800a4f6 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a4e2:	f043 0201 	orr.w	r2, r3, #1
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2203      	movs	r2, #3
 800a4ee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800a4f2:	2301      	movs	r3, #1
 800a4f4:	e11b      	b.n	800a72e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	699b      	ldr	r3, [r3, #24]
 800a4fc:	f003 0308 	and.w	r3, r3, #8
 800a500:	2b08      	cmp	r3, #8
 800a502:	d0e5      	beq.n	800a4d0 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	699a      	ldr	r2, [r3, #24]
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	f042 0201 	orr.w	r2, r2, #1
 800a512:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a514:	f7fb fa5c 	bl	80059d0 <HAL_GetTick>
 800a518:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800a51a:	e012      	b.n	800a542 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800a51c:	f7fb fa58 	bl	80059d0 <HAL_GetTick>
 800a520:	4602      	mov	r2, r0
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	1ad3      	subs	r3, r2, r3
 800a526:	2b0a      	cmp	r3, #10
 800a528:	d90b      	bls.n	800a542 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a52e:	f043 0201 	orr.w	r2, r3, #1
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	2203      	movs	r2, #3
 800a53a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800a53e:	2301      	movs	r3, #1
 800a540:	e0f5      	b.n	800a72e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	699b      	ldr	r3, [r3, #24]
 800a548:	f003 0301 	and.w	r3, r3, #1
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d0e5      	beq.n	800a51c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	699a      	ldr	r2, [r3, #24]
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	f042 0202 	orr.w	r2, r2, #2
 800a55e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	4a74      	ldr	r2, [pc, #464]	@ (800a738 <HAL_FDCAN_Init+0x2ac>)
 800a566:	4293      	cmp	r3, r2
 800a568:	d103      	bne.n	800a572 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800a56a:	4a74      	ldr	r2, [pc, #464]	@ (800a73c <HAL_FDCAN_Init+0x2b0>)
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	685b      	ldr	r3, [r3, #4]
 800a570:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	7c1b      	ldrb	r3, [r3, #16]
 800a576:	2b01      	cmp	r3, #1
 800a578:	d108      	bne.n	800a58c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	699a      	ldr	r2, [r3, #24]
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a588:	619a      	str	r2, [r3, #24]
 800a58a:	e007      	b.n	800a59c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	699a      	ldr	r2, [r3, #24]
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a59a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	7c5b      	ldrb	r3, [r3, #17]
 800a5a0:	2b01      	cmp	r3, #1
 800a5a2:	d108      	bne.n	800a5b6 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	699a      	ldr	r2, [r3, #24]
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a5b2:	619a      	str	r2, [r3, #24]
 800a5b4:	e007      	b.n	800a5c6 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	699a      	ldr	r2, [r3, #24]
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a5c4:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	7c9b      	ldrb	r3, [r3, #18]
 800a5ca:	2b01      	cmp	r3, #1
 800a5cc:	d108      	bne.n	800a5e0 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	699a      	ldr	r2, [r3, #24]
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a5dc:	619a      	str	r2, [r3, #24]
 800a5de:	e007      	b.n	800a5f0 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	699a      	ldr	r2, [r3, #24]
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a5ee:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	699b      	ldr	r3, [r3, #24]
 800a5f6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	689a      	ldr	r2, [r3, #8]
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	430a      	orrs	r2, r1
 800a604:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	699a      	ldr	r2, [r3, #24]
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 800a614:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	691a      	ldr	r2, [r3, #16]
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	f022 0210 	bic.w	r2, r2, #16
 800a624:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	68db      	ldr	r3, [r3, #12]
 800a62a:	2b01      	cmp	r3, #1
 800a62c:	d108      	bne.n	800a640 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	699a      	ldr	r2, [r3, #24]
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	f042 0204 	orr.w	r2, r2, #4
 800a63c:	619a      	str	r2, [r3, #24]
 800a63e:	e02c      	b.n	800a69a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	68db      	ldr	r3, [r3, #12]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d028      	beq.n	800a69a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	68db      	ldr	r3, [r3, #12]
 800a64c:	2b02      	cmp	r3, #2
 800a64e:	d01c      	beq.n	800a68a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	699a      	ldr	r2, [r3, #24]
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800a65e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	691a      	ldr	r2, [r3, #16]
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	f042 0210 	orr.w	r2, r2, #16
 800a66e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	68db      	ldr	r3, [r3, #12]
 800a674:	2b03      	cmp	r3, #3
 800a676:	d110      	bne.n	800a69a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	699a      	ldr	r2, [r3, #24]
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	f042 0220 	orr.w	r2, r2, #32
 800a686:	619a      	str	r2, [r3, #24]
 800a688:	e007      	b.n	800a69a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	699a      	ldr	r2, [r3, #24]
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	f042 0220 	orr.w	r2, r2, #32
 800a698:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	699b      	ldr	r3, [r3, #24]
 800a69e:	3b01      	subs	r3, #1
 800a6a0:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	69db      	ldr	r3, [r3, #28]
 800a6a6:	3b01      	subs	r3, #1
 800a6a8:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800a6aa:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	6a1b      	ldr	r3, [r3, #32]
 800a6b0:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800a6b2:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	695b      	ldr	r3, [r3, #20]
 800a6ba:	3b01      	subs	r3, #1
 800a6bc:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800a6c2:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800a6c4:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	689b      	ldr	r3, [r3, #8]
 800a6ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a6ce:	d115      	bne.n	800a6fc <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6d4:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6da:	3b01      	subs	r3, #1
 800a6dc:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800a6de:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6e4:	3b01      	subs	r3, #1
 800a6e6:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800a6e8:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6f0:	3b01      	subs	r3, #1
 800a6f2:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800a6f8:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800a6fa:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	430a      	orrs	r2, r1
 800a70e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800a712:	6878      	ldr	r0, [r7, #4]
 800a714:	f000 fc12 	bl	800af3c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2200      	movs	r2, #0
 800a71c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	2200      	movs	r2, #0
 800a722:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2201      	movs	r2, #1
 800a728:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 800a72c:	2300      	movs	r3, #0
}
 800a72e:	4618      	mov	r0, r3
 800a730:	3710      	adds	r7, #16
 800a732:	46bd      	mov	sp, r7
 800a734:	bd80      	pop	{r7, pc}
 800a736:	bf00      	nop
 800a738:	4000a400 	.word	0x4000a400
 800a73c:	4000a500 	.word	0x4000a500

0800a740 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 800a740:	b480      	push	{r7}
 800a742:	b087      	sub	sp, #28
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
 800a748:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800a750:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800a752:	7dfb      	ldrb	r3, [r7, #23]
 800a754:	2b01      	cmp	r3, #1
 800a756:	d002      	beq.n	800a75e <HAL_FDCAN_ConfigFilter+0x1e>
 800a758:	7dfb      	ldrb	r3, [r7, #23]
 800a75a:	2b02      	cmp	r3, #2
 800a75c:	d13d      	bne.n	800a7da <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d119      	bne.n	800a79a <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	689b      	ldr	r3, [r3, #8]
 800a76a:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	68db      	ldr	r3, [r3, #12]
 800a770:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800a772:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	691b      	ldr	r3, [r3, #16]
 800a778:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 800a77a:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800a780:	4313      	orrs	r3, r2
 800a782:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	685b      	ldr	r3, [r3, #4]
 800a78c:	009b      	lsls	r3, r3, #2
 800a78e:	4413      	add	r3, r2
 800a790:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800a792:	68bb      	ldr	r3, [r7, #8]
 800a794:	693a      	ldr	r2, [r7, #16]
 800a796:	601a      	str	r2, [r3, #0]
 800a798:	e01d      	b.n	800a7d6 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	68db      	ldr	r3, [r3, #12]
 800a79e:	075a      	lsls	r2, r3, #29
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	691b      	ldr	r3, [r3, #16]
 800a7a4:	4313      	orrs	r3, r2
 800a7a6:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	689b      	ldr	r3, [r3, #8]
 800a7ac:	079a      	lsls	r2, r3, #30
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	695b      	ldr	r3, [r3, #20]
 800a7b2:	4313      	orrs	r3, r2
 800a7b4:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	685b      	ldr	r3, [r3, #4]
 800a7be:	00db      	lsls	r3, r3, #3
 800a7c0:	4413      	add	r3, r2
 800a7c2:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800a7c4:	68bb      	ldr	r3, [r7, #8]
 800a7c6:	693a      	ldr	r2, [r7, #16]
 800a7c8:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800a7ca:	68bb      	ldr	r3, [r7, #8]
 800a7cc:	3304      	adds	r3, #4
 800a7ce:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 800a7d0:	68bb      	ldr	r3, [r7, #8]
 800a7d2:	68fa      	ldr	r2, [r7, #12]
 800a7d4:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	e006      	b.n	800a7e8 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a7de:	f043 0202 	orr.w	r2, r3, #2
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800a7e6:	2301      	movs	r3, #1
  }
}
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	371c      	adds	r7, #28
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f2:	4770      	bx	lr

0800a7f4 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800a7f4:	b480      	push	{r7}
 800a7f6:	b083      	sub	sp, #12
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800a802:	b2db      	uxtb	r3, r3
 800a804:	2b01      	cmp	r3, #1
 800a806:	d110      	bne.n	800a82a <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2202      	movs	r2, #2
 800a80c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	699a      	ldr	r2, [r3, #24]
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	f022 0201 	bic.w	r2, r2, #1
 800a81e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2200      	movs	r2, #0
 800a824:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 800a826:	2300      	movs	r3, #0
 800a828:	e006      	b.n	800a838 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a82e:	f043 0204 	orr.w	r2, r3, #4
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800a836:	2301      	movs	r3, #1
  }
}
 800a838:	4618      	mov	r0, r3
 800a83a:	370c      	adds	r7, #12
 800a83c:	46bd      	mov	sp, r7
 800a83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a842:	4770      	bx	lr

0800a844 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800a844:	b480      	push	{r7}
 800a846:	b08b      	sub	sp, #44	@ 0x2c
 800a848:	af00      	add	r7, sp, #0
 800a84a:	60f8      	str	r0, [r7, #12]
 800a84c:	60b9      	str	r1, [r7, #8]
 800a84e:	607a      	str	r2, [r7, #4]
 800a850:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800a852:	2300      	movs	r3, #0
 800a854:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800a85c:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 800a85e:	7efb      	ldrb	r3, [r7, #27]
 800a860:	2b02      	cmp	r3, #2
 800a862:	f040 80e8 	bne.w	800aa36 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800a866:	68bb      	ldr	r3, [r7, #8]
 800a868:	2b40      	cmp	r3, #64	@ 0x40
 800a86a:	d137      	bne.n	800a8dc <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a874:	f003 030f 	and.w	r3, r3, #15
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d107      	bne.n	800a88c <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a880:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 800a888:	2301      	movs	r3, #1
 800a88a:	e0db      	b.n	800aa44 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a894:	0e1b      	lsrs	r3, r3, #24
 800a896:	f003 0301 	and.w	r3, r3, #1
 800a89a:	2b01      	cmp	r3, #1
 800a89c:	d10a      	bne.n	800a8b4 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a8a6:	0a5b      	lsrs	r3, r3, #9
 800a8a8:	f003 0301 	and.w	r3, r3, #1
 800a8ac:	2b01      	cmp	r3, #1
 800a8ae:	d101      	bne.n	800a8b4 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800a8b0:	2301      	movs	r3, #1
 800a8b2:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a8bc:	0a1b      	lsrs	r3, r3, #8
 800a8be:	f003 0303 	and.w	r3, r3, #3
 800a8c2:	69fa      	ldr	r2, [r7, #28]
 800a8c4:	4413      	add	r3, r2
 800a8c6:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 800a8cc:	69fa      	ldr	r2, [r7, #28]
 800a8ce:	4613      	mov	r3, r2
 800a8d0:	00db      	lsls	r3, r3, #3
 800a8d2:	4413      	add	r3, r2
 800a8d4:	00db      	lsls	r3, r3, #3
 800a8d6:	440b      	add	r3, r1
 800a8d8:	627b      	str	r3, [r7, #36]	@ 0x24
 800a8da:	e036      	b.n	800a94a <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a8e4:	f003 030f 	and.w	r3, r3, #15
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d107      	bne.n	800a8fc <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a8f0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 800a8f8:	2301      	movs	r3, #1
 800a8fa:	e0a3      	b.n	800aa44 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a904:	0e1b      	lsrs	r3, r3, #24
 800a906:	f003 0301 	and.w	r3, r3, #1
 800a90a:	2b01      	cmp	r3, #1
 800a90c:	d10a      	bne.n	800a924 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a916:	0a1b      	lsrs	r3, r3, #8
 800a918:	f003 0301 	and.w	r3, r3, #1
 800a91c:	2b01      	cmp	r3, #1
 800a91e:	d101      	bne.n	800a924 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800a920:	2301      	movs	r3, #1
 800a922:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a92c:	0a1b      	lsrs	r3, r3, #8
 800a92e:	f003 0303 	and.w	r3, r3, #3
 800a932:	69fa      	ldr	r2, [r7, #28]
 800a934:	4413      	add	r3, r2
 800a936:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800a93c:	69fa      	ldr	r2, [r7, #28]
 800a93e:	4613      	mov	r3, r2
 800a940:	00db      	lsls	r3, r3, #3
 800a942:	4413      	add	r3, r2
 800a944:	00db      	lsls	r3, r3, #3
 800a946:	440b      	add	r3, r1
 800a948:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800a94a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	685b      	ldr	r3, [r3, #4]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d107      	bne.n	800a96e <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800a95e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	0c9b      	lsrs	r3, r3, #18
 800a964:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	601a      	str	r2, [r3, #0]
 800a96c:	e005      	b.n	800a97a <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800a96e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800a97a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800a986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800a992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a994:	3304      	adds	r3, #4
 800a996:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800a998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	b29a      	uxth	r2, r3
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 800a9a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	0c1b      	lsrs	r3, r3, #16
 800a9a8:	f003 020f 	and.w	r2, r3, #15
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800a9b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800a9bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800a9c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	0e1b      	lsrs	r3, r3, #24
 800a9ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800a9d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	0fda      	lsrs	r2, r3, #31
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800a9e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9e2:	3304      	adds	r3, #4
 800a9e4:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800a9e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9e8:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	623b      	str	r3, [r7, #32]
 800a9ee:	e00a      	b.n	800aa06 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800a9f0:	697a      	ldr	r2, [r7, #20]
 800a9f2:	6a3b      	ldr	r3, [r7, #32]
 800a9f4:	441a      	add	r2, r3
 800a9f6:	6839      	ldr	r1, [r7, #0]
 800a9f8:	6a3b      	ldr	r3, [r7, #32]
 800a9fa:	440b      	add	r3, r1
 800a9fc:	7812      	ldrb	r2, [r2, #0]
 800a9fe:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800aa00:	6a3b      	ldr	r3, [r7, #32]
 800aa02:	3301      	adds	r3, #1
 800aa04:	623b      	str	r3, [r7, #32]
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	68db      	ldr	r3, [r3, #12]
 800aa0a:	4a11      	ldr	r2, [pc, #68]	@ (800aa50 <HAL_FDCAN_GetRxMessage+0x20c>)
 800aa0c:	5cd3      	ldrb	r3, [r2, r3]
 800aa0e:	461a      	mov	r2, r3
 800aa10:	6a3b      	ldr	r3, [r7, #32]
 800aa12:	4293      	cmp	r3, r2
 800aa14:	d3ec      	bcc.n	800a9f0 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800aa16:	68bb      	ldr	r3, [r7, #8]
 800aa18:	2b40      	cmp	r3, #64	@ 0x40
 800aa1a:	d105      	bne.n	800aa28 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	69fa      	ldr	r2, [r7, #28]
 800aa22:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 800aa26:	e004      	b.n	800aa32 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	69fa      	ldr	r2, [r7, #28]
 800aa2e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 800aa32:	2300      	movs	r3, #0
 800aa34:	e006      	b.n	800aa44 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aa3a:	f043 0208 	orr.w	r2, r3, #8
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800aa42:	2301      	movs	r3, #1
  }
}
 800aa44:	4618      	mov	r0, r3
 800aa46:	372c      	adds	r7, #44	@ 0x2c
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4e:	4770      	bx	lr
 800aa50:	08024364 	.word	0x08024364

0800aa54 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 800aa54:	b480      	push	{r7}
 800aa56:	b087      	sub	sp, #28
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	60f8      	str	r0, [r7, #12]
 800aa5c:	60b9      	str	r1, [r7, #8]
 800aa5e:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800aa66:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800aa68:	7dfb      	ldrb	r3, [r7, #23]
 800aa6a:	2b01      	cmp	r3, #1
 800aa6c:	d003      	beq.n	800aa76 <HAL_FDCAN_ActivateNotification+0x22>
 800aa6e:	7dfb      	ldrb	r3, [r7, #23]
 800aa70:	2b02      	cmp	r3, #2
 800aa72:	f040 80c8 	bne.w	800ac06 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa7c:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 800aa7e:	68bb      	ldr	r3, [r7, #8]
 800aa80:	f003 0307 	and.w	r3, r3, #7
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d004      	beq.n	800aa92 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 800aa88:	693b      	ldr	r3, [r7, #16]
 800aa8a:	f003 0301 	and.w	r3, r3, #1
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d03b      	beq.n	800ab0a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800aa92:	68bb      	ldr	r3, [r7, #8]
 800aa94:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d004      	beq.n	800aaa6 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 800aa9c:	693b      	ldr	r3, [r7, #16]
 800aa9e:	f003 0302 	and.w	r3, r3, #2
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d031      	beq.n	800ab0a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800aaa6:	68bb      	ldr	r3, [r7, #8]
 800aaa8:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d004      	beq.n	800aaba <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 800aab0:	693b      	ldr	r3, [r7, #16]
 800aab2:	f003 0304 	and.w	r3, r3, #4
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d027      	beq.n	800ab0a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800aaba:	68bb      	ldr	r3, [r7, #8]
 800aabc:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d004      	beq.n	800aace <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800aac4:	693b      	ldr	r3, [r7, #16]
 800aac6:	f003 0308 	and.w	r3, r3, #8
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d01d      	beq.n	800ab0a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800aace:	68bb      	ldr	r3, [r7, #8]
 800aad0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d004      	beq.n	800aae2 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800aad8:	693b      	ldr	r3, [r7, #16]
 800aada:	f003 0310 	and.w	r3, r3, #16
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d013      	beq.n	800ab0a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800aae2:	68bb      	ldr	r3, [r7, #8]
 800aae4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d004      	beq.n	800aaf6 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800aaec:	693b      	ldr	r3, [r7, #16]
 800aaee:	f003 0320 	and.w	r3, r3, #32
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d009      	beq.n	800ab0a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800aaf6:	68bb      	ldr	r3, [r7, #8]
 800aaf8:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d00c      	beq.n	800ab1a <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 800ab00:	693b      	ldr	r3, [r7, #16]
 800ab02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d107      	bne.n	800ab1a <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	f042 0201 	orr.w	r2, r2, #1
 800ab18:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800ab1a:	68bb      	ldr	r3, [r7, #8]
 800ab1c:	f003 0307 	and.w	r3, r3, #7
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d004      	beq.n	800ab2e <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 800ab24:	693b      	ldr	r3, [r7, #16]
 800ab26:	f003 0301 	and.w	r3, r3, #1
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d13b      	bne.n	800aba6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800ab2e:	68bb      	ldr	r3, [r7, #8]
 800ab30:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d004      	beq.n	800ab42 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800ab38:	693b      	ldr	r3, [r7, #16]
 800ab3a:	f003 0302 	and.w	r3, r3, #2
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d131      	bne.n	800aba6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800ab42:	68bb      	ldr	r3, [r7, #8]
 800ab44:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d004      	beq.n	800ab56 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 800ab4c:	693b      	ldr	r3, [r7, #16]
 800ab4e:	f003 0304 	and.w	r3, r3, #4
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d127      	bne.n	800aba6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800ab56:	68bb      	ldr	r3, [r7, #8]
 800ab58:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d004      	beq.n	800ab6a <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 800ab60:	693b      	ldr	r3, [r7, #16]
 800ab62:	f003 0308 	and.w	r3, r3, #8
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d11d      	bne.n	800aba6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d004      	beq.n	800ab7e <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800ab74:	693b      	ldr	r3, [r7, #16]
 800ab76:	f003 0310 	and.w	r3, r3, #16
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d113      	bne.n	800aba6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800ab7e:	68bb      	ldr	r3, [r7, #8]
 800ab80:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d004      	beq.n	800ab92 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800ab88:	693b      	ldr	r3, [r7, #16]
 800ab8a:	f003 0320 	and.w	r3, r3, #32
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d109      	bne.n	800aba6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800ab92:	68bb      	ldr	r3, [r7, #8]
 800ab94:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d00c      	beq.n	800abb6 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 800ab9c:	693b      	ldr	r3, [r7, #16]
 800ab9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d007      	beq.n	800abb6 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	f042 0202 	orr.w	r2, r2, #2
 800abb4:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800abb6:	68bb      	ldr	r3, [r7, #8]
 800abb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d009      	beq.n	800abd4 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	687a      	ldr	r2, [r7, #4]
 800abce:	430a      	orrs	r2, r1
 800abd0:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800abd4:	68bb      	ldr	r3, [r7, #8]
 800abd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d009      	beq.n	800abf2 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	687a      	ldr	r2, [r7, #4]
 800abec:	430a      	orrs	r2, r1
 800abee:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	68ba      	ldr	r2, [r7, #8]
 800abfe:	430a      	orrs	r2, r1
 800ac00:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 800ac02:	2300      	movs	r3, #0
 800ac04:	e006      	b.n	800ac14 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ac0a:	f043 0202 	orr.w	r2, r3, #2
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800ac12:	2301      	movs	r3, #1
  }
}
 800ac14:	4618      	mov	r0, r3
 800ac16:	371c      	adds	r7, #28
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1e:	4770      	bx	lr

0800ac20 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b08c      	sub	sp, #48	@ 0x30
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac2e:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800ac32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ac3c:	4013      	ands	r3, r2
 800ac3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac46:	f003 0307 	and.w	r3, r3, #7
 800ac4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ac54:	4013      	ands	r3, r2
 800ac56:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac5e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ac62:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ac6c:	4013      	ands	r3, r2
 800ac6e:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac76:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 800ac7a:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac82:	6a3a      	ldr	r2, [r7, #32]
 800ac84:	4013      	ands	r3, r2
 800ac86:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac8e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800ac92:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac9a:	69fa      	ldr	r2, [r7, #28]
 800ac9c:	4013      	ands	r3, r2
 800ac9e:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aca6:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800acae:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 800acb0:	697b      	ldr	r3, [r7, #20]
 800acb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d00b      	beq.n	800acd2 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 800acba:	69bb      	ldr	r3, [r7, #24]
 800acbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d006      	beq.n	800acd2 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	2240      	movs	r2, #64	@ 0x40
 800acca:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 800accc:	6878      	ldr	r0, [r7, #4]
 800acce:	f000 f916 	bl	800aefe <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 800acd2:	697b      	ldr	r3, [r7, #20]
 800acd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d019      	beq.n	800ad10 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 800acdc:	69bb      	ldr	r3, [r7, #24]
 800acde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d014      	beq.n	800ad10 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800acee:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800acf8:	693a      	ldr	r2, [r7, #16]
 800acfa:	4013      	ands	r3, r2
 800acfc:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ad06:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800ad08:	6939      	ldr	r1, [r7, #16]
 800ad0a:	6878      	ldr	r0, [r7, #4]
 800ad0c:	f000 f8d8 	bl	800aec0 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 800ad10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d007      	beq.n	800ad26 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ad1c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800ad1e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ad20:	6878      	ldr	r0, [r7, #4]
 800ad22:	f000 f8a2 	bl	800ae6a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800ad26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d007      	beq.n	800ad3c <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ad32:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800ad34:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	f7f6 f9b8 	bl	80010ac <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 800ad3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d007      	beq.n	800ad52 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ad48:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800ad4a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ad4c:	6878      	ldr	r0, [r7, #4]
 800ad4e:	f000 f897 	bl	800ae80 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800ad52:	697b      	ldr	r3, [r7, #20]
 800ad54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d00c      	beq.n	800ad76 <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 800ad5c:	69bb      	ldr	r3, [r7, #24]
 800ad5e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d007      	beq.n	800ad76 <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ad6e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800ad70:	6878      	ldr	r0, [r7, #4]
 800ad72:	f000 f890 	bl	800ae96 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 800ad76:	697b      	ldr	r3, [r7, #20]
 800ad78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d018      	beq.n	800adb2 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 800ad80:	69bb      	ldr	r3, [r7, #24]
 800ad82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d013      	beq.n	800adb2 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800ad92:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800ad9c:	68fa      	ldr	r2, [r7, #12]
 800ad9e:	4013      	ands	r3, r2
 800ada0:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	2280      	movs	r2, #128	@ 0x80
 800ada8:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800adaa:	68f9      	ldr	r1, [r7, #12]
 800adac:	6878      	ldr	r0, [r7, #4]
 800adae:	f000 f87c 	bl	800aeaa <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 800adb2:	697b      	ldr	r3, [r7, #20]
 800adb4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d00c      	beq.n	800add6 <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 800adbc:	69bb      	ldr	r3, [r7, #24]
 800adbe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d007      	beq.n	800add6 <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800adce:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800add0:	6878      	ldr	r0, [r7, #4]
 800add2:	f000 f880 	bl	800aed6 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800add6:	697b      	ldr	r3, [r7, #20]
 800add8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800addc:	2b00      	cmp	r3, #0
 800adde:	d00c      	beq.n	800adfa <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 800ade0:	69bb      	ldr	r3, [r7, #24]
 800ade2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d007      	beq.n	800adfa <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800adf2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800adf4:	6878      	ldr	r0, [r7, #4]
 800adf6:	f000 f878 	bl	800aeea <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800adfa:	697b      	ldr	r3, [r7, #20]
 800adfc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d00f      	beq.n	800ae24 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 800ae04:	69bb      	ldr	r3, [r7, #24]
 800ae06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d00a      	beq.n	800ae24 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800ae16:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ae1c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800ae24:	69fb      	ldr	r3, [r7, #28]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d007      	beq.n	800ae3a <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	69fa      	ldr	r2, [r7, #28]
 800ae30:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800ae32:	69f9      	ldr	r1, [r7, #28]
 800ae34:	6878      	ldr	r0, [r7, #4]
 800ae36:	f000 f876 	bl	800af26 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800ae3a:	6a3b      	ldr	r3, [r7, #32]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d009      	beq.n	800ae54 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	6a3a      	ldr	r2, [r7, #32]
 800ae46:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800ae4c:	6a3b      	ldr	r3, [r7, #32]
 800ae4e:	431a      	orrs	r2, r3
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d002      	beq.n	800ae62 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800ae5c:	6878      	ldr	r0, [r7, #4]
 800ae5e:	f000 f858 	bl	800af12 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800ae62:	bf00      	nop
 800ae64:	3730      	adds	r7, #48	@ 0x30
 800ae66:	46bd      	mov	sp, r7
 800ae68:	bd80      	pop	{r7, pc}

0800ae6a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800ae6a:	b480      	push	{r7}
 800ae6c:	b083      	sub	sp, #12
 800ae6e:	af00      	add	r7, sp, #0
 800ae70:	6078      	str	r0, [r7, #4]
 800ae72:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800ae74:	bf00      	nop
 800ae76:	370c      	adds	r7, #12
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7e:	4770      	bx	lr

0800ae80 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 800ae80:	b480      	push	{r7}
 800ae82:	b083      	sub	sp, #12
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
 800ae88:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800ae8a:	bf00      	nop
 800ae8c:	370c      	adds	r7, #12
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae94:	4770      	bx	lr

0800ae96 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800ae96:	b480      	push	{r7}
 800ae98:	b083      	sub	sp, #12
 800ae9a:	af00      	add	r7, sp, #0
 800ae9c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800ae9e:	bf00      	nop
 800aea0:	370c      	adds	r7, #12
 800aea2:	46bd      	mov	sp, r7
 800aea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea8:	4770      	bx	lr

0800aeaa <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800aeaa:	b480      	push	{r7}
 800aeac:	b083      	sub	sp, #12
 800aeae:	af00      	add	r7, sp, #0
 800aeb0:	6078      	str	r0, [r7, #4]
 800aeb2:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800aeb4:	bf00      	nop
 800aeb6:	370c      	adds	r7, #12
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aebe:	4770      	bx	lr

0800aec0 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800aec0:	b480      	push	{r7}
 800aec2:	b083      	sub	sp, #12
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
 800aec8:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800aeca:	bf00      	nop
 800aecc:	370c      	adds	r7, #12
 800aece:	46bd      	mov	sp, r7
 800aed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed4:	4770      	bx	lr

0800aed6 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800aed6:	b480      	push	{r7}
 800aed8:	b083      	sub	sp, #12
 800aeda:	af00      	add	r7, sp, #0
 800aedc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800aede:	bf00      	nop
 800aee0:	370c      	adds	r7, #12
 800aee2:	46bd      	mov	sp, r7
 800aee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee8:	4770      	bx	lr

0800aeea <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800aeea:	b480      	push	{r7}
 800aeec:	b083      	sub	sp, #12
 800aeee:	af00      	add	r7, sp, #0
 800aef0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800aef2:	bf00      	nop
 800aef4:	370c      	adds	r7, #12
 800aef6:	46bd      	mov	sp, r7
 800aef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefc:	4770      	bx	lr

0800aefe <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800aefe:	b480      	push	{r7}
 800af00:	b083      	sub	sp, #12
 800af02:	af00      	add	r7, sp, #0
 800af04:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800af06:	bf00      	nop
 800af08:	370c      	adds	r7, #12
 800af0a:	46bd      	mov	sp, r7
 800af0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af10:	4770      	bx	lr

0800af12 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800af12:	b480      	push	{r7}
 800af14:	b083      	sub	sp, #12
 800af16:	af00      	add	r7, sp, #0
 800af18:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800af1a:	bf00      	nop
 800af1c:	370c      	adds	r7, #12
 800af1e:	46bd      	mov	sp, r7
 800af20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af24:	4770      	bx	lr

0800af26 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800af26:	b480      	push	{r7}
 800af28:	b083      	sub	sp, #12
 800af2a:	af00      	add	r7, sp, #0
 800af2c:	6078      	str	r0, [r7, #4]
 800af2e:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800af30:	bf00      	nop
 800af32:	370c      	adds	r7, #12
 800af34:	46bd      	mov	sp, r7
 800af36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3a:	4770      	bx	lr

0800af3c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800af3c:	b480      	push	{r7}
 800af3e:	b085      	sub	sp, #20
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 800af44:	4b2c      	ldr	r3, [pc, #176]	@ (800aff8 <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 800af46:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	4a2b      	ldr	r2, [pc, #172]	@ (800affc <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 800af4e:	4293      	cmp	r3, r2
 800af50:	d103      	bne.n	800af5a <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800af52:	68bb      	ldr	r3, [r7, #8]
 800af54:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800af58:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	68ba      	ldr	r2, [r7, #8]
 800af5e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af68:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af70:	041a      	lsls	r2, r3, #16
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	430a      	orrs	r2, r1
 800af78:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800af7c:	68bb      	ldr	r3, [r7, #8]
 800af7e:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af8e:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af96:	061a      	lsls	r2, r3, #24
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	430a      	orrs	r2, r1
 800af9e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800afa2:	68bb      	ldr	r3, [r7, #8]
 800afa4:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800afac:	68bb      	ldr	r3, [r7, #8]
 800afae:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800afb6:	68bb      	ldr	r3, [r7, #8]
 800afb8:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800afc0:	68bb      	ldr	r3, [r7, #8]
 800afc2:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800afca:	68bb      	ldr	r3, [r7, #8]
 800afcc:	60fb      	str	r3, [r7, #12]
 800afce:	e005      	b.n	800afdc <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	2200      	movs	r2, #0
 800afd4:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	3304      	adds	r3, #4
 800afda:	60fb      	str	r3, [r7, #12]
 800afdc:	68bb      	ldr	r3, [r7, #8]
 800afde:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800afe2:	68fa      	ldr	r2, [r7, #12]
 800afe4:	429a      	cmp	r2, r3
 800afe6:	d3f3      	bcc.n	800afd0 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 800afe8:	bf00      	nop
 800afea:	bf00      	nop
 800afec:	3714      	adds	r7, #20
 800afee:	46bd      	mov	sp, r7
 800aff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff4:	4770      	bx	lr
 800aff6:	bf00      	nop
 800aff8:	4000ac00 	.word	0x4000ac00
 800affc:	4000a800 	.word	0x4000a800

0800b000 <HAL_FLASH_Program>:
  * @param  DataAddress specifies the address of data to be programmed
  *         This parameter shall be 32-bit aligned
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b088      	sub	sp, #32
 800b004:	af00      	add	r7, sp, #0
 800b006:	60f8      	str	r0, [r7, #12]
 800b008:	60b9      	str	r1, [r7, #8]
 800b00a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800b00c:	4b32      	ldr	r3, [pc, #200]	@ (800b0d8 <HAL_FLASH_Program+0xd8>)
 800b00e:	781b      	ldrb	r3, [r3, #0]
 800b010:	2b01      	cmp	r3, #1
 800b012:	d101      	bne.n	800b018 <HAL_FLASH_Program+0x18>
 800b014:	2302      	movs	r3, #2
 800b016:	e05a      	b.n	800b0ce <HAL_FLASH_Program+0xce>
 800b018:	4b2f      	ldr	r3, [pc, #188]	@ (800b0d8 <HAL_FLASH_Program+0xd8>)
 800b01a:	2201      	movs	r2, #1
 800b01c:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800b01e:	4b2e      	ldr	r3, [pc, #184]	@ (800b0d8 <HAL_FLASH_Program+0xd8>)
 800b020:	2200      	movs	r2, #0
 800b022:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800b024:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b028:	f000 f8de 	bl	800b1e8 <FLASH_WaitForLastOperation>
 800b02c:	4603      	mov	r3, r0
 800b02e:	77fb      	strb	r3, [r7, #31]

  if (status == HAL_OK)
 800b030:	7ffb      	ldrb	r3, [r7, #31]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d147      	bne.n	800b0c6 <HAL_FLASH_Program+0xc6>
  {
    /* Set current operation type */
    pFlash.ProcedureOnGoing = TypeProgram;
 800b036:	4a28      	ldr	r2, [pc, #160]	@ (800b0d8 <HAL_FLASH_Program+0xd8>)
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	6093      	str	r3, [r2, #8]

    /* Access to SECCR or NSCR depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
    reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 800b03c:	4b27      	ldr	r3, [pc, #156]	@ (800b0dc <HAL_FLASH_Program+0xdc>)
 800b03e:	61bb      	str	r3, [r7, #24]
#else
    reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

    if ((TypeProgram & (~FLASH_NON_SECURE_MASK)) == FLASH_TYPEPROGRAM_QUADWORD)
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b046:	2b02      	cmp	r3, #2
 800b048:	d104      	bne.n	800b054 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_USER_MEM_ADDRESS(FlashAddress));

      /* Program a quad-word (128-bit) at a specified address */
      FLASH_Program_QuadWord(FlashAddress, DataAddress);
 800b04a:	6879      	ldr	r1, [r7, #4]
 800b04c:	68b8      	ldr	r0, [r7, #8]
 800b04e:	f000 f919 	bl	800b284 <FLASH_Program_QuadWord>
 800b052:	e01b      	b.n	800b08c <HAL_FLASH_Program+0x8c>
    }
#if defined (FLASH_SR_OBKERR)
    else if ((TypeProgram == FLASH_TYPEPROGRAM_QUADWORD_OBK) || (TypeProgram == FLASH_TYPEPROGRAM_QUADWORD_OBK_ALT))
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	4a22      	ldr	r2, [pc, #136]	@ (800b0e0 <HAL_FLASH_Program+0xe0>)
 800b058:	4293      	cmp	r3, r2
 800b05a:	d003      	beq.n	800b064 <HAL_FLASH_Program+0x64>
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	4a21      	ldr	r2, [pc, #132]	@ (800b0e4 <HAL_FLASH_Program+0xe4>)
 800b060:	4293      	cmp	r3, r2
 800b062:	d104      	bne.n	800b06e <HAL_FLASH_Program+0x6e>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_OBK_ADDRESS(FlashAddress));

      /* Program a quad-word (128-bit) of OBK at a specified address */
      FLASH_Program_QuadWord_OBK(FlashAddress, DataAddress);
 800b064:	6879      	ldr	r1, [r7, #4]
 800b066:	68b8      	ldr	r0, [r7, #8]
 800b068:	f000 f948 	bl	800b2fc <FLASH_Program_QuadWord_OBK>
 800b06c:	e00e      	b.n	800b08c <HAL_FLASH_Program+0x8c>
    }
#endif /* FLASH_SR_OBKERR */
#if defined (FLASH_EDATAR_EDATA_EN)
    else if ((TypeProgram & (~FLASH_NON_SECURE_MASK)) == FLASH_TYPEPROGRAM_HALFWORD_EDATA)
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b074:	4a1c      	ldr	r2, [pc, #112]	@ (800b0e8 <HAL_FLASH_Program+0xe8>)
 800b076:	4293      	cmp	r3, r2
 800b078:	d104      	bne.n	800b084 <HAL_FLASH_Program+0x84>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_EDATA_ADDRESS(FlashAddress));

      /* Program a Flash high-cycle data half-word at a specified address */
      FLASH_Program_HalfWord(FlashAddress, DataAddress);
 800b07a:	6879      	ldr	r1, [r7, #4]
 800b07c:	68b8      	ldr	r0, [r7, #8]
 800b07e:	f000 f989 	bl	800b394 <FLASH_Program_HalfWord>
 800b082:	e003      	b.n	800b08c <HAL_FLASH_Program+0x8c>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_OTP_ADDRESS(FlashAddress));

      /* Program an OTP half-word at a specified address */
      FLASH_Program_HalfWord(FlashAddress, DataAddress);
 800b084:	6879      	ldr	r1, [r7, #4]
 800b086:	68b8      	ldr	r0, [r7, #8]
 800b088:	f000 f984 	bl	800b394 <FLASH_Program_HalfWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800b08c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b090:	f000 f8aa 	bl	800b1e8 <FLASH_WaitForLastOperation>
 800b094:	4603      	mov	r3, r0
 800b096:	77fb      	strb	r3, [r7, #31]

#if defined (FLASH_SR_OBKERR)
    /* If the program operation is completed, disable the PG */
    CLEAR_BIT((*reg_cr), (TypeProgram & ~(FLASH_NON_SECURE_MASK | FLASH_OBK | FLASH_OTP | FLASH_OBKCFGR_ALT_SECT)));
 800b098:	69bb      	ldr	r3, [r7, #24]
 800b09a:	681a      	ldr	r2, [r3, #0]
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	f023 4330 	bic.w	r3, r3, #2952790016	@ 0xb0000000
 800b0a2:	f023 0304 	bic.w	r3, r3, #4
 800b0a6:	43db      	mvns	r3, r3
 800b0a8:	401a      	ands	r2, r3
 800b0aa:	69bb      	ldr	r3, [r7, #24]
 800b0ac:	601a      	str	r2, [r3, #0]

    /* Clear alternate sector bit */
    if (TypeProgram == FLASH_TYPEPROGRAM_QUADWORD_OBK_ALT)
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	4a0c      	ldr	r2, [pc, #48]	@ (800b0e4 <HAL_FLASH_Program+0xe4>)
 800b0b2:	4293      	cmp	r3, r2
 800b0b4:	d107      	bne.n	800b0c6 <HAL_FLASH_Program+0xc6>
    {
      reg_obkcfgr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECOBKCFGR) : &(FLASH_NS->NSOBKCFGR);
 800b0b6:	4b0d      	ldr	r3, [pc, #52]	@ (800b0ec <HAL_FLASH_Program+0xec>)
 800b0b8:	617b      	str	r3, [r7, #20]
      CLEAR_BIT((*reg_obkcfgr), FLASH_OBKCFGR_ALT_SECT);
 800b0ba:	697b      	ldr	r3, [r7, #20]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	f023 0204 	bic.w	r2, r3, #4
 800b0c2:	697b      	ldr	r3, [r7, #20]
 800b0c4:	601a      	str	r2, [r3, #0]
    /* If the program operation is completed, disable the PG */
    CLEAR_BIT((*reg_cr), (TypeProgram & ~(FLASH_NON_SECURE_MASK |  FLASH_OTP)));
#endif /* FLASH_SR_OBKERR */
  }
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800b0c6:	4b04      	ldr	r3, [pc, #16]	@ (800b0d8 <HAL_FLASH_Program+0xd8>)
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 800b0cc:	7ffb      	ldrb	r3, [r7, #31]
}
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	3720      	adds	r7, #32
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	bd80      	pop	{r7, pc}
 800b0d6:	bf00      	nop
 800b0d8:	20000080 	.word	0x20000080
 800b0dc:	40022028 	.word	0x40022028
 800b0e0:	10000002 	.word	0x10000002
 800b0e4:	10000006 	.word	0x10000006
 800b0e8:	40000002 	.word	0x40000002
 800b0ec:	40022040 	.word	0x40022040

0800b0f0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800b0f0:	b480      	push	{r7}
 800b0f2:	b083      	sub	sp, #12
 800b0f4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->NSCR, FLASH_CR_LOCK) != 0U)
 800b0fa:	4b0d      	ldr	r3, [pc, #52]	@ (800b130 <HAL_FLASH_Unlock+0x40>)
 800b0fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0fe:	f003 0301 	and.w	r3, r3, #1
 800b102:	2b00      	cmp	r3, #0
 800b104:	d00d      	beq.n	800b122 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Control Register access */
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY1);
 800b106:	4b0a      	ldr	r3, [pc, #40]	@ (800b130 <HAL_FLASH_Unlock+0x40>)
 800b108:	4a0a      	ldr	r2, [pc, #40]	@ (800b134 <HAL_FLASH_Unlock+0x44>)
 800b10a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY2);
 800b10c:	4b08      	ldr	r3, [pc, #32]	@ (800b130 <HAL_FLASH_Unlock+0x40>)
 800b10e:	4a0a      	ldr	r2, [pc, #40]	@ (800b138 <HAL_FLASH_Unlock+0x48>)
 800b110:	605a      	str	r2, [r3, #4]

    /* Verify Flash CR is unlocked */
    if (READ_BIT(FLASH->NSCR, FLASH_CR_LOCK) != 0U)
 800b112:	4b07      	ldr	r3, [pc, #28]	@ (800b130 <HAL_FLASH_Unlock+0x40>)
 800b114:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b116:	f003 0301 	and.w	r3, r3, #1
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d001      	beq.n	800b122 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800b11e:	2301      	movs	r3, #1
 800b120:	71fb      	strb	r3, [r7, #7]
      }
    }
  }
#endif /* __ARM_FEATURE_CMSE */

  return status;
 800b122:	79fb      	ldrb	r3, [r7, #7]
}
 800b124:	4618      	mov	r0, r3
 800b126:	370c      	adds	r7, #12
 800b128:	46bd      	mov	sp, r7
 800b12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12e:	4770      	bx	lr
 800b130:	40022000 	.word	0x40022000
 800b134:	45670123 	.word	0x45670123
 800b138:	cdef89ab 	.word	0xcdef89ab

0800b13c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800b13c:	b480      	push	{r7}
 800b13e:	b083      	sub	sp, #12
 800b140:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800b142:	2300      	movs	r3, #0
 800b144:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Control Register access */
  SET_BIT(FLASH->NSCR, FLASH_CR_LOCK);
 800b146:	4b0a      	ldr	r3, [pc, #40]	@ (800b170 <HAL_FLASH_Lock+0x34>)
 800b148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b14a:	4a09      	ldr	r2, [pc, #36]	@ (800b170 <HAL_FLASH_Lock+0x34>)
 800b14c:	f043 0301 	orr.w	r3, r3, #1
 800b150:	6293      	str	r3, [r2, #40]	@ 0x28

  /* Verify Flash is locked */
  if (READ_BIT(FLASH->NSCR, FLASH_CR_LOCK) == 0U)
 800b152:	4b07      	ldr	r3, [pc, #28]	@ (800b170 <HAL_FLASH_Lock+0x34>)
 800b154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b156:	f003 0301 	and.w	r3, r3, #1
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d101      	bne.n	800b162 <HAL_FLASH_Lock+0x26>
  {
    status = HAL_ERROR;
 800b15e:	2301      	movs	r3, #1
 800b160:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* __ARM_FEATURE_CMSE */

  return status;
 800b162:	79fb      	ldrb	r3, [r7, #7]
}
 800b164:	4618      	mov	r0, r3
 800b166:	370c      	adds	r7, #12
 800b168:	46bd      	mov	sp, r7
 800b16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16e:	4770      	bx	lr
 800b170:	40022000 	.word	0x40022000

0800b174 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 800b174:	b480      	push	{r7}
 800b176:	af00      	add	r7, sp, #0
  if (READ_BIT(FLASH->OPTCR, FLASH_OPTCR_OPTLOCK) != 0U)
 800b178:	4b0c      	ldr	r3, [pc, #48]	@ (800b1ac <HAL_FLASH_OB_Unlock+0x38>)
 800b17a:	69db      	ldr	r3, [r3, #28]
 800b17c:	f003 0301 	and.w	r3, r3, #1
 800b180:	2b00      	cmp	r3, #0
 800b182:	d00d      	beq.n	800b1a0 <HAL_FLASH_OB_Unlock+0x2c>
  {
    /* Authorizes the Option Byte registers programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPT_KEY1);
 800b184:	4b09      	ldr	r3, [pc, #36]	@ (800b1ac <HAL_FLASH_OB_Unlock+0x38>)
 800b186:	4a0a      	ldr	r2, [pc, #40]	@ (800b1b0 <HAL_FLASH_OB_Unlock+0x3c>)
 800b188:	60da      	str	r2, [r3, #12]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPT_KEY2);
 800b18a:	4b08      	ldr	r3, [pc, #32]	@ (800b1ac <HAL_FLASH_OB_Unlock+0x38>)
 800b18c:	4a09      	ldr	r2, [pc, #36]	@ (800b1b4 <HAL_FLASH_OB_Unlock+0x40>)
 800b18e:	60da      	str	r2, [r3, #12]

    /* Verify that the Option Bytes are unlocked */
    if (READ_BIT(FLASH->OPTCR, FLASH_OPTCR_OPTLOCK) != 0U)
 800b190:	4b06      	ldr	r3, [pc, #24]	@ (800b1ac <HAL_FLASH_OB_Unlock+0x38>)
 800b192:	69db      	ldr	r3, [r3, #28]
 800b194:	f003 0301 	and.w	r3, r3, #1
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d001      	beq.n	800b1a0 <HAL_FLASH_OB_Unlock+0x2c>
    {
      return HAL_ERROR;
 800b19c:	2301      	movs	r3, #1
 800b19e:	e000      	b.n	800b1a2 <HAL_FLASH_OB_Unlock+0x2e>
    }
  }

  return HAL_OK;
 800b1a0:	2300      	movs	r3, #0
}
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1aa:	4770      	bx	lr
 800b1ac:	40022000 	.word	0x40022000
 800b1b0:	08192a3b 	.word	0x08192a3b
 800b1b4:	4c5d6e7f 	.word	0x4c5d6e7f

0800b1b8 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 800b1b8:	b480      	push	{r7}
 800b1ba:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  SET_BIT(FLASH->OPTCR, FLASH_OPTCR_OPTLOCK);
 800b1bc:	4b09      	ldr	r3, [pc, #36]	@ (800b1e4 <HAL_FLASH_OB_Lock+0x2c>)
 800b1be:	69db      	ldr	r3, [r3, #28]
 800b1c0:	4a08      	ldr	r2, [pc, #32]	@ (800b1e4 <HAL_FLASH_OB_Lock+0x2c>)
 800b1c2:	f043 0301 	orr.w	r3, r3, #1
 800b1c6:	61d3      	str	r3, [r2, #28]

  /* Verify that the Option Bytes are locked */
  if (READ_BIT(FLASH->OPTCR, FLASH_OPTCR_OPTLOCK) != 0U)
 800b1c8:	4b06      	ldr	r3, [pc, #24]	@ (800b1e4 <HAL_FLASH_OB_Lock+0x2c>)
 800b1ca:	69db      	ldr	r3, [r3, #28]
 800b1cc:	f003 0301 	and.w	r3, r3, #1
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d001      	beq.n	800b1d8 <HAL_FLASH_OB_Lock+0x20>
  {
    return HAL_OK;
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	e000      	b.n	800b1da <HAL_FLASH_OB_Lock+0x22>
  }

  return HAL_ERROR;
 800b1d8:	2301      	movs	r3, #1
}
 800b1da:	4618      	mov	r0, r3
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e2:	4770      	bx	lr
 800b1e4:	40022000 	.word	0x40022000

0800b1e8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b086      	sub	sp, #24
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]

  uint32_t errorflag;
  const __IO uint32_t *reg_sr;
  __IO uint32_t *reg_ccr;

  uint32_t tickstart = HAL_GetTick();
 800b1f0:	f7fa fbee 	bl	80059d0 <HAL_GetTick>
 800b1f4:	6178      	str	r0, [r7, #20]

  /* Access to SR register depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_sr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECSR) : &(FLASH_NS->NSSR);
 800b1f6:	4b20      	ldr	r3, [pc, #128]	@ (800b278 <FLASH_WaitForLastOperation+0x90>)
 800b1f8:	613b      	str	r3, [r7, #16]
#else
  reg_sr = &(FLASH_NS->NSSR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Wait on BSY, WBNE and DBNE flags to be reset */
  while (((*reg_sr) & (FLASH_FLAG_BSY | FLASH_FLAG_WBNE | FLASH_FLAG_DBNE)) != 0U)
 800b1fa:	e010      	b.n	800b21e <FLASH_WaitForLastOperation+0x36>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b202:	d00c      	beq.n	800b21e <FLASH_WaitForLastOperation+0x36>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800b204:	f7fa fbe4 	bl	80059d0 <HAL_GetTick>
 800b208:	4602      	mov	r2, r0
 800b20a:	697b      	ldr	r3, [r7, #20]
 800b20c:	1ad3      	subs	r3, r2, r3
 800b20e:	687a      	ldr	r2, [r7, #4]
 800b210:	429a      	cmp	r2, r3
 800b212:	d302      	bcc.n	800b21a <FLASH_WaitForLastOperation+0x32>
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d101      	bne.n	800b21e <FLASH_WaitForLastOperation+0x36>
      {
        return HAL_TIMEOUT;
 800b21a:	2303      	movs	r3, #3
 800b21c:	e027      	b.n	800b26e <FLASH_WaitForLastOperation+0x86>
  while (((*reg_sr) & (FLASH_FLAG_BSY | FLASH_FLAG_WBNE | FLASH_FLAG_DBNE)) != 0U)
 800b21e:	693b      	ldr	r3, [r7, #16]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	f003 030b 	and.w	r3, r3, #11
 800b226:	2b00      	cmp	r3, #0
 800b228:	d1e8      	bne.n	800b1fc <FLASH_WaitForLastOperation+0x14>
    }
  }

  /* Access to CCR register depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_ccr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCCR) : &(FLASH_NS->NSCCR);
 800b22a:	4b14      	ldr	r3, [pc, #80]	@ (800b27c <FLASH_WaitForLastOperation+0x94>)
 800b22c:	60fb      	str	r3, [r7, #12]
#else
  reg_ccr = &(FLASH_NS->NSCCR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Check FLASH operation error flags */
  errorflag = ((*reg_sr) & FLASH_FLAG_SR_ERRORS);
 800b22e:	693b      	ldr	r3, [r7, #16]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	f403 037e 	and.w	r3, r3, #16646144	@ 0xfe0000
 800b236:	60bb      	str	r3, [r7, #8]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  errorflag |= (FLASH->NSSR & FLASH_FLAG_OPTCHANGEERR);
#endif /* __ARM_FEATURE_CMSE */

  /* In case of error reported in Flash SR or OPTSR registers */
  if (errorflag != 0U)
 800b238:	68bb      	ldr	r3, [r7, #8]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d00c      	beq.n	800b258 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 800b23e:	4b10      	ldr	r3, [pc, #64]	@ (800b280 <FLASH_WaitForLastOperation+0x98>)
 800b240:	685a      	ldr	r2, [r3, #4]
 800b242:	68bb      	ldr	r3, [r7, #8]
 800b244:	4313      	orrs	r3, r2
 800b246:	4a0e      	ldr	r2, [pc, #56]	@ (800b280 <FLASH_WaitForLastOperation+0x98>)
 800b248:	6053      	str	r3, [r2, #4]

    /* Clear error flags */
    (*reg_ccr) = errorflag & FLASH_FLAG_SR_ERRORS;
 800b24a:	68bb      	ldr	r3, [r7, #8]
 800b24c:	f403 027e 	and.w	r2, r3, #16646144	@ 0xfe0000
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	601a      	str	r2, [r3, #0]
    {
      FLASH->NSCCR = FLASH_FLAG_OPTCHANGEERR;
    }
#endif /* __ARM_FEATURE_CMSE */

    return HAL_ERROR;
 800b254:	2301      	movs	r3, #1
 800b256:	e00a      	b.n	800b26e <FLASH_WaitForLastOperation+0x86>
  }

  /* Check FLASH End of Operation flag  */
  if (((*reg_sr) & FLASH_FLAG_EOP) != 0U)
 800b258:	693b      	ldr	r3, [r7, #16]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b260:	2b00      	cmp	r3, #0
 800b262:	d003      	beq.n	800b26c <FLASH_WaitForLastOperation+0x84>
  {
    /* Clear FLASH End of Operation pending bit */
    (*reg_ccr) = FLASH_FLAG_EOP;
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800b26a:	601a      	str	r2, [r3, #0]
  }

  /* If there is no error flag set */
  return HAL_OK;
 800b26c:	2300      	movs	r3, #0
}
 800b26e:	4618      	mov	r0, r3
 800b270:	3718      	adds	r7, #24
 800b272:	46bd      	mov	sp, r7
 800b274:	bd80      	pop	{r7, pc}
 800b276:	bf00      	nop
 800b278:	40022020 	.word	0x40022020
 800b27c:	40022030 	.word	0x40022030
 800b280:	20000080 	.word	0x20000080

0800b284 <FLASH_Program_QuadWord>:
  * @param  FlashAddress specifies the address to be programmed.
  * @param  DataAddress specifies the address of data to be programmed.
  * @retval None
  */
static void FLASH_Program_QuadWord(uint32_t FlashAddress, uint32_t DataAddress)
{
 800b284:	b480      	push	{r7}
 800b286:	b08b      	sub	sp, #44	@ 0x2c
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
 800b28c:	6039      	str	r1, [r7, #0]
  uint8_t index = 4;
 800b28e:	2304      	movs	r3, #4
 800b290:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t *dest_addr = (uint32_t *)FlashAddress;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	623b      	str	r3, [r7, #32]
  uint32_t *src_addr  = (uint32_t *)DataAddress;
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	61fb      	str	r3, [r7, #28]
  uint32_t primask_bit;
  __IO uint32_t *reg_cr;

  /* Access to SECCR or NSCR registers depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 800b29c:	4b16      	ldr	r3, [pc, #88]	@ (800b2f8 <FLASH_Program_QuadWord+0x74>)
 800b29e:	61bb      	str	r3, [r7, #24]
#else
  reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Set PG bit */
  SET_BIT((*reg_cr), FLASH_CR_PG);
 800b2a0:	69bb      	ldr	r3, [r7, #24]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	f043 0202 	orr.w	r2, r3, #2
 800b2a8:	69bb      	ldr	r3, [r7, #24]
 800b2aa:	601a      	str	r2, [r3, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800b2ac:	f3ef 8310 	mrs	r3, PRIMASK
 800b2b0:	613b      	str	r3, [r7, #16]
  return(result);
 800b2b2:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 800b2b4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b2b6:	b672      	cpsid	i
}
 800b2b8:	bf00      	nop
  __disable_irq();

  /* Program the quad-word */
  do
  {
    *dest_addr = *src_addr;
 800b2ba:	69fb      	ldr	r3, [r7, #28]
 800b2bc:	681a      	ldr	r2, [r3, #0]
 800b2be:	6a3b      	ldr	r3, [r7, #32]
 800b2c0:	601a      	str	r2, [r3, #0]
    dest_addr++;
 800b2c2:	6a3b      	ldr	r3, [r7, #32]
 800b2c4:	3304      	adds	r3, #4
 800b2c6:	623b      	str	r3, [r7, #32]
    src_addr++;
 800b2c8:	69fb      	ldr	r3, [r7, #28]
 800b2ca:	3304      	adds	r3, #4
 800b2cc:	61fb      	str	r3, [r7, #28]
    index--;
 800b2ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b2d2:	3b01      	subs	r3, #1
 800b2d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  } while (index != 0U);
 800b2d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d1ec      	bne.n	800b2ba <FLASH_Program_QuadWord+0x36>
 800b2e0:	697b      	ldr	r3, [r7, #20]
 800b2e2:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	f383 8810 	msr	PRIMASK, r3
}
 800b2ea:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 800b2ec:	bf00      	nop
 800b2ee:	372c      	adds	r7, #44	@ 0x2c
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f6:	4770      	bx	lr
 800b2f8:	40022028 	.word	0x40022028

0800b2fc <FLASH_Program_QuadWord_OBK>:
  * @param  FlashAddress specifies the address to be programmed.
  * @param  DataAddress specifies the address of data to be programmed.
  * @retval None
  */
static void FLASH_Program_QuadWord_OBK(uint32_t FlashAddress, uint32_t DataAddress)
{
 800b2fc:	b480      	push	{r7}
 800b2fe:	b08b      	sub	sp, #44	@ 0x2c
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
 800b304:	6039      	str	r1, [r7, #0]
  uint8_t index = 4;
 800b306:	2304      	movs	r3, #4
 800b308:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t *dest_addr = (uint32_t *)FlashAddress;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	623b      	str	r3, [r7, #32]
  uint32_t *src_addr  = (uint32_t *)DataAddress;
 800b310:	683b      	ldr	r3, [r7, #0]
 800b312:	61fb      	str	r3, [r7, #28]
  uint32_t primask_bit;
  __IO uint32_t *reg_cr;
  __IO uint32_t *reg_obkcfgr;

  /* Access to SECCR or NSCR registers depends on operation type */
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 800b314:	4b1c      	ldr	r3, [pc, #112]	@ (800b388 <FLASH_Program_QuadWord_OBK+0x8c>)
 800b316:	61bb      	str	r3, [r7, #24]
  reg_obkcfgr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECOBKCFGR) : &(FLASH_NS->NSOBKCFGR);
 800b318:	4b1c      	ldr	r3, [pc, #112]	@ (800b38c <FLASH_Program_QuadWord_OBK+0x90>)
 800b31a:	617b      	str	r3, [r7, #20]

  /* Set PG bit */
  SET_BIT((*reg_cr), FLASH_CR_PG);
 800b31c:	69bb      	ldr	r3, [r7, #24]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	f043 0202 	orr.w	r2, r3, #2
 800b324:	69bb      	ldr	r3, [r7, #24]
 800b326:	601a      	str	r2, [r3, #0]

  /* Set ALT_SECT bit */
  SET_BIT((*reg_obkcfgr), pFlash.ProcedureOnGoing & FLASH_OBKCFGR_ALT_SECT);
 800b328:	697b      	ldr	r3, [r7, #20]
 800b32a:	681a      	ldr	r2, [r3, #0]
 800b32c:	4b18      	ldr	r3, [pc, #96]	@ (800b390 <FLASH_Program_QuadWord_OBK+0x94>)
 800b32e:	689b      	ldr	r3, [r3, #8]
 800b330:	f003 0304 	and.w	r3, r3, #4
 800b334:	431a      	orrs	r2, r3
 800b336:	697b      	ldr	r3, [r7, #20]
 800b338:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800b33a:	f3ef 8310 	mrs	r3, PRIMASK
 800b33e:	60fb      	str	r3, [r7, #12]
  return(result);
 800b340:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 800b342:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800b344:	b672      	cpsid	i
}
 800b346:	bf00      	nop
  __disable_irq();

  /* Program the quad-word */
  do
  {
    *dest_addr = *src_addr;
 800b348:	69fb      	ldr	r3, [r7, #28]
 800b34a:	681a      	ldr	r2, [r3, #0]
 800b34c:	6a3b      	ldr	r3, [r7, #32]
 800b34e:	601a      	str	r2, [r3, #0]
    dest_addr++;
 800b350:	6a3b      	ldr	r3, [r7, #32]
 800b352:	3304      	adds	r3, #4
 800b354:	623b      	str	r3, [r7, #32]
    src_addr++;
 800b356:	69fb      	ldr	r3, [r7, #28]
 800b358:	3304      	adds	r3, #4
 800b35a:	61fb      	str	r3, [r7, #28]
    index--;
 800b35c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b360:	3b01      	subs	r3, #1
 800b362:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  } while (index != 0U);
 800b366:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d1ec      	bne.n	800b348 <FLASH_Program_QuadWord_OBK+0x4c>
 800b36e:	693b      	ldr	r3, [r7, #16]
 800b370:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b372:	68bb      	ldr	r3, [r7, #8]
 800b374:	f383 8810 	msr	PRIMASK, r3
}
 800b378:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 800b37a:	bf00      	nop
 800b37c:	372c      	adds	r7, #44	@ 0x2c
 800b37e:	46bd      	mov	sp, r7
 800b380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b384:	4770      	bx	lr
 800b386:	bf00      	nop
 800b388:	40022028 	.word	0x40022028
 800b38c:	40022040 	.word	0x40022040
 800b390:	20000080 	.word	0x20000080

0800b394 <FLASH_Program_HalfWord>:
  * @param  FlashAddress specifies the address to be programmed.
  * @param  DataAddress specifies the address of data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t FlashAddress, uint32_t DataAddress)
{
 800b394:	b480      	push	{r7}
 800b396:	b085      	sub	sp, #20
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
 800b39c:	6039      	str	r1, [r7, #0]
  __IO uint32_t *reg_cr;

  /* Access to SECCR or NSCR registers depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 800b39e:	4b09      	ldr	r3, [pc, #36]	@ (800b3c4 <FLASH_Program_HalfWord+0x30>)
 800b3a0:	60fb      	str	r3, [r7, #12]
#else
  reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Set HalfWord_PG bit */
  SET_BIT((*reg_cr), FLASH_CR_PG);
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	f043 0202 	orr.w	r2, r3, #2
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	601a      	str	r2, [r3, #0]

  /* Program a halfword word (16 bits) */
  *(__IO uint16_t *)FlashAddress = *(__IO uint16_t *)DataAddress;
 800b3ae:	683a      	ldr	r2, [r7, #0]
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	8812      	ldrh	r2, [r2, #0]
 800b3b4:	b292      	uxth	r2, r2
 800b3b6:	801a      	strh	r2, [r3, #0]
}
 800b3b8:	bf00      	nop
 800b3ba:	3714      	adds	r7, #20
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c2:	4770      	bx	lr
 800b3c4:	40022028 	.word	0x40022028

0800b3c8 <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased).
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b086      	sub	sp, #24
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
 800b3d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800b3d2:	4b3a      	ldr	r3, [pc, #232]	@ (800b4bc <HAL_FLASHEx_Erase+0xf4>)
 800b3d4:	781b      	ldrb	r3, [r3, #0]
 800b3d6:	2b01      	cmp	r3, #1
 800b3d8:	d101      	bne.n	800b3de <HAL_FLASHEx_Erase+0x16>
 800b3da:	2302      	movs	r3, #2
 800b3dc:	e06a      	b.n	800b4b4 <HAL_FLASHEx_Erase+0xec>
 800b3de:	4b37      	ldr	r3, [pc, #220]	@ (800b4bc <HAL_FLASHEx_Erase+0xf4>)
 800b3e0:	2201      	movs	r2, #1
 800b3e2:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800b3e4:	4b35      	ldr	r3, [pc, #212]	@ (800b4bc <HAL_FLASHEx_Erase+0xf4>)
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800b3ea:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b3ee:	f7ff fefb 	bl	800b1e8 <FLASH_WaitForLastOperation>
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 800b3f6:	7dfb      	ldrb	r3, [r7, #23]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d157      	bne.n	800b4ac <HAL_FLASHEx_Erase+0xe4>
  {
    /* Current operation type */
    pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	4a2e      	ldr	r2, [pc, #184]	@ (800b4bc <HAL_FLASHEx_Erase+0xf4>)
 800b402:	6093      	str	r3, [r2, #8]

    /* Access to SECCR or NSCR depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
    reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 800b404:	4b2e      	ldr	r3, [pc, #184]	@ (800b4c0 <HAL_FLASHEx_Erase+0xf8>)
 800b406:	60fb      	str	r3, [r7, #12]
#else
    reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

    if ((pEraseInit->TypeErase & (~FLASH_NON_SECURE_MASK)) == FLASH_TYPEERASE_MASSERASE)
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b410:	f248 0208 	movw	r2, #32776	@ 0x8008
 800b414:	4293      	cmp	r3, r2
 800b416:	d10b      	bne.n	800b430 <HAL_FLASHEx_Erase+0x68>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	685b      	ldr	r3, [r3, #4]
 800b41c:	4618      	mov	r0, r3
 800b41e:	f000 f853 	bl	800b4c8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800b422:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b426:	f7ff fedf 	bl	800b1e8 <FLASH_WaitForLastOperation>
 800b42a:	4603      	mov	r3, r0
 800b42c:	75fb      	strb	r3, [r7, #23]
 800b42e:	e033      	b.n	800b498 <HAL_FLASHEx_Erase+0xd0>
    }
#if defined (FLASH_SR_OBKERR)
    else if (pEraseInit->TypeErase == FLASH_TYPEERASE_OBK_ALT)
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	4a23      	ldr	r2, [pc, #140]	@ (800b4c4 <HAL_FLASHEx_Erase+0xfc>)
 800b436:	4293      	cmp	r3, r2
 800b438:	d108      	bne.n	800b44c <HAL_FLASHEx_Erase+0x84>
    {
      /* OBK erase to be done */
      FLASH_OBKErase();
 800b43a:	f000 f8b5 	bl	800b5a8 <FLASH_OBKErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800b43e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b442:	f7ff fed1 	bl	800b1e8 <FLASH_WaitForLastOperation>
 800b446:	4603      	mov	r3, r0
 800b448:	75fb      	strb	r3, [r7, #23]
 800b44a:	e025      	b.n	800b498 <HAL_FLASHEx_Erase+0xd0>
    }
#endif /* FLASH_SR_OBKERR */
    else
    {
      /* Initialization of SectorError variable */
      *SectorError = 0xFFFFFFFFU;
 800b44c:	683b      	ldr	r3, [r7, #0]
 800b44e:	f04f 32ff 	mov.w	r2, #4294967295
 800b452:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for (sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); \
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	689b      	ldr	r3, [r3, #8]
 800b458:	613b      	str	r3, [r7, #16]
 800b45a:	e015      	b.n	800b488 <HAL_FLASHEx_Erase+0xc0>
           sector_index++)
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks);
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	685b      	ldr	r3, [r3, #4]
 800b460:	4619      	mov	r1, r3
 800b462:	6938      	ldr	r0, [r7, #16]
 800b464:	f000 f868 	bl	800b538 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800b468:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b46c:	f7ff febc 	bl	800b1e8 <FLASH_WaitForLastOperation>
 800b470:	4603      	mov	r3, r0
 800b472:	75fb      	strb	r3, [r7, #23]

        if (status != HAL_OK)
 800b474:	7dfb      	ldrb	r3, [r7, #23]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d003      	beq.n	800b482 <HAL_FLASHEx_Erase+0xba>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 800b47a:	683b      	ldr	r3, [r7, #0]
 800b47c:	693a      	ldr	r2, [r7, #16]
 800b47e:	601a      	str	r2, [r3, #0]
          break;
 800b480:	e00a      	b.n	800b498 <HAL_FLASHEx_Erase+0xd0>
           sector_index++)
 800b482:	693b      	ldr	r3, [r7, #16]
 800b484:	3301      	adds	r3, #1
 800b486:	613b      	str	r3, [r7, #16]
      for (sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); \
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	68da      	ldr	r2, [r3, #12]
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	689b      	ldr	r3, [r3, #8]
 800b490:	4413      	add	r3, r2
 800b492:	693a      	ldr	r2, [r7, #16]
 800b494:	429a      	cmp	r2, r3
 800b496:	d3e1      	bcc.n	800b45c <HAL_FLASHEx_Erase+0x94>
        }
      }
    }

    /* If the erase operation is completed, disable the associated bits */
    CLEAR_BIT((*reg_cr), (pEraseInit->TypeErase) & (~(FLASH_NON_SECURE_MASK)));
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	681a      	ldr	r2, [r3, #0]
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b4a4:	43db      	mvns	r3, r3
 800b4a6:	401a      	ands	r2, r3
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800b4ac:	4b03      	ldr	r3, [pc, #12]	@ (800b4bc <HAL_FLASHEx_Erase+0xf4>)
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	701a      	strb	r2, [r3, #0]

  return status;
 800b4b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	3718      	adds	r7, #24
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	bd80      	pop	{r7, pc}
 800b4bc:	20000080 	.word	0x20000080
 800b4c0:	40022028 	.word	0x40022028
 800b4c4:	80000008 	.word	0x80000008

0800b4c8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800b4c8:	b480      	push	{r7}
 800b4ca:	b085      	sub	sp, #20
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Access to SECCR or NSCR registers depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 800b4d0:	4b18      	ldr	r3, [pc, #96]	@ (800b534 <FLASH_MassErase+0x6c>)
 800b4d2:	60fb      	str	r3, [r7, #12]
#else
  reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Flash Mass Erase */
  if ((Banks & FLASH_BANK_BOTH) == FLASH_BANK_BOTH)
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	f003 0303 	and.w	r3, r3, #3
 800b4da:	2b03      	cmp	r3, #3
 800b4dc:	d108      	bne.n	800b4f0 <FLASH_MassErase+0x28>
  {
    /* Set Mass Erase Bit */
    SET_BIT((*reg_cr), FLASH_CR_MER | FLASH_CR_START);
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b4e6:	f043 0320 	orr.w	r3, r3, #32
 800b4ea:	68fa      	ldr	r2, [r7, #12]
 800b4ec:	6013      	str	r3, [r2, #0]
    {
      /* Erase Bank2 */
      SET_BIT((*reg_cr), (FLASH_CR_BER | FLASH_CR_BKSEL | FLASH_CR_START));
    }
  }
}
 800b4ee:	e01b      	b.n	800b528 <FLASH_MassErase+0x60>
    if ((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	f003 0301 	and.w	r3, r3, #1
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d009      	beq.n	800b50e <FLASH_MassErase+0x46>
      MODIFY_REG((*reg_cr), (FLASH_CR_BKSEL | FLASH_CR_BER | FLASH_CR_START), (FLASH_CR_BER | FLASH_CR_START));
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b502:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 800b506:	f043 0228 	orr.w	r2, r3, #40	@ 0x28
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	601a      	str	r2, [r3, #0]
    if ((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	f003 0302 	and.w	r3, r3, #2
 800b514:	2b00      	cmp	r3, #0
 800b516:	d007      	beq.n	800b528 <FLASH_MassErase+0x60>
      SET_BIT((*reg_cr), (FLASH_CR_BER | FLASH_CR_BKSEL | FLASH_CR_START));
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b520:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 800b524:	68fa      	ldr	r2, [r7, #12]
 800b526:	6013      	str	r3, [r2, #0]
}
 800b528:	bf00      	nop
 800b52a:	3714      	adds	r7, #20
 800b52c:	46bd      	mov	sp, r7
 800b52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b532:	4770      	bx	lr
 800b534:	40022028 	.word	0x40022028

0800b538 <FLASH_Erase_Sector>:
  *            @arg FLASH_BANK_1: Sector in bank 1 to be erased
  *            @arg FLASH_BANK_2: Sector in bank 2 to be erased
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks)
{
 800b538:	b480      	push	{r7}
 800b53a:	b085      	sub	sp, #20
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
 800b540:	6039      	str	r1, [r7, #0]
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

  /* Access to SECCR or NSCR registers depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 800b542:	4b18      	ldr	r3, [pc, #96]	@ (800b5a4 <FLASH_Erase_Sector+0x6c>)
 800b544:	60fb      	str	r3, [r7, #12]
#else
  reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

  if ((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	f003 0301 	and.w	r3, r3, #1
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d011      	beq.n	800b574 <FLASH_Erase_Sector+0x3c>
  {
    /* Reset Sector Number for Bank1 */
    (*reg_cr) &= ~(FLASH_CR_SNB | FLASH_CR_BKSEL);
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b558:	f423 53fe 	bic.w	r3, r3, #8128	@ 0x1fc0
 800b55c:	68fa      	ldr	r2, [r7, #12]
 800b55e:	6013      	str	r3, [r2, #0]

    (*reg_cr) |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	681a      	ldr	r2, [r3, #0]
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	019b      	lsls	r3, r3, #6
 800b568:	4313      	orrs	r3, r2
 800b56a:	f043 0224 	orr.w	r2, r3, #36	@ 0x24
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	601a      	str	r2, [r3, #0]
    /* Reset Sector Number for Bank2 */
    (*reg_cr) &= ~(FLASH_CR_SNB);

    (*reg_cr) |= (FLASH_CR_SER | FLASH_CR_BKSEL | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
  }
}
 800b572:	e010      	b.n	800b596 <FLASH_Erase_Sector+0x5e>
    (*reg_cr) &= ~(FLASH_CR_SNB);
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	f423 52fe 	bic.w	r2, r3, #8128	@ 0x1fc0
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	601a      	str	r2, [r3, #0]
    (*reg_cr) |= (FLASH_CR_SER | FLASH_CR_BKSEL | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	681a      	ldr	r2, [r3, #0]
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	019b      	lsls	r3, r3, #6
 800b588:	4313      	orrs	r3, r2
 800b58a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b58e:	f043 0324 	orr.w	r3, r3, #36	@ 0x24
 800b592:	68fa      	ldr	r2, [r7, #12]
 800b594:	6013      	str	r3, [r2, #0]
}
 800b596:	bf00      	nop
 800b598:	3714      	adds	r7, #20
 800b59a:	46bd      	mov	sp, r7
 800b59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a0:	4770      	bx	lr
 800b5a2:	bf00      	nop
 800b5a4:	40022028 	.word	0x40022028

0800b5a8 <FLASH_OBKErase>:
/**
  * @brief  Erase of FLASH OBK
  * @retval None
  */
static void FLASH_OBKErase()
{
 800b5a8:	b480      	push	{r7}
 800b5aa:	b083      	sub	sp, #12
 800b5ac:	af00      	add	r7, sp, #0
  __IO uint32_t *reg_obkcfgr;

  /* Access to SECOBKCFGR or NSOBKCFGR registers depends on operation type */
  reg_obkcfgr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECOBKCFGR) : &(FLASH_NS->NSOBKCFGR);
 800b5ae:	4b07      	ldr	r3, [pc, #28]	@ (800b5cc <FLASH_OBKErase+0x24>)
 800b5b0:	607b      	str	r3, [r7, #4]

  /* Set OBK Erase Bit */
  SET_BIT((*reg_obkcfgr), FLASH_OBKCFGR_ALT_SECT_ERASE);
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	f043 0208 	orr.w	r2, r3, #8
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	601a      	str	r2, [r3, #0]
}
 800b5be:	bf00      	nop
 800b5c0:	370c      	adds	r7, #12
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c8:	4770      	bx	lr
 800b5ca:	bf00      	nop
 800b5cc:	40022040 	.word	0x40022040

0800b5d0 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800b5d0:	b480      	push	{r7}
 800b5d2:	b087      	sub	sp, #28
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
 800b5d8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800b5da:	2300      	movs	r3, #0
 800b5dc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800b5de:	e136      	b.n	800b84e <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800b5e0:	683b      	ldr	r3, [r7, #0]
 800b5e2:	681a      	ldr	r2, [r3, #0]
 800b5e4:	2101      	movs	r1, #1
 800b5e6:	693b      	ldr	r3, [r7, #16]
 800b5e8:	fa01 f303 	lsl.w	r3, r1, r3
 800b5ec:	4013      	ands	r3, r2
 800b5ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	f000 8128 	beq.w	800b848 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b5f8:	683b      	ldr	r3, [r7, #0]
 800b5fa:	685b      	ldr	r3, [r3, #4]
 800b5fc:	2b02      	cmp	r3, #2
 800b5fe:	d003      	beq.n	800b608 <HAL_GPIO_Init+0x38>
 800b600:	683b      	ldr	r3, [r7, #0]
 800b602:	685b      	ldr	r3, [r3, #4]
 800b604:	2b12      	cmp	r3, #18
 800b606:	d125      	bne.n	800b654 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800b608:	693b      	ldr	r3, [r7, #16]
 800b60a:	08da      	lsrs	r2, r3, #3
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	3208      	adds	r2, #8
 800b610:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b614:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800b616:	693b      	ldr	r3, [r7, #16]
 800b618:	f003 0307 	and.w	r3, r3, #7
 800b61c:	009b      	lsls	r3, r3, #2
 800b61e:	220f      	movs	r2, #15
 800b620:	fa02 f303 	lsl.w	r3, r2, r3
 800b624:	43db      	mvns	r3, r3
 800b626:	697a      	ldr	r2, [r7, #20]
 800b628:	4013      	ands	r3, r2
 800b62a:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800b62c:	683b      	ldr	r3, [r7, #0]
 800b62e:	691b      	ldr	r3, [r3, #16]
 800b630:	f003 020f 	and.w	r2, r3, #15
 800b634:	693b      	ldr	r3, [r7, #16]
 800b636:	f003 0307 	and.w	r3, r3, #7
 800b63a:	009b      	lsls	r3, r3, #2
 800b63c:	fa02 f303 	lsl.w	r3, r2, r3
 800b640:	697a      	ldr	r2, [r7, #20]
 800b642:	4313      	orrs	r3, r2
 800b644:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 800b646:	693b      	ldr	r3, [r7, #16]
 800b648:	08da      	lsrs	r2, r3, #3
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	3208      	adds	r2, #8
 800b64e:	6979      	ldr	r1, [r7, #20]
 800b650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800b65a:	693b      	ldr	r3, [r7, #16]
 800b65c:	005b      	lsls	r3, r3, #1
 800b65e:	2203      	movs	r2, #3
 800b660:	fa02 f303 	lsl.w	r3, r2, r3
 800b664:	43db      	mvns	r3, r3
 800b666:	697a      	ldr	r2, [r7, #20]
 800b668:	4013      	ands	r3, r2
 800b66a:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 800b66c:	683b      	ldr	r3, [r7, #0]
 800b66e:	685b      	ldr	r3, [r3, #4]
 800b670:	f003 0203 	and.w	r2, r3, #3
 800b674:	693b      	ldr	r3, [r7, #16]
 800b676:	005b      	lsls	r3, r3, #1
 800b678:	fa02 f303 	lsl.w	r3, r2, r3
 800b67c:	697a      	ldr	r2, [r7, #20]
 800b67e:	4313      	orrs	r3, r2
 800b680:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	697a      	ldr	r2, [r7, #20]
 800b686:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b688:	683b      	ldr	r3, [r7, #0]
 800b68a:	685b      	ldr	r3, [r3, #4]
 800b68c:	2b01      	cmp	r3, #1
 800b68e:	d00b      	beq.n	800b6a8 <HAL_GPIO_Init+0xd8>
 800b690:	683b      	ldr	r3, [r7, #0]
 800b692:	685b      	ldr	r3, [r3, #4]
 800b694:	2b02      	cmp	r3, #2
 800b696:	d007      	beq.n	800b6a8 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b698:	683b      	ldr	r3, [r7, #0]
 800b69a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b69c:	2b11      	cmp	r3, #17
 800b69e:	d003      	beq.n	800b6a8 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b6a0:	683b      	ldr	r3, [r7, #0]
 800b6a2:	685b      	ldr	r3, [r3, #4]
 800b6a4:	2b12      	cmp	r3, #18
 800b6a6:	d130      	bne.n	800b70a <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	689b      	ldr	r3, [r3, #8]
 800b6ac:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800b6ae:	693b      	ldr	r3, [r7, #16]
 800b6b0:	005b      	lsls	r3, r3, #1
 800b6b2:	2203      	movs	r2, #3
 800b6b4:	fa02 f303 	lsl.w	r3, r2, r3
 800b6b8:	43db      	mvns	r3, r3
 800b6ba:	697a      	ldr	r2, [r7, #20]
 800b6bc:	4013      	ands	r3, r2
 800b6be:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	68da      	ldr	r2, [r3, #12]
 800b6c4:	693b      	ldr	r3, [r7, #16]
 800b6c6:	005b      	lsls	r3, r3, #1
 800b6c8:	fa02 f303 	lsl.w	r3, r2, r3
 800b6cc:	697a      	ldr	r2, [r7, #20]
 800b6ce:	4313      	orrs	r3, r2
 800b6d0:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	697a      	ldr	r2, [r7, #20]
 800b6d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	685b      	ldr	r3, [r3, #4]
 800b6dc:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b6de:	2201      	movs	r2, #1
 800b6e0:	693b      	ldr	r3, [r7, #16]
 800b6e2:	fa02 f303 	lsl.w	r3, r2, r3
 800b6e6:	43db      	mvns	r3, r3
 800b6e8:	697a      	ldr	r2, [r7, #20]
 800b6ea:	4013      	ands	r3, r2
 800b6ec:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800b6ee:	683b      	ldr	r3, [r7, #0]
 800b6f0:	685b      	ldr	r3, [r3, #4]
 800b6f2:	091b      	lsrs	r3, r3, #4
 800b6f4:	f003 0201 	and.w	r2, r3, #1
 800b6f8:	693b      	ldr	r3, [r7, #16]
 800b6fa:	fa02 f303 	lsl.w	r3, r2, r3
 800b6fe:	697a      	ldr	r2, [r7, #20]
 800b700:	4313      	orrs	r3, r2
 800b702:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	697a      	ldr	r2, [r7, #20]
 800b708:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800b70a:	683b      	ldr	r3, [r7, #0]
 800b70c:	685b      	ldr	r3, [r3, #4]
 800b70e:	2b03      	cmp	r3, #3
 800b710:	d017      	beq.n	800b742 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	68db      	ldr	r3, [r3, #12]
 800b716:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 800b718:	693b      	ldr	r3, [r7, #16]
 800b71a:	005b      	lsls	r3, r3, #1
 800b71c:	2203      	movs	r2, #3
 800b71e:	fa02 f303 	lsl.w	r3, r2, r3
 800b722:	43db      	mvns	r3, r3
 800b724:	697a      	ldr	r2, [r7, #20]
 800b726:	4013      	ands	r3, r2
 800b728:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800b72a:	683b      	ldr	r3, [r7, #0]
 800b72c:	689a      	ldr	r2, [r3, #8]
 800b72e:	693b      	ldr	r3, [r7, #16]
 800b730:	005b      	lsls	r3, r3, #1
 800b732:	fa02 f303 	lsl.w	r3, r2, r3
 800b736:	697a      	ldr	r2, [r7, #20]
 800b738:	4313      	orrs	r3, r2
 800b73a:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	697a      	ldr	r2, [r7, #20]
 800b740:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800b742:	683b      	ldr	r3, [r7, #0]
 800b744:	685b      	ldr	r3, [r3, #4]
 800b746:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d07c      	beq.n	800b848 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800b74e:	4a47      	ldr	r2, [pc, #284]	@ (800b86c <HAL_GPIO_Init+0x29c>)
 800b750:	693b      	ldr	r3, [r7, #16]
 800b752:	089b      	lsrs	r3, r3, #2
 800b754:	3318      	adds	r3, #24
 800b756:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b75a:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800b75c:	693b      	ldr	r3, [r7, #16]
 800b75e:	f003 0303 	and.w	r3, r3, #3
 800b762:	00db      	lsls	r3, r3, #3
 800b764:	220f      	movs	r2, #15
 800b766:	fa02 f303 	lsl.w	r3, r2, r3
 800b76a:	43db      	mvns	r3, r3
 800b76c:	697a      	ldr	r2, [r7, #20]
 800b76e:	4013      	ands	r3, r2
 800b770:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	0a9a      	lsrs	r2, r3, #10
 800b776:	4b3e      	ldr	r3, [pc, #248]	@ (800b870 <HAL_GPIO_Init+0x2a0>)
 800b778:	4013      	ands	r3, r2
 800b77a:	693a      	ldr	r2, [r7, #16]
 800b77c:	f002 0203 	and.w	r2, r2, #3
 800b780:	00d2      	lsls	r2, r2, #3
 800b782:	4093      	lsls	r3, r2
 800b784:	697a      	ldr	r2, [r7, #20]
 800b786:	4313      	orrs	r3, r2
 800b788:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 800b78a:	4938      	ldr	r1, [pc, #224]	@ (800b86c <HAL_GPIO_Init+0x29c>)
 800b78c:	693b      	ldr	r3, [r7, #16]
 800b78e:	089b      	lsrs	r3, r3, #2
 800b790:	3318      	adds	r3, #24
 800b792:	697a      	ldr	r2, [r7, #20]
 800b794:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800b798:	4b34      	ldr	r3, [pc, #208]	@ (800b86c <HAL_GPIO_Init+0x29c>)
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	43db      	mvns	r3, r3
 800b7a2:	697a      	ldr	r2, [r7, #20]
 800b7a4:	4013      	ands	r3, r2
 800b7a6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	685b      	ldr	r3, [r3, #4]
 800b7ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d003      	beq.n	800b7bc <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 800b7b4:	697a      	ldr	r2, [r7, #20]
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	4313      	orrs	r3, r2
 800b7ba:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 800b7bc:	4a2b      	ldr	r2, [pc, #172]	@ (800b86c <HAL_GPIO_Init+0x29c>)
 800b7be:	697b      	ldr	r3, [r7, #20]
 800b7c0:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800b7c2:	4b2a      	ldr	r3, [pc, #168]	@ (800b86c <HAL_GPIO_Init+0x29c>)
 800b7c4:	685b      	ldr	r3, [r3, #4]
 800b7c6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	43db      	mvns	r3, r3
 800b7cc:	697a      	ldr	r2, [r7, #20]
 800b7ce:	4013      	ands	r3, r2
 800b7d0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	685b      	ldr	r3, [r3, #4]
 800b7d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d003      	beq.n	800b7e6 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 800b7de:	697a      	ldr	r2, [r7, #20]
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	4313      	orrs	r3, r2
 800b7e4:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800b7e6:	4a21      	ldr	r2, [pc, #132]	@ (800b86c <HAL_GPIO_Init+0x29c>)
 800b7e8:	697b      	ldr	r3, [r7, #20]
 800b7ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 800b7ec:	4b1f      	ldr	r3, [pc, #124]	@ (800b86c <HAL_GPIO_Init+0x29c>)
 800b7ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b7f2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	43db      	mvns	r3, r3
 800b7f8:	697a      	ldr	r2, [r7, #20]
 800b7fa:	4013      	ands	r3, r2
 800b7fc:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	685b      	ldr	r3, [r3, #4]
 800b802:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b806:	2b00      	cmp	r3, #0
 800b808:	d003      	beq.n	800b812 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 800b80a:	697a      	ldr	r2, [r7, #20]
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	4313      	orrs	r3, r2
 800b810:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800b812:	4a16      	ldr	r2, [pc, #88]	@ (800b86c <HAL_GPIO_Init+0x29c>)
 800b814:	697b      	ldr	r3, [r7, #20]
 800b816:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800b81a:	4b14      	ldr	r3, [pc, #80]	@ (800b86c <HAL_GPIO_Init+0x29c>)
 800b81c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b820:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	43db      	mvns	r3, r3
 800b826:	697a      	ldr	r2, [r7, #20]
 800b828:	4013      	ands	r3, r2
 800b82a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	685b      	ldr	r3, [r3, #4]
 800b830:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b834:	2b00      	cmp	r3, #0
 800b836:	d003      	beq.n	800b840 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 800b838:	697a      	ldr	r2, [r7, #20]
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	4313      	orrs	r3, r2
 800b83e:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 800b840:	4a0a      	ldr	r2, [pc, #40]	@ (800b86c <HAL_GPIO_Init+0x29c>)
 800b842:	697b      	ldr	r3, [r7, #20]
 800b844:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 800b848:	693b      	ldr	r3, [r7, #16]
 800b84a:	3301      	adds	r3, #1
 800b84c:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800b84e:	683b      	ldr	r3, [r7, #0]
 800b850:	681a      	ldr	r2, [r3, #0]
 800b852:	693b      	ldr	r3, [r7, #16]
 800b854:	fa22 f303 	lsr.w	r3, r2, r3
 800b858:	2b00      	cmp	r3, #0
 800b85a:	f47f aec1 	bne.w	800b5e0 <HAL_GPIO_Init+0x10>
  }
}
 800b85e:	bf00      	nop
 800b860:	bf00      	nop
 800b862:	371c      	adds	r7, #28
 800b864:	46bd      	mov	sp, r7
 800b866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86a:	4770      	bx	lr
 800b86c:	44022000 	.word	0x44022000
 800b870:	002f7f7f 	.word	0x002f7f7f

0800b874 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b874:	b480      	push	{r7}
 800b876:	b083      	sub	sp, #12
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
 800b87c:	460b      	mov	r3, r1
 800b87e:	807b      	strh	r3, [r7, #2]
 800b880:	4613      	mov	r3, r2
 800b882:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b884:	787b      	ldrb	r3, [r7, #1]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d003      	beq.n	800b892 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800b88a:	887a      	ldrh	r2, [r7, #2]
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800b890:	e002      	b.n	800b898 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800b892:	887a      	ldrh	r2, [r7, #2]
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800b898:	bf00      	nop
 800b89a:	370c      	adds	r7, #12
 800b89c:	46bd      	mov	sp, r7
 800b89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a2:	4770      	bx	lr

0800b8a4 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 800b8a4:	b480      	push	{r7}
 800b8a6:	b085      	sub	sp, #20
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 800b8b0:	4b0b      	ldr	r3, [pc, #44]	@ (800b8e0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	f003 0301 	and.w	r3, r3, #1
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d002      	beq.n	800b8c2 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 800b8bc:	2301      	movs	r3, #1
 800b8be:	73fb      	strb	r3, [r7, #15]
 800b8c0:	e007      	b.n	800b8d2 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800b8c2:	4b07      	ldr	r3, [pc, #28]	@ (800b8e0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	f023 0204 	bic.w	r2, r3, #4
 800b8ca:	4905      	ldr	r1, [pc, #20]	@ (800b8e0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	4313      	orrs	r3, r2
 800b8d0:	600b      	str	r3, [r1, #0]
  }

  return status;
 800b8d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	3714      	adds	r7, #20
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8de:	4770      	bx	lr
 800b8e0:	40030400 	.word	0x40030400

0800b8e4 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 800b8e4:	b480      	push	{r7}
 800b8e6:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 800b8e8:	4b05      	ldr	r3, [pc, #20]	@ (800b900 <HAL_ICACHE_Enable+0x1c>)
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	4a04      	ldr	r2, [pc, #16]	@ (800b900 <HAL_ICACHE_Enable+0x1c>)
 800b8ee:	f043 0301 	orr.w	r3, r3, #1
 800b8f2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800b8f4:	2300      	movs	r3, #0
}
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fe:	4770      	bx	lr
 800b900:	40030400 	.word	0x40030400

0800b904 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b084      	sub	sp, #16
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d101      	bne.n	800b916 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800b912:	2301      	movs	r3, #1
 800b914:	e070      	b.n	800b9f8 <HAL_IWDG_Init+0xf4>

  /* Init the low level hardware */
  hiwdg->MspInitCallback(hiwdg);
#else
  /* Init the low level hardware */
  HAL_IWDG_MspInit(hiwdg);
 800b916:	6878      	ldr	r0, [r7, #4]
 800b918:	f000 f872 	bl	800ba00 <HAL_IWDG_MspInit>
#endif /* USE_HAL_IWDG_REGISTER_CALLBACKS */

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 800b924:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR, IWDG_WINR and EWCR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	f245 5255 	movw	r2, #21845	@ 0x5555
 800b92e:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	687a      	ldr	r2, [r7, #4]
 800b936:	6852      	ldr	r2, [r2, #4]
 800b938:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	687a      	ldr	r2, [r7, #4]
 800b940:	6892      	ldr	r2, [r2, #8]
 800b942:	609a      	str	r2, [r3, #8]

  /* Check Reload update flag, before performing any reload of the counter, else previous value
  will be taken. */
  tickstart = HAL_GetTick();
 800b944:	f7fa f844 	bl	80059d0 <HAL_GetTick>
 800b948:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_SR_RVU) != 0x00u)
 800b94a:	e00f      	b.n	800b96c <HAL_IWDG_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800b94c:	f7fa f840 	bl	80059d0 <HAL_GetTick>
 800b950:	4602      	mov	r2, r0
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	1ad3      	subs	r3, r2, r3
 800b956:	2b21      	cmp	r3, #33	@ 0x21
 800b958:	d908      	bls.n	800b96c <HAL_IWDG_Init+0x68>
    {
      if ((hiwdg->Instance->SR & IWDG_SR_RVU) != 0x00u)
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	68db      	ldr	r3, [r3, #12]
 800b960:	f003 0302 	and.w	r3, r3, #2
 800b964:	2b00      	cmp	r3, #0
 800b966:	d001      	beq.n	800b96c <HAL_IWDG_Init+0x68>
      {
        return HAL_TIMEOUT;
 800b968:	2303      	movs	r3, #3
 800b96a:	e045      	b.n	800b9f8 <HAL_IWDG_Init+0xf4>
  while ((hiwdg->Instance->SR & IWDG_SR_RVU) != 0x00u)
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	68db      	ldr	r3, [r3, #12]
 800b972:	f003 0302 	and.w	r3, r3, #2
 800b976:	2b00      	cmp	r3, #0
 800b978:	d1e8      	bne.n	800b94c <HAL_IWDG_Init+0x48>
      }
    }
  }

  if (hiwdg->Init.EWI == IWDG_EWI_DISABLE)
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	691b      	ldr	r3, [r3, #16]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d105      	bne.n	800b98e <HAL_IWDG_Init+0x8a>
  {
    /* EWI comparator value equal 0, disable the early wakeup interrupt
     * acknowledge the early wakeup interrupt in any cases. it clears the EWIF flag in SR register
     * Set Watchdog Early Wakeup Comparator to 0x00 */
    hiwdg->Instance->EWCR = IWDG_EWCR_EWIC;
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800b98a:	615a      	str	r2, [r3, #20]
 800b98c:	e006      	b.n	800b99c <HAL_IWDG_Init+0x98>
  else
  {
    /* EWI comparator value different from 0, enable the early wakeup interrupt,
     * acknowledge the early wakeup interrupt in any cases. it clears the EWIF flag in SR register
     * Set Watchdog Early Wakeup Comparator value */
    hiwdg->Instance->EWCR = IWDG_EWCR_EWIE | IWDG_EWCR_EWIC | hiwdg->Init.EWI;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	691a      	ldr	r2, [r3, #16]
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 800b99a:	615a      	str	r2, [r3, #20]
  }

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800b99c:	f7fa f818 	bl	80059d0 <HAL_GetTick>
 800b9a0:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800b9a2:	e00f      	b.n	800b9c4 <HAL_IWDG_Init+0xc0>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800b9a4:	f7fa f814 	bl	80059d0 <HAL_GetTick>
 800b9a8:	4602      	mov	r2, r0
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	1ad3      	subs	r3, r2, r3
 800b9ae:	2b21      	cmp	r3, #33	@ 0x21
 800b9b0:	d908      	bls.n	800b9c4 <HAL_IWDG_Init+0xc0>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	68db      	ldr	r3, [r3, #12]
 800b9b8:	f003 030f 	and.w	r3, r3, #15
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d001      	beq.n	800b9c4 <HAL_IWDG_Init+0xc0>
      {
        return HAL_TIMEOUT;
 800b9c0:	2303      	movs	r3, #3
 800b9c2:	e019      	b.n	800b9f8 <HAL_IWDG_Init+0xf4>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	68db      	ldr	r3, [r3, #12]
 800b9ca:	f003 030f 	and.w	r3, r3, #15
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d1e8      	bne.n	800b9a4 <HAL_IWDG_Init+0xa0>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	691a      	ldr	r2, [r3, #16]
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	68db      	ldr	r3, [r3, #12]
 800b9dc:	429a      	cmp	r2, r3
 800b9de:	d005      	beq.n	800b9ec <HAL_IWDG_Init+0xe8>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	687a      	ldr	r2, [r7, #4]
 800b9e6:	68d2      	ldr	r2, [r2, #12]
 800b9e8:	611a      	str	r2, [r3, #16]
 800b9ea:	e004      	b.n	800b9f6 <HAL_IWDG_Init+0xf2>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 800b9f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b9f6:	2300      	movs	r3, #0
}
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	3710      	adds	r7, #16
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	bd80      	pop	{r7, pc}

0800ba00 <HAL_IWDG_MspInit>:
  *         to avoid multiple initialize when HAL_IWDG_Init function is called
  *         again to change parameters.
  * @retval None
  */
__weak void HAL_IWDG_MspInit(IWDG_HandleTypeDef *hiwdg)
{
 800ba00:	b480      	push	{r7}
 800ba02:	b083      	sub	sp, #12
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
  UNUSED(hiwdg);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_IWDG_MspInit could be implemented in the user file
   */
}
 800ba08:	bf00      	nop
 800ba0a:	370c      	adds	r7, #12
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba12:	4770      	bx	lr

0800ba14 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800ba14:	b480      	push	{r7}
 800ba16:	b083      	sub	sp, #12
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 800ba24:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800ba26:	2300      	movs	r3, #0
}
 800ba28:	4618      	mov	r0, r3
 800ba2a:	370c      	adds	r7, #12
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba32:	4770      	bx	lr

0800ba34 <HAL_PWR_EnterSLEEPMode>:
  * @note   When WFI entry is used, ticks interrupt must be disabled to avoid
  *         unexpected CPU wake up.
  * @retval None.
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 800ba34:	b480      	push	{r7}
 800ba36:	b083      	sub	sp, #12
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
 800ba3c:	460b      	mov	r3, r1
 800ba3e:	70fb      	strb	r3, [r7, #3]

  /* Check the parameter */
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800ba40:	4b09      	ldr	r3, [pc, #36]	@ (800ba68 <HAL_PWR_EnterSLEEPMode+0x34>)
 800ba42:	691b      	ldr	r3, [r3, #16]
 800ba44:	4a08      	ldr	r2, [pc, #32]	@ (800ba68 <HAL_PWR_EnterSLEEPMode+0x34>)
 800ba46:	f023 0304 	bic.w	r3, r3, #4
 800ba4a:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry */
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800ba4c:	78fb      	ldrb	r3, [r7, #3]
 800ba4e:	2b01      	cmp	r3, #1
 800ba50:	d101      	bne.n	800ba56 <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Wait For Interrupt Request */
    __WFI();
 800ba52:	bf30      	wfi
    /* Wait For Event Request */
    __SEV();
    __WFE();
    __WFE();
  }
}
 800ba54:	e002      	b.n	800ba5c <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 800ba56:	bf40      	sev
    __WFE();
 800ba58:	bf20      	wfe
    __WFE();
 800ba5a:	bf20      	wfe
}
 800ba5c:	bf00      	nop
 800ba5e:	370c      	adds	r7, #12
 800ba60:	46bd      	mov	sp, r7
 800ba62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba66:	4770      	bx	lr
 800ba68:	e000ed00 	.word	0xe000ed00

0800ba6c <HAL_PWR_EnableSleepOnExit>:
  *         Setting this bit is useful when the processor is expected to run
  *         only on interruptions handling.
  * @retval None.
  */
void HAL_PWR_EnableSleepOnExit(void)
{
 800ba6c:	b480      	push	{r7}
 800ba6e:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex-M33 System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPONEXIT_Msk);
 800ba70:	4b05      	ldr	r3, [pc, #20]	@ (800ba88 <HAL_PWR_EnableSleepOnExit+0x1c>)
 800ba72:	691b      	ldr	r3, [r3, #16]
 800ba74:	4a04      	ldr	r2, [pc, #16]	@ (800ba88 <HAL_PWR_EnableSleepOnExit+0x1c>)
 800ba76:	f043 0302 	orr.w	r3, r3, #2
 800ba7a:	6113      	str	r3, [r2, #16]
}
 800ba7c:	bf00      	nop
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba84:	4770      	bx	lr
 800ba86:	bf00      	nop
 800ba88:	e000ed00 	.word	0xe000ed00

0800ba8c <HAL_PWR_DisableSleepOnExit>:
  * @note   Clears SLEEPONEXIT bit of SCR register. When this bit is set, the
  *         processor re-enters SLEEP mode when an interruption handling is over.
  * @retval None.
  */
void HAL_PWR_DisableSleepOnExit(void)
{
 800ba8c:	b480      	push	{r7}
 800ba8e:	af00      	add	r7, sp, #0
  /* Clear SLEEPONEXIT bit of Cortex-M33 System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPONEXIT_Msk);
 800ba90:	4b05      	ldr	r3, [pc, #20]	@ (800baa8 <HAL_PWR_DisableSleepOnExit+0x1c>)
 800ba92:	691b      	ldr	r3, [r3, #16]
 800ba94:	4a04      	ldr	r2, [pc, #16]	@ (800baa8 <HAL_PWR_DisableSleepOnExit+0x1c>)
 800ba96:	f023 0302 	bic.w	r3, r3, #2
 800ba9a:	6113      	str	r3, [r2, #16]
}
 800ba9c:	bf00      	nop
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa4:	4770      	bx	lr
 800baa6:	bf00      	nop
 800baa8:	e000ed00 	.word	0xe000ed00

0800baac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b088      	sub	sp, #32
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d102      	bne.n	800bac0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800baba:	2301      	movs	r3, #1
 800babc:	f000 bc28 	b.w	800c310 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bac0:	4b94      	ldr	r3, [pc, #592]	@ (800bd14 <HAL_RCC_OscConfig+0x268>)
 800bac2:	69db      	ldr	r3, [r3, #28]
 800bac4:	f003 0318 	and.w	r3, r3, #24
 800bac8:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 800baca:	4b92      	ldr	r3, [pc, #584]	@ (800bd14 <HAL_RCC_OscConfig+0x268>)
 800bacc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bace:	f003 0303 	and.w	r3, r3, #3
 800bad2:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	f003 0310 	and.w	r3, r3, #16
 800badc:	2b00      	cmp	r3, #0
 800bade:	d05b      	beq.n	800bb98 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 800bae0:	69fb      	ldr	r3, [r7, #28]
 800bae2:	2b08      	cmp	r3, #8
 800bae4:	d005      	beq.n	800baf2 <HAL_RCC_OscConfig+0x46>
 800bae6:	69fb      	ldr	r3, [r7, #28]
 800bae8:	2b18      	cmp	r3, #24
 800baea:	d114      	bne.n	800bb16 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 800baec:	69bb      	ldr	r3, [r7, #24]
 800baee:	2b02      	cmp	r3, #2
 800baf0:	d111      	bne.n	800bb16 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	69db      	ldr	r3, [r3, #28]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d102      	bne.n	800bb00 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800bafa:	2301      	movs	r3, #1
 800bafc:	f000 bc08 	b.w	800c310 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 800bb00:	4b84      	ldr	r3, [pc, #528]	@ (800bd14 <HAL_RCC_OscConfig+0x268>)
 800bb02:	699b      	ldr	r3, [r3, #24]
 800bb04:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	6a1b      	ldr	r3, [r3, #32]
 800bb0c:	041b      	lsls	r3, r3, #16
 800bb0e:	4981      	ldr	r1, [pc, #516]	@ (800bd14 <HAL_RCC_OscConfig+0x268>)
 800bb10:	4313      	orrs	r3, r2
 800bb12:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800bb14:	e040      	b.n	800bb98 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	69db      	ldr	r3, [r3, #28]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d023      	beq.n	800bb66 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800bb1e:	4b7d      	ldr	r3, [pc, #500]	@ (800bd14 <HAL_RCC_OscConfig+0x268>)
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	4a7c      	ldr	r2, [pc, #496]	@ (800bd14 <HAL_RCC_OscConfig+0x268>)
 800bb24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bb28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb2a:	f7f9 ff51 	bl	80059d0 <HAL_GetTick>
 800bb2e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800bb30:	e008      	b.n	800bb44 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800bb32:	f7f9 ff4d 	bl	80059d0 <HAL_GetTick>
 800bb36:	4602      	mov	r2, r0
 800bb38:	697b      	ldr	r3, [r7, #20]
 800bb3a:	1ad3      	subs	r3, r2, r3
 800bb3c:	2b02      	cmp	r3, #2
 800bb3e:	d901      	bls.n	800bb44 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 800bb40:	2303      	movs	r3, #3
 800bb42:	e3e5      	b.n	800c310 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800bb44:	4b73      	ldr	r3, [pc, #460]	@ (800bd14 <HAL_RCC_OscConfig+0x268>)
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d0f0      	beq.n	800bb32 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 800bb50:	4b70      	ldr	r3, [pc, #448]	@ (800bd14 <HAL_RCC_OscConfig+0x268>)
 800bb52:	699b      	ldr	r3, [r3, #24]
 800bb54:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	6a1b      	ldr	r3, [r3, #32]
 800bb5c:	041b      	lsls	r3, r3, #16
 800bb5e:	496d      	ldr	r1, [pc, #436]	@ (800bd14 <HAL_RCC_OscConfig+0x268>)
 800bb60:	4313      	orrs	r3, r2
 800bb62:	618b      	str	r3, [r1, #24]
 800bb64:	e018      	b.n	800bb98 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800bb66:	4b6b      	ldr	r3, [pc, #428]	@ (800bd14 <HAL_RCC_OscConfig+0x268>)
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	4a6a      	ldr	r2, [pc, #424]	@ (800bd14 <HAL_RCC_OscConfig+0x268>)
 800bb6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bb70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb72:	f7f9 ff2d 	bl	80059d0 <HAL_GetTick>
 800bb76:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 800bb78:	e008      	b.n	800bb8c <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800bb7a:	f7f9 ff29 	bl	80059d0 <HAL_GetTick>
 800bb7e:	4602      	mov	r2, r0
 800bb80:	697b      	ldr	r3, [r7, #20]
 800bb82:	1ad3      	subs	r3, r2, r3
 800bb84:	2b02      	cmp	r3, #2
 800bb86:	d901      	bls.n	800bb8c <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 800bb88:	2303      	movs	r3, #3
 800bb8a:	e3c1      	b.n	800c310 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 800bb8c:	4b61      	ldr	r3, [pc, #388]	@ (800bd14 <HAL_RCC_OscConfig+0x268>)
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d1f0      	bne.n	800bb7a <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	f003 0301 	and.w	r3, r3, #1
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	f000 80a0 	beq.w	800bce6 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800bba6:	69fb      	ldr	r3, [r7, #28]
 800bba8:	2b10      	cmp	r3, #16
 800bbaa:	d005      	beq.n	800bbb8 <HAL_RCC_OscConfig+0x10c>
 800bbac:	69fb      	ldr	r3, [r7, #28]
 800bbae:	2b18      	cmp	r3, #24
 800bbb0:	d109      	bne.n	800bbc6 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 800bbb2:	69bb      	ldr	r3, [r7, #24]
 800bbb4:	2b03      	cmp	r3, #3
 800bbb6:	d106      	bne.n	800bbc6 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	685b      	ldr	r3, [r3, #4]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	f040 8092 	bne.w	800bce6 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 800bbc2:	2301      	movs	r3, #1
 800bbc4:	e3a4      	b.n	800c310 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	685b      	ldr	r3, [r3, #4]
 800bbca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bbce:	d106      	bne.n	800bbde <HAL_RCC_OscConfig+0x132>
 800bbd0:	4b50      	ldr	r3, [pc, #320]	@ (800bd14 <HAL_RCC_OscConfig+0x268>)
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	4a4f      	ldr	r2, [pc, #316]	@ (800bd14 <HAL_RCC_OscConfig+0x268>)
 800bbd6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bbda:	6013      	str	r3, [r2, #0]
 800bbdc:	e058      	b.n	800bc90 <HAL_RCC_OscConfig+0x1e4>
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	685b      	ldr	r3, [r3, #4]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d112      	bne.n	800bc0c <HAL_RCC_OscConfig+0x160>
 800bbe6:	4b4b      	ldr	r3, [pc, #300]	@ (800bd14 <HAL_RCC_OscConfig+0x268>)
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	4a4a      	ldr	r2, [pc, #296]	@ (800bd14 <HAL_RCC_OscConfig+0x268>)
 800bbec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bbf0:	6013      	str	r3, [r2, #0]
 800bbf2:	4b48      	ldr	r3, [pc, #288]	@ (800bd14 <HAL_RCC_OscConfig+0x268>)
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	4a47      	ldr	r2, [pc, #284]	@ (800bd14 <HAL_RCC_OscConfig+0x268>)
 800bbf8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800bbfc:	6013      	str	r3, [r2, #0]
 800bbfe:	4b45      	ldr	r3, [pc, #276]	@ (800bd14 <HAL_RCC_OscConfig+0x268>)
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	4a44      	ldr	r2, [pc, #272]	@ (800bd14 <HAL_RCC_OscConfig+0x268>)
 800bc04:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bc08:	6013      	str	r3, [r2, #0]
 800bc0a:	e041      	b.n	800bc90 <HAL_RCC_OscConfig+0x1e4>
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	685b      	ldr	r3, [r3, #4]
 800bc10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800bc14:	d112      	bne.n	800bc3c <HAL_RCC_OscConfig+0x190>
 800bc16:	4b3f      	ldr	r3, [pc, #252]	@ (800bd14 <HAL_RCC_OscConfig+0x268>)
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	4a3e      	ldr	r2, [pc, #248]	@ (800bd14 <HAL_RCC_OscConfig+0x268>)
 800bc1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800bc20:	6013      	str	r3, [r2, #0]
 800bc22:	4b3c      	ldr	r3, [pc, #240]	@ (800bd14 <HAL_RCC_OscConfig+0x268>)
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	4a3b      	ldr	r2, [pc, #236]	@ (800bd14 <HAL_RCC_OscConfig+0x268>)
 800bc28:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800bc2c:	6013      	str	r3, [r2, #0]
 800bc2e:	4b39      	ldr	r3, [pc, #228]	@ (800bd14 <HAL_RCC_OscConfig+0x268>)
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	4a38      	ldr	r2, [pc, #224]	@ (800bd14 <HAL_RCC_OscConfig+0x268>)
 800bc34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bc38:	6013      	str	r3, [r2, #0]
 800bc3a:	e029      	b.n	800bc90 <HAL_RCC_OscConfig+0x1e4>
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	685b      	ldr	r3, [r3, #4]
 800bc40:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800bc44:	d112      	bne.n	800bc6c <HAL_RCC_OscConfig+0x1c0>
 800bc46:	4b33      	ldr	r3, [pc, #204]	@ (800bd14 <HAL_RCC_OscConfig+0x268>)
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	4a32      	ldr	r2, [pc, #200]	@ (800bd14 <HAL_RCC_OscConfig+0x268>)
 800bc4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800bc50:	6013      	str	r3, [r2, #0]
 800bc52:	4b30      	ldr	r3, [pc, #192]	@ (800bd14 <HAL_RCC_OscConfig+0x268>)
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	4a2f      	ldr	r2, [pc, #188]	@ (800bd14 <HAL_RCC_OscConfig+0x268>)
 800bc58:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bc5c:	6013      	str	r3, [r2, #0]
 800bc5e:	4b2d      	ldr	r3, [pc, #180]	@ (800bd14 <HAL_RCC_OscConfig+0x268>)
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	4a2c      	ldr	r2, [pc, #176]	@ (800bd14 <HAL_RCC_OscConfig+0x268>)
 800bc64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bc68:	6013      	str	r3, [r2, #0]
 800bc6a:	e011      	b.n	800bc90 <HAL_RCC_OscConfig+0x1e4>
 800bc6c:	4b29      	ldr	r3, [pc, #164]	@ (800bd14 <HAL_RCC_OscConfig+0x268>)
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	4a28      	ldr	r2, [pc, #160]	@ (800bd14 <HAL_RCC_OscConfig+0x268>)
 800bc72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bc76:	6013      	str	r3, [r2, #0]
 800bc78:	4b26      	ldr	r3, [pc, #152]	@ (800bd14 <HAL_RCC_OscConfig+0x268>)
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	4a25      	ldr	r2, [pc, #148]	@ (800bd14 <HAL_RCC_OscConfig+0x268>)
 800bc7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bc82:	6013      	str	r3, [r2, #0]
 800bc84:	4b23      	ldr	r3, [pc, #140]	@ (800bd14 <HAL_RCC_OscConfig+0x268>)
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	4a22      	ldr	r2, [pc, #136]	@ (800bd14 <HAL_RCC_OscConfig+0x268>)
 800bc8a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800bc8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	685b      	ldr	r3, [r3, #4]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d013      	beq.n	800bcc0 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bc98:	f7f9 fe9a 	bl	80059d0 <HAL_GetTick>
 800bc9c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800bc9e:	e008      	b.n	800bcb2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800bca0:	f7f9 fe96 	bl	80059d0 <HAL_GetTick>
 800bca4:	4602      	mov	r2, r0
 800bca6:	697b      	ldr	r3, [r7, #20]
 800bca8:	1ad3      	subs	r3, r2, r3
 800bcaa:	2b64      	cmp	r3, #100	@ 0x64
 800bcac:	d901      	bls.n	800bcb2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800bcae:	2303      	movs	r3, #3
 800bcb0:	e32e      	b.n	800c310 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800bcb2:	4b18      	ldr	r3, [pc, #96]	@ (800bd14 <HAL_RCC_OscConfig+0x268>)
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d0f0      	beq.n	800bca0 <HAL_RCC_OscConfig+0x1f4>
 800bcbe:	e012      	b.n	800bce6 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bcc0:	f7f9 fe86 	bl	80059d0 <HAL_GetTick>
 800bcc4:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800bcc6:	e008      	b.n	800bcda <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800bcc8:	f7f9 fe82 	bl	80059d0 <HAL_GetTick>
 800bccc:	4602      	mov	r2, r0
 800bcce:	697b      	ldr	r3, [r7, #20]
 800bcd0:	1ad3      	subs	r3, r2, r3
 800bcd2:	2b64      	cmp	r3, #100	@ 0x64
 800bcd4:	d901      	bls.n	800bcda <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 800bcd6:	2303      	movs	r3, #3
 800bcd8:	e31a      	b.n	800c310 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800bcda:	4b0e      	ldr	r3, [pc, #56]	@ (800bd14 <HAL_RCC_OscConfig+0x268>)
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d1f0      	bne.n	800bcc8 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	f003 0302 	and.w	r3, r3, #2
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	f000 809a 	beq.w	800be28 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800bcf4:	69fb      	ldr	r3, [r7, #28]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d005      	beq.n	800bd06 <HAL_RCC_OscConfig+0x25a>
 800bcfa:	69fb      	ldr	r3, [r7, #28]
 800bcfc:	2b18      	cmp	r3, #24
 800bcfe:	d149      	bne.n	800bd94 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 800bd00:	69bb      	ldr	r3, [r7, #24]
 800bd02:	2b01      	cmp	r3, #1
 800bd04:	d146      	bne.n	800bd94 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	68db      	ldr	r3, [r3, #12]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d104      	bne.n	800bd18 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 800bd0e:	2301      	movs	r3, #1
 800bd10:	e2fe      	b.n	800c310 <HAL_RCC_OscConfig+0x864>
 800bd12:	bf00      	nop
 800bd14:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800bd18:	69fb      	ldr	r3, [r7, #28]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d11c      	bne.n	800bd58 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 800bd1e:	4b9a      	ldr	r3, [pc, #616]	@ (800bf88 <HAL_RCC_OscConfig+0x4dc>)
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	f003 0218 	and.w	r2, r3, #24
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	691b      	ldr	r3, [r3, #16]
 800bd2a:	429a      	cmp	r2, r3
 800bd2c:	d014      	beq.n	800bd58 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 800bd2e:	4b96      	ldr	r3, [pc, #600]	@ (800bf88 <HAL_RCC_OscConfig+0x4dc>)
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	f023 0218 	bic.w	r2, r3, #24
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	691b      	ldr	r3, [r3, #16]
 800bd3a:	4993      	ldr	r1, [pc, #588]	@ (800bf88 <HAL_RCC_OscConfig+0x4dc>)
 800bd3c:	4313      	orrs	r3, r2
 800bd3e:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 800bd40:	f000 fdd0 	bl	800c8e4 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800bd44:	4b91      	ldr	r3, [pc, #580]	@ (800bf8c <HAL_RCC_OscConfig+0x4e0>)
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	4618      	mov	r0, r3
 800bd4a:	f7f9 fdb7 	bl	80058bc <HAL_InitTick>
 800bd4e:	4603      	mov	r3, r0
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d001      	beq.n	800bd58 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 800bd54:	2301      	movs	r3, #1
 800bd56:	e2db      	b.n	800c310 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd58:	f7f9 fe3a 	bl	80059d0 <HAL_GetTick>
 800bd5c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800bd5e:	e008      	b.n	800bd72 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800bd60:	f7f9 fe36 	bl	80059d0 <HAL_GetTick>
 800bd64:	4602      	mov	r2, r0
 800bd66:	697b      	ldr	r3, [r7, #20]
 800bd68:	1ad3      	subs	r3, r2, r3
 800bd6a:	2b02      	cmp	r3, #2
 800bd6c:	d901      	bls.n	800bd72 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800bd6e:	2303      	movs	r3, #3
 800bd70:	e2ce      	b.n	800c310 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800bd72:	4b85      	ldr	r3, [pc, #532]	@ (800bf88 <HAL_RCC_OscConfig+0x4dc>)
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	f003 0302 	and.w	r3, r3, #2
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d0f0      	beq.n	800bd60 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800bd7e:	4b82      	ldr	r3, [pc, #520]	@ (800bf88 <HAL_RCC_OscConfig+0x4dc>)
 800bd80:	691b      	ldr	r3, [r3, #16]
 800bd82:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	695b      	ldr	r3, [r3, #20]
 800bd8a:	041b      	lsls	r3, r3, #16
 800bd8c:	497e      	ldr	r1, [pc, #504]	@ (800bf88 <HAL_RCC_OscConfig+0x4dc>)
 800bd8e:	4313      	orrs	r3, r2
 800bd90:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800bd92:	e049      	b.n	800be28 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	68db      	ldr	r3, [r3, #12]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d02c      	beq.n	800bdf6 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 800bd9c:	4b7a      	ldr	r3, [pc, #488]	@ (800bf88 <HAL_RCC_OscConfig+0x4dc>)
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	f023 0218 	bic.w	r2, r3, #24
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	691b      	ldr	r3, [r3, #16]
 800bda8:	4977      	ldr	r1, [pc, #476]	@ (800bf88 <HAL_RCC_OscConfig+0x4dc>)
 800bdaa:	4313      	orrs	r3, r2
 800bdac:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 800bdae:	4b76      	ldr	r3, [pc, #472]	@ (800bf88 <HAL_RCC_OscConfig+0x4dc>)
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	4a75      	ldr	r2, [pc, #468]	@ (800bf88 <HAL_RCC_OscConfig+0x4dc>)
 800bdb4:	f043 0301 	orr.w	r3, r3, #1
 800bdb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bdba:	f7f9 fe09 	bl	80059d0 <HAL_GetTick>
 800bdbe:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800bdc0:	e008      	b.n	800bdd4 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800bdc2:	f7f9 fe05 	bl	80059d0 <HAL_GetTick>
 800bdc6:	4602      	mov	r2, r0
 800bdc8:	697b      	ldr	r3, [r7, #20]
 800bdca:	1ad3      	subs	r3, r2, r3
 800bdcc:	2b02      	cmp	r3, #2
 800bdce:	d901      	bls.n	800bdd4 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 800bdd0:	2303      	movs	r3, #3
 800bdd2:	e29d      	b.n	800c310 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800bdd4:	4b6c      	ldr	r3, [pc, #432]	@ (800bf88 <HAL_RCC_OscConfig+0x4dc>)
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	f003 0302 	and.w	r3, r3, #2
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d0f0      	beq.n	800bdc2 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800bde0:	4b69      	ldr	r3, [pc, #420]	@ (800bf88 <HAL_RCC_OscConfig+0x4dc>)
 800bde2:	691b      	ldr	r3, [r3, #16]
 800bde4:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	695b      	ldr	r3, [r3, #20]
 800bdec:	041b      	lsls	r3, r3, #16
 800bdee:	4966      	ldr	r1, [pc, #408]	@ (800bf88 <HAL_RCC_OscConfig+0x4dc>)
 800bdf0:	4313      	orrs	r3, r2
 800bdf2:	610b      	str	r3, [r1, #16]
 800bdf4:	e018      	b.n	800be28 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bdf6:	4b64      	ldr	r3, [pc, #400]	@ (800bf88 <HAL_RCC_OscConfig+0x4dc>)
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	4a63      	ldr	r2, [pc, #396]	@ (800bf88 <HAL_RCC_OscConfig+0x4dc>)
 800bdfc:	f023 0301 	bic.w	r3, r3, #1
 800be00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800be02:	f7f9 fde5 	bl	80059d0 <HAL_GetTick>
 800be06:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800be08:	e008      	b.n	800be1c <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800be0a:	f7f9 fde1 	bl	80059d0 <HAL_GetTick>
 800be0e:	4602      	mov	r2, r0
 800be10:	697b      	ldr	r3, [r7, #20]
 800be12:	1ad3      	subs	r3, r2, r3
 800be14:	2b02      	cmp	r3, #2
 800be16:	d901      	bls.n	800be1c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 800be18:	2303      	movs	r3, #3
 800be1a:	e279      	b.n	800c310 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800be1c:	4b5a      	ldr	r3, [pc, #360]	@ (800bf88 <HAL_RCC_OscConfig+0x4dc>)
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	f003 0302 	and.w	r3, r3, #2
 800be24:	2b00      	cmp	r3, #0
 800be26:	d1f0      	bne.n	800be0a <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	f003 0308 	and.w	r3, r3, #8
 800be30:	2b00      	cmp	r3, #0
 800be32:	d03c      	beq.n	800beae <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	699b      	ldr	r3, [r3, #24]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d01c      	beq.n	800be76 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800be3c:	4b52      	ldr	r3, [pc, #328]	@ (800bf88 <HAL_RCC_OscConfig+0x4dc>)
 800be3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800be42:	4a51      	ldr	r2, [pc, #324]	@ (800bf88 <HAL_RCC_OscConfig+0x4dc>)
 800be44:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800be48:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800be4c:	f7f9 fdc0 	bl	80059d0 <HAL_GetTick>
 800be50:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800be52:	e008      	b.n	800be66 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800be54:	f7f9 fdbc 	bl	80059d0 <HAL_GetTick>
 800be58:	4602      	mov	r2, r0
 800be5a:	697b      	ldr	r3, [r7, #20]
 800be5c:	1ad3      	subs	r3, r2, r3
 800be5e:	2b02      	cmp	r3, #2
 800be60:	d901      	bls.n	800be66 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 800be62:	2303      	movs	r3, #3
 800be64:	e254      	b.n	800c310 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800be66:	4b48      	ldr	r3, [pc, #288]	@ (800bf88 <HAL_RCC_OscConfig+0x4dc>)
 800be68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800be6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800be70:	2b00      	cmp	r3, #0
 800be72:	d0ef      	beq.n	800be54 <HAL_RCC_OscConfig+0x3a8>
 800be74:	e01b      	b.n	800beae <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800be76:	4b44      	ldr	r3, [pc, #272]	@ (800bf88 <HAL_RCC_OscConfig+0x4dc>)
 800be78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800be7c:	4a42      	ldr	r2, [pc, #264]	@ (800bf88 <HAL_RCC_OscConfig+0x4dc>)
 800be7e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800be82:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800be86:	f7f9 fda3 	bl	80059d0 <HAL_GetTick>
 800be8a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800be8c:	e008      	b.n	800bea0 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800be8e:	f7f9 fd9f 	bl	80059d0 <HAL_GetTick>
 800be92:	4602      	mov	r2, r0
 800be94:	697b      	ldr	r3, [r7, #20]
 800be96:	1ad3      	subs	r3, r2, r3
 800be98:	2b02      	cmp	r3, #2
 800be9a:	d901      	bls.n	800bea0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800be9c:	2303      	movs	r3, #3
 800be9e:	e237      	b.n	800c310 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800bea0:	4b39      	ldr	r3, [pc, #228]	@ (800bf88 <HAL_RCC_OscConfig+0x4dc>)
 800bea2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bea6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d1ef      	bne.n	800be8e <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	f003 0304 	and.w	r3, r3, #4
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	f000 80d2 	beq.w	800c060 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800bebc:	4b34      	ldr	r3, [pc, #208]	@ (800bf90 <HAL_RCC_OscConfig+0x4e4>)
 800bebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bec0:	f003 0301 	and.w	r3, r3, #1
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d118      	bne.n	800befa <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 800bec8:	4b31      	ldr	r3, [pc, #196]	@ (800bf90 <HAL_RCC_OscConfig+0x4e4>)
 800beca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800becc:	4a30      	ldr	r2, [pc, #192]	@ (800bf90 <HAL_RCC_OscConfig+0x4e4>)
 800bece:	f043 0301 	orr.w	r3, r3, #1
 800bed2:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800bed4:	f7f9 fd7c 	bl	80059d0 <HAL_GetTick>
 800bed8:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800beda:	e008      	b.n	800beee <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bedc:	f7f9 fd78 	bl	80059d0 <HAL_GetTick>
 800bee0:	4602      	mov	r2, r0
 800bee2:	697b      	ldr	r3, [r7, #20]
 800bee4:	1ad3      	subs	r3, r2, r3
 800bee6:	2b02      	cmp	r3, #2
 800bee8:	d901      	bls.n	800beee <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 800beea:	2303      	movs	r3, #3
 800beec:	e210      	b.n	800c310 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800beee:	4b28      	ldr	r3, [pc, #160]	@ (800bf90 <HAL_RCC_OscConfig+0x4e4>)
 800bef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bef2:	f003 0301 	and.w	r3, r3, #1
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d0f0      	beq.n	800bedc <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	689b      	ldr	r3, [r3, #8]
 800befe:	2b01      	cmp	r3, #1
 800bf00:	d108      	bne.n	800bf14 <HAL_RCC_OscConfig+0x468>
 800bf02:	4b21      	ldr	r3, [pc, #132]	@ (800bf88 <HAL_RCC_OscConfig+0x4dc>)
 800bf04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bf08:	4a1f      	ldr	r2, [pc, #124]	@ (800bf88 <HAL_RCC_OscConfig+0x4dc>)
 800bf0a:	f043 0301 	orr.w	r3, r3, #1
 800bf0e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800bf12:	e074      	b.n	800bffe <HAL_RCC_OscConfig+0x552>
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	689b      	ldr	r3, [r3, #8]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d118      	bne.n	800bf4e <HAL_RCC_OscConfig+0x4a2>
 800bf1c:	4b1a      	ldr	r3, [pc, #104]	@ (800bf88 <HAL_RCC_OscConfig+0x4dc>)
 800bf1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bf22:	4a19      	ldr	r2, [pc, #100]	@ (800bf88 <HAL_RCC_OscConfig+0x4dc>)
 800bf24:	f023 0301 	bic.w	r3, r3, #1
 800bf28:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800bf2c:	4b16      	ldr	r3, [pc, #88]	@ (800bf88 <HAL_RCC_OscConfig+0x4dc>)
 800bf2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bf32:	4a15      	ldr	r2, [pc, #84]	@ (800bf88 <HAL_RCC_OscConfig+0x4dc>)
 800bf34:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bf38:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800bf3c:	4b12      	ldr	r3, [pc, #72]	@ (800bf88 <HAL_RCC_OscConfig+0x4dc>)
 800bf3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bf42:	4a11      	ldr	r2, [pc, #68]	@ (800bf88 <HAL_RCC_OscConfig+0x4dc>)
 800bf44:	f023 0304 	bic.w	r3, r3, #4
 800bf48:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800bf4c:	e057      	b.n	800bffe <HAL_RCC_OscConfig+0x552>
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	689b      	ldr	r3, [r3, #8]
 800bf52:	2b05      	cmp	r3, #5
 800bf54:	d11e      	bne.n	800bf94 <HAL_RCC_OscConfig+0x4e8>
 800bf56:	4b0c      	ldr	r3, [pc, #48]	@ (800bf88 <HAL_RCC_OscConfig+0x4dc>)
 800bf58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bf5c:	4a0a      	ldr	r2, [pc, #40]	@ (800bf88 <HAL_RCC_OscConfig+0x4dc>)
 800bf5e:	f043 0304 	orr.w	r3, r3, #4
 800bf62:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800bf66:	4b08      	ldr	r3, [pc, #32]	@ (800bf88 <HAL_RCC_OscConfig+0x4dc>)
 800bf68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bf6c:	4a06      	ldr	r2, [pc, #24]	@ (800bf88 <HAL_RCC_OscConfig+0x4dc>)
 800bf6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bf72:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800bf76:	4b04      	ldr	r3, [pc, #16]	@ (800bf88 <HAL_RCC_OscConfig+0x4dc>)
 800bf78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bf7c:	4a02      	ldr	r2, [pc, #8]	@ (800bf88 <HAL_RCC_OscConfig+0x4dc>)
 800bf7e:	f043 0301 	orr.w	r3, r3, #1
 800bf82:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800bf86:	e03a      	b.n	800bffe <HAL_RCC_OscConfig+0x552>
 800bf88:	44020c00 	.word	0x44020c00
 800bf8c:	20000078 	.word	0x20000078
 800bf90:	44020800 	.word	0x44020800
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	689b      	ldr	r3, [r3, #8]
 800bf98:	2b85      	cmp	r3, #133	@ 0x85
 800bf9a:	d118      	bne.n	800bfce <HAL_RCC_OscConfig+0x522>
 800bf9c:	4ba2      	ldr	r3, [pc, #648]	@ (800c228 <HAL_RCC_OscConfig+0x77c>)
 800bf9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bfa2:	4aa1      	ldr	r2, [pc, #644]	@ (800c228 <HAL_RCC_OscConfig+0x77c>)
 800bfa4:	f043 0304 	orr.w	r3, r3, #4
 800bfa8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800bfac:	4b9e      	ldr	r3, [pc, #632]	@ (800c228 <HAL_RCC_OscConfig+0x77c>)
 800bfae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bfb2:	4a9d      	ldr	r2, [pc, #628]	@ (800c228 <HAL_RCC_OscConfig+0x77c>)
 800bfb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bfb8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800bfbc:	4b9a      	ldr	r3, [pc, #616]	@ (800c228 <HAL_RCC_OscConfig+0x77c>)
 800bfbe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bfc2:	4a99      	ldr	r2, [pc, #612]	@ (800c228 <HAL_RCC_OscConfig+0x77c>)
 800bfc4:	f043 0301 	orr.w	r3, r3, #1
 800bfc8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800bfcc:	e017      	b.n	800bffe <HAL_RCC_OscConfig+0x552>
 800bfce:	4b96      	ldr	r3, [pc, #600]	@ (800c228 <HAL_RCC_OscConfig+0x77c>)
 800bfd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bfd4:	4a94      	ldr	r2, [pc, #592]	@ (800c228 <HAL_RCC_OscConfig+0x77c>)
 800bfd6:	f023 0301 	bic.w	r3, r3, #1
 800bfda:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800bfde:	4b92      	ldr	r3, [pc, #584]	@ (800c228 <HAL_RCC_OscConfig+0x77c>)
 800bfe0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bfe4:	4a90      	ldr	r2, [pc, #576]	@ (800c228 <HAL_RCC_OscConfig+0x77c>)
 800bfe6:	f023 0304 	bic.w	r3, r3, #4
 800bfea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800bfee:	4b8e      	ldr	r3, [pc, #568]	@ (800c228 <HAL_RCC_OscConfig+0x77c>)
 800bff0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bff4:	4a8c      	ldr	r2, [pc, #560]	@ (800c228 <HAL_RCC_OscConfig+0x77c>)
 800bff6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bffa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	689b      	ldr	r3, [r3, #8]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d016      	beq.n	800c034 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c006:	f7f9 fce3 	bl	80059d0 <HAL_GetTick>
 800c00a:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c00c:	e00a      	b.n	800c024 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c00e:	f7f9 fcdf 	bl	80059d0 <HAL_GetTick>
 800c012:	4602      	mov	r2, r0
 800c014:	697b      	ldr	r3, [r7, #20]
 800c016:	1ad3      	subs	r3, r2, r3
 800c018:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c01c:	4293      	cmp	r3, r2
 800c01e:	d901      	bls.n	800c024 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 800c020:	2303      	movs	r3, #3
 800c022:	e175      	b.n	800c310 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c024:	4b80      	ldr	r3, [pc, #512]	@ (800c228 <HAL_RCC_OscConfig+0x77c>)
 800c026:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c02a:	f003 0302 	and.w	r3, r3, #2
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d0ed      	beq.n	800c00e <HAL_RCC_OscConfig+0x562>
 800c032:	e015      	b.n	800c060 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c034:	f7f9 fccc 	bl	80059d0 <HAL_GetTick>
 800c038:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c03a:	e00a      	b.n	800c052 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c03c:	f7f9 fcc8 	bl	80059d0 <HAL_GetTick>
 800c040:	4602      	mov	r2, r0
 800c042:	697b      	ldr	r3, [r7, #20]
 800c044:	1ad3      	subs	r3, r2, r3
 800c046:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c04a:	4293      	cmp	r3, r2
 800c04c:	d901      	bls.n	800c052 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 800c04e:	2303      	movs	r3, #3
 800c050:	e15e      	b.n	800c310 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c052:	4b75      	ldr	r3, [pc, #468]	@ (800c228 <HAL_RCC_OscConfig+0x77c>)
 800c054:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c058:	f003 0302 	and.w	r3, r3, #2
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d1ed      	bne.n	800c03c <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	f003 0320 	and.w	r3, r3, #32
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d036      	beq.n	800c0da <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c070:	2b00      	cmp	r3, #0
 800c072:	d019      	beq.n	800c0a8 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800c074:	4b6c      	ldr	r3, [pc, #432]	@ (800c228 <HAL_RCC_OscConfig+0x77c>)
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	4a6b      	ldr	r2, [pc, #428]	@ (800c228 <HAL_RCC_OscConfig+0x77c>)
 800c07a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800c07e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c080:	f7f9 fca6 	bl	80059d0 <HAL_GetTick>
 800c084:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800c086:	e008      	b.n	800c09a <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 800c088:	f7f9 fca2 	bl	80059d0 <HAL_GetTick>
 800c08c:	4602      	mov	r2, r0
 800c08e:	697b      	ldr	r3, [r7, #20]
 800c090:	1ad3      	subs	r3, r2, r3
 800c092:	2b02      	cmp	r3, #2
 800c094:	d901      	bls.n	800c09a <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 800c096:	2303      	movs	r3, #3
 800c098:	e13a      	b.n	800c310 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800c09a:	4b63      	ldr	r3, [pc, #396]	@ (800c228 <HAL_RCC_OscConfig+0x77c>)
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d0f0      	beq.n	800c088 <HAL_RCC_OscConfig+0x5dc>
 800c0a6:	e018      	b.n	800c0da <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800c0a8:	4b5f      	ldr	r3, [pc, #380]	@ (800c228 <HAL_RCC_OscConfig+0x77c>)
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	4a5e      	ldr	r2, [pc, #376]	@ (800c228 <HAL_RCC_OscConfig+0x77c>)
 800c0ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c0b2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c0b4:	f7f9 fc8c 	bl	80059d0 <HAL_GetTick>
 800c0b8:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800c0ba:	e008      	b.n	800c0ce <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 800c0bc:	f7f9 fc88 	bl	80059d0 <HAL_GetTick>
 800c0c0:	4602      	mov	r2, r0
 800c0c2:	697b      	ldr	r3, [r7, #20]
 800c0c4:	1ad3      	subs	r3, r2, r3
 800c0c6:	2b02      	cmp	r3, #2
 800c0c8:	d901      	bls.n	800c0ce <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 800c0ca:	2303      	movs	r3, #3
 800c0cc:	e120      	b.n	800c310 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800c0ce:	4b56      	ldr	r3, [pc, #344]	@ (800c228 <HAL_RCC_OscConfig+0x77c>)
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d1f0      	bne.n	800c0bc <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	f000 8115 	beq.w	800c30e <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c0e4:	69fb      	ldr	r3, [r7, #28]
 800c0e6:	2b18      	cmp	r3, #24
 800c0e8:	f000 80af 	beq.w	800c24a <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0f0:	2b02      	cmp	r3, #2
 800c0f2:	f040 8086 	bne.w	800c202 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800c0f6:	4b4c      	ldr	r3, [pc, #304]	@ (800c228 <HAL_RCC_OscConfig+0x77c>)
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	4a4b      	ldr	r2, [pc, #300]	@ (800c228 <HAL_RCC_OscConfig+0x77c>)
 800c0fc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c100:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c102:	f7f9 fc65 	bl	80059d0 <HAL_GetTick>
 800c106:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800c108:	e008      	b.n	800c11c <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800c10a:	f7f9 fc61 	bl	80059d0 <HAL_GetTick>
 800c10e:	4602      	mov	r2, r0
 800c110:	697b      	ldr	r3, [r7, #20]
 800c112:	1ad3      	subs	r3, r2, r3
 800c114:	2b02      	cmp	r3, #2
 800c116:	d901      	bls.n	800c11c <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 800c118:	2303      	movs	r3, #3
 800c11a:	e0f9      	b.n	800c310 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800c11c:	4b42      	ldr	r3, [pc, #264]	@ (800c228 <HAL_RCC_OscConfig+0x77c>)
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c124:	2b00      	cmp	r3, #0
 800c126:	d1f0      	bne.n	800c10a <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 800c128:	4b3f      	ldr	r3, [pc, #252]	@ (800c228 <HAL_RCC_OscConfig+0x77c>)
 800c12a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c12c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800c130:	f023 0303 	bic.w	r3, r3, #3
 800c134:	687a      	ldr	r2, [r7, #4]
 800c136:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800c138:	687a      	ldr	r2, [r7, #4]
 800c13a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800c13c:	0212      	lsls	r2, r2, #8
 800c13e:	430a      	orrs	r2, r1
 800c140:	4939      	ldr	r1, [pc, #228]	@ (800c228 <HAL_RCC_OscConfig+0x77c>)
 800c142:	4313      	orrs	r3, r2
 800c144:	628b      	str	r3, [r1, #40]	@ 0x28
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c14a:	3b01      	subs	r3, #1
 800c14c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c154:	3b01      	subs	r3, #1
 800c156:	025b      	lsls	r3, r3, #9
 800c158:	b29b      	uxth	r3, r3
 800c15a:	431a      	orrs	r2, r3
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c160:	3b01      	subs	r3, #1
 800c162:	041b      	lsls	r3, r3, #16
 800c164:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c168:	431a      	orrs	r2, r3
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c16e:	3b01      	subs	r3, #1
 800c170:	061b      	lsls	r3, r3, #24
 800c172:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c176:	492c      	ldr	r1, [pc, #176]	@ (800c228 <HAL_RCC_OscConfig+0x77c>)
 800c178:	4313      	orrs	r3, r2
 800c17a:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 800c17c:	4b2a      	ldr	r3, [pc, #168]	@ (800c228 <HAL_RCC_OscConfig+0x77c>)
 800c17e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c180:	4a29      	ldr	r2, [pc, #164]	@ (800c228 <HAL_RCC_OscConfig+0x77c>)
 800c182:	f023 0310 	bic.w	r3, r3, #16
 800c186:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c18c:	4a26      	ldr	r2, [pc, #152]	@ (800c228 <HAL_RCC_OscConfig+0x77c>)
 800c18e:	00db      	lsls	r3, r3, #3
 800c190:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800c192:	4b25      	ldr	r3, [pc, #148]	@ (800c228 <HAL_RCC_OscConfig+0x77c>)
 800c194:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c196:	4a24      	ldr	r2, [pc, #144]	@ (800c228 <HAL_RCC_OscConfig+0x77c>)
 800c198:	f043 0310 	orr.w	r3, r3, #16
 800c19c:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 800c19e:	4b22      	ldr	r3, [pc, #136]	@ (800c228 <HAL_RCC_OscConfig+0x77c>)
 800c1a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1a2:	f023 020c 	bic.w	r2, r3, #12
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c1aa:	491f      	ldr	r1, [pc, #124]	@ (800c228 <HAL_RCC_OscConfig+0x77c>)
 800c1ac:	4313      	orrs	r3, r2
 800c1ae:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 800c1b0:	4b1d      	ldr	r3, [pc, #116]	@ (800c228 <HAL_RCC_OscConfig+0x77c>)
 800c1b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1b4:	f023 0220 	bic.w	r2, r3, #32
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c1bc:	491a      	ldr	r1, [pc, #104]	@ (800c228 <HAL_RCC_OscConfig+0x77c>)
 800c1be:	4313      	orrs	r3, r2
 800c1c0:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 800c1c2:	4b19      	ldr	r3, [pc, #100]	@ (800c228 <HAL_RCC_OscConfig+0x77c>)
 800c1c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1c6:	4a18      	ldr	r2, [pc, #96]	@ (800c228 <HAL_RCC_OscConfig+0x77c>)
 800c1c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c1cc:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 800c1ce:	4b16      	ldr	r3, [pc, #88]	@ (800c228 <HAL_RCC_OscConfig+0x77c>)
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	4a15      	ldr	r2, [pc, #84]	@ (800c228 <HAL_RCC_OscConfig+0x77c>)
 800c1d4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c1d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c1da:	f7f9 fbf9 	bl	80059d0 <HAL_GetTick>
 800c1de:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800c1e0:	e008      	b.n	800c1f4 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800c1e2:	f7f9 fbf5 	bl	80059d0 <HAL_GetTick>
 800c1e6:	4602      	mov	r2, r0
 800c1e8:	697b      	ldr	r3, [r7, #20]
 800c1ea:	1ad3      	subs	r3, r2, r3
 800c1ec:	2b02      	cmp	r3, #2
 800c1ee:	d901      	bls.n	800c1f4 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 800c1f0:	2303      	movs	r3, #3
 800c1f2:	e08d      	b.n	800c310 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800c1f4:	4b0c      	ldr	r3, [pc, #48]	@ (800c228 <HAL_RCC_OscConfig+0x77c>)
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d0f0      	beq.n	800c1e2 <HAL_RCC_OscConfig+0x736>
 800c200:	e085      	b.n	800c30e <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800c202:	4b09      	ldr	r3, [pc, #36]	@ (800c228 <HAL_RCC_OscConfig+0x77c>)
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	4a08      	ldr	r2, [pc, #32]	@ (800c228 <HAL_RCC_OscConfig+0x77c>)
 800c208:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c20c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c20e:	f7f9 fbdf 	bl	80059d0 <HAL_GetTick>
 800c212:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800c214:	e00a      	b.n	800c22c <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800c216:	f7f9 fbdb 	bl	80059d0 <HAL_GetTick>
 800c21a:	4602      	mov	r2, r0
 800c21c:	697b      	ldr	r3, [r7, #20]
 800c21e:	1ad3      	subs	r3, r2, r3
 800c220:	2b02      	cmp	r3, #2
 800c222:	d903      	bls.n	800c22c <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 800c224:	2303      	movs	r3, #3
 800c226:	e073      	b.n	800c310 <HAL_RCC_OscConfig+0x864>
 800c228:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800c22c:	4b3a      	ldr	r3, [pc, #232]	@ (800c318 <HAL_RCC_OscConfig+0x86c>)
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c234:	2b00      	cmp	r3, #0
 800c236:	d1ee      	bne.n	800c216 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800c238:	4b37      	ldr	r3, [pc, #220]	@ (800c318 <HAL_RCC_OscConfig+0x86c>)
 800c23a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c23c:	4a36      	ldr	r2, [pc, #216]	@ (800c318 <HAL_RCC_OscConfig+0x86c>)
 800c23e:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800c242:	f023 0303 	bic.w	r3, r3, #3
 800c246:	6293      	str	r3, [r2, #40]	@ 0x28
 800c248:	e061      	b.n	800c30e <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800c24a:	4b33      	ldr	r3, [pc, #204]	@ (800c318 <HAL_RCC_OscConfig+0x86c>)
 800c24c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c24e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800c250:	4b31      	ldr	r3, [pc, #196]	@ (800c318 <HAL_RCC_OscConfig+0x86c>)
 800c252:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c254:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c25a:	2b01      	cmp	r3, #1
 800c25c:	d031      	beq.n	800c2c2 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 800c25e:	693b      	ldr	r3, [r7, #16]
 800c260:	f003 0203 	and.w	r2, r3, #3
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c268:	429a      	cmp	r2, r3
 800c26a:	d12a      	bne.n	800c2c2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800c26c:	693b      	ldr	r3, [r7, #16]
 800c26e:	0a1b      	lsrs	r3, r3, #8
 800c270:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 800c278:	429a      	cmp	r2, r3
 800c27a:	d122      	bne.n	800c2c2 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c286:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 800c288:	429a      	cmp	r2, r3
 800c28a:	d11a      	bne.n	800c2c2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	0a5b      	lsrs	r3, r3, #9
 800c290:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c298:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800c29a:	429a      	cmp	r2, r3
 800c29c:	d111      	bne.n	800c2c2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	0c1b      	lsrs	r3, r3, #16
 800c2a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c2aa:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 800c2ac:	429a      	cmp	r2, r3
 800c2ae:	d108      	bne.n	800c2c2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	0e1b      	lsrs	r3, r3, #24
 800c2b4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c2bc:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800c2be:	429a      	cmp	r2, r3
 800c2c0:	d001      	beq.n	800c2c6 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 800c2c2:	2301      	movs	r3, #1
 800c2c4:	e024      	b.n	800c310 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800c2c6:	4b14      	ldr	r3, [pc, #80]	@ (800c318 <HAL_RCC_OscConfig+0x86c>)
 800c2c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c2ca:	08db      	lsrs	r3, r3, #3
 800c2cc:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800c2d4:	429a      	cmp	r2, r3
 800c2d6:	d01a      	beq.n	800c30e <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 800c2d8:	4b0f      	ldr	r3, [pc, #60]	@ (800c318 <HAL_RCC_OscConfig+0x86c>)
 800c2da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2dc:	4a0e      	ldr	r2, [pc, #56]	@ (800c318 <HAL_RCC_OscConfig+0x86c>)
 800c2de:	f023 0310 	bic.w	r3, r3, #16
 800c2e2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c2e4:	f7f9 fb74 	bl	80059d0 <HAL_GetTick>
 800c2e8:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 800c2ea:	bf00      	nop
 800c2ec:	f7f9 fb70 	bl	80059d0 <HAL_GetTick>
 800c2f0:	4602      	mov	r2, r0
 800c2f2:	697b      	ldr	r3, [r7, #20]
 800c2f4:	4293      	cmp	r3, r2
 800c2f6:	d0f9      	beq.n	800c2ec <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c2fc:	4a06      	ldr	r2, [pc, #24]	@ (800c318 <HAL_RCC_OscConfig+0x86c>)
 800c2fe:	00db      	lsls	r3, r3, #3
 800c300:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800c302:	4b05      	ldr	r3, [pc, #20]	@ (800c318 <HAL_RCC_OscConfig+0x86c>)
 800c304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c306:	4a04      	ldr	r2, [pc, #16]	@ (800c318 <HAL_RCC_OscConfig+0x86c>)
 800c308:	f043 0310 	orr.w	r3, r3, #16
 800c30c:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 800c30e:	2300      	movs	r3, #0
}
 800c310:	4618      	mov	r0, r3
 800c312:	3720      	adds	r7, #32
 800c314:	46bd      	mov	sp, r7
 800c316:	bd80      	pop	{r7, pc}
 800c318:	44020c00 	.word	0x44020c00

0800c31c <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b084      	sub	sp, #16
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
 800c324:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d101      	bne.n	800c330 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c32c:	2301      	movs	r3, #1
 800c32e:	e19e      	b.n	800c66e <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c330:	4b83      	ldr	r3, [pc, #524]	@ (800c540 <HAL_RCC_ClockConfig+0x224>)
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	f003 030f 	and.w	r3, r3, #15
 800c338:	683a      	ldr	r2, [r7, #0]
 800c33a:	429a      	cmp	r2, r3
 800c33c:	d910      	bls.n	800c360 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c33e:	4b80      	ldr	r3, [pc, #512]	@ (800c540 <HAL_RCC_ClockConfig+0x224>)
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	f023 020f 	bic.w	r2, r3, #15
 800c346:	497e      	ldr	r1, [pc, #504]	@ (800c540 <HAL_RCC_ClockConfig+0x224>)
 800c348:	683b      	ldr	r3, [r7, #0]
 800c34a:	4313      	orrs	r3, r2
 800c34c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c34e:	4b7c      	ldr	r3, [pc, #496]	@ (800c540 <HAL_RCC_ClockConfig+0x224>)
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	f003 030f 	and.w	r3, r3, #15
 800c356:	683a      	ldr	r2, [r7, #0]
 800c358:	429a      	cmp	r2, r3
 800c35a:	d001      	beq.n	800c360 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800c35c:	2301      	movs	r3, #1
 800c35e:	e186      	b.n	800c66e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	f003 0310 	and.w	r3, r3, #16
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d012      	beq.n	800c392 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	695a      	ldr	r2, [r3, #20]
 800c370:	4b74      	ldr	r3, [pc, #464]	@ (800c544 <HAL_RCC_ClockConfig+0x228>)
 800c372:	6a1b      	ldr	r3, [r3, #32]
 800c374:	0a1b      	lsrs	r3, r3, #8
 800c376:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c37a:	429a      	cmp	r2, r3
 800c37c:	d909      	bls.n	800c392 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 800c37e:	4b71      	ldr	r3, [pc, #452]	@ (800c544 <HAL_RCC_ClockConfig+0x228>)
 800c380:	6a1b      	ldr	r3, [r3, #32]
 800c382:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	695b      	ldr	r3, [r3, #20]
 800c38a:	021b      	lsls	r3, r3, #8
 800c38c:	496d      	ldr	r1, [pc, #436]	@ (800c544 <HAL_RCC_ClockConfig+0x228>)
 800c38e:	4313      	orrs	r3, r2
 800c390:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	f003 0308 	and.w	r3, r3, #8
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d012      	beq.n	800c3c4 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	691a      	ldr	r2, [r3, #16]
 800c3a2:	4b68      	ldr	r3, [pc, #416]	@ (800c544 <HAL_RCC_ClockConfig+0x228>)
 800c3a4:	6a1b      	ldr	r3, [r3, #32]
 800c3a6:	091b      	lsrs	r3, r3, #4
 800c3a8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c3ac:	429a      	cmp	r2, r3
 800c3ae:	d909      	bls.n	800c3c4 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 800c3b0:	4b64      	ldr	r3, [pc, #400]	@ (800c544 <HAL_RCC_ClockConfig+0x228>)
 800c3b2:	6a1b      	ldr	r3, [r3, #32]
 800c3b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	691b      	ldr	r3, [r3, #16]
 800c3bc:	011b      	lsls	r3, r3, #4
 800c3be:	4961      	ldr	r1, [pc, #388]	@ (800c544 <HAL_RCC_ClockConfig+0x228>)
 800c3c0:	4313      	orrs	r3, r2
 800c3c2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	f003 0304 	and.w	r3, r3, #4
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d010      	beq.n	800c3f2 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	68da      	ldr	r2, [r3, #12]
 800c3d4:	4b5b      	ldr	r3, [pc, #364]	@ (800c544 <HAL_RCC_ClockConfig+0x228>)
 800c3d6:	6a1b      	ldr	r3, [r3, #32]
 800c3d8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c3dc:	429a      	cmp	r2, r3
 800c3de:	d908      	bls.n	800c3f2 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 800c3e0:	4b58      	ldr	r3, [pc, #352]	@ (800c544 <HAL_RCC_ClockConfig+0x228>)
 800c3e2:	6a1b      	ldr	r3, [r3, #32]
 800c3e4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	68db      	ldr	r3, [r3, #12]
 800c3ec:	4955      	ldr	r1, [pc, #340]	@ (800c544 <HAL_RCC_ClockConfig+0x228>)
 800c3ee:	4313      	orrs	r3, r2
 800c3f0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	f003 0302 	and.w	r3, r3, #2
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d010      	beq.n	800c420 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	689a      	ldr	r2, [r3, #8]
 800c402:	4b50      	ldr	r3, [pc, #320]	@ (800c544 <HAL_RCC_ClockConfig+0x228>)
 800c404:	6a1b      	ldr	r3, [r3, #32]
 800c406:	f003 030f 	and.w	r3, r3, #15
 800c40a:	429a      	cmp	r2, r3
 800c40c:	d908      	bls.n	800c420 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 800c40e:	4b4d      	ldr	r3, [pc, #308]	@ (800c544 <HAL_RCC_ClockConfig+0x228>)
 800c410:	6a1b      	ldr	r3, [r3, #32]
 800c412:	f023 020f 	bic.w	r2, r3, #15
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	689b      	ldr	r3, [r3, #8]
 800c41a:	494a      	ldr	r1, [pc, #296]	@ (800c544 <HAL_RCC_ClockConfig+0x228>)
 800c41c:	4313      	orrs	r3, r2
 800c41e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	f003 0301 	and.w	r3, r3, #1
 800c428:	2b00      	cmp	r3, #0
 800c42a:	f000 8093 	beq.w	800c554 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	685b      	ldr	r3, [r3, #4]
 800c432:	2b03      	cmp	r3, #3
 800c434:	d107      	bne.n	800c446 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800c436:	4b43      	ldr	r3, [pc, #268]	@ (800c544 <HAL_RCC_ClockConfig+0x228>)
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d121      	bne.n	800c486 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 800c442:	2301      	movs	r3, #1
 800c444:	e113      	b.n	800c66e <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	685b      	ldr	r3, [r3, #4]
 800c44a:	2b02      	cmp	r3, #2
 800c44c:	d107      	bne.n	800c45e <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c44e:	4b3d      	ldr	r3, [pc, #244]	@ (800c544 <HAL_RCC_ClockConfig+0x228>)
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c456:	2b00      	cmp	r3, #0
 800c458:	d115      	bne.n	800c486 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800c45a:	2301      	movs	r3, #1
 800c45c:	e107      	b.n	800c66e <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	685b      	ldr	r3, [r3, #4]
 800c462:	2b01      	cmp	r3, #1
 800c464:	d107      	bne.n	800c476 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800c466:	4b37      	ldr	r3, [pc, #220]	@ (800c544 <HAL_RCC_ClockConfig+0x228>)
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d109      	bne.n	800c486 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800c472:	2301      	movs	r3, #1
 800c474:	e0fb      	b.n	800c66e <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c476:	4b33      	ldr	r3, [pc, #204]	@ (800c544 <HAL_RCC_ClockConfig+0x228>)
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	f003 0302 	and.w	r3, r3, #2
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d101      	bne.n	800c486 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800c482:	2301      	movs	r3, #1
 800c484:	e0f3      	b.n	800c66e <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 800c486:	4b2f      	ldr	r3, [pc, #188]	@ (800c544 <HAL_RCC_ClockConfig+0x228>)
 800c488:	69db      	ldr	r3, [r3, #28]
 800c48a:	f023 0203 	bic.w	r2, r3, #3
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	685b      	ldr	r3, [r3, #4]
 800c492:	492c      	ldr	r1, [pc, #176]	@ (800c544 <HAL_RCC_ClockConfig+0x228>)
 800c494:	4313      	orrs	r3, r2
 800c496:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c498:	f7f9 fa9a 	bl	80059d0 <HAL_GetTick>
 800c49c:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	685b      	ldr	r3, [r3, #4]
 800c4a2:	2b03      	cmp	r3, #3
 800c4a4:	d112      	bne.n	800c4cc <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c4a6:	e00a      	b.n	800c4be <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800c4a8:	f7f9 fa92 	bl	80059d0 <HAL_GetTick>
 800c4ac:	4602      	mov	r2, r0
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	1ad3      	subs	r3, r2, r3
 800c4b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c4b6:	4293      	cmp	r3, r2
 800c4b8:	d901      	bls.n	800c4be <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 800c4ba:	2303      	movs	r3, #3
 800c4bc:	e0d7      	b.n	800c66e <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c4be:	4b21      	ldr	r3, [pc, #132]	@ (800c544 <HAL_RCC_ClockConfig+0x228>)
 800c4c0:	69db      	ldr	r3, [r3, #28]
 800c4c2:	f003 0318 	and.w	r3, r3, #24
 800c4c6:	2b18      	cmp	r3, #24
 800c4c8:	d1ee      	bne.n	800c4a8 <HAL_RCC_ClockConfig+0x18c>
 800c4ca:	e043      	b.n	800c554 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	685b      	ldr	r3, [r3, #4]
 800c4d0:	2b02      	cmp	r3, #2
 800c4d2:	d112      	bne.n	800c4fa <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800c4d4:	e00a      	b.n	800c4ec <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800c4d6:	f7f9 fa7b 	bl	80059d0 <HAL_GetTick>
 800c4da:	4602      	mov	r2, r0
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	1ad3      	subs	r3, r2, r3
 800c4e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c4e4:	4293      	cmp	r3, r2
 800c4e6:	d901      	bls.n	800c4ec <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800c4e8:	2303      	movs	r3, #3
 800c4ea:	e0c0      	b.n	800c66e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800c4ec:	4b15      	ldr	r3, [pc, #84]	@ (800c544 <HAL_RCC_ClockConfig+0x228>)
 800c4ee:	69db      	ldr	r3, [r3, #28]
 800c4f0:	f003 0318 	and.w	r3, r3, #24
 800c4f4:	2b10      	cmp	r3, #16
 800c4f6:	d1ee      	bne.n	800c4d6 <HAL_RCC_ClockConfig+0x1ba>
 800c4f8:	e02c      	b.n	800c554 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	685b      	ldr	r3, [r3, #4]
 800c4fe:	2b01      	cmp	r3, #1
 800c500:	d122      	bne.n	800c548 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800c502:	e00a      	b.n	800c51a <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800c504:	f7f9 fa64 	bl	80059d0 <HAL_GetTick>
 800c508:	4602      	mov	r2, r0
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	1ad3      	subs	r3, r2, r3
 800c50e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c512:	4293      	cmp	r3, r2
 800c514:	d901      	bls.n	800c51a <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800c516:	2303      	movs	r3, #3
 800c518:	e0a9      	b.n	800c66e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800c51a:	4b0a      	ldr	r3, [pc, #40]	@ (800c544 <HAL_RCC_ClockConfig+0x228>)
 800c51c:	69db      	ldr	r3, [r3, #28]
 800c51e:	f003 0318 	and.w	r3, r3, #24
 800c522:	2b08      	cmp	r3, #8
 800c524:	d1ee      	bne.n	800c504 <HAL_RCC_ClockConfig+0x1e8>
 800c526:	e015      	b.n	800c554 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800c528:	f7f9 fa52 	bl	80059d0 <HAL_GetTick>
 800c52c:	4602      	mov	r2, r0
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	1ad3      	subs	r3, r2, r3
 800c532:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c536:	4293      	cmp	r3, r2
 800c538:	d906      	bls.n	800c548 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 800c53a:	2303      	movs	r3, #3
 800c53c:	e097      	b.n	800c66e <HAL_RCC_ClockConfig+0x352>
 800c53e:	bf00      	nop
 800c540:	40022000 	.word	0x40022000
 800c544:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800c548:	4b4b      	ldr	r3, [pc, #300]	@ (800c678 <HAL_RCC_ClockConfig+0x35c>)
 800c54a:	69db      	ldr	r3, [r3, #28]
 800c54c:	f003 0318 	and.w	r3, r3, #24
 800c550:	2b00      	cmp	r3, #0
 800c552:	d1e9      	bne.n	800c528 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	f003 0302 	and.w	r3, r3, #2
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d010      	beq.n	800c582 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	689a      	ldr	r2, [r3, #8]
 800c564:	4b44      	ldr	r3, [pc, #272]	@ (800c678 <HAL_RCC_ClockConfig+0x35c>)
 800c566:	6a1b      	ldr	r3, [r3, #32]
 800c568:	f003 030f 	and.w	r3, r3, #15
 800c56c:	429a      	cmp	r2, r3
 800c56e:	d208      	bcs.n	800c582 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 800c570:	4b41      	ldr	r3, [pc, #260]	@ (800c678 <HAL_RCC_ClockConfig+0x35c>)
 800c572:	6a1b      	ldr	r3, [r3, #32]
 800c574:	f023 020f 	bic.w	r2, r3, #15
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	689b      	ldr	r3, [r3, #8]
 800c57c:	493e      	ldr	r1, [pc, #248]	@ (800c678 <HAL_RCC_ClockConfig+0x35c>)
 800c57e:	4313      	orrs	r3, r2
 800c580:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c582:	4b3e      	ldr	r3, [pc, #248]	@ (800c67c <HAL_RCC_ClockConfig+0x360>)
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	f003 030f 	and.w	r3, r3, #15
 800c58a:	683a      	ldr	r2, [r7, #0]
 800c58c:	429a      	cmp	r2, r3
 800c58e:	d210      	bcs.n	800c5b2 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c590:	4b3a      	ldr	r3, [pc, #232]	@ (800c67c <HAL_RCC_ClockConfig+0x360>)
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	f023 020f 	bic.w	r2, r3, #15
 800c598:	4938      	ldr	r1, [pc, #224]	@ (800c67c <HAL_RCC_ClockConfig+0x360>)
 800c59a:	683b      	ldr	r3, [r7, #0]
 800c59c:	4313      	orrs	r3, r2
 800c59e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c5a0:	4b36      	ldr	r3, [pc, #216]	@ (800c67c <HAL_RCC_ClockConfig+0x360>)
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	f003 030f 	and.w	r3, r3, #15
 800c5a8:	683a      	ldr	r2, [r7, #0]
 800c5aa:	429a      	cmp	r2, r3
 800c5ac:	d001      	beq.n	800c5b2 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 800c5ae:	2301      	movs	r3, #1
 800c5b0:	e05d      	b.n	800c66e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	f003 0304 	and.w	r3, r3, #4
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d010      	beq.n	800c5e0 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	68da      	ldr	r2, [r3, #12]
 800c5c2:	4b2d      	ldr	r3, [pc, #180]	@ (800c678 <HAL_RCC_ClockConfig+0x35c>)
 800c5c4:	6a1b      	ldr	r3, [r3, #32]
 800c5c6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c5ca:	429a      	cmp	r2, r3
 800c5cc:	d208      	bcs.n	800c5e0 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 800c5ce:	4b2a      	ldr	r3, [pc, #168]	@ (800c678 <HAL_RCC_ClockConfig+0x35c>)
 800c5d0:	6a1b      	ldr	r3, [r3, #32]
 800c5d2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	68db      	ldr	r3, [r3, #12]
 800c5da:	4927      	ldr	r1, [pc, #156]	@ (800c678 <HAL_RCC_ClockConfig+0x35c>)
 800c5dc:	4313      	orrs	r3, r2
 800c5de:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	f003 0308 	and.w	r3, r3, #8
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d012      	beq.n	800c612 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	691a      	ldr	r2, [r3, #16]
 800c5f0:	4b21      	ldr	r3, [pc, #132]	@ (800c678 <HAL_RCC_ClockConfig+0x35c>)
 800c5f2:	6a1b      	ldr	r3, [r3, #32]
 800c5f4:	091b      	lsrs	r3, r3, #4
 800c5f6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c5fa:	429a      	cmp	r2, r3
 800c5fc:	d209      	bcs.n	800c612 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 800c5fe:	4b1e      	ldr	r3, [pc, #120]	@ (800c678 <HAL_RCC_ClockConfig+0x35c>)
 800c600:	6a1b      	ldr	r3, [r3, #32]
 800c602:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	691b      	ldr	r3, [r3, #16]
 800c60a:	011b      	lsls	r3, r3, #4
 800c60c:	491a      	ldr	r1, [pc, #104]	@ (800c678 <HAL_RCC_ClockConfig+0x35c>)
 800c60e:	4313      	orrs	r3, r2
 800c610:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	f003 0310 	and.w	r3, r3, #16
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d012      	beq.n	800c644 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	695a      	ldr	r2, [r3, #20]
 800c622:	4b15      	ldr	r3, [pc, #84]	@ (800c678 <HAL_RCC_ClockConfig+0x35c>)
 800c624:	6a1b      	ldr	r3, [r3, #32]
 800c626:	0a1b      	lsrs	r3, r3, #8
 800c628:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c62c:	429a      	cmp	r2, r3
 800c62e:	d209      	bcs.n	800c644 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 800c630:	4b11      	ldr	r3, [pc, #68]	@ (800c678 <HAL_RCC_ClockConfig+0x35c>)
 800c632:	6a1b      	ldr	r3, [r3, #32]
 800c634:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	695b      	ldr	r3, [r3, #20]
 800c63c:	021b      	lsls	r3, r3, #8
 800c63e:	490e      	ldr	r1, [pc, #56]	@ (800c678 <HAL_RCC_ClockConfig+0x35c>)
 800c640:	4313      	orrs	r3, r2
 800c642:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800c644:	f000 f822 	bl	800c68c <HAL_RCC_GetSysClockFreq>
 800c648:	4602      	mov	r2, r0
 800c64a:	4b0b      	ldr	r3, [pc, #44]	@ (800c678 <HAL_RCC_ClockConfig+0x35c>)
 800c64c:	6a1b      	ldr	r3, [r3, #32]
 800c64e:	f003 030f 	and.w	r3, r3, #15
 800c652:	490b      	ldr	r1, [pc, #44]	@ (800c680 <HAL_RCC_ClockConfig+0x364>)
 800c654:	5ccb      	ldrb	r3, [r1, r3]
 800c656:	fa22 f303 	lsr.w	r3, r2, r3
 800c65a:	4a0a      	ldr	r2, [pc, #40]	@ (800c684 <HAL_RCC_ClockConfig+0x368>)
 800c65c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800c65e:	4b0a      	ldr	r3, [pc, #40]	@ (800c688 <HAL_RCC_ClockConfig+0x36c>)
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	4618      	mov	r0, r3
 800c664:	f7f9 f92a 	bl	80058bc <HAL_InitTick>
 800c668:	4603      	mov	r3, r0
 800c66a:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 800c66c:	7afb      	ldrb	r3, [r7, #11]
}
 800c66e:	4618      	mov	r0, r3
 800c670:	3710      	adds	r7, #16
 800c672:	46bd      	mov	sp, r7
 800c674:	bd80      	pop	{r7, pc}
 800c676:	bf00      	nop
 800c678:	44020c00 	.word	0x44020c00
 800c67c:	40022000 	.word	0x40022000
 800c680:	0802434c 	.word	0x0802434c
 800c684:	20000074 	.word	0x20000074
 800c688:	20000078 	.word	0x20000078

0800c68c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c68c:	b480      	push	{r7}
 800c68e:	b089      	sub	sp, #36	@ 0x24
 800c690:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 800c692:	4b8c      	ldr	r3, [pc, #560]	@ (800c8c4 <HAL_RCC_GetSysClockFreq+0x238>)
 800c694:	69db      	ldr	r3, [r3, #28]
 800c696:	f003 0318 	and.w	r3, r3, #24
 800c69a:	2b08      	cmp	r3, #8
 800c69c:	d102      	bne.n	800c6a4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800c69e:	4b8a      	ldr	r3, [pc, #552]	@ (800c8c8 <HAL_RCC_GetSysClockFreq+0x23c>)
 800c6a0:	61fb      	str	r3, [r7, #28]
 800c6a2:	e107      	b.n	800c8b4 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800c6a4:	4b87      	ldr	r3, [pc, #540]	@ (800c8c4 <HAL_RCC_GetSysClockFreq+0x238>)
 800c6a6:	69db      	ldr	r3, [r3, #28]
 800c6a8:	f003 0318 	and.w	r3, r3, #24
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d112      	bne.n	800c6d6 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800c6b0:	4b84      	ldr	r3, [pc, #528]	@ (800c8c4 <HAL_RCC_GetSysClockFreq+0x238>)
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	f003 0320 	and.w	r3, r3, #32
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d009      	beq.n	800c6d0 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c6bc:	4b81      	ldr	r3, [pc, #516]	@ (800c8c4 <HAL_RCC_GetSysClockFreq+0x238>)
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	08db      	lsrs	r3, r3, #3
 800c6c2:	f003 0303 	and.w	r3, r3, #3
 800c6c6:	4a81      	ldr	r2, [pc, #516]	@ (800c8cc <HAL_RCC_GetSysClockFreq+0x240>)
 800c6c8:	fa22 f303 	lsr.w	r3, r2, r3
 800c6cc:	61fb      	str	r3, [r7, #28]
 800c6ce:	e0f1      	b.n	800c8b4 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 800c6d0:	4b7e      	ldr	r3, [pc, #504]	@ (800c8cc <HAL_RCC_GetSysClockFreq+0x240>)
 800c6d2:	61fb      	str	r3, [r7, #28]
 800c6d4:	e0ee      	b.n	800c8b4 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800c6d6:	4b7b      	ldr	r3, [pc, #492]	@ (800c8c4 <HAL_RCC_GetSysClockFreq+0x238>)
 800c6d8:	69db      	ldr	r3, [r3, #28]
 800c6da:	f003 0318 	and.w	r3, r3, #24
 800c6de:	2b10      	cmp	r3, #16
 800c6e0:	d102      	bne.n	800c6e8 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800c6e2:	4b7b      	ldr	r3, [pc, #492]	@ (800c8d0 <HAL_RCC_GetSysClockFreq+0x244>)
 800c6e4:	61fb      	str	r3, [r7, #28]
 800c6e6:	e0e5      	b.n	800c8b4 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c6e8:	4b76      	ldr	r3, [pc, #472]	@ (800c8c4 <HAL_RCC_GetSysClockFreq+0x238>)
 800c6ea:	69db      	ldr	r3, [r3, #28]
 800c6ec:	f003 0318 	and.w	r3, r3, #24
 800c6f0:	2b18      	cmp	r3, #24
 800c6f2:	f040 80dd 	bne.w	800c8b0 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800c6f6:	4b73      	ldr	r3, [pc, #460]	@ (800c8c4 <HAL_RCC_GetSysClockFreq+0x238>)
 800c6f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c6fa:	f003 0303 	and.w	r3, r3, #3
 800c6fe:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 800c700:	4b70      	ldr	r3, [pc, #448]	@ (800c8c4 <HAL_RCC_GetSysClockFreq+0x238>)
 800c702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c704:	0a1b      	lsrs	r3, r3, #8
 800c706:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c70a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800c70c:	4b6d      	ldr	r3, [pc, #436]	@ (800c8c4 <HAL_RCC_GetSysClockFreq+0x238>)
 800c70e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c710:	091b      	lsrs	r3, r3, #4
 800c712:	f003 0301 	and.w	r3, r3, #1
 800c716:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 800c718:	4b6a      	ldr	r3, [pc, #424]	@ (800c8c4 <HAL_RCC_GetSysClockFreq+0x238>)
 800c71a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 800c71c:	08db      	lsrs	r3, r3, #3
 800c71e:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 800c722:	68fa      	ldr	r2, [r7, #12]
 800c724:	fb02 f303 	mul.w	r3, r2, r3
 800c728:	ee07 3a90 	vmov	s15, r3
 800c72c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c730:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800c734:	693b      	ldr	r3, [r7, #16]
 800c736:	2b00      	cmp	r3, #0
 800c738:	f000 80b7 	beq.w	800c8aa <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 800c73c:	697b      	ldr	r3, [r7, #20]
 800c73e:	2b01      	cmp	r3, #1
 800c740:	d003      	beq.n	800c74a <HAL_RCC_GetSysClockFreq+0xbe>
 800c742:	697b      	ldr	r3, [r7, #20]
 800c744:	2b03      	cmp	r3, #3
 800c746:	d056      	beq.n	800c7f6 <HAL_RCC_GetSysClockFreq+0x16a>
 800c748:	e077      	b.n	800c83a <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800c74a:	4b5e      	ldr	r3, [pc, #376]	@ (800c8c4 <HAL_RCC_GetSysClockFreq+0x238>)
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	f003 0320 	and.w	r3, r3, #32
 800c752:	2b00      	cmp	r3, #0
 800c754:	d02d      	beq.n	800c7b2 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c756:	4b5b      	ldr	r3, [pc, #364]	@ (800c8c4 <HAL_RCC_GetSysClockFreq+0x238>)
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	08db      	lsrs	r3, r3, #3
 800c75c:	f003 0303 	and.w	r3, r3, #3
 800c760:	4a5a      	ldr	r2, [pc, #360]	@ (800c8cc <HAL_RCC_GetSysClockFreq+0x240>)
 800c762:	fa22 f303 	lsr.w	r3, r2, r3
 800c766:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	ee07 3a90 	vmov	s15, r3
 800c76e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c772:	693b      	ldr	r3, [r7, #16]
 800c774:	ee07 3a90 	vmov	s15, r3
 800c778:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c77c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c780:	4b50      	ldr	r3, [pc, #320]	@ (800c8c4 <HAL_RCC_GetSysClockFreq+0x238>)
 800c782:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c784:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c788:	ee07 3a90 	vmov	s15, r3
 800c78c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 800c790:	ed97 6a02 	vldr	s12, [r7, #8]
 800c794:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 800c8d4 <HAL_RCC_GetSysClockFreq+0x248>
 800c798:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800c79c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 800c7a0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c7a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800c7a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c7ac:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 800c7b0:	e065      	b.n	800c87e <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800c7b2:	693b      	ldr	r3, [r7, #16]
 800c7b4:	ee07 3a90 	vmov	s15, r3
 800c7b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7bc:	eddf 6a46 	vldr	s13, [pc, #280]	@ 800c8d8 <HAL_RCC_GetSysClockFreq+0x24c>
 800c7c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c7c4:	4b3f      	ldr	r3, [pc, #252]	@ (800c8c4 <HAL_RCC_GetSysClockFreq+0x238>)
 800c7c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c7c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7cc:	ee07 3a90 	vmov	s15, r3
 800c7d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 800c7d4:	ed97 6a02 	vldr	s12, [r7, #8]
 800c7d8:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800c8d4 <HAL_RCC_GetSysClockFreq+0x248>
 800c7dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800c7e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 800c7e4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c7e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800c7ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c7f0:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 800c7f4:	e043      	b.n	800c87e <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800c7f6:	693b      	ldr	r3, [r7, #16]
 800c7f8:	ee07 3a90 	vmov	s15, r3
 800c7fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c800:	eddf 6a36 	vldr	s13, [pc, #216]	@ 800c8dc <HAL_RCC_GetSysClockFreq+0x250>
 800c804:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c808:	4b2e      	ldr	r3, [pc, #184]	@ (800c8c4 <HAL_RCC_GetSysClockFreq+0x238>)
 800c80a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c80c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c810:	ee07 3a90 	vmov	s15, r3
 800c814:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800c818:	ed97 6a02 	vldr	s12, [r7, #8]
 800c81c:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 800c8d4 <HAL_RCC_GetSysClockFreq+0x248>
 800c820:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800c824:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800c828:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c82c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800c830:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c834:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 800c838:	e021      	b.n	800c87e <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800c83a:	693b      	ldr	r3, [r7, #16]
 800c83c:	ee07 3a90 	vmov	s15, r3
 800c840:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c844:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800c8e0 <HAL_RCC_GetSysClockFreq+0x254>
 800c848:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c84c:	4b1d      	ldr	r3, [pc, #116]	@ (800c8c4 <HAL_RCC_GetSysClockFreq+0x238>)
 800c84e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c850:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c854:	ee07 3a90 	vmov	s15, r3
 800c858:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800c85c:	ed97 6a02 	vldr	s12, [r7, #8]
 800c860:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 800c8d4 <HAL_RCC_GetSysClockFreq+0x248>
 800c864:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800c868:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800c86c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c870:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800c874:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c878:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 800c87c:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 800c87e:	4b11      	ldr	r3, [pc, #68]	@ (800c8c4 <HAL_RCC_GetSysClockFreq+0x238>)
 800c880:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c882:	0a5b      	lsrs	r3, r3, #9
 800c884:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c888:	3301      	adds	r3, #1
 800c88a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800c88c:	683b      	ldr	r3, [r7, #0]
 800c88e:	ee07 3a90 	vmov	s15, r3
 800c892:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c896:	edd7 6a06 	vldr	s13, [r7, #24]
 800c89a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c89e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c8a2:	ee17 3a90 	vmov	r3, s15
 800c8a6:	61fb      	str	r3, [r7, #28]
 800c8a8:	e004      	b.n	800c8b4 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	61fb      	str	r3, [r7, #28]
 800c8ae:	e001      	b.n	800c8b4 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 800c8b0:	4b06      	ldr	r3, [pc, #24]	@ (800c8cc <HAL_RCC_GetSysClockFreq+0x240>)
 800c8b2:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 800c8b4:	69fb      	ldr	r3, [r7, #28]
}
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	3724      	adds	r7, #36	@ 0x24
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c0:	4770      	bx	lr
 800c8c2:	bf00      	nop
 800c8c4:	44020c00 	.word	0x44020c00
 800c8c8:	003d0900 	.word	0x003d0900
 800c8cc:	03d09000 	.word	0x03d09000
 800c8d0:	017d7840 	.word	0x017d7840
 800c8d4:	46000000 	.word	0x46000000
 800c8d8:	4c742400 	.word	0x4c742400
 800c8dc:	4bbebc20 	.word	0x4bbebc20
 800c8e0:	4a742400 	.word	0x4a742400

0800c8e4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800c8e8:	f7ff fed0 	bl	800c68c <HAL_RCC_GetSysClockFreq>
 800c8ec:	4602      	mov	r2, r0
 800c8ee:	4b08      	ldr	r3, [pc, #32]	@ (800c910 <HAL_RCC_GetHCLKFreq+0x2c>)
 800c8f0:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800c8f2:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800c8f6:	4907      	ldr	r1, [pc, #28]	@ (800c914 <HAL_RCC_GetHCLKFreq+0x30>)
 800c8f8:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800c8fa:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800c8fe:	fa22 f303 	lsr.w	r3, r2, r3
 800c902:	4a05      	ldr	r2, [pc, #20]	@ (800c918 <HAL_RCC_GetHCLKFreq+0x34>)
 800c904:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 800c906:	4b04      	ldr	r3, [pc, #16]	@ (800c918 <HAL_RCC_GetHCLKFreq+0x34>)
 800c908:	681b      	ldr	r3, [r3, #0]
}
 800c90a:	4618      	mov	r0, r3
 800c90c:	bd80      	pop	{r7, pc}
 800c90e:	bf00      	nop
 800c910:	44020c00 	.word	0x44020c00
 800c914:	0802434c 	.word	0x0802434c
 800c918:	20000074 	.word	0x20000074

0800c91c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c91c:	b580      	push	{r7, lr}
 800c91e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 800c920:	f7ff ffe0 	bl	800c8e4 <HAL_RCC_GetHCLKFreq>
 800c924:	4602      	mov	r2, r0
 800c926:	4b06      	ldr	r3, [pc, #24]	@ (800c940 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c928:	6a1b      	ldr	r3, [r3, #32]
 800c92a:	091b      	lsrs	r3, r3, #4
 800c92c:	f003 0307 	and.w	r3, r3, #7
 800c930:	4904      	ldr	r1, [pc, #16]	@ (800c944 <HAL_RCC_GetPCLK1Freq+0x28>)
 800c932:	5ccb      	ldrb	r3, [r1, r3]
 800c934:	f003 031f 	and.w	r3, r3, #31
 800c938:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c93c:	4618      	mov	r0, r3
 800c93e:	bd80      	pop	{r7, pc}
 800c940:	44020c00 	.word	0x44020c00
 800c944:	0802435c 	.word	0x0802435c

0800c948 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c948:	b580      	push	{r7, lr}
 800c94a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 800c94c:	f7ff ffca 	bl	800c8e4 <HAL_RCC_GetHCLKFreq>
 800c950:	4602      	mov	r2, r0
 800c952:	4b06      	ldr	r3, [pc, #24]	@ (800c96c <HAL_RCC_GetPCLK2Freq+0x24>)
 800c954:	6a1b      	ldr	r3, [r3, #32]
 800c956:	0a1b      	lsrs	r3, r3, #8
 800c958:	f003 0307 	and.w	r3, r3, #7
 800c95c:	4904      	ldr	r1, [pc, #16]	@ (800c970 <HAL_RCC_GetPCLK2Freq+0x28>)
 800c95e:	5ccb      	ldrb	r3, [r1, r3]
 800c960:	f003 031f 	and.w	r3, r3, #31
 800c964:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c968:	4618      	mov	r0, r3
 800c96a:	bd80      	pop	{r7, pc}
 800c96c:	44020c00 	.word	0x44020c00
 800c970:	0802435c 	.word	0x0802435c

0800c974 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800c974:	b580      	push	{r7, lr}
 800c976:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 800c978:	f7ff ffb4 	bl	800c8e4 <HAL_RCC_GetHCLKFreq>
 800c97c:	4602      	mov	r2, r0
 800c97e:	4b06      	ldr	r3, [pc, #24]	@ (800c998 <HAL_RCC_GetPCLK3Freq+0x24>)
 800c980:	6a1b      	ldr	r3, [r3, #32]
 800c982:	0b1b      	lsrs	r3, r3, #12
 800c984:	f003 0307 	and.w	r3, r3, #7
 800c988:	4904      	ldr	r1, [pc, #16]	@ (800c99c <HAL_RCC_GetPCLK3Freq+0x28>)
 800c98a:	5ccb      	ldrb	r3, [r1, r3]
 800c98c:	f003 031f 	and.w	r3, r3, #31
 800c990:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c994:	4618      	mov	r0, r3
 800c996:	bd80      	pop	{r7, pc}
 800c998:	44020c00 	.word	0x44020c00
 800c99c:	0802435c 	.word	0x0802435c

0800c9a0 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800c9a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c9a4:	b0d8      	sub	sp, #352	@ 0x160
 800c9a6:	af00      	add	r7, sp, #0
 800c9a8:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c9b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800c9bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9c0:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 800c9c4:	2500      	movs	r5, #0
 800c9c6:	ea54 0305 	orrs.w	r3, r4, r5
 800c9ca:	d00b      	beq.n	800c9e4 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 800c9cc:	4bcd      	ldr	r3, [pc, #820]	@ (800cd04 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800c9ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c9d2:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 800c9d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800c9da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c9dc:	4ac9      	ldr	r2, [pc, #804]	@ (800cd04 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800c9de:	430b      	orrs	r3, r1
 800c9e0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800c9e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800c9e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ec:	f002 0801 	and.w	r8, r2, #1
 800c9f0:	f04f 0900 	mov.w	r9, #0
 800c9f4:	ea58 0309 	orrs.w	r3, r8, r9
 800c9f8:	d042      	beq.n	800ca80 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 800c9fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800c9fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ca00:	2b05      	cmp	r3, #5
 800ca02:	d823      	bhi.n	800ca4c <HAL_RCCEx_PeriphCLKConfig+0xac>
 800ca04:	a201      	add	r2, pc, #4	@ (adr r2, 800ca0c <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 800ca06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca0a:	bf00      	nop
 800ca0c:	0800ca55 	.word	0x0800ca55
 800ca10:	0800ca25 	.word	0x0800ca25
 800ca14:	0800ca39 	.word	0x0800ca39
 800ca18:	0800ca55 	.word	0x0800ca55
 800ca1c:	0800ca55 	.word	0x0800ca55
 800ca20:	0800ca55 	.word	0x0800ca55
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800ca24:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ca28:	3308      	adds	r3, #8
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	f004 feda 	bl	80117e4 <RCCEx_PLL2_Config>
 800ca30:	4603      	mov	r3, r0
 800ca32:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 800ca36:	e00e      	b.n	800ca56 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800ca38:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ca3c:	3330      	adds	r3, #48	@ 0x30
 800ca3e:	4618      	mov	r0, r3
 800ca40:	f004 ff68 	bl	8011914 <RCCEx_PLL3_Config>
 800ca44:	4603      	mov	r3, r0
 800ca46:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 800ca4a:	e004      	b.n	800ca56 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ca4c:	2301      	movs	r3, #1
 800ca4e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800ca52:	e000      	b.n	800ca56 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 800ca54:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ca56:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d10c      	bne.n	800ca78 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800ca5e:	4ba9      	ldr	r3, [pc, #676]	@ (800cd04 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800ca60:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800ca64:	f023 0107 	bic.w	r1, r3, #7
 800ca68:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ca6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ca6e:	4aa5      	ldr	r2, [pc, #660]	@ (800cd04 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800ca70:	430b      	orrs	r3, r1
 800ca72:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800ca76:	e003      	b.n	800ca80 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca78:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800ca7c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800ca80:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ca84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca88:	f002 0a02 	and.w	sl, r2, #2
 800ca8c:	f04f 0b00 	mov.w	fp, #0
 800ca90:	ea5a 030b 	orrs.w	r3, sl, fp
 800ca94:	f000 8088 	beq.w	800cba8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 800ca98:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ca9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ca9e:	2b28      	cmp	r3, #40	@ 0x28
 800caa0:	d868      	bhi.n	800cb74 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800caa2:	a201      	add	r2, pc, #4	@ (adr r2, 800caa8 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 800caa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800caa8:	0800cb7d 	.word	0x0800cb7d
 800caac:	0800cb75 	.word	0x0800cb75
 800cab0:	0800cb75 	.word	0x0800cb75
 800cab4:	0800cb75 	.word	0x0800cb75
 800cab8:	0800cb75 	.word	0x0800cb75
 800cabc:	0800cb75 	.word	0x0800cb75
 800cac0:	0800cb75 	.word	0x0800cb75
 800cac4:	0800cb75 	.word	0x0800cb75
 800cac8:	0800cb4d 	.word	0x0800cb4d
 800cacc:	0800cb75 	.word	0x0800cb75
 800cad0:	0800cb75 	.word	0x0800cb75
 800cad4:	0800cb75 	.word	0x0800cb75
 800cad8:	0800cb75 	.word	0x0800cb75
 800cadc:	0800cb75 	.word	0x0800cb75
 800cae0:	0800cb75 	.word	0x0800cb75
 800cae4:	0800cb75 	.word	0x0800cb75
 800cae8:	0800cb61 	.word	0x0800cb61
 800caec:	0800cb75 	.word	0x0800cb75
 800caf0:	0800cb75 	.word	0x0800cb75
 800caf4:	0800cb75 	.word	0x0800cb75
 800caf8:	0800cb75 	.word	0x0800cb75
 800cafc:	0800cb75 	.word	0x0800cb75
 800cb00:	0800cb75 	.word	0x0800cb75
 800cb04:	0800cb75 	.word	0x0800cb75
 800cb08:	0800cb7d 	.word	0x0800cb7d
 800cb0c:	0800cb75 	.word	0x0800cb75
 800cb10:	0800cb75 	.word	0x0800cb75
 800cb14:	0800cb75 	.word	0x0800cb75
 800cb18:	0800cb75 	.word	0x0800cb75
 800cb1c:	0800cb75 	.word	0x0800cb75
 800cb20:	0800cb75 	.word	0x0800cb75
 800cb24:	0800cb75 	.word	0x0800cb75
 800cb28:	0800cb7d 	.word	0x0800cb7d
 800cb2c:	0800cb75 	.word	0x0800cb75
 800cb30:	0800cb75 	.word	0x0800cb75
 800cb34:	0800cb75 	.word	0x0800cb75
 800cb38:	0800cb75 	.word	0x0800cb75
 800cb3c:	0800cb75 	.word	0x0800cb75
 800cb40:	0800cb75 	.word	0x0800cb75
 800cb44:	0800cb75 	.word	0x0800cb75
 800cb48:	0800cb7d 	.word	0x0800cb7d
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800cb4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800cb50:	3308      	adds	r3, #8
 800cb52:	4618      	mov	r0, r3
 800cb54:	f004 fe46 	bl	80117e4 <RCCEx_PLL2_Config>
 800cb58:	4603      	mov	r3, r0
 800cb5a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 800cb5e:	e00e      	b.n	800cb7e <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800cb60:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800cb64:	3330      	adds	r3, #48	@ 0x30
 800cb66:	4618      	mov	r0, r3
 800cb68:	f004 fed4 	bl	8011914 <RCCEx_PLL3_Config>
 800cb6c:	4603      	mov	r3, r0
 800cb6e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 800cb72:	e004      	b.n	800cb7e <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cb74:	2301      	movs	r3, #1
 800cb76:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800cb7a:	e000      	b.n	800cb7e <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 800cb7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cb7e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d10c      	bne.n	800cba0 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800cb86:	4b5f      	ldr	r3, [pc, #380]	@ (800cd04 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800cb88:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800cb8c:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800cb90:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800cb94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cb96:	4a5b      	ldr	r2, [pc, #364]	@ (800cd04 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800cb98:	430b      	orrs	r3, r1
 800cb9a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800cb9e:	e003      	b.n	800cba8 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cba0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800cba4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800cba8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800cbac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbb0:	f002 0304 	and.w	r3, r2, #4
 800cbb4:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 800cbb8:	2300      	movs	r3, #0
 800cbba:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 800cbbe:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	@ 0x140
 800cbc2:	460b      	mov	r3, r1
 800cbc4:	4313      	orrs	r3, r2
 800cbc6:	d04e      	beq.n	800cc66 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 800cbc8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800cbcc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cbce:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800cbd2:	d02c      	beq.n	800cc2e <HAL_RCCEx_PeriphCLKConfig+0x28e>
 800cbd4:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800cbd8:	d825      	bhi.n	800cc26 <HAL_RCCEx_PeriphCLKConfig+0x286>
 800cbda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cbde:	d028      	beq.n	800cc32 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800cbe0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cbe4:	d81f      	bhi.n	800cc26 <HAL_RCCEx_PeriphCLKConfig+0x286>
 800cbe6:	2bc0      	cmp	r3, #192	@ 0xc0
 800cbe8:	d025      	beq.n	800cc36 <HAL_RCCEx_PeriphCLKConfig+0x296>
 800cbea:	2bc0      	cmp	r3, #192	@ 0xc0
 800cbec:	d81b      	bhi.n	800cc26 <HAL_RCCEx_PeriphCLKConfig+0x286>
 800cbee:	2b80      	cmp	r3, #128	@ 0x80
 800cbf0:	d00f      	beq.n	800cc12 <HAL_RCCEx_PeriphCLKConfig+0x272>
 800cbf2:	2b80      	cmp	r3, #128	@ 0x80
 800cbf4:	d817      	bhi.n	800cc26 <HAL_RCCEx_PeriphCLKConfig+0x286>
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d01f      	beq.n	800cc3a <HAL_RCCEx_PeriphCLKConfig+0x29a>
 800cbfa:	2b40      	cmp	r3, #64	@ 0x40
 800cbfc:	d113      	bne.n	800cc26 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800cbfe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800cc02:	3308      	adds	r3, #8
 800cc04:	4618      	mov	r0, r3
 800cc06:	f004 fded 	bl	80117e4 <RCCEx_PLL2_Config>
 800cc0a:	4603      	mov	r3, r0
 800cc0c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 800cc10:	e014      	b.n	800cc3c <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800cc12:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800cc16:	3330      	adds	r3, #48	@ 0x30
 800cc18:	4618      	mov	r0, r3
 800cc1a:	f004 fe7b 	bl	8011914 <RCCEx_PLL3_Config>
 800cc1e:	4603      	mov	r3, r0
 800cc20:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 800cc24:	e00a      	b.n	800cc3c <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cc26:	2301      	movs	r3, #1
 800cc28:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800cc2c:	e006      	b.n	800cc3c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800cc2e:	bf00      	nop
 800cc30:	e004      	b.n	800cc3c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800cc32:	bf00      	nop
 800cc34:	e002      	b.n	800cc3c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800cc36:	bf00      	nop
 800cc38:	e000      	b.n	800cc3c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800cc3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cc3c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d10c      	bne.n	800cc5e <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800cc44:	4b2f      	ldr	r3, [pc, #188]	@ (800cd04 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800cc46:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800cc4a:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800cc4e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800cc52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cc54:	4a2b      	ldr	r2, [pc, #172]	@ (800cd04 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800cc56:	430b      	orrs	r3, r1
 800cc58:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800cc5c:	e003      	b.n	800cc66 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cc5e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800cc62:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800cc66:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800cc6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc6e:	f002 0308 	and.w	r3, r2, #8
 800cc72:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 800cc76:	2300      	movs	r3, #0
 800cc78:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 800cc7c:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	@ 0x138
 800cc80:	460b      	mov	r3, r1
 800cc82:	4313      	orrs	r3, r2
 800cc84:	d056      	beq.n	800cd34 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 800cc86:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800cc8a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cc8c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800cc90:	d031      	beq.n	800ccf6 <HAL_RCCEx_PeriphCLKConfig+0x356>
 800cc92:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800cc96:	d82a      	bhi.n	800ccee <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800cc98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cc9c:	d02d      	beq.n	800ccfa <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800cc9e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cca2:	d824      	bhi.n	800ccee <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800cca4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800cca8:	d029      	beq.n	800ccfe <HAL_RCCEx_PeriphCLKConfig+0x35e>
 800ccaa:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800ccae:	d81e      	bhi.n	800ccee <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800ccb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ccb4:	d011      	beq.n	800ccda <HAL_RCCEx_PeriphCLKConfig+0x33a>
 800ccb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ccba:	d818      	bhi.n	800ccee <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d023      	beq.n	800cd08 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800ccc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ccc4:	d113      	bne.n	800ccee <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800ccc6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ccca:	3308      	adds	r3, #8
 800cccc:	4618      	mov	r0, r3
 800ccce:	f004 fd89 	bl	80117e4 <RCCEx_PLL2_Config>
 800ccd2:	4603      	mov	r3, r0
 800ccd4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 800ccd8:	e017      	b.n	800cd0a <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800ccda:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ccde:	3330      	adds	r3, #48	@ 0x30
 800cce0:	4618      	mov	r0, r3
 800cce2:	f004 fe17 	bl	8011914 <RCCEx_PLL3_Config>
 800cce6:	4603      	mov	r3, r0
 800cce8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 800ccec:	e00d      	b.n	800cd0a <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ccee:	2301      	movs	r3, #1
 800ccf0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800ccf4:	e009      	b.n	800cd0a <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800ccf6:	bf00      	nop
 800ccf8:	e007      	b.n	800cd0a <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800ccfa:	bf00      	nop
 800ccfc:	e005      	b.n	800cd0a <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800ccfe:	bf00      	nop
 800cd00:	e003      	b.n	800cd0a <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800cd02:	bf00      	nop
 800cd04:	44020c00 	.word	0x44020c00
        break;
 800cd08:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cd0a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d10c      	bne.n	800cd2c <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800cd12:	4bbb      	ldr	r3, [pc, #748]	@ (800d000 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800cd14:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800cd18:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 800cd1c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800cd20:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cd22:	4ab7      	ldr	r2, [pc, #732]	@ (800d000 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800cd24:	430b      	orrs	r3, r1
 800cd26:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800cd2a:	e003      	b.n	800cd34 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cd2c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800cd30:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800cd34:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800cd38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd3c:	f002 0310 	and.w	r3, r2, #16
 800cd40:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800cd44:	2300      	movs	r3, #0
 800cd46:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800cd4a:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 800cd4e:	460b      	mov	r3, r1
 800cd50:	4313      	orrs	r3, r2
 800cd52:	d053      	beq.n	800cdfc <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 800cd54:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800cd58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cd5a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800cd5e:	d031      	beq.n	800cdc4 <HAL_RCCEx_PeriphCLKConfig+0x424>
 800cd60:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800cd64:	d82a      	bhi.n	800cdbc <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800cd66:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cd6a:	d02d      	beq.n	800cdc8 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800cd6c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cd70:	d824      	bhi.n	800cdbc <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800cd72:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800cd76:	d029      	beq.n	800cdcc <HAL_RCCEx_PeriphCLKConfig+0x42c>
 800cd78:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800cd7c:	d81e      	bhi.n	800cdbc <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800cd7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cd82:	d011      	beq.n	800cda8 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800cd84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cd88:	d818      	bhi.n	800cdbc <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d020      	beq.n	800cdd0 <HAL_RCCEx_PeriphCLKConfig+0x430>
 800cd8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cd92:	d113      	bne.n	800cdbc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800cd94:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800cd98:	3308      	adds	r3, #8
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	f004 fd22 	bl	80117e4 <RCCEx_PLL2_Config>
 800cda0:	4603      	mov	r3, r0
 800cda2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 800cda6:	e014      	b.n	800cdd2 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800cda8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800cdac:	3330      	adds	r3, #48	@ 0x30
 800cdae:	4618      	mov	r0, r3
 800cdb0:	f004 fdb0 	bl	8011914 <RCCEx_PLL3_Config>
 800cdb4:	4603      	mov	r3, r0
 800cdb6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 800cdba:	e00a      	b.n	800cdd2 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cdbc:	2301      	movs	r3, #1
 800cdbe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800cdc2:	e006      	b.n	800cdd2 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800cdc4:	bf00      	nop
 800cdc6:	e004      	b.n	800cdd2 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800cdc8:	bf00      	nop
 800cdca:	e002      	b.n	800cdd2 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800cdcc:	bf00      	nop
 800cdce:	e000      	b.n	800cdd2 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800cdd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cdd2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d10c      	bne.n	800cdf4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800cdda:	4b89      	ldr	r3, [pc, #548]	@ (800d000 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800cddc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800cde0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800cde4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800cde8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cdea:	4a85      	ldr	r2, [pc, #532]	@ (800d000 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800cdec:	430b      	orrs	r3, r1
 800cdee:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800cdf2:	e003      	b.n	800cdfc <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cdf4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800cdf8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800cdfc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ce00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce04:	f002 0320 	and.w	r3, r2, #32
 800ce08:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800ce12:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 800ce16:	460b      	mov	r3, r1
 800ce18:	4313      	orrs	r3, r2
 800ce1a:	d053      	beq.n	800cec4 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 800ce1c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ce20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ce22:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800ce26:	d031      	beq.n	800ce8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 800ce28:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800ce2c:	d82a      	bhi.n	800ce84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800ce2e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ce32:	d02d      	beq.n	800ce90 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800ce34:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ce38:	d824      	bhi.n	800ce84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800ce3a:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800ce3e:	d029      	beq.n	800ce94 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 800ce40:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800ce44:	d81e      	bhi.n	800ce84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800ce46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ce4a:	d011      	beq.n	800ce70 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800ce4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ce50:	d818      	bhi.n	800ce84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d020      	beq.n	800ce98 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 800ce56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ce5a:	d113      	bne.n	800ce84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800ce5c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ce60:	3308      	adds	r3, #8
 800ce62:	4618      	mov	r0, r3
 800ce64:	f004 fcbe 	bl	80117e4 <RCCEx_PLL2_Config>
 800ce68:	4603      	mov	r3, r0
 800ce6a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 800ce6e:	e014      	b.n	800ce9a <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800ce70:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ce74:	3330      	adds	r3, #48	@ 0x30
 800ce76:	4618      	mov	r0, r3
 800ce78:	f004 fd4c 	bl	8011914 <RCCEx_PLL3_Config>
 800ce7c:	4603      	mov	r3, r0
 800ce7e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 800ce82:	e00a      	b.n	800ce9a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ce84:	2301      	movs	r3, #1
 800ce86:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800ce8a:	e006      	b.n	800ce9a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800ce8c:	bf00      	nop
 800ce8e:	e004      	b.n	800ce9a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800ce90:	bf00      	nop
 800ce92:	e002      	b.n	800ce9a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800ce94:	bf00      	nop
 800ce96:	e000      	b.n	800ce9a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800ce98:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ce9a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d10c      	bne.n	800cebc <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 800cea2:	4b57      	ldr	r3, [pc, #348]	@ (800d000 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800cea4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800cea8:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 800ceac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ceb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ceb2:	4a53      	ldr	r2, [pc, #332]	@ (800d000 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800ceb4:	430b      	orrs	r3, r1
 800ceb6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800ceba:	e003      	b.n	800cec4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cebc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800cec0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800cec4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800cec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cecc:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800ced0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800ced4:	2300      	movs	r3, #0
 800ced6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800ceda:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 800cede:	460b      	mov	r3, r1
 800cee0:	4313      	orrs	r3, r2
 800cee2:	d053      	beq.n	800cf8c <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 800cee4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800cee8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ceea:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800ceee:	d031      	beq.n	800cf54 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 800cef0:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800cef4:	d82a      	bhi.n	800cf4c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800cef6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cefa:	d02d      	beq.n	800cf58 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 800cefc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cf00:	d824      	bhi.n	800cf4c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800cf02:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800cf06:	d029      	beq.n	800cf5c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800cf08:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800cf0c:	d81e      	bhi.n	800cf4c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800cf0e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800cf12:	d011      	beq.n	800cf38 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800cf14:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800cf18:	d818      	bhi.n	800cf4c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d020      	beq.n	800cf60 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800cf1e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800cf22:	d113      	bne.n	800cf4c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800cf24:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800cf28:	3308      	adds	r3, #8
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	f004 fc5a 	bl	80117e4 <RCCEx_PLL2_Config>
 800cf30:	4603      	mov	r3, r0
 800cf32:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 800cf36:	e014      	b.n	800cf62 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800cf38:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800cf3c:	3330      	adds	r3, #48	@ 0x30
 800cf3e:	4618      	mov	r0, r3
 800cf40:	f004 fce8 	bl	8011914 <RCCEx_PLL3_Config>
 800cf44:	4603      	mov	r3, r0
 800cf46:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 800cf4a:	e00a      	b.n	800cf62 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cf4c:	2301      	movs	r3, #1
 800cf4e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800cf52:	e006      	b.n	800cf62 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800cf54:	bf00      	nop
 800cf56:	e004      	b.n	800cf62 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800cf58:	bf00      	nop
 800cf5a:	e002      	b.n	800cf62 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800cf5c:	bf00      	nop
 800cf5e:	e000      	b.n	800cf62 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800cf60:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cf62:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d10c      	bne.n	800cf84 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 800cf6a:	4b25      	ldr	r3, [pc, #148]	@ (800d000 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800cf6c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800cf70:	f423 11e0 	bic.w	r1, r3, #1835008	@ 0x1c0000
 800cf74:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800cf78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cf7a:	4a21      	ldr	r2, [pc, #132]	@ (800d000 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800cf7c:	430b      	orrs	r3, r1
 800cf7e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800cf82:	e003      	b.n	800cf8c <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cf84:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800cf88:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800cf8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800cf90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf94:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800cf98:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800cfa2:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	@ 0x118
 800cfa6:	460b      	mov	r3, r1
 800cfa8:	4313      	orrs	r3, r2
 800cfaa:	d055      	beq.n	800d058 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 800cfac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800cfb0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cfb2:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800cfb6:	d033      	beq.n	800d020 <HAL_RCCEx_PeriphCLKConfig+0x680>
 800cfb8:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800cfbc:	d82c      	bhi.n	800d018 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800cfbe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800cfc2:	d02f      	beq.n	800d024 <HAL_RCCEx_PeriphCLKConfig+0x684>
 800cfc4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800cfc8:	d826      	bhi.n	800d018 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800cfca:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800cfce:	d02b      	beq.n	800d028 <HAL_RCCEx_PeriphCLKConfig+0x688>
 800cfd0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800cfd4:	d820      	bhi.n	800d018 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800cfd6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800cfda:	d013      	beq.n	800d004 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800cfdc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800cfe0:	d81a      	bhi.n	800d018 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d022      	beq.n	800d02c <HAL_RCCEx_PeriphCLKConfig+0x68c>
 800cfe6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800cfea:	d115      	bne.n	800d018 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800cfec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800cff0:	3308      	adds	r3, #8
 800cff2:	4618      	mov	r0, r3
 800cff4:	f004 fbf6 	bl	80117e4 <RCCEx_PLL2_Config>
 800cff8:	4603      	mov	r3, r0
 800cffa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 800cffe:	e016      	b.n	800d02e <HAL_RCCEx_PeriphCLKConfig+0x68e>
 800d000:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800d004:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d008:	3330      	adds	r3, #48	@ 0x30
 800d00a:	4618      	mov	r0, r3
 800d00c:	f004 fc82 	bl	8011914 <RCCEx_PLL3_Config>
 800d010:	4603      	mov	r3, r0
 800d012:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 800d016:	e00a      	b.n	800d02e <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d018:	2301      	movs	r3, #1
 800d01a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800d01e:	e006      	b.n	800d02e <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 800d020:	bf00      	nop
 800d022:	e004      	b.n	800d02e <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 800d024:	bf00      	nop
 800d026:	e002      	b.n	800d02e <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 800d028:	bf00      	nop
 800d02a:	e000      	b.n	800d02e <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 800d02c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d02e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800d032:	2b00      	cmp	r3, #0
 800d034:	d10c      	bne.n	800d050 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 800d036:	4bbb      	ldr	r3, [pc, #748]	@ (800d324 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800d038:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800d03c:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800d040:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d044:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d046:	4ab7      	ldr	r2, [pc, #732]	@ (800d324 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800d048:	430b      	orrs	r3, r1
 800d04a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800d04e:	e003      	b.n	800d058 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d050:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800d054:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 800d058:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d05c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d060:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 800d064:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800d068:	2300      	movs	r3, #0
 800d06a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800d06e:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 800d072:	460b      	mov	r3, r1
 800d074:	4313      	orrs	r3, r2
 800d076:	d053      	beq.n	800d120 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 800d078:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d07c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d07e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800d082:	d031      	beq.n	800d0e8 <HAL_RCCEx_PeriphCLKConfig+0x748>
 800d084:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800d088:	d82a      	bhi.n	800d0e0 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800d08a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d08e:	d02d      	beq.n	800d0ec <HAL_RCCEx_PeriphCLKConfig+0x74c>
 800d090:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d094:	d824      	bhi.n	800d0e0 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800d096:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800d09a:	d029      	beq.n	800d0f0 <HAL_RCCEx_PeriphCLKConfig+0x750>
 800d09c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800d0a0:	d81e      	bhi.n	800d0e0 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800d0a2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d0a6:	d011      	beq.n	800d0cc <HAL_RCCEx_PeriphCLKConfig+0x72c>
 800d0a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d0ac:	d818      	bhi.n	800d0e0 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d020      	beq.n	800d0f4 <HAL_RCCEx_PeriphCLKConfig+0x754>
 800d0b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d0b6:	d113      	bne.n	800d0e0 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800d0b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d0bc:	3308      	adds	r3, #8
 800d0be:	4618      	mov	r0, r3
 800d0c0:	f004 fb90 	bl	80117e4 <RCCEx_PLL2_Config>
 800d0c4:	4603      	mov	r3, r0
 800d0c6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 800d0ca:	e014      	b.n	800d0f6 <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800d0cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d0d0:	3330      	adds	r3, #48	@ 0x30
 800d0d2:	4618      	mov	r0, r3
 800d0d4:	f004 fc1e 	bl	8011914 <RCCEx_PLL3_Config>
 800d0d8:	4603      	mov	r3, r0
 800d0da:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 800d0de:	e00a      	b.n	800d0f6 <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d0e0:	2301      	movs	r3, #1
 800d0e2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800d0e6:	e006      	b.n	800d0f6 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800d0e8:	bf00      	nop
 800d0ea:	e004      	b.n	800d0f6 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800d0ec:	bf00      	nop
 800d0ee:	e002      	b.n	800d0f6 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800d0f0:	bf00      	nop
 800d0f2:	e000      	b.n	800d0f6 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800d0f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d0f6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d10c      	bne.n	800d118 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 800d0fe:	4b89      	ldr	r3, [pc, #548]	@ (800d324 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800d100:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800d104:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800d108:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d10c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d10e:	4a85      	ldr	r2, [pc, #532]	@ (800d324 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800d110:	430b      	orrs	r3, r1
 800d112:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800d116:	e003      	b.n	800d120 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d118:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800d11c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 800d120:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d124:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d128:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 800d12c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800d130:	2300      	movs	r3, #0
 800d132:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800d136:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800d13a:	460b      	mov	r3, r1
 800d13c:	4313      	orrs	r3, r2
 800d13e:	d055      	beq.n	800d1ec <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 800d140:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d144:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d148:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 800d14c:	d031      	beq.n	800d1b2 <HAL_RCCEx_PeriphCLKConfig+0x812>
 800d14e:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 800d152:	d82a      	bhi.n	800d1aa <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800d154:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d158:	d02d      	beq.n	800d1b6 <HAL_RCCEx_PeriphCLKConfig+0x816>
 800d15a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d15e:	d824      	bhi.n	800d1aa <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800d160:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800d164:	d029      	beq.n	800d1ba <HAL_RCCEx_PeriphCLKConfig+0x81a>
 800d166:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800d16a:	d81e      	bhi.n	800d1aa <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800d16c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d170:	d011      	beq.n	800d196 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 800d172:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d176:	d818      	bhi.n	800d1aa <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d020      	beq.n	800d1be <HAL_RCCEx_PeriphCLKConfig+0x81e>
 800d17c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d180:	d113      	bne.n	800d1aa <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800d182:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d186:	3308      	adds	r3, #8
 800d188:	4618      	mov	r0, r3
 800d18a:	f004 fb2b 	bl	80117e4 <RCCEx_PLL2_Config>
 800d18e:	4603      	mov	r3, r0
 800d190:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 800d194:	e014      	b.n	800d1c0 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800d196:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d19a:	3330      	adds	r3, #48	@ 0x30
 800d19c:	4618      	mov	r0, r3
 800d19e:	f004 fbb9 	bl	8011914 <RCCEx_PLL3_Config>
 800d1a2:	4603      	mov	r3, r0
 800d1a4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 800d1a8:	e00a      	b.n	800d1c0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d1aa:	2301      	movs	r3, #1
 800d1ac:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800d1b0:	e006      	b.n	800d1c0 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800d1b2:	bf00      	nop
 800d1b4:	e004      	b.n	800d1c0 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800d1b6:	bf00      	nop
 800d1b8:	e002      	b.n	800d1c0 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800d1ba:	bf00      	nop
 800d1bc:	e000      	b.n	800d1c0 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800d1be:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d1c0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d10d      	bne.n	800d1e4 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 800d1c8:	4b56      	ldr	r3, [pc, #344]	@ (800d324 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800d1ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800d1ce:	f023 5160 	bic.w	r1, r3, #939524096	@ 0x38000000
 800d1d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d1d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d1da:	4a52      	ldr	r2, [pc, #328]	@ (800d324 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800d1dc:	430b      	orrs	r3, r1
 800d1de:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800d1e2:	e003      	b.n	800d1ec <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d1e4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800d1e8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 800d1ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d1f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1f4:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800d1f8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800d202:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800d206:	460b      	mov	r3, r1
 800d208:	4313      	orrs	r3, r2
 800d20a:	d044      	beq.n	800d296 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 800d20c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d210:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d214:	2b05      	cmp	r3, #5
 800d216:	d823      	bhi.n	800d260 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 800d218:	a201      	add	r2, pc, #4	@ (adr r2, 800d220 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 800d21a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d21e:	bf00      	nop
 800d220:	0800d269 	.word	0x0800d269
 800d224:	0800d239 	.word	0x0800d239
 800d228:	0800d24d 	.word	0x0800d24d
 800d22c:	0800d269 	.word	0x0800d269
 800d230:	0800d269 	.word	0x0800d269
 800d234:	0800d269 	.word	0x0800d269
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800d238:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d23c:	3308      	adds	r3, #8
 800d23e:	4618      	mov	r0, r3
 800d240:	f004 fad0 	bl	80117e4 <RCCEx_PLL2_Config>
 800d244:	4603      	mov	r3, r0
 800d246:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 800d24a:	e00e      	b.n	800d26a <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800d24c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d250:	3330      	adds	r3, #48	@ 0x30
 800d252:	4618      	mov	r0, r3
 800d254:	f004 fb5e 	bl	8011914 <RCCEx_PLL3_Config>
 800d258:	4603      	mov	r3, r0
 800d25a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 800d25e:	e004      	b.n	800d26a <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d260:	2301      	movs	r3, #1
 800d262:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800d266:	e000      	b.n	800d26a <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 800d268:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d26a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d10d      	bne.n	800d28e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 800d272:	4b2c      	ldr	r3, [pc, #176]	@ (800d324 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800d274:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800d278:	f023 0107 	bic.w	r1, r3, #7
 800d27c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d280:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d284:	4a27      	ldr	r2, [pc, #156]	@ (800d324 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800d286:	430b      	orrs	r3, r1
 800d288:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800d28c:	e003      	b.n	800d296 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d28e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800d292:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 800d296:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d29a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d29e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800d2a2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800d2ac:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800d2b0:	460b      	mov	r3, r1
 800d2b2:	4313      	orrs	r3, r2
 800d2b4:	d04f      	beq.n	800d356 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 800d2b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d2ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d2be:	2b50      	cmp	r3, #80	@ 0x50
 800d2c0:	d029      	beq.n	800d316 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800d2c2:	2b50      	cmp	r3, #80	@ 0x50
 800d2c4:	d823      	bhi.n	800d30e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800d2c6:	2b40      	cmp	r3, #64	@ 0x40
 800d2c8:	d027      	beq.n	800d31a <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800d2ca:	2b40      	cmp	r3, #64	@ 0x40
 800d2cc:	d81f      	bhi.n	800d30e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800d2ce:	2b30      	cmp	r3, #48	@ 0x30
 800d2d0:	d025      	beq.n	800d31e <HAL_RCCEx_PeriphCLKConfig+0x97e>
 800d2d2:	2b30      	cmp	r3, #48	@ 0x30
 800d2d4:	d81b      	bhi.n	800d30e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800d2d6:	2b20      	cmp	r3, #32
 800d2d8:	d00f      	beq.n	800d2fa <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800d2da:	2b20      	cmp	r3, #32
 800d2dc:	d817      	bhi.n	800d30e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d022      	beq.n	800d328 <HAL_RCCEx_PeriphCLKConfig+0x988>
 800d2e2:	2b10      	cmp	r3, #16
 800d2e4:	d113      	bne.n	800d30e <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800d2e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d2ea:	3308      	adds	r3, #8
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	f004 fa79 	bl	80117e4 <RCCEx_PLL2_Config>
 800d2f2:	4603      	mov	r3, r0
 800d2f4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 800d2f8:	e017      	b.n	800d32a <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800d2fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d2fe:	3330      	adds	r3, #48	@ 0x30
 800d300:	4618      	mov	r0, r3
 800d302:	f004 fb07 	bl	8011914 <RCCEx_PLL3_Config>
 800d306:	4603      	mov	r3, r0
 800d308:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 800d30c:	e00d      	b.n	800d32a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d30e:	2301      	movs	r3, #1
 800d310:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800d314:	e009      	b.n	800d32a <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800d316:	bf00      	nop
 800d318:	e007      	b.n	800d32a <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800d31a:	bf00      	nop
 800d31c:	e005      	b.n	800d32a <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800d31e:	bf00      	nop
 800d320:	e003      	b.n	800d32a <HAL_RCCEx_PeriphCLKConfig+0x98a>
 800d322:	bf00      	nop
 800d324:	44020c00 	.word	0x44020c00
        break;
 800d328:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d32a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d10d      	bne.n	800d34e <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 800d332:	4baf      	ldr	r3, [pc, #700]	@ (800d5f0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800d334:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800d338:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 800d33c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d340:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d344:	4aaa      	ldr	r2, [pc, #680]	@ (800d5f0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800d346:	430b      	orrs	r3, r1
 800d348:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800d34c:	e003      	b.n	800d356 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d34e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800d352:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d356:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d35a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d35e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800d362:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800d366:	2300      	movs	r3, #0
 800d368:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d36c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800d370:	460b      	mov	r3, r1
 800d372:	4313      	orrs	r3, r2
 800d374:	d055      	beq.n	800d422 <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 800d376:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d37a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d37e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800d382:	d031      	beq.n	800d3e8 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 800d384:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800d388:	d82a      	bhi.n	800d3e0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800d38a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d38e:	d02d      	beq.n	800d3ec <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 800d390:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d394:	d824      	bhi.n	800d3e0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800d396:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800d39a:	d029      	beq.n	800d3f0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 800d39c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800d3a0:	d81e      	bhi.n	800d3e0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800d3a2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d3a6:	d011      	beq.n	800d3cc <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 800d3a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d3ac:	d818      	bhi.n	800d3e0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d020      	beq.n	800d3f4 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 800d3b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d3b6:	d113      	bne.n	800d3e0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800d3b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d3bc:	3308      	adds	r3, #8
 800d3be:	4618      	mov	r0, r3
 800d3c0:	f004 fa10 	bl	80117e4 <RCCEx_PLL2_Config>
 800d3c4:	4603      	mov	r3, r0
 800d3c6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800d3ca:	e014      	b.n	800d3f6 <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800d3cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d3d0:	3330      	adds	r3, #48	@ 0x30
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	f004 fa9e 	bl	8011914 <RCCEx_PLL3_Config>
 800d3d8:	4603      	mov	r3, r0
 800d3da:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800d3de:	e00a      	b.n	800d3f6 <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d3e0:	2301      	movs	r3, #1
 800d3e2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800d3e6:	e006      	b.n	800d3f6 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 800d3e8:	bf00      	nop
 800d3ea:	e004      	b.n	800d3f6 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 800d3ec:	bf00      	nop
 800d3ee:	e002      	b.n	800d3f6 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 800d3f0:	bf00      	nop
 800d3f2:	e000      	b.n	800d3f6 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 800d3f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d3f6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d10d      	bne.n	800d41a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800d3fe:	4b7c      	ldr	r3, [pc, #496]	@ (800d5f0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800d400:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d404:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800d408:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d40c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d410:	4a77      	ldr	r2, [pc, #476]	@ (800d5f0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800d412:	430b      	orrs	r3, r1
 800d414:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800d418:	e003      	b.n	800d422 <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d41a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800d41e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d422:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d42a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800d42e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800d432:	2300      	movs	r3, #0
 800d434:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800d438:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800d43c:	460b      	mov	r3, r1
 800d43e:	4313      	orrs	r3, r2
 800d440:	d03d      	beq.n	800d4be <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 800d442:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d446:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d44a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d44e:	d01b      	beq.n	800d488 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 800d450:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d454:	d814      	bhi.n	800d480 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 800d456:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d45a:	d017      	beq.n	800d48c <HAL_RCCEx_PeriphCLKConfig+0xaec>
 800d45c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d460:	d80e      	bhi.n	800d480 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 800d462:	2b00      	cmp	r3, #0
 800d464:	d014      	beq.n	800d490 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 800d466:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d46a:	d109      	bne.n	800d480 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800d46c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d470:	3330      	adds	r3, #48	@ 0x30
 800d472:	4618      	mov	r0, r3
 800d474:	f004 fa4e 	bl	8011914 <RCCEx_PLL3_Config>
 800d478:	4603      	mov	r3, r0
 800d47a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 800d47e:	e008      	b.n	800d492 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d480:	2301      	movs	r3, #1
 800d482:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800d486:	e004      	b.n	800d492 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 800d488:	bf00      	nop
 800d48a:	e002      	b.n	800d492 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 800d48c:	bf00      	nop
 800d48e:	e000      	b.n	800d492 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 800d490:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d492:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800d496:	2b00      	cmp	r3, #0
 800d498:	d10d      	bne.n	800d4b6 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800d49a:	4b55      	ldr	r3, [pc, #340]	@ (800d5f0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800d49c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d4a0:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800d4a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d4a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d4ac:	4a50      	ldr	r2, [pc, #320]	@ (800d5f0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800d4ae:	430b      	orrs	r3, r1
 800d4b0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800d4b4:	e003      	b.n	800d4be <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d4b6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800d4ba:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800d4be:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d4c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4c6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800d4ca:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800d4d4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800d4d8:	460b      	mov	r3, r1
 800d4da:	4313      	orrs	r3, r2
 800d4dc:	d03d      	beq.n	800d55a <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 800d4de:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d4e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d4e6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800d4ea:	d01b      	beq.n	800d524 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 800d4ec:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800d4f0:	d814      	bhi.n	800d51c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 800d4f2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800d4f6:	d017      	beq.n	800d528 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 800d4f8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800d4fc:	d80e      	bhi.n	800d51c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d014      	beq.n	800d52c <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 800d502:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d506:	d109      	bne.n	800d51c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800d508:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d50c:	3330      	adds	r3, #48	@ 0x30
 800d50e:	4618      	mov	r0, r3
 800d510:	f004 fa00 	bl	8011914 <RCCEx_PLL3_Config>
 800d514:	4603      	mov	r3, r0
 800d516:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 800d51a:	e008      	b.n	800d52e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d51c:	2301      	movs	r3, #1
 800d51e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800d522:	e004      	b.n	800d52e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 800d524:	bf00      	nop
 800d526:	e002      	b.n	800d52e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 800d528:	bf00      	nop
 800d52a:	e000      	b.n	800d52e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 800d52c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d52e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800d532:	2b00      	cmp	r3, #0
 800d534:	d10d      	bne.n	800d552 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800d536:	4b2e      	ldr	r3, [pc, #184]	@ (800d5f0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800d538:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d53c:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800d540:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d544:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d548:	4a29      	ldr	r2, [pc, #164]	@ (800d5f0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800d54a:	430b      	orrs	r3, r1
 800d54c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800d550:	e003      	b.n	800d55a <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d552:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800d556:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d55a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d55e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d562:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800d566:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800d56a:	2300      	movs	r3, #0
 800d56c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800d570:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800d574:	460b      	mov	r3, r1
 800d576:	4313      	orrs	r3, r2
 800d578:	d040      	beq.n	800d5fc <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 800d57a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d57e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d582:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d586:	d01b      	beq.n	800d5c0 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 800d588:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d58c:	d814      	bhi.n	800d5b8 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 800d58e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d592:	d017      	beq.n	800d5c4 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800d594:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d598:	d80e      	bhi.n	800d5b8 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d014      	beq.n	800d5c8 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800d59e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d5a2:	d109      	bne.n	800d5b8 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800d5a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d5a8:	3330      	adds	r3, #48	@ 0x30
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	f004 f9b2 	bl	8011914 <RCCEx_PLL3_Config>
 800d5b0:	4603      	mov	r3, r0
 800d5b2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 800d5b6:	e008      	b.n	800d5ca <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d5b8:	2301      	movs	r3, #1
 800d5ba:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800d5be:	e004      	b.n	800d5ca <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 800d5c0:	bf00      	nop
 800d5c2:	e002      	b.n	800d5ca <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 800d5c4:	bf00      	nop
 800d5c6:	e000      	b.n	800d5ca <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 800d5c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d5ca:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d110      	bne.n	800d5f4 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800d5d2:	4b07      	ldr	r3, [pc, #28]	@ (800d5f0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800d5d4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d5d8:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800d5dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d5e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d5e4:	4a02      	ldr	r2, [pc, #8]	@ (800d5f0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800d5e6:	430b      	orrs	r3, r1
 800d5e8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800d5ec:	e006      	b.n	800d5fc <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 800d5ee:	bf00      	nop
 800d5f0:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d5f4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800d5f8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d5fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d600:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d604:	2100      	movs	r1, #0
 800d606:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 800d60a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d60e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800d612:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800d616:	460b      	mov	r3, r1
 800d618:	4313      	orrs	r3, r2
 800d61a:	d03d      	beq.n	800d698 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 800d61c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d620:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800d624:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800d628:	d01b      	beq.n	800d662 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 800d62a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800d62e:	d814      	bhi.n	800d65a <HAL_RCCEx_PeriphCLKConfig+0xcba>
 800d630:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d634:	d017      	beq.n	800d666 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 800d636:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d63a:	d80e      	bhi.n	800d65a <HAL_RCCEx_PeriphCLKConfig+0xcba>
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d014      	beq.n	800d66a <HAL_RCCEx_PeriphCLKConfig+0xcca>
 800d640:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d644:	d109      	bne.n	800d65a <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800d646:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d64a:	3330      	adds	r3, #48	@ 0x30
 800d64c:	4618      	mov	r0, r3
 800d64e:	f004 f961 	bl	8011914 <RCCEx_PLL3_Config>
 800d652:	4603      	mov	r3, r0
 800d654:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 800d658:	e008      	b.n	800d66c <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d65a:	2301      	movs	r3, #1
 800d65c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800d660:	e004      	b.n	800d66c <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800d662:	bf00      	nop
 800d664:	e002      	b.n	800d66c <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800d666:	bf00      	nop
 800d668:	e000      	b.n	800d66c <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800d66a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d66c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800d670:	2b00      	cmp	r3, #0
 800d672:	d10d      	bne.n	800d690 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800d674:	4bbe      	ldr	r3, [pc, #760]	@ (800d970 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800d676:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d67a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800d67e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d682:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800d686:	4aba      	ldr	r2, [pc, #744]	@ (800d970 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800d688:	430b      	orrs	r3, r1
 800d68a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800d68e:	e003      	b.n	800d698 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d690:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800d694:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 800d698:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d69c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6a0:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800d6a4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800d6ae:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800d6b2:	460b      	mov	r3, r1
 800d6b4:	4313      	orrs	r3, r2
 800d6b6:	d035      	beq.n	800d724 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 800d6b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d6bc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d6c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d6c4:	d015      	beq.n	800d6f2 <HAL_RCCEx_PeriphCLKConfig+0xd52>
 800d6c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d6ca:	d80e      	bhi.n	800d6ea <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d012      	beq.n	800d6f6 <HAL_RCCEx_PeriphCLKConfig+0xd56>
 800d6d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d6d4:	d109      	bne.n	800d6ea <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800d6d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d6da:	3330      	adds	r3, #48	@ 0x30
 800d6dc:	4618      	mov	r0, r3
 800d6de:	f004 f919 	bl	8011914 <RCCEx_PLL3_Config>
 800d6e2:	4603      	mov	r3, r0
 800d6e4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 800d6e8:	e006      	b.n	800d6f8 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d6ea:	2301      	movs	r3, #1
 800d6ec:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800d6f0:	e002      	b.n	800d6f8 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 800d6f2:	bf00      	nop
 800d6f4:	e000      	b.n	800d6f8 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 800d6f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d6f8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d10d      	bne.n	800d71c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 800d700:	4b9b      	ldr	r3, [pc, #620]	@ (800d970 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800d702:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d706:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 800d70a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d70e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d712:	4a97      	ldr	r2, [pc, #604]	@ (800d970 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800d714:	430b      	orrs	r3, r1
 800d716:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800d71a:	e003      	b.n	800d724 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d71c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800d720:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800d724:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d72c:	2100      	movs	r1, #0
 800d72e:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 800d732:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d736:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d73a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800d73e:	460b      	mov	r3, r1
 800d740:	4313      	orrs	r3, r2
 800d742:	d00e      	beq.n	800d762 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 800d744:	4b8a      	ldr	r3, [pc, #552]	@ (800d970 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800d746:	69db      	ldr	r3, [r3, #28]
 800d748:	4a89      	ldr	r2, [pc, #548]	@ (800d970 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800d74a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800d74e:	61d3      	str	r3, [r2, #28]
 800d750:	4b87      	ldr	r3, [pc, #540]	@ (800d970 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800d752:	69d9      	ldr	r1, [r3, #28]
 800d754:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d758:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800d75c:	4a84      	ldr	r2, [pc, #528]	@ (800d970 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800d75e:	430b      	orrs	r3, r1
 800d760:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d762:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d76a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800d76e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d772:	2300      	movs	r3, #0
 800d774:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800d778:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800d77c:	460b      	mov	r3, r1
 800d77e:	4313      	orrs	r3, r2
 800d780:	d055      	beq.n	800d82e <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 800d782:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d786:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800d78a:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800d78e:	d031      	beq.n	800d7f4 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 800d790:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800d794:	d82a      	bhi.n	800d7ec <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800d796:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d79a:	d02d      	beq.n	800d7f8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 800d79c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d7a0:	d824      	bhi.n	800d7ec <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800d7a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d7a6:	d029      	beq.n	800d7fc <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 800d7a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d7ac:	d81e      	bhi.n	800d7ec <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800d7ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d7b2:	d011      	beq.n	800d7d8 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 800d7b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d7b8:	d818      	bhi.n	800d7ec <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d020      	beq.n	800d800 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 800d7be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d7c2:	d113      	bne.n	800d7ec <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800d7c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d7c8:	3308      	adds	r3, #8
 800d7ca:	4618      	mov	r0, r3
 800d7cc:	f004 f80a 	bl	80117e4 <RCCEx_PLL2_Config>
 800d7d0:	4603      	mov	r3, r0
 800d7d2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 800d7d6:	e014      	b.n	800d802 <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800d7d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d7dc:	3330      	adds	r3, #48	@ 0x30
 800d7de:	4618      	mov	r0, r3
 800d7e0:	f004 f898 	bl	8011914 <RCCEx_PLL3_Config>
 800d7e4:	4603      	mov	r3, r0
 800d7e6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 800d7ea:	e00a      	b.n	800d802 <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d7ec:	2301      	movs	r3, #1
 800d7ee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800d7f2:	e006      	b.n	800d802 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 800d7f4:	bf00      	nop
 800d7f6:	e004      	b.n	800d802 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 800d7f8:	bf00      	nop
 800d7fa:	e002      	b.n	800d802 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 800d7fc:	bf00      	nop
 800d7fe:	e000      	b.n	800d802 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 800d800:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d802:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800d806:	2b00      	cmp	r3, #0
 800d808:	d10d      	bne.n	800d826 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800d80a:	4b59      	ldr	r3, [pc, #356]	@ (800d970 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800d80c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800d810:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800d814:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d818:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800d81c:	4a54      	ldr	r2, [pc, #336]	@ (800d970 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800d81e:	430b      	orrs	r3, r1
 800d820:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800d824:	e003      	b.n	800d82e <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d826:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800d82a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800d82e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d832:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d836:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800d83a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d83e:	2300      	movs	r3, #0
 800d840:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d844:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800d848:	460b      	mov	r3, r1
 800d84a:	4313      	orrs	r3, r2
 800d84c:	d055      	beq.n	800d8fa <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 800d84e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d852:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800d856:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800d85a:	d031      	beq.n	800d8c0 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 800d85c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800d860:	d82a      	bhi.n	800d8b8 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800d862:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d866:	d02d      	beq.n	800d8c4 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 800d868:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d86c:	d824      	bhi.n	800d8b8 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800d86e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d872:	d029      	beq.n	800d8c8 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 800d874:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d878:	d81e      	bhi.n	800d8b8 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800d87a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d87e:	d011      	beq.n	800d8a4 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 800d880:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d884:	d818      	bhi.n	800d8b8 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800d886:	2b00      	cmp	r3, #0
 800d888:	d020      	beq.n	800d8cc <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800d88a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d88e:	d113      	bne.n	800d8b8 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800d890:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d894:	3308      	adds	r3, #8
 800d896:	4618      	mov	r0, r3
 800d898:	f003 ffa4 	bl	80117e4 <RCCEx_PLL2_Config>
 800d89c:	4603      	mov	r3, r0
 800d89e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800d8a2:	e014      	b.n	800d8ce <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800d8a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d8a8:	3330      	adds	r3, #48	@ 0x30
 800d8aa:	4618      	mov	r0, r3
 800d8ac:	f004 f832 	bl	8011914 <RCCEx_PLL3_Config>
 800d8b0:	4603      	mov	r3, r0
 800d8b2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800d8b6:	e00a      	b.n	800d8ce <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d8b8:	2301      	movs	r3, #1
 800d8ba:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800d8be:	e006      	b.n	800d8ce <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 800d8c0:	bf00      	nop
 800d8c2:	e004      	b.n	800d8ce <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 800d8c4:	bf00      	nop
 800d8c6:	e002      	b.n	800d8ce <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 800d8c8:	bf00      	nop
 800d8ca:	e000      	b.n	800d8ce <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 800d8cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d8ce:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d10d      	bne.n	800d8f2 <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800d8d6:	4b26      	ldr	r3, [pc, #152]	@ (800d970 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800d8d8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800d8dc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800d8e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d8e4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800d8e8:	4a21      	ldr	r2, [pc, #132]	@ (800d970 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800d8ea:	430b      	orrs	r3, r1
 800d8ec:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800d8f0:	e003      	b.n	800d8fa <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d8f2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800d8f6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 800d8fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d8fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d902:	2100      	movs	r1, #0
 800d904:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 800d908:	f003 0320 	and.w	r3, r3, #32
 800d90c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d910:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800d914:	460b      	mov	r3, r1
 800d916:	4313      	orrs	r3, r2
 800d918:	d057      	beq.n	800d9ca <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 800d91a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d91e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800d922:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d926:	d033      	beq.n	800d990 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 800d928:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d92c:	d82c      	bhi.n	800d988 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800d92e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d932:	d02f      	beq.n	800d994 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 800d934:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d938:	d826      	bhi.n	800d988 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800d93a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d93e:	d02b      	beq.n	800d998 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 800d940:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d944:	d820      	bhi.n	800d988 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800d946:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d94a:	d013      	beq.n	800d974 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800d94c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d950:	d81a      	bhi.n	800d988 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800d952:	2b00      	cmp	r3, #0
 800d954:	d022      	beq.n	800d99c <HAL_RCCEx_PeriphCLKConfig+0xffc>
 800d956:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d95a:	d115      	bne.n	800d988 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800d95c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d960:	3308      	adds	r3, #8
 800d962:	4618      	mov	r0, r3
 800d964:	f003 ff3e 	bl	80117e4 <RCCEx_PLL2_Config>
 800d968:	4603      	mov	r3, r0
 800d96a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 800d96e:	e016      	b.n	800d99e <HAL_RCCEx_PeriphCLKConfig+0xffe>
 800d970:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800d974:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d978:	3330      	adds	r3, #48	@ 0x30
 800d97a:	4618      	mov	r0, r3
 800d97c:	f003 ffca 	bl	8011914 <RCCEx_PLL3_Config>
 800d980:	4603      	mov	r3, r0
 800d982:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 800d986:	e00a      	b.n	800d99e <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d988:	2301      	movs	r3, #1
 800d98a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800d98e:	e006      	b.n	800d99e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 800d990:	bf00      	nop
 800d992:	e004      	b.n	800d99e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 800d994:	bf00      	nop
 800d996:	e002      	b.n	800d99e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 800d998:	bf00      	nop
 800d99a:	e000      	b.n	800d99e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 800d99c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d99e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d10d      	bne.n	800d9c2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 800d9a6:	4bbb      	ldr	r3, [pc, #748]	@ (800dc94 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800d9a8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800d9ac:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800d9b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d9b4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800d9b8:	4ab6      	ldr	r2, [pc, #728]	@ (800dc94 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800d9ba:	430b      	orrs	r3, r1
 800d9bc:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800d9c0:	e003      	b.n	800d9ca <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d9c2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800d9c6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 800d9ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d9ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9d2:	2100      	movs	r1, #0
 800d9d4:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 800d9d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d9dc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800d9e0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800d9e4:	460b      	mov	r3, r1
 800d9e6:	4313      	orrs	r3, r2
 800d9e8:	d055      	beq.n	800da96 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 800d9ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800d9ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800d9f2:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800d9f6:	d031      	beq.n	800da5c <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 800d9f8:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800d9fc:	d82a      	bhi.n	800da54 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800d9fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800da02:	d02d      	beq.n	800da60 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 800da04:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800da08:	d824      	bhi.n	800da54 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800da0a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800da0e:	d029      	beq.n	800da64 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 800da10:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800da14:	d81e      	bhi.n	800da54 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800da16:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800da1a:	d011      	beq.n	800da40 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 800da1c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800da20:	d818      	bhi.n	800da54 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800da22:	2b00      	cmp	r3, #0
 800da24:	d020      	beq.n	800da68 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 800da26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800da2a:	d113      	bne.n	800da54 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800da2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800da30:	3308      	adds	r3, #8
 800da32:	4618      	mov	r0, r3
 800da34:	f003 fed6 	bl	80117e4 <RCCEx_PLL2_Config>
 800da38:	4603      	mov	r3, r0
 800da3a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 800da3e:	e014      	b.n	800da6a <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800da40:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800da44:	3330      	adds	r3, #48	@ 0x30
 800da46:	4618      	mov	r0, r3
 800da48:	f003 ff64 	bl	8011914 <RCCEx_PLL3_Config>
 800da4c:	4603      	mov	r3, r0
 800da4e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 800da52:	e00a      	b.n	800da6a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800da54:	2301      	movs	r3, #1
 800da56:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800da5a:	e006      	b.n	800da6a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800da5c:	bf00      	nop
 800da5e:	e004      	b.n	800da6a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800da60:	bf00      	nop
 800da62:	e002      	b.n	800da6a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800da64:	bf00      	nop
 800da66:	e000      	b.n	800da6a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800da68:	bf00      	nop
    }

    if (ret == HAL_OK)
 800da6a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d10d      	bne.n	800da8e <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 800da72:	4b88      	ldr	r3, [pc, #544]	@ (800dc94 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800da74:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800da78:	f423 01e0 	bic.w	r1, r3, #7340032	@ 0x700000
 800da7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800da80:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800da84:	4a83      	ldr	r2, [pc, #524]	@ (800dc94 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800da86:	430b      	orrs	r3, r1
 800da88:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800da8c:	e003      	b.n	800da96 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800da8e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800da92:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 800da96:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800da9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da9e:	2100      	movs	r1, #0
 800daa0:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 800daa4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800daa8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800daac:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800dab0:	460b      	mov	r3, r1
 800dab2:	4313      	orrs	r3, r2
 800dab4:	d055      	beq.n	800db62 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 800dab6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800daba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800dabe:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800dac2:	d031      	beq.n	800db28 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 800dac4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800dac8:	d82a      	bhi.n	800db20 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800daca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800dace:	d02d      	beq.n	800db2c <HAL_RCCEx_PeriphCLKConfig+0x118c>
 800dad0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800dad4:	d824      	bhi.n	800db20 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800dad6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800dada:	d029      	beq.n	800db30 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 800dadc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800dae0:	d81e      	bhi.n	800db20 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800dae2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800dae6:	d011      	beq.n	800db0c <HAL_RCCEx_PeriphCLKConfig+0x116c>
 800dae8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800daec:	d818      	bhi.n	800db20 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d020      	beq.n	800db34 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 800daf2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800daf6:	d113      	bne.n	800db20 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800daf8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800dafc:	3308      	adds	r3, #8
 800dafe:	4618      	mov	r0, r3
 800db00:	f003 fe70 	bl	80117e4 <RCCEx_PLL2_Config>
 800db04:	4603      	mov	r3, r0
 800db06:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 800db0a:	e014      	b.n	800db36 <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800db0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800db10:	3330      	adds	r3, #48	@ 0x30
 800db12:	4618      	mov	r0, r3
 800db14:	f003 fefe 	bl	8011914 <RCCEx_PLL3_Config>
 800db18:	4603      	mov	r3, r0
 800db1a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 800db1e:	e00a      	b.n	800db36 <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800db20:	2301      	movs	r3, #1
 800db22:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800db26:	e006      	b.n	800db36 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800db28:	bf00      	nop
 800db2a:	e004      	b.n	800db36 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800db2c:	bf00      	nop
 800db2e:	e002      	b.n	800db36 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800db30:	bf00      	nop
 800db32:	e000      	b.n	800db36 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800db34:	bf00      	nop
    }

    if (ret == HAL_OK)
 800db36:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d10d      	bne.n	800db5a <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 800db3e:	4b55      	ldr	r3, [pc, #340]	@ (800dc94 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800db40:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800db44:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800db48:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800db4c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800db50:	4a50      	ldr	r2, [pc, #320]	@ (800dc94 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800db52:	430b      	orrs	r3, r1
 800db54:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800db58:	e003      	b.n	800db62 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800db5a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800db5e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 800db62:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800db66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db6a:	2100      	movs	r1, #0
 800db6c:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 800db70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800db74:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800db78:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800db7c:	460b      	mov	r3, r1
 800db7e:	4313      	orrs	r3, r2
 800db80:	d055      	beq.n	800dc2e <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 800db82:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800db86:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800db8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800db8e:	d031      	beq.n	800dbf4 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 800db90:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800db94:	d82a      	bhi.n	800dbec <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800db96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800db9a:	d02d      	beq.n	800dbf8 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 800db9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dba0:	d824      	bhi.n	800dbec <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800dba2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800dba6:	d029      	beq.n	800dbfc <HAL_RCCEx_PeriphCLKConfig+0x125c>
 800dba8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800dbac:	d81e      	bhi.n	800dbec <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800dbae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800dbb2:	d011      	beq.n	800dbd8 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 800dbb4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800dbb8:	d818      	bhi.n	800dbec <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d020      	beq.n	800dc00 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 800dbbe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dbc2:	d113      	bne.n	800dbec <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800dbc4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800dbc8:	3308      	adds	r3, #8
 800dbca:	4618      	mov	r0, r3
 800dbcc:	f003 fe0a 	bl	80117e4 <RCCEx_PLL2_Config>
 800dbd0:	4603      	mov	r3, r0
 800dbd2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 800dbd6:	e014      	b.n	800dc02 <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800dbd8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800dbdc:	3330      	adds	r3, #48	@ 0x30
 800dbde:	4618      	mov	r0, r3
 800dbe0:	f003 fe98 	bl	8011914 <RCCEx_PLL3_Config>
 800dbe4:	4603      	mov	r3, r0
 800dbe6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 800dbea:	e00a      	b.n	800dc02 <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dbec:	2301      	movs	r3, #1
 800dbee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800dbf2:	e006      	b.n	800dc02 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 800dbf4:	bf00      	nop
 800dbf6:	e004      	b.n	800dc02 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 800dbf8:	bf00      	nop
 800dbfa:	e002      	b.n	800dc02 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 800dbfc:	bf00      	nop
 800dbfe:	e000      	b.n	800dc02 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 800dc00:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dc02:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d10d      	bne.n	800dc26 <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 800dc0a:	4b22      	ldr	r3, [pc, #136]	@ (800dc94 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800dc0c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800dc10:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800dc14:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800dc18:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800dc1c:	4a1d      	ldr	r2, [pc, #116]	@ (800dc94 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800dc1e:	430b      	orrs	r3, r1
 800dc20:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800dc24:	e003      	b.n	800dc2e <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dc26:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800dc2a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800dc2e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800dc32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc36:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800dc3a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800dc3e:	2300      	movs	r3, #0
 800dc40:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800dc44:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800dc48:	460b      	mov	r3, r1
 800dc4a:	4313      	orrs	r3, r2
 800dc4c:	d055      	beq.n	800dcfa <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800dc4e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800dc52:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800dc56:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800dc5a:	d035      	beq.n	800dcc8 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 800dc5c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800dc60:	d82e      	bhi.n	800dcc0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800dc62:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800dc66:	d031      	beq.n	800dccc <HAL_RCCEx_PeriphCLKConfig+0x132c>
 800dc68:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800dc6c:	d828      	bhi.n	800dcc0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800dc6e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800dc72:	d01b      	beq.n	800dcac <HAL_RCCEx_PeriphCLKConfig+0x130c>
 800dc74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800dc78:	d822      	bhi.n	800dcc0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d003      	beq.n	800dc86 <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 800dc7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dc82:	d009      	beq.n	800dc98 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 800dc84:	e01c      	b.n	800dcc0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dc86:	4b03      	ldr	r3, [pc, #12]	@ (800dc94 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800dc88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc8a:	4a02      	ldr	r2, [pc, #8]	@ (800dc94 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800dc8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dc90:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800dc92:	e01c      	b.n	800dcce <HAL_RCCEx_PeriphCLKConfig+0x132e>
 800dc94:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800dc98:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800dc9c:	3308      	adds	r3, #8
 800dc9e:	4618      	mov	r0, r3
 800dca0:	f003 fda0 	bl	80117e4 <RCCEx_PLL2_Config>
 800dca4:	4603      	mov	r3, r0
 800dca6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800dcaa:	e010      	b.n	800dcce <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800dcac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800dcb0:	3330      	adds	r3, #48	@ 0x30
 800dcb2:	4618      	mov	r0, r3
 800dcb4:	f003 fe2e 	bl	8011914 <RCCEx_PLL3_Config>
 800dcb8:	4603      	mov	r3, r0
 800dcba:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800dcbe:	e006      	b.n	800dcce <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dcc0:	2301      	movs	r3, #1
 800dcc2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800dcc6:	e002      	b.n	800dcce <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 800dcc8:	bf00      	nop
 800dcca:	e000      	b.n	800dcce <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 800dccc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dcce:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d10d      	bne.n	800dcf2 <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800dcd6:	4bc3      	ldr	r3, [pc, #780]	@ (800dfe4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800dcd8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800dcdc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800dce0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800dce4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800dce8:	4abe      	ldr	r2, [pc, #760]	@ (800dfe4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800dcea:	430b      	orrs	r3, r1
 800dcec:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800dcf0:	e003      	b.n	800dcfa <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dcf2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800dcf6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 800dcfa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800dcfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd02:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800dd06:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800dd10:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800dd14:	460b      	mov	r3, r1
 800dd16:	4313      	orrs	r3, r2
 800dd18:	d051      	beq.n	800ddbe <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800dd1a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800dd1e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800dd22:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800dd26:	d033      	beq.n	800dd90 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 800dd28:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800dd2c:	d82c      	bhi.n	800dd88 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800dd2e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800dd32:	d02d      	beq.n	800dd90 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 800dd34:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800dd38:	d826      	bhi.n	800dd88 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800dd3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dd3e:	d019      	beq.n	800dd74 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 800dd40:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dd44:	d820      	bhi.n	800dd88 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d003      	beq.n	800dd52 <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 800dd4a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800dd4e:	d007      	beq.n	800dd60 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 800dd50:	e01a      	b.n	800dd88 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dd52:	4ba4      	ldr	r3, [pc, #656]	@ (800dfe4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800dd54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd56:	4aa3      	ldr	r2, [pc, #652]	@ (800dfe4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800dd58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dd5c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800dd5e:	e018      	b.n	800dd92 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800dd60:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800dd64:	3308      	adds	r3, #8
 800dd66:	4618      	mov	r0, r3
 800dd68:	f003 fd3c 	bl	80117e4 <RCCEx_PLL2_Config>
 800dd6c:	4603      	mov	r3, r0
 800dd6e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800dd72:	e00e      	b.n	800dd92 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800dd74:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800dd78:	3330      	adds	r3, #48	@ 0x30
 800dd7a:	4618      	mov	r0, r3
 800dd7c:	f003 fdca 	bl	8011914 <RCCEx_PLL3_Config>
 800dd80:	4603      	mov	r3, r0
 800dd82:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800dd86:	e004      	b.n	800dd92 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dd88:	2301      	movs	r3, #1
 800dd8a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800dd8e:	e000      	b.n	800dd92 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 800dd90:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dd92:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d10d      	bne.n	800ddb6 <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800dd9a:	4b92      	ldr	r3, [pc, #584]	@ (800dfe4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800dd9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800dda0:	f423 1160 	bic.w	r1, r3, #3670016	@ 0x380000
 800dda4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800dda8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800ddac:	4a8d      	ldr	r2, [pc, #564]	@ (800dfe4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800ddae:	430b      	orrs	r3, r1
 800ddb0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800ddb4:	e003      	b.n	800ddbe <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ddb6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800ddba:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800ddbe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ddc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddc6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800ddca:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ddcc:	2300      	movs	r3, #0
 800ddce:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ddd0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800ddd4:	460b      	mov	r3, r1
 800ddd6:	4313      	orrs	r3, r2
 800ddd8:	d032      	beq.n	800de40 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800ddda:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ddde:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800dde2:	2b05      	cmp	r3, #5
 800dde4:	d80f      	bhi.n	800de06 <HAL_RCCEx_PeriphCLKConfig+0x1466>
 800dde6:	2b03      	cmp	r3, #3
 800dde8:	d211      	bcs.n	800de0e <HAL_RCCEx_PeriphCLKConfig+0x146e>
 800ddea:	2b01      	cmp	r3, #1
 800ddec:	d911      	bls.n	800de12 <HAL_RCCEx_PeriphCLKConfig+0x1472>
 800ddee:	2b02      	cmp	r3, #2
 800ddf0:	d109      	bne.n	800de06 <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800ddf2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ddf6:	3308      	adds	r3, #8
 800ddf8:	4618      	mov	r0, r3
 800ddfa:	f003 fcf3 	bl	80117e4 <RCCEx_PLL2_Config>
 800ddfe:	4603      	mov	r3, r0
 800de00:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800de04:	e006      	b.n	800de14 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 800de06:	2301      	movs	r3, #1
 800de08:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800de0c:	e002      	b.n	800de14 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 800de0e:	bf00      	nop
 800de10:	e000      	b.n	800de14 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 800de12:	bf00      	nop
    }

    if (ret == HAL_OK)
 800de14:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d10d      	bne.n	800de38 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800de1c:	4b71      	ldr	r3, [pc, #452]	@ (800dfe4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800de1e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800de22:	f023 0107 	bic.w	r1, r3, #7
 800de26:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800de2a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800de2e:	4a6d      	ldr	r2, [pc, #436]	@ (800dfe4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800de30:	430b      	orrs	r3, r1
 800de32:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800de36:	e003      	b.n	800de40 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800de38:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800de3c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 800de40:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800de44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de48:	2100      	movs	r1, #0
 800de4a:	6739      	str	r1, [r7, #112]	@ 0x70
 800de4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800de50:	677b      	str	r3, [r7, #116]	@ 0x74
 800de52:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800de56:	460b      	mov	r3, r1
 800de58:	4313      	orrs	r3, r2
 800de5a:	d024      	beq.n	800dea6 <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 800de5c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800de60:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800de64:	2b00      	cmp	r3, #0
 800de66:	d005      	beq.n	800de74 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 800de68:	2b08      	cmp	r3, #8
 800de6a:	d005      	beq.n	800de78 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800de6c:	2301      	movs	r3, #1
 800de6e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800de72:	e002      	b.n	800de7a <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 800de74:	bf00      	nop
 800de76:	e000      	b.n	800de7a <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 800de78:	bf00      	nop
    }

    if (ret == HAL_OK)
 800de7a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d10d      	bne.n	800de9e <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 800de82:	4b58      	ldr	r3, [pc, #352]	@ (800dfe4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800de84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800de88:	f023 0108 	bic.w	r1, r3, #8
 800de8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800de90:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800de94:	4a53      	ldr	r2, [pc, #332]	@ (800dfe4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800de96:	430b      	orrs	r3, r1
 800de98:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800de9c:	e003      	b.n	800dea6 <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800de9e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800dea2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800dea6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800deaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deae:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800deb2:	66bb      	str	r3, [r7, #104]	@ 0x68
 800deb4:	2300      	movs	r3, #0
 800deb6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800deb8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800debc:	460b      	mov	r3, r1
 800debe:	4313      	orrs	r3, r2
 800dec0:	f000 80b9 	beq.w	800e036 <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 800dec4:	4b48      	ldr	r3, [pc, #288]	@ (800dfe8 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800dec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dec8:	4a47      	ldr	r2, [pc, #284]	@ (800dfe8 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800deca:	f043 0301 	orr.w	r3, r3, #1
 800dece:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ded0:	f7f7 fd7e 	bl	80059d0 <HAL_GetTick>
 800ded4:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800ded8:	e00b      	b.n	800def2 <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800deda:	f7f7 fd79 	bl	80059d0 <HAL_GetTick>
 800dede:	4602      	mov	r2, r0
 800dee0:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800dee4:	1ad3      	subs	r3, r2, r3
 800dee6:	2b02      	cmp	r3, #2
 800dee8:	d903      	bls.n	800def2 <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 800deea:	2303      	movs	r3, #3
 800deec:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800def0:	e005      	b.n	800defe <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800def2:	4b3d      	ldr	r3, [pc, #244]	@ (800dfe8 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800def4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800def6:	f003 0301 	and.w	r3, r3, #1
 800defa:	2b00      	cmp	r3, #0
 800defc:	d0ed      	beq.n	800deda <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 800defe:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800df02:	2b00      	cmp	r3, #0
 800df04:	f040 8093 	bne.w	800e02e <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800df08:	4b36      	ldr	r3, [pc, #216]	@ (800dfe4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800df0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800df0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800df12:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800df16:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d023      	beq.n	800df66 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 800df1e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800df22:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 800df26:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800df2a:	4293      	cmp	r3, r2
 800df2c:	d01b      	beq.n	800df66 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800df2e:	4b2d      	ldr	r3, [pc, #180]	@ (800dfe4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800df30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800df34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800df38:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800df3c:	4b29      	ldr	r3, [pc, #164]	@ (800dfe4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800df3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800df42:	4a28      	ldr	r2, [pc, #160]	@ (800dfe4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800df44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800df48:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800df4c:	4b25      	ldr	r3, [pc, #148]	@ (800dfe4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800df4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800df52:	4a24      	ldr	r2, [pc, #144]	@ (800dfe4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800df54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800df58:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800df5c:	4a21      	ldr	r2, [pc, #132]	@ (800dfe4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800df5e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800df62:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800df66:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800df6a:	f003 0301 	and.w	r3, r3, #1
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d019      	beq.n	800dfa6 <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800df72:	f7f7 fd2d 	bl	80059d0 <HAL_GetTick>
 800df76:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800df7a:	e00d      	b.n	800df98 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800df7c:	f7f7 fd28 	bl	80059d0 <HAL_GetTick>
 800df80:	4602      	mov	r2, r0
 800df82:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800df86:	1ad2      	subs	r2, r2, r3
 800df88:	f241 3388 	movw	r3, #5000	@ 0x1388
 800df8c:	429a      	cmp	r2, r3
 800df8e:	d903      	bls.n	800df98 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 800df90:	2303      	movs	r3, #3
 800df92:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
            break;
 800df96:	e006      	b.n	800dfa6 <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800df98:	4b12      	ldr	r3, [pc, #72]	@ (800dfe4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800df9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800df9e:	f003 0302 	and.w	r3, r3, #2
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d0ea      	beq.n	800df7c <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 800dfa6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d13a      	bne.n	800e024 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800dfae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800dfb2:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 800dfb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800dfba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800dfbe:	d115      	bne.n	800dfec <HAL_RCCEx_PeriphCLKConfig+0x164c>
 800dfc0:	4b08      	ldr	r3, [pc, #32]	@ (800dfe4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800dfc2:	69db      	ldr	r3, [r3, #28]
 800dfc4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800dfc8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800dfcc:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 800dfd0:	091b      	lsrs	r3, r3, #4
 800dfd2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800dfd6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800dfda:	4a02      	ldr	r2, [pc, #8]	@ (800dfe4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800dfdc:	430b      	orrs	r3, r1
 800dfde:	61d3      	str	r3, [r2, #28]
 800dfe0:	e00a      	b.n	800dff8 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 800dfe2:	bf00      	nop
 800dfe4:	44020c00 	.word	0x44020c00
 800dfe8:	44020800 	.word	0x44020800
 800dfec:	4b9f      	ldr	r3, [pc, #636]	@ (800e26c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800dfee:	69db      	ldr	r3, [r3, #28]
 800dff0:	4a9e      	ldr	r2, [pc, #632]	@ (800e26c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800dff2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800dff6:	61d3      	str	r3, [r2, #28]
 800dff8:	4b9c      	ldr	r3, [pc, #624]	@ (800e26c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800dffa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800dffe:	4a9b      	ldr	r2, [pc, #620]	@ (800e26c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800e000:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e004:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800e008:	4b98      	ldr	r3, [pc, #608]	@ (800e26c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800e00a:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 800e00e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e012:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 800e016:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e01a:	4a94      	ldr	r2, [pc, #592]	@ (800e26c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800e01c:	430b      	orrs	r3, r1
 800e01e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800e022:	e008      	b.n	800e036 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800e024:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800e028:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
 800e02c:	e003      	b.n	800e036 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e02e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800e032:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800e036:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e03a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e03e:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800e042:	663b      	str	r3, [r7, #96]	@ 0x60
 800e044:	2300      	movs	r3, #0
 800e046:	667b      	str	r3, [r7, #100]	@ 0x64
 800e048:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800e04c:	460b      	mov	r3, r1
 800e04e:	4313      	orrs	r3, r2
 800e050:	d035      	beq.n	800e0be <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800e052:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e056:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800e05a:	2b30      	cmp	r3, #48	@ 0x30
 800e05c:	d014      	beq.n	800e088 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 800e05e:	2b30      	cmp	r3, #48	@ 0x30
 800e060:	d80e      	bhi.n	800e080 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 800e062:	2b20      	cmp	r3, #32
 800e064:	d012      	beq.n	800e08c <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 800e066:	2b20      	cmp	r3, #32
 800e068:	d80a      	bhi.n	800e080 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d010      	beq.n	800e090 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 800e06e:	2b10      	cmp	r3, #16
 800e070:	d106      	bne.n	800e080 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e072:	4b7e      	ldr	r3, [pc, #504]	@ (800e26c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800e074:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e076:	4a7d      	ldr	r2, [pc, #500]	@ (800e26c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800e078:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e07c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 800e07e:	e008      	b.n	800e092 <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e080:	2301      	movs	r3, #1
 800e082:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800e086:	e004      	b.n	800e092 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 800e088:	bf00      	nop
 800e08a:	e002      	b.n	800e092 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 800e08c:	bf00      	nop
 800e08e:	e000      	b.n	800e092 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 800e090:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e092:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800e096:	2b00      	cmp	r3, #0
 800e098:	d10d      	bne.n	800e0b6 <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800e09a:	4b74      	ldr	r3, [pc, #464]	@ (800e26c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800e09c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800e0a0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800e0a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e0a8:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800e0ac:	4a6f      	ldr	r2, [pc, #444]	@ (800e26c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800e0ae:	430b      	orrs	r3, r1
 800e0b0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800e0b4:	e003      	b.n	800e0be <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e0b6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800e0ba:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800e0be:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e0c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0c6:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800e0ca:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e0cc:	2300      	movs	r3, #0
 800e0ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e0d0:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800e0d4:	460b      	mov	r3, r1
 800e0d6:	4313      	orrs	r3, r2
 800e0d8:	d033      	beq.n	800e142 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 800e0da:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e0de:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d002      	beq.n	800e0ec <HAL_RCCEx_PeriphCLKConfig+0x174c>
 800e0e6:	2b40      	cmp	r3, #64	@ 0x40
 800e0e8:	d007      	beq.n	800e0fa <HAL_RCCEx_PeriphCLKConfig+0x175a>
 800e0ea:	e010      	b.n	800e10e <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e0ec:	4b5f      	ldr	r3, [pc, #380]	@ (800e26c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800e0ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e0f0:	4a5e      	ldr	r2, [pc, #376]	@ (800e26c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800e0f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e0f6:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 800e0f8:	e00d      	b.n	800e116 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800e0fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e0fe:	3308      	adds	r3, #8
 800e100:	4618      	mov	r0, r3
 800e102:	f003 fb6f 	bl	80117e4 <RCCEx_PLL2_Config>
 800e106:	4603      	mov	r3, r0
 800e108:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 800e10c:	e003      	b.n	800e116 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 800e10e:	2301      	movs	r3, #1
 800e110:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800e114:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e116:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d10d      	bne.n	800e13a <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 800e11e:	4b53      	ldr	r3, [pc, #332]	@ (800e26c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800e120:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e124:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 800e128:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e12c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800e130:	4a4e      	ldr	r2, [pc, #312]	@ (800e26c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800e132:	430b      	orrs	r3, r1
 800e134:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800e138:	e003      	b.n	800e142 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e13a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800e13e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800e142:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e14a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800e14e:	653b      	str	r3, [r7, #80]	@ 0x50
 800e150:	2300      	movs	r3, #0
 800e152:	657b      	str	r3, [r7, #84]	@ 0x54
 800e154:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800e158:	460b      	mov	r3, r1
 800e15a:	4313      	orrs	r3, r2
 800e15c:	d033      	beq.n	800e1c6 <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 800e15e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e162:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800e166:	2b00      	cmp	r3, #0
 800e168:	d002      	beq.n	800e170 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 800e16a:	2b80      	cmp	r3, #128	@ 0x80
 800e16c:	d007      	beq.n	800e17e <HAL_RCCEx_PeriphCLKConfig+0x17de>
 800e16e:	e010      	b.n	800e192 <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e170:	4b3e      	ldr	r3, [pc, #248]	@ (800e26c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800e172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e174:	4a3d      	ldr	r2, [pc, #244]	@ (800e26c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800e176:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e17a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 800e17c:	e00d      	b.n	800e19a <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800e17e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e182:	3308      	adds	r3, #8
 800e184:	4618      	mov	r0, r3
 800e186:	f003 fb2d 	bl	80117e4 <RCCEx_PLL2_Config>
 800e18a:	4603      	mov	r3, r0
 800e18c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 800e190:	e003      	b.n	800e19a <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 800e192:	2301      	movs	r3, #1
 800e194:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800e198:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e19a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d10d      	bne.n	800e1be <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 800e1a2:	4b32      	ldr	r3, [pc, #200]	@ (800e26c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800e1a4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e1a8:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 800e1ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e1b0:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800e1b4:	4a2d      	ldr	r2, [pc, #180]	@ (800e26c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800e1b6:	430b      	orrs	r3, r1
 800e1b8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800e1bc:	e003      	b.n	800e1c6 <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e1be:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800e1c2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800e1c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1ce:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 800e1d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e1d4:	2300      	movs	r3, #0
 800e1d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e1d8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800e1dc:	460b      	mov	r3, r1
 800e1de:	4313      	orrs	r3, r2
 800e1e0:	d04a      	beq.n	800e278 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 800e1e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e1e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e1ea:	2b04      	cmp	r3, #4
 800e1ec:	d827      	bhi.n	800e23e <HAL_RCCEx_PeriphCLKConfig+0x189e>
 800e1ee:	a201      	add	r2, pc, #4	@ (adr r2, 800e1f4 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 800e1f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1f4:	0800e209 	.word	0x0800e209
 800e1f8:	0800e217 	.word	0x0800e217
 800e1fc:	0800e22b 	.word	0x0800e22b
 800e200:	0800e247 	.word	0x0800e247
 800e204:	0800e247 	.word	0x0800e247
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e208:	4b18      	ldr	r3, [pc, #96]	@ (800e26c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800e20a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e20c:	4a17      	ldr	r2, [pc, #92]	@ (800e26c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800e20e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e212:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800e214:	e018      	b.n	800e248 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800e216:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e21a:	3308      	adds	r3, #8
 800e21c:	4618      	mov	r0, r3
 800e21e:	f003 fae1 	bl	80117e4 <RCCEx_PLL2_Config>
 800e222:	4603      	mov	r3, r0
 800e224:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800e228:	e00e      	b.n	800e248 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800e22a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e22e:	3330      	adds	r3, #48	@ 0x30
 800e230:	4618      	mov	r0, r3
 800e232:	f003 fb6f 	bl	8011914 <RCCEx_PLL3_Config>
 800e236:	4603      	mov	r3, r0
 800e238:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800e23c:	e004      	b.n	800e248 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e23e:	2301      	movs	r3, #1
 800e240:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800e244:	e000      	b.n	800e248 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 800e246:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e248:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d10f      	bne.n	800e270 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800e250:	4b06      	ldr	r3, [pc, #24]	@ (800e26c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800e252:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e256:	f023 0107 	bic.w	r1, r3, #7
 800e25a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e25e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e262:	4a02      	ldr	r2, [pc, #8]	@ (800e26c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800e264:	430b      	orrs	r3, r1
 800e266:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800e26a:	e005      	b.n	800e278 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 800e26c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e270:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800e274:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800e278:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e27c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e280:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800e284:	643b      	str	r3, [r7, #64]	@ 0x40
 800e286:	2300      	movs	r3, #0
 800e288:	647b      	str	r3, [r7, #68]	@ 0x44
 800e28a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800e28e:	460b      	mov	r3, r1
 800e290:	4313      	orrs	r3, r2
 800e292:	f000 8081 	beq.w	800e398 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 800e296:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e29a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e29e:	2b20      	cmp	r3, #32
 800e2a0:	d85f      	bhi.n	800e362 <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 800e2a2:	a201      	add	r2, pc, #4	@ (adr r2, 800e2a8 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 800e2a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2a8:	0800e32d 	.word	0x0800e32d
 800e2ac:	0800e363 	.word	0x0800e363
 800e2b0:	0800e363 	.word	0x0800e363
 800e2b4:	0800e363 	.word	0x0800e363
 800e2b8:	0800e363 	.word	0x0800e363
 800e2bc:	0800e363 	.word	0x0800e363
 800e2c0:	0800e363 	.word	0x0800e363
 800e2c4:	0800e363 	.word	0x0800e363
 800e2c8:	0800e33b 	.word	0x0800e33b
 800e2cc:	0800e363 	.word	0x0800e363
 800e2d0:	0800e363 	.word	0x0800e363
 800e2d4:	0800e363 	.word	0x0800e363
 800e2d8:	0800e363 	.word	0x0800e363
 800e2dc:	0800e363 	.word	0x0800e363
 800e2e0:	0800e363 	.word	0x0800e363
 800e2e4:	0800e363 	.word	0x0800e363
 800e2e8:	0800e34f 	.word	0x0800e34f
 800e2ec:	0800e363 	.word	0x0800e363
 800e2f0:	0800e363 	.word	0x0800e363
 800e2f4:	0800e363 	.word	0x0800e363
 800e2f8:	0800e363 	.word	0x0800e363
 800e2fc:	0800e363 	.word	0x0800e363
 800e300:	0800e363 	.word	0x0800e363
 800e304:	0800e363 	.word	0x0800e363
 800e308:	0800e36b 	.word	0x0800e36b
 800e30c:	0800e363 	.word	0x0800e363
 800e310:	0800e363 	.word	0x0800e363
 800e314:	0800e363 	.word	0x0800e363
 800e318:	0800e363 	.word	0x0800e363
 800e31c:	0800e363 	.word	0x0800e363
 800e320:	0800e363 	.word	0x0800e363
 800e324:	0800e363 	.word	0x0800e363
 800e328:	0800e36b 	.word	0x0800e36b
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e32c:	4bab      	ldr	r3, [pc, #684]	@ (800e5dc <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800e32e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e330:	4aaa      	ldr	r2, [pc, #680]	@ (800e5dc <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800e332:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e336:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800e338:	e018      	b.n	800e36c <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800e33a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e33e:	3308      	adds	r3, #8
 800e340:	4618      	mov	r0, r3
 800e342:	f003 fa4f 	bl	80117e4 <RCCEx_PLL2_Config>
 800e346:	4603      	mov	r3, r0
 800e348:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800e34c:	e00e      	b.n	800e36c <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800e34e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e352:	3330      	adds	r3, #48	@ 0x30
 800e354:	4618      	mov	r0, r3
 800e356:	f003 fadd 	bl	8011914 <RCCEx_PLL3_Config>
 800e35a:	4603      	mov	r3, r0
 800e35c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800e360:	e004      	b.n	800e36c <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e362:	2301      	movs	r3, #1
 800e364:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800e368:	e000      	b.n	800e36c <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 800e36a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e36c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800e370:	2b00      	cmp	r3, #0
 800e372:	d10d      	bne.n	800e390 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800e374:	4b99      	ldr	r3, [pc, #612]	@ (800e5dc <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800e376:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e37a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800e37e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e382:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e386:	4a95      	ldr	r2, [pc, #596]	@ (800e5dc <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800e388:	430b      	orrs	r3, r1
 800e38a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800e38e:	e003      	b.n	800e398 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e390:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800e394:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800e398:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e39c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3a0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800e3a4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e3a6:	2300      	movs	r3, #0
 800e3a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e3aa:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800e3ae:	460b      	mov	r3, r1
 800e3b0:	4313      	orrs	r3, r2
 800e3b2:	d04e      	beq.n	800e452 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 800e3b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e3b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800e3bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e3c0:	d02e      	beq.n	800e420 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 800e3c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e3c6:	d827      	bhi.n	800e418 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 800e3c8:	2bc0      	cmp	r3, #192	@ 0xc0
 800e3ca:	d02b      	beq.n	800e424 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 800e3cc:	2bc0      	cmp	r3, #192	@ 0xc0
 800e3ce:	d823      	bhi.n	800e418 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 800e3d0:	2b80      	cmp	r3, #128	@ 0x80
 800e3d2:	d017      	beq.n	800e404 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 800e3d4:	2b80      	cmp	r3, #128	@ 0x80
 800e3d6:	d81f      	bhi.n	800e418 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d002      	beq.n	800e3e2 <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 800e3dc:	2b40      	cmp	r3, #64	@ 0x40
 800e3de:	d007      	beq.n	800e3f0 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 800e3e0:	e01a      	b.n	800e418 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e3e2:	4b7e      	ldr	r3, [pc, #504]	@ (800e5dc <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800e3e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e3e6:	4a7d      	ldr	r2, [pc, #500]	@ (800e5dc <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800e3e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e3ec:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800e3ee:	e01a      	b.n	800e426 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800e3f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e3f4:	3308      	adds	r3, #8
 800e3f6:	4618      	mov	r0, r3
 800e3f8:	f003 f9f4 	bl	80117e4 <RCCEx_PLL2_Config>
 800e3fc:	4603      	mov	r3, r0
 800e3fe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800e402:	e010      	b.n	800e426 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800e404:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e408:	3330      	adds	r3, #48	@ 0x30
 800e40a:	4618      	mov	r0, r3
 800e40c:	f003 fa82 	bl	8011914 <RCCEx_PLL3_Config>
 800e410:	4603      	mov	r3, r0
 800e412:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800e416:	e006      	b.n	800e426 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e418:	2301      	movs	r3, #1
 800e41a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800e41e:	e002      	b.n	800e426 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 800e420:	bf00      	nop
 800e422:	e000      	b.n	800e426 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 800e424:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e426:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d10d      	bne.n	800e44a <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800e42e:	4b6b      	ldr	r3, [pc, #428]	@ (800e5dc <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800e430:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e434:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800e438:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e43c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800e440:	4a66      	ldr	r2, [pc, #408]	@ (800e5dc <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800e442:	430b      	orrs	r3, r1
 800e444:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800e448:	e003      	b.n	800e452 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e44a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800e44e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 800e452:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e45a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800e45e:	633b      	str	r3, [r7, #48]	@ 0x30
 800e460:	2300      	movs	r3, #0
 800e462:	637b      	str	r3, [r7, #52]	@ 0x34
 800e464:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800e468:	460b      	mov	r3, r1
 800e46a:	4313      	orrs	r3, r2
 800e46c:	d055      	beq.n	800e51a <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 800e46e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e472:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800e476:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800e47a:	d031      	beq.n	800e4e0 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 800e47c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800e480:	d82a      	bhi.n	800e4d8 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800e482:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e486:	d02d      	beq.n	800e4e4 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 800e488:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e48c:	d824      	bhi.n	800e4d8 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800e48e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800e492:	d029      	beq.n	800e4e8 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 800e494:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800e498:	d81e      	bhi.n	800e4d8 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800e49a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e49e:	d011      	beq.n	800e4c4 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 800e4a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e4a4:	d818      	bhi.n	800e4d8 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d020      	beq.n	800e4ec <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 800e4aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e4ae:	d113      	bne.n	800e4d8 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800e4b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e4b4:	3308      	adds	r3, #8
 800e4b6:	4618      	mov	r0, r3
 800e4b8:	f003 f994 	bl	80117e4 <RCCEx_PLL2_Config>
 800e4bc:	4603      	mov	r3, r0
 800e4be:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 800e4c2:	e014      	b.n	800e4ee <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800e4c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e4c8:	3330      	adds	r3, #48	@ 0x30
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	f003 fa22 	bl	8011914 <RCCEx_PLL3_Config>
 800e4d0:	4603      	mov	r3, r0
 800e4d2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 800e4d6:	e00a      	b.n	800e4ee <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e4d8:	2301      	movs	r3, #1
 800e4da:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800e4de:	e006      	b.n	800e4ee <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 800e4e0:	bf00      	nop
 800e4e2:	e004      	b.n	800e4ee <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 800e4e4:	bf00      	nop
 800e4e6:	e002      	b.n	800e4ee <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 800e4e8:	bf00      	nop
 800e4ea:	e000      	b.n	800e4ee <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 800e4ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e4ee:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d10d      	bne.n	800e512 <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 800e4f6:	4b39      	ldr	r3, [pc, #228]	@ (800e5dc <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800e4f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e4fc:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 800e500:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e504:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800e508:	4a34      	ldr	r2, [pc, #208]	@ (800e5dc <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800e50a:	430b      	orrs	r3, r1
 800e50c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800e510:	e003      	b.n	800e51a <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e512:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800e516:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 800e51a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e51e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e522:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800e526:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e528:	2300      	movs	r3, #0
 800e52a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e52c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800e530:	460b      	mov	r3, r1
 800e532:	4313      	orrs	r3, r2
 800e534:	d058      	beq.n	800e5e8 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 800e536:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e53a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e53e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800e542:	d031      	beq.n	800e5a8 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 800e544:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800e548:	d82a      	bhi.n	800e5a0 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800e54a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e54e:	d02d      	beq.n	800e5ac <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 800e550:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e554:	d824      	bhi.n	800e5a0 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800e556:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800e55a:	d029      	beq.n	800e5b0 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 800e55c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800e560:	d81e      	bhi.n	800e5a0 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800e562:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e566:	d011      	beq.n	800e58c <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 800e568:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e56c:	d818      	bhi.n	800e5a0 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d020      	beq.n	800e5b4 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 800e572:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e576:	d113      	bne.n	800e5a0 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800e578:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e57c:	3308      	adds	r3, #8
 800e57e:	4618      	mov	r0, r3
 800e580:	f003 f930 	bl	80117e4 <RCCEx_PLL2_Config>
 800e584:	4603      	mov	r3, r0
 800e586:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 800e58a:	e014      	b.n	800e5b6 <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800e58c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e590:	3330      	adds	r3, #48	@ 0x30
 800e592:	4618      	mov	r0, r3
 800e594:	f003 f9be 	bl	8011914 <RCCEx_PLL3_Config>
 800e598:	4603      	mov	r3, r0
 800e59a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 800e59e:	e00a      	b.n	800e5b6 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e5a0:	2301      	movs	r3, #1
 800e5a2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800e5a6:	e006      	b.n	800e5b6 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 800e5a8:	bf00      	nop
 800e5aa:	e004      	b.n	800e5b6 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 800e5ac:	bf00      	nop
 800e5ae:	e002      	b.n	800e5b6 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 800e5b0:	bf00      	nop
 800e5b2:	e000      	b.n	800e5b6 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 800e5b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e5b6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d110      	bne.n	800e5e0 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 800e5be:	4b07      	ldr	r3, [pc, #28]	@ (800e5dc <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800e5c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e5c4:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800e5c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e5cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e5d0:	4902      	ldr	r1, [pc, #8]	@ (800e5dc <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800e5d2:	4313      	orrs	r3, r2
 800e5d4:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800e5d8:	e006      	b.n	800e5e8 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 800e5da:	bf00      	nop
 800e5dc:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e5e0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800e5e4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800e5e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e5ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5f0:	2100      	movs	r1, #0
 800e5f2:	6239      	str	r1, [r7, #32]
 800e5f4:	f003 0301 	and.w	r3, r3, #1
 800e5f8:	627b      	str	r3, [r7, #36]	@ 0x24
 800e5fa:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800e5fe:	460b      	mov	r3, r1
 800e600:	4313      	orrs	r3, r2
 800e602:	d055      	beq.n	800e6b0 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 800e604:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e608:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800e60c:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800e610:	d031      	beq.n	800e676 <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 800e612:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800e616:	d82a      	bhi.n	800e66e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 800e618:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e61c:	d02d      	beq.n	800e67a <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 800e61e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e622:	d824      	bhi.n	800e66e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 800e624:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800e628:	d029      	beq.n	800e67e <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 800e62a:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800e62e:	d81e      	bhi.n	800e66e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 800e630:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e634:	d011      	beq.n	800e65a <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 800e636:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e63a:	d818      	bhi.n	800e66e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d020      	beq.n	800e682 <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 800e640:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e644:	d113      	bne.n	800e66e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800e646:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e64a:	3308      	adds	r3, #8
 800e64c:	4618      	mov	r0, r3
 800e64e:	f003 f8c9 	bl	80117e4 <RCCEx_PLL2_Config>
 800e652:	4603      	mov	r3, r0
 800e654:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800e658:	e014      	b.n	800e684 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800e65a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e65e:	3330      	adds	r3, #48	@ 0x30
 800e660:	4618      	mov	r0, r3
 800e662:	f003 f957 	bl	8011914 <RCCEx_PLL3_Config>
 800e666:	4603      	mov	r3, r0
 800e668:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800e66c:	e00a      	b.n	800e684 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e66e:	2301      	movs	r3, #1
 800e670:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800e674:	e006      	b.n	800e684 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800e676:	bf00      	nop
 800e678:	e004      	b.n	800e684 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800e67a:	bf00      	nop
 800e67c:	e002      	b.n	800e684 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800e67e:	bf00      	nop
 800e680:	e000      	b.n	800e684 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800e682:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e684:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d10d      	bne.n	800e6a8 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 800e68c:	4b88      	ldr	r3, [pc, #544]	@ (800e8b0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800e68e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e692:	f423 3260 	bic.w	r2, r3, #229376	@ 0x38000
 800e696:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e69a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800e69e:	4984      	ldr	r1, [pc, #528]	@ (800e8b0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800e6a0:	4313      	orrs	r3, r2
 800e6a2:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800e6a6:	e003      	b.n	800e6b0 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e6a8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800e6ac:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800e6b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e6b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6b8:	2100      	movs	r1, #0
 800e6ba:	61b9      	str	r1, [r7, #24]
 800e6bc:	f003 0302 	and.w	r3, r3, #2
 800e6c0:	61fb      	str	r3, [r7, #28]
 800e6c2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800e6c6:	460b      	mov	r3, r1
 800e6c8:	4313      	orrs	r3, r2
 800e6ca:	d03d      	beq.n	800e748 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 800e6cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e6d0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800e6d4:	2b03      	cmp	r3, #3
 800e6d6:	d81c      	bhi.n	800e712 <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 800e6d8:	a201      	add	r2, pc, #4	@ (adr r2, 800e6e0 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 800e6da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6de:	bf00      	nop
 800e6e0:	0800e71b 	.word	0x0800e71b
 800e6e4:	0800e6f1 	.word	0x0800e6f1
 800e6e8:	0800e6ff 	.word	0x0800e6ff
 800e6ec:	0800e71b 	.word	0x0800e71b
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e6f0:	4b6f      	ldr	r3, [pc, #444]	@ (800e8b0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800e6f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e6f4:	4a6e      	ldr	r2, [pc, #440]	@ (800e8b0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800e6f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e6fa:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800e6fc:	e00e      	b.n	800e71c <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800e6fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e702:	3308      	adds	r3, #8
 800e704:	4618      	mov	r0, r3
 800e706:	f003 f86d 	bl	80117e4 <RCCEx_PLL2_Config>
 800e70a:	4603      	mov	r3, r0
 800e70c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 800e710:	e004      	b.n	800e71c <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e712:	2301      	movs	r3, #1
 800e714:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800e718:	e000      	b.n	800e71c <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 800e71a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e71c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800e720:	2b00      	cmp	r3, #0
 800e722:	d10d      	bne.n	800e740 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800e724:	4b62      	ldr	r3, [pc, #392]	@ (800e8b0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800e726:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e72a:	f023 0203 	bic.w	r2, r3, #3
 800e72e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e732:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800e736:	495e      	ldr	r1, [pc, #376]	@ (800e8b0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800e738:	4313      	orrs	r3, r2
 800e73a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800e73e:	e003      	b.n	800e748 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e740:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800e744:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800e748:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e74c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e750:	2100      	movs	r1, #0
 800e752:	6139      	str	r1, [r7, #16]
 800e754:	f003 0304 	and.w	r3, r3, #4
 800e758:	617b      	str	r3, [r7, #20]
 800e75a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800e75e:	460b      	mov	r3, r1
 800e760:	4313      	orrs	r3, r2
 800e762:	d03a      	beq.n	800e7da <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 800e764:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e768:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800e76c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e770:	d00e      	beq.n	800e790 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 800e772:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e776:	d815      	bhi.n	800e7a4 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d017      	beq.n	800e7ac <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 800e77c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e780:	d110      	bne.n	800e7a4 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e782:	4b4b      	ldr	r3, [pc, #300]	@ (800e8b0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800e784:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e786:	4a4a      	ldr	r2, [pc, #296]	@ (800e8b0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800e788:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e78c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800e78e:	e00e      	b.n	800e7ae <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800e790:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e794:	3308      	adds	r3, #8
 800e796:	4618      	mov	r0, r3
 800e798:	f003 f824 	bl	80117e4 <RCCEx_PLL2_Config>
 800e79c:	4603      	mov	r3, r0
 800e79e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800e7a2:	e004      	b.n	800e7ae <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 800e7a4:	2301      	movs	r3, #1
 800e7a6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800e7aa:	e000      	b.n	800e7ae <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 800e7ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e7ae:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d10d      	bne.n	800e7d2 <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 800e7b6:	4b3e      	ldr	r3, [pc, #248]	@ (800e8b0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800e7b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800e7bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800e7c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e7c4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800e7c8:	4939      	ldr	r1, [pc, #228]	@ (800e8b0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800e7ca:	4313      	orrs	r3, r2
 800e7cc:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 800e7d0:	e003      	b.n	800e7da <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e7d2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800e7d6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800e7da:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e7de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7e2:	2100      	movs	r1, #0
 800e7e4:	60b9      	str	r1, [r7, #8]
 800e7e6:	f003 0310 	and.w	r3, r3, #16
 800e7ea:	60fb      	str	r3, [r7, #12]
 800e7ec:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800e7f0:	460b      	mov	r3, r1
 800e7f2:	4313      	orrs	r3, r2
 800e7f4:	d038      	beq.n	800e868 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 800e7f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e7fa:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800e7fe:	2b30      	cmp	r3, #48	@ 0x30
 800e800:	d01b      	beq.n	800e83a <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 800e802:	2b30      	cmp	r3, #48	@ 0x30
 800e804:	d815      	bhi.n	800e832 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 800e806:	2b10      	cmp	r3, #16
 800e808:	d002      	beq.n	800e810 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 800e80a:	2b20      	cmp	r3, #32
 800e80c:	d007      	beq.n	800e81e <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 800e80e:	e010      	b.n	800e832 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e810:	4b27      	ldr	r3, [pc, #156]	@ (800e8b0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800e812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e814:	4a26      	ldr	r2, [pc, #152]	@ (800e8b0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800e816:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e81a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 800e81c:	e00e      	b.n	800e83c <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800e81e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e822:	3330      	adds	r3, #48	@ 0x30
 800e824:	4618      	mov	r0, r3
 800e826:	f003 f875 	bl	8011914 <RCCEx_PLL3_Config>
 800e82a:	4603      	mov	r3, r0
 800e82c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 800e830:	e004      	b.n	800e83c <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e832:	2301      	movs	r3, #1
 800e834:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800e838:	e000      	b.n	800e83c <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 800e83a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e83c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800e840:	2b00      	cmp	r3, #0
 800e842:	d10d      	bne.n	800e860 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 800e844:	4b1a      	ldr	r3, [pc, #104]	@ (800e8b0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800e846:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e84a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800e84e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e852:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800e856:	4916      	ldr	r1, [pc, #88]	@ (800e8b0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800e858:	4313      	orrs	r3, r2
 800e85a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800e85e:	e003      	b.n	800e868 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e860:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800e864:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800e868:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e870:	2100      	movs	r1, #0
 800e872:	6039      	str	r1, [r7, #0]
 800e874:	f003 0308 	and.w	r3, r3, #8
 800e878:	607b      	str	r3, [r7, #4]
 800e87a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800e87e:	460b      	mov	r3, r1
 800e880:	4313      	orrs	r3, r2
 800e882:	d00c      	beq.n	800e89e <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 800e884:	4b0a      	ldr	r3, [pc, #40]	@ (800e8b0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800e886:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800e88a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800e88e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800e892:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 800e896:	4906      	ldr	r1, [pc, #24]	@ (800e8b0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800e898:	4313      	orrs	r3, r2
 800e89a:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 800e89e:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
}
 800e8a2:	4618      	mov	r0, r3
 800e8a4:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 800e8a8:	46bd      	mov	sp, r7
 800e8aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e8ae:	bf00      	nop
 800e8b0:	44020c00 	.word	0x44020c00

0800e8b4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 800e8b4:	b480      	push	{r7}
 800e8b6:	b08b      	sub	sp, #44	@ 0x2c
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800e8bc:	4bad      	ldr	r3, [pc, #692]	@ (800eb74 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e8be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e8c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e8c4:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800e8c6:	4bab      	ldr	r3, [pc, #684]	@ (800eb74 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e8c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e8ca:	f003 0303 	and.w	r3, r3, #3
 800e8ce:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 800e8d0:	4ba8      	ldr	r3, [pc, #672]	@ (800eb74 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e8d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e8d4:	0a1b      	lsrs	r3, r3, #8
 800e8d6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e8da:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 800e8dc:	4ba5      	ldr	r3, [pc, #660]	@ (800eb74 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e8de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e8e0:	f003 0310 	and.w	r3, r3, #16
 800e8e4:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800e8e6:	4ba3      	ldr	r3, [pc, #652]	@ (800eb74 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e8e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e8ea:	08db      	lsrs	r3, r3, #3
 800e8ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e8f0:	697a      	ldr	r2, [r7, #20]
 800e8f2:	fb02 f303 	mul.w	r3, r2, r3
 800e8f6:	ee07 3a90 	vmov	s15, r3
 800e8fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e8fe:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 800e902:	69bb      	ldr	r3, [r7, #24]
 800e904:	2b00      	cmp	r3, #0
 800e906:	f000 8126 	beq.w	800eb56 <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 800e90a:	69fb      	ldr	r3, [r7, #28]
 800e90c:	2b03      	cmp	r3, #3
 800e90e:	d053      	beq.n	800e9b8 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 800e910:	69fb      	ldr	r3, [r7, #28]
 800e912:	2b03      	cmp	r3, #3
 800e914:	d86f      	bhi.n	800e9f6 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 800e916:	69fb      	ldr	r3, [r7, #28]
 800e918:	2b01      	cmp	r3, #1
 800e91a:	d003      	beq.n	800e924 <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 800e91c:	69fb      	ldr	r3, [r7, #28]
 800e91e:	2b02      	cmp	r3, #2
 800e920:	d02b      	beq.n	800e97a <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 800e922:	e068      	b.n	800e9f6 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800e924:	4b93      	ldr	r3, [pc, #588]	@ (800eb74 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	08db      	lsrs	r3, r3, #3
 800e92a:	f003 0303 	and.w	r3, r3, #3
 800e92e:	4a92      	ldr	r2, [pc, #584]	@ (800eb78 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800e930:	fa22 f303 	lsr.w	r3, r2, r3
 800e934:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	ee07 3a90 	vmov	s15, r3
 800e93c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e940:	69bb      	ldr	r3, [r7, #24]
 800e942:	ee07 3a90 	vmov	s15, r3
 800e946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e94a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e94e:	6a3b      	ldr	r3, [r7, #32]
 800e950:	ee07 3a90 	vmov	s15, r3
 800e954:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e958:	ed97 6a04 	vldr	s12, [r7, #16]
 800e95c:	eddf 5a87 	vldr	s11, [pc, #540]	@ 800eb7c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800e960:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e964:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e968:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e96c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e970:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e974:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800e978:	e068      	b.n	800ea4c <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800e97a:	69bb      	ldr	r3, [r7, #24]
 800e97c:	ee07 3a90 	vmov	s15, r3
 800e980:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e984:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 800eb80 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800e988:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e98c:	6a3b      	ldr	r3, [r7, #32]
 800e98e:	ee07 3a90 	vmov	s15, r3
 800e992:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e996:	ed97 6a04 	vldr	s12, [r7, #16]
 800e99a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800eb7c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800e99e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e9a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e9a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e9aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e9ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e9b2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800e9b6:	e049      	b.n	800ea4c <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800e9b8:	69bb      	ldr	r3, [r7, #24]
 800e9ba:	ee07 3a90 	vmov	s15, r3
 800e9be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e9c2:	eddf 6a70 	vldr	s13, [pc, #448]	@ 800eb84 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 800e9c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e9ca:	6a3b      	ldr	r3, [r7, #32]
 800e9cc:	ee07 3a90 	vmov	s15, r3
 800e9d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e9d4:	ed97 6a04 	vldr	s12, [r7, #16]
 800e9d8:	eddf 5a68 	vldr	s11, [pc, #416]	@ 800eb7c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800e9dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e9e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e9e4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e9e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e9ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e9f0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800e9f4:	e02a      	b.n	800ea4c <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800e9f6:	4b5f      	ldr	r3, [pc, #380]	@ (800eb74 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	08db      	lsrs	r3, r3, #3
 800e9fc:	f003 0303 	and.w	r3, r3, #3
 800ea00:	4a5d      	ldr	r2, [pc, #372]	@ (800eb78 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800ea02:	fa22 f303 	lsr.w	r3, r2, r3
 800ea06:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	ee07 3a90 	vmov	s15, r3
 800ea0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ea12:	69bb      	ldr	r3, [r7, #24]
 800ea14:	ee07 3a90 	vmov	s15, r3
 800ea18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ea1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ea20:	6a3b      	ldr	r3, [r7, #32]
 800ea22:	ee07 3a90 	vmov	s15, r3
 800ea26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ea2a:	ed97 6a04 	vldr	s12, [r7, #16]
 800ea2e:	eddf 5a53 	vldr	s11, [pc, #332]	@ 800eb7c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800ea32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ea36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ea3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ea3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ea42:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ea46:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800ea4a:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ea4c:	4b49      	ldr	r3, [pc, #292]	@ (800eb74 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ea54:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ea58:	d121      	bne.n	800ea9e <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800ea5a:	4b46      	ldr	r3, [pc, #280]	@ (800eb74 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800ea5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ea5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d017      	beq.n	800ea96 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800ea66:	4b43      	ldr	r3, [pc, #268]	@ (800eb74 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800ea68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ea6a:	0a5b      	lsrs	r3, r3, #9
 800ea6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ea70:	ee07 3a90 	vmov	s15, r3
 800ea74:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 800ea78:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ea7c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800ea80:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800ea84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ea88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ea8c:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	601a      	str	r2, [r3, #0]
 800ea94:	e006      	b.n	800eaa4 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	2200      	movs	r2, #0
 800ea9a:	601a      	str	r2, [r3, #0]
 800ea9c:	e002      	b.n	800eaa4 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	2200      	movs	r2, #0
 800eaa2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800eaa4:	4b33      	ldr	r3, [pc, #204]	@ (800eb74 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800eaac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800eab0:	d121      	bne.n	800eaf6 <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800eab2:	4b30      	ldr	r3, [pc, #192]	@ (800eb74 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800eab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eab6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d017      	beq.n	800eaee <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800eabe:	4b2d      	ldr	r3, [pc, #180]	@ (800eb74 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800eac0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eac2:	0c1b      	lsrs	r3, r3, #16
 800eac4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800eac8:	ee07 3a90 	vmov	s15, r3
 800eacc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 800ead0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ead4:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800ead8:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800eadc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800eae0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800eae4:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	605a      	str	r2, [r3, #4]
 800eaec:	e006      	b.n	800eafc <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	2200      	movs	r2, #0
 800eaf2:	605a      	str	r2, [r3, #4]
 800eaf4:	e002      	b.n	800eafc <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	2200      	movs	r2, #0
 800eafa:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800eafc:	4b1d      	ldr	r3, [pc, #116]	@ (800eb74 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800eb04:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800eb08:	d121      	bne.n	800eb4e <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800eb0a:	4b1a      	ldr	r3, [pc, #104]	@ (800eb74 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800eb0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eb0e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d017      	beq.n	800eb46 <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800eb16:	4b17      	ldr	r3, [pc, #92]	@ (800eb74 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800eb18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eb1a:	0e1b      	lsrs	r3, r3, #24
 800eb1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800eb20:	ee07 3a90 	vmov	s15, r3
 800eb24:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 800eb28:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800eb2c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800eb30:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800eb34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800eb38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800eb3c:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800eb44:	e010      	b.n	800eb68 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	2200      	movs	r2, #0
 800eb4a:	609a      	str	r2, [r3, #8]
}
 800eb4c:	e00c      	b.n	800eb68 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	2200      	movs	r2, #0
 800eb52:	609a      	str	r2, [r3, #8]
}
 800eb54:	e008      	b.n	800eb68 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	2200      	movs	r2, #0
 800eb5a:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	2200      	movs	r2, #0
 800eb60:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	2200      	movs	r2, #0
 800eb66:	609a      	str	r2, [r3, #8]
}
 800eb68:	bf00      	nop
 800eb6a:	372c      	adds	r7, #44	@ 0x2c
 800eb6c:	46bd      	mov	sp, r7
 800eb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb72:	4770      	bx	lr
 800eb74:	44020c00 	.word	0x44020c00
 800eb78:	03d09000 	.word	0x03d09000
 800eb7c:	46000000 	.word	0x46000000
 800eb80:	4a742400 	.word	0x4a742400
 800eb84:	4bbebc20 	.word	0x4bbebc20

0800eb88 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 800eb88:	b480      	push	{r7}
 800eb8a:	b08b      	sub	sp, #44	@ 0x2c
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800eb90:	4bad      	ldr	r3, [pc, #692]	@ (800ee48 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800eb92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eb94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eb98:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800eb9a:	4bab      	ldr	r3, [pc, #684]	@ (800ee48 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800eb9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb9e:	f003 0303 	and.w	r3, r3, #3
 800eba2:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 800eba4:	4ba8      	ldr	r3, [pc, #672]	@ (800ee48 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800eba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eba8:	0a1b      	lsrs	r3, r3, #8
 800ebaa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ebae:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 800ebb0:	4ba5      	ldr	r3, [pc, #660]	@ (800ee48 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800ebb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ebb4:	f003 0310 	and.w	r3, r3, #16
 800ebb8:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800ebba:	4ba3      	ldr	r3, [pc, #652]	@ (800ee48 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800ebbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ebbe:	08db      	lsrs	r3, r3, #3
 800ebc0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ebc4:	697a      	ldr	r2, [r7, #20]
 800ebc6:	fb02 f303 	mul.w	r3, r2, r3
 800ebca:	ee07 3a90 	vmov	s15, r3
 800ebce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ebd2:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 800ebd6:	69bb      	ldr	r3, [r7, #24]
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	f000 8126 	beq.w	800ee2a <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 800ebde:	69fb      	ldr	r3, [r7, #28]
 800ebe0:	2b03      	cmp	r3, #3
 800ebe2:	d053      	beq.n	800ec8c <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 800ebe4:	69fb      	ldr	r3, [r7, #28]
 800ebe6:	2b03      	cmp	r3, #3
 800ebe8:	d86f      	bhi.n	800ecca <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 800ebea:	69fb      	ldr	r3, [r7, #28]
 800ebec:	2b01      	cmp	r3, #1
 800ebee:	d003      	beq.n	800ebf8 <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 800ebf0:	69fb      	ldr	r3, [r7, #28]
 800ebf2:	2b02      	cmp	r3, #2
 800ebf4:	d02b      	beq.n	800ec4e <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 800ebf6:	e068      	b.n	800ecca <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ebf8:	4b93      	ldr	r3, [pc, #588]	@ (800ee48 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	08db      	lsrs	r3, r3, #3
 800ebfe:	f003 0303 	and.w	r3, r3, #3
 800ec02:	4a92      	ldr	r2, [pc, #584]	@ (800ee4c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800ec04:	fa22 f303 	lsr.w	r3, r2, r3
 800ec08:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	ee07 3a90 	vmov	s15, r3
 800ec10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ec14:	69bb      	ldr	r3, [r7, #24]
 800ec16:	ee07 3a90 	vmov	s15, r3
 800ec1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ec1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ec22:	6a3b      	ldr	r3, [r7, #32]
 800ec24:	ee07 3a90 	vmov	s15, r3
 800ec28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ec2c:	ed97 6a04 	vldr	s12, [r7, #16]
 800ec30:	eddf 5a87 	vldr	s11, [pc, #540]	@ 800ee50 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800ec34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ec38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ec3c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ec40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ec44:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ec48:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800ec4c:	e068      	b.n	800ed20 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800ec4e:	69bb      	ldr	r3, [r7, #24]
 800ec50:	ee07 3a90 	vmov	s15, r3
 800ec54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ec58:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 800ee54 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 800ec5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ec60:	6a3b      	ldr	r3, [r7, #32]
 800ec62:	ee07 3a90 	vmov	s15, r3
 800ec66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ec6a:	ed97 6a04 	vldr	s12, [r7, #16]
 800ec6e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800ee50 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800ec72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ec76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ec7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ec7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ec82:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ec86:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800ec8a:	e049      	b.n	800ed20 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800ec8c:	69bb      	ldr	r3, [r7, #24]
 800ec8e:	ee07 3a90 	vmov	s15, r3
 800ec92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ec96:	eddf 6a70 	vldr	s13, [pc, #448]	@ 800ee58 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 800ec9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ec9e:	6a3b      	ldr	r3, [r7, #32]
 800eca0:	ee07 3a90 	vmov	s15, r3
 800eca4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800eca8:	ed97 6a04 	vldr	s12, [r7, #16]
 800ecac:	eddf 5a68 	vldr	s11, [pc, #416]	@ 800ee50 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800ecb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ecb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ecb8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ecbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ecc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ecc4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800ecc8:	e02a      	b.n	800ed20 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ecca:	4b5f      	ldr	r3, [pc, #380]	@ (800ee48 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	08db      	lsrs	r3, r3, #3
 800ecd0:	f003 0303 	and.w	r3, r3, #3
 800ecd4:	4a5d      	ldr	r2, [pc, #372]	@ (800ee4c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800ecd6:	fa22 f303 	lsr.w	r3, r2, r3
 800ecda:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	ee07 3a90 	vmov	s15, r3
 800ece2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ece6:	69bb      	ldr	r3, [r7, #24]
 800ece8:	ee07 3a90 	vmov	s15, r3
 800ecec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ecf0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ecf4:	6a3b      	ldr	r3, [r7, #32]
 800ecf6:	ee07 3a90 	vmov	s15, r3
 800ecfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ecfe:	ed97 6a04 	vldr	s12, [r7, #16]
 800ed02:	eddf 5a53 	vldr	s11, [pc, #332]	@ 800ee50 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800ed06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ed0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ed0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ed12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ed16:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ed1a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800ed1e:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ed20:	4b49      	ldr	r3, [pc, #292]	@ (800ee48 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ed28:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ed2c:	d121      	bne.n	800ed72 <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800ed2e:	4b46      	ldr	r3, [pc, #280]	@ (800ee48 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800ed30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d017      	beq.n	800ed6a <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800ed3a:	4b43      	ldr	r3, [pc, #268]	@ (800ee48 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800ed3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ed3e:	0a5b      	lsrs	r3, r3, #9
 800ed40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ed44:	ee07 3a90 	vmov	s15, r3
 800ed48:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 800ed4c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ed50:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800ed54:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800ed58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ed5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ed60:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	601a      	str	r2, [r3, #0]
 800ed68:	e006      	b.n	800ed78 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	2200      	movs	r2, #0
 800ed6e:	601a      	str	r2, [r3, #0]
 800ed70:	e002      	b.n	800ed78 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	2200      	movs	r2, #0
 800ed76:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ed78:	4b33      	ldr	r3, [pc, #204]	@ (800ee48 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ed80:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ed84:	d121      	bne.n	800edca <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800ed86:	4b30      	ldr	r3, [pc, #192]	@ (800ee48 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800ed88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d017      	beq.n	800edc2 <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800ed92:	4b2d      	ldr	r3, [pc, #180]	@ (800ee48 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800ed94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ed96:	0c1b      	lsrs	r3, r3, #16
 800ed98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ed9c:	ee07 3a90 	vmov	s15, r3
 800eda0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 800eda4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800eda8:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800edac:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800edb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800edb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800edb8:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	605a      	str	r2, [r3, #4]
 800edc0:	e006      	b.n	800edd0 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	2200      	movs	r2, #0
 800edc6:	605a      	str	r2, [r3, #4]
 800edc8:	e002      	b.n	800edd0 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	2200      	movs	r2, #0
 800edce:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800edd0:	4b1d      	ldr	r3, [pc, #116]	@ (800ee48 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800edd8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800eddc:	d121      	bne.n	800ee22 <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800edde:	4b1a      	ldr	r3, [pc, #104]	@ (800ee48 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800ede0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ede2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d017      	beq.n	800ee1a <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800edea:	4b17      	ldr	r3, [pc, #92]	@ (800ee48 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800edec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800edee:	0e1b      	lsrs	r3, r3, #24
 800edf0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800edf4:	ee07 3a90 	vmov	s15, r3
 800edf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 800edfc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ee00:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800ee04:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800ee08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ee0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ee10:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ee18:	e010      	b.n	800ee3c <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	2200      	movs	r2, #0
 800ee1e:	609a      	str	r2, [r3, #8]
}
 800ee20:	e00c      	b.n	800ee3c <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	2200      	movs	r2, #0
 800ee26:	609a      	str	r2, [r3, #8]
}
 800ee28:	e008      	b.n	800ee3c <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	2200      	movs	r2, #0
 800ee2e:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	2200      	movs	r2, #0
 800ee34:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	2200      	movs	r2, #0
 800ee3a:	609a      	str	r2, [r3, #8]
}
 800ee3c:	bf00      	nop
 800ee3e:	372c      	adds	r7, #44	@ 0x2c
 800ee40:	46bd      	mov	sp, r7
 800ee42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee46:	4770      	bx	lr
 800ee48:	44020c00 	.word	0x44020c00
 800ee4c:	03d09000 	.word	0x03d09000
 800ee50:	46000000 	.word	0x46000000
 800ee54:	4a742400 	.word	0x4a742400
 800ee58:	4bbebc20 	.word	0x4bbebc20

0800ee5c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 800ee5c:	b480      	push	{r7}
 800ee5e:	b08b      	sub	sp, #44	@ 0x2c
 800ee60:	af00      	add	r7, sp, #0
 800ee62:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800ee64:	4bad      	ldr	r3, [pc, #692]	@ (800f11c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800ee66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ee68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ee6c:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800ee6e:	4bab      	ldr	r3, [pc, #684]	@ (800f11c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800ee70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ee72:	f003 0303 	and.w	r3, r3, #3
 800ee76:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 800ee78:	4ba8      	ldr	r3, [pc, #672]	@ (800f11c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800ee7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ee7c:	0a1b      	lsrs	r3, r3, #8
 800ee7e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ee82:	61bb      	str	r3, [r7, #24]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 800ee84:	4ba5      	ldr	r3, [pc, #660]	@ (800f11c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800ee86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ee88:	f003 0310 	and.w	r3, r3, #16
 800ee8c:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800ee8e:	4ba3      	ldr	r3, [pc, #652]	@ (800f11c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800ee90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ee92:	08db      	lsrs	r3, r3, #3
 800ee94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ee98:	697a      	ldr	r2, [r7, #20]
 800ee9a:	fb02 f303 	mul.w	r3, r2, r3
 800ee9e:	ee07 3a90 	vmov	s15, r3
 800eea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eea6:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 800eeaa:	69bb      	ldr	r3, [r7, #24]
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	f000 8126 	beq.w	800f0fe <HAL_RCCEx_GetPLL3ClockFreq+0x2a2>
  {
    switch (pll3source)
 800eeb2:	69fb      	ldr	r3, [r7, #28]
 800eeb4:	2b03      	cmp	r3, #3
 800eeb6:	d053      	beq.n	800ef60 <HAL_RCCEx_GetPLL3ClockFreq+0x104>
 800eeb8:	69fb      	ldr	r3, [r7, #28]
 800eeba:	2b03      	cmp	r3, #3
 800eebc:	d86f      	bhi.n	800ef9e <HAL_RCCEx_GetPLL3ClockFreq+0x142>
 800eebe:	69fb      	ldr	r3, [r7, #28]
 800eec0:	2b01      	cmp	r3, #1
 800eec2:	d003      	beq.n	800eecc <HAL_RCCEx_GetPLL3ClockFreq+0x70>
 800eec4:	69fb      	ldr	r3, [r7, #28]
 800eec6:	2b02      	cmp	r3, #2
 800eec8:	d02b      	beq.n	800ef22 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
 800eeca:	e068      	b.n	800ef9e <HAL_RCCEx_GetPLL3ClockFreq+0x142>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800eecc:	4b93      	ldr	r3, [pc, #588]	@ (800f11c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	08db      	lsrs	r3, r3, #3
 800eed2:	f003 0303 	and.w	r3, r3, #3
 800eed6:	4a92      	ldr	r2, [pc, #584]	@ (800f120 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800eed8:	fa22 f303 	lsr.w	r3, r2, r3
 800eedc:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	ee07 3a90 	vmov	s15, r3
 800eee4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800eee8:	69bb      	ldr	r3, [r7, #24]
 800eeea:	ee07 3a90 	vmov	s15, r3
 800eeee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eef2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800eef6:	6a3b      	ldr	r3, [r7, #32]
 800eef8:	ee07 3a90 	vmov	s15, r3
 800eefc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ef00:	ed97 6a04 	vldr	s12, [r7, #16]
 800ef04:	eddf 5a87 	vldr	s11, [pc, #540]	@ 800f124 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800ef08:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ef0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ef10:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ef14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ef18:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ef1c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800ef20:	e068      	b.n	800eff4 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800ef22:	69bb      	ldr	r3, [r7, #24]
 800ef24:	ee07 3a90 	vmov	s15, r3
 800ef28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ef2c:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 800f128 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 800ef30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ef34:	6a3b      	ldr	r3, [r7, #32]
 800ef36:	ee07 3a90 	vmov	s15, r3
 800ef3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ef3e:	ed97 6a04 	vldr	s12, [r7, #16]
 800ef42:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800f124 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800ef46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ef4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ef4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ef52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ef56:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ef5a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800ef5e:	e049      	b.n	800eff4 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800ef60:	69bb      	ldr	r3, [r7, #24]
 800ef62:	ee07 3a90 	vmov	s15, r3
 800ef66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ef6a:	eddf 6a70 	vldr	s13, [pc, #448]	@ 800f12c <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 800ef6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ef72:	6a3b      	ldr	r3, [r7, #32]
 800ef74:	ee07 3a90 	vmov	s15, r3
 800ef78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ef7c:	ed97 6a04 	vldr	s12, [r7, #16]
 800ef80:	eddf 5a68 	vldr	s11, [pc, #416]	@ 800f124 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800ef84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ef88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ef8c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ef90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ef94:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ef98:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800ef9c:	e02a      	b.n	800eff4 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ef9e:	4b5f      	ldr	r3, [pc, #380]	@ (800f11c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	08db      	lsrs	r3, r3, #3
 800efa4:	f003 0303 	and.w	r3, r3, #3
 800efa8:	4a5d      	ldr	r2, [pc, #372]	@ (800f120 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800efaa:	fa22 f303 	lsr.w	r3, r2, r3
 800efae:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	ee07 3a90 	vmov	s15, r3
 800efb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800efba:	69bb      	ldr	r3, [r7, #24]
 800efbc:	ee07 3a90 	vmov	s15, r3
 800efc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800efc4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800efc8:	6a3b      	ldr	r3, [r7, #32]
 800efca:	ee07 3a90 	vmov	s15, r3
 800efce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800efd2:	ed97 6a04 	vldr	s12, [r7, #16]
 800efd6:	eddf 5a53 	vldr	s11, [pc, #332]	@ 800f124 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800efda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800efde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800efe2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800efe6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800efea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800efee:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800eff2:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800eff4:	4b49      	ldr	r3, [pc, #292]	@ (800f11c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800effc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f000:	d121      	bne.n	800f046 <HAL_RCCEx_GetPLL3ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800f002:	4b46      	ldr	r3, [pc, #280]	@ (800f11c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800f004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f006:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d017      	beq.n	800f03e <HAL_RCCEx_GetPLL3ClockFreq+0x1e2>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800f00e:	4b43      	ldr	r3, [pc, #268]	@ (800f11c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800f010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f012:	0a5b      	lsrs	r3, r3, #9
 800f014:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f018:	ee07 3a90 	vmov	s15, r3
 800f01c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 800f020:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f024:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800f028:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800f02c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f030:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f034:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	601a      	str	r2, [r3, #0]
 800f03c:	e006      	b.n	800f04c <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	2200      	movs	r2, #0
 800f042:	601a      	str	r2, [r3, #0]
 800f044:	e002      	b.n	800f04c <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	2200      	movs	r2, #0
 800f04a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f04c:	4b33      	ldr	r3, [pc, #204]	@ (800f11c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f054:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f058:	d121      	bne.n	800f09e <HAL_RCCEx_GetPLL3ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800f05a:	4b30      	ldr	r3, [pc, #192]	@ (800f11c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800f05c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f05e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f062:	2b00      	cmp	r3, #0
 800f064:	d017      	beq.n	800f096 <HAL_RCCEx_GetPLL3ClockFreq+0x23a>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800f066:	4b2d      	ldr	r3, [pc, #180]	@ (800f11c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800f068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f06a:	0c1b      	lsrs	r3, r3, #16
 800f06c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f070:	ee07 3a90 	vmov	s15, r3
 800f074:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 800f078:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f07c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800f080:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800f084:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f088:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f08c:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	605a      	str	r2, [r3, #4]
 800f094:	e006      	b.n	800f0a4 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	2200      	movs	r2, #0
 800f09a:	605a      	str	r2, [r3, #4]
 800f09c:	e002      	b.n	800f0a4 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	2200      	movs	r2, #0
 800f0a2:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f0a4:	4b1d      	ldr	r3, [pc, #116]	@ (800f11c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f0ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f0b0:	d121      	bne.n	800f0f6 <HAL_RCCEx_GetPLL3ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800f0b2:	4b1a      	ldr	r3, [pc, #104]	@ (800f11c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800f0b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f0b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d017      	beq.n	800f0ee <HAL_RCCEx_GetPLL3ClockFreq+0x292>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800f0be:	4b17      	ldr	r3, [pc, #92]	@ (800f11c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800f0c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f0c2:	0e1b      	lsrs	r3, r3, #24
 800f0c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f0c8:	ee07 3a90 	vmov	s15, r3
 800f0cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 800f0d0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f0d4:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800f0d8:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800f0dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f0e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f0e4:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 800f0ec:	e010      	b.n	800f110 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	2200      	movs	r2, #0
 800f0f2:	609a      	str	r2, [r3, #8]
}
 800f0f4:	e00c      	b.n	800f110 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	2200      	movs	r2, #0
 800f0fa:	609a      	str	r2, [r3, #8]
}
 800f0fc:	e008      	b.n	800f110 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	2200      	movs	r2, #0
 800f102:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	2200      	movs	r2, #0
 800f108:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	2200      	movs	r2, #0
 800f10e:	609a      	str	r2, [r3, #8]
}
 800f110:	bf00      	nop
 800f112:	372c      	adds	r7, #44	@ 0x2c
 800f114:	46bd      	mov	sp, r7
 800f116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f11a:	4770      	bx	lr
 800f11c:	44020c00 	.word	0x44020c00
 800f120:	03d09000 	.word	0x03d09000
 800f124:	46000000 	.word	0x46000000
 800f128:	4a742400 	.word	0x4a742400
 800f12c:	4bbebc20 	.word	0x4bbebc20

0800f130 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800f130:	b590      	push	{r4, r7, lr}
 800f132:	b08f      	sub	sp, #60	@ 0x3c
 800f134:	af00      	add	r7, sp, #0
 800f136:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800f13a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f13e:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 800f142:	4321      	orrs	r1, r4
 800f144:	d150      	bne.n	800f1e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800f146:	4b26      	ldr	r3, [pc, #152]	@ (800f1e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800f148:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800f14c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f150:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800f152:	4b23      	ldr	r3, [pc, #140]	@ (800f1e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800f154:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800f158:	f003 0302 	and.w	r3, r3, #2
 800f15c:	2b02      	cmp	r3, #2
 800f15e:	d108      	bne.n	800f172 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800f160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f162:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f166:	d104      	bne.n	800f172 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800f168:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f16c:	637b      	str	r3, [r7, #52]	@ 0x34
 800f16e:	f002 bb2a 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800f172:	4b1b      	ldr	r3, [pc, #108]	@ (800f1e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800f174:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800f178:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f17c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f180:	d108      	bne.n	800f194 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 800f182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f184:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f188:	d104      	bne.n	800f194 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 800f18a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800f18e:	637b      	str	r3, [r7, #52]	@ 0x34
 800f190:	f002 bb19 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 800f194:	4b12      	ldr	r3, [pc, #72]	@ (800f1e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f19c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f1a0:	d119      	bne.n	800f1d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 800f1a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f1a8:	d115      	bne.n	800f1d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800f1aa:	4b0d      	ldr	r3, [pc, #52]	@ (800f1e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800f1ac:	69db      	ldr	r3, [r3, #28]
 800f1ae:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 800f1b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f1b6:	d30a      	bcc.n	800f1ce <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 800f1b8:	4b09      	ldr	r3, [pc, #36]	@ (800f1e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800f1ba:	69db      	ldr	r3, [r3, #28]
 800f1bc:	0a1b      	lsrs	r3, r3, #8
 800f1be:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f1c2:	4a08      	ldr	r2, [pc, #32]	@ (800f1e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800f1c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800f1c8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800f1ca:	f002 bafc 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 800f1ce:	2300      	movs	r3, #0
 800f1d0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800f1d2:	f002 baf8 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800f1d6:	2300      	movs	r3, #0
 800f1d8:	637b      	str	r3, [r7, #52]	@ 0x34
 800f1da:	f002 baf4 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800f1de:	bf00      	nop
 800f1e0:	44020c00 	.word	0x44020c00
 800f1e4:	017d7840 	.word	0x017d7840
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 800f1e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f1ec:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
 800f1f0:	ea50 0104 	orrs.w	r1, r0, r4
 800f1f4:	f001 8275 	beq.w	80106e2 <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 800f1f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f1fc:	2801      	cmp	r0, #1
 800f1fe:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
 800f202:	f082 82dd 	bcs.w	80117c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800f206:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f20a:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 800f20e:	ea50 0104 	orrs.w	r1, r0, r4
 800f212:	f001 816c 	beq.w	80104ee <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 800f216:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f21a:	2801      	cmp	r0, #1
 800f21c:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 800f220:	f082 82ce 	bcs.w	80117c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800f224:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f228:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
 800f22c:	ea50 0104 	orrs.w	r1, r0, r4
 800f230:	f001 8602 	beq.w	8010e38 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 800f234:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f238:	2801      	cmp	r0, #1
 800f23a:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
 800f23e:	f082 82bf 	bcs.w	80117c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800f242:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f246:	f1a1 0480 	sub.w	r4, r1, #128	@ 0x80
 800f24a:	ea50 0104 	orrs.w	r1, r0, r4
 800f24e:	f001 854c 	beq.w	8010cea <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 800f252:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f256:	2801      	cmp	r0, #1
 800f258:	f171 0180 	sbcs.w	r1, r1, #128	@ 0x80
 800f25c:	f082 82b0 	bcs.w	80117c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800f260:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f264:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
 800f268:	ea50 0104 	orrs.w	r1, r0, r4
 800f26c:	f001 849e 	beq.w	8010bac <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 800f270:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f274:	2801      	cmp	r0, #1
 800f276:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
 800f27a:	f082 82a1 	bcs.w	80117c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800f27e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f282:	f1a1 0420 	sub.w	r4, r1, #32
 800f286:	ea50 0104 	orrs.w	r1, r0, r4
 800f28a:	f001 83e8 	beq.w	8010a5e <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 800f28e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f292:	2801      	cmp	r0, #1
 800f294:	f171 0120 	sbcs.w	r1, r1, #32
 800f298:	f082 8292 	bcs.w	80117c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800f29c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f2a0:	f1a1 0410 	sub.w	r4, r1, #16
 800f2a4:	ea50 0104 	orrs.w	r1, r0, r4
 800f2a8:	f002 8256 	beq.w	8011758 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800f2ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f2b0:	2801      	cmp	r0, #1
 800f2b2:	f171 0110 	sbcs.w	r1, r1, #16
 800f2b6:	f082 8283 	bcs.w	80117c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800f2ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f2be:	f1a1 0408 	sub.w	r4, r1, #8
 800f2c2:	ea50 0104 	orrs.w	r1, r0, r4
 800f2c6:	f002 81cc 	beq.w	8011662 <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 800f2ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f2ce:	2801      	cmp	r0, #1
 800f2d0:	f171 0108 	sbcs.w	r1, r1, #8
 800f2d4:	f082 8274 	bcs.w	80117c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800f2d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f2dc:	1f0c      	subs	r4, r1, #4
 800f2de:	ea50 0104 	orrs.w	r1, r0, r4
 800f2e2:	f001 8648 	beq.w	8010f76 <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 800f2e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f2ea:	2801      	cmp	r0, #1
 800f2ec:	f171 0104 	sbcs.w	r1, r1, #4
 800f2f0:	f082 8266 	bcs.w	80117c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800f2f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f2f8:	1e8c      	subs	r4, r1, #2
 800f2fa:	ea50 0104 	orrs.w	r1, r0, r4
 800f2fe:	f002 8143 	beq.w	8011588 <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 800f302:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f306:	2801      	cmp	r0, #1
 800f308:	f171 0102 	sbcs.w	r1, r1, #2
 800f30c:	f082 8258 	bcs.w	80117c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800f310:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f314:	1e4c      	subs	r4, r1, #1
 800f316:	ea50 0104 	orrs.w	r1, r0, r4
 800f31a:	f002 80ce 	beq.w	80114ba <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 800f31e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f322:	2801      	cmp	r0, #1
 800f324:	f171 0101 	sbcs.w	r1, r1, #1
 800f328:	f082 824a 	bcs.w	80117c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800f32c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f330:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 800f334:	4321      	orrs	r1, r4
 800f336:	f002 8059 	beq.w	80113ec <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 800f33a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f33e:	4cd9      	ldr	r4, [pc, #868]	@ (800f6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 800f340:	42a0      	cmp	r0, r4
 800f342:	f171 0100 	sbcs.w	r1, r1, #0
 800f346:	f082 823b 	bcs.w	80117c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800f34a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f34e:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 800f352:	4321      	orrs	r1, r4
 800f354:	f001 87d9 	beq.w	801130a <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 800f358:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f35c:	4cd2      	ldr	r4, [pc, #840]	@ (800f6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 800f35e:	42a0      	cmp	r0, r4
 800f360:	f171 0100 	sbcs.w	r1, r1, #0
 800f364:	f082 822c 	bcs.w	80117c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800f368:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f36c:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 800f370:	4321      	orrs	r1, r4
 800f372:	f001 8751 	beq.w	8011218 <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 800f376:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f37a:	4ccc      	ldr	r4, [pc, #816]	@ (800f6ac <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800f37c:	42a0      	cmp	r0, r4
 800f37e:	f171 0100 	sbcs.w	r1, r1, #0
 800f382:	f082 821d 	bcs.w	80117c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800f386:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f38a:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 800f38e:	4321      	orrs	r1, r4
 800f390:	f001 869a 	beq.w	80110c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 800f394:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f398:	4cc5      	ldr	r4, [pc, #788]	@ (800f6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 800f39a:	42a0      	cmp	r0, r4
 800f39c:	f171 0100 	sbcs.w	r1, r1, #0
 800f3a0:	f082 820e 	bcs.w	80117c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800f3a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f3a8:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 800f3ac:	4321      	orrs	r1, r4
 800f3ae:	f001 8612 	beq.w	8010fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 800f3b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f3b6:	4cbf      	ldr	r4, [pc, #764]	@ (800f6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 800f3b8:	42a0      	cmp	r0, r4
 800f3ba:	f171 0100 	sbcs.w	r1, r1, #0
 800f3be:	f082 81ff 	bcs.w	80117c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800f3c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f3c6:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 800f3ca:	4321      	orrs	r1, r4
 800f3cc:	f002 817e 	beq.w	80116cc <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 800f3d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f3d4:	4cb8      	ldr	r4, [pc, #736]	@ (800f6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800f3d6:	42a0      	cmp	r0, r4
 800f3d8:	f171 0100 	sbcs.w	r1, r1, #0
 800f3dc:	f082 81f0 	bcs.w	80117c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800f3e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f3e4:	f5a0 0400 	sub.w	r4, r0, #8388608	@ 0x800000
 800f3e8:	4321      	orrs	r1, r4
 800f3ea:	f000 829e 	beq.w	800f92a <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 800f3ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f3f2:	4cb2      	ldr	r4, [pc, #712]	@ (800f6bc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800f3f4:	42a0      	cmp	r0, r4
 800f3f6:	f171 0100 	sbcs.w	r1, r1, #0
 800f3fa:	f082 81e1 	bcs.w	80117c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800f3fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f402:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 800f406:	4321      	orrs	r1, r4
 800f408:	f000 826d 	beq.w	800f8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 800f40c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f410:	4cab      	ldr	r4, [pc, #684]	@ (800f6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800f412:	42a0      	cmp	r0, r4
 800f414:	f171 0100 	sbcs.w	r1, r1, #0
 800f418:	f082 81d2 	bcs.w	80117c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800f41c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f420:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 800f424:	4321      	orrs	r1, r4
 800f426:	f001 800d 	beq.w	8010444 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 800f42a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f42e:	4ca5      	ldr	r4, [pc, #660]	@ (800f6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800f430:	42a0      	cmp	r0, r4
 800f432:	f171 0100 	sbcs.w	r1, r1, #0
 800f436:	f082 81c3 	bcs.w	80117c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800f43a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f43e:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
 800f442:	4321      	orrs	r1, r4
 800f444:	f000 81d0 	beq.w	800f7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 800f448:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f44c:	4c9e      	ldr	r4, [pc, #632]	@ (800f6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800f44e:	42a0      	cmp	r0, r4
 800f450:	f171 0100 	sbcs.w	r1, r1, #0
 800f454:	f082 81b4 	bcs.w	80117c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800f458:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f45c:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
 800f460:	4321      	orrs	r1, r4
 800f462:	f000 8142 	beq.w	800f6ea <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 800f466:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f46a:	4c98      	ldr	r4, [pc, #608]	@ (800f6cc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800f46c:	42a0      	cmp	r0, r4
 800f46e:	f171 0100 	sbcs.w	r1, r1, #0
 800f472:	f082 81a5 	bcs.w	80117c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800f476:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f47a:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 800f47e:	4321      	orrs	r1, r4
 800f480:	f001 824e 	beq.w	8010920 <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 800f484:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f488:	4c91      	ldr	r4, [pc, #580]	@ (800f6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 800f48a:	42a0      	cmp	r0, r4
 800f48c:	f171 0100 	sbcs.w	r1, r1, #0
 800f490:	f082 8196 	bcs.w	80117c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800f494:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f498:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 800f49c:	4321      	orrs	r1, r4
 800f49e:	f001 8197 	beq.w	80107d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 800f4a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f4a6:	4c8b      	ldr	r4, [pc, #556]	@ (800f6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800f4a8:	42a0      	cmp	r0, r4
 800f4aa:	f171 0100 	sbcs.w	r1, r1, #0
 800f4ae:	f082 8187 	bcs.w	80117c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800f4b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f4b6:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 800f4ba:	4321      	orrs	r1, r4
 800f4bc:	f001 8154 	beq.w	8010768 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 800f4c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f4c4:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 800f4c8:	f171 0100 	sbcs.w	r1, r1, #0
 800f4cc:	f082 8178 	bcs.w	80117c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800f4d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f4d4:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 800f4d8:	4321      	orrs	r1, r4
 800f4da:	f001 80b7 	beq.w	801064c <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 800f4de:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f4e2:	f248 0401 	movw	r4, #32769	@ 0x8001
 800f4e6:	42a0      	cmp	r0, r4
 800f4e8:	f171 0100 	sbcs.w	r1, r1, #0
 800f4ec:	f082 8168 	bcs.w	80117c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800f4f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f4f4:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 800f4f8:	4321      	orrs	r1, r4
 800f4fa:	f001 8064 	beq.w	80105c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 800f4fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f502:	f244 0401 	movw	r4, #16385	@ 0x4001
 800f506:	42a0      	cmp	r0, r4
 800f508:	f171 0100 	sbcs.w	r1, r1, #0
 800f50c:	f082 8158 	bcs.w	80117c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800f510:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f514:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 800f518:	4321      	orrs	r1, r4
 800f51a:	f001 8011 	beq.w	8010540 <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 800f51e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f522:	f242 0401 	movw	r4, #8193	@ 0x2001
 800f526:	42a0      	cmp	r0, r4
 800f528:	f171 0100 	sbcs.w	r1, r1, #0
 800f52c:	f082 8148 	bcs.w	80117c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800f530:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f534:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
 800f538:	4321      	orrs	r1, r4
 800f53a:	f000 871e 	beq.w	801037a <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 800f53e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f542:	f241 0401 	movw	r4, #4097	@ 0x1001
 800f546:	42a0      	cmp	r0, r4
 800f548:	f171 0100 	sbcs.w	r1, r1, #0
 800f54c:	f082 8138 	bcs.w	80117c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800f550:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f554:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
 800f558:	4321      	orrs	r1, r4
 800f55a:	f000 86a8 	beq.w	80102ae <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 800f55e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f562:	f640 0401 	movw	r4, #2049	@ 0x801
 800f566:	42a0      	cmp	r0, r4
 800f568:	f171 0100 	sbcs.w	r1, r1, #0
 800f56c:	f082 8128 	bcs.w	80117c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800f570:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f574:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
 800f578:	4321      	orrs	r1, r4
 800f57a:	f000 8632 	beq.w	80101e2 <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 800f57e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f582:	f240 4401 	movw	r4, #1025	@ 0x401
 800f586:	42a0      	cmp	r0, r4
 800f588:	f171 0100 	sbcs.w	r1, r1, #0
 800f58c:	f082 8118 	bcs.w	80117c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800f590:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f594:	f5a0 7400 	sub.w	r4, r0, #512	@ 0x200
 800f598:	4321      	orrs	r1, r4
 800f59a:	f000 85b0 	beq.w	80100fe <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 800f59e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f5a2:	f240 2401 	movw	r4, #513	@ 0x201
 800f5a6:	42a0      	cmp	r0, r4
 800f5a8:	f171 0100 	sbcs.w	r1, r1, #0
 800f5ac:	f082 8108 	bcs.w	80117c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800f5b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f5b4:	f5a0 7480 	sub.w	r4, r0, #256	@ 0x100
 800f5b8:	4321      	orrs	r1, r4
 800f5ba:	f000 8535 	beq.w	8010028 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 800f5be:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f5c2:	f240 1401 	movw	r4, #257	@ 0x101
 800f5c6:	42a0      	cmp	r0, r4
 800f5c8:	f171 0100 	sbcs.w	r1, r1, #0
 800f5cc:	f082 80f8 	bcs.w	80117c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800f5d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f5d4:	f1a0 0480 	sub.w	r4, r0, #128	@ 0x80
 800f5d8:	4321      	orrs	r1, r4
 800f5da:	f000 84ba 	beq.w	800ff52 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 800f5de:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f5e2:	2881      	cmp	r0, #129	@ 0x81
 800f5e4:	f171 0100 	sbcs.w	r1, r1, #0
 800f5e8:	f082 80ea 	bcs.w	80117c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800f5ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f5f0:	2821      	cmp	r0, #33	@ 0x21
 800f5f2:	f171 0100 	sbcs.w	r1, r1, #0
 800f5f6:	d26f      	bcs.n	800f6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800f5f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f5fc:	4301      	orrs	r1, r0
 800f5fe:	f002 80df 	beq.w	80117c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800f602:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f606:	1e42      	subs	r2, r0, #1
 800f608:	f141 33ff 	adc.w	r3, r1, #4294967295
 800f60c:	2a20      	cmp	r2, #32
 800f60e:	f173 0100 	sbcs.w	r1, r3, #0
 800f612:	f082 80d5 	bcs.w	80117c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800f616:	2a1f      	cmp	r2, #31
 800f618:	f202 80d2 	bhi.w	80117c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800f61c:	a101      	add	r1, pc, #4	@ (adr r1, 800f624 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 800f61e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f622:	bf00      	nop
 800f624:	0800f985 	.word	0x0800f985
 800f628:	0800fa51 	.word	0x0800fa51
 800f62c:	080117c1 	.word	0x080117c1
 800f630:	0800fb11 	.word	0x0800fb11
 800f634:	080117c1 	.word	0x080117c1
 800f638:	080117c1 	.word	0x080117c1
 800f63c:	080117c1 	.word	0x080117c1
 800f640:	0800fbe1 	.word	0x0800fbe1
 800f644:	080117c1 	.word	0x080117c1
 800f648:	080117c1 	.word	0x080117c1
 800f64c:	080117c1 	.word	0x080117c1
 800f650:	080117c1 	.word	0x080117c1
 800f654:	080117c1 	.word	0x080117c1
 800f658:	080117c1 	.word	0x080117c1
 800f65c:	080117c1 	.word	0x080117c1
 800f660:	0800fcc3 	.word	0x0800fcc3
 800f664:	080117c1 	.word	0x080117c1
 800f668:	080117c1 	.word	0x080117c1
 800f66c:	080117c1 	.word	0x080117c1
 800f670:	080117c1 	.word	0x080117c1
 800f674:	080117c1 	.word	0x080117c1
 800f678:	080117c1 	.word	0x080117c1
 800f67c:	080117c1 	.word	0x080117c1
 800f680:	080117c1 	.word	0x080117c1
 800f684:	080117c1 	.word	0x080117c1
 800f688:	080117c1 	.word	0x080117c1
 800f68c:	080117c1 	.word	0x080117c1
 800f690:	080117c1 	.word	0x080117c1
 800f694:	080117c1 	.word	0x080117c1
 800f698:	080117c1 	.word	0x080117c1
 800f69c:	080117c1 	.word	0x080117c1
 800f6a0:	0800fd99 	.word	0x0800fd99
 800f6a4:	80000001 	.word	0x80000001
 800f6a8:	40000001 	.word	0x40000001
 800f6ac:	20000001 	.word	0x20000001
 800f6b0:	10000001 	.word	0x10000001
 800f6b4:	08000001 	.word	0x08000001
 800f6b8:	04000001 	.word	0x04000001
 800f6bc:	00800001 	.word	0x00800001
 800f6c0:	00400001 	.word	0x00400001
 800f6c4:	00200001 	.word	0x00200001
 800f6c8:	00100001 	.word	0x00100001
 800f6cc:	00080001 	.word	0x00080001
 800f6d0:	00040001 	.word	0x00040001
 800f6d4:	00020001 	.word	0x00020001
 800f6d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f6dc:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800f6e0:	430b      	orrs	r3, r1
 800f6e2:	f000 83c4 	beq.w	800fe6e <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 800f6e6:	f002 b86b 	b.w	80117c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800f6ea:	4ba1      	ldr	r3, [pc, #644]	@ (800f970 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800f6ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800f6f0:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800f6f4:	633b      	str	r3, [r7, #48]	@ 0x30
 800f6f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6f8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800f6fc:	d036      	beq.n	800f76c <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 800f6fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f700:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800f704:	d86b      	bhi.n	800f7de <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800f706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f708:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800f70c:	d02b      	beq.n	800f766 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800f70e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f710:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800f714:	d863      	bhi.n	800f7de <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800f716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f718:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f71c:	d01b      	beq.n	800f756 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800f71e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f720:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f724:	d85b      	bhi.n	800f7de <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800f726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d004      	beq.n	800f736 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 800f72c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f72e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f732:	d008      	beq.n	800f746 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 800f734:	e053      	b.n	800f7de <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f736:	f107 0320 	add.w	r3, r7, #32
 800f73a:	4618      	mov	r0, r3
 800f73c:	f7ff f8ba 	bl	800e8b4 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800f740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f742:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800f744:	e04e      	b.n	800f7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f746:	f107 0314 	add.w	r3, r7, #20
 800f74a:	4618      	mov	r0, r3
 800f74c:	f7ff fa1c 	bl	800eb88 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800f750:	697b      	ldr	r3, [r7, #20]
 800f752:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800f754:	e046      	b.n	800f7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f756:	f107 0308 	add.w	r3, r7, #8
 800f75a:	4618      	mov	r0, r3
 800f75c:	f7ff fb7e 	bl	800ee5c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800f760:	68bb      	ldr	r3, [r7, #8]
 800f762:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800f764:	e03e      	b.n	800f7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800f766:	4b83      	ldr	r3, [pc, #524]	@ (800f974 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800f768:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800f76a:	e03b      	b.n	800f7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f76c:	4b80      	ldr	r3, [pc, #512]	@ (800f970 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800f76e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800f772:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800f776:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f778:	4b7d      	ldr	r3, [pc, #500]	@ (800f970 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	f003 0302 	and.w	r3, r3, #2
 800f780:	2b02      	cmp	r3, #2
 800f782:	d10c      	bne.n	800f79e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 800f784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f786:	2b00      	cmp	r3, #0
 800f788:	d109      	bne.n	800f79e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800f78a:	4b79      	ldr	r3, [pc, #484]	@ (800f970 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	08db      	lsrs	r3, r3, #3
 800f790:	f003 0303 	and.w	r3, r3, #3
 800f794:	4a78      	ldr	r2, [pc, #480]	@ (800f978 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 800f796:	fa22 f303 	lsr.w	r3, r2, r3
 800f79a:	637b      	str	r3, [r7, #52]	@ 0x34
 800f79c:	e01e      	b.n	800f7dc <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f79e:	4b74      	ldr	r3, [pc, #464]	@ (800f970 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800f7a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f7aa:	d106      	bne.n	800f7ba <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800f7ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f7ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f7b2:	d102      	bne.n	800f7ba <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800f7b4:	4b71      	ldr	r3, [pc, #452]	@ (800f97c <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 800f7b6:	637b      	str	r3, [r7, #52]	@ 0x34
 800f7b8:	e010      	b.n	800f7dc <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f7ba:	4b6d      	ldr	r3, [pc, #436]	@ (800f970 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f7c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f7c6:	d106      	bne.n	800f7d6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 800f7c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f7ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f7ce:	d102      	bne.n	800f7d6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800f7d0:	4b6b      	ldr	r3, [pc, #428]	@ (800f980 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 800f7d2:	637b      	str	r3, [r7, #52]	@ 0x34
 800f7d4:	e002      	b.n	800f7dc <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800f7d6:	2300      	movs	r3, #0
 800f7d8:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800f7da:	e003      	b.n	800f7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 800f7dc:	e002      	b.n	800f7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 800f7de:	2300      	movs	r3, #0
 800f7e0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800f7e2:	bf00      	nop
          }
        }
        break;
 800f7e4:	f001 bfef 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800f7e8:	4b61      	ldr	r3, [pc, #388]	@ (800f970 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800f7ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800f7ee:	f403 1360 	and.w	r3, r3, #3670016	@ 0x380000
 800f7f2:	633b      	str	r3, [r7, #48]	@ 0x30
 800f7f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f7fa:	d036      	beq.n	800f86a <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 800f7fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f802:	d86b      	bhi.n	800f8dc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800f804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f806:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800f80a:	d02b      	beq.n	800f864 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 800f80c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f80e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800f812:	d863      	bhi.n	800f8dc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800f814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f816:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f81a:	d01b      	beq.n	800f854 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800f81c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f81e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f822:	d85b      	bhi.n	800f8dc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800f824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f826:	2b00      	cmp	r3, #0
 800f828:	d004      	beq.n	800f834 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800f82a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f82c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800f830:	d008      	beq.n	800f844 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 800f832:	e053      	b.n	800f8dc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f834:	f107 0320 	add.w	r3, r7, #32
 800f838:	4618      	mov	r0, r3
 800f83a:	f7ff f83b 	bl	800e8b4 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800f83e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f840:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800f842:	e04e      	b.n	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f844:	f107 0314 	add.w	r3, r7, #20
 800f848:	4618      	mov	r0, r3
 800f84a:	f7ff f99d 	bl	800eb88 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800f84e:	697b      	ldr	r3, [r7, #20]
 800f850:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800f852:	e046      	b.n	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f854:	f107 0308 	add.w	r3, r7, #8
 800f858:	4618      	mov	r0, r3
 800f85a:	f7ff faff 	bl	800ee5c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800f85e:	68bb      	ldr	r3, [r7, #8]
 800f860:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800f862:	e03e      	b.n	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800f864:	4b43      	ldr	r3, [pc, #268]	@ (800f974 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800f866:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800f868:	e03b      	b.n	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f86a:	4b41      	ldr	r3, [pc, #260]	@ (800f970 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800f86c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800f870:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800f874:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f876:	4b3e      	ldr	r3, [pc, #248]	@ (800f970 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	f003 0302 	and.w	r3, r3, #2
 800f87e:	2b02      	cmp	r3, #2
 800f880:	d10c      	bne.n	800f89c <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 800f882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f884:	2b00      	cmp	r3, #0
 800f886:	d109      	bne.n	800f89c <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800f888:	4b39      	ldr	r3, [pc, #228]	@ (800f970 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	08db      	lsrs	r3, r3, #3
 800f88e:	f003 0303 	and.w	r3, r3, #3
 800f892:	4a39      	ldr	r2, [pc, #228]	@ (800f978 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 800f894:	fa22 f303 	lsr.w	r3, r2, r3
 800f898:	637b      	str	r3, [r7, #52]	@ 0x34
 800f89a:	e01e      	b.n	800f8da <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f89c:	4b34      	ldr	r3, [pc, #208]	@ (800f970 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800f8a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f8a8:	d106      	bne.n	800f8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800f8aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f8b0:	d102      	bne.n	800f8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800f8b2:	4b32      	ldr	r3, [pc, #200]	@ (800f97c <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 800f8b4:	637b      	str	r3, [r7, #52]	@ 0x34
 800f8b6:	e010      	b.n	800f8da <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f8b8:	4b2d      	ldr	r3, [pc, #180]	@ (800f970 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f8c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f8c4:	d106      	bne.n	800f8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 800f8c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f8cc:	d102      	bne.n	800f8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800f8ce:	4b2c      	ldr	r3, [pc, #176]	@ (800f980 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 800f8d0:	637b      	str	r3, [r7, #52]	@ 0x34
 800f8d2:	e002      	b.n	800f8da <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800f8d4:	2300      	movs	r3, #0
 800f8d6:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800f8d8:	e003      	b.n	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 800f8da:	e002      	b.n	800f8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 800f8dc:	2300      	movs	r3, #0
 800f8de:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800f8e0:	bf00      	nop
          }
        }
        break;
 800f8e2:	f001 bf70 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 800f8e6:	4b22      	ldr	r3, [pc, #136]	@ (800f970 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800f8e8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800f8ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f8f0:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 800f8f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d108      	bne.n	800f90a <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f8f8:	f107 0320 	add.w	r3, r7, #32
 800f8fc:	4618      	mov	r0, r3
 800f8fe:	f7fe ffd9 	bl	800e8b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f904:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f906:	f001 bf5e 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 800f90a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f90c:	2b40      	cmp	r3, #64	@ 0x40
 800f90e:	d108      	bne.n	800f922 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f910:	f107 0314 	add.w	r3, r7, #20
 800f914:	4618      	mov	r0, r3
 800f916:	f7ff f937 	bl	800eb88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800f91a:	69fb      	ldr	r3, [r7, #28]
 800f91c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f91e:	f001 bf52 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800f922:	2300      	movs	r3, #0
 800f924:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f926:	f001 bf4e 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 800f92a:	4b11      	ldr	r3, [pc, #68]	@ (800f970 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800f92c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800f930:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f934:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 800f936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d108      	bne.n	800f94e <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f93c:	f107 0320 	add.w	r3, r7, #32
 800f940:	4618      	mov	r0, r3
 800f942:	f7fe ffb7 	bl	800e8b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f948:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f94a:	f001 bf3c 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 800f94e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f950:	2b80      	cmp	r3, #128	@ 0x80
 800f952:	d108      	bne.n	800f966 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f954:	f107 0314 	add.w	r3, r7, #20
 800f958:	4618      	mov	r0, r3
 800f95a:	f7ff f915 	bl	800eb88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800f95e:	69fb      	ldr	r3, [r7, #28]
 800f960:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f962:	f001 bf30 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800f966:	2300      	movs	r3, #0
 800f968:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f96a:	f001 bf2c 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800f96e:	bf00      	nop
 800f970:	44020c00 	.word	0x44020c00
 800f974:	00bb8000 	.word	0x00bb8000
 800f978:	03d09000 	.word	0x03d09000
 800f97c:	003d0900 	.word	0x003d0900
 800f980:	017d7840 	.word	0x017d7840
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800f984:	4b9d      	ldr	r3, [pc, #628]	@ (800fbfc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800f986:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800f98a:	f003 0307 	and.w	r3, r3, #7
 800f98e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800f990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f992:	2b00      	cmp	r3, #0
 800f994:	d104      	bne.n	800f9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800f996:	f7fc ffd7 	bl	800c948 <HAL_RCC_GetPCLK2Freq>
 800f99a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800f99c:	f001 bf13 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 800f9a0:	4b96      	ldr	r3, [pc, #600]	@ (800fbfc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f9a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f9ac:	d10a      	bne.n	800f9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 800f9ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9b0:	2b01      	cmp	r3, #1
 800f9b2:	d107      	bne.n	800f9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f9b4:	f107 0314 	add.w	r3, r7, #20
 800f9b8:	4618      	mov	r0, r3
 800f9ba:	f7ff f8e5 	bl	800eb88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800f9be:	69bb      	ldr	r3, [r7, #24]
 800f9c0:	637b      	str	r3, [r7, #52]	@ 0x34
 800f9c2:	e043      	b.n	800fa4c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 800f9c4:	4b8d      	ldr	r3, [pc, #564]	@ (800fbfc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f9cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f9d0:	d10a      	bne.n	800f9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 800f9d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9d4:	2b02      	cmp	r3, #2
 800f9d6:	d107      	bne.n	800f9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f9d8:	f107 0308 	add.w	r3, r7, #8
 800f9dc:	4618      	mov	r0, r3
 800f9de:	f7ff fa3d 	bl	800ee5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	637b      	str	r3, [r7, #52]	@ 0x34
 800f9e6:	e031      	b.n	800fa4c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800f9e8:	4b84      	ldr	r3, [pc, #528]	@ (800fbfc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	f003 0302 	and.w	r3, r3, #2
 800f9f0:	2b02      	cmp	r3, #2
 800f9f2:	d10c      	bne.n	800fa0e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800f9f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9f6:	2b03      	cmp	r3, #3
 800f9f8:	d109      	bne.n	800fa0e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800f9fa:	4b80      	ldr	r3, [pc, #512]	@ (800fbfc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800f9fc:	681b      	ldr	r3, [r3, #0]
 800f9fe:	08db      	lsrs	r3, r3, #3
 800fa00:	f003 0303 	and.w	r3, r3, #3
 800fa04:	4a7e      	ldr	r2, [pc, #504]	@ (800fc00 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800fa06:	fa22 f303 	lsr.w	r3, r2, r3
 800fa0a:	637b      	str	r3, [r7, #52]	@ 0x34
 800fa0c:	e01e      	b.n	800fa4c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 800fa0e:	4b7b      	ldr	r3, [pc, #492]	@ (800fbfc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800fa16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fa1a:	d105      	bne.n	800fa28 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 800fa1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa1e:	2b04      	cmp	r3, #4
 800fa20:	d102      	bne.n	800fa28 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 800fa22:	4b78      	ldr	r3, [pc, #480]	@ (800fc04 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800fa24:	637b      	str	r3, [r7, #52]	@ 0x34
 800fa26:	e011      	b.n	800fa4c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800fa28:	4b74      	ldr	r3, [pc, #464]	@ (800fbfc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800fa2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800fa2e:	f003 0302 	and.w	r3, r3, #2
 800fa32:	2b02      	cmp	r3, #2
 800fa34:	d106      	bne.n	800fa44 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 800fa36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa38:	2b05      	cmp	r3, #5
 800fa3a:	d103      	bne.n	800fa44 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 800fa3c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fa40:	637b      	str	r3, [r7, #52]	@ 0x34
 800fa42:	e003      	b.n	800fa4c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 800fa44:	2300      	movs	r3, #0
 800fa46:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800fa48:	f001 bebd 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800fa4c:	f001 bebb 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800fa50:	4b6a      	ldr	r3, [pc, #424]	@ (800fbfc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800fa52:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800fa56:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800fa5a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800fa5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d104      	bne.n	800fa6c <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800fa62:	f7fc ff5b 	bl	800c91c <HAL_RCC_GetPCLK1Freq>
 800fa66:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 800fa68:	f001 bead 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 800fa6c:	4b63      	ldr	r3, [pc, #396]	@ (800fbfc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fa74:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800fa78:	d10a      	bne.n	800fa90 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 800fa7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa7c:	2b08      	cmp	r3, #8
 800fa7e:	d107      	bne.n	800fa90 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fa80:	f107 0314 	add.w	r3, r7, #20
 800fa84:	4618      	mov	r0, r3
 800fa86:	f7ff f87f 	bl	800eb88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800fa8a:	69bb      	ldr	r3, [r7, #24]
 800fa8c:	637b      	str	r3, [r7, #52]	@ 0x34
 800fa8e:	e03d      	b.n	800fb0c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 800fa90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa92:	2b10      	cmp	r3, #16
 800fa94:	d108      	bne.n	800faa8 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fa96:	f107 0308 	add.w	r3, r7, #8
 800fa9a:	4618      	mov	r0, r3
 800fa9c:	f7ff f9de 	bl	800ee5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800faa4:	f001 be8f 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800faa8:	4b54      	ldr	r3, [pc, #336]	@ (800fbfc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	f003 0302 	and.w	r3, r3, #2
 800fab0:	2b02      	cmp	r3, #2
 800fab2:	d10c      	bne.n	800face <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 800fab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fab6:	2b18      	cmp	r3, #24
 800fab8:	d109      	bne.n	800face <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800faba:	4b50      	ldr	r3, [pc, #320]	@ (800fbfc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	08db      	lsrs	r3, r3, #3
 800fac0:	f003 0303 	and.w	r3, r3, #3
 800fac4:	4a4e      	ldr	r2, [pc, #312]	@ (800fc00 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800fac6:	fa22 f303 	lsr.w	r3, r2, r3
 800faca:	637b      	str	r3, [r7, #52]	@ 0x34
 800facc:	e01e      	b.n	800fb0c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 800face:	4b4b      	ldr	r3, [pc, #300]	@ (800fbfc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800fad6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fada:	d105      	bne.n	800fae8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800fadc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fade:	2b20      	cmp	r3, #32
 800fae0:	d102      	bne.n	800fae8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 800fae2:	4b48      	ldr	r3, [pc, #288]	@ (800fc04 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800fae4:	637b      	str	r3, [r7, #52]	@ 0x34
 800fae6:	e011      	b.n	800fb0c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800fae8:	4b44      	ldr	r3, [pc, #272]	@ (800fbfc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800faea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800faee:	f003 0302 	and.w	r3, r3, #2
 800faf2:	2b02      	cmp	r3, #2
 800faf4:	d106      	bne.n	800fb04 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 800faf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800faf8:	2b28      	cmp	r3, #40	@ 0x28
 800fafa:	d103      	bne.n	800fb04 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 800fafc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fb00:	637b      	str	r3, [r7, #52]	@ 0x34
 800fb02:	e003      	b.n	800fb0c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 800fb04:	2300      	movs	r3, #0
 800fb06:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800fb08:	f001 be5d 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800fb0c:	f001 be5b 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800fb10:	4b3a      	ldr	r3, [pc, #232]	@ (800fbfc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800fb12:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800fb16:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800fb1a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800fb1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d104      	bne.n	800fb2c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800fb22:	f7fc fefb 	bl	800c91c <HAL_RCC_GetPCLK1Freq>
 800fb26:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 800fb28:	f001 be4d 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 800fb2c:	4b33      	ldr	r3, [pc, #204]	@ (800fbfc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fb34:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800fb38:	d10a      	bne.n	800fb50 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 800fb3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb3c:	2b40      	cmp	r3, #64	@ 0x40
 800fb3e:	d107      	bne.n	800fb50 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fb40:	f107 0314 	add.w	r3, r7, #20
 800fb44:	4618      	mov	r0, r3
 800fb46:	f7ff f81f 	bl	800eb88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800fb4a:	69bb      	ldr	r3, [r7, #24]
 800fb4c:	637b      	str	r3, [r7, #52]	@ 0x34
 800fb4e:	e045      	b.n	800fbdc <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 800fb50:	4b2a      	ldr	r3, [pc, #168]	@ (800fbfc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800fb58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fb5c:	d10a      	bne.n	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 800fb5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb60:	2b80      	cmp	r3, #128	@ 0x80
 800fb62:	d107      	bne.n	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fb64:	f107 0308 	add.w	r3, r7, #8
 800fb68:	4618      	mov	r0, r3
 800fb6a:	f7ff f977 	bl	800ee5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	637b      	str	r3, [r7, #52]	@ 0x34
 800fb72:	e033      	b.n	800fbdc <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800fb74:	4b21      	ldr	r3, [pc, #132]	@ (800fbfc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	f003 0302 	and.w	r3, r3, #2
 800fb7c:	2b02      	cmp	r3, #2
 800fb7e:	d10c      	bne.n	800fb9a <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 800fb80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb82:	2bc0      	cmp	r3, #192	@ 0xc0
 800fb84:	d109      	bne.n	800fb9a <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800fb86:	4b1d      	ldr	r3, [pc, #116]	@ (800fbfc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	08db      	lsrs	r3, r3, #3
 800fb8c:	f003 0303 	and.w	r3, r3, #3
 800fb90:	4a1b      	ldr	r2, [pc, #108]	@ (800fc00 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800fb92:	fa22 f303 	lsr.w	r3, r2, r3
 800fb96:	637b      	str	r3, [r7, #52]	@ 0x34
 800fb98:	e020      	b.n	800fbdc <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 800fb9a:	4b18      	ldr	r3, [pc, #96]	@ (800fbfc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800fba2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fba6:	d106      	bne.n	800fbb6 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 800fba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbaa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fbae:	d102      	bne.n	800fbb6 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 800fbb0:	4b14      	ldr	r3, [pc, #80]	@ (800fc04 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800fbb2:	637b      	str	r3, [r7, #52]	@ 0x34
 800fbb4:	e012      	b.n	800fbdc <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800fbb6:	4b11      	ldr	r3, [pc, #68]	@ (800fbfc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800fbb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800fbbc:	f003 0302 	and.w	r3, r3, #2
 800fbc0:	2b02      	cmp	r3, #2
 800fbc2:	d107      	bne.n	800fbd4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 800fbc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbc6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800fbca:	d103      	bne.n	800fbd4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 800fbcc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fbd0:	637b      	str	r3, [r7, #52]	@ 0x34
 800fbd2:	e003      	b.n	800fbdc <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 800fbd4:	2300      	movs	r3, #0
 800fbd6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800fbd8:	f001 bdf5 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800fbdc:	f001 bdf3 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800fbe0:	4b06      	ldr	r3, [pc, #24]	@ (800fbfc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800fbe2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800fbe6:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 800fbea:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800fbec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d10a      	bne.n	800fc08 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800fbf2:	f7fc fe93 	bl	800c91c <HAL_RCC_GetPCLK1Freq>
 800fbf6:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 800fbf8:	f001 bde5 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800fbfc:	44020c00 	.word	0x44020c00
 800fc00:	03d09000 	.word	0x03d09000
 800fc04:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 800fc08:	4ba0      	ldr	r3, [pc, #640]	@ (800fe8c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fc10:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800fc14:	d10b      	bne.n	800fc2e <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 800fc16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fc1c:	d107      	bne.n	800fc2e <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fc1e:	f107 0314 	add.w	r3, r7, #20
 800fc22:	4618      	mov	r0, r3
 800fc24:	f7fe ffb0 	bl	800eb88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800fc28:	69bb      	ldr	r3, [r7, #24]
 800fc2a:	637b      	str	r3, [r7, #52]	@ 0x34
 800fc2c:	e047      	b.n	800fcbe <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 800fc2e:	4b97      	ldr	r3, [pc, #604]	@ (800fe8c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800fc36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fc3a:	d10b      	bne.n	800fc54 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 800fc3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800fc42:	d107      	bne.n	800fc54 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fc44:	f107 0308 	add.w	r3, r7, #8
 800fc48:	4618      	mov	r0, r3
 800fc4a:	f7ff f907 	bl	800ee5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	637b      	str	r3, [r7, #52]	@ 0x34
 800fc52:	e034      	b.n	800fcbe <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800fc54:	4b8d      	ldr	r3, [pc, #564]	@ (800fe8c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	f003 0302 	and.w	r3, r3, #2
 800fc5c:	2b02      	cmp	r3, #2
 800fc5e:	d10d      	bne.n	800fc7c <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 800fc60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc62:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800fc66:	d109      	bne.n	800fc7c <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800fc68:	4b88      	ldr	r3, [pc, #544]	@ (800fe8c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	08db      	lsrs	r3, r3, #3
 800fc6e:	f003 0303 	and.w	r3, r3, #3
 800fc72:	4a87      	ldr	r2, [pc, #540]	@ (800fe90 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800fc74:	fa22 f303 	lsr.w	r3, r2, r3
 800fc78:	637b      	str	r3, [r7, #52]	@ 0x34
 800fc7a:	e020      	b.n	800fcbe <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 800fc7c:	4b83      	ldr	r3, [pc, #524]	@ (800fe8c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800fc84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fc88:	d106      	bne.n	800fc98 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 800fc8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800fc90:	d102      	bne.n	800fc98 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 800fc92:	4b80      	ldr	r3, [pc, #512]	@ (800fe94 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800fc94:	637b      	str	r3, [r7, #52]	@ 0x34
 800fc96:	e012      	b.n	800fcbe <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800fc98:	4b7c      	ldr	r3, [pc, #496]	@ (800fe8c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800fc9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800fc9e:	f003 0302 	and.w	r3, r3, #2
 800fca2:	2b02      	cmp	r3, #2
 800fca4:	d107      	bne.n	800fcb6 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 800fca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fca8:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800fcac:	d103      	bne.n	800fcb6 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 800fcae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fcb2:	637b      	str	r3, [r7, #52]	@ 0x34
 800fcb4:	e003      	b.n	800fcbe <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 800fcb6:	2300      	movs	r3, #0
 800fcb8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800fcba:	f001 bd84 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800fcbe:	f001 bd82 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800fcc2:	4b72      	ldr	r3, [pc, #456]	@ (800fe8c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800fcc4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800fcc8:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800fccc:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800fcce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d104      	bne.n	800fcde <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800fcd4:	f7fc fe22 	bl	800c91c <HAL_RCC_GetPCLK1Freq>
 800fcd8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 800fcda:	f001 bd74 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 800fcde:	4b6b      	ldr	r3, [pc, #428]	@ (800fe8c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fce6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800fcea:	d10b      	bne.n	800fd04 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 800fcec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fcee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fcf2:	d107      	bne.n	800fd04 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fcf4:	f107 0314 	add.w	r3, r7, #20
 800fcf8:	4618      	mov	r0, r3
 800fcfa:	f7fe ff45 	bl	800eb88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800fcfe:	69bb      	ldr	r3, [r7, #24]
 800fd00:	637b      	str	r3, [r7, #52]	@ 0x34
 800fd02:	e047      	b.n	800fd94 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 800fd04:	4b61      	ldr	r3, [pc, #388]	@ (800fe8c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800fd0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fd10:	d10b      	bne.n	800fd2a <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 800fd12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fd18:	d107      	bne.n	800fd2a <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fd1a:	f107 0308 	add.w	r3, r7, #8
 800fd1e:	4618      	mov	r0, r3
 800fd20:	f7ff f89c 	bl	800ee5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	637b      	str	r3, [r7, #52]	@ 0x34
 800fd28:	e034      	b.n	800fd94 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800fd2a:	4b58      	ldr	r3, [pc, #352]	@ (800fe8c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	f003 0302 	and.w	r3, r3, #2
 800fd32:	2b02      	cmp	r3, #2
 800fd34:	d10d      	bne.n	800fd52 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 800fd36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd38:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800fd3c:	d109      	bne.n	800fd52 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800fd3e:	4b53      	ldr	r3, [pc, #332]	@ (800fe8c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	08db      	lsrs	r3, r3, #3
 800fd44:	f003 0303 	and.w	r3, r3, #3
 800fd48:	4a51      	ldr	r2, [pc, #324]	@ (800fe90 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800fd4a:	fa22 f303 	lsr.w	r3, r2, r3
 800fd4e:	637b      	str	r3, [r7, #52]	@ 0x34
 800fd50:	e020      	b.n	800fd94 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 800fd52:	4b4e      	ldr	r3, [pc, #312]	@ (800fe8c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800fd54:	681b      	ldr	r3, [r3, #0]
 800fd56:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800fd5a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fd5e:	d106      	bne.n	800fd6e <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800fd60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd62:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800fd66:	d102      	bne.n	800fd6e <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 800fd68:	4b4a      	ldr	r3, [pc, #296]	@ (800fe94 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800fd6a:	637b      	str	r3, [r7, #52]	@ 0x34
 800fd6c:	e012      	b.n	800fd94 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800fd6e:	4b47      	ldr	r3, [pc, #284]	@ (800fe8c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800fd70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800fd74:	f003 0302 	and.w	r3, r3, #2
 800fd78:	2b02      	cmp	r3, #2
 800fd7a:	d107      	bne.n	800fd8c <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800fd7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd7e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800fd82:	d103      	bne.n	800fd8c <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 800fd84:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fd88:	637b      	str	r3, [r7, #52]	@ 0x34
 800fd8a:	e003      	b.n	800fd94 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 800fd8c:	2300      	movs	r3, #0
 800fd8e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800fd90:	f001 bd19 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800fd94:	f001 bd17 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800fd98:	4b3c      	ldr	r3, [pc, #240]	@ (800fe8c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800fd9a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800fd9e:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 800fda2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800fda4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d104      	bne.n	800fdb4 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800fdaa:	f7fc fdb7 	bl	800c91c <HAL_RCC_GetPCLK1Freq>
 800fdae:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 800fdb0:	f001 bd09 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 800fdb4:	4b35      	ldr	r3, [pc, #212]	@ (800fe8c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fdbc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800fdc0:	d10b      	bne.n	800fdda <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 800fdc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fdc4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800fdc8:	d107      	bne.n	800fdda <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fdca:	f107 0314 	add.w	r3, r7, #20
 800fdce:	4618      	mov	r0, r3
 800fdd0:	f7fe feda 	bl	800eb88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800fdd4:	69bb      	ldr	r3, [r7, #24]
 800fdd6:	637b      	str	r3, [r7, #52]	@ 0x34
 800fdd8:	e047      	b.n	800fe6a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 800fdda:	4b2c      	ldr	r3, [pc, #176]	@ (800fe8c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800fde2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fde6:	d10b      	bne.n	800fe00 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 800fde8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fdea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fdee:	d107      	bne.n	800fe00 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fdf0:	f107 0308 	add.w	r3, r7, #8
 800fdf4:	4618      	mov	r0, r3
 800fdf6:	f7ff f831 	bl	800ee5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	637b      	str	r3, [r7, #52]	@ 0x34
 800fdfe:	e034      	b.n	800fe6a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800fe00:	4b22      	ldr	r3, [pc, #136]	@ (800fe8c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	f003 0302 	and.w	r3, r3, #2
 800fe08:	2b02      	cmp	r3, #2
 800fe0a:	d10d      	bne.n	800fe28 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 800fe0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe0e:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800fe12:	d109      	bne.n	800fe28 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800fe14:	4b1d      	ldr	r3, [pc, #116]	@ (800fe8c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800fe16:	681b      	ldr	r3, [r3, #0]
 800fe18:	08db      	lsrs	r3, r3, #3
 800fe1a:	f003 0303 	and.w	r3, r3, #3
 800fe1e:	4a1c      	ldr	r2, [pc, #112]	@ (800fe90 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800fe20:	fa22 f303 	lsr.w	r3, r2, r3
 800fe24:	637b      	str	r3, [r7, #52]	@ 0x34
 800fe26:	e020      	b.n	800fe6a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 800fe28:	4b18      	ldr	r3, [pc, #96]	@ (800fe8c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800fe30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fe34:	d106      	bne.n	800fe44 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 800fe36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe38:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800fe3c:	d102      	bne.n	800fe44 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 800fe3e:	4b15      	ldr	r3, [pc, #84]	@ (800fe94 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800fe40:	637b      	str	r3, [r7, #52]	@ 0x34
 800fe42:	e012      	b.n	800fe6a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800fe44:	4b11      	ldr	r3, [pc, #68]	@ (800fe8c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800fe46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800fe4a:	f003 0302 	and.w	r3, r3, #2
 800fe4e:	2b02      	cmp	r3, #2
 800fe50:	d107      	bne.n	800fe62 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 800fe52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe54:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800fe58:	d103      	bne.n	800fe62 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 800fe5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fe5e:	637b      	str	r3, [r7, #52]	@ 0x34
 800fe60:	e003      	b.n	800fe6a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 800fe62:	2300      	movs	r3, #0
 800fe64:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800fe66:	f001 bcae 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800fe6a:	f001 bcac 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 800fe6e:	4b07      	ldr	r3, [pc, #28]	@ (800fe8c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800fe70:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800fe74:	f403 13e0 	and.w	r3, r3, #1835008	@ 0x1c0000
 800fe78:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 800fe7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d10b      	bne.n	800fe98 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800fe80:	f7fc fd4c 	bl	800c91c <HAL_RCC_GetPCLK1Freq>
 800fe84:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 800fe86:	f001 bc9e 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800fe8a:	bf00      	nop
 800fe8c:	44020c00 	.word	0x44020c00
 800fe90:	03d09000 	.word	0x03d09000
 800fe94:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 800fe98:	4ba0      	ldr	r3, [pc, #640]	@ (801011c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fea0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800fea4:	d10b      	bne.n	800febe <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 800fea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fea8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800feac:	d107      	bne.n	800febe <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800feae:	f107 0314 	add.w	r3, r7, #20
 800feb2:	4618      	mov	r0, r3
 800feb4:	f7fe fe68 	bl	800eb88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800feb8:	69bb      	ldr	r3, [r7, #24]
 800feba:	637b      	str	r3, [r7, #52]	@ 0x34
 800febc:	e047      	b.n	800ff4e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 800febe:	4b97      	ldr	r3, [pc, #604]	@ (801011c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800fec6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800feca:	d10b      	bne.n	800fee4 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 800fecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fece:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800fed2:	d107      	bne.n	800fee4 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fed4:	f107 0308 	add.w	r3, r7, #8
 800fed8:	4618      	mov	r0, r3
 800feda:	f7fe ffbf 	bl	800ee5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	637b      	str	r3, [r7, #52]	@ 0x34
 800fee2:	e034      	b.n	800ff4e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 800fee4:	4b8d      	ldr	r3, [pc, #564]	@ (801011c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	f003 0302 	and.w	r3, r3, #2
 800feec:	2b02      	cmp	r3, #2
 800feee:	d10d      	bne.n	800ff0c <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 800fef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fef2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800fef6:	d109      	bne.n	800ff0c <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800fef8:	4b88      	ldr	r3, [pc, #544]	@ (801011c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	08db      	lsrs	r3, r3, #3
 800fefe:	f003 0303 	and.w	r3, r3, #3
 800ff02:	4a87      	ldr	r2, [pc, #540]	@ (8010120 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800ff04:	fa22 f303 	lsr.w	r3, r2, r3
 800ff08:	637b      	str	r3, [r7, #52]	@ 0x34
 800ff0a:	e020      	b.n	800ff4e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 800ff0c:	4b83      	ldr	r3, [pc, #524]	@ (801011c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800ff0e:	681b      	ldr	r3, [r3, #0]
 800ff10:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ff14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ff18:	d106      	bne.n	800ff28 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800ff1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff1c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ff20:	d102      	bne.n	800ff28 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 800ff22:	4b80      	ldr	r3, [pc, #512]	@ (8010124 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800ff24:	637b      	str	r3, [r7, #52]	@ 0x34
 800ff26:	e012      	b.n	800ff4e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 800ff28:	4b7c      	ldr	r3, [pc, #496]	@ (801011c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800ff2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ff2e:	f003 0302 	and.w	r3, r3, #2
 800ff32:	2b02      	cmp	r3, #2
 800ff34:	d107      	bne.n	800ff46 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 800ff36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff38:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800ff3c:	d103      	bne.n	800ff46 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 800ff3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ff42:	637b      	str	r3, [r7, #52]	@ 0x34
 800ff44:	e003      	b.n	800ff4e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 800ff46:	2300      	movs	r3, #0
 800ff48:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ff4a:	f001 bc3c 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800ff4e:	f001 bc3a 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 800ff52:	4b72      	ldr	r3, [pc, #456]	@ (801011c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800ff54:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800ff58:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800ff5c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 800ff5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d104      	bne.n	800ff6e <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800ff64:	f7fc fcda 	bl	800c91c <HAL_RCC_GetPCLK1Freq>
 800ff68:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 800ff6a:	f001 bc2c 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 800ff6e:	4b6b      	ldr	r3, [pc, #428]	@ (801011c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ff76:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ff7a:	d10b      	bne.n	800ff94 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800ff7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff7e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ff82:	d107      	bne.n	800ff94 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ff84:	f107 0314 	add.w	r3, r7, #20
 800ff88:	4618      	mov	r0, r3
 800ff8a:	f7fe fdfd 	bl	800eb88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ff8e:	69bb      	ldr	r3, [r7, #24]
 800ff90:	637b      	str	r3, [r7, #52]	@ 0x34
 800ff92:	e047      	b.n	8010024 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 800ff94:	4b61      	ldr	r3, [pc, #388]	@ (801011c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ff9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ffa0:	d10b      	bne.n	800ffba <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 800ffa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ffa4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ffa8:	d107      	bne.n	800ffba <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ffaa:	f107 0308 	add.w	r3, r7, #8
 800ffae:	4618      	mov	r0, r3
 800ffb0:	f7fe ff54 	bl	800ee5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	637b      	str	r3, [r7, #52]	@ 0x34
 800ffb8:	e034      	b.n	8010024 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 800ffba:	4b58      	ldr	r3, [pc, #352]	@ (801011c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800ffbc:	681b      	ldr	r3, [r3, #0]
 800ffbe:	f003 0302 	and.w	r3, r3, #2
 800ffc2:	2b02      	cmp	r3, #2
 800ffc4:	d10d      	bne.n	800ffe2 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 800ffc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ffc8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800ffcc:	d109      	bne.n	800ffe2 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ffce:	4b53      	ldr	r3, [pc, #332]	@ (801011c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	08db      	lsrs	r3, r3, #3
 800ffd4:	f003 0303 	and.w	r3, r3, #3
 800ffd8:	4a51      	ldr	r2, [pc, #324]	@ (8010120 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800ffda:	fa22 f303 	lsr.w	r3, r2, r3
 800ffde:	637b      	str	r3, [r7, #52]	@ 0x34
 800ffe0:	e020      	b.n	8010024 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 800ffe2:	4b4e      	ldr	r3, [pc, #312]	@ (801011c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ffea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ffee:	d106      	bne.n	800fffe <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 800fff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fff2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800fff6:	d102      	bne.n	800fffe <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 800fff8:	4b4a      	ldr	r3, [pc, #296]	@ (8010124 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800fffa:	637b      	str	r3, [r7, #52]	@ 0x34
 800fffc:	e012      	b.n	8010024 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 800fffe:	4b47      	ldr	r3, [pc, #284]	@ (801011c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8010000:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8010004:	f003 0302 	and.w	r3, r3, #2
 8010008:	2b02      	cmp	r3, #2
 801000a:	d107      	bne.n	801001c <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 801000c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801000e:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8010012:	d103      	bne.n	801001c <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 8010014:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010018:	637b      	str	r3, [r7, #52]	@ 0x34
 801001a:	e003      	b.n	8010024 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 801001c:	2300      	movs	r3, #0
 801001e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8010020:	f001 bbd1 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8010024:	f001 bbcf 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 8010028:	4b3c      	ldr	r3, [pc, #240]	@ (801011c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 801002a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801002e:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8010032:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 8010034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010036:	2b00      	cmp	r3, #0
 8010038:	d104      	bne.n	8010044 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 801003a:	f7fc fc6f 	bl	800c91c <HAL_RCC_GetPCLK1Freq>
 801003e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 8010040:	f001 bbc1 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 8010044:	4b35      	ldr	r3, [pc, #212]	@ (801011c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801004c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8010050:	d10b      	bne.n	801006a <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 8010052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010054:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010058:	d107      	bne.n	801006a <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801005a:	f107 0314 	add.w	r3, r7, #20
 801005e:	4618      	mov	r0, r3
 8010060:	f7fe fd92 	bl	800eb88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8010064:	69bb      	ldr	r3, [r7, #24]
 8010066:	637b      	str	r3, [r7, #52]	@ 0x34
 8010068:	e047      	b.n	80100fa <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 801006a:	4b2c      	ldr	r3, [pc, #176]	@ (801011c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010072:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010076:	d10b      	bne.n	8010090 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 8010078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801007a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801007e:	d107      	bne.n	8010090 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010080:	f107 0308 	add.w	r3, r7, #8
 8010084:	4618      	mov	r0, r3
 8010086:	f7fe fee9 	bl	800ee5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	637b      	str	r3, [r7, #52]	@ 0x34
 801008e:	e034      	b.n	80100fa <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 8010090:	4b22      	ldr	r3, [pc, #136]	@ (801011c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	f003 0302 	and.w	r3, r3, #2
 8010098:	2b02      	cmp	r3, #2
 801009a:	d10d      	bne.n	80100b8 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 801009c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801009e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80100a2:	d109      	bne.n	80100b8 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80100a4:	4b1d      	ldr	r3, [pc, #116]	@ (801011c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	08db      	lsrs	r3, r3, #3
 80100aa:	f003 0303 	and.w	r3, r3, #3
 80100ae:	4a1c      	ldr	r2, [pc, #112]	@ (8010120 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 80100b0:	fa22 f303 	lsr.w	r3, r2, r3
 80100b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80100b6:	e020      	b.n	80100fa <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 80100b8:	4b18      	ldr	r3, [pc, #96]	@ (801011c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80100c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80100c4:	d106      	bne.n	80100d4 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 80100c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80100c8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80100cc:	d102      	bne.n	80100d4 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 80100ce:	4b15      	ldr	r3, [pc, #84]	@ (8010124 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 80100d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80100d2:	e012      	b.n	80100fa <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 80100d4:	4b11      	ldr	r3, [pc, #68]	@ (801011c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80100d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80100da:	f003 0302 	and.w	r3, r3, #2
 80100de:	2b02      	cmp	r3, #2
 80100e0:	d107      	bne.n	80100f2 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 80100e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80100e4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80100e8:	d103      	bne.n	80100f2 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 80100ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80100ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80100f0:	e003      	b.n	80100fa <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 80100f2:	2300      	movs	r3, #0
 80100f4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80100f6:	f001 bb66 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80100fa:	f001 bb64 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 80100fe:	4b07      	ldr	r3, [pc, #28]	@ (801011c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8010100:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8010104:	f003 5360 	and.w	r3, r3, #939524096	@ 0x38000000
 8010108:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 801010a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801010c:	2b00      	cmp	r3, #0
 801010e:	d10b      	bne.n	8010128 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8010110:	f7fc fc04 	bl	800c91c <HAL_RCC_GetPCLK1Freq>
 8010114:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 8010116:	f001 bb56 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 801011a:	bf00      	nop
 801011c:	44020c00 	.word	0x44020c00
 8010120:	03d09000 	.word	0x03d09000
 8010124:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 8010128:	4ba1      	ldr	r3, [pc, #644]	@ (80103b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010130:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8010134:	d10b      	bne.n	801014e <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 8010136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010138:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801013c:	d107      	bne.n	801014e <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801013e:	f107 0314 	add.w	r3, r7, #20
 8010142:	4618      	mov	r0, r3
 8010144:	f7fe fd20 	bl	800eb88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8010148:	69bb      	ldr	r3, [r7, #24]
 801014a:	637b      	str	r3, [r7, #52]	@ 0x34
 801014c:	e047      	b.n	80101de <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 801014e:	4b98      	ldr	r3, [pc, #608]	@ (80103b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010156:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801015a:	d10b      	bne.n	8010174 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 801015c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801015e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010162:	d107      	bne.n	8010174 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010164:	f107 0308 	add.w	r3, r7, #8
 8010168:	4618      	mov	r0, r3
 801016a:	f7fe fe77 	bl	800ee5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 801016e:	68fb      	ldr	r3, [r7, #12]
 8010170:	637b      	str	r3, [r7, #52]	@ 0x34
 8010172:	e034      	b.n	80101de <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 8010174:	4b8e      	ldr	r3, [pc, #568]	@ (80103b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	f003 0302 	and.w	r3, r3, #2
 801017c:	2b02      	cmp	r3, #2
 801017e:	d10d      	bne.n	801019c <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 8010180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010182:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8010186:	d109      	bne.n	801019c <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8010188:	4b89      	ldr	r3, [pc, #548]	@ (80103b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	08db      	lsrs	r3, r3, #3
 801018e:	f003 0303 	and.w	r3, r3, #3
 8010192:	4a88      	ldr	r2, [pc, #544]	@ (80103b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8010194:	fa22 f303 	lsr.w	r3, r2, r3
 8010198:	637b      	str	r3, [r7, #52]	@ 0x34
 801019a:	e020      	b.n	80101de <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 801019c:	4b84      	ldr	r3, [pc, #528]	@ (80103b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80101a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80101a8:	d106      	bne.n	80101b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 80101aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80101b0:	d102      	bne.n	80101b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 80101b2:	4b81      	ldr	r3, [pc, #516]	@ (80103b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 80101b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80101b6:	e012      	b.n	80101de <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 80101b8:	4b7d      	ldr	r3, [pc, #500]	@ (80103b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80101ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80101be:	f003 0302 	and.w	r3, r3, #2
 80101c2:	2b02      	cmp	r3, #2
 80101c4:	d107      	bne.n	80101d6 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 80101c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101c8:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 80101cc:	d103      	bne.n	80101d6 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 80101ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80101d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80101d4:	e003      	b.n	80101de <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 80101d6:	2300      	movs	r3, #0
 80101d8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80101da:	f001 baf4 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80101de:	f001 baf2 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 80101e2:	4b73      	ldr	r3, [pc, #460]	@ (80103b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80101e4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80101e8:	f003 0307 	and.w	r3, r3, #7
 80101ec:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 80101ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d104      	bne.n	80101fe <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80101f4:	f7fc fb92 	bl	800c91c <HAL_RCC_GetPCLK1Freq>
 80101f8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 80101fa:	f001 bae4 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 80101fe:	4b6c      	ldr	r3, [pc, #432]	@ (80103b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010206:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801020a:	d10a      	bne.n	8010222 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 801020c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801020e:	2b01      	cmp	r3, #1
 8010210:	d107      	bne.n	8010222 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010212:	f107 0314 	add.w	r3, r7, #20
 8010216:	4618      	mov	r0, r3
 8010218:	f7fe fcb6 	bl	800eb88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 801021c:	69bb      	ldr	r3, [r7, #24]
 801021e:	637b      	str	r3, [r7, #52]	@ 0x34
 8010220:	e043      	b.n	80102aa <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 8010222:	4b63      	ldr	r3, [pc, #396]	@ (80103b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8010224:	681b      	ldr	r3, [r3, #0]
 8010226:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801022a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801022e:	d10a      	bne.n	8010246 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 8010230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010232:	2b02      	cmp	r3, #2
 8010234:	d107      	bne.n	8010246 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010236:	f107 0308 	add.w	r3, r7, #8
 801023a:	4618      	mov	r0, r3
 801023c:	f7fe fe0e 	bl	800ee5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8010240:	68fb      	ldr	r3, [r7, #12]
 8010242:	637b      	str	r3, [r7, #52]	@ 0x34
 8010244:	e031      	b.n	80102aa <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 8010246:	4b5a      	ldr	r3, [pc, #360]	@ (80103b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	f003 0302 	and.w	r3, r3, #2
 801024e:	2b02      	cmp	r3, #2
 8010250:	d10c      	bne.n	801026c <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 8010252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010254:	2b03      	cmp	r3, #3
 8010256:	d109      	bne.n	801026c <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8010258:	4b55      	ldr	r3, [pc, #340]	@ (80103b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	08db      	lsrs	r3, r3, #3
 801025e:	f003 0303 	and.w	r3, r3, #3
 8010262:	4a54      	ldr	r2, [pc, #336]	@ (80103b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8010264:	fa22 f303 	lsr.w	r3, r2, r3
 8010268:	637b      	str	r3, [r7, #52]	@ 0x34
 801026a:	e01e      	b.n	80102aa <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 801026c:	4b50      	ldr	r3, [pc, #320]	@ (80103b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8010274:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010278:	d105      	bne.n	8010286 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 801027a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801027c:	2b04      	cmp	r3, #4
 801027e:	d102      	bne.n	8010286 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 8010280:	4b4d      	ldr	r3, [pc, #308]	@ (80103b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8010282:	637b      	str	r3, [r7, #52]	@ 0x34
 8010284:	e011      	b.n	80102aa <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 8010286:	4b4a      	ldr	r3, [pc, #296]	@ (80103b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8010288:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801028c:	f003 0302 	and.w	r3, r3, #2
 8010290:	2b02      	cmp	r3, #2
 8010292:	d106      	bne.n	80102a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 8010294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010296:	2b05      	cmp	r3, #5
 8010298:	d103      	bne.n	80102a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 801029a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801029e:	637b      	str	r3, [r7, #52]	@ 0x34
 80102a0:	e003      	b.n	80102aa <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 80102a2:	2300      	movs	r3, #0
 80102a4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80102a6:	f001 ba8e 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80102aa:	f001 ba8c 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 80102ae:	4b40      	ldr	r3, [pc, #256]	@ (80103b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80102b0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80102b4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80102b8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 80102ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d104      	bne.n	80102ca <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80102c0:	f7fc fb2c 	bl	800c91c <HAL_RCC_GetPCLK1Freq>
 80102c4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 80102c6:	f001 ba7e 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 80102ca:	4b39      	ldr	r3, [pc, #228]	@ (80103b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80102d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80102d6:	d10a      	bne.n	80102ee <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 80102d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80102da:	2b10      	cmp	r3, #16
 80102dc:	d107      	bne.n	80102ee <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80102de:	f107 0314 	add.w	r3, r7, #20
 80102e2:	4618      	mov	r0, r3
 80102e4:	f7fe fc50 	bl	800eb88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80102e8:	69bb      	ldr	r3, [r7, #24]
 80102ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80102ec:	e043      	b.n	8010376 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 80102ee:	4b30      	ldr	r3, [pc, #192]	@ (80103b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80102f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80102fa:	d10a      	bne.n	8010312 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 80102fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80102fe:	2b20      	cmp	r3, #32
 8010300:	d107      	bne.n	8010312 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010302:	f107 0308 	add.w	r3, r7, #8
 8010306:	4618      	mov	r0, r3
 8010308:	f7fe fda8 	bl	800ee5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	637b      	str	r3, [r7, #52]	@ 0x34
 8010310:	e031      	b.n	8010376 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 8010312:	4b27      	ldr	r3, [pc, #156]	@ (80103b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	f003 0302 	and.w	r3, r3, #2
 801031a:	2b02      	cmp	r3, #2
 801031c:	d10c      	bne.n	8010338 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 801031e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010320:	2b30      	cmp	r3, #48	@ 0x30
 8010322:	d109      	bne.n	8010338 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8010324:	4b22      	ldr	r3, [pc, #136]	@ (80103b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8010326:	681b      	ldr	r3, [r3, #0]
 8010328:	08db      	lsrs	r3, r3, #3
 801032a:	f003 0303 	and.w	r3, r3, #3
 801032e:	4a21      	ldr	r2, [pc, #132]	@ (80103b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8010330:	fa22 f303 	lsr.w	r3, r2, r3
 8010334:	637b      	str	r3, [r7, #52]	@ 0x34
 8010336:	e01e      	b.n	8010376 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 8010338:	4b1d      	ldr	r3, [pc, #116]	@ (80103b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8010340:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010344:	d105      	bne.n	8010352 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 8010346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010348:	2b40      	cmp	r3, #64	@ 0x40
 801034a:	d102      	bne.n	8010352 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 801034c:	4b1a      	ldr	r3, [pc, #104]	@ (80103b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 801034e:	637b      	str	r3, [r7, #52]	@ 0x34
 8010350:	e011      	b.n	8010376 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 8010352:	4b17      	ldr	r3, [pc, #92]	@ (80103b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8010354:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8010358:	f003 0302 	and.w	r3, r3, #2
 801035c:	2b02      	cmp	r3, #2
 801035e:	d106      	bne.n	801036e <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 8010360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010362:	2b50      	cmp	r3, #80	@ 0x50
 8010364:	d103      	bne.n	801036e <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 8010366:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801036a:	637b      	str	r3, [r7, #52]	@ 0x34
 801036c:	e003      	b.n	8010376 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 801036e:	2300      	movs	r3, #0
 8010370:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8010372:	f001 ba28 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8010376:	f001 ba26 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 801037a:	4b0d      	ldr	r3, [pc, #52]	@ (80103b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 801037c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010380:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8010384:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8010386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010388:	2b00      	cmp	r3, #0
 801038a:	d104      	bne.n	8010396 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 801038c:	f7fc faf2 	bl	800c974 <HAL_RCC_GetPCLK3Freq>
 8010390:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8010392:	f001 ba18 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8010396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010398:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801039c:	d10e      	bne.n	80103bc <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801039e:	f107 0314 	add.w	r3, r7, #20
 80103a2:	4618      	mov	r0, r3
 80103a4:	f7fe fbf0 	bl	800eb88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80103a8:	69bb      	ldr	r3, [r7, #24]
 80103aa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80103ac:	f001 ba0b 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80103b0:	44020c00 	.word	0x44020c00
 80103b4:	03d09000 	.word	0x03d09000
 80103b8:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 80103bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80103c2:	d108      	bne.n	80103d6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80103c4:	f107 0308 	add.w	r3, r7, #8
 80103c8:	4618      	mov	r0, r3
 80103ca:	f7fe fd47 	bl	800ee5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80103ce:	68fb      	ldr	r3, [r7, #12]
 80103d0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80103d2:	f001 b9f8 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80103d6:	4ba4      	ldr	r3, [pc, #656]	@ (8010668 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	f003 0302 	and.w	r3, r3, #2
 80103de:	2b02      	cmp	r3, #2
 80103e0:	d10d      	bne.n	80103fe <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 80103e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103e4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80103e8:	d109      	bne.n	80103fe <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80103ea:	4b9f      	ldr	r3, [pc, #636]	@ (8010668 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	08db      	lsrs	r3, r3, #3
 80103f0:	f003 0303 	and.w	r3, r3, #3
 80103f4:	4a9d      	ldr	r2, [pc, #628]	@ (801066c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 80103f6:	fa22 f303 	lsr.w	r3, r2, r3
 80103fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80103fc:	e020      	b.n	8010440 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 80103fe:	4b9a      	ldr	r3, [pc, #616]	@ (8010668 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8010406:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801040a:	d106      	bne.n	801041a <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 801040c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801040e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8010412:	d102      	bne.n	801041a <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 8010414:	4b96      	ldr	r3, [pc, #600]	@ (8010670 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8010416:	637b      	str	r3, [r7, #52]	@ 0x34
 8010418:	e012      	b.n	8010440 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 801041a:	4b93      	ldr	r3, [pc, #588]	@ (8010668 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 801041c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8010420:	f003 0302 	and.w	r3, r3, #2
 8010424:	2b02      	cmp	r3, #2
 8010426:	d107      	bne.n	8010438 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 8010428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801042a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 801042e:	d103      	bne.n	8010438 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 8010430:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010434:	637b      	str	r3, [r7, #52]	@ 0x34
 8010436:	e003      	b.n	8010440 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 8010438:	2300      	movs	r3, #0
 801043a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 801043c:	f001 b9c3 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8010440:	f001 b9c1 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8010444:	4b88      	ldr	r3, [pc, #544]	@ (8010668 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8010446:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801044a:	f003 0307 	and.w	r3, r3, #7
 801044e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8010450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010452:	2b00      	cmp	r3, #0
 8010454:	d104      	bne.n	8010460 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8010456:	f7fc fa45 	bl	800c8e4 <HAL_RCC_GetHCLKFreq>
 801045a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 801045c:	f001 b9b3 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8010460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010462:	2b01      	cmp	r3, #1
 8010464:	d104      	bne.n	8010470 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 8010466:	f7fc f911 	bl	800c68c <HAL_RCC_GetSysClockFreq>
 801046a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 801046c:	f001 b9ab 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8010470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010472:	2b02      	cmp	r3, #2
 8010474:	d108      	bne.n	8010488 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010476:	f107 0314 	add.w	r3, r7, #20
 801047a:	4618      	mov	r0, r3
 801047c:	f7fe fb84 	bl	800eb88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8010480:	69fb      	ldr	r3, [r7, #28]
 8010482:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8010484:	f001 b99f 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8010488:	4b77      	ldr	r3, [pc, #476]	@ (8010668 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010490:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010494:	d105      	bne.n	80104a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 8010496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010498:	2b03      	cmp	r3, #3
 801049a:	d102      	bne.n	80104a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 801049c:	4b75      	ldr	r3, [pc, #468]	@ (8010674 <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 801049e:	637b      	str	r3, [r7, #52]	@ 0x34
 80104a0:	e023      	b.n	80104ea <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 80104a2:	4b71      	ldr	r3, [pc, #452]	@ (8010668 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80104a4:	681b      	ldr	r3, [r3, #0]
 80104a6:	f003 0302 	and.w	r3, r3, #2
 80104aa:	2b02      	cmp	r3, #2
 80104ac:	d10c      	bne.n	80104c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 80104ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80104b0:	2b04      	cmp	r3, #4
 80104b2:	d109      	bne.n	80104c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80104b4:	4b6c      	ldr	r3, [pc, #432]	@ (8010668 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	08db      	lsrs	r3, r3, #3
 80104ba:	f003 0303 	and.w	r3, r3, #3
 80104be:	4a6b      	ldr	r2, [pc, #428]	@ (801066c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 80104c0:	fa22 f303 	lsr.w	r3, r2, r3
 80104c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80104c6:	e010      	b.n	80104ea <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 80104c8:	4b67      	ldr	r3, [pc, #412]	@ (8010668 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80104d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80104d4:	d105      	bne.n	80104e2 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 80104d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80104d8:	2b05      	cmp	r3, #5
 80104da:	d102      	bne.n	80104e2 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 80104dc:	4b64      	ldr	r3, [pc, #400]	@ (8010670 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 80104de:	637b      	str	r3, [r7, #52]	@ 0x34
 80104e0:	e003      	b.n	80104ea <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 80104e2:	2300      	movs	r3, #0
 80104e4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80104e6:	f001 b96e 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80104ea:	f001 b96c 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 80104ee:	4b5e      	ldr	r3, [pc, #376]	@ (8010668 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80104f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80104f4:	f003 0308 	and.w	r3, r3, #8
 80104f8:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 80104fa:	4b5b      	ldr	r3, [pc, #364]	@ (8010668 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80104fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8010500:	f003 0302 	and.w	r3, r3, #2
 8010504:	2b02      	cmp	r3, #2
 8010506:	d106      	bne.n	8010516 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 8010508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801050a:	2b00      	cmp	r3, #0
 801050c:	d103      	bne.n	8010516 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 801050e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010512:	637b      	str	r3, [r7, #52]	@ 0x34
 8010514:	e012      	b.n	801053c <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8010516:	4b54      	ldr	r3, [pc, #336]	@ (8010668 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8010518:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801051c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010520:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8010524:	d106      	bne.n	8010534 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 8010526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010528:	2b08      	cmp	r3, #8
 801052a:	d103      	bne.n	8010534 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 801052c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8010530:	637b      	str	r3, [r7, #52]	@ 0x34
 8010532:	e003      	b.n	801053c <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8010534:	2300      	movs	r3, #0
 8010536:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8010538:	f001 b945 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 801053c:	f001 b943 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8010540:	4b49      	ldr	r3, [pc, #292]	@ (8010668 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8010542:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8010546:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 801054a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 801054c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801054e:	2b00      	cmp	r3, #0
 8010550:	d104      	bne.n	801055c <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8010552:	f7fc f9e3 	bl	800c91c <HAL_RCC_GetPCLK1Freq>
 8010556:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8010558:	f001 b935 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 801055c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801055e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010562:	d108      	bne.n	8010576 <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010564:	f107 0308 	add.w	r3, r7, #8
 8010568:	4618      	mov	r0, r3
 801056a:	f7fe fc77 	bl	800ee5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 801056e:	693b      	ldr	r3, [r7, #16]
 8010570:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8010572:	f001 b928 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8010576:	4b3c      	ldr	r3, [pc, #240]	@ (8010668 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	f003 0302 	and.w	r3, r3, #2
 801057e:	2b02      	cmp	r3, #2
 8010580:	d10d      	bne.n	801059e <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 8010582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010584:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010588:	d109      	bne.n	801059e <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 801058a:	4b37      	ldr	r3, [pc, #220]	@ (8010668 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 801058c:	681b      	ldr	r3, [r3, #0]
 801058e:	08db      	lsrs	r3, r3, #3
 8010590:	f003 0303 	and.w	r3, r3, #3
 8010594:	4a35      	ldr	r2, [pc, #212]	@ (801066c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8010596:	fa22 f303 	lsr.w	r3, r2, r3
 801059a:	637b      	str	r3, [r7, #52]	@ 0x34
 801059c:	e011      	b.n	80105c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 801059e:	4b32      	ldr	r3, [pc, #200]	@ (8010668 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80105a0:	681b      	ldr	r3, [r3, #0]
 80105a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80105a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80105aa:	d106      	bne.n	80105ba <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 80105ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80105ae:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80105b2:	d102      	bne.n	80105ba <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 80105b4:	4b2e      	ldr	r3, [pc, #184]	@ (8010670 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 80105b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80105b8:	e003      	b.n	80105c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 80105ba:	2300      	movs	r3, #0
 80105bc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80105be:	f001 b902 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80105c2:	f001 b900 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80105c6:	4b28      	ldr	r3, [pc, #160]	@ (8010668 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80105c8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80105cc:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80105d0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80105d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d104      	bne.n	80105e2 <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80105d8:	f7fc f9a0 	bl	800c91c <HAL_RCC_GetPCLK1Freq>
 80105dc:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 80105de:	f001 b8f2 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 80105e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80105e4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80105e8:	d108      	bne.n	80105fc <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80105ea:	f107 0308 	add.w	r3, r7, #8
 80105ee:	4618      	mov	r0, r3
 80105f0:	f7fe fc34 	bl	800ee5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80105f4:	693b      	ldr	r3, [r7, #16]
 80105f6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80105f8:	f001 b8e5 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80105fc:	4b1a      	ldr	r3, [pc, #104]	@ (8010668 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	f003 0302 	and.w	r3, r3, #2
 8010604:	2b02      	cmp	r3, #2
 8010606:	d10d      	bne.n	8010624 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 8010608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801060a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 801060e:	d109      	bne.n	8010624 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8010610:	4b15      	ldr	r3, [pc, #84]	@ (8010668 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	08db      	lsrs	r3, r3, #3
 8010616:	f003 0303 	and.w	r3, r3, #3
 801061a:	4a14      	ldr	r2, [pc, #80]	@ (801066c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 801061c:	fa22 f303 	lsr.w	r3, r2, r3
 8010620:	637b      	str	r3, [r7, #52]	@ 0x34
 8010622:	e011      	b.n	8010648 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8010624:	4b10      	ldr	r3, [pc, #64]	@ (8010668 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801062c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010630:	d106      	bne.n	8010640 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 8010632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010634:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8010638:	d102      	bne.n	8010640 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 801063a:	4b0d      	ldr	r3, [pc, #52]	@ (8010670 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 801063c:	637b      	str	r3, [r7, #52]	@ 0x34
 801063e:	e003      	b.n	8010648 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 8010640:	2300      	movs	r3, #0
 8010642:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8010644:	f001 b8bf 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8010648:	f001 b8bd 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 801064c:	4b06      	ldr	r3, [pc, #24]	@ (8010668 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 801064e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8010652:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8010656:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8010658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801065a:	2b00      	cmp	r3, #0
 801065c:	d10c      	bne.n	8010678 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 801065e:	f7fc f989 	bl	800c974 <HAL_RCC_GetPCLK3Freq>
 8010662:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8010664:	f001 b8af 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8010668:	44020c00 	.word	0x44020c00
 801066c:	03d09000 	.word	0x03d09000
 8010670:	003d0900 	.word	0x003d0900
 8010674:	017d7840 	.word	0x017d7840
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8010678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801067a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801067e:	d108      	bne.n	8010692 <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010680:	f107 0308 	add.w	r3, r7, #8
 8010684:	4618      	mov	r0, r3
 8010686:	f7fe fbe9 	bl	800ee5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 801068a:	693b      	ldr	r3, [r7, #16]
 801068c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 801068e:	f001 b89a 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8010692:	4b9f      	ldr	r3, [pc, #636]	@ (8010910 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	f003 0302 	and.w	r3, r3, #2
 801069a:	2b02      	cmp	r3, #2
 801069c:	d10d      	bne.n	80106ba <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 801069e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80106a0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80106a4:	d109      	bne.n	80106ba <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80106a6:	4b9a      	ldr	r3, [pc, #616]	@ (8010910 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	08db      	lsrs	r3, r3, #3
 80106ac:	f003 0303 	and.w	r3, r3, #3
 80106b0:	4a98      	ldr	r2, [pc, #608]	@ (8010914 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 80106b2:	fa22 f303 	lsr.w	r3, r2, r3
 80106b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80106b8:	e011      	b.n	80106de <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 80106ba:	4b95      	ldr	r3, [pc, #596]	@ (8010910 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80106bc:	681b      	ldr	r3, [r3, #0]
 80106be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80106c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80106c6:	d106      	bne.n	80106d6 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 80106c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80106ca:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80106ce:	d102      	bne.n	80106d6 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 80106d0:	4b91      	ldr	r3, [pc, #580]	@ (8010918 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 80106d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80106d4:	e003      	b.n	80106de <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 80106d6:	2300      	movs	r3, #0
 80106d8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80106da:	f001 b874 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80106de:	f001 b872 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80106e2:	4b8b      	ldr	r3, [pc, #556]	@ (8010910 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80106e4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80106e8:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80106ec:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 80106ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d104      	bne.n	80106fe <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80106f4:	f7fc f93e 	bl	800c974 <HAL_RCC_GetPCLK3Freq>
 80106f8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 80106fa:	f001 b864 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 80106fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010700:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8010704:	d108      	bne.n	8010718 <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010706:	f107 0308 	add.w	r3, r7, #8
 801070a:	4618      	mov	r0, r3
 801070c:	f7fe fba6 	bl	800ee5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8010710:	693b      	ldr	r3, [r7, #16]
 8010712:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8010714:	f001 b857 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8010718:	4b7d      	ldr	r3, [pc, #500]	@ (8010910 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 801071a:	681b      	ldr	r3, [r3, #0]
 801071c:	f003 0302 	and.w	r3, r3, #2
 8010720:	2b02      	cmp	r3, #2
 8010722:	d10d      	bne.n	8010740 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 8010724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010726:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801072a:	d109      	bne.n	8010740 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 801072c:	4b78      	ldr	r3, [pc, #480]	@ (8010910 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	08db      	lsrs	r3, r3, #3
 8010732:	f003 0303 	and.w	r3, r3, #3
 8010736:	4a77      	ldr	r2, [pc, #476]	@ (8010914 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8010738:	fa22 f303 	lsr.w	r3, r2, r3
 801073c:	637b      	str	r3, [r7, #52]	@ 0x34
 801073e:	e011      	b.n	8010764 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 8010740:	4b73      	ldr	r3, [pc, #460]	@ (8010910 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8010748:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801074c:	d106      	bne.n	801075c <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 801074e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010750:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8010754:	d102      	bne.n	801075c <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 8010756:	4b70      	ldr	r3, [pc, #448]	@ (8010918 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8010758:	637b      	str	r3, [r7, #52]	@ 0x34
 801075a:	e003      	b.n	8010764 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 801075c:	2300      	movs	r3, #0
 801075e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8010760:	f001 b831 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8010764:	f001 b82f 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8010768:	4b69      	ldr	r3, [pc, #420]	@ (8010910 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 801076a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 801076e:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8010772:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8010774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010776:	2b00      	cmp	r3, #0
 8010778:	d104      	bne.n	8010784 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 801077a:	f7fc f8cf 	bl	800c91c <HAL_RCC_GetPCLK1Freq>
 801077e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8010780:	f001 b821 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8010784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010786:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801078a:	d108      	bne.n	801079e <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801078c:	f107 0308 	add.w	r3, r7, #8
 8010790:	4618      	mov	r0, r3
 8010792:	f7fe fb63 	bl	800ee5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8010796:	693b      	ldr	r3, [r7, #16]
 8010798:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 801079a:	f001 b814 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 801079e:	4b5c      	ldr	r3, [pc, #368]	@ (8010910 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80107a0:	681b      	ldr	r3, [r3, #0]
 80107a2:	f003 0302 	and.w	r3, r3, #2
 80107a6:	2b02      	cmp	r3, #2
 80107a8:	d10e      	bne.n	80107c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 80107aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80107ac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80107b0:	d10a      	bne.n	80107c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80107b2:	4b57      	ldr	r3, [pc, #348]	@ (8010910 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	08db      	lsrs	r3, r3, #3
 80107b8:	f003 0303 	and.w	r3, r3, #3
 80107bc:	4a55      	ldr	r2, [pc, #340]	@ (8010914 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 80107be:	fa22 f303 	lsr.w	r3, r2, r3
 80107c2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80107c4:	f000 bfff 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 80107c8:	2300      	movs	r3, #0
 80107ca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80107cc:	f000 bffb 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80107d0:	4b4f      	ldr	r3, [pc, #316]	@ (8010910 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80107d2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80107d6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80107da:	633b      	str	r3, [r7, #48]	@ 0x30
 80107dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80107de:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80107e2:	d056      	beq.n	8010892 <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 80107e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80107e6:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80107ea:	f200 808b 	bhi.w	8010904 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 80107ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80107f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80107f4:	d03e      	beq.n	8010874 <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 80107f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80107f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80107fc:	f200 8082 	bhi.w	8010904 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8010800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010802:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010806:	d027      	beq.n	8010858 <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 8010808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801080a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801080e:	d879      	bhi.n	8010904 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8010810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010812:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010816:	d017      	beq.n	8010848 <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 8010818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801081a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801081e:	d871      	bhi.n	8010904 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8010820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010822:	2b00      	cmp	r3, #0
 8010824:	d004      	beq.n	8010830 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 8010826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010828:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801082c:	d004      	beq.n	8010838 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 801082e:	e069      	b.n	8010904 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8010830:	f7fc f8a0 	bl	800c974 <HAL_RCC_GetPCLK3Freq>
 8010834:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8010836:	e068      	b.n	801090a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010838:	f107 0314 	add.w	r3, r7, #20
 801083c:	4618      	mov	r0, r3
 801083e:	f7fe f9a3 	bl	800eb88 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8010842:	697b      	ldr	r3, [r7, #20]
 8010844:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8010846:	e060      	b.n	801090a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010848:	f107 0308 	add.w	r3, r7, #8
 801084c:	4618      	mov	r0, r3
 801084e:	f7fe fb05 	bl	800ee5c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8010852:	693b      	ldr	r3, [r7, #16]
 8010854:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8010856:	e058      	b.n	801090a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8010858:	4b2d      	ldr	r3, [pc, #180]	@ (8010910 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 801085a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801085e:	f003 0302 	and.w	r3, r3, #2
 8010862:	2b02      	cmp	r3, #2
 8010864:	d103      	bne.n	801086e <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 8010866:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801086a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 801086c:	e04d      	b.n	801090a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 801086e:	2300      	movs	r3, #0
 8010870:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8010872:	e04a      	b.n	801090a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8010874:	4b26      	ldr	r3, [pc, #152]	@ (8010910 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8010876:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801087a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801087e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8010882:	d103      	bne.n	801088c <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 8010884:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8010888:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 801088a:	e03e      	b.n	801090a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 801088c:	2300      	movs	r3, #0
 801088e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8010890:	e03b      	b.n	801090a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8010892:	4b1f      	ldr	r3, [pc, #124]	@ (8010910 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8010894:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8010898:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 801089c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801089e:	4b1c      	ldr	r3, [pc, #112]	@ (8010910 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	f003 0302 	and.w	r3, r3, #2
 80108a6:	2b02      	cmp	r3, #2
 80108a8:	d10c      	bne.n	80108c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 80108aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d109      	bne.n	80108c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80108b0:	4b17      	ldr	r3, [pc, #92]	@ (8010910 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	08db      	lsrs	r3, r3, #3
 80108b6:	f003 0303 	and.w	r3, r3, #3
 80108ba:	4a16      	ldr	r2, [pc, #88]	@ (8010914 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 80108bc:	fa22 f303 	lsr.w	r3, r2, r3
 80108c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80108c2:	e01e      	b.n	8010902 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80108c4:	4b12      	ldr	r3, [pc, #72]	@ (8010910 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80108cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80108d0:	d106      	bne.n	80108e0 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 80108d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80108d8:	d102      	bne.n	80108e0 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80108da:	4b0f      	ldr	r3, [pc, #60]	@ (8010918 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 80108dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80108de:	e010      	b.n	8010902 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80108e0:	4b0b      	ldr	r3, [pc, #44]	@ (8010910 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80108e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80108ec:	d106      	bne.n	80108fc <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 80108ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80108f4:	d102      	bne.n	80108fc <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80108f6:	4b09      	ldr	r3, [pc, #36]	@ (801091c <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 80108f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80108fa:	e002      	b.n	8010902 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80108fc:	2300      	movs	r3, #0
 80108fe:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8010900:	e003      	b.n	801090a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 8010902:	e002      	b.n	801090a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 8010904:	2300      	movs	r3, #0
 8010906:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8010908:	bf00      	nop
          }
        }
        break;
 801090a:	f000 bf5c 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 801090e:	bf00      	nop
 8010910:	44020c00 	.word	0x44020c00
 8010914:	03d09000 	.word	0x03d09000
 8010918:	003d0900 	.word	0x003d0900
 801091c:	017d7840 	.word	0x017d7840

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8010920:	4b9e      	ldr	r3, [pc, #632]	@ (8010b9c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8010922:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8010926:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 801092a:	633b      	str	r3, [r7, #48]	@ 0x30
 801092c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801092e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8010932:	d056      	beq.n	80109e2 <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 8010934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010936:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 801093a:	f200 808b 	bhi.w	8010a54 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 801093e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010940:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8010944:	d03e      	beq.n	80109c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 8010946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010948:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801094c:	f200 8082 	bhi.w	8010a54 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8010950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010952:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8010956:	d027      	beq.n	80109a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 8010958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801095a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801095e:	d879      	bhi.n	8010a54 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8010960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010962:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010966:	d017      	beq.n	8010998 <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 8010968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801096a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801096e:	d871      	bhi.n	8010a54 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8010970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010972:	2b00      	cmp	r3, #0
 8010974:	d004      	beq.n	8010980 <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 8010976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010978:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801097c:	d004      	beq.n	8010988 <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 801097e:	e069      	b.n	8010a54 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8010980:	f7fb ffcc 	bl	800c91c <HAL_RCC_GetPCLK1Freq>
 8010984:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8010986:	e068      	b.n	8010a5a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010988:	f107 0314 	add.w	r3, r7, #20
 801098c:	4618      	mov	r0, r3
 801098e:	f7fe f8fb 	bl	800eb88 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8010992:	697b      	ldr	r3, [r7, #20]
 8010994:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8010996:	e060      	b.n	8010a5a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010998:	f107 0308 	add.w	r3, r7, #8
 801099c:	4618      	mov	r0, r3
 801099e:	f7fe fa5d 	bl	800ee5c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80109a2:	693b      	ldr	r3, [r7, #16]
 80109a4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80109a6:	e058      	b.n	8010a5a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80109a8:	4b7c      	ldr	r3, [pc, #496]	@ (8010b9c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80109aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80109ae:	f003 0302 	and.w	r3, r3, #2
 80109b2:	2b02      	cmp	r3, #2
 80109b4:	d103      	bne.n	80109be <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 80109b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80109ba:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80109bc:	e04d      	b.n	8010a5a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 80109be:	2300      	movs	r3, #0
 80109c0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80109c2:	e04a      	b.n	8010a5a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80109c4:	4b75      	ldr	r3, [pc, #468]	@ (8010b9c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80109c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80109ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80109ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80109d2:	d103      	bne.n	80109dc <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 80109d4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80109d8:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80109da:	e03e      	b.n	8010a5a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 80109dc:	2300      	movs	r3, #0
 80109de:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80109e0:	e03b      	b.n	8010a5a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80109e2:	4b6e      	ldr	r3, [pc, #440]	@ (8010b9c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80109e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80109e8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80109ec:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80109ee:	4b6b      	ldr	r3, [pc, #428]	@ (8010b9c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80109f0:	681b      	ldr	r3, [r3, #0]
 80109f2:	f003 0302 	and.w	r3, r3, #2
 80109f6:	2b02      	cmp	r3, #2
 80109f8:	d10c      	bne.n	8010a14 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 80109fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d109      	bne.n	8010a14 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8010a00:	4b66      	ldr	r3, [pc, #408]	@ (8010b9c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8010a02:	681b      	ldr	r3, [r3, #0]
 8010a04:	08db      	lsrs	r3, r3, #3
 8010a06:	f003 0303 	and.w	r3, r3, #3
 8010a0a:	4a65      	ldr	r2, [pc, #404]	@ (8010ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8010a0c:	fa22 f303 	lsr.w	r3, r2, r3
 8010a10:	637b      	str	r3, [r7, #52]	@ 0x34
 8010a12:	e01e      	b.n	8010a52 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010a14:	4b61      	ldr	r3, [pc, #388]	@ (8010b9c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8010a1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010a20:	d106      	bne.n	8010a30 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 8010a22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010a28:	d102      	bne.n	8010a30 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8010a2a:	4b5e      	ldr	r3, [pc, #376]	@ (8010ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8010a2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8010a2e:	e010      	b.n	8010a52 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8010a30:	4b5a      	ldr	r3, [pc, #360]	@ (8010b9c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010a38:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010a3c:	d106      	bne.n	8010a4c <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 8010a3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a40:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010a44:	d102      	bne.n	8010a4c <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8010a46:	4b58      	ldr	r3, [pc, #352]	@ (8010ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8010a48:	637b      	str	r3, [r7, #52]	@ 0x34
 8010a4a:	e002      	b.n	8010a52 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8010a4c:	2300      	movs	r3, #0
 8010a4e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8010a50:	e003      	b.n	8010a5a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 8010a52:	e002      	b.n	8010a5a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 8010a54:	2300      	movs	r3, #0
 8010a56:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8010a58:	bf00      	nop
          }
        }
        break;
 8010a5a:	f000 beb4 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 8010a5e:	4b4f      	ldr	r3, [pc, #316]	@ (8010b9c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8010a60:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8010a64:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8010a68:	633b      	str	r3, [r7, #48]	@ 0x30
 8010a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a6c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8010a70:	d056      	beq.n	8010b20 <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 8010a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8010a78:	f200 808b 	bhi.w	8010b92 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8010a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a7e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8010a82:	d03e      	beq.n	8010b02 <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 8010a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a86:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8010a8a:	f200 8082 	bhi.w	8010b92 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8010a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a90:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8010a94:	d027      	beq.n	8010ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 8010a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a98:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8010a9c:	d879      	bhi.n	8010b92 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8010a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010aa0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010aa4:	d017      	beq.n	8010ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 8010aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010aa8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010aac:	d871      	bhi.n	8010b92 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8010aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d004      	beq.n	8010abe <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 8010ab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ab6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010aba:	d004      	beq.n	8010ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 8010abc:	e069      	b.n	8010b92 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8010abe:	f7fb ff59 	bl	800c974 <HAL_RCC_GetPCLK3Freq>
 8010ac2:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8010ac4:	e068      	b.n	8010b98 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010ac6:	f107 0314 	add.w	r3, r7, #20
 8010aca:	4618      	mov	r0, r3
 8010acc:	f7fe f85c 	bl	800eb88 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8010ad0:	697b      	ldr	r3, [r7, #20]
 8010ad2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8010ad4:	e060      	b.n	8010b98 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010ad6:	f107 0308 	add.w	r3, r7, #8
 8010ada:	4618      	mov	r0, r3
 8010adc:	f7fe f9be 	bl	800ee5c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8010ae0:	693b      	ldr	r3, [r7, #16]
 8010ae2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8010ae4:	e058      	b.n	8010b98 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8010ae6:	4b2d      	ldr	r3, [pc, #180]	@ (8010b9c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8010ae8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8010aec:	f003 0302 	and.w	r3, r3, #2
 8010af0:	2b02      	cmp	r3, #2
 8010af2:	d103      	bne.n	8010afc <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 8010af4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010af8:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8010afa:	e04d      	b.n	8010b98 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8010afc:	2300      	movs	r3, #0
 8010afe:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8010b00:	e04a      	b.n	8010b98 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8010b02:	4b26      	ldr	r3, [pc, #152]	@ (8010b9c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8010b04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8010b08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010b0c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8010b10:	d103      	bne.n	8010b1a <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 8010b12:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8010b16:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8010b18:	e03e      	b.n	8010b98 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8010b1a:	2300      	movs	r3, #0
 8010b1c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8010b1e:	e03b      	b.n	8010b98 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8010b20:	4b1e      	ldr	r3, [pc, #120]	@ (8010b9c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8010b22:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8010b26:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8010b2a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010b2c:	4b1b      	ldr	r3, [pc, #108]	@ (8010b9c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8010b2e:	681b      	ldr	r3, [r3, #0]
 8010b30:	f003 0302 	and.w	r3, r3, #2
 8010b34:	2b02      	cmp	r3, #2
 8010b36:	d10c      	bne.n	8010b52 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 8010b38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d109      	bne.n	8010b52 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8010b3e:	4b17      	ldr	r3, [pc, #92]	@ (8010b9c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8010b40:	681b      	ldr	r3, [r3, #0]
 8010b42:	08db      	lsrs	r3, r3, #3
 8010b44:	f003 0303 	and.w	r3, r3, #3
 8010b48:	4a15      	ldr	r2, [pc, #84]	@ (8010ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8010b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8010b4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8010b50:	e01e      	b.n	8010b90 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010b52:	4b12      	ldr	r3, [pc, #72]	@ (8010b9c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8010b5a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010b5e:	d106      	bne.n	8010b6e <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 8010b60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010b66:	d102      	bne.n	8010b6e <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8010b68:	4b0e      	ldr	r3, [pc, #56]	@ (8010ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8010b6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8010b6c:	e010      	b.n	8010b90 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8010b6e:	4b0b      	ldr	r3, [pc, #44]	@ (8010b9c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8010b70:	681b      	ldr	r3, [r3, #0]
 8010b72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010b76:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010b7a:	d106      	bne.n	8010b8a <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 8010b7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b7e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010b82:	d102      	bne.n	8010b8a <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8010b84:	4b08      	ldr	r3, [pc, #32]	@ (8010ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8010b86:	637b      	str	r3, [r7, #52]	@ 0x34
 8010b88:	e002      	b.n	8010b90 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8010b8a:	2300      	movs	r3, #0
 8010b8c:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8010b8e:	e003      	b.n	8010b98 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 8010b90:	e002      	b.n	8010b98 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 8010b92:	2300      	movs	r3, #0
 8010b94:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8010b96:	bf00      	nop
          }
        }
        break;
 8010b98:	f000 be15 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8010b9c:	44020c00 	.word	0x44020c00
 8010ba0:	03d09000 	.word	0x03d09000
 8010ba4:	003d0900 	.word	0x003d0900
 8010ba8:	017d7840 	.word	0x017d7840
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 8010bac:	4b9e      	ldr	r3, [pc, #632]	@ (8010e28 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8010bae:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8010bb2:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 8010bb6:	633b      	str	r3, [r7, #48]	@ 0x30
 8010bb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010bba:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8010bbe:	d056      	beq.n	8010c6e <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 8010bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010bc2:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8010bc6:	f200 808b 	bhi.w	8010ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8010bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010bcc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8010bd0:	d03e      	beq.n	8010c50 <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 8010bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010bd4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8010bd8:	f200 8082 	bhi.w	8010ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8010bdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010bde:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8010be2:	d027      	beq.n	8010c34 <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 8010be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010be6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8010bea:	d879      	bhi.n	8010ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8010bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010bee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8010bf2:	d017      	beq.n	8010c24 <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 8010bf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010bf6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8010bfa:	d871      	bhi.n	8010ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8010bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d004      	beq.n	8010c0c <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 8010c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c04:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010c08:	d004      	beq.n	8010c14 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 8010c0a:	e069      	b.n	8010ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8010c0c:	f7fb feb2 	bl	800c974 <HAL_RCC_GetPCLK3Freq>
 8010c10:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8010c12:	e068      	b.n	8010ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010c14:	f107 0314 	add.w	r3, r7, #20
 8010c18:	4618      	mov	r0, r3
 8010c1a:	f7fd ffb5 	bl	800eb88 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8010c1e:	697b      	ldr	r3, [r7, #20]
 8010c20:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8010c22:	e060      	b.n	8010ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010c24:	f107 0308 	add.w	r3, r7, #8
 8010c28:	4618      	mov	r0, r3
 8010c2a:	f7fe f917 	bl	800ee5c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8010c2e:	693b      	ldr	r3, [r7, #16]
 8010c30:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8010c32:	e058      	b.n	8010ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8010c34:	4b7c      	ldr	r3, [pc, #496]	@ (8010e28 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8010c36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8010c3a:	f003 0302 	and.w	r3, r3, #2
 8010c3e:	2b02      	cmp	r3, #2
 8010c40:	d103      	bne.n	8010c4a <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 8010c42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010c46:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8010c48:	e04d      	b.n	8010ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8010c4a:	2300      	movs	r3, #0
 8010c4c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8010c4e:	e04a      	b.n	8010ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8010c50:	4b75      	ldr	r3, [pc, #468]	@ (8010e28 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8010c52:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8010c56:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010c5a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8010c5e:	d103      	bne.n	8010c68 <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 8010c60:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8010c64:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8010c66:	e03e      	b.n	8010ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8010c68:	2300      	movs	r3, #0
 8010c6a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8010c6c:	e03b      	b.n	8010ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8010c6e:	4b6e      	ldr	r3, [pc, #440]	@ (8010e28 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8010c70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8010c74:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8010c78:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010c7a:	4b6b      	ldr	r3, [pc, #428]	@ (8010e28 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8010c7c:	681b      	ldr	r3, [r3, #0]
 8010c7e:	f003 0302 	and.w	r3, r3, #2
 8010c82:	2b02      	cmp	r3, #2
 8010c84:	d10c      	bne.n	8010ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 8010c86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d109      	bne.n	8010ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8010c8c:	4b66      	ldr	r3, [pc, #408]	@ (8010e28 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	08db      	lsrs	r3, r3, #3
 8010c92:	f003 0303 	and.w	r3, r3, #3
 8010c96:	4a65      	ldr	r2, [pc, #404]	@ (8010e2c <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8010c98:	fa22 f303 	lsr.w	r3, r2, r3
 8010c9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8010c9e:	e01e      	b.n	8010cde <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010ca0:	4b61      	ldr	r3, [pc, #388]	@ (8010e28 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8010ca2:	681b      	ldr	r3, [r3, #0]
 8010ca4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8010ca8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010cac:	d106      	bne.n	8010cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 8010cae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010cb4:	d102      	bne.n	8010cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8010cb6:	4b5e      	ldr	r3, [pc, #376]	@ (8010e30 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8010cb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8010cba:	e010      	b.n	8010cde <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8010cbc:	4b5a      	ldr	r3, [pc, #360]	@ (8010e28 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8010cbe:	681b      	ldr	r3, [r3, #0]
 8010cc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010cc4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010cc8:	d106      	bne.n	8010cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 8010cca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ccc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010cd0:	d102      	bne.n	8010cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8010cd2:	4b58      	ldr	r3, [pc, #352]	@ (8010e34 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8010cd4:	637b      	str	r3, [r7, #52]	@ 0x34
 8010cd6:	e002      	b.n	8010cde <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8010cd8:	2300      	movs	r3, #0
 8010cda:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8010cdc:	e003      	b.n	8010ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 8010cde:	e002      	b.n	8010ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 8010ce0:	2300      	movs	r3, #0
 8010ce2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8010ce4:	bf00      	nop
          }
        }
        break;
 8010ce6:	f000 bd6e 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 8010cea:	4b4f      	ldr	r3, [pc, #316]	@ (8010e28 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8010cec:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8010cf0:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8010cf4:	633b      	str	r3, [r7, #48]	@ 0x30
 8010cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010cf8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8010cfc:	d056      	beq.n	8010dac <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 8010cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d00:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8010d04:	f200 808b 	bhi.w	8010e1e <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8010d08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d0a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8010d0e:	d03e      	beq.n	8010d8e <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 8010d10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d12:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8010d16:	f200 8082 	bhi.w	8010e1e <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8010d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d1c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8010d20:	d027      	beq.n	8010d72 <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 8010d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d24:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8010d28:	d879      	bhi.n	8010e1e <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8010d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d2c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8010d30:	d017      	beq.n	8010d62 <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 8010d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d34:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8010d38:	d871      	bhi.n	8010e1e <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8010d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d004      	beq.n	8010d4a <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 8010d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d42:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010d46:	d004      	beq.n	8010d52 <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 8010d48:	e069      	b.n	8010e1e <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8010d4a:	f7fb fe13 	bl	800c974 <HAL_RCC_GetPCLK3Freq>
 8010d4e:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8010d50:	e068      	b.n	8010e24 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010d52:	f107 0314 	add.w	r3, r7, #20
 8010d56:	4618      	mov	r0, r3
 8010d58:	f7fd ff16 	bl	800eb88 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8010d5c:	697b      	ldr	r3, [r7, #20]
 8010d5e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8010d60:	e060      	b.n	8010e24 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010d62:	f107 0308 	add.w	r3, r7, #8
 8010d66:	4618      	mov	r0, r3
 8010d68:	f7fe f878 	bl	800ee5c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8010d6c:	693b      	ldr	r3, [r7, #16]
 8010d6e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8010d70:	e058      	b.n	8010e24 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8010d72:	4b2d      	ldr	r3, [pc, #180]	@ (8010e28 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8010d74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8010d78:	f003 0302 	and.w	r3, r3, #2
 8010d7c:	2b02      	cmp	r3, #2
 8010d7e:	d103      	bne.n	8010d88 <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 8010d80:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010d84:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8010d86:	e04d      	b.n	8010e24 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8010d88:	2300      	movs	r3, #0
 8010d8a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8010d8c:	e04a      	b.n	8010e24 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8010d8e:	4b26      	ldr	r3, [pc, #152]	@ (8010e28 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8010d90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8010d94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010d98:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8010d9c:	d103      	bne.n	8010da6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 8010d9e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8010da2:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8010da4:	e03e      	b.n	8010e24 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8010da6:	2300      	movs	r3, #0
 8010da8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8010daa:	e03b      	b.n	8010e24 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8010dac:	4b1e      	ldr	r3, [pc, #120]	@ (8010e28 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8010dae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8010db2:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8010db6:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010db8:	4b1b      	ldr	r3, [pc, #108]	@ (8010e28 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	f003 0302 	and.w	r3, r3, #2
 8010dc0:	2b02      	cmp	r3, #2
 8010dc2:	d10c      	bne.n	8010dde <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 8010dc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d109      	bne.n	8010dde <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8010dca:	4b17      	ldr	r3, [pc, #92]	@ (8010e28 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8010dcc:	681b      	ldr	r3, [r3, #0]
 8010dce:	08db      	lsrs	r3, r3, #3
 8010dd0:	f003 0303 	and.w	r3, r3, #3
 8010dd4:	4a15      	ldr	r2, [pc, #84]	@ (8010e2c <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8010dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8010dda:	637b      	str	r3, [r7, #52]	@ 0x34
 8010ddc:	e01e      	b.n	8010e1c <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010dde:	4b12      	ldr	r3, [pc, #72]	@ (8010e28 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8010de0:	681b      	ldr	r3, [r3, #0]
 8010de2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8010de6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010dea:	d106      	bne.n	8010dfa <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 8010dec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010dee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010df2:	d102      	bne.n	8010dfa <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8010df4:	4b0e      	ldr	r3, [pc, #56]	@ (8010e30 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8010df6:	637b      	str	r3, [r7, #52]	@ 0x34
 8010df8:	e010      	b.n	8010e1c <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8010dfa:	4b0b      	ldr	r3, [pc, #44]	@ (8010e28 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8010dfc:	681b      	ldr	r3, [r3, #0]
 8010dfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010e02:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010e06:	d106      	bne.n	8010e16 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 8010e08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e0a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010e0e:	d102      	bne.n	8010e16 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8010e10:	4b08      	ldr	r3, [pc, #32]	@ (8010e34 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8010e12:	637b      	str	r3, [r7, #52]	@ 0x34
 8010e14:	e002      	b.n	8010e1c <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8010e16:	2300      	movs	r3, #0
 8010e18:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8010e1a:	e003      	b.n	8010e24 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 8010e1c:	e002      	b.n	8010e24 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 8010e1e:	2300      	movs	r3, #0
 8010e20:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8010e22:	bf00      	nop
          }
        }
        break;
 8010e24:	f000 bccf 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8010e28:	44020c00 	.word	0x44020c00
 8010e2c:	03d09000 	.word	0x03d09000
 8010e30:	003d0900 	.word	0x003d0900
 8010e34:	017d7840 	.word	0x017d7840
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 8010e38:	4b9e      	ldr	r3, [pc, #632]	@ (80110b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8010e3a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8010e3e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8010e42:	633b      	str	r3, [r7, #48]	@ 0x30
 8010e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e46:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8010e4a:	d056      	beq.n	8010efa <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 8010e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8010e52:	f200 808b 	bhi.w	8010f6c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8010e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010e5c:	d03e      	beq.n	8010edc <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 8010e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010e64:	f200 8082 	bhi.w	8010f6c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8010e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e6a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8010e6e:	d027      	beq.n	8010ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 8010e70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e72:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8010e76:	d879      	bhi.n	8010f6c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8010e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010e7e:	d017      	beq.n	8010eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 8010e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010e86:	d871      	bhi.n	8010f6c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8010e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	d004      	beq.n	8010e98 <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 8010e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e90:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010e94:	d004      	beq.n	8010ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 8010e96:	e069      	b.n	8010f6c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8010e98:	f7fb fd6c 	bl	800c974 <HAL_RCC_GetPCLK3Freq>
 8010e9c:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8010e9e:	e068      	b.n	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010ea0:	f107 0314 	add.w	r3, r7, #20
 8010ea4:	4618      	mov	r0, r3
 8010ea6:	f7fd fe6f 	bl	800eb88 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8010eaa:	697b      	ldr	r3, [r7, #20]
 8010eac:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8010eae:	e060      	b.n	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010eb0:	f107 0308 	add.w	r3, r7, #8
 8010eb4:	4618      	mov	r0, r3
 8010eb6:	f7fd ffd1 	bl	800ee5c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8010eba:	693b      	ldr	r3, [r7, #16]
 8010ebc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8010ebe:	e058      	b.n	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8010ec0:	4b7c      	ldr	r3, [pc, #496]	@ (80110b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8010ec2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8010ec6:	f003 0302 	and.w	r3, r3, #2
 8010eca:	2b02      	cmp	r3, #2
 8010ecc:	d103      	bne.n	8010ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 8010ece:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010ed2:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8010ed4:	e04d      	b.n	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 8010ed6:	2300      	movs	r3, #0
 8010ed8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8010eda:	e04a      	b.n	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8010edc:	4b75      	ldr	r3, [pc, #468]	@ (80110b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8010ede:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8010ee2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010ee6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8010eea:	d103      	bne.n	8010ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 8010eec:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8010ef0:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8010ef2:	e03e      	b.n	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 8010ef4:	2300      	movs	r3, #0
 8010ef6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8010ef8:	e03b      	b.n	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8010efa:	4b6e      	ldr	r3, [pc, #440]	@ (80110b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8010efc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8010f00:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8010f04:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010f06:	4b6b      	ldr	r3, [pc, #428]	@ (80110b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	f003 0302 	and.w	r3, r3, #2
 8010f0e:	2b02      	cmp	r3, #2
 8010f10:	d10c      	bne.n	8010f2c <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 8010f12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d109      	bne.n	8010f2c <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8010f18:	4b66      	ldr	r3, [pc, #408]	@ (80110b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8010f1a:	681b      	ldr	r3, [r3, #0]
 8010f1c:	08db      	lsrs	r3, r3, #3
 8010f1e:	f003 0303 	and.w	r3, r3, #3
 8010f22:	4a65      	ldr	r2, [pc, #404]	@ (80110b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8010f24:	fa22 f303 	lsr.w	r3, r2, r3
 8010f28:	637b      	str	r3, [r7, #52]	@ 0x34
 8010f2a:	e01e      	b.n	8010f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010f2c:	4b61      	ldr	r3, [pc, #388]	@ (80110b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8010f34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010f38:	d106      	bne.n	8010f48 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 8010f3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010f40:	d102      	bne.n	8010f48 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8010f42:	4b5e      	ldr	r3, [pc, #376]	@ (80110bc <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8010f44:	637b      	str	r3, [r7, #52]	@ 0x34
 8010f46:	e010      	b.n	8010f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8010f48:	4b5a      	ldr	r3, [pc, #360]	@ (80110b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010f50:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010f54:	d106      	bne.n	8010f64 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 8010f56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f58:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010f5c:	d102      	bne.n	8010f64 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8010f5e:	4b58      	ldr	r3, [pc, #352]	@ (80110c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8010f60:	637b      	str	r3, [r7, #52]	@ 0x34
 8010f62:	e002      	b.n	8010f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8010f64:	2300      	movs	r3, #0
 8010f66:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8010f68:	e003      	b.n	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 8010f6a:	e002      	b.n	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 8010f6c:	2300      	movs	r3, #0
 8010f6e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8010f70:	bf00      	nop
          }
        }
        break;
 8010f72:	f000 bc28 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8010f76:	4b4f      	ldr	r3, [pc, #316]	@ (80110b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8010f78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8010f7c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8010f80:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8010f82:	4b4c      	ldr	r3, [pc, #304]	@ (80110b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8010f84:	681b      	ldr	r3, [r3, #0]
 8010f86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010f8a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010f8e:	d106      	bne.n	8010f9e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 8010f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d103      	bne.n	8010f9e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 8010f96:	4b4a      	ldr	r3, [pc, #296]	@ (80110c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8010f98:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8010f9a:	f000 bc14 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8010f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010fa0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010fa4:	d108      	bne.n	8010fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010fa6:	f107 0320 	add.w	r3, r7, #32
 8010faa:	4618      	mov	r0, r3
 8010fac:	f7fd fc82 	bl	800e8b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fb2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8010fb4:	f000 bc07 	b.w	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8010fb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010fba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010fbe:	d107      	bne.n	8010fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010fc0:	f107 0314 	add.w	r3, r7, #20
 8010fc4:	4618      	mov	r0, r3
 8010fc6:	f7fd fddf 	bl	800eb88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8010fca:	69bb      	ldr	r3, [r7, #24]
 8010fcc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8010fce:	e3fa      	b.n	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8010fd0:	2300      	movs	r3, #0
 8010fd2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8010fd4:	e3f7      	b.n	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8010fd6:	4b37      	ldr	r3, [pc, #220]	@ (80110b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8010fd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010fdc:	f003 0307 	and.w	r3, r3, #7
 8010fe0:	633b      	str	r3, [r7, #48]	@ 0x30
 8010fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010fe4:	2b04      	cmp	r3, #4
 8010fe6:	d861      	bhi.n	80110ac <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 8010fe8:	a201      	add	r2, pc, #4	@ (adr r2, 8010ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 8010fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010fee:	bf00      	nop
 8010ff0:	08011005 	.word	0x08011005
 8010ff4:	08011015 	.word	0x08011015
 8010ff8:	08011025 	.word	0x08011025
 8010ffc:	08011035 	.word	0x08011035
 8011000:	0801103b 	.word	0x0801103b
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8011004:	f107 0320 	add.w	r3, r7, #32
 8011008:	4618      	mov	r0, r3
 801100a:	f7fd fc53 	bl	800e8b4 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 801100e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011010:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8011012:	e04e      	b.n	80110b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011014:	f107 0314 	add.w	r3, r7, #20
 8011018:	4618      	mov	r0, r3
 801101a:	f7fd fdb5 	bl	800eb88 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 801101e:	697b      	ldr	r3, [r7, #20]
 8011020:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8011022:	e046      	b.n	80110b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011024:	f107 0308 	add.w	r3, r7, #8
 8011028:	4618      	mov	r0, r3
 801102a:	f7fd ff17 	bl	800ee5c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 801102e:	68bb      	ldr	r3, [r7, #8]
 8011030:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8011032:	e03e      	b.n	80110b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8011034:	4b23      	ldr	r3, [pc, #140]	@ (80110c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 8011036:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8011038:	e03b      	b.n	80110b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801103a:	4b1e      	ldr	r3, [pc, #120]	@ (80110b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 801103c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8011040:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8011044:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8011046:	4b1b      	ldr	r3, [pc, #108]	@ (80110b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	f003 0302 	and.w	r3, r3, #2
 801104e:	2b02      	cmp	r3, #2
 8011050:	d10c      	bne.n	801106c <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 8011052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011054:	2b00      	cmp	r3, #0
 8011056:	d109      	bne.n	801106c <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8011058:	4b16      	ldr	r3, [pc, #88]	@ (80110b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 801105a:	681b      	ldr	r3, [r3, #0]
 801105c:	08db      	lsrs	r3, r3, #3
 801105e:	f003 0303 	and.w	r3, r3, #3
 8011062:	4a15      	ldr	r2, [pc, #84]	@ (80110b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8011064:	fa22 f303 	lsr.w	r3, r2, r3
 8011068:	637b      	str	r3, [r7, #52]	@ 0x34
 801106a:	e01e      	b.n	80110aa <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801106c:	4b11      	ldr	r3, [pc, #68]	@ (80110b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 801106e:	681b      	ldr	r3, [r3, #0]
 8011070:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8011074:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011078:	d106      	bne.n	8011088 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 801107a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801107c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011080:	d102      	bne.n	8011088 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8011082:	4b0e      	ldr	r3, [pc, #56]	@ (80110bc <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8011084:	637b      	str	r3, [r7, #52]	@ 0x34
 8011086:	e010      	b.n	80110aa <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8011088:	4b0a      	ldr	r3, [pc, #40]	@ (80110b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 801108a:	681b      	ldr	r3, [r3, #0]
 801108c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011090:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8011094:	d106      	bne.n	80110a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 8011096:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011098:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801109c:	d102      	bne.n	80110a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 801109e:	4b08      	ldr	r3, [pc, #32]	@ (80110c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 80110a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80110a2:	e002      	b.n	80110aa <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80110a4:	2300      	movs	r3, #0
 80110a6:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80110a8:	e003      	b.n	80110b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 80110aa:	e002      	b.n	80110b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 80110ac:	2300      	movs	r3, #0
 80110ae:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80110b0:	bf00      	nop
          }
        }
        break;
 80110b2:	e388      	b.n	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80110b4:	44020c00 	.word	0x44020c00
 80110b8:	03d09000 	.word	0x03d09000
 80110bc:	003d0900 	.word	0x003d0900
 80110c0:	017d7840 	.word	0x017d7840
 80110c4:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80110c8:	4ba9      	ldr	r3, [pc, #676]	@ (8011370 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80110ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80110ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80110d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80110d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80110d6:	2b20      	cmp	r3, #32
 80110d8:	f200 809a 	bhi.w	8011210 <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 80110dc:	a201      	add	r2, pc, #4	@ (adr r2, 80110e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 80110de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110e2:	bf00      	nop
 80110e4:	08011169 	.word	0x08011169
 80110e8:	08011211 	.word	0x08011211
 80110ec:	08011211 	.word	0x08011211
 80110f0:	08011211 	.word	0x08011211
 80110f4:	08011211 	.word	0x08011211
 80110f8:	08011211 	.word	0x08011211
 80110fc:	08011211 	.word	0x08011211
 8011100:	08011211 	.word	0x08011211
 8011104:	08011179 	.word	0x08011179
 8011108:	08011211 	.word	0x08011211
 801110c:	08011211 	.word	0x08011211
 8011110:	08011211 	.word	0x08011211
 8011114:	08011211 	.word	0x08011211
 8011118:	08011211 	.word	0x08011211
 801111c:	08011211 	.word	0x08011211
 8011120:	08011211 	.word	0x08011211
 8011124:	08011189 	.word	0x08011189
 8011128:	08011211 	.word	0x08011211
 801112c:	08011211 	.word	0x08011211
 8011130:	08011211 	.word	0x08011211
 8011134:	08011211 	.word	0x08011211
 8011138:	08011211 	.word	0x08011211
 801113c:	08011211 	.word	0x08011211
 8011140:	08011211 	.word	0x08011211
 8011144:	08011199 	.word	0x08011199
 8011148:	08011211 	.word	0x08011211
 801114c:	08011211 	.word	0x08011211
 8011150:	08011211 	.word	0x08011211
 8011154:	08011211 	.word	0x08011211
 8011158:	08011211 	.word	0x08011211
 801115c:	08011211 	.word	0x08011211
 8011160:	08011211 	.word	0x08011211
 8011164:	0801119f 	.word	0x0801119f
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8011168:	f107 0320 	add.w	r3, r7, #32
 801116c:	4618      	mov	r0, r3
 801116e:	f7fd fba1 	bl	800e8b4 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8011172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011174:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8011176:	e04e      	b.n	8011216 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011178:	f107 0314 	add.w	r3, r7, #20
 801117c:	4618      	mov	r0, r3
 801117e:	f7fd fd03 	bl	800eb88 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8011182:	697b      	ldr	r3, [r7, #20]
 8011184:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8011186:	e046      	b.n	8011216 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011188:	f107 0308 	add.w	r3, r7, #8
 801118c:	4618      	mov	r0, r3
 801118e:	f7fd fe65 	bl	800ee5c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8011192:	68bb      	ldr	r3, [r7, #8]
 8011194:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8011196:	e03e      	b.n	8011216 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8011198:	4b76      	ldr	r3, [pc, #472]	@ (8011374 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 801119a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 801119c:	e03b      	b.n	8011216 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801119e:	4b74      	ldr	r3, [pc, #464]	@ (8011370 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80111a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80111a4:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80111a8:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80111aa:	4b71      	ldr	r3, [pc, #452]	@ (8011370 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80111ac:	681b      	ldr	r3, [r3, #0]
 80111ae:	f003 0302 	and.w	r3, r3, #2
 80111b2:	2b02      	cmp	r3, #2
 80111b4:	d10c      	bne.n	80111d0 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 80111b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	d109      	bne.n	80111d0 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80111bc:	4b6c      	ldr	r3, [pc, #432]	@ (8011370 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80111be:	681b      	ldr	r3, [r3, #0]
 80111c0:	08db      	lsrs	r3, r3, #3
 80111c2:	f003 0303 	and.w	r3, r3, #3
 80111c6:	4a6c      	ldr	r2, [pc, #432]	@ (8011378 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 80111c8:	fa22 f303 	lsr.w	r3, r2, r3
 80111cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80111ce:	e01e      	b.n	801120e <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80111d0:	4b67      	ldr	r3, [pc, #412]	@ (8011370 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80111d2:	681b      	ldr	r3, [r3, #0]
 80111d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80111d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80111dc:	d106      	bne.n	80111ec <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 80111de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80111e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80111e4:	d102      	bne.n	80111ec <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80111e6:	4b65      	ldr	r3, [pc, #404]	@ (801137c <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 80111e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80111ea:	e010      	b.n	801120e <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80111ec:	4b60      	ldr	r3, [pc, #384]	@ (8011370 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80111ee:	681b      	ldr	r3, [r3, #0]
 80111f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80111f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80111f8:	d106      	bne.n	8011208 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 80111fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80111fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011200:	d102      	bne.n	8011208 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8011202:	4b5f      	ldr	r3, [pc, #380]	@ (8011380 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 8011204:	637b      	str	r3, [r7, #52]	@ 0x34
 8011206:	e002      	b.n	801120e <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8011208:	2300      	movs	r3, #0
 801120a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 801120c:	e003      	b.n	8011216 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 801120e:	e002      	b.n	8011216 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 8011210:	2300      	movs	r3, #0
 8011212:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8011214:	bf00      	nop
          }
        }
        break;
 8011216:	e2d6      	b.n	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8011218:	4b55      	ldr	r3, [pc, #340]	@ (8011370 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 801121a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801121e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8011222:	633b      	str	r3, [r7, #48]	@ 0x30
 8011224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011226:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801122a:	d031      	beq.n	8011290 <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 801122c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801122e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011232:	d866      	bhi.n	8011302 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8011234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011236:	2bc0      	cmp	r3, #192	@ 0xc0
 8011238:	d027      	beq.n	801128a <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 801123a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801123c:	2bc0      	cmp	r3, #192	@ 0xc0
 801123e:	d860      	bhi.n	8011302 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8011240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011242:	2b80      	cmp	r3, #128	@ 0x80
 8011244:	d019      	beq.n	801127a <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 8011246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011248:	2b80      	cmp	r3, #128	@ 0x80
 801124a:	d85a      	bhi.n	8011302 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 801124c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801124e:	2b00      	cmp	r3, #0
 8011250:	d003      	beq.n	801125a <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 8011252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011254:	2b40      	cmp	r3, #64	@ 0x40
 8011256:	d008      	beq.n	801126a <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 8011258:	e053      	b.n	8011302 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801125a:	f107 0320 	add.w	r3, r7, #32
 801125e:	4618      	mov	r0, r3
 8011260:	f7fd fb28 	bl	800e8b4 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8011264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011266:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8011268:	e04e      	b.n	8011308 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801126a:	f107 0314 	add.w	r3, r7, #20
 801126e:	4618      	mov	r0, r3
 8011270:	f7fd fc8a 	bl	800eb88 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8011274:	697b      	ldr	r3, [r7, #20]
 8011276:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8011278:	e046      	b.n	8011308 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801127a:	f107 0308 	add.w	r3, r7, #8
 801127e:	4618      	mov	r0, r3
 8011280:	f7fd fdec 	bl	800ee5c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8011284:	68bb      	ldr	r3, [r7, #8]
 8011286:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8011288:	e03e      	b.n	8011308 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 801128a:	4b3a      	ldr	r3, [pc, #232]	@ (8011374 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 801128c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 801128e:	e03b      	b.n	8011308 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8011290:	4b37      	ldr	r3, [pc, #220]	@ (8011370 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8011292:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8011296:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 801129a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801129c:	4b34      	ldr	r3, [pc, #208]	@ (8011370 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 801129e:	681b      	ldr	r3, [r3, #0]
 80112a0:	f003 0302 	and.w	r3, r3, #2
 80112a4:	2b02      	cmp	r3, #2
 80112a6:	d10c      	bne.n	80112c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 80112a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d109      	bne.n	80112c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80112ae:	4b30      	ldr	r3, [pc, #192]	@ (8011370 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80112b0:	681b      	ldr	r3, [r3, #0]
 80112b2:	08db      	lsrs	r3, r3, #3
 80112b4:	f003 0303 	and.w	r3, r3, #3
 80112b8:	4a2f      	ldr	r2, [pc, #188]	@ (8011378 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 80112ba:	fa22 f303 	lsr.w	r3, r2, r3
 80112be:	637b      	str	r3, [r7, #52]	@ 0x34
 80112c0:	e01e      	b.n	8011300 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80112c2:	4b2b      	ldr	r3, [pc, #172]	@ (8011370 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80112c4:	681b      	ldr	r3, [r3, #0]
 80112c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80112ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80112ce:	d106      	bne.n	80112de <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 80112d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80112d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80112d6:	d102      	bne.n	80112de <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80112d8:	4b28      	ldr	r3, [pc, #160]	@ (801137c <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 80112da:	637b      	str	r3, [r7, #52]	@ 0x34
 80112dc:	e010      	b.n	8011300 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80112de:	4b24      	ldr	r3, [pc, #144]	@ (8011370 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80112e0:	681b      	ldr	r3, [r3, #0]
 80112e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80112e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80112ea:	d106      	bne.n	80112fa <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 80112ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80112ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80112f2:	d102      	bne.n	80112fa <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80112f4:	4b22      	ldr	r3, [pc, #136]	@ (8011380 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 80112f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80112f8:	e002      	b.n	8011300 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80112fa:	2300      	movs	r3, #0
 80112fc:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80112fe:	e003      	b.n	8011308 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 8011300:	e002      	b.n	8011308 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 8011302:	2300      	movs	r3, #0
 8011304:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8011306:	bf00      	nop
          }
        }
        break;
 8011308:	e25d      	b.n	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 801130a:	4b19      	ldr	r3, [pc, #100]	@ (8011370 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 801130c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011310:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8011314:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 8011316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011318:	2b00      	cmp	r3, #0
 801131a:	d103      	bne.n	8011324 <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 801131c:	f7fb fb14 	bl	800c948 <HAL_RCC_GetPCLK2Freq>
 8011320:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8011322:	e250      	b.n	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 8011324:	4b12      	ldr	r3, [pc, #72]	@ (8011370 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8011326:	681b      	ldr	r3, [r3, #0]
 8011328:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801132c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8011330:	d10b      	bne.n	801134a <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 8011332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011334:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011338:	d107      	bne.n	801134a <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801133a:	f107 0314 	add.w	r3, r7, #20
 801133e:	4618      	mov	r0, r3
 8011340:	f7fd fc22 	bl	800eb88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8011344:	69bb      	ldr	r3, [r7, #24]
 8011346:	637b      	str	r3, [r7, #52]	@ 0x34
 8011348:	e04f      	b.n	80113ea <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 801134a:	4b09      	ldr	r3, [pc, #36]	@ (8011370 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 801134c:	681b      	ldr	r3, [r3, #0]
 801134e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8011352:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011356:	d115      	bne.n	8011384 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 8011358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801135a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801135e:	d111      	bne.n	8011384 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011360:	f107 0308 	add.w	r3, r7, #8
 8011364:	4618      	mov	r0, r3
 8011366:	f7fd fd79 	bl	800ee5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 801136a:	68fb      	ldr	r3, [r7, #12]
 801136c:	637b      	str	r3, [r7, #52]	@ 0x34
 801136e:	e03c      	b.n	80113ea <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 8011370:	44020c00 	.word	0x44020c00
 8011374:	00bb8000 	.word	0x00bb8000
 8011378:	03d09000 	.word	0x03d09000
 801137c:	003d0900 	.word	0x003d0900
 8011380:	017d7840 	.word	0x017d7840
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 8011384:	4b94      	ldr	r3, [pc, #592]	@ (80115d8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	f003 0302 	and.w	r3, r3, #2
 801138c:	2b02      	cmp	r3, #2
 801138e:	d10d      	bne.n	80113ac <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 8011390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011392:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8011396:	d109      	bne.n	80113ac <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8011398:	4b8f      	ldr	r3, [pc, #572]	@ (80115d8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	08db      	lsrs	r3, r3, #3
 801139e:	f003 0303 	and.w	r3, r3, #3
 80113a2:	4a8e      	ldr	r2, [pc, #568]	@ (80115dc <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 80113a4:	fa22 f303 	lsr.w	r3, r2, r3
 80113a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80113aa:	e01e      	b.n	80113ea <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 80113ac:	4b8a      	ldr	r3, [pc, #552]	@ (80115d8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80113b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80113b8:	d106      	bne.n	80113c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 80113ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80113bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80113c0:	d102      	bne.n	80113c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 80113c2:	4b87      	ldr	r3, [pc, #540]	@ (80115e0 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 80113c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80113c6:	e010      	b.n	80113ea <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 80113c8:	4b83      	ldr	r3, [pc, #524]	@ (80115d8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80113d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80113d4:	d106      	bne.n	80113e4 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 80113d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80113d8:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80113dc:	d102      	bne.n	80113e4 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 80113de:	4b81      	ldr	r3, [pc, #516]	@ (80115e4 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 80113e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80113e2:	e002      	b.n	80113ea <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 80113e4:	2300      	movs	r3, #0
 80113e6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80113e8:	e1ed      	b.n	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80113ea:	e1ec      	b.n	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 80113ec:	4b7a      	ldr	r3, [pc, #488]	@ (80115d8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80113ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80113f2:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80113f6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 80113f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d103      	bne.n	8011406 <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80113fe:	f7fb fab9 	bl	800c974 <HAL_RCC_GetPCLK3Freq>
 8011402:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8011404:	e1df      	b.n	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 8011406:	4b74      	ldr	r3, [pc, #464]	@ (80115d8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8011408:	681b      	ldr	r3, [r3, #0]
 801140a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801140e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8011412:	d10b      	bne.n	801142c <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 8011414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011416:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801141a:	d107      	bne.n	801142c <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801141c:	f107 0314 	add.w	r3, r7, #20
 8011420:	4618      	mov	r0, r3
 8011422:	f7fd fbb1 	bl	800eb88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8011426:	69bb      	ldr	r3, [r7, #24]
 8011428:	637b      	str	r3, [r7, #52]	@ 0x34
 801142a:	e045      	b.n	80114b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 801142c:	4b6a      	ldr	r3, [pc, #424]	@ (80115d8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 801142e:	681b      	ldr	r3, [r3, #0]
 8011430:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8011434:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011438:	d10b      	bne.n	8011452 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 801143a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801143c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8011440:	d107      	bne.n	8011452 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011442:	f107 0308 	add.w	r3, r7, #8
 8011446:	4618      	mov	r0, r3
 8011448:	f7fd fd08 	bl	800ee5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 801144c:	68fb      	ldr	r3, [r7, #12]
 801144e:	637b      	str	r3, [r7, #52]	@ 0x34
 8011450:	e032      	b.n	80114b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 8011452:	4b61      	ldr	r3, [pc, #388]	@ (80115d8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8011454:	681b      	ldr	r3, [r3, #0]
 8011456:	f003 0302 	and.w	r3, r3, #2
 801145a:	2b02      	cmp	r3, #2
 801145c:	d10d      	bne.n	801147a <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 801145e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011460:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8011464:	d109      	bne.n	801147a <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8011466:	4b5c      	ldr	r3, [pc, #368]	@ (80115d8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	08db      	lsrs	r3, r3, #3
 801146c:	f003 0303 	and.w	r3, r3, #3
 8011470:	4a5a      	ldr	r2, [pc, #360]	@ (80115dc <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8011472:	fa22 f303 	lsr.w	r3, r2, r3
 8011476:	637b      	str	r3, [r7, #52]	@ 0x34
 8011478:	e01e      	b.n	80114b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 801147a:	4b57      	ldr	r3, [pc, #348]	@ (80115d8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8011482:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011486:	d106      	bne.n	8011496 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 8011488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801148a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801148e:	d102      	bne.n	8011496 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 8011490:	4b53      	ldr	r3, [pc, #332]	@ (80115e0 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8011492:	637b      	str	r3, [r7, #52]	@ 0x34
 8011494:	e010      	b.n	80114b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 8011496:	4b50      	ldr	r3, [pc, #320]	@ (80115d8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8011498:	681b      	ldr	r3, [r3, #0]
 801149a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801149e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80114a2:	d106      	bne.n	80114b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 80114a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80114a6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80114aa:	d102      	bne.n	80114b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 80114ac:	4b4d      	ldr	r3, [pc, #308]	@ (80115e4 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 80114ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80114b0:	e002      	b.n	80114b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 80114b2:	2300      	movs	r3, #0
 80114b4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80114b6:	e186      	b.n	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80114b8:	e185      	b.n	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80114ba:	4b47      	ldr	r3, [pc, #284]	@ (80115d8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80114bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80114c0:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 80114c4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 80114c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d103      	bne.n	80114d4 <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 80114cc:	f7fb fa3c 	bl	800c948 <HAL_RCC_GetPCLK2Freq>
 80114d0:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 80114d2:	e178      	b.n	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 80114d4:	4b40      	ldr	r3, [pc, #256]	@ (80115d8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80114d6:	681b      	ldr	r3, [r3, #0]
 80114d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80114dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80114e0:	d10b      	bne.n	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 80114e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80114e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80114e8:	d107      	bne.n	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80114ea:	f107 0314 	add.w	r3, r7, #20
 80114ee:	4618      	mov	r0, r3
 80114f0:	f7fd fb4a 	bl	800eb88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80114f4:	69bb      	ldr	r3, [r7, #24]
 80114f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80114f8:	e045      	b.n	8011586 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 80114fa:	4b37      	ldr	r3, [pc, #220]	@ (80115d8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80114fc:	681b      	ldr	r3, [r3, #0]
 80114fe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8011502:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011506:	d10b      	bne.n	8011520 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 8011508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801150a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801150e:	d107      	bne.n	8011520 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011510:	f107 0308 	add.w	r3, r7, #8
 8011514:	4618      	mov	r0, r3
 8011516:	f7fd fca1 	bl	800ee5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 801151a:	68fb      	ldr	r3, [r7, #12]
 801151c:	637b      	str	r3, [r7, #52]	@ 0x34
 801151e:	e032      	b.n	8011586 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 8011520:	4b2d      	ldr	r3, [pc, #180]	@ (80115d8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8011522:	681b      	ldr	r3, [r3, #0]
 8011524:	f003 0302 	and.w	r3, r3, #2
 8011528:	2b02      	cmp	r3, #2
 801152a:	d10d      	bne.n	8011548 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 801152c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801152e:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8011532:	d109      	bne.n	8011548 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8011534:	4b28      	ldr	r3, [pc, #160]	@ (80115d8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8011536:	681b      	ldr	r3, [r3, #0]
 8011538:	08db      	lsrs	r3, r3, #3
 801153a:	f003 0303 	and.w	r3, r3, #3
 801153e:	4a27      	ldr	r2, [pc, #156]	@ (80115dc <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8011540:	fa22 f303 	lsr.w	r3, r2, r3
 8011544:	637b      	str	r3, [r7, #52]	@ 0x34
 8011546:	e01e      	b.n	8011586 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 8011548:	4b23      	ldr	r3, [pc, #140]	@ (80115d8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 801154a:	681b      	ldr	r3, [r3, #0]
 801154c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8011550:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011554:	d106      	bne.n	8011564 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 8011556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011558:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801155c:	d102      	bne.n	8011564 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 801155e:	4b20      	ldr	r3, [pc, #128]	@ (80115e0 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8011560:	637b      	str	r3, [r7, #52]	@ 0x34
 8011562:	e010      	b.n	8011586 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 8011564:	4b1c      	ldr	r3, [pc, #112]	@ (80115d8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8011566:	681b      	ldr	r3, [r3, #0]
 8011568:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801156c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8011570:	d106      	bne.n	8011580 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 8011572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011574:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8011578:	d102      	bne.n	8011580 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 801157a:	4b1a      	ldr	r3, [pc, #104]	@ (80115e4 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 801157c:	637b      	str	r3, [r7, #52]	@ 0x34
 801157e:	e002      	b.n	8011586 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 8011580:	2300      	movs	r3, #0
 8011582:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8011584:	e11f      	b.n	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8011586:	e11e      	b.n	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8011588:	4b13      	ldr	r3, [pc, #76]	@ (80115d8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 801158a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 801158e:	f003 0303 	and.w	r3, r3, #3
 8011592:	633b      	str	r3, [r7, #48]	@ 0x30
 8011594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011596:	2b03      	cmp	r3, #3
 8011598:	d85f      	bhi.n	801165a <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 801159a:	a201      	add	r2, pc, #4	@ (adr r2, 80115a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 801159c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115a0:	080115b1 	.word	0x080115b1
 80115a4:	080115b9 	.word	0x080115b9
 80115a8:	080115c9 	.word	0x080115c9
 80115ac:	080115e9 	.word	0x080115e9

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 80115b0:	f7fb f998 	bl	800c8e4 <HAL_RCC_GetHCLKFreq>
 80115b4:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80115b6:	e053      	b.n	8011660 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80115b8:	f107 0320 	add.w	r3, r7, #32
 80115bc:	4618      	mov	r0, r3
 80115be:	f7fd f979 	bl	800e8b4 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80115c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115c4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80115c6:	e04b      	b.n	8011660 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80115c8:	f107 0314 	add.w	r3, r7, #20
 80115cc:	4618      	mov	r0, r3
 80115ce:	f7fd fadb 	bl	800eb88 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 80115d2:	69fb      	ldr	r3, [r7, #28]
 80115d4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80115d6:	e043      	b.n	8011660 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 80115d8:	44020c00 	.word	0x44020c00
 80115dc:	03d09000 	.word	0x03d09000
 80115e0:	003d0900 	.word	0x003d0900
 80115e4:	017d7840 	.word	0x017d7840
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80115e8:	4b79      	ldr	r3, [pc, #484]	@ (80117d0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80115ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80115ee:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80115f2:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80115f4:	4b76      	ldr	r3, [pc, #472]	@ (80117d0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80115f6:	681b      	ldr	r3, [r3, #0]
 80115f8:	f003 0302 	and.w	r3, r3, #2
 80115fc:	2b02      	cmp	r3, #2
 80115fe:	d10c      	bne.n	801161a <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 8011600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011602:	2b00      	cmp	r3, #0
 8011604:	d109      	bne.n	801161a <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8011606:	4b72      	ldr	r3, [pc, #456]	@ (80117d0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8011608:	681b      	ldr	r3, [r3, #0]
 801160a:	08db      	lsrs	r3, r3, #3
 801160c:	f003 0303 	and.w	r3, r3, #3
 8011610:	4a70      	ldr	r2, [pc, #448]	@ (80117d4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 8011612:	fa22 f303 	lsr.w	r3, r2, r3
 8011616:	637b      	str	r3, [r7, #52]	@ 0x34
 8011618:	e01e      	b.n	8011658 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801161a:	4b6d      	ldr	r3, [pc, #436]	@ (80117d0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 801161c:	681b      	ldr	r3, [r3, #0]
 801161e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8011622:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011626:	d106      	bne.n	8011636 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 8011628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801162a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801162e:	d102      	bne.n	8011636 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8011630:	4b69      	ldr	r3, [pc, #420]	@ (80117d8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 8011632:	637b      	str	r3, [r7, #52]	@ 0x34
 8011634:	e010      	b.n	8011658 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8011636:	4b66      	ldr	r3, [pc, #408]	@ (80117d0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8011638:	681b      	ldr	r3, [r3, #0]
 801163a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801163e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8011642:	d106      	bne.n	8011652 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 8011644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011646:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801164a:	d102      	bne.n	8011652 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 801164c:	4b63      	ldr	r3, [pc, #396]	@ (80117dc <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 801164e:	637b      	str	r3, [r7, #52]	@ 0x34
 8011650:	e002      	b.n	8011658 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8011652:	2300      	movs	r3, #0
 8011654:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8011656:	e003      	b.n	8011660 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8011658:	e002      	b.n	8011660 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 801165a:	2300      	movs	r3, #0
 801165c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 801165e:	bf00      	nop
          }
        }
        break;
 8011660:	e0b1      	b.n	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8011662:	4b5b      	ldr	r3, [pc, #364]	@ (80117d0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8011664:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8011668:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 801166c:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 801166e:	4b58      	ldr	r3, [pc, #352]	@ (80117d0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8011670:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8011674:	f003 0302 	and.w	r3, r3, #2
 8011678:	2b02      	cmp	r3, #2
 801167a:	d106      	bne.n	801168a <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 801167c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801167e:	2b00      	cmp	r3, #0
 8011680:	d103      	bne.n	801168a <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 8011682:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011686:	637b      	str	r3, [r7, #52]	@ 0x34
 8011688:	e01f      	b.n	80116ca <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 801168a:	4b51      	ldr	r3, [pc, #324]	@ (80117d0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 801168c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8011690:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8011694:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8011698:	d106      	bne.n	80116a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 801169a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801169c:	2b40      	cmp	r3, #64	@ 0x40
 801169e:	d103      	bne.n	80116a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 80116a0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80116a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80116a6:	e010      	b.n	80116ca <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 80116a8:	4b49      	ldr	r3, [pc, #292]	@ (80117d0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80116aa:	681b      	ldr	r3, [r3, #0]
 80116ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80116b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80116b4:	d106      	bne.n	80116c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 80116b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80116b8:	2b80      	cmp	r3, #128	@ 0x80
 80116ba:	d103      	bne.n	80116c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 80116bc:	f248 0312 	movw	r3, #32786	@ 0x8012
 80116c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80116c2:	e002      	b.n	80116ca <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 80116c4:	2300      	movs	r3, #0
 80116c6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 80116c8:	e07d      	b.n	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80116ca:	e07c      	b.n	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80116cc:	4b40      	ldr	r3, [pc, #256]	@ (80117d0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80116ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80116d2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80116d6:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 80116d8:	4b3d      	ldr	r3, [pc, #244]	@ (80117d0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80116da:	681b      	ldr	r3, [r3, #0]
 80116dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80116e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80116e4:	d105      	bne.n	80116f2 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 80116e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	d102      	bne.n	80116f2 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 80116ec:	4b3c      	ldr	r3, [pc, #240]	@ (80117e0 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 80116ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80116f0:	e031      	b.n	8011756 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 80116f2:	4b37      	ldr	r3, [pc, #220]	@ (80117d0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80116f4:	681b      	ldr	r3, [r3, #0]
 80116f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80116fa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80116fe:	d10a      	bne.n	8011716 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 8011700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011702:	2b10      	cmp	r3, #16
 8011704:	d107      	bne.n	8011716 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8011706:	f107 0320 	add.w	r3, r7, #32
 801170a:	4618      	mov	r0, r3
 801170c:	f7fd f8d2 	bl	800e8b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8011710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011712:	637b      	str	r3, [r7, #52]	@ 0x34
 8011714:	e01f      	b.n	8011756 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8011716:	4b2e      	ldr	r3, [pc, #184]	@ (80117d0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8011718:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801171c:	f003 0302 	and.w	r3, r3, #2
 8011720:	2b02      	cmp	r3, #2
 8011722:	d106      	bne.n	8011732 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 8011724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011726:	2b20      	cmp	r3, #32
 8011728:	d103      	bne.n	8011732 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 801172a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801172e:	637b      	str	r3, [r7, #52]	@ 0x34
 8011730:	e011      	b.n	8011756 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8011732:	4b27      	ldr	r3, [pc, #156]	@ (80117d0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8011734:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8011738:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801173c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8011740:	d106      	bne.n	8011750 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 8011742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011744:	2b30      	cmp	r3, #48	@ 0x30
 8011746:	d103      	bne.n	8011750 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 8011748:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 801174c:	637b      	str	r3, [r7, #52]	@ 0x34
 801174e:	e002      	b.n	8011756 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8011750:	2300      	movs	r3, #0
 8011752:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8011754:	e037      	b.n	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8011756:	e036      	b.n	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8011758:	4b1d      	ldr	r3, [pc, #116]	@ (80117d0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 801175a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 801175e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8011762:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8011764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011766:	2b10      	cmp	r3, #16
 8011768:	d107      	bne.n	801177a <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801176a:	f107 0320 	add.w	r3, r7, #32
 801176e:	4618      	mov	r0, r3
 8011770:	f7fd f8a0 	bl	800e8b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8011774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011776:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8011778:	e025      	b.n	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 801177a:	4b15      	ldr	r3, [pc, #84]	@ (80117d0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 801177c:	681b      	ldr	r3, [r3, #0]
 801177e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8011782:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011786:	d10a      	bne.n	801179e <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 8011788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801178a:	2b20      	cmp	r3, #32
 801178c:	d107      	bne.n	801179e <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801178e:	f107 0308 	add.w	r3, r7, #8
 8011792:	4618      	mov	r0, r3
 8011794:	f7fd fb62 	bl	800ee5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8011798:	68fb      	ldr	r3, [r7, #12]
 801179a:	637b      	str	r3, [r7, #52]	@ 0x34
 801179c:	e00f      	b.n	80117be <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 801179e:	4b0c      	ldr	r3, [pc, #48]	@ (80117d0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80117a0:	681b      	ldr	r3, [r3, #0]
 80117a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80117a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80117aa:	d105      	bne.n	80117b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 80117ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80117ae:	2b30      	cmp	r3, #48	@ 0x30
 80117b0:	d102      	bne.n	80117b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 80117b2:	4b0b      	ldr	r3, [pc, #44]	@ (80117e0 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 80117b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80117b6:	e002      	b.n	80117be <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 80117b8:	2300      	movs	r3, #0
 80117ba:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 80117bc:	e003      	b.n	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80117be:	e002      	b.n	80117c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 80117c0:	2300      	movs	r3, #0
 80117c2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80117c4:	bf00      	nop
    }
  }

  return (frequency);
 80117c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80117c8:	4618      	mov	r0, r3
 80117ca:	373c      	adds	r7, #60	@ 0x3c
 80117cc:	46bd      	mov	sp, r7
 80117ce:	bd90      	pop	{r4, r7, pc}
 80117d0:	44020c00 	.word	0x44020c00
 80117d4:	03d09000 	.word	0x03d09000
 80117d8:	003d0900 	.word	0x003d0900
 80117dc:	017d7840 	.word	0x017d7840
 80117e0:	02dc6c00 	.word	0x02dc6c00

080117e4 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80117e4:	b580      	push	{r7, lr}
 80117e6:	b084      	sub	sp, #16
 80117e8:	af00      	add	r7, sp, #0
 80117ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 80117ec:	4b48      	ldr	r3, [pc, #288]	@ (8011910 <RCCEx_PLL2_Config+0x12c>)
 80117ee:	681b      	ldr	r3, [r3, #0]
 80117f0:	4a47      	ldr	r2, [pc, #284]	@ (8011910 <RCCEx_PLL2_Config+0x12c>)
 80117f2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80117f6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80117f8:	f7f4 f8ea 	bl	80059d0 <HAL_GetTick>
 80117fc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80117fe:	e008      	b.n	8011812 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8011800:	f7f4 f8e6 	bl	80059d0 <HAL_GetTick>
 8011804:	4602      	mov	r2, r0
 8011806:	68fb      	ldr	r3, [r7, #12]
 8011808:	1ad3      	subs	r3, r2, r3
 801180a:	2b02      	cmp	r3, #2
 801180c:	d901      	bls.n	8011812 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 801180e:	2303      	movs	r3, #3
 8011810:	e07a      	b.n	8011908 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8011812:	4b3f      	ldr	r3, [pc, #252]	@ (8011910 <RCCEx_PLL2_Config+0x12c>)
 8011814:	681b      	ldr	r3, [r3, #0]
 8011816:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801181a:	2b00      	cmp	r3, #0
 801181c:	d1f0      	bne.n	8011800 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 801181e:	4b3c      	ldr	r3, [pc, #240]	@ (8011910 <RCCEx_PLL2_Config+0x12c>)
 8011820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011822:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8011826:	f023 0303 	bic.w	r3, r3, #3
 801182a:	687a      	ldr	r2, [r7, #4]
 801182c:	6811      	ldr	r1, [r2, #0]
 801182e:	687a      	ldr	r2, [r7, #4]
 8011830:	6852      	ldr	r2, [r2, #4]
 8011832:	0212      	lsls	r2, r2, #8
 8011834:	430a      	orrs	r2, r1
 8011836:	4936      	ldr	r1, [pc, #216]	@ (8011910 <RCCEx_PLL2_Config+0x12c>)
 8011838:	4313      	orrs	r3, r2
 801183a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	689b      	ldr	r3, [r3, #8]
 8011840:	3b01      	subs	r3, #1
 8011842:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	68db      	ldr	r3, [r3, #12]
 801184a:	3b01      	subs	r3, #1
 801184c:	025b      	lsls	r3, r3, #9
 801184e:	b29b      	uxth	r3, r3
 8011850:	431a      	orrs	r2, r3
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	691b      	ldr	r3, [r3, #16]
 8011856:	3b01      	subs	r3, #1
 8011858:	041b      	lsls	r3, r3, #16
 801185a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801185e:	431a      	orrs	r2, r3
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	695b      	ldr	r3, [r3, #20]
 8011864:	3b01      	subs	r3, #1
 8011866:	061b      	lsls	r3, r3, #24
 8011868:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801186c:	4928      	ldr	r1, [pc, #160]	@ (8011910 <RCCEx_PLL2_Config+0x12c>)
 801186e:	4313      	orrs	r3, r2
 8011870:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8011872:	4b27      	ldr	r3, [pc, #156]	@ (8011910 <RCCEx_PLL2_Config+0x12c>)
 8011874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011876:	f023 020c 	bic.w	r2, r3, #12
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	699b      	ldr	r3, [r3, #24]
 801187e:	4924      	ldr	r1, [pc, #144]	@ (8011910 <RCCEx_PLL2_Config+0x12c>)
 8011880:	4313      	orrs	r3, r2
 8011882:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8011884:	4b22      	ldr	r3, [pc, #136]	@ (8011910 <RCCEx_PLL2_Config+0x12c>)
 8011886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011888:	f023 0220 	bic.w	r2, r3, #32
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	69db      	ldr	r3, [r3, #28]
 8011890:	491f      	ldr	r1, [pc, #124]	@ (8011910 <RCCEx_PLL2_Config+0x12c>)
 8011892:	4313      	orrs	r3, r2
 8011894:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8011896:	4b1e      	ldr	r3, [pc, #120]	@ (8011910 <RCCEx_PLL2_Config+0x12c>)
 8011898:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801189e:	491c      	ldr	r1, [pc, #112]	@ (8011910 <RCCEx_PLL2_Config+0x12c>)
 80118a0:	4313      	orrs	r3, r2
 80118a2:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 80118a4:	4b1a      	ldr	r3, [pc, #104]	@ (8011910 <RCCEx_PLL2_Config+0x12c>)
 80118a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80118a8:	4a19      	ldr	r2, [pc, #100]	@ (8011910 <RCCEx_PLL2_Config+0x12c>)
 80118aa:	f023 0310 	bic.w	r3, r3, #16
 80118ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 80118b0:	4b17      	ldr	r3, [pc, #92]	@ (8011910 <RCCEx_PLL2_Config+0x12c>)
 80118b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80118b4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80118b8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80118bc:	687a      	ldr	r2, [r7, #4]
 80118be:	6a12      	ldr	r2, [r2, #32]
 80118c0:	00d2      	lsls	r2, r2, #3
 80118c2:	4913      	ldr	r1, [pc, #76]	@ (8011910 <RCCEx_PLL2_Config+0x12c>)
 80118c4:	4313      	orrs	r3, r2
 80118c6:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 80118c8:	4b11      	ldr	r3, [pc, #68]	@ (8011910 <RCCEx_PLL2_Config+0x12c>)
 80118ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80118cc:	4a10      	ldr	r2, [pc, #64]	@ (8011910 <RCCEx_PLL2_Config+0x12c>)
 80118ce:	f043 0310 	orr.w	r3, r3, #16
 80118d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 80118d4:	4b0e      	ldr	r3, [pc, #56]	@ (8011910 <RCCEx_PLL2_Config+0x12c>)
 80118d6:	681b      	ldr	r3, [r3, #0]
 80118d8:	4a0d      	ldr	r2, [pc, #52]	@ (8011910 <RCCEx_PLL2_Config+0x12c>)
 80118da:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80118de:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80118e0:	f7f4 f876 	bl	80059d0 <HAL_GetTick>
 80118e4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80118e6:	e008      	b.n	80118fa <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80118e8:	f7f4 f872 	bl	80059d0 <HAL_GetTick>
 80118ec:	4602      	mov	r2, r0
 80118ee:	68fb      	ldr	r3, [r7, #12]
 80118f0:	1ad3      	subs	r3, r2, r3
 80118f2:	2b02      	cmp	r3, #2
 80118f4:	d901      	bls.n	80118fa <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 80118f6:	2303      	movs	r3, #3
 80118f8:	e006      	b.n	8011908 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80118fa:	4b05      	ldr	r3, [pc, #20]	@ (8011910 <RCCEx_PLL2_Config+0x12c>)
 80118fc:	681b      	ldr	r3, [r3, #0]
 80118fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8011902:	2b00      	cmp	r3, #0
 8011904:	d0f0      	beq.n	80118e8 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8011906:	2300      	movs	r3, #0

}
 8011908:	4618      	mov	r0, r3
 801190a:	3710      	adds	r7, #16
 801190c:	46bd      	mov	sp, r7
 801190e:	bd80      	pop	{r7, pc}
 8011910:	44020c00 	.word	0x44020c00

08011914 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8011914:	b580      	push	{r7, lr}
 8011916:	b084      	sub	sp, #16
 8011918:	af00      	add	r7, sp, #0
 801191a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 801191c:	4b48      	ldr	r3, [pc, #288]	@ (8011a40 <RCCEx_PLL3_Config+0x12c>)
 801191e:	681b      	ldr	r3, [r3, #0]
 8011920:	4a47      	ldr	r2, [pc, #284]	@ (8011a40 <RCCEx_PLL3_Config+0x12c>)
 8011922:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8011926:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8011928:	f7f4 f852 	bl	80059d0 <HAL_GetTick>
 801192c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801192e:	e008      	b.n	8011942 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8011930:	f7f4 f84e 	bl	80059d0 <HAL_GetTick>
 8011934:	4602      	mov	r2, r0
 8011936:	68fb      	ldr	r3, [r7, #12]
 8011938:	1ad3      	subs	r3, r2, r3
 801193a:	2b02      	cmp	r3, #2
 801193c:	d901      	bls.n	8011942 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 801193e:	2303      	movs	r3, #3
 8011940:	e07a      	b.n	8011a38 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8011942:	4b3f      	ldr	r3, [pc, #252]	@ (8011a40 <RCCEx_PLL3_Config+0x12c>)
 8011944:	681b      	ldr	r3, [r3, #0]
 8011946:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801194a:	2b00      	cmp	r3, #0
 801194c:	d1f0      	bne.n	8011930 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 801194e:	4b3c      	ldr	r3, [pc, #240]	@ (8011a40 <RCCEx_PLL3_Config+0x12c>)
 8011950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011952:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8011956:	f023 0303 	bic.w	r3, r3, #3
 801195a:	687a      	ldr	r2, [r7, #4]
 801195c:	6811      	ldr	r1, [r2, #0]
 801195e:	687a      	ldr	r2, [r7, #4]
 8011960:	6852      	ldr	r2, [r2, #4]
 8011962:	0212      	lsls	r2, r2, #8
 8011964:	430a      	orrs	r2, r1
 8011966:	4936      	ldr	r1, [pc, #216]	@ (8011a40 <RCCEx_PLL3_Config+0x12c>)
 8011968:	4313      	orrs	r3, r2
 801196a:	630b      	str	r3, [r1, #48]	@ 0x30
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	689b      	ldr	r3, [r3, #8]
 8011970:	3b01      	subs	r3, #1
 8011972:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	68db      	ldr	r3, [r3, #12]
 801197a:	3b01      	subs	r3, #1
 801197c:	025b      	lsls	r3, r3, #9
 801197e:	b29b      	uxth	r3, r3
 8011980:	431a      	orrs	r2, r3
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	691b      	ldr	r3, [r3, #16]
 8011986:	3b01      	subs	r3, #1
 8011988:	041b      	lsls	r3, r3, #16
 801198a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801198e:	431a      	orrs	r2, r3
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	695b      	ldr	r3, [r3, #20]
 8011994:	3b01      	subs	r3, #1
 8011996:	061b      	lsls	r3, r3, #24
 8011998:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801199c:	4928      	ldr	r1, [pc, #160]	@ (8011a40 <RCCEx_PLL3_Config+0x12c>)
 801199e:	4313      	orrs	r3, r2
 80119a0:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80119a2:	4b27      	ldr	r3, [pc, #156]	@ (8011a40 <RCCEx_PLL3_Config+0x12c>)
 80119a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80119a6:	f023 020c 	bic.w	r2, r3, #12
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	699b      	ldr	r3, [r3, #24]
 80119ae:	4924      	ldr	r1, [pc, #144]	@ (8011a40 <RCCEx_PLL3_Config+0x12c>)
 80119b0:	4313      	orrs	r3, r2
 80119b2:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 80119b4:	4b22      	ldr	r3, [pc, #136]	@ (8011a40 <RCCEx_PLL3_Config+0x12c>)
 80119b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80119b8:	f023 0220 	bic.w	r2, r3, #32
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	69db      	ldr	r3, [r3, #28]
 80119c0:	491f      	ldr	r1, [pc, #124]	@ (8011a40 <RCCEx_PLL3_Config+0x12c>)
 80119c2:	4313      	orrs	r3, r2
 80119c4:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80119c6:	4b1e      	ldr	r3, [pc, #120]	@ (8011a40 <RCCEx_PLL3_Config+0x12c>)
 80119c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80119ce:	491c      	ldr	r1, [pc, #112]	@ (8011a40 <RCCEx_PLL3_Config+0x12c>)
 80119d0:	4313      	orrs	r3, r2
 80119d2:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 80119d4:	4b1a      	ldr	r3, [pc, #104]	@ (8011a40 <RCCEx_PLL3_Config+0x12c>)
 80119d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80119d8:	4a19      	ldr	r2, [pc, #100]	@ (8011a40 <RCCEx_PLL3_Config+0x12c>)
 80119da:	f023 0310 	bic.w	r3, r3, #16
 80119de:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 80119e0:	4b17      	ldr	r3, [pc, #92]	@ (8011a40 <RCCEx_PLL3_Config+0x12c>)
 80119e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80119e4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80119e8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80119ec:	687a      	ldr	r2, [r7, #4]
 80119ee:	6a12      	ldr	r2, [r2, #32]
 80119f0:	00d2      	lsls	r2, r2, #3
 80119f2:	4913      	ldr	r1, [pc, #76]	@ (8011a40 <RCCEx_PLL3_Config+0x12c>)
 80119f4:	4313      	orrs	r3, r2
 80119f6:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 80119f8:	4b11      	ldr	r3, [pc, #68]	@ (8011a40 <RCCEx_PLL3_Config+0x12c>)
 80119fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80119fc:	4a10      	ldr	r2, [pc, #64]	@ (8011a40 <RCCEx_PLL3_Config+0x12c>)
 80119fe:	f043 0310 	orr.w	r3, r3, #16
 8011a02:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 8011a04:	4b0e      	ldr	r3, [pc, #56]	@ (8011a40 <RCCEx_PLL3_Config+0x12c>)
 8011a06:	681b      	ldr	r3, [r3, #0]
 8011a08:	4a0d      	ldr	r2, [pc, #52]	@ (8011a40 <RCCEx_PLL3_Config+0x12c>)
 8011a0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8011a0e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8011a10:	f7f3 ffde 	bl	80059d0 <HAL_GetTick>
 8011a14:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8011a16:	e008      	b.n	8011a2a <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8011a18:	f7f3 ffda 	bl	80059d0 <HAL_GetTick>
 8011a1c:	4602      	mov	r2, r0
 8011a1e:	68fb      	ldr	r3, [r7, #12]
 8011a20:	1ad3      	subs	r3, r2, r3
 8011a22:	2b02      	cmp	r3, #2
 8011a24:	d901      	bls.n	8011a2a <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 8011a26:	2303      	movs	r3, #3
 8011a28:	e006      	b.n	8011a38 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8011a2a:	4b05      	ldr	r3, [pc, #20]	@ (8011a40 <RCCEx_PLL3_Config+0x12c>)
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d0f0      	beq.n	8011a18 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 8011a36:	2300      	movs	r3, #0
}
 8011a38:	4618      	mov	r0, r3
 8011a3a:	3710      	adds	r7, #16
 8011a3c:	46bd      	mov	sp, r7
 8011a3e:	bd80      	pop	{r7, pc}
 8011a40:	44020c00 	.word	0x44020c00

08011a44 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8011a44:	b580      	push	{r7, lr}
 8011a46:	b084      	sub	sp, #16
 8011a48:	af00      	add	r7, sp, #0
 8011a4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8011a4c:	2301      	movs	r3, #1
 8011a4e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d071      	beq.n	8011b3a <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011a5c:	b2db      	uxtb	r3, r3
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d106      	bne.n	8011a70 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	2200      	movs	r2, #0
 8011a66:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8011a6a:	6878      	ldr	r0, [r7, #4]
 8011a6c:	f7f2 fedc 	bl	8004828 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	2202      	movs	r2, #2
 8011a74:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8011a78:	4b32      	ldr	r3, [pc, #200]	@ (8011b44 <HAL_RTC_Init+0x100>)
 8011a7a:	68db      	ldr	r3, [r3, #12]
 8011a7c:	f003 0310 	and.w	r3, r3, #16
 8011a80:	2b10      	cmp	r3, #16
 8011a82:	d051      	beq.n	8011b28 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011a84:	4b2f      	ldr	r3, [pc, #188]	@ (8011b44 <HAL_RTC_Init+0x100>)
 8011a86:	22ca      	movs	r2, #202	@ 0xca
 8011a88:	625a      	str	r2, [r3, #36]	@ 0x24
 8011a8a:	4b2e      	ldr	r3, [pc, #184]	@ (8011b44 <HAL_RTC_Init+0x100>)
 8011a8c:	2253      	movs	r2, #83	@ 0x53
 8011a8e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8011a90:	6878      	ldr	r0, [r7, #4]
 8011a92:	f000 fa53 	bl	8011f3c <RTC_EnterInitMode>
 8011a96:	4603      	mov	r3, r0
 8011a98:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8011a9a:	7bfb      	ldrb	r3, [r7, #15]
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	d13f      	bne.n	8011b20 <HAL_RTC_Init+0xdc>
      {
#if defined(RTC_CR_OSEL)
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8011aa0:	4b28      	ldr	r3, [pc, #160]	@ (8011b44 <HAL_RTC_Init+0x100>)
 8011aa2:	699b      	ldr	r3, [r3, #24]
 8011aa4:	4a27      	ldr	r2, [pc, #156]	@ (8011b44 <HAL_RTC_Init+0x100>)
 8011aa6:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 8011aaa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011aae:	6193      	str	r3, [r2, #24]

        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8011ab0:	4b24      	ldr	r3, [pc, #144]	@ (8011b44 <HAL_RTC_Init+0x100>)
 8011ab2:	699a      	ldr	r2, [r3, #24]
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	6859      	ldr	r1, [r3, #4]
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	691b      	ldr	r3, [r3, #16]
 8011abc:	4319      	orrs	r1, r3
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	699b      	ldr	r3, [r3, #24]
 8011ac2:	430b      	orrs	r3, r1
 8011ac4:	491f      	ldr	r1, [pc, #124]	@ (8011b44 <HAL_RTC_Init+0x100>)
 8011ac6:	4313      	orrs	r3, r2
 8011ac8:	618b      	str	r3, [r1, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, hrtc->Init.HourFormat);
#endif /* RTC_CR_OSEL */

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	68da      	ldr	r2, [r3, #12]
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	689b      	ldr	r3, [r3, #8]
 8011ad2:	041b      	lsls	r3, r3, #16
 8011ad4:	491b      	ldr	r1, [pc, #108]	@ (8011b44 <HAL_RTC_Init+0x100>)
 8011ad6:	4313      	orrs	r3, r2
 8011ad8:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8011ada:	4b1a      	ldr	r3, [pc, #104]	@ (8011b44 <HAL_RTC_Init+0x100>)
 8011adc:	68db      	ldr	r3, [r3, #12]
 8011ade:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011aea:	430b      	orrs	r3, r1
 8011aec:	4915      	ldr	r1, [pc, #84]	@ (8011b44 <HAL_RTC_Init+0x100>)
 8011aee:	4313      	orrs	r3, r2
 8011af0:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8011af2:	6878      	ldr	r0, [r7, #4]
 8011af4:	f000 fa5e 	bl	8011fb4 <RTC_ExitInitMode>
 8011af8:	4603      	mov	r3, r0
 8011afa:	73fb      	strb	r3, [r7, #15]

#if defined(RTC_CR_OSEL)
        if (status == HAL_OK)
 8011afc:	7bfb      	ldrb	r3, [r7, #15]
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	d10e      	bne.n	8011b20 <HAL_RTC_Init+0xdc>
        {
#if defined(RTC_CR_OUT2EN)
          MODIFY_REG(RTC->CR, \
 8011b02:	4b10      	ldr	r3, [pc, #64]	@ (8011b44 <HAL_RTC_Init+0x100>)
 8011b04:	699b      	ldr	r3, [r3, #24]
 8011b06:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	6a19      	ldr	r1, [r3, #32]
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	69db      	ldr	r3, [r3, #28]
 8011b12:	4319      	orrs	r1, r3
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	695b      	ldr	r3, [r3, #20]
 8011b18:	430b      	orrs	r3, r1
 8011b1a:	490a      	ldr	r1, [pc, #40]	@ (8011b44 <HAL_RTC_Init+0x100>)
 8011b1c:	4313      	orrs	r3, r2
 8011b1e:	618b      	str	r3, [r1, #24]
        }
#endif /* RTC_CR_OSEL */
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011b20:	4b08      	ldr	r3, [pc, #32]	@ (8011b44 <HAL_RTC_Init+0x100>)
 8011b22:	22ff      	movs	r2, #255	@ 0xff
 8011b24:	625a      	str	r2, [r3, #36]	@ 0x24
 8011b26:	e001      	b.n	8011b2c <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8011b28:	2300      	movs	r3, #0
 8011b2a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8011b2c:	7bfb      	ldrb	r3, [r7, #15]
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d103      	bne.n	8011b3a <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	2201      	movs	r2, #1
 8011b36:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 8011b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b3c:	4618      	mov	r0, r3
 8011b3e:	3710      	adds	r7, #16
 8011b40:	46bd      	mov	sp, r7
 8011b42:	bd80      	pop	{r7, pc}
 8011b44:	44007800 	.word	0x44007800

08011b48 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8011b48:	b590      	push	{r4, r7, lr}
 8011b4a:	b087      	sub	sp, #28
 8011b4c:	af00      	add	r7, sp, #0
 8011b4e:	60f8      	str	r0, [r7, #12]
 8011b50:	60b9      	str	r1, [r7, #8]
 8011b52:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8011b54:	68fb      	ldr	r3, [r7, #12]
 8011b56:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8011b5a:	2b01      	cmp	r3, #1
 8011b5c:	d101      	bne.n	8011b62 <HAL_RTC_SetTime+0x1a>
 8011b5e:	2302      	movs	r3, #2
 8011b60:	e07e      	b.n	8011c60 <HAL_RTC_SetTime+0x118>
 8011b62:	68fb      	ldr	r3, [r7, #12]
 8011b64:	2201      	movs	r2, #1
 8011b66:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8011b6a:	68fb      	ldr	r3, [r7, #12]
 8011b6c:	2202      	movs	r2, #2
 8011b6e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011b72:	4b3d      	ldr	r3, [pc, #244]	@ (8011c68 <HAL_RTC_SetTime+0x120>)
 8011b74:	22ca      	movs	r2, #202	@ 0xca
 8011b76:	625a      	str	r2, [r3, #36]	@ 0x24
 8011b78:	4b3b      	ldr	r3, [pc, #236]	@ (8011c68 <HAL_RTC_SetTime+0x120>)
 8011b7a:	2253      	movs	r2, #83	@ 0x53
 8011b7c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8011b7e:	68f8      	ldr	r0, [r7, #12]
 8011b80:	f000 f9dc 	bl	8011f3c <RTC_EnterInitMode>
 8011b84:	4603      	mov	r3, r0
 8011b86:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8011b88:	7cfb      	ldrb	r3, [r7, #19]
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d159      	bne.n	8011c42 <HAL_RTC_SetTime+0xfa>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8011b8e:	4b36      	ldr	r3, [pc, #216]	@ (8011c68 <HAL_RTC_SetTime+0x120>)
 8011b90:	68db      	ldr	r3, [r3, #12]
 8011b92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8011b96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011b9a:	d04d      	beq.n	8011c38 <HAL_RTC_SetTime+0xf0>
    {
      if (Format == RTC_FORMAT_BIN)
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	d125      	bne.n	8011bee <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8011ba2:	4b31      	ldr	r3, [pc, #196]	@ (8011c68 <HAL_RTC_SetTime+0x120>)
 8011ba4:	699b      	ldr	r3, [r3, #24]
 8011ba6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d102      	bne.n	8011bb4 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8011bae:	68bb      	ldr	r3, [r7, #8]
 8011bb0:	2200      	movs	r2, #0
 8011bb2:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8011bb4:	68bb      	ldr	r3, [r7, #8]
 8011bb6:	781b      	ldrb	r3, [r3, #0]
 8011bb8:	4618      	mov	r0, r3
 8011bba:	f000 fa39 	bl	8012030 <RTC_ByteToBcd2>
 8011bbe:	4603      	mov	r3, r0
 8011bc0:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8011bc2:	68bb      	ldr	r3, [r7, #8]
 8011bc4:	785b      	ldrb	r3, [r3, #1]
 8011bc6:	4618      	mov	r0, r3
 8011bc8:	f000 fa32 	bl	8012030 <RTC_ByteToBcd2>
 8011bcc:	4603      	mov	r3, r0
 8011bce:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8011bd0:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8011bd2:	68bb      	ldr	r3, [r7, #8]
 8011bd4:	789b      	ldrb	r3, [r3, #2]
 8011bd6:	4618      	mov	r0, r3
 8011bd8:	f000 fa2a 	bl	8012030 <RTC_ByteToBcd2>
 8011bdc:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8011bde:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8011be2:	68bb      	ldr	r3, [r7, #8]
 8011be4:	78db      	ldrb	r3, [r3, #3]
 8011be6:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8011be8:	4313      	orrs	r3, r2
 8011bea:	617b      	str	r3, [r7, #20]
 8011bec:	e017      	b.n	8011c1e <HAL_RTC_SetTime+0xd6>
      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8011bee:	4b1e      	ldr	r3, [pc, #120]	@ (8011c68 <HAL_RTC_SetTime+0x120>)
 8011bf0:	699b      	ldr	r3, [r3, #24]
 8011bf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	d102      	bne.n	8011c00 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8011bfa:	68bb      	ldr	r3, [r7, #8]
 8011bfc:	2200      	movs	r2, #0
 8011bfe:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8011c00:	68bb      	ldr	r3, [r7, #8]
 8011c02:	781b      	ldrb	r3, [r3, #0]
 8011c04:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8011c06:	68bb      	ldr	r3, [r7, #8]
 8011c08:	785b      	ldrb	r3, [r3, #1]
 8011c0a:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8011c0c:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8011c0e:	68ba      	ldr	r2, [r7, #8]
 8011c10:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8011c12:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8011c14:	68bb      	ldr	r3, [r7, #8]
 8011c16:	78db      	ldrb	r3, [r3, #3]
 8011c18:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8011c1a:	4313      	orrs	r3, r2
 8011c1c:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8011c1e:	4a12      	ldr	r2, [pc, #72]	@ (8011c68 <HAL_RTC_SetTime+0x120>)
 8011c20:	697b      	ldr	r3, [r7, #20]
 8011c22:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8011c26:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8011c2a:	6013      	str	r3, [r2, #0]

      /* Clear the bits to be configured */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8011c2c:	4b0e      	ldr	r3, [pc, #56]	@ (8011c68 <HAL_RTC_SetTime+0x120>)
 8011c2e:	699b      	ldr	r3, [r3, #24]
 8011c30:	4a0d      	ldr	r2, [pc, #52]	@ (8011c68 <HAL_RTC_SetTime+0x120>)
 8011c32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8011c36:	6193      	str	r3, [r2, #24]
    }

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8011c38:	68f8      	ldr	r0, [r7, #12]
 8011c3a:	f000 f9bb 	bl	8011fb4 <RTC_ExitInitMode>
 8011c3e:	4603      	mov	r3, r0
 8011c40:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011c42:	4b09      	ldr	r3, [pc, #36]	@ (8011c68 <HAL_RTC_SetTime+0x120>)
 8011c44:	22ff      	movs	r2, #255	@ 0xff
 8011c46:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8011c48:	7cfb      	ldrb	r3, [r7, #19]
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	d103      	bne.n	8011c56 <HAL_RTC_SetTime+0x10e>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8011c4e:	68fb      	ldr	r3, [r7, #12]
 8011c50:	2201      	movs	r2, #1
 8011c52:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8011c56:	68fb      	ldr	r3, [r7, #12]
 8011c58:	2200      	movs	r2, #0
 8011c5a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 8011c5e:	7cfb      	ldrb	r3, [r7, #19]
}
 8011c60:	4618      	mov	r0, r3
 8011c62:	371c      	adds	r7, #28
 8011c64:	46bd      	mov	sp, r7
 8011c66:	bd90      	pop	{r4, r7, pc}
 8011c68:	44007800 	.word	0x44007800

08011c6c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(const RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8011c6c:	b580      	push	{r7, lr}
 8011c6e:	b086      	sub	sp, #24
 8011c70:	af00      	add	r7, sp, #0
 8011c72:	60f8      	str	r0, [r7, #12]
 8011c74:	60b9      	str	r1, [r7, #8]
 8011c76:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = READ_REG(RTC->SSR);
 8011c78:	4b2c      	ldr	r3, [pc, #176]	@ (8011d2c <HAL_RTC_GetTime+0xc0>)
 8011c7a:	689a      	ldr	r2, [r3, #8]
 8011c7c:	68bb      	ldr	r3, [r7, #8]
 8011c7e:	605a      	str	r2, [r3, #4]

  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8011c80:	4b2a      	ldr	r3, [pc, #168]	@ (8011d2c <HAL_RTC_GetTime+0xc0>)
 8011c82:	68db      	ldr	r3, [r3, #12]
 8011c84:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8011c88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011c8c:	d049      	beq.n	8011d22 <HAL_RTC_GetTime+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field */
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 8011c8e:	4b27      	ldr	r3, [pc, #156]	@ (8011d2c <HAL_RTC_GetTime+0xc0>)
 8011c90:	691b      	ldr	r3, [r3, #16]
 8011c92:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8011c96:	68bb      	ldr	r3, [r7, #8]
 8011c98:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 8011c9a:	4b24      	ldr	r3, [pc, #144]	@ (8011d2c <HAL_RTC_GetTime+0xc0>)
 8011c9c:	681b      	ldr	r3, [r3, #0]
 8011c9e:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8011ca2:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8011ca6:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8011ca8:	697b      	ldr	r3, [r7, #20]
 8011caa:	0c1b      	lsrs	r3, r3, #16
 8011cac:	b2db      	uxtb	r3, r3
 8011cae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011cb2:	b2da      	uxtb	r2, r3
 8011cb4:	68bb      	ldr	r3, [r7, #8]
 8011cb6:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8011cb8:	697b      	ldr	r3, [r7, #20]
 8011cba:	0a1b      	lsrs	r3, r3, #8
 8011cbc:	b2db      	uxtb	r3, r3
 8011cbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011cc2:	b2da      	uxtb	r2, r3
 8011cc4:	68bb      	ldr	r3, [r7, #8]
 8011cc6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8011cc8:	697b      	ldr	r3, [r7, #20]
 8011cca:	b2db      	uxtb	r3, r3
 8011ccc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011cd0:	b2da      	uxtb	r2, r3
 8011cd2:	68bb      	ldr	r3, [r7, #8]
 8011cd4:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8011cd6:	697b      	ldr	r3, [r7, #20]
 8011cd8:	0d9b      	lsrs	r3, r3, #22
 8011cda:	b2db      	uxtb	r3, r3
 8011cdc:	f003 0301 	and.w	r3, r3, #1
 8011ce0:	b2da      	uxtb	r2, r3
 8011ce2:	68bb      	ldr	r3, [r7, #8]
 8011ce4:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d11a      	bne.n	8011d22 <HAL_RTC_GetTime+0xb6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8011cec:	68bb      	ldr	r3, [r7, #8]
 8011cee:	781b      	ldrb	r3, [r3, #0]
 8011cf0:	4618      	mov	r0, r3
 8011cf2:	f000 f9bd 	bl	8012070 <RTC_Bcd2ToByte>
 8011cf6:	4603      	mov	r3, r0
 8011cf8:	461a      	mov	r2, r3
 8011cfa:	68bb      	ldr	r3, [r7, #8]
 8011cfc:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8011cfe:	68bb      	ldr	r3, [r7, #8]
 8011d00:	785b      	ldrb	r3, [r3, #1]
 8011d02:	4618      	mov	r0, r3
 8011d04:	f000 f9b4 	bl	8012070 <RTC_Bcd2ToByte>
 8011d08:	4603      	mov	r3, r0
 8011d0a:	461a      	mov	r2, r3
 8011d0c:	68bb      	ldr	r3, [r7, #8]
 8011d0e:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8011d10:	68bb      	ldr	r3, [r7, #8]
 8011d12:	789b      	ldrb	r3, [r3, #2]
 8011d14:	4618      	mov	r0, r3
 8011d16:	f000 f9ab 	bl	8012070 <RTC_Bcd2ToByte>
 8011d1a:	4603      	mov	r3, r0
 8011d1c:	461a      	mov	r2, r3
 8011d1e:	68bb      	ldr	r3, [r7, #8]
 8011d20:	709a      	strb	r2, [r3, #2]
    }
  }

  return HAL_OK;
 8011d22:	2300      	movs	r3, #0
}
 8011d24:	4618      	mov	r0, r3
 8011d26:	3718      	adds	r7, #24
 8011d28:	46bd      	mov	sp, r7
 8011d2a:	bd80      	pop	{r7, pc}
 8011d2c:	44007800 	.word	0x44007800

08011d30 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8011d30:	b590      	push	{r4, r7, lr}
 8011d32:	b087      	sub	sp, #28
 8011d34:	af00      	add	r7, sp, #0
 8011d36:	60f8      	str	r0, [r7, #12]
 8011d38:	60b9      	str	r1, [r7, #8]
 8011d3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8011d3c:	68fb      	ldr	r3, [r7, #12]
 8011d3e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8011d42:	2b01      	cmp	r3, #1
 8011d44:	d101      	bne.n	8011d4a <HAL_RTC_SetDate+0x1a>
 8011d46:	2302      	movs	r3, #2
 8011d48:	e071      	b.n	8011e2e <HAL_RTC_SetDate+0xfe>
 8011d4a:	68fb      	ldr	r3, [r7, #12]
 8011d4c:	2201      	movs	r2, #1
 8011d4e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8011d52:	68fb      	ldr	r3, [r7, #12]
 8011d54:	2202      	movs	r2, #2
 8011d56:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d10e      	bne.n	8011d7e <HAL_RTC_SetDate+0x4e>
 8011d60:	68bb      	ldr	r3, [r7, #8]
 8011d62:	785b      	ldrb	r3, [r3, #1]
 8011d64:	f003 0310 	and.w	r3, r3, #16
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	d008      	beq.n	8011d7e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8011d6c:	68bb      	ldr	r3, [r7, #8]
 8011d6e:	785b      	ldrb	r3, [r3, #1]
 8011d70:	f023 0310 	bic.w	r3, r3, #16
 8011d74:	b2db      	uxtb	r3, r3
 8011d76:	330a      	adds	r3, #10
 8011d78:	b2da      	uxtb	r2, r3
 8011d7a:	68bb      	ldr	r3, [r7, #8]
 8011d7c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	d11c      	bne.n	8011dbe <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8011d84:	68bb      	ldr	r3, [r7, #8]
 8011d86:	78db      	ldrb	r3, [r3, #3]
 8011d88:	4618      	mov	r0, r3
 8011d8a:	f000 f951 	bl	8012030 <RTC_ByteToBcd2>
 8011d8e:	4603      	mov	r3, r0
 8011d90:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8011d92:	68bb      	ldr	r3, [r7, #8]
 8011d94:	785b      	ldrb	r3, [r3, #1]
 8011d96:	4618      	mov	r0, r3
 8011d98:	f000 f94a 	bl	8012030 <RTC_ByteToBcd2>
 8011d9c:	4603      	mov	r3, r0
 8011d9e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8011da0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8011da2:	68bb      	ldr	r3, [r7, #8]
 8011da4:	789b      	ldrb	r3, [r3, #2]
 8011da6:	4618      	mov	r0, r3
 8011da8:	f000 f942 	bl	8012030 <RTC_ByteToBcd2>
 8011dac:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8011dae:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8011db2:	68bb      	ldr	r3, [r7, #8]
 8011db4:	781b      	ldrb	r3, [r3, #0]
 8011db6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8011db8:	4313      	orrs	r3, r2
 8011dba:	617b      	str	r3, [r7, #20]
 8011dbc:	e00e      	b.n	8011ddc <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8011dbe:	68bb      	ldr	r3, [r7, #8]
 8011dc0:	78db      	ldrb	r3, [r3, #3]
 8011dc2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8011dc4:	68bb      	ldr	r3, [r7, #8]
 8011dc6:	785b      	ldrb	r3, [r3, #1]
 8011dc8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8011dca:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8011dcc:	68ba      	ldr	r2, [r7, #8]
 8011dce:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8011dd0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8011dd2:	68bb      	ldr	r3, [r7, #8]
 8011dd4:	781b      	ldrb	r3, [r3, #0]
 8011dd6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8011dd8:	4313      	orrs	r3, r2
 8011dda:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011ddc:	4b16      	ldr	r3, [pc, #88]	@ (8011e38 <HAL_RTC_SetDate+0x108>)
 8011dde:	22ca      	movs	r2, #202	@ 0xca
 8011de0:	625a      	str	r2, [r3, #36]	@ 0x24
 8011de2:	4b15      	ldr	r3, [pc, #84]	@ (8011e38 <HAL_RTC_SetDate+0x108>)
 8011de4:	2253      	movs	r2, #83	@ 0x53
 8011de6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8011de8:	68f8      	ldr	r0, [r7, #12]
 8011dea:	f000 f8a7 	bl	8011f3c <RTC_EnterInitMode>
 8011dee:	4603      	mov	r3, r0
 8011df0:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8011df2:	7cfb      	ldrb	r3, [r7, #19]
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	d10b      	bne.n	8011e10 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8011df8:	4a0f      	ldr	r2, [pc, #60]	@ (8011e38 <HAL_RTC_SetDate+0x108>)
 8011dfa:	697b      	ldr	r3, [r7, #20]
 8011dfc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8011e00:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8011e04:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8011e06:	68f8      	ldr	r0, [r7, #12]
 8011e08:	f000 f8d4 	bl	8011fb4 <RTC_ExitInitMode>
 8011e0c:	4603      	mov	r3, r0
 8011e0e:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011e10:	4b09      	ldr	r3, [pc, #36]	@ (8011e38 <HAL_RTC_SetDate+0x108>)
 8011e12:	22ff      	movs	r2, #255	@ 0xff
 8011e14:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8011e16:	7cfb      	ldrb	r3, [r7, #19]
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d103      	bne.n	8011e24 <HAL_RTC_SetDate+0xf4>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8011e1c:	68fb      	ldr	r3, [r7, #12]
 8011e1e:	2201      	movs	r2, #1
 8011e20:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8011e24:	68fb      	ldr	r3, [r7, #12]
 8011e26:	2200      	movs	r2, #0
 8011e28:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 8011e2c:	7cfb      	ldrb	r3, [r7, #19]
}
 8011e2e:	4618      	mov	r0, r3
 8011e30:	371c      	adds	r7, #28
 8011e32:	46bd      	mov	sp, r7
 8011e34:	bd90      	pop	{r4, r7, pc}
 8011e36:	bf00      	nop
 8011e38:	44007800 	.word	0x44007800

08011e3c <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(const RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8011e3c:	b580      	push	{r7, lr}
 8011e3e:	b086      	sub	sp, #24
 8011e40:	af00      	add	r7, sp, #0
 8011e42:	60f8      	str	r0, [r7, #12]
 8011e44:	60b9      	str	r1, [r7, #8]
 8011e46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 8011e48:	4b22      	ldr	r3, [pc, #136]	@ (8011ed4 <HAL_RTC_GetDate+0x98>)
 8011e4a:	685b      	ldr	r3, [r3, #4]
 8011e4c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8011e50:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8011e54:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8011e56:	697b      	ldr	r3, [r7, #20]
 8011e58:	0c1b      	lsrs	r3, r3, #16
 8011e5a:	b2da      	uxtb	r2, r3
 8011e5c:	68bb      	ldr	r3, [r7, #8]
 8011e5e:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8011e60:	697b      	ldr	r3, [r7, #20]
 8011e62:	0a1b      	lsrs	r3, r3, #8
 8011e64:	b2db      	uxtb	r3, r3
 8011e66:	f003 031f 	and.w	r3, r3, #31
 8011e6a:	b2da      	uxtb	r2, r3
 8011e6c:	68bb      	ldr	r3, [r7, #8]
 8011e6e:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8011e70:	697b      	ldr	r3, [r7, #20]
 8011e72:	b2db      	uxtb	r3, r3
 8011e74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011e78:	b2da      	uxtb	r2, r3
 8011e7a:	68bb      	ldr	r3, [r7, #8]
 8011e7c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8011e7e:	697b      	ldr	r3, [r7, #20]
 8011e80:	0b5b      	lsrs	r3, r3, #13
 8011e82:	b2db      	uxtb	r3, r3
 8011e84:	f003 0307 	and.w	r3, r3, #7
 8011e88:	b2da      	uxtb	r2, r3
 8011e8a:	68bb      	ldr	r3, [r7, #8]
 8011e8c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	d11a      	bne.n	8011eca <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8011e94:	68bb      	ldr	r3, [r7, #8]
 8011e96:	78db      	ldrb	r3, [r3, #3]
 8011e98:	4618      	mov	r0, r3
 8011e9a:	f000 f8e9 	bl	8012070 <RTC_Bcd2ToByte>
 8011e9e:	4603      	mov	r3, r0
 8011ea0:	461a      	mov	r2, r3
 8011ea2:	68bb      	ldr	r3, [r7, #8]
 8011ea4:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8011ea6:	68bb      	ldr	r3, [r7, #8]
 8011ea8:	785b      	ldrb	r3, [r3, #1]
 8011eaa:	4618      	mov	r0, r3
 8011eac:	f000 f8e0 	bl	8012070 <RTC_Bcd2ToByte>
 8011eb0:	4603      	mov	r3, r0
 8011eb2:	461a      	mov	r2, r3
 8011eb4:	68bb      	ldr	r3, [r7, #8]
 8011eb6:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8011eb8:	68bb      	ldr	r3, [r7, #8]
 8011eba:	789b      	ldrb	r3, [r3, #2]
 8011ebc:	4618      	mov	r0, r3
 8011ebe:	f000 f8d7 	bl	8012070 <RTC_Bcd2ToByte>
 8011ec2:	4603      	mov	r3, r0
 8011ec4:	461a      	mov	r2, r3
 8011ec6:	68bb      	ldr	r3, [r7, #8]
 8011ec8:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8011eca:	2300      	movs	r3, #0
}
 8011ecc:	4618      	mov	r0, r3
 8011ece:	3718      	adds	r7, #24
 8011ed0:	46bd      	mov	sp, r7
 8011ed2:	bd80      	pop	{r7, pc}
 8011ed4:	44007800 	.word	0x44007800

08011ed8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8011ed8:	b580      	push	{r7, lr}
 8011eda:	b084      	sub	sp, #16
 8011edc:	af00      	add	r7, sp, #0
 8011ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8011ee0:	4b15      	ldr	r3, [pc, #84]	@ (8011f38 <HAL_RTC_WaitForSynchro+0x60>)
 8011ee2:	68db      	ldr	r3, [r3, #12]
 8011ee4:	4a14      	ldr	r2, [pc, #80]	@ (8011f38 <HAL_RTC_WaitForSynchro+0x60>)
 8011ee6:	f023 0320 	bic.w	r3, r3, #32
 8011eea:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8011eec:	f7f3 fd70 	bl	80059d0 <HAL_GetTick>
 8011ef0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8011ef2:	e013      	b.n	8011f1c <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8011ef4:	f7f3 fd6c 	bl	80059d0 <HAL_GetTick>
 8011ef8:	4602      	mov	r2, r0
 8011efa:	68fb      	ldr	r3, [r7, #12]
 8011efc:	1ad3      	subs	r3, r2, r3
 8011efe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8011f02:	d90b      	bls.n	8011f1c <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8011f04:	4b0c      	ldr	r3, [pc, #48]	@ (8011f38 <HAL_RTC_WaitForSynchro+0x60>)
 8011f06:	68db      	ldr	r3, [r3, #12]
 8011f08:	f003 0320 	and.w	r3, r3, #32
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d10c      	bne.n	8011f2a <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	2203      	movs	r2, #3
 8011f14:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 8011f18:	2303      	movs	r3, #3
 8011f1a:	e008      	b.n	8011f2e <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8011f1c:	4b06      	ldr	r3, [pc, #24]	@ (8011f38 <HAL_RTC_WaitForSynchro+0x60>)
 8011f1e:	68db      	ldr	r3, [r3, #12]
 8011f20:	f003 0320 	and.w	r3, r3, #32
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d0e5      	beq.n	8011ef4 <HAL_RTC_WaitForSynchro+0x1c>
 8011f28:	e000      	b.n	8011f2c <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 8011f2a:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 8011f2c:	2300      	movs	r3, #0
}
 8011f2e:	4618      	mov	r0, r3
 8011f30:	3710      	adds	r7, #16
 8011f32:	46bd      	mov	sp, r7
 8011f34:	bd80      	pop	{r7, pc}
 8011f36:	bf00      	nop
 8011f38:	44007800 	.word	0x44007800

08011f3c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8011f3c:	b580      	push	{r7, lr}
 8011f3e:	b084      	sub	sp, #16
 8011f40:	af00      	add	r7, sp, #0
 8011f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8011f44:	2300      	movs	r3, #0
 8011f46:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8011f48:	4b19      	ldr	r3, [pc, #100]	@ (8011fb0 <RTC_EnterInitMode+0x74>)
 8011f4a:	68db      	ldr	r3, [r3, #12]
 8011f4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	d128      	bne.n	8011fa6 <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8011f54:	4b16      	ldr	r3, [pc, #88]	@ (8011fb0 <RTC_EnterInitMode+0x74>)
 8011f56:	68db      	ldr	r3, [r3, #12]
 8011f58:	4a15      	ldr	r2, [pc, #84]	@ (8011fb0 <RTC_EnterInitMode+0x74>)
 8011f5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011f5e:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8011f60:	f7f3 fd36 	bl	80059d0 <HAL_GetTick>
 8011f64:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8011f66:	e013      	b.n	8011f90 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8011f68:	f7f3 fd32 	bl	80059d0 <HAL_GetTick>
 8011f6c:	4602      	mov	r2, r0
 8011f6e:	68bb      	ldr	r3, [r7, #8]
 8011f70:	1ad3      	subs	r3, r2, r3
 8011f72:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8011f76:	d90b      	bls.n	8011f90 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8011f78:	4b0d      	ldr	r3, [pc, #52]	@ (8011fb0 <RTC_EnterInitMode+0x74>)
 8011f7a:	68db      	ldr	r3, [r3, #12]
 8011f7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	d10f      	bne.n	8011fa4 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 8011f84:	2303      	movs	r3, #3
 8011f86:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	2203      	movs	r2, #3
 8011f8c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8011f90:	4b07      	ldr	r3, [pc, #28]	@ (8011fb0 <RTC_EnterInitMode+0x74>)
 8011f92:	68db      	ldr	r3, [r3, #12]
 8011f94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	d104      	bne.n	8011fa6 <RTC_EnterInitMode+0x6a>
 8011f9c:	7bfb      	ldrb	r3, [r7, #15]
 8011f9e:	2b03      	cmp	r3, #3
 8011fa0:	d1e2      	bne.n	8011f68 <RTC_EnterInitMode+0x2c>
 8011fa2:	e000      	b.n	8011fa6 <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 8011fa4:	bf00      	nop
        }
      }
    }
  }

  return status;
 8011fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8011fa8:	4618      	mov	r0, r3
 8011faa:	3710      	adds	r7, #16
 8011fac:	46bd      	mov	sp, r7
 8011fae:	bd80      	pop	{r7, pc}
 8011fb0:	44007800 	.word	0x44007800

08011fb4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8011fb4:	b580      	push	{r7, lr}
 8011fb6:	b084      	sub	sp, #16
 8011fb8:	af00      	add	r7, sp, #0
 8011fba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011fbc:	2300      	movs	r3, #0
 8011fbe:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8011fc0:	4b1a      	ldr	r3, [pc, #104]	@ (801202c <RTC_ExitInitMode+0x78>)
 8011fc2:	68db      	ldr	r3, [r3, #12]
 8011fc4:	4a19      	ldr	r2, [pc, #100]	@ (801202c <RTC_ExitInitMode+0x78>)
 8011fc6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011fca:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8011fcc:	4b17      	ldr	r3, [pc, #92]	@ (801202c <RTC_ExitInitMode+0x78>)
 8011fce:	699b      	ldr	r3, [r3, #24]
 8011fd0:	f003 0320 	and.w	r3, r3, #32
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d10c      	bne.n	8011ff2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011fd8:	6878      	ldr	r0, [r7, #4]
 8011fda:	f7ff ff7d 	bl	8011ed8 <HAL_RTC_WaitForSynchro>
 8011fde:	4603      	mov	r3, r0
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d01e      	beq.n	8012022 <RTC_ExitInitMode+0x6e>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	2203      	movs	r2, #3
 8011fe8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8011fec:	2303      	movs	r3, #3
 8011fee:	73fb      	strb	r3, [r7, #15]
 8011ff0:	e017      	b.n	8012022 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8011ff2:	4b0e      	ldr	r3, [pc, #56]	@ (801202c <RTC_ExitInitMode+0x78>)
 8011ff4:	699b      	ldr	r3, [r3, #24]
 8011ff6:	4a0d      	ldr	r2, [pc, #52]	@ (801202c <RTC_ExitInitMode+0x78>)
 8011ff8:	f023 0320 	bic.w	r3, r3, #32
 8011ffc:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011ffe:	6878      	ldr	r0, [r7, #4]
 8012000:	f7ff ff6a 	bl	8011ed8 <HAL_RTC_WaitForSynchro>
 8012004:	4603      	mov	r3, r0
 8012006:	2b00      	cmp	r3, #0
 8012008:	d005      	beq.n	8012016 <RTC_ExitInitMode+0x62>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	2203      	movs	r2, #3
 801200e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8012012:	2303      	movs	r3, #3
 8012014:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8012016:	4b05      	ldr	r3, [pc, #20]	@ (801202c <RTC_ExitInitMode+0x78>)
 8012018:	699b      	ldr	r3, [r3, #24]
 801201a:	4a04      	ldr	r2, [pc, #16]	@ (801202c <RTC_ExitInitMode+0x78>)
 801201c:	f043 0320 	orr.w	r3, r3, #32
 8012020:	6193      	str	r3, [r2, #24]
  }
  return status;
 8012022:	7bfb      	ldrb	r3, [r7, #15]
}
 8012024:	4618      	mov	r0, r3
 8012026:	3710      	adds	r7, #16
 8012028:	46bd      	mov	sp, r7
 801202a:	bd80      	pop	{r7, pc}
 801202c:	44007800 	.word	0x44007800

08012030 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8012030:	b480      	push	{r7}
 8012032:	b085      	sub	sp, #20
 8012034:	af00      	add	r7, sp, #0
 8012036:	4603      	mov	r3, r0
 8012038:	71fb      	strb	r3, [r7, #7]
  uint32_t bcd_high = 0U;
 801203a:	2300      	movs	r3, #0
 801203c:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_value = Value;
 801203e:	79fb      	ldrb	r3, [r7, #7]
 8012040:	72fb      	strb	r3, [r7, #11]

  while (tmp_value >= 10U)
 8012042:	e005      	b.n	8012050 <RTC_ByteToBcd2+0x20>
  {
    bcd_high++;
 8012044:	68fb      	ldr	r3, [r7, #12]
 8012046:	3301      	adds	r3, #1
 8012048:	60fb      	str	r3, [r7, #12]
    tmp_value -= 10U;
 801204a:	7afb      	ldrb	r3, [r7, #11]
 801204c:	3b0a      	subs	r3, #10
 801204e:	72fb      	strb	r3, [r7, #11]
  while (tmp_value >= 10U)
 8012050:	7afb      	ldrb	r3, [r7, #11]
 8012052:	2b09      	cmp	r3, #9
 8012054:	d8f6      	bhi.n	8012044 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcd_high << 4U) | tmp_value);
 8012056:	68fb      	ldr	r3, [r7, #12]
 8012058:	b2db      	uxtb	r3, r3
 801205a:	011b      	lsls	r3, r3, #4
 801205c:	b2da      	uxtb	r2, r3
 801205e:	7afb      	ldrb	r3, [r7, #11]
 8012060:	4313      	orrs	r3, r2
 8012062:	b2db      	uxtb	r3, r3
}
 8012064:	4618      	mov	r0, r3
 8012066:	3714      	adds	r7, #20
 8012068:	46bd      	mov	sp, r7
 801206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801206e:	4770      	bx	lr

08012070 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8012070:	b480      	push	{r7}
 8012072:	b085      	sub	sp, #20
 8012074:	af00      	add	r7, sp, #0
 8012076:	4603      	mov	r3, r0
 8012078:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;

  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 801207a:	79fb      	ldrb	r3, [r7, #7]
 801207c:	091b      	lsrs	r3, r3, #4
 801207e:	b2db      	uxtb	r3, r3
 8012080:	461a      	mov	r2, r3
 8012082:	4613      	mov	r3, r2
 8012084:	009b      	lsls	r3, r3, #2
 8012086:	4413      	add	r3, r2
 8012088:	005b      	lsls	r3, r3, #1
 801208a:	60fb      	str	r3, [r7, #12]

  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 801208c:	68fb      	ldr	r3, [r7, #12]
 801208e:	b2da      	uxtb	r2, r3
 8012090:	79fb      	ldrb	r3, [r7, #7]
 8012092:	f003 030f 	and.w	r3, r3, #15
 8012096:	b2db      	uxtb	r3, r3
 8012098:	4413      	add	r3, r2
 801209a:	b2db      	uxtb	r3, r3
}
 801209c:	4618      	mov	r0, r3
 801209e:	3714      	adds	r7, #20
 80120a0:	46bd      	mov	sp, r7
 80120a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120a6:	4770      	bx	lr

080120a8 <HAL_RTCEx_SetWakeUpTimer_IT>:
  *                         after Wake Up.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock,
                                              uint32_t WakeUpAutoClr)
{
 80120a8:	b580      	push	{r7, lr}
 80120aa:	b086      	sub	sp, #24
 80120ac:	af00      	add	r7, sp, #0
 80120ae:	60f8      	str	r0, [r7, #12]
 80120b0:	60b9      	str	r1, [r7, #8]
 80120b2:	607a      	str	r2, [r7, #4]
 80120b4:	603b      	str	r3, [r7, #0]
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80120b6:	68fb      	ldr	r3, [r7, #12]
 80120b8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80120bc:	2b01      	cmp	r3, #1
 80120be:	d101      	bne.n	80120c4 <HAL_RTCEx_SetWakeUpTimer_IT+0x1c>
 80120c0:	2302      	movs	r3, #2
 80120c2:	e057      	b.n	8012174 <HAL_RTCEx_SetWakeUpTimer_IT+0xcc>
 80120c4:	68fb      	ldr	r3, [r7, #12]
 80120c6:	2201      	movs	r2, #1
 80120c8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80120cc:	68fb      	ldr	r3, [r7, #12]
 80120ce:	2202      	movs	r2, #2
 80120d0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(RTC->CR, RTC_CR_WUTE);
 80120d4:	4b29      	ldr	r3, [pc, #164]	@ (801217c <HAL_RTCEx_SetWakeUpTimer_IT+0xd4>)
 80120d6:	699b      	ldr	r3, [r3, #24]
 80120d8:	4a28      	ldr	r2, [pc, #160]	@ (801217c <HAL_RTCEx_SetWakeUpTimer_IT+0xd4>)
 80120da:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80120de:	6193      	str	r3, [r2, #24]

  /* Clear flag Wake-Up */
  WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 80120e0:	4b26      	ldr	r3, [pc, #152]	@ (801217c <HAL_RTCEx_SetWakeUpTimer_IT+0xd4>)
 80120e2:	2204      	movs	r2, #4
 80120e4:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80120e6:	4b25      	ldr	r3, [pc, #148]	@ (801217c <HAL_RTCEx_SetWakeUpTimer_IT+0xd4>)
 80120e8:	68db      	ldr	r3, [r3, #12]
 80120ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d123      	bne.n	801213a <HAL_RTCEx_SetWakeUpTimer_IT+0x92>
  {
    tickstart = HAL_GetTick();
 80120f2:	f7f3 fc6d 	bl	80059d0 <HAL_GetTick>
 80120f6:	6178      	str	r0, [r7, #20]
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 80120f8:	e017      	b.n	801212a <HAL_RTCEx_SetWakeUpTimer_IT+0x82>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80120fa:	f7f3 fc69 	bl	80059d0 <HAL_GetTick>
 80120fe:	4602      	mov	r2, r0
 8012100:	697b      	ldr	r3, [r7, #20]
 8012102:	1ad3      	subs	r3, r2, r3
 8012104:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8012108:	d90f      	bls.n	801212a <HAL_RTCEx_SetWakeUpTimer_IT+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 801210a:	4b1c      	ldr	r3, [pc, #112]	@ (801217c <HAL_RTCEx_SetWakeUpTimer_IT+0xd4>)
 801210c:	68db      	ldr	r3, [r3, #12]
 801210e:	f003 0304 	and.w	r3, r3, #4
 8012112:	2b00      	cmp	r3, #0
 8012114:	d110      	bne.n	8012138 <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
        {
          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8012116:	68fb      	ldr	r3, [r7, #12]
 8012118:	2203      	movs	r2, #3
 801211a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 801211e:	68fb      	ldr	r3, [r7, #12]
 8012120:	2200      	movs	r2, #0
 8012122:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

          return HAL_TIMEOUT;
 8012126:	2303      	movs	r3, #3
 8012128:	e024      	b.n	8012174 <HAL_RTCEx_SetWakeUpTimer_IT+0xcc>
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 801212a:	4b14      	ldr	r3, [pc, #80]	@ (801217c <HAL_RTCEx_SetWakeUpTimer_IT+0xd4>)
 801212c:	68db      	ldr	r3, [r3, #12]
 801212e:	f003 0304 	and.w	r3, r3, #4
 8012132:	2b00      	cmp	r3, #0
 8012134:	d0e1      	beq.n	80120fa <HAL_RTCEx_SetWakeUpTimer_IT+0x52>
 8012136:	e000      	b.n	801213a <HAL_RTCEx_SetWakeUpTimer_IT+0x92>
        }
        else
        {
          break;
 8012138:	bf00      	nop
      }
    }
  }

  /* Configure the Wakeup Timer counter and auto clear value */
  WRITE_REG(RTC->WUTR, (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos)));
 801213a:	683b      	ldr	r3, [r7, #0]
 801213c:	041a      	lsls	r2, r3, #16
 801213e:	490f      	ldr	r1, [pc, #60]	@ (801217c <HAL_RTCEx_SetWakeUpTimer_IT+0xd4>)
 8012140:	68bb      	ldr	r3, [r7, #8]
 8012142:	4313      	orrs	r3, r2
 8012144:	614b      	str	r3, [r1, #20]

  /* Configure the clock source */
  MODIFY_REG(RTC->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8012146:	4b0d      	ldr	r3, [pc, #52]	@ (801217c <HAL_RTCEx_SetWakeUpTimer_IT+0xd4>)
 8012148:	699b      	ldr	r3, [r3, #24]
 801214a:	f023 0207 	bic.w	r2, r3, #7
 801214e:	490b      	ldr	r1, [pc, #44]	@ (801217c <HAL_RTCEx_SetWakeUpTimer_IT+0xd4>)
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	4313      	orrs	r3, r2
 8012154:	618b      	str	r3, [r1, #24]

  /* Configure the Interrupt in the RTC_CR register and Enable the Wakeup Timer*/
  SET_BIT(RTC->CR, (RTC_CR_WUTIE | RTC_CR_WUTE));
 8012156:	4b09      	ldr	r3, [pc, #36]	@ (801217c <HAL_RTCEx_SetWakeUpTimer_IT+0xd4>)
 8012158:	699b      	ldr	r3, [r3, #24]
 801215a:	4a08      	ldr	r2, [pc, #32]	@ (801217c <HAL_RTCEx_SetWakeUpTimer_IT+0xd4>)
 801215c:	f443 4388 	orr.w	r3, r3, #17408	@ 0x4400
 8012160:	6193      	str	r3, [r2, #24]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8012162:	68fb      	ldr	r3, [r7, #12]
 8012164:	2201      	movs	r2, #1
 8012166:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801216a:	68fb      	ldr	r3, [r7, #12]
 801216c:	2200      	movs	r2, #0
 801216e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8012172:	2300      	movs	r3, #0
}
 8012174:	4618      	mov	r0, r3
 8012176:	3718      	adds	r7, #24
 8012178:	46bd      	mov	sp, r7
 801217a:	bd80      	pop	{r7, pc}
 801217c:	44007800 	.word	0x44007800

08012180 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8012180:	b480      	push	{r7}
 8012182:	b083      	sub	sp, #12
 8012184:	af00      	add	r7, sp, #0
 8012186:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801218e:	2b01      	cmp	r3, #1
 8012190:	d101      	bne.n	8012196 <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 8012192:	2302      	movs	r3, #2
 8012194:	e016      	b.n	80121c4 <HAL_RTCEx_DeactivateWakeUpTimer+0x44>
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	2201      	movs	r2, #1
 801219a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	2202      	movs	r2, #2
 80121a2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the Wakeup Timer */
  /* In case of interrupt mode is used, the interrupt source must disabled */
  CLEAR_BIT(RTC->CR, (RTC_CR_WUTE | RTC_CR_WUTIE));
 80121a6:	4b0a      	ldr	r3, [pc, #40]	@ (80121d0 <HAL_RTCEx_DeactivateWakeUpTimer+0x50>)
 80121a8:	699b      	ldr	r3, [r3, #24]
 80121aa:	4a09      	ldr	r2, [pc, #36]	@ (80121d0 <HAL_RTCEx_DeactivateWakeUpTimer+0x50>)
 80121ac:	f423 4388 	bic.w	r3, r3, #17408	@ 0x4400
 80121b0:	6193      	str	r3, [r2, #24]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	2201      	movs	r2, #1
 80121b6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	2200      	movs	r2, #0
 80121be:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80121c2:	2300      	movs	r3, #0
}
 80121c4:	4618      	mov	r0, r3
 80121c6:	370c      	adds	r7, #12
 80121c8:	46bd      	mov	sp, r7
 80121ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121ce:	4770      	bx	lr
 80121d0:	44007800 	.word	0x44007800

080121d4 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80121d4:	b580      	push	{r7, lr}
 80121d6:	b082      	sub	sp, #8
 80121d8:	af00      	add	r7, sp, #0
 80121da:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the Wake-Up Timer Interrupt */
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if (READ_BIT(RTC->SMISR, RTC_SMISR_WUTMF) != 0U)
#else
  if (READ_BIT(RTC->MISR, RTC_MISR_WUTMF) != 0U)
 80121dc:	4b09      	ldr	r3, [pc, #36]	@ (8012204 <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 80121de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80121e0:	f003 0304 	and.w	r3, r3, #4
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d005      	beq.n	80121f4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x20>
#endif /* #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */
  {
    /* Immediately clear flags */
    WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 80121e8:	4b06      	ldr	r3, [pc, #24]	@ (8012204 <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 80121ea:	2204      	movs	r2, #4
 80121ec:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call wake up timer registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80121ee:	6878      	ldr	r0, [r7, #4]
 80121f0:	f000 f80a 	bl	8012208 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	2201      	movs	r2, #1
 80121f8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 80121fc:	bf00      	nop
 80121fe:	3708      	adds	r7, #8
 8012200:	46bd      	mov	sp, r7
 8012202:	bd80      	pop	{r7, pc}
 8012204:	44007800 	.word	0x44007800

08012208 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8012208:	b480      	push	{r7}
 801220a:	b083      	sub	sp, #12
 801220c:	af00      	add	r7, sp, #0
 801220e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8012210:	bf00      	nop
 8012212:	370c      	adds	r7, #12
 8012214:	46bd      	mov	sp, r7
 8012216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801221a:	4770      	bx	lr

0801221c <HAL_RTCEx_PrivilegeModeSet>:
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(const RTC_HandleTypeDef *hrtc,
                                             const RTC_PrivilegeStateTypeDef *privilegeState)
{
 801221c:	b480      	push	{r7}
 801221e:	b083      	sub	sp, #12
 8012220:	af00      	add	r7, sp, #0
 8012222:	6078      	str	r0, [r7, #4]
 8012224:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 8012226:	683b      	ldr	r3, [r7, #0]
 8012228:	681a      	ldr	r2, [r3, #0]
 801222a:	683b      	ldr	r3, [r7, #0]
 801222c:	685b      	ldr	r3, [r3, #4]
 801222e:	4910      	ldr	r1, [pc, #64]	@ (8012270 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8012230:	4313      	orrs	r3, r2
 8012232:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
               (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 8012234:	683b      	ldr	r3, [r7, #0]
 8012236:	689a      	ldr	r2, [r3, #8]
 8012238:	683b      	ldr	r3, [r7, #0]
 801223a:	68db      	ldr	r3, [r3, #12]
 801223c:	431a      	orrs	r2, r3
 801223e:	683b      	ldr	r3, [r7, #0]
 8012240:	699b      	ldr	r3, [r3, #24]
 8012242:	490c      	ldr	r1, [pc, #48]	@ (8012274 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8012244:	4313      	orrs	r3, r2
 8012246:	624b      	str	r3, [r1, #36]	@ 0x24
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
               (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
#if defined(TAMP_SECCFGR_BKPWSEC)
  MODIFY_REG(TAMP->SECCFGR,
 8012248:	4b0a      	ldr	r3, [pc, #40]	@ (8012274 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 801224a:	6a1b      	ldr	r3, [r3, #32]
 801224c:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 8012250:	683b      	ldr	r3, [r7, #0]
 8012252:	6919      	ldr	r1, [r3, #16]
 8012254:	683b      	ldr	r3, [r7, #0]
 8012256:	695b      	ldr	r3, [r3, #20]
 8012258:	041b      	lsls	r3, r3, #16
 801225a:	430b      	orrs	r3, r1
 801225c:	4905      	ldr	r1, [pc, #20]	@ (8012274 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 801225e:	4313      	orrs	r3, r2
 8012260:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));
#endif /* TAMP_SECCFGR_BKPWSEC */

  return HAL_OK;
 8012262:	2300      	movs	r3, #0
}
 8012264:	4618      	mov	r0, r3
 8012266:	370c      	adds	r7, #12
 8012268:	46bd      	mov	sp, r7
 801226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801226e:	4770      	bx	lr
 8012270:	44007800 	.word	0x44007800
 8012274:	44007c00 	.word	0x44007c00

08012278 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8012278:	b580      	push	{r7, lr}
 801227a:	b082      	sub	sp, #8
 801227c:	af00      	add	r7, sp, #0
 801227e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	2b00      	cmp	r3, #0
 8012284:	d101      	bne.n	801228a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8012286:	2301      	movs	r3, #1
 8012288:	e049      	b.n	801231e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8012290:	b2db      	uxtb	r3, r3
 8012292:	2b00      	cmp	r3, #0
 8012294:	d106      	bne.n	80122a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	2200      	movs	r2, #0
 801229a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801229e:	6878      	ldr	r0, [r7, #4]
 80122a0:	f7f2 ff92 	bl	80051c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	2202      	movs	r2, #2
 80122a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	681a      	ldr	r2, [r3, #0]
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	3304      	adds	r3, #4
 80122b4:	4619      	mov	r1, r3
 80122b6:	4610      	mov	r0, r2
 80122b8:	f000 fa5c 	bl	8012774 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	2201      	movs	r2, #1
 80122c0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	2201      	movs	r2, #1
 80122c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	2201      	movs	r2, #1
 80122d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	2201      	movs	r2, #1
 80122d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	2201      	movs	r2, #1
 80122e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	2201      	movs	r2, #1
 80122e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	2201      	movs	r2, #1
 80122f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	2201      	movs	r2, #1
 80122f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	2201      	movs	r2, #1
 8012300:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	2201      	movs	r2, #1
 8012308:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	2201      	movs	r2, #1
 8012310:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	2201      	movs	r2, #1
 8012318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 801231c:	2300      	movs	r3, #0
}
 801231e:	4618      	mov	r0, r3
 8012320:	3708      	adds	r7, #8
 8012322:	46bd      	mov	sp, r7
 8012324:	bd80      	pop	{r7, pc}
	...

08012328 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8012328:	b480      	push	{r7}
 801232a:	b085      	sub	sp, #20
 801232c:	af00      	add	r7, sp, #0
 801232e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8012336:	b2db      	uxtb	r3, r3
 8012338:	2b01      	cmp	r3, #1
 801233a:	d001      	beq.n	8012340 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801233c:	2301      	movs	r3, #1
 801233e:	e07c      	b.n	801243a <HAL_TIM_Base_Start_IT+0x112>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	2202      	movs	r2, #2
 8012344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	681b      	ldr	r3, [r3, #0]
 801234c:	68da      	ldr	r2, [r3, #12]
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	681b      	ldr	r3, [r3, #0]
 8012352:	f042 0201 	orr.w	r2, r2, #1
 8012356:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	681b      	ldr	r3, [r3, #0]
 801235c:	4a3a      	ldr	r2, [pc, #232]	@ (8012448 <HAL_TIM_Base_Start_IT+0x120>)
 801235e:	4293      	cmp	r3, r2
 8012360:	d04a      	beq.n	80123f8 <HAL_TIM_Base_Start_IT+0xd0>
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	681b      	ldr	r3, [r3, #0]
 8012366:	4a39      	ldr	r2, [pc, #228]	@ (801244c <HAL_TIM_Base_Start_IT+0x124>)
 8012368:	4293      	cmp	r3, r2
 801236a:	d045      	beq.n	80123f8 <HAL_TIM_Base_Start_IT+0xd0>
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	681b      	ldr	r3, [r3, #0]
 8012370:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012374:	d040      	beq.n	80123f8 <HAL_TIM_Base_Start_IT+0xd0>
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	681b      	ldr	r3, [r3, #0]
 801237a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801237e:	d03b      	beq.n	80123f8 <HAL_TIM_Base_Start_IT+0xd0>
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	681b      	ldr	r3, [r3, #0]
 8012384:	4a32      	ldr	r2, [pc, #200]	@ (8012450 <HAL_TIM_Base_Start_IT+0x128>)
 8012386:	4293      	cmp	r3, r2
 8012388:	d036      	beq.n	80123f8 <HAL_TIM_Base_Start_IT+0xd0>
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	681b      	ldr	r3, [r3, #0]
 801238e:	4a31      	ldr	r2, [pc, #196]	@ (8012454 <HAL_TIM_Base_Start_IT+0x12c>)
 8012390:	4293      	cmp	r3, r2
 8012392:	d031      	beq.n	80123f8 <HAL_TIM_Base_Start_IT+0xd0>
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	681b      	ldr	r3, [r3, #0]
 8012398:	4a2f      	ldr	r2, [pc, #188]	@ (8012458 <HAL_TIM_Base_Start_IT+0x130>)
 801239a:	4293      	cmp	r3, r2
 801239c:	d02c      	beq.n	80123f8 <HAL_TIM_Base_Start_IT+0xd0>
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	681b      	ldr	r3, [r3, #0]
 80123a2:	4a2e      	ldr	r2, [pc, #184]	@ (801245c <HAL_TIM_Base_Start_IT+0x134>)
 80123a4:	4293      	cmp	r3, r2
 80123a6:	d027      	beq.n	80123f8 <HAL_TIM_Base_Start_IT+0xd0>
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	681b      	ldr	r3, [r3, #0]
 80123ac:	4a2c      	ldr	r2, [pc, #176]	@ (8012460 <HAL_TIM_Base_Start_IT+0x138>)
 80123ae:	4293      	cmp	r3, r2
 80123b0:	d022      	beq.n	80123f8 <HAL_TIM_Base_Start_IT+0xd0>
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	681b      	ldr	r3, [r3, #0]
 80123b6:	4a2b      	ldr	r2, [pc, #172]	@ (8012464 <HAL_TIM_Base_Start_IT+0x13c>)
 80123b8:	4293      	cmp	r3, r2
 80123ba:	d01d      	beq.n	80123f8 <HAL_TIM_Base_Start_IT+0xd0>
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	681b      	ldr	r3, [r3, #0]
 80123c0:	4a29      	ldr	r2, [pc, #164]	@ (8012468 <HAL_TIM_Base_Start_IT+0x140>)
 80123c2:	4293      	cmp	r3, r2
 80123c4:	d018      	beq.n	80123f8 <HAL_TIM_Base_Start_IT+0xd0>
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	681b      	ldr	r3, [r3, #0]
 80123ca:	4a28      	ldr	r2, [pc, #160]	@ (801246c <HAL_TIM_Base_Start_IT+0x144>)
 80123cc:	4293      	cmp	r3, r2
 80123ce:	d013      	beq.n	80123f8 <HAL_TIM_Base_Start_IT+0xd0>
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	681b      	ldr	r3, [r3, #0]
 80123d4:	4a26      	ldr	r2, [pc, #152]	@ (8012470 <HAL_TIM_Base_Start_IT+0x148>)
 80123d6:	4293      	cmp	r3, r2
 80123d8:	d00e      	beq.n	80123f8 <HAL_TIM_Base_Start_IT+0xd0>
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	681b      	ldr	r3, [r3, #0]
 80123de:	4a25      	ldr	r2, [pc, #148]	@ (8012474 <HAL_TIM_Base_Start_IT+0x14c>)
 80123e0:	4293      	cmp	r3, r2
 80123e2:	d009      	beq.n	80123f8 <HAL_TIM_Base_Start_IT+0xd0>
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	681b      	ldr	r3, [r3, #0]
 80123e8:	4a23      	ldr	r2, [pc, #140]	@ (8012478 <HAL_TIM_Base_Start_IT+0x150>)
 80123ea:	4293      	cmp	r3, r2
 80123ec:	d004      	beq.n	80123f8 <HAL_TIM_Base_Start_IT+0xd0>
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	681b      	ldr	r3, [r3, #0]
 80123f2:	4a22      	ldr	r2, [pc, #136]	@ (801247c <HAL_TIM_Base_Start_IT+0x154>)
 80123f4:	4293      	cmp	r3, r2
 80123f6:	d115      	bne.n	8012424 <HAL_TIM_Base_Start_IT+0xfc>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	681b      	ldr	r3, [r3, #0]
 80123fc:	689a      	ldr	r2, [r3, #8]
 80123fe:	4b20      	ldr	r3, [pc, #128]	@ (8012480 <HAL_TIM_Base_Start_IT+0x158>)
 8012400:	4013      	ands	r3, r2
 8012402:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012404:	68fb      	ldr	r3, [r7, #12]
 8012406:	2b06      	cmp	r3, #6
 8012408:	d015      	beq.n	8012436 <HAL_TIM_Base_Start_IT+0x10e>
 801240a:	68fb      	ldr	r3, [r7, #12]
 801240c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012410:	d011      	beq.n	8012436 <HAL_TIM_Base_Start_IT+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	681b      	ldr	r3, [r3, #0]
 8012416:	681a      	ldr	r2, [r3, #0]
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	681b      	ldr	r3, [r3, #0]
 801241c:	f042 0201 	orr.w	r2, r2, #1
 8012420:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012422:	e008      	b.n	8012436 <HAL_TIM_Base_Start_IT+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	681b      	ldr	r3, [r3, #0]
 8012428:	681a      	ldr	r2, [r3, #0]
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	681b      	ldr	r3, [r3, #0]
 801242e:	f042 0201 	orr.w	r2, r2, #1
 8012432:	601a      	str	r2, [r3, #0]
 8012434:	e000      	b.n	8012438 <HAL_TIM_Base_Start_IT+0x110>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012436:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8012438:	2300      	movs	r3, #0
}
 801243a:	4618      	mov	r0, r3
 801243c:	3714      	adds	r7, #20
 801243e:	46bd      	mov	sp, r7
 8012440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012444:	4770      	bx	lr
 8012446:	bf00      	nop
 8012448:	40012c00 	.word	0x40012c00
 801244c:	50012c00 	.word	0x50012c00
 8012450:	40000400 	.word	0x40000400
 8012454:	50000400 	.word	0x50000400
 8012458:	40000800 	.word	0x40000800
 801245c:	50000800 	.word	0x50000800
 8012460:	40000c00 	.word	0x40000c00
 8012464:	50000c00 	.word	0x50000c00
 8012468:	40013400 	.word	0x40013400
 801246c:	50013400 	.word	0x50013400
 8012470:	40001800 	.word	0x40001800
 8012474:	50001800 	.word	0x50001800
 8012478:	40014000 	.word	0x40014000
 801247c:	50014000 	.word	0x50014000
 8012480:	00010007 	.word	0x00010007

08012484 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8012484:	b580      	push	{r7, lr}
 8012486:	b084      	sub	sp, #16
 8012488:	af00      	add	r7, sp, #0
 801248a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	681b      	ldr	r3, [r3, #0]
 8012490:	68db      	ldr	r3, [r3, #12]
 8012492:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	681b      	ldr	r3, [r3, #0]
 8012498:	691b      	ldr	r3, [r3, #16]
 801249a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 801249c:	68bb      	ldr	r3, [r7, #8]
 801249e:	f003 0302 	and.w	r3, r3, #2
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	d020      	beq.n	80124e8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80124a6:	68fb      	ldr	r3, [r7, #12]
 80124a8:	f003 0302 	and.w	r3, r3, #2
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	d01b      	beq.n	80124e8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	681b      	ldr	r3, [r3, #0]
 80124b4:	f06f 0202 	mvn.w	r2, #2
 80124b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	2201      	movs	r2, #1
 80124be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	681b      	ldr	r3, [r3, #0]
 80124c4:	699b      	ldr	r3, [r3, #24]
 80124c6:	f003 0303 	and.w	r3, r3, #3
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	d003      	beq.n	80124d6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80124ce:	6878      	ldr	r0, [r7, #4]
 80124d0:	f000 f931 	bl	8012736 <HAL_TIM_IC_CaptureCallback>
 80124d4:	e005      	b.n	80124e2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80124d6:	6878      	ldr	r0, [r7, #4]
 80124d8:	f000 f923 	bl	8012722 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80124dc:	6878      	ldr	r0, [r7, #4]
 80124de:	f000 f934 	bl	801274a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	2200      	movs	r2, #0
 80124e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80124e8:	68bb      	ldr	r3, [r7, #8]
 80124ea:	f003 0304 	and.w	r3, r3, #4
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	d020      	beq.n	8012534 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80124f2:	68fb      	ldr	r3, [r7, #12]
 80124f4:	f003 0304 	and.w	r3, r3, #4
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d01b      	beq.n	8012534 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	681b      	ldr	r3, [r3, #0]
 8012500:	f06f 0204 	mvn.w	r2, #4
 8012504:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	2202      	movs	r2, #2
 801250a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	681b      	ldr	r3, [r3, #0]
 8012510:	699b      	ldr	r3, [r3, #24]
 8012512:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8012516:	2b00      	cmp	r3, #0
 8012518:	d003      	beq.n	8012522 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801251a:	6878      	ldr	r0, [r7, #4]
 801251c:	f000 f90b 	bl	8012736 <HAL_TIM_IC_CaptureCallback>
 8012520:	e005      	b.n	801252e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012522:	6878      	ldr	r0, [r7, #4]
 8012524:	f000 f8fd 	bl	8012722 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012528:	6878      	ldr	r0, [r7, #4]
 801252a:	f000 f90e 	bl	801274a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	2200      	movs	r2, #0
 8012532:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8012534:	68bb      	ldr	r3, [r7, #8]
 8012536:	f003 0308 	and.w	r3, r3, #8
 801253a:	2b00      	cmp	r3, #0
 801253c:	d020      	beq.n	8012580 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 801253e:	68fb      	ldr	r3, [r7, #12]
 8012540:	f003 0308 	and.w	r3, r3, #8
 8012544:	2b00      	cmp	r3, #0
 8012546:	d01b      	beq.n	8012580 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	681b      	ldr	r3, [r3, #0]
 801254c:	f06f 0208 	mvn.w	r2, #8
 8012550:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	2204      	movs	r2, #4
 8012556:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	681b      	ldr	r3, [r3, #0]
 801255c:	69db      	ldr	r3, [r3, #28]
 801255e:	f003 0303 	and.w	r3, r3, #3
 8012562:	2b00      	cmp	r3, #0
 8012564:	d003      	beq.n	801256e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012566:	6878      	ldr	r0, [r7, #4]
 8012568:	f000 f8e5 	bl	8012736 <HAL_TIM_IC_CaptureCallback>
 801256c:	e005      	b.n	801257a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801256e:	6878      	ldr	r0, [r7, #4]
 8012570:	f000 f8d7 	bl	8012722 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012574:	6878      	ldr	r0, [r7, #4]
 8012576:	f000 f8e8 	bl	801274a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	2200      	movs	r2, #0
 801257e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8012580:	68bb      	ldr	r3, [r7, #8]
 8012582:	f003 0310 	and.w	r3, r3, #16
 8012586:	2b00      	cmp	r3, #0
 8012588:	d020      	beq.n	80125cc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 801258a:	68fb      	ldr	r3, [r7, #12]
 801258c:	f003 0310 	and.w	r3, r3, #16
 8012590:	2b00      	cmp	r3, #0
 8012592:	d01b      	beq.n	80125cc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	681b      	ldr	r3, [r3, #0]
 8012598:	f06f 0210 	mvn.w	r2, #16
 801259c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	2208      	movs	r2, #8
 80125a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	681b      	ldr	r3, [r3, #0]
 80125a8:	69db      	ldr	r3, [r3, #28]
 80125aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	d003      	beq.n	80125ba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80125b2:	6878      	ldr	r0, [r7, #4]
 80125b4:	f000 f8bf 	bl	8012736 <HAL_TIM_IC_CaptureCallback>
 80125b8:	e005      	b.n	80125c6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80125ba:	6878      	ldr	r0, [r7, #4]
 80125bc:	f000 f8b1 	bl	8012722 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80125c0:	6878      	ldr	r0, [r7, #4]
 80125c2:	f000 f8c2 	bl	801274a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	2200      	movs	r2, #0
 80125ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80125cc:	68bb      	ldr	r3, [r7, #8]
 80125ce:	f003 0301 	and.w	r3, r3, #1
 80125d2:	2b00      	cmp	r3, #0
 80125d4:	d00c      	beq.n	80125f0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80125d6:	68fb      	ldr	r3, [r7, #12]
 80125d8:	f003 0301 	and.w	r3, r3, #1
 80125dc:	2b00      	cmp	r3, #0
 80125de:	d007      	beq.n	80125f0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	681b      	ldr	r3, [r3, #0]
 80125e4:	f06f 0201 	mvn.w	r2, #1
 80125e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80125ea:	6878      	ldr	r0, [r7, #4]
 80125ec:	f7f0 fe9a 	bl	8003324 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80125f0:	68bb      	ldr	r3, [r7, #8]
 80125f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d104      	bne.n	8012604 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80125fa:	68bb      	ldr	r3, [r7, #8]
 80125fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8012600:	2b00      	cmp	r3, #0
 8012602:	d00c      	beq.n	801261e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8012604:	68fb      	ldr	r3, [r7, #12]
 8012606:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801260a:	2b00      	cmp	r3, #0
 801260c:	d007      	beq.n	801261e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	681b      	ldr	r3, [r3, #0]
 8012612:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8012616:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8012618:	6878      	ldr	r0, [r7, #4]
 801261a:	f000 faaf 	bl	8012b7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 801261e:	68bb      	ldr	r3, [r7, #8]
 8012620:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012624:	2b00      	cmp	r3, #0
 8012626:	d00c      	beq.n	8012642 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8012628:	68fb      	ldr	r3, [r7, #12]
 801262a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801262e:	2b00      	cmp	r3, #0
 8012630:	d007      	beq.n	8012642 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	681b      	ldr	r3, [r3, #0]
 8012636:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 801263a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 801263c:	6878      	ldr	r0, [r7, #4]
 801263e:	f000 faa7 	bl	8012b90 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8012642:	68bb      	ldr	r3, [r7, #8]
 8012644:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012648:	2b00      	cmp	r3, #0
 801264a:	d00c      	beq.n	8012666 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 801264c:	68fb      	ldr	r3, [r7, #12]
 801264e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012652:	2b00      	cmp	r3, #0
 8012654:	d007      	beq.n	8012666 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	681b      	ldr	r3, [r3, #0]
 801265a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 801265e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8012660:	6878      	ldr	r0, [r7, #4]
 8012662:	f000 f87c 	bl	801275e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8012666:	68bb      	ldr	r3, [r7, #8]
 8012668:	f003 0320 	and.w	r3, r3, #32
 801266c:	2b00      	cmp	r3, #0
 801266e:	d00c      	beq.n	801268a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8012670:	68fb      	ldr	r3, [r7, #12]
 8012672:	f003 0320 	and.w	r3, r3, #32
 8012676:	2b00      	cmp	r3, #0
 8012678:	d007      	beq.n	801268a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	681b      	ldr	r3, [r3, #0]
 801267e:	f06f 0220 	mvn.w	r2, #32
 8012682:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8012684:	6878      	ldr	r0, [r7, #4]
 8012686:	f000 fa6f 	bl	8012b68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 801268a:	68bb      	ldr	r3, [r7, #8]
 801268c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8012690:	2b00      	cmp	r3, #0
 8012692:	d00c      	beq.n	80126ae <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8012694:	68fb      	ldr	r3, [r7, #12]
 8012696:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801269a:	2b00      	cmp	r3, #0
 801269c:	d007      	beq.n	80126ae <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	681b      	ldr	r3, [r3, #0]
 80126a2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80126a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80126a8:	6878      	ldr	r0, [r7, #4]
 80126aa:	f000 fa7b 	bl	8012ba4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80126ae:	68bb      	ldr	r3, [r7, #8]
 80126b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	d00c      	beq.n	80126d2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80126b8:	68fb      	ldr	r3, [r7, #12]
 80126ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d007      	beq.n	80126d2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	681b      	ldr	r3, [r3, #0]
 80126c6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80126ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80126cc:	6878      	ldr	r0, [r7, #4]
 80126ce:	f000 fa73 	bl	8012bb8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80126d2:	68bb      	ldr	r3, [r7, #8]
 80126d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d00c      	beq.n	80126f6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80126dc:	68fb      	ldr	r3, [r7, #12]
 80126de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d007      	beq.n	80126f6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	681b      	ldr	r3, [r3, #0]
 80126ea:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80126ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80126f0:	6878      	ldr	r0, [r7, #4]
 80126f2:	f000 fa6b 	bl	8012bcc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80126f6:	68bb      	ldr	r3, [r7, #8]
 80126f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	d00c      	beq.n	801271a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8012700:	68fb      	ldr	r3, [r7, #12]
 8012702:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8012706:	2b00      	cmp	r3, #0
 8012708:	d007      	beq.n	801271a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	681b      	ldr	r3, [r3, #0]
 801270e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8012712:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8012714:	6878      	ldr	r0, [r7, #4]
 8012716:	f000 fa63 	bl	8012be0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801271a:	bf00      	nop
 801271c:	3710      	adds	r7, #16
 801271e:	46bd      	mov	sp, r7
 8012720:	bd80      	pop	{r7, pc}

08012722 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8012722:	b480      	push	{r7}
 8012724:	b083      	sub	sp, #12
 8012726:	af00      	add	r7, sp, #0
 8012728:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801272a:	bf00      	nop
 801272c:	370c      	adds	r7, #12
 801272e:	46bd      	mov	sp, r7
 8012730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012734:	4770      	bx	lr

08012736 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8012736:	b480      	push	{r7}
 8012738:	b083      	sub	sp, #12
 801273a:	af00      	add	r7, sp, #0
 801273c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801273e:	bf00      	nop
 8012740:	370c      	adds	r7, #12
 8012742:	46bd      	mov	sp, r7
 8012744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012748:	4770      	bx	lr

0801274a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801274a:	b480      	push	{r7}
 801274c:	b083      	sub	sp, #12
 801274e:	af00      	add	r7, sp, #0
 8012750:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8012752:	bf00      	nop
 8012754:	370c      	adds	r7, #12
 8012756:	46bd      	mov	sp, r7
 8012758:	f85d 7b04 	ldr.w	r7, [sp], #4
 801275c:	4770      	bx	lr

0801275e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801275e:	b480      	push	{r7}
 8012760:	b083      	sub	sp, #12
 8012762:	af00      	add	r7, sp, #0
 8012764:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8012766:	bf00      	nop
 8012768:	370c      	adds	r7, #12
 801276a:	46bd      	mov	sp, r7
 801276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012770:	4770      	bx	lr
	...

08012774 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8012774:	b480      	push	{r7}
 8012776:	b085      	sub	sp, #20
 8012778:	af00      	add	r7, sp, #0
 801277a:	6078      	str	r0, [r7, #4]
 801277c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	681b      	ldr	r3, [r3, #0]
 8012782:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	4a7a      	ldr	r2, [pc, #488]	@ (8012970 <TIM_Base_SetConfig+0x1fc>)
 8012788:	4293      	cmp	r3, r2
 801278a:	d02b      	beq.n	80127e4 <TIM_Base_SetConfig+0x70>
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	4a79      	ldr	r2, [pc, #484]	@ (8012974 <TIM_Base_SetConfig+0x200>)
 8012790:	4293      	cmp	r3, r2
 8012792:	d027      	beq.n	80127e4 <TIM_Base_SetConfig+0x70>
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801279a:	d023      	beq.n	80127e4 <TIM_Base_SetConfig+0x70>
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80127a2:	d01f      	beq.n	80127e4 <TIM_Base_SetConfig+0x70>
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	4a74      	ldr	r2, [pc, #464]	@ (8012978 <TIM_Base_SetConfig+0x204>)
 80127a8:	4293      	cmp	r3, r2
 80127aa:	d01b      	beq.n	80127e4 <TIM_Base_SetConfig+0x70>
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	4a73      	ldr	r2, [pc, #460]	@ (801297c <TIM_Base_SetConfig+0x208>)
 80127b0:	4293      	cmp	r3, r2
 80127b2:	d017      	beq.n	80127e4 <TIM_Base_SetConfig+0x70>
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	4a72      	ldr	r2, [pc, #456]	@ (8012980 <TIM_Base_SetConfig+0x20c>)
 80127b8:	4293      	cmp	r3, r2
 80127ba:	d013      	beq.n	80127e4 <TIM_Base_SetConfig+0x70>
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	4a71      	ldr	r2, [pc, #452]	@ (8012984 <TIM_Base_SetConfig+0x210>)
 80127c0:	4293      	cmp	r3, r2
 80127c2:	d00f      	beq.n	80127e4 <TIM_Base_SetConfig+0x70>
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	4a70      	ldr	r2, [pc, #448]	@ (8012988 <TIM_Base_SetConfig+0x214>)
 80127c8:	4293      	cmp	r3, r2
 80127ca:	d00b      	beq.n	80127e4 <TIM_Base_SetConfig+0x70>
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	4a6f      	ldr	r2, [pc, #444]	@ (801298c <TIM_Base_SetConfig+0x218>)
 80127d0:	4293      	cmp	r3, r2
 80127d2:	d007      	beq.n	80127e4 <TIM_Base_SetConfig+0x70>
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	4a6e      	ldr	r2, [pc, #440]	@ (8012990 <TIM_Base_SetConfig+0x21c>)
 80127d8:	4293      	cmp	r3, r2
 80127da:	d003      	beq.n	80127e4 <TIM_Base_SetConfig+0x70>
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	4a6d      	ldr	r2, [pc, #436]	@ (8012994 <TIM_Base_SetConfig+0x220>)
 80127e0:	4293      	cmp	r3, r2
 80127e2:	d108      	bne.n	80127f6 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80127e4:	68fb      	ldr	r3, [r7, #12]
 80127e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80127ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80127ec:	683b      	ldr	r3, [r7, #0]
 80127ee:	685b      	ldr	r3, [r3, #4]
 80127f0:	68fa      	ldr	r2, [r7, #12]
 80127f2:	4313      	orrs	r3, r2
 80127f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	4a5d      	ldr	r2, [pc, #372]	@ (8012970 <TIM_Base_SetConfig+0x1fc>)
 80127fa:	4293      	cmp	r3, r2
 80127fc:	d05b      	beq.n	80128b6 <TIM_Base_SetConfig+0x142>
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	4a5c      	ldr	r2, [pc, #368]	@ (8012974 <TIM_Base_SetConfig+0x200>)
 8012802:	4293      	cmp	r3, r2
 8012804:	d057      	beq.n	80128b6 <TIM_Base_SetConfig+0x142>
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801280c:	d053      	beq.n	80128b6 <TIM_Base_SetConfig+0x142>
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8012814:	d04f      	beq.n	80128b6 <TIM_Base_SetConfig+0x142>
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	4a57      	ldr	r2, [pc, #348]	@ (8012978 <TIM_Base_SetConfig+0x204>)
 801281a:	4293      	cmp	r3, r2
 801281c:	d04b      	beq.n	80128b6 <TIM_Base_SetConfig+0x142>
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	4a56      	ldr	r2, [pc, #344]	@ (801297c <TIM_Base_SetConfig+0x208>)
 8012822:	4293      	cmp	r3, r2
 8012824:	d047      	beq.n	80128b6 <TIM_Base_SetConfig+0x142>
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	4a55      	ldr	r2, [pc, #340]	@ (8012980 <TIM_Base_SetConfig+0x20c>)
 801282a:	4293      	cmp	r3, r2
 801282c:	d043      	beq.n	80128b6 <TIM_Base_SetConfig+0x142>
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	4a54      	ldr	r2, [pc, #336]	@ (8012984 <TIM_Base_SetConfig+0x210>)
 8012832:	4293      	cmp	r3, r2
 8012834:	d03f      	beq.n	80128b6 <TIM_Base_SetConfig+0x142>
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	4a53      	ldr	r2, [pc, #332]	@ (8012988 <TIM_Base_SetConfig+0x214>)
 801283a:	4293      	cmp	r3, r2
 801283c:	d03b      	beq.n	80128b6 <TIM_Base_SetConfig+0x142>
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	4a52      	ldr	r2, [pc, #328]	@ (801298c <TIM_Base_SetConfig+0x218>)
 8012842:	4293      	cmp	r3, r2
 8012844:	d037      	beq.n	80128b6 <TIM_Base_SetConfig+0x142>
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	4a51      	ldr	r2, [pc, #324]	@ (8012990 <TIM_Base_SetConfig+0x21c>)
 801284a:	4293      	cmp	r3, r2
 801284c:	d033      	beq.n	80128b6 <TIM_Base_SetConfig+0x142>
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	4a50      	ldr	r2, [pc, #320]	@ (8012994 <TIM_Base_SetConfig+0x220>)
 8012852:	4293      	cmp	r3, r2
 8012854:	d02f      	beq.n	80128b6 <TIM_Base_SetConfig+0x142>
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	4a4f      	ldr	r2, [pc, #316]	@ (8012998 <TIM_Base_SetConfig+0x224>)
 801285a:	4293      	cmp	r3, r2
 801285c:	d02b      	beq.n	80128b6 <TIM_Base_SetConfig+0x142>
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	4a4e      	ldr	r2, [pc, #312]	@ (801299c <TIM_Base_SetConfig+0x228>)
 8012862:	4293      	cmp	r3, r2
 8012864:	d027      	beq.n	80128b6 <TIM_Base_SetConfig+0x142>
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	4a4d      	ldr	r2, [pc, #308]	@ (80129a0 <TIM_Base_SetConfig+0x22c>)
 801286a:	4293      	cmp	r3, r2
 801286c:	d023      	beq.n	80128b6 <TIM_Base_SetConfig+0x142>
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	4a4c      	ldr	r2, [pc, #304]	@ (80129a4 <TIM_Base_SetConfig+0x230>)
 8012872:	4293      	cmp	r3, r2
 8012874:	d01f      	beq.n	80128b6 <TIM_Base_SetConfig+0x142>
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	4a4b      	ldr	r2, [pc, #300]	@ (80129a8 <TIM_Base_SetConfig+0x234>)
 801287a:	4293      	cmp	r3, r2
 801287c:	d01b      	beq.n	80128b6 <TIM_Base_SetConfig+0x142>
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	4a4a      	ldr	r2, [pc, #296]	@ (80129ac <TIM_Base_SetConfig+0x238>)
 8012882:	4293      	cmp	r3, r2
 8012884:	d017      	beq.n	80128b6 <TIM_Base_SetConfig+0x142>
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	4a49      	ldr	r2, [pc, #292]	@ (80129b0 <TIM_Base_SetConfig+0x23c>)
 801288a:	4293      	cmp	r3, r2
 801288c:	d013      	beq.n	80128b6 <TIM_Base_SetConfig+0x142>
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	4a48      	ldr	r2, [pc, #288]	@ (80129b4 <TIM_Base_SetConfig+0x240>)
 8012892:	4293      	cmp	r3, r2
 8012894:	d00f      	beq.n	80128b6 <TIM_Base_SetConfig+0x142>
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	4a47      	ldr	r2, [pc, #284]	@ (80129b8 <TIM_Base_SetConfig+0x244>)
 801289a:	4293      	cmp	r3, r2
 801289c:	d00b      	beq.n	80128b6 <TIM_Base_SetConfig+0x142>
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	4a46      	ldr	r2, [pc, #280]	@ (80129bc <TIM_Base_SetConfig+0x248>)
 80128a2:	4293      	cmp	r3, r2
 80128a4:	d007      	beq.n	80128b6 <TIM_Base_SetConfig+0x142>
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	4a45      	ldr	r2, [pc, #276]	@ (80129c0 <TIM_Base_SetConfig+0x24c>)
 80128aa:	4293      	cmp	r3, r2
 80128ac:	d003      	beq.n	80128b6 <TIM_Base_SetConfig+0x142>
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	4a44      	ldr	r2, [pc, #272]	@ (80129c4 <TIM_Base_SetConfig+0x250>)
 80128b2:	4293      	cmp	r3, r2
 80128b4:	d108      	bne.n	80128c8 <TIM_Base_SetConfig+0x154>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80128b6:	68fb      	ldr	r3, [r7, #12]
 80128b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80128bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80128be:	683b      	ldr	r3, [r7, #0]
 80128c0:	68db      	ldr	r3, [r3, #12]
 80128c2:	68fa      	ldr	r2, [r7, #12]
 80128c4:	4313      	orrs	r3, r2
 80128c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80128c8:	68fb      	ldr	r3, [r7, #12]
 80128ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80128ce:	683b      	ldr	r3, [r7, #0]
 80128d0:	695b      	ldr	r3, [r3, #20]
 80128d2:	4313      	orrs	r3, r2
 80128d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	68fa      	ldr	r2, [r7, #12]
 80128da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80128dc:	683b      	ldr	r3, [r7, #0]
 80128de:	689a      	ldr	r2, [r3, #8]
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80128e4:	683b      	ldr	r3, [r7, #0]
 80128e6:	681a      	ldr	r2, [r3, #0]
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	4a20      	ldr	r2, [pc, #128]	@ (8012970 <TIM_Base_SetConfig+0x1fc>)
 80128f0:	4293      	cmp	r3, r2
 80128f2:	d023      	beq.n	801293c <TIM_Base_SetConfig+0x1c8>
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	4a1f      	ldr	r2, [pc, #124]	@ (8012974 <TIM_Base_SetConfig+0x200>)
 80128f8:	4293      	cmp	r3, r2
 80128fa:	d01f      	beq.n	801293c <TIM_Base_SetConfig+0x1c8>
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	4a24      	ldr	r2, [pc, #144]	@ (8012990 <TIM_Base_SetConfig+0x21c>)
 8012900:	4293      	cmp	r3, r2
 8012902:	d01b      	beq.n	801293c <TIM_Base_SetConfig+0x1c8>
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	4a23      	ldr	r2, [pc, #140]	@ (8012994 <TIM_Base_SetConfig+0x220>)
 8012908:	4293      	cmp	r3, r2
 801290a:	d017      	beq.n	801293c <TIM_Base_SetConfig+0x1c8>
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	4a28      	ldr	r2, [pc, #160]	@ (80129b0 <TIM_Base_SetConfig+0x23c>)
 8012910:	4293      	cmp	r3, r2
 8012912:	d013      	beq.n	801293c <TIM_Base_SetConfig+0x1c8>
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	4a27      	ldr	r2, [pc, #156]	@ (80129b4 <TIM_Base_SetConfig+0x240>)
 8012918:	4293      	cmp	r3, r2
 801291a:	d00f      	beq.n	801293c <TIM_Base_SetConfig+0x1c8>
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	4a26      	ldr	r2, [pc, #152]	@ (80129b8 <TIM_Base_SetConfig+0x244>)
 8012920:	4293      	cmp	r3, r2
 8012922:	d00b      	beq.n	801293c <TIM_Base_SetConfig+0x1c8>
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	4a25      	ldr	r2, [pc, #148]	@ (80129bc <TIM_Base_SetConfig+0x248>)
 8012928:	4293      	cmp	r3, r2
 801292a:	d007      	beq.n	801293c <TIM_Base_SetConfig+0x1c8>
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	4a24      	ldr	r2, [pc, #144]	@ (80129c0 <TIM_Base_SetConfig+0x24c>)
 8012930:	4293      	cmp	r3, r2
 8012932:	d003      	beq.n	801293c <TIM_Base_SetConfig+0x1c8>
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	4a23      	ldr	r2, [pc, #140]	@ (80129c4 <TIM_Base_SetConfig+0x250>)
 8012938:	4293      	cmp	r3, r2
 801293a:	d103      	bne.n	8012944 <TIM_Base_SetConfig+0x1d0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801293c:	683b      	ldr	r3, [r7, #0]
 801293e:	691a      	ldr	r2, [r3, #16]
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	2201      	movs	r2, #1
 8012948:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	691b      	ldr	r3, [r3, #16]
 801294e:	f003 0301 	and.w	r3, r3, #1
 8012952:	2b01      	cmp	r3, #1
 8012954:	d105      	bne.n	8012962 <TIM_Base_SetConfig+0x1ee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	691b      	ldr	r3, [r3, #16]
 801295a:	f023 0201 	bic.w	r2, r3, #1
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	611a      	str	r2, [r3, #16]
  }
}
 8012962:	bf00      	nop
 8012964:	3714      	adds	r7, #20
 8012966:	46bd      	mov	sp, r7
 8012968:	f85d 7b04 	ldr.w	r7, [sp], #4
 801296c:	4770      	bx	lr
 801296e:	bf00      	nop
 8012970:	40012c00 	.word	0x40012c00
 8012974:	50012c00 	.word	0x50012c00
 8012978:	40000400 	.word	0x40000400
 801297c:	50000400 	.word	0x50000400
 8012980:	40000800 	.word	0x40000800
 8012984:	50000800 	.word	0x50000800
 8012988:	40000c00 	.word	0x40000c00
 801298c:	50000c00 	.word	0x50000c00
 8012990:	40013400 	.word	0x40013400
 8012994:	50013400 	.word	0x50013400
 8012998:	40001800 	.word	0x40001800
 801299c:	50001800 	.word	0x50001800
 80129a0:	40001c00 	.word	0x40001c00
 80129a4:	50001c00 	.word	0x50001c00
 80129a8:	40002000 	.word	0x40002000
 80129ac:	50002000 	.word	0x50002000
 80129b0:	40014000 	.word	0x40014000
 80129b4:	50014000 	.word	0x50014000
 80129b8:	40014400 	.word	0x40014400
 80129bc:	50014400 	.word	0x50014400
 80129c0:	40014800 	.word	0x40014800
 80129c4:	50014800 	.word	0x50014800

080129c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80129c8:	b480      	push	{r7}
 80129ca:	b085      	sub	sp, #20
 80129cc:	af00      	add	r7, sp, #0
 80129ce:	6078      	str	r0, [r7, #4]
 80129d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80129d8:	2b01      	cmp	r3, #1
 80129da:	d101      	bne.n	80129e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80129dc:	2302      	movs	r3, #2
 80129de:	e0a1      	b.n	8012b24 <HAL_TIMEx_MasterConfigSynchronization+0x15c>
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	2201      	movs	r2, #1
 80129e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	2202      	movs	r2, #2
 80129ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	681b      	ldr	r3, [r3, #0]
 80129f4:	685b      	ldr	r3, [r3, #4]
 80129f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	681b      	ldr	r3, [r3, #0]
 80129fc:	689b      	ldr	r3, [r3, #8]
 80129fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	681b      	ldr	r3, [r3, #0]
 8012a04:	4a4a      	ldr	r2, [pc, #296]	@ (8012b30 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8012a06:	4293      	cmp	r3, r2
 8012a08:	d00e      	beq.n	8012a28 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	681b      	ldr	r3, [r3, #0]
 8012a0e:	4a49      	ldr	r2, [pc, #292]	@ (8012b34 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8012a10:	4293      	cmp	r3, r2
 8012a12:	d009      	beq.n	8012a28 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	681b      	ldr	r3, [r3, #0]
 8012a18:	4a47      	ldr	r2, [pc, #284]	@ (8012b38 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8012a1a:	4293      	cmp	r3, r2
 8012a1c:	d004      	beq.n	8012a28 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	681b      	ldr	r3, [r3, #0]
 8012a22:	4a46      	ldr	r2, [pc, #280]	@ (8012b3c <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8012a24:	4293      	cmp	r3, r2
 8012a26:	d108      	bne.n	8012a3a <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8012a28:	68fb      	ldr	r3, [r7, #12]
 8012a2a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8012a2e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8012a30:	683b      	ldr	r3, [r7, #0]
 8012a32:	685b      	ldr	r3, [r3, #4]
 8012a34:	68fa      	ldr	r2, [r7, #12]
 8012a36:	4313      	orrs	r3, r2
 8012a38:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8012a3a:	68fb      	ldr	r3, [r7, #12]
 8012a3c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8012a40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012a44:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8012a46:	683b      	ldr	r3, [r7, #0]
 8012a48:	681b      	ldr	r3, [r3, #0]
 8012a4a:	68fa      	ldr	r2, [r7, #12]
 8012a4c:	4313      	orrs	r3, r2
 8012a4e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	681b      	ldr	r3, [r3, #0]
 8012a54:	68fa      	ldr	r2, [r7, #12]
 8012a56:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	681b      	ldr	r3, [r3, #0]
 8012a5c:	4a34      	ldr	r2, [pc, #208]	@ (8012b30 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8012a5e:	4293      	cmp	r3, r2
 8012a60:	d04a      	beq.n	8012af8 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	681b      	ldr	r3, [r3, #0]
 8012a66:	4a33      	ldr	r2, [pc, #204]	@ (8012b34 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8012a68:	4293      	cmp	r3, r2
 8012a6a:	d045      	beq.n	8012af8 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	681b      	ldr	r3, [r3, #0]
 8012a70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012a74:	d040      	beq.n	8012af8 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	681b      	ldr	r3, [r3, #0]
 8012a7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8012a7e:	d03b      	beq.n	8012af8 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	681b      	ldr	r3, [r3, #0]
 8012a84:	4a2e      	ldr	r2, [pc, #184]	@ (8012b40 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8012a86:	4293      	cmp	r3, r2
 8012a88:	d036      	beq.n	8012af8 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	681b      	ldr	r3, [r3, #0]
 8012a8e:	4a2d      	ldr	r2, [pc, #180]	@ (8012b44 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 8012a90:	4293      	cmp	r3, r2
 8012a92:	d031      	beq.n	8012af8 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	681b      	ldr	r3, [r3, #0]
 8012a98:	4a2b      	ldr	r2, [pc, #172]	@ (8012b48 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8012a9a:	4293      	cmp	r3, r2
 8012a9c:	d02c      	beq.n	8012af8 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	681b      	ldr	r3, [r3, #0]
 8012aa2:	4a2a      	ldr	r2, [pc, #168]	@ (8012b4c <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 8012aa4:	4293      	cmp	r3, r2
 8012aa6:	d027      	beq.n	8012af8 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	681b      	ldr	r3, [r3, #0]
 8012aac:	4a28      	ldr	r2, [pc, #160]	@ (8012b50 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 8012aae:	4293      	cmp	r3, r2
 8012ab0:	d022      	beq.n	8012af8 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	681b      	ldr	r3, [r3, #0]
 8012ab6:	4a27      	ldr	r2, [pc, #156]	@ (8012b54 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 8012ab8:	4293      	cmp	r3, r2
 8012aba:	d01d      	beq.n	8012af8 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	681b      	ldr	r3, [r3, #0]
 8012ac0:	4a1d      	ldr	r2, [pc, #116]	@ (8012b38 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8012ac2:	4293      	cmp	r3, r2
 8012ac4:	d018      	beq.n	8012af8 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	681b      	ldr	r3, [r3, #0]
 8012aca:	4a1c      	ldr	r2, [pc, #112]	@ (8012b3c <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8012acc:	4293      	cmp	r3, r2
 8012ace:	d013      	beq.n	8012af8 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	681b      	ldr	r3, [r3, #0]
 8012ad4:	4a20      	ldr	r2, [pc, #128]	@ (8012b58 <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 8012ad6:	4293      	cmp	r3, r2
 8012ad8:	d00e      	beq.n	8012af8 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	681b      	ldr	r3, [r3, #0]
 8012ade:	4a1f      	ldr	r2, [pc, #124]	@ (8012b5c <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 8012ae0:	4293      	cmp	r3, r2
 8012ae2:	d009      	beq.n	8012af8 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	681b      	ldr	r3, [r3, #0]
 8012ae8:	4a1d      	ldr	r2, [pc, #116]	@ (8012b60 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 8012aea:	4293      	cmp	r3, r2
 8012aec:	d004      	beq.n	8012af8 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	681b      	ldr	r3, [r3, #0]
 8012af2:	4a1c      	ldr	r2, [pc, #112]	@ (8012b64 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8012af4:	4293      	cmp	r3, r2
 8012af6:	d10c      	bne.n	8012b12 <HAL_TIMEx_MasterConfigSynchronization+0x14a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8012af8:	68bb      	ldr	r3, [r7, #8]
 8012afa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8012afe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8012b00:	683b      	ldr	r3, [r7, #0]
 8012b02:	689b      	ldr	r3, [r3, #8]
 8012b04:	68ba      	ldr	r2, [r7, #8]
 8012b06:	4313      	orrs	r3, r2
 8012b08:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	681b      	ldr	r3, [r3, #0]
 8012b0e:	68ba      	ldr	r2, [r7, #8]
 8012b10:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	2201      	movs	r2, #1
 8012b16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	2200      	movs	r2, #0
 8012b1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8012b22:	2300      	movs	r3, #0
}
 8012b24:	4618      	mov	r0, r3
 8012b26:	3714      	adds	r7, #20
 8012b28:	46bd      	mov	sp, r7
 8012b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b2e:	4770      	bx	lr
 8012b30:	40012c00 	.word	0x40012c00
 8012b34:	50012c00 	.word	0x50012c00
 8012b38:	40013400 	.word	0x40013400
 8012b3c:	50013400 	.word	0x50013400
 8012b40:	40000400 	.word	0x40000400
 8012b44:	50000400 	.word	0x50000400
 8012b48:	40000800 	.word	0x40000800
 8012b4c:	50000800 	.word	0x50000800
 8012b50:	40000c00 	.word	0x40000c00
 8012b54:	50000c00 	.word	0x50000c00
 8012b58:	40001800 	.word	0x40001800
 8012b5c:	50001800 	.word	0x50001800
 8012b60:	40014000 	.word	0x40014000
 8012b64:	50014000 	.word	0x50014000

08012b68 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8012b68:	b480      	push	{r7}
 8012b6a:	b083      	sub	sp, #12
 8012b6c:	af00      	add	r7, sp, #0
 8012b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8012b70:	bf00      	nop
 8012b72:	370c      	adds	r7, #12
 8012b74:	46bd      	mov	sp, r7
 8012b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b7a:	4770      	bx	lr

08012b7c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8012b7c:	b480      	push	{r7}
 8012b7e:	b083      	sub	sp, #12
 8012b80:	af00      	add	r7, sp, #0
 8012b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8012b84:	bf00      	nop
 8012b86:	370c      	adds	r7, #12
 8012b88:	46bd      	mov	sp, r7
 8012b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b8e:	4770      	bx	lr

08012b90 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8012b90:	b480      	push	{r7}
 8012b92:	b083      	sub	sp, #12
 8012b94:	af00      	add	r7, sp, #0
 8012b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8012b98:	bf00      	nop
 8012b9a:	370c      	adds	r7, #12
 8012b9c:	46bd      	mov	sp, r7
 8012b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ba2:	4770      	bx	lr

08012ba4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8012ba4:	b480      	push	{r7}
 8012ba6:	b083      	sub	sp, #12
 8012ba8:	af00      	add	r7, sp, #0
 8012baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8012bac:	bf00      	nop
 8012bae:	370c      	adds	r7, #12
 8012bb0:	46bd      	mov	sp, r7
 8012bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bb6:	4770      	bx	lr

08012bb8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8012bb8:	b480      	push	{r7}
 8012bba:	b083      	sub	sp, #12
 8012bbc:	af00      	add	r7, sp, #0
 8012bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8012bc0:	bf00      	nop
 8012bc2:	370c      	adds	r7, #12
 8012bc4:	46bd      	mov	sp, r7
 8012bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bca:	4770      	bx	lr

08012bcc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8012bcc:	b480      	push	{r7}
 8012bce:	b083      	sub	sp, #12
 8012bd0:	af00      	add	r7, sp, #0
 8012bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8012bd4:	bf00      	nop
 8012bd6:	370c      	adds	r7, #12
 8012bd8:	46bd      	mov	sp, r7
 8012bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bde:	4770      	bx	lr

08012be0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8012be0:	b480      	push	{r7}
 8012be2:	b083      	sub	sp, #12
 8012be4:	af00      	add	r7, sp, #0
 8012be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8012be8:	bf00      	nop
 8012bea:	370c      	adds	r7, #12
 8012bec:	46bd      	mov	sp, r7
 8012bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bf2:	4770      	bx	lr

08012bf4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8012bf4:	b580      	push	{r7, lr}
 8012bf6:	b082      	sub	sp, #8
 8012bf8:	af00      	add	r7, sp, #0
 8012bfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	d101      	bne.n	8012c06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8012c02:	2301      	movs	r3, #1
 8012c04:	e042      	b.n	8012c8c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d106      	bne.n	8012c1e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	2200      	movs	r2, #0
 8012c14:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8012c18:	6878      	ldr	r0, [r7, #4]
 8012c1a:	f7f2 fbe3 	bl	80053e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	2224      	movs	r2, #36	@ 0x24
 8012c22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	681b      	ldr	r3, [r3, #0]
 8012c2a:	681a      	ldr	r2, [r3, #0]
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	681b      	ldr	r3, [r3, #0]
 8012c30:	f022 0201 	bic.w	r2, r2, #1
 8012c34:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	d002      	beq.n	8012c44 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8012c3e:	6878      	ldr	r0, [r7, #4]
 8012c40:	f000 fec6 	bl	80139d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8012c44:	6878      	ldr	r0, [r7, #4]
 8012c46:	f000 fcd5 	bl	80135f4 <UART_SetConfig>
 8012c4a:	4603      	mov	r3, r0
 8012c4c:	2b01      	cmp	r3, #1
 8012c4e:	d101      	bne.n	8012c54 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8012c50:	2301      	movs	r3, #1
 8012c52:	e01b      	b.n	8012c8c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	681b      	ldr	r3, [r3, #0]
 8012c58:	685a      	ldr	r2, [r3, #4]
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	681b      	ldr	r3, [r3, #0]
 8012c5e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8012c62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	681b      	ldr	r3, [r3, #0]
 8012c68:	689a      	ldr	r2, [r3, #8]
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	681b      	ldr	r3, [r3, #0]
 8012c6e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8012c72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	681b      	ldr	r3, [r3, #0]
 8012c78:	681a      	ldr	r2, [r3, #0]
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	681b      	ldr	r3, [r3, #0]
 8012c7e:	f042 0201 	orr.w	r2, r2, #1
 8012c82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8012c84:	6878      	ldr	r0, [r7, #4]
 8012c86:	f000 ff45 	bl	8013b14 <UART_CheckIdleState>
 8012c8a:	4603      	mov	r3, r0
}
 8012c8c:	4618      	mov	r0, r3
 8012c8e:	3708      	adds	r7, #8
 8012c90:	46bd      	mov	sp, r7
 8012c92:	bd80      	pop	{r7, pc}

08012c94 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012c94:	b580      	push	{r7, lr}
 8012c96:	b08a      	sub	sp, #40	@ 0x28
 8012c98:	af02      	add	r7, sp, #8
 8012c9a:	60f8      	str	r0, [r7, #12]
 8012c9c:	60b9      	str	r1, [r7, #8]
 8012c9e:	603b      	str	r3, [r7, #0]
 8012ca0:	4613      	mov	r3, r2
 8012ca2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8012ca4:	68fb      	ldr	r3, [r7, #12]
 8012ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8012caa:	2b20      	cmp	r3, #32
 8012cac:	f040 808b 	bne.w	8012dc6 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8012cb0:	68bb      	ldr	r3, [r7, #8]
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	d002      	beq.n	8012cbc <HAL_UART_Transmit+0x28>
 8012cb6:	88fb      	ldrh	r3, [r7, #6]
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d101      	bne.n	8012cc0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8012cbc:	2301      	movs	r3, #1
 8012cbe:	e083      	b.n	8012dc8 <HAL_UART_Transmit+0x134>
    }

    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8012cc0:	68fb      	ldr	r3, [r7, #12]
 8012cc2:	681b      	ldr	r3, [r3, #0]
 8012cc4:	689b      	ldr	r3, [r3, #8]
 8012cc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012cca:	2b80      	cmp	r3, #128	@ 0x80
 8012ccc:	d107      	bne.n	8012cde <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8012cce:	68fb      	ldr	r3, [r7, #12]
 8012cd0:	681b      	ldr	r3, [r3, #0]
 8012cd2:	689a      	ldr	r2, [r3, #8]
 8012cd4:	68fb      	ldr	r3, [r7, #12]
 8012cd6:	681b      	ldr	r3, [r3, #0]
 8012cd8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8012cdc:	609a      	str	r2, [r3, #8]
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012cde:	68fb      	ldr	r3, [r7, #12]
 8012ce0:	2200      	movs	r2, #0
 8012ce2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8012ce6:	68fb      	ldr	r3, [r7, #12]
 8012ce8:	2221      	movs	r2, #33	@ 0x21
 8012cea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8012cee:	f7f2 fe6f 	bl	80059d0 <HAL_GetTick>
 8012cf2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8012cf4:	68fb      	ldr	r3, [r7, #12]
 8012cf6:	88fa      	ldrh	r2, [r7, #6]
 8012cf8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8012cfc:	68fb      	ldr	r3, [r7, #12]
 8012cfe:	88fa      	ldrh	r2, [r7, #6]
 8012d00:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012d04:	68fb      	ldr	r3, [r7, #12]
 8012d06:	689b      	ldr	r3, [r3, #8]
 8012d08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012d0c:	d108      	bne.n	8012d20 <HAL_UART_Transmit+0x8c>
 8012d0e:	68fb      	ldr	r3, [r7, #12]
 8012d10:	691b      	ldr	r3, [r3, #16]
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	d104      	bne.n	8012d20 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8012d16:	2300      	movs	r3, #0
 8012d18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8012d1a:	68bb      	ldr	r3, [r7, #8]
 8012d1c:	61bb      	str	r3, [r7, #24]
 8012d1e:	e003      	b.n	8012d28 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8012d20:	68bb      	ldr	r3, [r7, #8]
 8012d22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8012d24:	2300      	movs	r3, #0
 8012d26:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8012d28:	e030      	b.n	8012d8c <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8012d2a:	683b      	ldr	r3, [r7, #0]
 8012d2c:	9300      	str	r3, [sp, #0]
 8012d2e:	697b      	ldr	r3, [r7, #20]
 8012d30:	2200      	movs	r2, #0
 8012d32:	2180      	movs	r1, #128	@ 0x80
 8012d34:	68f8      	ldr	r0, [r7, #12]
 8012d36:	f000 ff97 	bl	8013c68 <UART_WaitOnFlagUntilTimeout>
 8012d3a:	4603      	mov	r3, r0
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	d005      	beq.n	8012d4c <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8012d40:	68fb      	ldr	r3, [r7, #12]
 8012d42:	2220      	movs	r2, #32
 8012d44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8012d48:	2303      	movs	r3, #3
 8012d4a:	e03d      	b.n	8012dc8 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8012d4c:	69fb      	ldr	r3, [r7, #28]
 8012d4e:	2b00      	cmp	r3, #0
 8012d50:	d10b      	bne.n	8012d6a <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8012d52:	69bb      	ldr	r3, [r7, #24]
 8012d54:	881b      	ldrh	r3, [r3, #0]
 8012d56:	461a      	mov	r2, r3
 8012d58:	68fb      	ldr	r3, [r7, #12]
 8012d5a:	681b      	ldr	r3, [r3, #0]
 8012d5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8012d60:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8012d62:	69bb      	ldr	r3, [r7, #24]
 8012d64:	3302      	adds	r3, #2
 8012d66:	61bb      	str	r3, [r7, #24]
 8012d68:	e007      	b.n	8012d7a <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8012d6a:	69fb      	ldr	r3, [r7, #28]
 8012d6c:	781a      	ldrb	r2, [r3, #0]
 8012d6e:	68fb      	ldr	r3, [r7, #12]
 8012d70:	681b      	ldr	r3, [r3, #0]
 8012d72:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8012d74:	69fb      	ldr	r3, [r7, #28]
 8012d76:	3301      	adds	r3, #1
 8012d78:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8012d7a:	68fb      	ldr	r3, [r7, #12]
 8012d7c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8012d80:	b29b      	uxth	r3, r3
 8012d82:	3b01      	subs	r3, #1
 8012d84:	b29a      	uxth	r2, r3
 8012d86:	68fb      	ldr	r3, [r7, #12]
 8012d88:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8012d8c:	68fb      	ldr	r3, [r7, #12]
 8012d8e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8012d92:	b29b      	uxth	r3, r3
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	d1c8      	bne.n	8012d2a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8012d98:	683b      	ldr	r3, [r7, #0]
 8012d9a:	9300      	str	r3, [sp, #0]
 8012d9c:	697b      	ldr	r3, [r7, #20]
 8012d9e:	2200      	movs	r2, #0
 8012da0:	2140      	movs	r1, #64	@ 0x40
 8012da2:	68f8      	ldr	r0, [r7, #12]
 8012da4:	f000 ff60 	bl	8013c68 <UART_WaitOnFlagUntilTimeout>
 8012da8:	4603      	mov	r3, r0
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	d005      	beq.n	8012dba <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8012dae:	68fb      	ldr	r3, [r7, #12]
 8012db0:	2220      	movs	r2, #32
 8012db2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8012db6:	2303      	movs	r3, #3
 8012db8:	e006      	b.n	8012dc8 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8012dba:	68fb      	ldr	r3, [r7, #12]
 8012dbc:	2220      	movs	r2, #32
 8012dbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8012dc2:	2300      	movs	r3, #0
 8012dc4:	e000      	b.n	8012dc8 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 8012dc6:	2302      	movs	r3, #2
  }
}
 8012dc8:	4618      	mov	r0, r3
 8012dca:	3720      	adds	r7, #32
 8012dcc:	46bd      	mov	sp, r7
 8012dce:	bd80      	pop	{r7, pc}

08012dd0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012dd0:	b580      	push	{r7, lr}
 8012dd2:	b08a      	sub	sp, #40	@ 0x28
 8012dd4:	af02      	add	r7, sp, #8
 8012dd6:	60f8      	str	r0, [r7, #12]
 8012dd8:	60b9      	str	r1, [r7, #8]
 8012dda:	603b      	str	r3, [r7, #0]
 8012ddc:	4613      	mov	r3, r2
 8012dde:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8012de0:	68fb      	ldr	r3, [r7, #12]
 8012de2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8012de6:	2b20      	cmp	r3, #32
 8012de8:	f040 80c4 	bne.w	8012f74 <HAL_UART_Receive+0x1a4>
  {
    if ((pData == NULL) || (Size == 0U))
 8012dec:	68bb      	ldr	r3, [r7, #8]
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	d002      	beq.n	8012df8 <HAL_UART_Receive+0x28>
 8012df2:	88fb      	ldrh	r3, [r7, #6]
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d101      	bne.n	8012dfc <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8012df8:	2301      	movs	r3, #1
 8012dfa:	e0bc      	b.n	8012f76 <HAL_UART_Receive+0x1a6>
    }

    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012dfc:	68fb      	ldr	r3, [r7, #12]
 8012dfe:	681b      	ldr	r3, [r3, #0]
 8012e00:	689b      	ldr	r3, [r3, #8]
 8012e02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012e06:	2b40      	cmp	r3, #64	@ 0x40
 8012e08:	d107      	bne.n	8012e1a <HAL_UART_Receive+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012e0a:	68fb      	ldr	r3, [r7, #12]
 8012e0c:	681b      	ldr	r3, [r3, #0]
 8012e0e:	689a      	ldr	r2, [r3, #8]
 8012e10:	68fb      	ldr	r3, [r7, #12]
 8012e12:	681b      	ldr	r3, [r3, #0]
 8012e14:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8012e18:	609a      	str	r2, [r3, #8]
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012e1a:	68fb      	ldr	r3, [r7, #12]
 8012e1c:	2200      	movs	r2, #0
 8012e1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8012e22:	68fb      	ldr	r3, [r7, #12]
 8012e24:	2222      	movs	r2, #34	@ 0x22
 8012e26:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012e2a:	68fb      	ldr	r3, [r7, #12]
 8012e2c:	2200      	movs	r2, #0
 8012e2e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8012e30:	f7f2 fdce 	bl	80059d0 <HAL_GetTick>
 8012e34:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8012e36:	68fb      	ldr	r3, [r7, #12]
 8012e38:	88fa      	ldrh	r2, [r7, #6]
 8012e3a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8012e3e:	68fb      	ldr	r3, [r7, #12]
 8012e40:	88fa      	ldrh	r2, [r7, #6]
 8012e42:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8012e46:	68fb      	ldr	r3, [r7, #12]
 8012e48:	689b      	ldr	r3, [r3, #8]
 8012e4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012e4e:	d10e      	bne.n	8012e6e <HAL_UART_Receive+0x9e>
 8012e50:	68fb      	ldr	r3, [r7, #12]
 8012e52:	691b      	ldr	r3, [r3, #16]
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	d105      	bne.n	8012e64 <HAL_UART_Receive+0x94>
 8012e58:	68fb      	ldr	r3, [r7, #12]
 8012e5a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8012e5e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8012e62:	e02d      	b.n	8012ec0 <HAL_UART_Receive+0xf0>
 8012e64:	68fb      	ldr	r3, [r7, #12]
 8012e66:	22ff      	movs	r2, #255	@ 0xff
 8012e68:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8012e6c:	e028      	b.n	8012ec0 <HAL_UART_Receive+0xf0>
 8012e6e:	68fb      	ldr	r3, [r7, #12]
 8012e70:	689b      	ldr	r3, [r3, #8]
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	d10d      	bne.n	8012e92 <HAL_UART_Receive+0xc2>
 8012e76:	68fb      	ldr	r3, [r7, #12]
 8012e78:	691b      	ldr	r3, [r3, #16]
 8012e7a:	2b00      	cmp	r3, #0
 8012e7c:	d104      	bne.n	8012e88 <HAL_UART_Receive+0xb8>
 8012e7e:	68fb      	ldr	r3, [r7, #12]
 8012e80:	22ff      	movs	r2, #255	@ 0xff
 8012e82:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8012e86:	e01b      	b.n	8012ec0 <HAL_UART_Receive+0xf0>
 8012e88:	68fb      	ldr	r3, [r7, #12]
 8012e8a:	227f      	movs	r2, #127	@ 0x7f
 8012e8c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8012e90:	e016      	b.n	8012ec0 <HAL_UART_Receive+0xf0>
 8012e92:	68fb      	ldr	r3, [r7, #12]
 8012e94:	689b      	ldr	r3, [r3, #8]
 8012e96:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012e9a:	d10d      	bne.n	8012eb8 <HAL_UART_Receive+0xe8>
 8012e9c:	68fb      	ldr	r3, [r7, #12]
 8012e9e:	691b      	ldr	r3, [r3, #16]
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	d104      	bne.n	8012eae <HAL_UART_Receive+0xde>
 8012ea4:	68fb      	ldr	r3, [r7, #12]
 8012ea6:	227f      	movs	r2, #127	@ 0x7f
 8012ea8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8012eac:	e008      	b.n	8012ec0 <HAL_UART_Receive+0xf0>
 8012eae:	68fb      	ldr	r3, [r7, #12]
 8012eb0:	223f      	movs	r2, #63	@ 0x3f
 8012eb2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8012eb6:	e003      	b.n	8012ec0 <HAL_UART_Receive+0xf0>
 8012eb8:	68fb      	ldr	r3, [r7, #12]
 8012eba:	2200      	movs	r2, #0
 8012ebc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8012ec0:	68fb      	ldr	r3, [r7, #12]
 8012ec2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012ec6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012ec8:	68fb      	ldr	r3, [r7, #12]
 8012eca:	689b      	ldr	r3, [r3, #8]
 8012ecc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012ed0:	d108      	bne.n	8012ee4 <HAL_UART_Receive+0x114>
 8012ed2:	68fb      	ldr	r3, [r7, #12]
 8012ed4:	691b      	ldr	r3, [r3, #16]
 8012ed6:	2b00      	cmp	r3, #0
 8012ed8:	d104      	bne.n	8012ee4 <HAL_UART_Receive+0x114>
    {
      pdata8bits  = NULL;
 8012eda:	2300      	movs	r3, #0
 8012edc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8012ede:	68bb      	ldr	r3, [r7, #8]
 8012ee0:	61bb      	str	r3, [r7, #24]
 8012ee2:	e003      	b.n	8012eec <HAL_UART_Receive+0x11c>
    }
    else
    {
      pdata8bits  = pData;
 8012ee4:	68bb      	ldr	r3, [r7, #8]
 8012ee6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8012ee8:	2300      	movs	r3, #0
 8012eea:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8012eec:	e036      	b.n	8012f5c <HAL_UART_Receive+0x18c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8012eee:	683b      	ldr	r3, [r7, #0]
 8012ef0:	9300      	str	r3, [sp, #0]
 8012ef2:	697b      	ldr	r3, [r7, #20]
 8012ef4:	2200      	movs	r2, #0
 8012ef6:	2120      	movs	r1, #32
 8012ef8:	68f8      	ldr	r0, [r7, #12]
 8012efa:	f000 feb5 	bl	8013c68 <UART_WaitOnFlagUntilTimeout>
 8012efe:	4603      	mov	r3, r0
 8012f00:	2b00      	cmp	r3, #0
 8012f02:	d005      	beq.n	8012f10 <HAL_UART_Receive+0x140>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8012f04:	68fb      	ldr	r3, [r7, #12]
 8012f06:	2220      	movs	r2, #32
 8012f08:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8012f0c:	2303      	movs	r3, #3
 8012f0e:	e032      	b.n	8012f76 <HAL_UART_Receive+0x1a6>
      }
      if (pdata8bits == NULL)
 8012f10:	69fb      	ldr	r3, [r7, #28]
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	d10c      	bne.n	8012f30 <HAL_UART_Receive+0x160>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8012f16:	68fb      	ldr	r3, [r7, #12]
 8012f18:	681b      	ldr	r3, [r3, #0]
 8012f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012f1c:	b29a      	uxth	r2, r3
 8012f1e:	8a7b      	ldrh	r3, [r7, #18]
 8012f20:	4013      	ands	r3, r2
 8012f22:	b29a      	uxth	r2, r3
 8012f24:	69bb      	ldr	r3, [r7, #24]
 8012f26:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8012f28:	69bb      	ldr	r3, [r7, #24]
 8012f2a:	3302      	adds	r3, #2
 8012f2c:	61bb      	str	r3, [r7, #24]
 8012f2e:	e00c      	b.n	8012f4a <HAL_UART_Receive+0x17a>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8012f30:	68fb      	ldr	r3, [r7, #12]
 8012f32:	681b      	ldr	r3, [r3, #0]
 8012f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012f36:	b2da      	uxtb	r2, r3
 8012f38:	8a7b      	ldrh	r3, [r7, #18]
 8012f3a:	b2db      	uxtb	r3, r3
 8012f3c:	4013      	ands	r3, r2
 8012f3e:	b2da      	uxtb	r2, r3
 8012f40:	69fb      	ldr	r3, [r7, #28]
 8012f42:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8012f44:	69fb      	ldr	r3, [r7, #28]
 8012f46:	3301      	adds	r3, #1
 8012f48:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8012f4a:	68fb      	ldr	r3, [r7, #12]
 8012f4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8012f50:	b29b      	uxth	r3, r3
 8012f52:	3b01      	subs	r3, #1
 8012f54:	b29a      	uxth	r2, r3
 8012f56:	68fb      	ldr	r3, [r7, #12]
 8012f58:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8012f5c:	68fb      	ldr	r3, [r7, #12]
 8012f5e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8012f62:	b29b      	uxth	r3, r3
 8012f64:	2b00      	cmp	r3, #0
 8012f66:	d1c2      	bne.n	8012eee <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8012f68:	68fb      	ldr	r3, [r7, #12]
 8012f6a:	2220      	movs	r2, #32
 8012f6c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8012f70:	2300      	movs	r3, #0
 8012f72:	e000      	b.n	8012f76 <HAL_UART_Receive+0x1a6>
  }
  else
  {
    return HAL_BUSY;
 8012f74:	2302      	movs	r3, #2
  }
}
 8012f76:	4618      	mov	r0, r3
 8012f78:	3720      	adds	r7, #32
 8012f7a:	46bd      	mov	sp, r7
 8012f7c:	bd80      	pop	{r7, pc}
	...

08012f80 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012f80:	b580      	push	{r7, lr}
 8012f82:	b08a      	sub	sp, #40	@ 0x28
 8012f84:	af00      	add	r7, sp, #0
 8012f86:	60f8      	str	r0, [r7, #12]
 8012f88:	60b9      	str	r1, [r7, #8]
 8012f8a:	4613      	mov	r3, r2
 8012f8c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8012f8e:	68fb      	ldr	r3, [r7, #12]
 8012f90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8012f94:	2b20      	cmp	r3, #32
 8012f96:	d13c      	bne.n	8013012 <HAL_UART_Receive_DMA+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8012f98:	68bb      	ldr	r3, [r7, #8]
 8012f9a:	2b00      	cmp	r3, #0
 8012f9c:	d002      	beq.n	8012fa4 <HAL_UART_Receive_DMA+0x24>
 8012f9e:	88fb      	ldrh	r3, [r7, #6]
 8012fa0:	2b00      	cmp	r3, #0
 8012fa2:	d101      	bne.n	8012fa8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8012fa4:	2301      	movs	r3, #1
 8012fa6:	e035      	b.n	8013014 <HAL_UART_Receive_DMA+0x94>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012fa8:	68fb      	ldr	r3, [r7, #12]
 8012faa:	2200      	movs	r2, #0
 8012fac:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012fae:	68fb      	ldr	r3, [r7, #12]
 8012fb0:	681b      	ldr	r3, [r3, #0]
 8012fb2:	4a1a      	ldr	r2, [pc, #104]	@ (801301c <HAL_UART_Receive_DMA+0x9c>)
 8012fb4:	4293      	cmp	r3, r2
 8012fb6:	d024      	beq.n	8013002 <HAL_UART_Receive_DMA+0x82>
 8012fb8:	68fb      	ldr	r3, [r7, #12]
 8012fba:	681b      	ldr	r3, [r3, #0]
 8012fbc:	4a18      	ldr	r2, [pc, #96]	@ (8013020 <HAL_UART_Receive_DMA+0xa0>)
 8012fbe:	4293      	cmp	r3, r2
 8012fc0:	d01f      	beq.n	8013002 <HAL_UART_Receive_DMA+0x82>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012fc2:	68fb      	ldr	r3, [r7, #12]
 8012fc4:	681b      	ldr	r3, [r3, #0]
 8012fc6:	685b      	ldr	r3, [r3, #4]
 8012fc8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	d018      	beq.n	8013002 <HAL_UART_Receive_DMA+0x82>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012fd0:	68fb      	ldr	r3, [r7, #12]
 8012fd2:	681b      	ldr	r3, [r3, #0]
 8012fd4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012fd6:	697b      	ldr	r3, [r7, #20]
 8012fd8:	e853 3f00 	ldrex	r3, [r3]
 8012fdc:	613b      	str	r3, [r7, #16]
   return(result);
 8012fde:	693b      	ldr	r3, [r7, #16]
 8012fe0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8012fe4:	627b      	str	r3, [r7, #36]	@ 0x24
 8012fe6:	68fb      	ldr	r3, [r7, #12]
 8012fe8:	681b      	ldr	r3, [r3, #0]
 8012fea:	461a      	mov	r2, r3
 8012fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012fee:	623b      	str	r3, [r7, #32]
 8012ff0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012ff2:	69f9      	ldr	r1, [r7, #28]
 8012ff4:	6a3a      	ldr	r2, [r7, #32]
 8012ff6:	e841 2300 	strex	r3, r2, [r1]
 8012ffa:	61bb      	str	r3, [r7, #24]
   return(result);
 8012ffc:	69bb      	ldr	r3, [r7, #24]
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d1e6      	bne.n	8012fd0 <HAL_UART_Receive_DMA+0x50>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8013002:	88fb      	ldrh	r3, [r7, #6]
 8013004:	461a      	mov	r2, r3
 8013006:	68b9      	ldr	r1, [r7, #8]
 8013008:	68f8      	ldr	r0, [r7, #12]
 801300a:	f000 ffbd 	bl	8013f88 <UART_Start_Receive_DMA>
 801300e:	4603      	mov	r3, r0
 8013010:	e000      	b.n	8013014 <HAL_UART_Receive_DMA+0x94>
  }
  else
  {
    return HAL_BUSY;
 8013012:	2302      	movs	r3, #2
  }
}
 8013014:	4618      	mov	r0, r3
 8013016:	3728      	adds	r7, #40	@ 0x28
 8013018:	46bd      	mov	sp, r7
 801301a:	bd80      	pop	{r7, pc}
 801301c:	44002400 	.word	0x44002400
 8013020:	54002400 	.word	0x54002400

08013024 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8013024:	b580      	push	{r7, lr}
 8013026:	b0ae      	sub	sp, #184	@ 0xb8
 8013028:	af00      	add	r7, sp, #0
 801302a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	681b      	ldr	r3, [r3, #0]
 8013030:	69db      	ldr	r3, [r3, #28]
 8013032:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	681b      	ldr	r3, [r3, #0]
 801303a:	681b      	ldr	r3, [r3, #0]
 801303c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	681b      	ldr	r3, [r3, #0]
 8013044:	689b      	ldr	r3, [r3, #8]
 8013046:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801304a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 801304e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8013052:	4013      	ands	r3, r2
 8013054:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (errorflags == 0U)
 8013058:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801305c:	2b00      	cmp	r3, #0
 801305e:	d11b      	bne.n	8013098 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8013060:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8013064:	f003 0320 	and.w	r3, r3, #32
 8013068:	2b00      	cmp	r3, #0
 801306a:	d015      	beq.n	8013098 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801306c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8013070:	f003 0320 	and.w	r3, r3, #32
 8013074:	2b00      	cmp	r3, #0
 8013076:	d105      	bne.n	8013084 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8013078:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801307c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8013080:	2b00      	cmp	r3, #0
 8013082:	d009      	beq.n	8013098 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013088:	2b00      	cmp	r3, #0
 801308a:	f000 8293 	beq.w	80135b4 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013092:	6878      	ldr	r0, [r7, #4]
 8013094:	4798      	blx	r3
      }
      return;
 8013096:	e28d      	b.n	80135b4 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8013098:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801309c:	2b00      	cmp	r3, #0
 801309e:	f000 80fd 	beq.w	801329c <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80130a2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80130a6:	4b7a      	ldr	r3, [pc, #488]	@ (8013290 <HAL_UART_IRQHandler+0x26c>)
 80130a8:	4013      	ands	r3, r2
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	d106      	bne.n	80130bc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80130ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80130b2:	4b78      	ldr	r3, [pc, #480]	@ (8013294 <HAL_UART_IRQHandler+0x270>)
 80130b4:	4013      	ands	r3, r2
 80130b6:	2b00      	cmp	r3, #0
 80130b8:	f000 80f0 	beq.w	801329c <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80130bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80130c0:	f003 0301 	and.w	r3, r3, #1
 80130c4:	2b00      	cmp	r3, #0
 80130c6:	d011      	beq.n	80130ec <HAL_UART_IRQHandler+0xc8>
 80130c8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80130cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	d00b      	beq.n	80130ec <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	681b      	ldr	r3, [r3, #0]
 80130d8:	2201      	movs	r2, #1
 80130da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80130e2:	f043 0201 	orr.w	r2, r3, #1
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80130ec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80130f0:	f003 0302 	and.w	r3, r3, #2
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	d011      	beq.n	801311c <HAL_UART_IRQHandler+0xf8>
 80130f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80130fc:	f003 0301 	and.w	r3, r3, #1
 8013100:	2b00      	cmp	r3, #0
 8013102:	d00b      	beq.n	801311c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	681b      	ldr	r3, [r3, #0]
 8013108:	2202      	movs	r2, #2
 801310a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013112:	f043 0204 	orr.w	r2, r3, #4
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801311c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8013120:	f003 0304 	and.w	r3, r3, #4
 8013124:	2b00      	cmp	r3, #0
 8013126:	d011      	beq.n	801314c <HAL_UART_IRQHandler+0x128>
 8013128:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801312c:	f003 0301 	and.w	r3, r3, #1
 8013130:	2b00      	cmp	r3, #0
 8013132:	d00b      	beq.n	801314c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	681b      	ldr	r3, [r3, #0]
 8013138:	2204      	movs	r2, #4
 801313a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013142:	f043 0202 	orr.w	r2, r3, #2
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 801314c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8013150:	f003 0308 	and.w	r3, r3, #8
 8013154:	2b00      	cmp	r3, #0
 8013156:	d017      	beq.n	8013188 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8013158:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801315c:	f003 0320 	and.w	r3, r3, #32
 8013160:	2b00      	cmp	r3, #0
 8013162:	d105      	bne.n	8013170 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8013164:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8013168:	4b49      	ldr	r3, [pc, #292]	@ (8013290 <HAL_UART_IRQHandler+0x26c>)
 801316a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801316c:	2b00      	cmp	r3, #0
 801316e:	d00b      	beq.n	8013188 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	681b      	ldr	r3, [r3, #0]
 8013174:	2208      	movs	r2, #8
 8013176:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801317e:	f043 0208 	orr.w	r2, r3, #8
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8013188:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801318c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8013190:	2b00      	cmp	r3, #0
 8013192:	d012      	beq.n	80131ba <HAL_UART_IRQHandler+0x196>
 8013194:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8013198:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 801319c:	2b00      	cmp	r3, #0
 801319e:	d00c      	beq.n	80131ba <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	681b      	ldr	r3, [r3, #0]
 80131a4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80131a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80131b0:	f043 0220 	orr.w	r2, r3, #32
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	f000 81f9 	beq.w	80135b8 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80131c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80131ca:	f003 0320 	and.w	r3, r3, #32
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	d013      	beq.n	80131fa <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80131d2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80131d6:	f003 0320 	and.w	r3, r3, #32
 80131da:	2b00      	cmp	r3, #0
 80131dc:	d105      	bne.n	80131ea <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80131de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80131e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80131e6:	2b00      	cmp	r3, #0
 80131e8:	d007      	beq.n	80131fa <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	d003      	beq.n	80131fa <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80131f6:	6878      	ldr	r0, [r7, #4]
 80131f8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013200:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	681b      	ldr	r3, [r3, #0]
 8013208:	689b      	ldr	r3, [r3, #8]
 801320a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801320e:	2b40      	cmp	r3, #64	@ 0x40
 8013210:	d005      	beq.n	801321e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8013212:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8013216:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801321a:	2b00      	cmp	r3, #0
 801321c:	d02e      	beq.n	801327c <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801321e:	6878      	ldr	r0, [r7, #4]
 8013220:	f000 ffeb 	bl	80141fa <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	681b      	ldr	r3, [r3, #0]
 8013228:	689b      	ldr	r3, [r3, #8]
 801322a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801322e:	2b40      	cmp	r3, #64	@ 0x40
 8013230:	d120      	bne.n	8013274 <HAL_UART_IRQHandler+0x250>
        {
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013238:	2b00      	cmp	r3, #0
 801323a:	d017      	beq.n	801326c <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013242:	4a15      	ldr	r2, [pc, #84]	@ (8013298 <HAL_UART_IRQHandler+0x274>)
 8013244:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801324c:	4618      	mov	r0, r3
 801324e:	f7f5 ffb0 	bl	80091b2 <HAL_DMA_Abort_IT>
 8013252:	4603      	mov	r3, r0
 8013254:	2b00      	cmp	r3, #0
 8013256:	d019      	beq.n	801328c <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801325e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013260:	687a      	ldr	r2, [r7, #4]
 8013262:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8013266:	4610      	mov	r0, r2
 8013268:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801326a:	e00f      	b.n	801328c <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801326c:	6878      	ldr	r0, [r7, #4]
 801326e:	f000 f9b7 	bl	80135e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013272:	e00b      	b.n	801328c <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8013274:	6878      	ldr	r0, [r7, #4]
 8013276:	f000 f9b3 	bl	80135e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801327a:	e007      	b.n	801328c <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801327c:	6878      	ldr	r0, [r7, #4]
 801327e:	f000 f9af 	bl	80135e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	2200      	movs	r2, #0
 8013286:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 801328a:	e195      	b.n	80135b8 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801328c:	bf00      	nop
    return;
 801328e:	e193      	b.n	80135b8 <HAL_UART_IRQHandler+0x594>
 8013290:	10000001 	.word	0x10000001
 8013294:	04000120 	.word	0x04000120
 8013298:	08014477 	.word	0x08014477

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80132a0:	2b01      	cmp	r3, #1
 80132a2:	f040 8129 	bne.w	80134f8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80132a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80132aa:	f003 0310 	and.w	r3, r3, #16
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	f000 8122 	beq.w	80134f8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80132b4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80132b8:	f003 0310 	and.w	r3, r3, #16
 80132bc:	2b00      	cmp	r3, #0
 80132be:	f000 811b 	beq.w	80134f8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	681b      	ldr	r3, [r3, #0]
 80132c6:	2210      	movs	r2, #16
 80132c8:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	681b      	ldr	r3, [r3, #0]
 80132ce:	689b      	ldr	r3, [r3, #8]
 80132d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80132d4:	2b40      	cmp	r3, #64	@ 0x40
 80132d6:	f040 8091 	bne.w	80133fc <HAL_UART_IRQHandler+0x3d8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80132e0:	681b      	ldr	r3, [r3, #0]
 80132e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80132e4:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
      if ((nb_remaining_rx_data > 0U)
 80132e8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	f000 8165 	beq.w	80135bc <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80132f8:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 80132fc:	429a      	cmp	r2, r3
 80132fe:	f080 815d 	bcs.w	80135bc <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 8013308:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013312:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013314:	2b81      	cmp	r3, #129	@ 0x81
 8013316:	d060      	beq.n	80133da <HAL_UART_IRQHandler+0x3b6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	681b      	ldr	r3, [r3, #0]
 801331c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801331e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8013320:	e853 3f00 	ldrex	r3, [r3]
 8013324:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8013326:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013328:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801332c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	681b      	ldr	r3, [r3, #0]
 8013334:	461a      	mov	r2, r3
 8013336:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801333a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801333e:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013340:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8013342:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8013346:	e841 2300 	strex	r3, r2, [r1]
 801334a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 801334c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801334e:	2b00      	cmp	r3, #0
 8013350:	d1e2      	bne.n	8013318 <HAL_UART_IRQHandler+0x2f4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	681b      	ldr	r3, [r3, #0]
 8013356:	3308      	adds	r3, #8
 8013358:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801335a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801335c:	e853 3f00 	ldrex	r3, [r3]
 8013360:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8013362:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013364:	f023 0301 	bic.w	r3, r3, #1
 8013368:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	681b      	ldr	r3, [r3, #0]
 8013370:	3308      	adds	r3, #8
 8013372:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8013376:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8013378:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801337a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801337c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801337e:	e841 2300 	strex	r3, r2, [r1]
 8013382:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8013384:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013386:	2b00      	cmp	r3, #0
 8013388:	d1e3      	bne.n	8013352 <HAL_UART_IRQHandler+0x32e>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	2220      	movs	r2, #32
 801338e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	2200      	movs	r2, #0
 8013396:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	681b      	ldr	r3, [r3, #0]
 801339c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801339e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80133a0:	e853 3f00 	ldrex	r3, [r3]
 80133a4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80133a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80133a8:	f023 0310 	bic.w	r3, r3, #16
 80133ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	681b      	ldr	r3, [r3, #0]
 80133b4:	461a      	mov	r2, r3
 80133b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80133ba:	65bb      	str	r3, [r7, #88]	@ 0x58
 80133bc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80133be:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80133c0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80133c2:	e841 2300 	strex	r3, r2, [r1]
 80133c6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80133c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80133ca:	2b00      	cmp	r3, #0
 80133cc:	d1e4      	bne.n	8013398 <HAL_UART_IRQHandler+0x374>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80133d4:	4618      	mov	r0, r3
 80133d6:	f7f5 fe70 	bl	80090ba <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	2202      	movs	r2, #2
 80133de:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80133ec:	b29b      	uxth	r3, r3
 80133ee:	1ad3      	subs	r3, r2, r3
 80133f0:	b29b      	uxth	r3, r3
 80133f2:	4619      	mov	r1, r3
 80133f4:	6878      	ldr	r0, [r7, #4]
 80133f6:	f7f0 f85d 	bl	80034b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80133fa:	e0df      	b.n	80135bc <HAL_UART_IRQHandler+0x598>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8013408:	b29b      	uxth	r3, r3
 801340a:	1ad3      	subs	r3, r2, r3
 801340c:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
      if ((huart->RxXferCount > 0U)
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8013416:	b29b      	uxth	r3, r3
 8013418:	2b00      	cmp	r3, #0
 801341a:	f000 80d1 	beq.w	80135c0 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 801341e:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8013422:	2b00      	cmp	r3, #0
 8013424:	f000 80cc 	beq.w	80135c0 <HAL_UART_IRQHandler+0x59c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	681b      	ldr	r3, [r3, #0]
 801342c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801342e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013430:	e853 3f00 	ldrex	r3, [r3]
 8013434:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8013436:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013438:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801343c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	681b      	ldr	r3, [r3, #0]
 8013444:	461a      	mov	r2, r3
 8013446:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801344a:	647b      	str	r3, [r7, #68]	@ 0x44
 801344c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801344e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8013450:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013452:	e841 2300 	strex	r3, r2, [r1]
 8013456:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8013458:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801345a:	2b00      	cmp	r3, #0
 801345c:	d1e4      	bne.n	8013428 <HAL_UART_IRQHandler+0x404>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801345e:	687b      	ldr	r3, [r7, #4]
 8013460:	681b      	ldr	r3, [r3, #0]
 8013462:	3308      	adds	r3, #8
 8013464:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013468:	e853 3f00 	ldrex	r3, [r3]
 801346c:	623b      	str	r3, [r7, #32]
   return(result);
 801346e:	6a3b      	ldr	r3, [r7, #32]
 8013470:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8013474:	f023 0301 	bic.w	r3, r3, #1
 8013478:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	681b      	ldr	r3, [r3, #0]
 8013480:	3308      	adds	r3, #8
 8013482:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8013486:	633a      	str	r2, [r7, #48]	@ 0x30
 8013488:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801348a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801348c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801348e:	e841 2300 	strex	r3, r2, [r1]
 8013492:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8013494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013496:	2b00      	cmp	r3, #0
 8013498:	d1e1      	bne.n	801345e <HAL_UART_IRQHandler+0x43a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	2220      	movs	r2, #32
 801349e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	2200      	movs	r2, #0
 80134a6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	2200      	movs	r2, #0
 80134ac:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	681b      	ldr	r3, [r3, #0]
 80134b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80134b4:	693b      	ldr	r3, [r7, #16]
 80134b6:	e853 3f00 	ldrex	r3, [r3]
 80134ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80134bc:	68fb      	ldr	r3, [r7, #12]
 80134be:	f023 0310 	bic.w	r3, r3, #16
 80134c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80134c6:	687b      	ldr	r3, [r7, #4]
 80134c8:	681b      	ldr	r3, [r3, #0]
 80134ca:	461a      	mov	r2, r3
 80134cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80134d0:	61fb      	str	r3, [r7, #28]
 80134d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80134d4:	69b9      	ldr	r1, [r7, #24]
 80134d6:	69fa      	ldr	r2, [r7, #28]
 80134d8:	e841 2300 	strex	r3, r2, [r1]
 80134dc:	617b      	str	r3, [r7, #20]
   return(result);
 80134de:	697b      	ldr	r3, [r7, #20]
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	d1e4      	bne.n	80134ae <HAL_UART_IRQHandler+0x48a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	2202      	movs	r2, #2
 80134e8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80134ea:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 80134ee:	4619      	mov	r1, r3
 80134f0:	6878      	ldr	r0, [r7, #4]
 80134f2:	f7ef ffdf 	bl	80034b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80134f6:	e063      	b.n	80135c0 <HAL_UART_IRQHandler+0x59c>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80134f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80134fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8013500:	2b00      	cmp	r3, #0
 8013502:	d00e      	beq.n	8013522 <HAL_UART_IRQHandler+0x4fe>
 8013504:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8013508:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801350c:	2b00      	cmp	r3, #0
 801350e:	d008      	beq.n	8013522 <HAL_UART_IRQHandler+0x4fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	681b      	ldr	r3, [r3, #0]
 8013514:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8013518:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 801351a:	6878      	ldr	r0, [r7, #4]
 801351c:	f001 fd24 	bl	8014f68 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8013520:	e051      	b.n	80135c6 <HAL_UART_IRQHandler+0x5a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8013522:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8013526:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801352a:	2b00      	cmp	r3, #0
 801352c:	d014      	beq.n	8013558 <HAL_UART_IRQHandler+0x534>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 801352e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8013532:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013536:	2b00      	cmp	r3, #0
 8013538:	d105      	bne.n	8013546 <HAL_UART_IRQHandler+0x522>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 801353a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801353e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8013542:	2b00      	cmp	r3, #0
 8013544:	d008      	beq.n	8013558 <HAL_UART_IRQHandler+0x534>
  {
    if (huart->TxISR != NULL)
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801354a:	2b00      	cmp	r3, #0
 801354c:	d03a      	beq.n	80135c4 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013552:	6878      	ldr	r0, [r7, #4]
 8013554:	4798      	blx	r3
    }
    return;
 8013556:	e035      	b.n	80135c4 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8013558:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801355c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013560:	2b00      	cmp	r3, #0
 8013562:	d009      	beq.n	8013578 <HAL_UART_IRQHandler+0x554>
 8013564:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8013568:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801356c:	2b00      	cmp	r3, #0
 801356e:	d003      	beq.n	8013578 <HAL_UART_IRQHandler+0x554>
  {
    UART_EndTransmit_IT(huart);
 8013570:	6878      	ldr	r0, [r7, #4]
 8013572:	f000 ff96 	bl	80144a2 <UART_EndTransmit_IT>
    return;
 8013576:	e026      	b.n	80135c6 <HAL_UART_IRQHandler+0x5a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8013578:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801357c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8013580:	2b00      	cmp	r3, #0
 8013582:	d009      	beq.n	8013598 <HAL_UART_IRQHandler+0x574>
 8013584:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8013588:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 801358c:	2b00      	cmp	r3, #0
 801358e:	d003      	beq.n	8013598 <HAL_UART_IRQHandler+0x574>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8013590:	6878      	ldr	r0, [r7, #4]
 8013592:	f001 fcfd 	bl	8014f90 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8013596:	e016      	b.n	80135c6 <HAL_UART_IRQHandler+0x5a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8013598:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801359c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80135a0:	2b00      	cmp	r3, #0
 80135a2:	d010      	beq.n	80135c6 <HAL_UART_IRQHandler+0x5a2>
 80135a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	da0c      	bge.n	80135c6 <HAL_UART_IRQHandler+0x5a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80135ac:	6878      	ldr	r0, [r7, #4]
 80135ae:	f001 fce5 	bl	8014f7c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80135b2:	e008      	b.n	80135c6 <HAL_UART_IRQHandler+0x5a2>
      return;
 80135b4:	bf00      	nop
 80135b6:	e006      	b.n	80135c6 <HAL_UART_IRQHandler+0x5a2>
    return;
 80135b8:	bf00      	nop
 80135ba:	e004      	b.n	80135c6 <HAL_UART_IRQHandler+0x5a2>
      return;
 80135bc:	bf00      	nop
 80135be:	e002      	b.n	80135c6 <HAL_UART_IRQHandler+0x5a2>
      return;
 80135c0:	bf00      	nop
 80135c2:	e000      	b.n	80135c6 <HAL_UART_IRQHandler+0x5a2>
    return;
 80135c4:	bf00      	nop
  }
}
 80135c6:	37b8      	adds	r7, #184	@ 0xb8
 80135c8:	46bd      	mov	sp, r7
 80135ca:	bd80      	pop	{r7, pc}

080135cc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80135cc:	b480      	push	{r7}
 80135ce:	b083      	sub	sp, #12
 80135d0:	af00      	add	r7, sp, #0
 80135d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80135d4:	bf00      	nop
 80135d6:	370c      	adds	r7, #12
 80135d8:	46bd      	mov	sp, r7
 80135da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135de:	4770      	bx	lr

080135e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80135e0:	b480      	push	{r7}
 80135e2:	b083      	sub	sp, #12
 80135e4:	af00      	add	r7, sp, #0
 80135e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80135e8:	bf00      	nop
 80135ea:	370c      	adds	r7, #12
 80135ec:	46bd      	mov	sp, r7
 80135ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135f2:	4770      	bx	lr

080135f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80135f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80135f8:	b094      	sub	sp, #80	@ 0x50
 80135fa:	af00      	add	r7, sp, #0
 80135fc:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80135fe:	2300      	movs	r3, #0
 8013600:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8013604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013606:	681a      	ldr	r2, [r3, #0]
 8013608:	4b78      	ldr	r3, [pc, #480]	@ (80137ec <UART_SetConfig+0x1f8>)
 801360a:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801360c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801360e:	689a      	ldr	r2, [r3, #8]
 8013610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013612:	691b      	ldr	r3, [r3, #16]
 8013614:	431a      	orrs	r2, r3
 8013616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013618:	695b      	ldr	r3, [r3, #20]
 801361a:	431a      	orrs	r2, r3
 801361c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801361e:	69db      	ldr	r3, [r3, #28]
 8013620:	4313      	orrs	r3, r2
 8013622:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8013624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013626:	681b      	ldr	r3, [r3, #0]
 8013628:	681b      	ldr	r3, [r3, #0]
 801362a:	4971      	ldr	r1, [pc, #452]	@ (80137f0 <UART_SetConfig+0x1fc>)
 801362c:	4019      	ands	r1, r3
 801362e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013630:	681a      	ldr	r2, [r3, #0]
 8013632:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013634:	430b      	orrs	r3, r1
 8013636:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8013638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801363a:	681b      	ldr	r3, [r3, #0]
 801363c:	685b      	ldr	r3, [r3, #4]
 801363e:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8013642:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013644:	68d9      	ldr	r1, [r3, #12]
 8013646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013648:	681a      	ldr	r2, [r3, #0]
 801364a:	ea40 0301 	orr.w	r3, r0, r1
 801364e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8013650:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013652:	699b      	ldr	r3, [r3, #24]
 8013654:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8013656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013658:	681a      	ldr	r2, [r3, #0]
 801365a:	4b64      	ldr	r3, [pc, #400]	@ (80137ec <UART_SetConfig+0x1f8>)
 801365c:	429a      	cmp	r2, r3
 801365e:	d009      	beq.n	8013674 <UART_SetConfig+0x80>
 8013660:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013662:	681a      	ldr	r2, [r3, #0]
 8013664:	4b63      	ldr	r3, [pc, #396]	@ (80137f4 <UART_SetConfig+0x200>)
 8013666:	429a      	cmp	r2, r3
 8013668:	d004      	beq.n	8013674 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801366a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801366c:	6a1a      	ldr	r2, [r3, #32]
 801366e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013670:	4313      	orrs	r3, r2
 8013672:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8013674:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013676:	681b      	ldr	r3, [r3, #0]
 8013678:	689b      	ldr	r3, [r3, #8]
 801367a:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 801367e:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8013682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013684:	681a      	ldr	r2, [r3, #0]
 8013686:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013688:	430b      	orrs	r3, r1
 801368a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801368c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801368e:	681b      	ldr	r3, [r3, #0]
 8013690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013692:	f023 000f 	bic.w	r0, r3, #15
 8013696:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013698:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 801369a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801369c:	681a      	ldr	r2, [r3, #0]
 801369e:	ea40 0301 	orr.w	r3, r0, r1
 80136a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80136a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80136a6:	681a      	ldr	r2, [r3, #0]
 80136a8:	4b53      	ldr	r3, [pc, #332]	@ (80137f8 <UART_SetConfig+0x204>)
 80136aa:	429a      	cmp	r2, r3
 80136ac:	d102      	bne.n	80136b4 <UART_SetConfig+0xc0>
 80136ae:	2301      	movs	r3, #1
 80136b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80136b2:	e066      	b.n	8013782 <UART_SetConfig+0x18e>
 80136b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80136b6:	681a      	ldr	r2, [r3, #0]
 80136b8:	4b50      	ldr	r3, [pc, #320]	@ (80137fc <UART_SetConfig+0x208>)
 80136ba:	429a      	cmp	r2, r3
 80136bc:	d102      	bne.n	80136c4 <UART_SetConfig+0xd0>
 80136be:	2302      	movs	r3, #2
 80136c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80136c2:	e05e      	b.n	8013782 <UART_SetConfig+0x18e>
 80136c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80136c6:	681a      	ldr	r2, [r3, #0]
 80136c8:	4b4d      	ldr	r3, [pc, #308]	@ (8013800 <UART_SetConfig+0x20c>)
 80136ca:	429a      	cmp	r2, r3
 80136cc:	d102      	bne.n	80136d4 <UART_SetConfig+0xe0>
 80136ce:	2304      	movs	r3, #4
 80136d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80136d2:	e056      	b.n	8013782 <UART_SetConfig+0x18e>
 80136d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80136d6:	681a      	ldr	r2, [r3, #0]
 80136d8:	4b4a      	ldr	r3, [pc, #296]	@ (8013804 <UART_SetConfig+0x210>)
 80136da:	429a      	cmp	r2, r3
 80136dc:	d102      	bne.n	80136e4 <UART_SetConfig+0xf0>
 80136de:	2308      	movs	r3, #8
 80136e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80136e2:	e04e      	b.n	8013782 <UART_SetConfig+0x18e>
 80136e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80136e6:	681a      	ldr	r2, [r3, #0]
 80136e8:	4b47      	ldr	r3, [pc, #284]	@ (8013808 <UART_SetConfig+0x214>)
 80136ea:	429a      	cmp	r2, r3
 80136ec:	d102      	bne.n	80136f4 <UART_SetConfig+0x100>
 80136ee:	2310      	movs	r3, #16
 80136f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80136f2:	e046      	b.n	8013782 <UART_SetConfig+0x18e>
 80136f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80136f6:	681a      	ldr	r2, [r3, #0]
 80136f8:	4b44      	ldr	r3, [pc, #272]	@ (801380c <UART_SetConfig+0x218>)
 80136fa:	429a      	cmp	r2, r3
 80136fc:	d102      	bne.n	8013704 <UART_SetConfig+0x110>
 80136fe:	2320      	movs	r3, #32
 8013700:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013702:	e03e      	b.n	8013782 <UART_SetConfig+0x18e>
 8013704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013706:	681a      	ldr	r2, [r3, #0]
 8013708:	4b41      	ldr	r3, [pc, #260]	@ (8013810 <UART_SetConfig+0x21c>)
 801370a:	429a      	cmp	r2, r3
 801370c:	d102      	bne.n	8013714 <UART_SetConfig+0x120>
 801370e:	2340      	movs	r3, #64	@ 0x40
 8013710:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013712:	e036      	b.n	8013782 <UART_SetConfig+0x18e>
 8013714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013716:	681a      	ldr	r2, [r3, #0]
 8013718:	4b3e      	ldr	r3, [pc, #248]	@ (8013814 <UART_SetConfig+0x220>)
 801371a:	429a      	cmp	r2, r3
 801371c:	d102      	bne.n	8013724 <UART_SetConfig+0x130>
 801371e:	2380      	movs	r3, #128	@ 0x80
 8013720:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013722:	e02e      	b.n	8013782 <UART_SetConfig+0x18e>
 8013724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013726:	681a      	ldr	r2, [r3, #0]
 8013728:	4b3b      	ldr	r3, [pc, #236]	@ (8013818 <UART_SetConfig+0x224>)
 801372a:	429a      	cmp	r2, r3
 801372c:	d103      	bne.n	8013736 <UART_SetConfig+0x142>
 801372e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8013732:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013734:	e025      	b.n	8013782 <UART_SetConfig+0x18e>
 8013736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013738:	681a      	ldr	r2, [r3, #0]
 801373a:	4b38      	ldr	r3, [pc, #224]	@ (801381c <UART_SetConfig+0x228>)
 801373c:	429a      	cmp	r2, r3
 801373e:	d103      	bne.n	8013748 <UART_SetConfig+0x154>
 8013740:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8013744:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013746:	e01c      	b.n	8013782 <UART_SetConfig+0x18e>
 8013748:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801374a:	681a      	ldr	r2, [r3, #0]
 801374c:	4b34      	ldr	r3, [pc, #208]	@ (8013820 <UART_SetConfig+0x22c>)
 801374e:	429a      	cmp	r2, r3
 8013750:	d103      	bne.n	801375a <UART_SetConfig+0x166>
 8013752:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013756:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013758:	e013      	b.n	8013782 <UART_SetConfig+0x18e>
 801375a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801375c:	681a      	ldr	r2, [r3, #0]
 801375e:	4b31      	ldr	r3, [pc, #196]	@ (8013824 <UART_SetConfig+0x230>)
 8013760:	429a      	cmp	r2, r3
 8013762:	d103      	bne.n	801376c <UART_SetConfig+0x178>
 8013764:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8013768:	64bb      	str	r3, [r7, #72]	@ 0x48
 801376a:	e00a      	b.n	8013782 <UART_SetConfig+0x18e>
 801376c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801376e:	681a      	ldr	r2, [r3, #0]
 8013770:	4b1e      	ldr	r3, [pc, #120]	@ (80137ec <UART_SetConfig+0x1f8>)
 8013772:	429a      	cmp	r2, r3
 8013774:	d103      	bne.n	801377e <UART_SetConfig+0x18a>
 8013776:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801377a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801377c:	e001      	b.n	8013782 <UART_SetConfig+0x18e>
 801377e:	2300      	movs	r3, #0
 8013780:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8013782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013784:	681a      	ldr	r2, [r3, #0]
 8013786:	4b19      	ldr	r3, [pc, #100]	@ (80137ec <UART_SetConfig+0x1f8>)
 8013788:	429a      	cmp	r2, r3
 801378a:	d005      	beq.n	8013798 <UART_SetConfig+0x1a4>
 801378c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801378e:	681a      	ldr	r2, [r3, #0]
 8013790:	4b18      	ldr	r3, [pc, #96]	@ (80137f4 <UART_SetConfig+0x200>)
 8013792:	429a      	cmp	r2, r3
 8013794:	f040 8094 	bne.w	80138c0 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8013798:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801379a:	2200      	movs	r2, #0
 801379c:	623b      	str	r3, [r7, #32]
 801379e:	627a      	str	r2, [r7, #36]	@ 0x24
 80137a0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80137a4:	f7fb fcc4 	bl	800f130 <HAL_RCCEx_GetPeriphCLKFreq>
 80137a8:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 80137aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	f000 80f7 	beq.w	80139a0 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80137b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80137b6:	4a1c      	ldr	r2, [pc, #112]	@ (8013828 <UART_SetConfig+0x234>)
 80137b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80137bc:	461a      	mov	r2, r3
 80137be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80137c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80137c4:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80137c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137c8:	685a      	ldr	r2, [r3, #4]
 80137ca:	4613      	mov	r3, r2
 80137cc:	005b      	lsls	r3, r3, #1
 80137ce:	4413      	add	r3, r2
 80137d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80137d2:	429a      	cmp	r2, r3
 80137d4:	d305      	bcc.n	80137e2 <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80137d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137d8:	685b      	ldr	r3, [r3, #4]
 80137da:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80137dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80137de:	429a      	cmp	r2, r3
 80137e0:	d924      	bls.n	801382c <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 80137e2:	2301      	movs	r3, #1
 80137e4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80137e8:	e069      	b.n	80138be <UART_SetConfig+0x2ca>
 80137ea:	bf00      	nop
 80137ec:	44002400 	.word	0x44002400
 80137f0:	cfff69f3 	.word	0xcfff69f3
 80137f4:	54002400 	.word	0x54002400
 80137f8:	40013800 	.word	0x40013800
 80137fc:	40004400 	.word	0x40004400
 8013800:	40004800 	.word	0x40004800
 8013804:	40004c00 	.word	0x40004c00
 8013808:	40005000 	.word	0x40005000
 801380c:	40006400 	.word	0x40006400
 8013810:	40007800 	.word	0x40007800
 8013814:	40007c00 	.word	0x40007c00
 8013818:	40008000 	.word	0x40008000
 801381c:	40006800 	.word	0x40006800
 8013820:	40006c00 	.word	0x40006c00
 8013824:	40008400 	.word	0x40008400
 8013828:	08024374 	.word	0x08024374
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801382c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801382e:	2200      	movs	r2, #0
 8013830:	61bb      	str	r3, [r7, #24]
 8013832:	61fa      	str	r2, [r7, #28]
 8013834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013838:	4a64      	ldr	r2, [pc, #400]	@ (80139cc <UART_SetConfig+0x3d8>)
 801383a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801383e:	b29b      	uxth	r3, r3
 8013840:	2200      	movs	r2, #0
 8013842:	613b      	str	r3, [r7, #16]
 8013844:	617a      	str	r2, [r7, #20]
 8013846:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801384a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801384e:	f7ed fa35 	bl	8000cbc <__aeabi_uldivmod>
 8013852:	4602      	mov	r2, r0
 8013854:	460b      	mov	r3, r1
 8013856:	4610      	mov	r0, r2
 8013858:	4619      	mov	r1, r3
 801385a:	f04f 0200 	mov.w	r2, #0
 801385e:	f04f 0300 	mov.w	r3, #0
 8013862:	020b      	lsls	r3, r1, #8
 8013864:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8013868:	0202      	lsls	r2, r0, #8
 801386a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801386c:	6849      	ldr	r1, [r1, #4]
 801386e:	0849      	lsrs	r1, r1, #1
 8013870:	2000      	movs	r0, #0
 8013872:	460c      	mov	r4, r1
 8013874:	4605      	mov	r5, r0
 8013876:	eb12 0804 	adds.w	r8, r2, r4
 801387a:	eb43 0905 	adc.w	r9, r3, r5
 801387e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013880:	685b      	ldr	r3, [r3, #4]
 8013882:	2200      	movs	r2, #0
 8013884:	60bb      	str	r3, [r7, #8]
 8013886:	60fa      	str	r2, [r7, #12]
 8013888:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801388c:	4640      	mov	r0, r8
 801388e:	4649      	mov	r1, r9
 8013890:	f7ed fa14 	bl	8000cbc <__aeabi_uldivmod>
 8013894:	4602      	mov	r2, r0
 8013896:	460b      	mov	r3, r1
 8013898:	4613      	mov	r3, r2
 801389a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801389c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801389e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80138a2:	d308      	bcc.n	80138b6 <UART_SetConfig+0x2c2>
 80138a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80138a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80138aa:	d204      	bcs.n	80138b6 <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 80138ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80138ae:	681b      	ldr	r3, [r3, #0]
 80138b0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80138b2:	60da      	str	r2, [r3, #12]
 80138b4:	e003      	b.n	80138be <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 80138b6:	2301      	movs	r3, #1
 80138b8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 80138bc:	e070      	b.n	80139a0 <UART_SetConfig+0x3ac>
 80138be:	e06f      	b.n	80139a0 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80138c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80138c2:	69db      	ldr	r3, [r3, #28]
 80138c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80138c8:	d13c      	bne.n	8013944 <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80138ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80138cc:	2200      	movs	r2, #0
 80138ce:	603b      	str	r3, [r7, #0]
 80138d0:	607a      	str	r2, [r7, #4]
 80138d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80138d6:	f7fb fc2b 	bl	800f130 <HAL_RCCEx_GetPeriphCLKFreq>
 80138da:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80138dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80138de:	2b00      	cmp	r3, #0
 80138e0:	d05e      	beq.n	80139a0 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80138e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80138e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80138e6:	4a39      	ldr	r2, [pc, #228]	@ (80139cc <UART_SetConfig+0x3d8>)
 80138e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80138ec:	461a      	mov	r2, r3
 80138ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80138f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80138f4:	005a      	lsls	r2, r3, #1
 80138f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80138f8:	685b      	ldr	r3, [r3, #4]
 80138fa:	085b      	lsrs	r3, r3, #1
 80138fc:	441a      	add	r2, r3
 80138fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013900:	685b      	ldr	r3, [r3, #4]
 8013902:	fbb2 f3f3 	udiv	r3, r2, r3
 8013906:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013908:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801390a:	2b0f      	cmp	r3, #15
 801390c:	d916      	bls.n	801393c <UART_SetConfig+0x348>
 801390e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013910:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013914:	d212      	bcs.n	801393c <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8013916:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013918:	b29b      	uxth	r3, r3
 801391a:	f023 030f 	bic.w	r3, r3, #15
 801391e:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8013920:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013922:	085b      	lsrs	r3, r3, #1
 8013924:	b29b      	uxth	r3, r3
 8013926:	f003 0307 	and.w	r3, r3, #7
 801392a:	b29a      	uxth	r2, r3
 801392c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801392e:	4313      	orrs	r3, r2
 8013930:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8013932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013934:	681b      	ldr	r3, [r3, #0]
 8013936:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8013938:	60da      	str	r2, [r3, #12]
 801393a:	e031      	b.n	80139a0 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 801393c:	2301      	movs	r3, #1
 801393e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8013942:	e02d      	b.n	80139a0 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8013944:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013946:	2200      	movs	r2, #0
 8013948:	469a      	mov	sl, r3
 801394a:	4693      	mov	fp, r2
 801394c:	4650      	mov	r0, sl
 801394e:	4659      	mov	r1, fp
 8013950:	f7fb fbee 	bl	800f130 <HAL_RCCEx_GetPeriphCLKFreq>
 8013954:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8013956:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013958:	2b00      	cmp	r3, #0
 801395a:	d021      	beq.n	80139a0 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801395c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801395e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013960:	4a1a      	ldr	r2, [pc, #104]	@ (80139cc <UART_SetConfig+0x3d8>)
 8013962:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013966:	461a      	mov	r2, r3
 8013968:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801396a:	fbb3 f2f2 	udiv	r2, r3, r2
 801396e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013970:	685b      	ldr	r3, [r3, #4]
 8013972:	085b      	lsrs	r3, r3, #1
 8013974:	441a      	add	r2, r3
 8013976:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013978:	685b      	ldr	r3, [r3, #4]
 801397a:	fbb2 f3f3 	udiv	r3, r2, r3
 801397e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013980:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013982:	2b0f      	cmp	r3, #15
 8013984:	d909      	bls.n	801399a <UART_SetConfig+0x3a6>
 8013986:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013988:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801398c:	d205      	bcs.n	801399a <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801398e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013990:	b29a      	uxth	r2, r3
 8013992:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013994:	681b      	ldr	r3, [r3, #0]
 8013996:	60da      	str	r2, [r3, #12]
 8013998:	e002      	b.n	80139a0 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 801399a:	2301      	movs	r3, #1
 801399c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80139a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80139a2:	2201      	movs	r2, #1
 80139a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80139a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80139aa:	2201      	movs	r2, #1
 80139ac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80139b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80139b2:	2200      	movs	r2, #0
 80139b4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80139b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80139b8:	2200      	movs	r2, #0
 80139ba:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80139bc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 80139c0:	4618      	mov	r0, r3
 80139c2:	3750      	adds	r7, #80	@ 0x50
 80139c4:	46bd      	mov	sp, r7
 80139c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80139ca:	bf00      	nop
 80139cc:	08024374 	.word	0x08024374

080139d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80139d0:	b480      	push	{r7}
 80139d2:	b083      	sub	sp, #12
 80139d4:	af00      	add	r7, sp, #0
 80139d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80139dc:	f003 0308 	and.w	r3, r3, #8
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	d00a      	beq.n	80139fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	681b      	ldr	r3, [r3, #0]
 80139e8:	685b      	ldr	r3, [r3, #4]
 80139ea:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	681b      	ldr	r3, [r3, #0]
 80139f6:	430a      	orrs	r2, r1
 80139f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80139fe:	f003 0301 	and.w	r3, r3, #1
 8013a02:	2b00      	cmp	r3, #0
 8013a04:	d00a      	beq.n	8013a1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8013a06:	687b      	ldr	r3, [r7, #4]
 8013a08:	681b      	ldr	r3, [r3, #0]
 8013a0a:	685b      	ldr	r3, [r3, #4]
 8013a0c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	681b      	ldr	r3, [r3, #0]
 8013a18:	430a      	orrs	r2, r1
 8013a1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8013a1c:	687b      	ldr	r3, [r7, #4]
 8013a1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013a20:	f003 0302 	and.w	r3, r3, #2
 8013a24:	2b00      	cmp	r3, #0
 8013a26:	d00a      	beq.n	8013a3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	681b      	ldr	r3, [r3, #0]
 8013a2c:	685b      	ldr	r3, [r3, #4]
 8013a2e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8013a32:	687b      	ldr	r3, [r7, #4]
 8013a34:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	681b      	ldr	r3, [r3, #0]
 8013a3a:	430a      	orrs	r2, r1
 8013a3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013a42:	f003 0304 	and.w	r3, r3, #4
 8013a46:	2b00      	cmp	r3, #0
 8013a48:	d00a      	beq.n	8013a60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	681b      	ldr	r3, [r3, #0]
 8013a4e:	685b      	ldr	r3, [r3, #4]
 8013a50:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013a58:	687b      	ldr	r3, [r7, #4]
 8013a5a:	681b      	ldr	r3, [r3, #0]
 8013a5c:	430a      	orrs	r2, r1
 8013a5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013a64:	f003 0310 	and.w	r3, r3, #16
 8013a68:	2b00      	cmp	r3, #0
 8013a6a:	d00a      	beq.n	8013a82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	681b      	ldr	r3, [r3, #0]
 8013a70:	689b      	ldr	r3, [r3, #8]
 8013a72:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	681b      	ldr	r3, [r3, #0]
 8013a7e:	430a      	orrs	r2, r1
 8013a80:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013a86:	f003 0320 	and.w	r3, r3, #32
 8013a8a:	2b00      	cmp	r3, #0
 8013a8c:	d00a      	beq.n	8013aa4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	681b      	ldr	r3, [r3, #0]
 8013a92:	689b      	ldr	r3, [r3, #8]
 8013a94:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	681b      	ldr	r3, [r3, #0]
 8013aa0:	430a      	orrs	r2, r1
 8013aa2:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013aa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d01a      	beq.n	8013ae6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	681b      	ldr	r3, [r3, #0]
 8013ab4:	685b      	ldr	r3, [r3, #4]
 8013ab6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	681b      	ldr	r3, [r3, #0]
 8013ac2:	430a      	orrs	r2, r1
 8013ac4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013aca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8013ace:	d10a      	bne.n	8013ae6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	681b      	ldr	r3, [r3, #0]
 8013ad4:	685b      	ldr	r3, [r3, #4]
 8013ad6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	681b      	ldr	r3, [r3, #0]
 8013ae2:	430a      	orrs	r2, r1
 8013ae4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013aea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	d00a      	beq.n	8013b08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	681b      	ldr	r3, [r3, #0]
 8013af6:	685b      	ldr	r3, [r3, #4]
 8013af8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	681b      	ldr	r3, [r3, #0]
 8013b04:	430a      	orrs	r2, r1
 8013b06:	605a      	str	r2, [r3, #4]
  }
}
 8013b08:	bf00      	nop
 8013b0a:	370c      	adds	r7, #12
 8013b0c:	46bd      	mov	sp, r7
 8013b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b12:	4770      	bx	lr

08013b14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8013b14:	b580      	push	{r7, lr}
 8013b16:	b098      	sub	sp, #96	@ 0x60
 8013b18:	af02      	add	r7, sp, #8
 8013b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	2200      	movs	r2, #0
 8013b20:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8013b24:	f7f1 ff54 	bl	80059d0 <HAL_GetTick>
 8013b28:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	681b      	ldr	r3, [r3, #0]
 8013b2e:	681b      	ldr	r3, [r3, #0]
 8013b30:	f003 0308 	and.w	r3, r3, #8
 8013b34:	2b08      	cmp	r3, #8
 8013b36:	d12f      	bne.n	8013b98 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8013b38:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8013b3c:	9300      	str	r3, [sp, #0]
 8013b3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013b40:	2200      	movs	r2, #0
 8013b42:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8013b46:	6878      	ldr	r0, [r7, #4]
 8013b48:	f000 f88e 	bl	8013c68 <UART_WaitOnFlagUntilTimeout>
 8013b4c:	4603      	mov	r3, r0
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	d022      	beq.n	8013b98 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	681b      	ldr	r3, [r3, #0]
 8013b56:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b5a:	e853 3f00 	ldrex	r3, [r3]
 8013b5e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8013b60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013b62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8013b66:	653b      	str	r3, [r7, #80]	@ 0x50
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	681b      	ldr	r3, [r3, #0]
 8013b6c:	461a      	mov	r2, r3
 8013b6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013b70:	647b      	str	r3, [r7, #68]	@ 0x44
 8013b72:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013b74:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8013b76:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013b78:	e841 2300 	strex	r3, r2, [r1]
 8013b7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8013b7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013b80:	2b00      	cmp	r3, #0
 8013b82:	d1e6      	bne.n	8013b52 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	2220      	movs	r2, #32
 8013b88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	2200      	movs	r2, #0
 8013b90:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8013b94:	2303      	movs	r3, #3
 8013b96:	e063      	b.n	8013c60 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	681b      	ldr	r3, [r3, #0]
 8013b9c:	681b      	ldr	r3, [r3, #0]
 8013b9e:	f003 0304 	and.w	r3, r3, #4
 8013ba2:	2b04      	cmp	r3, #4
 8013ba4:	d149      	bne.n	8013c3a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8013ba6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8013baa:	9300      	str	r3, [sp, #0]
 8013bac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013bae:	2200      	movs	r2, #0
 8013bb0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8013bb4:	6878      	ldr	r0, [r7, #4]
 8013bb6:	f000 f857 	bl	8013c68 <UART_WaitOnFlagUntilTimeout>
 8013bba:	4603      	mov	r3, r0
 8013bbc:	2b00      	cmp	r3, #0
 8013bbe:	d03c      	beq.n	8013c3a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	681b      	ldr	r3, [r3, #0]
 8013bc4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013bc8:	e853 3f00 	ldrex	r3, [r3]
 8013bcc:	623b      	str	r3, [r7, #32]
   return(result);
 8013bce:	6a3b      	ldr	r3, [r7, #32]
 8013bd0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8013bd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	681b      	ldr	r3, [r3, #0]
 8013bda:	461a      	mov	r2, r3
 8013bdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013bde:	633b      	str	r3, [r7, #48]	@ 0x30
 8013be0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013be2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013be4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013be6:	e841 2300 	strex	r3, r2, [r1]
 8013bea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8013bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013bee:	2b00      	cmp	r3, #0
 8013bf0:	d1e6      	bne.n	8013bc0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	681b      	ldr	r3, [r3, #0]
 8013bf6:	3308      	adds	r3, #8
 8013bf8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013bfa:	693b      	ldr	r3, [r7, #16]
 8013bfc:	e853 3f00 	ldrex	r3, [r3]
 8013c00:	60fb      	str	r3, [r7, #12]
   return(result);
 8013c02:	68fb      	ldr	r3, [r7, #12]
 8013c04:	f023 0301 	bic.w	r3, r3, #1
 8013c08:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	681b      	ldr	r3, [r3, #0]
 8013c0e:	3308      	adds	r3, #8
 8013c10:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8013c12:	61fa      	str	r2, [r7, #28]
 8013c14:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013c16:	69b9      	ldr	r1, [r7, #24]
 8013c18:	69fa      	ldr	r2, [r7, #28]
 8013c1a:	e841 2300 	strex	r3, r2, [r1]
 8013c1e:	617b      	str	r3, [r7, #20]
   return(result);
 8013c20:	697b      	ldr	r3, [r7, #20]
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	d1e5      	bne.n	8013bf2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	2220      	movs	r2, #32
 8013c2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	2200      	movs	r2, #0
 8013c32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8013c36:	2303      	movs	r3, #3
 8013c38:	e012      	b.n	8013c60 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	2220      	movs	r2, #32
 8013c3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	2220      	movs	r2, #32
 8013c46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	2200      	movs	r2, #0
 8013c4e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	2200      	movs	r2, #0
 8013c54:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	2200      	movs	r2, #0
 8013c5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8013c5e:	2300      	movs	r3, #0
}
 8013c60:	4618      	mov	r0, r3
 8013c62:	3758      	adds	r7, #88	@ 0x58
 8013c64:	46bd      	mov	sp, r7
 8013c66:	bd80      	pop	{r7, pc}

08013c68 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8013c68:	b580      	push	{r7, lr}
 8013c6a:	b084      	sub	sp, #16
 8013c6c:	af00      	add	r7, sp, #0
 8013c6e:	60f8      	str	r0, [r7, #12]
 8013c70:	60b9      	str	r1, [r7, #8]
 8013c72:	603b      	str	r3, [r7, #0]
 8013c74:	4613      	mov	r3, r2
 8013c76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013c78:	e04f      	b.n	8013d1a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013c7a:	69bb      	ldr	r3, [r7, #24]
 8013c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c80:	d04b      	beq.n	8013d1a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013c82:	f7f1 fea5 	bl	80059d0 <HAL_GetTick>
 8013c86:	4602      	mov	r2, r0
 8013c88:	683b      	ldr	r3, [r7, #0]
 8013c8a:	1ad3      	subs	r3, r2, r3
 8013c8c:	69ba      	ldr	r2, [r7, #24]
 8013c8e:	429a      	cmp	r2, r3
 8013c90:	d302      	bcc.n	8013c98 <UART_WaitOnFlagUntilTimeout+0x30>
 8013c92:	69bb      	ldr	r3, [r7, #24]
 8013c94:	2b00      	cmp	r3, #0
 8013c96:	d101      	bne.n	8013c9c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8013c98:	2303      	movs	r3, #3
 8013c9a:	e04e      	b.n	8013d3a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8013c9c:	68fb      	ldr	r3, [r7, #12]
 8013c9e:	681b      	ldr	r3, [r3, #0]
 8013ca0:	681b      	ldr	r3, [r3, #0]
 8013ca2:	f003 0304 	and.w	r3, r3, #4
 8013ca6:	2b00      	cmp	r3, #0
 8013ca8:	d037      	beq.n	8013d1a <UART_WaitOnFlagUntilTimeout+0xb2>
 8013caa:	68bb      	ldr	r3, [r7, #8]
 8013cac:	2b80      	cmp	r3, #128	@ 0x80
 8013cae:	d034      	beq.n	8013d1a <UART_WaitOnFlagUntilTimeout+0xb2>
 8013cb0:	68bb      	ldr	r3, [r7, #8]
 8013cb2:	2b40      	cmp	r3, #64	@ 0x40
 8013cb4:	d031      	beq.n	8013d1a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8013cb6:	68fb      	ldr	r3, [r7, #12]
 8013cb8:	681b      	ldr	r3, [r3, #0]
 8013cba:	69db      	ldr	r3, [r3, #28]
 8013cbc:	f003 0308 	and.w	r3, r3, #8
 8013cc0:	2b08      	cmp	r3, #8
 8013cc2:	d110      	bne.n	8013ce6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8013cc4:	68fb      	ldr	r3, [r7, #12]
 8013cc6:	681b      	ldr	r3, [r3, #0]
 8013cc8:	2208      	movs	r2, #8
 8013cca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8013ccc:	68f8      	ldr	r0, [r7, #12]
 8013cce:	f000 fa94 	bl	80141fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8013cd2:	68fb      	ldr	r3, [r7, #12]
 8013cd4:	2208      	movs	r2, #8
 8013cd6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8013cda:	68fb      	ldr	r3, [r7, #12]
 8013cdc:	2200      	movs	r2, #0
 8013cde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8013ce2:	2301      	movs	r3, #1
 8013ce4:	e029      	b.n	8013d3a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8013ce6:	68fb      	ldr	r3, [r7, #12]
 8013ce8:	681b      	ldr	r3, [r3, #0]
 8013cea:	69db      	ldr	r3, [r3, #28]
 8013cec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8013cf0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8013cf4:	d111      	bne.n	8013d1a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8013cf6:	68fb      	ldr	r3, [r7, #12]
 8013cf8:	681b      	ldr	r3, [r3, #0]
 8013cfa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8013cfe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8013d00:	68f8      	ldr	r0, [r7, #12]
 8013d02:	f000 fa7a 	bl	80141fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8013d06:	68fb      	ldr	r3, [r7, #12]
 8013d08:	2220      	movs	r2, #32
 8013d0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8013d0e:	68fb      	ldr	r3, [r7, #12]
 8013d10:	2200      	movs	r2, #0
 8013d12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8013d16:	2303      	movs	r3, #3
 8013d18:	e00f      	b.n	8013d3a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013d1a:	68fb      	ldr	r3, [r7, #12]
 8013d1c:	681b      	ldr	r3, [r3, #0]
 8013d1e:	69da      	ldr	r2, [r3, #28]
 8013d20:	68bb      	ldr	r3, [r7, #8]
 8013d22:	4013      	ands	r3, r2
 8013d24:	68ba      	ldr	r2, [r7, #8]
 8013d26:	429a      	cmp	r2, r3
 8013d28:	bf0c      	ite	eq
 8013d2a:	2301      	moveq	r3, #1
 8013d2c:	2300      	movne	r3, #0
 8013d2e:	b2db      	uxtb	r3, r3
 8013d30:	461a      	mov	r2, r3
 8013d32:	79fb      	ldrb	r3, [r7, #7]
 8013d34:	429a      	cmp	r2, r3
 8013d36:	d0a0      	beq.n	8013c7a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8013d38:	2300      	movs	r3, #0
}
 8013d3a:	4618      	mov	r0, r3
 8013d3c:	3710      	adds	r7, #16
 8013d3e:	46bd      	mov	sp, r7
 8013d40:	bd80      	pop	{r7, pc}
	...

08013d44 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013d44:	b480      	push	{r7}
 8013d46:	b0a3      	sub	sp, #140	@ 0x8c
 8013d48:	af00      	add	r7, sp, #0
 8013d4a:	60f8      	str	r0, [r7, #12]
 8013d4c:	60b9      	str	r1, [r7, #8]
 8013d4e:	4613      	mov	r3, r2
 8013d50:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8013d52:	68fb      	ldr	r3, [r7, #12]
 8013d54:	68ba      	ldr	r2, [r7, #8]
 8013d56:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8013d58:	68fb      	ldr	r3, [r7, #12]
 8013d5a:	88fa      	ldrh	r2, [r7, #6]
 8013d5c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8013d60:	68fb      	ldr	r3, [r7, #12]
 8013d62:	88fa      	ldrh	r2, [r7, #6]
 8013d64:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8013d68:	68fb      	ldr	r3, [r7, #12]
 8013d6a:	2200      	movs	r2, #0
 8013d6c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8013d6e:	68fb      	ldr	r3, [r7, #12]
 8013d70:	689b      	ldr	r3, [r3, #8]
 8013d72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8013d76:	d10e      	bne.n	8013d96 <UART_Start_Receive_IT+0x52>
 8013d78:	68fb      	ldr	r3, [r7, #12]
 8013d7a:	691b      	ldr	r3, [r3, #16]
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	d105      	bne.n	8013d8c <UART_Start_Receive_IT+0x48>
 8013d80:	68fb      	ldr	r3, [r7, #12]
 8013d82:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8013d86:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8013d8a:	e02d      	b.n	8013de8 <UART_Start_Receive_IT+0xa4>
 8013d8c:	68fb      	ldr	r3, [r7, #12]
 8013d8e:	22ff      	movs	r2, #255	@ 0xff
 8013d90:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8013d94:	e028      	b.n	8013de8 <UART_Start_Receive_IT+0xa4>
 8013d96:	68fb      	ldr	r3, [r7, #12]
 8013d98:	689b      	ldr	r3, [r3, #8]
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	d10d      	bne.n	8013dba <UART_Start_Receive_IT+0x76>
 8013d9e:	68fb      	ldr	r3, [r7, #12]
 8013da0:	691b      	ldr	r3, [r3, #16]
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	d104      	bne.n	8013db0 <UART_Start_Receive_IT+0x6c>
 8013da6:	68fb      	ldr	r3, [r7, #12]
 8013da8:	22ff      	movs	r2, #255	@ 0xff
 8013daa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8013dae:	e01b      	b.n	8013de8 <UART_Start_Receive_IT+0xa4>
 8013db0:	68fb      	ldr	r3, [r7, #12]
 8013db2:	227f      	movs	r2, #127	@ 0x7f
 8013db4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8013db8:	e016      	b.n	8013de8 <UART_Start_Receive_IT+0xa4>
 8013dba:	68fb      	ldr	r3, [r7, #12]
 8013dbc:	689b      	ldr	r3, [r3, #8]
 8013dbe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013dc2:	d10d      	bne.n	8013de0 <UART_Start_Receive_IT+0x9c>
 8013dc4:	68fb      	ldr	r3, [r7, #12]
 8013dc6:	691b      	ldr	r3, [r3, #16]
 8013dc8:	2b00      	cmp	r3, #0
 8013dca:	d104      	bne.n	8013dd6 <UART_Start_Receive_IT+0x92>
 8013dcc:	68fb      	ldr	r3, [r7, #12]
 8013dce:	227f      	movs	r2, #127	@ 0x7f
 8013dd0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8013dd4:	e008      	b.n	8013de8 <UART_Start_Receive_IT+0xa4>
 8013dd6:	68fb      	ldr	r3, [r7, #12]
 8013dd8:	223f      	movs	r2, #63	@ 0x3f
 8013dda:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8013dde:	e003      	b.n	8013de8 <UART_Start_Receive_IT+0xa4>
 8013de0:	68fb      	ldr	r3, [r7, #12]
 8013de2:	2200      	movs	r2, #0
 8013de4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013de8:	68fb      	ldr	r3, [r7, #12]
 8013dea:	2200      	movs	r2, #0
 8013dec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8013df0:	68fb      	ldr	r3, [r7, #12]
 8013df2:	2222      	movs	r2, #34	@ 0x22
 8013df4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013df8:	68fb      	ldr	r3, [r7, #12]
 8013dfa:	681b      	ldr	r3, [r3, #0]
 8013dfc:	3308      	adds	r3, #8
 8013dfe:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013e00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013e02:	e853 3f00 	ldrex	r3, [r3]
 8013e06:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8013e08:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8013e0a:	f043 0301 	orr.w	r3, r3, #1
 8013e0e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8013e12:	68fb      	ldr	r3, [r7, #12]
 8013e14:	681b      	ldr	r3, [r3, #0]
 8013e16:	3308      	adds	r3, #8
 8013e18:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8013e1c:	673a      	str	r2, [r7, #112]	@ 0x70
 8013e1e:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013e20:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8013e22:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8013e24:	e841 2300 	strex	r3, r2, [r1]
 8013e28:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8013e2a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013e2c:	2b00      	cmp	r3, #0
 8013e2e:	d1e3      	bne.n	8013df8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8013e30:	68fb      	ldr	r3, [r7, #12]
 8013e32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8013e34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013e38:	d14f      	bne.n	8013eda <UART_Start_Receive_IT+0x196>
 8013e3a:	68fb      	ldr	r3, [r7, #12]
 8013e3c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8013e40:	88fa      	ldrh	r2, [r7, #6]
 8013e42:	429a      	cmp	r2, r3
 8013e44:	d349      	bcc.n	8013eda <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013e46:	68fb      	ldr	r3, [r7, #12]
 8013e48:	689b      	ldr	r3, [r3, #8]
 8013e4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8013e4e:	d107      	bne.n	8013e60 <UART_Start_Receive_IT+0x11c>
 8013e50:	68fb      	ldr	r3, [r7, #12]
 8013e52:	691b      	ldr	r3, [r3, #16]
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	d103      	bne.n	8013e60 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8013e58:	68fb      	ldr	r3, [r7, #12]
 8013e5a:	4a47      	ldr	r2, [pc, #284]	@ (8013f78 <UART_Start_Receive_IT+0x234>)
 8013e5c:	675a      	str	r2, [r3, #116]	@ 0x74
 8013e5e:	e002      	b.n	8013e66 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8013e60:	68fb      	ldr	r3, [r7, #12]
 8013e62:	4a46      	ldr	r2, [pc, #280]	@ (8013f7c <UART_Start_Receive_IT+0x238>)
 8013e64:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8013e66:	68fb      	ldr	r3, [r7, #12]
 8013e68:	691b      	ldr	r3, [r3, #16]
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	d01a      	beq.n	8013ea4 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8013e6e:	68fb      	ldr	r3, [r7, #12]
 8013e70:	681b      	ldr	r3, [r3, #0]
 8013e72:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013e74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013e76:	e853 3f00 	ldrex	r3, [r3]
 8013e7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8013e7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013e7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8013e82:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8013e86:	68fb      	ldr	r3, [r7, #12]
 8013e88:	681b      	ldr	r3, [r3, #0]
 8013e8a:	461a      	mov	r2, r3
 8013e8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8013e90:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013e92:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013e94:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8013e96:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8013e98:	e841 2300 	strex	r3, r2, [r1]
 8013e9c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8013e9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013ea0:	2b00      	cmp	r3, #0
 8013ea2:	d1e4      	bne.n	8013e6e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8013ea4:	68fb      	ldr	r3, [r7, #12]
 8013ea6:	681b      	ldr	r3, [r3, #0]
 8013ea8:	3308      	adds	r3, #8
 8013eaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013eac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013eae:	e853 3f00 	ldrex	r3, [r3]
 8013eb2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8013eb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013eb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8013eba:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8013ebc:	68fb      	ldr	r3, [r7, #12]
 8013ebe:	681b      	ldr	r3, [r3, #0]
 8013ec0:	3308      	adds	r3, #8
 8013ec2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8013ec4:	64ba      	str	r2, [r7, #72]	@ 0x48
 8013ec6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013ec8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8013eca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8013ecc:	e841 2300 	strex	r3, r2, [r1]
 8013ed0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8013ed2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013ed4:	2b00      	cmp	r3, #0
 8013ed6:	d1e5      	bne.n	8013ea4 <UART_Start_Receive_IT+0x160>
 8013ed8:	e046      	b.n	8013f68 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013eda:	68fb      	ldr	r3, [r7, #12]
 8013edc:	689b      	ldr	r3, [r3, #8]
 8013ede:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8013ee2:	d107      	bne.n	8013ef4 <UART_Start_Receive_IT+0x1b0>
 8013ee4:	68fb      	ldr	r3, [r7, #12]
 8013ee6:	691b      	ldr	r3, [r3, #16]
 8013ee8:	2b00      	cmp	r3, #0
 8013eea:	d103      	bne.n	8013ef4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8013eec:	68fb      	ldr	r3, [r7, #12]
 8013eee:	4a24      	ldr	r2, [pc, #144]	@ (8013f80 <UART_Start_Receive_IT+0x23c>)
 8013ef0:	675a      	str	r2, [r3, #116]	@ 0x74
 8013ef2:	e002      	b.n	8013efa <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8013ef4:	68fb      	ldr	r3, [r7, #12]
 8013ef6:	4a23      	ldr	r2, [pc, #140]	@ (8013f84 <UART_Start_Receive_IT+0x240>)
 8013ef8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8013efa:	68fb      	ldr	r3, [r7, #12]
 8013efc:	691b      	ldr	r3, [r3, #16]
 8013efe:	2b00      	cmp	r3, #0
 8013f00:	d019      	beq.n	8013f36 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8013f02:	68fb      	ldr	r3, [r7, #12]
 8013f04:	681b      	ldr	r3, [r3, #0]
 8013f06:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f0a:	e853 3f00 	ldrex	r3, [r3]
 8013f0e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8013f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f12:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8013f16:	677b      	str	r3, [r7, #116]	@ 0x74
 8013f18:	68fb      	ldr	r3, [r7, #12]
 8013f1a:	681b      	ldr	r3, [r3, #0]
 8013f1c:	461a      	mov	r2, r3
 8013f1e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8013f20:	637b      	str	r3, [r7, #52]	@ 0x34
 8013f22:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013f24:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8013f26:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013f28:	e841 2300 	strex	r3, r2, [r1]
 8013f2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8013f2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f30:	2b00      	cmp	r3, #0
 8013f32:	d1e6      	bne.n	8013f02 <UART_Start_Receive_IT+0x1be>
 8013f34:	e018      	b.n	8013f68 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8013f36:	68fb      	ldr	r3, [r7, #12]
 8013f38:	681b      	ldr	r3, [r3, #0]
 8013f3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013f3c:	697b      	ldr	r3, [r7, #20]
 8013f3e:	e853 3f00 	ldrex	r3, [r3]
 8013f42:	613b      	str	r3, [r7, #16]
   return(result);
 8013f44:	693b      	ldr	r3, [r7, #16]
 8013f46:	f043 0320 	orr.w	r3, r3, #32
 8013f4a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8013f4c:	68fb      	ldr	r3, [r7, #12]
 8013f4e:	681b      	ldr	r3, [r3, #0]
 8013f50:	461a      	mov	r2, r3
 8013f52:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013f54:	623b      	str	r3, [r7, #32]
 8013f56:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013f58:	69f9      	ldr	r1, [r7, #28]
 8013f5a:	6a3a      	ldr	r2, [r7, #32]
 8013f5c:	e841 2300 	strex	r3, r2, [r1]
 8013f60:	61bb      	str	r3, [r7, #24]
   return(result);
 8013f62:	69bb      	ldr	r3, [r7, #24]
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	d1e6      	bne.n	8013f36 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8013f68:	2300      	movs	r3, #0
}
 8013f6a:	4618      	mov	r0, r3
 8013f6c:	378c      	adds	r7, #140	@ 0x8c
 8013f6e:	46bd      	mov	sp, r7
 8013f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f74:	4770      	bx	lr
 8013f76:	bf00      	nop
 8013f78:	08014bf1 	.word	0x08014bf1
 8013f7c:	08014881 	.word	0x08014881
 8013f80:	080146bd 	.word	0x080146bd
 8013f84:	080144f9 	.word	0x080144f9

08013f88 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013f88:	b580      	push	{r7, lr}
 8013f8a:	b098      	sub	sp, #96	@ 0x60
 8013f8c:	af00      	add	r7, sp, #0
 8013f8e:	60f8      	str	r0, [r7, #12]
 8013f90:	60b9      	str	r1, [r7, #8]
 8013f92:	4613      	mov	r3, r2
 8013f94:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;
  uint16_t nbByte = Size;
 8013f96:	88fb      	ldrh	r3, [r7, #6]
 8013f98:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c

  huart->pRxBuffPtr = pData;
 8013f9c:	68fb      	ldr	r3, [r7, #12]
 8013f9e:	68ba      	ldr	r2, [r7, #8]
 8013fa0:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8013fa2:	68fb      	ldr	r3, [r7, #12]
 8013fa4:	88fa      	ldrh	r2, [r7, #6]
 8013fa6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013faa:	68fb      	ldr	r3, [r7, #12]
 8013fac:	2200      	movs	r2, #0
 8013fae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8013fb2:	68fb      	ldr	r3, [r7, #12]
 8013fb4:	2222      	movs	r2, #34	@ 0x22
 8013fb6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8013fba:	68fb      	ldr	r3, [r7, #12]
 8013fbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013fc0:	2b00      	cmp	r3, #0
 8013fc2:	d07c      	beq.n	80140be <UART_Start_Receive_DMA+0x136>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8013fc4:	68fb      	ldr	r3, [r7, #12]
 8013fc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013fca:	4a68      	ldr	r2, [pc, #416]	@ (801416c <UART_Start_Receive_DMA+0x1e4>)
 8013fcc:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8013fce:	68fb      	ldr	r3, [r7, #12]
 8013fd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013fd4:	4a66      	ldr	r2, [pc, #408]	@ (8014170 <UART_Start_Receive_DMA+0x1e8>)
 8013fd6:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8013fd8:	68fb      	ldr	r3, [r7, #12]
 8013fda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013fde:	4a65      	ldr	r2, [pc, #404]	@ (8014174 <UART_Start_Receive_DMA+0x1ec>)
 8013fe0:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8013fe2:	68fb      	ldr	r3, [r7, #12]
 8013fe4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013fe8:	2200      	movs	r2, #0
 8013fea:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, so nbByte should be equal to Size * 2 */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013fec:	68fb      	ldr	r3, [r7, #12]
 8013fee:	689b      	ldr	r3, [r3, #8]
 8013ff0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8013ff4:	d107      	bne.n	8014006 <UART_Start_Receive_DMA+0x7e>
 8013ff6:	68fb      	ldr	r3, [r7, #12]
 8013ff8:	691b      	ldr	r3, [r3, #16]
 8013ffa:	2b00      	cmp	r3, #0
 8013ffc:	d103      	bne.n	8014006 <UART_Start_Receive_DMA+0x7e>
    {
      nbByte = Size * 2U;
 8013ffe:	88fb      	ldrh	r3, [r7, #6]
 8014000:	005b      	lsls	r3, r3, #1
 8014002:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
    }

    /* Check linked list mode */
    if ((huart->hdmarx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8014006:	68fb      	ldr	r3, [r7, #12]
 8014008:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801400c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801400e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014012:	2b00      	cmp	r3, #0
 8014014:	d034      	beq.n	8014080 <UART_Start_Receive_DMA+0xf8>
    {
      if ((huart->hdmarx->LinkedListQueue != NULL) && (huart->hdmarx->LinkedListQueue->Head != NULL))
 8014016:	68fb      	ldr	r3, [r7, #12]
 8014018:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801401c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801401e:	2b00      	cmp	r3, #0
 8014020:	d02a      	beq.n	8014078 <UART_Start_Receive_DMA+0xf0>
 8014022:	68fb      	ldr	r3, [r7, #12]
 8014024:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014028:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801402a:	681b      	ldr	r3, [r3, #0]
 801402c:	2b00      	cmp	r3, #0
 801402e:	d023      	beq.n	8014078 <UART_Start_Receive_DMA+0xf0>
      {
        /* Set DMA data size */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = nbByte;
 8014030:	68fb      	ldr	r3, [r7, #12]
 8014032:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014036:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014038:	681b      	ldr	r3, [r3, #0]
 801403a:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 801403e:	609a      	str	r2, [r3, #8]

        /* Set DMA source address */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =
          (uint32_t)&huart->Instance->RDR;
 8014040:	68fb      	ldr	r3, [r7, #12]
 8014042:	681b      	ldr	r3, [r3, #0]
 8014044:	f103 0224 	add.w	r2, r3, #36	@ 0x24
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =
 8014048:	68fb      	ldr	r3, [r7, #12]
 801404a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801404e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014050:	681b      	ldr	r3, [r3, #0]
 8014052:	60da      	str	r2, [r3, #12]

        /* Set DMA destination address */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)huart->pRxBuffPtr;
 8014054:	68fb      	ldr	r3, [r7, #12]
 8014056:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8014058:	68fb      	ldr	r3, [r7, #12]
 801405a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801405e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014060:	681b      	ldr	r3, [r3, #0]
 8014062:	611a      	str	r2, [r3, #16]

        /* Enable the UART receive DMA channel */
        status = HAL_DMAEx_List_Start_IT(huart->hdmarx);
 8014064:	68fb      	ldr	r3, [r7, #12]
 8014066:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801406a:	4618      	mov	r0, r3
 801406c:	f7f5 fbb8 	bl	80097e0 <HAL_DMAEx_List_Start_IT>
 8014070:	4603      	mov	r3, r0
 8014072:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8014076:	e014      	b.n	80140a2 <UART_Start_Receive_DMA+0x11a>
      }
      else
      {
        /* Update status */
        status = HAL_ERROR;
 8014078:	2301      	movs	r3, #1
 801407a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 801407e:	e010      	b.n	80140a2 <UART_Start_Receive_DMA+0x11a>
      }
    }
    else
    {
      /* Enable the UART receive DMA channel */
      status = HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, nbByte);
 8014080:	68fb      	ldr	r3, [r7, #12]
 8014082:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8014086:	68fb      	ldr	r3, [r7, #12]
 8014088:	681b      	ldr	r3, [r3, #0]
 801408a:	3324      	adds	r3, #36	@ 0x24
 801408c:	4619      	mov	r1, r3
 801408e:	68fb      	ldr	r3, [r7, #12]
 8014090:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014092:	461a      	mov	r2, r3
 8014094:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8014098:	f7f4 ffaf 	bl	8008ffa <HAL_DMA_Start_IT>
 801409c:	4603      	mov	r3, r0
 801409e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    }

    if (status != HAL_OK)
 80140a2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80140a6:	2b00      	cmp	r3, #0
 80140a8:	d009      	beq.n	80140be <UART_Start_Receive_DMA+0x136>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80140aa:	68fb      	ldr	r3, [r7, #12]
 80140ac:	2210      	movs	r2, #16
 80140ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80140b2:	68fb      	ldr	r3, [r7, #12]
 80140b4:	2220      	movs	r2, #32
 80140b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 80140ba:	2301      	movs	r3, #1
 80140bc:	e051      	b.n	8014162 <UART_Start_Receive_DMA+0x1da>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80140be:	68fb      	ldr	r3, [r7, #12]
 80140c0:	691b      	ldr	r3, [r3, #16]
 80140c2:	2b00      	cmp	r3, #0
 80140c4:	d018      	beq.n	80140f8 <UART_Start_Receive_DMA+0x170>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80140c6:	68fb      	ldr	r3, [r7, #12]
 80140c8:	681b      	ldr	r3, [r3, #0]
 80140ca:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80140cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80140ce:	e853 3f00 	ldrex	r3, [r3]
 80140d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80140d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80140d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80140da:	65bb      	str	r3, [r7, #88]	@ 0x58
 80140dc:	68fb      	ldr	r3, [r7, #12]
 80140de:	681b      	ldr	r3, [r3, #0]
 80140e0:	461a      	mov	r2, r3
 80140e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80140e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80140e6:	64ba      	str	r2, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80140e8:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80140ea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80140ec:	e841 2300 	strex	r3, r2, [r1]
 80140f0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80140f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	d1e6      	bne.n	80140c6 <UART_Start_Receive_DMA+0x13e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80140f8:	68fb      	ldr	r3, [r7, #12]
 80140fa:	681b      	ldr	r3, [r3, #0]
 80140fc:	3308      	adds	r3, #8
 80140fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014102:	e853 3f00 	ldrex	r3, [r3]
 8014106:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8014108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801410a:	f043 0301 	orr.w	r3, r3, #1
 801410e:	657b      	str	r3, [r7, #84]	@ 0x54
 8014110:	68fb      	ldr	r3, [r7, #12]
 8014112:	681b      	ldr	r3, [r3, #0]
 8014114:	3308      	adds	r3, #8
 8014116:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8014118:	63ba      	str	r2, [r7, #56]	@ 0x38
 801411a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801411c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801411e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014120:	e841 2300 	strex	r3, r2, [r1]
 8014124:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8014126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014128:	2b00      	cmp	r3, #0
 801412a:	d1e5      	bne.n	80140f8 <UART_Start_Receive_DMA+0x170>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801412c:	68fb      	ldr	r3, [r7, #12]
 801412e:	681b      	ldr	r3, [r3, #0]
 8014130:	3308      	adds	r3, #8
 8014132:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014134:	69bb      	ldr	r3, [r7, #24]
 8014136:	e853 3f00 	ldrex	r3, [r3]
 801413a:	617b      	str	r3, [r7, #20]
   return(result);
 801413c:	697b      	ldr	r3, [r7, #20]
 801413e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014142:	653b      	str	r3, [r7, #80]	@ 0x50
 8014144:	68fb      	ldr	r3, [r7, #12]
 8014146:	681b      	ldr	r3, [r3, #0]
 8014148:	3308      	adds	r3, #8
 801414a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801414c:	627a      	str	r2, [r7, #36]	@ 0x24
 801414e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014150:	6a39      	ldr	r1, [r7, #32]
 8014152:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014154:	e841 2300 	strex	r3, r2, [r1]
 8014158:	61fb      	str	r3, [r7, #28]
   return(result);
 801415a:	69fb      	ldr	r3, [r7, #28]
 801415c:	2b00      	cmp	r3, #0
 801415e:	d1e5      	bne.n	801412c <UART_Start_Receive_DMA+0x1a4>

  return HAL_OK;
 8014160:	2300      	movs	r3, #0
}
 8014162:	4618      	mov	r0, r3
 8014164:	3760      	adds	r7, #96	@ 0x60
 8014166:	46bd      	mov	sp, r7
 8014168:	bd80      	pop	{r7, pc}
 801416a:	bf00      	nop
 801416c:	080142c7 	.word	0x080142c7
 8014170:	080143b9 	.word	0x080143b9
 8014174:	080143f7 	.word	0x080143f7

08014178 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8014178:	b480      	push	{r7}
 801417a:	b08f      	sub	sp, #60	@ 0x3c
 801417c:	af00      	add	r7, sp, #0
 801417e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	681b      	ldr	r3, [r3, #0]
 8014184:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014186:	6a3b      	ldr	r3, [r7, #32]
 8014188:	e853 3f00 	ldrex	r3, [r3]
 801418c:	61fb      	str	r3, [r7, #28]
   return(result);
 801418e:	69fb      	ldr	r3, [r7, #28]
 8014190:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8014194:	637b      	str	r3, [r7, #52]	@ 0x34
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	681b      	ldr	r3, [r3, #0]
 801419a:	461a      	mov	r2, r3
 801419c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801419e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80141a0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80141a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80141a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80141a6:	e841 2300 	strex	r3, r2, [r1]
 80141aa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80141ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141ae:	2b00      	cmp	r3, #0
 80141b0:	d1e6      	bne.n	8014180 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80141b2:	687b      	ldr	r3, [r7, #4]
 80141b4:	681b      	ldr	r3, [r3, #0]
 80141b6:	3308      	adds	r3, #8
 80141b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80141ba:	68fb      	ldr	r3, [r7, #12]
 80141bc:	e853 3f00 	ldrex	r3, [r3]
 80141c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80141c2:	68bb      	ldr	r3, [r7, #8]
 80141c4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80141c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	681b      	ldr	r3, [r3, #0]
 80141ce:	3308      	adds	r3, #8
 80141d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80141d2:	61ba      	str	r2, [r7, #24]
 80141d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80141d6:	6979      	ldr	r1, [r7, #20]
 80141d8:	69ba      	ldr	r2, [r7, #24]
 80141da:	e841 2300 	strex	r3, r2, [r1]
 80141de:	613b      	str	r3, [r7, #16]
   return(result);
 80141e0:	693b      	ldr	r3, [r7, #16]
 80141e2:	2b00      	cmp	r3, #0
 80141e4:	d1e5      	bne.n	80141b2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	2220      	movs	r2, #32
 80141ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80141ee:	bf00      	nop
 80141f0:	373c      	adds	r7, #60	@ 0x3c
 80141f2:	46bd      	mov	sp, r7
 80141f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141f8:	4770      	bx	lr

080141fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80141fa:	b480      	push	{r7}
 80141fc:	b095      	sub	sp, #84	@ 0x54
 80141fe:	af00      	add	r7, sp, #0
 8014200:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	681b      	ldr	r3, [r3, #0]
 8014206:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014208:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801420a:	e853 3f00 	ldrex	r3, [r3]
 801420e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8014210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014212:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8014216:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8014218:	687b      	ldr	r3, [r7, #4]
 801421a:	681b      	ldr	r3, [r3, #0]
 801421c:	461a      	mov	r2, r3
 801421e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014220:	643b      	str	r3, [r7, #64]	@ 0x40
 8014222:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014224:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8014226:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8014228:	e841 2300 	strex	r3, r2, [r1]
 801422c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801422e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014230:	2b00      	cmp	r3, #0
 8014232:	d1e6      	bne.n	8014202 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	681b      	ldr	r3, [r3, #0]
 8014238:	3308      	adds	r3, #8
 801423a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801423c:	6a3b      	ldr	r3, [r7, #32]
 801423e:	e853 3f00 	ldrex	r3, [r3]
 8014242:	61fb      	str	r3, [r7, #28]
   return(result);
 8014244:	69fb      	ldr	r3, [r7, #28]
 8014246:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801424a:	f023 0301 	bic.w	r3, r3, #1
 801424e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014250:	687b      	ldr	r3, [r7, #4]
 8014252:	681b      	ldr	r3, [r3, #0]
 8014254:	3308      	adds	r3, #8
 8014256:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8014258:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801425a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801425c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801425e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014260:	e841 2300 	strex	r3, r2, [r1]
 8014264:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8014266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014268:	2b00      	cmp	r3, #0
 801426a:	d1e3      	bne.n	8014234 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014270:	2b01      	cmp	r3, #1
 8014272:	d118      	bne.n	80142a6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	681b      	ldr	r3, [r3, #0]
 8014278:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801427a:	68fb      	ldr	r3, [r7, #12]
 801427c:	e853 3f00 	ldrex	r3, [r3]
 8014280:	60bb      	str	r3, [r7, #8]
   return(result);
 8014282:	68bb      	ldr	r3, [r7, #8]
 8014284:	f023 0310 	bic.w	r3, r3, #16
 8014288:	647b      	str	r3, [r7, #68]	@ 0x44
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	681b      	ldr	r3, [r3, #0]
 801428e:	461a      	mov	r2, r3
 8014290:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014292:	61bb      	str	r3, [r7, #24]
 8014294:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014296:	6979      	ldr	r1, [r7, #20]
 8014298:	69ba      	ldr	r2, [r7, #24]
 801429a:	e841 2300 	strex	r3, r2, [r1]
 801429e:	613b      	str	r3, [r7, #16]
   return(result);
 80142a0:	693b      	ldr	r3, [r7, #16]
 80142a2:	2b00      	cmp	r3, #0
 80142a4:	d1e6      	bne.n	8014274 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80142a6:	687b      	ldr	r3, [r7, #4]
 80142a8:	2220      	movs	r2, #32
 80142aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80142ae:	687b      	ldr	r3, [r7, #4]
 80142b0:	2200      	movs	r2, #0
 80142b2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	2200      	movs	r2, #0
 80142b8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80142ba:	bf00      	nop
 80142bc:	3754      	adds	r7, #84	@ 0x54
 80142be:	46bd      	mov	sp, r7
 80142c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142c4:	4770      	bx	lr

080142c6 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80142c6:	b580      	push	{r7, lr}
 80142c8:	b096      	sub	sp, #88	@ 0x58
 80142ca:	af00      	add	r7, sp, #0
 80142cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80142d2:	657b      	str	r3, [r7, #84]	@ 0x54

  /* Check if DMA in circular mode */
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80142d8:	2b81      	cmp	r3, #129	@ 0x81
 80142da:	d057      	beq.n	801438c <UART_DMAReceiveCplt+0xc6>
  {
    huart->RxXferCount = 0U;
 80142dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80142de:	2200      	movs	r2, #0
 80142e0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80142e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80142e6:	681b      	ldr	r3, [r3, #0]
 80142e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80142ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80142ec:	e853 3f00 	ldrex	r3, [r3]
 80142f0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80142f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80142f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80142f8:	653b      	str	r3, [r7, #80]	@ 0x50
 80142fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80142fc:	681b      	ldr	r3, [r3, #0]
 80142fe:	461a      	mov	r2, r3
 8014300:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014302:	647b      	str	r3, [r7, #68]	@ 0x44
 8014304:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014306:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8014308:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801430a:	e841 2300 	strex	r3, r2, [r1]
 801430e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8014310:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014312:	2b00      	cmp	r3, #0
 8014314:	d1e6      	bne.n	80142e4 <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014316:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014318:	681b      	ldr	r3, [r3, #0]
 801431a:	3308      	adds	r3, #8
 801431c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801431e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014320:	e853 3f00 	ldrex	r3, [r3]
 8014324:	623b      	str	r3, [r7, #32]
   return(result);
 8014326:	6a3b      	ldr	r3, [r7, #32]
 8014328:	f023 0301 	bic.w	r3, r3, #1
 801432c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801432e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014330:	681b      	ldr	r3, [r3, #0]
 8014332:	3308      	adds	r3, #8
 8014334:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8014336:	633a      	str	r2, [r7, #48]	@ 0x30
 8014338:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801433a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801433c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801433e:	e841 2300 	strex	r3, r2, [r1]
 8014342:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8014344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014346:	2b00      	cmp	r3, #0
 8014348:	d1e5      	bne.n	8014316 <UART_DMAReceiveCplt+0x50>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801434a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801434c:	2220      	movs	r2, #32
 801434e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014352:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014354:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014356:	2b01      	cmp	r3, #1
 8014358:	d118      	bne.n	801438c <UART_DMAReceiveCplt+0xc6>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801435a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801435c:	681b      	ldr	r3, [r3, #0]
 801435e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014360:	693b      	ldr	r3, [r7, #16]
 8014362:	e853 3f00 	ldrex	r3, [r3]
 8014366:	60fb      	str	r3, [r7, #12]
   return(result);
 8014368:	68fb      	ldr	r3, [r7, #12]
 801436a:	f023 0310 	bic.w	r3, r3, #16
 801436e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014370:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014372:	681b      	ldr	r3, [r3, #0]
 8014374:	461a      	mov	r2, r3
 8014376:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014378:	61fb      	str	r3, [r7, #28]
 801437a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801437c:	69b9      	ldr	r1, [r7, #24]
 801437e:	69fa      	ldr	r2, [r7, #28]
 8014380:	e841 2300 	strex	r3, r2, [r1]
 8014384:	617b      	str	r3, [r7, #20]
   return(result);
 8014386:	697b      	ldr	r3, [r7, #20]
 8014388:	2b00      	cmp	r3, #0
 801438a:	d1e6      	bne.n	801435a <UART_DMAReceiveCplt+0x94>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801438c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801438e:	2200      	movs	r2, #0
 8014390:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014392:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014394:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014396:	2b01      	cmp	r3, #1
 8014398:	d107      	bne.n	80143aa <UART_DMAReceiveCplt+0xe4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801439a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801439c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80143a0:	4619      	mov	r1, r3
 80143a2:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80143a4:	f7ef f886 	bl	80034b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80143a8:	e002      	b.n	80143b0 <UART_DMAReceiveCplt+0xea>
    HAL_UART_RxCpltCallback(huart);
 80143aa:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80143ac:	f7ef f854 	bl	8003458 <HAL_UART_RxCpltCallback>
}
 80143b0:	bf00      	nop
 80143b2:	3758      	adds	r7, #88	@ 0x58
 80143b4:	46bd      	mov	sp, r7
 80143b6:	bd80      	pop	{r7, pc}

080143b8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80143b8:	b580      	push	{r7, lr}
 80143ba:	b084      	sub	sp, #16
 80143bc:	af00      	add	r7, sp, #0
 80143be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80143c4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80143c6:	68fb      	ldr	r3, [r7, #12]
 80143c8:	2201      	movs	r2, #1
 80143ca:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80143cc:	68fb      	ldr	r3, [r7, #12]
 80143ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80143d0:	2b01      	cmp	r3, #1
 80143d2:	d109      	bne.n	80143e8 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80143d4:	68fb      	ldr	r3, [r7, #12]
 80143d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80143da:	085b      	lsrs	r3, r3, #1
 80143dc:	b29b      	uxth	r3, r3
 80143de:	4619      	mov	r1, r3
 80143e0:	68f8      	ldr	r0, [r7, #12]
 80143e2:	f7ef f867 	bl	80034b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80143e6:	e002      	b.n	80143ee <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80143e8:	68f8      	ldr	r0, [r7, #12]
 80143ea:	f7ef f847 	bl	800347c <HAL_UART_RxHalfCpltCallback>
}
 80143ee:	bf00      	nop
 80143f0:	3710      	adds	r7, #16
 80143f2:	46bd      	mov	sp, r7
 80143f4:	bd80      	pop	{r7, pc}

080143f6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80143f6:	b580      	push	{r7, lr}
 80143f8:	b086      	sub	sp, #24
 80143fa:	af00      	add	r7, sp, #0
 80143fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014402:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8014404:	697b      	ldr	r3, [r7, #20]
 8014406:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801440a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 801440c:	697b      	ldr	r3, [r7, #20]
 801440e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8014412:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8014414:	697b      	ldr	r3, [r7, #20]
 8014416:	681b      	ldr	r3, [r3, #0]
 8014418:	689b      	ldr	r3, [r3, #8]
 801441a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801441e:	2b80      	cmp	r3, #128	@ 0x80
 8014420:	d109      	bne.n	8014436 <UART_DMAError+0x40>
 8014422:	693b      	ldr	r3, [r7, #16]
 8014424:	2b21      	cmp	r3, #33	@ 0x21
 8014426:	d106      	bne.n	8014436 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8014428:	697b      	ldr	r3, [r7, #20]
 801442a:	2200      	movs	r2, #0
 801442c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8014430:	6978      	ldr	r0, [r7, #20]
 8014432:	f7ff fea1 	bl	8014178 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8014436:	697b      	ldr	r3, [r7, #20]
 8014438:	681b      	ldr	r3, [r3, #0]
 801443a:	689b      	ldr	r3, [r3, #8]
 801443c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014440:	2b40      	cmp	r3, #64	@ 0x40
 8014442:	d109      	bne.n	8014458 <UART_DMAError+0x62>
 8014444:	68fb      	ldr	r3, [r7, #12]
 8014446:	2b22      	cmp	r3, #34	@ 0x22
 8014448:	d106      	bne.n	8014458 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 801444a:	697b      	ldr	r3, [r7, #20]
 801444c:	2200      	movs	r2, #0
 801444e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8014452:	6978      	ldr	r0, [r7, #20]
 8014454:	f7ff fed1 	bl	80141fa <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8014458:	697b      	ldr	r3, [r7, #20]
 801445a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801445e:	f043 0210 	orr.w	r2, r3, #16
 8014462:	697b      	ldr	r3, [r7, #20]
 8014464:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8014468:	6978      	ldr	r0, [r7, #20]
 801446a:	f7ff f8b9 	bl	80135e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801446e:	bf00      	nop
 8014470:	3718      	adds	r7, #24
 8014472:	46bd      	mov	sp, r7
 8014474:	bd80      	pop	{r7, pc}

08014476 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8014476:	b580      	push	{r7, lr}
 8014478:	b084      	sub	sp, #16
 801447a:	af00      	add	r7, sp, #0
 801447c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014482:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8014484:	68fb      	ldr	r3, [r7, #12]
 8014486:	2200      	movs	r2, #0
 8014488:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 801448c:	68fb      	ldr	r3, [r7, #12]
 801448e:	2200      	movs	r2, #0
 8014490:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8014494:	68f8      	ldr	r0, [r7, #12]
 8014496:	f7ff f8a3 	bl	80135e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801449a:	bf00      	nop
 801449c:	3710      	adds	r7, #16
 801449e:	46bd      	mov	sp, r7
 80144a0:	bd80      	pop	{r7, pc}

080144a2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80144a2:	b580      	push	{r7, lr}
 80144a4:	b088      	sub	sp, #32
 80144a6:	af00      	add	r7, sp, #0
 80144a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80144aa:	687b      	ldr	r3, [r7, #4]
 80144ac:	681b      	ldr	r3, [r3, #0]
 80144ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80144b0:	68fb      	ldr	r3, [r7, #12]
 80144b2:	e853 3f00 	ldrex	r3, [r3]
 80144b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80144b8:	68bb      	ldr	r3, [r7, #8]
 80144ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80144be:	61fb      	str	r3, [r7, #28]
 80144c0:	687b      	ldr	r3, [r7, #4]
 80144c2:	681b      	ldr	r3, [r3, #0]
 80144c4:	461a      	mov	r2, r3
 80144c6:	69fb      	ldr	r3, [r7, #28]
 80144c8:	61bb      	str	r3, [r7, #24]
 80144ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80144cc:	6979      	ldr	r1, [r7, #20]
 80144ce:	69ba      	ldr	r2, [r7, #24]
 80144d0:	e841 2300 	strex	r3, r2, [r1]
 80144d4:	613b      	str	r3, [r7, #16]
   return(result);
 80144d6:	693b      	ldr	r3, [r7, #16]
 80144d8:	2b00      	cmp	r3, #0
 80144da:	d1e6      	bne.n	80144aa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	2220      	movs	r2, #32
 80144e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80144e4:	687b      	ldr	r3, [r7, #4]
 80144e6:	2200      	movs	r2, #0
 80144e8:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80144ea:	6878      	ldr	r0, [r7, #4]
 80144ec:	f7ff f86e 	bl	80135cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80144f0:	bf00      	nop
 80144f2:	3720      	adds	r7, #32
 80144f4:	46bd      	mov	sp, r7
 80144f6:	bd80      	pop	{r7, pc}

080144f8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80144f8:	b580      	push	{r7, lr}
 80144fa:	b09c      	sub	sp, #112	@ 0x70
 80144fc:	af00      	add	r7, sp, #0
 80144fe:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8014506:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801450a:	687b      	ldr	r3, [r7, #4]
 801450c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8014510:	2b22      	cmp	r3, #34	@ 0x22
 8014512:	f040 80c3 	bne.w	801469c <UART_RxISR_8BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	681b      	ldr	r3, [r3, #0]
 801451a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801451c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8014520:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8014524:	b2d9      	uxtb	r1, r3
 8014526:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 801452a:	b2da      	uxtb	r2, r3
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014530:	400a      	ands	r2, r1
 8014532:	b2d2      	uxtb	r2, r2
 8014534:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8014536:	687b      	ldr	r3, [r7, #4]
 8014538:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801453a:	1c5a      	adds	r2, r3, #1
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8014546:	b29b      	uxth	r3, r3
 8014548:	3b01      	subs	r3, #1
 801454a:	b29a      	uxth	r2, r3
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8014552:	687b      	ldr	r3, [r7, #4]
 8014554:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8014558:	b29b      	uxth	r3, r3
 801455a:	2b00      	cmp	r3, #0
 801455c:	f040 80a6 	bne.w	80146ac <UART_RxISR_8BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	681b      	ldr	r3, [r3, #0]
 8014564:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014566:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014568:	e853 3f00 	ldrex	r3, [r3]
 801456c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801456e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014570:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8014574:	66bb      	str	r3, [r7, #104]	@ 0x68
 8014576:	687b      	ldr	r3, [r7, #4]
 8014578:	681b      	ldr	r3, [r3, #0]
 801457a:	461a      	mov	r2, r3
 801457c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801457e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8014580:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014582:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8014584:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8014586:	e841 2300 	strex	r3, r2, [r1]
 801458a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801458c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801458e:	2b00      	cmp	r3, #0
 8014590:	d1e6      	bne.n	8014560 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014592:	687b      	ldr	r3, [r7, #4]
 8014594:	681b      	ldr	r3, [r3, #0]
 8014596:	3308      	adds	r3, #8
 8014598:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801459a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801459c:	e853 3f00 	ldrex	r3, [r3]
 80145a0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80145a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80145a4:	f023 0301 	bic.w	r3, r3, #1
 80145a8:	667b      	str	r3, [r7, #100]	@ 0x64
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	681b      	ldr	r3, [r3, #0]
 80145ae:	3308      	adds	r3, #8
 80145b0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80145b2:	647a      	str	r2, [r7, #68]	@ 0x44
 80145b4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80145b6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80145b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80145ba:	e841 2300 	strex	r3, r2, [r1]
 80145be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80145c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80145c2:	2b00      	cmp	r3, #0
 80145c4:	d1e5      	bne.n	8014592 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	2220      	movs	r2, #32
 80145ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	2200      	movs	r2, #0
 80145d2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	2200      	movs	r2, #0
 80145d8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	681b      	ldr	r3, [r3, #0]
 80145de:	4a35      	ldr	r2, [pc, #212]	@ (80146b4 <UART_RxISR_8BIT+0x1bc>)
 80145e0:	4293      	cmp	r3, r2
 80145e2:	d024      	beq.n	801462e <UART_RxISR_8BIT+0x136>
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	681b      	ldr	r3, [r3, #0]
 80145e8:	4a33      	ldr	r2, [pc, #204]	@ (80146b8 <UART_RxISR_8BIT+0x1c0>)
 80145ea:	4293      	cmp	r3, r2
 80145ec:	d01f      	beq.n	801462e <UART_RxISR_8BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80145ee:	687b      	ldr	r3, [r7, #4]
 80145f0:	681b      	ldr	r3, [r3, #0]
 80145f2:	685b      	ldr	r3, [r3, #4]
 80145f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80145f8:	2b00      	cmp	r3, #0
 80145fa:	d018      	beq.n	801462e <UART_RxISR_8BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80145fc:	687b      	ldr	r3, [r7, #4]
 80145fe:	681b      	ldr	r3, [r3, #0]
 8014600:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014604:	e853 3f00 	ldrex	r3, [r3]
 8014608:	623b      	str	r3, [r7, #32]
   return(result);
 801460a:	6a3b      	ldr	r3, [r7, #32]
 801460c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8014610:	663b      	str	r3, [r7, #96]	@ 0x60
 8014612:	687b      	ldr	r3, [r7, #4]
 8014614:	681b      	ldr	r3, [r3, #0]
 8014616:	461a      	mov	r2, r3
 8014618:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801461a:	633b      	str	r3, [r7, #48]	@ 0x30
 801461c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801461e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014620:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014622:	e841 2300 	strex	r3, r2, [r1]
 8014626:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8014628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801462a:	2b00      	cmp	r3, #0
 801462c:	d1e6      	bne.n	80145fc <UART_RxISR_8BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801462e:	687b      	ldr	r3, [r7, #4]
 8014630:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014632:	2b01      	cmp	r3, #1
 8014634:	d12e      	bne.n	8014694 <UART_RxISR_8BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014636:	687b      	ldr	r3, [r7, #4]
 8014638:	2200      	movs	r2, #0
 801463a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	681b      	ldr	r3, [r3, #0]
 8014640:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014642:	693b      	ldr	r3, [r7, #16]
 8014644:	e853 3f00 	ldrex	r3, [r3]
 8014648:	60fb      	str	r3, [r7, #12]
   return(result);
 801464a:	68fb      	ldr	r3, [r7, #12]
 801464c:	f023 0310 	bic.w	r3, r3, #16
 8014650:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	681b      	ldr	r3, [r3, #0]
 8014656:	461a      	mov	r2, r3
 8014658:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801465a:	61fb      	str	r3, [r7, #28]
 801465c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801465e:	69b9      	ldr	r1, [r7, #24]
 8014660:	69fa      	ldr	r2, [r7, #28]
 8014662:	e841 2300 	strex	r3, r2, [r1]
 8014666:	617b      	str	r3, [r7, #20]
   return(result);
 8014668:	697b      	ldr	r3, [r7, #20]
 801466a:	2b00      	cmp	r3, #0
 801466c:	d1e6      	bne.n	801463c <UART_RxISR_8BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801466e:	687b      	ldr	r3, [r7, #4]
 8014670:	681b      	ldr	r3, [r3, #0]
 8014672:	69db      	ldr	r3, [r3, #28]
 8014674:	f003 0310 	and.w	r3, r3, #16
 8014678:	2b10      	cmp	r3, #16
 801467a:	d103      	bne.n	8014684 <UART_RxISR_8BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	681b      	ldr	r3, [r3, #0]
 8014680:	2210      	movs	r2, #16
 8014682:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8014684:	687b      	ldr	r3, [r7, #4]
 8014686:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801468a:	4619      	mov	r1, r3
 801468c:	6878      	ldr	r0, [r7, #4]
 801468e:	f7ee ff11 	bl	80034b4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8014692:	e00b      	b.n	80146ac <UART_RxISR_8BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 8014694:	6878      	ldr	r0, [r7, #4]
 8014696:	f7ee fedf 	bl	8003458 <HAL_UART_RxCpltCallback>
}
 801469a:	e007      	b.n	80146ac <UART_RxISR_8BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	681b      	ldr	r3, [r3, #0]
 80146a0:	699a      	ldr	r2, [r3, #24]
 80146a2:	687b      	ldr	r3, [r7, #4]
 80146a4:	681b      	ldr	r3, [r3, #0]
 80146a6:	f042 0208 	orr.w	r2, r2, #8
 80146aa:	619a      	str	r2, [r3, #24]
}
 80146ac:	bf00      	nop
 80146ae:	3770      	adds	r7, #112	@ 0x70
 80146b0:	46bd      	mov	sp, r7
 80146b2:	bd80      	pop	{r7, pc}
 80146b4:	44002400 	.word	0x44002400
 80146b8:	54002400 	.word	0x54002400

080146bc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80146bc:	b580      	push	{r7, lr}
 80146be:	b09c      	sub	sp, #112	@ 0x70
 80146c0:	af00      	add	r7, sp, #0
 80146c2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80146ca:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80146d4:	2b22      	cmp	r3, #34	@ 0x22
 80146d6:	f040 80c3 	bne.w	8014860 <UART_RxISR_16BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80146da:	687b      	ldr	r3, [r7, #4]
 80146dc:	681b      	ldr	r3, [r3, #0]
 80146de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80146e0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80146e8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80146ea:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80146ee:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80146f2:	4013      	ands	r3, r2
 80146f4:	b29a      	uxth	r2, r3
 80146f6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80146f8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80146fe:	1c9a      	adds	r2, r3, #2
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801470a:	b29b      	uxth	r3, r3
 801470c:	3b01      	subs	r3, #1
 801470e:	b29a      	uxth	r2, r3
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8014716:	687b      	ldr	r3, [r7, #4]
 8014718:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801471c:	b29b      	uxth	r3, r3
 801471e:	2b00      	cmp	r3, #0
 8014720:	f040 80a6 	bne.w	8014870 <UART_RxISR_16BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8014724:	687b      	ldr	r3, [r7, #4]
 8014726:	681b      	ldr	r3, [r3, #0]
 8014728:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801472a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801472c:	e853 3f00 	ldrex	r3, [r3]
 8014730:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8014732:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014734:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8014738:	667b      	str	r3, [r7, #100]	@ 0x64
 801473a:	687b      	ldr	r3, [r7, #4]
 801473c:	681b      	ldr	r3, [r3, #0]
 801473e:	461a      	mov	r2, r3
 8014740:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8014742:	657b      	str	r3, [r7, #84]	@ 0x54
 8014744:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014746:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8014748:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801474a:	e841 2300 	strex	r3, r2, [r1]
 801474e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8014750:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014752:	2b00      	cmp	r3, #0
 8014754:	d1e6      	bne.n	8014724 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014756:	687b      	ldr	r3, [r7, #4]
 8014758:	681b      	ldr	r3, [r3, #0]
 801475a:	3308      	adds	r3, #8
 801475c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801475e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014760:	e853 3f00 	ldrex	r3, [r3]
 8014764:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8014766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014768:	f023 0301 	bic.w	r3, r3, #1
 801476c:	663b      	str	r3, [r7, #96]	@ 0x60
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	681b      	ldr	r3, [r3, #0]
 8014772:	3308      	adds	r3, #8
 8014774:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8014776:	643a      	str	r2, [r7, #64]	@ 0x40
 8014778:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801477a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801477c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801477e:	e841 2300 	strex	r3, r2, [r1]
 8014782:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8014784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014786:	2b00      	cmp	r3, #0
 8014788:	d1e5      	bne.n	8014756 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	2220      	movs	r2, #32
 801478e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	2200      	movs	r2, #0
 8014796:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	2200      	movs	r2, #0
 801479c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801479e:	687b      	ldr	r3, [r7, #4]
 80147a0:	681b      	ldr	r3, [r3, #0]
 80147a2:	4a35      	ldr	r2, [pc, #212]	@ (8014878 <UART_RxISR_16BIT+0x1bc>)
 80147a4:	4293      	cmp	r3, r2
 80147a6:	d024      	beq.n	80147f2 <UART_RxISR_16BIT+0x136>
 80147a8:	687b      	ldr	r3, [r7, #4]
 80147aa:	681b      	ldr	r3, [r3, #0]
 80147ac:	4a33      	ldr	r2, [pc, #204]	@ (801487c <UART_RxISR_16BIT+0x1c0>)
 80147ae:	4293      	cmp	r3, r2
 80147b0:	d01f      	beq.n	80147f2 <UART_RxISR_16BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80147b2:	687b      	ldr	r3, [r7, #4]
 80147b4:	681b      	ldr	r3, [r3, #0]
 80147b6:	685b      	ldr	r3, [r3, #4]
 80147b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80147bc:	2b00      	cmp	r3, #0
 80147be:	d018      	beq.n	80147f2 <UART_RxISR_16BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80147c0:	687b      	ldr	r3, [r7, #4]
 80147c2:	681b      	ldr	r3, [r3, #0]
 80147c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80147c6:	6a3b      	ldr	r3, [r7, #32]
 80147c8:	e853 3f00 	ldrex	r3, [r3]
 80147cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80147ce:	69fb      	ldr	r3, [r7, #28]
 80147d0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80147d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	681b      	ldr	r3, [r3, #0]
 80147da:	461a      	mov	r2, r3
 80147dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80147de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80147e0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80147e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80147e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80147e6:	e841 2300 	strex	r3, r2, [r1]
 80147ea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80147ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80147ee:	2b00      	cmp	r3, #0
 80147f0:	d1e6      	bne.n	80147c0 <UART_RxISR_16BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80147f2:	687b      	ldr	r3, [r7, #4]
 80147f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80147f6:	2b01      	cmp	r3, #1
 80147f8:	d12e      	bne.n	8014858 <UART_RxISR_16BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80147fa:	687b      	ldr	r3, [r7, #4]
 80147fc:	2200      	movs	r2, #0
 80147fe:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014800:	687b      	ldr	r3, [r7, #4]
 8014802:	681b      	ldr	r3, [r3, #0]
 8014804:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014806:	68fb      	ldr	r3, [r7, #12]
 8014808:	e853 3f00 	ldrex	r3, [r3]
 801480c:	60bb      	str	r3, [r7, #8]
   return(result);
 801480e:	68bb      	ldr	r3, [r7, #8]
 8014810:	f023 0310 	bic.w	r3, r3, #16
 8014814:	65bb      	str	r3, [r7, #88]	@ 0x58
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	681b      	ldr	r3, [r3, #0]
 801481a:	461a      	mov	r2, r3
 801481c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801481e:	61bb      	str	r3, [r7, #24]
 8014820:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014822:	6979      	ldr	r1, [r7, #20]
 8014824:	69ba      	ldr	r2, [r7, #24]
 8014826:	e841 2300 	strex	r3, r2, [r1]
 801482a:	613b      	str	r3, [r7, #16]
   return(result);
 801482c:	693b      	ldr	r3, [r7, #16]
 801482e:	2b00      	cmp	r3, #0
 8014830:	d1e6      	bne.n	8014800 <UART_RxISR_16BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8014832:	687b      	ldr	r3, [r7, #4]
 8014834:	681b      	ldr	r3, [r3, #0]
 8014836:	69db      	ldr	r3, [r3, #28]
 8014838:	f003 0310 	and.w	r3, r3, #16
 801483c:	2b10      	cmp	r3, #16
 801483e:	d103      	bne.n	8014848 <UART_RxISR_16BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8014840:	687b      	ldr	r3, [r7, #4]
 8014842:	681b      	ldr	r3, [r3, #0]
 8014844:	2210      	movs	r2, #16
 8014846:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8014848:	687b      	ldr	r3, [r7, #4]
 801484a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801484e:	4619      	mov	r1, r3
 8014850:	6878      	ldr	r0, [r7, #4]
 8014852:	f7ee fe2f 	bl	80034b4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8014856:	e00b      	b.n	8014870 <UART_RxISR_16BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 8014858:	6878      	ldr	r0, [r7, #4]
 801485a:	f7ee fdfd 	bl	8003458 <HAL_UART_RxCpltCallback>
}
 801485e:	e007      	b.n	8014870 <UART_RxISR_16BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8014860:	687b      	ldr	r3, [r7, #4]
 8014862:	681b      	ldr	r3, [r3, #0]
 8014864:	699a      	ldr	r2, [r3, #24]
 8014866:	687b      	ldr	r3, [r7, #4]
 8014868:	681b      	ldr	r3, [r3, #0]
 801486a:	f042 0208 	orr.w	r2, r2, #8
 801486e:	619a      	str	r2, [r3, #24]
}
 8014870:	bf00      	nop
 8014872:	3770      	adds	r7, #112	@ 0x70
 8014874:	46bd      	mov	sp, r7
 8014876:	bd80      	pop	{r7, pc}
 8014878:	44002400 	.word	0x44002400
 801487c:	54002400 	.word	0x54002400

08014880 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8014880:	b580      	push	{r7, lr}
 8014882:	b0ac      	sub	sp, #176	@ 0xb0
 8014884:	af00      	add	r7, sp, #0
 8014886:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8014888:	687b      	ldr	r3, [r7, #4]
 801488a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801488e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8014892:	687b      	ldr	r3, [r7, #4]
 8014894:	681b      	ldr	r3, [r3, #0]
 8014896:	69db      	ldr	r3, [r3, #28]
 8014898:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	681b      	ldr	r3, [r3, #0]
 80148a0:	681b      	ldr	r3, [r3, #0]
 80148a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80148a6:	687b      	ldr	r3, [r7, #4]
 80148a8:	681b      	ldr	r3, [r3, #0]
 80148aa:	689b      	ldr	r3, [r3, #8]
 80148ac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80148b6:	2b22      	cmp	r3, #34	@ 0x22
 80148b8:	f040 8187 	bne.w	8014bca <UART_RxISR_8BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80148c2:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80148c6:	e12a      	b.n	8014b1e <UART_RxISR_8BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80148c8:	687b      	ldr	r3, [r7, #4]
 80148ca:	681b      	ldr	r3, [r3, #0]
 80148cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80148ce:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80148d2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80148d6:	b2d9      	uxtb	r1, r3
 80148d8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80148dc:	b2da      	uxtb	r2, r3
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80148e2:	400a      	ands	r2, r1
 80148e4:	b2d2      	uxtb	r2, r2
 80148e6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80148e8:	687b      	ldr	r3, [r7, #4]
 80148ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80148ec:	1c5a      	adds	r2, r3, #1
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80148f2:	687b      	ldr	r3, [r7, #4]
 80148f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80148f8:	b29b      	uxth	r3, r3
 80148fa:	3b01      	subs	r3, #1
 80148fc:	b29a      	uxth	r2, r3
 80148fe:	687b      	ldr	r3, [r7, #4]
 8014900:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8014904:	687b      	ldr	r3, [r7, #4]
 8014906:	681b      	ldr	r3, [r3, #0]
 8014908:	69db      	ldr	r3, [r3, #28]
 801490a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801490e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8014912:	f003 0307 	and.w	r3, r3, #7
 8014916:	2b00      	cmp	r3, #0
 8014918:	d053      	beq.n	80149c2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801491a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801491e:	f003 0301 	and.w	r3, r3, #1
 8014922:	2b00      	cmp	r3, #0
 8014924:	d011      	beq.n	801494a <UART_RxISR_8BIT_FIFOEN+0xca>
 8014926:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801492a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801492e:	2b00      	cmp	r3, #0
 8014930:	d00b      	beq.n	801494a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	681b      	ldr	r3, [r3, #0]
 8014936:	2201      	movs	r2, #1
 8014938:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014940:	f043 0201 	orr.w	r2, r3, #1
 8014944:	687b      	ldr	r3, [r7, #4]
 8014946:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801494a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801494e:	f003 0302 	and.w	r3, r3, #2
 8014952:	2b00      	cmp	r3, #0
 8014954:	d011      	beq.n	801497a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8014956:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801495a:	f003 0301 	and.w	r3, r3, #1
 801495e:	2b00      	cmp	r3, #0
 8014960:	d00b      	beq.n	801497a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8014962:	687b      	ldr	r3, [r7, #4]
 8014964:	681b      	ldr	r3, [r3, #0]
 8014966:	2202      	movs	r2, #2
 8014968:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801496a:	687b      	ldr	r3, [r7, #4]
 801496c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014970:	f043 0204 	orr.w	r2, r3, #4
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801497a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801497e:	f003 0304 	and.w	r3, r3, #4
 8014982:	2b00      	cmp	r3, #0
 8014984:	d011      	beq.n	80149aa <UART_RxISR_8BIT_FIFOEN+0x12a>
 8014986:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801498a:	f003 0301 	and.w	r3, r3, #1
 801498e:	2b00      	cmp	r3, #0
 8014990:	d00b      	beq.n	80149aa <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8014992:	687b      	ldr	r3, [r7, #4]
 8014994:	681b      	ldr	r3, [r3, #0]
 8014996:	2204      	movs	r2, #4
 8014998:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801499a:	687b      	ldr	r3, [r7, #4]
 801499c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80149a0:	f043 0202 	orr.w	r2, r3, #2
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80149aa:	687b      	ldr	r3, [r7, #4]
 80149ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	d006      	beq.n	80149c2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80149b4:	6878      	ldr	r0, [r7, #4]
 80149b6:	f7fe fe13 	bl	80135e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	2200      	movs	r2, #0
 80149be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80149c2:	687b      	ldr	r3, [r7, #4]
 80149c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80149c8:	b29b      	uxth	r3, r3
 80149ca:	2b00      	cmp	r3, #0
 80149cc:	f040 80a7 	bne.w	8014b1e <UART_RxISR_8BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80149d0:	687b      	ldr	r3, [r7, #4]
 80149d2:	681b      	ldr	r3, [r3, #0]
 80149d4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80149d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80149d8:	e853 3f00 	ldrex	r3, [r3]
 80149dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 80149de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80149e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80149e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	681b      	ldr	r3, [r3, #0]
 80149ec:	461a      	mov	r2, r3
 80149ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80149f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80149f4:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80149f6:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80149f8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80149fa:	e841 2300 	strex	r3, r2, [r1]
 80149fe:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8014a00:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8014a02:	2b00      	cmp	r3, #0
 8014a04:	d1e4      	bne.n	80149d0 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8014a06:	687b      	ldr	r3, [r7, #4]
 8014a08:	681b      	ldr	r3, [r3, #0]
 8014a0a:	3308      	adds	r3, #8
 8014a0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014a0e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014a10:	e853 3f00 	ldrex	r3, [r3]
 8014a14:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8014a16:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014a18:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8014a1c:	f023 0301 	bic.w	r3, r3, #1
 8014a20:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	681b      	ldr	r3, [r3, #0]
 8014a28:	3308      	adds	r3, #8
 8014a2a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8014a2e:	66ba      	str	r2, [r7, #104]	@ 0x68
 8014a30:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014a32:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8014a34:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8014a36:	e841 2300 	strex	r3, r2, [r1]
 8014a3a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8014a3c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8014a3e:	2b00      	cmp	r3, #0
 8014a40:	d1e1      	bne.n	8014a06 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8014a42:	687b      	ldr	r3, [r7, #4]
 8014a44:	2220      	movs	r2, #32
 8014a46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8014a4a:	687b      	ldr	r3, [r7, #4]
 8014a4c:	2200      	movs	r2, #0
 8014a4e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8014a50:	687b      	ldr	r3, [r7, #4]
 8014a52:	2200      	movs	r2, #0
 8014a54:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8014a56:	687b      	ldr	r3, [r7, #4]
 8014a58:	681b      	ldr	r3, [r3, #0]
 8014a5a:	4a62      	ldr	r2, [pc, #392]	@ (8014be4 <UART_RxISR_8BIT_FIFOEN+0x364>)
 8014a5c:	4293      	cmp	r3, r2
 8014a5e:	d026      	beq.n	8014aae <UART_RxISR_8BIT_FIFOEN+0x22e>
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	681b      	ldr	r3, [r3, #0]
 8014a64:	4a60      	ldr	r2, [pc, #384]	@ (8014be8 <UART_RxISR_8BIT_FIFOEN+0x368>)
 8014a66:	4293      	cmp	r3, r2
 8014a68:	d021      	beq.n	8014aae <UART_RxISR_8BIT_FIFOEN+0x22e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8014a6a:	687b      	ldr	r3, [r7, #4]
 8014a6c:	681b      	ldr	r3, [r3, #0]
 8014a6e:	685b      	ldr	r3, [r3, #4]
 8014a70:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8014a74:	2b00      	cmp	r3, #0
 8014a76:	d01a      	beq.n	8014aae <UART_RxISR_8BIT_FIFOEN+0x22e>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	681b      	ldr	r3, [r3, #0]
 8014a7c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014a7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014a80:	e853 3f00 	ldrex	r3, [r3]
 8014a84:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8014a86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014a88:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8014a8c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	681b      	ldr	r3, [r3, #0]
 8014a94:	461a      	mov	r2, r3
 8014a96:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014a9a:	657b      	str	r3, [r7, #84]	@ 0x54
 8014a9c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014a9e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8014aa0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8014aa2:	e841 2300 	strex	r3, r2, [r1]
 8014aa6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8014aa8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014aaa:	2b00      	cmp	r3, #0
 8014aac:	d1e4      	bne.n	8014a78 <UART_RxISR_8BIT_FIFOEN+0x1f8>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014ab2:	2b01      	cmp	r3, #1
 8014ab4:	d130      	bne.n	8014b18 <UART_RxISR_8BIT_FIFOEN+0x298>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014ab6:	687b      	ldr	r3, [r7, #4]
 8014ab8:	2200      	movs	r2, #0
 8014aba:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014abc:	687b      	ldr	r3, [r7, #4]
 8014abe:	681b      	ldr	r3, [r3, #0]
 8014ac0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014ac2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014ac4:	e853 3f00 	ldrex	r3, [r3]
 8014ac8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8014aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014acc:	f023 0310 	bic.w	r3, r3, #16
 8014ad0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8014ad4:	687b      	ldr	r3, [r7, #4]
 8014ad6:	681b      	ldr	r3, [r3, #0]
 8014ad8:	461a      	mov	r2, r3
 8014ada:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014ade:	643b      	str	r3, [r7, #64]	@ 0x40
 8014ae0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014ae2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8014ae4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8014ae6:	e841 2300 	strex	r3, r2, [r1]
 8014aea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8014aec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014aee:	2b00      	cmp	r3, #0
 8014af0:	d1e4      	bne.n	8014abc <UART_RxISR_8BIT_FIFOEN+0x23c>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8014af2:	687b      	ldr	r3, [r7, #4]
 8014af4:	681b      	ldr	r3, [r3, #0]
 8014af6:	69db      	ldr	r3, [r3, #28]
 8014af8:	f003 0310 	and.w	r3, r3, #16
 8014afc:	2b10      	cmp	r3, #16
 8014afe:	d103      	bne.n	8014b08 <UART_RxISR_8BIT_FIFOEN+0x288>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	681b      	ldr	r3, [r3, #0]
 8014b04:	2210      	movs	r2, #16
 8014b06:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8014b08:	687b      	ldr	r3, [r7, #4]
 8014b0a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8014b0e:	4619      	mov	r1, r3
 8014b10:	6878      	ldr	r0, [r7, #4]
 8014b12:	f7ee fccf 	bl	80034b4 <HAL_UARTEx_RxEventCallback>
 8014b16:	e002      	b.n	8014b1e <UART_RxISR_8BIT_FIFOEN+0x29e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8014b18:	6878      	ldr	r0, [r7, #4]
 8014b1a:	f7ee fc9d 	bl	8003458 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8014b1e:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8014b22:	2b00      	cmp	r3, #0
 8014b24:	d006      	beq.n	8014b34 <UART_RxISR_8BIT_FIFOEN+0x2b4>
 8014b26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8014b2a:	f003 0320 	and.w	r3, r3, #32
 8014b2e:	2b00      	cmp	r3, #0
 8014b30:	f47f aeca 	bne.w	80148c8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8014b34:	687b      	ldr	r3, [r7, #4]
 8014b36:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8014b3a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8014b3e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8014b42:	2b00      	cmp	r3, #0
 8014b44:	d049      	beq.n	8014bda <UART_RxISR_8BIT_FIFOEN+0x35a>
 8014b46:	687b      	ldr	r3, [r7, #4]
 8014b48:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8014b4c:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8014b50:	429a      	cmp	r2, r3
 8014b52:	d242      	bcs.n	8014bda <UART_RxISR_8BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8014b54:	687b      	ldr	r3, [r7, #4]
 8014b56:	681b      	ldr	r3, [r3, #0]
 8014b58:	3308      	adds	r3, #8
 8014b5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014b5c:	6a3b      	ldr	r3, [r7, #32]
 8014b5e:	e853 3f00 	ldrex	r3, [r3]
 8014b62:	61fb      	str	r3, [r7, #28]
   return(result);
 8014b64:	69fb      	ldr	r3, [r7, #28]
 8014b66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8014b6a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8014b6e:	687b      	ldr	r3, [r7, #4]
 8014b70:	681b      	ldr	r3, [r3, #0]
 8014b72:	3308      	adds	r3, #8
 8014b74:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8014b78:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8014b7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014b7c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8014b7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014b80:	e841 2300 	strex	r3, r2, [r1]
 8014b84:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8014b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014b88:	2b00      	cmp	r3, #0
 8014b8a:	d1e3      	bne.n	8014b54 <UART_RxISR_8BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8014b8c:	687b      	ldr	r3, [r7, #4]
 8014b8e:	4a17      	ldr	r2, [pc, #92]	@ (8014bec <UART_RxISR_8BIT_FIFOEN+0x36c>)
 8014b90:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8014b92:	687b      	ldr	r3, [r7, #4]
 8014b94:	681b      	ldr	r3, [r3, #0]
 8014b96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014b98:	68fb      	ldr	r3, [r7, #12]
 8014b9a:	e853 3f00 	ldrex	r3, [r3]
 8014b9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8014ba0:	68bb      	ldr	r3, [r7, #8]
 8014ba2:	f043 0320 	orr.w	r3, r3, #32
 8014ba6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8014baa:	687b      	ldr	r3, [r7, #4]
 8014bac:	681b      	ldr	r3, [r3, #0]
 8014bae:	461a      	mov	r2, r3
 8014bb0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8014bb4:	61bb      	str	r3, [r7, #24]
 8014bb6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014bb8:	6979      	ldr	r1, [r7, #20]
 8014bba:	69ba      	ldr	r2, [r7, #24]
 8014bbc:	e841 2300 	strex	r3, r2, [r1]
 8014bc0:	613b      	str	r3, [r7, #16]
   return(result);
 8014bc2:	693b      	ldr	r3, [r7, #16]
 8014bc4:	2b00      	cmp	r3, #0
 8014bc6:	d1e4      	bne.n	8014b92 <UART_RxISR_8BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8014bc8:	e007      	b.n	8014bda <UART_RxISR_8BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	681b      	ldr	r3, [r3, #0]
 8014bce:	699a      	ldr	r2, [r3, #24]
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	681b      	ldr	r3, [r3, #0]
 8014bd4:	f042 0208 	orr.w	r2, r2, #8
 8014bd8:	619a      	str	r2, [r3, #24]
}
 8014bda:	bf00      	nop
 8014bdc:	37b0      	adds	r7, #176	@ 0xb0
 8014bde:	46bd      	mov	sp, r7
 8014be0:	bd80      	pop	{r7, pc}
 8014be2:	bf00      	nop
 8014be4:	44002400 	.word	0x44002400
 8014be8:	54002400 	.word	0x54002400
 8014bec:	080144f9 	.word	0x080144f9

08014bf0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8014bf0:	b580      	push	{r7, lr}
 8014bf2:	b0ae      	sub	sp, #184	@ 0xb8
 8014bf4:	af00      	add	r7, sp, #0
 8014bf6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8014bfe:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8014c02:	687b      	ldr	r3, [r7, #4]
 8014c04:	681b      	ldr	r3, [r3, #0]
 8014c06:	69db      	ldr	r3, [r3, #28]
 8014c08:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8014c0c:	687b      	ldr	r3, [r7, #4]
 8014c0e:	681b      	ldr	r3, [r3, #0]
 8014c10:	681b      	ldr	r3, [r3, #0]
 8014c12:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8014c16:	687b      	ldr	r3, [r7, #4]
 8014c18:	681b      	ldr	r3, [r3, #0]
 8014c1a:	689b      	ldr	r3, [r3, #8]
 8014c1c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8014c20:	687b      	ldr	r3, [r7, #4]
 8014c22:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8014c26:	2b22      	cmp	r3, #34	@ 0x22
 8014c28:	f040 818b 	bne.w	8014f42 <UART_RxISR_16BIT_FIFOEN+0x352>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8014c2c:	687b      	ldr	r3, [r7, #4]
 8014c2e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8014c32:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8014c36:	e12e      	b.n	8014e96 <UART_RxISR_16BIT_FIFOEN+0x2a6>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	681b      	ldr	r3, [r3, #0]
 8014c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014c3e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8014c42:	687b      	ldr	r3, [r7, #4]
 8014c44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014c46:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8014c4a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8014c4e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8014c52:	4013      	ands	r3, r2
 8014c54:	b29a      	uxth	r2, r3
 8014c56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014c5a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014c60:	1c9a      	adds	r2, r3, #2
 8014c62:	687b      	ldr	r3, [r7, #4]
 8014c64:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8014c6c:	b29b      	uxth	r3, r3
 8014c6e:	3b01      	subs	r3, #1
 8014c70:	b29a      	uxth	r2, r3
 8014c72:	687b      	ldr	r3, [r7, #4]
 8014c74:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8014c78:	687b      	ldr	r3, [r7, #4]
 8014c7a:	681b      	ldr	r3, [r3, #0]
 8014c7c:	69db      	ldr	r3, [r3, #28]
 8014c7e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8014c82:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8014c86:	f003 0307 	and.w	r3, r3, #7
 8014c8a:	2b00      	cmp	r3, #0
 8014c8c:	d053      	beq.n	8014d36 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8014c8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8014c92:	f003 0301 	and.w	r3, r3, #1
 8014c96:	2b00      	cmp	r3, #0
 8014c98:	d011      	beq.n	8014cbe <UART_RxISR_16BIT_FIFOEN+0xce>
 8014c9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8014c9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014ca2:	2b00      	cmp	r3, #0
 8014ca4:	d00b      	beq.n	8014cbe <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8014ca6:	687b      	ldr	r3, [r7, #4]
 8014ca8:	681b      	ldr	r3, [r3, #0]
 8014caa:	2201      	movs	r2, #1
 8014cac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8014cae:	687b      	ldr	r3, [r7, #4]
 8014cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014cb4:	f043 0201 	orr.w	r2, r3, #1
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8014cbe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8014cc2:	f003 0302 	and.w	r3, r3, #2
 8014cc6:	2b00      	cmp	r3, #0
 8014cc8:	d011      	beq.n	8014cee <UART_RxISR_16BIT_FIFOEN+0xfe>
 8014cca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8014cce:	f003 0301 	and.w	r3, r3, #1
 8014cd2:	2b00      	cmp	r3, #0
 8014cd4:	d00b      	beq.n	8014cee <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	681b      	ldr	r3, [r3, #0]
 8014cda:	2202      	movs	r2, #2
 8014cdc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8014cde:	687b      	ldr	r3, [r7, #4]
 8014ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014ce4:	f043 0204 	orr.w	r2, r3, #4
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8014cee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8014cf2:	f003 0304 	and.w	r3, r3, #4
 8014cf6:	2b00      	cmp	r3, #0
 8014cf8:	d011      	beq.n	8014d1e <UART_RxISR_16BIT_FIFOEN+0x12e>
 8014cfa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8014cfe:	f003 0301 	and.w	r3, r3, #1
 8014d02:	2b00      	cmp	r3, #0
 8014d04:	d00b      	beq.n	8014d1e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8014d06:	687b      	ldr	r3, [r7, #4]
 8014d08:	681b      	ldr	r3, [r3, #0]
 8014d0a:	2204      	movs	r2, #4
 8014d0c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8014d0e:	687b      	ldr	r3, [r7, #4]
 8014d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014d14:	f043 0202 	orr.w	r2, r3, #2
 8014d18:	687b      	ldr	r3, [r7, #4]
 8014d1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8014d1e:	687b      	ldr	r3, [r7, #4]
 8014d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014d24:	2b00      	cmp	r3, #0
 8014d26:	d006      	beq.n	8014d36 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8014d28:	6878      	ldr	r0, [r7, #4]
 8014d2a:	f7fe fc59 	bl	80135e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	2200      	movs	r2, #0
 8014d32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8014d36:	687b      	ldr	r3, [r7, #4]
 8014d38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8014d3c:	b29b      	uxth	r3, r3
 8014d3e:	2b00      	cmp	r3, #0
 8014d40:	f040 80a9 	bne.w	8014e96 <UART_RxISR_16BIT_FIFOEN+0x2a6>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	681b      	ldr	r3, [r3, #0]
 8014d48:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014d4a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8014d4c:	e853 3f00 	ldrex	r3, [r3]
 8014d50:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8014d52:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8014d54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8014d58:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	681b      	ldr	r3, [r3, #0]
 8014d60:	461a      	mov	r2, r3
 8014d62:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8014d66:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8014d6a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014d6c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8014d6e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8014d72:	e841 2300 	strex	r3, r2, [r1]
 8014d76:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8014d78:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014d7a:	2b00      	cmp	r3, #0
 8014d7c:	d1e2      	bne.n	8014d44 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	681b      	ldr	r3, [r3, #0]
 8014d82:	3308      	adds	r3, #8
 8014d84:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014d86:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8014d88:	e853 3f00 	ldrex	r3, [r3]
 8014d8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8014d8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014d90:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8014d94:	f023 0301 	bic.w	r3, r3, #1
 8014d98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	681b      	ldr	r3, [r3, #0]
 8014da0:	3308      	adds	r3, #8
 8014da2:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8014da6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8014da8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014daa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8014dac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8014dae:	e841 2300 	strex	r3, r2, [r1]
 8014db2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8014db4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8014db6:	2b00      	cmp	r3, #0
 8014db8:	d1e1      	bne.n	8014d7e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8014dba:	687b      	ldr	r3, [r7, #4]
 8014dbc:	2220      	movs	r2, #32
 8014dbe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	2200      	movs	r2, #0
 8014dc6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8014dc8:	687b      	ldr	r3, [r7, #4]
 8014dca:	2200      	movs	r2, #0
 8014dcc:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8014dce:	687b      	ldr	r3, [r7, #4]
 8014dd0:	681b      	ldr	r3, [r3, #0]
 8014dd2:	4a62      	ldr	r2, [pc, #392]	@ (8014f5c <UART_RxISR_16BIT_FIFOEN+0x36c>)
 8014dd4:	4293      	cmp	r3, r2
 8014dd6:	d026      	beq.n	8014e26 <UART_RxISR_16BIT_FIFOEN+0x236>
 8014dd8:	687b      	ldr	r3, [r7, #4]
 8014dda:	681b      	ldr	r3, [r3, #0]
 8014ddc:	4a60      	ldr	r2, [pc, #384]	@ (8014f60 <UART_RxISR_16BIT_FIFOEN+0x370>)
 8014dde:	4293      	cmp	r3, r2
 8014de0:	d021      	beq.n	8014e26 <UART_RxISR_16BIT_FIFOEN+0x236>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8014de2:	687b      	ldr	r3, [r7, #4]
 8014de4:	681b      	ldr	r3, [r3, #0]
 8014de6:	685b      	ldr	r3, [r3, #4]
 8014de8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8014dec:	2b00      	cmp	r3, #0
 8014dee:	d01a      	beq.n	8014e26 <UART_RxISR_16BIT_FIFOEN+0x236>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	681b      	ldr	r3, [r3, #0]
 8014df4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014df6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014df8:	e853 3f00 	ldrex	r3, [r3]
 8014dfc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8014dfe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014e00:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8014e04:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8014e08:	687b      	ldr	r3, [r7, #4]
 8014e0a:	681b      	ldr	r3, [r3, #0]
 8014e0c:	461a      	mov	r2, r3
 8014e0e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8014e12:	65bb      	str	r3, [r7, #88]	@ 0x58
 8014e14:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014e16:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8014e18:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8014e1a:	e841 2300 	strex	r3, r2, [r1]
 8014e1e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8014e20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014e22:	2b00      	cmp	r3, #0
 8014e24:	d1e4      	bne.n	8014df0 <UART_RxISR_16BIT_FIFOEN+0x200>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014e26:	687b      	ldr	r3, [r7, #4]
 8014e28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014e2a:	2b01      	cmp	r3, #1
 8014e2c:	d130      	bne.n	8014e90 <UART_RxISR_16BIT_FIFOEN+0x2a0>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	2200      	movs	r2, #0
 8014e32:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014e34:	687b      	ldr	r3, [r7, #4]
 8014e36:	681b      	ldr	r3, [r3, #0]
 8014e38:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014e3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014e3c:	e853 3f00 	ldrex	r3, [r3]
 8014e40:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8014e42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014e44:	f023 0310 	bic.w	r3, r3, #16
 8014e48:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	681b      	ldr	r3, [r3, #0]
 8014e50:	461a      	mov	r2, r3
 8014e52:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014e56:	647b      	str	r3, [r7, #68]	@ 0x44
 8014e58:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014e5a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8014e5c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8014e5e:	e841 2300 	strex	r3, r2, [r1]
 8014e62:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8014e64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014e66:	2b00      	cmp	r3, #0
 8014e68:	d1e4      	bne.n	8014e34 <UART_RxISR_16BIT_FIFOEN+0x244>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8014e6a:	687b      	ldr	r3, [r7, #4]
 8014e6c:	681b      	ldr	r3, [r3, #0]
 8014e6e:	69db      	ldr	r3, [r3, #28]
 8014e70:	f003 0310 	and.w	r3, r3, #16
 8014e74:	2b10      	cmp	r3, #16
 8014e76:	d103      	bne.n	8014e80 <UART_RxISR_16BIT_FIFOEN+0x290>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8014e78:	687b      	ldr	r3, [r7, #4]
 8014e7a:	681b      	ldr	r3, [r3, #0]
 8014e7c:	2210      	movs	r2, #16
 8014e7e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8014e80:	687b      	ldr	r3, [r7, #4]
 8014e82:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8014e86:	4619      	mov	r1, r3
 8014e88:	6878      	ldr	r0, [r7, #4]
 8014e8a:	f7ee fb13 	bl	80034b4 <HAL_UARTEx_RxEventCallback>
 8014e8e:	e002      	b.n	8014e96 <UART_RxISR_16BIT_FIFOEN+0x2a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8014e90:	6878      	ldr	r0, [r7, #4]
 8014e92:	f7ee fae1 	bl	8003458 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8014e96:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8014e9a:	2b00      	cmp	r3, #0
 8014e9c:	d006      	beq.n	8014eac <UART_RxISR_16BIT_FIFOEN+0x2bc>
 8014e9e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8014ea2:	f003 0320 	and.w	r3, r3, #32
 8014ea6:	2b00      	cmp	r3, #0
 8014ea8:	f47f aec6 	bne.w	8014c38 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8014eac:	687b      	ldr	r3, [r7, #4]
 8014eae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8014eb2:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8014eb6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8014eba:	2b00      	cmp	r3, #0
 8014ebc:	d049      	beq.n	8014f52 <UART_RxISR_16BIT_FIFOEN+0x362>
 8014ebe:	687b      	ldr	r3, [r7, #4]
 8014ec0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8014ec4:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8014ec8:	429a      	cmp	r2, r3
 8014eca:	d242      	bcs.n	8014f52 <UART_RxISR_16BIT_FIFOEN+0x362>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8014ecc:	687b      	ldr	r3, [r7, #4]
 8014ece:	681b      	ldr	r3, [r3, #0]
 8014ed0:	3308      	adds	r3, #8
 8014ed2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014ed6:	e853 3f00 	ldrex	r3, [r3]
 8014eda:	623b      	str	r3, [r7, #32]
   return(result);
 8014edc:	6a3b      	ldr	r3, [r7, #32]
 8014ede:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8014ee2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8014ee6:	687b      	ldr	r3, [r7, #4]
 8014ee8:	681b      	ldr	r3, [r3, #0]
 8014eea:	3308      	adds	r3, #8
 8014eec:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8014ef0:	633a      	str	r2, [r7, #48]	@ 0x30
 8014ef2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014ef4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014ef6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014ef8:	e841 2300 	strex	r3, r2, [r1]
 8014efc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8014efe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014f00:	2b00      	cmp	r3, #0
 8014f02:	d1e3      	bne.n	8014ecc <UART_RxISR_16BIT_FIFOEN+0x2dc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8014f04:	687b      	ldr	r3, [r7, #4]
 8014f06:	4a17      	ldr	r2, [pc, #92]	@ (8014f64 <UART_RxISR_16BIT_FIFOEN+0x374>)
 8014f08:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8014f0a:	687b      	ldr	r3, [r7, #4]
 8014f0c:	681b      	ldr	r3, [r3, #0]
 8014f0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014f10:	693b      	ldr	r3, [r7, #16]
 8014f12:	e853 3f00 	ldrex	r3, [r3]
 8014f16:	60fb      	str	r3, [r7, #12]
   return(result);
 8014f18:	68fb      	ldr	r3, [r7, #12]
 8014f1a:	f043 0320 	orr.w	r3, r3, #32
 8014f1e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8014f22:	687b      	ldr	r3, [r7, #4]
 8014f24:	681b      	ldr	r3, [r3, #0]
 8014f26:	461a      	mov	r2, r3
 8014f28:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8014f2c:	61fb      	str	r3, [r7, #28]
 8014f2e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014f30:	69b9      	ldr	r1, [r7, #24]
 8014f32:	69fa      	ldr	r2, [r7, #28]
 8014f34:	e841 2300 	strex	r3, r2, [r1]
 8014f38:	617b      	str	r3, [r7, #20]
   return(result);
 8014f3a:	697b      	ldr	r3, [r7, #20]
 8014f3c:	2b00      	cmp	r3, #0
 8014f3e:	d1e4      	bne.n	8014f0a <UART_RxISR_16BIT_FIFOEN+0x31a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8014f40:	e007      	b.n	8014f52 <UART_RxISR_16BIT_FIFOEN+0x362>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8014f42:	687b      	ldr	r3, [r7, #4]
 8014f44:	681b      	ldr	r3, [r3, #0]
 8014f46:	699a      	ldr	r2, [r3, #24]
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	681b      	ldr	r3, [r3, #0]
 8014f4c:	f042 0208 	orr.w	r2, r2, #8
 8014f50:	619a      	str	r2, [r3, #24]
}
 8014f52:	bf00      	nop
 8014f54:	37b8      	adds	r7, #184	@ 0xb8
 8014f56:	46bd      	mov	sp, r7
 8014f58:	bd80      	pop	{r7, pc}
 8014f5a:	bf00      	nop
 8014f5c:	44002400 	.word	0x44002400
 8014f60:	54002400 	.word	0x54002400
 8014f64:	080146bd 	.word	0x080146bd

08014f68 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8014f68:	b480      	push	{r7}
 8014f6a:	b083      	sub	sp, #12
 8014f6c:	af00      	add	r7, sp, #0
 8014f6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8014f70:	bf00      	nop
 8014f72:	370c      	adds	r7, #12
 8014f74:	46bd      	mov	sp, r7
 8014f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f7a:	4770      	bx	lr

08014f7c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8014f7c:	b480      	push	{r7}
 8014f7e:	b083      	sub	sp, #12
 8014f80:	af00      	add	r7, sp, #0
 8014f82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8014f84:	bf00      	nop
 8014f86:	370c      	adds	r7, #12
 8014f88:	46bd      	mov	sp, r7
 8014f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f8e:	4770      	bx	lr

08014f90 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8014f90:	b480      	push	{r7}
 8014f92:	b083      	sub	sp, #12
 8014f94:	af00      	add	r7, sp, #0
 8014f96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8014f98:	bf00      	nop
 8014f9a:	370c      	adds	r7, #12
 8014f9c:	46bd      	mov	sp, r7
 8014f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fa2:	4770      	bx	lr

08014fa4 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8014fa4:	b580      	push	{r7, lr}
 8014fa6:	b084      	sub	sp, #16
 8014fa8:	af00      	add	r7, sp, #0
 8014faa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8014fac:	687b      	ldr	r3, [r7, #4]
 8014fae:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8014fb2:	2b01      	cmp	r3, #1
 8014fb4:	d101      	bne.n	8014fba <HAL_UARTEx_EnableFifoMode+0x16>
 8014fb6:	2302      	movs	r3, #2
 8014fb8:	e02b      	b.n	8015012 <HAL_UARTEx_EnableFifoMode+0x6e>
 8014fba:	687b      	ldr	r3, [r7, #4]
 8014fbc:	2201      	movs	r2, #1
 8014fbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8014fc2:	687b      	ldr	r3, [r7, #4]
 8014fc4:	2224      	movs	r2, #36	@ 0x24
 8014fc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8014fca:	687b      	ldr	r3, [r7, #4]
 8014fcc:	681b      	ldr	r3, [r3, #0]
 8014fce:	681b      	ldr	r3, [r3, #0]
 8014fd0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	681b      	ldr	r3, [r3, #0]
 8014fd6:	681a      	ldr	r2, [r3, #0]
 8014fd8:	687b      	ldr	r3, [r7, #4]
 8014fda:	681b      	ldr	r3, [r3, #0]
 8014fdc:	f022 0201 	bic.w	r2, r2, #1
 8014fe0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8014fe2:	68fb      	ldr	r3, [r7, #12]
 8014fe4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8014fe8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8014ff0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8014ff2:	687b      	ldr	r3, [r7, #4]
 8014ff4:	681b      	ldr	r3, [r3, #0]
 8014ff6:	68fa      	ldr	r2, [r7, #12]
 8014ff8:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8014ffa:	6878      	ldr	r0, [r7, #4]
 8014ffc:	f000 f912 	bl	8015224 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	2220      	movs	r2, #32
 8015004:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8015008:	687b      	ldr	r3, [r7, #4]
 801500a:	2200      	movs	r2, #0
 801500c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8015010:	2300      	movs	r3, #0
}
 8015012:	4618      	mov	r0, r3
 8015014:	3710      	adds	r7, #16
 8015016:	46bd      	mov	sp, r7
 8015018:	bd80      	pop	{r7, pc}

0801501a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801501a:	b480      	push	{r7}
 801501c:	b085      	sub	sp, #20
 801501e:	af00      	add	r7, sp, #0
 8015020:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8015028:	2b01      	cmp	r3, #1
 801502a:	d101      	bne.n	8015030 <HAL_UARTEx_DisableFifoMode+0x16>
 801502c:	2302      	movs	r3, #2
 801502e:	e027      	b.n	8015080 <HAL_UARTEx_DisableFifoMode+0x66>
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	2201      	movs	r2, #1
 8015034:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	2224      	movs	r2, #36	@ 0x24
 801503c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	681b      	ldr	r3, [r3, #0]
 8015044:	681b      	ldr	r3, [r3, #0]
 8015046:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8015048:	687b      	ldr	r3, [r7, #4]
 801504a:	681b      	ldr	r3, [r3, #0]
 801504c:	681a      	ldr	r2, [r3, #0]
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	681b      	ldr	r3, [r3, #0]
 8015052:	f022 0201 	bic.w	r2, r2, #1
 8015056:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8015058:	68fb      	ldr	r3, [r7, #12]
 801505a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 801505e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8015060:	687b      	ldr	r3, [r7, #4]
 8015062:	2200      	movs	r2, #0
 8015064:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8015066:	687b      	ldr	r3, [r7, #4]
 8015068:	681b      	ldr	r3, [r3, #0]
 801506a:	68fa      	ldr	r2, [r7, #12]
 801506c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	2220      	movs	r2, #32
 8015072:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	2200      	movs	r2, #0
 801507a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801507e:	2300      	movs	r3, #0
}
 8015080:	4618      	mov	r0, r3
 8015082:	3714      	adds	r7, #20
 8015084:	46bd      	mov	sp, r7
 8015086:	f85d 7b04 	ldr.w	r7, [sp], #4
 801508a:	4770      	bx	lr

0801508c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801508c:	b580      	push	{r7, lr}
 801508e:	b084      	sub	sp, #16
 8015090:	af00      	add	r7, sp, #0
 8015092:	6078      	str	r0, [r7, #4]
 8015094:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8015096:	687b      	ldr	r3, [r7, #4]
 8015098:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801509c:	2b01      	cmp	r3, #1
 801509e:	d101      	bne.n	80150a4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80150a0:	2302      	movs	r3, #2
 80150a2:	e02d      	b.n	8015100 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80150a4:	687b      	ldr	r3, [r7, #4]
 80150a6:	2201      	movs	r2, #1
 80150a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	2224      	movs	r2, #36	@ 0x24
 80150b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80150b4:	687b      	ldr	r3, [r7, #4]
 80150b6:	681b      	ldr	r3, [r3, #0]
 80150b8:	681b      	ldr	r3, [r3, #0]
 80150ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80150bc:	687b      	ldr	r3, [r7, #4]
 80150be:	681b      	ldr	r3, [r3, #0]
 80150c0:	681a      	ldr	r2, [r3, #0]
 80150c2:	687b      	ldr	r3, [r7, #4]
 80150c4:	681b      	ldr	r3, [r3, #0]
 80150c6:	f022 0201 	bic.w	r2, r2, #1
 80150ca:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	681b      	ldr	r3, [r3, #0]
 80150d0:	689b      	ldr	r3, [r3, #8]
 80150d2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80150d6:	687b      	ldr	r3, [r7, #4]
 80150d8:	681b      	ldr	r3, [r3, #0]
 80150da:	683a      	ldr	r2, [r7, #0]
 80150dc:	430a      	orrs	r2, r1
 80150de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80150e0:	6878      	ldr	r0, [r7, #4]
 80150e2:	f000 f89f 	bl	8015224 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80150e6:	687b      	ldr	r3, [r7, #4]
 80150e8:	681b      	ldr	r3, [r3, #0]
 80150ea:	68fa      	ldr	r2, [r7, #12]
 80150ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80150ee:	687b      	ldr	r3, [r7, #4]
 80150f0:	2220      	movs	r2, #32
 80150f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80150f6:	687b      	ldr	r3, [r7, #4]
 80150f8:	2200      	movs	r2, #0
 80150fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80150fe:	2300      	movs	r3, #0
}
 8015100:	4618      	mov	r0, r3
 8015102:	3710      	adds	r7, #16
 8015104:	46bd      	mov	sp, r7
 8015106:	bd80      	pop	{r7, pc}

08015108 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8015108:	b580      	push	{r7, lr}
 801510a:	b084      	sub	sp, #16
 801510c:	af00      	add	r7, sp, #0
 801510e:	6078      	str	r0, [r7, #4]
 8015110:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8015118:	2b01      	cmp	r3, #1
 801511a:	d101      	bne.n	8015120 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801511c:	2302      	movs	r3, #2
 801511e:	e02d      	b.n	801517c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8015120:	687b      	ldr	r3, [r7, #4]
 8015122:	2201      	movs	r2, #1
 8015124:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8015128:	687b      	ldr	r3, [r7, #4]
 801512a:	2224      	movs	r2, #36	@ 0x24
 801512c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8015130:	687b      	ldr	r3, [r7, #4]
 8015132:	681b      	ldr	r3, [r3, #0]
 8015134:	681b      	ldr	r3, [r3, #0]
 8015136:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8015138:	687b      	ldr	r3, [r7, #4]
 801513a:	681b      	ldr	r3, [r3, #0]
 801513c:	681a      	ldr	r2, [r3, #0]
 801513e:	687b      	ldr	r3, [r7, #4]
 8015140:	681b      	ldr	r3, [r3, #0]
 8015142:	f022 0201 	bic.w	r2, r2, #1
 8015146:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8015148:	687b      	ldr	r3, [r7, #4]
 801514a:	681b      	ldr	r3, [r3, #0]
 801514c:	689b      	ldr	r3, [r3, #8]
 801514e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8015152:	687b      	ldr	r3, [r7, #4]
 8015154:	681b      	ldr	r3, [r3, #0]
 8015156:	683a      	ldr	r2, [r7, #0]
 8015158:	430a      	orrs	r2, r1
 801515a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801515c:	6878      	ldr	r0, [r7, #4]
 801515e:	f000 f861 	bl	8015224 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	681b      	ldr	r3, [r3, #0]
 8015166:	68fa      	ldr	r2, [r7, #12]
 8015168:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801516a:	687b      	ldr	r3, [r7, #4]
 801516c:	2220      	movs	r2, #32
 801516e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8015172:	687b      	ldr	r3, [r7, #4]
 8015174:	2200      	movs	r2, #0
 8015176:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801517a:	2300      	movs	r3, #0
}
 801517c:	4618      	mov	r0, r3
 801517e:	3710      	adds	r7, #16
 8015180:	46bd      	mov	sp, r7
 8015182:	bd80      	pop	{r7, pc}

08015184 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8015184:	b580      	push	{r7, lr}
 8015186:	b08c      	sub	sp, #48	@ 0x30
 8015188:	af00      	add	r7, sp, #0
 801518a:	60f8      	str	r0, [r7, #12]
 801518c:	60b9      	str	r1, [r7, #8]
 801518e:	4613      	mov	r3, r2
 8015190:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8015192:	2300      	movs	r3, #0
 8015194:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8015198:	68fb      	ldr	r3, [r7, #12]
 801519a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801519e:	2b20      	cmp	r3, #32
 80151a0:	d13b      	bne.n	801521a <HAL_UARTEx_ReceiveToIdle_IT+0x96>
  {
    if ((pData == NULL) || (Size == 0U))
 80151a2:	68bb      	ldr	r3, [r7, #8]
 80151a4:	2b00      	cmp	r3, #0
 80151a6:	d002      	beq.n	80151ae <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
 80151a8:	88fb      	ldrh	r3, [r7, #6]
 80151aa:	2b00      	cmp	r3, #0
 80151ac:	d101      	bne.n	80151b2 <HAL_UARTEx_ReceiveToIdle_IT+0x2e>
    {
      return HAL_ERROR;
 80151ae:	2301      	movs	r3, #1
 80151b0:	e034      	b.n	801521c <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80151b2:	68fb      	ldr	r3, [r7, #12]
 80151b4:	2201      	movs	r2, #1
 80151b6:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80151b8:	68fb      	ldr	r3, [r7, #12]
 80151ba:	2200      	movs	r2, #0
 80151bc:	671a      	str	r2, [r3, #112]	@ 0x70

    (void)UART_Start_Receive_IT(huart, pData, Size);
 80151be:	88fb      	ldrh	r3, [r7, #6]
 80151c0:	461a      	mov	r2, r3
 80151c2:	68b9      	ldr	r1, [r7, #8]
 80151c4:	68f8      	ldr	r0, [r7, #12]
 80151c6:	f7fe fdbd 	bl	8013d44 <UART_Start_Receive_IT>

    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80151ca:	68fb      	ldr	r3, [r7, #12]
 80151cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80151ce:	2b01      	cmp	r3, #1
 80151d0:	d11d      	bne.n	801520e <HAL_UARTEx_ReceiveToIdle_IT+0x8a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80151d2:	68fb      	ldr	r3, [r7, #12]
 80151d4:	681b      	ldr	r3, [r3, #0]
 80151d6:	2210      	movs	r2, #16
 80151d8:	621a      	str	r2, [r3, #32]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80151da:	68fb      	ldr	r3, [r7, #12]
 80151dc:	681b      	ldr	r3, [r3, #0]
 80151de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80151e0:	69bb      	ldr	r3, [r7, #24]
 80151e2:	e853 3f00 	ldrex	r3, [r3]
 80151e6:	617b      	str	r3, [r7, #20]
   return(result);
 80151e8:	697b      	ldr	r3, [r7, #20]
 80151ea:	f043 0310 	orr.w	r3, r3, #16
 80151ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 80151f0:	68fb      	ldr	r3, [r7, #12]
 80151f2:	681b      	ldr	r3, [r3, #0]
 80151f4:	461a      	mov	r2, r3
 80151f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80151f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80151fa:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80151fc:	6a39      	ldr	r1, [r7, #32]
 80151fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015200:	e841 2300 	strex	r3, r2, [r1]
 8015204:	61fb      	str	r3, [r7, #28]
   return(result);
 8015206:	69fb      	ldr	r3, [r7, #28]
 8015208:	2b00      	cmp	r3, #0
 801520a:	d1e6      	bne.n	80151da <HAL_UARTEx_ReceiveToIdle_IT+0x56>
 801520c:	e002      	b.n	8015214 <HAL_UARTEx_ReceiveToIdle_IT+0x90>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 801520e:	2301      	movs	r3, #1
 8015210:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 8015214:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8015218:	e000      	b.n	801521c <HAL_UARTEx_ReceiveToIdle_IT+0x98>
  }
  else
  {
    return HAL_BUSY;
 801521a:	2302      	movs	r3, #2
  }
}
 801521c:	4618      	mov	r0, r3
 801521e:	3730      	adds	r7, #48	@ 0x30
 8015220:	46bd      	mov	sp, r7
 8015222:	bd80      	pop	{r7, pc}

08015224 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8015224:	b480      	push	{r7}
 8015226:	b085      	sub	sp, #20
 8015228:	af00      	add	r7, sp, #0
 801522a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801522c:	687b      	ldr	r3, [r7, #4]
 801522e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015230:	2b00      	cmp	r3, #0
 8015232:	d108      	bne.n	8015246 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8015234:	687b      	ldr	r3, [r7, #4]
 8015236:	2201      	movs	r2, #1
 8015238:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	2201      	movs	r2, #1
 8015240:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8015244:	e031      	b.n	80152aa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8015246:	2308      	movs	r3, #8
 8015248:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801524a:	2308      	movs	r3, #8
 801524c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801524e:	687b      	ldr	r3, [r7, #4]
 8015250:	681b      	ldr	r3, [r3, #0]
 8015252:	689b      	ldr	r3, [r3, #8]
 8015254:	0e5b      	lsrs	r3, r3, #25
 8015256:	b2db      	uxtb	r3, r3
 8015258:	f003 0307 	and.w	r3, r3, #7
 801525c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801525e:	687b      	ldr	r3, [r7, #4]
 8015260:	681b      	ldr	r3, [r3, #0]
 8015262:	689b      	ldr	r3, [r3, #8]
 8015264:	0f5b      	lsrs	r3, r3, #29
 8015266:	b2db      	uxtb	r3, r3
 8015268:	f003 0307 	and.w	r3, r3, #7
 801526c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801526e:	7bbb      	ldrb	r3, [r7, #14]
 8015270:	7b3a      	ldrb	r2, [r7, #12]
 8015272:	4911      	ldr	r1, [pc, #68]	@ (80152b8 <UARTEx_SetNbDataToProcess+0x94>)
 8015274:	5c8a      	ldrb	r2, [r1, r2]
 8015276:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801527a:	7b3a      	ldrb	r2, [r7, #12]
 801527c:	490f      	ldr	r1, [pc, #60]	@ (80152bc <UARTEx_SetNbDataToProcess+0x98>)
 801527e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8015280:	fb93 f3f2 	sdiv	r3, r3, r2
 8015284:	b29a      	uxth	r2, r3
 8015286:	687b      	ldr	r3, [r7, #4]
 8015288:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801528c:	7bfb      	ldrb	r3, [r7, #15]
 801528e:	7b7a      	ldrb	r2, [r7, #13]
 8015290:	4909      	ldr	r1, [pc, #36]	@ (80152b8 <UARTEx_SetNbDataToProcess+0x94>)
 8015292:	5c8a      	ldrb	r2, [r1, r2]
 8015294:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8015298:	7b7a      	ldrb	r2, [r7, #13]
 801529a:	4908      	ldr	r1, [pc, #32]	@ (80152bc <UARTEx_SetNbDataToProcess+0x98>)
 801529c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801529e:	fb93 f3f2 	sdiv	r3, r3, r2
 80152a2:	b29a      	uxth	r2, r3
 80152a4:	687b      	ldr	r3, [r7, #4]
 80152a6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80152aa:	bf00      	nop
 80152ac:	3714      	adds	r7, #20
 80152ae:	46bd      	mov	sp, r7
 80152b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152b4:	4770      	bx	lr
 80152b6:	bf00      	nop
 80152b8:	0802438c 	.word	0x0802438c
 80152bc:	08024394 	.word	0x08024394

080152c0 <LL_EXTI_EnableIT_0_31>:
{
 80152c0:	b480      	push	{r7}
 80152c2:	b083      	sub	sp, #12
 80152c4:	af00      	add	r7, sp, #0
 80152c6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80152c8:	4b06      	ldr	r3, [pc, #24]	@ (80152e4 <LL_EXTI_EnableIT_0_31+0x24>)
 80152ca:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80152ce:	4905      	ldr	r1, [pc, #20]	@ (80152e4 <LL_EXTI_EnableIT_0_31+0x24>)
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	4313      	orrs	r3, r2
 80152d4:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 80152d8:	bf00      	nop
 80152da:	370c      	adds	r7, #12
 80152dc:	46bd      	mov	sp, r7
 80152de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152e2:	4770      	bx	lr
 80152e4:	44022000 	.word	0x44022000

080152e8 <LL_EXTI_EnableIT_32_63>:
{
 80152e8:	b480      	push	{r7}
 80152ea:	b083      	sub	sp, #12
 80152ec:	af00      	add	r7, sp, #0
 80152ee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80152f0:	4b06      	ldr	r3, [pc, #24]	@ (801530c <LL_EXTI_EnableIT_32_63+0x24>)
 80152f2:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80152f6:	4905      	ldr	r1, [pc, #20]	@ (801530c <LL_EXTI_EnableIT_32_63+0x24>)
 80152f8:	687b      	ldr	r3, [r7, #4]
 80152fa:	4313      	orrs	r3, r2
 80152fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8015300:	bf00      	nop
 8015302:	370c      	adds	r7, #12
 8015304:	46bd      	mov	sp, r7
 8015306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801530a:	4770      	bx	lr
 801530c:	44022000 	.word	0x44022000

08015310 <LL_EXTI_DisableIT_0_31>:
{
 8015310:	b480      	push	{r7}
 8015312:	b083      	sub	sp, #12
 8015314:	af00      	add	r7, sp, #0
 8015316:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8015318:	4b07      	ldr	r3, [pc, #28]	@ (8015338 <LL_EXTI_DisableIT_0_31+0x28>)
 801531a:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	43db      	mvns	r3, r3
 8015322:	4905      	ldr	r1, [pc, #20]	@ (8015338 <LL_EXTI_DisableIT_0_31+0x28>)
 8015324:	4013      	ands	r3, r2
 8015326:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 801532a:	bf00      	nop
 801532c:	370c      	adds	r7, #12
 801532e:	46bd      	mov	sp, r7
 8015330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015334:	4770      	bx	lr
 8015336:	bf00      	nop
 8015338:	44022000 	.word	0x44022000

0801533c <LL_EXTI_DisableIT_32_63>:
{
 801533c:	b480      	push	{r7}
 801533e:	b083      	sub	sp, #12
 8015340:	af00      	add	r7, sp, #0
 8015342:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8015344:	4b07      	ldr	r3, [pc, #28]	@ (8015364 <LL_EXTI_DisableIT_32_63+0x28>)
 8015346:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 801534a:	687b      	ldr	r3, [r7, #4]
 801534c:	43db      	mvns	r3, r3
 801534e:	4905      	ldr	r1, [pc, #20]	@ (8015364 <LL_EXTI_DisableIT_32_63+0x28>)
 8015350:	4013      	ands	r3, r2
 8015352:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8015356:	bf00      	nop
 8015358:	370c      	adds	r7, #12
 801535a:	46bd      	mov	sp, r7
 801535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015360:	4770      	bx	lr
 8015362:	bf00      	nop
 8015364:	44022000 	.word	0x44022000

08015368 <LL_EXTI_EnableEvent_0_31>:
{
 8015368:	b480      	push	{r7}
 801536a:	b083      	sub	sp, #12
 801536c:	af00      	add	r7, sp, #0
 801536e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8015370:	4b06      	ldr	r3, [pc, #24]	@ (801538c <LL_EXTI_EnableEvent_0_31+0x24>)
 8015372:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8015376:	4905      	ldr	r1, [pc, #20]	@ (801538c <LL_EXTI_EnableEvent_0_31+0x24>)
 8015378:	687b      	ldr	r3, [r7, #4]
 801537a:	4313      	orrs	r3, r2
 801537c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
}
 8015380:	bf00      	nop
 8015382:	370c      	adds	r7, #12
 8015384:	46bd      	mov	sp, r7
 8015386:	f85d 7b04 	ldr.w	r7, [sp], #4
 801538a:	4770      	bx	lr
 801538c:	44022000 	.word	0x44022000

08015390 <LL_EXTI_EnableEvent_32_63>:
{
 8015390:	b480      	push	{r7}
 8015392:	b083      	sub	sp, #12
 8015394:	af00      	add	r7, sp, #0
 8015396:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8015398:	4b06      	ldr	r3, [pc, #24]	@ (80153b4 <LL_EXTI_EnableEvent_32_63+0x24>)
 801539a:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 801539e:	4905      	ldr	r1, [pc, #20]	@ (80153b4 <LL_EXTI_EnableEvent_32_63+0x24>)
 80153a0:	687b      	ldr	r3, [r7, #4]
 80153a2:	4313      	orrs	r3, r2
 80153a4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 80153a8:	bf00      	nop
 80153aa:	370c      	adds	r7, #12
 80153ac:	46bd      	mov	sp, r7
 80153ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153b2:	4770      	bx	lr
 80153b4:	44022000 	.word	0x44022000

080153b8 <LL_EXTI_DisableEvent_0_31>:
{
 80153b8:	b480      	push	{r7}
 80153ba:	b083      	sub	sp, #12
 80153bc:	af00      	add	r7, sp, #0
 80153be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80153c0:	4b07      	ldr	r3, [pc, #28]	@ (80153e0 <LL_EXTI_DisableEvent_0_31+0x28>)
 80153c2:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80153c6:	687b      	ldr	r3, [r7, #4]
 80153c8:	43db      	mvns	r3, r3
 80153ca:	4905      	ldr	r1, [pc, #20]	@ (80153e0 <LL_EXTI_DisableEvent_0_31+0x28>)
 80153cc:	4013      	ands	r3, r2
 80153ce:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
}
 80153d2:	bf00      	nop
 80153d4:	370c      	adds	r7, #12
 80153d6:	46bd      	mov	sp, r7
 80153d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153dc:	4770      	bx	lr
 80153de:	bf00      	nop
 80153e0:	44022000 	.word	0x44022000

080153e4 <LL_EXTI_DisableEvent_32_63>:
{
 80153e4:	b480      	push	{r7}
 80153e6:	b083      	sub	sp, #12
 80153e8:	af00      	add	r7, sp, #0
 80153ea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 80153ec:	4b07      	ldr	r3, [pc, #28]	@ (801540c <LL_EXTI_DisableEvent_32_63+0x28>)
 80153ee:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 80153f2:	687b      	ldr	r3, [r7, #4]
 80153f4:	43db      	mvns	r3, r3
 80153f6:	4905      	ldr	r1, [pc, #20]	@ (801540c <LL_EXTI_DisableEvent_32_63+0x28>)
 80153f8:	4013      	ands	r3, r2
 80153fa:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 80153fe:	bf00      	nop
 8015400:	370c      	adds	r7, #12
 8015402:	46bd      	mov	sp, r7
 8015404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015408:	4770      	bx	lr
 801540a:	bf00      	nop
 801540c:	44022000 	.word	0x44022000

08015410 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8015410:	b480      	push	{r7}
 8015412:	b083      	sub	sp, #12
 8015414:	af00      	add	r7, sp, #0
 8015416:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8015418:	4b05      	ldr	r3, [pc, #20]	@ (8015430 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 801541a:	681a      	ldr	r2, [r3, #0]
 801541c:	4904      	ldr	r1, [pc, #16]	@ (8015430 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 801541e:	687b      	ldr	r3, [r7, #4]
 8015420:	4313      	orrs	r3, r2
 8015422:	600b      	str	r3, [r1, #0]
}
 8015424:	bf00      	nop
 8015426:	370c      	adds	r7, #12
 8015428:	46bd      	mov	sp, r7
 801542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801542e:	4770      	bx	lr
 8015430:	44022000 	.word	0x44022000

08015434 <LL_EXTI_EnableRisingTrig_32_63>:
{
 8015434:	b480      	push	{r7}
 8015436:	b083      	sub	sp, #12
 8015438:	af00      	add	r7, sp, #0
 801543a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 801543c:	4b05      	ldr	r3, [pc, #20]	@ (8015454 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 801543e:	6a1a      	ldr	r2, [r3, #32]
 8015440:	4904      	ldr	r1, [pc, #16]	@ (8015454 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8015442:	687b      	ldr	r3, [r7, #4]
 8015444:	4313      	orrs	r3, r2
 8015446:	620b      	str	r3, [r1, #32]
}
 8015448:	bf00      	nop
 801544a:	370c      	adds	r7, #12
 801544c:	46bd      	mov	sp, r7
 801544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015452:	4770      	bx	lr
 8015454:	44022000 	.word	0x44022000

08015458 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8015458:	b480      	push	{r7}
 801545a:	b083      	sub	sp, #12
 801545c:	af00      	add	r7, sp, #0
 801545e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8015460:	4b06      	ldr	r3, [pc, #24]	@ (801547c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8015462:	681a      	ldr	r2, [r3, #0]
 8015464:	687b      	ldr	r3, [r7, #4]
 8015466:	43db      	mvns	r3, r3
 8015468:	4904      	ldr	r1, [pc, #16]	@ (801547c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 801546a:	4013      	ands	r3, r2
 801546c:	600b      	str	r3, [r1, #0]
}
 801546e:	bf00      	nop
 8015470:	370c      	adds	r7, #12
 8015472:	46bd      	mov	sp, r7
 8015474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015478:	4770      	bx	lr
 801547a:	bf00      	nop
 801547c:	44022000 	.word	0x44022000

08015480 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8015480:	b480      	push	{r7}
 8015482:	b083      	sub	sp, #12
 8015484:	af00      	add	r7, sp, #0
 8015486:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8015488:	4b06      	ldr	r3, [pc, #24]	@ (80154a4 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 801548a:	6a1a      	ldr	r2, [r3, #32]
 801548c:	687b      	ldr	r3, [r7, #4]
 801548e:	43db      	mvns	r3, r3
 8015490:	4904      	ldr	r1, [pc, #16]	@ (80154a4 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8015492:	4013      	ands	r3, r2
 8015494:	620b      	str	r3, [r1, #32]
}
 8015496:	bf00      	nop
 8015498:	370c      	adds	r7, #12
 801549a:	46bd      	mov	sp, r7
 801549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154a0:	4770      	bx	lr
 80154a2:	bf00      	nop
 80154a4:	44022000 	.word	0x44022000

080154a8 <LL_EXTI_EnableFallingTrig_0_31>:
{
 80154a8:	b480      	push	{r7}
 80154aa:	b083      	sub	sp, #12
 80154ac:	af00      	add	r7, sp, #0
 80154ae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80154b0:	4b05      	ldr	r3, [pc, #20]	@ (80154c8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80154b2:	685a      	ldr	r2, [r3, #4]
 80154b4:	4904      	ldr	r1, [pc, #16]	@ (80154c8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80154b6:	687b      	ldr	r3, [r7, #4]
 80154b8:	4313      	orrs	r3, r2
 80154ba:	604b      	str	r3, [r1, #4]
}
 80154bc:	bf00      	nop
 80154be:	370c      	adds	r7, #12
 80154c0:	46bd      	mov	sp, r7
 80154c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154c6:	4770      	bx	lr
 80154c8:	44022000 	.word	0x44022000

080154cc <LL_EXTI_EnableFallingTrig_32_63>:
{
 80154cc:	b480      	push	{r7}
 80154ce:	b083      	sub	sp, #12
 80154d0:	af00      	add	r7, sp, #0
 80154d2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 80154d4:	4b05      	ldr	r3, [pc, #20]	@ (80154ec <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80154d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80154d8:	4904      	ldr	r1, [pc, #16]	@ (80154ec <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80154da:	687b      	ldr	r3, [r7, #4]
 80154dc:	4313      	orrs	r3, r2
 80154de:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80154e0:	bf00      	nop
 80154e2:	370c      	adds	r7, #12
 80154e4:	46bd      	mov	sp, r7
 80154e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154ea:	4770      	bx	lr
 80154ec:	44022000 	.word	0x44022000

080154f0 <LL_EXTI_DisableFallingTrig_0_31>:
{
 80154f0:	b480      	push	{r7}
 80154f2:	b083      	sub	sp, #12
 80154f4:	af00      	add	r7, sp, #0
 80154f6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80154f8:	4b06      	ldr	r3, [pc, #24]	@ (8015514 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80154fa:	685a      	ldr	r2, [r3, #4]
 80154fc:	687b      	ldr	r3, [r7, #4]
 80154fe:	43db      	mvns	r3, r3
 8015500:	4904      	ldr	r1, [pc, #16]	@ (8015514 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8015502:	4013      	ands	r3, r2
 8015504:	604b      	str	r3, [r1, #4]
}
 8015506:	bf00      	nop
 8015508:	370c      	adds	r7, #12
 801550a:	46bd      	mov	sp, r7
 801550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015510:	4770      	bx	lr
 8015512:	bf00      	nop
 8015514:	44022000 	.word	0x44022000

08015518 <LL_EXTI_DisableFallingTrig_32_63>:
{
 8015518:	b480      	push	{r7}
 801551a:	b083      	sub	sp, #12
 801551c:	af00      	add	r7, sp, #0
 801551e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8015520:	4b06      	ldr	r3, [pc, #24]	@ (801553c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8015522:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015524:	687b      	ldr	r3, [r7, #4]
 8015526:	43db      	mvns	r3, r3
 8015528:	4904      	ldr	r1, [pc, #16]	@ (801553c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 801552a:	4013      	ands	r3, r2
 801552c:	624b      	str	r3, [r1, #36]	@ 0x24
}
 801552e:	bf00      	nop
 8015530:	370c      	adds	r7, #12
 8015532:	46bd      	mov	sp, r7
 8015534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015538:	4770      	bx	lr
 801553a:	bf00      	nop
 801553c:	44022000 	.word	0x44022000

08015540 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8015540:	b580      	push	{r7, lr}
 8015542:	b084      	sub	sp, #16
 8015544:	af00      	add	r7, sp, #0
 8015546:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8015548:	2300      	movs	r3, #0
 801554a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 801554c:	687b      	ldr	r3, [r7, #4]
 801554e:	7a1b      	ldrb	r3, [r3, #8]
 8015550:	2b00      	cmp	r3, #0
 8015552:	f000 80cc 	beq.w	80156ee <LL_EXTI_Init+0x1ae>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8015556:	687b      	ldr	r3, [r7, #4]
 8015558:	681b      	ldr	r3, [r3, #0]
 801555a:	2b00      	cmp	r3, #0
 801555c:	d061      	beq.n	8015622 <LL_EXTI_Init+0xe2>
    {
      switch (EXTI_InitStruct->Mode)
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	7a5b      	ldrb	r3, [r3, #9]
 8015562:	2b02      	cmp	r3, #2
 8015564:	d01c      	beq.n	80155a0 <LL_EXTI_Init+0x60>
 8015566:	2b02      	cmp	r3, #2
 8015568:	dc25      	bgt.n	80155b6 <LL_EXTI_Init+0x76>
 801556a:	2b00      	cmp	r3, #0
 801556c:	d002      	beq.n	8015574 <LL_EXTI_Init+0x34>
 801556e:	2b01      	cmp	r3, #1
 8015570:	d00b      	beq.n	801558a <LL_EXTI_Init+0x4a>
 8015572:	e020      	b.n	80155b6 <LL_EXTI_Init+0x76>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8015574:	687b      	ldr	r3, [r7, #4]
 8015576:	681b      	ldr	r3, [r3, #0]
 8015578:	4618      	mov	r0, r3
 801557a:	f7ff ff1d 	bl	80153b8 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 801557e:	687b      	ldr	r3, [r7, #4]
 8015580:	681b      	ldr	r3, [r3, #0]
 8015582:	4618      	mov	r0, r3
 8015584:	f7ff fe9c 	bl	80152c0 <LL_EXTI_EnableIT_0_31>
          break;
 8015588:	e018      	b.n	80155bc <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 801558a:	687b      	ldr	r3, [r7, #4]
 801558c:	681b      	ldr	r3, [r3, #0]
 801558e:	4618      	mov	r0, r3
 8015590:	f7ff febe 	bl	8015310 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8015594:	687b      	ldr	r3, [r7, #4]
 8015596:	681b      	ldr	r3, [r3, #0]
 8015598:	4618      	mov	r0, r3
 801559a:	f7ff fee5 	bl	8015368 <LL_EXTI_EnableEvent_0_31>
          break;
 801559e:	e00d      	b.n	80155bc <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80155a0:	687b      	ldr	r3, [r7, #4]
 80155a2:	681b      	ldr	r3, [r3, #0]
 80155a4:	4618      	mov	r0, r3
 80155a6:	f7ff fe8b 	bl	80152c0 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80155aa:	687b      	ldr	r3, [r7, #4]
 80155ac:	681b      	ldr	r3, [r3, #0]
 80155ae:	4618      	mov	r0, r3
 80155b0:	f7ff feda 	bl	8015368 <LL_EXTI_EnableEvent_0_31>
          break;
 80155b4:	e002      	b.n	80155bc <LL_EXTI_Init+0x7c>
        default:
          status = ERROR;
 80155b6:	2301      	movs	r3, #1
 80155b8:	73fb      	strb	r3, [r7, #15]
          break;
 80155ba:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80155bc:	687b      	ldr	r3, [r7, #4]
 80155be:	7a9b      	ldrb	r3, [r3, #10]
 80155c0:	2b00      	cmp	r3, #0
 80155c2:	d02e      	beq.n	8015622 <LL_EXTI_Init+0xe2>
      {
        switch (EXTI_InitStruct->Trigger)
 80155c4:	687b      	ldr	r3, [r7, #4]
 80155c6:	7a9b      	ldrb	r3, [r3, #10]
 80155c8:	2b03      	cmp	r3, #3
 80155ca:	d01c      	beq.n	8015606 <LL_EXTI_Init+0xc6>
 80155cc:	2b03      	cmp	r3, #3
 80155ce:	dc25      	bgt.n	801561c <LL_EXTI_Init+0xdc>
 80155d0:	2b01      	cmp	r3, #1
 80155d2:	d002      	beq.n	80155da <LL_EXTI_Init+0x9a>
 80155d4:	2b02      	cmp	r3, #2
 80155d6:	d00b      	beq.n	80155f0 <LL_EXTI_Init+0xb0>
 80155d8:	e020      	b.n	801561c <LL_EXTI_Init+0xdc>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80155da:	687b      	ldr	r3, [r7, #4]
 80155dc:	681b      	ldr	r3, [r3, #0]
 80155de:	4618      	mov	r0, r3
 80155e0:	f7ff ff86 	bl	80154f0 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	681b      	ldr	r3, [r3, #0]
 80155e8:	4618      	mov	r0, r3
 80155ea:	f7ff ff11 	bl	8015410 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 80155ee:	e018      	b.n	8015622 <LL_EXTI_Init+0xe2>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	681b      	ldr	r3, [r3, #0]
 80155f4:	4618      	mov	r0, r3
 80155f6:	f7ff ff2f 	bl	8015458 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80155fa:	687b      	ldr	r3, [r7, #4]
 80155fc:	681b      	ldr	r3, [r3, #0]
 80155fe:	4618      	mov	r0, r3
 8015600:	f7ff ff52 	bl	80154a8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8015604:	e00d      	b.n	8015622 <LL_EXTI_Init+0xe2>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	681b      	ldr	r3, [r3, #0]
 801560a:	4618      	mov	r0, r3
 801560c:	f7ff ff00 	bl	8015410 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8015610:	687b      	ldr	r3, [r7, #4]
 8015612:	681b      	ldr	r3, [r3, #0]
 8015614:	4618      	mov	r0, r3
 8015616:	f7ff ff47 	bl	80154a8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 801561a:	e002      	b.n	8015622 <LL_EXTI_Init+0xe2>
          default:
            status = ERROR;
 801561c:	2301      	movs	r3, #1
 801561e:	73fb      	strb	r3, [r7, #15]
            break;
 8015620:	bf00      	nop
        }
      }
    }

    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8015622:	687b      	ldr	r3, [r7, #4]
 8015624:	685b      	ldr	r3, [r3, #4]
 8015626:	2b00      	cmp	r3, #0
 8015628:	d075      	beq.n	8015716 <LL_EXTI_Init+0x1d6>
    {
      switch (EXTI_InitStruct->Mode)
 801562a:	687b      	ldr	r3, [r7, #4]
 801562c:	7a5b      	ldrb	r3, [r3, #9]
 801562e:	2b02      	cmp	r3, #2
 8015630:	d01c      	beq.n	801566c <LL_EXTI_Init+0x12c>
 8015632:	2b02      	cmp	r3, #2
 8015634:	dc25      	bgt.n	8015682 <LL_EXTI_Init+0x142>
 8015636:	2b00      	cmp	r3, #0
 8015638:	d002      	beq.n	8015640 <LL_EXTI_Init+0x100>
 801563a:	2b01      	cmp	r3, #1
 801563c:	d00b      	beq.n	8015656 <LL_EXTI_Init+0x116>
 801563e:	e020      	b.n	8015682 <LL_EXTI_Init+0x142>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8015640:	687b      	ldr	r3, [r7, #4]
 8015642:	685b      	ldr	r3, [r3, #4]
 8015644:	4618      	mov	r0, r3
 8015646:	f7ff fecd 	bl	80153e4 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 801564a:	687b      	ldr	r3, [r7, #4]
 801564c:	685b      	ldr	r3, [r3, #4]
 801564e:	4618      	mov	r0, r3
 8015650:	f7ff fe4a 	bl	80152e8 <LL_EXTI_EnableIT_32_63>
          break;
 8015654:	e018      	b.n	8015688 <LL_EXTI_Init+0x148>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8015656:	687b      	ldr	r3, [r7, #4]
 8015658:	685b      	ldr	r3, [r3, #4]
 801565a:	4618      	mov	r0, r3
 801565c:	f7ff fe6e 	bl	801533c <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	685b      	ldr	r3, [r3, #4]
 8015664:	4618      	mov	r0, r3
 8015666:	f7ff fe93 	bl	8015390 <LL_EXTI_EnableEvent_32_63>
          break;
 801566a:	e00d      	b.n	8015688 <LL_EXTI_Init+0x148>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 801566c:	687b      	ldr	r3, [r7, #4]
 801566e:	685b      	ldr	r3, [r3, #4]
 8015670:	4618      	mov	r0, r3
 8015672:	f7ff fe39 	bl	80152e8 <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8015676:	687b      	ldr	r3, [r7, #4]
 8015678:	685b      	ldr	r3, [r3, #4]
 801567a:	4618      	mov	r0, r3
 801567c:	f7ff fe88 	bl	8015390 <LL_EXTI_EnableEvent_32_63>
          break;
 8015680:	e002      	b.n	8015688 <LL_EXTI_Init+0x148>
        default:
          status = ERROR;
 8015682:	2301      	movs	r3, #1
 8015684:	73fb      	strb	r3, [r7, #15]
          break;
 8015686:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8015688:	687b      	ldr	r3, [r7, #4]
 801568a:	7a9b      	ldrb	r3, [r3, #10]
 801568c:	2b00      	cmp	r3, #0
 801568e:	d042      	beq.n	8015716 <LL_EXTI_Init+0x1d6>
      {
        switch (EXTI_InitStruct->Trigger)
 8015690:	687b      	ldr	r3, [r7, #4]
 8015692:	7a9b      	ldrb	r3, [r3, #10]
 8015694:	2b03      	cmp	r3, #3
 8015696:	d01c      	beq.n	80156d2 <LL_EXTI_Init+0x192>
 8015698:	2b03      	cmp	r3, #3
 801569a:	dc25      	bgt.n	80156e8 <LL_EXTI_Init+0x1a8>
 801569c:	2b01      	cmp	r3, #1
 801569e:	d002      	beq.n	80156a6 <LL_EXTI_Init+0x166>
 80156a0:	2b02      	cmp	r3, #2
 80156a2:	d00b      	beq.n	80156bc <LL_EXTI_Init+0x17c>
 80156a4:	e020      	b.n	80156e8 <LL_EXTI_Init+0x1a8>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80156a6:	687b      	ldr	r3, [r7, #4]
 80156a8:	685b      	ldr	r3, [r3, #4]
 80156aa:	4618      	mov	r0, r3
 80156ac:	f7ff ff34 	bl	8015518 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	685b      	ldr	r3, [r3, #4]
 80156b4:	4618      	mov	r0, r3
 80156b6:	f7ff febd 	bl	8015434 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 80156ba:	e02c      	b.n	8015716 <LL_EXTI_Init+0x1d6>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80156bc:	687b      	ldr	r3, [r7, #4]
 80156be:	685b      	ldr	r3, [r3, #4]
 80156c0:	4618      	mov	r0, r3
 80156c2:	f7ff fedd 	bl	8015480 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80156c6:	687b      	ldr	r3, [r7, #4]
 80156c8:	685b      	ldr	r3, [r3, #4]
 80156ca:	4618      	mov	r0, r3
 80156cc:	f7ff fefe 	bl	80154cc <LL_EXTI_EnableFallingTrig_32_63>
            break;
 80156d0:	e021      	b.n	8015716 <LL_EXTI_Init+0x1d6>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80156d2:	687b      	ldr	r3, [r7, #4]
 80156d4:	685b      	ldr	r3, [r3, #4]
 80156d6:	4618      	mov	r0, r3
 80156d8:	f7ff feac 	bl	8015434 <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80156dc:	687b      	ldr	r3, [r7, #4]
 80156de:	685b      	ldr	r3, [r3, #4]
 80156e0:	4618      	mov	r0, r3
 80156e2:	f7ff fef3 	bl	80154cc <LL_EXTI_EnableFallingTrig_32_63>
            break;
 80156e6:	e016      	b.n	8015716 <LL_EXTI_Init+0x1d6>
          default:
            status = ERROR;
 80156e8:	2301      	movs	r3, #1
 80156ea:	73fb      	strb	r3, [r7, #15]
            break;
 80156ec:	e013      	b.n	8015716 <LL_EXTI_Init+0x1d6>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80156ee:	687b      	ldr	r3, [r7, #4]
 80156f0:	681b      	ldr	r3, [r3, #0]
 80156f2:	4618      	mov	r0, r3
 80156f4:	f7ff fe0c 	bl	8015310 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80156f8:	687b      	ldr	r3, [r7, #4]
 80156fa:	681b      	ldr	r3, [r3, #0]
 80156fc:	4618      	mov	r0, r3
 80156fe:	f7ff fe5b 	bl	80153b8 <LL_EXTI_DisableEvent_0_31>

    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8015702:	687b      	ldr	r3, [r7, #4]
 8015704:	685b      	ldr	r3, [r3, #4]
 8015706:	4618      	mov	r0, r3
 8015708:	f7ff fe18 	bl	801533c <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 801570c:	687b      	ldr	r3, [r7, #4]
 801570e:	685b      	ldr	r3, [r3, #4]
 8015710:	4618      	mov	r0, r3
 8015712:	f7ff fe67 	bl	80153e4 <LL_EXTI_DisableEvent_32_63>
  }
  return status;
 8015716:	7bfb      	ldrb	r3, [r7, #15]
}
 8015718:	4618      	mov	r0, r3
 801571a:	3710      	adds	r7, #16
 801571c:	46bd      	mov	sp, r7
 801571e:	bd80      	pop	{r7, pc}

08015720 <LL_GPIO_SetPinMode>:
{
 8015720:	b480      	push	{r7}
 8015722:	b08b      	sub	sp, #44	@ 0x2c
 8015724:	af00      	add	r7, sp, #0
 8015726:	60f8      	str	r0, [r7, #12]
 8015728:	60b9      	str	r1, [r7, #8]
 801572a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * GPIO_MODER_MODE1_Pos)),
 801572c:	68fb      	ldr	r3, [r7, #12]
 801572e:	681a      	ldr	r2, [r3, #0]
 8015730:	68bb      	ldr	r3, [r7, #8]
 8015732:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8015734:	697b      	ldr	r3, [r7, #20]
 8015736:	fa93 f3a3 	rbit	r3, r3
 801573a:	613b      	str	r3, [r7, #16]
  return result;
 801573c:	693b      	ldr	r3, [r7, #16]
 801573e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8015740:	69bb      	ldr	r3, [r7, #24]
 8015742:	2b00      	cmp	r3, #0
 8015744:	d101      	bne.n	801574a <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8015746:	2320      	movs	r3, #32
 8015748:	e003      	b.n	8015752 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 801574a:	69bb      	ldr	r3, [r7, #24]
 801574c:	fab3 f383 	clz	r3, r3
 8015750:	b2db      	uxtb	r3, r3
 8015752:	005b      	lsls	r3, r3, #1
 8015754:	2103      	movs	r1, #3
 8015756:	fa01 f303 	lsl.w	r3, r1, r3
 801575a:	43db      	mvns	r3, r3
 801575c:	401a      	ands	r2, r3
 801575e:	68bb      	ldr	r3, [r7, #8]
 8015760:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8015762:	6a3b      	ldr	r3, [r7, #32]
 8015764:	fa93 f3a3 	rbit	r3, r3
 8015768:	61fb      	str	r3, [r7, #28]
  return result;
 801576a:	69fb      	ldr	r3, [r7, #28]
 801576c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 801576e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015770:	2b00      	cmp	r3, #0
 8015772:	d101      	bne.n	8015778 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8015774:	2320      	movs	r3, #32
 8015776:	e003      	b.n	8015780 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8015778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801577a:	fab3 f383 	clz	r3, r3
 801577e:	b2db      	uxtb	r3, r3
 8015780:	005b      	lsls	r3, r3, #1
 8015782:	6879      	ldr	r1, [r7, #4]
 8015784:	fa01 f303 	lsl.w	r3, r1, r3
 8015788:	431a      	orrs	r2, r3
 801578a:	68fb      	ldr	r3, [r7, #12]
 801578c:	601a      	str	r2, [r3, #0]
}
 801578e:	bf00      	nop
 8015790:	372c      	adds	r7, #44	@ 0x2c
 8015792:	46bd      	mov	sp, r7
 8015794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015798:	4770      	bx	lr

0801579a <LL_GPIO_SetPinOutputType>:
{
 801579a:	b480      	push	{r7}
 801579c:	b085      	sub	sp, #20
 801579e:	af00      	add	r7, sp, #0
 80157a0:	60f8      	str	r0, [r7, #12]
 80157a2:	60b9      	str	r1, [r7, #8]
 80157a4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80157a6:	68fb      	ldr	r3, [r7, #12]
 80157a8:	685a      	ldr	r2, [r3, #4]
 80157aa:	68bb      	ldr	r3, [r7, #8]
 80157ac:	43db      	mvns	r3, r3
 80157ae:	401a      	ands	r2, r3
 80157b0:	68bb      	ldr	r3, [r7, #8]
 80157b2:	6879      	ldr	r1, [r7, #4]
 80157b4:	fb01 f303 	mul.w	r3, r1, r3
 80157b8:	431a      	orrs	r2, r3
 80157ba:	68fb      	ldr	r3, [r7, #12]
 80157bc:	605a      	str	r2, [r3, #4]
}
 80157be:	bf00      	nop
 80157c0:	3714      	adds	r7, #20
 80157c2:	46bd      	mov	sp, r7
 80157c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157c8:	4770      	bx	lr

080157ca <LL_GPIO_SetPinSpeed>:
{
 80157ca:	b480      	push	{r7}
 80157cc:	b08b      	sub	sp, #44	@ 0x2c
 80157ce:	af00      	add	r7, sp, #0
 80157d0:	60f8      	str	r0, [r7, #12]
 80157d2:	60b9      	str	r1, [r7, #8]
 80157d4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * GPIO_OSPEEDR_OSPEED1_Pos)),
 80157d6:	68fb      	ldr	r3, [r7, #12]
 80157d8:	689a      	ldr	r2, [r3, #8]
 80157da:	68bb      	ldr	r3, [r7, #8]
 80157dc:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80157de:	697b      	ldr	r3, [r7, #20]
 80157e0:	fa93 f3a3 	rbit	r3, r3
 80157e4:	613b      	str	r3, [r7, #16]
  return result;
 80157e6:	693b      	ldr	r3, [r7, #16]
 80157e8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80157ea:	69bb      	ldr	r3, [r7, #24]
 80157ec:	2b00      	cmp	r3, #0
 80157ee:	d101      	bne.n	80157f4 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80157f0:	2320      	movs	r3, #32
 80157f2:	e003      	b.n	80157fc <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80157f4:	69bb      	ldr	r3, [r7, #24]
 80157f6:	fab3 f383 	clz	r3, r3
 80157fa:	b2db      	uxtb	r3, r3
 80157fc:	005b      	lsls	r3, r3, #1
 80157fe:	2103      	movs	r1, #3
 8015800:	fa01 f303 	lsl.w	r3, r1, r3
 8015804:	43db      	mvns	r3, r3
 8015806:	401a      	ands	r2, r3
 8015808:	68bb      	ldr	r3, [r7, #8]
 801580a:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801580c:	6a3b      	ldr	r3, [r7, #32]
 801580e:	fa93 f3a3 	rbit	r3, r3
 8015812:	61fb      	str	r3, [r7, #28]
  return result;
 8015814:	69fb      	ldr	r3, [r7, #28]
 8015816:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8015818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801581a:	2b00      	cmp	r3, #0
 801581c:	d101      	bne.n	8015822 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 801581e:	2320      	movs	r3, #32
 8015820:	e003      	b.n	801582a <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8015822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015824:	fab3 f383 	clz	r3, r3
 8015828:	b2db      	uxtb	r3, r3
 801582a:	005b      	lsls	r3, r3, #1
 801582c:	6879      	ldr	r1, [r7, #4]
 801582e:	fa01 f303 	lsl.w	r3, r1, r3
 8015832:	431a      	orrs	r2, r3
 8015834:	68fb      	ldr	r3, [r7, #12]
 8015836:	609a      	str	r2, [r3, #8]
}
 8015838:	bf00      	nop
 801583a:	372c      	adds	r7, #44	@ 0x2c
 801583c:	46bd      	mov	sp, r7
 801583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015842:	4770      	bx	lr

08015844 <LL_GPIO_SetPinPull>:
{
 8015844:	b480      	push	{r7}
 8015846:	b08b      	sub	sp, #44	@ 0x2c
 8015848:	af00      	add	r7, sp, #0
 801584a:	60f8      	str	r0, [r7, #12]
 801584c:	60b9      	str	r1, [r7, #8]
 801584e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * GPIO_PUPDR_PUPD1_Pos)),
 8015850:	68fb      	ldr	r3, [r7, #12]
 8015852:	68da      	ldr	r2, [r3, #12]
 8015854:	68bb      	ldr	r3, [r7, #8]
 8015856:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8015858:	697b      	ldr	r3, [r7, #20]
 801585a:	fa93 f3a3 	rbit	r3, r3
 801585e:	613b      	str	r3, [r7, #16]
  return result;
 8015860:	693b      	ldr	r3, [r7, #16]
 8015862:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8015864:	69bb      	ldr	r3, [r7, #24]
 8015866:	2b00      	cmp	r3, #0
 8015868:	d101      	bne.n	801586e <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 801586a:	2320      	movs	r3, #32
 801586c:	e003      	b.n	8015876 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 801586e:	69bb      	ldr	r3, [r7, #24]
 8015870:	fab3 f383 	clz	r3, r3
 8015874:	b2db      	uxtb	r3, r3
 8015876:	005b      	lsls	r3, r3, #1
 8015878:	2103      	movs	r1, #3
 801587a:	fa01 f303 	lsl.w	r3, r1, r3
 801587e:	43db      	mvns	r3, r3
 8015880:	401a      	ands	r2, r3
 8015882:	68bb      	ldr	r3, [r7, #8]
 8015884:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8015886:	6a3b      	ldr	r3, [r7, #32]
 8015888:	fa93 f3a3 	rbit	r3, r3
 801588c:	61fb      	str	r3, [r7, #28]
  return result;
 801588e:	69fb      	ldr	r3, [r7, #28]
 8015890:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8015892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015894:	2b00      	cmp	r3, #0
 8015896:	d101      	bne.n	801589c <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8015898:	2320      	movs	r3, #32
 801589a:	e003      	b.n	80158a4 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 801589c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801589e:	fab3 f383 	clz	r3, r3
 80158a2:	b2db      	uxtb	r3, r3
 80158a4:	005b      	lsls	r3, r3, #1
 80158a6:	6879      	ldr	r1, [r7, #4]
 80158a8:	fa01 f303 	lsl.w	r3, r1, r3
 80158ac:	431a      	orrs	r2, r3
 80158ae:	68fb      	ldr	r3, [r7, #12]
 80158b0:	60da      	str	r2, [r3, #12]
}
 80158b2:	bf00      	nop
 80158b4:	372c      	adds	r7, #44	@ 0x2c
 80158b6:	46bd      	mov	sp, r7
 80158b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158bc:	4770      	bx	lr

080158be <LL_GPIO_SetAFPin_0_7>:
{
 80158be:	b480      	push	{r7}
 80158c0:	b08b      	sub	sp, #44	@ 0x2c
 80158c2:	af00      	add	r7, sp, #0
 80158c4:	60f8      	str	r0, [r7, #12]
 80158c6:	60b9      	str	r1, [r7, #8]
 80158c8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * GPIO_AFRL_AFSEL1_Pos)),
 80158ca:	68fb      	ldr	r3, [r7, #12]
 80158cc:	6a1a      	ldr	r2, [r3, #32]
 80158ce:	68bb      	ldr	r3, [r7, #8]
 80158d0:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80158d2:	697b      	ldr	r3, [r7, #20]
 80158d4:	fa93 f3a3 	rbit	r3, r3
 80158d8:	613b      	str	r3, [r7, #16]
  return result;
 80158da:	693b      	ldr	r3, [r7, #16]
 80158dc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80158de:	69bb      	ldr	r3, [r7, #24]
 80158e0:	2b00      	cmp	r3, #0
 80158e2:	d101      	bne.n	80158e8 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80158e4:	2320      	movs	r3, #32
 80158e6:	e003      	b.n	80158f0 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80158e8:	69bb      	ldr	r3, [r7, #24]
 80158ea:	fab3 f383 	clz	r3, r3
 80158ee:	b2db      	uxtb	r3, r3
 80158f0:	009b      	lsls	r3, r3, #2
 80158f2:	210f      	movs	r1, #15
 80158f4:	fa01 f303 	lsl.w	r3, r1, r3
 80158f8:	43db      	mvns	r3, r3
 80158fa:	401a      	ands	r2, r3
 80158fc:	68bb      	ldr	r3, [r7, #8]
 80158fe:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8015900:	6a3b      	ldr	r3, [r7, #32]
 8015902:	fa93 f3a3 	rbit	r3, r3
 8015906:	61fb      	str	r3, [r7, #28]
  return result;
 8015908:	69fb      	ldr	r3, [r7, #28]
 801590a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 801590c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801590e:	2b00      	cmp	r3, #0
 8015910:	d101      	bne.n	8015916 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8015912:	2320      	movs	r3, #32
 8015914:	e003      	b.n	801591e <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8015916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015918:	fab3 f383 	clz	r3, r3
 801591c:	b2db      	uxtb	r3, r3
 801591e:	009b      	lsls	r3, r3, #2
 8015920:	6879      	ldr	r1, [r7, #4]
 8015922:	fa01 f303 	lsl.w	r3, r1, r3
 8015926:	431a      	orrs	r2, r3
 8015928:	68fb      	ldr	r3, [r7, #12]
 801592a:	621a      	str	r2, [r3, #32]
}
 801592c:	bf00      	nop
 801592e:	372c      	adds	r7, #44	@ 0x2c
 8015930:	46bd      	mov	sp, r7
 8015932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015936:	4770      	bx	lr

08015938 <LL_GPIO_SetAFPin_8_15>:
{
 8015938:	b480      	push	{r7}
 801593a:	b08b      	sub	sp, #44	@ 0x2c
 801593c:	af00      	add	r7, sp, #0
 801593e:	60f8      	str	r0, [r7, #12]
 8015940:	60b9      	str	r1, [r7, #8]
 8015942:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * GPIO_AFRH_AFSEL9_Pos)),
 8015944:	68fb      	ldr	r3, [r7, #12]
 8015946:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015948:	68bb      	ldr	r3, [r7, #8]
 801594a:	0a1b      	lsrs	r3, r3, #8
 801594c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801594e:	697b      	ldr	r3, [r7, #20]
 8015950:	fa93 f3a3 	rbit	r3, r3
 8015954:	613b      	str	r3, [r7, #16]
  return result;
 8015956:	693b      	ldr	r3, [r7, #16]
 8015958:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801595a:	69bb      	ldr	r3, [r7, #24]
 801595c:	2b00      	cmp	r3, #0
 801595e:	d101      	bne.n	8015964 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8015960:	2320      	movs	r3, #32
 8015962:	e003      	b.n	801596c <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8015964:	69bb      	ldr	r3, [r7, #24]
 8015966:	fab3 f383 	clz	r3, r3
 801596a:	b2db      	uxtb	r3, r3
 801596c:	009b      	lsls	r3, r3, #2
 801596e:	210f      	movs	r1, #15
 8015970:	fa01 f303 	lsl.w	r3, r1, r3
 8015974:	43db      	mvns	r3, r3
 8015976:	401a      	ands	r2, r3
 8015978:	68bb      	ldr	r3, [r7, #8]
 801597a:	0a1b      	lsrs	r3, r3, #8
 801597c:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801597e:	6a3b      	ldr	r3, [r7, #32]
 8015980:	fa93 f3a3 	rbit	r3, r3
 8015984:	61fb      	str	r3, [r7, #28]
  return result;
 8015986:	69fb      	ldr	r3, [r7, #28]
 8015988:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 801598a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801598c:	2b00      	cmp	r3, #0
 801598e:	d101      	bne.n	8015994 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8015990:	2320      	movs	r3, #32
 8015992:	e003      	b.n	801599c <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8015994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015996:	fab3 f383 	clz	r3, r3
 801599a:	b2db      	uxtb	r3, r3
 801599c:	009b      	lsls	r3, r3, #2
 801599e:	6879      	ldr	r1, [r7, #4]
 80159a0:	fa01 f303 	lsl.w	r3, r1, r3
 80159a4:	431a      	orrs	r2, r3
 80159a6:	68fb      	ldr	r3, [r7, #12]
 80159a8:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80159aa:	bf00      	nop
 80159ac:	372c      	adds	r7, #44	@ 0x2c
 80159ae:	46bd      	mov	sp, r7
 80159b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159b4:	4770      	bx	lr

080159b6 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80159b6:	b580      	push	{r7, lr}
 80159b8:	b08a      	sub	sp, #40	@ 0x28
 80159ba:	af00      	add	r7, sp, #0
 80159bc:	6078      	str	r0, [r7, #4]
 80159be:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80159c0:	683b      	ldr	r3, [r7, #0]
 80159c2:	681b      	ldr	r3, [r3, #0]
 80159c4:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80159c6:	69bb      	ldr	r3, [r7, #24]
 80159c8:	fa93 f3a3 	rbit	r3, r3
 80159cc:	617b      	str	r3, [r7, #20]
  return result;
 80159ce:	697b      	ldr	r3, [r7, #20]
 80159d0:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 80159d2:	69fb      	ldr	r3, [r7, #28]
 80159d4:	2b00      	cmp	r3, #0
 80159d6:	d101      	bne.n	80159dc <LL_GPIO_Init+0x26>
    return 32U;
 80159d8:	2320      	movs	r3, #32
 80159da:	e003      	b.n	80159e4 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 80159dc:	69fb      	ldr	r3, [r7, #28]
 80159de:	fab3 f383 	clz	r3, r3
 80159e2:	b2db      	uxtb	r3, r3
 80159e4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 80159e6:	e058      	b.n	8015a9a <LL_GPIO_Init+0xe4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 80159e8:	683b      	ldr	r3, [r7, #0]
 80159ea:	681a      	ldr	r2, [r3, #0]
 80159ec:	2101      	movs	r1, #1
 80159ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159f0:	fa01 f303 	lsl.w	r3, r1, r3
 80159f4:	4013      	ands	r3, r2
 80159f6:	623b      	str	r3, [r7, #32]

    if (currentpin != 0U)
 80159f8:	6a3b      	ldr	r3, [r7, #32]
 80159fa:	2b00      	cmp	r3, #0
 80159fc:	d04a      	beq.n	8015a94 <LL_GPIO_Init+0xde>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80159fe:	683b      	ldr	r3, [r7, #0]
 8015a00:	685b      	ldr	r3, [r3, #4]
 8015a02:	2b01      	cmp	r3, #1
 8015a04:	d003      	beq.n	8015a0e <LL_GPIO_Init+0x58>
 8015a06:	683b      	ldr	r3, [r7, #0]
 8015a08:	685b      	ldr	r3, [r3, #4]
 8015a0a:	2b02      	cmp	r3, #2
 8015a0c:	d10e      	bne.n	8015a2c <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8015a0e:	683b      	ldr	r3, [r7, #0]
 8015a10:	689b      	ldr	r3, [r3, #8]
 8015a12:	461a      	mov	r2, r3
 8015a14:	6a39      	ldr	r1, [r7, #32]
 8015a16:	6878      	ldr	r0, [r7, #4]
 8015a18:	f7ff fed7 	bl	80157ca <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8015a1c:	683b      	ldr	r3, [r7, #0]
 8015a1e:	6819      	ldr	r1, [r3, #0]
 8015a20:	683b      	ldr	r3, [r7, #0]
 8015a22:	68db      	ldr	r3, [r3, #12]
 8015a24:	461a      	mov	r2, r3
 8015a26:	6878      	ldr	r0, [r7, #4]
 8015a28:	f7ff feb7 	bl	801579a <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8015a2c:	683b      	ldr	r3, [r7, #0]
 8015a2e:	691b      	ldr	r3, [r3, #16]
 8015a30:	461a      	mov	r2, r3
 8015a32:	6a39      	ldr	r1, [r7, #32]
 8015a34:	6878      	ldr	r0, [r7, #4]
 8015a36:	f7ff ff05 	bl	8015844 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8015a3a:	683b      	ldr	r3, [r7, #0]
 8015a3c:	685b      	ldr	r3, [r3, #4]
 8015a3e:	2b02      	cmp	r3, #2
 8015a40:	d121      	bne.n	8015a86 <LL_GPIO_Init+0xd0>
 8015a42:	6a3b      	ldr	r3, [r7, #32]
 8015a44:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8015a46:	68fb      	ldr	r3, [r7, #12]
 8015a48:	fa93 f3a3 	rbit	r3, r3
 8015a4c:	60bb      	str	r3, [r7, #8]
  return result;
 8015a4e:	68bb      	ldr	r3, [r7, #8]
 8015a50:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8015a52:	693b      	ldr	r3, [r7, #16]
 8015a54:	2b00      	cmp	r3, #0
 8015a56:	d101      	bne.n	8015a5c <LL_GPIO_Init+0xa6>
    return 32U;
 8015a58:	2320      	movs	r3, #32
 8015a5a:	e003      	b.n	8015a64 <LL_GPIO_Init+0xae>
  return __builtin_clz(value);
 8015a5c:	693b      	ldr	r3, [r7, #16]
 8015a5e:	fab3 f383 	clz	r3, r3
 8015a62:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 8U)
 8015a64:	2b07      	cmp	r3, #7
 8015a66:	d807      	bhi.n	8015a78 <LL_GPIO_Init+0xc2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8015a68:	683b      	ldr	r3, [r7, #0]
 8015a6a:	695b      	ldr	r3, [r3, #20]
 8015a6c:	461a      	mov	r2, r3
 8015a6e:	6a39      	ldr	r1, [r7, #32]
 8015a70:	6878      	ldr	r0, [r7, #4]
 8015a72:	f7ff ff24 	bl	80158be <LL_GPIO_SetAFPin_0_7>
 8015a76:	e006      	b.n	8015a86 <LL_GPIO_Init+0xd0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8015a78:	683b      	ldr	r3, [r7, #0]
 8015a7a:	695b      	ldr	r3, [r3, #20]
 8015a7c:	461a      	mov	r2, r3
 8015a7e:	6a39      	ldr	r1, [r7, #32]
 8015a80:	6878      	ldr	r0, [r7, #4]
 8015a82:	f7ff ff59 	bl	8015938 <LL_GPIO_SetAFPin_8_15>
        }
      }
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8015a86:	683b      	ldr	r3, [r7, #0]
 8015a88:	685b      	ldr	r3, [r3, #4]
 8015a8a:	461a      	mov	r2, r3
 8015a8c:	6a39      	ldr	r1, [r7, #32]
 8015a8e:	6878      	ldr	r0, [r7, #4]
 8015a90:	f7ff fe46 	bl	8015720 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8015a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a96:	3301      	adds	r3, #1
 8015a98:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 8015a9a:	683b      	ldr	r3, [r7, #0]
 8015a9c:	681a      	ldr	r2, [r3, #0]
 8015a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015aa0:	fa22 f303 	lsr.w	r3, r2, r3
 8015aa4:	2b00      	cmp	r3, #0
 8015aa6:	d19f      	bne.n	80159e8 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8015aa8:	2300      	movs	r3, #0
}
 8015aaa:	4618      	mov	r0, r3
 8015aac:	3728      	adds	r7, #40	@ 0x28
 8015aae:	46bd      	mov	sp, r7
 8015ab0:	bd80      	pop	{r7, pc}

08015ab2 <LL_SPI_IsEnabled>:
{
 8015ab2:	b480      	push	{r7}
 8015ab4:	b083      	sub	sp, #12
 8015ab6:	af00      	add	r7, sp, #0
 8015ab8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8015aba:	687b      	ldr	r3, [r7, #4]
 8015abc:	681b      	ldr	r3, [r3, #0]
 8015abe:	f003 0301 	and.w	r3, r3, #1
 8015ac2:	2b01      	cmp	r3, #1
 8015ac4:	d101      	bne.n	8015aca <LL_SPI_IsEnabled+0x18>
 8015ac6:	2301      	movs	r3, #1
 8015ac8:	e000      	b.n	8015acc <LL_SPI_IsEnabled+0x1a>
 8015aca:	2300      	movs	r3, #0
}
 8015acc:	4618      	mov	r0, r3
 8015ace:	370c      	adds	r7, #12
 8015ad0:	46bd      	mov	sp, r7
 8015ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ad6:	4770      	bx	lr

08015ad8 <LL_SPI_SetInternalSSLevel>:
{
 8015ad8:	b480      	push	{r7}
 8015ada:	b083      	sub	sp, #12
 8015adc:	af00      	add	r7, sp, #0
 8015ade:	6078      	str	r0, [r7, #4]
 8015ae0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSI, SSLevel);
 8015ae2:	687b      	ldr	r3, [r7, #4]
 8015ae4:	681b      	ldr	r3, [r3, #0]
 8015ae6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8015aea:	683b      	ldr	r3, [r7, #0]
 8015aec:	431a      	orrs	r2, r3
 8015aee:	687b      	ldr	r3, [r7, #4]
 8015af0:	601a      	str	r2, [r3, #0]
}
 8015af2:	bf00      	nop
 8015af4:	370c      	adds	r7, #12
 8015af6:	46bd      	mov	sp, r7
 8015af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015afc:	4770      	bx	lr

08015afe <LL_SPI_GetNSSPolarity>:
{
 8015afe:	b480      	push	{r7}
 8015b00:	b083      	sub	sp, #12
 8015b02:	af00      	add	r7, sp, #0
 8015b04:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(SPIx->CFG2, SPI_CFG2_SSIOP));
 8015b06:	687b      	ldr	r3, [r7, #4]
 8015b08:	68db      	ldr	r3, [r3, #12]
 8015b0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
}
 8015b0e:	4618      	mov	r0, r3
 8015b10:	370c      	adds	r7, #12
 8015b12:	46bd      	mov	sp, r7
 8015b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b18:	4770      	bx	lr

08015b1a <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly 0..0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 8015b1a:	b480      	push	{r7}
 8015b1c:	b083      	sub	sp, #12
 8015b1e:	af00      	add	r7, sp, #0
 8015b20:	6078      	str	r0, [r7, #4]
 8015b22:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPOLY, CRCPoly);
 8015b24:	687b      	ldr	r3, [r7, #4]
 8015b26:	683a      	ldr	r2, [r7, #0]
 8015b28:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8015b2a:	bf00      	nop
 8015b2c:	370c      	adds	r7, #12
 8015b2e:	46bd      	mov	sp, r7
 8015b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b34:	4770      	bx	lr
	...

08015b38 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8015b38:	b580      	push	{r7, lr}
 8015b3a:	b086      	sub	sp, #24
 8015b3c:	af00      	add	r7, sp, #0
 8015b3e:	6078      	str	r0, [r7, #4]
 8015b40:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8015b42:	2301      	movs	r3, #1
 8015b44:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_LL_SPI_BAUDRATEPRESCALER(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  /* Check the SPI instance is not enabled */
  if (LL_SPI_IsEnabled(SPIx) == 0x00000000UL)
 8015b46:	6878      	ldr	r0, [r7, #4]
 8015b48:	f7ff ffb3 	bl	8015ab2 <LL_SPI_IsEnabled>
 8015b4c:	4603      	mov	r3, r0
 8015b4e:	2b00      	cmp	r3, #0
 8015b50:	d169      	bne.n	8015c26 <LL_SPI_Init+0xee>
       * Configure SPIx CFG1 with parameters:
       * - Master Baud Rate       : SPI_CFG1_MBR[2:0] bits & SPI_CFG1_BPASS bit
       * - CRC Computation Enable : SPI_CFG1_CRCEN bit
       * - Length of data frame   : SPI_CFG1_DSIZE[4:0] bits
       */
    MODIFY_REG(SPIx->CFG1, SPI_CFG1_BPASS | SPI_CFG1_MBR | SPI_CFG1_CRCEN | SPI_CFG1_DSIZE,
 8015b52:	687b      	ldr	r3, [r7, #4]
 8015b54:	689a      	ldr	r2, [r3, #8]
 8015b56:	4b36      	ldr	r3, [pc, #216]	@ (8015c30 <LL_SPI_Init+0xf8>)
 8015b58:	4013      	ands	r3, r2
 8015b5a:	683a      	ldr	r2, [r7, #0]
 8015b5c:	6991      	ldr	r1, [r2, #24]
 8015b5e:	683a      	ldr	r2, [r7, #0]
 8015b60:	6a12      	ldr	r2, [r2, #32]
 8015b62:	4311      	orrs	r1, r2
 8015b64:	683a      	ldr	r2, [r7, #0]
 8015b66:	6892      	ldr	r2, [r2, #8]
 8015b68:	430a      	orrs	r2, r1
 8015b6a:	431a      	orrs	r2, r3
 8015b6c:	687b      	ldr	r3, [r7, #4]
 8015b6e:	609a      	str	r2, [r3, #8]
               SPI_InitStruct->BaudRate  | SPI_InitStruct->CRCCalculation | SPI_InitStruct->DataWidth);

    tmp_nss  = SPI_InitStruct->NSS;
 8015b70:	683b      	ldr	r3, [r7, #0]
 8015b72:	695b      	ldr	r3, [r3, #20]
 8015b74:	613b      	str	r3, [r7, #16]
    tmp_mode = SPI_InitStruct->Mode;
 8015b76:	683b      	ldr	r3, [r7, #0]
 8015b78:	685b      	ldr	r3, [r3, #4]
 8015b7a:	60fb      	str	r3, [r7, #12]
    tmp_nss_polarity = LL_SPI_GetNSSPolarity(SPIx);
 8015b7c:	6878      	ldr	r0, [r7, #4]
 8015b7e:	f7ff ffbe 	bl	8015afe <LL_SPI_GetNSSPolarity>
 8015b82:	60b8      	str	r0, [r7, #8]

    /* Checks to setup Internal SS signal level and avoid a MODF Error */
    if ((tmp_nss == LL_SPI_NSS_SOFT) && (((tmp_nss_polarity == LL_SPI_NSS_POLARITY_LOW)  && \
 8015b84:	693b      	ldr	r3, [r7, #16]
 8015b86:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8015b8a:	d112      	bne.n	8015bb2 <LL_SPI_Init+0x7a>
 8015b8c:	68bb      	ldr	r3, [r7, #8]
 8015b8e:	2b00      	cmp	r3, #0
 8015b90:	d103      	bne.n	8015b9a <LL_SPI_Init+0x62>
 8015b92:	68fb      	ldr	r3, [r7, #12]
 8015b94:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8015b98:	d006      	beq.n	8015ba8 <LL_SPI_Init+0x70>
                                          (tmp_mode == LL_SPI_MODE_MASTER))              || \
 8015b9a:	68bb      	ldr	r3, [r7, #8]
 8015b9c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8015ba0:	d107      	bne.n	8015bb2 <LL_SPI_Init+0x7a>
                                         ((tmp_nss_polarity == LL_SPI_NSS_POLARITY_HIGH) && \
 8015ba2:	68fb      	ldr	r3, [r7, #12]
 8015ba4:	2b00      	cmp	r3, #0
 8015ba6:	d104      	bne.n	8015bb2 <LL_SPI_Init+0x7a>
                                          (tmp_mode == LL_SPI_MODE_SLAVE))))
    {
      LL_SPI_SetInternalSSLevel(SPIx, LL_SPI_SS_LEVEL_HIGH);
 8015ba8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8015bac:	6878      	ldr	r0, [r7, #4]
 8015bae:	f7ff ff93 	bl	8015ad8 <LL_SPI_SetInternalSSLevel>
       * - ClockPhase             : SPI_CFG2_CPHA bit
       * - BitOrder               : SPI_CFG2_LSBFRST bit
       * - Master/Slave Mode      : SPI_CFG2_MASTER bit
       * - SPI Mode               : SPI_CFG2_COMM[1:0] bits
       */
    MODIFY_REG(SPIx->CFG2, SPI_CFG2_SSM   | SPI_CFG2_SSOE    |
 8015bb2:	687b      	ldr	r3, [r7, #4]
 8015bb4:	68db      	ldr	r3, [r3, #12]
 8015bb6:	f023 531f 	bic.w	r3, r3, #666894336	@ 0x27c00000
 8015bba:	f423 23c0 	bic.w	r3, r3, #393216	@ 0x60000
 8015bbe:	683a      	ldr	r2, [r7, #0]
 8015bc0:	6951      	ldr	r1, [r2, #20]
 8015bc2:	683a      	ldr	r2, [r7, #0]
 8015bc4:	68d2      	ldr	r2, [r2, #12]
 8015bc6:	4311      	orrs	r1, r2
 8015bc8:	683a      	ldr	r2, [r7, #0]
 8015bca:	6912      	ldr	r2, [r2, #16]
 8015bcc:	4311      	orrs	r1, r2
 8015bce:	683a      	ldr	r2, [r7, #0]
 8015bd0:	69d2      	ldr	r2, [r2, #28]
 8015bd2:	4311      	orrs	r1, r2
 8015bd4:	683a      	ldr	r2, [r7, #0]
 8015bd6:	6852      	ldr	r2, [r2, #4]
 8015bd8:	4311      	orrs	r1, r2
 8015bda:	683a      	ldr	r2, [r7, #0]
 8015bdc:	6812      	ldr	r2, [r2, #0]
 8015bde:	f402 22c0 	and.w	r2, r2, #393216	@ 0x60000
 8015be2:	430a      	orrs	r2, r1
 8015be4:	431a      	orrs	r2, r3
 8015be6:	687b      	ldr	r3, [r7, #4]
 8015be8:	60da      	str	r2, [r3, #12]

    /*---------------------------- SPIx CR1 Configuration ------------------------
       * Configure SPIx CR1 with parameter:
       * - Half Duplex Direction  : SPI_CR1_HDDIR bit
       */
    MODIFY_REG(SPIx->CR1, SPI_CR1_HDDIR, SPI_InitStruct->TransferDirection & SPI_CR1_HDDIR);
 8015bea:	687b      	ldr	r3, [r7, #4]
 8015bec:	681b      	ldr	r3, [r3, #0]
 8015bee:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8015bf2:	683b      	ldr	r3, [r7, #0]
 8015bf4:	681b      	ldr	r3, [r3, #0]
 8015bf6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8015bfa:	431a      	orrs	r2, r3
 8015bfc:	687b      	ldr	r3, [r7, #4]
 8015bfe:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CRCPOLY Configuration ----------------------
       * Configure SPIx CRCPOLY with parameter:
       * - CRCPoly                : CRCPOLY[31:0] bits
       */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8015c00:	683b      	ldr	r3, [r7, #0]
 8015c02:	6a1b      	ldr	r3, [r3, #32]
 8015c04:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8015c08:	d105      	bne.n	8015c16 <LL_SPI_Init+0xde>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8015c0a:	683b      	ldr	r3, [r7, #0]
 8015c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015c0e:	4619      	mov	r1, r3
 8015c10:	6878      	ldr	r0, [r7, #4]
 8015c12:	f7ff ff82 	bl	8015b1a <LL_SPI_SetCRCPolynomial>
    }

    /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
    CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8015c16:	687b      	ldr	r3, [r7, #4]
 8015c18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015c1a:	f023 0201 	bic.w	r2, r3, #1
 8015c1e:	687b      	ldr	r3, [r7, #4]
 8015c20:	651a      	str	r2, [r3, #80]	@ 0x50

    status = SUCCESS;
 8015c22:	2300      	movs	r3, #0
 8015c24:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8015c26:	7dfb      	ldrb	r3, [r7, #23]
}
 8015c28:	4618      	mov	r0, r3
 8015c2a:	3718      	adds	r7, #24
 8015c2c:	46bd      	mov	sp, r7
 8015c2e:	bd80      	pop	{r7, pc}
 8015c30:	0fbfffe0 	.word	0x0fbfffe0

08015c34 <clearResBuff>:
extern uint32_t L1, L2, L3;
extern int TOTAL_PACKETS;
int redoCounter = 0;
/*-----------------------------------HTTP-SECTION-------------------------------------------*/

void clearResBuff() {
 8015c34:	b580      	push	{r7, lr}
 8015c36:	af00      	add	r7, sp, #0
	clearBuffer(resBuff, sizeof(resBuff));
 8015c38:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8015c3c:	4802      	ldr	r0, [pc, #8]	@ (8015c48 <clearResBuff+0x14>)
 8015c3e:	f7eb ff43 	bl	8001ac8 <clearBuffer>
}
 8015c42:	bf00      	nop
 8015c44:	bd80      	pop	{r7, pc}
 8015c46:	bf00      	nop
 8015c48:	2001422c 	.word	0x2001422c

08015c4c <EC200_HTTP_POST>:
bool EC200_HTTP_POST(int type) {
 8015c4c:	b580      	push	{r7, lr}
 8015c4e:	b082      	sub	sp, #8
 8015c50:	af00      	add	r7, sp, #0
 8015c52:	6078      	str	r0, [r7, #4]
	// Configure PDP context ID
	clearResBuff();
 8015c54:	f7ff ffee 	bl	8015c34 <clearResBuff>
	Config_Update("IMEI", Imei);
 8015c58:	4b0e      	ldr	r3, [pc, #56]	@ (8015c94 <EC200_HTTP_POST+0x48>)
 8015c5a:	681b      	ldr	r3, [r3, #0]
 8015c5c:	4619      	mov	r1, r3
 8015c5e:	480e      	ldr	r0, [pc, #56]	@ (8015c98 <EC200_HTTP_POST+0x4c>)
 8015c60:	f001 fda2 	bl	80177a8 <Config_Update>
	clearResBuff();
 8015c64:	f7ff ffe6 	bl	8015c34 <clearResBuff>
	if (EC200_Transmit("AT+QIACT?\r\n", resBuff, EC200MINRESONSETIME)) {
 8015c68:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8015c6c:	490b      	ldr	r1, [pc, #44]	@ (8015c9c <EC200_HTTP_POST+0x50>)
 8015c6e:	480c      	ldr	r0, [pc, #48]	@ (8015ca0 <EC200_HTTP_POST+0x54>)
 8015c70:	f7eb fa9c 	bl	80011ac <EC200_Transmit>
 8015c74:	4603      	mov	r3, r0
 8015c76:	2b00      	cmp	r3, #0
 8015c78:	d004      	beq.n	8015c84 <EC200_HTTP_POST+0x38>
		printc(100, "AT+QIACT?\r\n RES->%s", resBuff);
 8015c7a:	4a08      	ldr	r2, [pc, #32]	@ (8015c9c <EC200_HTTP_POST+0x50>)
 8015c7c:	4909      	ldr	r1, [pc, #36]	@ (8015ca4 <EC200_HTTP_POST+0x58>)
 8015c7e:	2064      	movs	r0, #100	@ 0x64
 8015c80:	f7eb feca 	bl	8001a18 <printc>
	}
	return processMessage(type);
 8015c84:	6878      	ldr	r0, [r7, #4]
 8015c86:	f001 fd4f 	bl	8017728 <processMessage>
 8015c8a:	4603      	mov	r3, r0

}
 8015c8c:	4618      	mov	r0, r3
 8015c8e:	3708      	adds	r7, #8
 8015c90:	46bd      	mov	sp, r7
 8015c92:	bd80      	pop	{r7, pc}
 8015c94:	20014a54 	.word	0x20014a54
 8015c98:	08022a78 	.word	0x08022a78
 8015c9c:	2001422c 	.word	0x2001422c
 8015ca0:	08022a80 	.word	0x08022a80
 8015ca4:	08022a8c 	.word	0x08022a8c

08015ca8 <EC200_Data_Fetch>:

/*-----------------------------------HTTP-SECTION-END----------------------------------------*/

bool EC200_Data_Fetch(const char *command) {
 8015ca8:	b580      	push	{r7, lr}
 8015caa:	f5ad 6d87 	sub.w	sp, sp, #1080	@ 0x438
 8015cae:	af02      	add	r7, sp, #8
 8015cb0:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 8015cb4:	f2a3 432c 	subw	r3, r3, #1068	@ 0x42c
 8015cb8:	6018      	str	r0, [r3, #0]

	clearResBuff();
 8015cba:	f7ff ffbb 	bl	8015c34 <clearResBuff>
	redoCounter = 0;
 8015cbe:	4b66      	ldr	r3, [pc, #408]	@ (8015e58 <EC200_Data_Fetch+0x1b0>)
 8015cc0:	2200      	movs	r2, #0
 8015cc2:	601a      	str	r2, [r3, #0]
	readURL: if (!EC200_Transmit(command, resBuff, 5000)) {
 8015cc4:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 8015cc8:	f2a3 432c 	subw	r3, r3, #1068	@ 0x42c
 8015ccc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8015cd0:	4962      	ldr	r1, [pc, #392]	@ (8015e5c <EC200_Data_Fetch+0x1b4>)
 8015cd2:	6818      	ldr	r0, [r3, #0]
 8015cd4:	f7eb fa6a 	bl	80011ac <EC200_Transmit>
 8015cd8:	4603      	mov	r3, r0
 8015cda:	f083 0301 	eor.w	r3, r3, #1
 8015cde:	b2db      	uxtb	r3, r3
 8015ce0:	2b00      	cmp	r3, #0
 8015ce2:	d00b      	beq.n	8015cfc <EC200_Data_Fetch+0x54>
		if (redoCounter >= 3) {
 8015ce4:	4b5c      	ldr	r3, [pc, #368]	@ (8015e58 <EC200_Data_Fetch+0x1b0>)
 8015ce6:	681b      	ldr	r3, [r3, #0]
 8015ce8:	2b02      	cmp	r3, #2
 8015cea:	dd01      	ble.n	8015cf0 <EC200_Data_Fetch+0x48>
			return false;
 8015cec:	2300      	movs	r3, #0
 8015cee:	e0ad      	b.n	8015e4c <EC200_Data_Fetch+0x1a4>
		}
		redoCounter++;
 8015cf0:	4b59      	ldr	r3, [pc, #356]	@ (8015e58 <EC200_Data_Fetch+0x1b0>)
 8015cf2:	681b      	ldr	r3, [r3, #0]
 8015cf4:	3301      	adds	r3, #1
 8015cf6:	4a58      	ldr	r2, [pc, #352]	@ (8015e58 <EC200_Data_Fetch+0x1b0>)
 8015cf8:	6013      	str	r3, [r2, #0]
		goto readURL;
 8015cfa:	e7e3      	b.n	8015cc4 <EC200_Data_Fetch+0x1c>
	}
	int KeyID = 0; // Corrected to int
 8015cfc:	2300      	movs	r3, #0
 8015cfe:	f8c7 342c 	str.w	r3, [r7, #1068]	@ 0x42c
	int result = Response_Check(resBuff);
 8015d02:	4856      	ldr	r0, [pc, #344]	@ (8015e5c <EC200_Data_Fetch+0x1b4>)
 8015d04:	f001 fdec 	bl	80178e0 <Response_Check>
 8015d08:	f8c7 0428 	str.w	r0, [r7, #1064]	@ 0x428
	if (result == -1) {
 8015d0c:	f8d7 3428 	ldr.w	r3, [r7, #1064]	@ 0x428
 8015d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015d14:	d105      	bne.n	8015d22 <EC200_Data_Fetch+0x7a>
		printc(MinDelay, "Wrong data received\n");
 8015d16:	4952      	ldr	r1, [pc, #328]	@ (8015e60 <EC200_Data_Fetch+0x1b8>)
 8015d18:	200a      	movs	r0, #10
 8015d1a:	f7eb fe7d 	bl	8001a18 <printc>
		return false; // it needed to be handled all return under FOTA
 8015d1e:	2300      	movs	r3, #0
 8015d20:	e094      	b.n	8015e4c <EC200_Data_Fetch+0x1a4>
	}
	char Rchecksum[2] = { 0 }; //
 8015d22:	2300      	movs	r3, #0
 8015d24:	f8a7 3424 	strh.w	r3, [r7, #1060]	@ 0x424
	char En_Data[1024] = { 0 }; // Remove const qualifier
 8015d28:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 8015d2c:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 8015d30:	2200      	movs	r2, #0
 8015d32:	601a      	str	r2, [r3, #0]
 8015d34:	3304      	adds	r3, #4
 8015d36:	f44f 727f 	mov.w	r2, #1020	@ 0x3fc
 8015d3a:	2100      	movs	r1, #0
 8015d3c:	4618      	mov	r0, r3
 8015d3e:	f009 f877 	bl	801ee30 <memset>
	const char *extracted_Data[6] = { 0 };
 8015d42:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 8015d46:	f2a3 4324 	subw	r3, r3, #1060	@ 0x424
 8015d4a:	461a      	mov	r2, r3
 8015d4c:	2300      	movs	r3, #0
 8015d4e:	6013      	str	r3, [r2, #0]
 8015d50:	6053      	str	r3, [r2, #4]
 8015d52:	6093      	str	r3, [r2, #8]
 8015d54:	60d3      	str	r3, [r2, #12]
 8015d56:	6113      	str	r3, [r2, #16]
 8015d58:	6153      	str	r3, [r2, #20]
	do {
		FOTA_Seprate_String(resBuff, result, 10, extracted_Data, En_Data);
 8015d5a:	f107 020c 	add.w	r2, r7, #12
 8015d5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8015d62:	9300      	str	r3, [sp, #0]
 8015d64:	4613      	mov	r3, r2
 8015d66:	220a      	movs	r2, #10
 8015d68:	f8d7 1428 	ldr.w	r1, [r7, #1064]	@ 0x428
 8015d6c:	483b      	ldr	r0, [pc, #236]	@ (8015e5c <EC200_Data_Fetch+0x1b4>)
 8015d6e:	f001 fe73 	bl	8017a58 <FOTA_Seprate_String>
		if (extracted_Data[5] == NULL) {
 8015d72:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 8015d76:	f2a3 4324 	subw	r3, r3, #1060	@ 0x424
 8015d7a:	695b      	ldr	r3, [r3, #20]
 8015d7c:	2b00      	cmp	r3, #0
 8015d7e:	d105      	bne.n	8015d8c <EC200_Data_Fetch+0xe4>
			printc(MinDelay, "No Checksum\n");
 8015d80:	4938      	ldr	r1, [pc, #224]	@ (8015e64 <EC200_Data_Fetch+0x1bc>)
 8015d82:	200a      	movs	r0, #10
 8015d84:	f7eb fe48 	bl	8001a18 <printc>
			return false;
 8015d88:	2300      	movs	r3, #0
 8015d8a:	e05f      	b.n	8015e4c <EC200_Data_Fetch+0x1a4>
		}
		memcpy(Rchecksum, extracted_Data[5], 2);
 8015d8c:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 8015d90:	f2a3 4324 	subw	r3, r3, #1060	@ 0x424
 8015d94:	695b      	ldr	r3, [r3, #20]
 8015d96:	881b      	ldrh	r3, [r3, #0]
 8015d98:	b29b      	uxth	r3, r3
 8015d9a:	f8a7 3424 	strh.w	r3, [r7, #1060]	@ 0x424
//		strncpy(En_Data, extracted_Data[4], strlen(extracted_Data[4]));

	} while (extracted_Data[5] == NULL);
 8015d9e:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 8015da2:	f2a3 4324 	subw	r3, r3, #1060	@ 0x424
 8015da6:	695b      	ldr	r3, [r3, #20]
 8015da8:	2b00      	cmp	r3, #0
 8015daa:	d0d6      	beq.n	8015d5a <EC200_Data_Fetch+0xb2>

	KeyID = atoi(extracted_Data[3]); // Convert string to integer
 8015dac:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 8015db0:	f2a3 4324 	subw	r3, r3, #1060	@ 0x424
 8015db4:	68db      	ldr	r3, [r3, #12]
 8015db6:	4618      	mov	r0, r3
 8015db8:	f006 ffc5 	bl	801cd46 <atoi>
 8015dbc:	f8c7 042c 	str.w	r0, [r7, #1068]	@ 0x42c

	char CSUM = Calculate_CRC8(En_Data, strlen(En_Data));
 8015dc0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8015dc4:	4618      	mov	r0, r3
 8015dc6:	f7ea fa6d 	bl	80002a4 <strlen>
 8015dca:	4602      	mov	r2, r0
 8015dcc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8015dd0:	4611      	mov	r1, r2
 8015dd2:	4618      	mov	r0, r3
 8015dd4:	f001 fed2 	bl	8017b7c <Calculate_CRC8>
 8015dd8:	4603      	mov	r3, r0
 8015dda:	f887 3427 	strb.w	r3, [r7, #1063]	@ 0x427
	char Cksum[3] = { 0 }; // Since CSUM is one byte, the buffer should be able to hold two characters plus the null terminator
 8015dde:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 8015de2:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 8015de6:	4a20      	ldr	r2, [pc, #128]	@ (8015e68 <EC200_Data_Fetch+0x1c0>)
 8015de8:	8812      	ldrh	r2, [r2, #0]
 8015dea:	801a      	strh	r2, [r3, #0]
 8015dec:	2200      	movs	r2, #0
 8015dee:	709a      	strb	r2, [r3, #2]

	sprintf(Cksum, "%0X", CSUM); // Convert CSUM to hexadecimal and store it in Cksum
 8015df0:	f897 2427 	ldrb.w	r2, [r7, #1063]	@ 0x427
 8015df4:	f107 0308 	add.w	r3, r7, #8
 8015df8:	491c      	ldr	r1, [pc, #112]	@ (8015e6c <EC200_Data_Fetch+0x1c4>)
 8015dfa:	4618      	mov	r0, r3
 8015dfc:	f008 febc 	bl	801eb78 <siprintf>
	clearBuffer(Decrypt_d, sizeof(Decrypt_d));
 8015e00:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8015e04:	481a      	ldr	r0, [pc, #104]	@ (8015e70 <EC200_Data_Fetch+0x1c8>)
 8015e06:	f7eb fe5f 	bl	8001ac8 <clearBuffer>
	if (Rchecksum[0] != Cksum[0] && Rchecksum[1] != Cksum[1]) { // Compare Cksum with Rchecksum
 8015e0a:	f897 2424 	ldrb.w	r2, [r7, #1060]	@ 0x424
 8015e0e:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 8015e12:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 8015e16:	781b      	ldrb	r3, [r3, #0]
 8015e18:	429a      	cmp	r2, r3
 8015e1a:	d00e      	beq.n	8015e3a <EC200_Data_Fetch+0x192>
 8015e1c:	f897 2425 	ldrb.w	r2, [r7, #1061]	@ 0x425
 8015e20:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 8015e24:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 8015e28:	785b      	ldrb	r3, [r3, #1]
 8015e2a:	429a      	cmp	r2, r3
 8015e2c:	d005      	beq.n	8015e3a <EC200_Data_Fetch+0x192>
		printc(MinDelay, "Check sum not matched\n");
 8015e2e:	4911      	ldr	r1, [pc, #68]	@ (8015e74 <EC200_Data_Fetch+0x1cc>)
 8015e30:	200a      	movs	r0, #10
 8015e32:	f7eb fdf1 	bl	8001a18 <printc>
		return false;
 8015e36:	2300      	movs	r3, #0
 8015e38:	e008      	b.n	8015e4c <EC200_Data_Fetch+0x1a4>
	}
	Decrypt(En_Data, Decrypt_d, KeyID);
 8015e3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8015e3e:	f8d7 242c 	ldr.w	r2, [r7, #1068]	@ 0x42c
 8015e42:	490b      	ldr	r1, [pc, #44]	@ (8015e70 <EC200_Data_Fetch+0x1c8>)
 8015e44:	4618      	mov	r0, r3
 8015e46:	f7ec f933 	bl	80020b0 <Decrypt>

	return true;
 8015e4a:	2301      	movs	r3, #1
}
 8015e4c:	4618      	mov	r0, r3
 8015e4e:	f507 6786 	add.w	r7, r7, #1072	@ 0x430
 8015e52:	46bd      	mov	sp, r7
 8015e54:	bd80      	pop	{r7, pc}
 8015e56:	bf00      	nop
 8015e58:	20014a2c 	.word	0x20014a2c
 8015e5c:	2001422c 	.word	0x2001422c
 8015e60:	08022aa0 	.word	0x08022aa0
 8015e64:	08022ab8 	.word	0x08022ab8
 8015e68:	08022ae4 	.word	0x08022ae4
 8015e6c:	08022ac8 	.word	0x08022ac8
 8015e70:	20013e2c 	.word	0x20013e2c
 8015e74:	08022acc 	.word	0x08022acc

08015e78 <EC200_File_save>:
void EC200_File_save(const char *command) {
 8015e78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015e7c:	b08d      	sub	sp, #52	@ 0x34
 8015e7e:	af02      	add	r7, sp, #8
 8015e80:	6078      	str	r0, [r7, #4]
 8015e82:	466b      	mov	r3, sp
 8015e84:	461e      	mov	r6, r3
	uint8_t packet_index = 0;
 8015e86:	2300      	movs	r3, #0
 8015e88:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint32_t Addr = 0;
 8015e8c:	2300      	movs	r3, #0
 8015e8e:	623b      	str	r3, [r7, #32]
	uint8_t rx_Code_buffer[TOTAL_PACKETS][PACKET_SIZE];
 8015e90:	4b52      	ldr	r3, [pc, #328]	@ (8015fdc <EC200_File_save+0x164>)
 8015e92:	6819      	ldr	r1, [r3, #0]
 8015e94:	1e4b      	subs	r3, r1, #1
 8015e96:	61bb      	str	r3, [r7, #24]
 8015e98:	460a      	mov	r2, r1
 8015e9a:	2300      	movs	r3, #0
 8015e9c:	4690      	mov	r8, r2
 8015e9e:	4699      	mov	r9, r3
 8015ea0:	f04f 0200 	mov.w	r2, #0
 8015ea4:	f04f 0300 	mov.w	r3, #0
 8015ea8:	ea4f 3349 	mov.w	r3, r9, lsl #13
 8015eac:	ea43 43d8 	orr.w	r3, r3, r8, lsr #19
 8015eb0:	ea4f 3248 	mov.w	r2, r8, lsl #13
 8015eb4:	460a      	mov	r2, r1
 8015eb6:	2300      	movs	r3, #0
 8015eb8:	4614      	mov	r4, r2
 8015eba:	461d      	mov	r5, r3
 8015ebc:	f04f 0200 	mov.w	r2, #0
 8015ec0:	f04f 0300 	mov.w	r3, #0
 8015ec4:	036b      	lsls	r3, r5, #13
 8015ec6:	ea43 43d4 	orr.w	r3, r3, r4, lsr #19
 8015eca:	0362      	lsls	r2, r4, #13
 8015ecc:	460b      	mov	r3, r1
 8015ece:	029b      	lsls	r3, r3, #10
 8015ed0:	3307      	adds	r3, #7
 8015ed2:	08db      	lsrs	r3, r3, #3
 8015ed4:	00db      	lsls	r3, r3, #3
 8015ed6:	ebad 0d03 	sub.w	sp, sp, r3
 8015eda:	ab02      	add	r3, sp, #8
 8015edc:	3300      	adds	r3, #0
 8015ede:	617b      	str	r3, [r7, #20]
	uint8_t H_Buff[11] = { 0 };
 8015ee0:	2300      	movs	r3, #0
 8015ee2:	60bb      	str	r3, [r7, #8]
 8015ee4:	f107 030c 	add.w	r3, r7, #12
 8015ee8:	2200      	movs	r2, #0
 8015eea:	601a      	str	r2, [r3, #0]
 8015eec:	f8c3 2003 	str.w	r2, [r3, #3]

//	if(EC200_Transmit(command, H_Buff, 20000)){
//		printc(1000,"%s",H_Buff);
//		wait_for_response(H_Buff, 20000);
//	}
	enable_Idle = false;
 8015ef0:	4b3b      	ldr	r3, [pc, #236]	@ (8015fe0 <EC200_File_save+0x168>)
 8015ef2:	2200      	movs	r2, #0
 8015ef4:	701a      	strb	r2, [r3, #0]
	memset(rx_Code_buffer, 0, sizeof(rx_Code_buffer));
 8015ef6:	460b      	mov	r3, r1
 8015ef8:	029b      	lsls	r3, r3, #10
 8015efa:	461a      	mov	r2, r3
 8015efc:	2100      	movs	r1, #0
 8015efe:	6978      	ldr	r0, [r7, #20]
 8015f00:	f008 ff96 	bl	801ee30 <memset>
	HAL_UART_Transmit(&huart1, (uint8_t*) command, strlen(command), 2000);
 8015f04:	6878      	ldr	r0, [r7, #4]
 8015f06:	f7ea f9cd 	bl	80002a4 <strlen>
 8015f0a:	4603      	mov	r3, r0
 8015f0c:	b29a      	uxth	r2, r3
 8015f0e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8015f12:	6879      	ldr	r1, [r7, #4]
 8015f14:	4833      	ldr	r0, [pc, #204]	@ (8015fe4 <EC200_File_save+0x16c>)
 8015f16:	f7fc febd 	bl	8012c94 <HAL_UART_Transmit>

	HAL_UART_Receive(&huart1, H_Buff, sizeof(H_Buff), 500); // Receive data into H_Buff
 8015f1a:	f107 0108 	add.w	r1, r7, #8
 8015f1e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8015f22:	220b      	movs	r2, #11
 8015f24:	482f      	ldr	r0, [pc, #188]	@ (8015fe4 <EC200_File_save+0x16c>)
 8015f26:	f7fc ff53 	bl	8012dd0 <HAL_UART_Receive>

	for (packet_index = 0; packet_index < TOTAL_PACKETS; packet_index++) {
 8015f2a:	2300      	movs	r3, #0
 8015f2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015f30:	e010      	b.n	8015f54 <EC200_File_save+0xdc>

		HAL_UART_Receive(&huart1, rx_Code_buffer[packet_index], PACKET_SIZE,
 8015f32:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015f36:	029b      	lsls	r3, r3, #10
 8015f38:	697a      	ldr	r2, [r7, #20]
 8015f3a:	18d1      	adds	r1, r2, r3
 8015f3c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8015f40:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8015f44:	4827      	ldr	r0, [pc, #156]	@ (8015fe4 <EC200_File_save+0x16c>)
 8015f46:	f7fc ff43 	bl	8012dd0 <HAL_UART_Receive>
	for (packet_index = 0; packet_index < TOTAL_PACKETS; packet_index++) {
 8015f4a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015f4e:	3301      	adds	r3, #1
 8015f50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015f54:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8015f58:	4b20      	ldr	r3, [pc, #128]	@ (8015fdc <EC200_File_save+0x164>)
 8015f5a:	681b      	ldr	r3, [r3, #0]
 8015f5c:	429a      	cmp	r2, r3
 8015f5e:	dbe8      	blt.n	8015f32 <EC200_File_save+0xba>
				1000);
	}

	writeF_CP((uint64_t)1, (uint64_t)1,(uint64_t)1);
 8015f60:	f04f 0201 	mov.w	r2, #1
 8015f64:	f04f 0300 	mov.w	r3, #0
 8015f68:	e9cd 2300 	strd	r2, r3, [sp]
 8015f6c:	f04f 0201 	mov.w	r2, #1
 8015f70:	f04f 0300 	mov.w	r3, #0
 8015f74:	f04f 0001 	mov.w	r0, #1
 8015f78:	f04f 0100 	mov.w	r1, #0
 8015f7c:	f000 fc0a 	bl	8016794 <writeF_CP>
	Addr = L3;
 8015f80:	4b19      	ldr	r3, [pc, #100]	@ (8015fe8 <EC200_File_save+0x170>)
 8015f82:	681b      	ldr	r3, [r3, #0]
 8015f84:	623b      	str	r3, [r7, #32]
	Erase_sectors(L3);
 8015f86:	4b18      	ldr	r3, [pc, #96]	@ (8015fe8 <EC200_File_save+0x170>)
 8015f88:	681b      	ldr	r3, [r3, #0]
 8015f8a:	4618      	mov	r0, r3
 8015f8c:	f000 fb1c 	bl	80165c8 <Erase_sectors>
	for (int i = 0; i < TOTAL_PACKETS; i++) {
 8015f90:	2300      	movs	r3, #0
 8015f92:	61fb      	str	r3, [r7, #28]
 8015f94:	e013      	b.n	8015fbe <EC200_File_save+0x146>
		HAL_Delay(100);
 8015f96:	2064      	movs	r0, #100	@ 0x64
 8015f98:	f7ef fd26 	bl	80059e8 <HAL_Delay>
		HAL_FLASH_Write_Buff(Addr, &rx_Code_buffer[i], PACKET_SIZE);
 8015f9c:	69fb      	ldr	r3, [r7, #28]
 8015f9e:	029b      	lsls	r3, r3, #10
 8015fa0:	697a      	ldr	r2, [r7, #20]
 8015fa2:	4413      	add	r3, r2
 8015fa4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8015fa8:	4619      	mov	r1, r3
 8015faa:	6a38      	ldr	r0, [r7, #32]
 8015fac:	f000 fac6 	bl	801653c <HAL_FLASH_Write_Buff>
		Addr += 1024;
 8015fb0:	6a3b      	ldr	r3, [r7, #32]
 8015fb2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8015fb6:	623b      	str	r3, [r7, #32]
	for (int i = 0; i < TOTAL_PACKETS; i++) {
 8015fb8:	69fb      	ldr	r3, [r7, #28]
 8015fba:	3301      	adds	r3, #1
 8015fbc:	61fb      	str	r3, [r7, #28]
 8015fbe:	4b07      	ldr	r3, [pc, #28]	@ (8015fdc <EC200_File_save+0x164>)
 8015fc0:	681b      	ldr	r3, [r3, #0]
 8015fc2:	69fa      	ldr	r2, [r7, #28]
 8015fc4:	429a      	cmp	r2, r3
 8015fc6:	dbe6      	blt.n	8015f96 <EC200_File_save+0x11e>
	}

	enable_Idle = true;
 8015fc8:	4b05      	ldr	r3, [pc, #20]	@ (8015fe0 <EC200_File_save+0x168>)
 8015fca:	2201      	movs	r2, #1
 8015fcc:	701a      	strb	r2, [r3, #0]
	return;
 8015fce:	bf00      	nop
 8015fd0:	46b5      	mov	sp, r6
}
 8015fd2:	372c      	adds	r7, #44	@ 0x2c
 8015fd4:	46bd      	mov	sp, r7
 8015fd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015fda:	bf00      	nop
 8015fdc:	20014bd4 	.word	0x20014bd4
 8015fe0:	20000000 	.word	0x20000000
 8015fe4:	20013c4c 	.word	0x20013c4c
 8015fe8:	20000070 	.word	0x20000070

08015fec <EC200_Key_Update>:

void EC200_Key_Update(const char *command) {
 8015fec:	b580      	push	{r7, lr}
 8015fee:	f5ad 6d88 	sub.w	sp, sp, #1088	@ 0x440
 8015ff2:	af02      	add	r7, sp, #8
 8015ff4:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8015ff8:	f2a3 4334 	subw	r3, r3, #1076	@ 0x434
 8015ffc:	6018      	str	r0, [r3, #0]

	clearResBuff();
 8015ffe:	f7ff fe19 	bl	8015c34 <clearResBuff>
	redoCounter = 0;
 8016002:	4b77      	ldr	r3, [pc, #476]	@ (80161e0 <EC200_Key_Update+0x1f4>)
 8016004:	2200      	movs	r2, #0
 8016006:	601a      	str	r2, [r3, #0]
	readURL: if (!EC200_Transmit(command, resBuff, 5000)) {
 8016008:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 801600c:	f2a3 4334 	subw	r3, r3, #1076	@ 0x434
 8016010:	f241 3288 	movw	r2, #5000	@ 0x1388
 8016014:	4973      	ldr	r1, [pc, #460]	@ (80161e4 <EC200_Key_Update+0x1f8>)
 8016016:	6818      	ldr	r0, [r3, #0]
 8016018:	f7eb f8c8 	bl	80011ac <EC200_Transmit>
 801601c:	4603      	mov	r3, r0
 801601e:	f083 0301 	eor.w	r3, r3, #1
 8016022:	b2db      	uxtb	r3, r3
 8016024:	2b00      	cmp	r3, #0
 8016026:	d00a      	beq.n	801603e <EC200_Key_Update+0x52>
		if (redoCounter >= 3) {
 8016028:	4b6d      	ldr	r3, [pc, #436]	@ (80161e0 <EC200_Key_Update+0x1f4>)
 801602a:	681b      	ldr	r3, [r3, #0]
 801602c:	2b02      	cmp	r3, #2
 801602e:	f300 80d2 	bgt.w	80161d6 <EC200_Key_Update+0x1ea>
			return false;
		}
		redoCounter++;
 8016032:	4b6b      	ldr	r3, [pc, #428]	@ (80161e0 <EC200_Key_Update+0x1f4>)
 8016034:	681b      	ldr	r3, [r3, #0]
 8016036:	3301      	adds	r3, #1
 8016038:	4a69      	ldr	r2, [pc, #420]	@ (80161e0 <EC200_Key_Update+0x1f4>)
 801603a:	6013      	str	r3, [r2, #0]
		goto readURL;
 801603c:	e7e4      	b.n	8016008 <EC200_Key_Update+0x1c>
	}
	int KeyID = 0; // Corrected to int
 801603e:	2300      	movs	r3, #0
 8016040:	f8c7 3430 	str.w	r3, [r7, #1072]	@ 0x430
	int result = Response_Check(resBuff);
 8016044:	4867      	ldr	r0, [pc, #412]	@ (80161e4 <EC200_Key_Update+0x1f8>)
 8016046:	f001 fc4b 	bl	80178e0 <Response_Check>
 801604a:	f8c7 042c 	str.w	r0, [r7, #1068]	@ 0x42c
	if (result == -1) {
 801604e:	f8d7 342c 	ldr.w	r3, [r7, #1068]	@ 0x42c
 8016052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016056:	d104      	bne.n	8016062 <EC200_Key_Update+0x76>
		printc(MinDelay, "Wrong data received\n");
 8016058:	4963      	ldr	r1, [pc, #396]	@ (80161e8 <EC200_Key_Update+0x1fc>)
 801605a:	200a      	movs	r0, #10
 801605c:	f7eb fcdc 	bl	8001a18 <printc>
		return false; // it needed to be handled all return under FOTA
 8016060:	e0ba      	b.n	80161d8 <EC200_Key_Update+0x1ec>
	}
	char Rchecksum[2] = { 0 }; //
 8016062:	2300      	movs	r3, #0
 8016064:	f8a7 3428 	strh.w	r3, [r7, #1064]	@ 0x428
	char En_Data[1024] = { 0 }; // Remove const qualifier
 8016068:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 801606c:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 8016070:	2200      	movs	r2, #0
 8016072:	601a      	str	r2, [r3, #0]
 8016074:	3304      	adds	r3, #4
 8016076:	f44f 727f 	mov.w	r2, #1020	@ 0x3fc
 801607a:	2100      	movs	r1, #0
 801607c:	4618      	mov	r0, r3
 801607e:	f008 fed7 	bl	801ee30 <memset>
	const char *extracted_Data[6] = { 0 };
 8016082:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8016086:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 801608a:	461a      	mov	r2, r3
 801608c:	2300      	movs	r3, #0
 801608e:	6013      	str	r3, [r2, #0]
 8016090:	6053      	str	r3, [r2, #4]
 8016092:	6093      	str	r3, [r2, #8]
 8016094:	60d3      	str	r3, [r2, #12]
 8016096:	6113      	str	r3, [r2, #16]
 8016098:	6153      	str	r3, [r2, #20]
	do {
		FOTA_Seprate_String(resBuff, result, 10, extracted_Data, En_Data);
 801609a:	f107 0210 	add.w	r2, r7, #16
 801609e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80160a2:	9300      	str	r3, [sp, #0]
 80160a4:	4613      	mov	r3, r2
 80160a6:	220a      	movs	r2, #10
 80160a8:	f8d7 142c 	ldr.w	r1, [r7, #1068]	@ 0x42c
 80160ac:	484d      	ldr	r0, [pc, #308]	@ (80161e4 <EC200_Key_Update+0x1f8>)
 80160ae:	f001 fcd3 	bl	8017a58 <FOTA_Seprate_String>
		if (extracted_Data[5] == NULL) {
 80160b2:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 80160b6:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 80160ba:	695b      	ldr	r3, [r3, #20]
 80160bc:	2b00      	cmp	r3, #0
 80160be:	d104      	bne.n	80160ca <EC200_Key_Update+0xde>
			printc(MinDelay, "No Checksum\n");
 80160c0:	494a      	ldr	r1, [pc, #296]	@ (80161ec <EC200_Key_Update+0x200>)
 80160c2:	200a      	movs	r0, #10
 80160c4:	f7eb fca8 	bl	8001a18 <printc>
			return false;
 80160c8:	e086      	b.n	80161d8 <EC200_Key_Update+0x1ec>
		}
		memcpy(Rchecksum, extracted_Data[5], 2);
 80160ca:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 80160ce:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 80160d2:	695b      	ldr	r3, [r3, #20]
 80160d4:	881b      	ldrh	r3, [r3, #0]
 80160d6:	b29b      	uxth	r3, r3
 80160d8:	f8a7 3428 	strh.w	r3, [r7, #1064]	@ 0x428
//		strncpy(En_Data, extracted_Data[4], strlen(extracted_Data[4]));

	} while (extracted_Data[5] == NULL);
 80160dc:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 80160e0:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 80160e4:	695b      	ldr	r3, [r3, #20]
 80160e6:	2b00      	cmp	r3, #0
 80160e8:	d0d7      	beq.n	801609a <EC200_Key_Update+0xae>

	KeyID = atoi(extracted_Data[3]); // Convert string to integer
 80160ea:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 80160ee:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 80160f2:	68db      	ldr	r3, [r3, #12]
 80160f4:	4618      	mov	r0, r3
 80160f6:	f006 fe26 	bl	801cd46 <atoi>
 80160fa:	f8c7 0430 	str.w	r0, [r7, #1072]	@ 0x430

	char CSUM = Calculate_CRC8(En_Data, strlen(En_Data));
 80160fe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8016102:	4618      	mov	r0, r3
 8016104:	f7ea f8ce 	bl	80002a4 <strlen>
 8016108:	4602      	mov	r2, r0
 801610a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801610e:	4611      	mov	r1, r2
 8016110:	4618      	mov	r0, r3
 8016112:	f001 fd33 	bl	8017b7c <Calculate_CRC8>
 8016116:	4603      	mov	r3, r0
 8016118:	f887 342b 	strb.w	r3, [r7, #1067]	@ 0x42b
	char Cksum[3] = { 0 }; // Since CSUM is one byte, the buffer should be able to hold two characters plus the null terminator
 801611c:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8016120:	f2a3 432c 	subw	r3, r3, #1068	@ 0x42c
 8016124:	4a32      	ldr	r2, [pc, #200]	@ (80161f0 <EC200_Key_Update+0x204>)
 8016126:	8812      	ldrh	r2, [r2, #0]
 8016128:	801a      	strh	r2, [r3, #0]
 801612a:	2200      	movs	r2, #0
 801612c:	709a      	strb	r2, [r3, #2]

	sprintf(Cksum, "%0X", CSUM); // Convert CSUM to hexadecimal and store it in Cksum
 801612e:	f897 242b 	ldrb.w	r2, [r7, #1067]	@ 0x42b
 8016132:	f107 030c 	add.w	r3, r7, #12
 8016136:	492f      	ldr	r1, [pc, #188]	@ (80161f4 <EC200_Key_Update+0x208>)
 8016138:	4618      	mov	r0, r3
 801613a:	f008 fd1d 	bl	801eb78 <siprintf>
	clearBuffer(Decrypt_d, sizeof(Decrypt_d));
 801613e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8016142:	482d      	ldr	r0, [pc, #180]	@ (80161f8 <EC200_Key_Update+0x20c>)
 8016144:	f7eb fcc0 	bl	8001ac8 <clearBuffer>
	if (Rchecksum[0] == Cksum[0] && Rchecksum[1] == Cksum[1]) { // Compare Cksum with Rchecksum
 8016148:	f897 2428 	ldrb.w	r2, [r7, #1064]	@ 0x428
 801614c:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8016150:	f2a3 432c 	subw	r3, r3, #1068	@ 0x42c
 8016154:	781b      	ldrb	r3, [r3, #0]
 8016156:	429a      	cmp	r2, r3
 8016158:	d111      	bne.n	801617e <EC200_Key_Update+0x192>
 801615a:	f897 2429 	ldrb.w	r2, [r7, #1065]	@ 0x429
 801615e:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8016162:	f2a3 432c 	subw	r3, r3, #1068	@ 0x42c
 8016166:	785b      	ldrb	r3, [r3, #1]
 8016168:	429a      	cmp	r2, r3
 801616a:	d108      	bne.n	801617e <EC200_Key_Update+0x192>
		k_Decrypt(En_Data, Decrypt_d, KeyID);
 801616c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8016170:	f8d7 2430 	ldr.w	r2, [r7, #1072]	@ 0x430
 8016174:	4920      	ldr	r1, [pc, #128]	@ (80161f8 <EC200_Key_Update+0x20c>)
 8016176:	4618      	mov	r0, r3
 8016178:	f7ec f8ca 	bl	8002310 <k_Decrypt>
	if (Rchecksum[0] == Cksum[0] && Rchecksum[1] == Cksum[1]) { // Compare Cksum with Rchecksum
 801617c:	e003      	b.n	8016186 <EC200_Key_Update+0x19a>
	} else {
		printc(MinDelay, "CheckSum Don't Matched\n");
 801617e:	491f      	ldr	r1, [pc, #124]	@ (80161fc <EC200_Key_Update+0x210>)
 8016180:	200a      	movs	r0, #10
 8016182:	f7eb fc49 	bl	8001a18 <printc>
//			Decrypt(En_Data, Decrypt_d, KeyID);
	}
//		memset(rx_buffer, 0, sizeof(rx_buffer)); // Clear rx_buffer
	clearBuffer(ComKeys, sizeof(ComKeys));
 8016186:	f44f 7184 	mov.w	r1, #264	@ 0x108
 801618a:	481d      	ldr	r0, [pc, #116]	@ (8016200 <EC200_Key_Update+0x214>)
 801618c:	f7eb fc9c 	bl	8001ac8 <clearBuffer>
	extractKeys(Decrypt_d, ComKeys);
 8016190:	491b      	ldr	r1, [pc, #108]	@ (8016200 <EC200_Key_Update+0x214>)
 8016192:	4819      	ldr	r0, [pc, #100]	@ (80161f8 <EC200_Key_Update+0x20c>)
 8016194:	f001 fbfc 	bl	8017990 <extractKeys>
	UPDATE_COMKeys();
 8016198:	f002 fe52 	bl	8018e40 <UPDATE_COMKeys>
	// Print Function For Keys
	for (int i = 0; i < 8; i++) {
 801619c:	2300      	movs	r3, #0
 801619e:	f8c7 3434 	str.w	r3, [r7, #1076]	@ 0x434
 80161a2:	e013      	b.n	80161cc <EC200_Key_Update+0x1e0>
		printc(MinDelay, "Key %d: %s\n\r", i + 1, ComKeys[i]);
 80161a4:	f8d7 3434 	ldr.w	r3, [r7, #1076]	@ 0x434
 80161a8:	1c59      	adds	r1, r3, #1
 80161aa:	f8d7 2434 	ldr.w	r2, [r7, #1076]	@ 0x434
 80161ae:	4613      	mov	r3, r2
 80161b0:	015b      	lsls	r3, r3, #5
 80161b2:	4413      	add	r3, r2
 80161b4:	4a12      	ldr	r2, [pc, #72]	@ (8016200 <EC200_Key_Update+0x214>)
 80161b6:	4413      	add	r3, r2
 80161b8:	460a      	mov	r2, r1
 80161ba:	4912      	ldr	r1, [pc, #72]	@ (8016204 <EC200_Key_Update+0x218>)
 80161bc:	200a      	movs	r0, #10
 80161be:	f7eb fc2b 	bl	8001a18 <printc>
	for (int i = 0; i < 8; i++) {
 80161c2:	f8d7 3434 	ldr.w	r3, [r7, #1076]	@ 0x434
 80161c6:	3301      	adds	r3, #1
 80161c8:	f8c7 3434 	str.w	r3, [r7, #1076]	@ 0x434
 80161cc:	f8d7 3434 	ldr.w	r3, [r7, #1076]	@ 0x434
 80161d0:	2b07      	cmp	r3, #7
 80161d2:	dde7      	ble.n	80161a4 <EC200_Key_Update+0x1b8>
 80161d4:	e000      	b.n	80161d8 <EC200_Key_Update+0x1ec>
			return false;
 80161d6:	bf00      	nop
	}

}
 80161d8:	f507 6787 	add.w	r7, r7, #1080	@ 0x438
 80161dc:	46bd      	mov	sp, r7
 80161de:	bd80      	pop	{r7, pc}
 80161e0:	20014a2c 	.word	0x20014a2c
 80161e4:	2001422c 	.word	0x2001422c
 80161e8:	08022aa0 	.word	0x08022aa0
 80161ec:	08022ab8 	.word	0x08022ab8
 80161f0:	08022ae4 	.word	0x08022ae4
 80161f4:	08022ac8 	.word	0x08022ac8
 80161f8:	20013e2c 	.word	0x20013e2c
 80161fc:	08022ae8 	.word	0x08022ae8
 8016200:	20014acc 	.word	0x20014acc
 8016204:	08022b00 	.word	0x08022b00

08016208 <EC200_Config_Update>:


bool EC200_Config_Update(const char *command) {
 8016208:	b580      	push	{r7, lr}
 801620a:	f5ad 6d87 	sub.w	sp, sp, #1080	@ 0x438
 801620e:	af02      	add	r7, sp, #8
 8016210:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 8016214:	f2a3 432c 	subw	r3, r3, #1068	@ 0x42c
 8016218:	6018      	str	r0, [r3, #0]

clearResBuff();
 801621a:	f7ff fd0b 	bl	8015c34 <clearResBuff>
redoCounter = 0;
 801621e:	4b66      	ldr	r3, [pc, #408]	@ (80163b8 <EC200_Config_Update+0x1b0>)
 8016220:	2200      	movs	r2, #0
 8016222:	601a      	str	r2, [r3, #0]
readURL: if (!EC200_Transmit(command, resBuff, 5000)) {
 8016224:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 8016228:	f2a3 432c 	subw	r3, r3, #1068	@ 0x42c
 801622c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8016230:	4962      	ldr	r1, [pc, #392]	@ (80163bc <EC200_Config_Update+0x1b4>)
 8016232:	6818      	ldr	r0, [r3, #0]
 8016234:	f7ea ffba 	bl	80011ac <EC200_Transmit>
 8016238:	4603      	mov	r3, r0
 801623a:	f083 0301 	eor.w	r3, r3, #1
 801623e:	b2db      	uxtb	r3, r3
 8016240:	2b00      	cmp	r3, #0
 8016242:	d00b      	beq.n	801625c <EC200_Config_Update+0x54>
	if (redoCounter >= 3) {
 8016244:	4b5c      	ldr	r3, [pc, #368]	@ (80163b8 <EC200_Config_Update+0x1b0>)
 8016246:	681b      	ldr	r3, [r3, #0]
 8016248:	2b02      	cmp	r3, #2
 801624a:	dd01      	ble.n	8016250 <EC200_Config_Update+0x48>
		return false;
 801624c:	2300      	movs	r3, #0
 801624e:	e0ad      	b.n	80163ac <EC200_Config_Update+0x1a4>
	}
	redoCounter++;
 8016250:	4b59      	ldr	r3, [pc, #356]	@ (80163b8 <EC200_Config_Update+0x1b0>)
 8016252:	681b      	ldr	r3, [r3, #0]
 8016254:	3301      	adds	r3, #1
 8016256:	4a58      	ldr	r2, [pc, #352]	@ (80163b8 <EC200_Config_Update+0x1b0>)
 8016258:	6013      	str	r3, [r2, #0]
	goto readURL;
 801625a:	e7e3      	b.n	8016224 <EC200_Config_Update+0x1c>
}
int KeyID = 0; // Corrected to int
 801625c:	2300      	movs	r3, #0
 801625e:	f8c7 342c 	str.w	r3, [r7, #1068]	@ 0x42c
int result = Response_Check(resBuff);
 8016262:	4856      	ldr	r0, [pc, #344]	@ (80163bc <EC200_Config_Update+0x1b4>)
 8016264:	f001 fb3c 	bl	80178e0 <Response_Check>
 8016268:	f8c7 0428 	str.w	r0, [r7, #1064]	@ 0x428
if (result == -1) {
 801626c:	f8d7 3428 	ldr.w	r3, [r7, #1064]	@ 0x428
 8016270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016274:	d105      	bne.n	8016282 <EC200_Config_Update+0x7a>
	printc(MinDelay, "Wrong data received\n");
 8016276:	4952      	ldr	r1, [pc, #328]	@ (80163c0 <EC200_Config_Update+0x1b8>)
 8016278:	200a      	movs	r0, #10
 801627a:	f7eb fbcd 	bl	8001a18 <printc>
	return false; // it needed to be handled all return under FOTA
 801627e:	2300      	movs	r3, #0
 8016280:	e094      	b.n	80163ac <EC200_Config_Update+0x1a4>
}
char Rchecksum[2] = { 0 }; //
 8016282:	2300      	movs	r3, #0
 8016284:	f8a7 3424 	strh.w	r3, [r7, #1060]	@ 0x424
char En_Data[1024] = { 0 }; // Remove const qualifier
 8016288:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 801628c:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 8016290:	2200      	movs	r2, #0
 8016292:	601a      	str	r2, [r3, #0]
 8016294:	3304      	adds	r3, #4
 8016296:	f44f 727f 	mov.w	r2, #1020	@ 0x3fc
 801629a:	2100      	movs	r1, #0
 801629c:	4618      	mov	r0, r3
 801629e:	f008 fdc7 	bl	801ee30 <memset>
const char *extracted_Data[6] = { 0 };
 80162a2:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 80162a6:	f2a3 4324 	subw	r3, r3, #1060	@ 0x424
 80162aa:	461a      	mov	r2, r3
 80162ac:	2300      	movs	r3, #0
 80162ae:	6013      	str	r3, [r2, #0]
 80162b0:	6053      	str	r3, [r2, #4]
 80162b2:	6093      	str	r3, [r2, #8]
 80162b4:	60d3      	str	r3, [r2, #12]
 80162b6:	6113      	str	r3, [r2, #16]
 80162b8:	6153      	str	r3, [r2, #20]
do {
	FOTA_Seprate_String(resBuff, result, 10, extracted_Data, En_Data);
 80162ba:	f107 020c 	add.w	r2, r7, #12
 80162be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80162c2:	9300      	str	r3, [sp, #0]
 80162c4:	4613      	mov	r3, r2
 80162c6:	220a      	movs	r2, #10
 80162c8:	f8d7 1428 	ldr.w	r1, [r7, #1064]	@ 0x428
 80162cc:	483b      	ldr	r0, [pc, #236]	@ (80163bc <EC200_Config_Update+0x1b4>)
 80162ce:	f001 fbc3 	bl	8017a58 <FOTA_Seprate_String>
	if (extracted_Data[5] == NULL) {
 80162d2:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 80162d6:	f2a3 4324 	subw	r3, r3, #1060	@ 0x424
 80162da:	695b      	ldr	r3, [r3, #20]
 80162dc:	2b00      	cmp	r3, #0
 80162de:	d105      	bne.n	80162ec <EC200_Config_Update+0xe4>
		printc(MinDelay, "No Checksum\n");
 80162e0:	4938      	ldr	r1, [pc, #224]	@ (80163c4 <EC200_Config_Update+0x1bc>)
 80162e2:	200a      	movs	r0, #10
 80162e4:	f7eb fb98 	bl	8001a18 <printc>
		return false;
 80162e8:	2300      	movs	r3, #0
 80162ea:	e05f      	b.n	80163ac <EC200_Config_Update+0x1a4>
	}
	memcpy(Rchecksum, extracted_Data[5], 2);
 80162ec:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 80162f0:	f2a3 4324 	subw	r3, r3, #1060	@ 0x424
 80162f4:	695b      	ldr	r3, [r3, #20]
 80162f6:	881b      	ldrh	r3, [r3, #0]
 80162f8:	b29b      	uxth	r3, r3
 80162fa:	f8a7 3424 	strh.w	r3, [r7, #1060]	@ 0x424
	//		strncpy(En_Data, extracted_Data[4], strlen(extracted_Data[4]));

} while (extracted_Data[5] == NULL);
 80162fe:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 8016302:	f2a3 4324 	subw	r3, r3, #1060	@ 0x424
 8016306:	695b      	ldr	r3, [r3, #20]
 8016308:	2b00      	cmp	r3, #0
 801630a:	d0d6      	beq.n	80162ba <EC200_Config_Update+0xb2>

KeyID = atoi(extracted_Data[3]); // Convert string to integer
 801630c:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 8016310:	f2a3 4324 	subw	r3, r3, #1060	@ 0x424
 8016314:	68db      	ldr	r3, [r3, #12]
 8016316:	4618      	mov	r0, r3
 8016318:	f006 fd15 	bl	801cd46 <atoi>
 801631c:	f8c7 042c 	str.w	r0, [r7, #1068]	@ 0x42c

char CSUM = Calculate_CRC8(En_Data, strlen(En_Data));
 8016320:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8016324:	4618      	mov	r0, r3
 8016326:	f7e9 ffbd 	bl	80002a4 <strlen>
 801632a:	4602      	mov	r2, r0
 801632c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8016330:	4611      	mov	r1, r2
 8016332:	4618      	mov	r0, r3
 8016334:	f001 fc22 	bl	8017b7c <Calculate_CRC8>
 8016338:	4603      	mov	r3, r0
 801633a:	f887 3427 	strb.w	r3, [r7, #1063]	@ 0x427
char Cksum[3] = { 0 }; // Since CSUM is one byte, the buffer should be able to hold two characters plus the null terminator
 801633e:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 8016342:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 8016346:	4a20      	ldr	r2, [pc, #128]	@ (80163c8 <EC200_Config_Update+0x1c0>)
 8016348:	8812      	ldrh	r2, [r2, #0]
 801634a:	801a      	strh	r2, [r3, #0]
 801634c:	2200      	movs	r2, #0
 801634e:	709a      	strb	r2, [r3, #2]

sprintf(Cksum, "%0X", CSUM); // Convert CSUM to hexadecimal and store it in Cksum
 8016350:	f897 2427 	ldrb.w	r2, [r7, #1063]	@ 0x427
 8016354:	f107 0308 	add.w	r3, r7, #8
 8016358:	491c      	ldr	r1, [pc, #112]	@ (80163cc <EC200_Config_Update+0x1c4>)
 801635a:	4618      	mov	r0, r3
 801635c:	f008 fc0c 	bl	801eb78 <siprintf>
clearBuffer(Decrypt_d, sizeof(Decrypt_d));
 8016360:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8016364:	481a      	ldr	r0, [pc, #104]	@ (80163d0 <EC200_Config_Update+0x1c8>)
 8016366:	f7eb fbaf 	bl	8001ac8 <clearBuffer>
if (Rchecksum[0] != Cksum[0] && Rchecksum[1] != Cksum[1]) { // Compare Cksum with Rchecksum
 801636a:	f897 2424 	ldrb.w	r2, [r7, #1060]	@ 0x424
 801636e:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 8016372:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 8016376:	781b      	ldrb	r3, [r3, #0]
 8016378:	429a      	cmp	r2, r3
 801637a:	d00e      	beq.n	801639a <EC200_Config_Update+0x192>
 801637c:	f897 2425 	ldrb.w	r2, [r7, #1061]	@ 0x425
 8016380:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 8016384:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 8016388:	785b      	ldrb	r3, [r3, #1]
 801638a:	429a      	cmp	r2, r3
 801638c:	d005      	beq.n	801639a <EC200_Config_Update+0x192>
	printc(MinDelay, "Check sum not matched\n");
 801638e:	4911      	ldr	r1, [pc, #68]	@ (80163d4 <EC200_Config_Update+0x1cc>)
 8016390:	200a      	movs	r0, #10
 8016392:	f7eb fb41 	bl	8001a18 <printc>
	return false;
 8016396:	2300      	movs	r3, #0
 8016398:	e008      	b.n	80163ac <EC200_Config_Update+0x1a4>
}
Decrypt(En_Data, Decrypt_d, KeyID);
 801639a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801639e:	f8d7 242c 	ldr.w	r2, [r7, #1068]	@ 0x42c
 80163a2:	490b      	ldr	r1, [pc, #44]	@ (80163d0 <EC200_Config_Update+0x1c8>)
 80163a4:	4618      	mov	r0, r3
 80163a6:	f7eb fe83 	bl	80020b0 <Decrypt>

return true;
 80163aa:	2301      	movs	r3, #1
}
 80163ac:	4618      	mov	r0, r3
 80163ae:	f507 6786 	add.w	r7, r7, #1072	@ 0x430
 80163b2:	46bd      	mov	sp, r7
 80163b4:	bd80      	pop	{r7, pc}
 80163b6:	bf00      	nop
 80163b8:	20014a2c 	.word	0x20014a2c
 80163bc:	2001422c 	.word	0x2001422c
 80163c0:	08022aa0 	.word	0x08022aa0
 80163c4:	08022ab8 	.word	0x08022ab8
 80163c8:	08022ae4 	.word	0x08022ae4
 80163cc:	08022ac8 	.word	0x08022ac8
 80163d0:	20013e2c 	.word	0x20013e2c
 80163d4:	08022acc 	.word	0x08022acc

080163d8 <GetSector>:
int packet_size = 1024;
int Total_Packets =200;
 uint8_t FOTABuffer[1024];
FLASH_EraseInitTypeDef EraseInitStruct;  // Erase structure

uint32_t GetSector(uint32_t Address) {
 80163d8:	b480      	push	{r7}
 80163da:	b085      	sub	sp, #20
 80163dc:	af00      	add	r7, sp, #0
 80163de:	6078      	str	r0, [r7, #4]
	uint32_t sector = 0;
 80163e0:	2300      	movs	r3, #0
 80163e2:	60fb      	str	r3, [r7, #12]

	if ((Address >= FLASH_BASE) && (Address < FLASH_BASE + 0x100000)) {
 80163e4:	687b      	ldr	r3, [r7, #4]
 80163e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80163ea:	d309      	bcc.n	8016400 <GetSector+0x28>
 80163ec:	687b      	ldr	r3, [r7, #4]
 80163ee:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 80163f2:	d205      	bcs.n	8016400 <GetSector+0x28>
		sector = (Address & ~FLASH_BASE) / FLASH_SECTOR_SIZE;
 80163f4:	687b      	ldr	r3, [r7, #4]
 80163f6:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 80163fa:	0b5b      	lsrs	r3, r3, #13
 80163fc:	60fb      	str	r3, [r7, #12]
 80163fe:	e012      	b.n	8016426 <GetSector+0x4e>
	} else if ((Address >= FLASH_BASE + 0x100000)
 8016400:	687b      	ldr	r3, [r7, #4]
 8016402:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 8016406:	d30b      	bcc.n	8016420 <GetSector+0x48>
			&& (Address < FLASH_BASE + 0x200000)) {
 8016408:	687b      	ldr	r3, [r7, #4]
 801640a:	f1b3 6f02 	cmp.w	r3, #136314880	@ 0x8200000
 801640e:	d207      	bcs.n	8016420 <GetSector+0x48>
		sector =
				((Address & ~FLASH_BASE) - 0x100000) / FLASH_SECTOR_SIZE;
 8016410:	687b      	ldr	r3, [r7, #4]
 8016412:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8016416:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
		sector =
 801641a:	0b5b      	lsrs	r3, r3, #13
 801641c:	60fb      	str	r3, [r7, #12]
 801641e:	e002      	b.n	8016426 <GetSector+0x4e>
	} else {
		sector = 0xFFFFFFFF; /* Address out of range */
 8016420:	f04f 33ff 	mov.w	r3, #4294967295
 8016424:	60fb      	str	r3, [r7, #12]
	}

	return sector;
 8016426:	68fb      	ldr	r3, [r7, #12]
}
 8016428:	4618      	mov	r0, r3
 801642a:	3714      	adds	r7, #20
 801642c:	46bd      	mov	sp, r7
 801642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016432:	4770      	bx	lr

08016434 <GetBank>:
/**
 * @brief  Gets the bank of a given address
 * @param  Addr: Address of the FLASH Memory
 * @retval The bank of a given address
 */
uint32_t GetBank(uint32_t Addr) {
 8016434:	b480      	push	{r7}
 8016436:	b085      	sub	sp, #20
 8016438:	af00      	add	r7, sp, #0
 801643a:	6078      	str	r0, [r7, #4]
	uint32_t bank = 0;
 801643c:	2300      	movs	r3, #0
 801643e:	60fb      	str	r3, [r7, #12]

	if (READ_BIT(FLASH->OPTSR_CUR, FLASH_OPTSR_SWAP_BANK) == 0) {
 8016440:	4b0e      	ldr	r3, [pc, #56]	@ (801647c <GetBank+0x48>)
 8016442:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016444:	2b00      	cmp	r3, #0
 8016446:	db09      	blt.n	801645c <GetBank+0x28>
		/* No Bank swap */
		if (Addr < (FLASH_BASE + 0x100000)) {
 8016448:	687b      	ldr	r3, [r7, #4]
 801644a:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 801644e:	d202      	bcs.n	8016456 <GetBank+0x22>
			bank = FLASH_BANK_1;
 8016450:	2301      	movs	r3, #1
 8016452:	60fb      	str	r3, [r7, #12]
 8016454:	e00b      	b.n	801646e <GetBank+0x3a>
		} else {
			bank = FLASH_BANK_2;
 8016456:	2302      	movs	r3, #2
 8016458:	60fb      	str	r3, [r7, #12]
 801645a:	e008      	b.n	801646e <GetBank+0x3a>
		}
	} else {
		/* Bank swap */
		if (Addr < (FLASH_BASE + 0x100000)) {
 801645c:	687b      	ldr	r3, [r7, #4]
 801645e:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 8016462:	d202      	bcs.n	801646a <GetBank+0x36>
			bank = FLASH_BANK_2;
 8016464:	2302      	movs	r3, #2
 8016466:	60fb      	str	r3, [r7, #12]
 8016468:	e001      	b.n	801646e <GetBank+0x3a>
		} else {
			bank = FLASH_BANK_1;
 801646a:	2301      	movs	r3, #1
 801646c:	60fb      	str	r3, [r7, #12]
		}
	}

	return bank;
 801646e:	68fb      	ldr	r3, [r7, #12]
}
 8016470:	4618      	mov	r0, r3
 8016472:	3714      	adds	r7, #20
 8016474:	46bd      	mov	sp, r7
 8016476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801647a:	4770      	bx	lr
 801647c:	40022000 	.word	0x40022000

08016480 <HAL_FLASH_ERASE>:
		}
	}
	return FailCounter;
}

void HAL_FLASH_ERASE(uint32_t FlashEraseAddress) {
 8016480:	b580      	push	{r7, lr}
 8016482:	b082      	sub	sp, #8
 8016484:	af00      	add	r7, sp, #0
 8016486:	6078      	str	r0, [r7, #4]
	// uint32_t SectorError = 0, FirstSector = 0,NbOfSectors = 0, BankNumber = 0;

	FirstSector = GetSector(FlashEraseAddress);
 8016488:	6878      	ldr	r0, [r7, #4]
 801648a:	f7ff ffa5 	bl	80163d8 <GetSector>
 801648e:	4603      	mov	r3, r0
 8016490:	4a24      	ldr	r2, [pc, #144]	@ (8016524 <HAL_FLASH_ERASE+0xa4>)
 8016492:	6013      	str	r3, [r2, #0]
	NbOfSectors = GetSector(FlashEraseAddress) - FirstSector + 1;
 8016494:	6878      	ldr	r0, [r7, #4]
 8016496:	f7ff ff9f 	bl	80163d8 <GetSector>
 801649a:	4602      	mov	r2, r0
 801649c:	4b21      	ldr	r3, [pc, #132]	@ (8016524 <HAL_FLASH_ERASE+0xa4>)
 801649e:	681b      	ldr	r3, [r3, #0]
 80164a0:	1ad3      	subs	r3, r2, r3
 80164a2:	3301      	adds	r3, #1
 80164a4:	4a20      	ldr	r2, [pc, #128]	@ (8016528 <HAL_FLASH_ERASE+0xa8>)
 80164a6:	6013      	str	r3, [r2, #0]
	BankNumber = GetBank(FlashEraseAddress);
 80164a8:	6878      	ldr	r0, [r7, #4]
 80164aa:	f7ff ffc3 	bl	8016434 <GetBank>
 80164ae:	4603      	mov	r3, r0
 80164b0:	4a1e      	ldr	r2, [pc, #120]	@ (801652c <HAL_FLASH_ERASE+0xac>)
 80164b2:	6013      	str	r3, [r2, #0]
	/* Fill EraseInit structure*/
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 80164b4:	4b1e      	ldr	r3, [pc, #120]	@ (8016530 <HAL_FLASH_ERASE+0xb0>)
 80164b6:	2204      	movs	r2, #4
 80164b8:	601a      	str	r2, [r3, #0]
	EraseInitStruct.Banks = BankNumber;
 80164ba:	4b1c      	ldr	r3, [pc, #112]	@ (801652c <HAL_FLASH_ERASE+0xac>)
 80164bc:	681b      	ldr	r3, [r3, #0]
 80164be:	4a1c      	ldr	r2, [pc, #112]	@ (8016530 <HAL_FLASH_ERASE+0xb0>)
 80164c0:	6053      	str	r3, [r2, #4]
	EraseInitStruct.Sector = FirstSector;
 80164c2:	4b18      	ldr	r3, [pc, #96]	@ (8016524 <HAL_FLASH_ERASE+0xa4>)
 80164c4:	681b      	ldr	r3, [r3, #0]
 80164c6:	4a1a      	ldr	r2, [pc, #104]	@ (8016530 <HAL_FLASH_ERASE+0xb0>)
 80164c8:	6093      	str	r3, [r2, #8]
	EraseInitStruct.NbSectors = NbOfSectors;
 80164ca:	4b17      	ldr	r3, [pc, #92]	@ (8016528 <HAL_FLASH_ERASE+0xa8>)
 80164cc:	681b      	ldr	r3, [r3, #0]
 80164ce:	4a18      	ldr	r2, [pc, #96]	@ (8016530 <HAL_FLASH_ERASE+0xb0>)
 80164d0:	60d3      	str	r3, [r2, #12]
	HAL_FLASH_Unlock();
 80164d2:	f7f4 fe0d 	bl	800b0f0 <HAL_FLASH_Unlock>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 80164d6:	4b17      	ldr	r3, [pc, #92]	@ (8016534 <HAL_FLASH_ERASE+0xb4>)
 80164d8:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80164dc:	4a15      	ldr	r2, [pc, #84]	@ (8016534 <HAL_FLASH_ERASE+0xb4>)
 80164de:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80164e2:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
 80164e6:	4b13      	ldr	r3, [pc, #76]	@ (8016534 <HAL_FLASH_ERASE+0xb4>)
 80164e8:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80164ec:	4a11      	ldr	r2, [pc, #68]	@ (8016534 <HAL_FLASH_ERASE+0xb4>)
 80164ee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80164f2:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 80164f6:	4b0f      	ldr	r3, [pc, #60]	@ (8016534 <HAL_FLASH_ERASE+0xb4>)
 80164f8:	f44f 027e 	mov.w	r2, #16646144	@ 0xfe0000
 80164fc:	631a      	str	r2, [r3, #48]	@ 0x30
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError) != HAL_OK) {
 80164fe:	490e      	ldr	r1, [pc, #56]	@ (8016538 <HAL_FLASH_ERASE+0xb8>)
 8016500:	480b      	ldr	r0, [pc, #44]	@ (8016530 <HAL_FLASH_ERASE+0xb0>)
 8016502:	f7f4 ff61 	bl	800b3c8 <HAL_FLASHEx_Erase>
 8016506:	4603      	mov	r3, r0
 8016508:	2b00      	cmp	r3, #0
 801650a:	d001      	beq.n	8016510 <HAL_FLASH_ERASE+0x90>
		Error_Handler();
 801650c:	f7ee f937 	bl	800477e <Error_Handler>
	}
	FLASH_WaitForLastOperation((uint32_t) FLASH_TIMEOUT_VALUE);
 8016510:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8016514:	f7f4 fe68 	bl	800b1e8 <FLASH_WaitForLastOperation>
	HAL_FLASH_Lock();
 8016518:	f7f4 fe10 	bl	800b13c <HAL_FLASH_Lock>
}
 801651c:	bf00      	nop
 801651e:	3708      	adds	r7, #8
 8016520:	46bd      	mov	sp, r7
 8016522:	bd80      	pop	{r7, pc}
 8016524:	20014a30 	.word	0x20014a30
 8016528:	20014a34 	.word	0x20014a34
 801652c:	20014a38 	.word	0x20014a38
 8016530:	20014a44 	.word	0x20014a44
 8016534:	40022000 	.word	0x40022000
 8016538:	20014a3c 	.word	0x20014a3c

0801653c <HAL_FLASH_Write_Buff>:

void HAL_FLASH_Write_Buff(uint32_t FlashAddress, uint8_t *Data,
		uint32_t DataSize) {
 801653c:	b580      	push	{r7, lr}
 801653e:	b08c      	sub	sp, #48	@ 0x30
 8016540:	af00      	add	r7, sp, #0
 8016542:	60f8      	str	r0, [r7, #12]
 8016544:	60b9      	str	r1, [r7, #8]
 8016546:	607a      	str	r2, [r7, #4]
	uint32_t LoopCnt = DataSize / 16; // Calculate the number of sets of 4 quad-words
 8016548:	687b      	ldr	r3, [r7, #4]
 801654a:	091b      	lsrs	r3, r3, #4
 801654c:	627b      	str	r3, [r7, #36]	@ 0x24
	uint64_t FlashData[2] = { 0 }; // Allocate memory for FlashData array
 801654e:	f107 0310 	add.w	r3, r7, #16
 8016552:	2200      	movs	r2, #0
 8016554:	601a      	str	r2, [r3, #0]
 8016556:	605a      	str	r2, [r3, #4]
 8016558:	609a      	str	r2, [r3, #8]
 801655a:	60da      	str	r2, [r3, #12]
	// Unlock flash memory before writing
	HAL_FLASH_Unlock();
 801655c:	f7f4 fdc8 	bl	800b0f0 <HAL_FLASH_Unlock>

	for (int l = 0; l < LoopCnt; l++) {
 8016560:	2300      	movs	r3, #0
 8016562:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016564:	e026      	b.n	80165b4 <HAL_FLASH_Write_Buff+0x78>
		// Copy 8 bytes at a time from Data to FlashData
		for (int j = 0; j < 2; j++) {
 8016566:	2300      	movs	r3, #0
 8016568:	62bb      	str	r3, [r7, #40]	@ 0x28
 801656a:	e013      	b.n	8016594 <HAL_FLASH_Write_Buff+0x58>

			memcpy(&FlashData[j], &Data[((l * 16) + (j * 8))], 8);
 801656c:	f107 0210 	add.w	r2, r7, #16
 8016570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016572:	00db      	lsls	r3, r3, #3
 8016574:	18d0      	adds	r0, r2, r3
 8016576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016578:	005a      	lsls	r2, r3, #1
 801657a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801657c:	4413      	add	r3, r2
 801657e:	00db      	lsls	r3, r3, #3
 8016580:	461a      	mov	r2, r3
 8016582:	68bb      	ldr	r3, [r7, #8]
 8016584:	4413      	add	r3, r2
 8016586:	2208      	movs	r2, #8
 8016588:	4619      	mov	r1, r3
 801658a:	f008 fdc4 	bl	801f116 <memcpy>
		for (int j = 0; j < 2; j++) {
 801658e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016590:	3301      	adds	r3, #1
 8016592:	62bb      	str	r3, [r7, #40]	@ 0x28
 8016594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016596:	2b01      	cmp	r3, #1
 8016598:	dde8      	ble.n	801656c <HAL_FLASH_Write_Buff+0x30>

		}
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_QUADWORD, FlashAddress, FlashData);
 801659a:	f107 0310 	add.w	r3, r7, #16
 801659e:	461a      	mov	r2, r3
 80165a0:	68f9      	ldr	r1, [r7, #12]
 80165a2:	2002      	movs	r0, #2
 80165a4:	f7f4 fd2c 	bl	800b000 <HAL_FLASH_Program>

		// Increment address for the next set of quad-words
		FlashAddress += 16; // Increment by 32 bytes (4 quad-words)
 80165a8:	68fb      	ldr	r3, [r7, #12]
 80165aa:	3310      	adds	r3, #16
 80165ac:	60fb      	str	r3, [r7, #12]
	for (int l = 0; l < LoopCnt; l++) {
 80165ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80165b0:	3301      	adds	r3, #1
 80165b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80165b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80165b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80165b8:	429a      	cmp	r2, r3
 80165ba:	d8d4      	bhi.n	8016566 <HAL_FLASH_Write_Buff+0x2a>

	}

	// Lock flash memory after writing
	HAL_FLASH_Lock();
 80165bc:	f7f4 fdbe 	bl	800b13c <HAL_FLASH_Lock>
}
 80165c0:	bf00      	nop
 80165c2:	3730      	adds	r7, #48	@ 0x30
 80165c4:	46bd      	mov	sp, r7
 80165c6:	bd80      	pop	{r7, pc}

080165c8 <Erase_sectors>:


void Erase_sectors(uint32_t FlashAddress) {
 80165c8:	b580      	push	{r7, lr}
 80165ca:	b086      	sub	sp, #24
 80165cc:	af00      	add	r7, sp, #0
 80165ce:	6078      	str	r0, [r7, #4]
	uint32_t start_sector_address = FlashAddress;
 80165d0:	687b      	ldr	r3, [r7, #4]
 80165d2:	60fb      	str	r3, [r7, #12]
	uint32_t end_sector;

	// Determine the end sector based on FlashAddress
	if (FlashAddress == L2) {
 80165d4:	4b14      	ldr	r3, [pc, #80]	@ (8016628 <Erase_sectors+0x60>)
 80165d6:	681b      	ldr	r3, [r3, #0]
 80165d8:	461a      	mov	r2, r3
 80165da:	687b      	ldr	r3, [r7, #4]
 80165dc:	4293      	cmp	r3, r2
 80165de:	d104      	bne.n	80165ea <Erase_sectors+0x22>
		end_sector = start_sector_address + (31 * FLASH_SECTOR_SIZE); // 32 sectors
 80165e0:	68fb      	ldr	r3, [r7, #12]
 80165e2:	f503 3378 	add.w	r3, r3, #253952	@ 0x3e000
 80165e6:	617b      	str	r3, [r7, #20]
 80165e8:	e00d      	b.n	8016606 <Erase_sectors+0x3e>
	} else if (FlashAddress == L3) {
 80165ea:	4b10      	ldr	r3, [pc, #64]	@ (801662c <Erase_sectors+0x64>)
 80165ec:	681b      	ldr	r3, [r3, #0]
 80165ee:	461a      	mov	r2, r3
 80165f0:	687b      	ldr	r3, [r7, #4]
 80165f2:	4293      	cmp	r3, r2
 80165f4:	d104      	bne.n	8016600 <Erase_sectors+0x38>
		end_sector = start_sector_address + (31 * FLASH_SECTOR_SIZE); // 32 sectors
 80165f6:	68fb      	ldr	r3, [r7, #12]
 80165f8:	f503 3378 	add.w	r3, r3, #253952	@ 0x3e000
 80165fc:	617b      	str	r3, [r7, #20]
 80165fe:	e002      	b.n	8016606 <Erase_sectors+0x3e>
	} else {
		// Handle invalid FlashAddress
		Error_Handler();
 8016600:	f7ee f8bd 	bl	800477e <Error_Handler>
		return;
 8016604:	e00d      	b.n	8016622 <Erase_sectors+0x5a>
	}
	// Iterate over sectors to erase
	for (uint32_t sector_address = start_sector_address;
 8016606:	68fb      	ldr	r3, [r7, #12]
 8016608:	613b      	str	r3, [r7, #16]
 801660a:	e006      	b.n	801661a <Erase_sectors+0x52>
			sector_address <= end_sector; sector_address += FLASH_SECTOR_SIZE) {
		HAL_FLASH_ERASE(sector_address); // Erase the sector
 801660c:	6938      	ldr	r0, [r7, #16]
 801660e:	f7ff ff37 	bl	8016480 <HAL_FLASH_ERASE>
			sector_address <= end_sector; sector_address += FLASH_SECTOR_SIZE) {
 8016612:	693b      	ldr	r3, [r7, #16]
 8016614:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8016618:	613b      	str	r3, [r7, #16]
 801661a:	693a      	ldr	r2, [r7, #16]
 801661c:	697b      	ldr	r3, [r7, #20]
 801661e:	429a      	cmp	r2, r3
 8016620:	d9f4      	bls.n	801660c <Erase_sectors+0x44>
	}
}
 8016622:	3718      	adds	r7, #24
 8016624:	46bd      	mov	sp, r7
 8016626:	bd80      	pop	{r7, pc}
 8016628:	2000006c 	.word	0x2000006c
 801662c:	20000070 	.word	0x20000070

08016630 <FLASH_Read_Buff>:

int FLASH_Read_Buff(uint32_t Read_Address, char Read_Buff[],
		uint32_t ReadDataSize) {
 8016630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016632:	b089      	sub	sp, #36	@ 0x24
 8016634:	af00      	add	r7, sp, #0
 8016636:	60f8      	str	r0, [r7, #12]
 8016638:	60b9      	str	r1, [r7, #8]
 801663a:	607a      	str	r2, [r7, #4]
	memset(Read_Buff, 0, sizeof(Read_Buff));
 801663c:	2204      	movs	r2, #4
 801663e:	2100      	movs	r1, #0
 8016640:	68b8      	ldr	r0, [r7, #8]
 8016642:	f008 fbf5 	bl	801ee30 <memset>
	for (uint8_t i = 0; i < ReadDataSize; i++) {
 8016646:	2300      	movs	r3, #0
 8016648:	77fb      	strb	r3, [r7, #31]
 801664a:	e030      	b.n	80166ae <FLASH_Read_Buff+0x7e>
		uint64_t FlashData = (*(__IO uint64_t*) Read_Address);
 801664c:	68fb      	ldr	r3, [r7, #12]
 801664e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016652:	e9c7 2304 	strd	r2, r3, [r7, #16]
		for (uint8_t j = 0; j < 8; j++) {
 8016656:	2300      	movs	r3, #0
 8016658:	77bb      	strb	r3, [r7, #30]
 801665a:	e01c      	b.n	8016696 <FLASH_Read_Buff+0x66>
			Read_Buff[i + j] = ((FlashData >> (j * 8)) & 0xFF);
 801665c:	7fbb      	ldrb	r3, [r7, #30]
 801665e:	00d9      	lsls	r1, r3, #3
 8016660:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8016664:	f1c1 0620 	rsb	r6, r1, #32
 8016668:	f1a1 0020 	sub.w	r0, r1, #32
 801666c:	fa22 f401 	lsr.w	r4, r2, r1
 8016670:	fa03 f606 	lsl.w	r6, r3, r6
 8016674:	4334      	orrs	r4, r6
 8016676:	fa23 f000 	lsr.w	r0, r3, r0
 801667a:	4304      	orrs	r4, r0
 801667c:	fa23 f501 	lsr.w	r5, r3, r1
 8016680:	7ffa      	ldrb	r2, [r7, #31]
 8016682:	7fbb      	ldrb	r3, [r7, #30]
 8016684:	4413      	add	r3, r2
 8016686:	461a      	mov	r2, r3
 8016688:	68bb      	ldr	r3, [r7, #8]
 801668a:	4413      	add	r3, r2
 801668c:	b2e2      	uxtb	r2, r4
 801668e:	701a      	strb	r2, [r3, #0]
		for (uint8_t j = 0; j < 8; j++) {
 8016690:	7fbb      	ldrb	r3, [r7, #30]
 8016692:	3301      	adds	r3, #1
 8016694:	77bb      	strb	r3, [r7, #30]
 8016696:	7fbb      	ldrb	r3, [r7, #30]
 8016698:	2b07      	cmp	r3, #7
 801669a:	d9df      	bls.n	801665c <FLASH_Read_Buff+0x2c>
		}
		i += 7;
 801669c:	7ffb      	ldrb	r3, [r7, #31]
 801669e:	3307      	adds	r3, #7
 80166a0:	77fb      	strb	r3, [r7, #31]
		Read_Address += 8;
 80166a2:	68fb      	ldr	r3, [r7, #12]
 80166a4:	3308      	adds	r3, #8
 80166a6:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < ReadDataSize; i++) {
 80166a8:	7ffb      	ldrb	r3, [r7, #31]
 80166aa:	3301      	adds	r3, #1
 80166ac:	77fb      	strb	r3, [r7, #31]
 80166ae:	7ffb      	ldrb	r3, [r7, #31]
 80166b0:	687a      	ldr	r2, [r7, #4]
 80166b2:	429a      	cmp	r2, r3
 80166b4:	d8ca      	bhi.n	801664c <FLASH_Read_Buff+0x1c>
	}
	return 0;
 80166b6:	2300      	movs	r3, #0
}
 80166b8:	4618      	mov	r0, r3
 80166ba:	3724      	adds	r7, #36	@ 0x24
 80166bc:	46bd      	mov	sp, r7
 80166be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080166c0 <WriteF_SKey>:

void WriteF_SKey() {
 80166c0:	b580      	push	{r7, lr}
 80166c2:	b084      	sub	sp, #16
 80166c4:	af00      	add	r7, sp, #0
	HAL_FLASH_ERASE(Config_Data);
 80166c6:	4817      	ldr	r0, [pc, #92]	@ (8016724 <WriteF_SKey+0x64>)
 80166c8:	f7ff feda 	bl	8016480 <HAL_FLASH_ERASE>
	uint32_t KAddr = S_Key_ADDR;
 80166cc:	4b16      	ldr	r3, [pc, #88]	@ (8016728 <WriteF_SKey+0x68>)
 80166ce:	60fb      	str	r3, [r7, #12]
	for (int a = 0; a < 3; a++) {
 80166d0:	2300      	movs	r3, #0
 80166d2:	60bb      	str	r3, [r7, #8]
 80166d4:	e010      	b.n	80166f8 <WriteF_SKey+0x38>
		HAL_FLASH_Write_Buff(KAddr, (uint32_t*) &StatKeys[a],
 80166d6:	68ba      	ldr	r2, [r7, #8]
 80166d8:	4613      	mov	r3, r2
 80166da:	015b      	lsls	r3, r3, #5
 80166dc:	4413      	add	r3, r2
 80166de:	4a13      	ldr	r2, [pc, #76]	@ (801672c <WriteF_SKey+0x6c>)
 80166e0:	4413      	add	r3, r2
 80166e2:	2221      	movs	r2, #33	@ 0x21
 80166e4:	4619      	mov	r1, r3
 80166e6:	68f8      	ldr	r0, [r7, #12]
 80166e8:	f7ff ff28 	bl	801653c <HAL_FLASH_Write_Buff>
				sizeof(StatKeys[a]));
		KAddr += 32;
 80166ec:	68fb      	ldr	r3, [r7, #12]
 80166ee:	3320      	adds	r3, #32
 80166f0:	60fb      	str	r3, [r7, #12]
	for (int a = 0; a < 3; a++) {
 80166f2:	68bb      	ldr	r3, [r7, #8]
 80166f4:	3301      	adds	r3, #1
 80166f6:	60bb      	str	r3, [r7, #8]
 80166f8:	68bb      	ldr	r3, [r7, #8]
 80166fa:	2b02      	cmp	r3, #2
 80166fc:	ddeb      	ble.n	80166d6 <WriteF_SKey+0x16>
	}
	for (int a = 1; a <= 3; a++)
 80166fe:	2301      	movs	r3, #1
 8016700:	607b      	str	r3, [r7, #4]
 8016702:	e006      	b.n	8016712 <WriteF_SKey+0x52>
		ReadF_Loc(1, a);
 8016704:	6879      	ldr	r1, [r7, #4]
 8016706:	2001      	movs	r0, #1
 8016708:	f004 f92e 	bl	801a968 <ReadF_Loc>
	for (int a = 1; a <= 3; a++)
 801670c:	687b      	ldr	r3, [r7, #4]
 801670e:	3301      	adds	r3, #1
 8016710:	607b      	str	r3, [r7, #4]
 8016712:	687b      	ldr	r3, [r7, #4]
 8016714:	2b03      	cmp	r3, #3
 8016716:	ddf5      	ble.n	8016704 <WriteF_SKey+0x44>
}
 8016718:	bf00      	nop
 801671a:	bf00      	nop
 801671c:	3710      	adds	r7, #16
 801671e:	46bd      	mov	sp, r7
 8016720:	bd80      	pop	{r7, pc}
 8016722:	bf00      	nop
 8016724:	08166000 	.word	0x08166000
 8016728:	08166010 	.word	0x08166010
 801672c:	20014a68 	.word	0x20014a68

08016730 <WriteF_CKey>:
void WriteF_CKey() {
 8016730:	b580      	push	{r7, lr}
 8016732:	b084      	sub	sp, #16
 8016734:	af00      	add	r7, sp, #0

	uint32_t KAddr = C_Key_ADDR;
 8016736:	4b15      	ldr	r3, [pc, #84]	@ (801678c <WriteF_CKey+0x5c>)
 8016738:	60fb      	str	r3, [r7, #12]
//		HAL_FLASH_ERASE(KAddr);
	for (int a = 0; a < 8; a++) {
 801673a:	2300      	movs	r3, #0
 801673c:	60bb      	str	r3, [r7, #8]
 801673e:	e010      	b.n	8016762 <WriteF_CKey+0x32>
		HAL_FLASH_Write_Buff(KAddr, (uint32_t*) &ComKeys[a],
 8016740:	68ba      	ldr	r2, [r7, #8]
 8016742:	4613      	mov	r3, r2
 8016744:	015b      	lsls	r3, r3, #5
 8016746:	4413      	add	r3, r2
 8016748:	4a11      	ldr	r2, [pc, #68]	@ (8016790 <WriteF_CKey+0x60>)
 801674a:	4413      	add	r3, r2
 801674c:	2221      	movs	r2, #33	@ 0x21
 801674e:	4619      	mov	r1, r3
 8016750:	68f8      	ldr	r0, [r7, #12]
 8016752:	f7ff fef3 	bl	801653c <HAL_FLASH_Write_Buff>
				sizeof(ComKeys[a]));
		KAddr += 32;
 8016756:	68fb      	ldr	r3, [r7, #12]
 8016758:	3320      	adds	r3, #32
 801675a:	60fb      	str	r3, [r7, #12]
	for (int a = 0; a < 8; a++) {
 801675c:	68bb      	ldr	r3, [r7, #8]
 801675e:	3301      	adds	r3, #1
 8016760:	60bb      	str	r3, [r7, #8]
 8016762:	68bb      	ldr	r3, [r7, #8]
 8016764:	2b07      	cmp	r3, #7
 8016766:	ddeb      	ble.n	8016740 <WriteF_CKey+0x10>
	}
	for (int a = 1; a <= 8; a++)
 8016768:	2301      	movs	r3, #1
 801676a:	607b      	str	r3, [r7, #4]
 801676c:	e006      	b.n	801677c <WriteF_CKey+0x4c>
		ReadF_Loc(2, a);
 801676e:	6879      	ldr	r1, [r7, #4]
 8016770:	2002      	movs	r0, #2
 8016772:	f004 f8f9 	bl	801a968 <ReadF_Loc>
	for (int a = 1; a <= 8; a++)
 8016776:	687b      	ldr	r3, [r7, #4]
 8016778:	3301      	adds	r3, #1
 801677a:	607b      	str	r3, [r7, #4]
 801677c:	687b      	ldr	r3, [r7, #4]
 801677e:	2b08      	cmp	r3, #8
 8016780:	ddf5      	ble.n	801676e <WriteF_CKey+0x3e>

}
 8016782:	bf00      	nop
 8016784:	bf00      	nop
 8016786:	3710      	adds	r7, #16
 8016788:	46bd      	mov	sp, r7
 801678a:	bd80      	pop	{r7, pc}
 801678c:	08166080 	.word	0x08166080
 8016790:	20014acc 	.word	0x20014acc

08016794 <writeF_CP>:

void writeF_CP(uint64_t CData, uint64_t CData2, uint64_t DData3) {
 8016794:	b580      	push	{r7, lr}
 8016796:	b088      	sub	sp, #32
 8016798:	af00      	add	r7, sp, #0
 801679a:	e9c7 0102 	strd	r0, r1, [r7, #8]
 801679e:	e9c7 2300 	strd	r2, r3, [r7]
	HAL_FLASH_ERASE(Current_App_LOC);
 80167a2:	4816      	ldr	r0, [pc, #88]	@ (80167fc <writeF_CP+0x68>)
 80167a4:	f7ff fe6c 	bl	8016480 <HAL_FLASH_ERASE>
	uint32_t KAddr = Current_App_LOC;
 80167a8:	4b14      	ldr	r3, [pc, #80]	@ (80167fc <writeF_CP+0x68>)
 80167aa:	61fb      	str	r3, [r7, #28]
	uint32_t Kaddr2 = Current_App_LOC +16;
 80167ac:	4b14      	ldr	r3, [pc, #80]	@ (8016800 <writeF_CP+0x6c>)
 80167ae:	61bb      	str	r3, [r7, #24]
	uint32_t PHadr = Current_App_LOC +32;
 80167b0:	4b14      	ldr	r3, [pc, #80]	@ (8016804 <writeF_CP+0x70>)
 80167b2:	617b      	str	r3, [r7, #20]
	HAL_FLASH_Unlock();
 80167b4:	f7f4 fc9c 	bl	800b0f0 <HAL_FLASH_Unlock>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_QUADWORD, KAddr, &CData);
 80167b8:	f107 0308 	add.w	r3, r7, #8
 80167bc:	461a      	mov	r2, r3
 80167be:	69f9      	ldr	r1, [r7, #28]
 80167c0:	2002      	movs	r0, #2
 80167c2:	f7f4 fc1d 	bl	800b000 <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 80167c6:	f7f4 fcb9 	bl	800b13c <HAL_FLASH_Lock>
	HAL_FLASH_Unlock();
 80167ca:	f7f4 fc91 	bl	800b0f0 <HAL_FLASH_Unlock>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_QUADWORD, Kaddr2, &CData2);
 80167ce:	463b      	mov	r3, r7
 80167d0:	461a      	mov	r2, r3
 80167d2:	69b9      	ldr	r1, [r7, #24]
 80167d4:	2002      	movs	r0, #2
 80167d6:	f7f4 fc13 	bl	800b000 <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 80167da:	f7f4 fcaf 	bl	800b13c <HAL_FLASH_Lock>
	HAL_FLASH_Unlock();
 80167de:	f7f4 fc87 	bl	800b0f0 <HAL_FLASH_Unlock>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_QUADWORD, PHadr, &DData3);
 80167e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80167e6:	461a      	mov	r2, r3
 80167e8:	6979      	ldr	r1, [r7, #20]
 80167ea:	2002      	movs	r0, #2
 80167ec:	f7f4 fc08 	bl	800b000 <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 80167f0:	f7f4 fca4 	bl	800b13c <HAL_FLASH_Lock>


}
 80167f4:	bf00      	nop
 80167f6:	3720      	adds	r7, #32
 80167f8:	46bd      	mov	sp, r7
 80167fa:	bd80      	pop	{r7, pc}
 80167fc:	08168000 	.word	0x08168000
 8016800:	08168010 	.word	0x08168010
 8016804:	08168020 	.word	0x08168020

08016808 <ReadF_sKey>:
	HAL_FLASH_Unlock();
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_QUADWORD, Last_App_ver_Addr, Ver_buff);
	HAL_FLASH_Lock();
}

void ReadF_sKey(int KeyNumber) {
 8016808:	b4f0      	push	{r4, r5, r6, r7}
 801680a:	b08e      	sub	sp, #56	@ 0x38
 801680c:	af00      	add	r7, sp, #0
 801680e:	6078      	str	r0, [r7, #4]
	FlashAddress = (uint32_t) S_Key_ADDR + (32 * (KeyNumber - 1));
 8016810:	6879      	ldr	r1, [r7, #4]
 8016812:	3901      	subs	r1, #1
 8016814:	0149      	lsls	r1, r1, #5
 8016816:	4608      	mov	r0, r1
 8016818:	492e      	ldr	r1, [pc, #184]	@ (80168d4 <ReadF_sKey+0xcc>)
 801681a:	4401      	add	r1, r0
 801681c:	4608      	mov	r0, r1
 801681e:	492e      	ldr	r1, [pc, #184]	@ (80168d8 <ReadF_sKey+0xd0>)
 8016820:	6008      	str	r0, [r1, #0]
	uint8_t SKeyRbuff[32] = { 0 };
 8016822:	2100      	movs	r1, #0
 8016824:	60b9      	str	r1, [r7, #8]
 8016826:	f107 010c 	add.w	r1, r7, #12
 801682a:	2000      	movs	r0, #0
 801682c:	6008      	str	r0, [r1, #0]
 801682e:	6048      	str	r0, [r1, #4]
 8016830:	6088      	str	r0, [r1, #8]
 8016832:	60c8      	str	r0, [r1, #12]
 8016834:	6108      	str	r0, [r1, #16]
 8016836:	6148      	str	r0, [r1, #20]
 8016838:	6188      	str	r0, [r1, #24]

	for (uint8_t i = 0; i < 32; i++) {
 801683a:	2100      	movs	r1, #0
 801683c:	f887 1037 	strb.w	r1, [r7, #55]	@ 0x37
 8016840:	e03e      	b.n	80168c0 <ReadF_sKey+0xb8>
		uint64_t FlashData = (*(__IO uint64_t*) FlashAddress);
 8016842:	4925      	ldr	r1, [pc, #148]	@ (80168d8 <ReadF_sKey+0xd0>)
 8016844:	6809      	ldr	r1, [r1, #0]
 8016846:	e9d1 0100 	ldrd	r0, r1, [r1]
 801684a:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
		for (uint8_t j = 0; j < 8; j++) {
 801684e:	2100      	movs	r1, #0
 8016850:	f887 1036 	strb.w	r1, [r7, #54]	@ 0x36
 8016854:	e021      	b.n	801689a <ReadF_sKey+0x92>
			SKeyRbuff[i + j] = ((FlashData >> (j * 8)) & 0xFF);
 8016856:	f897 1036 	ldrb.w	r1, [r7, #54]	@ 0x36
 801685a:	00cc      	lsls	r4, r1, #3
 801685c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8016860:	f1c4 0620 	rsb	r6, r4, #32
 8016864:	f1a4 0520 	sub.w	r5, r4, #32
 8016868:	fa20 f204 	lsr.w	r2, r0, r4
 801686c:	fa01 f606 	lsl.w	r6, r1, r6
 8016870:	4332      	orrs	r2, r6
 8016872:	fa21 f505 	lsr.w	r5, r1, r5
 8016876:	432a      	orrs	r2, r5
 8016878:	fa21 f304 	lsr.w	r3, r1, r4
 801687c:	f897 0037 	ldrb.w	r0, [r7, #55]	@ 0x37
 8016880:	f897 1036 	ldrb.w	r1, [r7, #54]	@ 0x36
 8016884:	4401      	add	r1, r0
 8016886:	b2d0      	uxtb	r0, r2
 8016888:	3138      	adds	r1, #56	@ 0x38
 801688a:	4439      	add	r1, r7
 801688c:	f801 0c30 	strb.w	r0, [r1, #-48]
		for (uint8_t j = 0; j < 8; j++) {
 8016890:	f897 1036 	ldrb.w	r1, [r7, #54]	@ 0x36
 8016894:	3101      	adds	r1, #1
 8016896:	f887 1036 	strb.w	r1, [r7, #54]	@ 0x36
 801689a:	f897 1036 	ldrb.w	r1, [r7, #54]	@ 0x36
 801689e:	2907      	cmp	r1, #7
 80168a0:	d9d9      	bls.n	8016856 <ReadF_sKey+0x4e>
		}
		i += 7;
 80168a2:	f897 1037 	ldrb.w	r1, [r7, #55]	@ 0x37
 80168a6:	3107      	adds	r1, #7
 80168a8:	f887 1037 	strb.w	r1, [r7, #55]	@ 0x37
		FlashAddress += 8;
 80168ac:	490a      	ldr	r1, [pc, #40]	@ (80168d8 <ReadF_sKey+0xd0>)
 80168ae:	6809      	ldr	r1, [r1, #0]
 80168b0:	3108      	adds	r1, #8
 80168b2:	4809      	ldr	r0, [pc, #36]	@ (80168d8 <ReadF_sKey+0xd0>)
 80168b4:	6001      	str	r1, [r0, #0]
	for (uint8_t i = 0; i < 32; i++) {
 80168b6:	f897 1037 	ldrb.w	r1, [r7, #55]	@ 0x37
 80168ba:	3101      	adds	r1, #1
 80168bc:	f887 1037 	strb.w	r1, [r7, #55]	@ 0x37
 80168c0:	f897 1037 	ldrb.w	r1, [r7, #55]	@ 0x37
 80168c4:	291f      	cmp	r1, #31
 80168c6:	d9bc      	bls.n	8016842 <ReadF_sKey+0x3a>
//	    printf("Static Key %d: ", KeyNumber);
//	    for (uint8_t i = 0; i < 32; i++) {
//	        printf("%02X ", SKeyRbuff[i]); // Print each byte as hexadecimal
//	    }
//	    printf("\r\n");
}
 80168c8:	bf00      	nop
 80168ca:	bf00      	nop
 80168cc:	3738      	adds	r7, #56	@ 0x38
 80168ce:	46bd      	mov	sp, r7
 80168d0:	bcf0      	pop	{r4, r5, r6, r7}
 80168d2:	4770      	bx	lr
 80168d4:	08166010 	.word	0x08166010
 80168d8:	20014a40 	.word	0x20014a40

080168dc <ReadF_cKey>:

void ReadF_cKey(int KeyNumber) {
 80168dc:	b4f0      	push	{r4, r5, r6, r7}
 80168de:	b08e      	sub	sp, #56	@ 0x38
 80168e0:	af00      	add	r7, sp, #0
 80168e2:	6078      	str	r0, [r7, #4]
	FlashAddress = (uint32_t) C_Key_ADDR + (32 * (KeyNumber - 1));
 80168e4:	6879      	ldr	r1, [r7, #4]
 80168e6:	3901      	subs	r1, #1
 80168e8:	0149      	lsls	r1, r1, #5
 80168ea:	4608      	mov	r0, r1
 80168ec:	4938      	ldr	r1, [pc, #224]	@ (80169d0 <ReadF_cKey+0xf4>)
 80168ee:	4401      	add	r1, r0
 80168f0:	4608      	mov	r0, r1
 80168f2:	4938      	ldr	r1, [pc, #224]	@ (80169d4 <ReadF_cKey+0xf8>)
 80168f4:	6008      	str	r0, [r1, #0]
	uint8_t CKeyRbuff[32] = { 0 };
 80168f6:	2100      	movs	r1, #0
 80168f8:	60b9      	str	r1, [r7, #8]
 80168fa:	f107 010c 	add.w	r1, r7, #12
 80168fe:	2000      	movs	r0, #0
 8016900:	6008      	str	r0, [r1, #0]
 8016902:	6048      	str	r0, [r1, #4]
 8016904:	6088      	str	r0, [r1, #8]
 8016906:	60c8      	str	r0, [r1, #12]
 8016908:	6108      	str	r0, [r1, #16]
 801690a:	6148      	str	r0, [r1, #20]
 801690c:	6188      	str	r0, [r1, #24]

	for (uint8_t i = 0; i < 32; i++) {
 801690e:	2100      	movs	r1, #0
 8016910:	f887 1037 	strb.w	r1, [r7, #55]	@ 0x37
 8016914:	e03e      	b.n	8016994 <ReadF_cKey+0xb8>
		uint64_t FlashData = (*(__IO uint64_t*) FlashAddress);
 8016916:	492f      	ldr	r1, [pc, #188]	@ (80169d4 <ReadF_cKey+0xf8>)
 8016918:	6809      	ldr	r1, [r1, #0]
 801691a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801691e:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
		for (uint8_t j = 0; j < 8; j++) {
 8016922:	2100      	movs	r1, #0
 8016924:	f887 1036 	strb.w	r1, [r7, #54]	@ 0x36
 8016928:	e021      	b.n	801696e <ReadF_cKey+0x92>
			CKeyRbuff[i + j] = ((FlashData >> (j * 8)) & 0xFF);
 801692a:	f897 1036 	ldrb.w	r1, [r7, #54]	@ 0x36
 801692e:	00cc      	lsls	r4, r1, #3
 8016930:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8016934:	f1c4 0620 	rsb	r6, r4, #32
 8016938:	f1a4 0520 	sub.w	r5, r4, #32
 801693c:	fa20 f204 	lsr.w	r2, r0, r4
 8016940:	fa01 f606 	lsl.w	r6, r1, r6
 8016944:	4332      	orrs	r2, r6
 8016946:	fa21 f505 	lsr.w	r5, r1, r5
 801694a:	432a      	orrs	r2, r5
 801694c:	fa21 f304 	lsr.w	r3, r1, r4
 8016950:	f897 0037 	ldrb.w	r0, [r7, #55]	@ 0x37
 8016954:	f897 1036 	ldrb.w	r1, [r7, #54]	@ 0x36
 8016958:	4401      	add	r1, r0
 801695a:	b2d0      	uxtb	r0, r2
 801695c:	3138      	adds	r1, #56	@ 0x38
 801695e:	4439      	add	r1, r7
 8016960:	f801 0c30 	strb.w	r0, [r1, #-48]
		for (uint8_t j = 0; j < 8; j++) {
 8016964:	f897 1036 	ldrb.w	r1, [r7, #54]	@ 0x36
 8016968:	3101      	adds	r1, #1
 801696a:	f887 1036 	strb.w	r1, [r7, #54]	@ 0x36
 801696e:	f897 1036 	ldrb.w	r1, [r7, #54]	@ 0x36
 8016972:	2907      	cmp	r1, #7
 8016974:	d9d9      	bls.n	801692a <ReadF_cKey+0x4e>
		}
		i += 7;
 8016976:	f897 1037 	ldrb.w	r1, [r7, #55]	@ 0x37
 801697a:	3107      	adds	r1, #7
 801697c:	f887 1037 	strb.w	r1, [r7, #55]	@ 0x37
		FlashAddress += 8;
 8016980:	4914      	ldr	r1, [pc, #80]	@ (80169d4 <ReadF_cKey+0xf8>)
 8016982:	6809      	ldr	r1, [r1, #0]
 8016984:	3108      	adds	r1, #8
 8016986:	4813      	ldr	r0, [pc, #76]	@ (80169d4 <ReadF_cKey+0xf8>)
 8016988:	6001      	str	r1, [r0, #0]
	for (uint8_t i = 0; i < 32; i++) {
 801698a:	f897 1037 	ldrb.w	r1, [r7, #55]	@ 0x37
 801698e:	3101      	adds	r1, #1
 8016990:	f887 1037 	strb.w	r1, [r7, #55]	@ 0x37
 8016994:	f897 1037 	ldrb.w	r1, [r7, #55]	@ 0x37
 8016998:	291f      	cmp	r1, #31
 801699a:	d9bc      	bls.n	8016916 <ReadF_cKey+0x3a>
	}
	memcpy(ComKeys[KeyNumber - 1],CKeyRbuff,sizeof(CKeyRbuff));
 801699c:	687b      	ldr	r3, [r7, #4]
 801699e:	1e5a      	subs	r2, r3, #1
 80169a0:	4613      	mov	r3, r2
 80169a2:	015b      	lsls	r3, r3, #5
 80169a4:	4413      	add	r3, r2
 80169a6:	4a0c      	ldr	r2, [pc, #48]	@ (80169d8 <ReadF_cKey+0xfc>)
 80169a8:	4413      	add	r3, r2
 80169aa:	461d      	mov	r5, r3
 80169ac:	f107 0408 	add.w	r4, r7, #8
 80169b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80169b2:	6028      	str	r0, [r5, #0]
 80169b4:	6069      	str	r1, [r5, #4]
 80169b6:	60aa      	str	r2, [r5, #8]
 80169b8:	60eb      	str	r3, [r5, #12]
 80169ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80169bc:	6128      	str	r0, [r5, #16]
 80169be:	6169      	str	r1, [r5, #20]
 80169c0:	61aa      	str	r2, [r5, #24]
 80169c2:	61eb      	str	r3, [r5, #28]
//	    printf("Communication Key %d: ", KeyNumber);
//	    for (uint8_t i = 0; i < 32; i++) {
//	        printf("%02X ", CKeyRbuff[i]); // Print each byte as hexadecimal
//	    }
//	    printf("\r\n");
}
 80169c4:	bf00      	nop
 80169c6:	3738      	adds	r7, #56	@ 0x38
 80169c8:	46bd      	mov	sp, r7
 80169ca:	bcf0      	pop	{r4, r5, r6, r7}
 80169cc:	4770      	bx	lr
 80169ce:	bf00      	nop
 80169d0:	08166080 	.word	0x08166080
 80169d4:	20014a40 	.word	0x20014a40
 80169d8:	20014acc 	.word	0x20014acc

080169dc <setStaticKeys>:
//		"36F4E12F4EFB7730E9749727B34DBC30", "35AFA9AB4CE596418A19AC758597384D" };
// unComment after Testing
char StatKeys[3][33] = { 0 };
char ComKeys[8][33] = { 0 };

bool setStaticKeys(char *key1, char *key2, char *key3) {
 80169dc:	b580      	push	{r7, lr}
 80169de:	b084      	sub	sp, #16
 80169e0:	af00      	add	r7, sp, #0
 80169e2:	60f8      	str	r0, [r7, #12]
 80169e4:	60b9      	str	r1, [r7, #8]
 80169e6:	607a      	str	r2, [r7, #4]
	strcpy(StatKeys[0], key1);
 80169e8:	68f9      	ldr	r1, [r7, #12]
 80169ea:	4808      	ldr	r0, [pc, #32]	@ (8016a0c <setStaticKeys+0x30>)
 80169ec:	f008 fb7d 	bl	801f0ea <strcpy>
	strcpy(StatKeys[1], key2);
 80169f0:	68b9      	ldr	r1, [r7, #8]
 80169f2:	4807      	ldr	r0, [pc, #28]	@ (8016a10 <setStaticKeys+0x34>)
 80169f4:	f008 fb79 	bl	801f0ea <strcpy>
	strcpy(StatKeys[2], key3);
 80169f8:	6879      	ldr	r1, [r7, #4]
 80169fa:	4806      	ldr	r0, [pc, #24]	@ (8016a14 <setStaticKeys+0x38>)
 80169fc:	f008 fb75 	bl	801f0ea <strcpy>
}
 8016a00:	bf00      	nop
 8016a02:	4618      	mov	r0, r3
 8016a04:	3710      	adds	r7, #16
 8016a06:	46bd      	mov	sp, r7
 8016a08:	bd80      	pop	{r7, pc}
 8016a0a:	bf00      	nop
 8016a0c:	20014a68 	.word	0x20014a68
 8016a10:	20014a89 	.word	0x20014a89
 8016a14:	20014aaa 	.word	0x20014aaa

08016a18 <setComKeys>:
bool setComKeys(char *key1, char *key2, char *key3, char *key4, char *key5,
		char *key6, char *key7, char *key8) {
 8016a18:	b580      	push	{r7, lr}
 8016a1a:	b084      	sub	sp, #16
 8016a1c:	af00      	add	r7, sp, #0
 8016a1e:	60f8      	str	r0, [r7, #12]
 8016a20:	60b9      	str	r1, [r7, #8]
 8016a22:	607a      	str	r2, [r7, #4]
 8016a24:	603b      	str	r3, [r7, #0]
	strcpy(ComKeys[0], key1);
 8016a26:	68f9      	ldr	r1, [r7, #12]
 8016a28:	4811      	ldr	r0, [pc, #68]	@ (8016a70 <setComKeys+0x58>)
 8016a2a:	f008 fb5e 	bl	801f0ea <strcpy>
	strcpy(ComKeys[1], key1);
 8016a2e:	68f9      	ldr	r1, [r7, #12]
 8016a30:	4810      	ldr	r0, [pc, #64]	@ (8016a74 <setComKeys+0x5c>)
 8016a32:	f008 fb5a 	bl	801f0ea <strcpy>
	strcpy(ComKeys[2], key3);
 8016a36:	6879      	ldr	r1, [r7, #4]
 8016a38:	480f      	ldr	r0, [pc, #60]	@ (8016a78 <setComKeys+0x60>)
 8016a3a:	f008 fb56 	bl	801f0ea <strcpy>
	strcpy(ComKeys[3], key4);
 8016a3e:	6839      	ldr	r1, [r7, #0]
 8016a40:	480e      	ldr	r0, [pc, #56]	@ (8016a7c <setComKeys+0x64>)
 8016a42:	f008 fb52 	bl	801f0ea <strcpy>
	strcpy(ComKeys[4], key5);
 8016a46:	69b9      	ldr	r1, [r7, #24]
 8016a48:	480d      	ldr	r0, [pc, #52]	@ (8016a80 <setComKeys+0x68>)
 8016a4a:	f008 fb4e 	bl	801f0ea <strcpy>
	strcpy(ComKeys[5], key6);
 8016a4e:	69f9      	ldr	r1, [r7, #28]
 8016a50:	480c      	ldr	r0, [pc, #48]	@ (8016a84 <setComKeys+0x6c>)
 8016a52:	f008 fb4a 	bl	801f0ea <strcpy>
	strcpy(ComKeys[6], key7);
 8016a56:	6a39      	ldr	r1, [r7, #32]
 8016a58:	480b      	ldr	r0, [pc, #44]	@ (8016a88 <setComKeys+0x70>)
 8016a5a:	f008 fb46 	bl	801f0ea <strcpy>
	strcpy(ComKeys[7], key8);
 8016a5e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8016a60:	480a      	ldr	r0, [pc, #40]	@ (8016a8c <setComKeys+0x74>)
 8016a62:	f008 fb42 	bl	801f0ea <strcpy>
}
 8016a66:	bf00      	nop
 8016a68:	4618      	mov	r0, r3
 8016a6a:	3710      	adds	r7, #16
 8016a6c:	46bd      	mov	sp, r7
 8016a6e:	bd80      	pop	{r7, pc}
 8016a70:	20014acc 	.word	0x20014acc
 8016a74:	20014aed 	.word	0x20014aed
 8016a78:	20014b0e 	.word	0x20014b0e
 8016a7c:	20014b2f 	.word	0x20014b2f
 8016a80:	20014b50 	.word	0x20014b50
 8016a84:	20014b71 	.word	0x20014b71
 8016a88:	20014b92 	.word	0x20014b92
 8016a8c:	20014bb3 	.word	0x20014bb3

08016a90 <reset_keyresBuffer>:
char *ckey7 = ComKeys[6]; // Index 0 corresponds to the first key
char *ckey8 = ComKeys[7]; // Index 1 corresponds to the second key

int TOTAL_PACKETS;
uint8_t key_resBuffer[200] = { };
void reset_keyresBuffer() {
 8016a90:	b580      	push	{r7, lr}
 8016a92:	af00      	add	r7, sp, #0
	clearBuffer(key_resBuffer, sizeof(key_resBuffer));
 8016a94:	21c8      	movs	r1, #200	@ 0xc8
 8016a96:	4802      	ldr	r0, [pc, #8]	@ (8016aa0 <reset_keyresBuffer+0x10>)
 8016a98:	f7eb f816 	bl	8001ac8 <clearBuffer>
}
 8016a9c:	bf00      	nop
 8016a9e:	bd80      	pop	{r7, pc}
 8016aa0:	20014bd8 	.word	0x20014bd8

08016aa4 <handleKeysRequest>:
// Define callback functions for each message type
void handleKeysRequest() {
 8016aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016aa8:	f5ad 7d7c 	sub.w	sp, sp, #1008	@ 0x3f0
 8016aac:	af08      	add	r7, sp, #32
 8016aae:	466b      	mov	r3, sp
 8016ab0:	469a      	mov	sl, r3

	uint8_t str[100] = { 0 };
 8016ab2:	2300      	movs	r3, #0
 8016ab4:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8016ab8:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8016abc:	2260      	movs	r2, #96	@ 0x60
 8016abe:	2100      	movs	r1, #0
 8016ac0:	4618      	mov	r0, r3
 8016ac2:	f008 f9b5 	bl	801ee30 <memset>
	char command[250] = { 0 };
 8016ac6:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 8016aca:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8016ace:	2200      	movs	r2, #0
 8016ad0:	601a      	str	r2, [r3, #0]
 8016ad2:	3304      	adds	r3, #4
 8016ad4:	22f6      	movs	r2, #246	@ 0xf6
 8016ad6:	2100      	movs	r1, #0
 8016ad8:	4618      	mov	r0, r3
 8016ada:	f008 f9a9 	bl	801ee30 <memset>
	char dataBody[300] = { 0 };
 8016ade:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 8016ae2:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8016ae6:	2200      	movs	r2, #0
 8016ae8:	601a      	str	r2, [r3, #0]
 8016aea:	3304      	adds	r3, #4
 8016aec:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8016af0:	2100      	movs	r1, #0
 8016af2:	4618      	mov	r0, r3
 8016af4:	f008 f99c 	bl	801ee30 <memset>
	char str1[300] = { 0 };
 8016af8:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 8016afc:	f5a3 7374 	sub.w	r3, r3, #976	@ 0x3d0
 8016b00:	2200      	movs	r2, #0
 8016b02:	601a      	str	r2, [r3, #0]
 8016b04:	3304      	adds	r3, #4
 8016b06:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8016b0a:	2100      	movs	r1, #0
 8016b0c:	4618      	mov	r0, r3
 8016b0e:	f008 f98f 	bl	801ee30 <memset>
	memset(dataBody, 0, sizeof(dataBody));
 8016b12:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8016b16:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8016b1a:	2100      	movs	r1, #0
 8016b1c:	4618      	mov	r0, r3
 8016b1e:	f008 f987 	bl	801ee30 <memset>
//	snprintf(dataBody, sizeof(dataBody), "{\"imei\":\"%s\"}", &Imei);
	sprintf(dataBody, "{\"imei\":\"%s\"}", &Imei, sizeof(dataBody));
 8016b22:	f507 7096 	add.w	r0, r7, #300	@ 0x12c
 8016b26:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8016b2a:	4aa2      	ldr	r2, [pc, #648]	@ (8016db4 <handleKeysRequest+0x310>)
 8016b2c:	49a2      	ldr	r1, [pc, #648]	@ (8016db8 <handleKeysRequest+0x314>)
 8016b2e:	f008 f823 	bl	801eb78 <siprintf>
	printc(100, "String =%s \r\n", dataBody);
 8016b32:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8016b36:	461a      	mov	r2, r3
 8016b38:	49a0      	ldr	r1, [pc, #640]	@ (8016dbc <handleKeysRequest+0x318>)
 8016b3a:	2064      	movs	r0, #100	@ 0x64
 8016b3c:	f7ea ff6c 	bl	8001a18 <printc>
	sKey_update(1);
 8016b40:	2001      	movs	r0, #1
 8016b42:	f7ec ff31 	bl	80039a8 <sKey_update>
	encrypt(dataBody, str);
 8016b46:	f507 7255 	add.w	r2, r7, #852	@ 0x354
 8016b4a:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8016b4e:	4611      	mov	r1, r2
 8016b50:	4618      	mov	r0, r3
 8016b52:	f7eb f99d 	bl	8001e90 <encrypt>

	int array_length = strlen(str);
 8016b56:	f507 7355 	add.w	r3, r7, #852	@ 0x354
 8016b5a:	4618      	mov	r0, r3
 8016b5c:	f7e9 fba2 	bl	80002a4 <strlen>
 8016b60:	4603      	mov	r3, r0
 8016b62:	f8c7 33c8 	str.w	r3, [r7, #968]	@ 0x3c8

	char hex_string[array_length];
 8016b66:	f8d7 63c8 	ldr.w	r6, [r7, #968]	@ 0x3c8
 8016b6a:	1e73      	subs	r3, r6, #1
 8016b6c:	f8c7 33c4 	str.w	r3, [r7, #964]	@ 0x3c4
 8016b70:	4632      	mov	r2, r6
 8016b72:	2300      	movs	r3, #0
 8016b74:	4690      	mov	r8, r2
 8016b76:	4699      	mov	r9, r3
 8016b78:	f04f 0200 	mov.w	r2, #0
 8016b7c:	f04f 0300 	mov.w	r3, #0
 8016b80:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8016b84:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8016b88:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8016b8c:	4632      	mov	r2, r6
 8016b8e:	2300      	movs	r3, #0
 8016b90:	4614      	mov	r4, r2
 8016b92:	461d      	mov	r5, r3
 8016b94:	f04f 0200 	mov.w	r2, #0
 8016b98:	f04f 0300 	mov.w	r3, #0
 8016b9c:	00eb      	lsls	r3, r5, #3
 8016b9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8016ba2:	00e2      	lsls	r2, r4, #3
 8016ba4:	4633      	mov	r3, r6
 8016ba6:	3307      	adds	r3, #7
 8016ba8:	08db      	lsrs	r3, r3, #3
 8016baa:	00db      	lsls	r3, r3, #3
 8016bac:	ebad 0d03 	sub.w	sp, sp, r3
 8016bb0:	ab08      	add	r3, sp, #32
 8016bb2:	3300      	adds	r3, #0
 8016bb4:	f8c7 33c0 	str.w	r3, [r7, #960]	@ 0x3c0

	for (int i = 0; i < array_length; i++) {
 8016bb8:	2300      	movs	r3, #0
 8016bba:	f8c7 33cc 	str.w	r3, [r7, #972]	@ 0x3cc
 8016bbe:	e015      	b.n	8016bec <handleKeysRequest+0x148>
		sprintf(hex_string + (i * 2), "%02X", str[i]);
 8016bc0:	f8d7 33cc 	ldr.w	r3, [r7, #972]	@ 0x3cc
 8016bc4:	005b      	lsls	r3, r3, #1
 8016bc6:	461a      	mov	r2, r3
 8016bc8:	f8d7 33c0 	ldr.w	r3, [r7, #960]	@ 0x3c0
 8016bcc:	1898      	adds	r0, r3, r2
 8016bce:	f507 7255 	add.w	r2, r7, #852	@ 0x354
 8016bd2:	f8d7 33cc 	ldr.w	r3, [r7, #972]	@ 0x3cc
 8016bd6:	4413      	add	r3, r2
 8016bd8:	781b      	ldrb	r3, [r3, #0]
 8016bda:	461a      	mov	r2, r3
 8016bdc:	4978      	ldr	r1, [pc, #480]	@ (8016dc0 <handleKeysRequest+0x31c>)
 8016bde:	f007 ffcb 	bl	801eb78 <siprintf>
	for (int i = 0; i < array_length; i++) {
 8016be2:	f8d7 33cc 	ldr.w	r3, [r7, #972]	@ 0x3cc
 8016be6:	3301      	adds	r3, #1
 8016be8:	f8c7 33cc 	str.w	r3, [r7, #972]	@ 0x3cc
 8016bec:	f8d7 23cc 	ldr.w	r2, [r7, #972]	@ 0x3cc
 8016bf0:	f8d7 33c8 	ldr.w	r3, [r7, #968]	@ 0x3c8
 8016bf4:	429a      	cmp	r2, r3
 8016bf6:	dbe3      	blt.n	8016bc0 <handleKeysRequest+0x11c>
	}

	memset(dataBody, '\0', sizeof(dataBody));
 8016bf8:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8016bfc:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8016c00:	2100      	movs	r1, #0
 8016c02:	4618      	mov	r0, r3
 8016c04:	f008 f914 	bl	801ee30 <memset>
	memcpy(dataBody, hex_string, strlen(hex_string));
 8016c08:	f8d7 03c0 	ldr.w	r0, [r7, #960]	@ 0x3c0
 8016c0c:	f7e9 fb4a 	bl	80002a4 <strlen>
 8016c10:	4602      	mov	r2, r0
 8016c12:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8016c16:	f8d7 13c0 	ldr.w	r1, [r7, #960]	@ 0x3c0
 8016c1a:	4618      	mov	r0, r3
 8016c1c:	f008 fa7b 	bl	801f116 <memcpy>
	memset(hex_string, 0, sizeof(hex_string));
 8016c20:	4633      	mov	r3, r6
 8016c22:	461a      	mov	r2, r3
 8016c24:	2100      	movs	r1, #0
 8016c26:	f8d7 03c0 	ldr.w	r0, [r7, #960]	@ 0x3c0
 8016c2a:	f008 f901 	bl	801ee30 <memset>

// Calculate the checksum
	uint8_t checksum = Calculate_CRC8((uint8_t*) dataBody, strlen(dataBody));
 8016c2e:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8016c32:	4618      	mov	r0, r3
 8016c34:	f7e9 fb36 	bl	80002a4 <strlen>
 8016c38:	4602      	mov	r2, r0
 8016c3a:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8016c3e:	4611      	mov	r1, r2
 8016c40:	4618      	mov	r0, r3
 8016c42:	f000 ff9b 	bl	8017b7c <Calculate_CRC8>
 8016c46:	4603      	mov	r3, r0
 8016c48:	f887 33bf 	strb.w	r3, [r7, #959]	@ 0x3bf
	memset(str1, 0, sizeof(str1));
 8016c4c:	463b      	mov	r3, r7
 8016c4e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8016c52:	2100      	movs	r1, #0
 8016c54:	4618      	mov	r0, r3
 8016c56:	f008 f8eb 	bl	801ee30 <memset>

// Construct the string
	snprintf((char*) str1, sizeof(str1), "hexKey=%s%s,%d,%s,%d,%s,%0X%c", key2,
 8016c5a:	4b5a      	ldr	r3, [pc, #360]	@ (8016dc4 <handleKeysRequest+0x320>)
 8016c5c:	681a      	ldr	r2, [r3, #0]
 8016c5e:	f897 33bf 	ldrb.w	r3, [r7, #959]	@ 0x3bf
 8016c62:	4638      	mov	r0, r7
 8016c64:	212a      	movs	r1, #42	@ 0x2a
 8016c66:	9106      	str	r1, [sp, #24]
 8016c68:	9305      	str	r3, [sp, #20]
 8016c6a:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8016c6e:	9304      	str	r3, [sp, #16]
 8016c70:	2302      	movs	r3, #2
 8016c72:	9303      	str	r3, [sp, #12]
 8016c74:	4b4f      	ldr	r3, [pc, #316]	@ (8016db4 <handleKeysRequest+0x310>)
 8016c76:	9302      	str	r3, [sp, #8]
 8016c78:	2301      	movs	r3, #1
 8016c7a:	9301      	str	r3, [sp, #4]
 8016c7c:	4b52      	ldr	r3, [pc, #328]	@ (8016dc8 <handleKeysRequest+0x324>)
 8016c7e:	9300      	str	r3, [sp, #0]
 8016c80:	4613      	mov	r3, r2
 8016c82:	4a52      	ldr	r2, [pc, #328]	@ (8016dcc <handleKeysRequest+0x328>)
 8016c84:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8016c88:	f007 ff42 	bl	801eb10 <sniprintf>
	header, 1, &Imei, 2, dataBody, checksum, Delimiter);

	printc(100, "CommandURL -  %s \n\r", str1);
 8016c8c:	463b      	mov	r3, r7
 8016c8e:	461a      	mov	r2, r3
 8016c90:	494f      	ldr	r1, [pc, #316]	@ (8016dd0 <handleKeysRequest+0x32c>)
 8016c92:	2064      	movs	r0, #100	@ 0x64
 8016c94:	f7ea fec0 	bl	8001a18 <printc>

	memset(dataBody, 0, sizeof(dataBody));
 8016c98:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8016c9c:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8016ca0:	2100      	movs	r1, #0
 8016ca2:	4618      	mov	r0, r3
 8016ca4:	f008 f8c4 	bl	801ee30 <memset>
// Create the AT command string with the length of dataBody inserted
	sprintf(command, "AT+QHTTPURL=%d,%d\r\n", strlen(URL), EC_TOUT);
 8016ca8:	f507 7016 	add.w	r0, r7, #600	@ 0x258
 8016cac:	2328      	movs	r3, #40	@ 0x28
 8016cae:	2232      	movs	r2, #50	@ 0x32
 8016cb0:	4948      	ldr	r1, [pc, #288]	@ (8016dd4 <handleKeysRequest+0x330>)
 8016cb2:	f007 ff61 	bl	801eb78 <siprintf>
	reset_keyresBuffer();
 8016cb6:	f7ff feeb 	bl	8016a90 <reset_keyresBuffer>
	if (EC200_Transmit(command, key_resBuffer, EC200MINRESONSETIME)) {
 8016cba:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8016cbe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8016cc2:	4945      	ldr	r1, [pc, #276]	@ (8016dd8 <handleKeysRequest+0x334>)
 8016cc4:	4618      	mov	r0, r3
 8016cc6:	f7ea fa71 	bl	80011ac <EC200_Transmit>
 8016cca:	4603      	mov	r3, r0
 8016ccc:	2b00      	cmp	r3, #0
 8016cce:	d004      	beq.n	8016cda <handleKeysRequest+0x236>
		printc(100, "AT+QHTTPURL -  %s \n\r", key_resBuffer);
 8016cd0:	4a41      	ldr	r2, [pc, #260]	@ (8016dd8 <handleKeysRequest+0x334>)
 8016cd2:	4942      	ldr	r1, [pc, #264]	@ (8016ddc <handleKeysRequest+0x338>)
 8016cd4:	2064      	movs	r0, #100	@ 0x64
 8016cd6:	f7ea fe9f 	bl	8001a18 <printc>
	}
	memset(command, 0, 250);
 8016cda:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8016cde:	22fa      	movs	r2, #250	@ 0xfa
 8016ce0:	2100      	movs	r1, #0
 8016ce2:	4618      	mov	r0, r3
 8016ce4:	f008 f8a4 	bl	801ee30 <memset>
// Send HTTP URL
	reset_keyresBuffer();
 8016ce8:	f7ff fed2 	bl	8016a90 <reset_keyresBuffer>
	if (EC200_Transmit(URL, key_resBuffer, EC200MINRESONSETIME)) {
 8016cec:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8016cf0:	4939      	ldr	r1, [pc, #228]	@ (8016dd8 <handleKeysRequest+0x334>)
 8016cf2:	483b      	ldr	r0, [pc, #236]	@ (8016de0 <handleKeysRequest+0x33c>)
 8016cf4:	f7ea fa5a 	bl	80011ac <EC200_Transmit>
 8016cf8:	4603      	mov	r3, r0
 8016cfa:	2b00      	cmp	r3, #0
 8016cfc:	d004      	beq.n	8016d08 <handleKeysRequest+0x264>
		printc(100, "URL -  %s \n\r", key_resBuffer);
 8016cfe:	4a36      	ldr	r2, [pc, #216]	@ (8016dd8 <handleKeysRequest+0x334>)
 8016d00:	4938      	ldr	r1, [pc, #224]	@ (8016de4 <handleKeysRequest+0x340>)
 8016d02:	2064      	movs	r0, #100	@ 0x64
 8016d04:	f7ea fe88 	bl	8001a18 <printc>
	}
	int F_Data = strlen(str1);
 8016d08:	463b      	mov	r3, r7
 8016d0a:	4618      	mov	r0, r3
 8016d0c:	f7e9 faca 	bl	80002a4 <strlen>
 8016d10:	4603      	mov	r3, r0
 8016d12:	f8c7 33b8 	str.w	r3, [r7, #952]	@ 0x3b8

// Construct the AT command for HTTP POST
	sprintf(command, "AT+QHTTPPOST=%d\r\n", F_Data);
 8016d16:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8016d1a:	f8d7 23b8 	ldr.w	r2, [r7, #952]	@ 0x3b8
 8016d1e:	4932      	ldr	r1, [pc, #200]	@ (8016de8 <handleKeysRequest+0x344>)
 8016d20:	4618      	mov	r0, r3
 8016d22:	f007 ff29 	bl	801eb78 <siprintf>
// Transmit the command string
//	EC200_Data_Fetch(command);
	reset_keyresBuffer();
 8016d26:	f7ff feb3 	bl	8016a90 <reset_keyresBuffer>
	if (EC200_Transmit(command, key_resBuffer, 10000)) {
 8016d2a:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8016d2e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8016d32:	4929      	ldr	r1, [pc, #164]	@ (8016dd8 <handleKeysRequest+0x334>)
 8016d34:	4618      	mov	r0, r3
 8016d36:	f7ea fa39 	bl	80011ac <EC200_Transmit>
 8016d3a:	4603      	mov	r3, r0
 8016d3c:	2b00      	cmp	r3, #0
 8016d3e:	d004      	beq.n	8016d4a <handleKeysRequest+0x2a6>
		printc(100, "AT+QHTTPPOST -  %s \n\r", key_resBuffer);
 8016d40:	4a25      	ldr	r2, [pc, #148]	@ (8016dd8 <handleKeysRequest+0x334>)
 8016d42:	492a      	ldr	r1, [pc, #168]	@ (8016dec <handleKeysRequest+0x348>)
 8016d44:	2064      	movs	r0, #100	@ 0x64
 8016d46:	f7ea fe67 	bl	8001a18 <printc>
	}
	memset(command, 0, sizeof(command));
 8016d4a:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8016d4e:	22fa      	movs	r2, #250	@ 0xfa
 8016d50:	2100      	movs	r1, #0
 8016d52:	4618      	mov	r0, r3
 8016d54:	f008 f86c 	bl	801ee30 <memset>
// Transmit the dataBody
	if (EC200_Transmit(str1, key_resBuffer, EC200MINRESONSETIME)) {
 8016d58:	463b      	mov	r3, r7
 8016d5a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8016d5e:	491e      	ldr	r1, [pc, #120]	@ (8016dd8 <handleKeysRequest+0x334>)
 8016d60:	4618      	mov	r0, r3
 8016d62:	f7ea fa23 	bl	80011ac <EC200_Transmit>
 8016d66:	4603      	mov	r3, r0
 8016d68:	2b00      	cmp	r3, #0
 8016d6a:	d004      	beq.n	8016d76 <handleKeysRequest+0x2d2>
		printc(100, "AT+QHTTPPOST -  %s \n\r", key_resBuffer);
 8016d6c:	4a1a      	ldr	r2, [pc, #104]	@ (8016dd8 <handleKeysRequest+0x334>)
 8016d6e:	491f      	ldr	r1, [pc, #124]	@ (8016dec <handleKeysRequest+0x348>)
 8016d70:	2064      	movs	r0, #100	@ 0x64
 8016d72:	f7ea fe51 	bl	8001a18 <printc>
	}
	memset(str1, 0, sizeof(str1));
 8016d76:	463b      	mov	r3, r7
 8016d78:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8016d7c:	2100      	movs	r1, #0
 8016d7e:	4618      	mov	r0, r3
 8016d80:	f008 f856 	bl	801ee30 <memset>
	HAL_Delay(3000);
 8016d84:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8016d88:	f7ee fe2e 	bl	80059e8 <HAL_Delay>
	sprintf(command, "AT+QHTTPREAD= %d \r\n", EC_TOUT);
 8016d8c:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8016d90:	2228      	movs	r2, #40	@ 0x28
 8016d92:	4917      	ldr	r1, [pc, #92]	@ (8016df0 <handleKeysRequest+0x34c>)
 8016d94:	4618      	mov	r0, r3
 8016d96:	f007 feef 	bl	801eb78 <siprintf>
	EC200_Key_Update(command);
 8016d9a:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8016d9e:	4618      	mov	r0, r3
 8016da0:	f7ff f924 	bl	8015fec <EC200_Key_Update>
 8016da4:	46d5      	mov	sp, sl
	;
}
 8016da6:	bf00      	nop
 8016da8:	f507 7774 	add.w	r7, r7, #976	@ 0x3d0
 8016dac:	46bd      	mov	sp, r7
 8016dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016db2:	bf00      	nop
 8016db4:	20014a54 	.word	0x20014a54
 8016db8:	08022b10 	.word	0x08022b10
 8016dbc:	08022b20 	.word	0x08022b20
 8016dc0:	08022b30 	.word	0x08022b30
 8016dc4:	2000009c 	.word	0x2000009c
 8016dc8:	08022b58 	.word	0x08022b58
 8016dcc:	08022b38 	.word	0x08022b38
 8016dd0:	08022b60 	.word	0x08022b60
 8016dd4:	08022b74 	.word	0x08022b74
 8016dd8:	20014bd8 	.word	0x20014bd8
 8016ddc:	08022b88 	.word	0x08022b88
 8016de0:	08022ba0 	.word	0x08022ba0
 8016de4:	08022bd4 	.word	0x08022bd4
 8016de8:	08022be4 	.word	0x08022be4
 8016dec:	08022bf8 	.word	0x08022bf8
 8016df0:	08022c10 	.word	0x08022c10

08016df4 <handleKeysUpdate>:

void handleKeysUpdate() {
 8016df4:	b580      	push	{r7, lr}
 8016df6:	af00      	add	r7, sp, #0
	printc(100, "Received Keys Update\n");
 8016df8:	4902      	ldr	r1, [pc, #8]	@ (8016e04 <handleKeysUpdate+0x10>)
 8016dfa:	2064      	movs	r0, #100	@ 0x64
 8016dfc:	f7ea fe0c 	bl	8001a18 <printc>
// Add your implementation here
}
 8016e00:	bf00      	nop
 8016e02:	bd80      	pop	{r7, pc}
 8016e04:	08022c24 	.word	0x08022c24

08016e08 <handleFotaDetails>:

void handleFotaDetails() {
 8016e08:	b580      	push	{r7, lr}
 8016e0a:	af00      	add	r7, sp, #0
	printc(100, "Received Fota Version and Cota Setting Details\n");
 8016e0c:	4902      	ldr	r1, [pc, #8]	@ (8016e18 <handleFotaDetails+0x10>)
 8016e0e:	2064      	movs	r0, #100	@ 0x64
 8016e10:	f7ea fe02 	bl	8001a18 <printc>
// Add your implementation here
}
 8016e14:	bf00      	nop
 8016e16:	bd80      	pop	{r7, pc}
 8016e18:	08022c3c 	.word	0x08022c3c

08016e1c <handleVersionStatus>:

void handleVersionStatus() {
 8016e1c:	b580      	push	{r7, lr}
 8016e1e:	af00      	add	r7, sp, #0
	printc(100, "Received Version Status\n");
 8016e20:	4902      	ldr	r1, [pc, #8]	@ (8016e2c <handleVersionStatus+0x10>)
 8016e22:	2064      	movs	r0, #100	@ 0x64
 8016e24:	f7ea fdf8 	bl	8001a18 <printc>
// Add your implementation here
}
 8016e28:	bf00      	nop
 8016e2a:	bd80      	pop	{r7, pc}
 8016e2c:	08022c6c 	.word	0x08022c6c

08016e30 <handleCotaData>:

void handleCotaData() {
 8016e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016e34:	f5ad 6d82 	sub.w	sp, sp, #1040	@ 0x410
 8016e38:	af08      	add	r7, sp, #32
	uint8_t str[100] = { 0 };
 8016e3a:	2300      	movs	r3, #0
 8016e3c:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374
 8016e40:	f507 735e 	add.w	r3, r7, #888	@ 0x378
 8016e44:	2260      	movs	r2, #96	@ 0x60
 8016e46:	2100      	movs	r1, #0
 8016e48:	4618      	mov	r0, r3
 8016e4a:	f007 fff1 	bl	801ee30 <memset>
	char command[250] = { 0 };
 8016e4e:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 8016e52:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8016e56:	2200      	movs	r2, #0
 8016e58:	601a      	str	r2, [r3, #0]
 8016e5a:	3304      	adds	r3, #4
 8016e5c:	22f6      	movs	r2, #246	@ 0xf6
 8016e5e:	2100      	movs	r1, #0
 8016e60:	4618      	mov	r0, r3
 8016e62:	f007 ffe5 	bl	801ee30 <memset>
	char dataBody[300] = { 0 };
 8016e66:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 8016e6a:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8016e6e:	2200      	movs	r2, #0
 8016e70:	601a      	str	r2, [r3, #0]
 8016e72:	3304      	adds	r3, #4
 8016e74:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8016e78:	2100      	movs	r1, #0
 8016e7a:	4618      	mov	r0, r3
 8016e7c:	f007 ffd8 	bl	801ee30 <memset>
	char str1[300] = { 0 };
 8016e80:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 8016e84:	f5a3 7374 	sub.w	r3, r3, #976	@ 0x3d0
 8016e88:	2200      	movs	r2, #0
 8016e8a:	601a      	str	r2, [r3, #0]
 8016e8c:	3304      	adds	r3, #4
 8016e8e:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8016e92:	2100      	movs	r1, #0
 8016e94:	4618      	mov	r0, r3
 8016e96:	f007 ffcb 	bl	801ee30 <memset>
	char CVer[30] = { "Test_1" }; // Fetched FRom Flash
 8016e9a:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 8016e9e:	f5a3 727c 	sub.w	r2, r3, #1008	@ 0x3f0
 8016ea2:	49bb      	ldr	r1, [pc, #748]	@ (8017190 <handleCotaData+0x360>)
 8016ea4:	4613      	mov	r3, r2
 8016ea6:	c903      	ldmia	r1, {r0, r1}
 8016ea8:	6018      	str	r0, [r3, #0]
 8016eaa:	3304      	adds	r3, #4
 8016eac:	8019      	strh	r1, [r3, #0]
 8016eae:	3302      	adds	r3, #2
 8016eb0:	0c09      	lsrs	r1, r1, #16
 8016eb2:	7019      	strb	r1, [r3, #0]
 8016eb4:	1dd3      	adds	r3, r2, #7
 8016eb6:	2200      	movs	r2, #0
 8016eb8:	601a      	str	r2, [r3, #0]
 8016eba:	605a      	str	r2, [r3, #4]
 8016ebc:	609a      	str	r2, [r3, #8]
 8016ebe:	60da      	str	r2, [r3, #12]
 8016ec0:	611a      	str	r2, [r3, #16]
 8016ec2:	f8c3 2013 	str.w	r2, [r3, #19]
	redoIntouchConnect:
	memset(dataBody, 0, sizeof(dataBody));
 8016ec6:	f507 73a6 	add.w	r3, r7, #332	@ 0x14c
 8016eca:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8016ece:	2100      	movs	r1, #0
 8016ed0:	4618      	mov	r0, r3
 8016ed2:	f007 ffad 	bl	801ee30 <memset>
	//	snprintf(dataBody, sizeof(dataBody), "{\"imei\":\"%s\"}", &Imei);
	sprintf(dataBody, "{\"imei\":\"%s\",\"configVersion\":\"%s\"}", &Imei, &CVer,
 8016ed6:	463b      	mov	r3, r7
 8016ed8:	f507 70a6 	add.w	r0, r7, #332	@ 0x14c
 8016edc:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8016ee0:	9200      	str	r2, [sp, #0]
 8016ee2:	4aac      	ldr	r2, [pc, #688]	@ (8017194 <handleCotaData+0x364>)
 8016ee4:	49ac      	ldr	r1, [pc, #688]	@ (8017198 <handleCotaData+0x368>)
 8016ee6:	f007 fe47 	bl	801eb78 <siprintf>
			sizeof(dataBody));
	printc(100, "String =%s \r\n", dataBody);
 8016eea:	f507 73a6 	add.w	r3, r7, #332	@ 0x14c
 8016eee:	461a      	mov	r2, r3
 8016ef0:	49aa      	ldr	r1, [pc, #680]	@ (801719c <handleCotaData+0x36c>)
 8016ef2:	2064      	movs	r0, #100	@ 0x64
 8016ef4:	f7ea fd90 	bl	8001a18 <printc>
	cKey_update(0);
 8016ef8:	2000      	movs	r0, #0
 8016efa:	f7ec fd7d 	bl	80039f8 <cKey_update>
	int array_length = encrypt(dataBody, str);
 8016efe:	f507 725d 	add.w	r2, r7, #884	@ 0x374
 8016f02:	f507 73a6 	add.w	r3, r7, #332	@ 0x14c
 8016f06:	4611      	mov	r1, r2
 8016f08:	4618      	mov	r0, r3
 8016f0a:	f7ea ffc1 	bl	8001e90 <encrypt>
 8016f0e:	f8c7 03e8 	str.w	r0, [r7, #1000]	@ 0x3e8

	char hex_string[array_length];
 8016f12:	f8d7 63e8 	ldr.w	r6, [r7, #1000]	@ 0x3e8
 8016f16:	466b      	mov	r3, sp
 8016f18:	469a      	mov	sl, r3
 8016f1a:	1e73      	subs	r3, r6, #1
 8016f1c:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4
 8016f20:	4632      	mov	r2, r6
 8016f22:	2300      	movs	r3, #0
 8016f24:	4690      	mov	r8, r2
 8016f26:	4699      	mov	r9, r3
 8016f28:	f04f 0200 	mov.w	r2, #0
 8016f2c:	f04f 0300 	mov.w	r3, #0
 8016f30:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8016f34:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8016f38:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8016f3c:	4632      	mov	r2, r6
 8016f3e:	2300      	movs	r3, #0
 8016f40:	4614      	mov	r4, r2
 8016f42:	461d      	mov	r5, r3
 8016f44:	f04f 0200 	mov.w	r2, #0
 8016f48:	f04f 0300 	mov.w	r3, #0
 8016f4c:	00eb      	lsls	r3, r5, #3
 8016f4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8016f52:	00e2      	lsls	r2, r4, #3
 8016f54:	4633      	mov	r3, r6
 8016f56:	3307      	adds	r3, #7
 8016f58:	08db      	lsrs	r3, r3, #3
 8016f5a:	00db      	lsls	r3, r3, #3
 8016f5c:	ebad 0d03 	sub.w	sp, sp, r3
 8016f60:	ab08      	add	r3, sp, #32
 8016f62:	3300      	adds	r3, #0
 8016f64:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0

	memset(hex_string,0,sizeof(hex_string));
 8016f68:	4633      	mov	r3, r6
 8016f6a:	461a      	mov	r2, r3
 8016f6c:	2100      	movs	r1, #0
 8016f6e:	f8d7 03e0 	ldr.w	r0, [r7, #992]	@ 0x3e0
 8016f72:	f007 ff5d 	bl	801ee30 <memset>
	for (int i = 0; i < array_length; i++) {
 8016f76:	2300      	movs	r3, #0
 8016f78:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
 8016f7c:	e015      	b.n	8016faa <handleCotaData+0x17a>
		sprintf(hex_string + (i * 2), "%02X", str[i]);
 8016f7e:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	@ 0x3ec
 8016f82:	005b      	lsls	r3, r3, #1
 8016f84:	461a      	mov	r2, r3
 8016f86:	f8d7 33e0 	ldr.w	r3, [r7, #992]	@ 0x3e0
 8016f8a:	1898      	adds	r0, r3, r2
 8016f8c:	f507 725d 	add.w	r2, r7, #884	@ 0x374
 8016f90:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	@ 0x3ec
 8016f94:	4413      	add	r3, r2
 8016f96:	781b      	ldrb	r3, [r3, #0]
 8016f98:	461a      	mov	r2, r3
 8016f9a:	4981      	ldr	r1, [pc, #516]	@ (80171a0 <handleCotaData+0x370>)
 8016f9c:	f007 fdec 	bl	801eb78 <siprintf>
	for (int i = 0; i < array_length; i++) {
 8016fa0:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	@ 0x3ec
 8016fa4:	3301      	adds	r3, #1
 8016fa6:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
 8016faa:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 8016fae:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	@ 0x3e8
 8016fb2:	429a      	cmp	r2, r3
 8016fb4:	dbe3      	blt.n	8016f7e <handleCotaData+0x14e>
	}

	memset(dataBody, '\0', sizeof(dataBody));
 8016fb6:	f507 73a6 	add.w	r3, r7, #332	@ 0x14c
 8016fba:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8016fbe:	2100      	movs	r1, #0
 8016fc0:	4618      	mov	r0, r3
 8016fc2:	f007 ff35 	bl	801ee30 <memset>
	memcpy(dataBody, hex_string, strlen(hex_string));
 8016fc6:	f8d7 03e0 	ldr.w	r0, [r7, #992]	@ 0x3e0
 8016fca:	f7e9 f96b 	bl	80002a4 <strlen>
 8016fce:	4602      	mov	r2, r0
 8016fd0:	f507 73a6 	add.w	r3, r7, #332	@ 0x14c
 8016fd4:	f8d7 13e0 	ldr.w	r1, [r7, #992]	@ 0x3e0
 8016fd8:	4618      	mov	r0, r3
 8016fda:	f008 f89c 	bl	801f116 <memcpy>
	memset(hex_string, 0, sizeof(hex_string));
 8016fde:	4633      	mov	r3, r6
 8016fe0:	461a      	mov	r2, r3
 8016fe2:	2100      	movs	r1, #0
 8016fe4:	f8d7 03e0 	ldr.w	r0, [r7, #992]	@ 0x3e0
 8016fe8:	f007 ff22 	bl	801ee30 <memset>
	// Calculate the checksum
	uint8_t checksum = Calculate_CRC8((uint8_t*) dataBody, strlen(dataBody));
 8016fec:	f507 73a6 	add.w	r3, r7, #332	@ 0x14c
 8016ff0:	4618      	mov	r0, r3
 8016ff2:	f7e9 f957 	bl	80002a4 <strlen>
 8016ff6:	4602      	mov	r2, r0
 8016ff8:	f507 73a6 	add.w	r3, r7, #332	@ 0x14c
 8016ffc:	4611      	mov	r1, r2
 8016ffe:	4618      	mov	r0, r3
 8017000:	f000 fdbc 	bl	8017b7c <Calculate_CRC8>
 8017004:	4603      	mov	r3, r0
 8017006:	f887 33df 	strb.w	r3, [r7, #991]	@ 0x3df
	memset(str1, 0, sizeof(str1));
 801700a:	f107 0320 	add.w	r3, r7, #32
 801700e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8017012:	2100      	movs	r1, #0
 8017014:	4618      	mov	r0, r3
 8017016:	f007 ff0b 	bl	801ee30 <memset>

	// Construct the string
	snprintf((char*) str1, sizeof(str1), "hexKey=%s%s,%d,%s,%d,%s,%0X%c", ckey1,
 801701a:	4b62      	ldr	r3, [pc, #392]	@ (80171a4 <handleCotaData+0x374>)
 801701c:	681a      	ldr	r2, [r3, #0]
 801701e:	f897 33df 	ldrb.w	r3, [r7, #991]	@ 0x3df
 8017022:	f107 0020 	add.w	r0, r7, #32
 8017026:	212a      	movs	r1, #42	@ 0x2a
 8017028:	9106      	str	r1, [sp, #24]
 801702a:	9305      	str	r3, [sp, #20]
 801702c:	f507 73a6 	add.w	r3, r7, #332	@ 0x14c
 8017030:	9304      	str	r3, [sp, #16]
 8017032:	2301      	movs	r3, #1
 8017034:	9303      	str	r3, [sp, #12]
 8017036:	4b57      	ldr	r3, [pc, #348]	@ (8017194 <handleCotaData+0x364>)
 8017038:	9302      	str	r3, [sp, #8]
 801703a:	2305      	movs	r3, #5
 801703c:	9301      	str	r3, [sp, #4]
 801703e:	4b5a      	ldr	r3, [pc, #360]	@ (80171a8 <handleCotaData+0x378>)
 8017040:	9300      	str	r3, [sp, #0]
 8017042:	4613      	mov	r3, r2
 8017044:	4a59      	ldr	r2, [pc, #356]	@ (80171ac <handleCotaData+0x37c>)
 8017046:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 801704a:	f007 fd61 	bl	801eb10 <sniprintf>
	header, 5, &Imei, 1, dataBody, checksum, Delimiter);

	printc(100, "CommandURL -  %s \n\r", str1);
 801704e:	f107 0320 	add.w	r3, r7, #32
 8017052:	461a      	mov	r2, r3
 8017054:	4956      	ldr	r1, [pc, #344]	@ (80171b0 <handleCotaData+0x380>)
 8017056:	2064      	movs	r0, #100	@ 0x64
 8017058:	f7ea fcde 	bl	8001a18 <printc>

	sprintf(command, "AT+QHTTPURL=%d,%d\r\n", strlen(URL), EC_TOUT);
 801705c:	f507 701e 	add.w	r0, r7, #632	@ 0x278
 8017060:	2328      	movs	r3, #40	@ 0x28
 8017062:	2232      	movs	r2, #50	@ 0x32
 8017064:	4953      	ldr	r1, [pc, #332]	@ (80171b4 <handleCotaData+0x384>)
 8017066:	f007 fd87 	bl	801eb78 <siprintf>
	clearBuffer(resBuff, sizeof(resBuff));
 801706a:	f44f 61fd 	mov.w	r1, #2024	@ 0x7e8
 801706e:	4852      	ldr	r0, [pc, #328]	@ (80171b8 <handleCotaData+0x388>)
 8017070:	f7ea fd2a 	bl	8001ac8 <clearBuffer>
	if (EC200_Transmit(command, resBuff, 10000)) {
 8017074:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 8017078:	f242 7210 	movw	r2, #10000	@ 0x2710
 801707c:	494e      	ldr	r1, [pc, #312]	@ (80171b8 <handleCotaData+0x388>)
 801707e:	4618      	mov	r0, r3
 8017080:	f7ea f894 	bl	80011ac <EC200_Transmit>
 8017084:	4603      	mov	r3, r0
 8017086:	2b00      	cmp	r3, #0
 8017088:	d004      	beq.n	8017094 <handleCotaData+0x264>
		printc(100, "AT+QHTTPURL -  %s \n\r", key_resBuffer);
 801708a:	4a4c      	ldr	r2, [pc, #304]	@ (80171bc <handleCotaData+0x38c>)
 801708c:	494c      	ldr	r1, [pc, #304]	@ (80171c0 <handleCotaData+0x390>)
 801708e:	2064      	movs	r0, #100	@ 0x64
 8017090:	f7ea fcc2 	bl	8001a18 <printc>
	}
	memset(command, 0, 250);
 8017094:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 8017098:	22fa      	movs	r2, #250	@ 0xfa
 801709a:	2100      	movs	r1, #0
 801709c:	4618      	mov	r0, r3
 801709e:	f007 fec7 	bl	801ee30 <memset>

	// Send HTTP URL
	clearBuffer(resBuff, sizeof(resBuff));
 80170a2:	f44f 61fd 	mov.w	r1, #2024	@ 0x7e8
 80170a6:	4844      	ldr	r0, [pc, #272]	@ (80171b8 <handleCotaData+0x388>)
 80170a8:	f7ea fd0e 	bl	8001ac8 <clearBuffer>
	HAL_Delay(500);
 80170ac:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80170b0:	f7ee fc9a 	bl	80059e8 <HAL_Delay>
	if (EC200_Transmit(URL, resBuff, 10000)) {
 80170b4:	f242 7210 	movw	r2, #10000	@ 0x2710
 80170b8:	493f      	ldr	r1, [pc, #252]	@ (80171b8 <handleCotaData+0x388>)
 80170ba:	4842      	ldr	r0, [pc, #264]	@ (80171c4 <handleCotaData+0x394>)
 80170bc:	f7ea f876 	bl	80011ac <EC200_Transmit>
 80170c0:	4603      	mov	r3, r0
 80170c2:	2b00      	cmp	r3, #0
 80170c4:	d004      	beq.n	80170d0 <handleCotaData+0x2a0>
		printc(100, "%s \n\r", resBuff);
 80170c6:	4a3c      	ldr	r2, [pc, #240]	@ (80171b8 <handleCotaData+0x388>)
 80170c8:	493f      	ldr	r1, [pc, #252]	@ (80171c8 <handleCotaData+0x398>)
 80170ca:	2064      	movs	r0, #100	@ 0x64
 80170cc:	f7ea fca4 	bl	8001a18 <printc>
	}
	int F_Data = strlen(str1);
 80170d0:	f107 0320 	add.w	r3, r7, #32
 80170d4:	4618      	mov	r0, r3
 80170d6:	f7e9 f8e5 	bl	80002a4 <strlen>
 80170da:	4603      	mov	r3, r0
 80170dc:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
	// Construct the AT command for HTTP POST
	sprintf(command, "AT+QHTTPPOST=%d\r\n", F_Data);
 80170e0:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 80170e4:	f8d7 23d8 	ldr.w	r2, [r7, #984]	@ 0x3d8
 80170e8:	4938      	ldr	r1, [pc, #224]	@ (80171cc <handleCotaData+0x39c>)
 80170ea:	4618      	mov	r0, r3
 80170ec:	f007 fd44 	bl	801eb78 <siprintf>

	// Transmit the command string
	clearBuffer(resBuff, sizeof(resBuff));
 80170f0:	f44f 61fd 	mov.w	r1, #2024	@ 0x7e8
 80170f4:	4830      	ldr	r0, [pc, #192]	@ (80171b8 <handleCotaData+0x388>)
 80170f6:	f7ea fce7 	bl	8001ac8 <clearBuffer>
	HAL_Delay(500);
 80170fa:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80170fe:	f7ee fc73 	bl	80059e8 <HAL_Delay>
	if (EC200_Transmit(command, resBuff, 10000)) {
 8017102:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 8017106:	f242 7210 	movw	r2, #10000	@ 0x2710
 801710a:	492b      	ldr	r1, [pc, #172]	@ (80171b8 <handleCotaData+0x388>)
 801710c:	4618      	mov	r0, r3
 801710e:	f7ea f84d 	bl	80011ac <EC200_Transmit>
//		printc(100, "POST - %s \n\r", resBuff);
	}
	memset(command, 0, 250);
 8017112:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 8017116:	22fa      	movs	r2, #250	@ 0xfa
 8017118:	2100      	movs	r1, #0
 801711a:	4618      	mov	r0, r3
 801711c:	f007 fe88 	bl	801ee30 <memset>
	// Transmit the dataBody
	clearBuffer(resBuff, sizeof(resBuff));
 8017120:	f44f 61fd 	mov.w	r1, #2024	@ 0x7e8
 8017124:	4824      	ldr	r0, [pc, #144]	@ (80171b8 <handleCotaData+0x388>)
 8017126:	f7ea fccf 	bl	8001ac8 <clearBuffer>
	HAL_Delay(500);
 801712a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 801712e:	f7ee fc5b 	bl	80059e8 <HAL_Delay>
	if (EC200_Transmit(str1, resBuff, 10000)) {
 8017132:	f107 0320 	add.w	r3, r7, #32
 8017136:	f242 7210 	movw	r2, #10000	@ 0x2710
 801713a:	491f      	ldr	r1, [pc, #124]	@ (80171b8 <handleCotaData+0x388>)
 801713c:	4618      	mov	r0, r3
 801713e:	f7ea f835 	bl	80011ac <EC200_Transmit>
 8017142:	4603      	mov	r3, r0
 8017144:	2b00      	cmp	r3, #0
 8017146:	d004      	beq.n	8017152 <handleCotaData+0x322>
		printc(100, "%s \n\r", resBuff);
 8017148:	4a1b      	ldr	r2, [pc, #108]	@ (80171b8 <handleCotaData+0x388>)
 801714a:	491f      	ldr	r1, [pc, #124]	@ (80171c8 <handleCotaData+0x398>)
 801714c:	2064      	movs	r0, #100	@ 0x64
 801714e:	f7ea fc63 	bl	8001a18 <printc>
	}
	memset(str1, 0, sizeof(str1));
 8017152:	f107 0320 	add.w	r3, r7, #32
 8017156:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 801715a:	2100      	movs	r1, #0
 801715c:	4618      	mov	r0, r3
 801715e:	f007 fe67 	bl	801ee30 <memset>
	HAL_Delay(500);
 8017162:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8017166:	f7ee fc3f 	bl	80059e8 <HAL_Delay>
	sprintf(command, "AT+QHTTPREAD= %d\r\n", EC_TOUT);
 801716a:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 801716e:	2228      	movs	r2, #40	@ 0x28
 8017170:	4917      	ldr	r1, [pc, #92]	@ (80171d0 <handleCotaData+0x3a0>)
 8017172:	4618      	mov	r0, r3
 8017174:	f007 fd00 	bl	801eb78 <siprintf>
	EC200_Config_Update(command);
 8017178:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 801717c:	4618      	mov	r0, r3
 801717e:	f7ff f843 	bl	8016208 <EC200_Config_Update>
 8017182:	46d5      	mov	sp, sl

}
 8017184:	bf00      	nop
 8017186:	f507 777c 	add.w	r7, r7, #1008	@ 0x3f0
 801718a:	46bd      	mov	sp, r7
 801718c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017190:	08022cc8 	.word	0x08022cc8
 8017194:	20014a54 	.word	0x20014a54
 8017198:	08022c88 	.word	0x08022c88
 801719c:	08022b20 	.word	0x08022b20
 80171a0:	08022b30 	.word	0x08022b30
 80171a4:	200000a0 	.word	0x200000a0
 80171a8:	08022b58 	.word	0x08022b58
 80171ac:	08022b38 	.word	0x08022b38
 80171b0:	08022b60 	.word	0x08022b60
 80171b4:	08022b74 	.word	0x08022b74
 80171b8:	2001422c 	.word	0x2001422c
 80171bc:	20014bd8 	.word	0x20014bd8
 80171c0:	08022b88 	.word	0x08022b88
 80171c4:	08022ba0 	.word	0x08022ba0
 80171c8:	08022cac 	.word	0x08022cac
 80171cc:	08022be4 	.word	0x08022be4
 80171d0:	08022cb4 	.word	0x08022cb4

080171d4 <handleErrorResponse>:

void handleErrorResponse() {
 80171d4:	b580      	push	{r7, lr}
 80171d6:	af00      	add	r7, sp, #0
	printc(100, "Received Error Response\n");
 80171d8:	4902      	ldr	r1, [pc, #8]	@ (80171e4 <handleErrorResponse+0x10>)
 80171da:	2064      	movs	r0, #100	@ 0x64
 80171dc:	f7ea fc1c 	bl	8001a18 <printc>
// Add your implementation here
}
 80171e0:	bf00      	nop
 80171e2:	bd80      	pop	{r7, pc}
 80171e4:	08022ce8 	.word	0x08022ce8

080171e8 <handleFotaData>:

bool handleFotaData() {
 80171e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171ec:	f2ad 4d14 	subw	sp, sp, #1044	@ 0x414
 80171f0:	af08      	add	r7, sp, #32
//	char version[] ={ "1.0.01" };
	uint8_t str[100] = { 0 };
 80171f2:	2300      	movs	r3, #0
 80171f4:	f8c7 3368 	str.w	r3, [r7, #872]	@ 0x368
 80171f8:	f507 735b 	add.w	r3, r7, #876	@ 0x36c
 80171fc:	2260      	movs	r2, #96	@ 0x60
 80171fe:	2100      	movs	r1, #0
 8017200:	4618      	mov	r0, r3
 8017202:	f007 fe15 	bl	801ee30 <memset>
	char dataBody[300] = { 0 };
 8017206:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 801720a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 801720e:	2200      	movs	r2, #0
 8017210:	601a      	str	r2, [r3, #0]
 8017212:	3304      	adds	r3, #4
 8017214:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8017218:	2100      	movs	r1, #0
 801721a:	4618      	mov	r0, r3
 801721c:	f007 fe08 	bl	801ee30 <memset>
	char str1[300] = { 0 };
 8017220:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 8017224:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8017228:	2200      	movs	r2, #0
 801722a:	601a      	str	r2, [r3, #0]
 801722c:	3304      	adds	r3, #4
 801722e:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8017232:	2100      	movs	r1, #0
 8017234:	4618      	mov	r0, r3
 8017236:	f007 fdfb 	bl	801ee30 <memset>
	char command[250] = { 0 };
 801723a:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 801723e:	f5a3 7377 	sub.w	r3, r3, #988	@ 0x3dc
 8017242:	2200      	movs	r2, #0
 8017244:	601a      	str	r2, [r3, #0]
 8017246:	3304      	adds	r3, #4
 8017248:	22f6      	movs	r2, #246	@ 0xf6
 801724a:	2100      	movs	r1, #0
 801724c:	4618      	mov	r0, r3
 801724e:	f007 fdef 	bl	801ee30 <memset>

	redoIntouchConnect: snprintf(dataBody, sizeof(dataBody),
 8017252:	f7eb fc01 	bl	8002a58 <getUpdateVersion>
 8017256:	4603      	mov	r3, r0
 8017258:	f507 700f 	add.w	r0, r7, #572	@ 0x23c
 801725c:	4ab1      	ldr	r2, [pc, #708]	@ (8017524 <handleFotaData+0x33c>)
 801725e:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8017262:	f007 fc55 	bl	801eb10 <sniprintf>
			"{\"version\":\"%s\"}", getUpdateVersion());
//	snprintf(dataBody, sizeof(dataBody), "{\"version\":\"%s\"}",
//			version);
	printc(100, "String = %s \r\n", dataBody);
 8017266:	f507 730f 	add.w	r3, r7, #572	@ 0x23c
 801726a:	461a      	mov	r2, r3
 801726c:	49ae      	ldr	r1, [pc, #696]	@ (8017528 <handleFotaData+0x340>)
 801726e:	2064      	movs	r0, #100	@ 0x64
 8017270:	f7ea fbd2 	bl	8001a18 <printc>
//	ReadF_Loc(2, 1);
	cKey_update(0);
 8017274:	2000      	movs	r0, #0
 8017276:	f7ec fbbf 	bl	80039f8 <cKey_update>
	int array_length = encrypt(dataBody, str);
 801727a:	f507 725a 	add.w	r2, r7, #872	@ 0x368
 801727e:	f507 730f 	add.w	r3, r7, #572	@ 0x23c
 8017282:	4611      	mov	r1, r2
 8017284:	4618      	mov	r0, r3
 8017286:	f7ea fe03 	bl	8001e90 <encrypt>
 801728a:	f8c7 03e8 	str.w	r0, [r7, #1000]	@ 0x3e8

	char hex_string[array_length];
 801728e:	f8d7 43e8 	ldr.w	r4, [r7, #1000]	@ 0x3e8
 8017292:	466b      	mov	r3, sp
 8017294:	607b      	str	r3, [r7, #4]
 8017296:	1e63      	subs	r3, r4, #1
 8017298:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4
 801729c:	4622      	mov	r2, r4
 801729e:	2300      	movs	r3, #0
 80172a0:	4615      	mov	r5, r2
 80172a2:	461e      	mov	r6, r3
 80172a4:	f04f 0200 	mov.w	r2, #0
 80172a8:	f04f 0300 	mov.w	r3, #0
 80172ac:	00f3      	lsls	r3, r6, #3
 80172ae:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 80172b2:	00ea      	lsls	r2, r5, #3
 80172b4:	4622      	mov	r2, r4
 80172b6:	2300      	movs	r3, #0
 80172b8:	60ba      	str	r2, [r7, #8]
 80172ba:	60fb      	str	r3, [r7, #12]
 80172bc:	f04f 0200 	mov.w	r2, #0
 80172c0:	f04f 0300 	mov.w	r3, #0
 80172c4:	68f9      	ldr	r1, [r7, #12]
 80172c6:	00cb      	lsls	r3, r1, #3
 80172c8:	68b9      	ldr	r1, [r7, #8]
 80172ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80172ce:	68b9      	ldr	r1, [r7, #8]
 80172d0:	00ca      	lsls	r2, r1, #3
 80172d2:	4623      	mov	r3, r4
 80172d4:	3307      	adds	r3, #7
 80172d6:	08db      	lsrs	r3, r3, #3
 80172d8:	00db      	lsls	r3, r3, #3
 80172da:	ebad 0d03 	sub.w	sp, sp, r3
 80172de:	ab08      	add	r3, sp, #32
 80172e0:	3300      	adds	r3, #0
 80172e2:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0

	for (int i = 0; i < array_length; i++) {
 80172e6:	2300      	movs	r3, #0
 80172e8:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
 80172ec:	e015      	b.n	801731a <handleFotaData+0x132>
		sprintf(hex_string + (i * 2), "%02X", str[i]);
 80172ee:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	@ 0x3ec
 80172f2:	005b      	lsls	r3, r3, #1
 80172f4:	461a      	mov	r2, r3
 80172f6:	f8d7 33e0 	ldr.w	r3, [r7, #992]	@ 0x3e0
 80172fa:	1898      	adds	r0, r3, r2
 80172fc:	f507 725a 	add.w	r2, r7, #872	@ 0x368
 8017300:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	@ 0x3ec
 8017304:	4413      	add	r3, r2
 8017306:	781b      	ldrb	r3, [r3, #0]
 8017308:	461a      	mov	r2, r3
 801730a:	4988      	ldr	r1, [pc, #544]	@ (801752c <handleFotaData+0x344>)
 801730c:	f007 fc34 	bl	801eb78 <siprintf>
	for (int i = 0; i < array_length; i++) {
 8017310:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	@ 0x3ec
 8017314:	3301      	adds	r3, #1
 8017316:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
 801731a:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 801731e:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	@ 0x3e8
 8017322:	429a      	cmp	r2, r3
 8017324:	dbe3      	blt.n	80172ee <handleFotaData+0x106>
	}

	memset(dataBody, '\0', sizeof(dataBody));
 8017326:	f507 730f 	add.w	r3, r7, #572	@ 0x23c
 801732a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 801732e:	2100      	movs	r1, #0
 8017330:	4618      	mov	r0, r3
 8017332:	f007 fd7d 	bl	801ee30 <memset>
	memcpy(dataBody, hex_string, strlen(hex_string));
 8017336:	f8d7 03e0 	ldr.w	r0, [r7, #992]	@ 0x3e0
 801733a:	f7e8 ffb3 	bl	80002a4 <strlen>
 801733e:	4602      	mov	r2, r0
 8017340:	f507 730f 	add.w	r3, r7, #572	@ 0x23c
 8017344:	f8d7 13e0 	ldr.w	r1, [r7, #992]	@ 0x3e0
 8017348:	4618      	mov	r0, r3
 801734a:	f007 fee4 	bl	801f116 <memcpy>
	memset(hex_string, 0, sizeof(hex_string));
 801734e:	4623      	mov	r3, r4
 8017350:	461a      	mov	r2, r3
 8017352:	2100      	movs	r1, #0
 8017354:	f8d7 03e0 	ldr.w	r0, [r7, #992]	@ 0x3e0
 8017358:	f007 fd6a 	bl	801ee30 <memset>

// Calculate the checksum

	uint8_t checksum = Calculate_CRC8((uint8_t*) dataBody, strlen(dataBody));
 801735c:	f507 730f 	add.w	r3, r7, #572	@ 0x23c
 8017360:	4618      	mov	r0, r3
 8017362:	f7e8 ff9f 	bl	80002a4 <strlen>
 8017366:	4602      	mov	r2, r0
 8017368:	f507 730f 	add.w	r3, r7, #572	@ 0x23c
 801736c:	4611      	mov	r1, r2
 801736e:	4618      	mov	r0, r3
 8017370:	f000 fc04 	bl	8017b7c <Calculate_CRC8>
 8017374:	4603      	mov	r3, r0
 8017376:	f887 33df 	strb.w	r3, [r7, #991]	@ 0x3df
	memset(str1, 0, sizeof(str1));
 801737a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801737e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8017382:	2100      	movs	r1, #0
 8017384:	4618      	mov	r0, r3
 8017386:	f007 fd53 	bl	801ee30 <memset>

	snprintf(str1, sizeof(str1), "hexKey=%s%s,%d,%s,%d,%s,%0X%c",
 801738a:	f897 33df 	ldrb.w	r3, [r7, #991]	@ 0x3df
 801738e:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8017392:	222a      	movs	r2, #42	@ 0x2a
 8017394:	9206      	str	r2, [sp, #24]
 8017396:	9305      	str	r3, [sp, #20]
 8017398:	f507 730f 	add.w	r3, r7, #572	@ 0x23c
 801739c:	9304      	str	r3, [sp, #16]
 801739e:	2301      	movs	r3, #1
 80173a0:	9303      	str	r3, [sp, #12]
 80173a2:	4b63      	ldr	r3, [pc, #396]	@ (8017530 <handleFotaData+0x348>)
 80173a4:	9302      	str	r3, [sp, #8]
 80173a6:	2306      	movs	r3, #6
 80173a8:	9301      	str	r3, [sp, #4]
 80173aa:	4b62      	ldr	r3, [pc, #392]	@ (8017534 <handleFotaData+0x34c>)
 80173ac:	9300      	str	r3, [sp, #0]
 80173ae:	4b62      	ldr	r3, [pc, #392]	@ (8017538 <handleFotaData+0x350>)
 80173b0:	4a62      	ldr	r2, [pc, #392]	@ (801753c <handleFotaData+0x354>)
 80173b2:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80173b6:	f007 fbab 	bl	801eb10 <sniprintf>
			ComKeys[0], header, 6, &Imei, 1, dataBody, checksum, Delimiter);

	printc(100, "Command -  %s \n\r", str1);
 80173ba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80173be:	461a      	mov	r2, r3
 80173c0:	495f      	ldr	r1, [pc, #380]	@ (8017540 <handleFotaData+0x358>)
 80173c2:	2064      	movs	r0, #100	@ 0x64
 80173c4:	f7ea fb28 	bl	8001a18 <printc>

	sprintf(command, "AT+QHTTPURL=%d,%d\r\n", strlen(URL), EC_TOUT);
 80173c8:	f107 0014 	add.w	r0, r7, #20
 80173cc:	2328      	movs	r3, #40	@ 0x28
 80173ce:	2232      	movs	r2, #50	@ 0x32
 80173d0:	495c      	ldr	r1, [pc, #368]	@ (8017544 <handleFotaData+0x35c>)
 80173d2:	f007 fbd1 	bl	801eb78 <siprintf>
	clearBuffer(resBuff, sizeof(resBuff));
 80173d6:	f44f 61fd 	mov.w	r1, #2024	@ 0x7e8
 80173da:	485b      	ldr	r0, [pc, #364]	@ (8017548 <handleFotaData+0x360>)
 80173dc:	f7ea fb74 	bl	8001ac8 <clearBuffer>
	if (EC200_Transmit(command, resBuff, 10000)) {
 80173e0:	f107 0314 	add.w	r3, r7, #20
 80173e4:	f242 7210 	movw	r2, #10000	@ 0x2710
 80173e8:	4957      	ldr	r1, [pc, #348]	@ (8017548 <handleFotaData+0x360>)
 80173ea:	4618      	mov	r0, r3
 80173ec:	f7e9 fede 	bl	80011ac <EC200_Transmit>
 80173f0:	4603      	mov	r3, r0
 80173f2:	2b00      	cmp	r3, #0
 80173f4:	d004      	beq.n	8017400 <handleFotaData+0x218>
		printc(100, "AT+QHTTPURL -  %s \n\r", key_resBuffer);
 80173f6:	4a55      	ldr	r2, [pc, #340]	@ (801754c <handleFotaData+0x364>)
 80173f8:	4955      	ldr	r1, [pc, #340]	@ (8017550 <handleFotaData+0x368>)
 80173fa:	2064      	movs	r0, #100	@ 0x64
 80173fc:	f7ea fb0c 	bl	8001a18 <printc>
	}
	memset(command, 0, 250);
 8017400:	f107 0314 	add.w	r3, r7, #20
 8017404:	22fa      	movs	r2, #250	@ 0xfa
 8017406:	2100      	movs	r1, #0
 8017408:	4618      	mov	r0, r3
 801740a:	f007 fd11 	bl	801ee30 <memset>

	// Send HTTP URL
	clearBuffer(resBuff, sizeof(resBuff));
 801740e:	f44f 61fd 	mov.w	r1, #2024	@ 0x7e8
 8017412:	484d      	ldr	r0, [pc, #308]	@ (8017548 <handleFotaData+0x360>)
 8017414:	f7ea fb58 	bl	8001ac8 <clearBuffer>
	HAL_Delay(500);
 8017418:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 801741c:	f7ee fae4 	bl	80059e8 <HAL_Delay>
	if (EC200_Transmit(URL, resBuff, 10000)) {
 8017420:	f242 7210 	movw	r2, #10000	@ 0x2710
 8017424:	4948      	ldr	r1, [pc, #288]	@ (8017548 <handleFotaData+0x360>)
 8017426:	484b      	ldr	r0, [pc, #300]	@ (8017554 <handleFotaData+0x36c>)
 8017428:	f7e9 fec0 	bl	80011ac <EC200_Transmit>
 801742c:	4603      	mov	r3, r0
 801742e:	2b00      	cmp	r3, #0
 8017430:	d004      	beq.n	801743c <handleFotaData+0x254>
		printc(100, "%s \n\r", resBuff);
 8017432:	4a45      	ldr	r2, [pc, #276]	@ (8017548 <handleFotaData+0x360>)
 8017434:	4948      	ldr	r1, [pc, #288]	@ (8017558 <handleFotaData+0x370>)
 8017436:	2064      	movs	r0, #100	@ 0x64
 8017438:	f7ea faee 	bl	8001a18 <printc>
	}
	int F_Data = strlen(str1);
 801743c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8017440:	4618      	mov	r0, r3
 8017442:	f7e8 ff2f 	bl	80002a4 <strlen>
 8017446:	4603      	mov	r3, r0
 8017448:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
	// Construct the AT command for HTTP POST
	sprintf(command, "AT+QHTTPPOST=%d\r\n", F_Data);
 801744c:	f107 0314 	add.w	r3, r7, #20
 8017450:	f8d7 23d8 	ldr.w	r2, [r7, #984]	@ 0x3d8
 8017454:	4941      	ldr	r1, [pc, #260]	@ (801755c <handleFotaData+0x374>)
 8017456:	4618      	mov	r0, r3
 8017458:	f007 fb8e 	bl	801eb78 <siprintf>

	// Transmit the command string
	clearBuffer(resBuff, sizeof(resBuff));
 801745c:	f44f 61fd 	mov.w	r1, #2024	@ 0x7e8
 8017460:	4839      	ldr	r0, [pc, #228]	@ (8017548 <handleFotaData+0x360>)
 8017462:	f7ea fb31 	bl	8001ac8 <clearBuffer>
	HAL_Delay(500);
 8017466:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 801746a:	f7ee fabd 	bl	80059e8 <HAL_Delay>
	if (EC200_Transmit(command, resBuff, 10000)) {
 801746e:	f107 0314 	add.w	r3, r7, #20
 8017472:	f242 7210 	movw	r2, #10000	@ 0x2710
 8017476:	4934      	ldr	r1, [pc, #208]	@ (8017548 <handleFotaData+0x360>)
 8017478:	4618      	mov	r0, r3
 801747a:	f7e9 fe97 	bl	80011ac <EC200_Transmit>
 801747e:	4603      	mov	r3, r0
 8017480:	2b00      	cmp	r3, #0
 8017482:	d004      	beq.n	801748e <handleFotaData+0x2a6>
		printc(100, "POST - %s \n\r", resBuff);
 8017484:	4a30      	ldr	r2, [pc, #192]	@ (8017548 <handleFotaData+0x360>)
 8017486:	4936      	ldr	r1, [pc, #216]	@ (8017560 <handleFotaData+0x378>)
 8017488:	2064      	movs	r0, #100	@ 0x64
 801748a:	f7ea fac5 	bl	8001a18 <printc>
	}
	memset(command, 0, 250);
 801748e:	f107 0314 	add.w	r3, r7, #20
 8017492:	22fa      	movs	r2, #250	@ 0xfa
 8017494:	2100      	movs	r1, #0
 8017496:	4618      	mov	r0, r3
 8017498:	f007 fcca 	bl	801ee30 <memset>
	// Transmit the dataBody
	clearBuffer(resBuff, sizeof(resBuff));
 801749c:	f44f 61fd 	mov.w	r1, #2024	@ 0x7e8
 80174a0:	4829      	ldr	r0, [pc, #164]	@ (8017548 <handleFotaData+0x360>)
 80174a2:	f7ea fb11 	bl	8001ac8 <clearBuffer>
	HAL_Delay(500);
 80174a6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80174aa:	f7ee fa9d 	bl	80059e8 <HAL_Delay>
	if (EC200_Transmit(str1, resBuff, 10000)) {
 80174ae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80174b2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80174b6:	4924      	ldr	r1, [pc, #144]	@ (8017548 <handleFotaData+0x360>)
 80174b8:	4618      	mov	r0, r3
 80174ba:	f7e9 fe77 	bl	80011ac <EC200_Transmit>
 80174be:	4603      	mov	r3, r0
 80174c0:	2b00      	cmp	r3, #0
 80174c2:	d004      	beq.n	80174ce <handleFotaData+0x2e6>
		printc(100, "%s \n\r", resBuff);
 80174c4:	4a20      	ldr	r2, [pc, #128]	@ (8017548 <handleFotaData+0x360>)
 80174c6:	4924      	ldr	r1, [pc, #144]	@ (8017558 <handleFotaData+0x370>)
 80174c8:	2064      	movs	r0, #100	@ 0x64
 80174ca:	f7ea faa5 	bl	8001a18 <printc>
	}

	memset(str1, 0, sizeof(str1));
 80174ce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80174d2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80174d6:	2100      	movs	r1, #0
 80174d8:	4618      	mov	r0, r3
 80174da:	f007 fca9 	bl	801ee30 <memset>
	HAL_Delay(500);
 80174de:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80174e2:	f7ee fa81 	bl	80059e8 <HAL_Delay>
	sprintf(command, "AT+QHTTPREAD= %d\r\n", EC_TOUT);
 80174e6:	f107 0314 	add.w	r3, r7, #20
 80174ea:	2228      	movs	r2, #40	@ 0x28
 80174ec:	491d      	ldr	r1, [pc, #116]	@ (8017564 <handleFotaData+0x37c>)
 80174ee:	4618      	mov	r0, r3
 80174f0:	f007 fb42 	bl	801eb78 <siprintf>

	if (!EC200_Data_Fetch(command)) {
 80174f4:	f107 0314 	add.w	r3, r7, #20
 80174f8:	4618      	mov	r0, r3
 80174fa:	f7fe fbd5 	bl	8015ca8 <EC200_Data_Fetch>
 80174fe:	4603      	mov	r3, r0
 8017500:	2b00      	cmp	r3, #0
 8017502:	d133      	bne.n	801756c <handleFotaData+0x384>
		if (intuchrRedo >= 3)
 8017504:	4b18      	ldr	r3, [pc, #96]	@ (8017568 <handleFotaData+0x380>)
 8017506:	781b      	ldrb	r3, [r3, #0]
 8017508:	2b02      	cmp	r3, #2
 801750a:	d901      	bls.n	8017510 <handleFotaData+0x328>
			return false;
 801750c:	2300      	movs	r3, #0
 801750e:	e0f2      	b.n	80176f6 <handleFotaData+0x50e>
		intuchrRedo++;
 8017510:	4b15      	ldr	r3, [pc, #84]	@ (8017568 <handleFotaData+0x380>)
 8017512:	781b      	ldrb	r3, [r3, #0]
 8017514:	3301      	adds	r3, #1
 8017516:	b2da      	uxtb	r2, r3
 8017518:	4b13      	ldr	r3, [pc, #76]	@ (8017568 <handleFotaData+0x380>)
 801751a:	701a      	strb	r2, [r3, #0]
		goto redoIntouchConnect;
 801751c:	f8d7 d004 	ldr.w	sp, [r7, #4]
 8017520:	e697      	b.n	8017252 <handleFotaData+0x6a>
 8017522:	bf00      	nop
 8017524:	08022d04 	.word	0x08022d04
 8017528:	08022d18 	.word	0x08022d18
 801752c:	08022b30 	.word	0x08022b30
 8017530:	20014a54 	.word	0x20014a54
 8017534:	08022b58 	.word	0x08022b58
 8017538:	20014acc 	.word	0x20014acc
 801753c:	08022b38 	.word	0x08022b38
 8017540:	08022d28 	.word	0x08022d28
 8017544:	08022b74 	.word	0x08022b74
 8017548:	2001422c 	.word	0x2001422c
 801754c:	20014bd8 	.word	0x20014bd8
 8017550:	08022b88 	.word	0x08022b88
 8017554:	08022ba0 	.word	0x08022ba0
 8017558:	08022cac 	.word	0x08022cac
 801755c:	08022be4 	.word	0x08022be4
 8017560:	08022d3c 	.word	0x08022d3c
 8017564:	08022cb4 	.word	0x08022cb4
 8017568:	20014a64 	.word	0x20014a64

	}

	F_Data = 0;
 801756c:	2300      	movs	r3, #0
 801756e:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
	F_Data = strlen(Decrypt_d);
 8017572:	4865      	ldr	r0, [pc, #404]	@ (8017708 <handleFotaData+0x520>)
 8017574:	f7e8 fe96 	bl	80002a4 <strlen>
 8017578:	4603      	mov	r3, r0
 801757a:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
	char DURL[F_Data];
 801757e:	f8d7 13d8 	ldr.w	r1, [r7, #984]	@ 0x3d8
 8017582:	1e4b      	subs	r3, r1, #1
 8017584:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
 8017588:	460a      	mov	r2, r1
 801758a:	2300      	movs	r3, #0
 801758c:	4692      	mov	sl, r2
 801758e:	469b      	mov	fp, r3
 8017590:	f04f 0200 	mov.w	r2, #0
 8017594:	f04f 0300 	mov.w	r3, #0
 8017598:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 801759c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80175a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80175a4:	460a      	mov	r2, r1
 80175a6:	2300      	movs	r3, #0
 80175a8:	4690      	mov	r8, r2
 80175aa:	4699      	mov	r9, r3
 80175ac:	f04f 0200 	mov.w	r2, #0
 80175b0:	f04f 0300 	mov.w	r3, #0
 80175b4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80175b8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80175bc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80175c0:	460b      	mov	r3, r1
 80175c2:	3307      	adds	r3, #7
 80175c4:	08db      	lsrs	r3, r3, #3
 80175c6:	00db      	lsls	r3, r3, #3
 80175c8:	ebad 0d03 	sub.w	sp, sp, r3
 80175cc:	ab08      	add	r3, sp, #32
 80175ce:	3300      	adds	r3, #0
 80175d0:	f8c7 33d0 	str.w	r3, [r7, #976]	@ 0x3d0
	memset(DURL, 0, sizeof(DURL));
 80175d4:	460b      	mov	r3, r1
 80175d6:	461a      	mov	r2, r3
 80175d8:	2100      	movs	r1, #0
 80175da:	f8d7 03d0 	ldr.w	r0, [r7, #976]	@ 0x3d0
 80175de:	f007 fc27 	bl	801ee30 <memset>
	uint8_t paddingVal = Decrypt_d[F_Data - 1];
 80175e2:	f8d7 33d8 	ldr.w	r3, [r7, #984]	@ 0x3d8
 80175e6:	3b01      	subs	r3, #1
 80175e8:	4a47      	ldr	r2, [pc, #284]	@ (8017708 <handleFotaData+0x520>)
 80175ea:	5cd3      	ldrb	r3, [r2, r3]
 80175ec:	f887 33cf 	strb.w	r3, [r7, #975]	@ 0x3cf
	printc(1000, "Download-URL = %s \r\n", Decrypt_d);
 80175f0:	4a45      	ldr	r2, [pc, #276]	@ (8017708 <handleFotaData+0x520>)
 80175f2:	4946      	ldr	r1, [pc, #280]	@ (801770c <handleFotaData+0x524>)
 80175f4:	20e8      	movs	r0, #232	@ 0xe8
 80175f6:	f7ea fa0f 	bl	8001a18 <printc>
	memcpy(DURL, Decrypt_d, F_Data - paddingVal);
 80175fa:	f897 33cf 	ldrb.w	r3, [r7, #975]	@ 0x3cf
 80175fe:	f8d7 23d8 	ldr.w	r2, [r7, #984]	@ 0x3d8
 8017602:	1ad3      	subs	r3, r2, r3
 8017604:	461a      	mov	r2, r3
 8017606:	4940      	ldr	r1, [pc, #256]	@ (8017708 <handleFotaData+0x520>)
 8017608:	f8d7 03d0 	ldr.w	r0, [r7, #976]	@ 0x3d0
 801760c:	f007 fd83 	bl	801f116 <memcpy>
	print(1000, DURL, strlen(DURL));
 8017610:	f8d7 03d0 	ldr.w	r0, [r7, #976]	@ 0x3d0
 8017614:	f7e8 fe46 	bl	80002a4 <strlen>
 8017618:	4603      	mov	r3, r0
 801761a:	461a      	mov	r2, r3
 801761c:	f8d7 13d0 	ldr.w	r1, [r7, #976]	@ 0x3d0
 8017620:	20e8      	movs	r0, #232	@ 0xe8
 8017622:	f7ea fa35 	bl	8001a90 <print>
	memset(command, 0, 250);
 8017626:	f107 0314 	add.w	r3, r7, #20
 801762a:	22fa      	movs	r2, #250	@ 0xfa
 801762c:	2100      	movs	r1, #0
 801762e:	4618      	mov	r0, r3
 8017630:	f007 fbfe 	bl	801ee30 <memset>

	sprintf(command, "AT+QHTTPURL=%d,%d\r\n", strlen(DURL), 30);
 8017634:	f8d7 03d0 	ldr.w	r0, [r7, #976]	@ 0x3d0
 8017638:	f7e8 fe34 	bl	80002a4 <strlen>
 801763c:	4602      	mov	r2, r0
 801763e:	f107 0014 	add.w	r0, r7, #20
 8017642:	231e      	movs	r3, #30
 8017644:	4932      	ldr	r1, [pc, #200]	@ (8017710 <handleFotaData+0x528>)
 8017646:	f007 fa97 	bl	801eb78 <siprintf>
	clearBuffer(resBuff, sizeof(resBuff));
 801764a:	f44f 61fd 	mov.w	r1, #2024	@ 0x7e8
 801764e:	4831      	ldr	r0, [pc, #196]	@ (8017714 <handleFotaData+0x52c>)
 8017650:	f7ea fa3a 	bl	8001ac8 <clearBuffer>
	HAL_Delay(100);
 8017654:	2064      	movs	r0, #100	@ 0x64
 8017656:	f7ee f9c7 	bl	80059e8 <HAL_Delay>
	if (EC200_Transmit(command, resBuff, 10000)) {
 801765a:	f107 0314 	add.w	r3, r7, #20
 801765e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8017662:	492c      	ldr	r1, [pc, #176]	@ (8017714 <handleFotaData+0x52c>)
 8017664:	4618      	mov	r0, r3
 8017666:	f7e9 fda1 	bl	80011ac <EC200_Transmit>
 801766a:	4603      	mov	r3, r0
 801766c:	2b00      	cmp	r3, #0
 801766e:	d004      	beq.n	801767a <handleFotaData+0x492>
		printc(100, "%s \n\r", resBuff);
 8017670:	4a28      	ldr	r2, [pc, #160]	@ (8017714 <handleFotaData+0x52c>)
 8017672:	4929      	ldr	r1, [pc, #164]	@ (8017718 <handleFotaData+0x530>)
 8017674:	2064      	movs	r0, #100	@ 0x64
 8017676:	f7ea f9cf 	bl	8001a18 <printc>
	}
	clearBuffer(resBuff, sizeof(resBuff));
 801767a:	f44f 61fd 	mov.w	r1, #2024	@ 0x7e8
 801767e:	4825      	ldr	r0, [pc, #148]	@ (8017714 <handleFotaData+0x52c>)
 8017680:	f7ea fa22 	bl	8001ac8 <clearBuffer>
	if (EC200_Transmit(DURL, resBuff, 20000)) {
 8017684:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8017688:	4922      	ldr	r1, [pc, #136]	@ (8017714 <handleFotaData+0x52c>)
 801768a:	f8d7 03d0 	ldr.w	r0, [r7, #976]	@ 0x3d0
 801768e:	f7e9 fd8d 	bl	80011ac <EC200_Transmit>
 8017692:	4603      	mov	r3, r0
 8017694:	2b00      	cmp	r3, #0
 8017696:	d004      	beq.n	80176a2 <handleFotaData+0x4ba>
		printc(100, "URL%s \n\r", resBuff);
 8017698:	4a1e      	ldr	r2, [pc, #120]	@ (8017714 <handleFotaData+0x52c>)
 801769a:	4920      	ldr	r1, [pc, #128]	@ (801771c <handleFotaData+0x534>)
 801769c:	2064      	movs	r0, #100	@ 0x64
 801769e:	f7ea f9bb 	bl	8001a18 <printc>
	}

	memset(command, 0, 250);
 80176a2:	f107 0314 	add.w	r3, r7, #20
 80176a6:	22fa      	movs	r2, #250	@ 0xfa
 80176a8:	2100      	movs	r1, #0
 80176aa:	4618      	mov	r0, r3
 80176ac:	f007 fbc0 	bl	801ee30 <memset>
	// Send HTTP GET request
	clearBuffer(resBuff, sizeof(resBuff));
 80176b0:	f44f 61fd 	mov.w	r1, #2024	@ 0x7e8
 80176b4:	4817      	ldr	r0, [pc, #92]	@ (8017714 <handleFotaData+0x52c>)
 80176b6:	f7ea fa07 	bl	8001ac8 <clearBuffer>
	if (EC200_Transmit("AT+QHTTPGET\r\n", resBuff, 20000)) {
 80176ba:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80176be:	4915      	ldr	r1, [pc, #84]	@ (8017714 <handleFotaData+0x52c>)
 80176c0:	4817      	ldr	r0, [pc, #92]	@ (8017720 <handleFotaData+0x538>)
 80176c2:	f7e9 fd73 	bl	80011ac <EC200_Transmit>
 80176c6:	4603      	mov	r3, r0
 80176c8:	2b00      	cmp	r3, #0
 80176ca:	d010      	beq.n	80176ee <handleFotaData+0x506>
		printc(100, "%s \n\r", resBuff);
 80176cc:	4a11      	ldr	r2, [pc, #68]	@ (8017714 <handleFotaData+0x52c>)
 80176ce:	4912      	ldr	r1, [pc, #72]	@ (8017718 <handleFotaData+0x530>)
 80176d0:	2064      	movs	r0, #100	@ 0x64
 80176d2:	f7ea f9a1 	bl	8001a18 <printc>
		clearBuffer(resBuff, sizeof(resBuff));
 80176d6:	f44f 61fd 	mov.w	r1, #2024	@ 0x7e8
 80176da:	480e      	ldr	r0, [pc, #56]	@ (8017714 <handleFotaData+0x52c>)
 80176dc:	f7ea f9f4 	bl	8001ac8 <clearBuffer>
		switchIdle();
 80176e0:	f7ea f956 	bl	8001990 <switchIdle>
		wait_for_response(resBuff, 20000);
 80176e4:	f644 6120 	movw	r1, #20000	@ 0x4e20
 80176e8:	480a      	ldr	r0, [pc, #40]	@ (8017714 <handleFotaData+0x52c>)
 80176ea:	f7e9 fd0f 	bl	800110c <wait_for_response>
	}
	// Read the Response
	EC200_File_save("AT+QHTTPREAD=80\r\n");
 80176ee:	480d      	ldr	r0, [pc, #52]	@ (8017724 <handleFotaData+0x53c>)
 80176f0:	f7fe fbc2 	bl	8015e78 <EC200_File_save>

	return true;
 80176f4:	2301      	movs	r3, #1
			return false;
 80176f6:	f8d7 d004 	ldr.w	sp, [r7, #4]
}
 80176fa:	4618      	mov	r0, r3
 80176fc:	f507 777d 	add.w	r7, r7, #1012	@ 0x3f4
 8017700:	46bd      	mov	sp, r7
 8017702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017706:	bf00      	nop
 8017708:	20013e2c 	.word	0x20013e2c
 801770c:	08022d4c 	.word	0x08022d4c
 8017710:	08022b74 	.word	0x08022b74
 8017714:	2001422c 	.word	0x2001422c
 8017718:	08022cac 	.word	0x08022cac
 801771c:	08022d64 	.word	0x08022d64
 8017720:	08022d70 	.word	0x08022d70
 8017724:	08022d80 	.word	0x08022d80

08017728 <processMessage>:

// Main function to process incoming messages
bool processMessage(int messageType) {
 8017728:	b580      	push	{r7, lr}
 801772a:	b082      	sub	sp, #8
 801772c:	af00      	add	r7, sp, #0
 801772e:	6078      	str	r0, [r7, #4]
	switch (messageType) {
 8017730:	687b      	ldr	r3, [r7, #4]
 8017732:	3b01      	subs	r3, #1
 8017734:	2b08      	cmp	r3, #8
 8017736:	d82b      	bhi.n	8017790 <processMessage+0x68>
 8017738:	a201      	add	r2, pc, #4	@ (adr r2, 8017740 <processMessage+0x18>)
 801773a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801773e:	bf00      	nop
 8017740:	08017765 	.word	0x08017765
 8017744:	0801776b 	.word	0x0801776b
 8017748:	08017771 	.word	0x08017771
 801774c:	08017777 	.word	0x08017777
 8017750:	0801777d 	.word	0x0801777d
 8017754:	08017783 	.word	0x08017783
 8017758:	08017791 	.word	0x08017791
 801775c:	08017791 	.word	0x08017791
 8017760:	0801778b 	.word	0x0801778b
	case 1:
		handleKeysRequest();  // Finished
 8017764:	f7ff f99e 	bl	8016aa4 <handleKeysRequest>
		break;
 8017768:	e017      	b.n	801779a <processMessage+0x72>
	case 2:
		handleKeysUpdate();
 801776a:	f7ff fb43 	bl	8016df4 <handleKeysUpdate>
		break;
 801776e:	e014      	b.n	801779a <processMessage+0x72>
	case 3:
		handleFotaDetails();
 8017770:	f7ff fb4a 	bl	8016e08 <handleFotaDetails>
		break;
 8017774:	e011      	b.n	801779a <processMessage+0x72>
	case 4:
		handleVersionStatus();
 8017776:	f7ff fb51 	bl	8016e1c <handleVersionStatus>
		break;
 801777a:	e00e      	b.n	801779a <processMessage+0x72>
	case 5:
		handleCotaData();
 801777c:	f7ff fb58 	bl	8016e30 <handleCotaData>
		break;
 8017780:	e00b      	b.n	801779a <processMessage+0x72>
	case 6:
		return handleFotaData();           // in-progress
 8017782:	f7ff fd31 	bl	80171e8 <handleFotaData>
 8017786:	4603      	mov	r3, r0
 8017788:	e008      	b.n	801779c <processMessage+0x74>
		break;
	case 9:
		handleErrorResponse();
 801778a:	f7ff fd23 	bl	80171d4 <handleErrorResponse>
		break;
 801778e:	e004      	b.n	801779a <processMessage+0x72>
	default:
		printc(100, "Invalid Message Type\n");
 8017790:	4904      	ldr	r1, [pc, #16]	@ (80177a4 <processMessage+0x7c>)
 8017792:	2064      	movs	r0, #100	@ 0x64
 8017794:	f7ea f940 	bl	8001a18 <printc>
		break;
 8017798:	bf00      	nop
	}
	return false;
 801779a:	2300      	movs	r3, #0
}
 801779c:	4618      	mov	r0, r3
 801779e:	3708      	adds	r7, #8
 80177a0:	46bd      	mov	sp, r7
 80177a2:	bd80      	pop	{r7, pc}
 80177a4:	08022d94 	.word	0x08022d94

080177a8 <Config_Update>:

void Config_Update(char *cmnds, char *Data) {
 80177a8:	b580      	push	{r7, lr}
 80177aa:	b0c0      	sub	sp, #256	@ 0x100
 80177ac:	af02      	add	r7, sp, #8
 80177ae:	6078      	str	r0, [r7, #4]
 80177b0:	6039      	str	r1, [r7, #0]
	if (strcmp(cmnds, "IMEI") == 0) {
 80177b2:	4936      	ldr	r1, [pc, #216]	@ (801788c <Config_Update+0xe4>)
 80177b4:	6878      	ldr	r0, [r7, #4]
 80177b6:	f7e8 fd6b 	bl	8000290 <strcmp>
 80177ba:	4603      	mov	r3, r0
 80177bc:	2b00      	cmp	r3, #0
 80177be:	d160      	bne.n	8017882 <Config_Update+0xda>
		char RspBuff[200] = { 0 };
 80177c0:	2300      	movs	r3, #0
 80177c2:	60fb      	str	r3, [r7, #12]
 80177c4:	f107 0310 	add.w	r3, r7, #16
 80177c8:	22c4      	movs	r2, #196	@ 0xc4
 80177ca:	2100      	movs	r1, #0
 80177cc:	4618      	mov	r0, r3
 80177ce:	f007 fb2f 	bl	801ee30 <memset>
		char ExBuff[20] = { 0 };
 80177d2:	2300      	movs	r3, #0
 80177d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80177d8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80177dc:	2200      	movs	r2, #0
 80177de:	601a      	str	r2, [r3, #0]
 80177e0:	605a      	str	r2, [r3, #4]
 80177e2:	609a      	str	r2, [r3, #8]
 80177e4:	60da      	str	r2, [r3, #12]
		char *Result;
		int size, retryCount;
		int EL = 0, SL = 0;
 80177e6:	2300      	movs	r3, #0
 80177e8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80177ec:	2300      	movs	r3, #0
 80177ee:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0

//		HAL_UART_Transmit(&huart1, (uint8_t*) "AT+GSN\r\n",
//				strlen("AT+GSN\r\n"), 2000);
//		HAL_UART_Receive(&huart1, (uint8_t*) RspBuff, sizeof(RspBuff), 5000);
		if (EC200_Transmit("AT+GSN\r\n", RspBuff, EC200MINRESONSETIME)) {
 80177f2:	f107 030c 	add.w	r3, r7, #12
 80177f6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80177fa:	4619      	mov	r1, r3
 80177fc:	4824      	ldr	r0, [pc, #144]	@ (8017890 <Config_Update+0xe8>)
 80177fe:	f7e9 fcd5 	bl	80011ac <EC200_Transmit>
 8017802:	4603      	mov	r3, r0
 8017804:	2b00      	cmp	r3, #0
 8017806:	d03c      	beq.n	8017882 <Config_Update+0xda>
			printc(100, "AT+GSN\r\n res -> %s", RspBuff);
 8017808:	f107 030c 	add.w	r3, r7, #12
 801780c:	461a      	mov	r2, r3
 801780e:	4921      	ldr	r1, [pc, #132]	@ (8017894 <Config_Update+0xec>)
 8017810:	2064      	movs	r0, #100	@ 0x64
 8017812:	f7ea f901 	bl	8001a18 <printc>
			Result = Response_Check((char*) RspBuff);
 8017816:	f107 030c 	add.w	r3, r7, #12
 801781a:	4618      	mov	r0, r3
 801781c:	f000 f860 	bl	80178e0 <Response_Check>
 8017820:	4603      	mov	r3, r0
 8017822:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
			EL = Result - 5;
 8017826:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 801782a:	3b05      	subs	r3, #5
 801782c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
			SL = EL - 14;
 8017830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8017834:	3b0e      	subs	r3, #14
 8017836:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
//					retryCount);
//			goto retry;
//			retryCount++;
//		}

			Extract_Data_from_Buffer(SL, EL, RspBuff, ExBuff, &size);
 801783a:	f107 01d8 	add.w	r1, r7, #216	@ 0xd8
 801783e:	f107 020c 	add.w	r2, r7, #12
 8017842:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8017846:	9300      	str	r3, [sp, #0]
 8017848:	460b      	mov	r3, r1
 801784a:	f8d7 10f4 	ldr.w	r1, [r7, #244]	@ 0xf4
 801784e:	f8d7 00f0 	ldr.w	r0, [r7, #240]	@ 0xf0
 8017852:	f000 f823 	bl	801789c <Extract_Data_from_Buffer>

//		Seprate_String(RspBuff, 5, ExBuff);
			// need to add FlasH Write to Config Sector location
			memcpy(Imei, ExBuff, strlen(ExBuff));
 8017856:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 801785a:	4618      	mov	r0, r3
 801785c:	f7e8 fd22 	bl	80002a4 <strlen>
 8017860:	4602      	mov	r2, r0
 8017862:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8017866:	4619      	mov	r1, r3
 8017868:	480b      	ldr	r0, [pc, #44]	@ (8017898 <Config_Update+0xf0>)
 801786a:	f007 fc54 	bl	801f116 <memcpy>
			memset(RspBuff, 0, sizeof(RspBuff));
 801786e:	f107 030c 	add.w	r3, r7, #12
 8017872:	22c8      	movs	r2, #200	@ 0xc8
 8017874:	2100      	movs	r1, #0
 8017876:	4618      	mov	r0, r3
 8017878:	f007 fada 	bl	801ee30 <memset>
			HAL_Delay(100);
 801787c:	2064      	movs	r0, #100	@ 0x64
 801787e:	f7ee f8b3 	bl	80059e8 <HAL_Delay>
		}
	}
}
 8017882:	bf00      	nop
 8017884:	37f8      	adds	r7, #248	@ 0xf8
 8017886:	46bd      	mov	sp, r7
 8017888:	bd80      	pop	{r7, pc}
 801788a:	bf00      	nop
 801788c:	08022dac 	.word	0x08022dac
 8017890:	08022db4 	.word	0x08022db4
 8017894:	08022dc0 	.word	0x08022dc0
 8017898:	20014a54 	.word	0x20014a54

0801789c <Extract_Data_from_Buffer>:

void Extract_Data_from_Buffer(int Start_loc, int End_loc, char Buff[],
		char *extractedData, int *size) {
 801789c:	b580      	push	{r7, lr}
 801789e:	b084      	sub	sp, #16
 80178a0:	af00      	add	r7, sp, #0
 80178a2:	60f8      	str	r0, [r7, #12]
 80178a4:	60b9      	str	r1, [r7, #8]
 80178a6:	607a      	str	r2, [r7, #4]
 80178a8:	603b      	str	r3, [r7, #0]
	*size = End_loc - Start_loc + 1;
 80178aa:	68ba      	ldr	r2, [r7, #8]
 80178ac:	68fb      	ldr	r3, [r7, #12]
 80178ae:	1ad3      	subs	r3, r2, r3
 80178b0:	1c5a      	adds	r2, r3, #1
 80178b2:	69bb      	ldr	r3, [r7, #24]
 80178b4:	601a      	str	r2, [r3, #0]
	strncpy(extractedData, &Buff[Start_loc], *size);
 80178b6:	68fb      	ldr	r3, [r7, #12]
 80178b8:	687a      	ldr	r2, [r7, #4]
 80178ba:	18d1      	adds	r1, r2, r3
 80178bc:	69bb      	ldr	r3, [r7, #24]
 80178be:	681b      	ldr	r3, [r3, #0]
 80178c0:	461a      	mov	r2, r3
 80178c2:	6838      	ldr	r0, [r7, #0]
 80178c4:	f007 fb05 	bl	801eed2 <strncpy>
	extractedData[*size] = '\0'; // Null-terminate the string
 80178c8:	69bb      	ldr	r3, [r7, #24]
 80178ca:	681b      	ldr	r3, [r3, #0]
 80178cc:	461a      	mov	r2, r3
 80178ce:	683b      	ldr	r3, [r7, #0]
 80178d0:	4413      	add	r3, r2
 80178d2:	2200      	movs	r2, #0
 80178d4:	701a      	strb	r2, [r3, #0]
//	printc(100,"Extracted data: %s\n", extractedData);
}
 80178d6:	bf00      	nop
 80178d8:	3710      	adds	r7, #16
 80178da:	46bd      	mov	sp, r7
 80178dc:	bd80      	pop	{r7, pc}
	...

080178e0 <Response_Check>:

// Function to Check the Response Of the At commands
int Response_Check(char Buff[]) {
 80178e0:	b580      	push	{r7, lr}
 80178e2:	b086      	sub	sp, #24
 80178e4:	af00      	add	r7, sp, #0
 80178e6:	6078      	str	r0, [r7, #4]
	char *result_OK = strstr(Buff, "OK");
 80178e8:	4922      	ldr	r1, [pc, #136]	@ (8017974 <Response_Check+0x94>)
 80178ea:	6878      	ldr	r0, [r7, #4]
 80178ec:	f007 fb60 	bl	801efb0 <strstr>
 80178f0:	6178      	str	r0, [r7, #20]
	char *result_error = strstr(Buff, "\"errorResponse\":\"succesful\"");
 80178f2:	4921      	ldr	r1, [pc, #132]	@ (8017978 <Response_Check+0x98>)
 80178f4:	6878      	ldr	r0, [r7, #4]
 80178f6:	f007 fb5b 	bl	801efb0 <strstr>
 80178fa:	6138      	str	r0, [r7, #16]
	char *Result_MMI = strstr(Buff, "$MMI");
 80178fc:	491f      	ldr	r1, [pc, #124]	@ (801797c <Response_Check+0x9c>)
 80178fe:	6878      	ldr	r0, [r7, #4]
 8017900:	f007 fb56 	bl	801efb0 <strstr>
 8017904:	60f8      	str	r0, [r7, #12]

	if (Result_MMI != NULL) {
 8017906:	68fb      	ldr	r3, [r7, #12]
 8017908:	2b00      	cmp	r3, #0
 801790a:	d00b      	beq.n	8017924 <Response_Check+0x44>

		printc(100, "Substring '$MMI' found at index %d\n", Result_MMI - Buff);
 801790c:	68fa      	ldr	r2, [r7, #12]
 801790e:	687b      	ldr	r3, [r7, #4]
 8017910:	1ad3      	subs	r3, r2, r3
 8017912:	461a      	mov	r2, r3
 8017914:	491a      	ldr	r1, [pc, #104]	@ (8017980 <Response_Check+0xa0>)
 8017916:	2064      	movs	r0, #100	@ 0x64
 8017918:	f7ea f87e 	bl	8001a18 <printc>
		return Result_MMI - Buff; // Return index of 'errorResponse':'succesful'
 801791c:	68fa      	ldr	r2, [r7, #12]
 801791e:	687b      	ldr	r3, [r7, #4]
 8017920:	1ad3      	subs	r3, r2, r3
 8017922:	e022      	b.n	801796a <Response_Check+0x8a>
	} else if (result_OK != NULL) {
 8017924:	697b      	ldr	r3, [r7, #20]
 8017926:	2b00      	cmp	r3, #0
 8017928:	d00b      	beq.n	8017942 <Response_Check+0x62>
		printc(100, "Substring 'OK' found at index %d\n", result_OK - Buff);
 801792a:	697a      	ldr	r2, [r7, #20]
 801792c:	687b      	ldr	r3, [r7, #4]
 801792e:	1ad3      	subs	r3, r2, r3
 8017930:	461a      	mov	r2, r3
 8017932:	4914      	ldr	r1, [pc, #80]	@ (8017984 <Response_Check+0xa4>)
 8017934:	2064      	movs	r0, #100	@ 0x64
 8017936:	f7ea f86f 	bl	8001a18 <printc>
		return result_OK - Buff; // Return index of 'OK'
 801793a:	697a      	ldr	r2, [r7, #20]
 801793c:	687b      	ldr	r3, [r7, #4]
 801793e:	1ad3      	subs	r3, r2, r3
 8017940:	e013      	b.n	801796a <Response_Check+0x8a>
	} else if (result_error != NULL) {
 8017942:	693b      	ldr	r3, [r7, #16]
 8017944:	2b00      	cmp	r3, #0
 8017946:	d00a      	beq.n	801795e <Response_Check+0x7e>
		printc(100, "Substring 'errorResponse':'succesful' found at index %d\n",
 8017948:	693a      	ldr	r2, [r7, #16]
 801794a:	687b      	ldr	r3, [r7, #4]
 801794c:	1ad3      	subs	r3, r2, r3
 801794e:	461a      	mov	r2, r3
 8017950:	490d      	ldr	r1, [pc, #52]	@ (8017988 <Response_Check+0xa8>)
 8017952:	2064      	movs	r0, #100	@ 0x64
 8017954:	f7ea f860 	bl	8001a18 <printc>
				result_error - Buff);
		return -1; // Return index of 'errorResponse':'succesful'
 8017958:	f04f 33ff 	mov.w	r3, #4294967295
 801795c:	e005      	b.n	801796a <Response_Check+0x8a>
	} else {
		printc(100, "Neither substring found\n");
 801795e:	490b      	ldr	r1, [pc, #44]	@ (801798c <Response_Check+0xac>)
 8017960:	2064      	movs	r0, #100	@ 0x64
 8017962:	f7ea f859 	bl	8001a18 <printc>
		return -1; // Indicate that neither substring was found
 8017966:	f04f 33ff 	mov.w	r3, #4294967295
	}
	return -1;
}
 801796a:	4618      	mov	r0, r3
 801796c:	3718      	adds	r7, #24
 801796e:	46bd      	mov	sp, r7
 8017970:	bd80      	pop	{r7, pc}
 8017972:	bf00      	nop
 8017974:	08022dd4 	.word	0x08022dd4
 8017978:	08022dd8 	.word	0x08022dd8
 801797c:	08022b58 	.word	0x08022b58
 8017980:	08022df4 	.word	0x08022df4
 8017984:	08022e18 	.word	0x08022e18
 8017988:	08022e3c 	.word	0x08022e3c
 801798c:	08022e78 	.word	0x08022e78

08017990 <extractKeys>:
	}
}
// extract keys

// Function to extract keys
void extractKeys(const char *inputString, char (*CoKeys)[33]) {
 8017990:	b580      	push	{r7, lr}
 8017992:	b086      	sub	sp, #24
 8017994:	af00      	add	r7, sp, #0
 8017996:	6078      	str	r0, [r7, #4]
 8017998:	6039      	str	r1, [r7, #0]
	const char *start = strstr(inputString, "{\"comMap\":{"); // Find the start of the comMap section
 801799a:	492a      	ldr	r1, [pc, #168]	@ (8017a44 <extractKeys+0xb4>)
 801799c:	6878      	ldr	r0, [r7, #4]
 801799e:	f007 fb07 	bl	801efb0 <strstr>
 80179a2:	6178      	str	r0, [r7, #20]
	if (start == NULL) {
 80179a4:	697b      	ldr	r3, [r7, #20]
 80179a6:	2b00      	cmp	r3, #0
 80179a8:	d104      	bne.n	80179b4 <extractKeys+0x24>
		printc(100, "comMap section not found in the input string.\n");
 80179aa:	4927      	ldr	r1, [pc, #156]	@ (8017a48 <extractKeys+0xb8>)
 80179ac:	2064      	movs	r0, #100	@ 0x64
 80179ae:	f7ea f833 	bl	8001a18 <printc>
		return;
 80179b2:	e043      	b.n	8017a3c <extractKeys+0xac>
	}

	start += strlen("{\"comMap\":{"); // Move start pointer to the beginning of the comMap data
 80179b4:	697b      	ldr	r3, [r7, #20]
 80179b6:	330b      	adds	r3, #11
 80179b8:	617b      	str	r3, [r7, #20]

// Loop to extract values
	for (int i = 0; i < 8; i++) {
 80179ba:	2300      	movs	r3, #0
 80179bc:	613b      	str	r3, [r7, #16]
 80179be:	e03a      	b.n	8017a36 <extractKeys+0xa6>
		// Find the start of the value
		const char *valueStart = strstr(start, ":\""); // Find the start of the value
 80179c0:	4922      	ldr	r1, [pc, #136]	@ (8017a4c <extractKeys+0xbc>)
 80179c2:	6978      	ldr	r0, [r7, #20]
 80179c4:	f007 faf4 	bl	801efb0 <strstr>
 80179c8:	60f8      	str	r0, [r7, #12]
		if (valueStart == NULL) {
 80179ca:	68fb      	ldr	r3, [r7, #12]
 80179cc:	2b00      	cmp	r3, #0
 80179ce:	d104      	bne.n	80179da <extractKeys+0x4a>
			printc(100, "Value start not found.\n");
 80179d0:	491f      	ldr	r1, [pc, #124]	@ (8017a50 <extractKeys+0xc0>)
 80179d2:	2064      	movs	r0, #100	@ 0x64
 80179d4:	f7ea f820 	bl	8001a18 <printc>
			return;
 80179d8:	e030      	b.n	8017a3c <extractKeys+0xac>
		}
		valueStart += 2; // Move past the ":"
 80179da:	68fb      	ldr	r3, [r7, #12]
 80179dc:	3302      	adds	r3, #2
 80179de:	60fb      	str	r3, [r7, #12]

		// Find the end of the value
		const char *valueEnd = strstr(valueStart, "\"");
 80179e0:	2122      	movs	r1, #34	@ 0x22
 80179e2:	68f8      	ldr	r0, [r7, #12]
 80179e4:	f007 fa3b 	bl	801ee5e <strchr>
 80179e8:	60b8      	str	r0, [r7, #8]
		if (valueEnd == NULL) {
 80179ea:	68bb      	ldr	r3, [r7, #8]
 80179ec:	2b00      	cmp	r3, #0
 80179ee:	d104      	bne.n	80179fa <extractKeys+0x6a>
			printc(100, "Value end not found.\n");
 80179f0:	4918      	ldr	r1, [pc, #96]	@ (8017a54 <extractKeys+0xc4>)
 80179f2:	2064      	movs	r0, #100	@ 0x64
 80179f4:	f7ea f810 	bl	8001a18 <printc>
			return;
 80179f8:	e020      	b.n	8017a3c <extractKeys+0xac>
		}

		// Copy the value to the ComKeys buffer
		strncpy(CoKeys[i], valueStart, valueEnd - valueStart);
 80179fa:	693a      	ldr	r2, [r7, #16]
 80179fc:	4613      	mov	r3, r2
 80179fe:	015b      	lsls	r3, r3, #5
 8017a00:	4413      	add	r3, r2
 8017a02:	683a      	ldr	r2, [r7, #0]
 8017a04:	18d0      	adds	r0, r2, r3
 8017a06:	68ba      	ldr	r2, [r7, #8]
 8017a08:	68fb      	ldr	r3, [r7, #12]
 8017a0a:	1ad3      	subs	r3, r2, r3
 8017a0c:	461a      	mov	r2, r3
 8017a0e:	68f9      	ldr	r1, [r7, #12]
 8017a10:	f007 fa5f 	bl	801eed2 <strncpy>
		CoKeys[i][valueEnd - valueStart] = '\0'; // Null-terminate the value
 8017a14:	693a      	ldr	r2, [r7, #16]
 8017a16:	4613      	mov	r3, r2
 8017a18:	015b      	lsls	r3, r3, #5
 8017a1a:	4413      	add	r3, r2
 8017a1c:	683a      	ldr	r2, [r7, #0]
 8017a1e:	441a      	add	r2, r3
 8017a20:	68b9      	ldr	r1, [r7, #8]
 8017a22:	68fb      	ldr	r3, [r7, #12]
 8017a24:	1acb      	subs	r3, r1, r3
 8017a26:	2100      	movs	r1, #0
 8017a28:	54d1      	strb	r1, [r2, r3]

		// Move start pointer to the next value
		start = valueEnd + 1;
 8017a2a:	68bb      	ldr	r3, [r7, #8]
 8017a2c:	3301      	adds	r3, #1
 8017a2e:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 8; i++) {
 8017a30:	693b      	ldr	r3, [r7, #16]
 8017a32:	3301      	adds	r3, #1
 8017a34:	613b      	str	r3, [r7, #16]
 8017a36:	693b      	ldr	r3, [r7, #16]
 8017a38:	2b07      	cmp	r3, #7
 8017a3a:	ddc1      	ble.n	80179c0 <extractKeys+0x30>
	}
}
 8017a3c:	3718      	adds	r7, #24
 8017a3e:	46bd      	mov	sp, r7
 8017a40:	bd80      	pop	{r7, pc}
 8017a42:	bf00      	nop
 8017a44:	08022ee4 	.word	0x08022ee4
 8017a48:	08022ef0 	.word	0x08022ef0
 8017a4c:	08022f20 	.word	0x08022f20
 8017a50:	08022f24 	.word	0x08022f24
 8017a54:	08022f3c 	.word	0x08022f3c

08017a58 <FOTA_Seprate_String>:
		printc(100, "Line %d does not exist.\n", index);
	}
}

void FOTA_Seprate_String(char Buff[], int Start_Location, int index,
		char *data[], char Encpt_Data[]) {
 8017a58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017a5c:	b08b      	sub	sp, #44	@ 0x2c
 8017a5e:	af00      	add	r7, sp, #0
 8017a60:	60f8      	str	r0, [r7, #12]
 8017a62:	60b9      	str	r1, [r7, #8]
 8017a64:	607a      	str	r2, [r7, #4]
 8017a66:	603b      	str	r3, [r7, #0]
 8017a68:	466b      	mov	r3, sp
 8017a6a:	461e      	mov	r6, r3
	char *line;
	int len = strlen(Buff) - Start_Location;
 8017a6c:	68f8      	ldr	r0, [r7, #12]
 8017a6e:	f7e8 fc19 	bl	80002a4 <strlen>
 8017a72:	4602      	mov	r2, r0
 8017a74:	68bb      	ldr	r3, [r7, #8]
 8017a76:	1ad3      	subs	r3, r2, r3
 8017a78:	61fb      	str	r3, [r7, #28]
	char tmpBuffer[len + 1]; // Allocate enough space for the string
 8017a7a:	69fb      	ldr	r3, [r7, #28]
 8017a7c:	1c59      	adds	r1, r3, #1
 8017a7e:	1e4b      	subs	r3, r1, #1
 8017a80:	61bb      	str	r3, [r7, #24]
 8017a82:	460a      	mov	r2, r1
 8017a84:	2300      	movs	r3, #0
 8017a86:	4690      	mov	r8, r2
 8017a88:	4699      	mov	r9, r3
 8017a8a:	f04f 0200 	mov.w	r2, #0
 8017a8e:	f04f 0300 	mov.w	r3, #0
 8017a92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8017a96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8017a9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8017a9e:	460a      	mov	r2, r1
 8017aa0:	2300      	movs	r3, #0
 8017aa2:	4614      	mov	r4, r2
 8017aa4:	461d      	mov	r5, r3
 8017aa6:	f04f 0200 	mov.w	r2, #0
 8017aaa:	f04f 0300 	mov.w	r3, #0
 8017aae:	00eb      	lsls	r3, r5, #3
 8017ab0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8017ab4:	00e2      	lsls	r2, r4, #3
 8017ab6:	460b      	mov	r3, r1
 8017ab8:	3307      	adds	r3, #7
 8017aba:	08db      	lsrs	r3, r3, #3
 8017abc:	00db      	lsls	r3, r3, #3
 8017abe:	ebad 0d03 	sub.w	sp, sp, r3
 8017ac2:	466b      	mov	r3, sp
 8017ac4:	3300      	adds	r3, #0
 8017ac6:	617b      	str	r3, [r7, #20]

	memcpy(tmpBuffer, &Buff[Start_Location], len); // Copy Buff to tmpBuffer
 8017ac8:	68bb      	ldr	r3, [r7, #8]
 8017aca:	68fa      	ldr	r2, [r7, #12]
 8017acc:	4413      	add	r3, r2
 8017ace:	69fa      	ldr	r2, [r7, #28]
 8017ad0:	4619      	mov	r1, r3
 8017ad2:	6978      	ldr	r0, [r7, #20]
 8017ad4:	f007 fb1f 	bl	801f116 <memcpy>
	tmpBuffer[len] = '\0'; // Null-terminate the string
 8017ad8:	697a      	ldr	r2, [r7, #20]
 8017ada:	69fb      	ldr	r3, [r7, #28]
 8017adc:	4413      	add	r3, r2
 8017ade:	2200      	movs	r2, #0
 8017ae0:	701a      	strb	r2, [r3, #0]

	int currentLine = 0;
 8017ae2:	2300      	movs	r3, #0
 8017ae4:	623b      	str	r3, [r7, #32]

	line = strtok(tmpBuffer, ",");
 8017ae6:	4922      	ldr	r1, [pc, #136]	@ (8017b70 <FOTA_Seprate_String+0x118>)
 8017ae8:	6978      	ldr	r0, [r7, #20]
 8017aea:	f007 fa05 	bl	801eef8 <strtok>
 8017aee:	6278      	str	r0, [r7, #36]	@ 0x24
	while (line != NULL && currentLine <= index) {
 8017af0:	e029      	b.n	8017b46 <FOTA_Seprate_String+0xee>
		data[currentLine++] = line;
 8017af2:	6a3b      	ldr	r3, [r7, #32]
 8017af4:	1c5a      	adds	r2, r3, #1
 8017af6:	623a      	str	r2, [r7, #32]
 8017af8:	009b      	lsls	r3, r3, #2
 8017afa:	683a      	ldr	r2, [r7, #0]
 8017afc:	4413      	add	r3, r2
 8017afe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017b00:	601a      	str	r2, [r3, #0]
		if (currentLine == 5)
 8017b02:	6a3b      	ldr	r3, [r7, #32]
 8017b04:	2b05      	cmp	r3, #5
 8017b06:	d108      	bne.n	8017b1a <FOTA_Seprate_String+0xc2>
			memcpy(Encpt_Data, line, strlen(line));
 8017b08:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017b0a:	f7e8 fbcb 	bl	80002a4 <strlen>
 8017b0e:	4603      	mov	r3, r0
 8017b10:	461a      	mov	r2, r3
 8017b12:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8017b14:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8017b16:	f007 fafe 	bl	801f116 <memcpy>
		if (currentLine == index) {
 8017b1a:	6a3a      	ldr	r2, [r7, #32]
 8017b1c:	687b      	ldr	r3, [r7, #4]
 8017b1e:	429a      	cmp	r2, r3
 8017b20:	d106      	bne.n	8017b30 <FOTA_Seprate_String+0xd8>
			printc(100, "Line %d: %s\n", currentLine, line);
 8017b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b24:	6a3a      	ldr	r2, [r7, #32]
 8017b26:	4913      	ldr	r1, [pc, #76]	@ (8017b74 <FOTA_Seprate_String+0x11c>)
 8017b28:	2064      	movs	r0, #100	@ 0x64
 8017b2a:	f7e9 ff75 	bl	8001a18 <printc>
			break; // Stop parsing once the desired line is found
 8017b2e:	e011      	b.n	8017b54 <FOTA_Seprate_String+0xfc>
		}
		printc(100, "Line %d: %s\n", currentLine, line);
 8017b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b32:	6a3a      	ldr	r2, [r7, #32]
 8017b34:	490f      	ldr	r1, [pc, #60]	@ (8017b74 <FOTA_Seprate_String+0x11c>)
 8017b36:	2064      	movs	r0, #100	@ 0x64
 8017b38:	f7e9 ff6e 	bl	8001a18 <printc>
		line = strtok(NULL, ",");
 8017b3c:	490c      	ldr	r1, [pc, #48]	@ (8017b70 <FOTA_Seprate_String+0x118>)
 8017b3e:	2000      	movs	r0, #0
 8017b40:	f007 f9da 	bl	801eef8 <strtok>
 8017b44:	6278      	str	r0, [r7, #36]	@ 0x24
	while (line != NULL && currentLine <= index) {
 8017b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b48:	2b00      	cmp	r3, #0
 8017b4a:	d003      	beq.n	8017b54 <FOTA_Seprate_String+0xfc>
 8017b4c:	6a3a      	ldr	r2, [r7, #32]
 8017b4e:	687b      	ldr	r3, [r7, #4]
 8017b50:	429a      	cmp	r2, r3
 8017b52:	ddce      	ble.n	8017af2 <FOTA_Seprate_String+0x9a>
	}

	if (line == NULL) {
 8017b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b56:	2b00      	cmp	r3, #0
 8017b58:	d104      	bne.n	8017b64 <FOTA_Seprate_String+0x10c>
		printc(100, "Line %d does not exist.\n", index);
 8017b5a:	687a      	ldr	r2, [r7, #4]
 8017b5c:	4906      	ldr	r1, [pc, #24]	@ (8017b78 <FOTA_Seprate_String+0x120>)
 8017b5e:	2064      	movs	r0, #100	@ 0x64
 8017b60:	f7e9 ff5a 	bl	8001a18 <printc>
 8017b64:	46b5      	mov	sp, r6
	}
}
 8017b66:	bf00      	nop
 8017b68:	372c      	adds	r7, #44	@ 0x2c
 8017b6a:	46bd      	mov	sp, r7
 8017b6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017b70:	08022f54 	.word	0x08022f54
 8017b74:	08022f58 	.word	0x08022f58
 8017b78:	08022f68 	.word	0x08022f68

08017b7c <Calculate_CRC8>:

uint8_t Calculate_CRC8(uint8_t *data, uint32_t size) {
 8017b7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017b80:	b085      	sub	sp, #20
 8017b82:	af00      	add	r7, sp, #0
 8017b84:	6078      	str	r0, [r7, #4]
 8017b86:	6039      	str	r1, [r7, #0]
 8017b88:	466b      	mov	r3, sp
 8017b8a:	461e      	mov	r6, r3
	uint8_t arr[size];
 8017b8c:	6839      	ldr	r1, [r7, #0]
 8017b8e:	460b      	mov	r3, r1
 8017b90:	3b01      	subs	r3, #1
 8017b92:	60fb      	str	r3, [r7, #12]
 8017b94:	2300      	movs	r3, #0
 8017b96:	4688      	mov	r8, r1
 8017b98:	4699      	mov	r9, r3
 8017b9a:	f04f 0200 	mov.w	r2, #0
 8017b9e:	f04f 0300 	mov.w	r3, #0
 8017ba2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8017ba6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8017baa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8017bae:	2300      	movs	r3, #0
 8017bb0:	460c      	mov	r4, r1
 8017bb2:	461d      	mov	r5, r3
 8017bb4:	f04f 0200 	mov.w	r2, #0
 8017bb8:	f04f 0300 	mov.w	r3, #0
 8017bbc:	00eb      	lsls	r3, r5, #3
 8017bbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8017bc2:	00e2      	lsls	r2, r4, #3
 8017bc4:	1dcb      	adds	r3, r1, #7
 8017bc6:	08db      	lsrs	r3, r3, #3
 8017bc8:	00db      	lsls	r3, r3, #3
 8017bca:	ebad 0d03 	sub.w	sp, sp, r3
 8017bce:	466b      	mov	r3, sp
 8017bd0:	3300      	adds	r3, #0
 8017bd2:	60bb      	str	r3, [r7, #8]
	memset(arr, 0, sizeof(arr));
 8017bd4:	460a      	mov	r2, r1
 8017bd6:	2100      	movs	r1, #0
 8017bd8:	68b8      	ldr	r0, [r7, #8]
 8017bda:	f007 f929 	bl	801ee30 <memset>
	memcpy(arr, data, size);
 8017bde:	683a      	ldr	r2, [r7, #0]
 8017be0:	6879      	ldr	r1, [r7, #4]
 8017be2:	68b8      	ldr	r0, [r7, #8]
 8017be4:	f007 fa97 	bl	801f116 <memcpy>
	return HAL_CRC_Calculate(&hcrc, arr, size);
 8017be8:	683a      	ldr	r2, [r7, #0]
 8017bea:	68b9      	ldr	r1, [r7, #8]
 8017bec:	4805      	ldr	r0, [pc, #20]	@ (8017c04 <Calculate_CRC8+0x88>)
 8017bee:	f7ef fcc9 	bl	8007584 <HAL_CRC_Calculate>
 8017bf2:	4603      	mov	r3, r0
 8017bf4:	b2db      	uxtb	r3, r3
 8017bf6:	46b5      	mov	sp, r6
}
 8017bf8:	4618      	mov	r0, r3
 8017bfa:	3714      	adds	r7, #20
 8017bfc:	46bd      	mov	sp, r7
 8017bfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017c02:	bf00      	nop
 8017c04:	200139c0 	.word	0x200139c0

08017c08 <getUpdateStatus>:
RConfiguration Rconfig;
bool updateStatus = false;
char RB[100] = { 0 };
extern char *PHnum;
bool SRESET_FLAG = false;
bool getUpdateStatus() {
 8017c08:	b480      	push	{r7}
 8017c0a:	af00      	add	r7, sp, #0
	return updateStatus;
 8017c0c:	4b03      	ldr	r3, [pc, #12]	@ (8017c1c <getUpdateStatus+0x14>)
 8017c0e:	781b      	ldrb	r3, [r3, #0]
}
 8017c10:	4618      	mov	r0, r3
 8017c12:	46bd      	mov	sp, r7
 8017c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c18:	4770      	bx	lr
 8017c1a:	bf00      	nop
 8017c1c:	20014d2c 	.word	0x20014d2c

08017c20 <setUpdateStaus>:
void setUpdateStaus(bool upStatus) {
 8017c20:	b480      	push	{r7}
 8017c22:	b083      	sub	sp, #12
 8017c24:	af00      	add	r7, sp, #0
 8017c26:	4603      	mov	r3, r0
 8017c28:	71fb      	strb	r3, [r7, #7]
	updateStatus = upStatus;
 8017c2a:	4a04      	ldr	r2, [pc, #16]	@ (8017c3c <setUpdateStaus+0x1c>)
 8017c2c:	79fb      	ldrb	r3, [r7, #7]
 8017c2e:	7013      	strb	r3, [r2, #0]
}
 8017c30:	bf00      	nop
 8017c32:	370c      	adds	r7, #12
 8017c34:	46bd      	mov	sp, r7
 8017c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c3a:	4770      	bx	lr
 8017c3c:	20014d2c 	.word	0x20014d2c

08017c40 <clear_RConfiguration>:

void clear_RConfiguration() {
 8017c40:	b580      	push	{r7, lr}
 8017c42:	af00      	add	r7, sp, #0
	clearBuffer(&Rconfig, sizeof(Rconfig));
 8017c44:	218c      	movs	r1, #140	@ 0x8c
 8017c46:	4802      	ldr	r0, [pc, #8]	@ (8017c50 <clear_RConfiguration+0x10>)
 8017c48:	f7e9 ff3e 	bl	8001ac8 <clearBuffer>
}
 8017c4c:	bf00      	nop
 8017c4e:	bd80      	pop	{r7, pc}
 8017c50:	20014ca0 	.word	0x20014ca0

08017c54 <SMS_COTA>:

bool SMS_COTA(char *SMSBuff, char *opBuffer) {
 8017c54:	b5b0      	push	{r4, r5, r7, lr}
 8017c56:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8017c5a:	af00      	add	r7, sp, #0
 8017c5c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8017c60:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8017c64:	6018      	str	r0, [r3, #0]
 8017c66:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8017c6a:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8017c6e:	6019      	str	r1, [r3, #0]
	uint8_t splitBuffer[5][100] = { 0 };
 8017c70:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8017c74:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8017c78:	4618      	mov	r0, r3
 8017c7a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8017c7e:	461a      	mov	r2, r3
 8017c80:	2100      	movs	r1, #0
 8017c82:	f007 f8d5 	bl	801ee30 <memset>
	splitString((uint8_t*) SMSBuff, " ", splitBuffer);
 8017c86:	f107 020c 	add.w	r2, r7, #12
 8017c8a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8017c8e:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8017c92:	49c7      	ldr	r1, [pc, #796]	@ (8017fb0 <SMS_COTA+0x35c>)
 8017c94:	6818      	ldr	r0, [r3, #0]
 8017c96:	f7e9 ff25 	bl	8001ae4 <splitString>
	if (splitBuffer[0] == NULL) {
		strcpy(opBuffer, "Didn't Get Proper command");
		return false;
	}
	char *command = (char*) strdup(splitBuffer[0]);
 8017c9a:	f107 030c 	add.w	r3, r7, #12
 8017c9e:	4618      	mov	r0, r3
 8017ca0:	f007 f8ea 	bl	801ee78 <strdup>
 8017ca4:	4603      	mov	r3, r0
 8017ca6:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
	if (splitBuffer[1] == NULL) {
		strcpy(opBuffer, "Didn't Got Any parameter1");
		return false;
	}
	char *parameter = strdup(splitBuffer[1]);
 8017caa:	f107 030c 	add.w	r3, r7, #12
 8017cae:	3364      	adds	r3, #100	@ 0x64
 8017cb0:	4618      	mov	r0, r3
 8017cb2:	f007 f8e1 	bl	801ee78 <strdup>
 8017cb6:	4603      	mov	r3, r0
 8017cb8:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
	char *parameter2 = NULL;
 8017cbc:	2300      	movs	r3, #0
 8017cbe:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
	if (splitBuffer[2] != NULL) {
		parameter2 = strdup(splitBuffer[2]);
 8017cc2:	f107 030c 	add.w	r3, r7, #12
 8017cc6:	33c8      	adds	r3, #200	@ 0xc8
 8017cc8:	4618      	mov	r0, r3
 8017cca:	f007 f8d5 	bl	801ee78 <strdup>
 8017cce:	4603      	mov	r3, r0
 8017cd0:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
	}
	clearBuffer(splitBuffer, sizeof(splitBuffer));
 8017cd4:	f107 030c 	add.w	r3, r7, #12
 8017cd8:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8017cdc:	4618      	mov	r0, r3
 8017cde:	f7e9 fef3 	bl	8001ac8 <clearBuffer>
	splitString(parameter, ":", splitBuffer);
 8017ce2:	f107 030c 	add.w	r3, r7, #12
 8017ce6:	461a      	mov	r2, r3
 8017ce8:	49b2      	ldr	r1, [pc, #712]	@ (8017fb4 <SMS_COTA+0x360>)
 8017cea:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8017cee:	f7e9 fef9 	bl	8001ae4 <splitString>
	parameter = strdup(splitBuffer[0]);
 8017cf2:	f107 030c 	add.w	r3, r7, #12
 8017cf6:	4618      	mov	r0, r3
 8017cf8:	f007 f8be 	bl	801ee78 <strdup>
 8017cfc:	4603      	mov	r3, r0
 8017cfe:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
	char *value = strdup(splitBuffer[1]);
 8017d02:	f107 030c 	add.w	r3, r7, #12
 8017d06:	3364      	adds	r3, #100	@ 0x64
 8017d08:	4618      	mov	r0, r3
 8017d0a:	f007 f8b5 	bl	801ee78 <strdup>
 8017d0e:	4603      	mov	r3, r0
 8017d10:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
	if (strcmp(command, "GET") == 0) {
 8017d14:	49a8      	ldr	r1, [pc, #672]	@ (8017fb8 <SMS_COTA+0x364>)
 8017d16:	f8d7 0214 	ldr.w	r0, [r7, #532]	@ 0x214
 8017d1a:	f7e8 fab9 	bl	8000290 <strcmp>
 8017d1e:	4603      	mov	r3, r0
 8017d20:	2b00      	cmp	r3, #0
 8017d22:	f040 81b8 	bne.w	8018096 <SMS_COTA+0x442>
		if (parameter != NULL) {
 8017d26:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8017d2a:	2b00      	cmp	r3, #0
 8017d2c:	f000 81ad 	beq.w	801808a <SMS_COTA+0x436>
			// Handle GET command with parameter
			if (strcmp(parameter, "MIP") == 0) {
 8017d30:	49a2      	ldr	r1, [pc, #648]	@ (8017fbc <SMS_COTA+0x368>)
 8017d32:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8017d36:	f7e8 faab 	bl	8000290 <strcmp>
 8017d3a:	4603      	mov	r3, r0
 8017d3c:	2b00      	cmp	r3, #0
 8017d3e:	d107      	bne.n	8017d50 <SMS_COTA+0xfc>
				SGET_MIP(opBuffer);
 8017d40:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8017d44:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8017d48:	6818      	ldr	r0, [r3, #0]
 8017d4a:	f000 fbf9 	bl	8018540 <SGET_MIP>
 8017d4e:	e185      	b.n	801805c <SMS_COTA+0x408>
			} else if (strcmp(parameter, "PORT1") == 0) {
 8017d50:	499b      	ldr	r1, [pc, #620]	@ (8017fc0 <SMS_COTA+0x36c>)
 8017d52:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8017d56:	f7e8 fa9b 	bl	8000290 <strcmp>
 8017d5a:	4603      	mov	r3, r0
 8017d5c:	2b00      	cmp	r3, #0
 8017d5e:	d107      	bne.n	8017d70 <SMS_COTA+0x11c>
				SGET_PORT1(opBuffer);
 8017d60:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8017d64:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8017d68:	6818      	ldr	r0, [r3, #0]
 8017d6a:	f000 fbf9 	bl	8018560 <SGET_PORT1>
 8017d6e:	e175      	b.n	801805c <SMS_COTA+0x408>
			} else if (strcmp(parameter, "MUSER") == 0) {
 8017d70:	4994      	ldr	r1, [pc, #592]	@ (8017fc4 <SMS_COTA+0x370>)
 8017d72:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8017d76:	f7e8 fa8b 	bl	8000290 <strcmp>
 8017d7a:	4603      	mov	r3, r0
 8017d7c:	2b00      	cmp	r3, #0
 8017d7e:	d107      	bne.n	8017d90 <SMS_COTA+0x13c>
				SGET_MUSER(opBuffer);
 8017d80:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8017d84:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8017d88:	6818      	ldr	r0, [r3, #0]
 8017d8a:	f000 fbfd 	bl	8018588 <SGET_MUSER>
 8017d8e:	e165      	b.n	801805c <SMS_COTA+0x408>
			} else if (strcmp(parameter, "MPASS") == 0) {
 8017d90:	498d      	ldr	r1, [pc, #564]	@ (8017fc8 <SMS_COTA+0x374>)
 8017d92:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8017d96:	f7e8 fa7b 	bl	8000290 <strcmp>
 8017d9a:	4603      	mov	r3, r0
 8017d9c:	2b00      	cmp	r3, #0
 8017d9e:	d107      	bne.n	8017db0 <SMS_COTA+0x15c>
				SGET_MPASS(opBuffer);
 8017da0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8017da4:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8017da8:	6818      	ldr	r0, [r3, #0]
 8017daa:	f000 fbfd 	bl	80185a8 <SGET_MPASS>
 8017dae:	e155      	b.n	801805c <SMS_COTA+0x408>
			} else if (strcmp(parameter, "CERT") == 0) {
 8017db0:	4986      	ldr	r1, [pc, #536]	@ (8017fcc <SMS_COTA+0x378>)
 8017db2:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8017db6:	f7e8 fa6b 	bl	8000290 <strcmp>
 8017dba:	4603      	mov	r3, r0
 8017dbc:	2b00      	cmp	r3, #0
 8017dbe:	d107      	bne.n	8017dd0 <SMS_COTA+0x17c>
				SGET_CERT(opBuffer);
 8017dc0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8017dc4:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8017dc8:	6818      	ldr	r0, [r3, #0]
 8017dca:	f000 fbfd 	bl	80185c8 <SGET_CERT>
 8017dce:	e145      	b.n	801805c <SMS_COTA+0x408>
			} else if (strcmp(parameter, "KEY") == 0) {
 8017dd0:	497f      	ldr	r1, [pc, #508]	@ (8017fd0 <SMS_COTA+0x37c>)
 8017dd2:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8017dd6:	f7e8 fa5b 	bl	8000290 <strcmp>
 8017dda:	4603      	mov	r3, r0
 8017ddc:	2b00      	cmp	r3, #0
 8017dde:	d107      	bne.n	8017df0 <SMS_COTA+0x19c>
				SGET_KEY(opBuffer);
 8017de0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8017de4:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8017de8:	6818      	ldr	r0, [r3, #0]
 8017dea:	f000 fbfd 	bl	80185e8 <SGET_KEY>
 8017dee:	e135      	b.n	801805c <SMS_COTA+0x408>
			} else if (strcmp(parameter, "CA") == 0) {
 8017df0:	4978      	ldr	r1, [pc, #480]	@ (8017fd4 <SMS_COTA+0x380>)
 8017df2:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8017df6:	f7e8 fa4b 	bl	8000290 <strcmp>
 8017dfa:	4603      	mov	r3, r0
 8017dfc:	2b00      	cmp	r3, #0
 8017dfe:	d107      	bne.n	8017e10 <SMS_COTA+0x1bc>
				SGET_CA(opBuffer);
 8017e00:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8017e04:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8017e08:	6818      	ldr	r0, [r3, #0]
 8017e0a:	f000 fbfd 	bl	8018608 <SGET_CA>
 8017e0e:	e125      	b.n	801805c <SMS_COTA+0x408>
			} else if (strcmp(parameter, "IP2") == 0) {
 8017e10:	4971      	ldr	r1, [pc, #452]	@ (8017fd8 <SMS_COTA+0x384>)
 8017e12:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8017e16:	f7e8 fa3b 	bl	8000290 <strcmp>
 8017e1a:	4603      	mov	r3, r0
 8017e1c:	2b00      	cmp	r3, #0
 8017e1e:	d107      	bne.n	8017e30 <SMS_COTA+0x1dc>
				SGET_IP2(opBuffer);
 8017e20:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8017e24:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8017e28:	6818      	ldr	r0, [r3, #0]
 8017e2a:	f000 fbfd 	bl	8018628 <SGET_IP2>
 8017e2e:	e115      	b.n	801805c <SMS_COTA+0x408>
			} else if (strcmp(parameter, "PORT2") == 0) {
 8017e30:	496a      	ldr	r1, [pc, #424]	@ (8017fdc <SMS_COTA+0x388>)
 8017e32:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8017e36:	f7e8 fa2b 	bl	8000290 <strcmp>
 8017e3a:	4603      	mov	r3, r0
 8017e3c:	2b00      	cmp	r3, #0
 8017e3e:	d107      	bne.n	8017e50 <SMS_COTA+0x1fc>
				SGET_PORT2(opBuffer);
 8017e40:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8017e44:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8017e48:	6818      	ldr	r0, [r3, #0]
 8017e4a:	f000 fc25 	bl	8018698 <SGET_PORT2>
 8017e4e:	e105      	b.n	801805c <SMS_COTA+0x408>
			} else if (strcmp(parameter, "SKEY1") == 0) {
 8017e50:	4963      	ldr	r1, [pc, #396]	@ (8017fe0 <SMS_COTA+0x38c>)
 8017e52:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8017e56:	f7e8 fa1b 	bl	8000290 <strcmp>
 8017e5a:	4603      	mov	r3, r0
 8017e5c:	2b00      	cmp	r3, #0
 8017e5e:	d107      	bne.n	8017e70 <SMS_COTA+0x21c>
				SGET_SKEY1(opBuffer);
 8017e60:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8017e64:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8017e68:	6818      	ldr	r0, [r3, #0]
 8017e6a:	f000 fc25 	bl	80186b8 <SGET_SKEY1>
 8017e6e:	e0f5      	b.n	801805c <SMS_COTA+0x408>
			} else if (strcmp(parameter, "SKEY2") == 0) {
 8017e70:	495c      	ldr	r1, [pc, #368]	@ (8017fe4 <SMS_COTA+0x390>)
 8017e72:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8017e76:	f7e8 fa0b 	bl	8000290 <strcmp>
 8017e7a:	4603      	mov	r3, r0
 8017e7c:	2b00      	cmp	r3, #0
 8017e7e:	d107      	bne.n	8017e90 <SMS_COTA+0x23c>
				SGET_SKEY2(opBuffer);
 8017e80:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8017e84:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8017e88:	6818      	ldr	r0, [r3, #0]
 8017e8a:	f000 fc25 	bl	80186d8 <SGET_SKEY2>
 8017e8e:	e0e5      	b.n	801805c <SMS_COTA+0x408>
			} else if (strcmp(parameter, "SKEY3") == 0) {
 8017e90:	4955      	ldr	r1, [pc, #340]	@ (8017fe8 <SMS_COTA+0x394>)
 8017e92:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8017e96:	f7e8 f9fb 	bl	8000290 <strcmp>
 8017e9a:	4603      	mov	r3, r0
 8017e9c:	2b00      	cmp	r3, #0
 8017e9e:	d107      	bne.n	8017eb0 <SMS_COTA+0x25c>
				SGET_SKEY3(opBuffer);
 8017ea0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8017ea4:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8017ea8:	6818      	ldr	r0, [r3, #0]
 8017eaa:	f000 fc25 	bl	80186f8 <SGET_SKEY3>
 8017eae:	e0d5      	b.n	801805c <SMS_COTA+0x408>
			} else if (strcmp(parameter, "APN") == 0) {
 8017eb0:	494e      	ldr	r1, [pc, #312]	@ (8017fec <SMS_COTA+0x398>)
 8017eb2:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8017eb6:	f7e8 f9eb 	bl	8000290 <strcmp>
 8017eba:	4603      	mov	r3, r0
 8017ebc:	2b00      	cmp	r3, #0
 8017ebe:	d107      	bne.n	8017ed0 <SMS_COTA+0x27c>
				SGET_APN(opBuffer);
 8017ec0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8017ec4:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8017ec8:	6818      	ldr	r0, [r3, #0]
 8017eca:	f000 fc25 	bl	8018718 <SGET_APN>
 8017ece:	e0c5      	b.n	801805c <SMS_COTA+0x408>
			} else if (strcmp(parameter, "ION") == 0) {
 8017ed0:	4947      	ldr	r1, [pc, #284]	@ (8017ff0 <SMS_COTA+0x39c>)
 8017ed2:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8017ed6:	f7e8 f9db 	bl	8000290 <strcmp>
 8017eda:	4603      	mov	r3, r0
 8017edc:	2b00      	cmp	r3, #0
 8017ede:	d107      	bne.n	8017ef0 <SMS_COTA+0x29c>
				SGET_ION(opBuffer);
 8017ee0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8017ee4:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8017ee8:	6818      	ldr	r0, [r3, #0]
 8017eea:	f000 fc25 	bl	8018738 <SGET_ION>
 8017eee:	e0b5      	b.n	801805c <SMS_COTA+0x408>
			} else if (strcmp(parameter, "NSAM") == 0) {
 8017ef0:	4940      	ldr	r1, [pc, #256]	@ (8017ff4 <SMS_COTA+0x3a0>)
 8017ef2:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8017ef6:	f7e8 f9cb 	bl	8000290 <strcmp>
 8017efa:	4603      	mov	r3, r0
 8017efc:	2b00      	cmp	r3, #0
 8017efe:	d107      	bne.n	8017f10 <SMS_COTA+0x2bc>
				SGET_NSAM(opBuffer);
 8017f00:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8017f04:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8017f08:	6818      	ldr	r0, [r3, #0]
 8017f0a:	f000 fc25 	bl	8018758 <SGET_NSAM>
 8017f0e:	e0a5      	b.n	801805c <SMS_COTA+0x408>
			} else if (strcmp(parameter, "HA") == 0) {
 8017f10:	4939      	ldr	r1, [pc, #228]	@ (8017ff8 <SMS_COTA+0x3a4>)
 8017f12:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8017f16:	f7e8 f9bb 	bl	8000290 <strcmp>
 8017f1a:	4603      	mov	r3, r0
 8017f1c:	2b00      	cmp	r3, #0
 8017f1e:	d107      	bne.n	8017f30 <SMS_COTA+0x2dc>
				SGET_HA(opBuffer);
 8017f20:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8017f24:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8017f28:	6818      	ldr	r0, [r3, #0]
 8017f2a:	f000 fc25 	bl	8018778 <SGET_HA>
 8017f2e:	e095      	b.n	801805c <SMS_COTA+0x408>
			} else if (strcmp(parameter, "HB") == 0) {
 8017f30:	4932      	ldr	r1, [pc, #200]	@ (8017ffc <SMS_COTA+0x3a8>)
 8017f32:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8017f36:	f7e8 f9ab 	bl	8000290 <strcmp>
 8017f3a:	4603      	mov	r3, r0
 8017f3c:	2b00      	cmp	r3, #0
 8017f3e:	d107      	bne.n	8017f50 <SMS_COTA+0x2fc>
				SGET_HB(opBuffer);
 8017f40:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8017f44:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8017f48:	6818      	ldr	r0, [r3, #0]
 8017f4a:	f000 fc25 	bl	8018798 <SGET_HB>
 8017f4e:	e085      	b.n	801805c <SMS_COTA+0x408>
			} else if (strcmp(parameter, "HC") == 0) {
 8017f50:	492b      	ldr	r1, [pc, #172]	@ (8018000 <SMS_COTA+0x3ac>)
 8017f52:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8017f56:	f7e8 f99b 	bl	8000290 <strcmp>
 8017f5a:	4603      	mov	r3, r0
 8017f5c:	2b00      	cmp	r3, #0
 8017f5e:	d107      	bne.n	8017f70 <SMS_COTA+0x31c>
				SGET_HC(opBuffer);
 8017f60:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8017f64:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8017f68:	6818      	ldr	r0, [r3, #0]
 8017f6a:	f000 fc25 	bl	80187b8 <SGET_HC>
 8017f6e:	e075      	b.n	801805c <SMS_COTA+0x408>
			} else if (strcmp(parameter, "ACCOFFSET") == 0) {
 8017f70:	4924      	ldr	r1, [pc, #144]	@ (8018004 <SMS_COTA+0x3b0>)
 8017f72:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8017f76:	f7e8 f98b 	bl	8000290 <strcmp>
 8017f7a:	4603      	mov	r3, r0
 8017f7c:	2b00      	cmp	r3, #0
 8017f7e:	d107      	bne.n	8017f90 <SMS_COTA+0x33c>
				SGET_ACCOFFSET(opBuffer);
 8017f80:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8017f84:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8017f88:	6818      	ldr	r0, [r3, #0]
 8017f8a:	f000 fc25 	bl	80187d8 <SGET_ACCOFFSET>
 8017f8e:	e065      	b.n	801805c <SMS_COTA+0x408>
			} else if (strcmp(parameter, "USER") == 0) {
 8017f90:	491d      	ldr	r1, [pc, #116]	@ (8018008 <SMS_COTA+0x3b4>)
 8017f92:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8017f96:	f7e8 f97b 	bl	8000290 <strcmp>
 8017f9a:	4603      	mov	r3, r0
 8017f9c:	2b00      	cmp	r3, #0
 8017f9e:	d135      	bne.n	801800c <SMS_COTA+0x3b8>
				SGET_USER(opBuffer);
 8017fa0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8017fa4:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8017fa8:	6818      	ldr	r0, [r3, #0]
 8017faa:	f000 fc25 	bl	80187f8 <SGET_USER>
 8017fae:	e055      	b.n	801805c <SMS_COTA+0x408>
 8017fb0:	08022f84 	.word	0x08022f84
 8017fb4:	08022f88 	.word	0x08022f88
 8017fb8:	08022f8c 	.word	0x08022f8c
 8017fbc:	08022f90 	.word	0x08022f90
 8017fc0:	08022f94 	.word	0x08022f94
 8017fc4:	08022f9c 	.word	0x08022f9c
 8017fc8:	08022fa4 	.word	0x08022fa4
 8017fcc:	08022fac 	.word	0x08022fac
 8017fd0:	08022fb4 	.word	0x08022fb4
 8017fd4:	08022fb8 	.word	0x08022fb8
 8017fd8:	08022fbc 	.word	0x08022fbc
 8017fdc:	08022fc0 	.word	0x08022fc0
 8017fe0:	08022fc8 	.word	0x08022fc8
 8017fe4:	08022fd0 	.word	0x08022fd0
 8017fe8:	08022fd8 	.word	0x08022fd8
 8017fec:	08022fe0 	.word	0x08022fe0
 8017ff0:	08022fe4 	.word	0x08022fe4
 8017ff4:	08022fe8 	.word	0x08022fe8
 8017ff8:	08022ff0 	.word	0x08022ff0
 8017ffc:	08022ff4 	.word	0x08022ff4
 8018000:	08022ff8 	.word	0x08022ff8
 8018004:	08022ffc 	.word	0x08022ffc
 8018008:	08023008 	.word	0x08023008
			} else if (strcmp(parameter, "PASSWORD") == 0) {
 801800c:	49c4      	ldr	r1, [pc, #784]	@ (8018320 <SMS_COTA+0x6cc>)
 801800e:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8018012:	f7e8 f93d 	bl	8000290 <strcmp>
 8018016:	4603      	mov	r3, r0
 8018018:	2b00      	cmp	r3, #0
 801801a:	d107      	bne.n	801802c <SMS_COTA+0x3d8>
				SGET_PASSWORD(opBuffer);
 801801c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8018020:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8018024:	6818      	ldr	r0, [r3, #0]
 8018026:	f000 fbf7 	bl	8018818 <SGET_PASSWORD>
 801802a:	e017      	b.n	801805c <SMS_COTA+0x408>
			} else if (strcmp(parameter, "VIN") == 0) {
 801802c:	49bd      	ldr	r1, [pc, #756]	@ (8018324 <SMS_COTA+0x6d0>)
 801802e:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8018032:	f7e8 f92d 	bl	8000290 <strcmp>
 8018036:	4603      	mov	r3, r0
 8018038:	2b00      	cmp	r3, #0
 801803a:	d107      	bne.n	801804c <SMS_COTA+0x3f8>
				SGET_VIN(opBuffer);
 801803c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8018040:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8018044:	6818      	ldr	r0, [r3, #0]
 8018046:	f000 fbf7 	bl	8018838 <SGET_VIN>
 801804a:	e007      	b.n	801805c <SMS_COTA+0x408>
			} else {
				// Handle unknown parameter
				printc(MinDelay, "Unknown parameter: %s\n", parameter);
 801804c:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 8018050:	49b5      	ldr	r1, [pc, #724]	@ (8018328 <SMS_COTA+0x6d4>)
 8018052:	200a      	movs	r0, #10
 8018054:	f7e9 fce0 	bl	8001a18 <printc>
				return false;
 8018058:	2300      	movs	r3, #0
 801805a:	e24e      	b.n	80184fa <SMS_COTA+0x8a6>
			}
			char *tmpcheck = strdup(opBuffer);
 801805c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8018060:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8018064:	6818      	ldr	r0, [r3, #0]
 8018066:	f006 ff07 	bl	801ee78 <strdup>
 801806a:	4603      	mov	r3, r0
 801806c:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
			sprintf(opBuffer, "%s:%s", parameter, tmpcheck);
 8018070:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8018074:	f5a3 7006 	sub.w	r0, r3, #536	@ 0x218
 8018078:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801807c:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 8018080:	49aa      	ldr	r1, [pc, #680]	@ (801832c <SMS_COTA+0x6d8>)
 8018082:	6800      	ldr	r0, [r0, #0]
 8018084:	f006 fd78 	bl	801eb78 <siprintf>
 8018088:	e236      	b.n	80184f8 <SMS_COTA+0x8a4>
		} else {
			// Handle GET command without parameter
			printc(MinDelay, "No parameter specified for GET command.\n");
 801808a:	49a9      	ldr	r1, [pc, #676]	@ (8018330 <SMS_COTA+0x6dc>)
 801808c:	200a      	movs	r0, #10
 801808e:	f7e9 fcc3 	bl	8001a18 <printc>
			return false;
 8018092:	2300      	movs	r3, #0
 8018094:	e231      	b.n	80184fa <SMS_COTA+0x8a6>
		}
	} else if (strcmp(command, "SET") == 0) {
 8018096:	49a7      	ldr	r1, [pc, #668]	@ (8018334 <SMS_COTA+0x6e0>)
 8018098:	f8d7 0214 	ldr.w	r0, [r7, #532]	@ 0x214
 801809c:	f7e8 f8f8 	bl	8000290 <strcmp>
 80180a0:	4603      	mov	r3, r0
 80180a2:	2b00      	cmp	r3, #0
 80180a4:	f040 8220 	bne.w	80184e8 <SMS_COTA+0x894>

		if (parameter != NULL) {
 80180a8:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 80180ac:	2b00      	cmp	r3, #0
 80180ae:	f000 8215 	beq.w	80184dc <SMS_COTA+0x888>
			if (value != NULL) {
 80180b2:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80180b6:	2b00      	cmp	r3, #0
 80180b8:	f000 8208 	beq.w	80184cc <SMS_COTA+0x878>
				// Handle SET command with parameter and value
				if (strcmp(parameter, "MIP") == 0) {
 80180bc:	499e      	ldr	r1, [pc, #632]	@ (8018338 <SMS_COTA+0x6e4>)
 80180be:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 80180c2:	f7e8 f8e5 	bl	8000290 <strcmp>
 80180c6:	4603      	mov	r3, r0
 80180c8:	2b00      	cmp	r3, #0
 80180ca:	d108      	bne.n	80180de <SMS_COTA+0x48a>
					SET_MIP(value);
 80180cc:	f8d7 0208 	ldr.w	r0, [r7, #520]	@ 0x208
 80180d0:	f000 fbc2 	bl	8018858 <SET_MIP>
					setTcpServerIP(value);
 80180d4:	f8d7 0208 	ldr.w	r0, [r7, #520]	@ 0x208
 80180d8:	f004 fc08 	bl	801c8ec <setTcpServerIP>
 80180dc:	e1c9      	b.n	8018472 <SMS_COTA+0x81e>
				} else if (strcmp(parameter, "PORT1") == 0) {
 80180de:	4997      	ldr	r1, [pc, #604]	@ (801833c <SMS_COTA+0x6e8>)
 80180e0:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 80180e4:	f7e8 f8d4 	bl	8000290 <strcmp>
 80180e8:	4603      	mov	r3, r0
 80180ea:	2b00      	cmp	r3, #0
 80180ec:	d104      	bne.n	80180f8 <SMS_COTA+0x4a4>
					SET_PORT1(value);
 80180ee:	f8d7 0208 	ldr.w	r0, [r7, #520]	@ 0x208
 80180f2:	f000 fbcf 	bl	8018894 <SET_PORT1>
 80180f6:	e1bc      	b.n	8018472 <SMS_COTA+0x81e>
				} else if (strcmp(parameter, "MUSER") == 0) {
 80180f8:	4991      	ldr	r1, [pc, #580]	@ (8018340 <SMS_COTA+0x6ec>)
 80180fa:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 80180fe:	f7e8 f8c7 	bl	8000290 <strcmp>
 8018102:	4603      	mov	r3, r0
 8018104:	2b00      	cmp	r3, #0
 8018106:	d104      	bne.n	8018112 <SMS_COTA+0x4be>
					SET_MUSER(value);
 8018108:	f8d7 0208 	ldr.w	r0, [r7, #520]	@ 0x208
 801810c:	f000 fbe0 	bl	80188d0 <SET_MUSER>
 8018110:	e1af      	b.n	8018472 <SMS_COTA+0x81e>
				} else if (strcmp(parameter, "MPASS") == 0) {
 8018112:	498c      	ldr	r1, [pc, #560]	@ (8018344 <SMS_COTA+0x6f0>)
 8018114:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8018118:	f7e8 f8ba 	bl	8000290 <strcmp>
 801811c:	4603      	mov	r3, r0
 801811e:	2b00      	cmp	r3, #0
 8018120:	d104      	bne.n	801812c <SMS_COTA+0x4d8>
					SET_MPASS(value);
 8018122:	f8d7 0208 	ldr.w	r0, [r7, #520]	@ 0x208
 8018126:	f000 fbf1 	bl	801890c <SET_MPASS>
 801812a:	e1a2      	b.n	8018472 <SMS_COTA+0x81e>
				} else if (strcmp(parameter, "CERT") == 0) {
 801812c:	4986      	ldr	r1, [pc, #536]	@ (8018348 <SMS_COTA+0x6f4>)
 801812e:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8018132:	f7e8 f8ad 	bl	8000290 <strcmp>
 8018136:	4603      	mov	r3, r0
 8018138:	2b00      	cmp	r3, #0
 801813a:	d104      	bne.n	8018146 <SMS_COTA+0x4f2>
					SET_CERT(value);
 801813c:	f8d7 0208 	ldr.w	r0, [r7, #520]	@ 0x208
 8018140:	f000 fc02 	bl	8018948 <SET_CERT>
 8018144:	e195      	b.n	8018472 <SMS_COTA+0x81e>
				} else if (strcmp(parameter, "KEY") == 0) {
 8018146:	4981      	ldr	r1, [pc, #516]	@ (801834c <SMS_COTA+0x6f8>)
 8018148:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 801814c:	f7e8 f8a0 	bl	8000290 <strcmp>
 8018150:	4603      	mov	r3, r0
 8018152:	2b00      	cmp	r3, #0
 8018154:	d104      	bne.n	8018160 <SMS_COTA+0x50c>
					SET_KEY(value);
 8018156:	f8d7 0208 	ldr.w	r0, [r7, #520]	@ 0x208
 801815a:	f000 fc13 	bl	8018984 <SET_KEY>
 801815e:	e188      	b.n	8018472 <SMS_COTA+0x81e>
				} else if (strcmp(parameter, "CA") == 0) {
 8018160:	497b      	ldr	r1, [pc, #492]	@ (8018350 <SMS_COTA+0x6fc>)
 8018162:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8018166:	f7e8 f893 	bl	8000290 <strcmp>
 801816a:	4603      	mov	r3, r0
 801816c:	2b00      	cmp	r3, #0
 801816e:	d104      	bne.n	801817a <SMS_COTA+0x526>
					SET_CA(value);
 8018170:	f8d7 0208 	ldr.w	r0, [r7, #520]	@ 0x208
 8018174:	f000 fc24 	bl	80189c0 <SET_CA>
 8018178:	e17b      	b.n	8018472 <SMS_COTA+0x81e>
				} else if (strcmp(parameter, "IP2") == 0) {
 801817a:	4976      	ldr	r1, [pc, #472]	@ (8018354 <SMS_COTA+0x700>)
 801817c:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8018180:	f7e8 f886 	bl	8000290 <strcmp>
 8018184:	4603      	mov	r3, r0
 8018186:	2b00      	cmp	r3, #0
 8018188:	d104      	bne.n	8018194 <SMS_COTA+0x540>
					SET_IP2(value);
 801818a:	f8d7 0208 	ldr.w	r0, [r7, #520]	@ 0x208
 801818e:	f000 fc35 	bl	80189fc <SET_IP2>
 8018192:	e16e      	b.n	8018472 <SMS_COTA+0x81e>
				} else if (strcmp(parameter, "PORT2") == 0) {
 8018194:	4970      	ldr	r1, [pc, #448]	@ (8018358 <SMS_COTA+0x704>)
 8018196:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 801819a:	f7e8 f879 	bl	8000290 <strcmp>
 801819e:	4603      	mov	r3, r0
 80181a0:	2b00      	cmp	r3, #0
 80181a2:	d104      	bne.n	80181ae <SMS_COTA+0x55a>
					SET_PORT2(value);
 80181a4:	f8d7 0208 	ldr.w	r0, [r7, #520]	@ 0x208
 80181a8:	f000 fc46 	bl	8018a38 <SET_PORT2>
 80181ac:	e161      	b.n	8018472 <SMS_COTA+0x81e>
				} else if (strcmp(parameter, "SKEY1") == 0) {
 80181ae:	496b      	ldr	r1, [pc, #428]	@ (801835c <SMS_COTA+0x708>)
 80181b0:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 80181b4:	f7e8 f86c 	bl	8000290 <strcmp>
 80181b8:	4603      	mov	r3, r0
 80181ba:	2b00      	cmp	r3, #0
 80181bc:	d104      	bne.n	80181c8 <SMS_COTA+0x574>
					SET_SKEY1(value);
 80181be:	f8d7 0208 	ldr.w	r0, [r7, #520]	@ 0x208
 80181c2:	f000 fc57 	bl	8018a74 <SET_SKEY1>
 80181c6:	e154      	b.n	8018472 <SMS_COTA+0x81e>
				} else if (strcmp(parameter, "SKEY2") == 0) {
 80181c8:	4965      	ldr	r1, [pc, #404]	@ (8018360 <SMS_COTA+0x70c>)
 80181ca:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 80181ce:	f7e8 f85f 	bl	8000290 <strcmp>
 80181d2:	4603      	mov	r3, r0
 80181d4:	2b00      	cmp	r3, #0
 80181d6:	d104      	bne.n	80181e2 <SMS_COTA+0x58e>
					SET_SKEY2(value);
 80181d8:	f8d7 0208 	ldr.w	r0, [r7, #520]	@ 0x208
 80181dc:	f000 fc68 	bl	8018ab0 <SET_SKEY2>
 80181e0:	e147      	b.n	8018472 <SMS_COTA+0x81e>
				} else if (strcmp(parameter, "SKEY3") == 0) {
 80181e2:	4960      	ldr	r1, [pc, #384]	@ (8018364 <SMS_COTA+0x710>)
 80181e4:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 80181e8:	f7e8 f852 	bl	8000290 <strcmp>
 80181ec:	4603      	mov	r3, r0
 80181ee:	2b00      	cmp	r3, #0
 80181f0:	d104      	bne.n	80181fc <SMS_COTA+0x5a8>
					SET_SKEY3(value);
 80181f2:	f8d7 0208 	ldr.w	r0, [r7, #520]	@ 0x208
 80181f6:	f000 fc79 	bl	8018aec <SET_SKEY3>
 80181fa:	e13a      	b.n	8018472 <SMS_COTA+0x81e>
				} else if (strcmp(parameter, "APN") == 0) {
 80181fc:	495a      	ldr	r1, [pc, #360]	@ (8018368 <SMS_COTA+0x714>)
 80181fe:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8018202:	f7e8 f845 	bl	8000290 <strcmp>
 8018206:	4603      	mov	r3, r0
 8018208:	2b00      	cmp	r3, #0
 801820a:	d104      	bne.n	8018216 <SMS_COTA+0x5c2>
					SET_APN(value);
 801820c:	f8d7 0208 	ldr.w	r0, [r7, #520]	@ 0x208
 8018210:	f000 fc8a 	bl	8018b28 <SET_APN>
 8018214:	e12d      	b.n	8018472 <SMS_COTA+0x81e>
				} else if (strcmp(parameter, "ION") == 0) {
 8018216:	4955      	ldr	r1, [pc, #340]	@ (801836c <SMS_COTA+0x718>)
 8018218:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 801821c:	f7e8 f838 	bl	8000290 <strcmp>
 8018220:	4603      	mov	r3, r0
 8018222:	2b00      	cmp	r3, #0
 8018224:	d114      	bne.n	8018250 <SMS_COTA+0x5fc>
					int intValue = atoi(value);
 8018226:	f8d7 0208 	ldr.w	r0, [r7, #520]	@ 0x208
 801822a:	f004 fd8c 	bl	801cd46 <atoi>
 801822e:	f8c7 0204 	str.w	r0, [r7, #516]	@ 0x204
					if (intValue > 3) {
 8018232:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 8018236:	2b03      	cmp	r3, #3
 8018238:	dd08      	ble.n	801824c <SMS_COTA+0x5f8>
						SET_ION(value);
 801823a:	f8d7 0208 	ldr.w	r0, [r7, #520]	@ 0x208
 801823e:	f000 fc91 	bl	8018b64 <SET_ION>
						setSampling(intValue);
 8018242:	f8d7 0204 	ldr.w	r0, [r7, #516]	@ 0x204
 8018246:	f7eb f95d 	bl	8003504 <setSampling>
 801824a:	e112      	b.n	8018472 <SMS_COTA+0x81e>
					} else
						return false;
 801824c:	2300      	movs	r3, #0
 801824e:	e154      	b.n	80184fa <SMS_COTA+0x8a6>
				} else if (strcmp(parameter, "NSAM") == 0) {
 8018250:	4947      	ldr	r1, [pc, #284]	@ (8018370 <SMS_COTA+0x71c>)
 8018252:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8018256:	f7e8 f81b 	bl	8000290 <strcmp>
 801825a:	4603      	mov	r3, r0
 801825c:	2b00      	cmp	r3, #0
 801825e:	d104      	bne.n	801826a <SMS_COTA+0x616>
					SET_NSAM(value);
 8018260:	f8d7 0208 	ldr.w	r0, [r7, #520]	@ 0x208
 8018264:	f000 fc9c 	bl	8018ba0 <SET_NSAM>
 8018268:	e103      	b.n	8018472 <SMS_COTA+0x81e>
				} else if (strcmp(parameter, "RESET") == 0) {
 801826a:	4942      	ldr	r1, [pc, #264]	@ (8018374 <SMS_COTA+0x720>)
 801826c:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8018270:	f7e8 f80e 	bl	8000290 <strcmp>
 8018274:	4603      	mov	r3, r0
 8018276:	2b00      	cmp	r3, #0
 8018278:	d103      	bne.n	8018282 <SMS_COTA+0x62e>
					SRESET_FLAG = true;
 801827a:	4b3f      	ldr	r3, [pc, #252]	@ (8018378 <SMS_COTA+0x724>)
 801827c:	2201      	movs	r2, #1
 801827e:	701a      	strb	r2, [r3, #0]
 8018280:	e0f7      	b.n	8018472 <SMS_COTA+0x81e>
				} else if (strcmp(parameter, "HA") == 0) {
 8018282:	493e      	ldr	r1, [pc, #248]	@ (801837c <SMS_COTA+0x728>)
 8018284:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8018288:	f7e8 f802 	bl	8000290 <strcmp>
 801828c:	4603      	mov	r3, r0
 801828e:	2b00      	cmp	r3, #0
 8018290:	d104      	bne.n	801829c <SMS_COTA+0x648>
					SET_HA(value);
 8018292:	f8d7 0208 	ldr.w	r0, [r7, #520]	@ 0x208
 8018296:	f000 fca1 	bl	8018bdc <SET_HA>
 801829a:	e0ea      	b.n	8018472 <SMS_COTA+0x81e>
				} else if (strcmp(parameter, "HB") == 0) {
 801829c:	4938      	ldr	r1, [pc, #224]	@ (8018380 <SMS_COTA+0x72c>)
 801829e:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 80182a2:	f7e7 fff5 	bl	8000290 <strcmp>
 80182a6:	4603      	mov	r3, r0
 80182a8:	2b00      	cmp	r3, #0
 80182aa:	d104      	bne.n	80182b6 <SMS_COTA+0x662>
					SET_HB(value);
 80182ac:	f8d7 0208 	ldr.w	r0, [r7, #520]	@ 0x208
 80182b0:	f000 fcb2 	bl	8018c18 <SET_HB>
 80182b4:	e0dd      	b.n	8018472 <SMS_COTA+0x81e>
				} else if (strcmp(parameter, "HC") == 0) {
 80182b6:	4933      	ldr	r1, [pc, #204]	@ (8018384 <SMS_COTA+0x730>)
 80182b8:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 80182bc:	f7e7 ffe8 	bl	8000290 <strcmp>
 80182c0:	4603      	mov	r3, r0
 80182c2:	2b00      	cmp	r3, #0
 80182c4:	d104      	bne.n	80182d0 <SMS_COTA+0x67c>
					SET_HC(value);
 80182c6:	f8d7 0208 	ldr.w	r0, [r7, #520]	@ 0x208
 80182ca:	f000 fcc3 	bl	8018c54 <SET_HC>
 80182ce:	e0d0      	b.n	8018472 <SMS_COTA+0x81e>
				} else if (strcmp(parameter, "ACCOFFSET") == 0) {
 80182d0:	492d      	ldr	r1, [pc, #180]	@ (8018388 <SMS_COTA+0x734>)
 80182d2:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 80182d6:	f7e7 ffdb 	bl	8000290 <strcmp>
 80182da:	4603      	mov	r3, r0
 80182dc:	2b00      	cmp	r3, #0
 80182de:	d104      	bne.n	80182ea <SMS_COTA+0x696>
					SET_ACCOFFSET(value);
 80182e0:	f8d7 0208 	ldr.w	r0, [r7, #520]	@ 0x208
 80182e4:	f000 fcd4 	bl	8018c90 <SET_ACCOFFSET>
 80182e8:	e0c3      	b.n	8018472 <SMS_COTA+0x81e>
				} else if (strcmp(parameter, "USER") == 0) {
 80182ea:	4928      	ldr	r1, [pc, #160]	@ (801838c <SMS_COTA+0x738>)
 80182ec:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 80182f0:	f7e7 ffce 	bl	8000290 <strcmp>
 80182f4:	4603      	mov	r3, r0
 80182f6:	2b00      	cmp	r3, #0
 80182f8:	d104      	bne.n	8018304 <SMS_COTA+0x6b0>
					SET_USER(value);
 80182fa:	f8d7 0208 	ldr.w	r0, [r7, #520]	@ 0x208
 80182fe:	f000 fce5 	bl	8018ccc <SET_USER>
 8018302:	e0b6      	b.n	8018472 <SMS_COTA+0x81e>
				} else if (strcmp(parameter, "PASSWORD") == 0) {
 8018304:	4906      	ldr	r1, [pc, #24]	@ (8018320 <SMS_COTA+0x6cc>)
 8018306:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 801830a:	f7e7 ffc1 	bl	8000290 <strcmp>
 801830e:	4603      	mov	r3, r0
 8018310:	2b00      	cmp	r3, #0
 8018312:	d13d      	bne.n	8018390 <SMS_COTA+0x73c>
					SET_PASSWORD(value);
 8018314:	f8d7 0208 	ldr.w	r0, [r7, #520]	@ 0x208
 8018318:	f000 fcf6 	bl	8018d08 <SET_PASSWORD>
 801831c:	e0a9      	b.n	8018472 <SMS_COTA+0x81e>
 801831e:	bf00      	nop
 8018320:	08023010 	.word	0x08023010
 8018324:	0802301c 	.word	0x0802301c
 8018328:	08023020 	.word	0x08023020
 801832c:	08023038 	.word	0x08023038
 8018330:	08023040 	.word	0x08023040
 8018334:	0802306c 	.word	0x0802306c
 8018338:	08022f90 	.word	0x08022f90
 801833c:	08022f94 	.word	0x08022f94
 8018340:	08022f9c 	.word	0x08022f9c
 8018344:	08022fa4 	.word	0x08022fa4
 8018348:	08022fac 	.word	0x08022fac
 801834c:	08022fb4 	.word	0x08022fb4
 8018350:	08022fb8 	.word	0x08022fb8
 8018354:	08022fbc 	.word	0x08022fbc
 8018358:	08022fc0 	.word	0x08022fc0
 801835c:	08022fc8 	.word	0x08022fc8
 8018360:	08022fd0 	.word	0x08022fd0
 8018364:	08022fd8 	.word	0x08022fd8
 8018368:	08022fe0 	.word	0x08022fe0
 801836c:	08022fe4 	.word	0x08022fe4
 8018370:	08022fe8 	.word	0x08022fe8
 8018374:	08023070 	.word	0x08023070
 8018378:	20014d94 	.word	0x20014d94
 801837c:	08022ff0 	.word	0x08022ff0
 8018380:	08022ff4 	.word	0x08022ff4
 8018384:	08022ff8 	.word	0x08022ff8
 8018388:	08022ffc 	.word	0x08022ffc
 801838c:	08023008 	.word	0x08023008
				} else if (strcmp(parameter, "VIN") == 0) {
 8018390:	495c      	ldr	r1, [pc, #368]	@ (8018504 <SMS_COTA+0x8b0>)
 8018392:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8018396:	f7e7 ff7b 	bl	8000290 <strcmp>
 801839a:	4603      	mov	r3, r0
 801839c:	2b00      	cmp	r3, #0
 801839e:	d104      	bne.n	80183aa <SMS_COTA+0x756>
					SET_VIN(value);
 80183a0:	f8d7 0208 	ldr.w	r0, [r7, #520]	@ 0x208
 80183a4:	f000 fcce 	bl	8018d44 <SET_VIN>
 80183a8:	e063      	b.n	8018472 <SMS_COTA+0x81e>
				} else if (strcmp(parameter, "UPFW") == 0) {
 80183aa:	4957      	ldr	r1, [pc, #348]	@ (8018508 <SMS_COTA+0x8b4>)
 80183ac:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 80183b0:	f7e7 ff6e 	bl	8000290 <strcmp>
 80183b4:	4603      	mov	r3, r0
 80183b6:	2b00      	cmp	r3, #0
 80183b8:	d153      	bne.n	8018462 <SMS_COTA+0x80e>
					clearBuffer(splitBuffer, sizeof(splitBuffer));
 80183ba:	f107 030c 	add.w	r3, r7, #12
 80183be:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80183c2:	4618      	mov	r0, r3
 80183c4:	f7e9 fb80 	bl	8001ac8 <clearBuffer>
					splitString(parameter2, ":", splitBuffer);
 80183c8:	f107 030c 	add.w	r3, r7, #12
 80183cc:	461a      	mov	r2, r3
 80183ce:	494f      	ldr	r1, [pc, #316]	@ (801850c <SMS_COTA+0x8b8>)
 80183d0:	f8d7 020c 	ldr.w	r0, [r7, #524]	@ 0x20c
 80183d4:	f7e9 fb86 	bl	8001ae4 <splitString>
					if (strcmp(splitBuffer[0], "TML") == 0) {
 80183d8:	f107 030c 	add.w	r3, r7, #12
 80183dc:	494c      	ldr	r1, [pc, #304]	@ (8018510 <SMS_COTA+0x8bc>)
 80183de:	4618      	mov	r0, r3
 80183e0:	f7e7 ff56 	bl	8000290 <strcmp>
 80183e4:	4603      	mov	r3, r0
 80183e6:	2b00      	cmp	r3, #0
 80183e8:	d127      	bne.n	801843a <SMS_COTA+0x7e6>
						//						checking password
						if (!strcmp(splitBuffer[1], "1234")) {
 80183ea:	f107 030c 	add.w	r3, r7, #12
 80183ee:	3364      	adds	r3, #100	@ 0x64
 80183f0:	4948      	ldr	r1, [pc, #288]	@ (8018514 <SMS_COTA+0x8c0>)
 80183f2:	4618      	mov	r0, r3
 80183f4:	f7e7 ff4c 	bl	8000290 <strcmp>
 80183f8:	4603      	mov	r3, r0
 80183fa:	2b00      	cmp	r3, #0
 80183fc:	d107      	bne.n	801840e <SMS_COTA+0x7ba>
							SET_FOTA_UPDATE(value);
 80183fe:	f8d7 0208 	ldr.w	r0, [r7, #520]	@ 0x208
 8018402:	f000 fe2f 	bl	8019064 <SET_FOTA_UPDATE>
							setUpdateStaus(true);
 8018406:	2001      	movs	r0, #1
 8018408:	f7ff fc0a 	bl	8017c20 <setUpdateStaus>
 801840c:	e031      	b.n	8018472 <SMS_COTA+0x81e>
						} else {
							strcpy(opBuffer, "Password Didn't Match\n");
 801840e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8018412:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8018416:	681b      	ldr	r3, [r3, #0]
 8018418:	4a3f      	ldr	r2, [pc, #252]	@ (8018518 <SMS_COTA+0x8c4>)
 801841a:	461c      	mov	r4, r3
 801841c:	4615      	mov	r5, r2
 801841e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018420:	6020      	str	r0, [r4, #0]
 8018422:	6061      	str	r1, [r4, #4]
 8018424:	60a2      	str	r2, [r4, #8]
 8018426:	60e3      	str	r3, [r4, #12]
 8018428:	6828      	ldr	r0, [r5, #0]
 801842a:	6120      	str	r0, [r4, #16]
 801842c:	88ab      	ldrh	r3, [r5, #4]
 801842e:	79aa      	ldrb	r2, [r5, #6]
 8018430:	82a3      	strh	r3, [r4, #20]
 8018432:	4613      	mov	r3, r2
 8018434:	75a3      	strb	r3, [r4, #22]
							return false;
 8018436:	2300      	movs	r3, #0
 8018438:	e05f      	b.n	80184fa <SMS_COTA+0x8a6>
						}
					} else {
						strcpy(opBuffer, "UPFW Format Not Matched\n");
 801843a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 801843e:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8018442:	681b      	ldr	r3, [r3, #0]
 8018444:	4a35      	ldr	r2, [pc, #212]	@ (801851c <SMS_COTA+0x8c8>)
 8018446:	461d      	mov	r5, r3
 8018448:	4614      	mov	r4, r2
 801844a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801844c:	6028      	str	r0, [r5, #0]
 801844e:	6069      	str	r1, [r5, #4]
 8018450:	60aa      	str	r2, [r5, #8]
 8018452:	60eb      	str	r3, [r5, #12]
 8018454:	cc03      	ldmia	r4!, {r0, r1}
 8018456:	6128      	str	r0, [r5, #16]
 8018458:	6169      	str	r1, [r5, #20]
 801845a:	7823      	ldrb	r3, [r4, #0]
 801845c:	762b      	strb	r3, [r5, #24]
						return false;
 801845e:	2300      	movs	r3, #0
 8018460:	e04b      	b.n	80184fa <SMS_COTA+0x8a6>
					}
				} else {
					// Handle unknown parameter
//					sprintf(opBuffer, "%s Unknown parameter:",parameter);
					printc(MinDelay, "Unknown parameter: %s\n", parameter);
 8018462:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 8018466:	492e      	ldr	r1, [pc, #184]	@ (8018520 <SMS_COTA+0x8cc>)
 8018468:	200a      	movs	r0, #10
 801846a:	f7e9 fad5 	bl	8001a18 <printc>
					return false;
 801846e:	2300      	movs	r3, #0
 8018470:	e043      	b.n	80184fa <SMS_COTA+0x8a6>
				}
				if (strcmp(parameter, "UPFW") == 0) {
 8018472:	4925      	ldr	r1, [pc, #148]	@ (8018508 <SMS_COTA+0x8b4>)
 8018474:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8018478:	f7e7 ff0a 	bl	8000290 <strcmp>
 801847c:	4603      	mov	r3, r0
 801847e:	2b00      	cmp	r3, #0
 8018480:	d10a      	bne.n	8018498 <SMS_COTA+0x844>
					sprintf(opBuffer, "%s Updating", parameter);
 8018482:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8018486:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801848a:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 801848e:	4925      	ldr	r1, [pc, #148]	@ (8018524 <SMS_COTA+0x8d0>)
 8018490:	6818      	ldr	r0, [r3, #0]
 8018492:	f006 fb71 	bl	801eb78 <siprintf>
 8018496:	e02f      	b.n	80184f8 <SMS_COTA+0x8a4>
				} else if (SRESET_FLAG == true) {
 8018498:	4b23      	ldr	r3, [pc, #140]	@ (8018528 <SMS_COTA+0x8d4>)
 801849a:	781b      	ldrb	r3, [r3, #0]
 801849c:	2b00      	cmp	r3, #0
 801849e:	d00a      	beq.n	80184b6 <SMS_COTA+0x862>
					sprintf(opBuffer, "%s OK", parameter);
 80184a0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80184a4:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80184a8:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 80184ac:	491f      	ldr	r1, [pc, #124]	@ (801852c <SMS_COTA+0x8d8>)
 80184ae:	6818      	ldr	r0, [r3, #0]
 80184b0:	f006 fb62 	bl	801eb78 <siprintf>
 80184b4:	e020      	b.n	80184f8 <SMS_COTA+0x8a4>
				} else
					sprintf(opBuffer, "%s Updated", parameter);
 80184b6:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80184ba:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80184be:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 80184c2:	491b      	ldr	r1, [pc, #108]	@ (8018530 <SMS_COTA+0x8dc>)
 80184c4:	6818      	ldr	r0, [r3, #0]
 80184c6:	f006 fb57 	bl	801eb78 <siprintf>
 80184ca:	e015      	b.n	80184f8 <SMS_COTA+0x8a4>
			} else {
				// Handle SET command without value
				printc(MinDelay, "Value not specified for parameter: %s\n",
 80184cc:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 80184d0:	4918      	ldr	r1, [pc, #96]	@ (8018534 <SMS_COTA+0x8e0>)
 80184d2:	200a      	movs	r0, #10
 80184d4:	f7e9 faa0 	bl	8001a18 <printc>
						parameter);
				return false;
 80184d8:	2300      	movs	r3, #0
 80184da:	e00e      	b.n	80184fa <SMS_COTA+0x8a6>
			}
		} else {
			// Handle SET command without parameter and value
			printc(MinDelay,
 80184dc:	4916      	ldr	r1, [pc, #88]	@ (8018538 <SMS_COTA+0x8e4>)
 80184de:	200a      	movs	r0, #10
 80184e0:	f7e9 fa9a 	bl	8001a18 <printc>
					"parameter and value not specified for SET or GET command.\n");
			return false;
 80184e4:	2300      	movs	r3, #0
 80184e6:	e008      	b.n	80184fa <SMS_COTA+0x8a6>
		}
	} else {
		// Handle unknown commands
		printc(MinDelay, "Unknown command: %s\n", command);
 80184e8:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 80184ec:	4913      	ldr	r1, [pc, #76]	@ (801853c <SMS_COTA+0x8e8>)
 80184ee:	200a      	movs	r0, #10
 80184f0:	f7e9 fa92 	bl	8001a18 <printc>
		return false;
 80184f4:	2300      	movs	r3, #0
 80184f6:	e000      	b.n	80184fa <SMS_COTA+0x8a6>
	}
	return true;
 80184f8:	2301      	movs	r3, #1
}
 80184fa:	4618      	mov	r0, r3
 80184fc:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8018500:	46bd      	mov	sp, r7
 8018502:	bdb0      	pop	{r4, r5, r7, pc}
 8018504:	0802301c 	.word	0x0802301c
 8018508:	08023078 	.word	0x08023078
 801850c:	08022f88 	.word	0x08022f88
 8018510:	08023080 	.word	0x08023080
 8018514:	08023084 	.word	0x08023084
 8018518:	0802308c 	.word	0x0802308c
 801851c:	080230a4 	.word	0x080230a4
 8018520:	08023020 	.word	0x08023020
 8018524:	080230c0 	.word	0x080230c0
 8018528:	20014d94 	.word	0x20014d94
 801852c:	080230cc 	.word	0x080230cc
 8018530:	080230d4 	.word	0x080230d4
 8018534:	080230e0 	.word	0x080230e0
 8018538:	08023108 	.word	0x08023108
 801853c:	08023144 	.word	0x08023144

08018540 <SGET_MIP>:

void SGET_MIP(char *opBuffer) {
 8018540:	b580      	push	{r7, lr}
 8018542:	b082      	sub	sp, #8
 8018544:	af00      	add	r7, sp, #0
 8018546:	6078      	str	r0, [r7, #4]
	strcpy(opBuffer, Rconfig.MIP);
 8018548:	4b04      	ldr	r3, [pc, #16]	@ (801855c <SGET_MIP+0x1c>)
 801854a:	681b      	ldr	r3, [r3, #0]
 801854c:	4619      	mov	r1, r3
 801854e:	6878      	ldr	r0, [r7, #4]
 8018550:	f006 fdcb 	bl	801f0ea <strcpy>
}
 8018554:	bf00      	nop
 8018556:	3708      	adds	r7, #8
 8018558:	46bd      	mov	sp, r7
 801855a:	bd80      	pop	{r7, pc}
 801855c:	20014ca0 	.word	0x20014ca0

08018560 <SGET_PORT1>:

void SGET_PORT1(char *opBuffer) {
 8018560:	b580      	push	{r7, lr}
 8018562:	b082      	sub	sp, #8
 8018564:	af00      	add	r7, sp, #0
 8018566:	6078      	str	r0, [r7, #4]
	if (Rconfig.MPORT1 != NULL)
 8018568:	4b06      	ldr	r3, [pc, #24]	@ (8018584 <SGET_PORT1+0x24>)
 801856a:	685b      	ldr	r3, [r3, #4]
 801856c:	2b00      	cmp	r3, #0
 801856e:	d005      	beq.n	801857c <SGET_PORT1+0x1c>
		strcpy(opBuffer, Rconfig.MPORT1);
 8018570:	4b04      	ldr	r3, [pc, #16]	@ (8018584 <SGET_PORT1+0x24>)
 8018572:	685b      	ldr	r3, [r3, #4]
 8018574:	4619      	mov	r1, r3
 8018576:	6878      	ldr	r0, [r7, #4]
 8018578:	f006 fdb7 	bl	801f0ea <strcpy>
}
 801857c:	bf00      	nop
 801857e:	3708      	adds	r7, #8
 8018580:	46bd      	mov	sp, r7
 8018582:	bd80      	pop	{r7, pc}
 8018584:	20014ca0 	.word	0x20014ca0

08018588 <SGET_MUSER>:

void SGET_MUSER(char *opBuffer) {
 8018588:	b580      	push	{r7, lr}
 801858a:	b082      	sub	sp, #8
 801858c:	af00      	add	r7, sp, #0
 801858e:	6078      	str	r0, [r7, #4]
	strcpy(opBuffer, Rconfig.MUSER);
 8018590:	4b04      	ldr	r3, [pc, #16]	@ (80185a4 <SGET_MUSER+0x1c>)
 8018592:	689b      	ldr	r3, [r3, #8]
 8018594:	4619      	mov	r1, r3
 8018596:	6878      	ldr	r0, [r7, #4]
 8018598:	f006 fda7 	bl	801f0ea <strcpy>
}
 801859c:	bf00      	nop
 801859e:	3708      	adds	r7, #8
 80185a0:	46bd      	mov	sp, r7
 80185a2:	bd80      	pop	{r7, pc}
 80185a4:	20014ca0 	.word	0x20014ca0

080185a8 <SGET_MPASS>:

void SGET_MPASS(char *opBuffer) {
 80185a8:	b580      	push	{r7, lr}
 80185aa:	b082      	sub	sp, #8
 80185ac:	af00      	add	r7, sp, #0
 80185ae:	6078      	str	r0, [r7, #4]
	strcpy(opBuffer, Rconfig.MPASS);
 80185b0:	4b04      	ldr	r3, [pc, #16]	@ (80185c4 <SGET_MPASS+0x1c>)
 80185b2:	68db      	ldr	r3, [r3, #12]
 80185b4:	4619      	mov	r1, r3
 80185b6:	6878      	ldr	r0, [r7, #4]
 80185b8:	f006 fd97 	bl	801f0ea <strcpy>
}
 80185bc:	bf00      	nop
 80185be:	3708      	adds	r7, #8
 80185c0:	46bd      	mov	sp, r7
 80185c2:	bd80      	pop	{r7, pc}
 80185c4:	20014ca0 	.word	0x20014ca0

080185c8 <SGET_CERT>:

void SGET_CERT(char *opBuffer) {
 80185c8:	b580      	push	{r7, lr}
 80185ca:	b082      	sub	sp, #8
 80185cc:	af00      	add	r7, sp, #0
 80185ce:	6078      	str	r0, [r7, #4]
	strcpy(opBuffer, Rconfig.CERT);
 80185d0:	4b04      	ldr	r3, [pc, #16]	@ (80185e4 <SGET_CERT+0x1c>)
 80185d2:	691b      	ldr	r3, [r3, #16]
 80185d4:	4619      	mov	r1, r3
 80185d6:	6878      	ldr	r0, [r7, #4]
 80185d8:	f006 fd87 	bl	801f0ea <strcpy>
}
 80185dc:	bf00      	nop
 80185de:	3708      	adds	r7, #8
 80185e0:	46bd      	mov	sp, r7
 80185e2:	bd80      	pop	{r7, pc}
 80185e4:	20014ca0 	.word	0x20014ca0

080185e8 <SGET_KEY>:

void SGET_KEY(char *opBuffer) {
 80185e8:	b580      	push	{r7, lr}
 80185ea:	b082      	sub	sp, #8
 80185ec:	af00      	add	r7, sp, #0
 80185ee:	6078      	str	r0, [r7, #4]
	strcpy(opBuffer, Rconfig.KEY);
 80185f0:	4b04      	ldr	r3, [pc, #16]	@ (8018604 <SGET_KEY+0x1c>)
 80185f2:	695b      	ldr	r3, [r3, #20]
 80185f4:	4619      	mov	r1, r3
 80185f6:	6878      	ldr	r0, [r7, #4]
 80185f8:	f006 fd77 	bl	801f0ea <strcpy>
}
 80185fc:	bf00      	nop
 80185fe:	3708      	adds	r7, #8
 8018600:	46bd      	mov	sp, r7
 8018602:	bd80      	pop	{r7, pc}
 8018604:	20014ca0 	.word	0x20014ca0

08018608 <SGET_CA>:

void SGET_CA(char *opBuffer) {
 8018608:	b580      	push	{r7, lr}
 801860a:	b082      	sub	sp, #8
 801860c:	af00      	add	r7, sp, #0
 801860e:	6078      	str	r0, [r7, #4]
	strcpy(opBuffer, Rconfig.CA);
 8018610:	4b04      	ldr	r3, [pc, #16]	@ (8018624 <SGET_CA+0x1c>)
 8018612:	699b      	ldr	r3, [r3, #24]
 8018614:	4619      	mov	r1, r3
 8018616:	6878      	ldr	r0, [r7, #4]
 8018618:	f006 fd67 	bl	801f0ea <strcpy>
}
 801861c:	bf00      	nop
 801861e:	3708      	adds	r7, #8
 8018620:	46bd      	mov	sp, r7
 8018622:	bd80      	pop	{r7, pc}
 8018624:	20014ca0 	.word	0x20014ca0

08018628 <SGET_IP2>:

void SGET_IP2(char *opBuffer) {
 8018628:	b580      	push	{r7, lr}
 801862a:	b082      	sub	sp, #8
 801862c:	af00      	add	r7, sp, #0
 801862e:	6078      	str	r0, [r7, #4]
	strcpy(opBuffer, Rconfig.IP2);
 8018630:	4b04      	ldr	r3, [pc, #16]	@ (8018644 <SGET_IP2+0x1c>)
 8018632:	69db      	ldr	r3, [r3, #28]
 8018634:	4619      	mov	r1, r3
 8018636:	6878      	ldr	r0, [r7, #4]
 8018638:	f006 fd57 	bl	801f0ea <strcpy>
}
 801863c:	bf00      	nop
 801863e:	3708      	adds	r7, #8
 8018640:	46bd      	mov	sp, r7
 8018642:	bd80      	pop	{r7, pc}
 8018644:	20014ca0 	.word	0x20014ca0

08018648 <SGET_LAT>:

void SGET_LAT(double *lat){
 8018648:	b580      	push	{r7, lr}
 801864a:	b082      	sub	sp, #8
 801864c:	af00      	add	r7, sp, #0
 801864e:	6078      	str	r0, [r7, #4]
	sscanf(Rconfig.LAT, "%lf", lat);
 8018650:	4b05      	ldr	r3, [pc, #20]	@ (8018668 <SGET_LAT+0x20>)
 8018652:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8018654:	687a      	ldr	r2, [r7, #4]
 8018656:	4905      	ldr	r1, [pc, #20]	@ (801866c <SGET_LAT+0x24>)
 8018658:	4618      	mov	r0, r3
 801865a:	f006 faad 	bl	801ebb8 <siscanf>
}
 801865e:	bf00      	nop
 8018660:	3708      	adds	r7, #8
 8018662:	46bd      	mov	sp, r7
 8018664:	bd80      	pop	{r7, pc}
 8018666:	bf00      	nop
 8018668:	20014ca0 	.word	0x20014ca0
 801866c:	0802315c 	.word	0x0802315c

08018670 <SGET_LON>:
void SGET_LON(double *lon){
 8018670:	b580      	push	{r7, lr}
 8018672:	b082      	sub	sp, #8
 8018674:	af00      	add	r7, sp, #0
 8018676:	6078      	str	r0, [r7, #4]
	sscanf(Rconfig.LON, "%lf", lon);
 8018678:	4b05      	ldr	r3, [pc, #20]	@ (8018690 <SGET_LON+0x20>)
 801867a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801867e:	687a      	ldr	r2, [r7, #4]
 8018680:	4904      	ldr	r1, [pc, #16]	@ (8018694 <SGET_LON+0x24>)
 8018682:	4618      	mov	r0, r3
 8018684:	f006 fa98 	bl	801ebb8 <siscanf>
}
 8018688:	bf00      	nop
 801868a:	3708      	adds	r7, #8
 801868c:	46bd      	mov	sp, r7
 801868e:	bd80      	pop	{r7, pc}
 8018690:	20014ca0 	.word	0x20014ca0
 8018694:	0802315c 	.word	0x0802315c

08018698 <SGET_PORT2>:
void SGET_PORT2(char *opBuffer) {
 8018698:	b580      	push	{r7, lr}
 801869a:	b082      	sub	sp, #8
 801869c:	af00      	add	r7, sp, #0
 801869e:	6078      	str	r0, [r7, #4]
	strcpy(opBuffer, Rconfig.IPPORT2);
 80186a0:	4b04      	ldr	r3, [pc, #16]	@ (80186b4 <SGET_PORT2+0x1c>)
 80186a2:	6a1b      	ldr	r3, [r3, #32]
 80186a4:	4619      	mov	r1, r3
 80186a6:	6878      	ldr	r0, [r7, #4]
 80186a8:	f006 fd1f 	bl	801f0ea <strcpy>
}
 80186ac:	bf00      	nop
 80186ae:	3708      	adds	r7, #8
 80186b0:	46bd      	mov	sp, r7
 80186b2:	bd80      	pop	{r7, pc}
 80186b4:	20014ca0 	.word	0x20014ca0

080186b8 <SGET_SKEY1>:

void SGET_SKEY1(char *opBuffer) {
 80186b8:	b580      	push	{r7, lr}
 80186ba:	b082      	sub	sp, #8
 80186bc:	af00      	add	r7, sp, #0
 80186be:	6078      	str	r0, [r7, #4]
	strcpy(opBuffer, Rconfig.SKEY1);
 80186c0:	4b04      	ldr	r3, [pc, #16]	@ (80186d4 <SGET_SKEY1+0x1c>)
 80186c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80186c4:	4619      	mov	r1, r3
 80186c6:	6878      	ldr	r0, [r7, #4]
 80186c8:	f006 fd0f 	bl	801f0ea <strcpy>
}
 80186cc:	bf00      	nop
 80186ce:	3708      	adds	r7, #8
 80186d0:	46bd      	mov	sp, r7
 80186d2:	bd80      	pop	{r7, pc}
 80186d4:	20014ca0 	.word	0x20014ca0

080186d8 <SGET_SKEY2>:

void SGET_SKEY2(char *opBuffer) {
 80186d8:	b580      	push	{r7, lr}
 80186da:	b082      	sub	sp, #8
 80186dc:	af00      	add	r7, sp, #0
 80186de:	6078      	str	r0, [r7, #4]
	strcpy(opBuffer, Rconfig.SKEY2);
 80186e0:	4b04      	ldr	r3, [pc, #16]	@ (80186f4 <SGET_SKEY2+0x1c>)
 80186e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80186e4:	4619      	mov	r1, r3
 80186e6:	6878      	ldr	r0, [r7, #4]
 80186e8:	f006 fcff 	bl	801f0ea <strcpy>
}
 80186ec:	bf00      	nop
 80186ee:	3708      	adds	r7, #8
 80186f0:	46bd      	mov	sp, r7
 80186f2:	bd80      	pop	{r7, pc}
 80186f4:	20014ca0 	.word	0x20014ca0

080186f8 <SGET_SKEY3>:

void SGET_SKEY3(char *opBuffer) {
 80186f8:	b580      	push	{r7, lr}
 80186fa:	b082      	sub	sp, #8
 80186fc:	af00      	add	r7, sp, #0
 80186fe:	6078      	str	r0, [r7, #4]
	strcpy(opBuffer, Rconfig.SKEY3);
 8018700:	4b04      	ldr	r3, [pc, #16]	@ (8018714 <SGET_SKEY3+0x1c>)
 8018702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018704:	4619      	mov	r1, r3
 8018706:	6878      	ldr	r0, [r7, #4]
 8018708:	f006 fcef 	bl	801f0ea <strcpy>
}
 801870c:	bf00      	nop
 801870e:	3708      	adds	r7, #8
 8018710:	46bd      	mov	sp, r7
 8018712:	bd80      	pop	{r7, pc}
 8018714:	20014ca0 	.word	0x20014ca0

08018718 <SGET_APN>:

void SGET_APN(char *opBuffer) {
 8018718:	b580      	push	{r7, lr}
 801871a:	b082      	sub	sp, #8
 801871c:	af00      	add	r7, sp, #0
 801871e:	6078      	str	r0, [r7, #4]
	strcpy(opBuffer, Rconfig.DAPN);
 8018720:	4b04      	ldr	r3, [pc, #16]	@ (8018734 <SGET_APN+0x1c>)
 8018722:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018724:	4619      	mov	r1, r3
 8018726:	6878      	ldr	r0, [r7, #4]
 8018728:	f006 fcdf 	bl	801f0ea <strcpy>
}
 801872c:	bf00      	nop
 801872e:	3708      	adds	r7, #8
 8018730:	46bd      	mov	sp, r7
 8018732:	bd80      	pop	{r7, pc}
 8018734:	20014ca0 	.word	0x20014ca0

08018738 <SGET_ION>:

void SGET_ION(char *opBuffer) {
 8018738:	b580      	push	{r7, lr}
 801873a:	b082      	sub	sp, #8
 801873c:	af00      	add	r7, sp, #0
 801873e:	6078      	str	r0, [r7, #4]
	strcpy(opBuffer, Rconfig.ION);
 8018740:	4b04      	ldr	r3, [pc, #16]	@ (8018754 <SGET_ION+0x1c>)
 8018742:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018744:	4619      	mov	r1, r3
 8018746:	6878      	ldr	r0, [r7, #4]
 8018748:	f006 fccf 	bl	801f0ea <strcpy>
}
 801874c:	bf00      	nop
 801874e:	3708      	adds	r7, #8
 8018750:	46bd      	mov	sp, r7
 8018752:	bd80      	pop	{r7, pc}
 8018754:	20014ca0 	.word	0x20014ca0

08018758 <SGET_NSAM>:

void SGET_NSAM(char *opBuffer) {
 8018758:	b580      	push	{r7, lr}
 801875a:	b082      	sub	sp, #8
 801875c:	af00      	add	r7, sp, #0
 801875e:	6078      	str	r0, [r7, #4]
	strcpy(opBuffer, Rconfig.NSAM);
 8018760:	4b04      	ldr	r3, [pc, #16]	@ (8018774 <SGET_NSAM+0x1c>)
 8018762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018764:	4619      	mov	r1, r3
 8018766:	6878      	ldr	r0, [r7, #4]
 8018768:	f006 fcbf 	bl	801f0ea <strcpy>
}
 801876c:	bf00      	nop
 801876e:	3708      	adds	r7, #8
 8018770:	46bd      	mov	sp, r7
 8018772:	bd80      	pop	{r7, pc}
 8018774:	20014ca0 	.word	0x20014ca0

08018778 <SGET_HA>:

void SGET_HA(char *opBuffer) {
 8018778:	b580      	push	{r7, lr}
 801877a:	b082      	sub	sp, #8
 801877c:	af00      	add	r7, sp, #0
 801877e:	6078      	str	r0, [r7, #4]
	strcpy(opBuffer, Rconfig.HA);
 8018780:	4b04      	ldr	r3, [pc, #16]	@ (8018794 <SGET_HA+0x1c>)
 8018782:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018784:	4619      	mov	r1, r3
 8018786:	6878      	ldr	r0, [r7, #4]
 8018788:	f006 fcaf 	bl	801f0ea <strcpy>
}
 801878c:	bf00      	nop
 801878e:	3708      	adds	r7, #8
 8018790:	46bd      	mov	sp, r7
 8018792:	bd80      	pop	{r7, pc}
 8018794:	20014ca0 	.word	0x20014ca0

08018798 <SGET_HB>:

void SGET_HB(char *opBuffer) {
 8018798:	b580      	push	{r7, lr}
 801879a:	b082      	sub	sp, #8
 801879c:	af00      	add	r7, sp, #0
 801879e:	6078      	str	r0, [r7, #4]
	strcpy(opBuffer, Rconfig.HB);
 80187a0:	4b04      	ldr	r3, [pc, #16]	@ (80187b4 <SGET_HB+0x1c>)
 80187a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80187a4:	4619      	mov	r1, r3
 80187a6:	6878      	ldr	r0, [r7, #4]
 80187a8:	f006 fc9f 	bl	801f0ea <strcpy>
}
 80187ac:	bf00      	nop
 80187ae:	3708      	adds	r7, #8
 80187b0:	46bd      	mov	sp, r7
 80187b2:	bd80      	pop	{r7, pc}
 80187b4:	20014ca0 	.word	0x20014ca0

080187b8 <SGET_HC>:

void SGET_HC(char *opBuffer) {
 80187b8:	b580      	push	{r7, lr}
 80187ba:	b082      	sub	sp, #8
 80187bc:	af00      	add	r7, sp, #0
 80187be:	6078      	str	r0, [r7, #4]
	strcpy(opBuffer, Rconfig.HC);
 80187c0:	4b04      	ldr	r3, [pc, #16]	@ (80187d4 <SGET_HC+0x1c>)
 80187c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80187c4:	4619      	mov	r1, r3
 80187c6:	6878      	ldr	r0, [r7, #4]
 80187c8:	f006 fc8f 	bl	801f0ea <strcpy>
}
 80187cc:	bf00      	nop
 80187ce:	3708      	adds	r7, #8
 80187d0:	46bd      	mov	sp, r7
 80187d2:	bd80      	pop	{r7, pc}
 80187d4:	20014ca0 	.word	0x20014ca0

080187d8 <SGET_ACCOFFSET>:

void SGET_ACCOFFSET(char *opBuffer) {
 80187d8:	b580      	push	{r7, lr}
 80187da:	b082      	sub	sp, #8
 80187dc:	af00      	add	r7, sp, #0
 80187de:	6078      	str	r0, [r7, #4]
	strcpy(opBuffer, Rconfig.ACCOFFSET);
 80187e0:	4b04      	ldr	r3, [pc, #16]	@ (80187f4 <SGET_ACCOFFSET+0x1c>)
 80187e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80187e4:	4619      	mov	r1, r3
 80187e6:	6878      	ldr	r0, [r7, #4]
 80187e8:	f006 fc7f 	bl	801f0ea <strcpy>
}
 80187ec:	bf00      	nop
 80187ee:	3708      	adds	r7, #8
 80187f0:	46bd      	mov	sp, r7
 80187f2:	bd80      	pop	{r7, pc}
 80187f4:	20014ca0 	.word	0x20014ca0

080187f8 <SGET_USER>:

void SGET_USER(char *opBuffer) {
 80187f8:	b580      	push	{r7, lr}
 80187fa:	b082      	sub	sp, #8
 80187fc:	af00      	add	r7, sp, #0
 80187fe:	6078      	str	r0, [r7, #4]
	strcpy(opBuffer, Rconfig.USER);
 8018800:	4b04      	ldr	r3, [pc, #16]	@ (8018814 <SGET_USER+0x1c>)
 8018802:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8018804:	4619      	mov	r1, r3
 8018806:	6878      	ldr	r0, [r7, #4]
 8018808:	f006 fc6f 	bl	801f0ea <strcpy>
}
 801880c:	bf00      	nop
 801880e:	3708      	adds	r7, #8
 8018810:	46bd      	mov	sp, r7
 8018812:	bd80      	pop	{r7, pc}
 8018814:	20014ca0 	.word	0x20014ca0

08018818 <SGET_PASSWORD>:

void SGET_PASSWORD(char *opBuffer) {
 8018818:	b580      	push	{r7, lr}
 801881a:	b082      	sub	sp, #8
 801881c:	af00      	add	r7, sp, #0
 801881e:	6078      	str	r0, [r7, #4]
	strcpy(opBuffer, Rconfig.PSWD);
 8018820:	4b04      	ldr	r3, [pc, #16]	@ (8018834 <SGET_PASSWORD+0x1c>)
 8018822:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018824:	4619      	mov	r1, r3
 8018826:	6878      	ldr	r0, [r7, #4]
 8018828:	f006 fc5f 	bl	801f0ea <strcpy>
}
 801882c:	bf00      	nop
 801882e:	3708      	adds	r7, #8
 8018830:	46bd      	mov	sp, r7
 8018832:	bd80      	pop	{r7, pc}
 8018834:	20014ca0 	.word	0x20014ca0

08018838 <SGET_VIN>:

void SGET_VIN(char *opBuffer) {
 8018838:	b580      	push	{r7, lr}
 801883a:	b082      	sub	sp, #8
 801883c:	af00      	add	r7, sp, #0
 801883e:	6078      	str	r0, [r7, #4]
	strcpy(opBuffer, Rconfig.VIN);
 8018840:	4b04      	ldr	r3, [pc, #16]	@ (8018854 <SGET_VIN+0x1c>)
 8018842:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018844:	4619      	mov	r1, r3
 8018846:	6878      	ldr	r0, [r7, #4]
 8018848:	f006 fc4f 	bl	801f0ea <strcpy>
}
 801884c:	bf00      	nop
 801884e:	3708      	adds	r7, #8
 8018850:	46bd      	mov	sp, r7
 8018852:	bd80      	pop	{r7, pc}
 8018854:	20014ca0 	.word	0x20014ca0

08018858 <SET_MIP>:
	if (Rconfig.Rtime[0] != 0xff)
		strcpy(opBuffer, Rconfig.Rtime);
}

// Implement SET command functions similarly
bool SET_MIP(char *ip_address) {
 8018858:	b590      	push	{r4, r7, lr}
 801885a:	b083      	sub	sp, #12
 801885c:	af00      	add	r7, sp, #0
 801885e:	6078      	str	r0, [r7, #4]
	if (Rconfig.MIP != NULL)
 8018860:	4b0b      	ldr	r3, [pc, #44]	@ (8018890 <SET_MIP+0x38>)
 8018862:	681b      	ldr	r3, [r3, #0]
 8018864:	2b00      	cmp	r3, #0
 8018866:	d00b      	beq.n	8018880 <SET_MIP+0x28>
		clearBuffer(Rconfig.MIP, strlen(Rconfig.MIP));
 8018868:	4b09      	ldr	r3, [pc, #36]	@ (8018890 <SET_MIP+0x38>)
 801886a:	681c      	ldr	r4, [r3, #0]
 801886c:	4b08      	ldr	r3, [pc, #32]	@ (8018890 <SET_MIP+0x38>)
 801886e:	681b      	ldr	r3, [r3, #0]
 8018870:	4618      	mov	r0, r3
 8018872:	f7e7 fd17 	bl	80002a4 <strlen>
 8018876:	4603      	mov	r3, r0
 8018878:	4619      	mov	r1, r3
 801887a:	4620      	mov	r0, r4
 801887c:	f7e9 f924 	bl	8001ac8 <clearBuffer>
	Rconfig.MIP = ip_address;
 8018880:	4a03      	ldr	r2, [pc, #12]	@ (8018890 <SET_MIP+0x38>)
 8018882:	687b      	ldr	r3, [r7, #4]
 8018884:	6013      	str	r3, [r2, #0]
}
 8018886:	bf00      	nop
 8018888:	4618      	mov	r0, r3
 801888a:	370c      	adds	r7, #12
 801888c:	46bd      	mov	sp, r7
 801888e:	bd90      	pop	{r4, r7, pc}
 8018890:	20014ca0 	.word	0x20014ca0

08018894 <SET_PORT1>:

bool SET_PORT1(char *port) {
 8018894:	b590      	push	{r4, r7, lr}
 8018896:	b083      	sub	sp, #12
 8018898:	af00      	add	r7, sp, #0
 801889a:	6078      	str	r0, [r7, #4]
	if (Rconfig.MPORT1 != NULL)
 801889c:	4b0b      	ldr	r3, [pc, #44]	@ (80188cc <SET_PORT1+0x38>)
 801889e:	685b      	ldr	r3, [r3, #4]
 80188a0:	2b00      	cmp	r3, #0
 80188a2:	d00b      	beq.n	80188bc <SET_PORT1+0x28>
		clearBuffer(Rconfig.MPORT1, strlen(Rconfig.MPORT1));
 80188a4:	4b09      	ldr	r3, [pc, #36]	@ (80188cc <SET_PORT1+0x38>)
 80188a6:	685c      	ldr	r4, [r3, #4]
 80188a8:	4b08      	ldr	r3, [pc, #32]	@ (80188cc <SET_PORT1+0x38>)
 80188aa:	685b      	ldr	r3, [r3, #4]
 80188ac:	4618      	mov	r0, r3
 80188ae:	f7e7 fcf9 	bl	80002a4 <strlen>
 80188b2:	4603      	mov	r3, r0
 80188b4:	4619      	mov	r1, r3
 80188b6:	4620      	mov	r0, r4
 80188b8:	f7e9 f906 	bl	8001ac8 <clearBuffer>
	Rconfig.MPORT1 = port;
 80188bc:	4a03      	ldr	r2, [pc, #12]	@ (80188cc <SET_PORT1+0x38>)
 80188be:	687b      	ldr	r3, [r7, #4]
 80188c0:	6053      	str	r3, [r2, #4]
}
 80188c2:	bf00      	nop
 80188c4:	4618      	mov	r0, r3
 80188c6:	370c      	adds	r7, #12
 80188c8:	46bd      	mov	sp, r7
 80188ca:	bd90      	pop	{r4, r7, pc}
 80188cc:	20014ca0 	.word	0x20014ca0

080188d0 <SET_MUSER>:

bool SET_MUSER(char *username) {
 80188d0:	b590      	push	{r4, r7, lr}
 80188d2:	b083      	sub	sp, #12
 80188d4:	af00      	add	r7, sp, #0
 80188d6:	6078      	str	r0, [r7, #4]
	if (Rconfig.MUSER != NULL)
 80188d8:	4b0b      	ldr	r3, [pc, #44]	@ (8018908 <SET_MUSER+0x38>)
 80188da:	689b      	ldr	r3, [r3, #8]
 80188dc:	2b00      	cmp	r3, #0
 80188de:	d00b      	beq.n	80188f8 <SET_MUSER+0x28>
		clearBuffer(Rconfig.MPORT1, strlen(Rconfig.MPORT1));
 80188e0:	4b09      	ldr	r3, [pc, #36]	@ (8018908 <SET_MUSER+0x38>)
 80188e2:	685c      	ldr	r4, [r3, #4]
 80188e4:	4b08      	ldr	r3, [pc, #32]	@ (8018908 <SET_MUSER+0x38>)
 80188e6:	685b      	ldr	r3, [r3, #4]
 80188e8:	4618      	mov	r0, r3
 80188ea:	f7e7 fcdb 	bl	80002a4 <strlen>
 80188ee:	4603      	mov	r3, r0
 80188f0:	4619      	mov	r1, r3
 80188f2:	4620      	mov	r0, r4
 80188f4:	f7e9 f8e8 	bl	8001ac8 <clearBuffer>
	Rconfig.MUSER = username;
 80188f8:	4a03      	ldr	r2, [pc, #12]	@ (8018908 <SET_MUSER+0x38>)
 80188fa:	687b      	ldr	r3, [r7, #4]
 80188fc:	6093      	str	r3, [r2, #8]

}
 80188fe:	bf00      	nop
 8018900:	4618      	mov	r0, r3
 8018902:	370c      	adds	r7, #12
 8018904:	46bd      	mov	sp, r7
 8018906:	bd90      	pop	{r4, r7, pc}
 8018908:	20014ca0 	.word	0x20014ca0

0801890c <SET_MPASS>:

bool SET_MPASS(char *password) {
 801890c:	b590      	push	{r4, r7, lr}
 801890e:	b083      	sub	sp, #12
 8018910:	af00      	add	r7, sp, #0
 8018912:	6078      	str	r0, [r7, #4]
	if (Rconfig.MPASS != NULL)
 8018914:	4b0b      	ldr	r3, [pc, #44]	@ (8018944 <SET_MPASS+0x38>)
 8018916:	68db      	ldr	r3, [r3, #12]
 8018918:	2b00      	cmp	r3, #0
 801891a:	d00b      	beq.n	8018934 <SET_MPASS+0x28>
		clearBuffer(Rconfig.MPASS, strlen(Rconfig.MPASS));
 801891c:	4b09      	ldr	r3, [pc, #36]	@ (8018944 <SET_MPASS+0x38>)
 801891e:	68dc      	ldr	r4, [r3, #12]
 8018920:	4b08      	ldr	r3, [pc, #32]	@ (8018944 <SET_MPASS+0x38>)
 8018922:	68db      	ldr	r3, [r3, #12]
 8018924:	4618      	mov	r0, r3
 8018926:	f7e7 fcbd 	bl	80002a4 <strlen>
 801892a:	4603      	mov	r3, r0
 801892c:	4619      	mov	r1, r3
 801892e:	4620      	mov	r0, r4
 8018930:	f7e9 f8ca 	bl	8001ac8 <clearBuffer>
	Rconfig.MPASS = password;
 8018934:	4a03      	ldr	r2, [pc, #12]	@ (8018944 <SET_MPASS+0x38>)
 8018936:	687b      	ldr	r3, [r7, #4]
 8018938:	60d3      	str	r3, [r2, #12]

}
 801893a:	bf00      	nop
 801893c:	4618      	mov	r0, r3
 801893e:	370c      	adds	r7, #12
 8018940:	46bd      	mov	sp, r7
 8018942:	bd90      	pop	{r4, r7, pc}
 8018944:	20014ca0 	.word	0x20014ca0

08018948 <SET_CERT>:

bool SET_CERT(char *filename) {
 8018948:	b590      	push	{r4, r7, lr}
 801894a:	b083      	sub	sp, #12
 801894c:	af00      	add	r7, sp, #0
 801894e:	6078      	str	r0, [r7, #4]
	if (Rconfig.CERT != NULL)
 8018950:	4b0b      	ldr	r3, [pc, #44]	@ (8018980 <SET_CERT+0x38>)
 8018952:	691b      	ldr	r3, [r3, #16]
 8018954:	2b00      	cmp	r3, #0
 8018956:	d00b      	beq.n	8018970 <SET_CERT+0x28>
		clearBuffer(Rconfig.CERT, strlen(Rconfig.CERT));
 8018958:	4b09      	ldr	r3, [pc, #36]	@ (8018980 <SET_CERT+0x38>)
 801895a:	691c      	ldr	r4, [r3, #16]
 801895c:	4b08      	ldr	r3, [pc, #32]	@ (8018980 <SET_CERT+0x38>)
 801895e:	691b      	ldr	r3, [r3, #16]
 8018960:	4618      	mov	r0, r3
 8018962:	f7e7 fc9f 	bl	80002a4 <strlen>
 8018966:	4603      	mov	r3, r0
 8018968:	4619      	mov	r1, r3
 801896a:	4620      	mov	r0, r4
 801896c:	f7e9 f8ac 	bl	8001ac8 <clearBuffer>
	Rconfig.CERT = filename;
 8018970:	4a03      	ldr	r2, [pc, #12]	@ (8018980 <SET_CERT+0x38>)
 8018972:	687b      	ldr	r3, [r7, #4]
 8018974:	6113      	str	r3, [r2, #16]

}
 8018976:	bf00      	nop
 8018978:	4618      	mov	r0, r3
 801897a:	370c      	adds	r7, #12
 801897c:	46bd      	mov	sp, r7
 801897e:	bd90      	pop	{r4, r7, pc}
 8018980:	20014ca0 	.word	0x20014ca0

08018984 <SET_KEY>:

bool SET_KEY(char *filename) {
 8018984:	b590      	push	{r4, r7, lr}
 8018986:	b083      	sub	sp, #12
 8018988:	af00      	add	r7, sp, #0
 801898a:	6078      	str	r0, [r7, #4]
	if (Rconfig.KEY != NULL)
 801898c:	4b0b      	ldr	r3, [pc, #44]	@ (80189bc <SET_KEY+0x38>)
 801898e:	695b      	ldr	r3, [r3, #20]
 8018990:	2b00      	cmp	r3, #0
 8018992:	d00b      	beq.n	80189ac <SET_KEY+0x28>
		clearBuffer(Rconfig.KEY, strlen(Rconfig.KEY));
 8018994:	4b09      	ldr	r3, [pc, #36]	@ (80189bc <SET_KEY+0x38>)
 8018996:	695c      	ldr	r4, [r3, #20]
 8018998:	4b08      	ldr	r3, [pc, #32]	@ (80189bc <SET_KEY+0x38>)
 801899a:	695b      	ldr	r3, [r3, #20]
 801899c:	4618      	mov	r0, r3
 801899e:	f7e7 fc81 	bl	80002a4 <strlen>
 80189a2:	4603      	mov	r3, r0
 80189a4:	4619      	mov	r1, r3
 80189a6:	4620      	mov	r0, r4
 80189a8:	f7e9 f88e 	bl	8001ac8 <clearBuffer>
	Rconfig.KEY = filename;
 80189ac:	4a03      	ldr	r2, [pc, #12]	@ (80189bc <SET_KEY+0x38>)
 80189ae:	687b      	ldr	r3, [r7, #4]
 80189b0:	6153      	str	r3, [r2, #20]

}
 80189b2:	bf00      	nop
 80189b4:	4618      	mov	r0, r3
 80189b6:	370c      	adds	r7, #12
 80189b8:	46bd      	mov	sp, r7
 80189ba:	bd90      	pop	{r4, r7, pc}
 80189bc:	20014ca0 	.word	0x20014ca0

080189c0 <SET_CA>:

bool SET_CA(char *filename) {
 80189c0:	b590      	push	{r4, r7, lr}
 80189c2:	b083      	sub	sp, #12
 80189c4:	af00      	add	r7, sp, #0
 80189c6:	6078      	str	r0, [r7, #4]
	if (Rconfig.CA != NULL)
 80189c8:	4b0b      	ldr	r3, [pc, #44]	@ (80189f8 <SET_CA+0x38>)
 80189ca:	699b      	ldr	r3, [r3, #24]
 80189cc:	2b00      	cmp	r3, #0
 80189ce:	d00b      	beq.n	80189e8 <SET_CA+0x28>
		clearBuffer(Rconfig.CA, strlen(Rconfig.CA));
 80189d0:	4b09      	ldr	r3, [pc, #36]	@ (80189f8 <SET_CA+0x38>)
 80189d2:	699c      	ldr	r4, [r3, #24]
 80189d4:	4b08      	ldr	r3, [pc, #32]	@ (80189f8 <SET_CA+0x38>)
 80189d6:	699b      	ldr	r3, [r3, #24]
 80189d8:	4618      	mov	r0, r3
 80189da:	f7e7 fc63 	bl	80002a4 <strlen>
 80189de:	4603      	mov	r3, r0
 80189e0:	4619      	mov	r1, r3
 80189e2:	4620      	mov	r0, r4
 80189e4:	f7e9 f870 	bl	8001ac8 <clearBuffer>
	Rconfig.CA = filename;
 80189e8:	4a03      	ldr	r2, [pc, #12]	@ (80189f8 <SET_CA+0x38>)
 80189ea:	687b      	ldr	r3, [r7, #4]
 80189ec:	6193      	str	r3, [r2, #24]

}
 80189ee:	bf00      	nop
 80189f0:	4618      	mov	r0, r3
 80189f2:	370c      	adds	r7, #12
 80189f4:	46bd      	mov	sp, r7
 80189f6:	bd90      	pop	{r4, r7, pc}
 80189f8:	20014ca0 	.word	0x20014ca0

080189fc <SET_IP2>:

bool SET_IP2(char *address) {
 80189fc:	b590      	push	{r4, r7, lr}
 80189fe:	b083      	sub	sp, #12
 8018a00:	af00      	add	r7, sp, #0
 8018a02:	6078      	str	r0, [r7, #4]
	if (Rconfig.IP2 != NULL)
 8018a04:	4b0b      	ldr	r3, [pc, #44]	@ (8018a34 <SET_IP2+0x38>)
 8018a06:	69db      	ldr	r3, [r3, #28]
 8018a08:	2b00      	cmp	r3, #0
 8018a0a:	d00b      	beq.n	8018a24 <SET_IP2+0x28>
		clearBuffer(Rconfig.IP2, strlen(Rconfig.IP2));
 8018a0c:	4b09      	ldr	r3, [pc, #36]	@ (8018a34 <SET_IP2+0x38>)
 8018a0e:	69dc      	ldr	r4, [r3, #28]
 8018a10:	4b08      	ldr	r3, [pc, #32]	@ (8018a34 <SET_IP2+0x38>)
 8018a12:	69db      	ldr	r3, [r3, #28]
 8018a14:	4618      	mov	r0, r3
 8018a16:	f7e7 fc45 	bl	80002a4 <strlen>
 8018a1a:	4603      	mov	r3, r0
 8018a1c:	4619      	mov	r1, r3
 8018a1e:	4620      	mov	r0, r4
 8018a20:	f7e9 f852 	bl	8001ac8 <clearBuffer>
	Rconfig.IP2 = address;
 8018a24:	4a03      	ldr	r2, [pc, #12]	@ (8018a34 <SET_IP2+0x38>)
 8018a26:	687b      	ldr	r3, [r7, #4]
 8018a28:	61d3      	str	r3, [r2, #28]

}
 8018a2a:	bf00      	nop
 8018a2c:	4618      	mov	r0, r3
 8018a2e:	370c      	adds	r7, #12
 8018a30:	46bd      	mov	sp, r7
 8018a32:	bd90      	pop	{r4, r7, pc}
 8018a34:	20014ca0 	.word	0x20014ca0

08018a38 <SET_PORT2>:

bool SET_PORT2(char *value) {
 8018a38:	b590      	push	{r4, r7, lr}
 8018a3a:	b083      	sub	sp, #12
 8018a3c:	af00      	add	r7, sp, #0
 8018a3e:	6078      	str	r0, [r7, #4]
	if (Rconfig.IPPORT2 != NULL)
 8018a40:	4b0b      	ldr	r3, [pc, #44]	@ (8018a70 <SET_PORT2+0x38>)
 8018a42:	6a1b      	ldr	r3, [r3, #32]
 8018a44:	2b00      	cmp	r3, #0
 8018a46:	d00b      	beq.n	8018a60 <SET_PORT2+0x28>
		clearBuffer(Rconfig.IPPORT2, strlen(Rconfig.IPPORT2));
 8018a48:	4b09      	ldr	r3, [pc, #36]	@ (8018a70 <SET_PORT2+0x38>)
 8018a4a:	6a1c      	ldr	r4, [r3, #32]
 8018a4c:	4b08      	ldr	r3, [pc, #32]	@ (8018a70 <SET_PORT2+0x38>)
 8018a4e:	6a1b      	ldr	r3, [r3, #32]
 8018a50:	4618      	mov	r0, r3
 8018a52:	f7e7 fc27 	bl	80002a4 <strlen>
 8018a56:	4603      	mov	r3, r0
 8018a58:	4619      	mov	r1, r3
 8018a5a:	4620      	mov	r0, r4
 8018a5c:	f7e9 f834 	bl	8001ac8 <clearBuffer>
	Rconfig.IPPORT2 = value;
 8018a60:	4a03      	ldr	r2, [pc, #12]	@ (8018a70 <SET_PORT2+0x38>)
 8018a62:	687b      	ldr	r3, [r7, #4]
 8018a64:	6213      	str	r3, [r2, #32]

}
 8018a66:	bf00      	nop
 8018a68:	4618      	mov	r0, r3
 8018a6a:	370c      	adds	r7, #12
 8018a6c:	46bd      	mov	sp, r7
 8018a6e:	bd90      	pop	{r4, r7, pc}
 8018a70:	20014ca0 	.word	0x20014ca0

08018a74 <SET_SKEY1>:

bool SET_SKEY1(char *keyValue) {
 8018a74:	b590      	push	{r4, r7, lr}
 8018a76:	b083      	sub	sp, #12
 8018a78:	af00      	add	r7, sp, #0
 8018a7a:	6078      	str	r0, [r7, #4]
	if (Rconfig.SKEY1 != NULL)
 8018a7c:	4b0b      	ldr	r3, [pc, #44]	@ (8018aac <SET_SKEY1+0x38>)
 8018a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018a80:	2b00      	cmp	r3, #0
 8018a82:	d00b      	beq.n	8018a9c <SET_SKEY1+0x28>
		clearBuffer(Rconfig.SKEY1, strlen(Rconfig.SKEY1));
 8018a84:	4b09      	ldr	r3, [pc, #36]	@ (8018aac <SET_SKEY1+0x38>)
 8018a86:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8018a88:	4b08      	ldr	r3, [pc, #32]	@ (8018aac <SET_SKEY1+0x38>)
 8018a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018a8c:	4618      	mov	r0, r3
 8018a8e:	f7e7 fc09 	bl	80002a4 <strlen>
 8018a92:	4603      	mov	r3, r0
 8018a94:	4619      	mov	r1, r3
 8018a96:	4620      	mov	r0, r4
 8018a98:	f7e9 f816 	bl	8001ac8 <clearBuffer>
	Rconfig.SKEY1 = keyValue;
 8018a9c:	4a03      	ldr	r2, [pc, #12]	@ (8018aac <SET_SKEY1+0x38>)
 8018a9e:	687b      	ldr	r3, [r7, #4]
 8018aa0:	6253      	str	r3, [r2, #36]	@ 0x24

}
 8018aa2:	bf00      	nop
 8018aa4:	4618      	mov	r0, r3
 8018aa6:	370c      	adds	r7, #12
 8018aa8:	46bd      	mov	sp, r7
 8018aaa:	bd90      	pop	{r4, r7, pc}
 8018aac:	20014ca0 	.word	0x20014ca0

08018ab0 <SET_SKEY2>:

bool SET_SKEY2(char *keyValue) {
 8018ab0:	b590      	push	{r4, r7, lr}
 8018ab2:	b083      	sub	sp, #12
 8018ab4:	af00      	add	r7, sp, #0
 8018ab6:	6078      	str	r0, [r7, #4]
	if (Rconfig.SKEY2 != NULL)
 8018ab8:	4b0b      	ldr	r3, [pc, #44]	@ (8018ae8 <SET_SKEY2+0x38>)
 8018aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018abc:	2b00      	cmp	r3, #0
 8018abe:	d00b      	beq.n	8018ad8 <SET_SKEY2+0x28>
		clearBuffer(Rconfig.SKEY2, strlen(Rconfig.SKEY2));
 8018ac0:	4b09      	ldr	r3, [pc, #36]	@ (8018ae8 <SET_SKEY2+0x38>)
 8018ac2:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8018ac4:	4b08      	ldr	r3, [pc, #32]	@ (8018ae8 <SET_SKEY2+0x38>)
 8018ac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018ac8:	4618      	mov	r0, r3
 8018aca:	f7e7 fbeb 	bl	80002a4 <strlen>
 8018ace:	4603      	mov	r3, r0
 8018ad0:	4619      	mov	r1, r3
 8018ad2:	4620      	mov	r0, r4
 8018ad4:	f7e8 fff8 	bl	8001ac8 <clearBuffer>
	Rconfig.SKEY2 = keyValue;
 8018ad8:	4a03      	ldr	r2, [pc, #12]	@ (8018ae8 <SET_SKEY2+0x38>)
 8018ada:	687b      	ldr	r3, [r7, #4]
 8018adc:	6293      	str	r3, [r2, #40]	@ 0x28

}
 8018ade:	bf00      	nop
 8018ae0:	4618      	mov	r0, r3
 8018ae2:	370c      	adds	r7, #12
 8018ae4:	46bd      	mov	sp, r7
 8018ae6:	bd90      	pop	{r4, r7, pc}
 8018ae8:	20014ca0 	.word	0x20014ca0

08018aec <SET_SKEY3>:

bool SET_SKEY3(char *keyValue) {
 8018aec:	b590      	push	{r4, r7, lr}
 8018aee:	b083      	sub	sp, #12
 8018af0:	af00      	add	r7, sp, #0
 8018af2:	6078      	str	r0, [r7, #4]
	if (Rconfig.SKEY3 != NULL)
 8018af4:	4b0b      	ldr	r3, [pc, #44]	@ (8018b24 <SET_SKEY3+0x38>)
 8018af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018af8:	2b00      	cmp	r3, #0
 8018afa:	d00b      	beq.n	8018b14 <SET_SKEY3+0x28>
		clearBuffer(Rconfig.SKEY3, strlen(Rconfig.SKEY3));
 8018afc:	4b09      	ldr	r3, [pc, #36]	@ (8018b24 <SET_SKEY3+0x38>)
 8018afe:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8018b00:	4b08      	ldr	r3, [pc, #32]	@ (8018b24 <SET_SKEY3+0x38>)
 8018b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018b04:	4618      	mov	r0, r3
 8018b06:	f7e7 fbcd 	bl	80002a4 <strlen>
 8018b0a:	4603      	mov	r3, r0
 8018b0c:	4619      	mov	r1, r3
 8018b0e:	4620      	mov	r0, r4
 8018b10:	f7e8 ffda 	bl	8001ac8 <clearBuffer>
	Rconfig.SKEY3 = keyValue;
 8018b14:	4a03      	ldr	r2, [pc, #12]	@ (8018b24 <SET_SKEY3+0x38>)
 8018b16:	687b      	ldr	r3, [r7, #4]
 8018b18:	62d3      	str	r3, [r2, #44]	@ 0x2c

}
 8018b1a:	bf00      	nop
 8018b1c:	4618      	mov	r0, r3
 8018b1e:	370c      	adds	r7, #12
 8018b20:	46bd      	mov	sp, r7
 8018b22:	bd90      	pop	{r4, r7, pc}
 8018b24:	20014ca0 	.word	0x20014ca0

08018b28 <SET_APN>:

bool SET_APN(char *number) {
 8018b28:	b590      	push	{r4, r7, lr}
 8018b2a:	b083      	sub	sp, #12
 8018b2c:	af00      	add	r7, sp, #0
 8018b2e:	6078      	str	r0, [r7, #4]
	if (Rconfig.DAPN != NULL)
 8018b30:	4b0b      	ldr	r3, [pc, #44]	@ (8018b60 <SET_APN+0x38>)
 8018b32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018b34:	2b00      	cmp	r3, #0
 8018b36:	d00b      	beq.n	8018b50 <SET_APN+0x28>
		clearBuffer(Rconfig.DAPN, strlen(Rconfig.DAPN));
 8018b38:	4b09      	ldr	r3, [pc, #36]	@ (8018b60 <SET_APN+0x38>)
 8018b3a:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 8018b3c:	4b08      	ldr	r3, [pc, #32]	@ (8018b60 <SET_APN+0x38>)
 8018b3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018b40:	4618      	mov	r0, r3
 8018b42:	f7e7 fbaf 	bl	80002a4 <strlen>
 8018b46:	4603      	mov	r3, r0
 8018b48:	4619      	mov	r1, r3
 8018b4a:	4620      	mov	r0, r4
 8018b4c:	f7e8 ffbc 	bl	8001ac8 <clearBuffer>
	Rconfig.DAPN = number;
 8018b50:	4a03      	ldr	r2, [pc, #12]	@ (8018b60 <SET_APN+0x38>)
 8018b52:	687b      	ldr	r3, [r7, #4]
 8018b54:	6313      	str	r3, [r2, #48]	@ 0x30

}
 8018b56:	bf00      	nop
 8018b58:	4618      	mov	r0, r3
 8018b5a:	370c      	adds	r7, #12
 8018b5c:	46bd      	mov	sp, r7
 8018b5e:	bd90      	pop	{r4, r7, pc}
 8018b60:	20014ca0 	.word	0x20014ca0

08018b64 <SET_ION>:

bool SET_ION(char *number) {
 8018b64:	b590      	push	{r4, r7, lr}
 8018b66:	b083      	sub	sp, #12
 8018b68:	af00      	add	r7, sp, #0
 8018b6a:	6078      	str	r0, [r7, #4]
	if (Rconfig.ION != NULL)
 8018b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8018b9c <SET_ION+0x38>)
 8018b6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018b70:	2b00      	cmp	r3, #0
 8018b72:	d00b      	beq.n	8018b8c <SET_ION+0x28>
		clearBuffer(Rconfig.ION, strlen(Rconfig.ION));
 8018b74:	4b09      	ldr	r3, [pc, #36]	@ (8018b9c <SET_ION+0x38>)
 8018b76:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 8018b78:	4b08      	ldr	r3, [pc, #32]	@ (8018b9c <SET_ION+0x38>)
 8018b7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018b7c:	4618      	mov	r0, r3
 8018b7e:	f7e7 fb91 	bl	80002a4 <strlen>
 8018b82:	4603      	mov	r3, r0
 8018b84:	4619      	mov	r1, r3
 8018b86:	4620      	mov	r0, r4
 8018b88:	f7e8 ff9e 	bl	8001ac8 <clearBuffer>
	Rconfig.ION = number;
 8018b8c:	4a03      	ldr	r2, [pc, #12]	@ (8018b9c <SET_ION+0x38>)
 8018b8e:	687b      	ldr	r3, [r7, #4]
 8018b90:	6353      	str	r3, [r2, #52]	@ 0x34
}
 8018b92:	bf00      	nop
 8018b94:	4618      	mov	r0, r3
 8018b96:	370c      	adds	r7, #12
 8018b98:	46bd      	mov	sp, r7
 8018b9a:	bd90      	pop	{r4, r7, pc}
 8018b9c:	20014ca0 	.word	0x20014ca0

08018ba0 <SET_NSAM>:

bool SET_NSAM(char *number) {
 8018ba0:	b590      	push	{r4, r7, lr}
 8018ba2:	b083      	sub	sp, #12
 8018ba4:	af00      	add	r7, sp, #0
 8018ba6:	6078      	str	r0, [r7, #4]
	if (Rconfig.NSAM != NULL)
 8018ba8:	4b0b      	ldr	r3, [pc, #44]	@ (8018bd8 <SET_NSAM+0x38>)
 8018baa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018bac:	2b00      	cmp	r3, #0
 8018bae:	d00b      	beq.n	8018bc8 <SET_NSAM+0x28>
		clearBuffer(Rconfig.NSAM, strlen(Rconfig.NSAM));
 8018bb0:	4b09      	ldr	r3, [pc, #36]	@ (8018bd8 <SET_NSAM+0x38>)
 8018bb2:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 8018bb4:	4b08      	ldr	r3, [pc, #32]	@ (8018bd8 <SET_NSAM+0x38>)
 8018bb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018bb8:	4618      	mov	r0, r3
 8018bba:	f7e7 fb73 	bl	80002a4 <strlen>
 8018bbe:	4603      	mov	r3, r0
 8018bc0:	4619      	mov	r1, r3
 8018bc2:	4620      	mov	r0, r4
 8018bc4:	f7e8 ff80 	bl	8001ac8 <clearBuffer>
	Rconfig.NSAM = number;
 8018bc8:	4a03      	ldr	r2, [pc, #12]	@ (8018bd8 <SET_NSAM+0x38>)
 8018bca:	687b      	ldr	r3, [r7, #4]
 8018bcc:	6393      	str	r3, [r2, #56]	@ 0x38

}
 8018bce:	bf00      	nop
 8018bd0:	4618      	mov	r0, r3
 8018bd2:	370c      	adds	r7, #12
 8018bd4:	46bd      	mov	sp, r7
 8018bd6:	bd90      	pop	{r4, r7, pc}
 8018bd8:	20014ca0 	.word	0x20014ca0

08018bdc <SET_HA>:

bool SET_HA(char *number) {
 8018bdc:	b590      	push	{r4, r7, lr}
 8018bde:	b083      	sub	sp, #12
 8018be0:	af00      	add	r7, sp, #0
 8018be2:	6078      	str	r0, [r7, #4]
	if (Rconfig.HA != NULL)
 8018be4:	4b0b      	ldr	r3, [pc, #44]	@ (8018c14 <SET_HA+0x38>)
 8018be6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018be8:	2b00      	cmp	r3, #0
 8018bea:	d00b      	beq.n	8018c04 <SET_HA+0x28>
		clearBuffer(Rconfig.HA, strlen(Rconfig.HA));
 8018bec:	4b09      	ldr	r3, [pc, #36]	@ (8018c14 <SET_HA+0x38>)
 8018bee:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 8018bf0:	4b08      	ldr	r3, [pc, #32]	@ (8018c14 <SET_HA+0x38>)
 8018bf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018bf4:	4618      	mov	r0, r3
 8018bf6:	f7e7 fb55 	bl	80002a4 <strlen>
 8018bfa:	4603      	mov	r3, r0
 8018bfc:	4619      	mov	r1, r3
 8018bfe:	4620      	mov	r0, r4
 8018c00:	f7e8 ff62 	bl	8001ac8 <clearBuffer>
	Rconfig.HA = number;
 8018c04:	4a03      	ldr	r2, [pc, #12]	@ (8018c14 <SET_HA+0x38>)
 8018c06:	687b      	ldr	r3, [r7, #4]
 8018c08:	63d3      	str	r3, [r2, #60]	@ 0x3c

}
 8018c0a:	bf00      	nop
 8018c0c:	4618      	mov	r0, r3
 8018c0e:	370c      	adds	r7, #12
 8018c10:	46bd      	mov	sp, r7
 8018c12:	bd90      	pop	{r4, r7, pc}
 8018c14:	20014ca0 	.word	0x20014ca0

08018c18 <SET_HB>:

bool SET_HB(char *number) {
 8018c18:	b590      	push	{r4, r7, lr}
 8018c1a:	b083      	sub	sp, #12
 8018c1c:	af00      	add	r7, sp, #0
 8018c1e:	6078      	str	r0, [r7, #4]
	if (Rconfig.HB != NULL)
 8018c20:	4b0b      	ldr	r3, [pc, #44]	@ (8018c50 <SET_HB+0x38>)
 8018c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8018c24:	2b00      	cmp	r3, #0
 8018c26:	d00b      	beq.n	8018c40 <SET_HB+0x28>
		clearBuffer(Rconfig.HB, strlen(Rconfig.HB));
 8018c28:	4b09      	ldr	r3, [pc, #36]	@ (8018c50 <SET_HB+0x38>)
 8018c2a:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 8018c2c:	4b08      	ldr	r3, [pc, #32]	@ (8018c50 <SET_HB+0x38>)
 8018c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8018c30:	4618      	mov	r0, r3
 8018c32:	f7e7 fb37 	bl	80002a4 <strlen>
 8018c36:	4603      	mov	r3, r0
 8018c38:	4619      	mov	r1, r3
 8018c3a:	4620      	mov	r0, r4
 8018c3c:	f7e8 ff44 	bl	8001ac8 <clearBuffer>
	Rconfig.HB = number;
 8018c40:	4a03      	ldr	r2, [pc, #12]	@ (8018c50 <SET_HB+0x38>)
 8018c42:	687b      	ldr	r3, [r7, #4]
 8018c44:	6413      	str	r3, [r2, #64]	@ 0x40

}
 8018c46:	bf00      	nop
 8018c48:	4618      	mov	r0, r3
 8018c4a:	370c      	adds	r7, #12
 8018c4c:	46bd      	mov	sp, r7
 8018c4e:	bd90      	pop	{r4, r7, pc}
 8018c50:	20014ca0 	.word	0x20014ca0

08018c54 <SET_HC>:

bool SET_HC(char *number) {
 8018c54:	b590      	push	{r4, r7, lr}
 8018c56:	b083      	sub	sp, #12
 8018c58:	af00      	add	r7, sp, #0
 8018c5a:	6078      	str	r0, [r7, #4]
	if (Rconfig.HC != NULL)
 8018c5c:	4b0b      	ldr	r3, [pc, #44]	@ (8018c8c <SET_HC+0x38>)
 8018c5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018c60:	2b00      	cmp	r3, #0
 8018c62:	d00b      	beq.n	8018c7c <SET_HC+0x28>
		clearBuffer(Rconfig.HC, strlen(Rconfig.HC));
 8018c64:	4b09      	ldr	r3, [pc, #36]	@ (8018c8c <SET_HC+0x38>)
 8018c66:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 8018c68:	4b08      	ldr	r3, [pc, #32]	@ (8018c8c <SET_HC+0x38>)
 8018c6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018c6c:	4618      	mov	r0, r3
 8018c6e:	f7e7 fb19 	bl	80002a4 <strlen>
 8018c72:	4603      	mov	r3, r0
 8018c74:	4619      	mov	r1, r3
 8018c76:	4620      	mov	r0, r4
 8018c78:	f7e8 ff26 	bl	8001ac8 <clearBuffer>
	Rconfig.HC = number;
 8018c7c:	4a03      	ldr	r2, [pc, #12]	@ (8018c8c <SET_HC+0x38>)
 8018c7e:	687b      	ldr	r3, [r7, #4]
 8018c80:	6453      	str	r3, [r2, #68]	@ 0x44

}
 8018c82:	bf00      	nop
 8018c84:	4618      	mov	r0, r3
 8018c86:	370c      	adds	r7, #12
 8018c88:	46bd      	mov	sp, r7
 8018c8a:	bd90      	pop	{r4, r7, pc}
 8018c8c:	20014ca0 	.word	0x20014ca0

08018c90 <SET_ACCOFFSET>:

bool SET_ACCOFFSET(char *number) {
 8018c90:	b590      	push	{r4, r7, lr}
 8018c92:	b083      	sub	sp, #12
 8018c94:	af00      	add	r7, sp, #0
 8018c96:	6078      	str	r0, [r7, #4]
	if (Rconfig.ACCOFFSET != NULL)
 8018c98:	4b0b      	ldr	r3, [pc, #44]	@ (8018cc8 <SET_ACCOFFSET+0x38>)
 8018c9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8018c9c:	2b00      	cmp	r3, #0
 8018c9e:	d00b      	beq.n	8018cb8 <SET_ACCOFFSET+0x28>
		clearBuffer(Rconfig.ACCOFFSET, strlen(Rconfig.ACCOFFSET));
 8018ca0:	4b09      	ldr	r3, [pc, #36]	@ (8018cc8 <SET_ACCOFFSET+0x38>)
 8018ca2:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
 8018ca4:	4b08      	ldr	r3, [pc, #32]	@ (8018cc8 <SET_ACCOFFSET+0x38>)
 8018ca6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8018ca8:	4618      	mov	r0, r3
 8018caa:	f7e7 fafb 	bl	80002a4 <strlen>
 8018cae:	4603      	mov	r3, r0
 8018cb0:	4619      	mov	r1, r3
 8018cb2:	4620      	mov	r0, r4
 8018cb4:	f7e8 ff08 	bl	8001ac8 <clearBuffer>
	Rconfig.ACCOFFSET = number;
 8018cb8:	4a03      	ldr	r2, [pc, #12]	@ (8018cc8 <SET_ACCOFFSET+0x38>)
 8018cba:	687b      	ldr	r3, [r7, #4]
 8018cbc:	6493      	str	r3, [r2, #72]	@ 0x48

}
 8018cbe:	bf00      	nop
 8018cc0:	4618      	mov	r0, r3
 8018cc2:	370c      	adds	r7, #12
 8018cc4:	46bd      	mov	sp, r7
 8018cc6:	bd90      	pop	{r4, r7, pc}
 8018cc8:	20014ca0 	.word	0x20014ca0

08018ccc <SET_USER>:

bool SET_USER(char *idVal) {
 8018ccc:	b590      	push	{r4, r7, lr}
 8018cce:	b083      	sub	sp, #12
 8018cd0:	af00      	add	r7, sp, #0
 8018cd2:	6078      	str	r0, [r7, #4]
	if (Rconfig.USER != NULL)
 8018cd4:	4b0b      	ldr	r3, [pc, #44]	@ (8018d04 <SET_USER+0x38>)
 8018cd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8018cd8:	2b00      	cmp	r3, #0
 8018cda:	d00b      	beq.n	8018cf4 <SET_USER+0x28>
		clearBuffer(Rconfig.USER, strlen(Rconfig.USER));
 8018cdc:	4b09      	ldr	r3, [pc, #36]	@ (8018d04 <SET_USER+0x38>)
 8018cde:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8018ce0:	4b08      	ldr	r3, [pc, #32]	@ (8018d04 <SET_USER+0x38>)
 8018ce2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8018ce4:	4618      	mov	r0, r3
 8018ce6:	f7e7 fadd 	bl	80002a4 <strlen>
 8018cea:	4603      	mov	r3, r0
 8018cec:	4619      	mov	r1, r3
 8018cee:	4620      	mov	r0, r4
 8018cf0:	f7e8 feea 	bl	8001ac8 <clearBuffer>
	Rconfig.USER = idVal;
 8018cf4:	4a03      	ldr	r2, [pc, #12]	@ (8018d04 <SET_USER+0x38>)
 8018cf6:	687b      	ldr	r3, [r7, #4]
 8018cf8:	64d3      	str	r3, [r2, #76]	@ 0x4c

}
 8018cfa:	bf00      	nop
 8018cfc:	4618      	mov	r0, r3
 8018cfe:	370c      	adds	r7, #12
 8018d00:	46bd      	mov	sp, r7
 8018d02:	bd90      	pop	{r4, r7, pc}
 8018d04:	20014ca0 	.word	0x20014ca0

08018d08 <SET_PASSWORD>:

bool SET_PASSWORD(char *passwordVal) {
 8018d08:	b590      	push	{r4, r7, lr}
 8018d0a:	b083      	sub	sp, #12
 8018d0c:	af00      	add	r7, sp, #0
 8018d0e:	6078      	str	r0, [r7, #4]
	if (Rconfig.PSWD != NULL)
 8018d10:	4b0b      	ldr	r3, [pc, #44]	@ (8018d40 <SET_PASSWORD+0x38>)
 8018d12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018d14:	2b00      	cmp	r3, #0
 8018d16:	d00b      	beq.n	8018d30 <SET_PASSWORD+0x28>
		clearBuffer(Rconfig.PSWD, strlen(Rconfig.PSWD));
 8018d18:	4b09      	ldr	r3, [pc, #36]	@ (8018d40 <SET_PASSWORD+0x38>)
 8018d1a:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
 8018d1c:	4b08      	ldr	r3, [pc, #32]	@ (8018d40 <SET_PASSWORD+0x38>)
 8018d1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018d20:	4618      	mov	r0, r3
 8018d22:	f7e7 fabf 	bl	80002a4 <strlen>
 8018d26:	4603      	mov	r3, r0
 8018d28:	4619      	mov	r1, r3
 8018d2a:	4620      	mov	r0, r4
 8018d2c:	f7e8 fecc 	bl	8001ac8 <clearBuffer>
	Rconfig.PSWD = passwordVal;
 8018d30:	4a03      	ldr	r2, [pc, #12]	@ (8018d40 <SET_PASSWORD+0x38>)
 8018d32:	687b      	ldr	r3, [r7, #4]
 8018d34:	6513      	str	r3, [r2, #80]	@ 0x50

}
 8018d36:	bf00      	nop
 8018d38:	4618      	mov	r0, r3
 8018d3a:	370c      	adds	r7, #12
 8018d3c:	46bd      	mov	sp, r7
 8018d3e:	bd90      	pop	{r4, r7, pc}
 8018d40:	20014ca0 	.word	0x20014ca0

08018d44 <SET_VIN>:

bool SET_VIN(char *number) {
 8018d44:	b590      	push	{r4, r7, lr}
 8018d46:	b083      	sub	sp, #12
 8018d48:	af00      	add	r7, sp, #0
 8018d4a:	6078      	str	r0, [r7, #4]
	if (Rconfig.VIN != NULL)
 8018d4c:	4b0b      	ldr	r3, [pc, #44]	@ (8018d7c <SET_VIN+0x38>)
 8018d4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018d50:	2b00      	cmp	r3, #0
 8018d52:	d00b      	beq.n	8018d6c <SET_VIN+0x28>
		clearBuffer(Rconfig.VIN, strlen(Rconfig.VIN));
 8018d54:	4b09      	ldr	r3, [pc, #36]	@ (8018d7c <SET_VIN+0x38>)
 8018d56:	6d5c      	ldr	r4, [r3, #84]	@ 0x54
 8018d58:	4b08      	ldr	r3, [pc, #32]	@ (8018d7c <SET_VIN+0x38>)
 8018d5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018d5c:	4618      	mov	r0, r3
 8018d5e:	f7e7 faa1 	bl	80002a4 <strlen>
 8018d62:	4603      	mov	r3, r0
 8018d64:	4619      	mov	r1, r3
 8018d66:	4620      	mov	r0, r4
 8018d68:	f7e8 feae 	bl	8001ac8 <clearBuffer>
	Rconfig.VIN = number;
 8018d6c:	4a03      	ldr	r2, [pc, #12]	@ (8018d7c <SET_VIN+0x38>)
 8018d6e:	687b      	ldr	r3, [r7, #4]
 8018d70:	6553      	str	r3, [r2, #84]	@ 0x54

}
 8018d72:	bf00      	nop
 8018d74:	4618      	mov	r0, r3
 8018d76:	370c      	adds	r7, #12
 8018d78:	46bd      	mov	sp, r7
 8018d7a:	bd90      	pop	{r4, r7, pc}
 8018d7c:	20014ca0 	.word	0x20014ca0

08018d80 <SET_LAT_LON>:
bool SET_LAT_LON(char *lat,char *lon) {
 8018d80:	b590      	push	{r4, r7, lr}
 8018d82:	b083      	sub	sp, #12
 8018d84:	af00      	add	r7, sp, #0
 8018d86:	6078      	str	r0, [r7, #4]
 8018d88:	6039      	str	r1, [r7, #0]
	if (Rconfig.LAT != NULL)
 8018d8a:	4b17      	ldr	r3, [pc, #92]	@ (8018de8 <SET_LAT_LON+0x68>)
 8018d8c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8018d8e:	2b00      	cmp	r3, #0
 8018d90:	d00b      	beq.n	8018daa <SET_LAT_LON+0x2a>
		clearBuffer(Rconfig.LAT, strlen(Rconfig.LAT));
 8018d92:	4b15      	ldr	r3, [pc, #84]	@ (8018de8 <SET_LAT_LON+0x68>)
 8018d94:	6fdc      	ldr	r4, [r3, #124]	@ 0x7c
 8018d96:	4b14      	ldr	r3, [pc, #80]	@ (8018de8 <SET_LAT_LON+0x68>)
 8018d98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8018d9a:	4618      	mov	r0, r3
 8018d9c:	f7e7 fa82 	bl	80002a4 <strlen>
 8018da0:	4603      	mov	r3, r0
 8018da2:	4619      	mov	r1, r3
 8018da4:	4620      	mov	r0, r4
 8018da6:	f7e8 fe8f 	bl	8001ac8 <clearBuffer>
	Rconfig.LAT = lat;
 8018daa:	4a0f      	ldr	r2, [pc, #60]	@ (8018de8 <SET_LAT_LON+0x68>)
 8018dac:	687b      	ldr	r3, [r7, #4]
 8018dae:	67d3      	str	r3, [r2, #124]	@ 0x7c
	if (Rconfig.LON != NULL)
 8018db0:	4b0d      	ldr	r3, [pc, #52]	@ (8018de8 <SET_LAT_LON+0x68>)
 8018db2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018db6:	2b00      	cmp	r3, #0
 8018db8:	d00d      	beq.n	8018dd6 <SET_LAT_LON+0x56>
		clearBuffer(Rconfig.LON, strlen(Rconfig.LON));
 8018dba:	4b0b      	ldr	r3, [pc, #44]	@ (8018de8 <SET_LAT_LON+0x68>)
 8018dbc:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 8018dc0:	4b09      	ldr	r3, [pc, #36]	@ (8018de8 <SET_LAT_LON+0x68>)
 8018dc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018dc6:	4618      	mov	r0, r3
 8018dc8:	f7e7 fa6c 	bl	80002a4 <strlen>
 8018dcc:	4603      	mov	r3, r0
 8018dce:	4619      	mov	r1, r3
 8018dd0:	4620      	mov	r0, r4
 8018dd2:	f7e8 fe79 	bl	8001ac8 <clearBuffer>
	Rconfig.LON = lon;
 8018dd6:	4a04      	ldr	r2, [pc, #16]	@ (8018de8 <SET_LAT_LON+0x68>)
 8018dd8:	683b      	ldr	r3, [r7, #0]
 8018dda:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
}
 8018dde:	bf00      	nop
 8018de0:	4618      	mov	r0, r3
 8018de2:	370c      	adds	r7, #12
 8018de4:	46bd      	mov	sp, r7
 8018de6:	bd90      	pop	{r4, r7, pc}
 8018de8:	20014ca0 	.word	0x20014ca0

08018dec <SET_PHNUM>:
bool SET_PHNUM(char *PHnum1) {
 8018dec:	b590      	push	{r4, r7, lr}
 8018dee:	b083      	sub	sp, #12
 8018df0:	af00      	add	r7, sp, #0
 8018df2:	6078      	str	r0, [r7, #4]
	if (Rconfig.PHNUM != NULL)
 8018df4:	4b0d      	ldr	r3, [pc, #52]	@ (8018e2c <SET_PHNUM+0x40>)
 8018df6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8018dfa:	2b00      	cmp	r3, #0
 8018dfc:	d00d      	beq.n	8018e1a <SET_PHNUM+0x2e>
		clearBuffer(Rconfig.PHNUM, strlen(Rconfig.PHNUM));
 8018dfe:	4b0b      	ldr	r3, [pc, #44]	@ (8018e2c <SET_PHNUM+0x40>)
 8018e00:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8018e04:	4b09      	ldr	r3, [pc, #36]	@ (8018e2c <SET_PHNUM+0x40>)
 8018e06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8018e0a:	4618      	mov	r0, r3
 8018e0c:	f7e7 fa4a 	bl	80002a4 <strlen>
 8018e10:	4603      	mov	r3, r0
 8018e12:	4619      	mov	r1, r3
 8018e14:	4620      	mov	r0, r4
 8018e16:	f7e8 fe57 	bl	8001ac8 <clearBuffer>
	Rconfig.PHNUM = PHnum1;
 8018e1a:	4a04      	ldr	r2, [pc, #16]	@ (8018e2c <SET_PHNUM+0x40>)
 8018e1c:	687b      	ldr	r3, [r7, #4]
 8018e1e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
}
 8018e22:	bf00      	nop
 8018e24:	4618      	mov	r0, r3
 8018e26:	370c      	adds	r7, #12
 8018e28:	46bd      	mov	sp, r7
 8018e2a:	bd90      	pop	{r4, r7, pc}
 8018e2c:	20014ca0 	.word	0x20014ca0

08018e30 <SET_RESET>:
	if (Rconfig.Rtime != NULL)
		clearBuffer(Rconfig.Rtime, strlen(Rconfig.Rtime));
	Rconfig.Rtime = RTime1;
}

void SET_RESET() {
 8018e30:	b580      	push	{r7, lr}
 8018e32:	af00      	add	r7, sp, #0
	FeedAllConfig();
 8018e34:	f000 fa02 	bl	801923c <FeedAllConfig>
	HAL_NVIC_SystemReset();
 8018e38:	f7ee fa8b 	bl	8007352 <HAL_NVIC_SystemReset>
}
 8018e3c:	bf00      	nop
 8018e3e:	bd80      	pop	{r7, pc}

08018e40 <UPDATE_COMKeys>:
void UPDATE_COMKeys() {
 8018e40:	b598      	push	{r3, r4, r7, lr}
 8018e42:	af00      	add	r7, sp, #0
	if (Rconfig.CKEY1 != NULL)
 8018e44:	4b5c      	ldr	r3, [pc, #368]	@ (8018fb8 <UPDATE_COMKeys+0x178>)
 8018e46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8018e48:	2b00      	cmp	r3, #0
 8018e4a:	d00b      	beq.n	8018e64 <UPDATE_COMKeys+0x24>
		clearBuffer(Rconfig.CKEY1, strlen(Rconfig.CKEY1));
 8018e4c:	4b5a      	ldr	r3, [pc, #360]	@ (8018fb8 <UPDATE_COMKeys+0x178>)
 8018e4e:	6ddc      	ldr	r4, [r3, #92]	@ 0x5c
 8018e50:	4b59      	ldr	r3, [pc, #356]	@ (8018fb8 <UPDATE_COMKeys+0x178>)
 8018e52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8018e54:	4618      	mov	r0, r3
 8018e56:	f7e7 fa25 	bl	80002a4 <strlen>
 8018e5a:	4603      	mov	r3, r0
 8018e5c:	4619      	mov	r1, r3
 8018e5e:	4620      	mov	r0, r4
 8018e60:	f7e8 fe32 	bl	8001ac8 <clearBuffer>
	if (Rconfig.CKEY2 != NULL)
 8018e64:	4b54      	ldr	r3, [pc, #336]	@ (8018fb8 <UPDATE_COMKeys+0x178>)
 8018e66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018e68:	2b00      	cmp	r3, #0
 8018e6a:	d00b      	beq.n	8018e84 <UPDATE_COMKeys+0x44>
		clearBuffer(Rconfig.CKEY2, strlen(Rconfig.CKEY2));
 8018e6c:	4b52      	ldr	r3, [pc, #328]	@ (8018fb8 <UPDATE_COMKeys+0x178>)
 8018e6e:	6e1c      	ldr	r4, [r3, #96]	@ 0x60
 8018e70:	4b51      	ldr	r3, [pc, #324]	@ (8018fb8 <UPDATE_COMKeys+0x178>)
 8018e72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018e74:	4618      	mov	r0, r3
 8018e76:	f7e7 fa15 	bl	80002a4 <strlen>
 8018e7a:	4603      	mov	r3, r0
 8018e7c:	4619      	mov	r1, r3
 8018e7e:	4620      	mov	r0, r4
 8018e80:	f7e8 fe22 	bl	8001ac8 <clearBuffer>

	if (Rconfig.CKEY3 != NULL)
 8018e84:	4b4c      	ldr	r3, [pc, #304]	@ (8018fb8 <UPDATE_COMKeys+0x178>)
 8018e86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8018e88:	2b00      	cmp	r3, #0
 8018e8a:	d00b      	beq.n	8018ea4 <UPDATE_COMKeys+0x64>
		clearBuffer(Rconfig.CKEY3, strlen(Rconfig.CKEY3));
 8018e8c:	4b4a      	ldr	r3, [pc, #296]	@ (8018fb8 <UPDATE_COMKeys+0x178>)
 8018e8e:	6e5c      	ldr	r4, [r3, #100]	@ 0x64
 8018e90:	4b49      	ldr	r3, [pc, #292]	@ (8018fb8 <UPDATE_COMKeys+0x178>)
 8018e92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8018e94:	4618      	mov	r0, r3
 8018e96:	f7e7 fa05 	bl	80002a4 <strlen>
 8018e9a:	4603      	mov	r3, r0
 8018e9c:	4619      	mov	r1, r3
 8018e9e:	4620      	mov	r0, r4
 8018ea0:	f7e8 fe12 	bl	8001ac8 <clearBuffer>

	if (Rconfig.CKEY4 != NULL)
 8018ea4:	4b44      	ldr	r3, [pc, #272]	@ (8018fb8 <UPDATE_COMKeys+0x178>)
 8018ea6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8018ea8:	2b00      	cmp	r3, #0
 8018eaa:	d00b      	beq.n	8018ec4 <UPDATE_COMKeys+0x84>
		clearBuffer(Rconfig.CKEY4, strlen(Rconfig.CKEY4));
 8018eac:	4b42      	ldr	r3, [pc, #264]	@ (8018fb8 <UPDATE_COMKeys+0x178>)
 8018eae:	6e9c      	ldr	r4, [r3, #104]	@ 0x68
 8018eb0:	4b41      	ldr	r3, [pc, #260]	@ (8018fb8 <UPDATE_COMKeys+0x178>)
 8018eb2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8018eb4:	4618      	mov	r0, r3
 8018eb6:	f7e7 f9f5 	bl	80002a4 <strlen>
 8018eba:	4603      	mov	r3, r0
 8018ebc:	4619      	mov	r1, r3
 8018ebe:	4620      	mov	r0, r4
 8018ec0:	f7e8 fe02 	bl	8001ac8 <clearBuffer>

	if (Rconfig.CKEY5 != NULL)
 8018ec4:	4b3c      	ldr	r3, [pc, #240]	@ (8018fb8 <UPDATE_COMKeys+0x178>)
 8018ec6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018ec8:	2b00      	cmp	r3, #0
 8018eca:	d00b      	beq.n	8018ee4 <UPDATE_COMKeys+0xa4>
		clearBuffer(Rconfig.CKEY5, strlen(Rconfig.CKEY5));
 8018ecc:	4b3a      	ldr	r3, [pc, #232]	@ (8018fb8 <UPDATE_COMKeys+0x178>)
 8018ece:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
 8018ed0:	4b39      	ldr	r3, [pc, #228]	@ (8018fb8 <UPDATE_COMKeys+0x178>)
 8018ed2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018ed4:	4618      	mov	r0, r3
 8018ed6:	f7e7 f9e5 	bl	80002a4 <strlen>
 8018eda:	4603      	mov	r3, r0
 8018edc:	4619      	mov	r1, r3
 8018ede:	4620      	mov	r0, r4
 8018ee0:	f7e8 fdf2 	bl	8001ac8 <clearBuffer>

	if (Rconfig.CKEY6 != NULL)
 8018ee4:	4b34      	ldr	r3, [pc, #208]	@ (8018fb8 <UPDATE_COMKeys+0x178>)
 8018ee6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018ee8:	2b00      	cmp	r3, #0
 8018eea:	d00b      	beq.n	8018f04 <UPDATE_COMKeys+0xc4>
		clearBuffer(Rconfig.CKEY6, strlen(Rconfig.CKEY6));
 8018eec:	4b32      	ldr	r3, [pc, #200]	@ (8018fb8 <UPDATE_COMKeys+0x178>)
 8018eee:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
 8018ef0:	4b31      	ldr	r3, [pc, #196]	@ (8018fb8 <UPDATE_COMKeys+0x178>)
 8018ef2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018ef4:	4618      	mov	r0, r3
 8018ef6:	f7e7 f9d5 	bl	80002a4 <strlen>
 8018efa:	4603      	mov	r3, r0
 8018efc:	4619      	mov	r1, r3
 8018efe:	4620      	mov	r0, r4
 8018f00:	f7e8 fde2 	bl	8001ac8 <clearBuffer>

	if (Rconfig.CKEY7 != NULL)
 8018f04:	4b2c      	ldr	r3, [pc, #176]	@ (8018fb8 <UPDATE_COMKeys+0x178>)
 8018f06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018f08:	2b00      	cmp	r3, #0
 8018f0a:	d00b      	beq.n	8018f24 <UPDATE_COMKeys+0xe4>
		clearBuffer(Rconfig.CKEY7, strlen(Rconfig.CKEY7));
 8018f0c:	4b2a      	ldr	r3, [pc, #168]	@ (8018fb8 <UPDATE_COMKeys+0x178>)
 8018f0e:	6f5c      	ldr	r4, [r3, #116]	@ 0x74
 8018f10:	4b29      	ldr	r3, [pc, #164]	@ (8018fb8 <UPDATE_COMKeys+0x178>)
 8018f12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018f14:	4618      	mov	r0, r3
 8018f16:	f7e7 f9c5 	bl	80002a4 <strlen>
 8018f1a:	4603      	mov	r3, r0
 8018f1c:	4619      	mov	r1, r3
 8018f1e:	4620      	mov	r0, r4
 8018f20:	f7e8 fdd2 	bl	8001ac8 <clearBuffer>
	if (Rconfig.CKEY8 != NULL)
 8018f24:	4b24      	ldr	r3, [pc, #144]	@ (8018fb8 <UPDATE_COMKeys+0x178>)
 8018f26:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8018f28:	2b00      	cmp	r3, #0
 8018f2a:	d00b      	beq.n	8018f44 <UPDATE_COMKeys+0x104>
		clearBuffer(Rconfig.CKEY8, strlen(Rconfig.CKEY8));
 8018f2c:	4b22      	ldr	r3, [pc, #136]	@ (8018fb8 <UPDATE_COMKeys+0x178>)
 8018f2e:	6f9c      	ldr	r4, [r3, #120]	@ 0x78
 8018f30:	4b21      	ldr	r3, [pc, #132]	@ (8018fb8 <UPDATE_COMKeys+0x178>)
 8018f32:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8018f34:	4618      	mov	r0, r3
 8018f36:	f7e7 f9b5 	bl	80002a4 <strlen>
 8018f3a:	4603      	mov	r3, r0
 8018f3c:	4619      	mov	r1, r3
 8018f3e:	4620      	mov	r0, r4
 8018f40:	f7e8 fdc2 	bl	8001ac8 <clearBuffer>

	// Ensure Rconfig.CKEY1 to Rconfig.CKEY8 are of type char* and ComKeys is an array of pointers to char.
	Rconfig.CKEY1 = strdup(ComKeys[0]);
 8018f44:	481d      	ldr	r0, [pc, #116]	@ (8018fbc <UPDATE_COMKeys+0x17c>)
 8018f46:	f005 ff97 	bl	801ee78 <strdup>
 8018f4a:	4603      	mov	r3, r0
 8018f4c:	461a      	mov	r2, r3
 8018f4e:	4b1a      	ldr	r3, [pc, #104]	@ (8018fb8 <UPDATE_COMKeys+0x178>)
 8018f50:	65da      	str	r2, [r3, #92]	@ 0x5c
	Rconfig.CKEY2 = strdup(ComKeys[1]);
 8018f52:	481b      	ldr	r0, [pc, #108]	@ (8018fc0 <UPDATE_COMKeys+0x180>)
 8018f54:	f005 ff90 	bl	801ee78 <strdup>
 8018f58:	4603      	mov	r3, r0
 8018f5a:	461a      	mov	r2, r3
 8018f5c:	4b16      	ldr	r3, [pc, #88]	@ (8018fb8 <UPDATE_COMKeys+0x178>)
 8018f5e:	661a      	str	r2, [r3, #96]	@ 0x60
	Rconfig.CKEY3 = strdup(ComKeys[2]);
 8018f60:	4818      	ldr	r0, [pc, #96]	@ (8018fc4 <UPDATE_COMKeys+0x184>)
 8018f62:	f005 ff89 	bl	801ee78 <strdup>
 8018f66:	4603      	mov	r3, r0
 8018f68:	461a      	mov	r2, r3
 8018f6a:	4b13      	ldr	r3, [pc, #76]	@ (8018fb8 <UPDATE_COMKeys+0x178>)
 8018f6c:	665a      	str	r2, [r3, #100]	@ 0x64
	Rconfig.CKEY4 = strdup(ComKeys[3]);
 8018f6e:	4816      	ldr	r0, [pc, #88]	@ (8018fc8 <UPDATE_COMKeys+0x188>)
 8018f70:	f005 ff82 	bl	801ee78 <strdup>
 8018f74:	4603      	mov	r3, r0
 8018f76:	461a      	mov	r2, r3
 8018f78:	4b0f      	ldr	r3, [pc, #60]	@ (8018fb8 <UPDATE_COMKeys+0x178>)
 8018f7a:	669a      	str	r2, [r3, #104]	@ 0x68
	Rconfig.CKEY5 = strdup(ComKeys[4]);
 8018f7c:	4813      	ldr	r0, [pc, #76]	@ (8018fcc <UPDATE_COMKeys+0x18c>)
 8018f7e:	f005 ff7b 	bl	801ee78 <strdup>
 8018f82:	4603      	mov	r3, r0
 8018f84:	461a      	mov	r2, r3
 8018f86:	4b0c      	ldr	r3, [pc, #48]	@ (8018fb8 <UPDATE_COMKeys+0x178>)
 8018f88:	66da      	str	r2, [r3, #108]	@ 0x6c
	Rconfig.CKEY6 = strdup(ComKeys[5]);
 8018f8a:	4811      	ldr	r0, [pc, #68]	@ (8018fd0 <UPDATE_COMKeys+0x190>)
 8018f8c:	f005 ff74 	bl	801ee78 <strdup>
 8018f90:	4603      	mov	r3, r0
 8018f92:	461a      	mov	r2, r3
 8018f94:	4b08      	ldr	r3, [pc, #32]	@ (8018fb8 <UPDATE_COMKeys+0x178>)
 8018f96:	671a      	str	r2, [r3, #112]	@ 0x70
	Rconfig.CKEY7 = strdup(ComKeys[6]);
 8018f98:	480e      	ldr	r0, [pc, #56]	@ (8018fd4 <UPDATE_COMKeys+0x194>)
 8018f9a:	f005 ff6d 	bl	801ee78 <strdup>
 8018f9e:	4603      	mov	r3, r0
 8018fa0:	461a      	mov	r2, r3
 8018fa2:	4b05      	ldr	r3, [pc, #20]	@ (8018fb8 <UPDATE_COMKeys+0x178>)
 8018fa4:	675a      	str	r2, [r3, #116]	@ 0x74
	Rconfig.CKEY8 = strdup(ComKeys[7]);
 8018fa6:	480c      	ldr	r0, [pc, #48]	@ (8018fd8 <UPDATE_COMKeys+0x198>)
 8018fa8:	f005 ff66 	bl	801ee78 <strdup>
 8018fac:	4603      	mov	r3, r0
 8018fae:	461a      	mov	r2, r3
 8018fb0:	4b01      	ldr	r3, [pc, #4]	@ (8018fb8 <UPDATE_COMKeys+0x178>)
 8018fb2:	679a      	str	r2, [r3, #120]	@ 0x78
}
 8018fb4:	bf00      	nop
 8018fb6:	bd98      	pop	{r3, r4, r7, pc}
 8018fb8:	20014ca0 	.word	0x20014ca0
 8018fbc:	20014acc 	.word	0x20014acc
 8018fc0:	20014aed 	.word	0x20014aed
 8018fc4:	20014b0e 	.word	0x20014b0e
 8018fc8:	20014b2f 	.word	0x20014b2f
 8018fcc:	20014b50 	.word	0x20014b50
 8018fd0:	20014b71 	.word	0x20014b71
 8018fd4:	20014b92 	.word	0x20014b92
 8018fd8:	20014bb3 	.word	0x20014bb3

08018fdc <SET_FOTA_SIZE>:

bool SET_FOTA_SIZE(char *SZE) {
 8018fdc:	b580      	push	{r7, lr}
 8018fde:	b084      	sub	sp, #16
 8018fe0:	af00      	add	r7, sp, #0
 8018fe2:	6078      	str	r0, [r7, #4]
	int size = atoi(SZE);
 8018fe4:	6878      	ldr	r0, [r7, #4]
 8018fe6:	f003 feae 	bl	801cd46 <atoi>
 8018fea:	60f8      	str	r0, [r7, #12]
	TOTAL_PACKETS = ((size * PACKET_SIZE) / PACKET_SIZE);
 8018fec:	4a16      	ldr	r2, [pc, #88]	@ (8019048 <SET_FOTA_SIZE+0x6c>)
 8018fee:	68fb      	ldr	r3, [r7, #12]
 8018ff0:	6013      	str	r3, [r2, #0]
	if (size < 128) {
 8018ff2:	68fb      	ldr	r3, [r7, #12]
 8018ff4:	2b7f      	cmp	r3, #127	@ 0x7f
 8018ff6:	dc0a      	bgt.n	801900e <SET_FOTA_SIZE+0x32>
		L1 = L1_v1;
 8018ff8:	4b14      	ldr	r3, [pc, #80]	@ (801904c <SET_FOTA_SIZE+0x70>)
 8018ffa:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8018ffe:	601a      	str	r2, [r3, #0]
		L2 = L2_v2;
 8019000:	4b13      	ldr	r3, [pc, #76]	@ (8019050 <SET_FOTA_SIZE+0x74>)
 8019002:	4a14      	ldr	r2, [pc, #80]	@ (8019054 <SET_FOTA_SIZE+0x78>)
 8019004:	601a      	str	r2, [r3, #0]
		L3 = L3_v2;
 8019006:	4b14      	ldr	r3, [pc, #80]	@ (8019058 <SET_FOTA_SIZE+0x7c>)
 8019008:	4a14      	ldr	r2, [pc, #80]	@ (801905c <SET_FOTA_SIZE+0x80>)
 801900a:	601a      	str	r2, [r3, #0]
 801900c:	e016      	b.n	801903c <SET_FOTA_SIZE+0x60>

	} else if (size > 128 && size < 256) {
 801900e:	68fb      	ldr	r3, [r7, #12]
 8019010:	2b80      	cmp	r3, #128	@ 0x80
 8019012:	dd0d      	ble.n	8019030 <SET_FOTA_SIZE+0x54>
 8019014:	68fb      	ldr	r3, [r7, #12]
 8019016:	2bff      	cmp	r3, #255	@ 0xff
 8019018:	dc0a      	bgt.n	8019030 <SET_FOTA_SIZE+0x54>
		L1 = L1_v1;
 801901a:	4b0c      	ldr	r3, [pc, #48]	@ (801904c <SET_FOTA_SIZE+0x70>)
 801901c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8019020:	601a      	str	r2, [r3, #0]
		L2 = L2_v2;
 8019022:	4b0b      	ldr	r3, [pc, #44]	@ (8019050 <SET_FOTA_SIZE+0x74>)
 8019024:	4a0b      	ldr	r2, [pc, #44]	@ (8019054 <SET_FOTA_SIZE+0x78>)
 8019026:	601a      	str	r2, [r3, #0]
		L3 = L3_v2;
 8019028:	4b0b      	ldr	r3, [pc, #44]	@ (8019058 <SET_FOTA_SIZE+0x7c>)
 801902a:	4a0c      	ldr	r2, [pc, #48]	@ (801905c <SET_FOTA_SIZE+0x80>)
 801902c:	601a      	str	r2, [r3, #0]
 801902e:	e005      	b.n	801903c <SET_FOTA_SIZE+0x60>

	} else {
		printc(MinDelay, "File size is large");
 8019030:	490b      	ldr	r1, [pc, #44]	@ (8019060 <SET_FOTA_SIZE+0x84>)
 8019032:	200a      	movs	r0, #10
 8019034:	f7e8 fcf0 	bl	8001a18 <printc>
		return false; // Indicate failure
 8019038:	2300      	movs	r3, #0
 801903a:	e000      	b.n	801903e <SET_FOTA_SIZE+0x62>
	}
	return true; // Indicate failure
 801903c:	2301      	movs	r3, #1
}
 801903e:	4618      	mov	r0, r3
 8019040:	3710      	adds	r7, #16
 8019042:	46bd      	mov	sp, r7
 8019044:	bd80      	pop	{r7, pc}
 8019046:	bf00      	nop
 8019048:	20014bd4 	.word	0x20014bd4
 801904c:	20000068 	.word	0x20000068
 8019050:	2000006c 	.word	0x2000006c
 8019054:	08040000 	.word	0x08040000
 8019058:	20000070 	.word	0x20000070
 801905c:	08080000 	.word	0x08080000
 8019060:	08023160 	.word	0x08023160

08019064 <SET_FOTA_UPDATE>:

bool SET_FOTA_UPDATE(char *Version) {
 8019064:	b590      	push	{r4, r7, lr}
 8019066:	b083      	sub	sp, #12
 8019068:	af00      	add	r7, sp, #0
 801906a:	6078      	str	r0, [r7, #4]
	if (Rconfig.FOTAVER != NULL)
 801906c:	4b0e      	ldr	r3, [pc, #56]	@ (80190a8 <SET_FOTA_UPDATE+0x44>)
 801906e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019070:	2b00      	cmp	r3, #0
 8019072:	d00b      	beq.n	801908c <SET_FOTA_UPDATE+0x28>
		clearBuffer(Rconfig.FOTAVER, strlen(Rconfig.FOTAVER));
 8019074:	4b0c      	ldr	r3, [pc, #48]	@ (80190a8 <SET_FOTA_UPDATE+0x44>)
 8019076:	6d9c      	ldr	r4, [r3, #88]	@ 0x58
 8019078:	4b0b      	ldr	r3, [pc, #44]	@ (80190a8 <SET_FOTA_UPDATE+0x44>)
 801907a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801907c:	4618      	mov	r0, r3
 801907e:	f7e7 f911 	bl	80002a4 <strlen>
 8019082:	4603      	mov	r3, r0
 8019084:	4619      	mov	r1, r3
 8019086:	4620      	mov	r0, r4
 8019088:	f7e8 fd1e 	bl	8001ac8 <clearBuffer>
	Rconfig.FOTAVER = Version;
 801908c:	4a06      	ldr	r2, [pc, #24]	@ (80190a8 <SET_FOTA_UPDATE+0x44>)
 801908e:	687b      	ldr	r3, [r7, #4]
 8019090:	6593      	str	r3, [r2, #88]	@ 0x58
	strcpy(updateVersion, Rconfig.FOTAVER);
 8019092:	4b05      	ldr	r3, [pc, #20]	@ (80190a8 <SET_FOTA_UPDATE+0x44>)
 8019094:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019096:	4619      	mov	r1, r3
 8019098:	4804      	ldr	r0, [pc, #16]	@ (80190ac <SET_FOTA_UPDATE+0x48>)
 801909a:	f006 f826 	bl	801f0ea <strcpy>

}
 801909e:	bf00      	nop
 80190a0:	4618      	mov	r0, r3
 80190a2:	370c      	adds	r7, #12
 80190a4:	46bd      	mov	sp, r7
 80190a6:	bd90      	pop	{r4, r7, pc}
 80190a8:	20014ca0 	.word	0x20014ca0
 80190ac:	20013008 	.word	0x20013008

080190b0 <Write_CFGFlash>:

void Write_CFGFlash(uint32_t WriteLoc, uint64_t *DATA) {
 80190b0:	b580      	push	{r7, lr}
 80190b2:	b084      	sub	sp, #16
 80190b4:	af00      	add	r7, sp, #0
 80190b6:	6078      	str	r0, [r7, #4]
 80190b8:	6039      	str	r1, [r7, #0]
	uint32_t KAddr = WriteLoc;
 80190ba:	687b      	ldr	r3, [r7, #4]
 80190bc:	60fb      	str	r3, [r7, #12]
	HAL_FLASH_Unlock();
 80190be:	f7f2 f817 	bl	800b0f0 <HAL_FLASH_Unlock>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_QUADWORD, KAddr, DATA); // Corrected to pass address of WDT
 80190c2:	683b      	ldr	r3, [r7, #0]
 80190c4:	461a      	mov	r2, r3
 80190c6:	68f9      	ldr	r1, [r7, #12]
 80190c8:	2002      	movs	r0, #2
 80190ca:	f7f1 ff99 	bl	800b000 <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 80190ce:	f7f2 f835 	bl	800b13c <HAL_FLASH_Lock>
}
 80190d2:	bf00      	nop
 80190d4:	3710      	adds	r7, #16
 80190d6:	46bd      	mov	sp, r7
 80190d8:	bd80      	pop	{r7, pc}
	...

080190dc <getAllConfig>:

void getAllConfig() {
 80190dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80190de:	b0b9      	sub	sp, #228	@ 0xe4
 80190e0:	af04      	add	r7, sp, #16
	clear_RConfiguration();
 80190e2:	f7fe fdad 	bl	8017c40 <clear_RConfiguration>
	char tmpConfig[200] = { };
 80190e6:	2300      	movs	r3, #0
 80190e8:	60bb      	str	r3, [r7, #8]
 80190ea:	f107 030c 	add.w	r3, r7, #12
 80190ee:	22c4      	movs	r2, #196	@ 0xc4
 80190f0:	2100      	movs	r1, #0
 80190f2:	4618      	mov	r0, r3
 80190f4:	f005 fe9c 	bl	801ee30 <memset>
	GET_MIP(tmpConfig);
 80190f8:	f107 0308 	add.w	r3, r7, #8
 80190fc:	4618      	mov	r0, r3
 80190fe:	f000 fa11 	bl	8019524 <GET_MIP>
	GET_PORT1(tmpConfig);
 8019102:	f107 0308 	add.w	r3, r7, #8
 8019106:	4618      	mov	r0, r3
 8019108:	f000 fa6a 	bl	80195e0 <GET_PORT1>
	GET_MUSER(tmpConfig);
 801910c:	f107 0308 	add.w	r3, r7, #8
 8019110:	4618      	mov	r0, r3
 8019112:	f000 fabb 	bl	801968c <GET_MUSER>
	GET_MPASS(tmpConfig);
 8019116:	f107 0308 	add.w	r3, r7, #8
 801911a:	4618      	mov	r0, r3
 801911c:	f000 fb04 	bl	8019728 <GET_MPASS>
	GET_CERT(tmpConfig);
 8019120:	f107 0308 	add.w	r3, r7, #8
 8019124:	4618      	mov	r0, r3
 8019126:	f000 fb49 	bl	80197bc <GET_CERT>
	GET_KEY(tmpConfig);
 801912a:	f107 0308 	add.w	r3, r7, #8
 801912e:	4618      	mov	r0, r3
 8019130:	f000 fb8e 	bl	8019850 <GET_KEY>
	GET_CA(tmpConfig);
 8019134:	f107 0308 	add.w	r3, r7, #8
 8019138:	4618      	mov	r0, r3
 801913a:	f000 fbd3 	bl	80198e4 <GET_CA>
	GET_IP2(tmpConfig);
 801913e:	f107 0308 	add.w	r3, r7, #8
 8019142:	4618      	mov	r0, r3
 8019144:	f000 fc18 	bl	8019978 <GET_IP2>
	GET_PORT2(tmpConfig);
 8019148:	f107 0308 	add.w	r3, r7, #8
 801914c:	4618      	mov	r0, r3
 801914e:	f000 fc5d 	bl	8019a0c <GET_PORT2>
	GET_SKEY1(tmpConfig);
 8019152:	f107 0308 	add.w	r3, r7, #8
 8019156:	4618      	mov	r0, r3
 8019158:	f000 fc96 	bl	8019a88 <GET_SKEY1>
	GET_SKEY2(tmpConfig);
 801915c:	f107 0308 	add.w	r3, r7, #8
 8019160:	4618      	mov	r0, r3
 8019162:	f000 fcdb 	bl	8019b1c <GET_SKEY2>
	GET_SKEY3(tmpConfig);
 8019166:	f107 0308 	add.w	r3, r7, #8
 801916a:	4618      	mov	r0, r3
 801916c:	f000 fd20 	bl	8019bb0 <GET_SKEY3>
	GET_APN(tmpConfig);
 8019170:	f107 0308 	add.w	r3, r7, #8
 8019174:	4618      	mov	r0, r3
 8019176:	f000 fd65 	bl	8019c44 <GET_APN>
	GET_ION(tmpConfig);
 801917a:	f107 0308 	add.w	r3, r7, #8
 801917e:	4618      	mov	r0, r3
 8019180:	f000 fdaa 	bl	8019cd8 <GET_ION>
	GET_NSAM(tmpConfig);
 8019184:	f107 0308 	add.w	r3, r7, #8
 8019188:	4618      	mov	r0, r3
 801918a:	f000 fe05 	bl	8019d98 <GET_NSAM>
	GET_HA(tmpConfig);
 801918e:	f107 0308 	add.w	r3, r7, #8
 8019192:	4618      	mov	r0, r3
 8019194:	f000 fe4a 	bl	8019e2c <GET_HA>
	GET_HB(tmpConfig);
 8019198:	f107 0308 	add.w	r3, r7, #8
 801919c:	4618      	mov	r0, r3
 801919e:	f000 fe8f 	bl	8019ec0 <GET_HB>
	GET_HC(tmpConfig);
 80191a2:	f107 0308 	add.w	r3, r7, #8
 80191a6:	4618      	mov	r0, r3
 80191a8:	f000 fed4 	bl	8019f54 <GET_HC>
	GET_ACCOFFSET(tmpConfig);
 80191ac:	f107 0308 	add.w	r3, r7, #8
 80191b0:	4618      	mov	r0, r3
 80191b2:	f000 ff19 	bl	8019fe8 <GET_ACCOFFSET>
	GET_USER(tmpConfig);
 80191b6:	f107 0308 	add.w	r3, r7, #8
 80191ba:	4618      	mov	r0, r3
 80191bc:	f000 ff5e 	bl	801a07c <GET_USER>
	GET_PASSWORD(tmpConfig);
 80191c0:	f107 0308 	add.w	r3, r7, #8
 80191c4:	4618      	mov	r0, r3
 80191c6:	f000 ffa3 	bl	801a110 <GET_PASSWORD>
	GET_VIN(tmpConfig);
 80191ca:	f107 0308 	add.w	r3, r7, #8
 80191ce:	4618      	mov	r0, r3
 80191d0:	f000 ffe8 	bl	801a1a4 <GET_VIN>
	GET_Ckey();
 80191d4:	f001 f97a 	bl	801a4cc <GET_Ckey>
	GET_LAT();
 80191d8:	f001 f82e 	bl	801a238 <GET_LAT>
	GET_LON();
 80191dc:	f001 f880 	bl	801a2e0 <GET_LON>
	GET_PHNUM();
 80191e0:	f001 f8d6 	bl	801a390 <GET_PHNUM>
	GET_RTCTimer();
 80191e4:	f001 f928 	bl	801a438 <GET_RTCTimer>
	setStaticKeys(Rconfig.SKEY1, Rconfig.SKEY2, Rconfig.SKEY3);
 80191e8:	4b13      	ldr	r3, [pc, #76]	@ (8019238 <getAllConfig+0x15c>)
 80191ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80191ec:	4a12      	ldr	r2, [pc, #72]	@ (8019238 <getAllConfig+0x15c>)
 80191ee:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80191f0:	4a11      	ldr	r2, [pc, #68]	@ (8019238 <getAllConfig+0x15c>)
 80191f2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80191f4:	4618      	mov	r0, r3
 80191f6:	f7fd fbf1 	bl	80169dc <setStaticKeys>
	setComKeys(Rconfig.CKEY1, Rconfig.CKEY2, Rconfig.CKEY3, Rconfig.CKEY4,
 80191fa:	4b0f      	ldr	r3, [pc, #60]	@ (8019238 <getAllConfig+0x15c>)
 80191fc:	6ddc      	ldr	r4, [r3, #92]	@ 0x5c
 80191fe:	4b0e      	ldr	r3, [pc, #56]	@ (8019238 <getAllConfig+0x15c>)
 8019200:	6e1d      	ldr	r5, [r3, #96]	@ 0x60
 8019202:	4b0d      	ldr	r3, [pc, #52]	@ (8019238 <getAllConfig+0x15c>)
 8019204:	6e5e      	ldr	r6, [r3, #100]	@ 0x64
 8019206:	4b0c      	ldr	r3, [pc, #48]	@ (8019238 <getAllConfig+0x15c>)
 8019208:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801920a:	607b      	str	r3, [r7, #4]
 801920c:	4b0a      	ldr	r3, [pc, #40]	@ (8019238 <getAllConfig+0x15c>)
 801920e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019210:	4a09      	ldr	r2, [pc, #36]	@ (8019238 <getAllConfig+0x15c>)
 8019212:	6f12      	ldr	r2, [r2, #112]	@ 0x70
 8019214:	4908      	ldr	r1, [pc, #32]	@ (8019238 <getAllConfig+0x15c>)
 8019216:	6f49      	ldr	r1, [r1, #116]	@ 0x74
 8019218:	4807      	ldr	r0, [pc, #28]	@ (8019238 <getAllConfig+0x15c>)
 801921a:	6f80      	ldr	r0, [r0, #120]	@ 0x78
 801921c:	9003      	str	r0, [sp, #12]
 801921e:	9102      	str	r1, [sp, #8]
 8019220:	9201      	str	r2, [sp, #4]
 8019222:	9300      	str	r3, [sp, #0]
 8019224:	687b      	ldr	r3, [r7, #4]
 8019226:	4632      	mov	r2, r6
 8019228:	4629      	mov	r1, r5
 801922a:	4620      	mov	r0, r4
 801922c:	f7fd fbf4 	bl	8016a18 <setComKeys>
			Rconfig.CKEY5, Rconfig.CKEY6, Rconfig.CKEY7, Rconfig.CKEY8);
//	GET_ALOC(tmpConfig);
}
 8019230:	bf00      	nop
 8019232:	37d4      	adds	r7, #212	@ 0xd4
 8019234:	46bd      	mov	sp, r7
 8019236:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019238:	20014ca0 	.word	0x20014ca0

0801923c <FeedAllConfig>:

void FeedAllConfig() {
 801923c:	b598      	push	{r3, r4, r7, lr}
 801923e:	af00      	add	r7, sp, #0

	HAL_FLASH_ERASE(SMS_COTA_SEC);
 8019240:	4892      	ldr	r0, [pc, #584]	@ (801948c <FeedAllConfig+0x250>)
 8019242:	f7fd f91d 	bl	8016480 <HAL_FLASH_ERASE>
	// Write each field of the struct to its corresponding location in flash memory
	Write_CFGFlash(MQTT_IP, (uint64_t*) Rconfig.MIP);
 8019246:	4b92      	ldr	r3, [pc, #584]	@ (8019490 <FeedAllConfig+0x254>)
 8019248:	681b      	ldr	r3, [r3, #0]
 801924a:	4619      	mov	r1, r3
 801924c:	4891      	ldr	r0, [pc, #580]	@ (8019494 <FeedAllConfig+0x258>)
 801924e:	f7ff ff2f 	bl	80190b0 <Write_CFGFlash>
	Write_CFGFlash(MQTT_PORT, (uint64_t*) Rconfig.MPORT1);
 8019252:	4b8f      	ldr	r3, [pc, #572]	@ (8019490 <FeedAllConfig+0x254>)
 8019254:	685b      	ldr	r3, [r3, #4]
 8019256:	4619      	mov	r1, r3
 8019258:	488f      	ldr	r0, [pc, #572]	@ (8019498 <FeedAllConfig+0x25c>)
 801925a:	f7ff ff29 	bl	80190b0 <Write_CFGFlash>
	Write_CFGFlash(MQTT_USER, (uint64_t*) Rconfig.MUSER);
 801925e:	4b8c      	ldr	r3, [pc, #560]	@ (8019490 <FeedAllConfig+0x254>)
 8019260:	689b      	ldr	r3, [r3, #8]
 8019262:	4619      	mov	r1, r3
 8019264:	488d      	ldr	r0, [pc, #564]	@ (801949c <FeedAllConfig+0x260>)
 8019266:	f7ff ff23 	bl	80190b0 <Write_CFGFlash>
	Write_CFGFlash(MQTT_PSW, (uint64_t*) Rconfig.MPASS);
 801926a:	4b89      	ldr	r3, [pc, #548]	@ (8019490 <FeedAllConfig+0x254>)
 801926c:	68db      	ldr	r3, [r3, #12]
 801926e:	4619      	mov	r1, r3
 8019270:	488b      	ldr	r0, [pc, #556]	@ (80194a0 <FeedAllConfig+0x264>)
 8019272:	f7ff ff1d 	bl	80190b0 <Write_CFGFlash>
	Write_CFGFlash(MQTT_CERTIFICATE, (uint64_t*) Rconfig.CERT);
 8019276:	4b86      	ldr	r3, [pc, #536]	@ (8019490 <FeedAllConfig+0x254>)
 8019278:	691b      	ldr	r3, [r3, #16]
 801927a:	4619      	mov	r1, r3
 801927c:	4889      	ldr	r0, [pc, #548]	@ (80194a4 <FeedAllConfig+0x268>)
 801927e:	f7ff ff17 	bl	80190b0 <Write_CFGFlash>
	Write_CFGFlash(MQTT_KEY, (uint64_t*) Rconfig.KEY);
 8019282:	4b83      	ldr	r3, [pc, #524]	@ (8019490 <FeedAllConfig+0x254>)
 8019284:	695b      	ldr	r3, [r3, #20]
 8019286:	4619      	mov	r1, r3
 8019288:	4887      	ldr	r0, [pc, #540]	@ (80194a8 <FeedAllConfig+0x26c>)
 801928a:	f7ff ff11 	bl	80190b0 <Write_CFGFlash>
	Write_CFGFlash(MQTT_CERTIFICATE_AUTHORITY, (uint64_t*) Rconfig.CA);
 801928e:	4b80      	ldr	r3, [pc, #512]	@ (8019490 <FeedAllConfig+0x254>)
 8019290:	699b      	ldr	r3, [r3, #24]
 8019292:	4619      	mov	r1, r3
 8019294:	4885      	ldr	r0, [pc, #532]	@ (80194ac <FeedAllConfig+0x270>)
 8019296:	f7ff ff0b 	bl	80190b0 <Write_CFGFlash>
	Write_CFGFlash(FOTA_IP2, (uint64_t*) Rconfig.IP2);
 801929a:	4b7d      	ldr	r3, [pc, #500]	@ (8019490 <FeedAllConfig+0x254>)
 801929c:	69db      	ldr	r3, [r3, #28]
 801929e:	4619      	mov	r1, r3
 80192a0:	4883      	ldr	r0, [pc, #524]	@ (80194b0 <FeedAllConfig+0x274>)
 80192a2:	f7ff ff05 	bl	80190b0 <Write_CFGFlash>
	Write_CFGFlash(FOTA_PORT2, (uint64_t*) Rconfig.IPPORT2);
 80192a6:	4b7a      	ldr	r3, [pc, #488]	@ (8019490 <FeedAllConfig+0x254>)
 80192a8:	6a1b      	ldr	r3, [r3, #32]
 80192aa:	4619      	mov	r1, r3
 80192ac:	4881      	ldr	r0, [pc, #516]	@ (80194b4 <FeedAllConfig+0x278>)
 80192ae:	f7ff feff 	bl	80190b0 <Write_CFGFlash>
	HAL_FLASH_Write_Buff(FOTA_Static_Key1, (uint64_t*) Rconfig.SKEY1,
 80192b2:	4b77      	ldr	r3, [pc, #476]	@ (8019490 <FeedAllConfig+0x254>)
 80192b4:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
			strlen(Rconfig.SKEY1));
 80192b6:	4b76      	ldr	r3, [pc, #472]	@ (8019490 <FeedAllConfig+0x254>)
 80192b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80192ba:	4618      	mov	r0, r3
 80192bc:	f7e6 fff2 	bl	80002a4 <strlen>
 80192c0:	4603      	mov	r3, r0
	HAL_FLASH_Write_Buff(FOTA_Static_Key1, (uint64_t*) Rconfig.SKEY1,
 80192c2:	461a      	mov	r2, r3
 80192c4:	4621      	mov	r1, r4
 80192c6:	487c      	ldr	r0, [pc, #496]	@ (80194b8 <FeedAllConfig+0x27c>)
 80192c8:	f7fd f938 	bl	801653c <HAL_FLASH_Write_Buff>
	HAL_FLASH_Write_Buff(FOTA_Static_Key2, (uint64_t*) Rconfig.SKEY2,
 80192cc:	4b70      	ldr	r3, [pc, #448]	@ (8019490 <FeedAllConfig+0x254>)
 80192ce:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
			strlen(Rconfig.SKEY2));
 80192d0:	4b6f      	ldr	r3, [pc, #444]	@ (8019490 <FeedAllConfig+0x254>)
 80192d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80192d4:	4618      	mov	r0, r3
 80192d6:	f7e6 ffe5 	bl	80002a4 <strlen>
 80192da:	4603      	mov	r3, r0
	HAL_FLASH_Write_Buff(FOTA_Static_Key2, (uint64_t*) Rconfig.SKEY2,
 80192dc:	461a      	mov	r2, r3
 80192de:	4621      	mov	r1, r4
 80192e0:	4876      	ldr	r0, [pc, #472]	@ (80194bc <FeedAllConfig+0x280>)
 80192e2:	f7fd f92b 	bl	801653c <HAL_FLASH_Write_Buff>
	HAL_FLASH_Write_Buff(FOTA_Static_Key3, (uint64_t*) Rconfig.SKEY3,
 80192e6:	4b6a      	ldr	r3, [pc, #424]	@ (8019490 <FeedAllConfig+0x254>)
 80192e8:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
			strlen(Rconfig.SKEY3));
 80192ea:	4b69      	ldr	r3, [pc, #420]	@ (8019490 <FeedAllConfig+0x254>)
 80192ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80192ee:	4618      	mov	r0, r3
 80192f0:	f7e6 ffd8 	bl	80002a4 <strlen>
 80192f4:	4603      	mov	r3, r0
	HAL_FLASH_Write_Buff(FOTA_Static_Key3, (uint64_t*) Rconfig.SKEY3,
 80192f6:	461a      	mov	r2, r3
 80192f8:	4621      	mov	r1, r4
 80192fa:	4871      	ldr	r0, [pc, #452]	@ (80194c0 <FeedAllConfig+0x284>)
 80192fc:	f7fd f91e 	bl	801653c <HAL_FLASH_Write_Buff>
	Write_CFGFlash(APN, (uint64_t*) Rconfig.DAPN);
 8019300:	4b63      	ldr	r3, [pc, #396]	@ (8019490 <FeedAllConfig+0x254>)
 8019302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019304:	4619      	mov	r1, r3
 8019306:	486f      	ldr	r0, [pc, #444]	@ (80194c4 <FeedAllConfig+0x288>)
 8019308:	f7ff fed2 	bl	80190b0 <Write_CFGFlash>
	Write_CFGFlash(ION_Sampling, (uint64_t*) Rconfig.ION);
 801930c:	4b60      	ldr	r3, [pc, #384]	@ (8019490 <FeedAllConfig+0x254>)
 801930e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019310:	4619      	mov	r1, r3
 8019312:	486d      	ldr	r0, [pc, #436]	@ (80194c8 <FeedAllConfig+0x28c>)
 8019314:	f7ff fecc 	bl	80190b0 <Write_CFGFlash>
	Write_CFGFlash(NO_OF_Sampling, (uint64_t*) Rconfig.NSAM);
 8019318:	4b5d      	ldr	r3, [pc, #372]	@ (8019490 <FeedAllConfig+0x254>)
 801931a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801931c:	4619      	mov	r1, r3
 801931e:	486b      	ldr	r0, [pc, #428]	@ (80194cc <FeedAllConfig+0x290>)
 8019320:	f7ff fec6 	bl	80190b0 <Write_CFGFlash>
	Write_CFGFlash(HARSH_ACC_TH, (uint64_t*) Rconfig.HA);
 8019324:	4b5a      	ldr	r3, [pc, #360]	@ (8019490 <FeedAllConfig+0x254>)
 8019326:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019328:	4619      	mov	r1, r3
 801932a:	4869      	ldr	r0, [pc, #420]	@ (80194d0 <FeedAllConfig+0x294>)
 801932c:	f7ff fec0 	bl	80190b0 <Write_CFGFlash>
	Write_CFGFlash(HARSH_DEACC_TH, (uint64_t*) Rconfig.HB);
 8019330:	4b57      	ldr	r3, [pc, #348]	@ (8019490 <FeedAllConfig+0x254>)
 8019332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019334:	4619      	mov	r1, r3
 8019336:	4867      	ldr	r0, [pc, #412]	@ (80194d4 <FeedAllConfig+0x298>)
 8019338:	f7ff feba 	bl	80190b0 <Write_CFGFlash>
	Write_CFGFlash(HARSH_CORNERING_TH, (uint64_t*) Rconfig.HC);
 801933c:	4b54      	ldr	r3, [pc, #336]	@ (8019490 <FeedAllConfig+0x254>)
 801933e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019340:	4619      	mov	r1, r3
 8019342:	4865      	ldr	r0, [pc, #404]	@ (80194d8 <FeedAllConfig+0x29c>)
 8019344:	f7ff feb4 	bl	80190b0 <Write_CFGFlash>
	Write_CFGFlash(SENSOR_OFFSET_CAL, (uint64_t*) Rconfig.ACCOFFSET);
 8019348:	4b51      	ldr	r3, [pc, #324]	@ (8019490 <FeedAllConfig+0x254>)
 801934a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801934c:	4619      	mov	r1, r3
 801934e:	4863      	ldr	r0, [pc, #396]	@ (80194dc <FeedAllConfig+0x2a0>)
 8019350:	f7ff feae 	bl	80190b0 <Write_CFGFlash>
	Write_CFGFlash(USERNAME, (uint64_t*) Rconfig.USER);
 8019354:	4b4e      	ldr	r3, [pc, #312]	@ (8019490 <FeedAllConfig+0x254>)
 8019356:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8019358:	4619      	mov	r1, r3
 801935a:	4861      	ldr	r0, [pc, #388]	@ (80194e0 <FeedAllConfig+0x2a4>)
 801935c:	f7ff fea8 	bl	80190b0 <Write_CFGFlash>
	Write_CFGFlash(PASSWORD, (uint64_t*) Rconfig.PSWD);
 8019360:	4b4b      	ldr	r3, [pc, #300]	@ (8019490 <FeedAllConfig+0x254>)
 8019362:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019364:	4619      	mov	r1, r3
 8019366:	485f      	ldr	r0, [pc, #380]	@ (80194e4 <FeedAllConfig+0x2a8>)
 8019368:	f7ff fea2 	bl	80190b0 <Write_CFGFlash>
	Write_CFGFlash(VECHILE_ID_NUM, (uint64_t*) Rconfig.VIN);
 801936c:	4b48      	ldr	r3, [pc, #288]	@ (8019490 <FeedAllConfig+0x254>)
 801936e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8019370:	4619      	mov	r1, r3
 8019372:	485d      	ldr	r0, [pc, #372]	@ (80194e8 <FeedAllConfig+0x2ac>)
 8019374:	f7ff fe9c 	bl	80190b0 <Write_CFGFlash>
	Write_CFGFlash(LAT_ADDR, (uint64_t*) Rconfig.LAT);
 8019378:	4b45      	ldr	r3, [pc, #276]	@ (8019490 <FeedAllConfig+0x254>)
 801937a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801937c:	4619      	mov	r1, r3
 801937e:	485b      	ldr	r0, [pc, #364]	@ (80194ec <FeedAllConfig+0x2b0>)
 8019380:	f7ff fe96 	bl	80190b0 <Write_CFGFlash>
	Write_CFGFlash(LON_ADDR, (uint64_t*) Rconfig.LON);
 8019384:	4b42      	ldr	r3, [pc, #264]	@ (8019490 <FeedAllConfig+0x254>)
 8019386:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801938a:	4619      	mov	r1, r3
 801938c:	4858      	ldr	r0, [pc, #352]	@ (80194f0 <FeedAllConfig+0x2b4>)
 801938e:	f7ff fe8f 	bl	80190b0 <Write_CFGFlash>
	Write_CFGFlash(SMS_NUM_Addr, (uint64_t*) Rconfig.PHNUM);
 8019392:	4b3f      	ldr	r3, [pc, #252]	@ (8019490 <FeedAllConfig+0x254>)
 8019394:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8019398:	4619      	mov	r1, r3
 801939a:	4856      	ldr	r0, [pc, #344]	@ (80194f4 <FeedAllConfig+0x2b8>)
 801939c:	f7ff fe88 	bl	80190b0 <Write_CFGFlash>
	Write_CFGFlash(RTC_timer_addr, (uint64_t*) Rconfig.Rtime);
 80193a0:	4b3b      	ldr	r3, [pc, #236]	@ (8019490 <FeedAllConfig+0x254>)
 80193a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80193a6:	4619      	mov	r1, r3
 80193a8:	4853      	ldr	r0, [pc, #332]	@ (80194f8 <FeedAllConfig+0x2bc>)
 80193aa:	f7ff fe81 	bl	80190b0 <Write_CFGFlash>
	HAL_FLASH_Write_Buff(CKEY1_ADDR, (uint64_t*) Rconfig.CKEY1,
 80193ae:	4b38      	ldr	r3, [pc, #224]	@ (8019490 <FeedAllConfig+0x254>)
 80193b0:	6ddc      	ldr	r4, [r3, #92]	@ 0x5c
			strlen(Rconfig.CKEY1));
 80193b2:	4b37      	ldr	r3, [pc, #220]	@ (8019490 <FeedAllConfig+0x254>)
 80193b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80193b6:	4618      	mov	r0, r3
 80193b8:	f7e6 ff74 	bl	80002a4 <strlen>
 80193bc:	4603      	mov	r3, r0
	HAL_FLASH_Write_Buff(CKEY1_ADDR, (uint64_t*) Rconfig.CKEY1,
 80193be:	461a      	mov	r2, r3
 80193c0:	4621      	mov	r1, r4
 80193c2:	484e      	ldr	r0, [pc, #312]	@ (80194fc <FeedAllConfig+0x2c0>)
 80193c4:	f7fd f8ba 	bl	801653c <HAL_FLASH_Write_Buff>
	HAL_FLASH_Write_Buff(CKEY2_ADDR, (uint64_t*) Rconfig.CKEY2,
 80193c8:	4b31      	ldr	r3, [pc, #196]	@ (8019490 <FeedAllConfig+0x254>)
 80193ca:	6e1c      	ldr	r4, [r3, #96]	@ 0x60
			strlen(Rconfig.CKEY2));
 80193cc:	4b30      	ldr	r3, [pc, #192]	@ (8019490 <FeedAllConfig+0x254>)
 80193ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80193d0:	4618      	mov	r0, r3
 80193d2:	f7e6 ff67 	bl	80002a4 <strlen>
 80193d6:	4603      	mov	r3, r0
	HAL_FLASH_Write_Buff(CKEY2_ADDR, (uint64_t*) Rconfig.CKEY2,
 80193d8:	461a      	mov	r2, r3
 80193da:	4621      	mov	r1, r4
 80193dc:	4848      	ldr	r0, [pc, #288]	@ (8019500 <FeedAllConfig+0x2c4>)
 80193de:	f7fd f8ad 	bl	801653c <HAL_FLASH_Write_Buff>
	HAL_FLASH_Write_Buff(CKEY3_ADDR, (uint64_t*) Rconfig.CKEY3,
 80193e2:	4b2b      	ldr	r3, [pc, #172]	@ (8019490 <FeedAllConfig+0x254>)
 80193e4:	6e5c      	ldr	r4, [r3, #100]	@ 0x64
			strlen(Rconfig.CKEY3));
 80193e6:	4b2a      	ldr	r3, [pc, #168]	@ (8019490 <FeedAllConfig+0x254>)
 80193e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80193ea:	4618      	mov	r0, r3
 80193ec:	f7e6 ff5a 	bl	80002a4 <strlen>
 80193f0:	4603      	mov	r3, r0
	HAL_FLASH_Write_Buff(CKEY3_ADDR, (uint64_t*) Rconfig.CKEY3,
 80193f2:	461a      	mov	r2, r3
 80193f4:	4621      	mov	r1, r4
 80193f6:	4843      	ldr	r0, [pc, #268]	@ (8019504 <FeedAllConfig+0x2c8>)
 80193f8:	f7fd f8a0 	bl	801653c <HAL_FLASH_Write_Buff>
	HAL_FLASH_Write_Buff(CKEY4_ADDR, (uint64_t*) Rconfig.CKEY4,
 80193fc:	4b24      	ldr	r3, [pc, #144]	@ (8019490 <FeedAllConfig+0x254>)
 80193fe:	6e9c      	ldr	r4, [r3, #104]	@ 0x68
			strlen(Rconfig.CKEY4));
 8019400:	4b23      	ldr	r3, [pc, #140]	@ (8019490 <FeedAllConfig+0x254>)
 8019402:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8019404:	4618      	mov	r0, r3
 8019406:	f7e6 ff4d 	bl	80002a4 <strlen>
 801940a:	4603      	mov	r3, r0
	HAL_FLASH_Write_Buff(CKEY4_ADDR, (uint64_t*) Rconfig.CKEY4,
 801940c:	461a      	mov	r2, r3
 801940e:	4621      	mov	r1, r4
 8019410:	483d      	ldr	r0, [pc, #244]	@ (8019508 <FeedAllConfig+0x2cc>)
 8019412:	f7fd f893 	bl	801653c <HAL_FLASH_Write_Buff>
	HAL_FLASH_Write_Buff(CKEY5_ADDR, (uint64_t*) Rconfig.CKEY5,
 8019416:	4b1e      	ldr	r3, [pc, #120]	@ (8019490 <FeedAllConfig+0x254>)
 8019418:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
			strlen(Rconfig.CKEY5));
 801941a:	4b1d      	ldr	r3, [pc, #116]	@ (8019490 <FeedAllConfig+0x254>)
 801941c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801941e:	4618      	mov	r0, r3
 8019420:	f7e6 ff40 	bl	80002a4 <strlen>
 8019424:	4603      	mov	r3, r0
	HAL_FLASH_Write_Buff(CKEY5_ADDR, (uint64_t*) Rconfig.CKEY5,
 8019426:	461a      	mov	r2, r3
 8019428:	4621      	mov	r1, r4
 801942a:	4838      	ldr	r0, [pc, #224]	@ (801950c <FeedAllConfig+0x2d0>)
 801942c:	f7fd f886 	bl	801653c <HAL_FLASH_Write_Buff>
	HAL_FLASH_Write_Buff(CKEY6_ADDR, (uint64_t*) Rconfig.CKEY6,
 8019430:	4b17      	ldr	r3, [pc, #92]	@ (8019490 <FeedAllConfig+0x254>)
 8019432:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
			strlen(Rconfig.CKEY6));
 8019434:	4b16      	ldr	r3, [pc, #88]	@ (8019490 <FeedAllConfig+0x254>)
 8019436:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019438:	4618      	mov	r0, r3
 801943a:	f7e6 ff33 	bl	80002a4 <strlen>
 801943e:	4603      	mov	r3, r0
	HAL_FLASH_Write_Buff(CKEY6_ADDR, (uint64_t*) Rconfig.CKEY6,
 8019440:	461a      	mov	r2, r3
 8019442:	4621      	mov	r1, r4
 8019444:	4832      	ldr	r0, [pc, #200]	@ (8019510 <FeedAllConfig+0x2d4>)
 8019446:	f7fd f879 	bl	801653c <HAL_FLASH_Write_Buff>
	HAL_FLASH_Write_Buff(CKEY7_ADDR, (uint64_t*) Rconfig.CKEY7,
 801944a:	4b11      	ldr	r3, [pc, #68]	@ (8019490 <FeedAllConfig+0x254>)
 801944c:	6f5c      	ldr	r4, [r3, #116]	@ 0x74
			strlen(Rconfig.CKEY7));
 801944e:	4b10      	ldr	r3, [pc, #64]	@ (8019490 <FeedAllConfig+0x254>)
 8019450:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8019452:	4618      	mov	r0, r3
 8019454:	f7e6 ff26 	bl	80002a4 <strlen>
 8019458:	4603      	mov	r3, r0
	HAL_FLASH_Write_Buff(CKEY7_ADDR, (uint64_t*) Rconfig.CKEY7,
 801945a:	461a      	mov	r2, r3
 801945c:	4621      	mov	r1, r4
 801945e:	482d      	ldr	r0, [pc, #180]	@ (8019514 <FeedAllConfig+0x2d8>)
 8019460:	f7fd f86c 	bl	801653c <HAL_FLASH_Write_Buff>
	HAL_FLASH_Write_Buff(CKEY8_ADDR, (uint64_t*) Rconfig.CKEY8,
 8019464:	4b0a      	ldr	r3, [pc, #40]	@ (8019490 <FeedAllConfig+0x254>)
 8019466:	6f9c      	ldr	r4, [r3, #120]	@ 0x78
			strlen(Rconfig.CKEY8));
 8019468:	4b09      	ldr	r3, [pc, #36]	@ (8019490 <FeedAllConfig+0x254>)
 801946a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801946c:	4618      	mov	r0, r3
 801946e:	f7e6 ff19 	bl	80002a4 <strlen>
 8019472:	4603      	mov	r3, r0
	HAL_FLASH_Write_Buff(CKEY8_ADDR, (uint64_t*) Rconfig.CKEY8,
 8019474:	461a      	mov	r2, r3
 8019476:	4621      	mov	r1, r4
 8019478:	4827      	ldr	r0, [pc, #156]	@ (8019518 <FeedAllConfig+0x2dc>)
 801947a:	f7fd f85f 	bl	801653c <HAL_FLASH_Write_Buff>
	 Write_CFGFlash(FL_On_Sl_Addr, (uint64_t*)&FLAG_RESET_On_Sleep);
 801947e:	4927      	ldr	r1, [pc, #156]	@ (801951c <FeedAllConfig+0x2e0>)
 8019480:	4827      	ldr	r0, [pc, #156]	@ (8019520 <FeedAllConfig+0x2e4>)
 8019482:	f7ff fe15 	bl	80190b0 <Write_CFGFlash>
	// Write other fields similarly
//	Write_CFGFlash(ADDR_L1, L1);
//	Write_CFGFlash(ADDR_L2, L2);
//	Write_CFGFlash(ADDR_L3, L3);

}
 8019486:	bf00      	nop
 8019488:	bd98      	pop	{r3, r4, r7, pc}
 801948a:	bf00      	nop
 801948c:	0816a000 	.word	0x0816a000
 8019490:	20014ca0 	.word	0x20014ca0
 8019494:	0816a010 	.word	0x0816a010
 8019498:	0816a030 	.word	0x0816a030
 801949c:	0816a050 	.word	0x0816a050
 80194a0:	0816a070 	.word	0x0816a070
 80194a4:	0816a090 	.word	0x0816a090
 80194a8:	0816a0b0 	.word	0x0816a0b0
 80194ac:	0816a0e0 	.word	0x0816a0e0
 80194b0:	0816a110 	.word	0x0816a110
 80194b4:	0816a130 	.word	0x0816a130
 80194b8:	0816a150 	.word	0x0816a150
 80194bc:	0816a1a0 	.word	0x0816a1a0
 80194c0:	0816a1e0 	.word	0x0816a1e0
 80194c4:	0816a220 	.word	0x0816a220
 80194c8:	0816a250 	.word	0x0816a250
 80194cc:	0816a270 	.word	0x0816a270
 80194d0:	0816a290 	.word	0x0816a290
 80194d4:	0816a2b0 	.word	0x0816a2b0
 80194d8:	0816a2d0 	.word	0x0816a2d0
 80194dc:	0816a2f0 	.word	0x0816a2f0
 80194e0:	0816a310 	.word	0x0816a310
 80194e4:	0816a330 	.word	0x0816a330
 80194e8:	0816a350 	.word	0x0816a350
 80194ec:	0816a540 	.word	0x0816a540
 80194f0:	0816a560 	.word	0x0816a560
 80194f4:	0816a580 	.word	0x0816a580
 80194f8:	0816a600 	.word	0x0816a600
 80194fc:	0816a430 	.word	0x0816a430
 8019500:	0816a450 	.word	0x0816a450
 8019504:	0816a470 	.word	0x0816a470
 8019508:	0816a490 	.word	0x0816a490
 801950c:	0816a4b0 	.word	0x0816a4b0
 8019510:	0816a4d0 	.word	0x0816a4d0
 8019514:	0816a4f0 	.word	0x0816a4f0
 8019518:	0816a520 	.word	0x0816a520
 801951c:	20014dc0 	.word	0x20014dc0
 8019520:	0816a660 	.word	0x0816a660

08019524 <GET_MIP>:
// Implementations of getter functions
bool GET_MIP() {
 8019524:	b598      	push	{r3, r4, r7, lr}
 8019526:	af00      	add	r7, sp, #0
	memset(RB, 0, sizeof(RB));
 8019528:	2264      	movs	r2, #100	@ 0x64
 801952a:	2100      	movs	r1, #0
 801952c:	4825      	ldr	r0, [pc, #148]	@ (80195c4 <GET_MIP+0xa0>)
 801952e:	f005 fc7f 	bl	801ee30 <memset>
	if (FLASH_Read_Buff(MQTT_IP, RB, 16) == HAL_OK) {
 8019532:	2210      	movs	r2, #16
 8019534:	4923      	ldr	r1, [pc, #140]	@ (80195c4 <GET_MIP+0xa0>)
 8019536:	4824      	ldr	r0, [pc, #144]	@ (80195c8 <GET_MIP+0xa4>)
 8019538:	f7fd f87a 	bl	8016630 <FLASH_Read_Buff>
 801953c:	4603      	mov	r3, r0
 801953e:	2b00      	cmp	r3, #0
 8019540:	d139      	bne.n	80195b6 <GET_MIP+0x92>
		Rconfig.MIP = (char*) malloc(strlen(RB) + 1); // Allocate memory for string
 8019542:	4820      	ldr	r0, [pc, #128]	@ (80195c4 <GET_MIP+0xa0>)
 8019544:	f7e6 feae 	bl	80002a4 <strlen>
 8019548:	4603      	mov	r3, r0
 801954a:	3301      	adds	r3, #1
 801954c:	4618      	mov	r0, r3
 801954e:	f003 fbff 	bl	801cd50 <malloc>
 8019552:	4603      	mov	r3, r0
 8019554:	461a      	mov	r2, r3
 8019556:	4b1d      	ldr	r3, [pc, #116]	@ (80195cc <GET_MIP+0xa8>)
 8019558:	601a      	str	r2, [r3, #0]
		if (Rconfig.MIP != NULL) {
 801955a:	4b1c      	ldr	r3, [pc, #112]	@ (80195cc <GET_MIP+0xa8>)
 801955c:	681b      	ldr	r3, [r3, #0]
 801955e:	2b00      	cmp	r3, #0
 8019560:	d024      	beq.n	80195ac <GET_MIP+0x88>
			strcpy(Rconfig.MIP, RB);
 8019562:	4b1a      	ldr	r3, [pc, #104]	@ (80195cc <GET_MIP+0xa8>)
 8019564:	681b      	ldr	r3, [r3, #0]
 8019566:	4917      	ldr	r1, [pc, #92]	@ (80195c4 <GET_MIP+0xa0>)
 8019568:	4618      	mov	r0, r3
 801956a:	f005 fdbe 	bl	801f0ea <strcpy>
			if (RB[0] == 255) {
 801956e:	4b15      	ldr	r3, [pc, #84]	@ (80195c4 <GET_MIP+0xa0>)
 8019570:	781b      	ldrb	r3, [r3, #0]
 8019572:	2bff      	cmp	r3, #255	@ 0xff
 8019574:	d10c      	bne.n	8019590 <GET_MIP+0x6c>
				strcpy(Rconfig.MIP, "182.71.127.241");
 8019576:	4b15      	ldr	r3, [pc, #84]	@ (80195cc <GET_MIP+0xa8>)
 8019578:	681b      	ldr	r3, [r3, #0]
 801957a:	4a15      	ldr	r2, [pc, #84]	@ (80195d0 <GET_MIP+0xac>)
 801957c:	461c      	mov	r4, r3
 801957e:	4613      	mov	r3, r2
 8019580:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019582:	6020      	str	r0, [r4, #0]
 8019584:	6061      	str	r1, [r4, #4]
 8019586:	60a2      	str	r2, [r4, #8]
 8019588:	881a      	ldrh	r2, [r3, #0]
 801958a:	789b      	ldrb	r3, [r3, #2]
 801958c:	81a2      	strh	r2, [r4, #12]
 801958e:	73a3      	strb	r3, [r4, #14]
			}
			setTcpServerIP(Rconfig.MIP);
 8019590:	4b0e      	ldr	r3, [pc, #56]	@ (80195cc <GET_MIP+0xa8>)
 8019592:	681b      	ldr	r3, [r3, #0]
 8019594:	4618      	mov	r0, r3
 8019596:	f003 f9a9 	bl	801c8ec <setTcpServerIP>
			printc(MinDelay, "MIP: %s\n", Rconfig.MIP);
 801959a:	4b0c      	ldr	r3, [pc, #48]	@ (80195cc <GET_MIP+0xa8>)
 801959c:	681b      	ldr	r3, [r3, #0]
 801959e:	461a      	mov	r2, r3
 80195a0:	490c      	ldr	r1, [pc, #48]	@ (80195d4 <GET_MIP+0xb0>)
 80195a2:	200a      	movs	r0, #10
 80195a4:	f7e8 fa38 	bl	8001a18 <printc>
			return true;
 80195a8:	2301      	movs	r3, #1
 80195aa:	e009      	b.n	80195c0 <GET_MIP+0x9c>
		} else {
			printc(MinDelay, "Memory allocation failed for MIP!\n");
 80195ac:	490a      	ldr	r1, [pc, #40]	@ (80195d8 <GET_MIP+0xb4>)
 80195ae:	200a      	movs	r0, #10
 80195b0:	f7e8 fa32 	bl	8001a18 <printc>
 80195b4:	e003      	b.n	80195be <GET_MIP+0x9a>
		}
	} else {
		printc(MinDelay, "Failed to read MIP from flash!\n");
 80195b6:	4909      	ldr	r1, [pc, #36]	@ (80195dc <GET_MIP+0xb8>)
 80195b8:	200a      	movs	r0, #10
 80195ba:	f7e8 fa2d 	bl	8001a18 <printc>
	}
	return false;
 80195be:	2300      	movs	r3, #0
}
 80195c0:	4618      	mov	r0, r3
 80195c2:	bd98      	pop	{r3, r4, r7, pc}
 80195c4:	20014d30 	.word	0x20014d30
 80195c8:	0816a010 	.word	0x0816a010
 80195cc:	20014ca0 	.word	0x20014ca0
 80195d0:	08023174 	.word	0x08023174
 80195d4:	08023184 	.word	0x08023184
 80195d8:	08023190 	.word	0x08023190
 80195dc:	080231b4 	.word	0x080231b4

080195e0 <GET_PORT1>:

bool GET_PORT1() {
 80195e0:	b580      	push	{r7, lr}
 80195e2:	af00      	add	r7, sp, #0
	memset(RB, 0, sizeof(RB));
 80195e4:	2264      	movs	r2, #100	@ 0x64
 80195e6:	2100      	movs	r1, #0
 80195e8:	4822      	ldr	r0, [pc, #136]	@ (8019674 <GET_PORT1+0x94>)
 80195ea:	f005 fc21 	bl	801ee30 <memset>
	if (FLASH_Read_Buff(MQTT_PORT, RB, 16) == HAL_OK) {
 80195ee:	2210      	movs	r2, #16
 80195f0:	4920      	ldr	r1, [pc, #128]	@ (8019674 <GET_PORT1+0x94>)
 80195f2:	4821      	ldr	r0, [pc, #132]	@ (8019678 <GET_PORT1+0x98>)
 80195f4:	f7fd f81c 	bl	8016630 <FLASH_Read_Buff>
 80195f8:	4603      	mov	r3, r0
 80195fa:	2b00      	cmp	r3, #0
 80195fc:	d132      	bne.n	8019664 <GET_PORT1+0x84>
		Rconfig.MPORT1 = (char*) malloc(strlen(RB) + 1);
 80195fe:	481d      	ldr	r0, [pc, #116]	@ (8019674 <GET_PORT1+0x94>)
 8019600:	f7e6 fe50 	bl	80002a4 <strlen>
 8019604:	4603      	mov	r3, r0
 8019606:	3301      	adds	r3, #1
 8019608:	4618      	mov	r0, r3
 801960a:	f003 fba1 	bl	801cd50 <malloc>
 801960e:	4603      	mov	r3, r0
 8019610:	461a      	mov	r2, r3
 8019612:	4b1a      	ldr	r3, [pc, #104]	@ (801967c <GET_PORT1+0x9c>)
 8019614:	605a      	str	r2, [r3, #4]
		if (Rconfig.MPORT1 != NULL) {
 8019616:	4b19      	ldr	r3, [pc, #100]	@ (801967c <GET_PORT1+0x9c>)
 8019618:	685b      	ldr	r3, [r3, #4]
 801961a:	2b00      	cmp	r3, #0
 801961c:	d026      	beq.n	801966c <GET_PORT1+0x8c>
			strcpy(Rconfig.MPORT1, RB);
 801961e:	4b17      	ldr	r3, [pc, #92]	@ (801967c <GET_PORT1+0x9c>)
 8019620:	685b      	ldr	r3, [r3, #4]
 8019622:	4914      	ldr	r1, [pc, #80]	@ (8019674 <GET_PORT1+0x94>)
 8019624:	4618      	mov	r0, r3
 8019626:	f005 fd60 	bl	801f0ea <strcpy>
			if (RB[0] == 255) {
 801962a:	4b12      	ldr	r3, [pc, #72]	@ (8019674 <GET_PORT1+0x94>)
 801962c:	781b      	ldrb	r3, [r3, #0]
 801962e:	2bff      	cmp	r3, #255	@ 0xff
 8019630:	d106      	bne.n	8019640 <GET_PORT1+0x60>
				strcpy(Rconfig.MPORT1, "4034");
 8019632:	4b12      	ldr	r3, [pc, #72]	@ (801967c <GET_PORT1+0x9c>)
 8019634:	685b      	ldr	r3, [r3, #4]
 8019636:	4a12      	ldr	r2, [pc, #72]	@ (8019680 <GET_PORT1+0xa0>)
 8019638:	6810      	ldr	r0, [r2, #0]
 801963a:	6018      	str	r0, [r3, #0]
 801963c:	7912      	ldrb	r2, [r2, #4]
 801963e:	711a      	strb	r2, [r3, #4]
			}
			setTcpPort(atoi(Rconfig.MPORT1));
 8019640:	4b0e      	ldr	r3, [pc, #56]	@ (801967c <GET_PORT1+0x9c>)
 8019642:	685b      	ldr	r3, [r3, #4]
 8019644:	4618      	mov	r0, r3
 8019646:	f003 fb7e 	bl	801cd46 <atoi>
 801964a:	4603      	mov	r3, r0
 801964c:	4618      	mov	r0, r3
 801964e:	f003 f95f 	bl	801c910 <setTcpPort>
			printc(MinDelay, "PORT1: %s\n", Rconfig.MPORT1);
 8019652:	4b0a      	ldr	r3, [pc, #40]	@ (801967c <GET_PORT1+0x9c>)
 8019654:	685b      	ldr	r3, [r3, #4]
 8019656:	461a      	mov	r2, r3
 8019658:	490a      	ldr	r1, [pc, #40]	@ (8019684 <GET_PORT1+0xa4>)
 801965a:	200a      	movs	r0, #10
 801965c:	f7e8 f9dc 	bl	8001a18 <printc>
			return true;
 8019660:	2301      	movs	r3, #1
 8019662:	e004      	b.n	801966e <GET_PORT1+0x8e>
		}
	} else {
		printc(MinDelay, "Failed to read PORT1 from flash!\n");
 8019664:	4908      	ldr	r1, [pc, #32]	@ (8019688 <GET_PORT1+0xa8>)
 8019666:	200a      	movs	r0, #10
 8019668:	f7e8 f9d6 	bl	8001a18 <printc>
	}
	return false;
 801966c:	2300      	movs	r3, #0
}
 801966e:	4618      	mov	r0, r3
 8019670:	bd80      	pop	{r7, pc}
 8019672:	bf00      	nop
 8019674:	20014d30 	.word	0x20014d30
 8019678:	0816a030 	.word	0x0816a030
 801967c:	20014ca0 	.word	0x20014ca0
 8019680:	080231d4 	.word	0x080231d4
 8019684:	080231dc 	.word	0x080231dc
 8019688:	080231e8 	.word	0x080231e8

0801968c <GET_MUSER>:

bool GET_MUSER(char *opBuffer) {
 801968c:	b580      	push	{r7, lr}
 801968e:	b082      	sub	sp, #8
 8019690:	af00      	add	r7, sp, #0
 8019692:	6078      	str	r0, [r7, #4]
	memset(RB, 0, sizeof(RB));
 8019694:	2264      	movs	r2, #100	@ 0x64
 8019696:	2100      	movs	r1, #0
 8019698:	481d      	ldr	r0, [pc, #116]	@ (8019710 <GET_MUSER+0x84>)
 801969a:	f005 fbc9 	bl	801ee30 <memset>
	if (FLASH_Read_Buff(MQTT_USER, RB, 16) == HAL_OK) {
 801969e:	2210      	movs	r2, #16
 80196a0:	491b      	ldr	r1, [pc, #108]	@ (8019710 <GET_MUSER+0x84>)
 80196a2:	481c      	ldr	r0, [pc, #112]	@ (8019714 <GET_MUSER+0x88>)
 80196a4:	f7fc ffc4 	bl	8016630 <FLASH_Read_Buff>
 80196a8:	4603      	mov	r3, r0
 80196aa:	2b00      	cmp	r3, #0
 80196ac:	d127      	bne.n	80196fe <GET_MUSER+0x72>
		Rconfig.MUSER = (char*) malloc(strlen(RB) + 1); // Allocate memory for string
 80196ae:	4818      	ldr	r0, [pc, #96]	@ (8019710 <GET_MUSER+0x84>)
 80196b0:	f7e6 fdf8 	bl	80002a4 <strlen>
 80196b4:	4603      	mov	r3, r0
 80196b6:	3301      	adds	r3, #1
 80196b8:	4618      	mov	r0, r3
 80196ba:	f003 fb49 	bl	801cd50 <malloc>
 80196be:	4603      	mov	r3, r0
 80196c0:	461a      	mov	r2, r3
 80196c2:	4b15      	ldr	r3, [pc, #84]	@ (8019718 <GET_MUSER+0x8c>)
 80196c4:	609a      	str	r2, [r3, #8]
		if (Rconfig.MUSER != NULL) {
 80196c6:	4b14      	ldr	r3, [pc, #80]	@ (8019718 <GET_MUSER+0x8c>)
 80196c8:	689b      	ldr	r3, [r3, #8]
 80196ca:	2b00      	cmp	r3, #0
 80196cc:	d012      	beq.n	80196f4 <GET_MUSER+0x68>
			strcpy(Rconfig.MUSER, RB);
 80196ce:	4b12      	ldr	r3, [pc, #72]	@ (8019718 <GET_MUSER+0x8c>)
 80196d0:	689b      	ldr	r3, [r3, #8]
 80196d2:	490f      	ldr	r1, [pc, #60]	@ (8019710 <GET_MUSER+0x84>)
 80196d4:	4618      	mov	r0, r3
 80196d6:	f005 fd08 	bl	801f0ea <strcpy>
			strcpy(opBuffer, RB);
 80196da:	490d      	ldr	r1, [pc, #52]	@ (8019710 <GET_MUSER+0x84>)
 80196dc:	6878      	ldr	r0, [r7, #4]
 80196de:	f005 fd04 	bl	801f0ea <strcpy>
			printc(MinDelay, "MUSER: %s\n", Rconfig.MUSER);
 80196e2:	4b0d      	ldr	r3, [pc, #52]	@ (8019718 <GET_MUSER+0x8c>)
 80196e4:	689b      	ldr	r3, [r3, #8]
 80196e6:	461a      	mov	r2, r3
 80196e8:	490c      	ldr	r1, [pc, #48]	@ (801971c <GET_MUSER+0x90>)
 80196ea:	200a      	movs	r0, #10
 80196ec:	f7e8 f994 	bl	8001a18 <printc>
			return true;
 80196f0:	2301      	movs	r3, #1
 80196f2:	e009      	b.n	8019708 <GET_MUSER+0x7c>
		} else {
			printc(MinDelay, "Memory allocation failed for MUSER!\n");
 80196f4:	490a      	ldr	r1, [pc, #40]	@ (8019720 <GET_MUSER+0x94>)
 80196f6:	200a      	movs	r0, #10
 80196f8:	f7e8 f98e 	bl	8001a18 <printc>
 80196fc:	e003      	b.n	8019706 <GET_MUSER+0x7a>
		}
	} else {
		printc(MinDelay, "Failed to read MUSER from flash!\n");
 80196fe:	4909      	ldr	r1, [pc, #36]	@ (8019724 <GET_MUSER+0x98>)
 8019700:	200a      	movs	r0, #10
 8019702:	f7e8 f989 	bl	8001a18 <printc>
	}
	return false;
 8019706:	2300      	movs	r3, #0
}
 8019708:	4618      	mov	r0, r3
 801970a:	3708      	adds	r7, #8
 801970c:	46bd      	mov	sp, r7
 801970e:	bd80      	pop	{r7, pc}
 8019710:	20014d30 	.word	0x20014d30
 8019714:	0816a050 	.word	0x0816a050
 8019718:	20014ca0 	.word	0x20014ca0
 801971c:	0802320c 	.word	0x0802320c
 8019720:	08023218 	.word	0x08023218
 8019724:	08023240 	.word	0x08023240

08019728 <GET_MPASS>:

bool GET_MPASS(char *opBuffer) {
 8019728:	b580      	push	{r7, lr}
 801972a:	b082      	sub	sp, #8
 801972c:	af00      	add	r7, sp, #0
 801972e:	6078      	str	r0, [r7, #4]
	memset(RB, 0, sizeof(RB));
 8019730:	2264      	movs	r2, #100	@ 0x64
 8019732:	2100      	movs	r1, #0
 8019734:	481b      	ldr	r0, [pc, #108]	@ (80197a4 <GET_MPASS+0x7c>)
 8019736:	f005 fb7b 	bl	801ee30 <memset>
	if (FLASH_Read_Buff(MQTT_PSW, RB, 16) == HAL_OK) {
 801973a:	2210      	movs	r2, #16
 801973c:	4919      	ldr	r1, [pc, #100]	@ (80197a4 <GET_MPASS+0x7c>)
 801973e:	481a      	ldr	r0, [pc, #104]	@ (80197a8 <GET_MPASS+0x80>)
 8019740:	f7fc ff76 	bl	8016630 <FLASH_Read_Buff>
 8019744:	4603      	mov	r3, r0
 8019746:	2b00      	cmp	r3, #0
 8019748:	d122      	bne.n	8019790 <GET_MPASS+0x68>
		Rconfig.MPASS = (char*) malloc(strlen(RB) + 1); // Allocate memory for string
 801974a:	4816      	ldr	r0, [pc, #88]	@ (80197a4 <GET_MPASS+0x7c>)
 801974c:	f7e6 fdaa 	bl	80002a4 <strlen>
 8019750:	4603      	mov	r3, r0
 8019752:	3301      	adds	r3, #1
 8019754:	4618      	mov	r0, r3
 8019756:	f003 fafb 	bl	801cd50 <malloc>
 801975a:	4603      	mov	r3, r0
 801975c:	461a      	mov	r2, r3
 801975e:	4b13      	ldr	r3, [pc, #76]	@ (80197ac <GET_MPASS+0x84>)
 8019760:	60da      	str	r2, [r3, #12]
		if (Rconfig.MPASS != NULL) {
 8019762:	4b12      	ldr	r3, [pc, #72]	@ (80197ac <GET_MPASS+0x84>)
 8019764:	68db      	ldr	r3, [r3, #12]
 8019766:	2b00      	cmp	r3, #0
 8019768:	d00d      	beq.n	8019786 <GET_MPASS+0x5e>
			strcpy(Rconfig.MPASS, RB);
 801976a:	4b10      	ldr	r3, [pc, #64]	@ (80197ac <GET_MPASS+0x84>)
 801976c:	68db      	ldr	r3, [r3, #12]
 801976e:	490d      	ldr	r1, [pc, #52]	@ (80197a4 <GET_MPASS+0x7c>)
 8019770:	4618      	mov	r0, r3
 8019772:	f005 fcba 	bl	801f0ea <strcpy>
			printc(MinDelay, "MPASS: %s\n", Rconfig.MPASS);
 8019776:	4b0d      	ldr	r3, [pc, #52]	@ (80197ac <GET_MPASS+0x84>)
 8019778:	68db      	ldr	r3, [r3, #12]
 801977a:	461a      	mov	r2, r3
 801977c:	490c      	ldr	r1, [pc, #48]	@ (80197b0 <GET_MPASS+0x88>)
 801977e:	200a      	movs	r0, #10
 8019780:	f7e8 f94a 	bl	8001a18 <printc>
 8019784:	e008      	b.n	8019798 <GET_MPASS+0x70>
		} else {
			printc(MinDelay, "Memory allocation failed for MPASS!\n");
 8019786:	490b      	ldr	r1, [pc, #44]	@ (80197b4 <GET_MPASS+0x8c>)
 8019788:	200a      	movs	r0, #10
 801978a:	f7e8 f945 	bl	8001a18 <printc>
 801978e:	e003      	b.n	8019798 <GET_MPASS+0x70>
		}
	} else {
		printc(MinDelay, "Failed to read MPASS from flash!\n");
 8019790:	4909      	ldr	r1, [pc, #36]	@ (80197b8 <GET_MPASS+0x90>)
 8019792:	200a      	movs	r0, #10
 8019794:	f7e8 f940 	bl	8001a18 <printc>
	}
}
 8019798:	bf00      	nop
 801979a:	4618      	mov	r0, r3
 801979c:	3708      	adds	r7, #8
 801979e:	46bd      	mov	sp, r7
 80197a0:	bd80      	pop	{r7, pc}
 80197a2:	bf00      	nop
 80197a4:	20014d30 	.word	0x20014d30
 80197a8:	0816a070 	.word	0x0816a070
 80197ac:	20014ca0 	.word	0x20014ca0
 80197b0:	08023264 	.word	0x08023264
 80197b4:	08023270 	.word	0x08023270
 80197b8:	08023298 	.word	0x08023298

080197bc <GET_CERT>:

bool GET_CERT(char *opBuffer) {
 80197bc:	b580      	push	{r7, lr}
 80197be:	b082      	sub	sp, #8
 80197c0:	af00      	add	r7, sp, #0
 80197c2:	6078      	str	r0, [r7, #4]
	memset(RB, 0, sizeof(RB));
 80197c4:	2264      	movs	r2, #100	@ 0x64
 80197c6:	2100      	movs	r1, #0
 80197c8:	481b      	ldr	r0, [pc, #108]	@ (8019838 <GET_CERT+0x7c>)
 80197ca:	f005 fb31 	bl	801ee30 <memset>
	if (FLASH_Read_Buff(MQTT_CERTIFICATE, RB, 16) == HAL_OK) {
 80197ce:	2210      	movs	r2, #16
 80197d0:	4919      	ldr	r1, [pc, #100]	@ (8019838 <GET_CERT+0x7c>)
 80197d2:	481a      	ldr	r0, [pc, #104]	@ (801983c <GET_CERT+0x80>)
 80197d4:	f7fc ff2c 	bl	8016630 <FLASH_Read_Buff>
 80197d8:	4603      	mov	r3, r0
 80197da:	2b00      	cmp	r3, #0
 80197dc:	d122      	bne.n	8019824 <GET_CERT+0x68>
		Rconfig.CERT = (char*) malloc(strlen(RB) + 1); // Allocate memory for string
 80197de:	4816      	ldr	r0, [pc, #88]	@ (8019838 <GET_CERT+0x7c>)
 80197e0:	f7e6 fd60 	bl	80002a4 <strlen>
 80197e4:	4603      	mov	r3, r0
 80197e6:	3301      	adds	r3, #1
 80197e8:	4618      	mov	r0, r3
 80197ea:	f003 fab1 	bl	801cd50 <malloc>
 80197ee:	4603      	mov	r3, r0
 80197f0:	461a      	mov	r2, r3
 80197f2:	4b13      	ldr	r3, [pc, #76]	@ (8019840 <GET_CERT+0x84>)
 80197f4:	611a      	str	r2, [r3, #16]
		if (Rconfig.CERT != NULL) {
 80197f6:	4b12      	ldr	r3, [pc, #72]	@ (8019840 <GET_CERT+0x84>)
 80197f8:	691b      	ldr	r3, [r3, #16]
 80197fa:	2b00      	cmp	r3, #0
 80197fc:	d00d      	beq.n	801981a <GET_CERT+0x5e>
			strcpy(Rconfig.CERT, RB);
 80197fe:	4b10      	ldr	r3, [pc, #64]	@ (8019840 <GET_CERT+0x84>)
 8019800:	691b      	ldr	r3, [r3, #16]
 8019802:	490d      	ldr	r1, [pc, #52]	@ (8019838 <GET_CERT+0x7c>)
 8019804:	4618      	mov	r0, r3
 8019806:	f005 fc70 	bl	801f0ea <strcpy>
			printc(MinDelay, "CERT: %s\n", Rconfig.CERT);
 801980a:	4b0d      	ldr	r3, [pc, #52]	@ (8019840 <GET_CERT+0x84>)
 801980c:	691b      	ldr	r3, [r3, #16]
 801980e:	461a      	mov	r2, r3
 8019810:	490c      	ldr	r1, [pc, #48]	@ (8019844 <GET_CERT+0x88>)
 8019812:	200a      	movs	r0, #10
 8019814:	f7e8 f900 	bl	8001a18 <printc>
 8019818:	e008      	b.n	801982c <GET_CERT+0x70>
		} else {
			printc(MinDelay, "Memory allocation failed for CERT!\n");
 801981a:	490b      	ldr	r1, [pc, #44]	@ (8019848 <GET_CERT+0x8c>)
 801981c:	200a      	movs	r0, #10
 801981e:	f7e8 f8fb 	bl	8001a18 <printc>
 8019822:	e003      	b.n	801982c <GET_CERT+0x70>
		}
	} else {
		printc(MinDelay, "Failed to read CERT from flash!\n");
 8019824:	4909      	ldr	r1, [pc, #36]	@ (801984c <GET_CERT+0x90>)
 8019826:	200a      	movs	r0, #10
 8019828:	f7e8 f8f6 	bl	8001a18 <printc>
	}
}
 801982c:	bf00      	nop
 801982e:	4618      	mov	r0, r3
 8019830:	3708      	adds	r7, #8
 8019832:	46bd      	mov	sp, r7
 8019834:	bd80      	pop	{r7, pc}
 8019836:	bf00      	nop
 8019838:	20014d30 	.word	0x20014d30
 801983c:	0816a090 	.word	0x0816a090
 8019840:	20014ca0 	.word	0x20014ca0
 8019844:	080232bc 	.word	0x080232bc
 8019848:	080232c8 	.word	0x080232c8
 801984c:	080232ec 	.word	0x080232ec

08019850 <GET_KEY>:

bool GET_KEY(char *opBuffer) {
 8019850:	b580      	push	{r7, lr}
 8019852:	b082      	sub	sp, #8
 8019854:	af00      	add	r7, sp, #0
 8019856:	6078      	str	r0, [r7, #4]
	memset(RB, 0, sizeof(RB));
 8019858:	2264      	movs	r2, #100	@ 0x64
 801985a:	2100      	movs	r1, #0
 801985c:	481b      	ldr	r0, [pc, #108]	@ (80198cc <GET_KEY+0x7c>)
 801985e:	f005 fae7 	bl	801ee30 <memset>
	if (FLASH_Read_Buff(MQTT_KEY, RB, 16) == HAL_OK) {
 8019862:	2210      	movs	r2, #16
 8019864:	4919      	ldr	r1, [pc, #100]	@ (80198cc <GET_KEY+0x7c>)
 8019866:	481a      	ldr	r0, [pc, #104]	@ (80198d0 <GET_KEY+0x80>)
 8019868:	f7fc fee2 	bl	8016630 <FLASH_Read_Buff>
 801986c:	4603      	mov	r3, r0
 801986e:	2b00      	cmp	r3, #0
 8019870:	d122      	bne.n	80198b8 <GET_KEY+0x68>
		Rconfig.KEY = (char*) malloc(strlen(RB) + 1); // Allocate memory for string
 8019872:	4816      	ldr	r0, [pc, #88]	@ (80198cc <GET_KEY+0x7c>)
 8019874:	f7e6 fd16 	bl	80002a4 <strlen>
 8019878:	4603      	mov	r3, r0
 801987a:	3301      	adds	r3, #1
 801987c:	4618      	mov	r0, r3
 801987e:	f003 fa67 	bl	801cd50 <malloc>
 8019882:	4603      	mov	r3, r0
 8019884:	461a      	mov	r2, r3
 8019886:	4b13      	ldr	r3, [pc, #76]	@ (80198d4 <GET_KEY+0x84>)
 8019888:	615a      	str	r2, [r3, #20]
		if (Rconfig.KEY != NULL) {
 801988a:	4b12      	ldr	r3, [pc, #72]	@ (80198d4 <GET_KEY+0x84>)
 801988c:	695b      	ldr	r3, [r3, #20]
 801988e:	2b00      	cmp	r3, #0
 8019890:	d00d      	beq.n	80198ae <GET_KEY+0x5e>
			strcpy(Rconfig.KEY, RB);
 8019892:	4b10      	ldr	r3, [pc, #64]	@ (80198d4 <GET_KEY+0x84>)
 8019894:	695b      	ldr	r3, [r3, #20]
 8019896:	490d      	ldr	r1, [pc, #52]	@ (80198cc <GET_KEY+0x7c>)
 8019898:	4618      	mov	r0, r3
 801989a:	f005 fc26 	bl	801f0ea <strcpy>
			printc(MinDelay, "KEY: %s\n", Rconfig.KEY);
 801989e:	4b0d      	ldr	r3, [pc, #52]	@ (80198d4 <GET_KEY+0x84>)
 80198a0:	695b      	ldr	r3, [r3, #20]
 80198a2:	461a      	mov	r2, r3
 80198a4:	490c      	ldr	r1, [pc, #48]	@ (80198d8 <GET_KEY+0x88>)
 80198a6:	200a      	movs	r0, #10
 80198a8:	f7e8 f8b6 	bl	8001a18 <printc>
 80198ac:	e008      	b.n	80198c0 <GET_KEY+0x70>
		} else {
			printc(MinDelay, "Memory allocation failed for KEY!\n");
 80198ae:	490b      	ldr	r1, [pc, #44]	@ (80198dc <GET_KEY+0x8c>)
 80198b0:	200a      	movs	r0, #10
 80198b2:	f7e8 f8b1 	bl	8001a18 <printc>
 80198b6:	e003      	b.n	80198c0 <GET_KEY+0x70>
		}
	} else {
		printc(MinDelay, "Failed to read KEY from flash!\n");
 80198b8:	4909      	ldr	r1, [pc, #36]	@ (80198e0 <GET_KEY+0x90>)
 80198ba:	200a      	movs	r0, #10
 80198bc:	f7e8 f8ac 	bl	8001a18 <printc>
	}
}
 80198c0:	bf00      	nop
 80198c2:	4618      	mov	r0, r3
 80198c4:	3708      	adds	r7, #8
 80198c6:	46bd      	mov	sp, r7
 80198c8:	bd80      	pop	{r7, pc}
 80198ca:	bf00      	nop
 80198cc:	20014d30 	.word	0x20014d30
 80198d0:	0816a0b0 	.word	0x0816a0b0
 80198d4:	20014ca0 	.word	0x20014ca0
 80198d8:	08023310 	.word	0x08023310
 80198dc:	0802331c 	.word	0x0802331c
 80198e0:	08023340 	.word	0x08023340

080198e4 <GET_CA>:

bool GET_CA(char *opBuffer) {
 80198e4:	b580      	push	{r7, lr}
 80198e6:	b082      	sub	sp, #8
 80198e8:	af00      	add	r7, sp, #0
 80198ea:	6078      	str	r0, [r7, #4]
	memset(RB, 0, sizeof(RB));
 80198ec:	2264      	movs	r2, #100	@ 0x64
 80198ee:	2100      	movs	r1, #0
 80198f0:	481b      	ldr	r0, [pc, #108]	@ (8019960 <GET_CA+0x7c>)
 80198f2:	f005 fa9d 	bl	801ee30 <memset>
	if (FLASH_Read_Buff(MQTT_CERTIFICATE_AUTHORITY, RB, 16) == HAL_OK) {
 80198f6:	2210      	movs	r2, #16
 80198f8:	4919      	ldr	r1, [pc, #100]	@ (8019960 <GET_CA+0x7c>)
 80198fa:	481a      	ldr	r0, [pc, #104]	@ (8019964 <GET_CA+0x80>)
 80198fc:	f7fc fe98 	bl	8016630 <FLASH_Read_Buff>
 8019900:	4603      	mov	r3, r0
 8019902:	2b00      	cmp	r3, #0
 8019904:	d122      	bne.n	801994c <GET_CA+0x68>
		Rconfig.CA = (char*) malloc(strlen(RB) + 1); // Allocate memory for string
 8019906:	4816      	ldr	r0, [pc, #88]	@ (8019960 <GET_CA+0x7c>)
 8019908:	f7e6 fccc 	bl	80002a4 <strlen>
 801990c:	4603      	mov	r3, r0
 801990e:	3301      	adds	r3, #1
 8019910:	4618      	mov	r0, r3
 8019912:	f003 fa1d 	bl	801cd50 <malloc>
 8019916:	4603      	mov	r3, r0
 8019918:	461a      	mov	r2, r3
 801991a:	4b13      	ldr	r3, [pc, #76]	@ (8019968 <GET_CA+0x84>)
 801991c:	619a      	str	r2, [r3, #24]
		if (Rconfig.CA != NULL) {
 801991e:	4b12      	ldr	r3, [pc, #72]	@ (8019968 <GET_CA+0x84>)
 8019920:	699b      	ldr	r3, [r3, #24]
 8019922:	2b00      	cmp	r3, #0
 8019924:	d00d      	beq.n	8019942 <GET_CA+0x5e>
			strcpy(Rconfig.CA, RB);
 8019926:	4b10      	ldr	r3, [pc, #64]	@ (8019968 <GET_CA+0x84>)
 8019928:	699b      	ldr	r3, [r3, #24]
 801992a:	490d      	ldr	r1, [pc, #52]	@ (8019960 <GET_CA+0x7c>)
 801992c:	4618      	mov	r0, r3
 801992e:	f005 fbdc 	bl	801f0ea <strcpy>
			printc(MinDelay, "CA: %s\n", Rconfig.CA);
 8019932:	4b0d      	ldr	r3, [pc, #52]	@ (8019968 <GET_CA+0x84>)
 8019934:	699b      	ldr	r3, [r3, #24]
 8019936:	461a      	mov	r2, r3
 8019938:	490c      	ldr	r1, [pc, #48]	@ (801996c <GET_CA+0x88>)
 801993a:	200a      	movs	r0, #10
 801993c:	f7e8 f86c 	bl	8001a18 <printc>
 8019940:	e008      	b.n	8019954 <GET_CA+0x70>
		} else {
			printc(MinDelay, "Memory allocation failed for CA!\n");
 8019942:	490b      	ldr	r1, [pc, #44]	@ (8019970 <GET_CA+0x8c>)
 8019944:	200a      	movs	r0, #10
 8019946:	f7e8 f867 	bl	8001a18 <printc>
 801994a:	e003      	b.n	8019954 <GET_CA+0x70>
		}
	} else {
		printc(MinDelay, "Failed to read CA from flash!\n");
 801994c:	4909      	ldr	r1, [pc, #36]	@ (8019974 <GET_CA+0x90>)
 801994e:	200a      	movs	r0, #10
 8019950:	f7e8 f862 	bl	8001a18 <printc>
	}
}
 8019954:	bf00      	nop
 8019956:	4618      	mov	r0, r3
 8019958:	3708      	adds	r7, #8
 801995a:	46bd      	mov	sp, r7
 801995c:	bd80      	pop	{r7, pc}
 801995e:	bf00      	nop
 8019960:	20014d30 	.word	0x20014d30
 8019964:	0816a0e0 	.word	0x0816a0e0
 8019968:	20014ca0 	.word	0x20014ca0
 801996c:	08023360 	.word	0x08023360
 8019970:	08023368 	.word	0x08023368
 8019974:	0802338c 	.word	0x0802338c

08019978 <GET_IP2>:

bool GET_IP2(char *opBuffer) {
 8019978:	b580      	push	{r7, lr}
 801997a:	b082      	sub	sp, #8
 801997c:	af00      	add	r7, sp, #0
 801997e:	6078      	str	r0, [r7, #4]
	memset(RB, 0, sizeof(RB));
 8019980:	2264      	movs	r2, #100	@ 0x64
 8019982:	2100      	movs	r1, #0
 8019984:	481b      	ldr	r0, [pc, #108]	@ (80199f4 <GET_IP2+0x7c>)
 8019986:	f005 fa53 	bl	801ee30 <memset>
	if (FLASH_Read_Buff(FOTA_IP2, RB, 16) == HAL_OK) {
 801998a:	2210      	movs	r2, #16
 801998c:	4919      	ldr	r1, [pc, #100]	@ (80199f4 <GET_IP2+0x7c>)
 801998e:	481a      	ldr	r0, [pc, #104]	@ (80199f8 <GET_IP2+0x80>)
 8019990:	f7fc fe4e 	bl	8016630 <FLASH_Read_Buff>
 8019994:	4603      	mov	r3, r0
 8019996:	2b00      	cmp	r3, #0
 8019998:	d122      	bne.n	80199e0 <GET_IP2+0x68>
		Rconfig.IP2 = (char*) malloc(strlen(RB) + 1); // Allocate memory for string
 801999a:	4816      	ldr	r0, [pc, #88]	@ (80199f4 <GET_IP2+0x7c>)
 801999c:	f7e6 fc82 	bl	80002a4 <strlen>
 80199a0:	4603      	mov	r3, r0
 80199a2:	3301      	adds	r3, #1
 80199a4:	4618      	mov	r0, r3
 80199a6:	f003 f9d3 	bl	801cd50 <malloc>
 80199aa:	4603      	mov	r3, r0
 80199ac:	461a      	mov	r2, r3
 80199ae:	4b13      	ldr	r3, [pc, #76]	@ (80199fc <GET_IP2+0x84>)
 80199b0:	61da      	str	r2, [r3, #28]
		if (Rconfig.IP2 != NULL) {
 80199b2:	4b12      	ldr	r3, [pc, #72]	@ (80199fc <GET_IP2+0x84>)
 80199b4:	69db      	ldr	r3, [r3, #28]
 80199b6:	2b00      	cmp	r3, #0
 80199b8:	d00d      	beq.n	80199d6 <GET_IP2+0x5e>
			strcpy(Rconfig.IP2, RB);
 80199ba:	4b10      	ldr	r3, [pc, #64]	@ (80199fc <GET_IP2+0x84>)
 80199bc:	69db      	ldr	r3, [r3, #28]
 80199be:	490d      	ldr	r1, [pc, #52]	@ (80199f4 <GET_IP2+0x7c>)
 80199c0:	4618      	mov	r0, r3
 80199c2:	f005 fb92 	bl	801f0ea <strcpy>
			printc(MinDelay, "IP2: %s\n", Rconfig.IP2);
 80199c6:	4b0d      	ldr	r3, [pc, #52]	@ (80199fc <GET_IP2+0x84>)
 80199c8:	69db      	ldr	r3, [r3, #28]
 80199ca:	461a      	mov	r2, r3
 80199cc:	490c      	ldr	r1, [pc, #48]	@ (8019a00 <GET_IP2+0x88>)
 80199ce:	200a      	movs	r0, #10
 80199d0:	f7e8 f822 	bl	8001a18 <printc>
 80199d4:	e008      	b.n	80199e8 <GET_IP2+0x70>
		} else {
			printc(MinDelay, "Memory allocation failed for IP2!\n");
 80199d6:	490b      	ldr	r1, [pc, #44]	@ (8019a04 <GET_IP2+0x8c>)
 80199d8:	200a      	movs	r0, #10
 80199da:	f7e8 f81d 	bl	8001a18 <printc>
 80199de:	e003      	b.n	80199e8 <GET_IP2+0x70>
		}
	} else {
		printc(MinDelay, "Failed to read IP2 from flash!\n");
 80199e0:	4909      	ldr	r1, [pc, #36]	@ (8019a08 <GET_IP2+0x90>)
 80199e2:	200a      	movs	r0, #10
 80199e4:	f7e8 f818 	bl	8001a18 <printc>
	}
}
 80199e8:	bf00      	nop
 80199ea:	4618      	mov	r0, r3
 80199ec:	3708      	adds	r7, #8
 80199ee:	46bd      	mov	sp, r7
 80199f0:	bd80      	pop	{r7, pc}
 80199f2:	bf00      	nop
 80199f4:	20014d30 	.word	0x20014d30
 80199f8:	0816a110 	.word	0x0816a110
 80199fc:	20014ca0 	.word	0x20014ca0
 8019a00:	080233ac 	.word	0x080233ac
 8019a04:	080233b8 	.word	0x080233b8
 8019a08:	080233dc 	.word	0x080233dc

08019a0c <GET_PORT2>:

bool GET_PORT2(char *opBuffer) {
 8019a0c:	b580      	push	{r7, lr}
 8019a0e:	b082      	sub	sp, #8
 8019a10:	af00      	add	r7, sp, #0
 8019a12:	6078      	str	r0, [r7, #4]
	memset(RB, 0, sizeof(RB));
 8019a14:	2264      	movs	r2, #100	@ 0x64
 8019a16:	2100      	movs	r1, #0
 8019a18:	4816      	ldr	r0, [pc, #88]	@ (8019a74 <GET_PORT2+0x68>)
 8019a1a:	f005 fa09 	bl	801ee30 <memset>
	if (FLASH_Read_Buff(FOTA_PORT2, RB, 16) == HAL_OK) {
 8019a1e:	2210      	movs	r2, #16
 8019a20:	4914      	ldr	r1, [pc, #80]	@ (8019a74 <GET_PORT2+0x68>)
 8019a22:	4815      	ldr	r0, [pc, #84]	@ (8019a78 <GET_PORT2+0x6c>)
 8019a24:	f7fc fe04 	bl	8016630 <FLASH_Read_Buff>
 8019a28:	4603      	mov	r3, r0
 8019a2a:	2b00      	cmp	r3, #0
 8019a2c:	d119      	bne.n	8019a62 <GET_PORT2+0x56>
		Rconfig.IPPORT2 = (char*) malloc(strlen(RB) + 1);
 8019a2e:	4811      	ldr	r0, [pc, #68]	@ (8019a74 <GET_PORT2+0x68>)
 8019a30:	f7e6 fc38 	bl	80002a4 <strlen>
 8019a34:	4603      	mov	r3, r0
 8019a36:	3301      	adds	r3, #1
 8019a38:	4618      	mov	r0, r3
 8019a3a:	f003 f989 	bl	801cd50 <malloc>
 8019a3e:	4603      	mov	r3, r0
 8019a40:	461a      	mov	r2, r3
 8019a42:	4b0e      	ldr	r3, [pc, #56]	@ (8019a7c <GET_PORT2+0x70>)
 8019a44:	621a      	str	r2, [r3, #32]
		strcpy(Rconfig.IPPORT2, RB);
 8019a46:	4b0d      	ldr	r3, [pc, #52]	@ (8019a7c <GET_PORT2+0x70>)
 8019a48:	6a1b      	ldr	r3, [r3, #32]
 8019a4a:	490a      	ldr	r1, [pc, #40]	@ (8019a74 <GET_PORT2+0x68>)
 8019a4c:	4618      	mov	r0, r3
 8019a4e:	f005 fb4c 	bl	801f0ea <strcpy>
		printc(MinDelay, "PORT2: %d\n", Rconfig.IPPORT2);
 8019a52:	4b0a      	ldr	r3, [pc, #40]	@ (8019a7c <GET_PORT2+0x70>)
 8019a54:	6a1b      	ldr	r3, [r3, #32]
 8019a56:	461a      	mov	r2, r3
 8019a58:	4909      	ldr	r1, [pc, #36]	@ (8019a80 <GET_PORT2+0x74>)
 8019a5a:	200a      	movs	r0, #10
 8019a5c:	f7e7 ffdc 	bl	8001a18 <printc>
 8019a60:	e003      	b.n	8019a6a <GET_PORT2+0x5e>
	} else {
		printc(MinDelay, "Failed to read PORT2 from flash!\n");
 8019a62:	4908      	ldr	r1, [pc, #32]	@ (8019a84 <GET_PORT2+0x78>)
 8019a64:	200a      	movs	r0, #10
 8019a66:	f7e7 ffd7 	bl	8001a18 <printc>
	}
}
 8019a6a:	bf00      	nop
 8019a6c:	4618      	mov	r0, r3
 8019a6e:	3708      	adds	r7, #8
 8019a70:	46bd      	mov	sp, r7
 8019a72:	bd80      	pop	{r7, pc}
 8019a74:	20014d30 	.word	0x20014d30
 8019a78:	0816a130 	.word	0x0816a130
 8019a7c:	20014ca0 	.word	0x20014ca0
 8019a80:	080233fc 	.word	0x080233fc
 8019a84:	08023408 	.word	0x08023408

08019a88 <GET_SKEY1>:

bool GET_SKEY1(char *opBuffer) {
 8019a88:	b580      	push	{r7, lr}
 8019a8a:	b082      	sub	sp, #8
 8019a8c:	af00      	add	r7, sp, #0
 8019a8e:	6078      	str	r0, [r7, #4]
	memset(RB, 0, sizeof(RB));
 8019a90:	2264      	movs	r2, #100	@ 0x64
 8019a92:	2100      	movs	r1, #0
 8019a94:	481b      	ldr	r0, [pc, #108]	@ (8019b04 <GET_SKEY1+0x7c>)
 8019a96:	f005 f9cb 	bl	801ee30 <memset>
	if (FLASH_Read_Buff(FOTA_Static_Key1, RB, 32) == HAL_OK) {
 8019a9a:	2220      	movs	r2, #32
 8019a9c:	4919      	ldr	r1, [pc, #100]	@ (8019b04 <GET_SKEY1+0x7c>)
 8019a9e:	481a      	ldr	r0, [pc, #104]	@ (8019b08 <GET_SKEY1+0x80>)
 8019aa0:	f7fc fdc6 	bl	8016630 <FLASH_Read_Buff>
 8019aa4:	4603      	mov	r3, r0
 8019aa6:	2b00      	cmp	r3, #0
 8019aa8:	d122      	bne.n	8019af0 <GET_SKEY1+0x68>
		Rconfig.SKEY1 = (char*) malloc(strlen(RB) + 1); // Allocate memory for string
 8019aaa:	4816      	ldr	r0, [pc, #88]	@ (8019b04 <GET_SKEY1+0x7c>)
 8019aac:	f7e6 fbfa 	bl	80002a4 <strlen>
 8019ab0:	4603      	mov	r3, r0
 8019ab2:	3301      	adds	r3, #1
 8019ab4:	4618      	mov	r0, r3
 8019ab6:	f003 f94b 	bl	801cd50 <malloc>
 8019aba:	4603      	mov	r3, r0
 8019abc:	461a      	mov	r2, r3
 8019abe:	4b13      	ldr	r3, [pc, #76]	@ (8019b0c <GET_SKEY1+0x84>)
 8019ac0:	625a      	str	r2, [r3, #36]	@ 0x24
		if (Rconfig.SKEY1 != NULL) {
 8019ac2:	4b12      	ldr	r3, [pc, #72]	@ (8019b0c <GET_SKEY1+0x84>)
 8019ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019ac6:	2b00      	cmp	r3, #0
 8019ac8:	d00d      	beq.n	8019ae6 <GET_SKEY1+0x5e>
			strcpy(Rconfig.SKEY1, RB);
 8019aca:	4b10      	ldr	r3, [pc, #64]	@ (8019b0c <GET_SKEY1+0x84>)
 8019acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019ace:	490d      	ldr	r1, [pc, #52]	@ (8019b04 <GET_SKEY1+0x7c>)
 8019ad0:	4618      	mov	r0, r3
 8019ad2:	f005 fb0a 	bl	801f0ea <strcpy>
			printc(MinDelay, "SKEY1: %s\n", Rconfig.SKEY1);
 8019ad6:	4b0d      	ldr	r3, [pc, #52]	@ (8019b0c <GET_SKEY1+0x84>)
 8019ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019ada:	461a      	mov	r2, r3
 8019adc:	490c      	ldr	r1, [pc, #48]	@ (8019b10 <GET_SKEY1+0x88>)
 8019ade:	200a      	movs	r0, #10
 8019ae0:	f7e7 ff9a 	bl	8001a18 <printc>
 8019ae4:	e008      	b.n	8019af8 <GET_SKEY1+0x70>
		} else {
			printc(MinDelay, "Memory allocation failed for SKEY1!\n");
 8019ae6:	490b      	ldr	r1, [pc, #44]	@ (8019b14 <GET_SKEY1+0x8c>)
 8019ae8:	200a      	movs	r0, #10
 8019aea:	f7e7 ff95 	bl	8001a18 <printc>
 8019aee:	e003      	b.n	8019af8 <GET_SKEY1+0x70>
		}
	} else {
		printc(MinDelay, "Failed to read SKEY1 from flash!\n");
 8019af0:	4909      	ldr	r1, [pc, #36]	@ (8019b18 <GET_SKEY1+0x90>)
 8019af2:	200a      	movs	r0, #10
 8019af4:	f7e7 ff90 	bl	8001a18 <printc>
	}
}
 8019af8:	bf00      	nop
 8019afa:	4618      	mov	r0, r3
 8019afc:	3708      	adds	r7, #8
 8019afe:	46bd      	mov	sp, r7
 8019b00:	bd80      	pop	{r7, pc}
 8019b02:	bf00      	nop
 8019b04:	20014d30 	.word	0x20014d30
 8019b08:	0816a150 	.word	0x0816a150
 8019b0c:	20014ca0 	.word	0x20014ca0
 8019b10:	0802342c 	.word	0x0802342c
 8019b14:	08023438 	.word	0x08023438
 8019b18:	08023460 	.word	0x08023460

08019b1c <GET_SKEY2>:

bool GET_SKEY2(char *opBuffer) {
 8019b1c:	b580      	push	{r7, lr}
 8019b1e:	b082      	sub	sp, #8
 8019b20:	af00      	add	r7, sp, #0
 8019b22:	6078      	str	r0, [r7, #4]
	memset(RB, 0, sizeof(RB));
 8019b24:	2264      	movs	r2, #100	@ 0x64
 8019b26:	2100      	movs	r1, #0
 8019b28:	481b      	ldr	r0, [pc, #108]	@ (8019b98 <GET_SKEY2+0x7c>)
 8019b2a:	f005 f981 	bl	801ee30 <memset>
	if (FLASH_Read_Buff(FOTA_Static_Key2, RB, 32) == HAL_OK) {
 8019b2e:	2220      	movs	r2, #32
 8019b30:	4919      	ldr	r1, [pc, #100]	@ (8019b98 <GET_SKEY2+0x7c>)
 8019b32:	481a      	ldr	r0, [pc, #104]	@ (8019b9c <GET_SKEY2+0x80>)
 8019b34:	f7fc fd7c 	bl	8016630 <FLASH_Read_Buff>
 8019b38:	4603      	mov	r3, r0
 8019b3a:	2b00      	cmp	r3, #0
 8019b3c:	d122      	bne.n	8019b84 <GET_SKEY2+0x68>
		Rconfig.SKEY2 = (char*) malloc(strlen(RB) + 1); // Allocate memory for string
 8019b3e:	4816      	ldr	r0, [pc, #88]	@ (8019b98 <GET_SKEY2+0x7c>)
 8019b40:	f7e6 fbb0 	bl	80002a4 <strlen>
 8019b44:	4603      	mov	r3, r0
 8019b46:	3301      	adds	r3, #1
 8019b48:	4618      	mov	r0, r3
 8019b4a:	f003 f901 	bl	801cd50 <malloc>
 8019b4e:	4603      	mov	r3, r0
 8019b50:	461a      	mov	r2, r3
 8019b52:	4b13      	ldr	r3, [pc, #76]	@ (8019ba0 <GET_SKEY2+0x84>)
 8019b54:	629a      	str	r2, [r3, #40]	@ 0x28
		if (Rconfig.SKEY2 != NULL) {
 8019b56:	4b12      	ldr	r3, [pc, #72]	@ (8019ba0 <GET_SKEY2+0x84>)
 8019b58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019b5a:	2b00      	cmp	r3, #0
 8019b5c:	d00d      	beq.n	8019b7a <GET_SKEY2+0x5e>
			strcpy(Rconfig.SKEY2, RB);
 8019b5e:	4b10      	ldr	r3, [pc, #64]	@ (8019ba0 <GET_SKEY2+0x84>)
 8019b60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019b62:	490d      	ldr	r1, [pc, #52]	@ (8019b98 <GET_SKEY2+0x7c>)
 8019b64:	4618      	mov	r0, r3
 8019b66:	f005 fac0 	bl	801f0ea <strcpy>
			printc(MinDelay, "SKEY2: %s\n", Rconfig.SKEY2);
 8019b6a:	4b0d      	ldr	r3, [pc, #52]	@ (8019ba0 <GET_SKEY2+0x84>)
 8019b6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019b6e:	461a      	mov	r2, r3
 8019b70:	490c      	ldr	r1, [pc, #48]	@ (8019ba4 <GET_SKEY2+0x88>)
 8019b72:	200a      	movs	r0, #10
 8019b74:	f7e7 ff50 	bl	8001a18 <printc>
 8019b78:	e008      	b.n	8019b8c <GET_SKEY2+0x70>
		} else {
			printc(MinDelay, "Memory allocation failed for SKEY2!\n");
 8019b7a:	490b      	ldr	r1, [pc, #44]	@ (8019ba8 <GET_SKEY2+0x8c>)
 8019b7c:	200a      	movs	r0, #10
 8019b7e:	f7e7 ff4b 	bl	8001a18 <printc>
 8019b82:	e003      	b.n	8019b8c <GET_SKEY2+0x70>
		}
	} else {
		printc(MinDelay, "Failed to read SKEY2 from flash!\n");
 8019b84:	4909      	ldr	r1, [pc, #36]	@ (8019bac <GET_SKEY2+0x90>)
 8019b86:	200a      	movs	r0, #10
 8019b88:	f7e7 ff46 	bl	8001a18 <printc>
	}
}
 8019b8c:	bf00      	nop
 8019b8e:	4618      	mov	r0, r3
 8019b90:	3708      	adds	r7, #8
 8019b92:	46bd      	mov	sp, r7
 8019b94:	bd80      	pop	{r7, pc}
 8019b96:	bf00      	nop
 8019b98:	20014d30 	.word	0x20014d30
 8019b9c:	0816a1a0 	.word	0x0816a1a0
 8019ba0:	20014ca0 	.word	0x20014ca0
 8019ba4:	08023484 	.word	0x08023484
 8019ba8:	08023490 	.word	0x08023490
 8019bac:	080234b8 	.word	0x080234b8

08019bb0 <GET_SKEY3>:

bool GET_SKEY3(char *opBuffer) {
 8019bb0:	b580      	push	{r7, lr}
 8019bb2:	b082      	sub	sp, #8
 8019bb4:	af00      	add	r7, sp, #0
 8019bb6:	6078      	str	r0, [r7, #4]
	memset(RB, 0, sizeof(RB));
 8019bb8:	2264      	movs	r2, #100	@ 0x64
 8019bba:	2100      	movs	r1, #0
 8019bbc:	481b      	ldr	r0, [pc, #108]	@ (8019c2c <GET_SKEY3+0x7c>)
 8019bbe:	f005 f937 	bl	801ee30 <memset>
	if (FLASH_Read_Buff(FOTA_Static_Key3, RB, 32) == HAL_OK) {
 8019bc2:	2220      	movs	r2, #32
 8019bc4:	4919      	ldr	r1, [pc, #100]	@ (8019c2c <GET_SKEY3+0x7c>)
 8019bc6:	481a      	ldr	r0, [pc, #104]	@ (8019c30 <GET_SKEY3+0x80>)
 8019bc8:	f7fc fd32 	bl	8016630 <FLASH_Read_Buff>
 8019bcc:	4603      	mov	r3, r0
 8019bce:	2b00      	cmp	r3, #0
 8019bd0:	d122      	bne.n	8019c18 <GET_SKEY3+0x68>
		Rconfig.SKEY3 = (char*) malloc(strlen(RB) + 1); // Allocate memory for string
 8019bd2:	4816      	ldr	r0, [pc, #88]	@ (8019c2c <GET_SKEY3+0x7c>)
 8019bd4:	f7e6 fb66 	bl	80002a4 <strlen>
 8019bd8:	4603      	mov	r3, r0
 8019bda:	3301      	adds	r3, #1
 8019bdc:	4618      	mov	r0, r3
 8019bde:	f003 f8b7 	bl	801cd50 <malloc>
 8019be2:	4603      	mov	r3, r0
 8019be4:	461a      	mov	r2, r3
 8019be6:	4b13      	ldr	r3, [pc, #76]	@ (8019c34 <GET_SKEY3+0x84>)
 8019be8:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (Rconfig.SKEY3 != NULL) {
 8019bea:	4b12      	ldr	r3, [pc, #72]	@ (8019c34 <GET_SKEY3+0x84>)
 8019bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019bee:	2b00      	cmp	r3, #0
 8019bf0:	d00d      	beq.n	8019c0e <GET_SKEY3+0x5e>
			strcpy(Rconfig.SKEY3, RB);
 8019bf2:	4b10      	ldr	r3, [pc, #64]	@ (8019c34 <GET_SKEY3+0x84>)
 8019bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019bf6:	490d      	ldr	r1, [pc, #52]	@ (8019c2c <GET_SKEY3+0x7c>)
 8019bf8:	4618      	mov	r0, r3
 8019bfa:	f005 fa76 	bl	801f0ea <strcpy>
			printc(MinDelay, "SKEY3: %s\n", Rconfig.SKEY3);
 8019bfe:	4b0d      	ldr	r3, [pc, #52]	@ (8019c34 <GET_SKEY3+0x84>)
 8019c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019c02:	461a      	mov	r2, r3
 8019c04:	490c      	ldr	r1, [pc, #48]	@ (8019c38 <GET_SKEY3+0x88>)
 8019c06:	200a      	movs	r0, #10
 8019c08:	f7e7 ff06 	bl	8001a18 <printc>
 8019c0c:	e008      	b.n	8019c20 <GET_SKEY3+0x70>
		} else {
			printc(MinDelay, "Memory allocation failed for SKEY3!\n");
 8019c0e:	490b      	ldr	r1, [pc, #44]	@ (8019c3c <GET_SKEY3+0x8c>)
 8019c10:	200a      	movs	r0, #10
 8019c12:	f7e7 ff01 	bl	8001a18 <printc>
 8019c16:	e003      	b.n	8019c20 <GET_SKEY3+0x70>
		}
	} else {
		printc(MinDelay, "Failed to read SKEY3 from flash!\n");
 8019c18:	4909      	ldr	r1, [pc, #36]	@ (8019c40 <GET_SKEY3+0x90>)
 8019c1a:	200a      	movs	r0, #10
 8019c1c:	f7e7 fefc 	bl	8001a18 <printc>
	}
}
 8019c20:	bf00      	nop
 8019c22:	4618      	mov	r0, r3
 8019c24:	3708      	adds	r7, #8
 8019c26:	46bd      	mov	sp, r7
 8019c28:	bd80      	pop	{r7, pc}
 8019c2a:	bf00      	nop
 8019c2c:	20014d30 	.word	0x20014d30
 8019c30:	0816a1e0 	.word	0x0816a1e0
 8019c34:	20014ca0 	.word	0x20014ca0
 8019c38:	080234dc 	.word	0x080234dc
 8019c3c:	080234e8 	.word	0x080234e8
 8019c40:	08023510 	.word	0x08023510

08019c44 <GET_APN>:

bool GET_APN(char *opBuffer) {
 8019c44:	b580      	push	{r7, lr}
 8019c46:	b082      	sub	sp, #8
 8019c48:	af00      	add	r7, sp, #0
 8019c4a:	6078      	str	r0, [r7, #4]
	memset(RB, 0, sizeof(RB));
 8019c4c:	2264      	movs	r2, #100	@ 0x64
 8019c4e:	2100      	movs	r1, #0
 8019c50:	481b      	ldr	r0, [pc, #108]	@ (8019cc0 <GET_APN+0x7c>)
 8019c52:	f005 f8ed 	bl	801ee30 <memset>
	if (FLASH_Read_Buff(APN, RB, 16) == HAL_OK) {
 8019c56:	2210      	movs	r2, #16
 8019c58:	4919      	ldr	r1, [pc, #100]	@ (8019cc0 <GET_APN+0x7c>)
 8019c5a:	481a      	ldr	r0, [pc, #104]	@ (8019cc4 <GET_APN+0x80>)
 8019c5c:	f7fc fce8 	bl	8016630 <FLASH_Read_Buff>
 8019c60:	4603      	mov	r3, r0
 8019c62:	2b00      	cmp	r3, #0
 8019c64:	d122      	bne.n	8019cac <GET_APN+0x68>
		Rconfig.DAPN = (char*) malloc(strlen(RB) + 1); // Allocate memory for string
 8019c66:	4816      	ldr	r0, [pc, #88]	@ (8019cc0 <GET_APN+0x7c>)
 8019c68:	f7e6 fb1c 	bl	80002a4 <strlen>
 8019c6c:	4603      	mov	r3, r0
 8019c6e:	3301      	adds	r3, #1
 8019c70:	4618      	mov	r0, r3
 8019c72:	f003 f86d 	bl	801cd50 <malloc>
 8019c76:	4603      	mov	r3, r0
 8019c78:	461a      	mov	r2, r3
 8019c7a:	4b13      	ldr	r3, [pc, #76]	@ (8019cc8 <GET_APN+0x84>)
 8019c7c:	631a      	str	r2, [r3, #48]	@ 0x30
		if (Rconfig.DAPN != NULL) {
 8019c7e:	4b12      	ldr	r3, [pc, #72]	@ (8019cc8 <GET_APN+0x84>)
 8019c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019c82:	2b00      	cmp	r3, #0
 8019c84:	d00d      	beq.n	8019ca2 <GET_APN+0x5e>
			strcpy(Rconfig.DAPN, RB);
 8019c86:	4b10      	ldr	r3, [pc, #64]	@ (8019cc8 <GET_APN+0x84>)
 8019c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019c8a:	490d      	ldr	r1, [pc, #52]	@ (8019cc0 <GET_APN+0x7c>)
 8019c8c:	4618      	mov	r0, r3
 8019c8e:	f005 fa2c 	bl	801f0ea <strcpy>
			printc(MinDelay, "APN: %s\n", Rconfig.DAPN);
 8019c92:	4b0d      	ldr	r3, [pc, #52]	@ (8019cc8 <GET_APN+0x84>)
 8019c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019c96:	461a      	mov	r2, r3
 8019c98:	490c      	ldr	r1, [pc, #48]	@ (8019ccc <GET_APN+0x88>)
 8019c9a:	200a      	movs	r0, #10
 8019c9c:	f7e7 febc 	bl	8001a18 <printc>
 8019ca0:	e008      	b.n	8019cb4 <GET_APN+0x70>
		} else {
			printc(MinDelay, "Memory allocation failed for APN!\n");
 8019ca2:	490b      	ldr	r1, [pc, #44]	@ (8019cd0 <GET_APN+0x8c>)
 8019ca4:	200a      	movs	r0, #10
 8019ca6:	f7e7 feb7 	bl	8001a18 <printc>
 8019caa:	e003      	b.n	8019cb4 <GET_APN+0x70>
		}
	} else {
		printc(MinDelay, "Failed to read APN from flash!\n");
 8019cac:	4909      	ldr	r1, [pc, #36]	@ (8019cd4 <GET_APN+0x90>)
 8019cae:	200a      	movs	r0, #10
 8019cb0:	f7e7 feb2 	bl	8001a18 <printc>
	}
}
 8019cb4:	bf00      	nop
 8019cb6:	4618      	mov	r0, r3
 8019cb8:	3708      	adds	r7, #8
 8019cba:	46bd      	mov	sp, r7
 8019cbc:	bd80      	pop	{r7, pc}
 8019cbe:	bf00      	nop
 8019cc0:	20014d30 	.word	0x20014d30
 8019cc4:	0816a220 	.word	0x0816a220
 8019cc8:	20014ca0 	.word	0x20014ca0
 8019ccc:	08023534 	.word	0x08023534
 8019cd0:	08023540 	.word	0x08023540
 8019cd4:	08023564 	.word	0x08023564

08019cd8 <GET_ION>:

// Implement the remaining GET functions in a similar manner

bool GET_ION(char *opBuffer) {
 8019cd8:	b580      	push	{r7, lr}
 8019cda:	b082      	sub	sp, #8
 8019cdc:	af00      	add	r7, sp, #0
 8019cde:	6078      	str	r0, [r7, #4]
	memset(RB, 0, sizeof(RB));
 8019ce0:	2264      	movs	r2, #100	@ 0x64
 8019ce2:	2100      	movs	r1, #0
 8019ce4:	4825      	ldr	r0, [pc, #148]	@ (8019d7c <GET_ION+0xa4>)
 8019ce6:	f005 f8a3 	bl	801ee30 <memset>
	if (FLASH_Read_Buff(ION_Sampling, RB, 16) == HAL_OK) {
 8019cea:	2210      	movs	r2, #16
 8019cec:	4923      	ldr	r1, [pc, #140]	@ (8019d7c <GET_ION+0xa4>)
 8019cee:	4824      	ldr	r0, [pc, #144]	@ (8019d80 <GET_ION+0xa8>)
 8019cf0:	f7fc fc9e 	bl	8016630 <FLASH_Read_Buff>
 8019cf4:	4603      	mov	r3, r0
 8019cf6:	2b00      	cmp	r3, #0
 8019cf8:	d136      	bne.n	8019d68 <GET_ION+0x90>
		Rconfig.ION = (char*) malloc(strlen(RB) + 1); // Allocate memory for string
 8019cfa:	4820      	ldr	r0, [pc, #128]	@ (8019d7c <GET_ION+0xa4>)
 8019cfc:	f7e6 fad2 	bl	80002a4 <strlen>
 8019d00:	4603      	mov	r3, r0
 8019d02:	3301      	adds	r3, #1
 8019d04:	4618      	mov	r0, r3
 8019d06:	f003 f823 	bl	801cd50 <malloc>
 8019d0a:	4603      	mov	r3, r0
 8019d0c:	461a      	mov	r2, r3
 8019d0e:	4b1d      	ldr	r3, [pc, #116]	@ (8019d84 <GET_ION+0xac>)
 8019d10:	635a      	str	r2, [r3, #52]	@ 0x34
		if (Rconfig.ION != NULL) {
 8019d12:	4b1c      	ldr	r3, [pc, #112]	@ (8019d84 <GET_ION+0xac>)
 8019d14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019d16:	2b00      	cmp	r3, #0
 8019d18:	d021      	beq.n	8019d5e <GET_ION+0x86>
			strcpy(Rconfig.ION, RB);
 8019d1a:	4b1a      	ldr	r3, [pc, #104]	@ (8019d84 <GET_ION+0xac>)
 8019d1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019d1e:	4917      	ldr	r1, [pc, #92]	@ (8019d7c <GET_ION+0xa4>)
 8019d20:	4618      	mov	r0, r3
 8019d22:	f005 f9e2 	bl	801f0ea <strcpy>
			if (RB[0] == 255) {
 8019d26:	4b15      	ldr	r3, [pc, #84]	@ (8019d7c <GET_ION+0xa4>)
 8019d28:	781b      	ldrb	r3, [r3, #0]
 8019d2a:	2bff      	cmp	r3, #255	@ 0xff
 8019d2c:	d106      	bne.n	8019d3c <GET_ION+0x64>
				strcpy(Rconfig.ION, "08");
 8019d2e:	4b15      	ldr	r3, [pc, #84]	@ (8019d84 <GET_ION+0xac>)
 8019d30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019d32:	4a15      	ldr	r2, [pc, #84]	@ (8019d88 <GET_ION+0xb0>)
 8019d34:	8811      	ldrh	r1, [r2, #0]
 8019d36:	7892      	ldrb	r2, [r2, #2]
 8019d38:	8019      	strh	r1, [r3, #0]
 8019d3a:	709a      	strb	r2, [r3, #2]
			}
			setSampling(atoi(Rconfig.ION));
 8019d3c:	4b11      	ldr	r3, [pc, #68]	@ (8019d84 <GET_ION+0xac>)
 8019d3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019d40:	4618      	mov	r0, r3
 8019d42:	f003 f800 	bl	801cd46 <atoi>
 8019d46:	4603      	mov	r3, r0
 8019d48:	4618      	mov	r0, r3
 8019d4a:	f7e9 fbdb 	bl	8003504 <setSampling>
			printc(MinDelay, "ION: %s\n", Rconfig.ION);
 8019d4e:	4b0d      	ldr	r3, [pc, #52]	@ (8019d84 <GET_ION+0xac>)
 8019d50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019d52:	461a      	mov	r2, r3
 8019d54:	490d      	ldr	r1, [pc, #52]	@ (8019d8c <GET_ION+0xb4>)
 8019d56:	200a      	movs	r0, #10
 8019d58:	f7e7 fe5e 	bl	8001a18 <printc>
 8019d5c:	e008      	b.n	8019d70 <GET_ION+0x98>
		} else {
			printc(MinDelay, "Memory allocation failed for ION!\n");
 8019d5e:	490c      	ldr	r1, [pc, #48]	@ (8019d90 <GET_ION+0xb8>)
 8019d60:	200a      	movs	r0, #10
 8019d62:	f7e7 fe59 	bl	8001a18 <printc>
 8019d66:	e003      	b.n	8019d70 <GET_ION+0x98>
		}
	} else {
		printc(MinDelay, "Failed to read ION from flash!\n");
 8019d68:	490a      	ldr	r1, [pc, #40]	@ (8019d94 <GET_ION+0xbc>)
 8019d6a:	200a      	movs	r0, #10
 8019d6c:	f7e7 fe54 	bl	8001a18 <printc>
	}
}
 8019d70:	bf00      	nop
 8019d72:	4618      	mov	r0, r3
 8019d74:	3708      	adds	r7, #8
 8019d76:	46bd      	mov	sp, r7
 8019d78:	bd80      	pop	{r7, pc}
 8019d7a:	bf00      	nop
 8019d7c:	20014d30 	.word	0x20014d30
 8019d80:	0816a250 	.word	0x0816a250
 8019d84:	20014ca0 	.word	0x20014ca0
 8019d88:	08023584 	.word	0x08023584
 8019d8c:	08023588 	.word	0x08023588
 8019d90:	08023594 	.word	0x08023594
 8019d94:	080235b8 	.word	0x080235b8

08019d98 <GET_NSAM>:

bool GET_NSAM(char *opBuffer) {
 8019d98:	b580      	push	{r7, lr}
 8019d9a:	b082      	sub	sp, #8
 8019d9c:	af00      	add	r7, sp, #0
 8019d9e:	6078      	str	r0, [r7, #4]
	memset(RB, 0, sizeof(RB));
 8019da0:	2264      	movs	r2, #100	@ 0x64
 8019da2:	2100      	movs	r1, #0
 8019da4:	481b      	ldr	r0, [pc, #108]	@ (8019e14 <GET_NSAM+0x7c>)
 8019da6:	f005 f843 	bl	801ee30 <memset>
	if (FLASH_Read_Buff(NO_OF_Sampling, RB, 16) == HAL_OK) {
 8019daa:	2210      	movs	r2, #16
 8019dac:	4919      	ldr	r1, [pc, #100]	@ (8019e14 <GET_NSAM+0x7c>)
 8019dae:	481a      	ldr	r0, [pc, #104]	@ (8019e18 <GET_NSAM+0x80>)
 8019db0:	f7fc fc3e 	bl	8016630 <FLASH_Read_Buff>
 8019db4:	4603      	mov	r3, r0
 8019db6:	2b00      	cmp	r3, #0
 8019db8:	d122      	bne.n	8019e00 <GET_NSAM+0x68>
		Rconfig.NSAM = (char*) malloc(strlen(RB) + 1); // Allocate memory for string
 8019dba:	4816      	ldr	r0, [pc, #88]	@ (8019e14 <GET_NSAM+0x7c>)
 8019dbc:	f7e6 fa72 	bl	80002a4 <strlen>
 8019dc0:	4603      	mov	r3, r0
 8019dc2:	3301      	adds	r3, #1
 8019dc4:	4618      	mov	r0, r3
 8019dc6:	f002 ffc3 	bl	801cd50 <malloc>
 8019dca:	4603      	mov	r3, r0
 8019dcc:	461a      	mov	r2, r3
 8019dce:	4b13      	ldr	r3, [pc, #76]	@ (8019e1c <GET_NSAM+0x84>)
 8019dd0:	639a      	str	r2, [r3, #56]	@ 0x38
		if (Rconfig.NSAM != NULL) {
 8019dd2:	4b12      	ldr	r3, [pc, #72]	@ (8019e1c <GET_NSAM+0x84>)
 8019dd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019dd6:	2b00      	cmp	r3, #0
 8019dd8:	d00d      	beq.n	8019df6 <GET_NSAM+0x5e>
			strcpy(Rconfig.NSAM, RB);
 8019dda:	4b10      	ldr	r3, [pc, #64]	@ (8019e1c <GET_NSAM+0x84>)
 8019ddc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019dde:	490d      	ldr	r1, [pc, #52]	@ (8019e14 <GET_NSAM+0x7c>)
 8019de0:	4618      	mov	r0, r3
 8019de2:	f005 f982 	bl	801f0ea <strcpy>
			printc(MinDelay, "NSAM: %s\n", Rconfig.NSAM);
 8019de6:	4b0d      	ldr	r3, [pc, #52]	@ (8019e1c <GET_NSAM+0x84>)
 8019de8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019dea:	461a      	mov	r2, r3
 8019dec:	490c      	ldr	r1, [pc, #48]	@ (8019e20 <GET_NSAM+0x88>)
 8019dee:	200a      	movs	r0, #10
 8019df0:	f7e7 fe12 	bl	8001a18 <printc>
 8019df4:	e008      	b.n	8019e08 <GET_NSAM+0x70>
		} else {
			printc(MinDelay, "Memory allocation failed for NSAM!\n");
 8019df6:	490b      	ldr	r1, [pc, #44]	@ (8019e24 <GET_NSAM+0x8c>)
 8019df8:	200a      	movs	r0, #10
 8019dfa:	f7e7 fe0d 	bl	8001a18 <printc>
 8019dfe:	e003      	b.n	8019e08 <GET_NSAM+0x70>
		}
	} else {
		printc(MinDelay, "Failed to read NSAM from flash!\n");
 8019e00:	4909      	ldr	r1, [pc, #36]	@ (8019e28 <GET_NSAM+0x90>)
 8019e02:	200a      	movs	r0, #10
 8019e04:	f7e7 fe08 	bl	8001a18 <printc>
	}
}
 8019e08:	bf00      	nop
 8019e0a:	4618      	mov	r0, r3
 8019e0c:	3708      	adds	r7, #8
 8019e0e:	46bd      	mov	sp, r7
 8019e10:	bd80      	pop	{r7, pc}
 8019e12:	bf00      	nop
 8019e14:	20014d30 	.word	0x20014d30
 8019e18:	0816a270 	.word	0x0816a270
 8019e1c:	20014ca0 	.word	0x20014ca0
 8019e20:	080235d8 	.word	0x080235d8
 8019e24:	080235e4 	.word	0x080235e4
 8019e28:	08023608 	.word	0x08023608

08019e2c <GET_HA>:

bool GET_HA(char *opBuffer) {
 8019e2c:	b580      	push	{r7, lr}
 8019e2e:	b082      	sub	sp, #8
 8019e30:	af00      	add	r7, sp, #0
 8019e32:	6078      	str	r0, [r7, #4]
	memset(RB, 0, sizeof(RB));
 8019e34:	2264      	movs	r2, #100	@ 0x64
 8019e36:	2100      	movs	r1, #0
 8019e38:	481b      	ldr	r0, [pc, #108]	@ (8019ea8 <GET_HA+0x7c>)
 8019e3a:	f004 fff9 	bl	801ee30 <memset>
	if (FLASH_Read_Buff(HARSH_ACC_TH, RB, 16) == HAL_OK) {
 8019e3e:	2210      	movs	r2, #16
 8019e40:	4919      	ldr	r1, [pc, #100]	@ (8019ea8 <GET_HA+0x7c>)
 8019e42:	481a      	ldr	r0, [pc, #104]	@ (8019eac <GET_HA+0x80>)
 8019e44:	f7fc fbf4 	bl	8016630 <FLASH_Read_Buff>
 8019e48:	4603      	mov	r3, r0
 8019e4a:	2b00      	cmp	r3, #0
 8019e4c:	d122      	bne.n	8019e94 <GET_HA+0x68>
		Rconfig.HA = (char*) malloc(strlen(RB) + 1); // Allocate memory for string
 8019e4e:	4816      	ldr	r0, [pc, #88]	@ (8019ea8 <GET_HA+0x7c>)
 8019e50:	f7e6 fa28 	bl	80002a4 <strlen>
 8019e54:	4603      	mov	r3, r0
 8019e56:	3301      	adds	r3, #1
 8019e58:	4618      	mov	r0, r3
 8019e5a:	f002 ff79 	bl	801cd50 <malloc>
 8019e5e:	4603      	mov	r3, r0
 8019e60:	461a      	mov	r2, r3
 8019e62:	4b13      	ldr	r3, [pc, #76]	@ (8019eb0 <GET_HA+0x84>)
 8019e64:	63da      	str	r2, [r3, #60]	@ 0x3c
		if (Rconfig.HA != NULL) {
 8019e66:	4b12      	ldr	r3, [pc, #72]	@ (8019eb0 <GET_HA+0x84>)
 8019e68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019e6a:	2b00      	cmp	r3, #0
 8019e6c:	d00d      	beq.n	8019e8a <GET_HA+0x5e>
			strcpy(Rconfig.HA, RB);
 8019e6e:	4b10      	ldr	r3, [pc, #64]	@ (8019eb0 <GET_HA+0x84>)
 8019e70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019e72:	490d      	ldr	r1, [pc, #52]	@ (8019ea8 <GET_HA+0x7c>)
 8019e74:	4618      	mov	r0, r3
 8019e76:	f005 f938 	bl	801f0ea <strcpy>
			printc(MinDelay, "HA: %s\n", Rconfig.HA);
 8019e7a:	4b0d      	ldr	r3, [pc, #52]	@ (8019eb0 <GET_HA+0x84>)
 8019e7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019e7e:	461a      	mov	r2, r3
 8019e80:	490c      	ldr	r1, [pc, #48]	@ (8019eb4 <GET_HA+0x88>)
 8019e82:	200a      	movs	r0, #10
 8019e84:	f7e7 fdc8 	bl	8001a18 <printc>
 8019e88:	e008      	b.n	8019e9c <GET_HA+0x70>
		} else {
			printc(MinDelay, "Memory allocation failed for HA!\n");
 8019e8a:	490b      	ldr	r1, [pc, #44]	@ (8019eb8 <GET_HA+0x8c>)
 8019e8c:	200a      	movs	r0, #10
 8019e8e:	f7e7 fdc3 	bl	8001a18 <printc>
 8019e92:	e003      	b.n	8019e9c <GET_HA+0x70>
		}
	} else {
		printc(MinDelay, "Failed to read HA from flash!\n");
 8019e94:	4909      	ldr	r1, [pc, #36]	@ (8019ebc <GET_HA+0x90>)
 8019e96:	200a      	movs	r0, #10
 8019e98:	f7e7 fdbe 	bl	8001a18 <printc>
	}
}
 8019e9c:	bf00      	nop
 8019e9e:	4618      	mov	r0, r3
 8019ea0:	3708      	adds	r7, #8
 8019ea2:	46bd      	mov	sp, r7
 8019ea4:	bd80      	pop	{r7, pc}
 8019ea6:	bf00      	nop
 8019ea8:	20014d30 	.word	0x20014d30
 8019eac:	0816a290 	.word	0x0816a290
 8019eb0:	20014ca0 	.word	0x20014ca0
 8019eb4:	0802362c 	.word	0x0802362c
 8019eb8:	08023634 	.word	0x08023634
 8019ebc:	08023658 	.word	0x08023658

08019ec0 <GET_HB>:

bool GET_HB(char *opBuffer) {
 8019ec0:	b580      	push	{r7, lr}
 8019ec2:	b082      	sub	sp, #8
 8019ec4:	af00      	add	r7, sp, #0
 8019ec6:	6078      	str	r0, [r7, #4]
	memset(RB, 0, sizeof(RB));
 8019ec8:	2264      	movs	r2, #100	@ 0x64
 8019eca:	2100      	movs	r1, #0
 8019ecc:	481b      	ldr	r0, [pc, #108]	@ (8019f3c <GET_HB+0x7c>)
 8019ece:	f004 ffaf 	bl	801ee30 <memset>
	if (FLASH_Read_Buff(HARSH_DEACC_TH, RB, 16) == HAL_OK) {
 8019ed2:	2210      	movs	r2, #16
 8019ed4:	4919      	ldr	r1, [pc, #100]	@ (8019f3c <GET_HB+0x7c>)
 8019ed6:	481a      	ldr	r0, [pc, #104]	@ (8019f40 <GET_HB+0x80>)
 8019ed8:	f7fc fbaa 	bl	8016630 <FLASH_Read_Buff>
 8019edc:	4603      	mov	r3, r0
 8019ede:	2b00      	cmp	r3, #0
 8019ee0:	d122      	bne.n	8019f28 <GET_HB+0x68>
		Rconfig.HB = (char*) malloc(strlen(RB) + 1); // Allocate memory for string
 8019ee2:	4816      	ldr	r0, [pc, #88]	@ (8019f3c <GET_HB+0x7c>)
 8019ee4:	f7e6 f9de 	bl	80002a4 <strlen>
 8019ee8:	4603      	mov	r3, r0
 8019eea:	3301      	adds	r3, #1
 8019eec:	4618      	mov	r0, r3
 8019eee:	f002 ff2f 	bl	801cd50 <malloc>
 8019ef2:	4603      	mov	r3, r0
 8019ef4:	461a      	mov	r2, r3
 8019ef6:	4b13      	ldr	r3, [pc, #76]	@ (8019f44 <GET_HB+0x84>)
 8019ef8:	641a      	str	r2, [r3, #64]	@ 0x40
		if (Rconfig.HB != NULL) {
 8019efa:	4b12      	ldr	r3, [pc, #72]	@ (8019f44 <GET_HB+0x84>)
 8019efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019efe:	2b00      	cmp	r3, #0
 8019f00:	d00d      	beq.n	8019f1e <GET_HB+0x5e>
			strcpy(Rconfig.HB, RB);
 8019f02:	4b10      	ldr	r3, [pc, #64]	@ (8019f44 <GET_HB+0x84>)
 8019f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019f06:	490d      	ldr	r1, [pc, #52]	@ (8019f3c <GET_HB+0x7c>)
 8019f08:	4618      	mov	r0, r3
 8019f0a:	f005 f8ee 	bl	801f0ea <strcpy>
			printc(MinDelay, "HB: %s\n", Rconfig.HB);
 8019f0e:	4b0d      	ldr	r3, [pc, #52]	@ (8019f44 <GET_HB+0x84>)
 8019f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019f12:	461a      	mov	r2, r3
 8019f14:	490c      	ldr	r1, [pc, #48]	@ (8019f48 <GET_HB+0x88>)
 8019f16:	200a      	movs	r0, #10
 8019f18:	f7e7 fd7e 	bl	8001a18 <printc>
 8019f1c:	e008      	b.n	8019f30 <GET_HB+0x70>
		} else {
			printc(MinDelay, "Memory allocation failed for HB!\n");
 8019f1e:	490b      	ldr	r1, [pc, #44]	@ (8019f4c <GET_HB+0x8c>)
 8019f20:	200a      	movs	r0, #10
 8019f22:	f7e7 fd79 	bl	8001a18 <printc>
 8019f26:	e003      	b.n	8019f30 <GET_HB+0x70>
		}
	} else {
		printc(MinDelay, "Failed to read HB from flash!\n");
 8019f28:	4909      	ldr	r1, [pc, #36]	@ (8019f50 <GET_HB+0x90>)
 8019f2a:	200a      	movs	r0, #10
 8019f2c:	f7e7 fd74 	bl	8001a18 <printc>
	}
}
 8019f30:	bf00      	nop
 8019f32:	4618      	mov	r0, r3
 8019f34:	3708      	adds	r7, #8
 8019f36:	46bd      	mov	sp, r7
 8019f38:	bd80      	pop	{r7, pc}
 8019f3a:	bf00      	nop
 8019f3c:	20014d30 	.word	0x20014d30
 8019f40:	0816a2b0 	.word	0x0816a2b0
 8019f44:	20014ca0 	.word	0x20014ca0
 8019f48:	08023678 	.word	0x08023678
 8019f4c:	08023680 	.word	0x08023680
 8019f50:	080236a4 	.word	0x080236a4

08019f54 <GET_HC>:

bool GET_HC(char *opBuffer) {
 8019f54:	b580      	push	{r7, lr}
 8019f56:	b082      	sub	sp, #8
 8019f58:	af00      	add	r7, sp, #0
 8019f5a:	6078      	str	r0, [r7, #4]
	memset(RB, 0, sizeof(RB));
 8019f5c:	2264      	movs	r2, #100	@ 0x64
 8019f5e:	2100      	movs	r1, #0
 8019f60:	481b      	ldr	r0, [pc, #108]	@ (8019fd0 <GET_HC+0x7c>)
 8019f62:	f004 ff65 	bl	801ee30 <memset>
	if (FLASH_Read_Buff(HARSH_CORNERING_TH, RB, 16) == HAL_OK) {
 8019f66:	2210      	movs	r2, #16
 8019f68:	4919      	ldr	r1, [pc, #100]	@ (8019fd0 <GET_HC+0x7c>)
 8019f6a:	481a      	ldr	r0, [pc, #104]	@ (8019fd4 <GET_HC+0x80>)
 8019f6c:	f7fc fb60 	bl	8016630 <FLASH_Read_Buff>
 8019f70:	4603      	mov	r3, r0
 8019f72:	2b00      	cmp	r3, #0
 8019f74:	d122      	bne.n	8019fbc <GET_HC+0x68>
		Rconfig.HC = (char*) malloc(strlen(RB) + 1); // Allocate memory for string
 8019f76:	4816      	ldr	r0, [pc, #88]	@ (8019fd0 <GET_HC+0x7c>)
 8019f78:	f7e6 f994 	bl	80002a4 <strlen>
 8019f7c:	4603      	mov	r3, r0
 8019f7e:	3301      	adds	r3, #1
 8019f80:	4618      	mov	r0, r3
 8019f82:	f002 fee5 	bl	801cd50 <malloc>
 8019f86:	4603      	mov	r3, r0
 8019f88:	461a      	mov	r2, r3
 8019f8a:	4b13      	ldr	r3, [pc, #76]	@ (8019fd8 <GET_HC+0x84>)
 8019f8c:	645a      	str	r2, [r3, #68]	@ 0x44
		if (Rconfig.HC != NULL) {
 8019f8e:	4b12      	ldr	r3, [pc, #72]	@ (8019fd8 <GET_HC+0x84>)
 8019f90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019f92:	2b00      	cmp	r3, #0
 8019f94:	d00d      	beq.n	8019fb2 <GET_HC+0x5e>
			strcpy(Rconfig.HC, RB);
 8019f96:	4b10      	ldr	r3, [pc, #64]	@ (8019fd8 <GET_HC+0x84>)
 8019f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019f9a:	490d      	ldr	r1, [pc, #52]	@ (8019fd0 <GET_HC+0x7c>)
 8019f9c:	4618      	mov	r0, r3
 8019f9e:	f005 f8a4 	bl	801f0ea <strcpy>
			printc(MinDelay, "HC: %s\n", Rconfig.HC);
 8019fa2:	4b0d      	ldr	r3, [pc, #52]	@ (8019fd8 <GET_HC+0x84>)
 8019fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019fa6:	461a      	mov	r2, r3
 8019fa8:	490c      	ldr	r1, [pc, #48]	@ (8019fdc <GET_HC+0x88>)
 8019faa:	200a      	movs	r0, #10
 8019fac:	f7e7 fd34 	bl	8001a18 <printc>
 8019fb0:	e008      	b.n	8019fc4 <GET_HC+0x70>
		} else {
			printc(MinDelay, "Memory allocation failed for HC!\n");
 8019fb2:	490b      	ldr	r1, [pc, #44]	@ (8019fe0 <GET_HC+0x8c>)
 8019fb4:	200a      	movs	r0, #10
 8019fb6:	f7e7 fd2f 	bl	8001a18 <printc>
 8019fba:	e003      	b.n	8019fc4 <GET_HC+0x70>
		}
	} else {
		printc(MinDelay, "Failed to read HC from flash!\n");
 8019fbc:	4909      	ldr	r1, [pc, #36]	@ (8019fe4 <GET_HC+0x90>)
 8019fbe:	200a      	movs	r0, #10
 8019fc0:	f7e7 fd2a 	bl	8001a18 <printc>
	}
}
 8019fc4:	bf00      	nop
 8019fc6:	4618      	mov	r0, r3
 8019fc8:	3708      	adds	r7, #8
 8019fca:	46bd      	mov	sp, r7
 8019fcc:	bd80      	pop	{r7, pc}
 8019fce:	bf00      	nop
 8019fd0:	20014d30 	.word	0x20014d30
 8019fd4:	0816a2d0 	.word	0x0816a2d0
 8019fd8:	20014ca0 	.word	0x20014ca0
 8019fdc:	080236c4 	.word	0x080236c4
 8019fe0:	080236cc 	.word	0x080236cc
 8019fe4:	080236f0 	.word	0x080236f0

08019fe8 <GET_ACCOFFSET>:

bool GET_ACCOFFSET(char *opBuffer) {
 8019fe8:	b580      	push	{r7, lr}
 8019fea:	b082      	sub	sp, #8
 8019fec:	af00      	add	r7, sp, #0
 8019fee:	6078      	str	r0, [r7, #4]
	memset(RB, 0, sizeof(RB));
 8019ff0:	2264      	movs	r2, #100	@ 0x64
 8019ff2:	2100      	movs	r1, #0
 8019ff4:	481b      	ldr	r0, [pc, #108]	@ (801a064 <GET_ACCOFFSET+0x7c>)
 8019ff6:	f004 ff1b 	bl	801ee30 <memset>
	if (FLASH_Read_Buff(SENSOR_OFFSET_CAL, RB, 16) == HAL_OK) {
 8019ffa:	2210      	movs	r2, #16
 8019ffc:	4919      	ldr	r1, [pc, #100]	@ (801a064 <GET_ACCOFFSET+0x7c>)
 8019ffe:	481a      	ldr	r0, [pc, #104]	@ (801a068 <GET_ACCOFFSET+0x80>)
 801a000:	f7fc fb16 	bl	8016630 <FLASH_Read_Buff>
 801a004:	4603      	mov	r3, r0
 801a006:	2b00      	cmp	r3, #0
 801a008:	d122      	bne.n	801a050 <GET_ACCOFFSET+0x68>
		Rconfig.ACCOFFSET = (char*) malloc(strlen(RB) + 1); // Allocate memory for string
 801a00a:	4816      	ldr	r0, [pc, #88]	@ (801a064 <GET_ACCOFFSET+0x7c>)
 801a00c:	f7e6 f94a 	bl	80002a4 <strlen>
 801a010:	4603      	mov	r3, r0
 801a012:	3301      	adds	r3, #1
 801a014:	4618      	mov	r0, r3
 801a016:	f002 fe9b 	bl	801cd50 <malloc>
 801a01a:	4603      	mov	r3, r0
 801a01c:	461a      	mov	r2, r3
 801a01e:	4b13      	ldr	r3, [pc, #76]	@ (801a06c <GET_ACCOFFSET+0x84>)
 801a020:	649a      	str	r2, [r3, #72]	@ 0x48
		if (Rconfig.ACCOFFSET != NULL) {
 801a022:	4b12      	ldr	r3, [pc, #72]	@ (801a06c <GET_ACCOFFSET+0x84>)
 801a024:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a026:	2b00      	cmp	r3, #0
 801a028:	d00d      	beq.n	801a046 <GET_ACCOFFSET+0x5e>
			strcpy(Rconfig.ACCOFFSET, RB);
 801a02a:	4b10      	ldr	r3, [pc, #64]	@ (801a06c <GET_ACCOFFSET+0x84>)
 801a02c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a02e:	490d      	ldr	r1, [pc, #52]	@ (801a064 <GET_ACCOFFSET+0x7c>)
 801a030:	4618      	mov	r0, r3
 801a032:	f005 f85a 	bl	801f0ea <strcpy>
			printc(MinDelay, "ACCOFFSET: %s\n", Rconfig.ACCOFFSET);
 801a036:	4b0d      	ldr	r3, [pc, #52]	@ (801a06c <GET_ACCOFFSET+0x84>)
 801a038:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a03a:	461a      	mov	r2, r3
 801a03c:	490c      	ldr	r1, [pc, #48]	@ (801a070 <GET_ACCOFFSET+0x88>)
 801a03e:	200a      	movs	r0, #10
 801a040:	f7e7 fcea 	bl	8001a18 <printc>
 801a044:	e008      	b.n	801a058 <GET_ACCOFFSET+0x70>
		} else {
			printc(MinDelay, "Memory allocation failed for ACCOFFSET!\n");
 801a046:	490b      	ldr	r1, [pc, #44]	@ (801a074 <GET_ACCOFFSET+0x8c>)
 801a048:	200a      	movs	r0, #10
 801a04a:	f7e7 fce5 	bl	8001a18 <printc>
 801a04e:	e003      	b.n	801a058 <GET_ACCOFFSET+0x70>
		}
	} else {
		printc(MinDelay, "Failed to read ACCOFFSET from flash!\n");
 801a050:	4909      	ldr	r1, [pc, #36]	@ (801a078 <GET_ACCOFFSET+0x90>)
 801a052:	200a      	movs	r0, #10
 801a054:	f7e7 fce0 	bl	8001a18 <printc>
	}
}
 801a058:	bf00      	nop
 801a05a:	4618      	mov	r0, r3
 801a05c:	3708      	adds	r7, #8
 801a05e:	46bd      	mov	sp, r7
 801a060:	bd80      	pop	{r7, pc}
 801a062:	bf00      	nop
 801a064:	20014d30 	.word	0x20014d30
 801a068:	0816a2f0 	.word	0x0816a2f0
 801a06c:	20014ca0 	.word	0x20014ca0
 801a070:	08023710 	.word	0x08023710
 801a074:	08023720 	.word	0x08023720
 801a078:	0802374c 	.word	0x0802374c

0801a07c <GET_USER>:

bool GET_USER(char *opBuffer) {
 801a07c:	b580      	push	{r7, lr}
 801a07e:	b082      	sub	sp, #8
 801a080:	af00      	add	r7, sp, #0
 801a082:	6078      	str	r0, [r7, #4]
	memset(RB, 0, sizeof(RB));
 801a084:	2264      	movs	r2, #100	@ 0x64
 801a086:	2100      	movs	r1, #0
 801a088:	481b      	ldr	r0, [pc, #108]	@ (801a0f8 <GET_USER+0x7c>)
 801a08a:	f004 fed1 	bl	801ee30 <memset>
	if (FLASH_Read_Buff(USERNAME, RB, 16) == HAL_OK) {
 801a08e:	2210      	movs	r2, #16
 801a090:	4919      	ldr	r1, [pc, #100]	@ (801a0f8 <GET_USER+0x7c>)
 801a092:	481a      	ldr	r0, [pc, #104]	@ (801a0fc <GET_USER+0x80>)
 801a094:	f7fc facc 	bl	8016630 <FLASH_Read_Buff>
 801a098:	4603      	mov	r3, r0
 801a09a:	2b00      	cmp	r3, #0
 801a09c:	d122      	bne.n	801a0e4 <GET_USER+0x68>
		Rconfig.USER = (char*) malloc(strlen(RB) + 1); // Allocate memory for string
 801a09e:	4816      	ldr	r0, [pc, #88]	@ (801a0f8 <GET_USER+0x7c>)
 801a0a0:	f7e6 f900 	bl	80002a4 <strlen>
 801a0a4:	4603      	mov	r3, r0
 801a0a6:	3301      	adds	r3, #1
 801a0a8:	4618      	mov	r0, r3
 801a0aa:	f002 fe51 	bl	801cd50 <malloc>
 801a0ae:	4603      	mov	r3, r0
 801a0b0:	461a      	mov	r2, r3
 801a0b2:	4b13      	ldr	r3, [pc, #76]	@ (801a100 <GET_USER+0x84>)
 801a0b4:	64da      	str	r2, [r3, #76]	@ 0x4c
		if (Rconfig.USER != NULL) {
 801a0b6:	4b12      	ldr	r3, [pc, #72]	@ (801a100 <GET_USER+0x84>)
 801a0b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801a0ba:	2b00      	cmp	r3, #0
 801a0bc:	d00d      	beq.n	801a0da <GET_USER+0x5e>
			strcpy(Rconfig.USER, RB);
 801a0be:	4b10      	ldr	r3, [pc, #64]	@ (801a100 <GET_USER+0x84>)
 801a0c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801a0c2:	490d      	ldr	r1, [pc, #52]	@ (801a0f8 <GET_USER+0x7c>)
 801a0c4:	4618      	mov	r0, r3
 801a0c6:	f005 f810 	bl	801f0ea <strcpy>
			printc(MinDelay, "USER: %s\n", Rconfig.USER);
 801a0ca:	4b0d      	ldr	r3, [pc, #52]	@ (801a100 <GET_USER+0x84>)
 801a0cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801a0ce:	461a      	mov	r2, r3
 801a0d0:	490c      	ldr	r1, [pc, #48]	@ (801a104 <GET_USER+0x88>)
 801a0d2:	200a      	movs	r0, #10
 801a0d4:	f7e7 fca0 	bl	8001a18 <printc>
 801a0d8:	e008      	b.n	801a0ec <GET_USER+0x70>
		} else {
			printc(MinDelay, "Memory allocation failed for USER!\n");
 801a0da:	490b      	ldr	r1, [pc, #44]	@ (801a108 <GET_USER+0x8c>)
 801a0dc:	200a      	movs	r0, #10
 801a0de:	f7e7 fc9b 	bl	8001a18 <printc>
 801a0e2:	e003      	b.n	801a0ec <GET_USER+0x70>
		}
	} else {
		printc(MinDelay, "Failed to read USER from flash!\n");
 801a0e4:	4909      	ldr	r1, [pc, #36]	@ (801a10c <GET_USER+0x90>)
 801a0e6:	200a      	movs	r0, #10
 801a0e8:	f7e7 fc96 	bl	8001a18 <printc>
	}
}
 801a0ec:	bf00      	nop
 801a0ee:	4618      	mov	r0, r3
 801a0f0:	3708      	adds	r7, #8
 801a0f2:	46bd      	mov	sp, r7
 801a0f4:	bd80      	pop	{r7, pc}
 801a0f6:	bf00      	nop
 801a0f8:	20014d30 	.word	0x20014d30
 801a0fc:	0816a310 	.word	0x0816a310
 801a100:	20014ca0 	.word	0x20014ca0
 801a104:	08023774 	.word	0x08023774
 801a108:	08023780 	.word	0x08023780
 801a10c:	080237a4 	.word	0x080237a4

0801a110 <GET_PASSWORD>:

bool GET_PASSWORD(char *opBuffer) {
 801a110:	b580      	push	{r7, lr}
 801a112:	b082      	sub	sp, #8
 801a114:	af00      	add	r7, sp, #0
 801a116:	6078      	str	r0, [r7, #4]
	memset(RB, 0, sizeof(RB));
 801a118:	2264      	movs	r2, #100	@ 0x64
 801a11a:	2100      	movs	r1, #0
 801a11c:	481b      	ldr	r0, [pc, #108]	@ (801a18c <GET_PASSWORD+0x7c>)
 801a11e:	f004 fe87 	bl	801ee30 <memset>
	if (FLASH_Read_Buff(PASSWORD, RB, 16) == HAL_OK) {
 801a122:	2210      	movs	r2, #16
 801a124:	4919      	ldr	r1, [pc, #100]	@ (801a18c <GET_PASSWORD+0x7c>)
 801a126:	481a      	ldr	r0, [pc, #104]	@ (801a190 <GET_PASSWORD+0x80>)
 801a128:	f7fc fa82 	bl	8016630 <FLASH_Read_Buff>
 801a12c:	4603      	mov	r3, r0
 801a12e:	2b00      	cmp	r3, #0
 801a130:	d122      	bne.n	801a178 <GET_PASSWORD+0x68>
		Rconfig.PSWD = (char*) malloc(strlen(RB) + 1); // Allocate memory for string
 801a132:	4816      	ldr	r0, [pc, #88]	@ (801a18c <GET_PASSWORD+0x7c>)
 801a134:	f7e6 f8b6 	bl	80002a4 <strlen>
 801a138:	4603      	mov	r3, r0
 801a13a:	3301      	adds	r3, #1
 801a13c:	4618      	mov	r0, r3
 801a13e:	f002 fe07 	bl	801cd50 <malloc>
 801a142:	4603      	mov	r3, r0
 801a144:	461a      	mov	r2, r3
 801a146:	4b13      	ldr	r3, [pc, #76]	@ (801a194 <GET_PASSWORD+0x84>)
 801a148:	651a      	str	r2, [r3, #80]	@ 0x50
		if (Rconfig.PSWD != NULL) {
 801a14a:	4b12      	ldr	r3, [pc, #72]	@ (801a194 <GET_PASSWORD+0x84>)
 801a14c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a14e:	2b00      	cmp	r3, #0
 801a150:	d00d      	beq.n	801a16e <GET_PASSWORD+0x5e>
			strcpy(Rconfig.PSWD, RB);
 801a152:	4b10      	ldr	r3, [pc, #64]	@ (801a194 <GET_PASSWORD+0x84>)
 801a154:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a156:	490d      	ldr	r1, [pc, #52]	@ (801a18c <GET_PASSWORD+0x7c>)
 801a158:	4618      	mov	r0, r3
 801a15a:	f004 ffc6 	bl	801f0ea <strcpy>
			printc(MinDelay, "PASSWORD: %s\n", Rconfig.PSWD);
 801a15e:	4b0d      	ldr	r3, [pc, #52]	@ (801a194 <GET_PASSWORD+0x84>)
 801a160:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a162:	461a      	mov	r2, r3
 801a164:	490c      	ldr	r1, [pc, #48]	@ (801a198 <GET_PASSWORD+0x88>)
 801a166:	200a      	movs	r0, #10
 801a168:	f7e7 fc56 	bl	8001a18 <printc>
 801a16c:	e008      	b.n	801a180 <GET_PASSWORD+0x70>
		} else {
			printc(MinDelay, "Memory allocation failed for PASSWORD!\n");
 801a16e:	490b      	ldr	r1, [pc, #44]	@ (801a19c <GET_PASSWORD+0x8c>)
 801a170:	200a      	movs	r0, #10
 801a172:	f7e7 fc51 	bl	8001a18 <printc>
 801a176:	e003      	b.n	801a180 <GET_PASSWORD+0x70>
		}
	} else {
		printc(MinDelay, "Failed to read PASSWORD from flash!\n");
 801a178:	4909      	ldr	r1, [pc, #36]	@ (801a1a0 <GET_PASSWORD+0x90>)
 801a17a:	200a      	movs	r0, #10
 801a17c:	f7e7 fc4c 	bl	8001a18 <printc>
	}
}
 801a180:	bf00      	nop
 801a182:	4618      	mov	r0, r3
 801a184:	3708      	adds	r7, #8
 801a186:	46bd      	mov	sp, r7
 801a188:	bd80      	pop	{r7, pc}
 801a18a:	bf00      	nop
 801a18c:	20014d30 	.word	0x20014d30
 801a190:	0816a330 	.word	0x0816a330
 801a194:	20014ca0 	.word	0x20014ca0
 801a198:	080237c8 	.word	0x080237c8
 801a19c:	080237d8 	.word	0x080237d8
 801a1a0:	08023800 	.word	0x08023800

0801a1a4 <GET_VIN>:

bool GET_VIN(char *opBuffer) {
 801a1a4:	b580      	push	{r7, lr}
 801a1a6:	b082      	sub	sp, #8
 801a1a8:	af00      	add	r7, sp, #0
 801a1aa:	6078      	str	r0, [r7, #4]
	memset(RB, 0, sizeof(RB));
 801a1ac:	2264      	movs	r2, #100	@ 0x64
 801a1ae:	2100      	movs	r1, #0
 801a1b0:	481b      	ldr	r0, [pc, #108]	@ (801a220 <GET_VIN+0x7c>)
 801a1b2:	f004 fe3d 	bl	801ee30 <memset>
	if (FLASH_Read_Buff(VECHILE_ID_NUM, RB, 16) == HAL_OK) {
 801a1b6:	2210      	movs	r2, #16
 801a1b8:	4919      	ldr	r1, [pc, #100]	@ (801a220 <GET_VIN+0x7c>)
 801a1ba:	481a      	ldr	r0, [pc, #104]	@ (801a224 <GET_VIN+0x80>)
 801a1bc:	f7fc fa38 	bl	8016630 <FLASH_Read_Buff>
 801a1c0:	4603      	mov	r3, r0
 801a1c2:	2b00      	cmp	r3, #0
 801a1c4:	d122      	bne.n	801a20c <GET_VIN+0x68>
		Rconfig.VIN = (char*) malloc(strlen(RB) + 1); // Allocate memory for string
 801a1c6:	4816      	ldr	r0, [pc, #88]	@ (801a220 <GET_VIN+0x7c>)
 801a1c8:	f7e6 f86c 	bl	80002a4 <strlen>
 801a1cc:	4603      	mov	r3, r0
 801a1ce:	3301      	adds	r3, #1
 801a1d0:	4618      	mov	r0, r3
 801a1d2:	f002 fdbd 	bl	801cd50 <malloc>
 801a1d6:	4603      	mov	r3, r0
 801a1d8:	461a      	mov	r2, r3
 801a1da:	4b13      	ldr	r3, [pc, #76]	@ (801a228 <GET_VIN+0x84>)
 801a1dc:	655a      	str	r2, [r3, #84]	@ 0x54
		if (Rconfig.VIN != NULL) {
 801a1de:	4b12      	ldr	r3, [pc, #72]	@ (801a228 <GET_VIN+0x84>)
 801a1e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801a1e2:	2b00      	cmp	r3, #0
 801a1e4:	d00d      	beq.n	801a202 <GET_VIN+0x5e>
			strcpy(Rconfig.VIN, RB);
 801a1e6:	4b10      	ldr	r3, [pc, #64]	@ (801a228 <GET_VIN+0x84>)
 801a1e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801a1ea:	490d      	ldr	r1, [pc, #52]	@ (801a220 <GET_VIN+0x7c>)
 801a1ec:	4618      	mov	r0, r3
 801a1ee:	f004 ff7c 	bl	801f0ea <strcpy>
			printc(MinDelay, "VIN: %s\n", Rconfig.VIN);
 801a1f2:	4b0d      	ldr	r3, [pc, #52]	@ (801a228 <GET_VIN+0x84>)
 801a1f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801a1f6:	461a      	mov	r2, r3
 801a1f8:	490c      	ldr	r1, [pc, #48]	@ (801a22c <GET_VIN+0x88>)
 801a1fa:	200a      	movs	r0, #10
 801a1fc:	f7e7 fc0c 	bl	8001a18 <printc>
 801a200:	e008      	b.n	801a214 <GET_VIN+0x70>
		} else {
			printc(MinDelay, "Memory allocation failed for VIN!\n");
 801a202:	490b      	ldr	r1, [pc, #44]	@ (801a230 <GET_VIN+0x8c>)
 801a204:	200a      	movs	r0, #10
 801a206:	f7e7 fc07 	bl	8001a18 <printc>
 801a20a:	e003      	b.n	801a214 <GET_VIN+0x70>
		}
	} else {
		printc(MinDelay, "Failed to read VIN from flash!\n");
 801a20c:	4909      	ldr	r1, [pc, #36]	@ (801a234 <GET_VIN+0x90>)
 801a20e:	200a      	movs	r0, #10
 801a210:	f7e7 fc02 	bl	8001a18 <printc>
	}
}
 801a214:	bf00      	nop
 801a216:	4618      	mov	r0, r3
 801a218:	3708      	adds	r7, #8
 801a21a:	46bd      	mov	sp, r7
 801a21c:	bd80      	pop	{r7, pc}
 801a21e:	bf00      	nop
 801a220:	20014d30 	.word	0x20014d30
 801a224:	0816a350 	.word	0x0816a350
 801a228:	20014ca0 	.word	0x20014ca0
 801a22c:	08023828 	.word	0x08023828
 801a230:	08023834 	.word	0x08023834
 801a234:	08023858 	.word	0x08023858

0801a238 <GET_LAT>:

bool GET_LAT() {
 801a238:	b580      	push	{r7, lr}
 801a23a:	af00      	add	r7, sp, #0
	memset(RB, 0, sizeof(RB));
 801a23c:	2264      	movs	r2, #100	@ 0x64
 801a23e:	2100      	movs	r1, #0
 801a240:	4820      	ldr	r0, [pc, #128]	@ (801a2c4 <GET_LAT+0x8c>)
 801a242:	f004 fdf5 	bl	801ee30 <memset>
	if (FLASH_Read_Buff(LAT_ADDR, RB, 16) == HAL_OK) {
 801a246:	2210      	movs	r2, #16
 801a248:	491e      	ldr	r1, [pc, #120]	@ (801a2c4 <GET_LAT+0x8c>)
 801a24a:	481f      	ldr	r0, [pc, #124]	@ (801a2c8 <GET_LAT+0x90>)
 801a24c:	f7fc f9f0 	bl	8016630 <FLASH_Read_Buff>
 801a250:	4603      	mov	r3, r0
 801a252:	2b00      	cmp	r3, #0
 801a254:	d12e      	bne.n	801a2b4 <GET_LAT+0x7c>
		Rconfig.LAT = (char*) malloc(strlen(RB) + 1); // Allocate memory for string
 801a256:	481b      	ldr	r0, [pc, #108]	@ (801a2c4 <GET_LAT+0x8c>)
 801a258:	f7e6 f824 	bl	80002a4 <strlen>
 801a25c:	4603      	mov	r3, r0
 801a25e:	3301      	adds	r3, #1
 801a260:	4618      	mov	r0, r3
 801a262:	f002 fd75 	bl	801cd50 <malloc>
 801a266:	4603      	mov	r3, r0
 801a268:	461a      	mov	r2, r3
 801a26a:	4b18      	ldr	r3, [pc, #96]	@ (801a2cc <GET_LAT+0x94>)
 801a26c:	67da      	str	r2, [r3, #124]	@ 0x7c
		if (Rconfig.LAT != NULL) {
 801a26e:	4b17      	ldr	r3, [pc, #92]	@ (801a2cc <GET_LAT+0x94>)
 801a270:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801a272:	2b00      	cmp	r3, #0
 801a274:	d019      	beq.n	801a2aa <GET_LAT+0x72>
			if (RB[0] != 255)
 801a276:	4b13      	ldr	r3, [pc, #76]	@ (801a2c4 <GET_LAT+0x8c>)
 801a278:	781b      	ldrb	r3, [r3, #0]
 801a27a:	2bff      	cmp	r3, #255	@ 0xff
 801a27c:	d006      	beq.n	801a28c <GET_LAT+0x54>
				strcpy(Rconfig.LAT, RB);
 801a27e:	4b13      	ldr	r3, [pc, #76]	@ (801a2cc <GET_LAT+0x94>)
 801a280:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801a282:	4910      	ldr	r1, [pc, #64]	@ (801a2c4 <GET_LAT+0x8c>)
 801a284:	4618      	mov	r0, r3
 801a286:	f004 ff30 	bl	801f0ea <strcpy>
 801a28a:	e006      	b.n	801a29a <GET_LAT+0x62>
			else {
				strcpy(Rconfig.LAT, "0");
 801a28c:	4b0f      	ldr	r3, [pc, #60]	@ (801a2cc <GET_LAT+0x94>)
 801a28e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801a290:	490f      	ldr	r1, [pc, #60]	@ (801a2d0 <GET_LAT+0x98>)
 801a292:	461a      	mov	r2, r3
 801a294:	460b      	mov	r3, r1
 801a296:	881b      	ldrh	r3, [r3, #0]
 801a298:	8013      	strh	r3, [r2, #0]
			}
			printc(MinDelay, "LAT: %s\n", Rconfig.LAT);
 801a29a:	4b0c      	ldr	r3, [pc, #48]	@ (801a2cc <GET_LAT+0x94>)
 801a29c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801a29e:	461a      	mov	r2, r3
 801a2a0:	490c      	ldr	r1, [pc, #48]	@ (801a2d4 <GET_LAT+0x9c>)
 801a2a2:	200a      	movs	r0, #10
 801a2a4:	f7e7 fbb8 	bl	8001a18 <printc>
 801a2a8:	e008      	b.n	801a2bc <GET_LAT+0x84>
		} else {
			printc(MinDelay, "Memory allocation failed for LAT!\n");
 801a2aa:	490b      	ldr	r1, [pc, #44]	@ (801a2d8 <GET_LAT+0xa0>)
 801a2ac:	200a      	movs	r0, #10
 801a2ae:	f7e7 fbb3 	bl	8001a18 <printc>
 801a2b2:	e003      	b.n	801a2bc <GET_LAT+0x84>
		}
	} else {
		printc(MinDelay, "Failed to read LAT from flash!\n");
 801a2b4:	4909      	ldr	r1, [pc, #36]	@ (801a2dc <GET_LAT+0xa4>)
 801a2b6:	200a      	movs	r0, #10
 801a2b8:	f7e7 fbae 	bl	8001a18 <printc>
	}
	return 0;
 801a2bc:	2300      	movs	r3, #0
}
 801a2be:	4618      	mov	r0, r3
 801a2c0:	bd80      	pop	{r7, pc}
 801a2c2:	bf00      	nop
 801a2c4:	20014d30 	.word	0x20014d30
 801a2c8:	0816a540 	.word	0x0816a540
 801a2cc:	20014ca0 	.word	0x20014ca0
 801a2d0:	08023878 	.word	0x08023878
 801a2d4:	0802387c 	.word	0x0802387c
 801a2d8:	08023888 	.word	0x08023888
 801a2dc:	080238ac 	.word	0x080238ac

0801a2e0 <GET_LON>:

bool GET_LON() {
 801a2e0:	b580      	push	{r7, lr}
 801a2e2:	af00      	add	r7, sp, #0
	memset(RB, 0, sizeof(RB));
 801a2e4:	2264      	movs	r2, #100	@ 0x64
 801a2e6:	2100      	movs	r1, #0
 801a2e8:	4822      	ldr	r0, [pc, #136]	@ (801a374 <GET_LON+0x94>)
 801a2ea:	f004 fda1 	bl	801ee30 <memset>
	if (FLASH_Read_Buff(LON_ADDR, RB, 16) == HAL_OK) {
 801a2ee:	2210      	movs	r2, #16
 801a2f0:	4920      	ldr	r1, [pc, #128]	@ (801a374 <GET_LON+0x94>)
 801a2f2:	4821      	ldr	r0, [pc, #132]	@ (801a378 <GET_LON+0x98>)
 801a2f4:	f7fc f99c 	bl	8016630 <FLASH_Read_Buff>
 801a2f8:	4603      	mov	r3, r0
 801a2fa:	2b00      	cmp	r3, #0
 801a2fc:	d133      	bne.n	801a366 <GET_LON+0x86>
		Rconfig.LON = (char*) malloc(strlen(RB) + 1); // Allocate memory for string
 801a2fe:	481d      	ldr	r0, [pc, #116]	@ (801a374 <GET_LON+0x94>)
 801a300:	f7e5 ffd0 	bl	80002a4 <strlen>
 801a304:	4603      	mov	r3, r0
 801a306:	3301      	adds	r3, #1
 801a308:	4618      	mov	r0, r3
 801a30a:	f002 fd21 	bl	801cd50 <malloc>
 801a30e:	4603      	mov	r3, r0
 801a310:	461a      	mov	r2, r3
 801a312:	4b1a      	ldr	r3, [pc, #104]	@ (801a37c <GET_LON+0x9c>)
 801a314:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
		if (Rconfig.LON != NULL) {
 801a318:	4b18      	ldr	r3, [pc, #96]	@ (801a37c <GET_LON+0x9c>)
 801a31a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801a31e:	2b00      	cmp	r3, #0
 801a320:	d01c      	beq.n	801a35c <GET_LON+0x7c>
			if (RB[0] != 255)
 801a322:	4b14      	ldr	r3, [pc, #80]	@ (801a374 <GET_LON+0x94>)
 801a324:	781b      	ldrb	r3, [r3, #0]
 801a326:	2bff      	cmp	r3, #255	@ 0xff
 801a328:	d007      	beq.n	801a33a <GET_LON+0x5a>
				strcpy(Rconfig.LON, RB);
 801a32a:	4b14      	ldr	r3, [pc, #80]	@ (801a37c <GET_LON+0x9c>)
 801a32c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801a330:	4910      	ldr	r1, [pc, #64]	@ (801a374 <GET_LON+0x94>)
 801a332:	4618      	mov	r0, r3
 801a334:	f004 fed9 	bl	801f0ea <strcpy>
 801a338:	e007      	b.n	801a34a <GET_LON+0x6a>
			else {
				strcpy(Rconfig.LON, "0");
 801a33a:	4b10      	ldr	r3, [pc, #64]	@ (801a37c <GET_LON+0x9c>)
 801a33c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801a340:	490f      	ldr	r1, [pc, #60]	@ (801a380 <GET_LON+0xa0>)
 801a342:	461a      	mov	r2, r3
 801a344:	460b      	mov	r3, r1
 801a346:	881b      	ldrh	r3, [r3, #0]
 801a348:	8013      	strh	r3, [r2, #0]
			}
			printc(MinDelay, "LON: %s\n", Rconfig.LON);
 801a34a:	4b0c      	ldr	r3, [pc, #48]	@ (801a37c <GET_LON+0x9c>)
 801a34c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801a350:	461a      	mov	r2, r3
 801a352:	490c      	ldr	r1, [pc, #48]	@ (801a384 <GET_LON+0xa4>)
 801a354:	200a      	movs	r0, #10
 801a356:	f7e7 fb5f 	bl	8001a18 <printc>
 801a35a:	e008      	b.n	801a36e <GET_LON+0x8e>
		} else {
			printc(MinDelay, "Memory allocation failed for LON!\n");
 801a35c:	490a      	ldr	r1, [pc, #40]	@ (801a388 <GET_LON+0xa8>)
 801a35e:	200a      	movs	r0, #10
 801a360:	f7e7 fb5a 	bl	8001a18 <printc>
 801a364:	e003      	b.n	801a36e <GET_LON+0x8e>
		}
	} else {
		printc(MinDelay, "Failed to read LON from flash!\n");
 801a366:	4909      	ldr	r1, [pc, #36]	@ (801a38c <GET_LON+0xac>)
 801a368:	200a      	movs	r0, #10
 801a36a:	f7e7 fb55 	bl	8001a18 <printc>
	}
	return true;
 801a36e:	2301      	movs	r3, #1
}
 801a370:	4618      	mov	r0, r3
 801a372:	bd80      	pop	{r7, pc}
 801a374:	20014d30 	.word	0x20014d30
 801a378:	0816a560 	.word	0x0816a560
 801a37c:	20014ca0 	.word	0x20014ca0
 801a380:	08023878 	.word	0x08023878
 801a384:	080238cc 	.word	0x080238cc
 801a388:	080238d8 	.word	0x080238d8
 801a38c:	080238fc 	.word	0x080238fc

0801a390 <GET_PHNUM>:

bool GET_PHNUM() {
 801a390:	b580      	push	{r7, lr}
 801a392:	af00      	add	r7, sp, #0
	memset(RB, 0, sizeof(RB));
 801a394:	2264      	movs	r2, #100	@ 0x64
 801a396:	2100      	movs	r1, #0
 801a398:	4820      	ldr	r0, [pc, #128]	@ (801a41c <GET_PHNUM+0x8c>)
 801a39a:	f004 fd49 	bl	801ee30 <memset>
	if (FLASH_Read_Buff(SMS_NUM_Addr, RB, 16) == HAL_OK) {
 801a39e:	2210      	movs	r2, #16
 801a3a0:	491e      	ldr	r1, [pc, #120]	@ (801a41c <GET_PHNUM+0x8c>)
 801a3a2:	481f      	ldr	r0, [pc, #124]	@ (801a420 <GET_PHNUM+0x90>)
 801a3a4:	f7fc f944 	bl	8016630 <FLASH_Read_Buff>
 801a3a8:	4603      	mov	r3, r0
 801a3aa:	2b00      	cmp	r3, #0
 801a3ac:	d12e      	bne.n	801a40c <GET_PHNUM+0x7c>
		Rconfig.PHNUM = (char*) malloc(strlen(RB) + 1); // Allocate memory for string
 801a3ae:	481b      	ldr	r0, [pc, #108]	@ (801a41c <GET_PHNUM+0x8c>)
 801a3b0:	f7e5 ff78 	bl	80002a4 <strlen>
 801a3b4:	4603      	mov	r3, r0
 801a3b6:	3301      	adds	r3, #1
 801a3b8:	4618      	mov	r0, r3
 801a3ba:	f002 fcc9 	bl	801cd50 <malloc>
 801a3be:	4603      	mov	r3, r0
 801a3c0:	461a      	mov	r2, r3
 801a3c2:	4b18      	ldr	r3, [pc, #96]	@ (801a424 <GET_PHNUM+0x94>)
 801a3c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
		if (Rconfig.PHNUM != NULL) {
 801a3c8:	4b16      	ldr	r3, [pc, #88]	@ (801a424 <GET_PHNUM+0x94>)
 801a3ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801a3ce:	2b00      	cmp	r3, #0
 801a3d0:	d017      	beq.n	801a402 <GET_PHNUM+0x72>
			strcpy(Rconfig.PHNUM, RB);
 801a3d2:	4b14      	ldr	r3, [pc, #80]	@ (801a424 <GET_PHNUM+0x94>)
 801a3d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801a3d8:	4910      	ldr	r1, [pc, #64]	@ (801a41c <GET_PHNUM+0x8c>)
 801a3da:	4618      	mov	r0, r3
 801a3dc:	f004 fe85 	bl	801f0ea <strcpy>
			memcpy(&PHnum ,Rconfig.PHNUM,10);
 801a3e0:	4b10      	ldr	r3, [pc, #64]	@ (801a424 <GET_PHNUM+0x94>)
 801a3e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801a3e6:	220a      	movs	r2, #10
 801a3e8:	4619      	mov	r1, r3
 801a3ea:	480f      	ldr	r0, [pc, #60]	@ (801a428 <GET_PHNUM+0x98>)
 801a3ec:	f004 fe93 	bl	801f116 <memcpy>
			printc(MinDelay, "PHNUM: %s\n", Rconfig.PHNUM);
 801a3f0:	4b0c      	ldr	r3, [pc, #48]	@ (801a424 <GET_PHNUM+0x94>)
 801a3f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801a3f6:	461a      	mov	r2, r3
 801a3f8:	490c      	ldr	r1, [pc, #48]	@ (801a42c <GET_PHNUM+0x9c>)
 801a3fa:	200a      	movs	r0, #10
 801a3fc:	f7e7 fb0c 	bl	8001a18 <printc>
 801a400:	e008      	b.n	801a414 <GET_PHNUM+0x84>
		} else {
			printc(MinDelay, "Memory allocation failed for PHNUM!\n");
 801a402:	490b      	ldr	r1, [pc, #44]	@ (801a430 <GET_PHNUM+0xa0>)
 801a404:	200a      	movs	r0, #10
 801a406:	f7e7 fb07 	bl	8001a18 <printc>
 801a40a:	e003      	b.n	801a414 <GET_PHNUM+0x84>
		}
	} else {
		printc(MinDelay, "Failed to read PHNUM from flash!\n");
 801a40c:	4909      	ldr	r1, [pc, #36]	@ (801a434 <GET_PHNUM+0xa4>)
 801a40e:	200a      	movs	r0, #10
 801a410:	f7e7 fb02 	bl	8001a18 <printc>
	}
	return true;
 801a414:	2301      	movs	r3, #1
}
 801a416:	4618      	mov	r0, r3
 801a418:	bd80      	pop	{r7, pc}
 801a41a:	bf00      	nop
 801a41c:	20014d30 	.word	0x20014d30
 801a420:	0816a580 	.word	0x0816a580
 801a424:	20014ca0 	.word	0x20014ca0
 801a428:	20013848 	.word	0x20013848
 801a42c:	0802391c 	.word	0x0802391c
 801a430:	08023928 	.word	0x08023928
 801a434:	08023950 	.word	0x08023950

0801a438 <GET_RTCTimer>:
bool GET_RTCTimer() {
 801a438:	b580      	push	{r7, lr}
 801a43a:	af00      	add	r7, sp, #0
	memset(RB, 0, sizeof(RB));
 801a43c:	2264      	movs	r2, #100	@ 0x64
 801a43e:	2100      	movs	r1, #0
 801a440:	481c      	ldr	r0, [pc, #112]	@ (801a4b4 <GET_RTCTimer+0x7c>)
 801a442:	f004 fcf5 	bl	801ee30 <memset>
	if (FLASH_Read_Buff(RTC_timer_addr, RB, 16) == HAL_OK) {
 801a446:	2210      	movs	r2, #16
 801a448:	491a      	ldr	r1, [pc, #104]	@ (801a4b4 <GET_RTCTimer+0x7c>)
 801a44a:	481b      	ldr	r0, [pc, #108]	@ (801a4b8 <GET_RTCTimer+0x80>)
 801a44c:	f7fc f8f0 	bl	8016630 <FLASH_Read_Buff>
 801a450:	4603      	mov	r3, r0
 801a452:	2b00      	cmp	r3, #0
 801a454:	d126      	bne.n	801a4a4 <GET_RTCTimer+0x6c>
		Rconfig.Rtime = (char*) malloc(strlen(RB) + 1); // Allocate memory for string
 801a456:	4817      	ldr	r0, [pc, #92]	@ (801a4b4 <GET_RTCTimer+0x7c>)
 801a458:	f7e5 ff24 	bl	80002a4 <strlen>
 801a45c:	4603      	mov	r3, r0
 801a45e:	3301      	adds	r3, #1
 801a460:	4618      	mov	r0, r3
 801a462:	f002 fc75 	bl	801cd50 <malloc>
 801a466:	4603      	mov	r3, r0
 801a468:	461a      	mov	r2, r3
 801a46a:	4b14      	ldr	r3, [pc, #80]	@ (801a4bc <GET_RTCTimer+0x84>)
 801a46c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
		if (Rconfig.Rtime != NULL) {
 801a470:	4b12      	ldr	r3, [pc, #72]	@ (801a4bc <GET_RTCTimer+0x84>)
 801a472:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801a476:	2b00      	cmp	r3, #0
 801a478:	d00f      	beq.n	801a49a <GET_RTCTimer+0x62>
			strcpy(Rconfig.Rtime, RB);
 801a47a:	4b10      	ldr	r3, [pc, #64]	@ (801a4bc <GET_RTCTimer+0x84>)
 801a47c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801a480:	490c      	ldr	r1, [pc, #48]	@ (801a4b4 <GET_RTCTimer+0x7c>)
 801a482:	4618      	mov	r0, r3
 801a484:	f004 fe31 	bl	801f0ea <strcpy>
			printc(MinDelay, "RTCWaketime: %s\n", Rconfig.Rtime);
 801a488:	4b0c      	ldr	r3, [pc, #48]	@ (801a4bc <GET_RTCTimer+0x84>)
 801a48a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801a48e:	461a      	mov	r2, r3
 801a490:	490b      	ldr	r1, [pc, #44]	@ (801a4c0 <GET_RTCTimer+0x88>)
 801a492:	200a      	movs	r0, #10
 801a494:	f7e7 fac0 	bl	8001a18 <printc>
 801a498:	e008      	b.n	801a4ac <GET_RTCTimer+0x74>
		} else {
			printc(MinDelay, "Memory allocation failed for Rtime!\n");
 801a49a:	490a      	ldr	r1, [pc, #40]	@ (801a4c4 <GET_RTCTimer+0x8c>)
 801a49c:	200a      	movs	r0, #10
 801a49e:	f7e7 fabb 	bl	8001a18 <printc>
 801a4a2:	e003      	b.n	801a4ac <GET_RTCTimer+0x74>
		}
	} else {
		printc(MinDelay, "Failed to read Rtime from flash!\n");
 801a4a4:	4908      	ldr	r1, [pc, #32]	@ (801a4c8 <GET_RTCTimer+0x90>)
 801a4a6:	200a      	movs	r0, #10
 801a4a8:	f7e7 fab6 	bl	8001a18 <printc>
	}
	return true;
 801a4ac:	2301      	movs	r3, #1
}
 801a4ae:	4618      	mov	r0, r3
 801a4b0:	bd80      	pop	{r7, pc}
 801a4b2:	bf00      	nop
 801a4b4:	20014d30 	.word	0x20014d30
 801a4b8:	0816a600 	.word	0x0816a600
 801a4bc:	20014ca0 	.word	0x20014ca0
 801a4c0:	08023974 	.word	0x08023974
 801a4c4:	08023988 	.word	0x08023988
 801a4c8:	080239b0 	.word	0x080239b0

0801a4cc <GET_Ckey>:
		return false;
	}
//	sprintf(opBuffer, "%lu %lu %lu", L1, L2, L3);
	return true;
}
bool GET_Ckey() {
 801a4cc:	b580      	push	{r7, lr}
 801a4ce:	af00      	add	r7, sp, #0
	memset(RB, 0, sizeof(RB));
 801a4d0:	2264      	movs	r2, #100	@ 0x64
 801a4d2:	2100      	movs	r1, #0
 801a4d4:	48b0      	ldr	r0, [pc, #704]	@ (801a798 <GET_Ckey+0x2cc>)
 801a4d6:	f004 fcab 	bl	801ee30 <memset>
	if (FLASH_Read_Buff(CKEY1_ADDR, RB, 32) == HAL_OK) {
 801a4da:	2220      	movs	r2, #32
 801a4dc:	49ae      	ldr	r1, [pc, #696]	@ (801a798 <GET_Ckey+0x2cc>)
 801a4de:	48af      	ldr	r0, [pc, #700]	@ (801a79c <GET_Ckey+0x2d0>)
 801a4e0:	f7fc f8a6 	bl	8016630 <FLASH_Read_Buff>
 801a4e4:	4603      	mov	r3, r0
 801a4e6:	2b00      	cmp	r3, #0
 801a4e8:	d122      	bne.n	801a530 <GET_Ckey+0x64>
		Rconfig.CKEY1 = (char*) malloc(strlen(RB) + 1); // Allocate memory for string
 801a4ea:	48ab      	ldr	r0, [pc, #684]	@ (801a798 <GET_Ckey+0x2cc>)
 801a4ec:	f7e5 feda 	bl	80002a4 <strlen>
 801a4f0:	4603      	mov	r3, r0
 801a4f2:	3301      	adds	r3, #1
 801a4f4:	4618      	mov	r0, r3
 801a4f6:	f002 fc2b 	bl	801cd50 <malloc>
 801a4fa:	4603      	mov	r3, r0
 801a4fc:	461a      	mov	r2, r3
 801a4fe:	4ba8      	ldr	r3, [pc, #672]	@ (801a7a0 <GET_Ckey+0x2d4>)
 801a500:	65da      	str	r2, [r3, #92]	@ 0x5c
		if (Rconfig.CKEY1 != NULL) {
 801a502:	4ba7      	ldr	r3, [pc, #668]	@ (801a7a0 <GET_Ckey+0x2d4>)
 801a504:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801a506:	2b00      	cmp	r3, #0
 801a508:	d00d      	beq.n	801a526 <GET_Ckey+0x5a>
			strcpy(Rconfig.CKEY1, RB);
 801a50a:	4ba5      	ldr	r3, [pc, #660]	@ (801a7a0 <GET_Ckey+0x2d4>)
 801a50c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801a50e:	49a2      	ldr	r1, [pc, #648]	@ (801a798 <GET_Ckey+0x2cc>)
 801a510:	4618      	mov	r0, r3
 801a512:	f004 fdea 	bl	801f0ea <strcpy>
			printc(MinDelay, "CKEY1: %s\n", Rconfig.CKEY1);
 801a516:	4ba2      	ldr	r3, [pc, #648]	@ (801a7a0 <GET_Ckey+0x2d4>)
 801a518:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801a51a:	461a      	mov	r2, r3
 801a51c:	49a1      	ldr	r1, [pc, #644]	@ (801a7a4 <GET_Ckey+0x2d8>)
 801a51e:	200a      	movs	r0, #10
 801a520:	f7e7 fa7a 	bl	8001a18 <printc>
 801a524:	e008      	b.n	801a538 <GET_Ckey+0x6c>
		} else {
			printc(MinDelay, "Memory allocation failed for Ckey1!\n");
 801a526:	49a0      	ldr	r1, [pc, #640]	@ (801a7a8 <GET_Ckey+0x2dc>)
 801a528:	200a      	movs	r0, #10
 801a52a:	f7e7 fa75 	bl	8001a18 <printc>
 801a52e:	e003      	b.n	801a538 <GET_Ckey+0x6c>
		}
	} else {
		printc(MinDelay, "Failed to read CKEY1 from flash!\n");
 801a530:	499e      	ldr	r1, [pc, #632]	@ (801a7ac <GET_Ckey+0x2e0>)
 801a532:	200a      	movs	r0, #10
 801a534:	f7e7 fa70 	bl	8001a18 <printc>
	}
	memset(RB, 0, sizeof(RB));
 801a538:	2264      	movs	r2, #100	@ 0x64
 801a53a:	2100      	movs	r1, #0
 801a53c:	4896      	ldr	r0, [pc, #600]	@ (801a798 <GET_Ckey+0x2cc>)
 801a53e:	f004 fc77 	bl	801ee30 <memset>
	if (FLASH_Read_Buff(CKEY2_ADDR, RB, 32) == HAL_OK) {
 801a542:	2220      	movs	r2, #32
 801a544:	4994      	ldr	r1, [pc, #592]	@ (801a798 <GET_Ckey+0x2cc>)
 801a546:	489a      	ldr	r0, [pc, #616]	@ (801a7b0 <GET_Ckey+0x2e4>)
 801a548:	f7fc f872 	bl	8016630 <FLASH_Read_Buff>
 801a54c:	4603      	mov	r3, r0
 801a54e:	2b00      	cmp	r3, #0
 801a550:	d122      	bne.n	801a598 <GET_Ckey+0xcc>
		Rconfig.CKEY2 = (char*) malloc(strlen(RB) + 1); // Allocate memory for string
 801a552:	4891      	ldr	r0, [pc, #580]	@ (801a798 <GET_Ckey+0x2cc>)
 801a554:	f7e5 fea6 	bl	80002a4 <strlen>
 801a558:	4603      	mov	r3, r0
 801a55a:	3301      	adds	r3, #1
 801a55c:	4618      	mov	r0, r3
 801a55e:	f002 fbf7 	bl	801cd50 <malloc>
 801a562:	4603      	mov	r3, r0
 801a564:	461a      	mov	r2, r3
 801a566:	4b8e      	ldr	r3, [pc, #568]	@ (801a7a0 <GET_Ckey+0x2d4>)
 801a568:	661a      	str	r2, [r3, #96]	@ 0x60
		if (Rconfig.CKEY2 != NULL) {
 801a56a:	4b8d      	ldr	r3, [pc, #564]	@ (801a7a0 <GET_Ckey+0x2d4>)
 801a56c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801a56e:	2b00      	cmp	r3, #0
 801a570:	d00d      	beq.n	801a58e <GET_Ckey+0xc2>
			strcpy(Rconfig.CKEY2, RB);
 801a572:	4b8b      	ldr	r3, [pc, #556]	@ (801a7a0 <GET_Ckey+0x2d4>)
 801a574:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801a576:	4988      	ldr	r1, [pc, #544]	@ (801a798 <GET_Ckey+0x2cc>)
 801a578:	4618      	mov	r0, r3
 801a57a:	f004 fdb6 	bl	801f0ea <strcpy>
			printc(MinDelay, "CKEY2: %s\n", Rconfig.CKEY2);
 801a57e:	4b88      	ldr	r3, [pc, #544]	@ (801a7a0 <GET_Ckey+0x2d4>)
 801a580:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801a582:	461a      	mov	r2, r3
 801a584:	498b      	ldr	r1, [pc, #556]	@ (801a7b4 <GET_Ckey+0x2e8>)
 801a586:	200a      	movs	r0, #10
 801a588:	f7e7 fa46 	bl	8001a18 <printc>
 801a58c:	e008      	b.n	801a5a0 <GET_Ckey+0xd4>
		} else {
			printc(MinDelay, "Memory allocation failed for CKEY2!\n");
 801a58e:	498a      	ldr	r1, [pc, #552]	@ (801a7b8 <GET_Ckey+0x2ec>)
 801a590:	200a      	movs	r0, #10
 801a592:	f7e7 fa41 	bl	8001a18 <printc>
 801a596:	e003      	b.n	801a5a0 <GET_Ckey+0xd4>
		}
	} else {
		printc(MinDelay, "Failed to read CKEY2 from flash!\n");
 801a598:	4988      	ldr	r1, [pc, #544]	@ (801a7bc <GET_Ckey+0x2f0>)
 801a59a:	200a      	movs	r0, #10
 801a59c:	f7e7 fa3c 	bl	8001a18 <printc>
	}
	memset(RB, 0, sizeof(RB));
 801a5a0:	2264      	movs	r2, #100	@ 0x64
 801a5a2:	2100      	movs	r1, #0
 801a5a4:	487c      	ldr	r0, [pc, #496]	@ (801a798 <GET_Ckey+0x2cc>)
 801a5a6:	f004 fc43 	bl	801ee30 <memset>
	if (FLASH_Read_Buff(CKEY3_ADDR, RB, 32) == HAL_OK) {
 801a5aa:	2220      	movs	r2, #32
 801a5ac:	497a      	ldr	r1, [pc, #488]	@ (801a798 <GET_Ckey+0x2cc>)
 801a5ae:	4884      	ldr	r0, [pc, #528]	@ (801a7c0 <GET_Ckey+0x2f4>)
 801a5b0:	f7fc f83e 	bl	8016630 <FLASH_Read_Buff>
 801a5b4:	4603      	mov	r3, r0
 801a5b6:	2b00      	cmp	r3, #0
 801a5b8:	d122      	bne.n	801a600 <GET_Ckey+0x134>
		Rconfig.CKEY3 = (char*) malloc(strlen(RB) + 1); // Allocate memory for string
 801a5ba:	4877      	ldr	r0, [pc, #476]	@ (801a798 <GET_Ckey+0x2cc>)
 801a5bc:	f7e5 fe72 	bl	80002a4 <strlen>
 801a5c0:	4603      	mov	r3, r0
 801a5c2:	3301      	adds	r3, #1
 801a5c4:	4618      	mov	r0, r3
 801a5c6:	f002 fbc3 	bl	801cd50 <malloc>
 801a5ca:	4603      	mov	r3, r0
 801a5cc:	461a      	mov	r2, r3
 801a5ce:	4b74      	ldr	r3, [pc, #464]	@ (801a7a0 <GET_Ckey+0x2d4>)
 801a5d0:	665a      	str	r2, [r3, #100]	@ 0x64
		if (Rconfig.CKEY3 != NULL) {
 801a5d2:	4b73      	ldr	r3, [pc, #460]	@ (801a7a0 <GET_Ckey+0x2d4>)
 801a5d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801a5d6:	2b00      	cmp	r3, #0
 801a5d8:	d00d      	beq.n	801a5f6 <GET_Ckey+0x12a>
			strcpy(Rconfig.CKEY3, RB);
 801a5da:	4b71      	ldr	r3, [pc, #452]	@ (801a7a0 <GET_Ckey+0x2d4>)
 801a5dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801a5de:	496e      	ldr	r1, [pc, #440]	@ (801a798 <GET_Ckey+0x2cc>)
 801a5e0:	4618      	mov	r0, r3
 801a5e2:	f004 fd82 	bl	801f0ea <strcpy>
			printc(MinDelay, "CKEY3: %s\n", Rconfig.CKEY3);
 801a5e6:	4b6e      	ldr	r3, [pc, #440]	@ (801a7a0 <GET_Ckey+0x2d4>)
 801a5e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801a5ea:	461a      	mov	r2, r3
 801a5ec:	4975      	ldr	r1, [pc, #468]	@ (801a7c4 <GET_Ckey+0x2f8>)
 801a5ee:	200a      	movs	r0, #10
 801a5f0:	f7e7 fa12 	bl	8001a18 <printc>
 801a5f4:	e008      	b.n	801a608 <GET_Ckey+0x13c>
		} else {
			printc(MinDelay, "Memory allocation failed for CKEY3!\n");
 801a5f6:	4974      	ldr	r1, [pc, #464]	@ (801a7c8 <GET_Ckey+0x2fc>)
 801a5f8:	200a      	movs	r0, #10
 801a5fa:	f7e7 fa0d 	bl	8001a18 <printc>
 801a5fe:	e003      	b.n	801a608 <GET_Ckey+0x13c>
		}
	} else {
		printc(MinDelay, "Failed to read CKEY3 from flash!\n");
 801a600:	4972      	ldr	r1, [pc, #456]	@ (801a7cc <GET_Ckey+0x300>)
 801a602:	200a      	movs	r0, #10
 801a604:	f7e7 fa08 	bl	8001a18 <printc>
	}
	memset(RB, 0, sizeof(RB));
 801a608:	2264      	movs	r2, #100	@ 0x64
 801a60a:	2100      	movs	r1, #0
 801a60c:	4862      	ldr	r0, [pc, #392]	@ (801a798 <GET_Ckey+0x2cc>)
 801a60e:	f004 fc0f 	bl	801ee30 <memset>
	if (FLASH_Read_Buff(CKEY4_ADDR, RB, 32) == HAL_OK) {
 801a612:	2220      	movs	r2, #32
 801a614:	4960      	ldr	r1, [pc, #384]	@ (801a798 <GET_Ckey+0x2cc>)
 801a616:	486e      	ldr	r0, [pc, #440]	@ (801a7d0 <GET_Ckey+0x304>)
 801a618:	f7fc f80a 	bl	8016630 <FLASH_Read_Buff>
 801a61c:	4603      	mov	r3, r0
 801a61e:	2b00      	cmp	r3, #0
 801a620:	d122      	bne.n	801a668 <GET_Ckey+0x19c>
		Rconfig.CKEY4 = (char*) malloc(strlen(RB) + 1); // Allocate memory for string
 801a622:	485d      	ldr	r0, [pc, #372]	@ (801a798 <GET_Ckey+0x2cc>)
 801a624:	f7e5 fe3e 	bl	80002a4 <strlen>
 801a628:	4603      	mov	r3, r0
 801a62a:	3301      	adds	r3, #1
 801a62c:	4618      	mov	r0, r3
 801a62e:	f002 fb8f 	bl	801cd50 <malloc>
 801a632:	4603      	mov	r3, r0
 801a634:	461a      	mov	r2, r3
 801a636:	4b5a      	ldr	r3, [pc, #360]	@ (801a7a0 <GET_Ckey+0x2d4>)
 801a638:	669a      	str	r2, [r3, #104]	@ 0x68
		if (Rconfig.CKEY4 != NULL) {
 801a63a:	4b59      	ldr	r3, [pc, #356]	@ (801a7a0 <GET_Ckey+0x2d4>)
 801a63c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801a63e:	2b00      	cmp	r3, #0
 801a640:	d00d      	beq.n	801a65e <GET_Ckey+0x192>
			strcpy(Rconfig.CKEY4, RB);
 801a642:	4b57      	ldr	r3, [pc, #348]	@ (801a7a0 <GET_Ckey+0x2d4>)
 801a644:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801a646:	4954      	ldr	r1, [pc, #336]	@ (801a798 <GET_Ckey+0x2cc>)
 801a648:	4618      	mov	r0, r3
 801a64a:	f004 fd4e 	bl	801f0ea <strcpy>
			printc(MinDelay, "CKEY4: %s\n", Rconfig.CKEY4);
 801a64e:	4b54      	ldr	r3, [pc, #336]	@ (801a7a0 <GET_Ckey+0x2d4>)
 801a650:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801a652:	461a      	mov	r2, r3
 801a654:	495f      	ldr	r1, [pc, #380]	@ (801a7d4 <GET_Ckey+0x308>)
 801a656:	200a      	movs	r0, #10
 801a658:	f7e7 f9de 	bl	8001a18 <printc>
 801a65c:	e008      	b.n	801a670 <GET_Ckey+0x1a4>
		} else {
			printc(MinDelay, "Memory allocation failed for CKEY4!\n");
 801a65e:	495e      	ldr	r1, [pc, #376]	@ (801a7d8 <GET_Ckey+0x30c>)
 801a660:	200a      	movs	r0, #10
 801a662:	f7e7 f9d9 	bl	8001a18 <printc>
 801a666:	e003      	b.n	801a670 <GET_Ckey+0x1a4>
		}
	} else {
		printc(MinDelay, "Failed to read CKEY4 from flash!\n");
 801a668:	495c      	ldr	r1, [pc, #368]	@ (801a7dc <GET_Ckey+0x310>)
 801a66a:	200a      	movs	r0, #10
 801a66c:	f7e7 f9d4 	bl	8001a18 <printc>
	}
	memset(RB, 0, sizeof(RB));
 801a670:	2264      	movs	r2, #100	@ 0x64
 801a672:	2100      	movs	r1, #0
 801a674:	4848      	ldr	r0, [pc, #288]	@ (801a798 <GET_Ckey+0x2cc>)
 801a676:	f004 fbdb 	bl	801ee30 <memset>
	if (FLASH_Read_Buff(CKEY5_ADDR, RB, 32) == HAL_OK) {
 801a67a:	2220      	movs	r2, #32
 801a67c:	4946      	ldr	r1, [pc, #280]	@ (801a798 <GET_Ckey+0x2cc>)
 801a67e:	4858      	ldr	r0, [pc, #352]	@ (801a7e0 <GET_Ckey+0x314>)
 801a680:	f7fb ffd6 	bl	8016630 <FLASH_Read_Buff>
 801a684:	4603      	mov	r3, r0
 801a686:	2b00      	cmp	r3, #0
 801a688:	d122      	bne.n	801a6d0 <GET_Ckey+0x204>
		Rconfig.CKEY5 = (char*) malloc(strlen(RB) + 1); // Allocate memory for string
 801a68a:	4843      	ldr	r0, [pc, #268]	@ (801a798 <GET_Ckey+0x2cc>)
 801a68c:	f7e5 fe0a 	bl	80002a4 <strlen>
 801a690:	4603      	mov	r3, r0
 801a692:	3301      	adds	r3, #1
 801a694:	4618      	mov	r0, r3
 801a696:	f002 fb5b 	bl	801cd50 <malloc>
 801a69a:	4603      	mov	r3, r0
 801a69c:	461a      	mov	r2, r3
 801a69e:	4b40      	ldr	r3, [pc, #256]	@ (801a7a0 <GET_Ckey+0x2d4>)
 801a6a0:	66da      	str	r2, [r3, #108]	@ 0x6c
		if (Rconfig.CKEY5 != NULL) {
 801a6a2:	4b3f      	ldr	r3, [pc, #252]	@ (801a7a0 <GET_Ckey+0x2d4>)
 801a6a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a6a6:	2b00      	cmp	r3, #0
 801a6a8:	d00d      	beq.n	801a6c6 <GET_Ckey+0x1fa>
			strcpy(Rconfig.CKEY5, RB);
 801a6aa:	4b3d      	ldr	r3, [pc, #244]	@ (801a7a0 <GET_Ckey+0x2d4>)
 801a6ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a6ae:	493a      	ldr	r1, [pc, #232]	@ (801a798 <GET_Ckey+0x2cc>)
 801a6b0:	4618      	mov	r0, r3
 801a6b2:	f004 fd1a 	bl	801f0ea <strcpy>
			printc(MinDelay, "CKEY5: %s\n", Rconfig.CKEY5);
 801a6b6:	4b3a      	ldr	r3, [pc, #232]	@ (801a7a0 <GET_Ckey+0x2d4>)
 801a6b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a6ba:	461a      	mov	r2, r3
 801a6bc:	4949      	ldr	r1, [pc, #292]	@ (801a7e4 <GET_Ckey+0x318>)
 801a6be:	200a      	movs	r0, #10
 801a6c0:	f7e7 f9aa 	bl	8001a18 <printc>
 801a6c4:	e008      	b.n	801a6d8 <GET_Ckey+0x20c>
		} else {
			printc(MinDelay, "Memory allocation failed for CKEY5!\n");
 801a6c6:	4948      	ldr	r1, [pc, #288]	@ (801a7e8 <GET_Ckey+0x31c>)
 801a6c8:	200a      	movs	r0, #10
 801a6ca:	f7e7 f9a5 	bl	8001a18 <printc>
 801a6ce:	e003      	b.n	801a6d8 <GET_Ckey+0x20c>
		}
	} else {
		printc(MinDelay, "Failed to read CKEY5 from flash!\n");
 801a6d0:	4946      	ldr	r1, [pc, #280]	@ (801a7ec <GET_Ckey+0x320>)
 801a6d2:	200a      	movs	r0, #10
 801a6d4:	f7e7 f9a0 	bl	8001a18 <printc>
	}
	memset(RB, 0, sizeof(RB));
 801a6d8:	2264      	movs	r2, #100	@ 0x64
 801a6da:	2100      	movs	r1, #0
 801a6dc:	482e      	ldr	r0, [pc, #184]	@ (801a798 <GET_Ckey+0x2cc>)
 801a6de:	f004 fba7 	bl	801ee30 <memset>
	if (FLASH_Read_Buff(CKEY6_ADDR, RB, 32) == HAL_OK) {
 801a6e2:	2220      	movs	r2, #32
 801a6e4:	492c      	ldr	r1, [pc, #176]	@ (801a798 <GET_Ckey+0x2cc>)
 801a6e6:	4842      	ldr	r0, [pc, #264]	@ (801a7f0 <GET_Ckey+0x324>)
 801a6e8:	f7fb ffa2 	bl	8016630 <FLASH_Read_Buff>
 801a6ec:	4603      	mov	r3, r0
 801a6ee:	2b00      	cmp	r3, #0
 801a6f0:	d122      	bne.n	801a738 <GET_Ckey+0x26c>
		Rconfig.CKEY6 = (char*) malloc(strlen(RB) + 1); // Allocate memory for string
 801a6f2:	4829      	ldr	r0, [pc, #164]	@ (801a798 <GET_Ckey+0x2cc>)
 801a6f4:	f7e5 fdd6 	bl	80002a4 <strlen>
 801a6f8:	4603      	mov	r3, r0
 801a6fa:	3301      	adds	r3, #1
 801a6fc:	4618      	mov	r0, r3
 801a6fe:	f002 fb27 	bl	801cd50 <malloc>
 801a702:	4603      	mov	r3, r0
 801a704:	461a      	mov	r2, r3
 801a706:	4b26      	ldr	r3, [pc, #152]	@ (801a7a0 <GET_Ckey+0x2d4>)
 801a708:	671a      	str	r2, [r3, #112]	@ 0x70
		if (Rconfig.CKEY6 != NULL) {
 801a70a:	4b25      	ldr	r3, [pc, #148]	@ (801a7a0 <GET_Ckey+0x2d4>)
 801a70c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a70e:	2b00      	cmp	r3, #0
 801a710:	d00d      	beq.n	801a72e <GET_Ckey+0x262>
			strcpy(Rconfig.CKEY6, RB);
 801a712:	4b23      	ldr	r3, [pc, #140]	@ (801a7a0 <GET_Ckey+0x2d4>)
 801a714:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a716:	4920      	ldr	r1, [pc, #128]	@ (801a798 <GET_Ckey+0x2cc>)
 801a718:	4618      	mov	r0, r3
 801a71a:	f004 fce6 	bl	801f0ea <strcpy>
			printc(MinDelay, "CKEY6: %s\n", Rconfig.CKEY6);
 801a71e:	4b20      	ldr	r3, [pc, #128]	@ (801a7a0 <GET_Ckey+0x2d4>)
 801a720:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a722:	461a      	mov	r2, r3
 801a724:	4933      	ldr	r1, [pc, #204]	@ (801a7f4 <GET_Ckey+0x328>)
 801a726:	200a      	movs	r0, #10
 801a728:	f7e7 f976 	bl	8001a18 <printc>
 801a72c:	e008      	b.n	801a740 <GET_Ckey+0x274>
		} else {
			printc(MinDelay, "Memory allocation failed for CKEY6!\n");
 801a72e:	4932      	ldr	r1, [pc, #200]	@ (801a7f8 <GET_Ckey+0x32c>)
 801a730:	200a      	movs	r0, #10
 801a732:	f7e7 f971 	bl	8001a18 <printc>
 801a736:	e003      	b.n	801a740 <GET_Ckey+0x274>
		}
	} else {
		printc(MinDelay, "Failed to read CKEY6 from flash!\n");
 801a738:	4930      	ldr	r1, [pc, #192]	@ (801a7fc <GET_Ckey+0x330>)
 801a73a:	200a      	movs	r0, #10
 801a73c:	f7e7 f96c 	bl	8001a18 <printc>
	}
	memset(RB, 0, sizeof(RB));
 801a740:	2264      	movs	r2, #100	@ 0x64
 801a742:	2100      	movs	r1, #0
 801a744:	4814      	ldr	r0, [pc, #80]	@ (801a798 <GET_Ckey+0x2cc>)
 801a746:	f004 fb73 	bl	801ee30 <memset>
	if (FLASH_Read_Buff(CKEY7_ADDR, RB, 32) == HAL_OK) {
 801a74a:	2220      	movs	r2, #32
 801a74c:	4912      	ldr	r1, [pc, #72]	@ (801a798 <GET_Ckey+0x2cc>)
 801a74e:	482c      	ldr	r0, [pc, #176]	@ (801a800 <GET_Ckey+0x334>)
 801a750:	f7fb ff6e 	bl	8016630 <FLASH_Read_Buff>
 801a754:	4603      	mov	r3, r0
 801a756:	2b00      	cmp	r3, #0
 801a758:	d15b      	bne.n	801a812 <GET_Ckey+0x346>
		Rconfig.CKEY7 = (char*) malloc(strlen(RB) + 1); // Allocate memory for string
 801a75a:	480f      	ldr	r0, [pc, #60]	@ (801a798 <GET_Ckey+0x2cc>)
 801a75c:	f7e5 fda2 	bl	80002a4 <strlen>
 801a760:	4603      	mov	r3, r0
 801a762:	3301      	adds	r3, #1
 801a764:	4618      	mov	r0, r3
 801a766:	f002 faf3 	bl	801cd50 <malloc>
 801a76a:	4603      	mov	r3, r0
 801a76c:	461a      	mov	r2, r3
 801a76e:	4b0c      	ldr	r3, [pc, #48]	@ (801a7a0 <GET_Ckey+0x2d4>)
 801a770:	675a      	str	r2, [r3, #116]	@ 0x74
		if (Rconfig.CKEY7 != NULL) {
 801a772:	4b0b      	ldr	r3, [pc, #44]	@ (801a7a0 <GET_Ckey+0x2d4>)
 801a774:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801a776:	2b00      	cmp	r3, #0
 801a778:	d046      	beq.n	801a808 <GET_Ckey+0x33c>
			strcpy(Rconfig.CKEY7, RB);
 801a77a:	4b09      	ldr	r3, [pc, #36]	@ (801a7a0 <GET_Ckey+0x2d4>)
 801a77c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801a77e:	4906      	ldr	r1, [pc, #24]	@ (801a798 <GET_Ckey+0x2cc>)
 801a780:	4618      	mov	r0, r3
 801a782:	f004 fcb2 	bl	801f0ea <strcpy>
			printc(MinDelay, "CKEY7: %s\n", Rconfig.CKEY7);
 801a786:	4b06      	ldr	r3, [pc, #24]	@ (801a7a0 <GET_Ckey+0x2d4>)
 801a788:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801a78a:	461a      	mov	r2, r3
 801a78c:	491d      	ldr	r1, [pc, #116]	@ (801a804 <GET_Ckey+0x338>)
 801a78e:	200a      	movs	r0, #10
 801a790:	f7e7 f942 	bl	8001a18 <printc>
 801a794:	e041      	b.n	801a81a <GET_Ckey+0x34e>
 801a796:	bf00      	nop
 801a798:	20014d30 	.word	0x20014d30
 801a79c:	0816a430 	.word	0x0816a430
 801a7a0:	20014ca0 	.word	0x20014ca0
 801a7a4:	08023a58 	.word	0x08023a58
 801a7a8:	08023a64 	.word	0x08023a64
 801a7ac:	08023a8c 	.word	0x08023a8c
 801a7b0:	0816a450 	.word	0x0816a450
 801a7b4:	08023ab0 	.word	0x08023ab0
 801a7b8:	08023abc 	.word	0x08023abc
 801a7bc:	08023ae4 	.word	0x08023ae4
 801a7c0:	0816a470 	.word	0x0816a470
 801a7c4:	08023b08 	.word	0x08023b08
 801a7c8:	08023b14 	.word	0x08023b14
 801a7cc:	08023b3c 	.word	0x08023b3c
 801a7d0:	0816a490 	.word	0x0816a490
 801a7d4:	08023b60 	.word	0x08023b60
 801a7d8:	08023b6c 	.word	0x08023b6c
 801a7dc:	08023b94 	.word	0x08023b94
 801a7e0:	0816a4b0 	.word	0x0816a4b0
 801a7e4:	08023bb8 	.word	0x08023bb8
 801a7e8:	08023bc4 	.word	0x08023bc4
 801a7ec:	08023bec 	.word	0x08023bec
 801a7f0:	0816a4d0 	.word	0x0816a4d0
 801a7f4:	08023c10 	.word	0x08023c10
 801a7f8:	08023c1c 	.word	0x08023c1c
 801a7fc:	08023c44 	.word	0x08023c44
 801a800:	0816a4f0 	.word	0x0816a4f0
 801a804:	08023c68 	.word	0x08023c68
		} else {
			printc(MinDelay, "Memory allocation failed for CKEY7!\n");
 801a808:	491f      	ldr	r1, [pc, #124]	@ (801a888 <GET_Ckey+0x3bc>)
 801a80a:	200a      	movs	r0, #10
 801a80c:	f7e7 f904 	bl	8001a18 <printc>
 801a810:	e003      	b.n	801a81a <GET_Ckey+0x34e>
		}
	} else {
		printc(MinDelay, "Failed to read CKEY7 from flash!\n");
 801a812:	491e      	ldr	r1, [pc, #120]	@ (801a88c <GET_Ckey+0x3c0>)
 801a814:	200a      	movs	r0, #10
 801a816:	f7e7 f8ff 	bl	8001a18 <printc>
	}
	memset(RB, 0, sizeof(RB));
 801a81a:	2264      	movs	r2, #100	@ 0x64
 801a81c:	2100      	movs	r1, #0
 801a81e:	481c      	ldr	r0, [pc, #112]	@ (801a890 <GET_Ckey+0x3c4>)
 801a820:	f004 fb06 	bl	801ee30 <memset>
	if (FLASH_Read_Buff(CKEY8_ADDR, RB, 32) == HAL_OK) {
 801a824:	2220      	movs	r2, #32
 801a826:	491a      	ldr	r1, [pc, #104]	@ (801a890 <GET_Ckey+0x3c4>)
 801a828:	481a      	ldr	r0, [pc, #104]	@ (801a894 <GET_Ckey+0x3c8>)
 801a82a:	f7fb ff01 	bl	8016630 <FLASH_Read_Buff>
 801a82e:	4603      	mov	r3, r0
 801a830:	2b00      	cmp	r3, #0
 801a832:	d122      	bne.n	801a87a <GET_Ckey+0x3ae>
		Rconfig.CKEY8 = (char*) malloc(strlen(RB) + 1); // Allocate memory for string
 801a834:	4816      	ldr	r0, [pc, #88]	@ (801a890 <GET_Ckey+0x3c4>)
 801a836:	f7e5 fd35 	bl	80002a4 <strlen>
 801a83a:	4603      	mov	r3, r0
 801a83c:	3301      	adds	r3, #1
 801a83e:	4618      	mov	r0, r3
 801a840:	f002 fa86 	bl	801cd50 <malloc>
 801a844:	4603      	mov	r3, r0
 801a846:	461a      	mov	r2, r3
 801a848:	4b13      	ldr	r3, [pc, #76]	@ (801a898 <GET_Ckey+0x3cc>)
 801a84a:	679a      	str	r2, [r3, #120]	@ 0x78
		if (Rconfig.CKEY8 != NULL) {
 801a84c:	4b12      	ldr	r3, [pc, #72]	@ (801a898 <GET_Ckey+0x3cc>)
 801a84e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801a850:	2b00      	cmp	r3, #0
 801a852:	d00d      	beq.n	801a870 <GET_Ckey+0x3a4>
			strcpy(Rconfig.CKEY8, RB);
 801a854:	4b10      	ldr	r3, [pc, #64]	@ (801a898 <GET_Ckey+0x3cc>)
 801a856:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801a858:	490d      	ldr	r1, [pc, #52]	@ (801a890 <GET_Ckey+0x3c4>)
 801a85a:	4618      	mov	r0, r3
 801a85c:	f004 fc45 	bl	801f0ea <strcpy>
			printc(MinDelay, "CKEY8: %s\n", Rconfig.CKEY8);
 801a860:	4b0d      	ldr	r3, [pc, #52]	@ (801a898 <GET_Ckey+0x3cc>)
 801a862:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801a864:	461a      	mov	r2, r3
 801a866:	490d      	ldr	r1, [pc, #52]	@ (801a89c <GET_Ckey+0x3d0>)
 801a868:	200a      	movs	r0, #10
 801a86a:	f7e7 f8d5 	bl	8001a18 <printc>
 801a86e:	e008      	b.n	801a882 <GET_Ckey+0x3b6>
		} else {
			printc(MinDelay, "Memory allocation failed for CKEY8!\n");
 801a870:	490b      	ldr	r1, [pc, #44]	@ (801a8a0 <GET_Ckey+0x3d4>)
 801a872:	200a      	movs	r0, #10
 801a874:	f7e7 f8d0 	bl	8001a18 <printc>
 801a878:	e003      	b.n	801a882 <GET_Ckey+0x3b6>
		}
	} else {
		printc(MinDelay, "Failed to read CKEY8 from flash!\n");
 801a87a:	490a      	ldr	r1, [pc, #40]	@ (801a8a4 <GET_Ckey+0x3d8>)
 801a87c:	200a      	movs	r0, #10
 801a87e:	f7e7 f8cb 	bl	8001a18 <printc>
	}

}
 801a882:	bf00      	nop
 801a884:	4618      	mov	r0, r3
 801a886:	bd80      	pop	{r7, pc}
 801a888:	08023c74 	.word	0x08023c74
 801a88c:	08023c9c 	.word	0x08023c9c
 801a890:	20014d30 	.word	0x20014d30
 801a894:	0816a520 	.word	0x0816a520
 801a898:	20014ca0 	.word	0x20014ca0
 801a89c:	08023cc0 	.word	0x08023cc0
 801a8a0:	08023ccc 	.word	0x08023ccc
 801a8a4:	08023cf4 	.word	0x08023cf4

0801a8a8 <fotaReqestKey>:
#include "main.h"
#include "ledblink.h"
#include "sms.h"
extern char PHnum[10];

void fotaReqestKey() {
 801a8a8:	b580      	push	{r7, lr}
 801a8aa:	af00      	add	r7, sp, #0
	WriteF_SKey();
 801a8ac:	f7fb ff08 	bl	80166c0 <WriteF_SKey>
	EC200_HTTP_POST(1);
 801a8b0:	2001      	movs	r0, #1
 801a8b2:	f7fb f9cb 	bl	8015c4c <EC200_HTTP_POST>

	WriteF_CKey();
 801a8b6:	f7fb ff3b 	bl	8016730 <WriteF_CKey>
}
 801a8ba:	bf00      	nop
 801a8bc:	bd80      	pop	{r7, pc}

0801a8be <fotaUpdate>:
bool fotaUpdate() {
 801a8be:	b580      	push	{r7, lr}
 801a8c0:	af00      	add	r7, sp, #0
	return EC200_HTTP_POST(6);
 801a8c2:	2006      	movs	r0, #6
 801a8c4:	f7fb f9c2 	bl	8015c4c <EC200_HTTP_POST>
 801a8c8:	4603      	mov	r3, r0
 801a8ca:	2b00      	cmp	r3, #0
 801a8cc:	bf14      	ite	ne
 801a8ce:	2301      	movne	r3, #1
 801a8d0:	2300      	moveq	r3, #0
 801a8d2:	b2db      	uxtb	r3, r3
}
 801a8d4:	4618      	mov	r0, r3
 801a8d6:	bd80      	pop	{r7, pc}

0801a8d8 <update>:

void COTA_Update() {
	EC200_HTTP_POST(5);
}

bool update() {
 801a8d8:	b5b0      	push	{r4, r5, r7, lr}
 801a8da:	b08c      	sub	sp, #48	@ 0x30
 801a8dc:	af00      	add	r7, sp, #0

	EC200_Init();
 801a8de:	f7e6 fc91 	bl	8001204 <EC200_Init>
	FUpdate();
 801a8e2:	f000 fdf3 	bl	801b4cc <FUpdate>
	fotaReqestKey();
 801a8e6:	f7ff ffdf 	bl	801a8a8 <fotaReqestKey>

//	COTA_Update();
	if (!fotaUpdate()) {
 801a8ea:	f7ff ffe8 	bl	801a8be <fotaUpdate>
 801a8ee:	4603      	mov	r3, r0
 801a8f0:	f083 0301 	eor.w	r3, r3, #1
 801a8f4:	b2db      	uxtb	r3, r3
 801a8f6:	2b00      	cmp	r3, #0
 801a8f8:	d010      	beq.n	801a91c <update+0x44>
		char SBf[] = { "FOTA_Download Failed" };
 801a8fa:	4b18      	ldr	r3, [pc, #96]	@ (801a95c <update+0x84>)
 801a8fc:	463c      	mov	r4, r7
 801a8fe:	461d      	mov	r5, r3
 801a900:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a902:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a904:	e895 0003 	ldmia.w	r5, {r0, r1}
 801a908:	6020      	str	r0, [r4, #0]
 801a90a:	3404      	adds	r4, #4
 801a90c:	7021      	strb	r1, [r4, #0]
		SMS_FSend(PHnum, SBf);
 801a90e:	463b      	mov	r3, r7
 801a910:	4619      	mov	r1, r3
 801a912:	4813      	ldr	r0, [pc, #76]	@ (801a960 <update+0x88>)
 801a914:	f001 ff9e 	bl	801c854 <SMS_FSend>
		return false;
 801a918:	2300      	movs	r3, #0
 801a91a:	e01b      	b.n	801a954 <update+0x7c>
	}
	FupdateC();
 801a91c:	f000 fde8 	bl	801b4f0 <FupdateC>

	char SBf[] = { "FOTA_Download Complete" };
 801a920:	4b10      	ldr	r3, [pc, #64]	@ (801a964 <update+0x8c>)
 801a922:	f107 0418 	add.w	r4, r7, #24
 801a926:	461d      	mov	r5, r3
 801a928:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a92a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a92c:	e895 0003 	ldmia.w	r5, {r0, r1}
 801a930:	6020      	str	r0, [r4, #0]
 801a932:	3404      	adds	r4, #4
 801a934:	8021      	strh	r1, [r4, #0]
 801a936:	3402      	adds	r4, #2
 801a938:	0c0b      	lsrs	r3, r1, #16
 801a93a:	7023      	strb	r3, [r4, #0]
	SMS_FSend(PHnum, SBf);
 801a93c:	f107 0318 	add.w	r3, r7, #24
 801a940:	4619      	mov	r1, r3
 801a942:	4807      	ldr	r0, [pc, #28]	@ (801a960 <update+0x88>)
 801a944:	f001 ff86 	bl	801c854 <SMS_FSend>
	SET_PHNUM(PHnum);
 801a948:	4805      	ldr	r0, [pc, #20]	@ (801a960 <update+0x88>)
 801a94a:	f7fe fa4f 	bl	8018dec <SET_PHNUM>
	SET_RESET();
 801a94e:	f7fe fa6f 	bl	8018e30 <SET_RESET>

	return true;
 801a952:	2301      	movs	r3, #1

}
 801a954:	4618      	mov	r0, r3
 801a956:	3730      	adds	r7, #48	@ 0x30
 801a958:	46bd      	mov	sp, r7
 801a95a:	bdb0      	pop	{r4, r5, r7, pc}
 801a95c:	08023d18 	.word	0x08023d18
 801a960:	20013848 	.word	0x20013848
 801a964:	08023d30 	.word	0x08023d30

0801a968 <ReadF_Loc>:

void ReadF_Loc(int KeyType, int KeyNumber)
// KeyType Can be 1 or 2 ,  #KeyNumber Should be 1-3 for KeyType-1, #KeyNumber Should be 1-8 for KeyType-2
{
 801a968:	b580      	push	{r7, lr}
 801a96a:	b082      	sub	sp, #8
 801a96c:	af00      	add	r7, sp, #0
 801a96e:	6078      	str	r0, [r7, #4]
 801a970:	6039      	str	r1, [r7, #0]
	switch (KeyType) {
 801a972:	687b      	ldr	r3, [r7, #4]
 801a974:	2b01      	cmp	r3, #1
 801a976:	d003      	beq.n	801a980 <ReadF_Loc+0x18>
 801a978:	687b      	ldr	r3, [r7, #4]
 801a97a:	2b02      	cmp	r3, #2
 801a97c:	d004      	beq.n	801a988 <ReadF_Loc+0x20>
		ReadF_sKey(KeyNumber);
		break;
	case 2:
		ReadF_cKey(KeyNumber);
	default:
		break;
 801a97e:	e006      	b.n	801a98e <ReadF_Loc+0x26>
		ReadF_sKey(KeyNumber);
 801a980:	6838      	ldr	r0, [r7, #0]
 801a982:	f7fb ff41 	bl	8016808 <ReadF_sKey>
		break;
 801a986:	e003      	b.n	801a990 <ReadF_Loc+0x28>
		ReadF_cKey(KeyNumber);
 801a988:	6838      	ldr	r0, [r7, #0]
 801a98a:	f7fb ffa7 	bl	80168dc <ReadF_cKey>
		break;
 801a98e:	bf00      	nop
	}

}
 801a990:	bf00      	nop
 801a992:	3708      	adds	r7, #8
 801a994:	46bd      	mov	sp, r7
 801a996:	bd80      	pop	{r7, pc}

0801a998 <__NVIC_GetPriorityGrouping>:
{
 801a998:	b480      	push	{r7}
 801a99a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801a99c:	4b04      	ldr	r3, [pc, #16]	@ (801a9b0 <__NVIC_GetPriorityGrouping+0x18>)
 801a99e:	68db      	ldr	r3, [r3, #12]
 801a9a0:	0a1b      	lsrs	r3, r3, #8
 801a9a2:	f003 0307 	and.w	r3, r3, #7
}
 801a9a6:	4618      	mov	r0, r3
 801a9a8:	46bd      	mov	sp, r7
 801a9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9ae:	4770      	bx	lr
 801a9b0:	e000ed00 	.word	0xe000ed00

0801a9b4 <__NVIC_EnableIRQ>:
{
 801a9b4:	b480      	push	{r7}
 801a9b6:	b083      	sub	sp, #12
 801a9b8:	af00      	add	r7, sp, #0
 801a9ba:	4603      	mov	r3, r0
 801a9bc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 801a9be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801a9c2:	2b00      	cmp	r3, #0
 801a9c4:	db0b      	blt.n	801a9de <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801a9c6:	88fb      	ldrh	r3, [r7, #6]
 801a9c8:	f003 021f 	and.w	r2, r3, #31
 801a9cc:	4907      	ldr	r1, [pc, #28]	@ (801a9ec <__NVIC_EnableIRQ+0x38>)
 801a9ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801a9d2:	095b      	lsrs	r3, r3, #5
 801a9d4:	2001      	movs	r0, #1
 801a9d6:	fa00 f202 	lsl.w	r2, r0, r2
 801a9da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801a9de:	bf00      	nop
 801a9e0:	370c      	adds	r7, #12
 801a9e2:	46bd      	mov	sp, r7
 801a9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9e8:	4770      	bx	lr
 801a9ea:	bf00      	nop
 801a9ec:	e000e100 	.word	0xe000e100

0801a9f0 <__NVIC_SetPriority>:
{
 801a9f0:	b480      	push	{r7}
 801a9f2:	b083      	sub	sp, #12
 801a9f4:	af00      	add	r7, sp, #0
 801a9f6:	4603      	mov	r3, r0
 801a9f8:	6039      	str	r1, [r7, #0]
 801a9fa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 801a9fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801aa00:	2b00      	cmp	r3, #0
 801aa02:	db0a      	blt.n	801aa1a <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801aa04:	683b      	ldr	r3, [r7, #0]
 801aa06:	b2da      	uxtb	r2, r3
 801aa08:	490c      	ldr	r1, [pc, #48]	@ (801aa3c <__NVIC_SetPriority+0x4c>)
 801aa0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801aa0e:	0112      	lsls	r2, r2, #4
 801aa10:	b2d2      	uxtb	r2, r2
 801aa12:	440b      	add	r3, r1
 801aa14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 801aa18:	e00a      	b.n	801aa30 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801aa1a:	683b      	ldr	r3, [r7, #0]
 801aa1c:	b2da      	uxtb	r2, r3
 801aa1e:	4908      	ldr	r1, [pc, #32]	@ (801aa40 <__NVIC_SetPriority+0x50>)
 801aa20:	88fb      	ldrh	r3, [r7, #6]
 801aa22:	f003 030f 	and.w	r3, r3, #15
 801aa26:	3b04      	subs	r3, #4
 801aa28:	0112      	lsls	r2, r2, #4
 801aa2a:	b2d2      	uxtb	r2, r2
 801aa2c:	440b      	add	r3, r1
 801aa2e:	761a      	strb	r2, [r3, #24]
}
 801aa30:	bf00      	nop
 801aa32:	370c      	adds	r7, #12
 801aa34:	46bd      	mov	sp, r7
 801aa36:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa3a:	4770      	bx	lr
 801aa3c:	e000e100 	.word	0xe000e100
 801aa40:	e000ed00 	.word	0xe000ed00

0801aa44 <NVIC_EncodePriority>:
{
 801aa44:	b480      	push	{r7}
 801aa46:	b089      	sub	sp, #36	@ 0x24
 801aa48:	af00      	add	r7, sp, #0
 801aa4a:	60f8      	str	r0, [r7, #12]
 801aa4c:	60b9      	str	r1, [r7, #8]
 801aa4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801aa50:	68fb      	ldr	r3, [r7, #12]
 801aa52:	f003 0307 	and.w	r3, r3, #7
 801aa56:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801aa58:	69fb      	ldr	r3, [r7, #28]
 801aa5a:	f1c3 0307 	rsb	r3, r3, #7
 801aa5e:	2b04      	cmp	r3, #4
 801aa60:	bf28      	it	cs
 801aa62:	2304      	movcs	r3, #4
 801aa64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801aa66:	69fb      	ldr	r3, [r7, #28]
 801aa68:	3304      	adds	r3, #4
 801aa6a:	2b06      	cmp	r3, #6
 801aa6c:	d902      	bls.n	801aa74 <NVIC_EncodePriority+0x30>
 801aa6e:	69fb      	ldr	r3, [r7, #28]
 801aa70:	3b03      	subs	r3, #3
 801aa72:	e000      	b.n	801aa76 <NVIC_EncodePriority+0x32>
 801aa74:	2300      	movs	r3, #0
 801aa76:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801aa78:	f04f 32ff 	mov.w	r2, #4294967295
 801aa7c:	69bb      	ldr	r3, [r7, #24]
 801aa7e:	fa02 f303 	lsl.w	r3, r2, r3
 801aa82:	43da      	mvns	r2, r3
 801aa84:	68bb      	ldr	r3, [r7, #8]
 801aa86:	401a      	ands	r2, r3
 801aa88:	697b      	ldr	r3, [r7, #20]
 801aa8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801aa8c:	f04f 31ff 	mov.w	r1, #4294967295
 801aa90:	697b      	ldr	r3, [r7, #20]
 801aa92:	fa01 f303 	lsl.w	r3, r1, r3
 801aa96:	43d9      	mvns	r1, r3
 801aa98:	687b      	ldr	r3, [r7, #4]
 801aa9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801aa9c:	4313      	orrs	r3, r2
}
 801aa9e:	4618      	mov	r0, r3
 801aaa0:	3724      	adds	r7, #36	@ 0x24
 801aaa2:	46bd      	mov	sp, r7
 801aaa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aaa8:	4770      	bx	lr

0801aaaa <LL_GPIO_SetPinMode>:
{
 801aaaa:	b480      	push	{r7}
 801aaac:	b08b      	sub	sp, #44	@ 0x2c
 801aaae:	af00      	add	r7, sp, #0
 801aab0:	60f8      	str	r0, [r7, #12]
 801aab2:	60b9      	str	r1, [r7, #8]
 801aab4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * GPIO_MODER_MODE1_Pos)),
 801aab6:	68fb      	ldr	r3, [r7, #12]
 801aab8:	681a      	ldr	r2, [r3, #0]
 801aaba:	68bb      	ldr	r3, [r7, #8]
 801aabc:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801aabe:	697b      	ldr	r3, [r7, #20]
 801aac0:	fa93 f3a3 	rbit	r3, r3
 801aac4:	613b      	str	r3, [r7, #16]
  return result;
 801aac6:	693b      	ldr	r3, [r7, #16]
 801aac8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801aaca:	69bb      	ldr	r3, [r7, #24]
 801aacc:	2b00      	cmp	r3, #0
 801aace:	d101      	bne.n	801aad4 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 801aad0:	2320      	movs	r3, #32
 801aad2:	e003      	b.n	801aadc <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 801aad4:	69bb      	ldr	r3, [r7, #24]
 801aad6:	fab3 f383 	clz	r3, r3
 801aada:	b2db      	uxtb	r3, r3
 801aadc:	005b      	lsls	r3, r3, #1
 801aade:	2103      	movs	r1, #3
 801aae0:	fa01 f303 	lsl.w	r3, r1, r3
 801aae4:	43db      	mvns	r3, r3
 801aae6:	401a      	ands	r2, r3
 801aae8:	68bb      	ldr	r3, [r7, #8]
 801aaea:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801aaec:	6a3b      	ldr	r3, [r7, #32]
 801aaee:	fa93 f3a3 	rbit	r3, r3
 801aaf2:	61fb      	str	r3, [r7, #28]
  return result;
 801aaf4:	69fb      	ldr	r3, [r7, #28]
 801aaf6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 801aaf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aafa:	2b00      	cmp	r3, #0
 801aafc:	d101      	bne.n	801ab02 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 801aafe:	2320      	movs	r3, #32
 801ab00:	e003      	b.n	801ab0a <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 801ab02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ab04:	fab3 f383 	clz	r3, r3
 801ab08:	b2db      	uxtb	r3, r3
 801ab0a:	005b      	lsls	r3, r3, #1
 801ab0c:	6879      	ldr	r1, [r7, #4]
 801ab0e:	fa01 f303 	lsl.w	r3, r1, r3
 801ab12:	431a      	orrs	r2, r3
 801ab14:	68fb      	ldr	r3, [r7, #12]
 801ab16:	601a      	str	r2, [r3, #0]
}
 801ab18:	bf00      	nop
 801ab1a:	372c      	adds	r7, #44	@ 0x2c
 801ab1c:	46bd      	mov	sp, r7
 801ab1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab22:	4770      	bx	lr

0801ab24 <LL_GPIO_SetPinPull>:
{
 801ab24:	b480      	push	{r7}
 801ab26:	b08b      	sub	sp, #44	@ 0x2c
 801ab28:	af00      	add	r7, sp, #0
 801ab2a:	60f8      	str	r0, [r7, #12]
 801ab2c:	60b9      	str	r1, [r7, #8]
 801ab2e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * GPIO_PUPDR_PUPD1_Pos)),
 801ab30:	68fb      	ldr	r3, [r7, #12]
 801ab32:	68da      	ldr	r2, [r3, #12]
 801ab34:	68bb      	ldr	r3, [r7, #8]
 801ab36:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801ab38:	697b      	ldr	r3, [r7, #20]
 801ab3a:	fa93 f3a3 	rbit	r3, r3
 801ab3e:	613b      	str	r3, [r7, #16]
  return result;
 801ab40:	693b      	ldr	r3, [r7, #16]
 801ab42:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801ab44:	69bb      	ldr	r3, [r7, #24]
 801ab46:	2b00      	cmp	r3, #0
 801ab48:	d101      	bne.n	801ab4e <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 801ab4a:	2320      	movs	r3, #32
 801ab4c:	e003      	b.n	801ab56 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 801ab4e:	69bb      	ldr	r3, [r7, #24]
 801ab50:	fab3 f383 	clz	r3, r3
 801ab54:	b2db      	uxtb	r3, r3
 801ab56:	005b      	lsls	r3, r3, #1
 801ab58:	2103      	movs	r1, #3
 801ab5a:	fa01 f303 	lsl.w	r3, r1, r3
 801ab5e:	43db      	mvns	r3, r3
 801ab60:	401a      	ands	r2, r3
 801ab62:	68bb      	ldr	r3, [r7, #8]
 801ab64:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801ab66:	6a3b      	ldr	r3, [r7, #32]
 801ab68:	fa93 f3a3 	rbit	r3, r3
 801ab6c:	61fb      	str	r3, [r7, #28]
  return result;
 801ab6e:	69fb      	ldr	r3, [r7, #28]
 801ab70:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 801ab72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ab74:	2b00      	cmp	r3, #0
 801ab76:	d101      	bne.n	801ab7c <LL_GPIO_SetPinPull+0x58>
    return 32U;
 801ab78:	2320      	movs	r3, #32
 801ab7a:	e003      	b.n	801ab84 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 801ab7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ab7e:	fab3 f383 	clz	r3, r3
 801ab82:	b2db      	uxtb	r3, r3
 801ab84:	005b      	lsls	r3, r3, #1
 801ab86:	6879      	ldr	r1, [r7, #4]
 801ab88:	fa01 f303 	lsl.w	r3, r1, r3
 801ab8c:	431a      	orrs	r2, r3
 801ab8e:	68fb      	ldr	r3, [r7, #12]
 801ab90:	60da      	str	r2, [r3, #12]
}
 801ab92:	bf00      	nop
 801ab94:	372c      	adds	r7, #44	@ 0x2c
 801ab96:	46bd      	mov	sp, r7
 801ab98:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab9c:	4770      	bx	lr

0801ab9e <LL_GPIO_IsInputPinSet>:
{
 801ab9e:	b480      	push	{r7}
 801aba0:	b083      	sub	sp, #12
 801aba2:	af00      	add	r7, sp, #0
 801aba4:	6078      	str	r0, [r7, #4]
 801aba6:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 801aba8:	687b      	ldr	r3, [r7, #4]
 801abaa:	691a      	ldr	r2, [r3, #16]
 801abac:	683b      	ldr	r3, [r7, #0]
 801abae:	4013      	ands	r3, r2
 801abb0:	683a      	ldr	r2, [r7, #0]
 801abb2:	429a      	cmp	r2, r3
 801abb4:	d101      	bne.n	801abba <LL_GPIO_IsInputPinSet+0x1c>
 801abb6:	2301      	movs	r3, #1
 801abb8:	e000      	b.n	801abbc <LL_GPIO_IsInputPinSet+0x1e>
 801abba:	2300      	movs	r3, #0
}
 801abbc:	4618      	mov	r0, r3
 801abbe:	370c      	adds	r7, #12
 801abc0:	46bd      	mov	sp, r7
 801abc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abc6:	4770      	bx	lr

0801abc8 <LL_EXTI_ClearRisingFlag_0_31>:
{
 801abc8:	b480      	push	{r7}
 801abca:	b083      	sub	sp, #12
 801abcc:	af00      	add	r7, sp, #0
 801abce:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->RPR1, ExtiLine);
 801abd0:	4a04      	ldr	r2, [pc, #16]	@ (801abe4 <LL_EXTI_ClearRisingFlag_0_31+0x1c>)
 801abd2:	687b      	ldr	r3, [r7, #4]
 801abd4:	60d3      	str	r3, [r2, #12]
}
 801abd6:	bf00      	nop
 801abd8:	370c      	adds	r7, #12
 801abda:	46bd      	mov	sp, r7
 801abdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abe0:	4770      	bx	lr
 801abe2:	bf00      	nop
 801abe4:	44022000 	.word	0x44022000

0801abe8 <LL_EXTI_SetEXTISource>:
{
 801abe8:	b480      	push	{r7}
 801abea:	b083      	sub	sp, #12
 801abec:	af00      	add	r7, sp, #0
 801abee:	6078      	str	r0, [r7, #4]
 801abf0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(EXTI->EXTICR[Line & 0x03U], EXTI_EXTICR1_EXTI0 << (Line >> LL_EXTI_REGISTER_PINPOS_SHFT), \
 801abf2:	4a10      	ldr	r2, [pc, #64]	@ (801ac34 <LL_EXTI_SetEXTISource+0x4c>)
 801abf4:	683b      	ldr	r3, [r7, #0]
 801abf6:	f003 0303 	and.w	r3, r3, #3
 801abfa:	3318      	adds	r3, #24
 801abfc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801ac00:	683b      	ldr	r3, [r7, #0]
 801ac02:	0c1b      	lsrs	r3, r3, #16
 801ac04:	210f      	movs	r1, #15
 801ac06:	fa01 f303 	lsl.w	r3, r1, r3
 801ac0a:	43db      	mvns	r3, r3
 801ac0c:	ea02 0103 	and.w	r1, r2, r3
 801ac10:	683b      	ldr	r3, [r7, #0]
 801ac12:	0c1b      	lsrs	r3, r3, #16
 801ac14:	687a      	ldr	r2, [r7, #4]
 801ac16:	409a      	lsls	r2, r3
 801ac18:	4806      	ldr	r0, [pc, #24]	@ (801ac34 <LL_EXTI_SetEXTISource+0x4c>)
 801ac1a:	683b      	ldr	r3, [r7, #0]
 801ac1c:	f003 0303 	and.w	r3, r3, #3
 801ac20:	430a      	orrs	r2, r1
 801ac22:	3318      	adds	r3, #24
 801ac24:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 801ac28:	bf00      	nop
 801ac2a:	370c      	adds	r7, #12
 801ac2c:	46bd      	mov	sp, r7
 801ac2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac32:	4770      	bx	lr
 801ac34:	44022000 	.word	0x44022000

0801ac38 <getSleepStatus>:
extern TIM_HandleTypeDef htim6;
extern int FLAG_RESET_On_Sleep;
extern bool sendPDDataFlag;
int FLAG_RESET_On_Sleep =0;
uint32_t WRT_Time = 0x57E40; //0x36EE80;
bool getSleepStatus() {
 801ac38:	b480      	push	{r7}
 801ac3a:	af00      	add	r7, sp, #0
	return sleepStatus;
 801ac3c:	4b03      	ldr	r3, [pc, #12]	@ (801ac4c <getSleepStatus+0x14>)
 801ac3e:	781b      	ldrb	r3, [r3, #0]
}
 801ac40:	4618      	mov	r0, r3
 801ac42:	46bd      	mov	sp, r7
 801ac44:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac48:	4770      	bx	lr
 801ac4a:	bf00      	nop
 801ac4c:	20014dbc 	.word	0x20014dbc

0801ac50 <initEvb>:
void setSleppStatus(bool sleep) {
	sleepStatus = sleep;
}
void initEvb(ADC_HandleTypeDef *adc) {
 801ac50:	b480      	push	{r7}
 801ac52:	b083      	sub	sp, #12
 801ac54:	af00      	add	r7, sp, #0
 801ac56:	6078      	str	r0, [r7, #4]
	evbSense = adc;
 801ac58:	4a04      	ldr	r2, [pc, #16]	@ (801ac6c <initEvb+0x1c>)
 801ac5a:	687b      	ldr	r3, [r7, #4]
 801ac5c:	6013      	str	r3, [r2, #0]
}
 801ac5e:	bf00      	nop
 801ac60:	370c      	adds	r7, #12
 801ac62:	46bd      	mov	sp, r7
 801ac64:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac68:	4770      	bx	lr
 801ac6a:	bf00      	nop
 801ac6c:	20014d98 	.word	0x20014d98

0801ac70 <initIvb>:
void initIvb(ADC_HandleTypeDef *adc) {
 801ac70:	b480      	push	{r7}
 801ac72:	b083      	sub	sp, #12
 801ac74:	af00      	add	r7, sp, #0
 801ac76:	6078      	str	r0, [r7, #4]
	ivbSense = adc;
 801ac78:	4a04      	ldr	r2, [pc, #16]	@ (801ac8c <initIvb+0x1c>)
 801ac7a:	687b      	ldr	r3, [r7, #4]
 801ac7c:	6013      	str	r3, [r2, #0]
}
 801ac7e:	bf00      	nop
 801ac80:	370c      	adds	r7, #12
 801ac82:	46bd      	mov	sp, r7
 801ac84:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac88:	4770      	bx	lr
 801ac8a:	bf00      	nop
 801ac8c:	20014d9c 	.word	0x20014d9c

0801ac90 <getInputVoltage>:

bool getInputVoltage(float *opADC) {
 801ac90:	b580      	push	{r7, lr}
 801ac92:	b084      	sub	sp, #16
 801ac94:	af00      	add	r7, sp, #0
 801ac96:	6078      	str	r0, [r7, #4]
	uint16_t raw = 0;
 801ac98:	2300      	movs	r3, #0
 801ac9a:	81fb      	strh	r3, [r7, #14]
	// Wait for ADC conversion to complete
	HAL_ADC_Start(evbSense);
 801ac9c:	4b26      	ldr	r3, [pc, #152]	@ (801ad38 <getInputVoltage+0xa8>)
 801ac9e:	681b      	ldr	r3, [r3, #0]
 801aca0:	4618      	mov	r0, r3
 801aca2:	f7eb fab9 	bl	8006218 <HAL_ADC_Start>
	if (HAL_ADC_PollForConversion(evbSense, 2000) == HAL_OK) {
 801aca6:	4b24      	ldr	r3, [pc, #144]	@ (801ad38 <getInputVoltage+0xa8>)
 801aca8:	681b      	ldr	r3, [r3, #0]
 801acaa:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 801acae:	4618      	mov	r0, r3
 801acb0:	f7eb fba0 	bl	80063f4 <HAL_ADC_PollForConversion>
 801acb4:	4603      	mov	r3, r0
 801acb6:	2b00      	cmp	r3, #0
 801acb8:	d131      	bne.n	801ad1e <getInputVoltage+0x8e>
		// Read ADC value
		raw = HAL_ADC_GetValue(evbSense);
 801acba:	4b1f      	ldr	r3, [pc, #124]	@ (801ad38 <getInputVoltage+0xa8>)
 801acbc:	681b      	ldr	r3, [r3, #0]
 801acbe:	4618      	mov	r0, r3
 801acc0:	f7eb fc70 	bl	80065a4 <HAL_ADC_GetValue>
 801acc4:	4603      	mov	r3, r0
 801acc6:	81fb      	strh	r3, [r7, #14]
		*opADC = (raw * 3.3 * REFERANCE_VOLTAGE) / ((1 << 12) - 1);
 801acc8:	89fb      	ldrh	r3, [r7, #14]
 801acca:	4618      	mov	r0, r3
 801accc:	f7e5 fc44 	bl	8000558 <__aeabi_i2d>
 801acd0:	a315      	add	r3, pc, #84	@ (adr r3, 801ad28 <getInputVoltage+0x98>)
 801acd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801acd6:	f7e5 fca9 	bl	800062c <__aeabi_dmul>
 801acda:	4602      	mov	r2, r0
 801acdc:	460b      	mov	r3, r1
 801acde:	4610      	mov	r0, r2
 801ace0:	4619      	mov	r1, r3
 801ace2:	f04f 0200 	mov.w	r2, #0
 801ace6:	4b15      	ldr	r3, [pc, #84]	@ (801ad3c <getInputVoltage+0xac>)
 801ace8:	f7e5 fca0 	bl	800062c <__aeabi_dmul>
 801acec:	4602      	mov	r2, r0
 801acee:	460b      	mov	r3, r1
 801acf0:	4610      	mov	r0, r2
 801acf2:	4619      	mov	r1, r3
 801acf4:	a30e      	add	r3, pc, #56	@ (adr r3, 801ad30 <getInputVoltage+0xa0>)
 801acf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801acfa:	f7e5 fdc1 	bl	8000880 <__aeabi_ddiv>
 801acfe:	4602      	mov	r2, r0
 801ad00:	460b      	mov	r3, r1
 801ad02:	4610      	mov	r0, r2
 801ad04:	4619      	mov	r1, r3
 801ad06:	f7e5 ff89 	bl	8000c1c <__aeabi_d2f>
 801ad0a:	4602      	mov	r2, r0
 801ad0c:	687b      	ldr	r3, [r7, #4]
 801ad0e:	601a      	str	r2, [r3, #0]
		// Stop ADC conversion
		HAL_ADC_Stop(evbSense);
 801ad10:	4b09      	ldr	r3, [pc, #36]	@ (801ad38 <getInputVoltage+0xa8>)
 801ad12:	681b      	ldr	r3, [r3, #0]
 801ad14:	4618      	mov	r0, r3
 801ad16:	f7eb fb39 	bl	800638c <HAL_ADC_Stop>
		return true;
 801ad1a:	2301      	movs	r3, #1
 801ad1c:	e000      	b.n	801ad20 <getInputVoltage+0x90>
	}
	return false;
 801ad1e:	2300      	movs	r3, #0
}
 801ad20:	4618      	mov	r0, r3
 801ad22:	3710      	adds	r7, #16
 801ad24:	46bd      	mov	sp, r7
 801ad26:	bd80      	pop	{r7, pc}
 801ad28:	66666666 	.word	0x66666666
 801ad2c:	400a6666 	.word	0x400a6666
 801ad30:	00000000 	.word	0x00000000
 801ad34:	40affe00 	.word	0x40affe00
 801ad38:	20014d98 	.word	0x20014d98
 801ad3c:	40260000 	.word	0x40260000

0801ad40 <getInternalBattery>:
bool getInternalBattery(float *opADC) {
 801ad40:	b580      	push	{r7, lr}
 801ad42:	b084      	sub	sp, #16
 801ad44:	af00      	add	r7, sp, #0
 801ad46:	6078      	str	r0, [r7, #4]
	uint16_t raw = 0;
 801ad48:	2300      	movs	r3, #0
 801ad4a:	81fb      	strh	r3, [r7, #14]
	// Wait for ADC conversion to complete
	HAL_ADC_Start(ivbSense);
 801ad4c:	4b28      	ldr	r3, [pc, #160]	@ (801adf0 <getInternalBattery+0xb0>)
 801ad4e:	681b      	ldr	r3, [r3, #0]
 801ad50:	4618      	mov	r0, r3
 801ad52:	f7eb fa61 	bl	8006218 <HAL_ADC_Start>
	if (HAL_ADC_PollForConversion(ivbSense, 2000) == HAL_OK) {
 801ad56:	4b26      	ldr	r3, [pc, #152]	@ (801adf0 <getInternalBattery+0xb0>)
 801ad58:	681b      	ldr	r3, [r3, #0]
 801ad5a:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 801ad5e:	4618      	mov	r0, r3
 801ad60:	f7eb fb48 	bl	80063f4 <HAL_ADC_PollForConversion>
 801ad64:	4603      	mov	r3, r0
 801ad66:	2b00      	cmp	r3, #0
 801ad68:	d131      	bne.n	801adce <getInternalBattery+0x8e>
		// Read ADC value
		raw = HAL_ADC_GetValue(ivbSense);
 801ad6a:	4b21      	ldr	r3, [pc, #132]	@ (801adf0 <getInternalBattery+0xb0>)
 801ad6c:	681b      	ldr	r3, [r3, #0]
 801ad6e:	4618      	mov	r0, r3
 801ad70:	f7eb fc18 	bl	80065a4 <HAL_ADC_GetValue>
 801ad74:	4603      	mov	r3, r0
 801ad76:	81fb      	strh	r3, [r7, #14]
		*opADC = (raw * 3.3 * INTERNAL_BATTERY) / ((1 << 12) - 1);
 801ad78:	89fb      	ldrh	r3, [r7, #14]
 801ad7a:	4618      	mov	r0, r3
 801ad7c:	f7e5 fbec 	bl	8000558 <__aeabi_i2d>
 801ad80:	a315      	add	r3, pc, #84	@ (adr r3, 801add8 <getInternalBattery+0x98>)
 801ad82:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad86:	f7e5 fc51 	bl	800062c <__aeabi_dmul>
 801ad8a:	4602      	mov	r2, r0
 801ad8c:	460b      	mov	r3, r1
 801ad8e:	4610      	mov	r0, r2
 801ad90:	4619      	mov	r1, r3
 801ad92:	a313      	add	r3, pc, #76	@ (adr r3, 801ade0 <getInternalBattery+0xa0>)
 801ad94:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad98:	f7e5 fc48 	bl	800062c <__aeabi_dmul>
 801ad9c:	4602      	mov	r2, r0
 801ad9e:	460b      	mov	r3, r1
 801ada0:	4610      	mov	r0, r2
 801ada2:	4619      	mov	r1, r3
 801ada4:	a310      	add	r3, pc, #64	@ (adr r3, 801ade8 <getInternalBattery+0xa8>)
 801ada6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801adaa:	f7e5 fd69 	bl	8000880 <__aeabi_ddiv>
 801adae:	4602      	mov	r2, r0
 801adb0:	460b      	mov	r3, r1
 801adb2:	4610      	mov	r0, r2
 801adb4:	4619      	mov	r1, r3
 801adb6:	f7e5 ff31 	bl	8000c1c <__aeabi_d2f>
 801adba:	4602      	mov	r2, r0
 801adbc:	687b      	ldr	r3, [r7, #4]
 801adbe:	601a      	str	r2, [r3, #0]
		// Stop ADC conversion
		HAL_ADC_Stop(evbSense);
 801adc0:	4b0c      	ldr	r3, [pc, #48]	@ (801adf4 <getInternalBattery+0xb4>)
 801adc2:	681b      	ldr	r3, [r3, #0]
 801adc4:	4618      	mov	r0, r3
 801adc6:	f7eb fae1 	bl	800638c <HAL_ADC_Stop>
		return true;
 801adca:	2301      	movs	r3, #1
 801adcc:	e000      	b.n	801add0 <getInternalBattery+0x90>
	}
	return false;
 801adce:	2300      	movs	r3, #0
}
 801add0:	4618      	mov	r0, r3
 801add2:	3710      	adds	r7, #16
 801add4:	46bd      	mov	sp, r7
 801add6:	bd80      	pop	{r7, pc}
 801add8:	66666666 	.word	0x66666666
 801addc:	400a6666 	.word	0x400a6666
 801ade0:	66666666 	.word	0x66666666
 801ade4:	3ffe6666 	.word	0x3ffe6666
 801ade8:	00000000 	.word	0x00000000
 801adec:	40affe00 	.word	0x40affe00
 801adf0:	20014d9c 	.word	0x20014d9c
 801adf4:	20014d98 	.word	0x20014d98

0801adf8 <getIgnition>:

bool getIgnition() {
 801adf8:	b580      	push	{r7, lr}
 801adfa:	af00      	add	r7, sp, #0
	return LL_GPIO_IsInputPinSet(GPIOA, LL_GPIO_PIN_0);
 801adfc:	2101      	movs	r1, #1
 801adfe:	4805      	ldr	r0, [pc, #20]	@ (801ae14 <getIgnition+0x1c>)
 801ae00:	f7ff fecd 	bl	801ab9e <LL_GPIO_IsInputPinSet>
 801ae04:	4603      	mov	r3, r0
 801ae06:	2b00      	cmp	r3, #0
 801ae08:	bf14      	ite	ne
 801ae0a:	2301      	movne	r3, #1
 801ae0c:	2300      	moveq	r3, #0
 801ae0e:	b2db      	uxtb	r3, r3
}
 801ae10:	4618      	mov	r0, r3
 801ae12:	bd80      	pop	{r7, pc}
 801ae14:	42020000 	.word	0x42020000

0801ae18 <getTemperStatus>:

bool getTemperStatus() {
 801ae18:	b580      	push	{r7, lr}
 801ae1a:	af00      	add	r7, sp, #0
	return LL_GPIO_IsInputPinSet(GPIOB, LL_GPIO_PIN_15);
 801ae1c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 801ae20:	4805      	ldr	r0, [pc, #20]	@ (801ae38 <getTemperStatus+0x20>)
 801ae22:	f7ff febc 	bl	801ab9e <LL_GPIO_IsInputPinSet>
 801ae26:	4603      	mov	r3, r0
 801ae28:	2b00      	cmp	r3, #0
 801ae2a:	bf14      	ite	ne
 801ae2c:	2301      	movne	r3, #1
 801ae2e:	2300      	moveq	r3, #0
 801ae30:	b2db      	uxtb	r3, r3
}
 801ae32:	4618      	mov	r0, r3
 801ae34:	bd80      	pop	{r7, pc}
 801ae36:	bf00      	nop
 801ae38:	42020400 	.word	0x42020400

0801ae3c <initRTC>:

void initRTC(RTC_HandleTypeDef *hrtc) {
 801ae3c:	b480      	push	{r7}
 801ae3e:	b083      	sub	sp, #12
 801ae40:	af00      	add	r7, sp, #0
 801ae42:	6078      	str	r0, [r7, #4]
	rtc = hrtc;
 801ae44:	4a04      	ldr	r2, [pc, #16]	@ (801ae58 <initRTC+0x1c>)
 801ae46:	687b      	ldr	r3, [r7, #4]
 801ae48:	6013      	str	r3, [r2, #0]
}
 801ae4a:	bf00      	nop
 801ae4c:	370c      	adds	r7, #12
 801ae4e:	46bd      	mov	sp, r7
 801ae50:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae54:	4770      	bx	lr
 801ae56:	bf00      	nop
 801ae58:	20014da0 	.word	0x20014da0

0801ae5c <setTime>:
bool setTime(uint8_t hours, uint8_t minute, uint8_t second) {
 801ae5c:	b580      	push	{r7, lr}
 801ae5e:	b082      	sub	sp, #8
 801ae60:	af00      	add	r7, sp, #0
 801ae62:	4603      	mov	r3, r0
 801ae64:	71fb      	strb	r3, [r7, #7]
 801ae66:	460b      	mov	r3, r1
 801ae68:	71bb      	strb	r3, [r7, #6]
 801ae6a:	4613      	mov	r3, r2
 801ae6c:	717b      	strb	r3, [r7, #5]
	clearBuffer((uint8_t*) &sTime, sizeof(sTime));
 801ae6e:	2114      	movs	r1, #20
 801ae70:	480e      	ldr	r0, [pc, #56]	@ (801aeac <setTime+0x50>)
 801ae72:	f7e6 fe29 	bl	8001ac8 <clearBuffer>
	sTime.Hours = hours;
 801ae76:	4a0d      	ldr	r2, [pc, #52]	@ (801aeac <setTime+0x50>)
 801ae78:	79fb      	ldrb	r3, [r7, #7]
 801ae7a:	7013      	strb	r3, [r2, #0]
	sTime.Minutes = minute;
 801ae7c:	4a0b      	ldr	r2, [pc, #44]	@ (801aeac <setTime+0x50>)
 801ae7e:	79bb      	ldrb	r3, [r7, #6]
 801ae80:	7053      	strb	r3, [r2, #1]
	sTime.Seconds = second;
 801ae82:	4a0a      	ldr	r2, [pc, #40]	@ (801aeac <setTime+0x50>)
 801ae84:	797b      	ldrb	r3, [r7, #5]
 801ae86:	7093      	strb	r3, [r2, #2]
	if (HAL_RTC_SetTime(rtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) {
 801ae88:	4b09      	ldr	r3, [pc, #36]	@ (801aeb0 <setTime+0x54>)
 801ae8a:	681b      	ldr	r3, [r3, #0]
 801ae8c:	2200      	movs	r2, #0
 801ae8e:	4907      	ldr	r1, [pc, #28]	@ (801aeac <setTime+0x50>)
 801ae90:	4618      	mov	r0, r3
 801ae92:	f7f6 fe59 	bl	8011b48 <HAL_RTC_SetTime>
 801ae96:	4603      	mov	r3, r0
 801ae98:	2b00      	cmp	r3, #0
 801ae9a:	d001      	beq.n	801aea0 <setTime+0x44>
		// Handle error
		return false;
 801ae9c:	2300      	movs	r3, #0
 801ae9e:	e000      	b.n	801aea2 <setTime+0x46>
	}
	return true;
 801aea0:	2301      	movs	r3, #1
}
 801aea2:	4618      	mov	r0, r3
 801aea4:	3708      	adds	r7, #8
 801aea6:	46bd      	mov	sp, r7
 801aea8:	bd80      	pop	{r7, pc}
 801aeaa:	bf00      	nop
 801aeac:	20014da4 	.word	0x20014da4
 801aeb0:	20014da0 	.word	0x20014da0

0801aeb4 <setDate>:
bool setDate(uint8_t date, uint8_t month, uint8_t year) {
 801aeb4:	b580      	push	{r7, lr}
 801aeb6:	b082      	sub	sp, #8
 801aeb8:	af00      	add	r7, sp, #0
 801aeba:	4603      	mov	r3, r0
 801aebc:	71fb      	strb	r3, [r7, #7]
 801aebe:	460b      	mov	r3, r1
 801aec0:	71bb      	strb	r3, [r7, #6]
 801aec2:	4613      	mov	r3, r2
 801aec4:	717b      	strb	r3, [r7, #5]
	clearBuffer((uint8_t*) &sDate, sizeof(sDate));
 801aec6:	2104      	movs	r1, #4
 801aec8:	480e      	ldr	r0, [pc, #56]	@ (801af04 <setDate+0x50>)
 801aeca:	f7e6 fdfd 	bl	8001ac8 <clearBuffer>
	sDate.Date = date;
 801aece:	4a0d      	ldr	r2, [pc, #52]	@ (801af04 <setDate+0x50>)
 801aed0:	79fb      	ldrb	r3, [r7, #7]
 801aed2:	7093      	strb	r3, [r2, #2]
	sDate.Month = month;
 801aed4:	4a0b      	ldr	r2, [pc, #44]	@ (801af04 <setDate+0x50>)
 801aed6:	79bb      	ldrb	r3, [r7, #6]
 801aed8:	7053      	strb	r3, [r2, #1]
	sDate.Year = year;
 801aeda:	4a0a      	ldr	r2, [pc, #40]	@ (801af04 <setDate+0x50>)
 801aedc:	797b      	ldrb	r3, [r7, #5]
 801aede:	70d3      	strb	r3, [r2, #3]
	if (HAL_RTC_SetDate(rtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) {
 801aee0:	4b09      	ldr	r3, [pc, #36]	@ (801af08 <setDate+0x54>)
 801aee2:	681b      	ldr	r3, [r3, #0]
 801aee4:	2200      	movs	r2, #0
 801aee6:	4907      	ldr	r1, [pc, #28]	@ (801af04 <setDate+0x50>)
 801aee8:	4618      	mov	r0, r3
 801aeea:	f7f6 ff21 	bl	8011d30 <HAL_RTC_SetDate>
 801aeee:	4603      	mov	r3, r0
 801aef0:	2b00      	cmp	r3, #0
 801aef2:	d001      	beq.n	801aef8 <setDate+0x44>
		return false;
 801aef4:	2300      	movs	r3, #0
 801aef6:	e000      	b.n	801aefa <setDate+0x46>
	}
	return true;
 801aef8:	2301      	movs	r3, #1
}
 801aefa:	4618      	mov	r0, r3
 801aefc:	3708      	adds	r7, #8
 801aefe:	46bd      	mov	sp, r7
 801af00:	bd80      	pop	{r7, pc}
 801af02:	bf00      	nop
 801af04:	20014db8 	.word	0x20014db8
 801af08:	20014da0 	.word	0x20014da0

0801af0c <getDateTime>:
bool getDateTime(char *opDate, char *opTime) {
 801af0c:	b580      	push	{r7, lr}
 801af0e:	b084      	sub	sp, #16
 801af10:	af02      	add	r7, sp, #8
 801af12:	6078      	str	r0, [r7, #4]
 801af14:	6039      	str	r1, [r7, #0]
	clearBuffer((uint8_t*) &sTime, sizeof(sTime));
 801af16:	2114      	movs	r1, #20
 801af18:	481f      	ldr	r0, [pc, #124]	@ (801af98 <getDateTime+0x8c>)
 801af1a:	f7e6 fdd5 	bl	8001ac8 <clearBuffer>
	clearBuffer((uint8_t*) &sDate, sizeof(sDate));
 801af1e:	2104      	movs	r1, #4
 801af20:	481e      	ldr	r0, [pc, #120]	@ (801af9c <getDateTime+0x90>)
 801af22:	f7e6 fdd1 	bl	8001ac8 <clearBuffer>
	if (HAL_RTC_GetTime(rtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) {
 801af26:	4b1e      	ldr	r3, [pc, #120]	@ (801afa0 <getDateTime+0x94>)
 801af28:	681b      	ldr	r3, [r3, #0]
 801af2a:	2200      	movs	r2, #0
 801af2c:	491a      	ldr	r1, [pc, #104]	@ (801af98 <getDateTime+0x8c>)
 801af2e:	4618      	mov	r0, r3
 801af30:	f7f6 fe9c 	bl	8011c6c <HAL_RTC_GetTime>
 801af34:	4603      	mov	r3, r0
 801af36:	2b00      	cmp	r3, #0
 801af38:	d001      	beq.n	801af3e <getDateTime+0x32>
		return false;
 801af3a:	2300      	movs	r3, #0
 801af3c:	e028      	b.n	801af90 <getDateTime+0x84>
	}
	if (HAL_RTC_GetDate(rtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) {
 801af3e:	4b18      	ldr	r3, [pc, #96]	@ (801afa0 <getDateTime+0x94>)
 801af40:	681b      	ldr	r3, [r3, #0]
 801af42:	2200      	movs	r2, #0
 801af44:	4915      	ldr	r1, [pc, #84]	@ (801af9c <getDateTime+0x90>)
 801af46:	4618      	mov	r0, r3
 801af48:	f7f6 ff78 	bl	8011e3c <HAL_RTC_GetDate>
 801af4c:	4603      	mov	r3, r0
 801af4e:	2b00      	cmp	r3, #0
 801af50:	d001      	beq.n	801af56 <getDateTime+0x4a>
		return false;
 801af52:	2300      	movs	r3, #0
 801af54:	e01c      	b.n	801af90 <getDateTime+0x84>
	}

	sprintf(opDate, "%02d%02d20%02d", sDate.Date, sDate.Month, sDate.Year);
 801af56:	4b11      	ldr	r3, [pc, #68]	@ (801af9c <getDateTime+0x90>)
 801af58:	789b      	ldrb	r3, [r3, #2]
 801af5a:	461a      	mov	r2, r3
 801af5c:	4b0f      	ldr	r3, [pc, #60]	@ (801af9c <getDateTime+0x90>)
 801af5e:	785b      	ldrb	r3, [r3, #1]
 801af60:	4619      	mov	r1, r3
 801af62:	4b0e      	ldr	r3, [pc, #56]	@ (801af9c <getDateTime+0x90>)
 801af64:	78db      	ldrb	r3, [r3, #3]
 801af66:	9300      	str	r3, [sp, #0]
 801af68:	460b      	mov	r3, r1
 801af6a:	490e      	ldr	r1, [pc, #56]	@ (801afa4 <getDateTime+0x98>)
 801af6c:	6878      	ldr	r0, [r7, #4]
 801af6e:	f003 fe03 	bl	801eb78 <siprintf>
	sprintf(opTime, "%02d%02d%02d", sTime.Hours, sTime.Minutes, sTime.Seconds);
 801af72:	4b09      	ldr	r3, [pc, #36]	@ (801af98 <getDateTime+0x8c>)
 801af74:	781b      	ldrb	r3, [r3, #0]
 801af76:	461a      	mov	r2, r3
 801af78:	4b07      	ldr	r3, [pc, #28]	@ (801af98 <getDateTime+0x8c>)
 801af7a:	785b      	ldrb	r3, [r3, #1]
 801af7c:	4619      	mov	r1, r3
 801af7e:	4b06      	ldr	r3, [pc, #24]	@ (801af98 <getDateTime+0x8c>)
 801af80:	789b      	ldrb	r3, [r3, #2]
 801af82:	9300      	str	r3, [sp, #0]
 801af84:	460b      	mov	r3, r1
 801af86:	4908      	ldr	r1, [pc, #32]	@ (801afa8 <getDateTime+0x9c>)
 801af88:	6838      	ldr	r0, [r7, #0]
 801af8a:	f003 fdf5 	bl	801eb78 <siprintf>
	return true;
 801af8e:	2301      	movs	r3, #1
}
 801af90:	4618      	mov	r0, r3
 801af92:	3708      	adds	r7, #8
 801af94:	46bd      	mov	sp, r7
 801af96:	bd80      	pop	{r7, pc}
 801af98:	20014da4 	.word	0x20014da4
 801af9c:	20014db8 	.word	0x20014db8
 801afa0:	20014da0 	.word	0x20014da0
 801afa4:	08023d48 	.word	0x08023d48
 801afa8:	08023d58 	.word	0x08023d58

0801afac <config_IT>:

void config_IT() {
 801afac:	b580      	push	{r7, lr}
 801afae:	af00      	add	r7, sp, #0

	HAL_NVIC_DisableIRQ(EXTI8_IRQn);
 801afb0:	2013      	movs	r0, #19
 801afb2:	f7ec f9c0 	bl	8007336 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_SetPriority(EXTI8_IRQn, 0, 0);
 801afb6:	2200      	movs	r2, #0
 801afb8:	2100      	movs	r1, #0
 801afba:	2013      	movs	r0, #19
 801afbc:	f7ec f993 	bl	80072e6 <HAL_NVIC_SetPriority>
	HAL_NVIC_DisableIRQ(EXTI15_IRQn);
 801afc0:	201a      	movs	r0, #26
 801afc2:	f7ec f9b8 	bl	8007336 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_SetPriority(EXTI15_IRQn, 0, 0);
 801afc6:	2200      	movs	r2, #0
 801afc8:	2100      	movs	r1, #0
 801afca:	201a      	movs	r0, #26
 801afcc:	f7ec f98b 	bl	80072e6 <HAL_NVIC_SetPriority>
	HAL_NVIC_DisableIRQ(TIM6_IRQn);
 801afd0:	2031      	movs	r0, #49	@ 0x31
 801afd2:	f7ec f9b0 	bl	8007336 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 801afd6:	2200      	movs	r2, #0
 801afd8:	2100      	movs	r1, #0
 801afda:	2031      	movs	r0, #49	@ 0x31
 801afdc:	f7ec f983 	bl	80072e6 <HAL_NVIC_SetPriority>
	HAL_NVIC_DisableIRQ(USART1_IRQn);
 801afe0:	203a      	movs	r0, #58	@ 0x3a
 801afe2:	f7ec f9a8 	bl	8007336 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 801afe6:	2200      	movs	r2, #0
 801afe8:	2100      	movs	r1, #0
 801afea:	203a      	movs	r0, #58	@ 0x3a
 801afec:	f7ec f97b 	bl	80072e6 <HAL_NVIC_SetPriority>
	HAL_NVIC_DisableIRQ(UART5_IRQn);
 801aff0:	203e      	movs	r0, #62	@ 0x3e
 801aff2:	f7ec f9a0 	bl	8007336 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 801aff6:	2200      	movs	r2, #0
 801aff8:	2100      	movs	r1, #0
 801affa:	203e      	movs	r0, #62	@ 0x3e
 801affc:	f7ec f973 	bl	80072e6 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 0, 0);
 801b000:	2200      	movs	r2, #0
 801b002:	2100      	movs	r1, #0
 801b004:	206d      	movs	r0, #109	@ 0x6d
 801b006:	f7ec f96e 	bl	80072e6 <HAL_NVIC_SetPriority>
	HAL_NVIC_DisableIRQ(FDCAN2_IT0_IRQn);
 801b00a:	206d      	movs	r0, #109	@ 0x6d
 801b00c:	f7ec f993 	bl	8007336 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_SetPriority(GPDMA1_Channel4_IRQn, 0, 0);
 801b010:	2200      	movs	r2, #0
 801b012:	2100      	movs	r1, #0
 801b014:	201f      	movs	r0, #31
 801b016:	f7ec f966 	bl	80072e6 <HAL_NVIC_SetPriority>
	HAL_NVIC_DisableIRQ(GPDMA1_Channel4_IRQn);
 801b01a:	201f      	movs	r0, #31
 801b01c:	f7ec f98b 	bl	8007336 <HAL_NVIC_DisableIRQ>

	HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 801b020:	2200      	movs	r2, #0
 801b022:	2100      	movs	r1, #0
 801b024:	2027      	movs	r0, #39	@ 0x27
 801b026:	f7ec f95e 	bl	80072e6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 801b02a:	2027      	movs	r0, #39	@ 0x27
 801b02c:	f7ec f975 	bl	800731a <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(USART6_IRQn);
 801b030:	2055      	movs	r0, #85	@ 0x55
 801b032:	f7ec f972 	bl	800731a <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 801b036:	2200      	movs	r2, #0
 801b038:	2100      	movs	r1, #0
 801b03a:	2055      	movs	r0, #85	@ 0x55
 801b03c:	f7ec f953 	bl	80072e6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(RTC_IRQn);
 801b040:	2002      	movs	r0, #2
 801b042:	f7ec f96a 	bl	800731a <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 801b046:	2200      	movs	r2, #0
 801b048:	2100      	movs	r1, #0
 801b04a:	2002      	movs	r0, #2
 801b04c:	f7ec f94b 	bl	80072e6 <HAL_NVIC_SetPriority>

}
 801b050:	bf00      	nop
 801b052:	bd80      	pop	{r7, pc}

0801b054 <On_Wakeup_Config>:
void On_Wakeup_Config() {
 801b054:	b580      	push	{r7, lr}
 801b056:	af00      	add	r7, sp, #0

	HAL_NVIC_EnableIRQ(EXTI8_IRQn);
 801b058:	2013      	movs	r0, #19
 801b05a:	f7ec f95e 	bl	800731a <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(EXTI8_IRQn, 0, 0);
 801b05e:	2200      	movs	r2, #0
 801b060:	2100      	movs	r1, #0
 801b062:	2013      	movs	r0, #19
 801b064:	f7ec f93f 	bl	80072e6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_IRQn);
 801b068:	201a      	movs	r0, #26
 801b06a:	f7ec f956 	bl	800731a <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(EXTI15_IRQn, 0, 0);
 801b06e:	2200      	movs	r2, #0
 801b070:	2100      	movs	r1, #0
 801b072:	201a      	movs	r0, #26
 801b074:	f7ec f937 	bl	80072e6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM6_IRQn);
 801b078:	2031      	movs	r0, #49	@ 0x31
 801b07a:	f7ec f94e 	bl	800731a <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 801b07e:	2200      	movs	r2, #0
 801b080:	2100      	movs	r1, #0
 801b082:	2031      	movs	r0, #49	@ 0x31
 801b084:	f7ec f92f 	bl	80072e6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 801b088:	203a      	movs	r0, #58	@ 0x3a
 801b08a:	f7ec f946 	bl	800731a <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 801b08e:	2200      	movs	r2, #0
 801b090:	2100      	movs	r1, #0
 801b092:	203a      	movs	r0, #58	@ 0x3a
 801b094:	f7ec f927 	bl	80072e6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(UART5_IRQn);
 801b098:	203e      	movs	r0, #62	@ 0x3e
 801b09a:	f7ec f93e 	bl	800731a <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 801b09e:	2200      	movs	r2, #0
 801b0a0:	2100      	movs	r1, #0
 801b0a2:	203e      	movs	r0, #62	@ 0x3e
 801b0a4:	f7ec f91f 	bl	80072e6 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 0, 0);
 801b0a8:	2200      	movs	r2, #0
 801b0aa:	2100      	movs	r1, #0
 801b0ac:	206d      	movs	r0, #109	@ 0x6d
 801b0ae:	f7ec f91a 	bl	80072e6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 801b0b2:	206d      	movs	r0, #109	@ 0x6d
 801b0b4:	f7ec f931 	bl	800731a <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(GPDMA1_Channel4_IRQn, 0, 0);
 801b0b8:	2200      	movs	r2, #0
 801b0ba:	2100      	movs	r1, #0
 801b0bc:	201f      	movs	r0, #31
 801b0be:	f7ec f912 	bl	80072e6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(GPDMA1_Channel4_IRQn);
 801b0c2:	201f      	movs	r0, #31
 801b0c4:	f7ec f929 	bl	800731a <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 801b0c8:	2200      	movs	r2, #0
 801b0ca:	2100      	movs	r1, #0
 801b0cc:	2027      	movs	r0, #39	@ 0x27
 801b0ce:	f7ec f90a 	bl	80072e6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 801b0d2:	2027      	movs	r0, #39	@ 0x27
 801b0d4:	f7ec f921 	bl	800731a <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(USART6_IRQn);
 801b0d8:	2055      	movs	r0, #85	@ 0x55
 801b0da:	f7ec f91e 	bl	800731a <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 801b0de:	2200      	movs	r2, #0
 801b0e0:	2100      	movs	r1, #0
 801b0e2:	2055      	movs	r0, #85	@ 0x55
 801b0e4:	f7ec f8ff 	bl	80072e6 <HAL_NVIC_SetPriority>
	HAL_NVIC_DisableIRQ(RTC_IRQn);
 801b0e8:	2002      	movs	r0, #2
 801b0ea:	f7ec f924 	bl	8007336 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 801b0ee:	2200      	movs	r2, #0
 801b0f0:	2100      	movs	r1, #0
 801b0f2:	2002      	movs	r0, #2
 801b0f4:	f7ec f8f7 	bl	80072e6 <HAL_NVIC_SetPriority>

}
 801b0f8:	bf00      	nop
 801b0fa:	bd80      	pop	{r7, pc}

0801b0fc <Configure_RTC_WakeUp_Timer>:

void Configure_RTC_WakeUp_Timer() {
 801b0fc:	b580      	push	{r7, lr}
 801b0fe:	af00      	add	r7, sp, #0

	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 1800,
 801b100:	2300      	movs	r3, #0
 801b102:	2204      	movs	r2, #4
 801b104:	f44f 61e1 	mov.w	r1, #1800	@ 0x708
 801b108:	4804      	ldr	r0, [pc, #16]	@ (801b11c <Configure_RTC_WakeUp_Timer+0x20>)
 801b10a:	f7f6 ffcd 	bl	80120a8 <HAL_RTCEx_SetWakeUpTimer_IT>
 801b10e:	4603      	mov	r3, r0
 801b110:	2b00      	cmp	r3, #0
 801b112:	d001      	beq.n	801b118 <Configure_RTC_WakeUp_Timer+0x1c>
	RTC_WAKEUPCLOCK_CK_SPRE_16BITS, 0) != HAL_OK) {
		Error_Handler();
 801b114:	f7e9 fb33 	bl	800477e <Error_Handler>
	}


}
 801b118:	bf00      	nop
 801b11a:	bd80      	pop	{r7, pc}
 801b11c:	20013b34 	.word	0x20013b34

0801b120 <GO_TO_SLEEP>:
void GO_TO_SLEEP() {
 801b120:	b580      	push	{r7, lr}
 801b122:	af00      	add	r7, sp, #0
	if (LL_GPIO_IsInputPinSet(GPIOA, LL_GPIO_PIN_0) == RESET) {
 801b124:	2101      	movs	r1, #1
 801b126:	480b      	ldr	r0, [pc, #44]	@ (801b154 <GO_TO_SLEEP+0x34>)
 801b128:	f7ff fd39 	bl	801ab9e <LL_GPIO_IsInputPinSet>
 801b12c:	4603      	mov	r3, r0
 801b12e:	2b00      	cmp	r3, #0
 801b130:	d10e      	bne.n	801b150 <GO_TO_SLEEP+0x30>
		printc(MinDelay, "Sleep_routine\r\n");
 801b132:	4909      	ldr	r1, [pc, #36]	@ (801b158 <GO_TO_SLEEP+0x38>)
 801b134:	200a      	movs	r0, #10
 801b136:	f7e6 fc6f 	bl	8001a18 <printc>
		FLAG_RESET_On_Sleep =1;
 801b13a:	4b08      	ldr	r3, [pc, #32]	@ (801b15c <GO_TO_SLEEP+0x3c>)
 801b13c:	2201      	movs	r2, #1
 801b13e:	601a      	str	r2, [r3, #0]
		Sleep_routine();
 801b140:	f7e7 fcaa 	bl	8002a98 <Sleep_routine>


		printc(MinDelay, "Sleep_Mode\r\n");
 801b144:	4906      	ldr	r1, [pc, #24]	@ (801b160 <GO_TO_SLEEP+0x40>)
 801b146:	200a      	movs	r0, #10
 801b148:	f7e6 fc66 	bl	8001a18 <printc>
		HAL_NVIC_SystemReset();
 801b14c:	f7ec f901 	bl	8007352 <HAL_NVIC_SystemReset>
	}

}
 801b150:	bf00      	nop
 801b152:	bd80      	pop	{r7, pc}
 801b154:	42020000 	.word	0x42020000
 801b158:	08023d68 	.word	0x08023d68
 801b15c:	20014dc0 	.word	0x20014dc0
 801b160:	08023d78 	.word	0x08023d78

0801b164 <Disable_EXTI0>:

// Function to disable EXTI line 0 interrupt
void Disable_EXTI0() {
 801b164:	b580      	push	{r7, lr}
 801b166:	af00      	add	r7, sp, #0
	// Disable EXTI0 interrupt
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 801b168:	200b      	movs	r0, #11
 801b16a:	f7ec f8e4 	bl	8007336 <HAL_NVIC_DisableIRQ>
	// Clear any pending EXTI0 interrupt
	LL_EXTI_ClearRisingFlag_0_31(LL_EXTI_EXTI_LINE0);
 801b16e:	2000      	movs	r0, #0
 801b170:	f7ff fd2a 	bl	801abc8 <LL_EXTI_ClearRisingFlag_0_31>

}
 801b174:	bf00      	nop
 801b176:	bd80      	pop	{r7, pc}

0801b178 <SL_WK_GPIO_Int>:

void SL_WK_GPIO_Int() {
 801b178:	b580      	push	{r7, lr}
 801b17a:	b084      	sub	sp, #16
 801b17c:	af00      	add	r7, sp, #0

	LL_EXTI_InitTypeDef EXTI_InitStruct = { 0 };
 801b17e:	1d3b      	adds	r3, r7, #4
 801b180:	2200      	movs	r2, #0
 801b182:	601a      	str	r2, [r3, #0]
 801b184:	605a      	str	r2, [r3, #4]
 801b186:	609a      	str	r2, [r3, #8]
	LL_EXTI_SetEXTISource(LL_EXTI_EXTI_PORTA, LL_EXTI_EXTI_LINE0);
 801b188:	2100      	movs	r1, #0
 801b18a:	2000      	movs	r0, #0
 801b18c:	f7ff fd2c 	bl	801abe8 <LL_EXTI_SetEXTISource>

	EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 801b190:	2301      	movs	r3, #1
 801b192:	607b      	str	r3, [r7, #4]
	EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 801b194:	2300      	movs	r3, #0
 801b196:	60bb      	str	r3, [r7, #8]
	EXTI_InitStruct.LineCommand = ENABLE;
 801b198:	2301      	movs	r3, #1
 801b19a:	733b      	strb	r3, [r7, #12]
	EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 801b19c:	2300      	movs	r3, #0
 801b19e:	737b      	strb	r3, [r7, #13]
	EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 801b1a0:	2301      	movs	r3, #1
 801b1a2:	73bb      	strb	r3, [r7, #14]
	LL_EXTI_Init(&EXTI_InitStruct);
 801b1a4:	1d3b      	adds	r3, r7, #4
 801b1a6:	4618      	mov	r0, r3
 801b1a8:	f7fa f9ca 	bl	8015540 <LL_EXTI_Init>
	LL_GPIO_SetPinPull(GPIOA, LL_GPIO_PIN_0, LL_GPIO_PULL_NO);
 801b1ac:	2200      	movs	r2, #0
 801b1ae:	2101      	movs	r1, #1
 801b1b0:	480d      	ldr	r0, [pc, #52]	@ (801b1e8 <SL_WK_GPIO_Int+0x70>)
 801b1b2:	f7ff fcb7 	bl	801ab24 <LL_GPIO_SetPinPull>
	LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_0, LL_GPIO_MODE_INPUT);
 801b1b6:	2200      	movs	r2, #0
 801b1b8:	2101      	movs	r1, #1
 801b1ba:	480b      	ldr	r0, [pc, #44]	@ (801b1e8 <SL_WK_GPIO_Int+0x70>)
 801b1bc:	f7ff fc75 	bl	801aaaa <LL_GPIO_SetPinMode>
	NVIC_SetPriority(EXTI0_IRQn,
 801b1c0:	f7ff fbea 	bl	801a998 <__NVIC_GetPriorityGrouping>
 801b1c4:	4603      	mov	r3, r0
 801b1c6:	2200      	movs	r2, #0
 801b1c8:	2100      	movs	r1, #0
 801b1ca:	4618      	mov	r0, r3
 801b1cc:	f7ff fc3a 	bl	801aa44 <NVIC_EncodePriority>
 801b1d0:	4603      	mov	r3, r0
 801b1d2:	4619      	mov	r1, r3
 801b1d4:	200b      	movs	r0, #11
 801b1d6:	f7ff fc0b 	bl	801a9f0 <__NVIC_SetPriority>
			NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 0, 0));
	NVIC_EnableIRQ(EXTI0_IRQn);
 801b1da:	200b      	movs	r0, #11
 801b1dc:	f7ff fbea 	bl	801a9b4 <__NVIC_EnableIRQ>
}
 801b1e0:	bf00      	nop
 801b1e2:	3710      	adds	r7, #16
 801b1e4:	46bd      	mov	sp, r7
 801b1e6:	bd80      	pop	{r7, pc}
 801b1e8:	42020000 	.word	0x42020000

0801b1ec <Turn_OFF_Modules>:
////	init();
//	Disable_EXTI0();
//	wakeUpRoutine();
//}

void Turn_OFF_Modules() {
 801b1ec:	b580      	push	{r7, lr}
 801b1ee:	af00      	add	r7, sp, #0
	GNSS_OFF();
 801b1f0:	2201      	movs	r2, #1
 801b1f2:	2104      	movs	r1, #4
 801b1f4:	480f      	ldr	r0, [pc, #60]	@ (801b234 <Turn_OFF_Modules+0x48>)
 801b1f6:	f7f0 fb3d 	bl	800b874 <HAL_GPIO_WritePin>
	GPIO_LTE_OFF();
 801b1fa:	2200      	movs	r2, #0
 801b1fc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801b200:	480d      	ldr	r0, [pc, #52]	@ (801b238 <Turn_OFF_Modules+0x4c>)
 801b202:	f7f0 fb37 	bl	800b874 <HAL_GPIO_WritePin>
	GPS_LIGHT_OFF();
 801b206:	2201      	movs	r2, #1
 801b208:	2110      	movs	r1, #16
 801b20a:	480c      	ldr	r0, [pc, #48]	@ (801b23c <Turn_OFF_Modules+0x50>)
 801b20c:	f7f0 fb32 	bl	800b874 <HAL_GPIO_WritePin>
	PWR_LIGHT_OFF();
 801b210:	2201      	movs	r2, #1
 801b212:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801b216:	4809      	ldr	r0, [pc, #36]	@ (801b23c <Turn_OFF_Modules+0x50>)
 801b218:	f7f0 fb2c 	bl	800b874 <HAL_GPIO_WritePin>
	GSM_LIGHT_OFF();
 801b21c:	2201      	movs	r2, #1
 801b21e:	2180      	movs	r1, #128	@ 0x80
 801b220:	4806      	ldr	r0, [pc, #24]	@ (801b23c <Turn_OFF_Modules+0x50>)
 801b222:	f7f0 fb27 	bl	800b874 <HAL_GPIO_WritePin>
	GPIO_3V3_OFF();
 801b226:	2201      	movs	r2, #1
 801b228:	2108      	movs	r1, #8
 801b22a:	4804      	ldr	r0, [pc, #16]	@ (801b23c <Turn_OFF_Modules+0x50>)
 801b22c:	f7f0 fb22 	bl	800b874 <HAL_GPIO_WritePin>
}
 801b230:	bf00      	nop
 801b232:	bd80      	pop	{r7, pc}
 801b234:	42020c00 	.word	0x42020c00
 801b238:	42020800 	.word	0x42020800
 801b23c:	42020400 	.word	0x42020400

0801b240 <Sleep_Mode>:
	GNSS_ON();
	GPIO_LTE_ON();

}
void Sleep_Mode()
{
 801b240:	b580      	push	{r7, lr}
 801b242:	b082      	sub	sp, #8
 801b244:	af00      	add	r7, sp, #0
	char SF[8] = { 0 };
 801b246:	2300      	movs	r3, #0
 801b248:	603b      	str	r3, [r7, #0]
 801b24a:	2300      	movs	r3, #0
 801b24c:	607b      	str	r3, [r7, #4]
	FLASH_Read_Buff(FL_On_Sl_Addr, SF, 8);
 801b24e:	463b      	mov	r3, r7
 801b250:	2208      	movs	r2, #8
 801b252:	4619      	mov	r1, r3
 801b254:	4819      	ldr	r0, [pc, #100]	@ (801b2bc <Sleep_Mode+0x7c>)
 801b256:	f7fb f9eb 	bl	8016630 <FLASH_Read_Buff>
	FLAG_RESET_On_Sleep = SF[0];
 801b25a:	783b      	ldrb	r3, [r7, #0]
 801b25c:	461a      	mov	r2, r3
 801b25e:	4b18      	ldr	r3, [pc, #96]	@ (801b2c0 <Sleep_Mode+0x80>)
 801b260:	601a      	str	r2, [r3, #0]
	if (FLAG_RESET_On_Sleep == 1) {
 801b262:	4b17      	ldr	r3, [pc, #92]	@ (801b2c0 <Sleep_Mode+0x80>)
 801b264:	681b      	ldr	r3, [r3, #0]
 801b266:	2b01      	cmp	r3, #1
 801b268:	d123      	bne.n	801b2b2 <Sleep_Mode+0x72>
		sendPDDataFlag = true;
 801b26a:	4b16      	ldr	r3, [pc, #88]	@ (801b2c4 <Sleep_Mode+0x84>)
 801b26c:	2201      	movs	r2, #1
 801b26e:	701a      	strb	r2, [r3, #0]
//		setSleppStatus(true);
		config_IT();
 801b270:	f7ff fe9c 	bl	801afac <config_IT>
		SL_WK_GPIO_Int();
 801b274:	f7ff ff80 	bl	801b178 <SL_WK_GPIO_Int>
		Configure_RTC_WakeUp_Timer();
 801b278:	f7ff ff40 	bl	801b0fc <Configure_RTC_WakeUp_Timer>
		__HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);
 801b27c:	4b12      	ldr	r3, [pc, #72]	@ (801b2c8 <Sleep_Mode+0x88>)
 801b27e:	699b      	ldr	r3, [r3, #24]
 801b280:	4a11      	ldr	r2, [pc, #68]	@ (801b2c8 <Sleep_Mode+0x88>)
 801b282:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 801b286:	6193      	str	r3, [r2, #24]
		Turn_OFF_Modules();
 801b288:	f7ff ffb0 	bl	801b1ec <Turn_OFF_Modules>
		HAL_PWR_EnableSleepOnExit();
 801b28c:	f7f0 fbee 	bl	800ba6c <HAL_PWR_EnableSleepOnExit>
		HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 801b290:	2101      	movs	r1, #1
 801b292:	2000      	movs	r0, #0
 801b294:	f7f0 fbce 	bl	800ba34 <HAL_PWR_EnterSLEEPMode>

		getAllConfig();
 801b298:	f7fd ff20 	bl	80190dc <getAllConfig>
		FLAG_RESET_On_Sleep = 0;
 801b29c:	4b08      	ldr	r3, [pc, #32]	@ (801b2c0 <Sleep_Mode+0x80>)
 801b29e:	2200      	movs	r2, #0
 801b2a0:	601a      	str	r2, [r3, #0]
		FeedAllConfig();
 801b2a2:	f7fd ffcb 	bl	801923c <FeedAllConfig>
		Disable_EXTI0();
 801b2a6:	f7ff ff5d 	bl	801b164 <Disable_EXTI0>
		printc(MinDelay, "\r\nWokeUp\r\n");
 801b2aa:	4908      	ldr	r1, [pc, #32]	@ (801b2cc <Sleep_Mode+0x8c>)
 801b2ac:	200a      	movs	r0, #10
 801b2ae:	f7e6 fbb3 	bl	8001a18 <printc>
//		setSleppStatus(false);
	}
}
 801b2b2:	bf00      	nop
 801b2b4:	3708      	adds	r7, #8
 801b2b6:	46bd      	mov	sp, r7
 801b2b8:	bd80      	pop	{r7, pc}
 801b2ba:	bf00      	nop
 801b2bc:	0816a660 	.word	0x0816a660
 801b2c0:	20014dc0 	.word	0x20014dc0
 801b2c4:	20012f2d 	.word	0x20012f2d
 801b2c8:	44007800 	.word	0x44007800
 801b2cc:	08023d88 	.word	0x08023d88

0801b2d0 <togleState>:
#define HEIGH_TIME 200
#define LOW_TIME 20
LedHendler ledHendler = { .gpsLedState = LOW, .gsmLedState = LOW, .pwrLedState =
		SOLID, .isGpsLightON = false, .isGsmLightON = false, .isPwrLightON =
false };
void togleState(bool *var) {
 801b2d0:	b480      	push	{r7}
 801b2d2:	b083      	sub	sp, #12
 801b2d4:	af00      	add	r7, sp, #0
 801b2d6:	6078      	str	r0, [r7, #4]
	*var = !(*var);
 801b2d8:	687b      	ldr	r3, [r7, #4]
 801b2da:	781b      	ldrb	r3, [r3, #0]
 801b2dc:	2b00      	cmp	r3, #0
 801b2de:	bf14      	ite	ne
 801b2e0:	2301      	movne	r3, #1
 801b2e2:	2300      	moveq	r3, #0
 801b2e4:	b2db      	uxtb	r3, r3
 801b2e6:	f083 0301 	eor.w	r3, r3, #1
 801b2ea:	b2db      	uxtb	r3, r3
 801b2ec:	f003 0301 	and.w	r3, r3, #1
 801b2f0:	b2da      	uxtb	r2, r3
 801b2f2:	687b      	ldr	r3, [r7, #4]
 801b2f4:	701a      	strb	r2, [r3, #0]
}
 801b2f6:	bf00      	nop
 801b2f8:	370c      	adds	r7, #12
 801b2fa:	46bd      	mov	sp, r7
 801b2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b300:	4770      	bx	lr
	...

0801b304 <handleGps>:
void handleGps() {
 801b304:	b580      	push	{r7, lr}
 801b306:	af00      	add	r7, sp, #0
	if (ledHendler.isGpsLightON)
 801b308:	4b09      	ldr	r3, [pc, #36]	@ (801b330 <handleGps+0x2c>)
 801b30a:	78db      	ldrb	r3, [r3, #3]
 801b30c:	2b00      	cmp	r3, #0
 801b30e:	d005      	beq.n	801b31c <handleGps+0x18>
		GPS_LIGHT_ON();
 801b310:	2200      	movs	r2, #0
 801b312:	2110      	movs	r1, #16
 801b314:	4807      	ldr	r0, [pc, #28]	@ (801b334 <handleGps+0x30>)
 801b316:	f7f0 faad 	bl	800b874 <HAL_GPIO_WritePin>
 801b31a:	e004      	b.n	801b326 <handleGps+0x22>
	else
		GPS_LIGHT_OFF();
 801b31c:	2201      	movs	r2, #1
 801b31e:	2110      	movs	r1, #16
 801b320:	4804      	ldr	r0, [pc, #16]	@ (801b334 <handleGps+0x30>)
 801b322:	f7f0 faa7 	bl	800b874 <HAL_GPIO_WritePin>
	togleState(&ledHendler.isGpsLightON);
 801b326:	4804      	ldr	r0, [pc, #16]	@ (801b338 <handleGps+0x34>)
 801b328:	f7ff ffd2 	bl	801b2d0 <togleState>
}
 801b32c:	bf00      	nop
 801b32e:	bd80      	pop	{r7, pc}
 801b330:	200000a4 	.word	0x200000a4
 801b334:	42020400 	.word	0x42020400
 801b338:	200000a7 	.word	0x200000a7

0801b33c <handleGsm>:
void handleGsm() {
 801b33c:	b580      	push	{r7, lr}
 801b33e:	af00      	add	r7, sp, #0
	if (ledHendler.isGsmLightON)
 801b340:	4b09      	ldr	r3, [pc, #36]	@ (801b368 <handleGsm+0x2c>)
 801b342:	791b      	ldrb	r3, [r3, #4]
 801b344:	2b00      	cmp	r3, #0
 801b346:	d005      	beq.n	801b354 <handleGsm+0x18>
		GSM_LIGHT_ON();
 801b348:	2200      	movs	r2, #0
 801b34a:	2180      	movs	r1, #128	@ 0x80
 801b34c:	4807      	ldr	r0, [pc, #28]	@ (801b36c <handleGsm+0x30>)
 801b34e:	f7f0 fa91 	bl	800b874 <HAL_GPIO_WritePin>
 801b352:	e004      	b.n	801b35e <handleGsm+0x22>
	else
		GSM_LIGHT_OFF();
 801b354:	2201      	movs	r2, #1
 801b356:	2180      	movs	r1, #128	@ 0x80
 801b358:	4804      	ldr	r0, [pc, #16]	@ (801b36c <handleGsm+0x30>)
 801b35a:	f7f0 fa8b 	bl	800b874 <HAL_GPIO_WritePin>
	togleState(&ledHendler.isGsmLightON);
 801b35e:	4804      	ldr	r0, [pc, #16]	@ (801b370 <handleGsm+0x34>)
 801b360:	f7ff ffb6 	bl	801b2d0 <togleState>
}
 801b364:	bf00      	nop
 801b366:	bd80      	pop	{r7, pc}
 801b368:	200000a4 	.word	0x200000a4
 801b36c:	42020400 	.word	0x42020400
 801b370:	200000a8 	.word	0x200000a8

0801b374 <handlePwr>:
void handlePwr() {
 801b374:	b580      	push	{r7, lr}
 801b376:	af00      	add	r7, sp, #0
	if (ledHendler.isPwrLightON)
 801b378:	4b0a      	ldr	r3, [pc, #40]	@ (801b3a4 <handlePwr+0x30>)
 801b37a:	795b      	ldrb	r3, [r3, #5]
 801b37c:	2b00      	cmp	r3, #0
 801b37e:	d006      	beq.n	801b38e <handlePwr+0x1a>
		PWR_LIGHT_ON();
 801b380:	2200      	movs	r2, #0
 801b382:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801b386:	4808      	ldr	r0, [pc, #32]	@ (801b3a8 <handlePwr+0x34>)
 801b388:	f7f0 fa74 	bl	800b874 <HAL_GPIO_WritePin>
 801b38c:	e005      	b.n	801b39a <handlePwr+0x26>
	else
		PWR_LIGHT_OFF();
 801b38e:	2201      	movs	r2, #1
 801b390:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801b394:	4804      	ldr	r0, [pc, #16]	@ (801b3a8 <handlePwr+0x34>)
 801b396:	f7f0 fa6d 	bl	800b874 <HAL_GPIO_WritePin>
	togleState(&ledHendler.isPwrLightON);
 801b39a:	4804      	ldr	r0, [pc, #16]	@ (801b3ac <handlePwr+0x38>)
 801b39c:	f7ff ff98 	bl	801b2d0 <togleState>
}
 801b3a0:	bf00      	nop
 801b3a2:	bd80      	pop	{r7, pc}
 801b3a4:	200000a4 	.word	0x200000a4
 801b3a8:	42020400 	.word	0x42020400
 801b3ac:	200000a9 	.word	0x200000a9

0801b3b0 <blinkLed>:
void blinkLed(int time) {
 801b3b0:	b580      	push	{r7, lr}
 801b3b2:	b082      	sub	sp, #8
 801b3b4:	af00      	add	r7, sp, #0
 801b3b6:	6078      	str	r0, [r7, #4]
	if ((time % HEIGH_TIME) == 0) {
 801b3b8:	687a      	ldr	r2, [r7, #4]
 801b3ba:	4b40      	ldr	r3, [pc, #256]	@ (801b4bc <blinkLed+0x10c>)
 801b3bc:	fb83 1302 	smull	r1, r3, r3, r2
 801b3c0:	1199      	asrs	r1, r3, #6
 801b3c2:	17d3      	asrs	r3, r2, #31
 801b3c4:	1acb      	subs	r3, r1, r3
 801b3c6:	21c8      	movs	r1, #200	@ 0xc8
 801b3c8:	fb01 f303 	mul.w	r3, r1, r3
 801b3cc:	1ad3      	subs	r3, r2, r3
 801b3ce:	2b00      	cmp	r3, #0
 801b3d0:	d14f      	bne.n	801b472 <blinkLed+0xc2>
		if (ledHendler.gpsLedState == HEIGH)
 801b3d2:	4b3b      	ldr	r3, [pc, #236]	@ (801b4c0 <blinkLed+0x110>)
 801b3d4:	781b      	ldrb	r3, [r3, #0]
 801b3d6:	2b00      	cmp	r3, #0
 801b3d8:	d102      	bne.n	801b3e0 <blinkLed+0x30>
			handleGps();
 801b3da:	f7ff ff93 	bl	801b304 <handleGps>
 801b3de:	e012      	b.n	801b406 <blinkLed+0x56>
		else if (ledHendler.gpsLedState == SOLID)
 801b3e0:	4b37      	ldr	r3, [pc, #220]	@ (801b4c0 <blinkLed+0x110>)
 801b3e2:	781b      	ldrb	r3, [r3, #0]
 801b3e4:	2b03      	cmp	r3, #3
 801b3e6:	d105      	bne.n	801b3f4 <blinkLed+0x44>
			GPS_LIGHT_ON();
 801b3e8:	2200      	movs	r2, #0
 801b3ea:	2110      	movs	r1, #16
 801b3ec:	4835      	ldr	r0, [pc, #212]	@ (801b4c4 <blinkLed+0x114>)
 801b3ee:	f7f0 fa41 	bl	800b874 <HAL_GPIO_WritePin>
 801b3f2:	e008      	b.n	801b406 <blinkLed+0x56>
		else if (ledHendler.gpsLedState == OFF)
 801b3f4:	4b32      	ldr	r3, [pc, #200]	@ (801b4c0 <blinkLed+0x110>)
 801b3f6:	781b      	ldrb	r3, [r3, #0]
 801b3f8:	2b02      	cmp	r3, #2
 801b3fa:	d104      	bne.n	801b406 <blinkLed+0x56>
			GPS_LIGHT_OFF();
 801b3fc:	2201      	movs	r2, #1
 801b3fe:	2110      	movs	r1, #16
 801b400:	4830      	ldr	r0, [pc, #192]	@ (801b4c4 <blinkLed+0x114>)
 801b402:	f7f0 fa37 	bl	800b874 <HAL_GPIO_WritePin>

		if (ledHendler.gsmLedState == HEIGH)
 801b406:	4b2e      	ldr	r3, [pc, #184]	@ (801b4c0 <blinkLed+0x110>)
 801b408:	785b      	ldrb	r3, [r3, #1]
 801b40a:	2b00      	cmp	r3, #0
 801b40c:	d102      	bne.n	801b414 <blinkLed+0x64>
			handleGsm();
 801b40e:	f7ff ff95 	bl	801b33c <handleGsm>
 801b412:	e012      	b.n	801b43a <blinkLed+0x8a>
		else if (ledHendler.gsmLedState == SOLID)
 801b414:	4b2a      	ldr	r3, [pc, #168]	@ (801b4c0 <blinkLed+0x110>)
 801b416:	785b      	ldrb	r3, [r3, #1]
 801b418:	2b03      	cmp	r3, #3
 801b41a:	d105      	bne.n	801b428 <blinkLed+0x78>
			GSM_LIGHT_ON();
 801b41c:	2200      	movs	r2, #0
 801b41e:	2180      	movs	r1, #128	@ 0x80
 801b420:	4828      	ldr	r0, [pc, #160]	@ (801b4c4 <blinkLed+0x114>)
 801b422:	f7f0 fa27 	bl	800b874 <HAL_GPIO_WritePin>
 801b426:	e008      	b.n	801b43a <blinkLed+0x8a>
		else if (ledHendler.gsmLedState == OFF)
 801b428:	4b25      	ldr	r3, [pc, #148]	@ (801b4c0 <blinkLed+0x110>)
 801b42a:	785b      	ldrb	r3, [r3, #1]
 801b42c:	2b02      	cmp	r3, #2
 801b42e:	d104      	bne.n	801b43a <blinkLed+0x8a>
			GSM_LIGHT_OFF();
 801b430:	2201      	movs	r2, #1
 801b432:	2180      	movs	r1, #128	@ 0x80
 801b434:	4823      	ldr	r0, [pc, #140]	@ (801b4c4 <blinkLed+0x114>)
 801b436:	f7f0 fa1d 	bl	800b874 <HAL_GPIO_WritePin>
		if (ledHendler.pwrLedState == SOLID)
 801b43a:	4b21      	ldr	r3, [pc, #132]	@ (801b4c0 <blinkLed+0x110>)
 801b43c:	789b      	ldrb	r3, [r3, #2]
 801b43e:	2b03      	cmp	r3, #3
 801b440:	d106      	bne.n	801b450 <blinkLed+0xa0>
			PWR_LIGHT_ON();
 801b442:	2200      	movs	r2, #0
 801b444:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801b448:	481e      	ldr	r0, [pc, #120]	@ (801b4c4 <blinkLed+0x114>)
 801b44a:	f7f0 fa13 	bl	800b874 <HAL_GPIO_WritePin>
 801b44e:	e010      	b.n	801b472 <blinkLed+0xc2>
		else if (ledHendler.pwrLedState == OFF)
 801b450:	4b1b      	ldr	r3, [pc, #108]	@ (801b4c0 <blinkLed+0x110>)
 801b452:	789b      	ldrb	r3, [r3, #2]
 801b454:	2b02      	cmp	r3, #2
 801b456:	d106      	bne.n	801b466 <blinkLed+0xb6>
			PWR_LIGHT_OFF();
 801b458:	2201      	movs	r2, #1
 801b45a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801b45e:	4819      	ldr	r0, [pc, #100]	@ (801b4c4 <blinkLed+0x114>)
 801b460:	f7f0 fa08 	bl	800b874 <HAL_GPIO_WritePin>
 801b464:	e005      	b.n	801b472 <blinkLed+0xc2>
		else if (ledHendler.pwrLedState == HEIGH)
 801b466:	4b16      	ldr	r3, [pc, #88]	@ (801b4c0 <blinkLed+0x110>)
 801b468:	789b      	ldrb	r3, [r3, #2]
 801b46a:	2b00      	cmp	r3, #0
 801b46c:	d101      	bne.n	801b472 <blinkLed+0xc2>
			handlePwr();
 801b46e:	f7ff ff81 	bl	801b374 <handlePwr>
	}
	if (time % LOW_TIME == 0) {
 801b472:	6879      	ldr	r1, [r7, #4]
 801b474:	4b14      	ldr	r3, [pc, #80]	@ (801b4c8 <blinkLed+0x118>)
 801b476:	fb83 2301 	smull	r2, r3, r3, r1
 801b47a:	10da      	asrs	r2, r3, #3
 801b47c:	17cb      	asrs	r3, r1, #31
 801b47e:	1ad2      	subs	r2, r2, r3
 801b480:	4613      	mov	r3, r2
 801b482:	009b      	lsls	r3, r3, #2
 801b484:	4413      	add	r3, r2
 801b486:	009b      	lsls	r3, r3, #2
 801b488:	1aca      	subs	r2, r1, r3
 801b48a:	2a00      	cmp	r2, #0
 801b48c:	d111      	bne.n	801b4b2 <blinkLed+0x102>
		if (ledHendler.gpsLedState == LOW)
 801b48e:	4b0c      	ldr	r3, [pc, #48]	@ (801b4c0 <blinkLed+0x110>)
 801b490:	781b      	ldrb	r3, [r3, #0]
 801b492:	2b01      	cmp	r3, #1
 801b494:	d101      	bne.n	801b49a <blinkLed+0xea>
			handleGps();
 801b496:	f7ff ff35 	bl	801b304 <handleGps>
		if (ledHendler.gsmLedState == LOW)
 801b49a:	4b09      	ldr	r3, [pc, #36]	@ (801b4c0 <blinkLed+0x110>)
 801b49c:	785b      	ldrb	r3, [r3, #1]
 801b49e:	2b01      	cmp	r3, #1
 801b4a0:	d101      	bne.n	801b4a6 <blinkLed+0xf6>
			handleGsm();
 801b4a2:	f7ff ff4b 	bl	801b33c <handleGsm>
		if (ledHendler.pwrLedState == LOW)
 801b4a6:	4b06      	ldr	r3, [pc, #24]	@ (801b4c0 <blinkLed+0x110>)
 801b4a8:	789b      	ldrb	r3, [r3, #2]
 801b4aa:	2b01      	cmp	r3, #1
 801b4ac:	d101      	bne.n	801b4b2 <blinkLed+0x102>
			handlePwr();
 801b4ae:	f7ff ff61 	bl	801b374 <handlePwr>
	}

}
 801b4b2:	bf00      	nop
 801b4b4:	3708      	adds	r7, #8
 801b4b6:	46bd      	mov	sp, r7
 801b4b8:	bd80      	pop	{r7, pc}
 801b4ba:	bf00      	nop
 801b4bc:	51eb851f 	.word	0x51eb851f
 801b4c0:	200000a4 	.word	0x200000a4
 801b4c4:	42020400 	.word	0x42020400
 801b4c8:	66666667 	.word	0x66666667

0801b4cc <FUpdate>:

void FUpdate() {
 801b4cc:	b480      	push	{r7}
 801b4ce:	af00      	add	r7, sp, #0
		ledHendler.pwrLedState=HEIGH;
 801b4d0:	4b06      	ldr	r3, [pc, #24]	@ (801b4ec <FUpdate+0x20>)
 801b4d2:	2200      	movs	r2, #0
 801b4d4:	709a      	strb	r2, [r3, #2]
		ledHendler.gsmLedState=OFF;
 801b4d6:	4b05      	ldr	r3, [pc, #20]	@ (801b4ec <FUpdate+0x20>)
 801b4d8:	2202      	movs	r2, #2
 801b4da:	705a      	strb	r2, [r3, #1]
		ledHendler.gpsLedState=OFF;
 801b4dc:	4b03      	ldr	r3, [pc, #12]	@ (801b4ec <FUpdate+0x20>)
 801b4de:	2202      	movs	r2, #2
 801b4e0:	701a      	strb	r2, [r3, #0]

		}
 801b4e2:	bf00      	nop
 801b4e4:	46bd      	mov	sp, r7
 801b4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4ea:	4770      	bx	lr
 801b4ec:	200000a4 	.word	0x200000a4

0801b4f0 <FupdateC>:
void FupdateC()
{
 801b4f0:	b580      	push	{r7, lr}
 801b4f2:	af00      	add	r7, sp, #0
	ledHendler.pwrLedState=SOLID;
 801b4f4:	4b0d      	ldr	r3, [pc, #52]	@ (801b52c <FupdateC+0x3c>)
 801b4f6:	2203      	movs	r2, #3
 801b4f8:	709a      	strb	r2, [r3, #2]
	ledHendler.gsmLedState=SOLID;
 801b4fa:	4b0c      	ldr	r3, [pc, #48]	@ (801b52c <FupdateC+0x3c>)
 801b4fc:	2203      	movs	r2, #3
 801b4fe:	705a      	strb	r2, [r3, #1]
	ledHendler.gpsLedState=SOLID;
 801b500:	4b0a      	ldr	r3, [pc, #40]	@ (801b52c <FupdateC+0x3c>)
 801b502:	2203      	movs	r2, #3
 801b504:	701a      	strb	r2, [r3, #0]
	PWR_LIGHT_ON();
 801b506:	2200      	movs	r2, #0
 801b508:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801b50c:	4808      	ldr	r0, [pc, #32]	@ (801b530 <FupdateC+0x40>)
 801b50e:	f7f0 f9b1 	bl	800b874 <HAL_GPIO_WritePin>
	GPS_LIGHT_ON();
 801b512:	2200      	movs	r2, #0
 801b514:	2110      	movs	r1, #16
 801b516:	4806      	ldr	r0, [pc, #24]	@ (801b530 <FupdateC+0x40>)
 801b518:	f7f0 f9ac 	bl	800b874 <HAL_GPIO_WritePin>
	GSM_LIGHT_ON();
 801b51c:	2200      	movs	r2, #0
 801b51e:	2180      	movs	r1, #128	@ 0x80
 801b520:	4803      	ldr	r0, [pc, #12]	@ (801b530 <FupdateC+0x40>)
 801b522:	f7f0 f9a7 	bl	800b874 <HAL_GPIO_WritePin>
}
 801b526:	bf00      	nop
 801b528:	bd80      	pop	{r7, pc}
 801b52a:	bf00      	nop
 801b52c:	200000a4 	.word	0x200000a4
 801b530:	42020400 	.word	0x42020400

0801b534 <L86_setup>:
struct GPSData *GPSDataTmp = NULL;
bool isTimeSet = false;
bool isDateSet = false;
char hourStr[3], minuteStr[3], secondStr[3];

void L86_setup(UART_HandleTypeDef *uart) {
 801b534:	b580      	push	{r7, lr}
 801b536:	b082      	sub	sp, #8
 801b538:	af00      	add	r7, sp, #0
 801b53a:	6078      	str	r0, [r7, #4]
	L86_uart = uart;
 801b53c:	4a0b      	ldr	r2, [pc, #44]	@ (801b56c <L86_setup+0x38>)
 801b53e:	687b      	ldr	r3, [r7, #4]
 801b540:	6013      	str	r3, [r2, #0]
	POWER_3V3_ON();
 801b542:	2200      	movs	r2, #0
 801b544:	2108      	movs	r1, #8
 801b546:	480a      	ldr	r0, [pc, #40]	@ (801b570 <L86_setup+0x3c>)
 801b548:	f7f0 f994 	bl	800b874 <HAL_GPIO_WritePin>
	GPS_LIGHT_ON();
 801b54c:	2200      	movs	r2, #0
 801b54e:	2110      	movs	r1, #16
 801b550:	4807      	ldr	r0, [pc, #28]	@ (801b570 <L86_setup+0x3c>)
 801b552:	f7f0 f98f 	bl	800b874 <HAL_GPIO_WritePin>
	GNSS_ON();
 801b556:	2200      	movs	r2, #0
 801b558:	2104      	movs	r1, #4
 801b55a:	4806      	ldr	r0, [pc, #24]	@ (801b574 <L86_setup+0x40>)
 801b55c:	f7f0 f98a 	bl	800b874 <HAL_GPIO_WritePin>
	L86_uart_Init();
 801b560:	f000 f80a 	bl	801b578 <L86_uart_Init>
}
 801b564:	bf00      	nop
 801b566:	3708      	adds	r7, #8
 801b568:	46bd      	mov	sp, r7
 801b56a:	bd80      	pop	{r7, pc}
 801b56c:	20014dc4 	.word	0x20014dc4
 801b570:	42020400 	.word	0x42020400
 801b574:	42020c00 	.word	0x42020c00

0801b578 <L86_uart_Init>:
void L86_uart_Init(void) {
 801b578:	b5b0      	push	{r4, r5, r7, lr}
 801b57a:	b0dc      	sub	sp, #368	@ 0x170
 801b57c:	af00      	add	r7, sp, #0
	uint8_t data[200] = { };
 801b57e:	2300      	movs	r3, #0
 801b580:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 801b584:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 801b588:	22c4      	movs	r2, #196	@ 0xc4
 801b58a:	2100      	movs	r1, #0
 801b58c:	4618      	mov	r0, r3
 801b58e:	f003 fc4f 	bl	801ee30 <memset>
	uint8_t GGA[] = "$PAIR062,0,2*3C\r\n";
 801b592:	4bb6      	ldr	r3, [pc, #728]	@ (801b86c <L86_uart_Init+0x2f4>)
 801b594:	f107 0494 	add.w	r4, r7, #148	@ 0x94
 801b598:	461d      	mov	r5, r3
 801b59a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b59c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b59e:	682b      	ldr	r3, [r5, #0]
 801b5a0:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(L86_uart, (uint8_t*) GGA, 50, 1000);
 801b5a2:	4bb3      	ldr	r3, [pc, #716]	@ (801b870 <L86_uart_Init+0x2f8>)
 801b5a4:	6818      	ldr	r0, [r3, #0]
 801b5a6:	f107 0194 	add.w	r1, r7, #148	@ 0x94
 801b5aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801b5ae:	2232      	movs	r2, #50	@ 0x32
 801b5b0:	f7f7 fb70 	bl	8012c94 <HAL_UART_Transmit>
	HAL_Delay(1000);
 801b5b4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 801b5b8:	f7ea fa16 	bl	80059e8 <HAL_Delay>
	HAL_UART_Receive(L86_uart, data, 200, 500);
 801b5bc:	4bac      	ldr	r3, [pc, #688]	@ (801b870 <L86_uart_Init+0x2f8>)
 801b5be:	6818      	ldr	r0, [r3, #0]
 801b5c0:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 801b5c4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 801b5c8:	22c8      	movs	r2, #200	@ 0xc8
 801b5ca:	f7f7 fc01 	bl	8012dd0 <HAL_UART_Receive>
	print(100, data, 200);
 801b5ce:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 801b5d2:	22c8      	movs	r2, #200	@ 0xc8
 801b5d4:	4619      	mov	r1, r3
 801b5d6:	2064      	movs	r0, #100	@ 0x64
 801b5d8:	f7e6 fa5a 	bl	8001a90 <print>
	printc(MinDelay, "\n");
 801b5dc:	49a5      	ldr	r1, [pc, #660]	@ (801b874 <L86_uart_Init+0x2fc>)
 801b5de:	200a      	movs	r0, #10
 801b5e0:	f7e6 fa1a 	bl	8001a18 <printc>

	uint8_t GLL[] = "$PAIR062,1,0*3F\r\n";
 801b5e4:	4ba4      	ldr	r3, [pc, #656]	@ (801b878 <L86_uart_Init+0x300>)
 801b5e6:	f107 0480 	add.w	r4, r7, #128	@ 0x80
 801b5ea:	461d      	mov	r5, r3
 801b5ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b5ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b5f0:	682b      	ldr	r3, [r5, #0]
 801b5f2:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(L86_uart, (uint8_t*) GLL, 50, 1000);
 801b5f4:	4b9e      	ldr	r3, [pc, #632]	@ (801b870 <L86_uart_Init+0x2f8>)
 801b5f6:	6818      	ldr	r0, [r3, #0]
 801b5f8:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 801b5fc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801b600:	2232      	movs	r2, #50	@ 0x32
 801b602:	f7f7 fb47 	bl	8012c94 <HAL_UART_Transmit>
	HAL_Delay(1000);
 801b606:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 801b60a:	f7ea f9ed 	bl	80059e8 <HAL_Delay>
	HAL_UART_Receive(L86_uart, data, 200, 500);
 801b60e:	4b98      	ldr	r3, [pc, #608]	@ (801b870 <L86_uart_Init+0x2f8>)
 801b610:	6818      	ldr	r0, [r3, #0]
 801b612:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 801b616:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 801b61a:	22c8      	movs	r2, #200	@ 0xc8
 801b61c:	f7f7 fbd8 	bl	8012dd0 <HAL_UART_Receive>
	print(1000, data, 200);
 801b620:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 801b624:	22c8      	movs	r2, #200	@ 0xc8
 801b626:	4619      	mov	r1, r3
 801b628:	20e8      	movs	r0, #232	@ 0xe8
 801b62a:	f7e6 fa31 	bl	8001a90 <print>
	printc(MinDelay, "\n");
 801b62e:	4991      	ldr	r1, [pc, #580]	@ (801b874 <L86_uart_Init+0x2fc>)
 801b630:	200a      	movs	r0, #10
 801b632:	f7e6 f9f1 	bl	8001a18 <printc>

	uint8_t GSA[] = "$PAIR062,2,2*3E\r\n";
 801b636:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 801b63a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 801b63e:	4a8f      	ldr	r2, [pc, #572]	@ (801b87c <L86_uart_Init+0x304>)
 801b640:	461c      	mov	r4, r3
 801b642:	4615      	mov	r5, r2
 801b644:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b646:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b648:	682b      	ldr	r3, [r5, #0]
 801b64a:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(L86_uart, (uint8_t*) GSA, 50, 1000);
 801b64c:	4b88      	ldr	r3, [pc, #544]	@ (801b870 <L86_uart_Init+0x2f8>)
 801b64e:	6818      	ldr	r0, [r3, #0]
 801b650:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 801b654:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801b658:	2232      	movs	r2, #50	@ 0x32
 801b65a:	f7f7 fb1b 	bl	8012c94 <HAL_UART_Transmit>
	HAL_Delay(100);
 801b65e:	2064      	movs	r0, #100	@ 0x64
 801b660:	f7ea f9c2 	bl	80059e8 <HAL_Delay>
	HAL_UART_Receive(L86_uart, data, 200, 500);
 801b664:	4b82      	ldr	r3, [pc, #520]	@ (801b870 <L86_uart_Init+0x2f8>)
 801b666:	6818      	ldr	r0, [r3, #0]
 801b668:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 801b66c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 801b670:	22c8      	movs	r2, #200	@ 0xc8
 801b672:	f7f7 fbad 	bl	8012dd0 <HAL_UART_Receive>
	print(1000, data, 200);
 801b676:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 801b67a:	22c8      	movs	r2, #200	@ 0xc8
 801b67c:	4619      	mov	r1, r3
 801b67e:	20e8      	movs	r0, #232	@ 0xe8
 801b680:	f7e6 fa06 	bl	8001a90 <print>
	printc(MinDelay, "\n");
 801b684:	497b      	ldr	r1, [pc, #492]	@ (801b874 <L86_uart_Init+0x2fc>)
 801b686:	200a      	movs	r0, #10
 801b688:	f7e6 f9c6 	bl	8001a18 <printc>

	uint8_t GSV[] = "$PAIR062,3,0*3D\r\n";
 801b68c:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 801b690:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 801b694:	4a7a      	ldr	r2, [pc, #488]	@ (801b880 <L86_uart_Init+0x308>)
 801b696:	461c      	mov	r4, r3
 801b698:	4615      	mov	r5, r2
 801b69a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b69c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b69e:	682b      	ldr	r3, [r5, #0]
 801b6a0:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(L86_uart, (uint8_t*) GSV, 50, 1000);
 801b6a2:	4b73      	ldr	r3, [pc, #460]	@ (801b870 <L86_uart_Init+0x2f8>)
 801b6a4:	6818      	ldr	r0, [r3, #0]
 801b6a6:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 801b6aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801b6ae:	2232      	movs	r2, #50	@ 0x32
 801b6b0:	f7f7 faf0 	bl	8012c94 <HAL_UART_Transmit>
	HAL_Delay(1000);
 801b6b4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 801b6b8:	f7ea f996 	bl	80059e8 <HAL_Delay>
	HAL_UART_Receive(L86_uart, data, 200, 500);
 801b6bc:	4b6c      	ldr	r3, [pc, #432]	@ (801b870 <L86_uart_Init+0x2f8>)
 801b6be:	6818      	ldr	r0, [r3, #0]
 801b6c0:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 801b6c4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 801b6c8:	22c8      	movs	r2, #200	@ 0xc8
 801b6ca:	f7f7 fb81 	bl	8012dd0 <HAL_UART_Receive>
	print(100, data, 200);
 801b6ce:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 801b6d2:	22c8      	movs	r2, #200	@ 0xc8
 801b6d4:	4619      	mov	r1, r3
 801b6d6:	2064      	movs	r0, #100	@ 0x64
 801b6d8:	f7e6 f9da 	bl	8001a90 <print>
	printc(MinDelay, "\n");
 801b6dc:	4965      	ldr	r1, [pc, #404]	@ (801b874 <L86_uart_Init+0x2fc>)
 801b6de:	200a      	movs	r0, #10
 801b6e0:	f7e6 f99a 	bl	8001a18 <printc>

	uint8_t RMC[] = "$PAIR062,4,2*38\r\n";
 801b6e4:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 801b6e8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801b6ec:	4a65      	ldr	r2, [pc, #404]	@ (801b884 <L86_uart_Init+0x30c>)
 801b6ee:	461c      	mov	r4, r3
 801b6f0:	4615      	mov	r5, r2
 801b6f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b6f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b6f6:	682b      	ldr	r3, [r5, #0]
 801b6f8:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(L86_uart, (uint8_t*) RMC, 50, 1000);
 801b6fa:	4b5d      	ldr	r3, [pc, #372]	@ (801b870 <L86_uart_Init+0x2f8>)
 801b6fc:	6818      	ldr	r0, [r3, #0]
 801b6fe:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 801b702:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801b706:	2232      	movs	r2, #50	@ 0x32
 801b708:	f7f7 fac4 	bl	8012c94 <HAL_UART_Transmit>
	HAL_Delay(1000);
 801b70c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 801b710:	f7ea f96a 	bl	80059e8 <HAL_Delay>
	HAL_UART_Receive(L86_uart, data, 200, 500);
 801b714:	4b56      	ldr	r3, [pc, #344]	@ (801b870 <L86_uart_Init+0x2f8>)
 801b716:	6818      	ldr	r0, [r3, #0]
 801b718:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 801b71c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 801b720:	22c8      	movs	r2, #200	@ 0xc8
 801b722:	f7f7 fb55 	bl	8012dd0 <HAL_UART_Receive>
	print(100, data, 200);
 801b726:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 801b72a:	22c8      	movs	r2, #200	@ 0xc8
 801b72c:	4619      	mov	r1, r3
 801b72e:	2064      	movs	r0, #100	@ 0x64
 801b730:	f7e6 f9ae 	bl	8001a90 <print>
	printc(MinDelay, "\n");
 801b734:	494f      	ldr	r1, [pc, #316]	@ (801b874 <L86_uart_Init+0x2fc>)
 801b736:	200a      	movs	r0, #10
 801b738:	f7e6 f96e 	bl	8001a18 <printc>

	uint8_t VTG[] = "$PAIR062,5,0*3B\r\n";
 801b73c:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 801b740:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 801b744:	4a50      	ldr	r2, [pc, #320]	@ (801b888 <L86_uart_Init+0x310>)
 801b746:	461c      	mov	r4, r3
 801b748:	4615      	mov	r5, r2
 801b74a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b74c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b74e:	682b      	ldr	r3, [r5, #0]
 801b750:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(L86_uart, (uint8_t*) VTG, 50, 1000);
 801b752:	4b47      	ldr	r3, [pc, #284]	@ (801b870 <L86_uart_Init+0x2f8>)
 801b754:	6818      	ldr	r0, [r3, #0]
 801b756:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 801b75a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801b75e:	2232      	movs	r2, #50	@ 0x32
 801b760:	f7f7 fa98 	bl	8012c94 <HAL_UART_Transmit>
	HAL_Delay(1000);
 801b764:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 801b768:	f7ea f93e 	bl	80059e8 <HAL_Delay>
	HAL_UART_Receive(L86_uart, data, 200, 500);
 801b76c:	4b40      	ldr	r3, [pc, #256]	@ (801b870 <L86_uart_Init+0x2f8>)
 801b76e:	6818      	ldr	r0, [r3, #0]
 801b770:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 801b774:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 801b778:	22c8      	movs	r2, #200	@ 0xc8
 801b77a:	f7f7 fb29 	bl	8012dd0 <HAL_UART_Receive>
	print(100, data, 200);
 801b77e:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 801b782:	22c8      	movs	r2, #200	@ 0xc8
 801b784:	4619      	mov	r1, r3
 801b786:	2064      	movs	r0, #100	@ 0x64
 801b788:	f7e6 f982 	bl	8001a90 <print>
	printc(MinDelay, "\n");
 801b78c:	4939      	ldr	r1, [pc, #228]	@ (801b874 <L86_uart_Init+0x2fc>)
 801b78e:	200a      	movs	r0, #10
 801b790:	f7e6 f942 	bl	8001a18 <printc>

	uint8_t Baudrate[] = "$PAIR864,0,0,115200*1B\r\n";
 801b794:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 801b798:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 801b79c:	4a3b      	ldr	r2, [pc, #236]	@ (801b88c <L86_uart_Init+0x314>)
 801b79e:	461c      	mov	r4, r3
 801b7a0:	4615      	mov	r5, r2
 801b7a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b7a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b7a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801b7aa:	c403      	stmia	r4!, {r0, r1}
 801b7ac:	7022      	strb	r2, [r4, #0]
	HAL_UART_Transmit(L86_uart, (uint8_t*) Baudrate, strlen(Baudrate), 1000);
 801b7ae:	4b30      	ldr	r3, [pc, #192]	@ (801b870 <L86_uart_Init+0x2f8>)
 801b7b0:	681c      	ldr	r4, [r3, #0]
 801b7b2:	f107 0314 	add.w	r3, r7, #20
 801b7b6:	4618      	mov	r0, r3
 801b7b8:	f7e4 fd74 	bl	80002a4 <strlen>
 801b7bc:	4603      	mov	r3, r0
 801b7be:	b29a      	uxth	r2, r3
 801b7c0:	f107 0114 	add.w	r1, r7, #20
 801b7c4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801b7c8:	4620      	mov	r0, r4
 801b7ca:	f7f7 fa63 	bl	8012c94 <HAL_UART_Transmit>
	HAL_Delay(100);
 801b7ce:	2064      	movs	r0, #100	@ 0x64
 801b7d0:	f7ea f90a 	bl	80059e8 <HAL_Delay>
	HAL_UART_Receive(L86_uart, data, 200, 500);
 801b7d4:	4b26      	ldr	r3, [pc, #152]	@ (801b870 <L86_uart_Init+0x2f8>)
 801b7d6:	6818      	ldr	r0, [r3, #0]
 801b7d8:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 801b7dc:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 801b7e0:	22c8      	movs	r2, #200	@ 0xc8
 801b7e2:	f7f7 faf5 	bl	8012dd0 <HAL_UART_Receive>
	print(100, data, 200);
 801b7e6:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 801b7ea:	22c8      	movs	r2, #200	@ 0xc8
 801b7ec:	4619      	mov	r1, r3
 801b7ee:	2064      	movs	r0, #100	@ 0x64
 801b7f0:	f7e6 f94e 	bl	8001a90 <print>
	printc(MinDelay, "\n");
 801b7f4:	491f      	ldr	r1, [pc, #124]	@ (801b874 <L86_uart_Init+0x2fc>)
 801b7f6:	200a      	movs	r0, #10
 801b7f8:	f7e6 f90e 	bl	8001a18 <printc>
	uint8_t SAVE_PARAM[] = "$PAIR513*3D\r\n";
 801b7fc:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 801b800:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 801b804:	4a22      	ldr	r2, [pc, #136]	@ (801b890 <L86_uart_Init+0x318>)
 801b806:	461c      	mov	r4, r3
 801b808:	4613      	mov	r3, r2
 801b80a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801b80c:	c407      	stmia	r4!, {r0, r1, r2}
 801b80e:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(L86_uart, (uint8_t*) SAVE_PARAM, 50, 1000);
 801b810:	4b17      	ldr	r3, [pc, #92]	@ (801b870 <L86_uart_Init+0x2f8>)
 801b812:	6818      	ldr	r0, [r3, #0]
 801b814:	1d39      	adds	r1, r7, #4
 801b816:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801b81a:	2232      	movs	r2, #50	@ 0x32
 801b81c:	f7f7 fa3a 	bl	8012c94 <HAL_UART_Transmit>
	HAL_Delay(1000);
 801b820:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 801b824:	f7ea f8e0 	bl	80059e8 <HAL_Delay>
	HAL_UART_Receive(L86_uart, data, 200, 500);
 801b828:	4b11      	ldr	r3, [pc, #68]	@ (801b870 <L86_uart_Init+0x2f8>)
 801b82a:	6818      	ldr	r0, [r3, #0]
 801b82c:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 801b830:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 801b834:	22c8      	movs	r2, #200	@ 0xc8
 801b836:	f7f7 facb 	bl	8012dd0 <HAL_UART_Receive>
	print(100, data, 200);
 801b83a:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 801b83e:	22c8      	movs	r2, #200	@ 0xc8
 801b840:	4619      	mov	r1, r3
 801b842:	2064      	movs	r0, #100	@ 0x64
 801b844:	f7e6 f924 	bl	8001a90 <print>
	printc(MinDelay, "\n");
 801b848:	490a      	ldr	r1, [pc, #40]	@ (801b874 <L86_uart_Init+0x2fc>)
 801b84a:	200a      	movs	r0, #10
 801b84c:	f7e6 f8e4 	bl	8001a18 <printc>
	HAL_UART_Receive_DMA(L86_uart, (uint8_t*) L86Buffer, L86_BUFFER_SIZE);
 801b850:	4b07      	ldr	r3, [pc, #28]	@ (801b870 <L86_uart_Init+0x2f8>)
 801b852:	681b      	ldr	r3, [r3, #0]
 801b854:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801b858:	490e      	ldr	r1, [pc, #56]	@ (801b894 <L86_uart_Init+0x31c>)
 801b85a:	4618      	mov	r0, r3
 801b85c:	f7f7 fb90 	bl	8012f80 <HAL_UART_Receive_DMA>
}
 801b860:	bf00      	nop
 801b862:	f507 77b8 	add.w	r7, r7, #368	@ 0x170
 801b866:	46bd      	mov	sp, r7
 801b868:	bdb0      	pop	{r4, r5, r7, pc}
 801b86a:	bf00      	nop
 801b86c:	08023d98 	.word	0x08023d98
 801b870:	20014dc4 	.word	0x20014dc4
 801b874:	08023d94 	.word	0x08023d94
 801b878:	08023dac 	.word	0x08023dac
 801b87c:	08023dc0 	.word	0x08023dc0
 801b880:	08023dd4 	.word	0x08023dd4
 801b884:	08023de8 	.word	0x08023de8
 801b888:	08023dfc 	.word	0x08023dfc
 801b88c:	08023e10 	.word	0x08023e10
 801b890:	08023e2c 	.word	0x08023e2c
 801b894:	20014dc8 	.word	0x20014dc8

0801b898 <splitWithComma>:
int splitWithComma(char *data, char **output) {
 801b898:	b580      	push	{r7, lr}
 801b89a:	b084      	sub	sp, #16
 801b89c:	af00      	add	r7, sp, #0
 801b89e:	6078      	str	r0, [r7, #4]
 801b8a0:	6039      	str	r1, [r7, #0]
	char *token = strtok((char*) data, ",");
 801b8a2:	4910      	ldr	r1, [pc, #64]	@ (801b8e4 <splitWithComma+0x4c>)
 801b8a4:	6878      	ldr	r0, [r7, #4]
 801b8a6:	f003 fb27 	bl	801eef8 <strtok>
 801b8aa:	60f8      	str	r0, [r7, #12]
	int i = 0;
 801b8ac:	2300      	movs	r3, #0
 801b8ae:	60bb      	str	r3, [r7, #8]
	while (token != NULL && i < 20) {
 801b8b0:	e00c      	b.n	801b8cc <splitWithComma+0x34>
		output[i++] = token;
 801b8b2:	68bb      	ldr	r3, [r7, #8]
 801b8b4:	1c5a      	adds	r2, r3, #1
 801b8b6:	60ba      	str	r2, [r7, #8]
 801b8b8:	009b      	lsls	r3, r3, #2
 801b8ba:	683a      	ldr	r2, [r7, #0]
 801b8bc:	4413      	add	r3, r2
 801b8be:	68fa      	ldr	r2, [r7, #12]
 801b8c0:	601a      	str	r2, [r3, #0]
		token = strtok(NULL, ",");
 801b8c2:	4908      	ldr	r1, [pc, #32]	@ (801b8e4 <splitWithComma+0x4c>)
 801b8c4:	2000      	movs	r0, #0
 801b8c6:	f003 fb17 	bl	801eef8 <strtok>
 801b8ca:	60f8      	str	r0, [r7, #12]
	while (token != NULL && i < 20) {
 801b8cc:	68fb      	ldr	r3, [r7, #12]
 801b8ce:	2b00      	cmp	r3, #0
 801b8d0:	d002      	beq.n	801b8d8 <splitWithComma+0x40>
 801b8d2:	68bb      	ldr	r3, [r7, #8]
 801b8d4:	2b13      	cmp	r3, #19
 801b8d6:	ddec      	ble.n	801b8b2 <splitWithComma+0x1a>
	}
	return i;
 801b8d8:	68bb      	ldr	r3, [r7, #8]
}
 801b8da:	4618      	mov	r0, r3
 801b8dc:	3710      	adds	r7, #16
 801b8de:	46bd      	mov	sp, r7
 801b8e0:	bd80      	pop	{r7, pc}
 801b8e2:	bf00      	nop
 801b8e4:	08023e3c 	.word	0x08023e3c

0801b8e8 <convertToDegrees>:
double convertToDegrees(double input) {
 801b8e8:	b5b0      	push	{r4, r5, r7, lr}
 801b8ea:	b088      	sub	sp, #32
 801b8ec:	af00      	add	r7, sp, #0
 801b8ee:	ed87 0b00 	vstr	d0, [r7]
	int degrees = input / 100; // Extracting degrees
 801b8f2:	f04f 0200 	mov.w	r2, #0
 801b8f6:	4b1e      	ldr	r3, [pc, #120]	@ (801b970 <convertToDegrees+0x88>)
 801b8f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 801b8fc:	f7e4 ffc0 	bl	8000880 <__aeabi_ddiv>
 801b900:	4602      	mov	r2, r0
 801b902:	460b      	mov	r3, r1
 801b904:	4610      	mov	r0, r2
 801b906:	4619      	mov	r1, r3
 801b908:	f7e5 f940 	bl	8000b8c <__aeabi_d2iz>
 801b90c:	4603      	mov	r3, r0
 801b90e:	61fb      	str	r3, [r7, #28]
	double minutes = fmod(input, 100); // Extracting decimal minutes
 801b910:	ed9f 1b15 	vldr	d1, [pc, #84]	@ 801b968 <convertToDegrees+0x80>
 801b914:	ed97 0b00 	vldr	d0, [r7]
 801b918:	f006 fb68 	bl	8021fec <fmod>
 801b91c:	ed87 0b04 	vstr	d0, [r7, #16]
	double decimalDegrees = degrees + (minutes / 60); // Converting to decimal degrees
 801b920:	69f8      	ldr	r0, [r7, #28]
 801b922:	f7e4 fe19 	bl	8000558 <__aeabi_i2d>
 801b926:	4604      	mov	r4, r0
 801b928:	460d      	mov	r5, r1
 801b92a:	f04f 0200 	mov.w	r2, #0
 801b92e:	4b11      	ldr	r3, [pc, #68]	@ (801b974 <convertToDegrees+0x8c>)
 801b930:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801b934:	f7e4 ffa4 	bl	8000880 <__aeabi_ddiv>
 801b938:	4602      	mov	r2, r0
 801b93a:	460b      	mov	r3, r1
 801b93c:	4620      	mov	r0, r4
 801b93e:	4629      	mov	r1, r5
 801b940:	f7e4 fcbe 	bl	80002c0 <__adddf3>
 801b944:	4602      	mov	r2, r0
 801b946:	460b      	mov	r3, r1
 801b948:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return decimalDegrees;
 801b94c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801b950:	ec43 2b17 	vmov	d7, r2, r3
}
 801b954:	eeb0 0a47 	vmov.f32	s0, s14
 801b958:	eef0 0a67 	vmov.f32	s1, s15
 801b95c:	3720      	adds	r7, #32
 801b95e:	46bd      	mov	sp, r7
 801b960:	bdb0      	pop	{r4, r5, r7, pc}
 801b962:	bf00      	nop
 801b964:	f3af 8000 	nop.w
 801b968:	00000000 	.word	0x00000000
 801b96c:	40590000 	.word	0x40590000
 801b970:	40590000 	.word	0x40590000
 801b974:	404e0000 	.word	0x404e0000

0801b978 <init_GPSData>:
bool init_GPSData(GPSData *GPSDataTmp) {
 801b978:	b480      	push	{r7}
 801b97a:	b083      	sub	sp, #12
 801b97c:	af00      	add	r7, sp, #0
 801b97e:	6078      	str	r0, [r7, #4]
//    GPSData* GPSDataTmp = (GPSData*)malloc(sizeof(GPSData));
	if (GPSDataTmp == NULL) {
 801b980:	687b      	ldr	r3, [r7, #4]
 801b982:	2b00      	cmp	r3, #0
 801b984:	d101      	bne.n	801b98a <init_GPSData+0x12>
		// Handle memory allocation failure
		return false;
 801b986:	2300      	movs	r3, #0
 801b988:	e031      	b.n	801b9ee <init_GPSData+0x76>
	}

	// Initialize members with default values
	GPSDataTmp->latitude = 0.0f;
 801b98a:	6879      	ldr	r1, [r7, #4]
 801b98c:	f04f 0200 	mov.w	r2, #0
 801b990:	f04f 0300 	mov.w	r3, #0
 801b994:	e9c1 2300 	strd	r2, r3, [r1]
	GPSDataTmp->lat_dir = 'N'; // Null terminator
 801b998:	687b      	ldr	r3, [r7, #4]
 801b99a:	224e      	movs	r2, #78	@ 0x4e
 801b99c:	721a      	strb	r2, [r3, #8]
	GPSDataTmp->longitude = 0.0f;
 801b99e:	6879      	ldr	r1, [r7, #4]
 801b9a0:	f04f 0200 	mov.w	r2, #0
 801b9a4:	f04f 0300 	mov.w	r3, #0
 801b9a8:	e9c1 2304 	strd	r2, r3, [r1, #16]
	GPSDataTmp->lon_dir = 'E'; // Null terminator
 801b9ac:	687b      	ldr	r3, [r7, #4]
 801b9ae:	2245      	movs	r2, #69	@ 0x45
 801b9b0:	761a      	strb	r2, [r3, #24]
	GPSDataTmp->speed = 0.0f;
 801b9b2:	687b      	ldr	r3, [r7, #4]
 801b9b4:	f04f 0200 	mov.w	r2, #0
 801b9b8:	61da      	str	r2, [r3, #28]
	GPSDataTmp->heading = 0;
 801b9ba:	687b      	ldr	r3, [r7, #4]
 801b9bc:	2200      	movs	r2, #0
 801b9be:	621a      	str	r2, [r3, #32]
	GPSDataTmp->sat_num = 0;
 801b9c0:	687b      	ldr	r3, [r7, #4]
 801b9c2:	2200      	movs	r2, #0
 801b9c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	GPSDataTmp->alt = 0;
 801b9c8:	687b      	ldr	r3, [r7, #4]
 801b9ca:	2200      	movs	r2, #0
 801b9cc:	629a      	str	r2, [r3, #40]	@ 0x28
	GPSDataTmp->PDOP = 0.0f;
 801b9ce:	687b      	ldr	r3, [r7, #4]
 801b9d0:	f04f 0200 	mov.w	r2, #0
 801b9d4:	62da      	str	r2, [r3, #44]	@ 0x2c
	GPSDataTmp->HDOP = 0.0f;
 801b9d6:	687b      	ldr	r3, [r7, #4]
 801b9d8:	f04f 0200 	mov.w	r2, #0
 801b9dc:	631a      	str	r2, [r3, #48]	@ 0x30
	GPSDataTmp->gps_fix = false;
 801b9de:	687b      	ldr	r3, [r7, #4]
 801b9e0:	2200      	movs	r2, #0
 801b9e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	GPSDataTmp->nextData = NULL;
 801b9e6:	687b      	ldr	r3, [r7, #4]
 801b9e8:	2200      	movs	r2, #0
 801b9ea:	639a      	str	r2, [r3, #56]	@ 0x38
	// Null terminator for date string
	return true;
 801b9ec:	2301      	movs	r3, #1
}
 801b9ee:	4618      	mov	r0, r3
 801b9f0:	370c      	adds	r7, #12
 801b9f2:	46bd      	mov	sp, r7
 801b9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9f8:	4770      	bx	lr
 801b9fa:	0000      	movs	r0, r0
 801b9fc:	0000      	movs	r0, r0
	...

0801ba00 <ProcessData>:
void ProcessData(uint8_t *data) {
 801ba00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba04:	f5ad 5da4 	sub.w	sp, sp, #5248	@ 0x1480
 801ba08:	b083      	sub	sp, #12
 801ba0a:	af00      	add	r7, sp, #0
 801ba0c:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801ba10:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 801ba14:	6018      	str	r0, [r3, #0]
	int tmplen = 0;
 801ba16:	2300      	movs	r3, #0
 801ba18:	f507 52a4 	add.w	r2, r7, #5248	@ 0x1480
 801ba1c:	f102 0204 	add.w	r2, r2, #4
 801ba20:	6013      	str	r3, [r2, #0]
//		char *line = strtok((char *)data,"\n");
	printc(MinDelay, "Data size is %d\n", strlen(tmpData));
 801ba22:	489d      	ldr	r0, [pc, #628]	@ (801bc98 <ProcessData+0x298>)
 801ba24:	f7e4 fc3e 	bl	80002a4 <strlen>
 801ba28:	4603      	mov	r3, r0
 801ba2a:	461a      	mov	r2, r3
 801ba2c:	499b      	ldr	r1, [pc, #620]	@ (801bc9c <ProcessData+0x29c>)
 801ba2e:	200a      	movs	r0, #10
 801ba30:	f7e5 fff2 	bl	8001a18 <printc>
	uint8_t *line = strstr(data, "\r\n");
 801ba34:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801ba38:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 801ba3c:	4998      	ldr	r1, [pc, #608]	@ (801bca0 <ProcessData+0x2a0>)
 801ba3e:	6818      	ldr	r0, [r3, #0]
 801ba40:	f003 fab6 	bl	801efb0 <strstr>
 801ba44:	f507 53a4 	add.w	r3, r7, #5248	@ 0x1480
 801ba48:	6018      	str	r0, [r3, #0]
	char lineBuff[20][255] = { };
 801ba4a:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801ba4e:	f2a3 431c 	subw	r3, r3, #1052	@ 0x41c
 801ba52:	4618      	mov	r0, r3
 801ba54:	f241 33ec 	movw	r3, #5100	@ 0x13ec
 801ba58:	461a      	mov	r2, r3
 801ba5a:	2100      	movs	r1, #0
 801ba5c:	f003 f9e8 	bl	801ee30 <memset>
	int i = 0;
 801ba60:	2300      	movs	r3, #0
 801ba62:	f507 52a3 	add.w	r2, r7, #5216	@ 0x1460
 801ba66:	f102 021c 	add.w	r2, r2, #28
 801ba6a:	6013      	str	r3, [r2, #0]
	while (line != NULL) {
 801ba6c:	e180      	b.n	801bd70 <ProcessData+0x370>
 801ba6e:	466b      	mov	r3, sp
 801ba70:	613b      	str	r3, [r7, #16]
		uint8_t length = line - data;
 801ba72:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801ba76:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 801ba7a:	f507 52a4 	add.w	r2, r7, #5248	@ 0x1480
 801ba7e:	6812      	ldr	r2, [r2, #0]
 801ba80:	681b      	ldr	r3, [r3, #0]
 801ba82:	1ad3      	subs	r3, r2, r3
 801ba84:	f507 52a3 	add.w	r2, r7, #5216	@ 0x1460
 801ba88:	f102 020f 	add.w	r2, r2, #15
 801ba8c:	7013      	strb	r3, [r2, #0]
		char substring[length];
 801ba8e:	f507 53a3 	add.w	r3, r7, #5216	@ 0x1460
 801ba92:	f103 030f 	add.w	r3, r3, #15
 801ba96:	7819      	ldrb	r1, [r3, #0]
 801ba98:	460b      	mov	r3, r1
 801ba9a:	3b01      	subs	r3, #1
 801ba9c:	f507 52a3 	add.w	r2, r7, #5216	@ 0x1460
 801baa0:	f102 0208 	add.w	r2, r2, #8
 801baa4:	6013      	str	r3, [r2, #0]
 801baa6:	b2cb      	uxtb	r3, r1
 801baa8:	2200      	movs	r2, #0
 801baaa:	4698      	mov	r8, r3
 801baac:	4691      	mov	r9, r2
 801baae:	f04f 0200 	mov.w	r2, #0
 801bab2:	f04f 0300 	mov.w	r3, #0
 801bab6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801baba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801babe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801bac2:	b2cb      	uxtb	r3, r1
 801bac4:	2200      	movs	r2, #0
 801bac6:	469a      	mov	sl, r3
 801bac8:	4693      	mov	fp, r2
 801baca:	f04f 0200 	mov.w	r2, #0
 801bace:	f04f 0300 	mov.w	r3, #0
 801bad2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 801bad6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 801bada:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801bade:	460b      	mov	r3, r1
 801bae0:	3307      	adds	r3, #7
 801bae2:	08db      	lsrs	r3, r3, #3
 801bae4:	00db      	lsls	r3, r3, #3
 801bae6:	ebad 0d03 	sub.w	sp, sp, r3
 801baea:	466b      	mov	r3, sp
 801baec:	3300      	adds	r3, #0
 801baee:	f507 52a3 	add.w	r2, r7, #5216	@ 0x1460
 801baf2:	f102 0204 	add.w	r2, r2, #4
 801baf6:	6013      	str	r3, [r2, #0]
		memset(substring, 0, length);
 801baf8:	f507 53a3 	add.w	r3, r7, #5216	@ 0x1460
 801bafc:	f103 030f 	add.w	r3, r3, #15
 801bb00:	781b      	ldrb	r3, [r3, #0]
 801bb02:	461a      	mov	r2, r3
 801bb04:	2100      	movs	r1, #0
 801bb06:	f507 53a3 	add.w	r3, r7, #5216	@ 0x1460
 801bb0a:	f103 0304 	add.w	r3, r3, #4
 801bb0e:	6818      	ldr	r0, [r3, #0]
 801bb10:	f003 f98e 	bl	801ee30 <memset>
		if (substring == NULL) {
			printc(MinDelay, "Memory allocation failed\n");
			return;
		}
		memcpy(substring, data, length);
 801bb14:	f507 53a3 	add.w	r3, r7, #5216	@ 0x1460
 801bb18:	f103 030f 	add.w	r3, r3, #15
 801bb1c:	781a      	ldrb	r2, [r3, #0]
 801bb1e:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801bb22:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 801bb26:	6819      	ldr	r1, [r3, #0]
 801bb28:	f507 53a3 	add.w	r3, r7, #5216	@ 0x1460
 801bb2c:	f103 0304 	add.w	r3, r3, #4
 801bb30:	6818      	ldr	r0, [r3, #0]
 801bb32:	f003 faf0 	bl	801f116 <memcpy>
		data = line + 2;
 801bb36:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801bb3a:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 801bb3e:	f507 52a4 	add.w	r2, r7, #5248	@ 0x1480
 801bb42:	6812      	ldr	r2, [r2, #0]
 801bb44:	3202      	adds	r2, #2
 801bb46:	601a      	str	r2, [r3, #0]
		tmplen += length + 2;
 801bb48:	f507 53a3 	add.w	r3, r7, #5216	@ 0x1460
 801bb4c:	f103 030f 	add.w	r3, r3, #15
 801bb50:	781b      	ldrb	r3, [r3, #0]
 801bb52:	3302      	adds	r3, #2
 801bb54:	f507 52a4 	add.w	r2, r7, #5248	@ 0x1480
 801bb58:	f102 0204 	add.w	r2, r2, #4
 801bb5c:	6812      	ldr	r2, [r2, #0]
 801bb5e:	4413      	add	r3, r2
 801bb60:	f507 52a4 	add.w	r2, r7, #5248	@ 0x1480
 801bb64:	f102 0204 	add.w	r2, r2, #4
 801bb68:	6013      	str	r3, [r2, #0]
		printc(MinDelay, "sub string \n %s\n", substring);
 801bb6a:	f507 53a3 	add.w	r3, r7, #5216	@ 0x1460
 801bb6e:	f103 0304 	add.w	r3, r3, #4
 801bb72:	681a      	ldr	r2, [r3, #0]
 801bb74:	494b      	ldr	r1, [pc, #300]	@ (801bca4 <ProcessData+0x2a4>)
 801bb76:	200a      	movs	r0, #10
 801bb78:	f7e5 ff4e 	bl	8001a18 <printc>
		if (hasHalfData) {
 801bb7c:	4b4a      	ldr	r3, [pc, #296]	@ (801bca8 <ProcessData+0x2a8>)
 801bb7e:	781b      	ldrb	r3, [r3, #0]
 801bb80:	2b00      	cmp	r3, #0
 801bb82:	f000 8099 	beq.w	801bcb8 <ProcessData+0x2b8>
 801bb86:	466b      	mov	r3, sp
 801bb88:	607b      	str	r3, [r7, #4]
			size_t total_length = strlen(tmpBuffer) + strlen(substring) + 1;
 801bb8a:	4848      	ldr	r0, [pc, #288]	@ (801bcac <ProcessData+0x2ac>)
 801bb8c:	f7e4 fb8a 	bl	80002a4 <strlen>
 801bb90:	4604      	mov	r4, r0
 801bb92:	f507 52a3 	add.w	r2, r7, #5216	@ 0x1460
 801bb96:	f102 0204 	add.w	r2, r2, #4
 801bb9a:	6810      	ldr	r0, [r2, #0]
 801bb9c:	f7e4 fb82 	bl	80002a4 <strlen>
 801bba0:	4603      	mov	r3, r0
 801bba2:	4423      	add	r3, r4
 801bba4:	3301      	adds	r3, #1
 801bba6:	f507 52a3 	add.w	r2, r7, #5216	@ 0x1460
 801bbaa:	6013      	str	r3, [r2, #0]
			char tmp[total_length];
 801bbac:	f507 52a3 	add.w	r2, r7, #5216	@ 0x1460
 801bbb0:	6811      	ldr	r1, [r2, #0]
 801bbb2:	460b      	mov	r3, r1
 801bbb4:	3b01      	subs	r3, #1
 801bbb6:	f507 52a2 	add.w	r2, r7, #5184	@ 0x1440
 801bbba:	f102 021c 	add.w	r2, r2, #28
 801bbbe:	6013      	str	r3, [r2, #0]
 801bbc0:	2300      	movs	r3, #0
 801bbc2:	460d      	mov	r5, r1
 801bbc4:	461e      	mov	r6, r3
 801bbc6:	f04f 0200 	mov.w	r2, #0
 801bbca:	f04f 0300 	mov.w	r3, #0
 801bbce:	00f3      	lsls	r3, r6, #3
 801bbd0:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 801bbd4:	00ea      	lsls	r2, r5, #3
 801bbd6:	2300      	movs	r3, #0
 801bbd8:	60b9      	str	r1, [r7, #8]
 801bbda:	60fb      	str	r3, [r7, #12]
 801bbdc:	f04f 0200 	mov.w	r2, #0
 801bbe0:	f04f 0300 	mov.w	r3, #0
 801bbe4:	68f8      	ldr	r0, [r7, #12]
 801bbe6:	00c3      	lsls	r3, r0, #3
 801bbe8:	68b8      	ldr	r0, [r7, #8]
 801bbea:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 801bbee:	68b8      	ldr	r0, [r7, #8]
 801bbf0:	00c2      	lsls	r2, r0, #3
 801bbf2:	1dcb      	adds	r3, r1, #7
 801bbf4:	08db      	lsrs	r3, r3, #3
 801bbf6:	00db      	lsls	r3, r3, #3
 801bbf8:	ebad 0d03 	sub.w	sp, sp, r3
 801bbfc:	466b      	mov	r3, sp
 801bbfe:	3300      	adds	r3, #0
 801bc00:	f507 52a2 	add.w	r2, r7, #5184	@ 0x1440
 801bc04:	f102 0218 	add.w	r2, r2, #24
 801bc08:	6013      	str	r3, [r2, #0]
			memset(tmp, 0, total_length);
 801bc0a:	f507 52a3 	add.w	r2, r7, #5216	@ 0x1460
 801bc0e:	6812      	ldr	r2, [r2, #0]
 801bc10:	2100      	movs	r1, #0
 801bc12:	f507 50a2 	add.w	r0, r7, #5184	@ 0x1440
 801bc16:	f100 0018 	add.w	r0, r0, #24
 801bc1a:	6800      	ldr	r0, [r0, #0]
 801bc1c:	f003 f908 	bl	801ee30 <memset>
			if (tmp != NULL) {
				// Copy tmpBuffer and line into tmp
				sprintf(tmp, "%s%s", tmpBuffer, substring);
 801bc20:	f507 52a3 	add.w	r2, r7, #5216	@ 0x1460
 801bc24:	f102 0204 	add.w	r2, r2, #4
 801bc28:	6813      	ldr	r3, [r2, #0]
 801bc2a:	4a20      	ldr	r2, [pc, #128]	@ (801bcac <ProcessData+0x2ac>)
 801bc2c:	4920      	ldr	r1, [pc, #128]	@ (801bcb0 <ProcessData+0x2b0>)
 801bc2e:	f507 50a2 	add.w	r0, r7, #5184	@ 0x1440
 801bc32:	f100 0018 	add.w	r0, r0, #24
 801bc36:	6800      	ldr	r0, [r0, #0]
 801bc38:	f002 ff9e 	bl	801eb78 <siprintf>
				strcpy(&lineBuff[i++], tmp);
 801bc3c:	f507 52a3 	add.w	r2, r7, #5216	@ 0x1460
 801bc40:	f102 021c 	add.w	r2, r2, #28
 801bc44:	6811      	ldr	r1, [r2, #0]
 801bc46:	1c4b      	adds	r3, r1, #1
 801bc48:	f507 52a3 	add.w	r2, r7, #5216	@ 0x1460
 801bc4c:	f102 021c 	add.w	r2, r2, #28
 801bc50:	6013      	str	r3, [r2, #0]
 801bc52:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 801bc56:	3a1c      	subs	r2, #28
 801bc58:	460b      	mov	r3, r1
 801bc5a:	021b      	lsls	r3, r3, #8
 801bc5c:	1a5b      	subs	r3, r3, r1
 801bc5e:	4413      	add	r3, r2
 801bc60:	f507 52a2 	add.w	r2, r7, #5184	@ 0x1440
 801bc64:	f102 0218 	add.w	r2, r2, #24
 801bc68:	6811      	ldr	r1, [r2, #0]
 801bc6a:	4618      	mov	r0, r3
 801bc6c:	f003 fa3d 	bl	801f0ea <strcpy>
				printc(MinDelay, "Merged data is %s\n", tmp);
 801bc70:	f507 52a2 	add.w	r2, r7, #5184	@ 0x1440
 801bc74:	f102 0218 	add.w	r2, r2, #24
 801bc78:	6812      	ldr	r2, [r2, #0]
 801bc7a:	490e      	ldr	r1, [pc, #56]	@ (801bcb4 <ProcessData+0x2b4>)
 801bc7c:	200a      	movs	r0, #10
 801bc7e:	f7e5 fecb 	bl	8001a18 <printc>
				// Free the memory allocated for tmp
				memset(tmpBuffer, 0, 200);
 801bc82:	22c8      	movs	r2, #200	@ 0xc8
 801bc84:	2100      	movs	r1, #0
 801bc86:	4809      	ldr	r0, [pc, #36]	@ (801bcac <ProcessData+0x2ac>)
 801bc88:	f003 f8d2 	bl	801ee30 <memset>
				hasHalfData = false;
 801bc8c:	4b06      	ldr	r3, [pc, #24]	@ (801bca8 <ProcessData+0x2a8>)
 801bc8e:	2200      	movs	r2, #0
 801bc90:	701a      	strb	r2, [r3, #0]
 801bc92:	f8d7 d004 	ldr.w	sp, [r7, #4]
 801bc96:	e029      	b.n	801bcec <ProcessData+0x2ec>
 801bc98:	20015278 	.word	0x20015278
 801bc9c:	08023e40 	.word	0x08023e40
 801bca0:	08023e54 	.word	0x08023e54
 801bca4:	08023e58 	.word	0x08023e58
 801bca8:	2001546c 	.word	0x2001546c
 801bcac:	200151b0 	.word	0x200151b0
 801bcb0:	08023e6c 	.word	0x08023e6c
 801bcb4:	08023e74 	.word	0x08023e74
			} else {
				// Handle memory allocation failure
				printf("Failed to allocate memory for tmp.\n");
			}
		} else {
			strcpy(&lineBuff[i++], substring);
 801bcb8:	f507 53a3 	add.w	r3, r7, #5216	@ 0x1460
 801bcbc:	f103 031c 	add.w	r3, r3, #28
 801bcc0:	6819      	ldr	r1, [r3, #0]
 801bcc2:	1c4b      	adds	r3, r1, #1
 801bcc4:	f507 52a3 	add.w	r2, r7, #5216	@ 0x1460
 801bcc8:	f102 021c 	add.w	r2, r2, #28
 801bccc:	6013      	str	r3, [r2, #0]
 801bcce:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 801bcd2:	3a1c      	subs	r2, #28
 801bcd4:	460b      	mov	r3, r1
 801bcd6:	021b      	lsls	r3, r3, #8
 801bcd8:	1a5b      	subs	r3, r3, r1
 801bcda:	4413      	add	r3, r2
 801bcdc:	f507 52a3 	add.w	r2, r7, #5216	@ 0x1460
 801bce0:	f102 0204 	add.w	r2, r2, #4
 801bce4:	6811      	ldr	r1, [r2, #0]
 801bce6:	4618      	mov	r0, r3
 801bce8:	f003 f9ff 	bl	801f0ea <strcpy>
		}
		line = strstr(data, "\r\n");
 801bcec:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801bcf0:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 801bcf4:	49a3      	ldr	r1, [pc, #652]	@ (801bf84 <ProcessData+0x584>)
 801bcf6:	6818      	ldr	r0, [r3, #0]
 801bcf8:	f003 f95a 	bl	801efb0 <strstr>
 801bcfc:	f507 53a4 	add.w	r3, r7, #5248	@ 0x1480
 801bd00:	6018      	str	r0, [r3, #0]
		if (line == NULL) {
 801bd02:	f507 53a4 	add.w	r3, r7, #5248	@ 0x1480
 801bd06:	681b      	ldr	r3, [r3, #0]
 801bd08:	2b00      	cmp	r3, #0
 801bd0a:	d12f      	bne.n	801bd6c <ProcessData+0x36c>
			printc(MinDelay, "last line %s\n", data);
 801bd0c:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801bd10:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 801bd14:	681a      	ldr	r2, [r3, #0]
 801bd16:	499c      	ldr	r1, [pc, #624]	@ (801bf88 <ProcessData+0x588>)
 801bd18:	200a      	movs	r0, #10
 801bd1a:	f7e5 fe7d 	bl	8001a18 <printc>
			if (tmplen >= L86_BUFFER_SIZE / 2) {
 801bd1e:	f507 53a4 	add.w	r3, r7, #5248	@ 0x1480
 801bd22:	f103 0304 	add.w	r3, r3, #4
 801bd26:	681b      	ldr	r3, [r3, #0]
 801bd28:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 801bd2c:	da1e      	bge.n	801bd6c <ProcessData+0x36c>

			} else {
				sprintf(tmpBuffer, "%s", data);
 801bd2e:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801bd32:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 801bd36:	681a      	ldr	r2, [r3, #0]
 801bd38:	4994      	ldr	r1, [pc, #592]	@ (801bf8c <ProcessData+0x58c>)
 801bd3a:	4895      	ldr	r0, [pc, #596]	@ (801bf90 <ProcessData+0x590>)
 801bd3c:	f002 ff1c 	bl	801eb78 <siprintf>
				hasHalfData = true;
 801bd40:	4b94      	ldr	r3, [pc, #592]	@ (801bf94 <ProcessData+0x594>)
 801bd42:	2201      	movs	r2, #1
 801bd44:	701a      	strb	r2, [r3, #0]
				tmplen += strlen(data);
 801bd46:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801bd4a:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 801bd4e:	6818      	ldr	r0, [r3, #0]
 801bd50:	f7e4 faa8 	bl	80002a4 <strlen>
 801bd54:	4602      	mov	r2, r0
 801bd56:	f507 53a4 	add.w	r3, r7, #5248	@ 0x1480
 801bd5a:	f103 0304 	add.w	r3, r3, #4
 801bd5e:	681b      	ldr	r3, [r3, #0]
 801bd60:	4413      	add	r3, r2
 801bd62:	f507 52a4 	add.w	r2, r7, #5248	@ 0x1480
 801bd66:	f102 0204 	add.w	r2, r2, #4
 801bd6a:	6013      	str	r3, [r2, #0]
 801bd6c:	f8d7 d010 	ldr.w	sp, [r7, #16]
	while (line != NULL) {
 801bd70:	f507 53a4 	add.w	r3, r7, #5248	@ 0x1480
 801bd74:	681b      	ldr	r3, [r3, #0]
 801bd76:	2b00      	cmp	r3, #0
 801bd78:	f47f ae79 	bne.w	801ba6e <ProcessData+0x6e>
			}

		}
	}
	printc(MinDelay, "Length %d \n", tmplen);
 801bd7c:	f507 53a4 	add.w	r3, r7, #5248	@ 0x1480
 801bd80:	f103 0304 	add.w	r3, r3, #4
 801bd84:	681a      	ldr	r2, [r3, #0]
 801bd86:	4984      	ldr	r1, [pc, #528]	@ (801bf98 <ProcessData+0x598>)
 801bd88:	200a      	movs	r0, #10
 801bd8a:	f7e5 fe45 	bl	8001a18 <printc>
	if (tmplen < L86_BUFFER_SIZE / 2) {
 801bd8e:	f507 53a4 	add.w	r3, r7, #5248	@ 0x1480
 801bd92:	f103 0304 	add.w	r3, r3, #4
 801bd96:	681b      	ldr	r3, [r3, #0]
 801bd98:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 801bd9c:	da09      	bge.n	801bdb2 <ProcessData+0x3b2>
		printc(MinDelay, "exit because Not able to parce all data  %d \n",
 801bd9e:	f507 53a4 	add.w	r3, r7, #5248	@ 0x1480
 801bda2:	f103 0304 	add.w	r3, r3, #4
 801bda6:	681a      	ldr	r2, [r3, #0]
 801bda8:	497c      	ldr	r1, [pc, #496]	@ (801bf9c <ProcessData+0x59c>)
 801bdaa:	200a      	movs	r0, #10
 801bdac:	f7e5 fe34 	bl	8001a18 <printc>
				tmplen);
		return;
 801bdb0:	e3a5      	b.n	801c4fe <ProcessData+0xafe>
	}
	for (int x = 0; x < i; x++) {
 801bdb2:	2300      	movs	r3, #0
 801bdb4:	f507 52a3 	add.w	r2, r7, #5216	@ 0x1460
 801bdb8:	f102 0218 	add.w	r2, r2, #24
 801bdbc:	6013      	str	r3, [r2, #0]
 801bdbe:	e38f      	b.n	801c4e0 <ProcessData+0xae0>
		char *values[20] = { };
 801bdc0:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801bdc4:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 801bdc8:	4618      	mov	r0, r3
 801bdca:	2350      	movs	r3, #80	@ 0x50
 801bdcc:	461a      	mov	r2, r3
 801bdce:	2100      	movs	r1, #0
 801bdd0:	f003 f82e 	bl	801ee30 <memset>
		uint8_t size = 0;
 801bdd4:	2300      	movs	r3, #0
 801bdd6:	f507 52a3 	add.w	r2, r7, #5216	@ 0x1460
 801bdda:	f102 0217 	add.w	r2, r2, #23
 801bdde:	7013      	strb	r3, [r2, #0]
		if (strncmp(lineBuff[x], "$GNRMC", 6) == 0) {
 801bde0:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 801bde4:	3a1c      	subs	r2, #28
 801bde6:	f507 53a3 	add.w	r3, r7, #5216	@ 0x1460
 801bdea:	f103 0318 	add.w	r3, r3, #24
 801bdee:	6819      	ldr	r1, [r3, #0]
 801bdf0:	460b      	mov	r3, r1
 801bdf2:	021b      	lsls	r3, r3, #8
 801bdf4:	1a5b      	subs	r3, r3, r1
 801bdf6:	4413      	add	r3, r2
 801bdf8:	2206      	movs	r2, #6
 801bdfa:	4969      	ldr	r1, [pc, #420]	@ (801bfa0 <ProcessData+0x5a0>)
 801bdfc:	4618      	mov	r0, r3
 801bdfe:	f003 f856 	bl	801eeae <strncmp>
 801be02:	4603      	mov	r3, r0
 801be04:	2b00      	cmp	r3, #0
 801be06:	f040 822f 	bne.w	801c268 <ProcessData+0x868>
			if (GPSDataTmp != NULL) {
 801be0a:	4b66      	ldr	r3, [pc, #408]	@ (801bfa4 <ProcessData+0x5a4>)
 801be0c:	681b      	ldr	r3, [r3, #0]
 801be0e:	2b00      	cmp	r3, #0
 801be10:	d00c      	beq.n	801be2c <ProcessData+0x42c>
				GPSDataCallback(GPSDataTmp);
 801be12:	4b64      	ldr	r3, [pc, #400]	@ (801bfa4 <ProcessData+0x5a4>)
 801be14:	681b      	ldr	r3, [r3, #0]
 801be16:	4618      	mov	r0, r3
 801be18:	f7e7 f86a 	bl	8002ef0 <GPSDataCallback>
				free(GPSDataTmp);
 801be1c:	4b61      	ldr	r3, [pc, #388]	@ (801bfa4 <ProcessData+0x5a4>)
 801be1e:	681b      	ldr	r3, [r3, #0]
 801be20:	4618      	mov	r0, r3
 801be22:	f000 ff9d 	bl	801cd60 <free>
				GPSDataTmp = NULL;
 801be26:	4b5f      	ldr	r3, [pc, #380]	@ (801bfa4 <ProcessData+0x5a4>)
 801be28:	2200      	movs	r2, #0
 801be2a:	601a      	str	r2, [r3, #0]
			}
			GPSDataTmp = malloc(sizeof(GPSData));
 801be2c:	2040      	movs	r0, #64	@ 0x40
 801be2e:	f000 ff8f 	bl	801cd50 <malloc>
 801be32:	4603      	mov	r3, r0
 801be34:	461a      	mov	r2, r3
 801be36:	4b5b      	ldr	r3, [pc, #364]	@ (801bfa4 <ProcessData+0x5a4>)
 801be38:	601a      	str	r2, [r3, #0]
			if (!init_GPSData(GPSDataTmp)) {
 801be3a:	4b5a      	ldr	r3, [pc, #360]	@ (801bfa4 <ProcessData+0x5a4>)
 801be3c:	681b      	ldr	r3, [r3, #0]
 801be3e:	4618      	mov	r0, r3
 801be40:	f7ff fd9a 	bl	801b978 <init_GPSData>
 801be44:	4603      	mov	r3, r0
 801be46:	f083 0301 	eor.w	r3, r3, #1
 801be4a:	b2db      	uxtb	r3, r3
 801be4c:	2b00      	cmp	r3, #0
 801be4e:	f040 8355 	bne.w	801c4fc <ProcessData+0xafc>
				return;
			}

			printc(MinDelay, "$GNRMC is %s\n", lineBuff[x]);
 801be52:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 801be56:	3a1c      	subs	r2, #28
 801be58:	f507 53a3 	add.w	r3, r7, #5216	@ 0x1460
 801be5c:	f103 0318 	add.w	r3, r3, #24
 801be60:	6819      	ldr	r1, [r3, #0]
 801be62:	460b      	mov	r3, r1
 801be64:	021b      	lsls	r3, r3, #8
 801be66:	1a5b      	subs	r3, r3, r1
 801be68:	4413      	add	r3, r2
 801be6a:	461a      	mov	r2, r3
 801be6c:	494e      	ldr	r1, [pc, #312]	@ (801bfa8 <ProcessData+0x5a8>)
 801be6e:	200a      	movs	r0, #10
 801be70:	f7e5 fdd2 	bl	8001a18 <printc>
			int len = splitWithComma(lineBuff[x], values);
 801be74:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 801be78:	3a1c      	subs	r2, #28
 801be7a:	f507 53a3 	add.w	r3, r7, #5216	@ 0x1460
 801be7e:	f103 0318 	add.w	r3, r3, #24
 801be82:	6819      	ldr	r1, [r3, #0]
 801be84:	460b      	mov	r3, r1
 801be86:	021b      	lsls	r3, r3, #8
 801be88:	1a5b      	subs	r3, r3, r1
 801be8a:	441a      	add	r2, r3
 801be8c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801be90:	3b0c      	subs	r3, #12
 801be92:	4619      	mov	r1, r3
 801be94:	4610      	mov	r0, r2
 801be96:	f7ff fcff 	bl	801b898 <splitWithComma>
 801be9a:	f507 53a3 	add.w	r3, r7, #5216	@ 0x1460
 801be9e:	f103 0310 	add.w	r3, r3, #16
 801bea2:	6018      	str	r0, [r3, #0]

			if (values[1] == NULL)
 801bea4:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801bea8:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 801beac:	685b      	ldr	r3, [r3, #4]
 801beae:	2b00      	cmp	r3, #0
 801beb0:	f000 82f6 	beq.w	801c4a0 <ProcessData+0xaa0>
				continue;

			if (values[2] == NULL)
 801beb4:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801beb8:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 801bebc:	689b      	ldr	r3, [r3, #8]
 801bebe:	2b00      	cmp	r3, #0
 801bec0:	f000 82f0 	beq.w	801c4a4 <ProcessData+0xaa4>
				continue;
			if (values[2][0] == 'A') {
 801bec4:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801bec8:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 801becc:	689b      	ldr	r3, [r3, #8]
 801bece:	781b      	ldrb	r3, [r3, #0]
 801bed0:	2b41      	cmp	r3, #65	@ 0x41
 801bed2:	d175      	bne.n	801bfc0 <ProcessData+0x5c0>
				GPSDataTmp->gps_fix = true;
 801bed4:	4b33      	ldr	r3, [pc, #204]	@ (801bfa4 <ProcessData+0x5a4>)
 801bed6:	681b      	ldr	r3, [r3, #0]
 801bed8:	2201      	movs	r2, #1
 801beda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
				if (!isTimeSet) {
 801bede:	4b33      	ldr	r3, [pc, #204]	@ (801bfac <ProcessData+0x5ac>)
 801bee0:	781b      	ldrb	r3, [r3, #0]
 801bee2:	f083 0301 	eor.w	r3, r3, #1
 801bee6:	b2db      	uxtb	r3, r3
 801bee8:	2b00      	cmp	r3, #0
 801beea:	d06e      	beq.n	801bfca <ProcessData+0x5ca>
					strncpy(hourStr, values[1], 2);
 801beec:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801bef0:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 801bef4:	685b      	ldr	r3, [r3, #4]
 801bef6:	2202      	movs	r2, #2
 801bef8:	4619      	mov	r1, r3
 801befa:	482d      	ldr	r0, [pc, #180]	@ (801bfb0 <ProcessData+0x5b0>)
 801befc:	f002 ffe9 	bl	801eed2 <strncpy>
					hourStr[2] = '\0';
 801bf00:	4b2b      	ldr	r3, [pc, #172]	@ (801bfb0 <ProcessData+0x5b0>)
 801bf02:	2200      	movs	r2, #0
 801bf04:	709a      	strb	r2, [r3, #2]
					strncpy(minuteStr, values[1] + 2, 2);
 801bf06:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801bf0a:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 801bf0e:	685b      	ldr	r3, [r3, #4]
 801bf10:	3302      	adds	r3, #2
 801bf12:	2202      	movs	r2, #2
 801bf14:	4619      	mov	r1, r3
 801bf16:	4827      	ldr	r0, [pc, #156]	@ (801bfb4 <ProcessData+0x5b4>)
 801bf18:	f002 ffdb 	bl	801eed2 <strncpy>
					minuteStr[2] = '\0';
 801bf1c:	4b25      	ldr	r3, [pc, #148]	@ (801bfb4 <ProcessData+0x5b4>)
 801bf1e:	2200      	movs	r2, #0
 801bf20:	709a      	strb	r2, [r3, #2]
					strncpy(secondStr, values[1] + 4, 2);
 801bf22:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801bf26:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 801bf2a:	685b      	ldr	r3, [r3, #4]
 801bf2c:	3304      	adds	r3, #4
 801bf2e:	2202      	movs	r2, #2
 801bf30:	4619      	mov	r1, r3
 801bf32:	4821      	ldr	r0, [pc, #132]	@ (801bfb8 <ProcessData+0x5b8>)
 801bf34:	f002 ffcd 	bl	801eed2 <strncpy>
					secondStr[2] = '\0';
 801bf38:	4b1f      	ldr	r3, [pc, #124]	@ (801bfb8 <ProcessData+0x5b8>)
 801bf3a:	2200      	movs	r2, #0
 801bf3c:	709a      	strb	r2, [r3, #2]
					if (setTime(atoi(hourStr), atoi(minuteStr),
 801bf3e:	481c      	ldr	r0, [pc, #112]	@ (801bfb0 <ProcessData+0x5b0>)
 801bf40:	f000 ff01 	bl	801cd46 <atoi>
 801bf44:	4604      	mov	r4, r0
 801bf46:	481b      	ldr	r0, [pc, #108]	@ (801bfb4 <ProcessData+0x5b4>)
 801bf48:	f000 fefd 	bl	801cd46 <atoi>
 801bf4c:	4605      	mov	r5, r0
 801bf4e:	481a      	ldr	r0, [pc, #104]	@ (801bfb8 <ProcessData+0x5b8>)
 801bf50:	f000 fef9 	bl	801cd46 <atoi>
 801bf54:	4603      	mov	r3, r0
 801bf56:	461a      	mov	r2, r3
 801bf58:	4629      	mov	r1, r5
 801bf5a:	4620      	mov	r0, r4
 801bf5c:	f7fe ff7e 	bl	801ae5c <setTime>
 801bf60:	4603      	mov	r3, r0
 801bf62:	2b00      	cmp	r3, #0
 801bf64:	d002      	beq.n	801bf6c <ProcessData+0x56c>
							atoi(secondStr)))
						isTimeSet = true;
 801bf66:	4b11      	ldr	r3, [pc, #68]	@ (801bfac <ProcessData+0x5ac>)
 801bf68:	2201      	movs	r2, #1
 801bf6a:	701a      	strb	r2, [r3, #0]
					printc(MinDelay, "$UTC Time %s \n", values[1]);
 801bf6c:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801bf70:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 801bf74:	685b      	ldr	r3, [r3, #4]
 801bf76:	461a      	mov	r2, r3
 801bf78:	4910      	ldr	r1, [pc, #64]	@ (801bfbc <ProcessData+0x5bc>)
 801bf7a:	200a      	movs	r0, #10
 801bf7c:	f7e5 fd4c 	bl	8001a18 <printc>
 801bf80:	e023      	b.n	801bfca <ProcessData+0x5ca>
 801bf82:	bf00      	nop
 801bf84:	08023e54 	.word	0x08023e54
 801bf88:	08023e88 	.word	0x08023e88
 801bf8c:	08023e98 	.word	0x08023e98
 801bf90:	200151b0 	.word	0x200151b0
 801bf94:	2001546c 	.word	0x2001546c
 801bf98:	08023e9c 	.word	0x08023e9c
 801bf9c:	08023ea8 	.word	0x08023ea8
 801bfa0:	08023ed8 	.word	0x08023ed8
 801bfa4:	20015470 	.word	0x20015470
 801bfa8:	08023ee0 	.word	0x08023ee0
 801bfac:	20015474 	.word	0x20015474
 801bfb0:	20015478 	.word	0x20015478
 801bfb4:	2001547c 	.word	0x2001547c
 801bfb8:	20015480 	.word	0x20015480
 801bfbc:	08023ef0 	.word	0x08023ef0
				}
			} else {
				GPSDataTmp->gps_fix = false;
 801bfc0:	4b9d      	ldr	r3, [pc, #628]	@ (801c238 <ProcessData+0x838>)
 801bfc2:	681b      	ldr	r3, [r3, #0]
 801bfc4:	2200      	movs	r2, #0
 801bfc6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
			}
			if (values[3] == NULL)
 801bfca:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801bfce:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 801bfd2:	68db      	ldr	r3, [r3, #12]
 801bfd4:	2b00      	cmp	r3, #0
 801bfd6:	f000 8267 	beq.w	801c4a8 <ProcessData+0xaa8>
				continue;
			GPSDataTmp->latitude = convertToDegrees(atof(values[3]));
 801bfda:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801bfde:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 801bfe2:	68db      	ldr	r3, [r3, #12]
 801bfe4:	4618      	mov	r0, r3
 801bfe6:	f000 feab 	bl	801cd40 <atof>
 801bfea:	eeb0 7a40 	vmov.f32	s14, s0
 801bfee:	eef0 7a60 	vmov.f32	s15, s1
 801bff2:	4b91      	ldr	r3, [pc, #580]	@ (801c238 <ProcessData+0x838>)
 801bff4:	681c      	ldr	r4, [r3, #0]
 801bff6:	eeb0 0a47 	vmov.f32	s0, s14
 801bffa:	eef0 0a67 	vmov.f32	s1, s15
 801bffe:	f7ff fc73 	bl	801b8e8 <convertToDegrees>
 801c002:	eeb0 7a40 	vmov.f32	s14, s0
 801c006:	eef0 7a60 	vmov.f32	s15, s1
 801c00a:	ed84 7b00 	vstr	d7, [r4]
			printc(MinDelay, "$Latitude %s \n", values[3]);
 801c00e:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801c012:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 801c016:	68db      	ldr	r3, [r3, #12]
 801c018:	461a      	mov	r2, r3
 801c01a:	4988      	ldr	r1, [pc, #544]	@ (801c23c <ProcessData+0x83c>)
 801c01c:	200a      	movs	r0, #10
 801c01e:	f7e5 fcfb 	bl	8001a18 <printc>
			GPSDataTmp->lat_dir = *values[4];
 801c022:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801c026:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 801c02a:	691a      	ldr	r2, [r3, #16]
 801c02c:	4b82      	ldr	r3, [pc, #520]	@ (801c238 <ProcessData+0x838>)
 801c02e:	681b      	ldr	r3, [r3, #0]
 801c030:	7812      	ldrb	r2, [r2, #0]
 801c032:	721a      	strb	r2, [r3, #8]
			printc(MinDelay, "$lat_Dir%s \n", values[4]);
 801c034:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801c038:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 801c03c:	691b      	ldr	r3, [r3, #16]
 801c03e:	461a      	mov	r2, r3
 801c040:	497f      	ldr	r1, [pc, #508]	@ (801c240 <ProcessData+0x840>)
 801c042:	200a      	movs	r0, #10
 801c044:	f7e5 fce8 	bl	8001a18 <printc>
			GPSDataTmp->longitude = convertToDegrees(atof(values[5]));
 801c048:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801c04c:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 801c050:	695b      	ldr	r3, [r3, #20]
 801c052:	4618      	mov	r0, r3
 801c054:	f000 fe74 	bl	801cd40 <atof>
 801c058:	eeb0 7a40 	vmov.f32	s14, s0
 801c05c:	eef0 7a60 	vmov.f32	s15, s1
 801c060:	4b75      	ldr	r3, [pc, #468]	@ (801c238 <ProcessData+0x838>)
 801c062:	681c      	ldr	r4, [r3, #0]
 801c064:	eeb0 0a47 	vmov.f32	s0, s14
 801c068:	eef0 0a67 	vmov.f32	s1, s15
 801c06c:	f7ff fc3c 	bl	801b8e8 <convertToDegrees>
 801c070:	eeb0 7a40 	vmov.f32	s14, s0
 801c074:	eef0 7a60 	vmov.f32	s15, s1
 801c078:	ed84 7b04 	vstr	d7, [r4, #16]
			printc(MinDelay, "$Longitude %s \n", values[5]);
 801c07c:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801c080:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 801c084:	695b      	ldr	r3, [r3, #20]
 801c086:	461a      	mov	r2, r3
 801c088:	496e      	ldr	r1, [pc, #440]	@ (801c244 <ProcessData+0x844>)
 801c08a:	200a      	movs	r0, #10
 801c08c:	f7e5 fcc4 	bl	8001a18 <printc>
			if (values[6] == NULL)
 801c090:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801c094:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 801c098:	699b      	ldr	r3, [r3, #24]
 801c09a:	2b00      	cmp	r3, #0
 801c09c:	f000 8206 	beq.w	801c4ac <ProcessData+0xaac>
				continue;
			GPSDataTmp->lon_dir = *values[6];
 801c0a0:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801c0a4:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 801c0a8:	699a      	ldr	r2, [r3, #24]
 801c0aa:	4b63      	ldr	r3, [pc, #396]	@ (801c238 <ProcessData+0x838>)
 801c0ac:	681b      	ldr	r3, [r3, #0]
 801c0ae:	7812      	ldrb	r2, [r2, #0]
 801c0b0:	761a      	strb	r2, [r3, #24]
			printc(MinDelay, "$log_Dir %s \n", values[6]);
 801c0b2:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801c0b6:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 801c0ba:	699b      	ldr	r3, [r3, #24]
 801c0bc:	461a      	mov	r2, r3
 801c0be:	4962      	ldr	r1, [pc, #392]	@ (801c248 <ProcessData+0x848>)
 801c0c0:	200a      	movs	r0, #10
 801c0c2:	f7e5 fca9 	bl	8001a18 <printc>
			if (values[7] == NULL)
 801c0c6:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801c0ca:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 801c0ce:	69db      	ldr	r3, [r3, #28]
 801c0d0:	2b00      	cmp	r3, #0
 801c0d2:	f000 81ed 	beq.w	801c4b0 <ProcessData+0xab0>
				continue;
			GPSDataTmp->speed = (atof(values[7])) * 1.852;
 801c0d6:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801c0da:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 801c0de:	69db      	ldr	r3, [r3, #28]
 801c0e0:	4618      	mov	r0, r3
 801c0e2:	f000 fe2d 	bl	801cd40 <atof>
 801c0e6:	ec51 0b10 	vmov	r0, r1, d0
 801c0ea:	a351      	add	r3, pc, #324	@ (adr r3, 801c230 <ProcessData+0x830>)
 801c0ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c0f0:	f7e4 fa9c 	bl	800062c <__aeabi_dmul>
 801c0f4:	4602      	mov	r2, r0
 801c0f6:	460b      	mov	r3, r1
 801c0f8:	494f      	ldr	r1, [pc, #316]	@ (801c238 <ProcessData+0x838>)
 801c0fa:	680c      	ldr	r4, [r1, #0]
 801c0fc:	4610      	mov	r0, r2
 801c0fe:	4619      	mov	r1, r3
 801c100:	f7e4 fd8c 	bl	8000c1c <__aeabi_d2f>
 801c104:	4603      	mov	r3, r0
 801c106:	61e3      	str	r3, [r4, #28]
			printc(MinDelay, "$Speed %s \n", values[7]);
 801c108:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801c10c:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 801c110:	69db      	ldr	r3, [r3, #28]
 801c112:	461a      	mov	r2, r3
 801c114:	494d      	ldr	r1, [pc, #308]	@ (801c24c <ProcessData+0x84c>)
 801c116:	200a      	movs	r0, #10
 801c118:	f7e5 fc7e 	bl	8001a18 <printc>
			if (values[8] == NULL)
 801c11c:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801c120:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 801c124:	6a1b      	ldr	r3, [r3, #32]
 801c126:	2b00      	cmp	r3, #0
 801c128:	f000 81c4 	beq.w	801c4b4 <ProcessData+0xab4>
				continue;
			GPSDataTmp->heading = (int) atof(values[8]);
 801c12c:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801c130:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 801c134:	6a1b      	ldr	r3, [r3, #32]
 801c136:	4618      	mov	r0, r3
 801c138:	f000 fe02 	bl	801cd40 <atof>
 801c13c:	ec51 0b10 	vmov	r0, r1, d0
 801c140:	4b3d      	ldr	r3, [pc, #244]	@ (801c238 <ProcessData+0x838>)
 801c142:	681c      	ldr	r4, [r3, #0]
 801c144:	f7e4 fd22 	bl	8000b8c <__aeabi_d2iz>
 801c148:	4603      	mov	r3, r0
 801c14a:	6223      	str	r3, [r4, #32]
			printc(MinDelay, "Heading %s\n", values[8]);
 801c14c:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801c150:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 801c154:	6a1b      	ldr	r3, [r3, #32]
 801c156:	461a      	mov	r2, r3
 801c158:	493d      	ldr	r1, [pc, #244]	@ (801c250 <ProcessData+0x850>)
 801c15a:	200a      	movs	r0, #10
 801c15c:	f7e5 fc5c 	bl	8001a18 <printc>
			if (values[9] == NULL)
 801c160:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801c164:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 801c168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c16a:	2b00      	cmp	r3, #0
 801c16c:	f000 81a4 	beq.w	801c4b8 <ProcessData+0xab8>
				continue;
//				  setting up date
			if (!isDateSet) {
 801c170:	4b38      	ldr	r3, [pc, #224]	@ (801c254 <ProcessData+0x854>)
 801c172:	781b      	ldrb	r3, [r3, #0]
 801c174:	f083 0301 	eor.w	r3, r3, #1
 801c178:	b2db      	uxtb	r3, r3
 801c17a:	2b00      	cmp	r3, #0
 801c17c:	f000 81a5 	beq.w	801c4ca <ProcessData+0xaca>
				clearBuffer(hourStr, sizeof(hourStr));
 801c180:	2103      	movs	r1, #3
 801c182:	4835      	ldr	r0, [pc, #212]	@ (801c258 <ProcessData+0x858>)
 801c184:	f7e5 fca0 	bl	8001ac8 <clearBuffer>
				clearBuffer(minuteStr, sizeof(minuteStr));
 801c188:	2103      	movs	r1, #3
 801c18a:	4834      	ldr	r0, [pc, #208]	@ (801c25c <ProcessData+0x85c>)
 801c18c:	f7e5 fc9c 	bl	8001ac8 <clearBuffer>
				clearBuffer(secondStr, sizeof(secondStr));
 801c190:	2103      	movs	r1, #3
 801c192:	4833      	ldr	r0, [pc, #204]	@ (801c260 <ProcessData+0x860>)
 801c194:	f7e5 fc98 	bl	8001ac8 <clearBuffer>
				strncpy(hourStr, values[9], 2);
 801c198:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801c19c:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 801c1a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c1a2:	2202      	movs	r2, #2
 801c1a4:	4619      	mov	r1, r3
 801c1a6:	482c      	ldr	r0, [pc, #176]	@ (801c258 <ProcessData+0x858>)
 801c1a8:	f002 fe93 	bl	801eed2 <strncpy>
				hourStr[2] = '\0';
 801c1ac:	4b2a      	ldr	r3, [pc, #168]	@ (801c258 <ProcessData+0x858>)
 801c1ae:	2200      	movs	r2, #0
 801c1b0:	709a      	strb	r2, [r3, #2]
				strncpy(minuteStr, values[9] + 2, 2);
 801c1b2:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801c1b6:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 801c1ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c1bc:	3302      	adds	r3, #2
 801c1be:	2202      	movs	r2, #2
 801c1c0:	4619      	mov	r1, r3
 801c1c2:	4826      	ldr	r0, [pc, #152]	@ (801c25c <ProcessData+0x85c>)
 801c1c4:	f002 fe85 	bl	801eed2 <strncpy>
				minuteStr[2] = '\0';
 801c1c8:	4b24      	ldr	r3, [pc, #144]	@ (801c25c <ProcessData+0x85c>)
 801c1ca:	2200      	movs	r2, #0
 801c1cc:	709a      	strb	r2, [r3, #2]
				strncpy(secondStr, values[9] + 4, 2);
 801c1ce:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801c1d2:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 801c1d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c1d8:	3304      	adds	r3, #4
 801c1da:	2202      	movs	r2, #2
 801c1dc:	4619      	mov	r1, r3
 801c1de:	4820      	ldr	r0, [pc, #128]	@ (801c260 <ProcessData+0x860>)
 801c1e0:	f002 fe77 	bl	801eed2 <strncpy>
				secondStr[2] = '\0';
 801c1e4:	4b1e      	ldr	r3, [pc, #120]	@ (801c260 <ProcessData+0x860>)
 801c1e6:	2200      	movs	r2, #0
 801c1e8:	709a      	strb	r2, [r3, #2]
				if (setDate(atoi(hourStr), atoi(minuteStr), atoi(secondStr)))
 801c1ea:	481b      	ldr	r0, [pc, #108]	@ (801c258 <ProcessData+0x858>)
 801c1ec:	f000 fdab 	bl	801cd46 <atoi>
 801c1f0:	4604      	mov	r4, r0
 801c1f2:	481a      	ldr	r0, [pc, #104]	@ (801c25c <ProcessData+0x85c>)
 801c1f4:	f000 fda7 	bl	801cd46 <atoi>
 801c1f8:	4605      	mov	r5, r0
 801c1fa:	4819      	ldr	r0, [pc, #100]	@ (801c260 <ProcessData+0x860>)
 801c1fc:	f000 fda3 	bl	801cd46 <atoi>
 801c200:	4603      	mov	r3, r0
 801c202:	461a      	mov	r2, r3
 801c204:	4629      	mov	r1, r5
 801c206:	4620      	mov	r0, r4
 801c208:	f7fe fe54 	bl	801aeb4 <setDate>
 801c20c:	4603      	mov	r3, r0
 801c20e:	2b00      	cmp	r3, #0
 801c210:	d002      	beq.n	801c218 <ProcessData+0x818>
					isDateSet = true;
 801c212:	4b10      	ldr	r3, [pc, #64]	@ (801c254 <ProcessData+0x854>)
 801c214:	2201      	movs	r2, #1
 801c216:	701a      	strb	r2, [r3, #0]
				printc(MinDelay, "$Date %s \n", values[9]);
 801c218:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801c21c:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 801c220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c222:	461a      	mov	r2, r3
 801c224:	490f      	ldr	r1, [pc, #60]	@ (801c264 <ProcessData+0x864>)
 801c226:	200a      	movs	r0, #10
 801c228:	f7e5 fbf6 	bl	8001a18 <printc>
 801c22c:	e14d      	b.n	801c4ca <ProcessData+0xaca>
 801c22e:	bf00      	nop
 801c230:	c083126f 	.word	0xc083126f
 801c234:	3ffda1ca 	.word	0x3ffda1ca
 801c238:	20015470 	.word	0x20015470
 801c23c:	08023f00 	.word	0x08023f00
 801c240:	08023f10 	.word	0x08023f10
 801c244:	08023f20 	.word	0x08023f20
 801c248:	08023f30 	.word	0x08023f30
 801c24c:	08023f40 	.word	0x08023f40
 801c250:	08023f4c 	.word	0x08023f4c
 801c254:	20015475 	.word	0x20015475
 801c258:	20015478 	.word	0x20015478
 801c25c:	2001547c 	.word	0x2001547c
 801c260:	20015480 	.word	0x20015480
 801c264:	08023f58 	.word	0x08023f58
			}
		} else if (strncmp(lineBuff[x], "$GNGGA", 6) == 0) {
 801c268:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 801c26c:	3a1c      	subs	r2, #28
 801c26e:	f507 53a3 	add.w	r3, r7, #5216	@ 0x1460
 801c272:	f103 0318 	add.w	r3, r3, #24
 801c276:	6819      	ldr	r1, [r3, #0]
 801c278:	460b      	mov	r3, r1
 801c27a:	021b      	lsls	r3, r3, #8
 801c27c:	1a5b      	subs	r3, r3, r1
 801c27e:	4413      	add	r3, r2
 801c280:	2206      	movs	r2, #6
 801c282:	49a2      	ldr	r1, [pc, #648]	@ (801c50c <ProcessData+0xb0c>)
 801c284:	4618      	mov	r0, r3
 801c286:	f002 fe12 	bl	801eeae <strncmp>
 801c28a:	4603      	mov	r3, r0
 801c28c:	2b00      	cmp	r3, #0
 801c28e:	d16b      	bne.n	801c368 <ProcessData+0x968>
			if (GPSDataTmp == NULL) {
 801c290:	4b9f      	ldr	r3, [pc, #636]	@ (801c510 <ProcessData+0xb10>)
 801c292:	681b      	ldr	r3, [r3, #0]
 801c294:	2b00      	cmp	r3, #0
 801c296:	f000 8111 	beq.w	801c4bc <ProcessData+0xabc>
				continue;
			}
			printc(MinDelay, "$GNGGA is %s\n", lineBuff[x]);
 801c29a:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 801c29e:	3a1c      	subs	r2, #28
 801c2a0:	f507 53a3 	add.w	r3, r7, #5216	@ 0x1460
 801c2a4:	f103 0318 	add.w	r3, r3, #24
 801c2a8:	6819      	ldr	r1, [r3, #0]
 801c2aa:	460b      	mov	r3, r1
 801c2ac:	021b      	lsls	r3, r3, #8
 801c2ae:	1a5b      	subs	r3, r3, r1
 801c2b0:	4413      	add	r3, r2
 801c2b2:	461a      	mov	r2, r3
 801c2b4:	4997      	ldr	r1, [pc, #604]	@ (801c514 <ProcessData+0xb14>)
 801c2b6:	200a      	movs	r0, #10
 801c2b8:	f7e5 fbae 	bl	8001a18 <printc>
			splitWithComma(lineBuff[x], values);
 801c2bc:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 801c2c0:	3a1c      	subs	r2, #28
 801c2c2:	f507 53a3 	add.w	r3, r7, #5216	@ 0x1460
 801c2c6:	f103 0318 	add.w	r3, r3, #24
 801c2ca:	6819      	ldr	r1, [r3, #0]
 801c2cc:	460b      	mov	r3, r1
 801c2ce:	021b      	lsls	r3, r3, #8
 801c2d0:	1a5b      	subs	r3, r3, r1
 801c2d2:	441a      	add	r2, r3
 801c2d4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801c2d8:	3b0c      	subs	r3, #12
 801c2da:	4619      	mov	r1, r3
 801c2dc:	4610      	mov	r0, r2
 801c2de:	f7ff fadb 	bl	801b898 <splitWithComma>
			if (values[7] == NULL)
 801c2e2:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801c2e6:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 801c2ea:	69db      	ldr	r3, [r3, #28]
 801c2ec:	2b00      	cmp	r3, #0
 801c2ee:	f000 80e7 	beq.w	801c4c0 <ProcessData+0xac0>
				continue;
			GPSDataTmp->sat_num = atoi(values[7]);
 801c2f2:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801c2f6:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 801c2fa:	69db      	ldr	r3, [r3, #28]
 801c2fc:	4618      	mov	r0, r3
 801c2fe:	f000 fd22 	bl	801cd46 <atoi>
 801c302:	4602      	mov	r2, r0
 801c304:	4b82      	ldr	r3, [pc, #520]	@ (801c510 <ProcessData+0xb10>)
 801c306:	681b      	ldr	r3, [r3, #0]
 801c308:	b2d2      	uxtb	r2, r2
 801c30a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			printc(MinDelay, "$sat_num%s \n", values[7]);
 801c30e:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801c312:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 801c316:	69db      	ldr	r3, [r3, #28]
 801c318:	461a      	mov	r2, r3
 801c31a:	497f      	ldr	r1, [pc, #508]	@ (801c518 <ProcessData+0xb18>)
 801c31c:	200a      	movs	r0, #10
 801c31e:	f7e5 fb7b 	bl	8001a18 <printc>
			if (values[9] != NULL) {
 801c322:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801c326:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 801c32a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c32c:	2b00      	cmp	r3, #0
 801c32e:	f000 80cc 	beq.w	801c4ca <ProcessData+0xaca>
				GPSDataTmp->alt = atof(values[9]);
 801c332:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801c336:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 801c33a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c33c:	4618      	mov	r0, r3
 801c33e:	f000 fcff 	bl	801cd40 <atof>
 801c342:	ec51 0b10 	vmov	r0, r1, d0
 801c346:	4b72      	ldr	r3, [pc, #456]	@ (801c510 <ProcessData+0xb10>)
 801c348:	681c      	ldr	r4, [r3, #0]
 801c34a:	f7e4 fc1f 	bl	8000b8c <__aeabi_d2iz>
 801c34e:	4603      	mov	r3, r0
 801c350:	62a3      	str	r3, [r4, #40]	@ 0x28
				printc(MinDelay, "alt %s \n", values[9]);
 801c352:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801c356:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 801c35a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c35c:	461a      	mov	r2, r3
 801c35e:	496f      	ldr	r1, [pc, #444]	@ (801c51c <ProcessData+0xb1c>)
 801c360:	200a      	movs	r0, #10
 801c362:	f7e5 fb59 	bl	8001a18 <printc>
 801c366:	e0b0      	b.n	801c4ca <ProcessData+0xaca>
			}
		} else if (strncmp(lineBuff[x], "$GNGSA", 6) == 0) {
 801c368:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 801c36c:	3a1c      	subs	r2, #28
 801c36e:	f507 53a3 	add.w	r3, r7, #5216	@ 0x1460
 801c372:	f103 0318 	add.w	r3, r3, #24
 801c376:	6819      	ldr	r1, [r3, #0]
 801c378:	460b      	mov	r3, r1
 801c37a:	021b      	lsls	r3, r3, #8
 801c37c:	1a5b      	subs	r3, r3, r1
 801c37e:	4413      	add	r3, r2
 801c380:	2206      	movs	r2, #6
 801c382:	4967      	ldr	r1, [pc, #412]	@ (801c520 <ProcessData+0xb20>)
 801c384:	4618      	mov	r0, r3
 801c386:	f002 fd92 	bl	801eeae <strncmp>
 801c38a:	4603      	mov	r3, r0
 801c38c:	2b00      	cmp	r3, #0
 801c38e:	f040 809c 	bne.w	801c4ca <ProcessData+0xaca>
			if (GPSDataTmp == NULL) {
 801c392:	4b5f      	ldr	r3, [pc, #380]	@ (801c510 <ProcessData+0xb10>)
 801c394:	681b      	ldr	r3, [r3, #0]
 801c396:	2b00      	cmp	r3, #0
 801c398:	f000 8094 	beq.w	801c4c4 <ProcessData+0xac4>
				continue;
			}
			printc(MinDelay, "$GNGSA is %s\n", lineBuff[x]);
 801c39c:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 801c3a0:	3a1c      	subs	r2, #28
 801c3a2:	f507 53a3 	add.w	r3, r7, #5216	@ 0x1460
 801c3a6:	f103 0318 	add.w	r3, r3, #24
 801c3aa:	6819      	ldr	r1, [r3, #0]
 801c3ac:	460b      	mov	r3, r1
 801c3ae:	021b      	lsls	r3, r3, #8
 801c3b0:	1a5b      	subs	r3, r3, r1
 801c3b2:	4413      	add	r3, r2
 801c3b4:	461a      	mov	r2, r3
 801c3b6:	495b      	ldr	r1, [pc, #364]	@ (801c524 <ProcessData+0xb24>)
 801c3b8:	200a      	movs	r0, #10
 801c3ba:	f7e5 fb2d 	bl	8001a18 <printc>
			size = splitWithComma(lineBuff[x], values);
 801c3be:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 801c3c2:	3a1c      	subs	r2, #28
 801c3c4:	f507 53a3 	add.w	r3, r7, #5216	@ 0x1460
 801c3c8:	f103 0318 	add.w	r3, r3, #24
 801c3cc:	6819      	ldr	r1, [r3, #0]
 801c3ce:	460b      	mov	r3, r1
 801c3d0:	021b      	lsls	r3, r3, #8
 801c3d2:	1a5b      	subs	r3, r3, r1
 801c3d4:	441a      	add	r2, r3
 801c3d6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801c3da:	3b0c      	subs	r3, #12
 801c3dc:	4619      	mov	r1, r3
 801c3de:	4610      	mov	r0, r2
 801c3e0:	f7ff fa5a 	bl	801b898 <splitWithComma>
 801c3e4:	4603      	mov	r3, r0
 801c3e6:	f507 52a3 	add.w	r2, r7, #5216	@ 0x1460
 801c3ea:	f102 0217 	add.w	r2, r2, #23
 801c3ee:	7013      	strb	r3, [r2, #0]
			if (size - 4 > 1)
 801c3f0:	f507 53a3 	add.w	r3, r7, #5216	@ 0x1460
 801c3f4:	f103 0317 	add.w	r3, r3, #23
 801c3f8:	781b      	ldrb	r3, [r3, #0]
 801c3fa:	2b05      	cmp	r3, #5
 801c3fc:	d964      	bls.n	801c4c8 <ProcessData+0xac8>
				GPSDataTmp->PDOP = atof(values[size - 4]);
 801c3fe:	f507 53a3 	add.w	r3, r7, #5216	@ 0x1460
 801c402:	f103 0317 	add.w	r3, r3, #23
 801c406:	781b      	ldrb	r3, [r3, #0]
 801c408:	1f1a      	subs	r2, r3, #4
 801c40a:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801c40e:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 801c412:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c416:	4618      	mov	r0, r3
 801c418:	f000 fc92 	bl	801cd40 <atof>
 801c41c:	ec51 0b10 	vmov	r0, r1, d0
 801c420:	4b3b      	ldr	r3, [pc, #236]	@ (801c510 <ProcessData+0xb10>)
 801c422:	681c      	ldr	r4, [r3, #0]
 801c424:	f7e4 fbfa 	bl	8000c1c <__aeabi_d2f>
 801c428:	4603      	mov	r3, r0
 801c42a:	62e3      	str	r3, [r4, #44]	@ 0x2c
			else
				continue;
			printc(MinDelay, "$PDOP %s \n", values[size - 4]);
 801c42c:	f507 53a3 	add.w	r3, r7, #5216	@ 0x1460
 801c430:	f103 0317 	add.w	r3, r3, #23
 801c434:	781b      	ldrb	r3, [r3, #0]
 801c436:	1f1a      	subs	r2, r3, #4
 801c438:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801c43c:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 801c440:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c444:	461a      	mov	r2, r3
 801c446:	4938      	ldr	r1, [pc, #224]	@ (801c528 <ProcessData+0xb28>)
 801c448:	200a      	movs	r0, #10
 801c44a:	f7e5 fae5 	bl	8001a18 <printc>
			GPSDataTmp->HDOP = atof(values[size - 3]);
 801c44e:	f507 53a3 	add.w	r3, r7, #5216	@ 0x1460
 801c452:	f103 0317 	add.w	r3, r3, #23
 801c456:	781b      	ldrb	r3, [r3, #0]
 801c458:	1eda      	subs	r2, r3, #3
 801c45a:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801c45e:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 801c462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c466:	4618      	mov	r0, r3
 801c468:	f000 fc6a 	bl	801cd40 <atof>
 801c46c:	ec51 0b10 	vmov	r0, r1, d0
 801c470:	4b27      	ldr	r3, [pc, #156]	@ (801c510 <ProcessData+0xb10>)
 801c472:	681c      	ldr	r4, [r3, #0]
 801c474:	f7e4 fbd2 	bl	8000c1c <__aeabi_d2f>
 801c478:	4603      	mov	r3, r0
 801c47a:	6323      	str	r3, [r4, #48]	@ 0x30
			printc(MinDelay, "$HDOP %s \n", values[size - 3]);
 801c47c:	f507 53a3 	add.w	r3, r7, #5216	@ 0x1460
 801c480:	f103 0317 	add.w	r3, r3, #23
 801c484:	781b      	ldrb	r3, [r3, #0]
 801c486:	1eda      	subs	r2, r3, #3
 801c488:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801c48c:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 801c490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c494:	461a      	mov	r2, r3
 801c496:	4925      	ldr	r1, [pc, #148]	@ (801c52c <ProcessData+0xb2c>)
 801c498:	200a      	movs	r0, #10
 801c49a:	f7e5 fabd 	bl	8001a18 <printc>
 801c49e:	e014      	b.n	801c4ca <ProcessData+0xaca>
				continue;
 801c4a0:	bf00      	nop
 801c4a2:	e012      	b.n	801c4ca <ProcessData+0xaca>
				continue;
 801c4a4:	bf00      	nop
 801c4a6:	e010      	b.n	801c4ca <ProcessData+0xaca>
				continue;
 801c4a8:	bf00      	nop
 801c4aa:	e00e      	b.n	801c4ca <ProcessData+0xaca>
				continue;
 801c4ac:	bf00      	nop
 801c4ae:	e00c      	b.n	801c4ca <ProcessData+0xaca>
				continue;
 801c4b0:	bf00      	nop
 801c4b2:	e00a      	b.n	801c4ca <ProcessData+0xaca>
				continue;
 801c4b4:	bf00      	nop
 801c4b6:	e008      	b.n	801c4ca <ProcessData+0xaca>
				continue;
 801c4b8:	bf00      	nop
 801c4ba:	e006      	b.n	801c4ca <ProcessData+0xaca>
				continue;
 801c4bc:	bf00      	nop
 801c4be:	e004      	b.n	801c4ca <ProcessData+0xaca>
				continue;
 801c4c0:	bf00      	nop
 801c4c2:	e002      	b.n	801c4ca <ProcessData+0xaca>
				continue;
 801c4c4:	bf00      	nop
 801c4c6:	e000      	b.n	801c4ca <ProcessData+0xaca>
				continue;
 801c4c8:	bf00      	nop
	for (int x = 0; x < i; x++) {
 801c4ca:	f507 53a3 	add.w	r3, r7, #5216	@ 0x1460
 801c4ce:	f103 0318 	add.w	r3, r3, #24
 801c4d2:	681b      	ldr	r3, [r3, #0]
 801c4d4:	3301      	adds	r3, #1
 801c4d6:	f507 52a3 	add.w	r2, r7, #5216	@ 0x1460
 801c4da:	f102 0218 	add.w	r2, r2, #24
 801c4de:	6013      	str	r3, [r2, #0]
 801c4e0:	f507 53a3 	add.w	r3, r7, #5216	@ 0x1460
 801c4e4:	f103 0318 	add.w	r3, r3, #24
 801c4e8:	681a      	ldr	r2, [r3, #0]
 801c4ea:	f507 53a3 	add.w	r3, r7, #5216	@ 0x1460
 801c4ee:	f103 031c 	add.w	r3, r3, #28
 801c4f2:	681b      	ldr	r3, [r3, #0]
 801c4f4:	429a      	cmp	r2, r3
 801c4f6:	f6ff ac63 	blt.w	801bdc0 <ProcessData+0x3c0>
 801c4fa:	e000      	b.n	801c4fe <ProcessData+0xafe>
				return;
 801c4fc:	bf00      	nop
		}
	}

}
 801c4fe:	f507 57a4 	add.w	r7, r7, #5248	@ 0x1480
 801c502:	370c      	adds	r7, #12
 801c504:	46bd      	mov	sp, r7
 801c506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c50a:	bf00      	nop
 801c50c:	08023f64 	.word	0x08023f64
 801c510:	20015470 	.word	0x20015470
 801c514:	08023f6c 	.word	0x08023f6c
 801c518:	08023f7c 	.word	0x08023f7c
 801c51c:	08023f8c 	.word	0x08023f8c
 801c520:	08023f98 	.word	0x08023f98
 801c524:	08023fa0 	.word	0x08023fa0
 801c528:	08023fb0 	.word	0x08023fb0
 801c52c:	08023fbc 	.word	0x08023fbc

0801c530 <L86_RxHalfCpltCallback>:
void L86_RxHalfCpltCallback() {
 801c530:	b580      	push	{r7, lr}
 801c532:	af00      	add	r7, sp, #0
//	print(1000, L86Buffer, L86_BUFFER_SIZE/2);
//	printc(1000,"\n********************* First Half data*********************\n");
//	char tmpData[L86_BUFFER_SIZE/2+1]={'\0'};
	memset(tmpData, L86Buffer, L86_BUFFER_SIZE / 2 + 1);
 801c534:	4b0a      	ldr	r3, [pc, #40]	@ (801c560 <L86_RxHalfCpltCallback+0x30>)
 801c536:	f240 12f5 	movw	r2, #501	@ 0x1f5
 801c53a:	4619      	mov	r1, r3
 801c53c:	4809      	ldr	r0, [pc, #36]	@ (801c564 <L86_RxHalfCpltCallback+0x34>)
 801c53e:	f002 fc77 	bl	801ee30 <memset>
	memcpy(tmpData, L86Buffer, L86_BUFFER_SIZE / 2);
 801c542:	4a08      	ldr	r2, [pc, #32]	@ (801c564 <L86_RxHalfCpltCallback+0x34>)
 801c544:	4b06      	ldr	r3, [pc, #24]	@ (801c560 <L86_RxHalfCpltCallback+0x30>)
 801c546:	4610      	mov	r0, r2
 801c548:	4619      	mov	r1, r3
 801c54a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 801c54e:	461a      	mov	r2, r3
 801c550:	f002 fde1 	bl	801f116 <memcpy>
	ProcessData(tmpData);
 801c554:	4803      	ldr	r0, [pc, #12]	@ (801c564 <L86_RxHalfCpltCallback+0x34>)
 801c556:	f7ff fa53 	bl	801ba00 <ProcessData>

}
 801c55a:	bf00      	nop
 801c55c:	bd80      	pop	{r7, pc}
 801c55e:	bf00      	nop
 801c560:	20014dc8 	.word	0x20014dc8
 801c564:	20015278 	.word	0x20015278

0801c568 <L86_RxCpltCallback>:

void L86_RxCpltCallback() {
 801c568:	b580      	push	{r7, lr}
 801c56a:	af00      	add	r7, sp, #0

//		print(1000, &L86Buffer[L86_BUFFER_SIZE/2], L86_BUFFER_SIZE/2);
//		printc(1000,"\nSecond Half data\n");
//		char tmpData[L86_BUFFER_SIZE/2+1]={'\0'};
	memset(tmpData, L86Buffer, L86_BUFFER_SIZE / 2 + 1);
 801c56c:	4b0a      	ldr	r3, [pc, #40]	@ (801c598 <L86_RxCpltCallback+0x30>)
 801c56e:	f240 12f5 	movw	r2, #501	@ 0x1f5
 801c572:	4619      	mov	r1, r3
 801c574:	4809      	ldr	r0, [pc, #36]	@ (801c59c <L86_RxCpltCallback+0x34>)
 801c576:	f002 fc5b 	bl	801ee30 <memset>
	memcpy(tmpData, &L86Buffer[L86_BUFFER_SIZE / 2], L86_BUFFER_SIZE / 2);
 801c57a:	4a08      	ldr	r2, [pc, #32]	@ (801c59c <L86_RxCpltCallback+0x34>)
 801c57c:	4b06      	ldr	r3, [pc, #24]	@ (801c598 <L86_RxCpltCallback+0x30>)
 801c57e:	4610      	mov	r0, r2
 801c580:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 801c584:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 801c588:	4619      	mov	r1, r3
 801c58a:	f002 fdc4 	bl	801f116 <memcpy>
	ProcessData(tmpData);
 801c58e:	4803      	ldr	r0, [pc, #12]	@ (801c59c <L86_RxCpltCallback+0x34>)
 801c590:	f7ff fa36 	bl	801ba00 <ProcessData>

}
 801c594:	bf00      	nop
 801c596:	bd80      	pop	{r7, pc}
 801c598:	20014dc8 	.word	0x20014dc8
 801c59c:	20015278 	.word	0x20015278

0801c5a0 <clear_sms_resp_buff>:
#include "main.h"

char sms_resp_buff[250]; // Adjust buffer size if needed
bool messageStatus = false;

void clear_sms_resp_buff() {
 801c5a0:	b580      	push	{r7, lr}
 801c5a2:	af00      	add	r7, sp, #0
	clearBuffer(sms_resp_buff, sizeof(sms_resp_buff));
 801c5a4:	21fa      	movs	r1, #250	@ 0xfa
 801c5a6:	4802      	ldr	r0, [pc, #8]	@ (801c5b0 <clear_sms_resp_buff+0x10>)
 801c5a8:	f7e5 fa8e 	bl	8001ac8 <clearBuffer>
}
 801c5ac:	bf00      	nop
 801c5ae:	bd80      	pop	{r7, pc}
 801c5b0:	20015484 	.word	0x20015484

0801c5b4 <SMS_Init>:

bool SMS_Init() {
 801c5b4:	b580      	push	{r7, lr}
 801c5b6:	af00      	add	r7, sp, #0
	clear_sms_resp_buff();
 801c5b8:	f7ff fff2 	bl	801c5a0 <clear_sms_resp_buff>
	// 1. SMS Text Mode
//    if (!EC200_Transmit("ATD9857821331;\r\n", sms_resp_buff, 2000)) { return false; }
	if (!EC200_Transmit("AT+CMGF=1\r\n", sms_resp_buff, 2000)) {
 801c5bc:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 801c5c0:	492e      	ldr	r1, [pc, #184]	@ (801c67c <SMS_Init+0xc8>)
 801c5c2:	482f      	ldr	r0, [pc, #188]	@ (801c680 <SMS_Init+0xcc>)
 801c5c4:	f7e4 fdf2 	bl	80011ac <EC200_Transmit>
 801c5c8:	4603      	mov	r3, r0
 801c5ca:	f083 0301 	eor.w	r3, r3, #1
 801c5ce:	b2db      	uxtb	r3, r3
 801c5d0:	2b00      	cmp	r3, #0
 801c5d2:	d001      	beq.n	801c5d8 <SMS_Init+0x24>
		return false;
 801c5d4:	2300      	movs	r3, #0
 801c5d6:	e04e      	b.n	801c676 <SMS_Init+0xc2>
	}
	if (strstr(sms_resp_buff, "OK") == NULL) {
 801c5d8:	492a      	ldr	r1, [pc, #168]	@ (801c684 <SMS_Init+0xd0>)
 801c5da:	4828      	ldr	r0, [pc, #160]	@ (801c67c <SMS_Init+0xc8>)
 801c5dc:	f002 fce8 	bl	801efb0 <strstr>
 801c5e0:	4603      	mov	r3, r0
 801c5e2:	2b00      	cmp	r3, #0
 801c5e4:	d101      	bne.n	801c5ea <SMS_Init+0x36>
		return false;
 801c5e6:	2300      	movs	r3, #0
 801c5e8:	e045      	b.n	801c676 <SMS_Init+0xc2>
	}
	// 2. SMS Notifications
	if (!EC200_Transmit("AT+CNMI=2,1,0,0,0\r\n", sms_resp_buff, 2000)) {
 801c5ea:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 801c5ee:	4923      	ldr	r1, [pc, #140]	@ (801c67c <SMS_Init+0xc8>)
 801c5f0:	4825      	ldr	r0, [pc, #148]	@ (801c688 <SMS_Init+0xd4>)
 801c5f2:	f7e4 fddb 	bl	80011ac <EC200_Transmit>
 801c5f6:	4603      	mov	r3, r0
 801c5f8:	f083 0301 	eor.w	r3, r3, #1
 801c5fc:	b2db      	uxtb	r3, r3
 801c5fe:	2b00      	cmp	r3, #0
 801c600:	d001      	beq.n	801c606 <SMS_Init+0x52>
		return false;
 801c602:	2300      	movs	r3, #0
 801c604:	e037      	b.n	801c676 <SMS_Init+0xc2>
	}
	if (strstr(sms_resp_buff, "OK") == NULL) {
 801c606:	491f      	ldr	r1, [pc, #124]	@ (801c684 <SMS_Init+0xd0>)
 801c608:	481c      	ldr	r0, [pc, #112]	@ (801c67c <SMS_Init+0xc8>)
 801c60a:	f002 fcd1 	bl	801efb0 <strstr>
 801c60e:	4603      	mov	r3, r0
 801c610:	2b00      	cmp	r3, #0
 801c612:	d101      	bne.n	801c618 <SMS_Init+0x64>
		return false;
 801c614:	2300      	movs	r3, #0
 801c616:	e02e      	b.n	801c676 <SMS_Init+0xc2>
	}

	// 3. RI Pulse for Incoming SMS
	if (!EC200_Transmit("AT+QCFG=\"urc/ri/smsincoming\",\"pulse\",1200,1\r\n",
 801c618:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 801c61c:	4917      	ldr	r1, [pc, #92]	@ (801c67c <SMS_Init+0xc8>)
 801c61e:	481b      	ldr	r0, [pc, #108]	@ (801c68c <SMS_Init+0xd8>)
 801c620:	f7e4 fdc4 	bl	80011ac <EC200_Transmit>
 801c624:	4603      	mov	r3, r0
 801c626:	f083 0301 	eor.w	r3, r3, #1
 801c62a:	b2db      	uxtb	r3, r3
 801c62c:	2b00      	cmp	r3, #0
 801c62e:	d001      	beq.n	801c634 <SMS_Init+0x80>
			sms_resp_buff, 2000)) {
		return false;
 801c630:	2300      	movs	r3, #0
 801c632:	e020      	b.n	801c676 <SMS_Init+0xc2>
	}
	if (strstr(sms_resp_buff, "OK") == NULL) {
 801c634:	4913      	ldr	r1, [pc, #76]	@ (801c684 <SMS_Init+0xd0>)
 801c636:	4811      	ldr	r0, [pc, #68]	@ (801c67c <SMS_Init+0xc8>)
 801c638:	f002 fcba 	bl	801efb0 <strstr>
 801c63c:	4603      	mov	r3, r0
 801c63e:	2b00      	cmp	r3, #0
 801c640:	d101      	bne.n	801c646 <SMS_Init+0x92>
		return false;
 801c642:	2300      	movs	r3, #0
 801c644:	e017      	b.n	801c676 <SMS_Init+0xc2>
	}

	// 4. Set Character Set to GSM
	if (!EC200_Transmit("AT+CSCS=\"GSM\"\r\n", sms_resp_buff, 2000)) {
 801c646:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 801c64a:	490c      	ldr	r1, [pc, #48]	@ (801c67c <SMS_Init+0xc8>)
 801c64c:	4810      	ldr	r0, [pc, #64]	@ (801c690 <SMS_Init+0xdc>)
 801c64e:	f7e4 fdad 	bl	80011ac <EC200_Transmit>
 801c652:	4603      	mov	r3, r0
 801c654:	f083 0301 	eor.w	r3, r3, #1
 801c658:	b2db      	uxtb	r3, r3
 801c65a:	2b00      	cmp	r3, #0
 801c65c:	d001      	beq.n	801c662 <SMS_Init+0xae>
		return false;
 801c65e:	2300      	movs	r3, #0
 801c660:	e009      	b.n	801c676 <SMS_Init+0xc2>
	}
	if (strstr(sms_resp_buff, "OK") == NULL) {
 801c662:	4908      	ldr	r1, [pc, #32]	@ (801c684 <SMS_Init+0xd0>)
 801c664:	4805      	ldr	r0, [pc, #20]	@ (801c67c <SMS_Init+0xc8>)
 801c666:	f002 fca3 	bl	801efb0 <strstr>
 801c66a:	4603      	mov	r3, r0
 801c66c:	2b00      	cmp	r3, #0
 801c66e:	d101      	bne.n	801c674 <SMS_Init+0xc0>
		return false;
 801c670:	2300      	movs	r3, #0
 801c672:	e000      	b.n	801c676 <SMS_Init+0xc2>
	}
//    SMS_Send("9467220879","How are you");
	return true;
 801c674:	2301      	movs	r3, #1
}
 801c676:	4618      	mov	r0, r3
 801c678:	bd80      	pop	{r7, pc}
 801c67a:	bf00      	nop
 801c67c:	20015484 	.word	0x20015484
 801c680:	08023fc8 	.word	0x08023fc8
 801c684:	08023fd4 	.word	0x08023fd4
 801c688:	08023fd8 	.word	0x08023fd8
 801c68c:	08023fec 	.word	0x08023fec
 801c690:	0802401c 	.word	0x0802401c

0801c694 <SMS_Read>:
bool SMS_Read(int index, uint8_t *message_buffer) {
 801c694:	b580      	push	{r7, lr}
 801c696:	b090      	sub	sp, #64	@ 0x40
 801c698:	af00      	add	r7, sp, #0
 801c69a:	6078      	str	r0, [r7, #4]
 801c69c:	6039      	str	r1, [r7, #0]
	char command[50] = { };
 801c69e:	2300      	movs	r3, #0
 801c6a0:	60fb      	str	r3, [r7, #12]
 801c6a2:	f107 0310 	add.w	r3, r7, #16
 801c6a6:	222e      	movs	r2, #46	@ 0x2e
 801c6a8:	2100      	movs	r1, #0
 801c6aa:	4618      	mov	r0, r3
 801c6ac:	f002 fbc0 	bl	801ee30 <memset>
	sprintf(command, "AT+CMGR=%d\r\n", index);
 801c6b0:	f107 030c 	add.w	r3, r7, #12
 801c6b4:	687a      	ldr	r2, [r7, #4]
 801c6b6:	490e      	ldr	r1, [pc, #56]	@ (801c6f0 <SMS_Read+0x5c>)
 801c6b8:	4618      	mov	r0, r3
 801c6ba:	f002 fa5d 	bl	801eb78 <siprintf>
	if (!EC200_Transmit(command, message_buffer, 2000)) {
 801c6be:	f107 030c 	add.w	r3, r7, #12
 801c6c2:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 801c6c6:	6839      	ldr	r1, [r7, #0]
 801c6c8:	4618      	mov	r0, r3
 801c6ca:	f7e4 fd6f 	bl	80011ac <EC200_Transmit>
 801c6ce:	4603      	mov	r3, r0
 801c6d0:	f083 0301 	eor.w	r3, r3, #1
 801c6d4:	b2db      	uxtb	r3, r3
 801c6d6:	2b00      	cmp	r3, #0
 801c6d8:	d001      	beq.n	801c6de <SMS_Read+0x4a>
		return false;
 801c6da:	2300      	movs	r3, #0
 801c6dc:	e003      	b.n	801c6e6 <SMS_Read+0x52>
	}
	return SMS_Delete(0); // Replace with actual parsing success/failure logic
 801c6de:	2000      	movs	r0, #0
 801c6e0:	f000 f862 	bl	801c7a8 <SMS_Delete>
 801c6e4:	4603      	mov	r3, r0
}
 801c6e6:	4618      	mov	r0, r3
 801c6e8:	3740      	adds	r7, #64	@ 0x40
 801c6ea:	46bd      	mov	sp, r7
 801c6ec:	bd80      	pop	{r7, pc}
 801c6ee:	bf00      	nop
 801c6f0:	0802402c 	.word	0x0802402c

0801c6f4 <SMS_Send>:
bool SMS_Send(char *number, char *message) {
 801c6f4:	b580      	push	{r7, lr}
 801c6f6:	b09e      	sub	sp, #120	@ 0x78
 801c6f8:	af00      	add	r7, sp, #0
 801c6fa:	6078      	str	r0, [r7, #4]
 801c6fc:	6039      	str	r1, [r7, #0]
	char cmd[100] = { };
 801c6fe:	2300      	movs	r3, #0
 801c700:	617b      	str	r3, [r7, #20]
 801c702:	f107 0318 	add.w	r3, r7, #24
 801c706:	2260      	movs	r2, #96	@ 0x60
 801c708:	2100      	movs	r1, #0
 801c70a:	4618      	mov	r0, r3
 801c70c:	f002 fb90 	bl	801ee30 <memset>
	number[10] = '\0';
 801c710:	687b      	ldr	r3, [r7, #4]
 801c712:	330a      	adds	r3, #10
 801c714:	2200      	movs	r2, #0
 801c716:	701a      	strb	r2, [r3, #0]
	sprintf(cmd, "AT+CMGS=\"%s\"\r\n", number);
 801c718:	f107 0314 	add.w	r3, r7, #20
 801c71c:	687a      	ldr	r2, [r7, #4]
 801c71e:	491b      	ldr	r1, [pc, #108]	@ (801c78c <SMS_Send+0x98>)
 801c720:	4618      	mov	r0, r3
 801c722:	f002 fa29 	bl	801eb78 <siprintf>
	if (!EC200_Transmit(cmd, sms_resp_buff, 2000)) {
 801c726:	f107 0314 	add.w	r3, r7, #20
 801c72a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 801c72e:	4918      	ldr	r1, [pc, #96]	@ (801c790 <SMS_Send+0x9c>)
 801c730:	4618      	mov	r0, r3
 801c732:	f7e4 fd3b 	bl	80011ac <EC200_Transmit>
 801c736:	4603      	mov	r3, r0
 801c738:	f083 0301 	eor.w	r3, r3, #1
 801c73c:	b2db      	uxtb	r3, r3
 801c73e:	2b00      	cmp	r3, #0
 801c740:	d001      	beq.n	801c746 <SMS_Send+0x52>
		return false;
 801c742:	2300      	movs	r3, #0
 801c744:	e01e      	b.n	801c784 <SMS_Send+0x90>
	}
	uint8_t ctrlz[10] = { };
 801c746:	2300      	movs	r3, #0
 801c748:	60bb      	str	r3, [r7, #8]
 801c74a:	f107 030c 	add.w	r3, r7, #12
 801c74e:	2200      	movs	r2, #0
 801c750:	601a      	str	r2, [r3, #0]
 801c752:	809a      	strh	r2, [r3, #4]
	sprintf(ctrlz, "%s\r\n%c", message, 26);
 801c754:	f107 0008 	add.w	r0, r7, #8
 801c758:	231a      	movs	r3, #26
 801c75a:	683a      	ldr	r2, [r7, #0]
 801c75c:	490d      	ldr	r1, [pc, #52]	@ (801c794 <SMS_Send+0xa0>)
 801c75e:	f002 fa0b 	bl	801eb78 <siprintf>
	if (!EC200_Transmit(ctrlz, sms_resp_buff, 2000)) {
 801c762:	f107 0308 	add.w	r3, r7, #8
 801c766:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 801c76a:	4909      	ldr	r1, [pc, #36]	@ (801c790 <SMS_Send+0x9c>)
 801c76c:	4618      	mov	r0, r3
 801c76e:	f7e4 fd1d 	bl	80011ac <EC200_Transmit>
 801c772:	4603      	mov	r3, r0
 801c774:	f083 0301 	eor.w	r3, r3, #1
 801c778:	b2db      	uxtb	r3, r3
 801c77a:	2b00      	cmp	r3, #0
 801c77c:	d001      	beq.n	801c782 <SMS_Send+0x8e>
		return false;
 801c77e:	2300      	movs	r3, #0
 801c780:	e000      	b.n	801c784 <SMS_Send+0x90>
	}
	return true;
 801c782:	2301      	movs	r3, #1
}
 801c784:	4618      	mov	r0, r3
 801c786:	3778      	adds	r7, #120	@ 0x78
 801c788:	46bd      	mov	sp, r7
 801c78a:	bd80      	pop	{r7, pc}
 801c78c:	0802403c 	.word	0x0802403c
 801c790:	20015484 	.word	0x20015484
 801c794:	0802404c 	.word	0x0802404c

0801c798 <onMessage>:
void onMessage() {
 801c798:	b580      	push	{r7, lr}
 801c79a:	af00      	add	r7, sp, #0
	setMessageStatus(true);
 801c79c:	2001      	movs	r0, #1
 801c79e:	f000 f849 	bl	801c834 <setMessageStatus>
}
 801c7a2:	bf00      	nop
 801c7a4:	bd80      	pop	{r7, pc}
	...

0801c7a8 <SMS_Delete>:
bool SMS_Delete(int index) {
 801c7a8:	b580      	push	{r7, lr}
 801c7aa:	b090      	sub	sp, #64	@ 0x40
 801c7ac:	af00      	add	r7, sp, #0
 801c7ae:	6078      	str	r0, [r7, #4]
	clear_sms_resp_buff();
 801c7b0:	f7ff fef6 	bl	801c5a0 <clear_sms_resp_buff>
	char command[50] = { };
 801c7b4:	2300      	movs	r3, #0
 801c7b6:	60fb      	str	r3, [r7, #12]
 801c7b8:	f107 0310 	add.w	r3, r7, #16
 801c7bc:	222e      	movs	r2, #46	@ 0x2e
 801c7be:	2100      	movs	r1, #0
 801c7c0:	4618      	mov	r0, r3
 801c7c2:	f002 fb35 	bl	801ee30 <memset>
	sprintf(command, "AT+CMGD=%d,4\r\n", index);
 801c7c6:	f107 030c 	add.w	r3, r7, #12
 801c7ca:	687a      	ldr	r2, [r7, #4]
 801c7cc:	4910      	ldr	r1, [pc, #64]	@ (801c810 <SMS_Delete+0x68>)
 801c7ce:	4618      	mov	r0, r3
 801c7d0:	f002 f9d2 	bl	801eb78 <siprintf>
	if (!EC200_Transmit(command, sms_resp_buff, 2000)) {
 801c7d4:	f107 030c 	add.w	r3, r7, #12
 801c7d8:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 801c7dc:	490d      	ldr	r1, [pc, #52]	@ (801c814 <SMS_Delete+0x6c>)
 801c7de:	4618      	mov	r0, r3
 801c7e0:	f7e4 fce4 	bl	80011ac <EC200_Transmit>
 801c7e4:	4603      	mov	r3, r0
 801c7e6:	f083 0301 	eor.w	r3, r3, #1
 801c7ea:	b2db      	uxtb	r3, r3
 801c7ec:	2b00      	cmp	r3, #0
 801c7ee:	d001      	beq.n	801c7f4 <SMS_Delete+0x4c>
		return false;
 801c7f0:	2300      	movs	r3, #0
 801c7f2:	e009      	b.n	801c808 <SMS_Delete+0x60>
	}
	if (strstr(sms_resp_buff, "OK") == NULL) {
 801c7f4:	4908      	ldr	r1, [pc, #32]	@ (801c818 <SMS_Delete+0x70>)
 801c7f6:	4807      	ldr	r0, [pc, #28]	@ (801c814 <SMS_Delete+0x6c>)
 801c7f8:	f002 fbda 	bl	801efb0 <strstr>
 801c7fc:	4603      	mov	r3, r0
 801c7fe:	2b00      	cmp	r3, #0
 801c800:	d101      	bne.n	801c806 <SMS_Delete+0x5e>
		return false;
 801c802:	2300      	movs	r3, #0
 801c804:	e000      	b.n	801c808 <SMS_Delete+0x60>
	}
	return true;
 801c806:	2301      	movs	r3, #1
}
 801c808:	4618      	mov	r0, r3
 801c80a:	3740      	adds	r7, #64	@ 0x40
 801c80c:	46bd      	mov	sp, r7
 801c80e:	bd80      	pop	{r7, pc}
 801c810:	08024054 	.word	0x08024054
 801c814:	20015484 	.word	0x20015484
 801c818:	08023fd4 	.word	0x08023fd4

0801c81c <getMessageStatus>:
bool getMessageStatus() {
 801c81c:	b480      	push	{r7}
 801c81e:	af00      	add	r7, sp, #0
	return messageStatus;
 801c820:	4b03      	ldr	r3, [pc, #12]	@ (801c830 <getMessageStatus+0x14>)
 801c822:	781b      	ldrb	r3, [r3, #0]
}
 801c824:	4618      	mov	r0, r3
 801c826:	46bd      	mov	sp, r7
 801c828:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c82c:	4770      	bx	lr
 801c82e:	bf00      	nop
 801c830:	2001557e 	.word	0x2001557e

0801c834 <setMessageStatus>:
void setMessageStatus(bool msgStatus) {
 801c834:	b480      	push	{r7}
 801c836:	b083      	sub	sp, #12
 801c838:	af00      	add	r7, sp, #0
 801c83a:	4603      	mov	r3, r0
 801c83c:	71fb      	strb	r3, [r7, #7]
	messageStatus = msgStatus;
 801c83e:	4a04      	ldr	r2, [pc, #16]	@ (801c850 <setMessageStatus+0x1c>)
 801c840:	79fb      	ldrb	r3, [r7, #7]
 801c842:	7013      	strb	r3, [r2, #0]
}
 801c844:	bf00      	nop
 801c846:	370c      	adds	r7, #12
 801c848:	46bd      	mov	sp, r7
 801c84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c84e:	4770      	bx	lr
 801c850:	2001557e 	.word	0x2001557e

0801c854 <SMS_FSend>:

bool SMS_FSend(char *number, char *message) {
 801c854:	b580      	push	{r7, lr}
 801c856:	b09e      	sub	sp, #120	@ 0x78
 801c858:	af00      	add	r7, sp, #0
 801c85a:	6078      	str	r0, [r7, #4]
 801c85c:	6039      	str	r1, [r7, #0]
	char cmd[100] = { };
 801c85e:	2300      	movs	r3, #0
 801c860:	617b      	str	r3, [r7, #20]
 801c862:	f107 0318 	add.w	r3, r7, #24
 801c866:	2260      	movs	r2, #96	@ 0x60
 801c868:	2100      	movs	r1, #0
 801c86a:	4618      	mov	r0, r3
 801c86c:	f002 fae0 	bl	801ee30 <memset>
	number[10] = '\0';
 801c870:	687b      	ldr	r3, [r7, #4]
 801c872:	330a      	adds	r3, #10
 801c874:	2200      	movs	r2, #0
 801c876:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1000);
 801c878:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 801c87c:	f7e9 f8b4 	bl	80059e8 <HAL_Delay>
	sprintf(cmd, "AT+CMGS=\"%s\"\r\n", number);
 801c880:	f107 0314 	add.w	r3, r7, #20
 801c884:	687a      	ldr	r2, [r7, #4]
 801c886:	4916      	ldr	r1, [pc, #88]	@ (801c8e0 <SMS_FSend+0x8c>)
 801c888:	4618      	mov	r0, r3
 801c88a:	f002 f975 	bl	801eb78 <siprintf>
	if (EC200_Transmit(cmd, sms_resp_buff, 2000)) {
 801c88e:	f107 0314 	add.w	r3, r7, #20
 801c892:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 801c896:	4913      	ldr	r1, [pc, #76]	@ (801c8e4 <SMS_FSend+0x90>)
 801c898:	4618      	mov	r0, r3
 801c89a:	f7e4 fc87 	bl	80011ac <EC200_Transmit>

	}
	uint8_t ctrlz[10] = { };
 801c89e:	2300      	movs	r3, #0
 801c8a0:	60bb      	str	r3, [r7, #8]
 801c8a2:	f107 030c 	add.w	r3, r7, #12
 801c8a6:	2200      	movs	r2, #0
 801c8a8:	601a      	str	r2, [r3, #0]
 801c8aa:	809a      	strh	r2, [r3, #4]
	sprintf(ctrlz, "%s\r\n%c", message, 26);
 801c8ac:	f107 0008 	add.w	r0, r7, #8
 801c8b0:	231a      	movs	r3, #26
 801c8b2:	683a      	ldr	r2, [r7, #0]
 801c8b4:	490c      	ldr	r1, [pc, #48]	@ (801c8e8 <SMS_FSend+0x94>)
 801c8b6:	f002 f95f 	bl	801eb78 <siprintf>
	if (EC200_Transmit(ctrlz, sms_resp_buff, 2000)) {
 801c8ba:	f107 0308 	add.w	r3, r7, #8
 801c8be:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 801c8c2:	4908      	ldr	r1, [pc, #32]	@ (801c8e4 <SMS_FSend+0x90>)
 801c8c4:	4618      	mov	r0, r3
 801c8c6:	f7e4 fc71 	bl	80011ac <EC200_Transmit>
 801c8ca:	4603      	mov	r3, r0
 801c8cc:	2b00      	cmp	r3, #0
 801c8ce:	d001      	beq.n	801c8d4 <SMS_FSend+0x80>
		return true;
 801c8d0:	2301      	movs	r3, #1
 801c8d2:	e000      	b.n	801c8d6 <SMS_FSend+0x82>
	}
	return false;
 801c8d4:	2300      	movs	r3, #0
}
 801c8d6:	4618      	mov	r0, r3
 801c8d8:	3778      	adds	r7, #120	@ 0x78
 801c8da:	46bd      	mov	sp, r7
 801c8dc:	bd80      	pop	{r7, pc}
 801c8de:	bf00      	nop
 801c8e0:	0802403c 	.word	0x0802403c
 801c8e4:	20015484 	.word	0x20015484
 801c8e8:	0802404c 	.word	0x0802404c

0801c8ec <setTcpServerIP>:
#include "tcp.h"
char tcp_buff[250];
char SERVER_IP[16]={0};
int SERVER_PORT= 0;

void setTcpServerIP(char *ip){
 801c8ec:	b580      	push	{r7, lr}
 801c8ee:	b082      	sub	sp, #8
 801c8f0:	af00      	add	r7, sp, #0
 801c8f2:	6078      	str	r0, [r7, #4]
	clearBuffer(SERVER_IP, sizeof(SERVER_IP));
 801c8f4:	2110      	movs	r1, #16
 801c8f6:	4805      	ldr	r0, [pc, #20]	@ (801c90c <setTcpServerIP+0x20>)
 801c8f8:	f7e5 f8e6 	bl	8001ac8 <clearBuffer>
	strcpy(SERVER_IP,ip);
 801c8fc:	6879      	ldr	r1, [r7, #4]
 801c8fe:	4803      	ldr	r0, [pc, #12]	@ (801c90c <setTcpServerIP+0x20>)
 801c900:	f002 fbf3 	bl	801f0ea <strcpy>
}
 801c904:	bf00      	nop
 801c906:	3708      	adds	r7, #8
 801c908:	46bd      	mov	sp, r7
 801c90a:	bd80      	pop	{r7, pc}
 801c90c:	2001567c 	.word	0x2001567c

0801c910 <setTcpPort>:
void setTcpPort(int port){
 801c910:	b480      	push	{r7}
 801c912:	b083      	sub	sp, #12
 801c914:	af00      	add	r7, sp, #0
 801c916:	6078      	str	r0, [r7, #4]
	SERVER_PORT=port;
 801c918:	4a04      	ldr	r2, [pc, #16]	@ (801c92c <setTcpPort+0x1c>)
 801c91a:	687b      	ldr	r3, [r7, #4]
 801c91c:	6013      	str	r3, [r2, #0]
}
 801c91e:	bf00      	nop
 801c920:	370c      	adds	r7, #12
 801c922:	46bd      	mov	sp, r7
 801c924:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c928:	4770      	bx	lr
 801c92a:	bf00      	nop
 801c92c:	2001568c 	.word	0x2001568c

0801c930 <getTcpPort>:
int getTcpPort(){
 801c930:	b580      	push	{r7, lr}
 801c932:	b082      	sub	sp, #8
 801c934:	af00      	add	r7, sp, #0
	char port[6]={};
 801c936:	2300      	movs	r3, #0
 801c938:	603b      	str	r3, [r7, #0]
 801c93a:	2300      	movs	r3, #0
 801c93c:	80bb      	strh	r3, [r7, #4]
	SGET_PORT1(port);
 801c93e:	463b      	mov	r3, r7
 801c940:	4618      	mov	r0, r3
 801c942:	f7fb fe0d 	bl	8018560 <SGET_PORT1>
	return atoi(port);
 801c946:	463b      	mov	r3, r7
 801c948:	4618      	mov	r0, r3
 801c94a:	f000 f9fc 	bl	801cd46 <atoi>
 801c94e:	4603      	mov	r3, r0
}
 801c950:	4618      	mov	r0, r3
 801c952:	3708      	adds	r7, #8
 801c954:	46bd      	mov	sp, r7
 801c956:	bd80      	pop	{r7, pc}

0801c958 <getTcpServerIP>:
void getTcpServerIP(char *opIP){
 801c958:	b580      	push	{r7, lr}
 801c95a:	b082      	sub	sp, #8
 801c95c:	af00      	add	r7, sp, #0
 801c95e:	6078      	str	r0, [r7, #4]
	SGET_MIP(opIP);
 801c960:	6878      	ldr	r0, [r7, #4]
 801c962:	f7fb fded 	bl	8018540 <SGET_MIP>
//	strcpy(opIP,SERVER_IP);
}
 801c966:	bf00      	nop
 801c968:	3708      	adds	r7, #8
 801c96a:	46bd      	mov	sp, r7
 801c96c:	bd80      	pop	{r7, pc}
	...

0801c970 <clear_tcp_resp_buff>:
void clear_tcp_resp_buff()
{
 801c970:	b580      	push	{r7, lr}
 801c972:	af00      	add	r7, sp, #0
	clearBuffer(tcp_buff,sizeof(tcp_buff));
 801c974:	21fa      	movs	r1, #250	@ 0xfa
 801c976:	4802      	ldr	r0, [pc, #8]	@ (801c980 <clear_tcp_resp_buff+0x10>)
 801c978:	f7e5 f8a6 	bl	8001ac8 <clearBuffer>
}
 801c97c:	bf00      	nop
 801c97e:	bd80      	pop	{r7, pc}
 801c980:	20015580 	.word	0x20015580

0801c984 <TCP_init>:

bool TCP_init(void){
 801c984:	b580      	push	{r7, lr}
 801c986:	b082      	sub	sp, #8
 801c988:	af00      	add	r7, sp, #0

	if(TCP_config()){
 801c98a:	f000 f82d 	bl	801c9e8 <TCP_config>
 801c98e:	4603      	mov	r3, r0
 801c990:	2b00      	cmp	r3, #0
 801c992:	d017      	beq.n	801c9c4 <TCP_init+0x40>
		char data[]="Test";
 801c994:	4a10      	ldr	r2, [pc, #64]	@ (801c9d8 <TCP_init+0x54>)
 801c996:	463b      	mov	r3, r7
 801c998:	e892 0003 	ldmia.w	r2, {r0, r1}
 801c99c:	6018      	str	r0, [r3, #0]
 801c99e:	3304      	adds	r3, #4
 801c9a0:	7019      	strb	r1, [r3, #0]
		if(TCP_Send(data) )
 801c9a2:	463b      	mov	r3, r7
 801c9a4:	4618      	mov	r0, r3
 801c9a6:	f000 f945 	bl	801cc34 <TCP_Send>
 801c9aa:	4603      	mov	r3, r0
 801c9ac:	2b00      	cmp	r3, #0
 801c9ae:	d004      	beq.n	801c9ba <TCP_init+0x36>
		{
			printc(MinDelay, "Data Send Success Fully\n");
 801c9b0:	490a      	ldr	r1, [pc, #40]	@ (801c9dc <TCP_init+0x58>)
 801c9b2:	200a      	movs	r0, #10
 801c9b4:	f7e5 f830 	bl	8001a18 <printc>
 801c9b8:	e008      	b.n	801c9cc <TCP_init+0x48>
		}
		else{
		printc(MinDelay, "Some error Occur during Sending\n");
 801c9ba:	4909      	ldr	r1, [pc, #36]	@ (801c9e0 <TCP_init+0x5c>)
 801c9bc:	200a      	movs	r0, #10
 801c9be:	f7e5 f82b 	bl	8001a18 <printc>
 801c9c2:	e003      	b.n	801c9cc <TCP_init+0x48>
		}
	}
	else{
		printc(MinDelay,"Configuration Failed \n");
 801c9c4:	4907      	ldr	r1, [pc, #28]	@ (801c9e4 <TCP_init+0x60>)
 801c9c6:	200a      	movs	r0, #10
 801c9c8:	f7e5 f826 	bl	8001a18 <printc>
	}
}
 801c9cc:	bf00      	nop
 801c9ce:	4618      	mov	r0, r3
 801c9d0:	3708      	adds	r7, #8
 801c9d2:	46bd      	mov	sp, r7
 801c9d4:	bd80      	pop	{r7, pc}
 801c9d6:	bf00      	nop
 801c9d8:	080240bc 	.word	0x080240bc
 801c9dc:	08024064 	.word	0x08024064
 801c9e0:	08024080 	.word	0x08024080
 801c9e4:	080240a4 	.word	0x080240a4

0801c9e8 <TCP_config>:

bool TCP_config() {
 801c9e8:	b580      	push	{r7, lr}
 801c9ea:	af00      	add	r7, sp, #0

	clear_tcp_resp_buff();
 801c9ec:	f7ff ffc0 	bl	801c970 <clear_tcp_resp_buff>

    if(EC200_Transmit("AT+CPIN?\r\n",tcp_buff,2000))
 801c9f0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 801c9f4:	4947      	ldr	r1, [pc, #284]	@ (801cb14 <TCP_config+0x12c>)
 801c9f6:	4848      	ldr	r0, [pc, #288]	@ (801cb18 <TCP_config+0x130>)
 801c9f8:	f7e4 fbd8 	bl	80011ac <EC200_Transmit>
 801c9fc:	4603      	mov	r3, r0
 801c9fe:	2b00      	cmp	r3, #0
 801ca00:	d011      	beq.n	801ca26 <TCP_config+0x3e>
    {
    // Check if the response contains the desired string
       if (strstr(tcp_buff, "+CPIN: READY") != NULL) {
 801ca02:	4946      	ldr	r1, [pc, #280]	@ (801cb1c <TCP_config+0x134>)
 801ca04:	4843      	ldr	r0, [pc, #268]	@ (801cb14 <TCP_config+0x12c>)
 801ca06:	f002 fad3 	bl	801efb0 <strstr>
 801ca0a:	4603      	mov	r3, r0
 801ca0c:	2b00      	cmp	r3, #0
 801ca0e:	d004      	beq.n	801ca1a <TCP_config+0x32>
           printc(MinDelay, "SIM Ready\n");
 801ca10:	4943      	ldr	r1, [pc, #268]	@ (801cb20 <TCP_config+0x138>)
 801ca12:	200a      	movs	r0, #10
 801ca14:	f7e5 f800 	bl	8001a18 <printc>
 801ca18:	e005      	b.n	801ca26 <TCP_config+0x3e>
       } else {
           printc(MinDelay, "Not Ready\n");
 801ca1a:	4942      	ldr	r1, [pc, #264]	@ (801cb24 <TCP_config+0x13c>)
 801ca1c:	200a      	movs	r0, #10
 801ca1e:	f7e4 fffb 	bl	8001a18 <printc>
           return false;
 801ca22:	2300      	movs	r3, #0
 801ca24:	e074      	b.n	801cb10 <TCP_config+0x128>
       }
    }

    if(EC200_Transmit("AT+CREG?\r\n",tcp_buff,2000))
 801ca26:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 801ca2a:	493a      	ldr	r1, [pc, #232]	@ (801cb14 <TCP_config+0x12c>)
 801ca2c:	483e      	ldr	r0, [pc, #248]	@ (801cb28 <TCP_config+0x140>)
 801ca2e:	f7e4 fbbd 	bl	80011ac <EC200_Transmit>
 801ca32:	4603      	mov	r3, r0
 801ca34:	2b00      	cmp	r3, #0
 801ca36:	d011      	beq.n	801ca5c <TCP_config+0x74>
   {
    	// Check if the response contains the desired string
       if (strstr(tcp_buff, "+CREG: 0,1") != NULL) {
 801ca38:	493c      	ldr	r1, [pc, #240]	@ (801cb2c <TCP_config+0x144>)
 801ca3a:	4836      	ldr	r0, [pc, #216]	@ (801cb14 <TCP_config+0x12c>)
 801ca3c:	f002 fab8 	bl	801efb0 <strstr>
 801ca40:	4603      	mov	r3, r0
 801ca42:	2b00      	cmp	r3, #0
 801ca44:	d004      	beq.n	801ca50 <TCP_config+0x68>
           printc(MinDelay, "Registered at Home\n");
 801ca46:	493a      	ldr	r1, [pc, #232]	@ (801cb30 <TCP_config+0x148>)
 801ca48:	200a      	movs	r0, #10
 801ca4a:	f7e4 ffe5 	bl	8001a18 <printc>
 801ca4e:	e005      	b.n	801ca5c <TCP_config+0x74>
       } else {
           printc(MinDelay, "Not Registered\n");
 801ca50:	4938      	ldr	r1, [pc, #224]	@ (801cb34 <TCP_config+0x14c>)
 801ca52:	200a      	movs	r0, #10
 801ca54:	f7e4 ffe0 	bl	8001a18 <printc>
           return false;
 801ca58:	2300      	movs	r3, #0
 801ca5a:	e059      	b.n	801cb10 <TCP_config+0x128>
       }
   }

    if(EC200_Transmit("AT+QIDEACT=1\r\n",tcp_buff,2000))
 801ca5c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 801ca60:	492c      	ldr	r1, [pc, #176]	@ (801cb14 <TCP_config+0x12c>)
 801ca62:	4835      	ldr	r0, [pc, #212]	@ (801cb38 <TCP_config+0x150>)
 801ca64:	f7e4 fba2 	bl	80011ac <EC200_Transmit>
 801ca68:	4603      	mov	r3, r0
 801ca6a:	2b00      	cmp	r3, #0
 801ca6c:	d018      	beq.n	801caa0 <TCP_config+0xb8>
    {
    // Check if the response contains "OK" or "+QIURC: \"closed\",0"
    if (strstr(tcp_buff, "OK") != NULL || strstr(tcp_buff, "+QIURC: \"closed\",0") != NULL) {
 801ca6e:	4933      	ldr	r1, [pc, #204]	@ (801cb3c <TCP_config+0x154>)
 801ca70:	4828      	ldr	r0, [pc, #160]	@ (801cb14 <TCP_config+0x12c>)
 801ca72:	f002 fa9d 	bl	801efb0 <strstr>
 801ca76:	4603      	mov	r3, r0
 801ca78:	2b00      	cmp	r3, #0
 801ca7a:	d106      	bne.n	801ca8a <TCP_config+0xa2>
 801ca7c:	4930      	ldr	r1, [pc, #192]	@ (801cb40 <TCP_config+0x158>)
 801ca7e:	4825      	ldr	r0, [pc, #148]	@ (801cb14 <TCP_config+0x12c>)
 801ca80:	f002 fa96 	bl	801efb0 <strstr>
 801ca84:	4603      	mov	r3, r0
 801ca86:	2b00      	cmp	r3, #0
 801ca88:	d004      	beq.n	801ca94 <TCP_config+0xac>
        printc(MinDelay, "Internet closed successfully\n");
 801ca8a:	492e      	ldr	r1, [pc, #184]	@ (801cb44 <TCP_config+0x15c>)
 801ca8c:	200a      	movs	r0, #10
 801ca8e:	f7e4 ffc3 	bl	8001a18 <printc>
 801ca92:	e005      	b.n	801caa0 <TCP_config+0xb8>

    } else {
        printc(MinDelay, "Failed to close the Internet\n");
 801ca94:	492c      	ldr	r1, [pc, #176]	@ (801cb48 <TCP_config+0x160>)
 801ca96:	200a      	movs	r0, #10
 801ca98:	f7e4 ffbe 	bl	8001a18 <printc>
        return false;
 801ca9c:	2300      	movs	r3, #0
 801ca9e:	e037      	b.n	801cb10 <TCP_config+0x128>
    }
    }
    if(EC200_Transmit("AT+QICSGP=1,1,\"TAISYSNET\",\"\",\"\",0\r\n",tcp_buff,2000))
 801caa0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 801caa4:	491b      	ldr	r1, [pc, #108]	@ (801cb14 <TCP_config+0x12c>)
 801caa6:	4829      	ldr	r0, [pc, #164]	@ (801cb4c <TCP_config+0x164>)
 801caa8:	f7e4 fb80 	bl	80011ac <EC200_Transmit>
 801caac:	4603      	mov	r3, r0
 801caae:	2b00      	cmp	r3, #0
 801cab0:	d011      	beq.n	801cad6 <TCP_config+0xee>
    {
        // Check if the response contains "OK"
        if (strstr(tcp_buff, "OK") != NULL) {
 801cab2:	4922      	ldr	r1, [pc, #136]	@ (801cb3c <TCP_config+0x154>)
 801cab4:	4817      	ldr	r0, [pc, #92]	@ (801cb14 <TCP_config+0x12c>)
 801cab6:	f002 fa7b 	bl	801efb0 <strstr>
 801caba:	4603      	mov	r3, r0
 801cabc:	2b00      	cmp	r3, #0
 801cabe:	d004      	beq.n	801caca <TCP_config+0xe2>
            printc(MinDelay, "APN SET SUCESSFULLY\n");
 801cac0:	4923      	ldr	r1, [pc, #140]	@ (801cb50 <TCP_config+0x168>)
 801cac2:	200a      	movs	r0, #10
 801cac4:	f7e4 ffa8 	bl	8001a18 <printc>
 801cac8:	e005      	b.n	801cad6 <TCP_config+0xee>

        } else {
            printc(MinDelay, "Failed to SET APN\n");
 801caca:	4922      	ldr	r1, [pc, #136]	@ (801cb54 <TCP_config+0x16c>)
 801cacc:	200a      	movs	r0, #10
 801cace:	f7e4 ffa3 	bl	8001a18 <printc>
            return false;
 801cad2:	2300      	movs	r3, #0
 801cad4:	e01c      	b.n	801cb10 <TCP_config+0x128>
        }

    }
    if(EC200_Transmit("AT+QIACT=1\r\n",tcp_buff,2000))
 801cad6:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 801cada:	490e      	ldr	r1, [pc, #56]	@ (801cb14 <TCP_config+0x12c>)
 801cadc:	481e      	ldr	r0, [pc, #120]	@ (801cb58 <TCP_config+0x170>)
 801cade:	f7e4 fb65 	bl	80011ac <EC200_Transmit>
 801cae2:	4603      	mov	r3, r0
 801cae4:	2b00      	cmp	r3, #0
 801cae6:	d012      	beq.n	801cb0e <TCP_config+0x126>
    {
    // Check if the response contains "OK"
           if (strstr(tcp_buff, "OK") != NULL) {
 801cae8:	4914      	ldr	r1, [pc, #80]	@ (801cb3c <TCP_config+0x154>)
 801caea:	480a      	ldr	r0, [pc, #40]	@ (801cb14 <TCP_config+0x12c>)
 801caec:	f002 fa60 	bl	801efb0 <strstr>
 801caf0:	4603      	mov	r3, r0
 801caf2:	2b00      	cmp	r3, #0
 801caf4:	d005      	beq.n	801cb02 <TCP_config+0x11a>
               printc(MinDelay, "DATA ENABLED\n");
 801caf6:	4919      	ldr	r1, [pc, #100]	@ (801cb5c <TCP_config+0x174>)
 801caf8:	200a      	movs	r0, #10
 801cafa:	f7e4 ff8d 	bl	8001a18 <printc>
               return true;
 801cafe:	2301      	movs	r3, #1
 801cb00:	e006      	b.n	801cb10 <TCP_config+0x128>
           } else {
               printc(MinDelay, "Failed to DATA ENABLE\n");
 801cb02:	4917      	ldr	r1, [pc, #92]	@ (801cb60 <TCP_config+0x178>)
 801cb04:	200a      	movs	r0, #10
 801cb06:	f7e4 ff87 	bl	8001a18 <printc>
               return false;
 801cb0a:	2300      	movs	r3, #0
 801cb0c:	e000      	b.n	801cb10 <TCP_config+0x128>
           }
    }
    return true;
 801cb0e:	2301      	movs	r3, #1
}
 801cb10:	4618      	mov	r0, r3
 801cb12:	bd80      	pop	{r7, pc}
 801cb14:	20015580 	.word	0x20015580
 801cb18:	080240c4 	.word	0x080240c4
 801cb1c:	080240d0 	.word	0x080240d0
 801cb20:	080240e0 	.word	0x080240e0
 801cb24:	080240ec 	.word	0x080240ec
 801cb28:	080240f8 	.word	0x080240f8
 801cb2c:	08024104 	.word	0x08024104
 801cb30:	08024110 	.word	0x08024110
 801cb34:	08024124 	.word	0x08024124
 801cb38:	08024134 	.word	0x08024134
 801cb3c:	08024144 	.word	0x08024144
 801cb40:	08024148 	.word	0x08024148
 801cb44:	0802415c 	.word	0x0802415c
 801cb48:	0802417c 	.word	0x0802417c
 801cb4c:	0802419c 	.word	0x0802419c
 801cb50:	080241c0 	.word	0x080241c0
 801cb54:	080241d8 	.word	0x080241d8
 801cb58:	080241ec 	.word	0x080241ec
 801cb5c:	080241fc 	.word	0x080241fc
 801cb60:	0802420c 	.word	0x0802420c

0801cb64 <TCP_Open>:

bool TCP_Open() {
 801cb64:	b580      	push	{r7, lr}
 801cb66:	b09a      	sub	sp, #104	@ 0x68
 801cb68:	af00      	add	r7, sp, #0
	getTcpServerIP(SERVER_IP);
 801cb6a:	4829      	ldr	r0, [pc, #164]	@ (801cc10 <TCP_Open+0xac>)
 801cb6c:	f7ff fef4 	bl	801c958 <getTcpServerIP>
	SERVER_PORT=getTcpPort();
 801cb70:	f7ff fede 	bl	801c930 <getTcpPort>
 801cb74:	4603      	mov	r3, r0
 801cb76:	4a27      	ldr	r2, [pc, #156]	@ (801cc14 <TCP_Open+0xb0>)
 801cb78:	6013      	str	r3, [r2, #0]
    char command[100]={0};
 801cb7a:	2300      	movs	r3, #0
 801cb7c:	607b      	str	r3, [r7, #4]
 801cb7e:	f107 0308 	add.w	r3, r7, #8
 801cb82:	2260      	movs	r2, #96	@ 0x60
 801cb84:	2100      	movs	r1, #0
 801cb86:	4618      	mov	r0, r3
 801cb88:	f002 f952 	bl	801ee30 <memset>
    sprintf(command, "AT+QIOPEN=1,0,\"TCP\",\"%s\",%d,0,1\r\n",SERVER_IP, SERVER_PORT);
 801cb8c:	4b21      	ldr	r3, [pc, #132]	@ (801cc14 <TCP_Open+0xb0>)
 801cb8e:	681b      	ldr	r3, [r3, #0]
 801cb90:	1d38      	adds	r0, r7, #4
 801cb92:	4a1f      	ldr	r2, [pc, #124]	@ (801cc10 <TCP_Open+0xac>)
 801cb94:	4920      	ldr	r1, [pc, #128]	@ (801cc18 <TCP_Open+0xb4>)
 801cb96:	f001 ffef 	bl	801eb78 <siprintf>
    HAL_Delay(1000);
 801cb9a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 801cb9e:	f7e8 ff23 	bl	80059e8 <HAL_Delay>
    if(EC200_Transmit(command,tcp_buff,10000))
 801cba2:	1d3b      	adds	r3, r7, #4
 801cba4:	f242 7210 	movw	r2, #10000	@ 0x2710
 801cba8:	491c      	ldr	r1, [pc, #112]	@ (801cc1c <TCP_Open+0xb8>)
 801cbaa:	4618      	mov	r0, r3
 801cbac:	f7e4 fafe 	bl	80011ac <EC200_Transmit>
 801cbb0:	4603      	mov	r3, r0
 801cbb2:	2b00      	cmp	r3, #0
 801cbb4:	d026      	beq.n	801cc04 <TCP_Open+0xa0>
    {
    	if(wait_for_response(tcp_buff,30000))
 801cbb6:	f247 5130 	movw	r1, #30000	@ 0x7530
 801cbba:	4818      	ldr	r0, [pc, #96]	@ (801cc1c <TCP_Open+0xb8>)
 801cbbc:	f7e4 faa6 	bl	800110c <wait_for_response>
 801cbc0:	4603      	mov	r3, r0
 801cbc2:	2b00      	cmp	r3, #0
 801cbc4:	d018      	beq.n	801cbf8 <TCP_Open+0x94>
    	{

    	  // Check if the response contains "OK" and "+QIOPEN: 0,0"
    	        if ((strstr(tcp_buff, "+QIOPEN: 0,0") != NULL)||(strstr(tcp_buff, "+QIOPEN: 0,563") != NULL) ) {
 801cbc6:	4916      	ldr	r1, [pc, #88]	@ (801cc20 <TCP_Open+0xbc>)
 801cbc8:	4814      	ldr	r0, [pc, #80]	@ (801cc1c <TCP_Open+0xb8>)
 801cbca:	f002 f9f1 	bl	801efb0 <strstr>
 801cbce:	4603      	mov	r3, r0
 801cbd0:	2b00      	cmp	r3, #0
 801cbd2:	d106      	bne.n	801cbe2 <TCP_Open+0x7e>
 801cbd4:	4913      	ldr	r1, [pc, #76]	@ (801cc24 <TCP_Open+0xc0>)
 801cbd6:	4811      	ldr	r0, [pc, #68]	@ (801cc1c <TCP_Open+0xb8>)
 801cbd8:	f002 f9ea 	bl	801efb0 <strstr>
 801cbdc:	4603      	mov	r3, r0
 801cbde:	2b00      	cmp	r3, #0
 801cbe0:	d004      	beq.n	801cbec <TCP_Open+0x88>
    	            printc(MinDelay, "TCP connection opened successfully\n");
 801cbe2:	4911      	ldr	r1, [pc, #68]	@ (801cc28 <TCP_Open+0xc4>)
 801cbe4:	200a      	movs	r0, #10
 801cbe6:	f7e4 ff17 	bl	8001a18 <printc>
 801cbea:	e00b      	b.n	801cc04 <TCP_Open+0xa0>
    	        } else {
    	            printc(MinDelay, "Failed to open TCP connection\n");
 801cbec:	490f      	ldr	r1, [pc, #60]	@ (801cc2c <TCP_Open+0xc8>)
 801cbee:	200a      	movs	r0, #10
 801cbf0:	f7e4 ff12 	bl	8001a18 <printc>
    	            return false;
 801cbf4:	2300      	movs	r3, #0
 801cbf6:	e006      	b.n	801cc06 <TCP_Open+0xa2>
    	        }
    	}
    	else
    	{
    		printc(MinDelay, "TCP timeout\n");
 801cbf8:	490d      	ldr	r1, [pc, #52]	@ (801cc30 <TCP_Open+0xcc>)
 801cbfa:	200a      	movs	r0, #10
 801cbfc:	f7e4 ff0c 	bl	8001a18 <printc>
    		return false;
 801cc00:	2300      	movs	r3, #0
 801cc02:	e000      	b.n	801cc06 <TCP_Open+0xa2>
    	}

    }
return true;
 801cc04:	2301      	movs	r3, #1
}
 801cc06:	4618      	mov	r0, r3
 801cc08:	3768      	adds	r7, #104	@ 0x68
 801cc0a:	46bd      	mov	sp, r7
 801cc0c:	bd80      	pop	{r7, pc}
 801cc0e:	bf00      	nop
 801cc10:	2001567c 	.word	0x2001567c
 801cc14:	2001568c 	.word	0x2001568c
 801cc18:	08024224 	.word	0x08024224
 801cc1c:	20015580 	.word	0x20015580
 801cc20:	08024248 	.word	0x08024248
 801cc24:	08024258 	.word	0x08024258
 801cc28:	08024268 	.word	0x08024268
 801cc2c:	0802428c 	.word	0x0802428c
 801cc30:	080242ac 	.word	0x080242ac

0801cc34 <TCP_Send>:

bool TCP_Send(const char *data) {
 801cc34:	b580      	push	{r7, lr}
 801cc36:	b09c      	sub	sp, #112	@ 0x70
 801cc38:	af00      	add	r7, sp, #0
 801cc3a:	6078      	str	r0, [r7, #4]
	uint8_t command[100];
	TCP_DEACT();
 801cc3c:	f000 f850 	bl	801cce0 <TCP_DEACT>
	if(TCP_Open()){
 801cc40:	f7ff ff90 	bl	801cb64 <TCP_Open>
 801cc44:	4603      	mov	r3, r0
 801cc46:	2b00      	cmp	r3, #0
 801cc48:	d033      	beq.n	801ccb2 <TCP_Send+0x7e>
		sprintf(command,"AT+QISEND=0,%d\r\n",strlen(data));
 801cc4a:	6878      	ldr	r0, [r7, #4]
 801cc4c:	f7e3 fb2a 	bl	80002a4 <strlen>
 801cc50:	4602      	mov	r2, r0
 801cc52:	f107 030c 	add.w	r3, r7, #12
 801cc56:	491b      	ldr	r1, [pc, #108]	@ (801ccc4 <TCP_Send+0x90>)
 801cc58:	4618      	mov	r0, r3
 801cc5a:	f001 ff8d 	bl	801eb78 <siprintf>
		EC200_Transmit(command,tcp_buff,2000);
 801cc5e:	f107 030c 	add.w	r3, r7, #12
 801cc62:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 801cc66:	4918      	ldr	r1, [pc, #96]	@ (801ccc8 <TCP_Send+0x94>)
 801cc68:	4618      	mov	r0, r3
 801cc6a:	f7e4 fa9f 	bl	80011ac <EC200_Transmit>
		if(EC200_Transmit(data,tcp_buff,2000))
 801cc6e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 801cc72:	4915      	ldr	r1, [pc, #84]	@ (801ccc8 <TCP_Send+0x94>)
 801cc74:	6878      	ldr	r0, [r7, #4]
 801cc76:	f7e4 fa99 	bl	80011ac <EC200_Transmit>
 801cc7a:	4603      	mov	r3, r0
 801cc7c:	2b00      	cmp	r3, #0
 801cc7e:	d012      	beq.n	801cca6 <TCP_Send+0x72>
		{
		// Check if the response contains "SEND OK"
			if (strstr(tcp_buff, "SEND OK") != NULL) {
 801cc80:	4912      	ldr	r1, [pc, #72]	@ (801cccc <TCP_Send+0x98>)
 801cc82:	4811      	ldr	r0, [pc, #68]	@ (801ccc8 <TCP_Send+0x94>)
 801cc84:	f002 f994 	bl	801efb0 <strstr>
 801cc88:	4603      	mov	r3, r0
 801cc8a:	2b00      	cmp	r3, #0
 801cc8c:	d005      	beq.n	801cc9a <TCP_Send+0x66>
				printc(MinDelay, "Data sent successfully\n");
 801cc8e:	4910      	ldr	r1, [pc, #64]	@ (801ccd0 <TCP_Send+0x9c>)
 801cc90:	200a      	movs	r0, #10
 801cc92:	f7e4 fec1 	bl	8001a18 <printc>
				return true;
 801cc96:	2301      	movs	r3, #1
 801cc98:	e010      	b.n	801ccbc <TCP_Send+0x88>
			} else {
				printc(MinDelay, "Failed to send data\n");
 801cc9a:	490e      	ldr	r1, [pc, #56]	@ (801ccd4 <TCP_Send+0xa0>)
 801cc9c:	200a      	movs	r0, #10
 801cc9e:	f7e4 febb 	bl	8001a18 <printc>
				return false;
 801cca2:	2300      	movs	r3, #0
 801cca4:	e00a      	b.n	801ccbc <TCP_Send+0x88>
			}
		}
		else{
			printc(MinDelay, "Don't get response for AT+QISEND=0 \n");
 801cca6:	490c      	ldr	r1, [pc, #48]	@ (801ccd8 <TCP_Send+0xa4>)
 801cca8:	200a      	movs	r0, #10
 801ccaa:	f7e4 feb5 	bl	8001a18 <printc>
			return false;
 801ccae:	2300      	movs	r3, #0
 801ccb0:	e004      	b.n	801ccbc <TCP_Send+0x88>
		}
	}
	else{
		printc(MinDelay, "Open Failed\n");
 801ccb2:	490a      	ldr	r1, [pc, #40]	@ (801ccdc <TCP_Send+0xa8>)
 801ccb4:	200a      	movs	r0, #10
 801ccb6:	f7e4 feaf 	bl	8001a18 <printc>
		return false;
 801ccba:	2300      	movs	r3, #0

	}
}
 801ccbc:	4618      	mov	r0, r3
 801ccbe:	3770      	adds	r7, #112	@ 0x70
 801ccc0:	46bd      	mov	sp, r7
 801ccc2:	bd80      	pop	{r7, pc}
 801ccc4:	080242bc 	.word	0x080242bc
 801ccc8:	20015580 	.word	0x20015580
 801cccc:	080242d0 	.word	0x080242d0
 801ccd0:	080242d8 	.word	0x080242d8
 801ccd4:	080242f0 	.word	0x080242f0
 801ccd8:	08024308 	.word	0x08024308
 801ccdc:	08024330 	.word	0x08024330

0801cce0 <TCP_DEACT>:
void TCP_DEACT()
{
 801cce0:	b580      	push	{r7, lr}
 801cce2:	af00      	add	r7, sp, #0
	if(EC200_Transmit("AT+QIDEACT=1\r\n",tcp_buff,2000))
 801cce4:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 801cce8:	490f      	ldr	r1, [pc, #60]	@ (801cd28 <TCP_DEACT+0x48>)
 801ccea:	4810      	ldr	r0, [pc, #64]	@ (801cd2c <TCP_DEACT+0x4c>)
 801ccec:	f7e4 fa5e 	bl	80011ac <EC200_Transmit>
 801ccf0:	4603      	mov	r3, r0
 801ccf2:	2b00      	cmp	r3, #0
 801ccf4:	d017      	beq.n	801cd26 <TCP_DEACT+0x46>
	    {
	    // Check if the response contains "OK" or "+QIURC: \"closed\",0"
	    if (strstr(tcp_buff, "OK") != NULL || strstr(tcp_buff, "+QIURC: \"closed\",0") != NULL) {
 801ccf6:	490e      	ldr	r1, [pc, #56]	@ (801cd30 <TCP_DEACT+0x50>)
 801ccf8:	480b      	ldr	r0, [pc, #44]	@ (801cd28 <TCP_DEACT+0x48>)
 801ccfa:	f002 f959 	bl	801efb0 <strstr>
 801ccfe:	4603      	mov	r3, r0
 801cd00:	2b00      	cmp	r3, #0
 801cd02:	d106      	bne.n	801cd12 <TCP_DEACT+0x32>
 801cd04:	490b      	ldr	r1, [pc, #44]	@ (801cd34 <TCP_DEACT+0x54>)
 801cd06:	4808      	ldr	r0, [pc, #32]	@ (801cd28 <TCP_DEACT+0x48>)
 801cd08:	f002 f952 	bl	801efb0 <strstr>
 801cd0c:	4603      	mov	r3, r0
 801cd0e:	2b00      	cmp	r3, #0
 801cd10:	d004      	beq.n	801cd1c <TCP_DEACT+0x3c>
	        printc(MinDelay, "Internet closed successfully\n");
 801cd12:	4909      	ldr	r1, [pc, #36]	@ (801cd38 <TCP_DEACT+0x58>)
 801cd14:	200a      	movs	r0, #10
 801cd16:	f7e4 fe7f 	bl	8001a18 <printc>
 801cd1a:	e004      	b.n	801cd26 <TCP_DEACT+0x46>

	    } else {
	        printc(MinDelay, "Failed to close the Internet\n");
 801cd1c:	4907      	ldr	r1, [pc, #28]	@ (801cd3c <TCP_DEACT+0x5c>)
 801cd1e:	200a      	movs	r0, #10
 801cd20:	f7e4 fe7a 	bl	8001a18 <printc>
	        return false;
 801cd24:	bf00      	nop
	    }
}
}
 801cd26:	bd80      	pop	{r7, pc}
 801cd28:	20015580 	.word	0x20015580
 801cd2c:	08024134 	.word	0x08024134
 801cd30:	08024144 	.word	0x08024144
 801cd34:	08024148 	.word	0x08024148
 801cd38:	0802415c 	.word	0x0802415c
 801cd3c:	0802417c 	.word	0x0802417c

0801cd40 <atof>:
 801cd40:	2100      	movs	r1, #0
 801cd42:	f000 becb 	b.w	801dadc <strtod>

0801cd46 <atoi>:
 801cd46:	220a      	movs	r2, #10
 801cd48:	2100      	movs	r1, #0
 801cd4a:	f000 bf4f 	b.w	801dbec <strtol>
	...

0801cd50 <malloc>:
 801cd50:	4b02      	ldr	r3, [pc, #8]	@ (801cd5c <malloc+0xc>)
 801cd52:	4601      	mov	r1, r0
 801cd54:	6818      	ldr	r0, [r3, #0]
 801cd56:	f000 b82d 	b.w	801cdb4 <_malloc_r>
 801cd5a:	bf00      	nop
 801cd5c:	20000224 	.word	0x20000224

0801cd60 <free>:
 801cd60:	4b02      	ldr	r3, [pc, #8]	@ (801cd6c <free+0xc>)
 801cd62:	4601      	mov	r1, r0
 801cd64:	6818      	ldr	r0, [r3, #0]
 801cd66:	f003 b863 	b.w	801fe30 <_free_r>
 801cd6a:	bf00      	nop
 801cd6c:	20000224 	.word	0x20000224

0801cd70 <sbrk_aligned>:
 801cd70:	b570      	push	{r4, r5, r6, lr}
 801cd72:	4e0f      	ldr	r6, [pc, #60]	@ (801cdb0 <sbrk_aligned+0x40>)
 801cd74:	460c      	mov	r4, r1
 801cd76:	4605      	mov	r5, r0
 801cd78:	6831      	ldr	r1, [r6, #0]
 801cd7a:	b911      	cbnz	r1, 801cd82 <sbrk_aligned+0x12>
 801cd7c:	f002 f966 	bl	801f04c <_sbrk_r>
 801cd80:	6030      	str	r0, [r6, #0]
 801cd82:	4621      	mov	r1, r4
 801cd84:	4628      	mov	r0, r5
 801cd86:	f002 f961 	bl	801f04c <_sbrk_r>
 801cd8a:	1c43      	adds	r3, r0, #1
 801cd8c:	d103      	bne.n	801cd96 <sbrk_aligned+0x26>
 801cd8e:	f04f 34ff 	mov.w	r4, #4294967295
 801cd92:	4620      	mov	r0, r4
 801cd94:	bd70      	pop	{r4, r5, r6, pc}
 801cd96:	1cc4      	adds	r4, r0, #3
 801cd98:	f024 0403 	bic.w	r4, r4, #3
 801cd9c:	42a0      	cmp	r0, r4
 801cd9e:	d0f8      	beq.n	801cd92 <sbrk_aligned+0x22>
 801cda0:	1a21      	subs	r1, r4, r0
 801cda2:	4628      	mov	r0, r5
 801cda4:	f002 f952 	bl	801f04c <_sbrk_r>
 801cda8:	3001      	adds	r0, #1
 801cdaa:	d1f2      	bne.n	801cd92 <sbrk_aligned+0x22>
 801cdac:	e7ef      	b.n	801cd8e <sbrk_aligned+0x1e>
 801cdae:	bf00      	nop
 801cdb0:	20015690 	.word	0x20015690

0801cdb4 <_malloc_r>:
 801cdb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cdb8:	1ccd      	adds	r5, r1, #3
 801cdba:	4606      	mov	r6, r0
 801cdbc:	f025 0503 	bic.w	r5, r5, #3
 801cdc0:	3508      	adds	r5, #8
 801cdc2:	2d0c      	cmp	r5, #12
 801cdc4:	bf38      	it	cc
 801cdc6:	250c      	movcc	r5, #12
 801cdc8:	2d00      	cmp	r5, #0
 801cdca:	db01      	blt.n	801cdd0 <_malloc_r+0x1c>
 801cdcc:	42a9      	cmp	r1, r5
 801cdce:	d904      	bls.n	801cdda <_malloc_r+0x26>
 801cdd0:	230c      	movs	r3, #12
 801cdd2:	6033      	str	r3, [r6, #0]
 801cdd4:	2000      	movs	r0, #0
 801cdd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cdda:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801ceb0 <_malloc_r+0xfc>
 801cdde:	f000 f869 	bl	801ceb4 <__malloc_lock>
 801cde2:	f8d8 3000 	ldr.w	r3, [r8]
 801cde6:	461c      	mov	r4, r3
 801cde8:	bb44      	cbnz	r4, 801ce3c <_malloc_r+0x88>
 801cdea:	4629      	mov	r1, r5
 801cdec:	4630      	mov	r0, r6
 801cdee:	f7ff ffbf 	bl	801cd70 <sbrk_aligned>
 801cdf2:	1c43      	adds	r3, r0, #1
 801cdf4:	4604      	mov	r4, r0
 801cdf6:	d158      	bne.n	801ceaa <_malloc_r+0xf6>
 801cdf8:	f8d8 4000 	ldr.w	r4, [r8]
 801cdfc:	4627      	mov	r7, r4
 801cdfe:	2f00      	cmp	r7, #0
 801ce00:	d143      	bne.n	801ce8a <_malloc_r+0xd6>
 801ce02:	2c00      	cmp	r4, #0
 801ce04:	d04b      	beq.n	801ce9e <_malloc_r+0xea>
 801ce06:	6823      	ldr	r3, [r4, #0]
 801ce08:	4639      	mov	r1, r7
 801ce0a:	4630      	mov	r0, r6
 801ce0c:	eb04 0903 	add.w	r9, r4, r3
 801ce10:	f002 f91c 	bl	801f04c <_sbrk_r>
 801ce14:	4581      	cmp	r9, r0
 801ce16:	d142      	bne.n	801ce9e <_malloc_r+0xea>
 801ce18:	6821      	ldr	r1, [r4, #0]
 801ce1a:	4630      	mov	r0, r6
 801ce1c:	1a6d      	subs	r5, r5, r1
 801ce1e:	4629      	mov	r1, r5
 801ce20:	f7ff ffa6 	bl	801cd70 <sbrk_aligned>
 801ce24:	3001      	adds	r0, #1
 801ce26:	d03a      	beq.n	801ce9e <_malloc_r+0xea>
 801ce28:	6823      	ldr	r3, [r4, #0]
 801ce2a:	442b      	add	r3, r5
 801ce2c:	6023      	str	r3, [r4, #0]
 801ce2e:	f8d8 3000 	ldr.w	r3, [r8]
 801ce32:	685a      	ldr	r2, [r3, #4]
 801ce34:	bb62      	cbnz	r2, 801ce90 <_malloc_r+0xdc>
 801ce36:	f8c8 7000 	str.w	r7, [r8]
 801ce3a:	e00f      	b.n	801ce5c <_malloc_r+0xa8>
 801ce3c:	6822      	ldr	r2, [r4, #0]
 801ce3e:	1b52      	subs	r2, r2, r5
 801ce40:	d420      	bmi.n	801ce84 <_malloc_r+0xd0>
 801ce42:	2a0b      	cmp	r2, #11
 801ce44:	d917      	bls.n	801ce76 <_malloc_r+0xc2>
 801ce46:	1961      	adds	r1, r4, r5
 801ce48:	42a3      	cmp	r3, r4
 801ce4a:	6025      	str	r5, [r4, #0]
 801ce4c:	bf18      	it	ne
 801ce4e:	6059      	strne	r1, [r3, #4]
 801ce50:	6863      	ldr	r3, [r4, #4]
 801ce52:	bf08      	it	eq
 801ce54:	f8c8 1000 	streq.w	r1, [r8]
 801ce58:	5162      	str	r2, [r4, r5]
 801ce5a:	604b      	str	r3, [r1, #4]
 801ce5c:	4630      	mov	r0, r6
 801ce5e:	f000 f82f 	bl	801cec0 <__malloc_unlock>
 801ce62:	f104 000b 	add.w	r0, r4, #11
 801ce66:	1d23      	adds	r3, r4, #4
 801ce68:	f020 0007 	bic.w	r0, r0, #7
 801ce6c:	1ac2      	subs	r2, r0, r3
 801ce6e:	bf1c      	itt	ne
 801ce70:	1a1b      	subne	r3, r3, r0
 801ce72:	50a3      	strne	r3, [r4, r2]
 801ce74:	e7af      	b.n	801cdd6 <_malloc_r+0x22>
 801ce76:	6862      	ldr	r2, [r4, #4]
 801ce78:	42a3      	cmp	r3, r4
 801ce7a:	bf0c      	ite	eq
 801ce7c:	f8c8 2000 	streq.w	r2, [r8]
 801ce80:	605a      	strne	r2, [r3, #4]
 801ce82:	e7eb      	b.n	801ce5c <_malloc_r+0xa8>
 801ce84:	4623      	mov	r3, r4
 801ce86:	6864      	ldr	r4, [r4, #4]
 801ce88:	e7ae      	b.n	801cde8 <_malloc_r+0x34>
 801ce8a:	463c      	mov	r4, r7
 801ce8c:	687f      	ldr	r7, [r7, #4]
 801ce8e:	e7b6      	b.n	801cdfe <_malloc_r+0x4a>
 801ce90:	461a      	mov	r2, r3
 801ce92:	685b      	ldr	r3, [r3, #4]
 801ce94:	42a3      	cmp	r3, r4
 801ce96:	d1fb      	bne.n	801ce90 <_malloc_r+0xdc>
 801ce98:	2300      	movs	r3, #0
 801ce9a:	6053      	str	r3, [r2, #4]
 801ce9c:	e7de      	b.n	801ce5c <_malloc_r+0xa8>
 801ce9e:	230c      	movs	r3, #12
 801cea0:	4630      	mov	r0, r6
 801cea2:	6033      	str	r3, [r6, #0]
 801cea4:	f000 f80c 	bl	801cec0 <__malloc_unlock>
 801cea8:	e794      	b.n	801cdd4 <_malloc_r+0x20>
 801ceaa:	6005      	str	r5, [r0, #0]
 801ceac:	e7d6      	b.n	801ce5c <_malloc_r+0xa8>
 801ceae:	bf00      	nop
 801ceb0:	20015694 	.word	0x20015694

0801ceb4 <__malloc_lock>:
 801ceb4:	4801      	ldr	r0, [pc, #4]	@ (801cebc <__malloc_lock+0x8>)
 801ceb6:	f002 b916 	b.w	801f0e6 <__retarget_lock_acquire_recursive>
 801ceba:	bf00      	nop
 801cebc:	200157d8 	.word	0x200157d8

0801cec0 <__malloc_unlock>:
 801cec0:	4801      	ldr	r0, [pc, #4]	@ (801cec8 <__malloc_unlock+0x8>)
 801cec2:	f002 b911 	b.w	801f0e8 <__retarget_lock_release_recursive>
 801cec6:	bf00      	nop
 801cec8:	200157d8 	.word	0x200157d8

0801cecc <sulp>:
 801cecc:	b570      	push	{r4, r5, r6, lr}
 801cece:	4604      	mov	r4, r0
 801ced0:	460d      	mov	r5, r1
 801ced2:	4616      	mov	r6, r2
 801ced4:	ec45 4b10 	vmov	d0, r4, r5
 801ced8:	f003 feb6 	bl	8020c48 <__ulp>
 801cedc:	ec51 0b10 	vmov	r0, r1, d0
 801cee0:	b17e      	cbz	r6, 801cf02 <sulp+0x36>
 801cee2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801cee6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801ceea:	2b00      	cmp	r3, #0
 801ceec:	dd09      	ble.n	801cf02 <sulp+0x36>
 801ceee:	051b      	lsls	r3, r3, #20
 801cef0:	2400      	movs	r4, #0
 801cef2:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 801cef6:	4622      	mov	r2, r4
 801cef8:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 801cefc:	462b      	mov	r3, r5
 801cefe:	f7e3 fb95 	bl	800062c <__aeabi_dmul>
 801cf02:	ec41 0b10 	vmov	d0, r0, r1
 801cf06:	bd70      	pop	{r4, r5, r6, pc}

0801cf08 <_strtod_l>:
 801cf08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cf0c:	b09f      	sub	sp, #124	@ 0x7c
 801cf0e:	460c      	mov	r4, r1
 801cf10:	f04f 0a00 	mov.w	sl, #0
 801cf14:	f04f 0b00 	mov.w	fp, #0
 801cf18:	9217      	str	r2, [sp, #92]	@ 0x5c
 801cf1a:	2200      	movs	r2, #0
 801cf1c:	9005      	str	r0, [sp, #20]
 801cf1e:	921a      	str	r2, [sp, #104]	@ 0x68
 801cf20:	460a      	mov	r2, r1
 801cf22:	9219      	str	r2, [sp, #100]	@ 0x64
 801cf24:	7811      	ldrb	r1, [r2, #0]
 801cf26:	292b      	cmp	r1, #43	@ 0x2b
 801cf28:	d04a      	beq.n	801cfc0 <_strtod_l+0xb8>
 801cf2a:	d838      	bhi.n	801cf9e <_strtod_l+0x96>
 801cf2c:	290d      	cmp	r1, #13
 801cf2e:	d832      	bhi.n	801cf96 <_strtod_l+0x8e>
 801cf30:	2908      	cmp	r1, #8
 801cf32:	d832      	bhi.n	801cf9a <_strtod_l+0x92>
 801cf34:	2900      	cmp	r1, #0
 801cf36:	d03b      	beq.n	801cfb0 <_strtod_l+0xa8>
 801cf38:	2200      	movs	r2, #0
 801cf3a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801cf3c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 801cf3e:	782a      	ldrb	r2, [r5, #0]
 801cf40:	2a30      	cmp	r2, #48	@ 0x30
 801cf42:	f040 80b3 	bne.w	801d0ac <_strtod_l+0x1a4>
 801cf46:	786a      	ldrb	r2, [r5, #1]
 801cf48:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801cf4c:	2a58      	cmp	r2, #88	@ 0x58
 801cf4e:	d16e      	bne.n	801d02e <_strtod_l+0x126>
 801cf50:	9302      	str	r3, [sp, #8]
 801cf52:	a919      	add	r1, sp, #100	@ 0x64
 801cf54:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801cf56:	4a90      	ldr	r2, [pc, #576]	@ (801d198 <_strtod_l+0x290>)
 801cf58:	9301      	str	r3, [sp, #4]
 801cf5a:	ab1a      	add	r3, sp, #104	@ 0x68
 801cf5c:	9805      	ldr	r0, [sp, #20]
 801cf5e:	9300      	str	r3, [sp, #0]
 801cf60:	ab1b      	add	r3, sp, #108	@ 0x6c
 801cf62:	f003 f815 	bl	801ff90 <__gethex>
 801cf66:	f010 060f 	ands.w	r6, r0, #15
 801cf6a:	4604      	mov	r4, r0
 801cf6c:	d005      	beq.n	801cf7a <_strtod_l+0x72>
 801cf6e:	2e06      	cmp	r6, #6
 801cf70:	d128      	bne.n	801cfc4 <_strtod_l+0xbc>
 801cf72:	3501      	adds	r5, #1
 801cf74:	2300      	movs	r3, #0
 801cf76:	9519      	str	r5, [sp, #100]	@ 0x64
 801cf78:	930b      	str	r3, [sp, #44]	@ 0x2c
 801cf7a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801cf7c:	2b00      	cmp	r3, #0
 801cf7e:	f040 858e 	bne.w	801da9e <_strtod_l+0xb96>
 801cf82:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801cf84:	b1cb      	cbz	r3, 801cfba <_strtod_l+0xb2>
 801cf86:	4652      	mov	r2, sl
 801cf88:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 801cf8c:	ec43 2b10 	vmov	d0, r2, r3
 801cf90:	b01f      	add	sp, #124	@ 0x7c
 801cf92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cf96:	2920      	cmp	r1, #32
 801cf98:	d1ce      	bne.n	801cf38 <_strtod_l+0x30>
 801cf9a:	3201      	adds	r2, #1
 801cf9c:	e7c1      	b.n	801cf22 <_strtod_l+0x1a>
 801cf9e:	292d      	cmp	r1, #45	@ 0x2d
 801cfa0:	d1ca      	bne.n	801cf38 <_strtod_l+0x30>
 801cfa2:	2101      	movs	r1, #1
 801cfa4:	910b      	str	r1, [sp, #44]	@ 0x2c
 801cfa6:	1c51      	adds	r1, r2, #1
 801cfa8:	9119      	str	r1, [sp, #100]	@ 0x64
 801cfaa:	7852      	ldrb	r2, [r2, #1]
 801cfac:	2a00      	cmp	r2, #0
 801cfae:	d1c5      	bne.n	801cf3c <_strtod_l+0x34>
 801cfb0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801cfb2:	9419      	str	r4, [sp, #100]	@ 0x64
 801cfb4:	2b00      	cmp	r3, #0
 801cfb6:	f040 8570 	bne.w	801da9a <_strtod_l+0xb92>
 801cfba:	4652      	mov	r2, sl
 801cfbc:	465b      	mov	r3, fp
 801cfbe:	e7e5      	b.n	801cf8c <_strtod_l+0x84>
 801cfc0:	2100      	movs	r1, #0
 801cfc2:	e7ef      	b.n	801cfa4 <_strtod_l+0x9c>
 801cfc4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801cfc6:	b13a      	cbz	r2, 801cfd8 <_strtod_l+0xd0>
 801cfc8:	2135      	movs	r1, #53	@ 0x35
 801cfca:	a81c      	add	r0, sp, #112	@ 0x70
 801cfcc:	f003 ff3a 	bl	8020e44 <__copybits>
 801cfd0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801cfd2:	9805      	ldr	r0, [sp, #20]
 801cfd4:	f003 fafe 	bl	80205d4 <_Bfree>
 801cfd8:	3e01      	subs	r6, #1
 801cfda:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801cfdc:	2e04      	cmp	r6, #4
 801cfde:	d806      	bhi.n	801cfee <_strtod_l+0xe6>
 801cfe0:	e8df f006 	tbb	[pc, r6]
 801cfe4:	201d0314 	.word	0x201d0314
 801cfe8:	14          	.byte	0x14
 801cfe9:	00          	.byte	0x00
 801cfea:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 801cfee:	05e1      	lsls	r1, r4, #23
 801cff0:	bf48      	it	mi
 801cff2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 801cff6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801cffa:	0d1b      	lsrs	r3, r3, #20
 801cffc:	051b      	lsls	r3, r3, #20
 801cffe:	2b00      	cmp	r3, #0
 801d000:	d1bb      	bne.n	801cf7a <_strtod_l+0x72>
 801d002:	f002 f845 	bl	801f090 <__errno>
 801d006:	2322      	movs	r3, #34	@ 0x22
 801d008:	6003      	str	r3, [r0, #0]
 801d00a:	e7b6      	b.n	801cf7a <_strtod_l+0x72>
 801d00c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 801d010:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801d014:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 801d018:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801d01c:	e7e7      	b.n	801cfee <_strtod_l+0xe6>
 801d01e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 801d1a0 <_strtod_l+0x298>
 801d022:	e7e4      	b.n	801cfee <_strtod_l+0xe6>
 801d024:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 801d028:	f04f 3aff 	mov.w	sl, #4294967295
 801d02c:	e7df      	b.n	801cfee <_strtod_l+0xe6>
 801d02e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801d030:	1c5a      	adds	r2, r3, #1
 801d032:	9219      	str	r2, [sp, #100]	@ 0x64
 801d034:	785b      	ldrb	r3, [r3, #1]
 801d036:	2b30      	cmp	r3, #48	@ 0x30
 801d038:	d0f9      	beq.n	801d02e <_strtod_l+0x126>
 801d03a:	2b00      	cmp	r3, #0
 801d03c:	d09d      	beq.n	801cf7a <_strtod_l+0x72>
 801d03e:	2301      	movs	r3, #1
 801d040:	9309      	str	r3, [sp, #36]	@ 0x24
 801d042:	220a      	movs	r2, #10
 801d044:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801d046:	930c      	str	r3, [sp, #48]	@ 0x30
 801d048:	2300      	movs	r3, #0
 801d04a:	461f      	mov	r7, r3
 801d04c:	9308      	str	r3, [sp, #32]
 801d04e:	930a      	str	r3, [sp, #40]	@ 0x28
 801d050:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801d052:	7805      	ldrb	r5, [r0, #0]
 801d054:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 801d058:	b2d9      	uxtb	r1, r3
 801d05a:	2909      	cmp	r1, #9
 801d05c:	d928      	bls.n	801d0b0 <_strtod_l+0x1a8>
 801d05e:	2201      	movs	r2, #1
 801d060:	494e      	ldr	r1, [pc, #312]	@ (801d19c <_strtod_l+0x294>)
 801d062:	f001 ff24 	bl	801eeae <strncmp>
 801d066:	2800      	cmp	r0, #0
 801d068:	d033      	beq.n	801d0d2 <_strtod_l+0x1ca>
 801d06a:	2000      	movs	r0, #0
 801d06c:	462a      	mov	r2, r5
 801d06e:	463d      	mov	r5, r7
 801d070:	4681      	mov	r9, r0
 801d072:	4603      	mov	r3, r0
 801d074:	2a65      	cmp	r2, #101	@ 0x65
 801d076:	d001      	beq.n	801d07c <_strtod_l+0x174>
 801d078:	2a45      	cmp	r2, #69	@ 0x45
 801d07a:	d114      	bne.n	801d0a6 <_strtod_l+0x19e>
 801d07c:	b91d      	cbnz	r5, 801d086 <_strtod_l+0x17e>
 801d07e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d080:	4302      	orrs	r2, r0
 801d082:	d095      	beq.n	801cfb0 <_strtod_l+0xa8>
 801d084:	2500      	movs	r5, #0
 801d086:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 801d088:	1c62      	adds	r2, r4, #1
 801d08a:	9219      	str	r2, [sp, #100]	@ 0x64
 801d08c:	7862      	ldrb	r2, [r4, #1]
 801d08e:	2a2b      	cmp	r2, #43	@ 0x2b
 801d090:	d078      	beq.n	801d184 <_strtod_l+0x27c>
 801d092:	2a2d      	cmp	r2, #45	@ 0x2d
 801d094:	d07c      	beq.n	801d190 <_strtod_l+0x288>
 801d096:	f04f 0c00 	mov.w	ip, #0
 801d09a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 801d09e:	2909      	cmp	r1, #9
 801d0a0:	f240 8084 	bls.w	801d1ac <_strtod_l+0x2a4>
 801d0a4:	9419      	str	r4, [sp, #100]	@ 0x64
 801d0a6:	f04f 0800 	mov.w	r8, #0
 801d0aa:	e0a4      	b.n	801d1f6 <_strtod_l+0x2ee>
 801d0ac:	2300      	movs	r3, #0
 801d0ae:	e7c7      	b.n	801d040 <_strtod_l+0x138>
 801d0b0:	2f08      	cmp	r7, #8
 801d0b2:	f100 0001 	add.w	r0, r0, #1
 801d0b6:	f107 0701 	add.w	r7, r7, #1
 801d0ba:	bfd5      	itete	le
 801d0bc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 801d0be:	9908      	ldrgt	r1, [sp, #32]
 801d0c0:	fb02 3301 	mlale	r3, r2, r1, r3
 801d0c4:	fb02 3301 	mlagt	r3, r2, r1, r3
 801d0c8:	bfd4      	ite	le
 801d0ca:	930a      	strle	r3, [sp, #40]	@ 0x28
 801d0cc:	9308      	strgt	r3, [sp, #32]
 801d0ce:	9019      	str	r0, [sp, #100]	@ 0x64
 801d0d0:	e7be      	b.n	801d050 <_strtod_l+0x148>
 801d0d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801d0d4:	1c5a      	adds	r2, r3, #1
 801d0d6:	9219      	str	r2, [sp, #100]	@ 0x64
 801d0d8:	785a      	ldrb	r2, [r3, #1]
 801d0da:	b37f      	cbz	r7, 801d13c <_strtod_l+0x234>
 801d0dc:	4681      	mov	r9, r0
 801d0de:	463d      	mov	r5, r7
 801d0e0:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 801d0e4:	2b09      	cmp	r3, #9
 801d0e6:	d912      	bls.n	801d10e <_strtod_l+0x206>
 801d0e8:	2301      	movs	r3, #1
 801d0ea:	e7c3      	b.n	801d074 <_strtod_l+0x16c>
 801d0ec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801d0ee:	3001      	adds	r0, #1
 801d0f0:	1c5a      	adds	r2, r3, #1
 801d0f2:	9219      	str	r2, [sp, #100]	@ 0x64
 801d0f4:	785a      	ldrb	r2, [r3, #1]
 801d0f6:	2a30      	cmp	r2, #48	@ 0x30
 801d0f8:	d0f8      	beq.n	801d0ec <_strtod_l+0x1e4>
 801d0fa:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 801d0fe:	2b08      	cmp	r3, #8
 801d100:	f200 84d2 	bhi.w	801daa8 <_strtod_l+0xba0>
 801d104:	4681      	mov	r9, r0
 801d106:	2000      	movs	r0, #0
 801d108:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801d10a:	4605      	mov	r5, r0
 801d10c:	930c      	str	r3, [sp, #48]	@ 0x30
 801d10e:	3a30      	subs	r2, #48	@ 0x30
 801d110:	f100 0301 	add.w	r3, r0, #1
 801d114:	d02a      	beq.n	801d16c <_strtod_l+0x264>
 801d116:	4499      	add	r9, r3
 801d118:	eb00 0c05 	add.w	ip, r0, r5
 801d11c:	462b      	mov	r3, r5
 801d11e:	210a      	movs	r1, #10
 801d120:	4563      	cmp	r3, ip
 801d122:	d10d      	bne.n	801d140 <_strtod_l+0x238>
 801d124:	1c69      	adds	r1, r5, #1
 801d126:	4401      	add	r1, r0
 801d128:	4428      	add	r0, r5
 801d12a:	2808      	cmp	r0, #8
 801d12c:	dc16      	bgt.n	801d15c <_strtod_l+0x254>
 801d12e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801d130:	230a      	movs	r3, #10
 801d132:	fb03 2300 	mla	r3, r3, r0, r2
 801d136:	930a      	str	r3, [sp, #40]	@ 0x28
 801d138:	2300      	movs	r3, #0
 801d13a:	e018      	b.n	801d16e <_strtod_l+0x266>
 801d13c:	4638      	mov	r0, r7
 801d13e:	e7da      	b.n	801d0f6 <_strtod_l+0x1ee>
 801d140:	2b08      	cmp	r3, #8
 801d142:	f103 0301 	add.w	r3, r3, #1
 801d146:	dc03      	bgt.n	801d150 <_strtod_l+0x248>
 801d148:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801d14a:	434e      	muls	r6, r1
 801d14c:	960a      	str	r6, [sp, #40]	@ 0x28
 801d14e:	e7e7      	b.n	801d120 <_strtod_l+0x218>
 801d150:	2b10      	cmp	r3, #16
 801d152:	bfde      	ittt	le
 801d154:	9e08      	ldrle	r6, [sp, #32]
 801d156:	434e      	mulle	r6, r1
 801d158:	9608      	strle	r6, [sp, #32]
 801d15a:	e7e1      	b.n	801d120 <_strtod_l+0x218>
 801d15c:	280f      	cmp	r0, #15
 801d15e:	dceb      	bgt.n	801d138 <_strtod_l+0x230>
 801d160:	9808      	ldr	r0, [sp, #32]
 801d162:	230a      	movs	r3, #10
 801d164:	fb03 2300 	mla	r3, r3, r0, r2
 801d168:	9308      	str	r3, [sp, #32]
 801d16a:	e7e5      	b.n	801d138 <_strtod_l+0x230>
 801d16c:	4629      	mov	r1, r5
 801d16e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801d170:	460d      	mov	r5, r1
 801d172:	1c50      	adds	r0, r2, #1
 801d174:	9019      	str	r0, [sp, #100]	@ 0x64
 801d176:	4618      	mov	r0, r3
 801d178:	7852      	ldrb	r2, [r2, #1]
 801d17a:	e7b1      	b.n	801d0e0 <_strtod_l+0x1d8>
 801d17c:	f04f 0900 	mov.w	r9, #0
 801d180:	2301      	movs	r3, #1
 801d182:	e77c      	b.n	801d07e <_strtod_l+0x176>
 801d184:	f04f 0c00 	mov.w	ip, #0
 801d188:	1ca2      	adds	r2, r4, #2
 801d18a:	9219      	str	r2, [sp, #100]	@ 0x64
 801d18c:	78a2      	ldrb	r2, [r4, #2]
 801d18e:	e784      	b.n	801d09a <_strtod_l+0x192>
 801d190:	f04f 0c01 	mov.w	ip, #1
 801d194:	e7f8      	b.n	801d188 <_strtod_l+0x280>
 801d196:	bf00      	nop
 801d198:	080243b4 	.word	0x080243b4
 801d19c:	0802439c 	.word	0x0802439c
 801d1a0:	7ff00000 	.word	0x7ff00000
 801d1a4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801d1a6:	1c51      	adds	r1, r2, #1
 801d1a8:	9119      	str	r1, [sp, #100]	@ 0x64
 801d1aa:	7852      	ldrb	r2, [r2, #1]
 801d1ac:	2a30      	cmp	r2, #48	@ 0x30
 801d1ae:	d0f9      	beq.n	801d1a4 <_strtod_l+0x29c>
 801d1b0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 801d1b4:	2908      	cmp	r1, #8
 801d1b6:	f63f af76 	bhi.w	801d0a6 <_strtod_l+0x19e>
 801d1ba:	3a30      	subs	r2, #48	@ 0x30
 801d1bc:	f04f 080a 	mov.w	r8, #10
 801d1c0:	920e      	str	r2, [sp, #56]	@ 0x38
 801d1c2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801d1c4:	920f      	str	r2, [sp, #60]	@ 0x3c
 801d1c6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801d1c8:	1c56      	adds	r6, r2, #1
 801d1ca:	9619      	str	r6, [sp, #100]	@ 0x64
 801d1cc:	7852      	ldrb	r2, [r2, #1]
 801d1ce:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 801d1d2:	f1be 0f09 	cmp.w	lr, #9
 801d1d6:	d939      	bls.n	801d24c <_strtod_l+0x344>
 801d1d8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801d1da:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 801d1de:	1a76      	subs	r6, r6, r1
 801d1e0:	2e08      	cmp	r6, #8
 801d1e2:	dc03      	bgt.n	801d1ec <_strtod_l+0x2e4>
 801d1e4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801d1e6:	4588      	cmp	r8, r1
 801d1e8:	bfa8      	it	ge
 801d1ea:	4688      	movge	r8, r1
 801d1ec:	f1bc 0f00 	cmp.w	ip, #0
 801d1f0:	d001      	beq.n	801d1f6 <_strtod_l+0x2ee>
 801d1f2:	f1c8 0800 	rsb	r8, r8, #0
 801d1f6:	2d00      	cmp	r5, #0
 801d1f8:	d14e      	bne.n	801d298 <_strtod_l+0x390>
 801d1fa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801d1fc:	4308      	orrs	r0, r1
 801d1fe:	f47f aebc 	bne.w	801cf7a <_strtod_l+0x72>
 801d202:	2b00      	cmp	r3, #0
 801d204:	f47f aed4 	bne.w	801cfb0 <_strtod_l+0xa8>
 801d208:	2a69      	cmp	r2, #105	@ 0x69
 801d20a:	d028      	beq.n	801d25e <_strtod_l+0x356>
 801d20c:	dc25      	bgt.n	801d25a <_strtod_l+0x352>
 801d20e:	2a49      	cmp	r2, #73	@ 0x49
 801d210:	d025      	beq.n	801d25e <_strtod_l+0x356>
 801d212:	2a4e      	cmp	r2, #78	@ 0x4e
 801d214:	f47f aecc 	bne.w	801cfb0 <_strtod_l+0xa8>
 801d218:	499b      	ldr	r1, [pc, #620]	@ (801d488 <_strtod_l+0x580>)
 801d21a:	a819      	add	r0, sp, #100	@ 0x64
 801d21c:	f003 f8d8 	bl	80203d0 <__match>
 801d220:	2800      	cmp	r0, #0
 801d222:	f43f aec5 	beq.w	801cfb0 <_strtod_l+0xa8>
 801d226:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801d228:	781b      	ldrb	r3, [r3, #0]
 801d22a:	2b28      	cmp	r3, #40	@ 0x28
 801d22c:	d12e      	bne.n	801d28c <_strtod_l+0x384>
 801d22e:	aa1c      	add	r2, sp, #112	@ 0x70
 801d230:	4996      	ldr	r1, [pc, #600]	@ (801d48c <_strtod_l+0x584>)
 801d232:	a819      	add	r0, sp, #100	@ 0x64
 801d234:	f003 f8e0 	bl	80203f8 <__hexnan>
 801d238:	2805      	cmp	r0, #5
 801d23a:	d127      	bne.n	801d28c <_strtod_l+0x384>
 801d23c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801d23e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 801d242:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 801d246:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 801d24a:	e696      	b.n	801cf7a <_strtod_l+0x72>
 801d24c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801d24e:	fb08 2101 	mla	r1, r8, r1, r2
 801d252:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 801d256:	920e      	str	r2, [sp, #56]	@ 0x38
 801d258:	e7b5      	b.n	801d1c6 <_strtod_l+0x2be>
 801d25a:	2a6e      	cmp	r2, #110	@ 0x6e
 801d25c:	e7da      	b.n	801d214 <_strtod_l+0x30c>
 801d25e:	498c      	ldr	r1, [pc, #560]	@ (801d490 <_strtod_l+0x588>)
 801d260:	a819      	add	r0, sp, #100	@ 0x64
 801d262:	f003 f8b5 	bl	80203d0 <__match>
 801d266:	2800      	cmp	r0, #0
 801d268:	f43f aea2 	beq.w	801cfb0 <_strtod_l+0xa8>
 801d26c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801d26e:	a819      	add	r0, sp, #100	@ 0x64
 801d270:	4988      	ldr	r1, [pc, #544]	@ (801d494 <_strtod_l+0x58c>)
 801d272:	3b01      	subs	r3, #1
 801d274:	9319      	str	r3, [sp, #100]	@ 0x64
 801d276:	f003 f8ab 	bl	80203d0 <__match>
 801d27a:	b910      	cbnz	r0, 801d282 <_strtod_l+0x37a>
 801d27c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801d27e:	3301      	adds	r3, #1
 801d280:	9319      	str	r3, [sp, #100]	@ 0x64
 801d282:	f8df b220 	ldr.w	fp, [pc, #544]	@ 801d4a4 <_strtod_l+0x59c>
 801d286:	f04f 0a00 	mov.w	sl, #0
 801d28a:	e676      	b.n	801cf7a <_strtod_l+0x72>
 801d28c:	4882      	ldr	r0, [pc, #520]	@ (801d498 <_strtod_l+0x590>)
 801d28e:	f001 ff4f 	bl	801f130 <nan>
 801d292:	ec5b ab10 	vmov	sl, fp, d0
 801d296:	e670      	b.n	801cf7a <_strtod_l+0x72>
 801d298:	eba8 0309 	sub.w	r3, r8, r9
 801d29c:	2f00      	cmp	r7, #0
 801d29e:	bf08      	it	eq
 801d2a0:	462f      	moveq	r7, r5
 801d2a2:	2d10      	cmp	r5, #16
 801d2a4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801d2a6:	462c      	mov	r4, r5
 801d2a8:	9309      	str	r3, [sp, #36]	@ 0x24
 801d2aa:	bfa8      	it	ge
 801d2ac:	2410      	movge	r4, #16
 801d2ae:	f7e3 f943 	bl	8000538 <__aeabi_ui2d>
 801d2b2:	2d09      	cmp	r5, #9
 801d2b4:	4682      	mov	sl, r0
 801d2b6:	468b      	mov	fp, r1
 801d2b8:	dc13      	bgt.n	801d2e2 <_strtod_l+0x3da>
 801d2ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d2bc:	2b00      	cmp	r3, #0
 801d2be:	f43f ae5c 	beq.w	801cf7a <_strtod_l+0x72>
 801d2c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d2c4:	dd78      	ble.n	801d3b8 <_strtod_l+0x4b0>
 801d2c6:	2b16      	cmp	r3, #22
 801d2c8:	dc5f      	bgt.n	801d38a <_strtod_l+0x482>
 801d2ca:	4974      	ldr	r1, [pc, #464]	@ (801d49c <_strtod_l+0x594>)
 801d2cc:	4652      	mov	r2, sl
 801d2ce:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801d2d2:	465b      	mov	r3, fp
 801d2d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d2d8:	f7e3 f9a8 	bl	800062c <__aeabi_dmul>
 801d2dc:	4682      	mov	sl, r0
 801d2de:	468b      	mov	fp, r1
 801d2e0:	e64b      	b.n	801cf7a <_strtod_l+0x72>
 801d2e2:	4b6e      	ldr	r3, [pc, #440]	@ (801d49c <_strtod_l+0x594>)
 801d2e4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801d2e8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 801d2ec:	f7e3 f99e 	bl	800062c <__aeabi_dmul>
 801d2f0:	4682      	mov	sl, r0
 801d2f2:	468b      	mov	fp, r1
 801d2f4:	9808      	ldr	r0, [sp, #32]
 801d2f6:	f7e3 f91f 	bl	8000538 <__aeabi_ui2d>
 801d2fa:	4602      	mov	r2, r0
 801d2fc:	460b      	mov	r3, r1
 801d2fe:	4650      	mov	r0, sl
 801d300:	4659      	mov	r1, fp
 801d302:	f7e2 ffdd 	bl	80002c0 <__adddf3>
 801d306:	2d0f      	cmp	r5, #15
 801d308:	4682      	mov	sl, r0
 801d30a:	468b      	mov	fp, r1
 801d30c:	ddd5      	ble.n	801d2ba <_strtod_l+0x3b2>
 801d30e:	1b2c      	subs	r4, r5, r4
 801d310:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d312:	441c      	add	r4, r3
 801d314:	2c00      	cmp	r4, #0
 801d316:	f340 8096 	ble.w	801d446 <_strtod_l+0x53e>
 801d31a:	f014 030f 	ands.w	r3, r4, #15
 801d31e:	d00a      	beq.n	801d336 <_strtod_l+0x42e>
 801d320:	495e      	ldr	r1, [pc, #376]	@ (801d49c <_strtod_l+0x594>)
 801d322:	4652      	mov	r2, sl
 801d324:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801d328:	465b      	mov	r3, fp
 801d32a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d32e:	f7e3 f97d 	bl	800062c <__aeabi_dmul>
 801d332:	4682      	mov	sl, r0
 801d334:	468b      	mov	fp, r1
 801d336:	f034 040f 	bics.w	r4, r4, #15
 801d33a:	d073      	beq.n	801d424 <_strtod_l+0x51c>
 801d33c:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 801d340:	dd48      	ble.n	801d3d4 <_strtod_l+0x4cc>
 801d342:	2400      	movs	r4, #0
 801d344:	46a0      	mov	r8, r4
 801d346:	46a1      	mov	r9, r4
 801d348:	940a      	str	r4, [sp, #40]	@ 0x28
 801d34a:	2322      	movs	r3, #34	@ 0x22
 801d34c:	9a05      	ldr	r2, [sp, #20]
 801d34e:	f8df b154 	ldr.w	fp, [pc, #340]	@ 801d4a4 <_strtod_l+0x59c>
 801d352:	f04f 0a00 	mov.w	sl, #0
 801d356:	6013      	str	r3, [r2, #0]
 801d358:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d35a:	2b00      	cmp	r3, #0
 801d35c:	f43f ae0d 	beq.w	801cf7a <_strtod_l+0x72>
 801d360:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801d362:	9805      	ldr	r0, [sp, #20]
 801d364:	f003 f936 	bl	80205d4 <_Bfree>
 801d368:	4649      	mov	r1, r9
 801d36a:	9805      	ldr	r0, [sp, #20]
 801d36c:	f003 f932 	bl	80205d4 <_Bfree>
 801d370:	4641      	mov	r1, r8
 801d372:	9805      	ldr	r0, [sp, #20]
 801d374:	f003 f92e 	bl	80205d4 <_Bfree>
 801d378:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801d37a:	9805      	ldr	r0, [sp, #20]
 801d37c:	f003 f92a 	bl	80205d4 <_Bfree>
 801d380:	4621      	mov	r1, r4
 801d382:	9805      	ldr	r0, [sp, #20]
 801d384:	f003 f926 	bl	80205d4 <_Bfree>
 801d388:	e5f7      	b.n	801cf7a <_strtod_l+0x72>
 801d38a:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 801d38e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d390:	4293      	cmp	r3, r2
 801d392:	dbbc      	blt.n	801d30e <_strtod_l+0x406>
 801d394:	f1c5 050f 	rsb	r5, r5, #15
 801d398:	4c40      	ldr	r4, [pc, #256]	@ (801d49c <_strtod_l+0x594>)
 801d39a:	4652      	mov	r2, sl
 801d39c:	465b      	mov	r3, fp
 801d39e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801d3a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d3a6:	f7e3 f941 	bl	800062c <__aeabi_dmul>
 801d3aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d3ac:	1b5d      	subs	r5, r3, r5
 801d3ae:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801d3b2:	e9d4 2300 	ldrd	r2, r3, [r4]
 801d3b6:	e78f      	b.n	801d2d8 <_strtod_l+0x3d0>
 801d3b8:	3316      	adds	r3, #22
 801d3ba:	dba8      	blt.n	801d30e <_strtod_l+0x406>
 801d3bc:	eba9 0808 	sub.w	r8, r9, r8
 801d3c0:	4b36      	ldr	r3, [pc, #216]	@ (801d49c <_strtod_l+0x594>)
 801d3c2:	4650      	mov	r0, sl
 801d3c4:	4659      	mov	r1, fp
 801d3c6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 801d3ca:	e9d8 2300 	ldrd	r2, r3, [r8]
 801d3ce:	f7e3 fa57 	bl	8000880 <__aeabi_ddiv>
 801d3d2:	e783      	b.n	801d2dc <_strtod_l+0x3d4>
 801d3d4:	4b32      	ldr	r3, [pc, #200]	@ (801d4a0 <_strtod_l+0x598>)
 801d3d6:	1124      	asrs	r4, r4, #4
 801d3d8:	4650      	mov	r0, sl
 801d3da:	4659      	mov	r1, fp
 801d3dc:	9308      	str	r3, [sp, #32]
 801d3de:	2300      	movs	r3, #0
 801d3e0:	461e      	mov	r6, r3
 801d3e2:	2c01      	cmp	r4, #1
 801d3e4:	dc21      	bgt.n	801d42a <_strtod_l+0x522>
 801d3e6:	b10b      	cbz	r3, 801d3ec <_strtod_l+0x4e4>
 801d3e8:	4682      	mov	sl, r0
 801d3ea:	468b      	mov	fp, r1
 801d3ec:	492c      	ldr	r1, [pc, #176]	@ (801d4a0 <_strtod_l+0x598>)
 801d3ee:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 801d3f2:	4652      	mov	r2, sl
 801d3f4:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 801d3f8:	465b      	mov	r3, fp
 801d3fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d3fe:	f7e3 f915 	bl	800062c <__aeabi_dmul>
 801d402:	4b28      	ldr	r3, [pc, #160]	@ (801d4a4 <_strtod_l+0x59c>)
 801d404:	460a      	mov	r2, r1
 801d406:	4682      	mov	sl, r0
 801d408:	400b      	ands	r3, r1
 801d40a:	4927      	ldr	r1, [pc, #156]	@ (801d4a8 <_strtod_l+0x5a0>)
 801d40c:	428b      	cmp	r3, r1
 801d40e:	d898      	bhi.n	801d342 <_strtod_l+0x43a>
 801d410:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 801d414:	428b      	cmp	r3, r1
 801d416:	bf86      	itte	hi
 801d418:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 801d4ac <_strtod_l+0x5a4>
 801d41c:	f04f 3aff 	movhi.w	sl, #4294967295
 801d420:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 801d424:	2300      	movs	r3, #0
 801d426:	9308      	str	r3, [sp, #32]
 801d428:	e07a      	b.n	801d520 <_strtod_l+0x618>
 801d42a:	07e2      	lsls	r2, r4, #31
 801d42c:	d505      	bpl.n	801d43a <_strtod_l+0x532>
 801d42e:	9b08      	ldr	r3, [sp, #32]
 801d430:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d434:	f7e3 f8fa 	bl	800062c <__aeabi_dmul>
 801d438:	2301      	movs	r3, #1
 801d43a:	9a08      	ldr	r2, [sp, #32]
 801d43c:	3601      	adds	r6, #1
 801d43e:	1064      	asrs	r4, r4, #1
 801d440:	3208      	adds	r2, #8
 801d442:	9208      	str	r2, [sp, #32]
 801d444:	e7cd      	b.n	801d3e2 <_strtod_l+0x4da>
 801d446:	d0ed      	beq.n	801d424 <_strtod_l+0x51c>
 801d448:	4264      	negs	r4, r4
 801d44a:	f014 020f 	ands.w	r2, r4, #15
 801d44e:	d00a      	beq.n	801d466 <_strtod_l+0x55e>
 801d450:	4b12      	ldr	r3, [pc, #72]	@ (801d49c <_strtod_l+0x594>)
 801d452:	4650      	mov	r0, sl
 801d454:	4659      	mov	r1, fp
 801d456:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801d45a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d45e:	f7e3 fa0f 	bl	8000880 <__aeabi_ddiv>
 801d462:	4682      	mov	sl, r0
 801d464:	468b      	mov	fp, r1
 801d466:	1124      	asrs	r4, r4, #4
 801d468:	d0dc      	beq.n	801d424 <_strtod_l+0x51c>
 801d46a:	2c1f      	cmp	r4, #31
 801d46c:	dd20      	ble.n	801d4b0 <_strtod_l+0x5a8>
 801d46e:	2400      	movs	r4, #0
 801d470:	46a0      	mov	r8, r4
 801d472:	46a1      	mov	r9, r4
 801d474:	940a      	str	r4, [sp, #40]	@ 0x28
 801d476:	2322      	movs	r3, #34	@ 0x22
 801d478:	9a05      	ldr	r2, [sp, #20]
 801d47a:	f04f 0a00 	mov.w	sl, #0
 801d47e:	f04f 0b00 	mov.w	fp, #0
 801d482:	6013      	str	r3, [r2, #0]
 801d484:	e768      	b.n	801d358 <_strtod_l+0x450>
 801d486:	bf00      	nop
 801d488:	080244fe 	.word	0x080244fe
 801d48c:	080243a0 	.word	0x080243a0
 801d490:	080244f6 	.word	0x080244f6
 801d494:	080245e0 	.word	0x080245e0
 801d498:	080245dc 	.word	0x080245dc
 801d49c:	08024740 	.word	0x08024740
 801d4a0:	08024718 	.word	0x08024718
 801d4a4:	7ff00000 	.word	0x7ff00000
 801d4a8:	7ca00000 	.word	0x7ca00000
 801d4ac:	7fefffff 	.word	0x7fefffff
 801d4b0:	f014 0310 	ands.w	r3, r4, #16
 801d4b4:	4650      	mov	r0, sl
 801d4b6:	4659      	mov	r1, fp
 801d4b8:	4ea9      	ldr	r6, [pc, #676]	@ (801d760 <_strtod_l+0x858>)
 801d4ba:	bf18      	it	ne
 801d4bc:	236a      	movne	r3, #106	@ 0x6a
 801d4be:	9308      	str	r3, [sp, #32]
 801d4c0:	2300      	movs	r3, #0
 801d4c2:	07e2      	lsls	r2, r4, #31
 801d4c4:	d504      	bpl.n	801d4d0 <_strtod_l+0x5c8>
 801d4c6:	e9d6 2300 	ldrd	r2, r3, [r6]
 801d4ca:	f7e3 f8af 	bl	800062c <__aeabi_dmul>
 801d4ce:	2301      	movs	r3, #1
 801d4d0:	1064      	asrs	r4, r4, #1
 801d4d2:	f106 0608 	add.w	r6, r6, #8
 801d4d6:	d1f4      	bne.n	801d4c2 <_strtod_l+0x5ba>
 801d4d8:	b10b      	cbz	r3, 801d4de <_strtod_l+0x5d6>
 801d4da:	4682      	mov	sl, r0
 801d4dc:	468b      	mov	fp, r1
 801d4de:	9b08      	ldr	r3, [sp, #32]
 801d4e0:	b1b3      	cbz	r3, 801d510 <_strtod_l+0x608>
 801d4e2:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801d4e6:	4659      	mov	r1, fp
 801d4e8:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 801d4ec:	2b00      	cmp	r3, #0
 801d4ee:	dd0f      	ble.n	801d510 <_strtod_l+0x608>
 801d4f0:	2b1f      	cmp	r3, #31
 801d4f2:	dd55      	ble.n	801d5a0 <_strtod_l+0x698>
 801d4f4:	2b34      	cmp	r3, #52	@ 0x34
 801d4f6:	f04f 0a00 	mov.w	sl, #0
 801d4fa:	bfdb      	ittet	le
 801d4fc:	f04f 33ff 	movle.w	r3, #4294967295
 801d500:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 801d504:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 801d508:	4093      	lslle	r3, r2
 801d50a:	bfd8      	it	le
 801d50c:	ea03 0b01 	andle.w	fp, r3, r1
 801d510:	2200      	movs	r2, #0
 801d512:	2300      	movs	r3, #0
 801d514:	4650      	mov	r0, sl
 801d516:	4659      	mov	r1, fp
 801d518:	f7e3 faf0 	bl	8000afc <__aeabi_dcmpeq>
 801d51c:	2800      	cmp	r0, #0
 801d51e:	d1a6      	bne.n	801d46e <_strtod_l+0x566>
 801d520:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d522:	463a      	mov	r2, r7
 801d524:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801d526:	9300      	str	r3, [sp, #0]
 801d528:	462b      	mov	r3, r5
 801d52a:	9805      	ldr	r0, [sp, #20]
 801d52c:	f003 f8bc 	bl	80206a8 <__s2b>
 801d530:	900a      	str	r0, [sp, #40]	@ 0x28
 801d532:	2800      	cmp	r0, #0
 801d534:	f43f af05 	beq.w	801d342 <_strtod_l+0x43a>
 801d538:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d53a:	eba9 0308 	sub.w	r3, r9, r8
 801d53e:	2400      	movs	r4, #0
 801d540:	2a00      	cmp	r2, #0
 801d542:	46a0      	mov	r8, r4
 801d544:	bfa8      	it	ge
 801d546:	2300      	movge	r3, #0
 801d548:	9312      	str	r3, [sp, #72]	@ 0x48
 801d54a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801d54e:	9316      	str	r3, [sp, #88]	@ 0x58
 801d550:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d552:	9805      	ldr	r0, [sp, #20]
 801d554:	6859      	ldr	r1, [r3, #4]
 801d556:	f002 fffd 	bl	8020554 <_Balloc>
 801d55a:	4681      	mov	r9, r0
 801d55c:	2800      	cmp	r0, #0
 801d55e:	f43f aef4 	beq.w	801d34a <_strtod_l+0x442>
 801d562:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d564:	300c      	adds	r0, #12
 801d566:	691a      	ldr	r2, [r3, #16]
 801d568:	f103 010c 	add.w	r1, r3, #12
 801d56c:	3202      	adds	r2, #2
 801d56e:	0092      	lsls	r2, r2, #2
 801d570:	f001 fdd1 	bl	801f116 <memcpy>
 801d574:	aa1c      	add	r2, sp, #112	@ 0x70
 801d576:	a91b      	add	r1, sp, #108	@ 0x6c
 801d578:	9805      	ldr	r0, [sp, #20]
 801d57a:	ec4b ab10 	vmov	d0, sl, fp
 801d57e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 801d582:	f003 fbd5 	bl	8020d30 <__d2b>
 801d586:	901a      	str	r0, [sp, #104]	@ 0x68
 801d588:	2800      	cmp	r0, #0
 801d58a:	f43f aede 	beq.w	801d34a <_strtod_l+0x442>
 801d58e:	2101      	movs	r1, #1
 801d590:	9805      	ldr	r0, [sp, #20]
 801d592:	f003 f91f 	bl	80207d4 <__i2b>
 801d596:	4680      	mov	r8, r0
 801d598:	b948      	cbnz	r0, 801d5ae <_strtod_l+0x6a6>
 801d59a:	f04f 0800 	mov.w	r8, #0
 801d59e:	e6d4      	b.n	801d34a <_strtod_l+0x442>
 801d5a0:	f04f 32ff 	mov.w	r2, #4294967295
 801d5a4:	fa02 f303 	lsl.w	r3, r2, r3
 801d5a8:	ea03 0a0a 	and.w	sl, r3, sl
 801d5ac:	e7b0      	b.n	801d510 <_strtod_l+0x608>
 801d5ae:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 801d5b0:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801d5b2:	2d00      	cmp	r5, #0
 801d5b4:	bfa9      	itett	ge
 801d5b6:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 801d5b8:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 801d5ba:	18ef      	addge	r7, r5, r3
 801d5bc:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 801d5be:	bfb8      	it	lt
 801d5c0:	1b5e      	sublt	r6, r3, r5
 801d5c2:	9b08      	ldr	r3, [sp, #32]
 801d5c4:	bfb8      	it	lt
 801d5c6:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 801d5c8:	1aed      	subs	r5, r5, r3
 801d5ca:	4b66      	ldr	r3, [pc, #408]	@ (801d764 <_strtod_l+0x85c>)
 801d5cc:	4415      	add	r5, r2
 801d5ce:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 801d5d2:	3d01      	subs	r5, #1
 801d5d4:	429d      	cmp	r5, r3
 801d5d6:	da4f      	bge.n	801d678 <_strtod_l+0x770>
 801d5d8:	1b5b      	subs	r3, r3, r5
 801d5da:	2101      	movs	r1, #1
 801d5dc:	2b1f      	cmp	r3, #31
 801d5de:	eba2 0203 	sub.w	r2, r2, r3
 801d5e2:	dc3d      	bgt.n	801d660 <_strtod_l+0x758>
 801d5e4:	fa01 f303 	lsl.w	r3, r1, r3
 801d5e8:	9313      	str	r3, [sp, #76]	@ 0x4c
 801d5ea:	2300      	movs	r3, #0
 801d5ec:	9310      	str	r3, [sp, #64]	@ 0x40
 801d5ee:	18bd      	adds	r5, r7, r2
 801d5f0:	9b08      	ldr	r3, [sp, #32]
 801d5f2:	4416      	add	r6, r2
 801d5f4:	42af      	cmp	r7, r5
 801d5f6:	441e      	add	r6, r3
 801d5f8:	463b      	mov	r3, r7
 801d5fa:	bfa8      	it	ge
 801d5fc:	462b      	movge	r3, r5
 801d5fe:	42b3      	cmp	r3, r6
 801d600:	bfa8      	it	ge
 801d602:	4633      	movge	r3, r6
 801d604:	2b00      	cmp	r3, #0
 801d606:	bfc2      	ittt	gt
 801d608:	1aed      	subgt	r5, r5, r3
 801d60a:	1af6      	subgt	r6, r6, r3
 801d60c:	1aff      	subgt	r7, r7, r3
 801d60e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801d610:	2b00      	cmp	r3, #0
 801d612:	dd16      	ble.n	801d642 <_strtod_l+0x73a>
 801d614:	4641      	mov	r1, r8
 801d616:	461a      	mov	r2, r3
 801d618:	9805      	ldr	r0, [sp, #20]
 801d61a:	f003 f99b 	bl	8020954 <__pow5mult>
 801d61e:	4680      	mov	r8, r0
 801d620:	2800      	cmp	r0, #0
 801d622:	d0ba      	beq.n	801d59a <_strtod_l+0x692>
 801d624:	4601      	mov	r1, r0
 801d626:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801d628:	9805      	ldr	r0, [sp, #20]
 801d62a:	f003 f8e9 	bl	8020800 <__multiply>
 801d62e:	900e      	str	r0, [sp, #56]	@ 0x38
 801d630:	2800      	cmp	r0, #0
 801d632:	f43f ae8a 	beq.w	801d34a <_strtod_l+0x442>
 801d636:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801d638:	9805      	ldr	r0, [sp, #20]
 801d63a:	f002 ffcb 	bl	80205d4 <_Bfree>
 801d63e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d640:	931a      	str	r3, [sp, #104]	@ 0x68
 801d642:	2d00      	cmp	r5, #0
 801d644:	dc1d      	bgt.n	801d682 <_strtod_l+0x77a>
 801d646:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d648:	2b00      	cmp	r3, #0
 801d64a:	dd23      	ble.n	801d694 <_strtod_l+0x78c>
 801d64c:	4649      	mov	r1, r9
 801d64e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801d650:	9805      	ldr	r0, [sp, #20]
 801d652:	f003 f97f 	bl	8020954 <__pow5mult>
 801d656:	4681      	mov	r9, r0
 801d658:	b9e0      	cbnz	r0, 801d694 <_strtod_l+0x78c>
 801d65a:	f04f 0900 	mov.w	r9, #0
 801d65e:	e674      	b.n	801d34a <_strtod_l+0x442>
 801d660:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 801d664:	9113      	str	r1, [sp, #76]	@ 0x4c
 801d666:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 801d66a:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 801d66e:	35e2      	adds	r5, #226	@ 0xe2
 801d670:	fa01 f305 	lsl.w	r3, r1, r5
 801d674:	9310      	str	r3, [sp, #64]	@ 0x40
 801d676:	e7ba      	b.n	801d5ee <_strtod_l+0x6e6>
 801d678:	2300      	movs	r3, #0
 801d67a:	9310      	str	r3, [sp, #64]	@ 0x40
 801d67c:	2301      	movs	r3, #1
 801d67e:	9313      	str	r3, [sp, #76]	@ 0x4c
 801d680:	e7b5      	b.n	801d5ee <_strtod_l+0x6e6>
 801d682:	462a      	mov	r2, r5
 801d684:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801d686:	9805      	ldr	r0, [sp, #20]
 801d688:	f003 f9be 	bl	8020a08 <__lshift>
 801d68c:	901a      	str	r0, [sp, #104]	@ 0x68
 801d68e:	2800      	cmp	r0, #0
 801d690:	d1d9      	bne.n	801d646 <_strtod_l+0x73e>
 801d692:	e65a      	b.n	801d34a <_strtod_l+0x442>
 801d694:	2e00      	cmp	r6, #0
 801d696:	dd07      	ble.n	801d6a8 <_strtod_l+0x7a0>
 801d698:	4649      	mov	r1, r9
 801d69a:	4632      	mov	r2, r6
 801d69c:	9805      	ldr	r0, [sp, #20]
 801d69e:	f003 f9b3 	bl	8020a08 <__lshift>
 801d6a2:	4681      	mov	r9, r0
 801d6a4:	2800      	cmp	r0, #0
 801d6a6:	d0d8      	beq.n	801d65a <_strtod_l+0x752>
 801d6a8:	2f00      	cmp	r7, #0
 801d6aa:	dd08      	ble.n	801d6be <_strtod_l+0x7b6>
 801d6ac:	4641      	mov	r1, r8
 801d6ae:	463a      	mov	r2, r7
 801d6b0:	9805      	ldr	r0, [sp, #20]
 801d6b2:	f003 f9a9 	bl	8020a08 <__lshift>
 801d6b6:	4680      	mov	r8, r0
 801d6b8:	2800      	cmp	r0, #0
 801d6ba:	f43f ae46 	beq.w	801d34a <_strtod_l+0x442>
 801d6be:	464a      	mov	r2, r9
 801d6c0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801d6c2:	9805      	ldr	r0, [sp, #20]
 801d6c4:	f003 fa28 	bl	8020b18 <__mdiff>
 801d6c8:	4604      	mov	r4, r0
 801d6ca:	2800      	cmp	r0, #0
 801d6cc:	f43f ae3d 	beq.w	801d34a <_strtod_l+0x442>
 801d6d0:	68c3      	ldr	r3, [r0, #12]
 801d6d2:	4641      	mov	r1, r8
 801d6d4:	930f      	str	r3, [sp, #60]	@ 0x3c
 801d6d6:	2300      	movs	r3, #0
 801d6d8:	60c3      	str	r3, [r0, #12]
 801d6da:	f003 fa01 	bl	8020ae0 <__mcmp>
 801d6de:	2800      	cmp	r0, #0
 801d6e0:	da46      	bge.n	801d770 <_strtod_l+0x868>
 801d6e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d6e4:	ea53 030a 	orrs.w	r3, r3, sl
 801d6e8:	d16c      	bne.n	801d7c4 <_strtod_l+0x8bc>
 801d6ea:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801d6ee:	2b00      	cmp	r3, #0
 801d6f0:	d168      	bne.n	801d7c4 <_strtod_l+0x8bc>
 801d6f2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801d6f6:	0d1b      	lsrs	r3, r3, #20
 801d6f8:	051b      	lsls	r3, r3, #20
 801d6fa:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801d6fe:	d961      	bls.n	801d7c4 <_strtod_l+0x8bc>
 801d700:	6963      	ldr	r3, [r4, #20]
 801d702:	b913      	cbnz	r3, 801d70a <_strtod_l+0x802>
 801d704:	6923      	ldr	r3, [r4, #16]
 801d706:	2b01      	cmp	r3, #1
 801d708:	dd5c      	ble.n	801d7c4 <_strtod_l+0x8bc>
 801d70a:	4621      	mov	r1, r4
 801d70c:	2201      	movs	r2, #1
 801d70e:	9805      	ldr	r0, [sp, #20]
 801d710:	f003 f97a 	bl	8020a08 <__lshift>
 801d714:	4641      	mov	r1, r8
 801d716:	4604      	mov	r4, r0
 801d718:	f003 f9e2 	bl	8020ae0 <__mcmp>
 801d71c:	2800      	cmp	r0, #0
 801d71e:	dd51      	ble.n	801d7c4 <_strtod_l+0x8bc>
 801d720:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801d724:	9a08      	ldr	r2, [sp, #32]
 801d726:	0d1b      	lsrs	r3, r3, #20
 801d728:	051b      	lsls	r3, r3, #20
 801d72a:	2a00      	cmp	r2, #0
 801d72c:	d06b      	beq.n	801d806 <_strtod_l+0x8fe>
 801d72e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801d732:	d868      	bhi.n	801d806 <_strtod_l+0x8fe>
 801d734:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 801d738:	f67f ae9d 	bls.w	801d476 <_strtod_l+0x56e>
 801d73c:	4b0a      	ldr	r3, [pc, #40]	@ (801d768 <_strtod_l+0x860>)
 801d73e:	4650      	mov	r0, sl
 801d740:	4659      	mov	r1, fp
 801d742:	2200      	movs	r2, #0
 801d744:	f7e2 ff72 	bl	800062c <__aeabi_dmul>
 801d748:	4b08      	ldr	r3, [pc, #32]	@ (801d76c <_strtod_l+0x864>)
 801d74a:	4682      	mov	sl, r0
 801d74c:	468b      	mov	fp, r1
 801d74e:	400b      	ands	r3, r1
 801d750:	2b00      	cmp	r3, #0
 801d752:	f47f ae05 	bne.w	801d360 <_strtod_l+0x458>
 801d756:	2322      	movs	r3, #34	@ 0x22
 801d758:	9a05      	ldr	r2, [sp, #20]
 801d75a:	6013      	str	r3, [r2, #0]
 801d75c:	e600      	b.n	801d360 <_strtod_l+0x458>
 801d75e:	bf00      	nop
 801d760:	080243c8 	.word	0x080243c8
 801d764:	fffffc02 	.word	0xfffffc02
 801d768:	39500000 	.word	0x39500000
 801d76c:	7ff00000 	.word	0x7ff00000
 801d770:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 801d774:	d165      	bne.n	801d842 <_strtod_l+0x93a>
 801d776:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801d778:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801d77c:	b35a      	cbz	r2, 801d7d6 <_strtod_l+0x8ce>
 801d77e:	4a9e      	ldr	r2, [pc, #632]	@ (801d9f8 <_strtod_l+0xaf0>)
 801d780:	4293      	cmp	r3, r2
 801d782:	d12b      	bne.n	801d7dc <_strtod_l+0x8d4>
 801d784:	9b08      	ldr	r3, [sp, #32]
 801d786:	4651      	mov	r1, sl
 801d788:	b303      	cbz	r3, 801d7cc <_strtod_l+0x8c4>
 801d78a:	465a      	mov	r2, fp
 801d78c:	4b9b      	ldr	r3, [pc, #620]	@ (801d9fc <_strtod_l+0xaf4>)
 801d78e:	4013      	ands	r3, r2
 801d790:	f04f 32ff 	mov.w	r2, #4294967295
 801d794:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 801d798:	d81b      	bhi.n	801d7d2 <_strtod_l+0x8ca>
 801d79a:	0d1b      	lsrs	r3, r3, #20
 801d79c:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801d7a0:	fa02 f303 	lsl.w	r3, r2, r3
 801d7a4:	4299      	cmp	r1, r3
 801d7a6:	d119      	bne.n	801d7dc <_strtod_l+0x8d4>
 801d7a8:	4b95      	ldr	r3, [pc, #596]	@ (801da00 <_strtod_l+0xaf8>)
 801d7aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d7ac:	429a      	cmp	r2, r3
 801d7ae:	d102      	bne.n	801d7b6 <_strtod_l+0x8ae>
 801d7b0:	3101      	adds	r1, #1
 801d7b2:	f43f adca 	beq.w	801d34a <_strtod_l+0x442>
 801d7b6:	4b91      	ldr	r3, [pc, #580]	@ (801d9fc <_strtod_l+0xaf4>)
 801d7b8:	f04f 0a00 	mov.w	sl, #0
 801d7bc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d7be:	401a      	ands	r2, r3
 801d7c0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 801d7c4:	9b08      	ldr	r3, [sp, #32]
 801d7c6:	2b00      	cmp	r3, #0
 801d7c8:	d1b8      	bne.n	801d73c <_strtod_l+0x834>
 801d7ca:	e5c9      	b.n	801d360 <_strtod_l+0x458>
 801d7cc:	f04f 33ff 	mov.w	r3, #4294967295
 801d7d0:	e7e8      	b.n	801d7a4 <_strtod_l+0x89c>
 801d7d2:	4613      	mov	r3, r2
 801d7d4:	e7e6      	b.n	801d7a4 <_strtod_l+0x89c>
 801d7d6:	ea53 030a 	orrs.w	r3, r3, sl
 801d7da:	d0a1      	beq.n	801d720 <_strtod_l+0x818>
 801d7dc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d7de:	b1db      	cbz	r3, 801d818 <_strtod_l+0x910>
 801d7e0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d7e2:	4213      	tst	r3, r2
 801d7e4:	d0ee      	beq.n	801d7c4 <_strtod_l+0x8bc>
 801d7e6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d7e8:	4650      	mov	r0, sl
 801d7ea:	9a08      	ldr	r2, [sp, #32]
 801d7ec:	4659      	mov	r1, fp
 801d7ee:	b1bb      	cbz	r3, 801d820 <_strtod_l+0x918>
 801d7f0:	f7ff fb6c 	bl	801cecc <sulp>
 801d7f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801d7f8:	ec53 2b10 	vmov	r2, r3, d0
 801d7fc:	f7e2 fd60 	bl	80002c0 <__adddf3>
 801d800:	4682      	mov	sl, r0
 801d802:	468b      	mov	fp, r1
 801d804:	e7de      	b.n	801d7c4 <_strtod_l+0x8bc>
 801d806:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801d80a:	f04f 3aff 	mov.w	sl, #4294967295
 801d80e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801d812:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801d816:	e7d5      	b.n	801d7c4 <_strtod_l+0x8bc>
 801d818:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801d81a:	ea13 0f0a 	tst.w	r3, sl
 801d81e:	e7e1      	b.n	801d7e4 <_strtod_l+0x8dc>
 801d820:	f7ff fb54 	bl	801cecc <sulp>
 801d824:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801d828:	ec53 2b10 	vmov	r2, r3, d0
 801d82c:	f7e2 fd46 	bl	80002bc <__aeabi_dsub>
 801d830:	2200      	movs	r2, #0
 801d832:	2300      	movs	r3, #0
 801d834:	4682      	mov	sl, r0
 801d836:	468b      	mov	fp, r1
 801d838:	f7e3 f960 	bl	8000afc <__aeabi_dcmpeq>
 801d83c:	2800      	cmp	r0, #0
 801d83e:	d0c1      	beq.n	801d7c4 <_strtod_l+0x8bc>
 801d840:	e619      	b.n	801d476 <_strtod_l+0x56e>
 801d842:	4641      	mov	r1, r8
 801d844:	4620      	mov	r0, r4
 801d846:	f003 facb 	bl	8020de0 <__ratio>
 801d84a:	2200      	movs	r2, #0
 801d84c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801d850:	ec57 6b10 	vmov	r6, r7, d0
 801d854:	4630      	mov	r0, r6
 801d856:	4639      	mov	r1, r7
 801d858:	f7e3 f964 	bl	8000b24 <__aeabi_dcmple>
 801d85c:	2800      	cmp	r0, #0
 801d85e:	d06f      	beq.n	801d940 <_strtod_l+0xa38>
 801d860:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d862:	2b00      	cmp	r3, #0
 801d864:	d17a      	bne.n	801d95c <_strtod_l+0xa54>
 801d866:	f1ba 0f00 	cmp.w	sl, #0
 801d86a:	d158      	bne.n	801d91e <_strtod_l+0xa16>
 801d86c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d86e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801d872:	2b00      	cmp	r3, #0
 801d874:	d15a      	bne.n	801d92c <_strtod_l+0xa24>
 801d876:	2200      	movs	r2, #0
 801d878:	4b62      	ldr	r3, [pc, #392]	@ (801da04 <_strtod_l+0xafc>)
 801d87a:	4630      	mov	r0, r6
 801d87c:	4639      	mov	r1, r7
 801d87e:	f7e3 f947 	bl	8000b10 <__aeabi_dcmplt>
 801d882:	2800      	cmp	r0, #0
 801d884:	d159      	bne.n	801d93a <_strtod_l+0xa32>
 801d886:	4630      	mov	r0, r6
 801d888:	4639      	mov	r1, r7
 801d88a:	2200      	movs	r2, #0
 801d88c:	4b5e      	ldr	r3, [pc, #376]	@ (801da08 <_strtod_l+0xb00>)
 801d88e:	f7e2 fecd 	bl	800062c <__aeabi_dmul>
 801d892:	4606      	mov	r6, r0
 801d894:	460f      	mov	r7, r1
 801d896:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 801d89a:	9606      	str	r6, [sp, #24]
 801d89c:	9307      	str	r3, [sp, #28]
 801d89e:	4d57      	ldr	r5, [pc, #348]	@ (801d9fc <_strtod_l+0xaf4>)
 801d8a0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801d8a4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801d8a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d8aa:	401d      	ands	r5, r3
 801d8ac:	4b57      	ldr	r3, [pc, #348]	@ (801da0c <_strtod_l+0xb04>)
 801d8ae:	429d      	cmp	r5, r3
 801d8b0:	f040 80b0 	bne.w	801da14 <_strtod_l+0xb0c>
 801d8b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d8b6:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 801d8ba:	ec4b ab10 	vmov	d0, sl, fp
 801d8be:	f003 f9c3 	bl	8020c48 <__ulp>
 801d8c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801d8c6:	ec51 0b10 	vmov	r0, r1, d0
 801d8ca:	f7e2 feaf 	bl	800062c <__aeabi_dmul>
 801d8ce:	4652      	mov	r2, sl
 801d8d0:	465b      	mov	r3, fp
 801d8d2:	f7e2 fcf5 	bl	80002c0 <__adddf3>
 801d8d6:	460b      	mov	r3, r1
 801d8d8:	4948      	ldr	r1, [pc, #288]	@ (801d9fc <_strtod_l+0xaf4>)
 801d8da:	4682      	mov	sl, r0
 801d8dc:	4a4c      	ldr	r2, [pc, #304]	@ (801da10 <_strtod_l+0xb08>)
 801d8de:	4019      	ands	r1, r3
 801d8e0:	4291      	cmp	r1, r2
 801d8e2:	d942      	bls.n	801d96a <_strtod_l+0xa62>
 801d8e4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801d8e6:	4b46      	ldr	r3, [pc, #280]	@ (801da00 <_strtod_l+0xaf8>)
 801d8e8:	429a      	cmp	r2, r3
 801d8ea:	d103      	bne.n	801d8f4 <_strtod_l+0x9ec>
 801d8ec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d8ee:	3301      	adds	r3, #1
 801d8f0:	f43f ad2b 	beq.w	801d34a <_strtod_l+0x442>
 801d8f4:	f8df b108 	ldr.w	fp, [pc, #264]	@ 801da00 <_strtod_l+0xaf8>
 801d8f8:	f04f 3aff 	mov.w	sl, #4294967295
 801d8fc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801d8fe:	9805      	ldr	r0, [sp, #20]
 801d900:	f002 fe68 	bl	80205d4 <_Bfree>
 801d904:	4649      	mov	r1, r9
 801d906:	9805      	ldr	r0, [sp, #20]
 801d908:	f002 fe64 	bl	80205d4 <_Bfree>
 801d90c:	4641      	mov	r1, r8
 801d90e:	9805      	ldr	r0, [sp, #20]
 801d910:	f002 fe60 	bl	80205d4 <_Bfree>
 801d914:	4621      	mov	r1, r4
 801d916:	9805      	ldr	r0, [sp, #20]
 801d918:	f002 fe5c 	bl	80205d4 <_Bfree>
 801d91c:	e618      	b.n	801d550 <_strtod_l+0x648>
 801d91e:	f1ba 0f01 	cmp.w	sl, #1
 801d922:	d103      	bne.n	801d92c <_strtod_l+0xa24>
 801d924:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d926:	2b00      	cmp	r3, #0
 801d928:	f43f ada5 	beq.w	801d476 <_strtod_l+0x56e>
 801d92c:	2600      	movs	r6, #0
 801d92e:	4f35      	ldr	r7, [pc, #212]	@ (801da04 <_strtod_l+0xafc>)
 801d930:	ed9f 7b29 	vldr	d7, [pc, #164]	@ 801d9d8 <_strtod_l+0xad0>
 801d934:	ed8d 7b06 	vstr	d7, [sp, #24]
 801d938:	e7b1      	b.n	801d89e <_strtod_l+0x996>
 801d93a:	2600      	movs	r6, #0
 801d93c:	4f32      	ldr	r7, [pc, #200]	@ (801da08 <_strtod_l+0xb00>)
 801d93e:	e7aa      	b.n	801d896 <_strtod_l+0x98e>
 801d940:	4b31      	ldr	r3, [pc, #196]	@ (801da08 <_strtod_l+0xb00>)
 801d942:	4630      	mov	r0, r6
 801d944:	4639      	mov	r1, r7
 801d946:	2200      	movs	r2, #0
 801d948:	f7e2 fe70 	bl	800062c <__aeabi_dmul>
 801d94c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d94e:	4606      	mov	r6, r0
 801d950:	460f      	mov	r7, r1
 801d952:	2b00      	cmp	r3, #0
 801d954:	d09f      	beq.n	801d896 <_strtod_l+0x98e>
 801d956:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801d95a:	e7a0      	b.n	801d89e <_strtod_l+0x996>
 801d95c:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 801d9e0 <_strtod_l+0xad8>
 801d960:	ec57 6b17 	vmov	r6, r7, d7
 801d964:	ed8d 7b06 	vstr	d7, [sp, #24]
 801d968:	e799      	b.n	801d89e <_strtod_l+0x996>
 801d96a:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801d96e:	9b08      	ldr	r3, [sp, #32]
 801d970:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 801d974:	2b00      	cmp	r3, #0
 801d976:	d1c1      	bne.n	801d8fc <_strtod_l+0x9f4>
 801d978:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801d97c:	0d1b      	lsrs	r3, r3, #20
 801d97e:	051b      	lsls	r3, r3, #20
 801d980:	429d      	cmp	r5, r3
 801d982:	d1bb      	bne.n	801d8fc <_strtod_l+0x9f4>
 801d984:	4630      	mov	r0, r6
 801d986:	4639      	mov	r1, r7
 801d988:	f7e3 f9b0 	bl	8000cec <__aeabi_d2lz>
 801d98c:	f7e2 fe20 	bl	80005d0 <__aeabi_l2d>
 801d990:	4602      	mov	r2, r0
 801d992:	460b      	mov	r3, r1
 801d994:	4630      	mov	r0, r6
 801d996:	4639      	mov	r1, r7
 801d998:	f3cb 0613 	ubfx	r6, fp, #0, #20
 801d99c:	f7e2 fc8e 	bl	80002bc <__aeabi_dsub>
 801d9a0:	460b      	mov	r3, r1
 801d9a2:	4602      	mov	r2, r0
 801d9a4:	ea46 060a 	orr.w	r6, r6, sl
 801d9a8:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 801d9ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d9ae:	431e      	orrs	r6, r3
 801d9b0:	d06d      	beq.n	801da8e <_strtod_l+0xb86>
 801d9b2:	a30d      	add	r3, pc, #52	@ (adr r3, 801d9e8 <_strtod_l+0xae0>)
 801d9b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d9b8:	f7e3 f8aa 	bl	8000b10 <__aeabi_dcmplt>
 801d9bc:	2800      	cmp	r0, #0
 801d9be:	f47f accf 	bne.w	801d360 <_strtod_l+0x458>
 801d9c2:	a30b      	add	r3, pc, #44	@ (adr r3, 801d9f0 <_strtod_l+0xae8>)
 801d9c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d9c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801d9cc:	f7e3 f8be 	bl	8000b4c <__aeabi_dcmpgt>
 801d9d0:	2800      	cmp	r0, #0
 801d9d2:	d093      	beq.n	801d8fc <_strtod_l+0x9f4>
 801d9d4:	e4c4      	b.n	801d360 <_strtod_l+0x458>
 801d9d6:	bf00      	nop
 801d9d8:	00000000 	.word	0x00000000
 801d9dc:	bff00000 	.word	0xbff00000
 801d9e0:	00000000 	.word	0x00000000
 801d9e4:	3ff00000 	.word	0x3ff00000
 801d9e8:	94a03595 	.word	0x94a03595
 801d9ec:	3fdfffff 	.word	0x3fdfffff
 801d9f0:	35afe535 	.word	0x35afe535
 801d9f4:	3fe00000 	.word	0x3fe00000
 801d9f8:	000fffff 	.word	0x000fffff
 801d9fc:	7ff00000 	.word	0x7ff00000
 801da00:	7fefffff 	.word	0x7fefffff
 801da04:	3ff00000 	.word	0x3ff00000
 801da08:	3fe00000 	.word	0x3fe00000
 801da0c:	7fe00000 	.word	0x7fe00000
 801da10:	7c9fffff 	.word	0x7c9fffff
 801da14:	9b08      	ldr	r3, [sp, #32]
 801da16:	b323      	cbz	r3, 801da62 <_strtod_l+0xb5a>
 801da18:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 801da1c:	d821      	bhi.n	801da62 <_strtod_l+0xb5a>
 801da1e:	4630      	mov	r0, r6
 801da20:	4639      	mov	r1, r7
 801da22:	a327      	add	r3, pc, #156	@ (adr r3, 801dac0 <_strtod_l+0xbb8>)
 801da24:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da28:	f7e3 f87c 	bl	8000b24 <__aeabi_dcmple>
 801da2c:	b1a0      	cbz	r0, 801da58 <_strtod_l+0xb50>
 801da2e:	4639      	mov	r1, r7
 801da30:	4630      	mov	r0, r6
 801da32:	f7e3 f8d3 	bl	8000bdc <__aeabi_d2uiz>
 801da36:	2801      	cmp	r0, #1
 801da38:	bf38      	it	cc
 801da3a:	2001      	movcc	r0, #1
 801da3c:	f7e2 fd7c 	bl	8000538 <__aeabi_ui2d>
 801da40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801da42:	4606      	mov	r6, r0
 801da44:	460f      	mov	r7, r1
 801da46:	b9fb      	cbnz	r3, 801da88 <_strtod_l+0xb80>
 801da48:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801da4c:	9014      	str	r0, [sp, #80]	@ 0x50
 801da4e:	9315      	str	r3, [sp, #84]	@ 0x54
 801da50:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 801da54:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801da58:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801da5a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 801da5e:	1b5b      	subs	r3, r3, r5
 801da60:	9311      	str	r3, [sp, #68]	@ 0x44
 801da62:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 801da66:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801da6a:	f003 f8ed 	bl	8020c48 <__ulp>
 801da6e:	4650      	mov	r0, sl
 801da70:	4659      	mov	r1, fp
 801da72:	ec53 2b10 	vmov	r2, r3, d0
 801da76:	f7e2 fdd9 	bl	800062c <__aeabi_dmul>
 801da7a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801da7e:	f7e2 fc1f 	bl	80002c0 <__adddf3>
 801da82:	4682      	mov	sl, r0
 801da84:	468b      	mov	fp, r1
 801da86:	e772      	b.n	801d96e <_strtod_l+0xa66>
 801da88:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 801da8c:	e7e0      	b.n	801da50 <_strtod_l+0xb48>
 801da8e:	a30e      	add	r3, pc, #56	@ (adr r3, 801dac8 <_strtod_l+0xbc0>)
 801da90:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da94:	f7e3 f83c 	bl	8000b10 <__aeabi_dcmplt>
 801da98:	e79a      	b.n	801d9d0 <_strtod_l+0xac8>
 801da9a:	2300      	movs	r3, #0
 801da9c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801da9e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801daa0:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801daa2:	6013      	str	r3, [r2, #0]
 801daa4:	f7ff ba6d 	b.w	801cf82 <_strtod_l+0x7a>
 801daa8:	2a65      	cmp	r2, #101	@ 0x65
 801daaa:	f43f ab67 	beq.w	801d17c <_strtod_l+0x274>
 801daae:	2a45      	cmp	r2, #69	@ 0x45
 801dab0:	f43f ab64 	beq.w	801d17c <_strtod_l+0x274>
 801dab4:	2301      	movs	r3, #1
 801dab6:	f7ff bba0 	b.w	801d1fa <_strtod_l+0x2f2>
 801daba:	bf00      	nop
 801dabc:	f3af 8000 	nop.w
 801dac0:	ffc00000 	.word	0xffc00000
 801dac4:	41dfffff 	.word	0x41dfffff
 801dac8:	94a03595 	.word	0x94a03595
 801dacc:	3fcfffff 	.word	0x3fcfffff

0801dad0 <_strtod_r>:
 801dad0:	4b01      	ldr	r3, [pc, #4]	@ (801dad8 <_strtod_r+0x8>)
 801dad2:	f7ff ba19 	b.w	801cf08 <_strtod_l>
 801dad6:	bf00      	nop
 801dad8:	200000b8 	.word	0x200000b8

0801dadc <strtod>:
 801dadc:	460a      	mov	r2, r1
 801dade:	4601      	mov	r1, r0
 801dae0:	4802      	ldr	r0, [pc, #8]	@ (801daec <strtod+0x10>)
 801dae2:	4b03      	ldr	r3, [pc, #12]	@ (801daf0 <strtod+0x14>)
 801dae4:	6800      	ldr	r0, [r0, #0]
 801dae6:	f7ff ba0f 	b.w	801cf08 <_strtod_l>
 801daea:	bf00      	nop
 801daec:	20000224 	.word	0x20000224
 801daf0:	200000b8 	.word	0x200000b8

0801daf4 <_strtol_l.constprop.0>:
 801daf4:	2b24      	cmp	r3, #36	@ 0x24
 801daf6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dafa:	4686      	mov	lr, r0
 801dafc:	4690      	mov	r8, r2
 801dafe:	d801      	bhi.n	801db04 <_strtol_l.constprop.0+0x10>
 801db00:	2b01      	cmp	r3, #1
 801db02:	d106      	bne.n	801db12 <_strtol_l.constprop.0+0x1e>
 801db04:	f001 fac4 	bl	801f090 <__errno>
 801db08:	2316      	movs	r3, #22
 801db0a:	6003      	str	r3, [r0, #0]
 801db0c:	2000      	movs	r0, #0
 801db0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801db12:	460d      	mov	r5, r1
 801db14:	4833      	ldr	r0, [pc, #204]	@ (801dbe4 <_strtol_l.constprop.0+0xf0>)
 801db16:	462a      	mov	r2, r5
 801db18:	f815 4b01 	ldrb.w	r4, [r5], #1
 801db1c:	5d06      	ldrb	r6, [r0, r4]
 801db1e:	f016 0608 	ands.w	r6, r6, #8
 801db22:	d1f8      	bne.n	801db16 <_strtol_l.constprop.0+0x22>
 801db24:	2c2d      	cmp	r4, #45	@ 0x2d
 801db26:	d12d      	bne.n	801db84 <_strtol_l.constprop.0+0x90>
 801db28:	782c      	ldrb	r4, [r5, #0]
 801db2a:	2601      	movs	r6, #1
 801db2c:	1c95      	adds	r5, r2, #2
 801db2e:	f033 0210 	bics.w	r2, r3, #16
 801db32:	d109      	bne.n	801db48 <_strtol_l.constprop.0+0x54>
 801db34:	2c30      	cmp	r4, #48	@ 0x30
 801db36:	d12a      	bne.n	801db8e <_strtol_l.constprop.0+0x9a>
 801db38:	782a      	ldrb	r2, [r5, #0]
 801db3a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801db3e:	2a58      	cmp	r2, #88	@ 0x58
 801db40:	d125      	bne.n	801db8e <_strtol_l.constprop.0+0x9a>
 801db42:	786c      	ldrb	r4, [r5, #1]
 801db44:	2310      	movs	r3, #16
 801db46:	3502      	adds	r5, #2
 801db48:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801db4c:	2200      	movs	r2, #0
 801db4e:	f10c 3cff 	add.w	ip, ip, #4294967295
 801db52:	4610      	mov	r0, r2
 801db54:	fbbc f9f3 	udiv	r9, ip, r3
 801db58:	fb03 ca19 	mls	sl, r3, r9, ip
 801db5c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801db60:	2f09      	cmp	r7, #9
 801db62:	d81b      	bhi.n	801db9c <_strtol_l.constprop.0+0xa8>
 801db64:	463c      	mov	r4, r7
 801db66:	42a3      	cmp	r3, r4
 801db68:	dd27      	ble.n	801dbba <_strtol_l.constprop.0+0xc6>
 801db6a:	1c57      	adds	r7, r2, #1
 801db6c:	d007      	beq.n	801db7e <_strtol_l.constprop.0+0x8a>
 801db6e:	4581      	cmp	r9, r0
 801db70:	d320      	bcc.n	801dbb4 <_strtol_l.constprop.0+0xc0>
 801db72:	d101      	bne.n	801db78 <_strtol_l.constprop.0+0x84>
 801db74:	45a2      	cmp	sl, r4
 801db76:	db1d      	blt.n	801dbb4 <_strtol_l.constprop.0+0xc0>
 801db78:	fb00 4003 	mla	r0, r0, r3, r4
 801db7c:	2201      	movs	r2, #1
 801db7e:	f815 4b01 	ldrb.w	r4, [r5], #1
 801db82:	e7eb      	b.n	801db5c <_strtol_l.constprop.0+0x68>
 801db84:	2c2b      	cmp	r4, #43	@ 0x2b
 801db86:	bf04      	itt	eq
 801db88:	782c      	ldrbeq	r4, [r5, #0]
 801db8a:	1c95      	addeq	r5, r2, #2
 801db8c:	e7cf      	b.n	801db2e <_strtol_l.constprop.0+0x3a>
 801db8e:	2b00      	cmp	r3, #0
 801db90:	d1da      	bne.n	801db48 <_strtol_l.constprop.0+0x54>
 801db92:	2c30      	cmp	r4, #48	@ 0x30
 801db94:	bf0c      	ite	eq
 801db96:	2308      	moveq	r3, #8
 801db98:	230a      	movne	r3, #10
 801db9a:	e7d5      	b.n	801db48 <_strtol_l.constprop.0+0x54>
 801db9c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801dba0:	2f19      	cmp	r7, #25
 801dba2:	d801      	bhi.n	801dba8 <_strtol_l.constprop.0+0xb4>
 801dba4:	3c37      	subs	r4, #55	@ 0x37
 801dba6:	e7de      	b.n	801db66 <_strtol_l.constprop.0+0x72>
 801dba8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801dbac:	2f19      	cmp	r7, #25
 801dbae:	d804      	bhi.n	801dbba <_strtol_l.constprop.0+0xc6>
 801dbb0:	3c57      	subs	r4, #87	@ 0x57
 801dbb2:	e7d8      	b.n	801db66 <_strtol_l.constprop.0+0x72>
 801dbb4:	f04f 32ff 	mov.w	r2, #4294967295
 801dbb8:	e7e1      	b.n	801db7e <_strtol_l.constprop.0+0x8a>
 801dbba:	1c53      	adds	r3, r2, #1
 801dbbc:	d108      	bne.n	801dbd0 <_strtol_l.constprop.0+0xdc>
 801dbbe:	2322      	movs	r3, #34	@ 0x22
 801dbc0:	4660      	mov	r0, ip
 801dbc2:	f8ce 3000 	str.w	r3, [lr]
 801dbc6:	f1b8 0f00 	cmp.w	r8, #0
 801dbca:	d0a0      	beq.n	801db0e <_strtol_l.constprop.0+0x1a>
 801dbcc:	1e69      	subs	r1, r5, #1
 801dbce:	e006      	b.n	801dbde <_strtol_l.constprop.0+0xea>
 801dbd0:	b106      	cbz	r6, 801dbd4 <_strtol_l.constprop.0+0xe0>
 801dbd2:	4240      	negs	r0, r0
 801dbd4:	f1b8 0f00 	cmp.w	r8, #0
 801dbd8:	d099      	beq.n	801db0e <_strtol_l.constprop.0+0x1a>
 801dbda:	2a00      	cmp	r2, #0
 801dbdc:	d1f6      	bne.n	801dbcc <_strtol_l.constprop.0+0xd8>
 801dbde:	f8c8 1000 	str.w	r1, [r8]
 801dbe2:	e794      	b.n	801db0e <_strtol_l.constprop.0+0x1a>
 801dbe4:	080243f1 	.word	0x080243f1

0801dbe8 <_strtol_r>:
 801dbe8:	f7ff bf84 	b.w	801daf4 <_strtol_l.constprop.0>

0801dbec <strtol>:
 801dbec:	4613      	mov	r3, r2
 801dbee:	460a      	mov	r2, r1
 801dbf0:	4601      	mov	r1, r0
 801dbf2:	4802      	ldr	r0, [pc, #8]	@ (801dbfc <strtol+0x10>)
 801dbf4:	6800      	ldr	r0, [r0, #0]
 801dbf6:	f7ff bf7d 	b.w	801daf4 <_strtol_l.constprop.0>
 801dbfa:	bf00      	nop
 801dbfc:	20000224 	.word	0x20000224

0801dc00 <__cvt>:
 801dc00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801dc04:	ec57 6b10 	vmov	r6, r7, d0
 801dc08:	2f00      	cmp	r7, #0
 801dc0a:	460c      	mov	r4, r1
 801dc0c:	4619      	mov	r1, r3
 801dc0e:	463b      	mov	r3, r7
 801dc10:	bfb4      	ite	lt
 801dc12:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801dc16:	2300      	movge	r3, #0
 801dc18:	4691      	mov	r9, r2
 801dc1a:	bfbf      	itttt	lt
 801dc1c:	4632      	movlt	r2, r6
 801dc1e:	461f      	movlt	r7, r3
 801dc20:	232d      	movlt	r3, #45	@ 0x2d
 801dc22:	4616      	movlt	r6, r2
 801dc24:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801dc28:	700b      	strb	r3, [r1, #0]
 801dc2a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801dc2c:	f023 0820 	bic.w	r8, r3, #32
 801dc30:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801dc34:	d005      	beq.n	801dc42 <__cvt+0x42>
 801dc36:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801dc3a:	d100      	bne.n	801dc3e <__cvt+0x3e>
 801dc3c:	3401      	adds	r4, #1
 801dc3e:	2102      	movs	r1, #2
 801dc40:	e000      	b.n	801dc44 <__cvt+0x44>
 801dc42:	2103      	movs	r1, #3
 801dc44:	ab03      	add	r3, sp, #12
 801dc46:	4622      	mov	r2, r4
 801dc48:	9301      	str	r3, [sp, #4]
 801dc4a:	ab02      	add	r3, sp, #8
 801dc4c:	ec47 6b10 	vmov	d0, r6, r7
 801dc50:	9300      	str	r3, [sp, #0]
 801dc52:	4653      	mov	r3, sl
 801dc54:	f001 fb28 	bl	801f2a8 <_dtoa_r>
 801dc58:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801dc5c:	4605      	mov	r5, r0
 801dc5e:	d119      	bne.n	801dc94 <__cvt+0x94>
 801dc60:	f019 0f01 	tst.w	r9, #1
 801dc64:	d00e      	beq.n	801dc84 <__cvt+0x84>
 801dc66:	eb00 0904 	add.w	r9, r0, r4
 801dc6a:	2200      	movs	r2, #0
 801dc6c:	2300      	movs	r3, #0
 801dc6e:	4630      	mov	r0, r6
 801dc70:	4639      	mov	r1, r7
 801dc72:	f7e2 ff43 	bl	8000afc <__aeabi_dcmpeq>
 801dc76:	b108      	cbz	r0, 801dc7c <__cvt+0x7c>
 801dc78:	f8cd 900c 	str.w	r9, [sp, #12]
 801dc7c:	2230      	movs	r2, #48	@ 0x30
 801dc7e:	9b03      	ldr	r3, [sp, #12]
 801dc80:	454b      	cmp	r3, r9
 801dc82:	d31e      	bcc.n	801dcc2 <__cvt+0xc2>
 801dc84:	9b03      	ldr	r3, [sp, #12]
 801dc86:	4628      	mov	r0, r5
 801dc88:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801dc8a:	1b5b      	subs	r3, r3, r5
 801dc8c:	6013      	str	r3, [r2, #0]
 801dc8e:	b004      	add	sp, #16
 801dc90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dc94:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801dc98:	eb00 0904 	add.w	r9, r0, r4
 801dc9c:	d1e5      	bne.n	801dc6a <__cvt+0x6a>
 801dc9e:	7803      	ldrb	r3, [r0, #0]
 801dca0:	2b30      	cmp	r3, #48	@ 0x30
 801dca2:	d10a      	bne.n	801dcba <__cvt+0xba>
 801dca4:	2200      	movs	r2, #0
 801dca6:	2300      	movs	r3, #0
 801dca8:	4630      	mov	r0, r6
 801dcaa:	4639      	mov	r1, r7
 801dcac:	f7e2 ff26 	bl	8000afc <__aeabi_dcmpeq>
 801dcb0:	b918      	cbnz	r0, 801dcba <__cvt+0xba>
 801dcb2:	f1c4 0401 	rsb	r4, r4, #1
 801dcb6:	f8ca 4000 	str.w	r4, [sl]
 801dcba:	f8da 3000 	ldr.w	r3, [sl]
 801dcbe:	4499      	add	r9, r3
 801dcc0:	e7d3      	b.n	801dc6a <__cvt+0x6a>
 801dcc2:	1c59      	adds	r1, r3, #1
 801dcc4:	9103      	str	r1, [sp, #12]
 801dcc6:	701a      	strb	r2, [r3, #0]
 801dcc8:	e7d9      	b.n	801dc7e <__cvt+0x7e>

0801dcca <__exponent>:
 801dcca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801dccc:	2900      	cmp	r1, #0
 801dcce:	7002      	strb	r2, [r0, #0]
 801dcd0:	bfba      	itte	lt
 801dcd2:	4249      	neglt	r1, r1
 801dcd4:	232d      	movlt	r3, #45	@ 0x2d
 801dcd6:	232b      	movge	r3, #43	@ 0x2b
 801dcd8:	2909      	cmp	r1, #9
 801dcda:	7043      	strb	r3, [r0, #1]
 801dcdc:	dd28      	ble.n	801dd30 <__exponent+0x66>
 801dcde:	f10d 0307 	add.w	r3, sp, #7
 801dce2:	270a      	movs	r7, #10
 801dce4:	461d      	mov	r5, r3
 801dce6:	461a      	mov	r2, r3
 801dce8:	3b01      	subs	r3, #1
 801dcea:	fbb1 f6f7 	udiv	r6, r1, r7
 801dcee:	fb07 1416 	mls	r4, r7, r6, r1
 801dcf2:	3430      	adds	r4, #48	@ 0x30
 801dcf4:	f802 4c01 	strb.w	r4, [r2, #-1]
 801dcf8:	460c      	mov	r4, r1
 801dcfa:	4631      	mov	r1, r6
 801dcfc:	2c63      	cmp	r4, #99	@ 0x63
 801dcfe:	dcf2      	bgt.n	801dce6 <__exponent+0x1c>
 801dd00:	3130      	adds	r1, #48	@ 0x30
 801dd02:	1e94      	subs	r4, r2, #2
 801dd04:	f803 1c01 	strb.w	r1, [r3, #-1]
 801dd08:	1c41      	adds	r1, r0, #1
 801dd0a:	4623      	mov	r3, r4
 801dd0c:	42ab      	cmp	r3, r5
 801dd0e:	d30a      	bcc.n	801dd26 <__exponent+0x5c>
 801dd10:	f10d 0309 	add.w	r3, sp, #9
 801dd14:	1a9b      	subs	r3, r3, r2
 801dd16:	42ac      	cmp	r4, r5
 801dd18:	bf88      	it	hi
 801dd1a:	2300      	movhi	r3, #0
 801dd1c:	3302      	adds	r3, #2
 801dd1e:	4403      	add	r3, r0
 801dd20:	1a18      	subs	r0, r3, r0
 801dd22:	b003      	add	sp, #12
 801dd24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dd26:	f813 6b01 	ldrb.w	r6, [r3], #1
 801dd2a:	f801 6f01 	strb.w	r6, [r1, #1]!
 801dd2e:	e7ed      	b.n	801dd0c <__exponent+0x42>
 801dd30:	2330      	movs	r3, #48	@ 0x30
 801dd32:	3130      	adds	r1, #48	@ 0x30
 801dd34:	7083      	strb	r3, [r0, #2]
 801dd36:	1d03      	adds	r3, r0, #4
 801dd38:	70c1      	strb	r1, [r0, #3]
 801dd3a:	e7f1      	b.n	801dd20 <__exponent+0x56>

0801dd3c <_printf_float>:
 801dd3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dd40:	b08d      	sub	sp, #52	@ 0x34
 801dd42:	460c      	mov	r4, r1
 801dd44:	4616      	mov	r6, r2
 801dd46:	461f      	mov	r7, r3
 801dd48:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801dd4c:	4605      	mov	r5, r0
 801dd4e:	f001 f945 	bl	801efdc <_localeconv_r>
 801dd52:	6803      	ldr	r3, [r0, #0]
 801dd54:	4618      	mov	r0, r3
 801dd56:	9304      	str	r3, [sp, #16]
 801dd58:	f7e2 faa4 	bl	80002a4 <strlen>
 801dd5c:	2300      	movs	r3, #0
 801dd5e:	9005      	str	r0, [sp, #20]
 801dd60:	930a      	str	r3, [sp, #40]	@ 0x28
 801dd62:	f8d8 3000 	ldr.w	r3, [r8]
 801dd66:	f894 a018 	ldrb.w	sl, [r4, #24]
 801dd6a:	3307      	adds	r3, #7
 801dd6c:	f8d4 b000 	ldr.w	fp, [r4]
 801dd70:	f023 0307 	bic.w	r3, r3, #7
 801dd74:	f103 0208 	add.w	r2, r3, #8
 801dd78:	f8c8 2000 	str.w	r2, [r8]
 801dd7c:	f04f 32ff 	mov.w	r2, #4294967295
 801dd80:	e9d3 8900 	ldrd	r8, r9, [r3]
 801dd84:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801dd88:	f8cd 8018 	str.w	r8, [sp, #24]
 801dd8c:	9307      	str	r3, [sp, #28]
 801dd8e:	4b9d      	ldr	r3, [pc, #628]	@ (801e004 <_printf_float+0x2c8>)
 801dd90:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801dd94:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801dd98:	f7e2 fee2 	bl	8000b60 <__aeabi_dcmpun>
 801dd9c:	bb70      	cbnz	r0, 801ddfc <_printf_float+0xc0>
 801dd9e:	f04f 32ff 	mov.w	r2, #4294967295
 801dda2:	4b98      	ldr	r3, [pc, #608]	@ (801e004 <_printf_float+0x2c8>)
 801dda4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801dda8:	f7e2 febc 	bl	8000b24 <__aeabi_dcmple>
 801ddac:	bb30      	cbnz	r0, 801ddfc <_printf_float+0xc0>
 801ddae:	2200      	movs	r2, #0
 801ddb0:	2300      	movs	r3, #0
 801ddb2:	4640      	mov	r0, r8
 801ddb4:	4649      	mov	r1, r9
 801ddb6:	f7e2 feab 	bl	8000b10 <__aeabi_dcmplt>
 801ddba:	b110      	cbz	r0, 801ddc2 <_printf_float+0x86>
 801ddbc:	232d      	movs	r3, #45	@ 0x2d
 801ddbe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801ddc2:	4a91      	ldr	r2, [pc, #580]	@ (801e008 <_printf_float+0x2cc>)
 801ddc4:	4b91      	ldr	r3, [pc, #580]	@ (801e00c <_printf_float+0x2d0>)
 801ddc6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801ddca:	bf94      	ite	ls
 801ddcc:	4690      	movls	r8, r2
 801ddce:	4698      	movhi	r8, r3
 801ddd0:	2303      	movs	r3, #3
 801ddd2:	f04f 0900 	mov.w	r9, #0
 801ddd6:	6123      	str	r3, [r4, #16]
 801ddd8:	f02b 0304 	bic.w	r3, fp, #4
 801dddc:	6023      	str	r3, [r4, #0]
 801ddde:	4633      	mov	r3, r6
 801dde0:	aa0b      	add	r2, sp, #44	@ 0x2c
 801dde2:	4621      	mov	r1, r4
 801dde4:	4628      	mov	r0, r5
 801dde6:	9700      	str	r7, [sp, #0]
 801dde8:	f000 f9d2 	bl	801e190 <_printf_common>
 801ddec:	3001      	adds	r0, #1
 801ddee:	f040 808d 	bne.w	801df0c <_printf_float+0x1d0>
 801ddf2:	f04f 30ff 	mov.w	r0, #4294967295
 801ddf6:	b00d      	add	sp, #52	@ 0x34
 801ddf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ddfc:	4642      	mov	r2, r8
 801ddfe:	464b      	mov	r3, r9
 801de00:	4640      	mov	r0, r8
 801de02:	4649      	mov	r1, r9
 801de04:	f7e2 feac 	bl	8000b60 <__aeabi_dcmpun>
 801de08:	b140      	cbz	r0, 801de1c <_printf_float+0xe0>
 801de0a:	464b      	mov	r3, r9
 801de0c:	4a80      	ldr	r2, [pc, #512]	@ (801e010 <_printf_float+0x2d4>)
 801de0e:	2b00      	cmp	r3, #0
 801de10:	bfbc      	itt	lt
 801de12:	232d      	movlt	r3, #45	@ 0x2d
 801de14:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801de18:	4b7e      	ldr	r3, [pc, #504]	@ (801e014 <_printf_float+0x2d8>)
 801de1a:	e7d4      	b.n	801ddc6 <_printf_float+0x8a>
 801de1c:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801de20:	6863      	ldr	r3, [r4, #4]
 801de22:	9206      	str	r2, [sp, #24]
 801de24:	1c5a      	adds	r2, r3, #1
 801de26:	d13b      	bne.n	801dea0 <_printf_float+0x164>
 801de28:	2306      	movs	r3, #6
 801de2a:	6063      	str	r3, [r4, #4]
 801de2c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801de30:	2300      	movs	r3, #0
 801de32:	4628      	mov	r0, r5
 801de34:	6022      	str	r2, [r4, #0]
 801de36:	9303      	str	r3, [sp, #12]
 801de38:	ab0a      	add	r3, sp, #40	@ 0x28
 801de3a:	e9cd a301 	strd	sl, r3, [sp, #4]
 801de3e:	ab09      	add	r3, sp, #36	@ 0x24
 801de40:	ec49 8b10 	vmov	d0, r8, r9
 801de44:	9300      	str	r3, [sp, #0]
 801de46:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801de4a:	6861      	ldr	r1, [r4, #4]
 801de4c:	f7ff fed8 	bl	801dc00 <__cvt>
 801de50:	9b06      	ldr	r3, [sp, #24]
 801de52:	4680      	mov	r8, r0
 801de54:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801de56:	2b47      	cmp	r3, #71	@ 0x47
 801de58:	d129      	bne.n	801deae <_printf_float+0x172>
 801de5a:	1cc8      	adds	r0, r1, #3
 801de5c:	db02      	blt.n	801de64 <_printf_float+0x128>
 801de5e:	6863      	ldr	r3, [r4, #4]
 801de60:	4299      	cmp	r1, r3
 801de62:	dd41      	ble.n	801dee8 <_printf_float+0x1ac>
 801de64:	f1aa 0a02 	sub.w	sl, sl, #2
 801de68:	fa5f fa8a 	uxtb.w	sl, sl
 801de6c:	3901      	subs	r1, #1
 801de6e:	4652      	mov	r2, sl
 801de70:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801de74:	9109      	str	r1, [sp, #36]	@ 0x24
 801de76:	f7ff ff28 	bl	801dcca <__exponent>
 801de7a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801de7c:	4681      	mov	r9, r0
 801de7e:	1813      	adds	r3, r2, r0
 801de80:	2a01      	cmp	r2, #1
 801de82:	6123      	str	r3, [r4, #16]
 801de84:	dc02      	bgt.n	801de8c <_printf_float+0x150>
 801de86:	6822      	ldr	r2, [r4, #0]
 801de88:	07d2      	lsls	r2, r2, #31
 801de8a:	d501      	bpl.n	801de90 <_printf_float+0x154>
 801de8c:	3301      	adds	r3, #1
 801de8e:	6123      	str	r3, [r4, #16]
 801de90:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801de94:	2b00      	cmp	r3, #0
 801de96:	d0a2      	beq.n	801ddde <_printf_float+0xa2>
 801de98:	232d      	movs	r3, #45	@ 0x2d
 801de9a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801de9e:	e79e      	b.n	801ddde <_printf_float+0xa2>
 801dea0:	9a06      	ldr	r2, [sp, #24]
 801dea2:	2a47      	cmp	r2, #71	@ 0x47
 801dea4:	d1c2      	bne.n	801de2c <_printf_float+0xf0>
 801dea6:	2b00      	cmp	r3, #0
 801dea8:	d1c0      	bne.n	801de2c <_printf_float+0xf0>
 801deaa:	2301      	movs	r3, #1
 801deac:	e7bd      	b.n	801de2a <_printf_float+0xee>
 801deae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801deb2:	d9db      	bls.n	801de6c <_printf_float+0x130>
 801deb4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801deb8:	d118      	bne.n	801deec <_printf_float+0x1b0>
 801deba:	2900      	cmp	r1, #0
 801debc:	6863      	ldr	r3, [r4, #4]
 801debe:	dd0b      	ble.n	801ded8 <_printf_float+0x19c>
 801dec0:	6121      	str	r1, [r4, #16]
 801dec2:	b913      	cbnz	r3, 801deca <_printf_float+0x18e>
 801dec4:	6822      	ldr	r2, [r4, #0]
 801dec6:	07d0      	lsls	r0, r2, #31
 801dec8:	d502      	bpl.n	801ded0 <_printf_float+0x194>
 801deca:	3301      	adds	r3, #1
 801decc:	440b      	add	r3, r1
 801dece:	6123      	str	r3, [r4, #16]
 801ded0:	f04f 0900 	mov.w	r9, #0
 801ded4:	65a1      	str	r1, [r4, #88]	@ 0x58
 801ded6:	e7db      	b.n	801de90 <_printf_float+0x154>
 801ded8:	b913      	cbnz	r3, 801dee0 <_printf_float+0x1a4>
 801deda:	6822      	ldr	r2, [r4, #0]
 801dedc:	07d2      	lsls	r2, r2, #31
 801dede:	d501      	bpl.n	801dee4 <_printf_float+0x1a8>
 801dee0:	3302      	adds	r3, #2
 801dee2:	e7f4      	b.n	801dece <_printf_float+0x192>
 801dee4:	2301      	movs	r3, #1
 801dee6:	e7f2      	b.n	801dece <_printf_float+0x192>
 801dee8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801deec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801deee:	4299      	cmp	r1, r3
 801def0:	db05      	blt.n	801defe <_printf_float+0x1c2>
 801def2:	6823      	ldr	r3, [r4, #0]
 801def4:	6121      	str	r1, [r4, #16]
 801def6:	07d8      	lsls	r0, r3, #31
 801def8:	d5ea      	bpl.n	801ded0 <_printf_float+0x194>
 801defa:	1c4b      	adds	r3, r1, #1
 801defc:	e7e7      	b.n	801dece <_printf_float+0x192>
 801defe:	2900      	cmp	r1, #0
 801df00:	bfd4      	ite	le
 801df02:	f1c1 0202 	rsble	r2, r1, #2
 801df06:	2201      	movgt	r2, #1
 801df08:	4413      	add	r3, r2
 801df0a:	e7e0      	b.n	801dece <_printf_float+0x192>
 801df0c:	6823      	ldr	r3, [r4, #0]
 801df0e:	055a      	lsls	r2, r3, #21
 801df10:	d407      	bmi.n	801df22 <_printf_float+0x1e6>
 801df12:	6923      	ldr	r3, [r4, #16]
 801df14:	4642      	mov	r2, r8
 801df16:	4631      	mov	r1, r6
 801df18:	4628      	mov	r0, r5
 801df1a:	47b8      	blx	r7
 801df1c:	3001      	adds	r0, #1
 801df1e:	d12b      	bne.n	801df78 <_printf_float+0x23c>
 801df20:	e767      	b.n	801ddf2 <_printf_float+0xb6>
 801df22:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801df26:	f240 80dd 	bls.w	801e0e4 <_printf_float+0x3a8>
 801df2a:	2200      	movs	r2, #0
 801df2c:	2300      	movs	r3, #0
 801df2e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801df32:	f7e2 fde3 	bl	8000afc <__aeabi_dcmpeq>
 801df36:	2800      	cmp	r0, #0
 801df38:	d033      	beq.n	801dfa2 <_printf_float+0x266>
 801df3a:	2301      	movs	r3, #1
 801df3c:	4a36      	ldr	r2, [pc, #216]	@ (801e018 <_printf_float+0x2dc>)
 801df3e:	4631      	mov	r1, r6
 801df40:	4628      	mov	r0, r5
 801df42:	47b8      	blx	r7
 801df44:	3001      	adds	r0, #1
 801df46:	f43f af54 	beq.w	801ddf2 <_printf_float+0xb6>
 801df4a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801df4e:	4543      	cmp	r3, r8
 801df50:	db02      	blt.n	801df58 <_printf_float+0x21c>
 801df52:	6823      	ldr	r3, [r4, #0]
 801df54:	07d8      	lsls	r0, r3, #31
 801df56:	d50f      	bpl.n	801df78 <_printf_float+0x23c>
 801df58:	4631      	mov	r1, r6
 801df5a:	4628      	mov	r0, r5
 801df5c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801df60:	47b8      	blx	r7
 801df62:	3001      	adds	r0, #1
 801df64:	f43f af45 	beq.w	801ddf2 <_printf_float+0xb6>
 801df68:	f04f 0900 	mov.w	r9, #0
 801df6c:	f108 38ff 	add.w	r8, r8, #4294967295
 801df70:	f104 0a1a 	add.w	sl, r4, #26
 801df74:	45c8      	cmp	r8, r9
 801df76:	dc09      	bgt.n	801df8c <_printf_float+0x250>
 801df78:	6823      	ldr	r3, [r4, #0]
 801df7a:	079b      	lsls	r3, r3, #30
 801df7c:	f100 8103 	bmi.w	801e186 <_printf_float+0x44a>
 801df80:	68e0      	ldr	r0, [r4, #12]
 801df82:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801df84:	4298      	cmp	r0, r3
 801df86:	bfb8      	it	lt
 801df88:	4618      	movlt	r0, r3
 801df8a:	e734      	b.n	801ddf6 <_printf_float+0xba>
 801df8c:	2301      	movs	r3, #1
 801df8e:	4652      	mov	r2, sl
 801df90:	4631      	mov	r1, r6
 801df92:	4628      	mov	r0, r5
 801df94:	47b8      	blx	r7
 801df96:	3001      	adds	r0, #1
 801df98:	f43f af2b 	beq.w	801ddf2 <_printf_float+0xb6>
 801df9c:	f109 0901 	add.w	r9, r9, #1
 801dfa0:	e7e8      	b.n	801df74 <_printf_float+0x238>
 801dfa2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dfa4:	2b00      	cmp	r3, #0
 801dfa6:	dc39      	bgt.n	801e01c <_printf_float+0x2e0>
 801dfa8:	2301      	movs	r3, #1
 801dfaa:	4a1b      	ldr	r2, [pc, #108]	@ (801e018 <_printf_float+0x2dc>)
 801dfac:	4631      	mov	r1, r6
 801dfae:	4628      	mov	r0, r5
 801dfb0:	47b8      	blx	r7
 801dfb2:	3001      	adds	r0, #1
 801dfb4:	f43f af1d 	beq.w	801ddf2 <_printf_float+0xb6>
 801dfb8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801dfbc:	ea59 0303 	orrs.w	r3, r9, r3
 801dfc0:	d102      	bne.n	801dfc8 <_printf_float+0x28c>
 801dfc2:	6823      	ldr	r3, [r4, #0]
 801dfc4:	07d9      	lsls	r1, r3, #31
 801dfc6:	d5d7      	bpl.n	801df78 <_printf_float+0x23c>
 801dfc8:	4631      	mov	r1, r6
 801dfca:	4628      	mov	r0, r5
 801dfcc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801dfd0:	47b8      	blx	r7
 801dfd2:	3001      	adds	r0, #1
 801dfd4:	f43f af0d 	beq.w	801ddf2 <_printf_float+0xb6>
 801dfd8:	f04f 0a00 	mov.w	sl, #0
 801dfdc:	f104 0b1a 	add.w	fp, r4, #26
 801dfe0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dfe2:	425b      	negs	r3, r3
 801dfe4:	4553      	cmp	r3, sl
 801dfe6:	dc01      	bgt.n	801dfec <_printf_float+0x2b0>
 801dfe8:	464b      	mov	r3, r9
 801dfea:	e793      	b.n	801df14 <_printf_float+0x1d8>
 801dfec:	2301      	movs	r3, #1
 801dfee:	465a      	mov	r2, fp
 801dff0:	4631      	mov	r1, r6
 801dff2:	4628      	mov	r0, r5
 801dff4:	47b8      	blx	r7
 801dff6:	3001      	adds	r0, #1
 801dff8:	f43f aefb 	beq.w	801ddf2 <_printf_float+0xb6>
 801dffc:	f10a 0a01 	add.w	sl, sl, #1
 801e000:	e7ee      	b.n	801dfe0 <_printf_float+0x2a4>
 801e002:	bf00      	nop
 801e004:	7fefffff 	.word	0x7fefffff
 801e008:	080244f1 	.word	0x080244f1
 801e00c:	080244f5 	.word	0x080244f5
 801e010:	080244f9 	.word	0x080244f9
 801e014:	080244fd 	.word	0x080244fd
 801e018:	0802482f 	.word	0x0802482f
 801e01c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801e01e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801e022:	4553      	cmp	r3, sl
 801e024:	bfa8      	it	ge
 801e026:	4653      	movge	r3, sl
 801e028:	2b00      	cmp	r3, #0
 801e02a:	4699      	mov	r9, r3
 801e02c:	dc36      	bgt.n	801e09c <_printf_float+0x360>
 801e02e:	f04f 0b00 	mov.w	fp, #0
 801e032:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801e036:	f104 021a 	add.w	r2, r4, #26
 801e03a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801e03c:	9306      	str	r3, [sp, #24]
 801e03e:	eba3 0309 	sub.w	r3, r3, r9
 801e042:	455b      	cmp	r3, fp
 801e044:	dc31      	bgt.n	801e0aa <_printf_float+0x36e>
 801e046:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e048:	459a      	cmp	sl, r3
 801e04a:	dc3a      	bgt.n	801e0c2 <_printf_float+0x386>
 801e04c:	6823      	ldr	r3, [r4, #0]
 801e04e:	07da      	lsls	r2, r3, #31
 801e050:	d437      	bmi.n	801e0c2 <_printf_float+0x386>
 801e052:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e054:	ebaa 0903 	sub.w	r9, sl, r3
 801e058:	9b06      	ldr	r3, [sp, #24]
 801e05a:	ebaa 0303 	sub.w	r3, sl, r3
 801e05e:	4599      	cmp	r9, r3
 801e060:	bfa8      	it	ge
 801e062:	4699      	movge	r9, r3
 801e064:	f1b9 0f00 	cmp.w	r9, #0
 801e068:	dc33      	bgt.n	801e0d2 <_printf_float+0x396>
 801e06a:	f04f 0800 	mov.w	r8, #0
 801e06e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801e072:	f104 0b1a 	add.w	fp, r4, #26
 801e076:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e078:	ebaa 0303 	sub.w	r3, sl, r3
 801e07c:	eba3 0309 	sub.w	r3, r3, r9
 801e080:	4543      	cmp	r3, r8
 801e082:	f77f af79 	ble.w	801df78 <_printf_float+0x23c>
 801e086:	2301      	movs	r3, #1
 801e088:	465a      	mov	r2, fp
 801e08a:	4631      	mov	r1, r6
 801e08c:	4628      	mov	r0, r5
 801e08e:	47b8      	blx	r7
 801e090:	3001      	adds	r0, #1
 801e092:	f43f aeae 	beq.w	801ddf2 <_printf_float+0xb6>
 801e096:	f108 0801 	add.w	r8, r8, #1
 801e09a:	e7ec      	b.n	801e076 <_printf_float+0x33a>
 801e09c:	4642      	mov	r2, r8
 801e09e:	4631      	mov	r1, r6
 801e0a0:	4628      	mov	r0, r5
 801e0a2:	47b8      	blx	r7
 801e0a4:	3001      	adds	r0, #1
 801e0a6:	d1c2      	bne.n	801e02e <_printf_float+0x2f2>
 801e0a8:	e6a3      	b.n	801ddf2 <_printf_float+0xb6>
 801e0aa:	2301      	movs	r3, #1
 801e0ac:	4631      	mov	r1, r6
 801e0ae:	4628      	mov	r0, r5
 801e0b0:	9206      	str	r2, [sp, #24]
 801e0b2:	47b8      	blx	r7
 801e0b4:	3001      	adds	r0, #1
 801e0b6:	f43f ae9c 	beq.w	801ddf2 <_printf_float+0xb6>
 801e0ba:	f10b 0b01 	add.w	fp, fp, #1
 801e0be:	9a06      	ldr	r2, [sp, #24]
 801e0c0:	e7bb      	b.n	801e03a <_printf_float+0x2fe>
 801e0c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801e0c6:	4631      	mov	r1, r6
 801e0c8:	4628      	mov	r0, r5
 801e0ca:	47b8      	blx	r7
 801e0cc:	3001      	adds	r0, #1
 801e0ce:	d1c0      	bne.n	801e052 <_printf_float+0x316>
 801e0d0:	e68f      	b.n	801ddf2 <_printf_float+0xb6>
 801e0d2:	9a06      	ldr	r2, [sp, #24]
 801e0d4:	464b      	mov	r3, r9
 801e0d6:	4631      	mov	r1, r6
 801e0d8:	4628      	mov	r0, r5
 801e0da:	4442      	add	r2, r8
 801e0dc:	47b8      	blx	r7
 801e0de:	3001      	adds	r0, #1
 801e0e0:	d1c3      	bne.n	801e06a <_printf_float+0x32e>
 801e0e2:	e686      	b.n	801ddf2 <_printf_float+0xb6>
 801e0e4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801e0e8:	f1ba 0f01 	cmp.w	sl, #1
 801e0ec:	dc01      	bgt.n	801e0f2 <_printf_float+0x3b6>
 801e0ee:	07db      	lsls	r3, r3, #31
 801e0f0:	d536      	bpl.n	801e160 <_printf_float+0x424>
 801e0f2:	2301      	movs	r3, #1
 801e0f4:	4642      	mov	r2, r8
 801e0f6:	4631      	mov	r1, r6
 801e0f8:	4628      	mov	r0, r5
 801e0fa:	47b8      	blx	r7
 801e0fc:	3001      	adds	r0, #1
 801e0fe:	f43f ae78 	beq.w	801ddf2 <_printf_float+0xb6>
 801e102:	4631      	mov	r1, r6
 801e104:	4628      	mov	r0, r5
 801e106:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801e10a:	47b8      	blx	r7
 801e10c:	3001      	adds	r0, #1
 801e10e:	f43f ae70 	beq.w	801ddf2 <_printf_float+0xb6>
 801e112:	2200      	movs	r2, #0
 801e114:	2300      	movs	r3, #0
 801e116:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e11a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801e11e:	f7e2 fced 	bl	8000afc <__aeabi_dcmpeq>
 801e122:	b9c0      	cbnz	r0, 801e156 <_printf_float+0x41a>
 801e124:	4653      	mov	r3, sl
 801e126:	f108 0201 	add.w	r2, r8, #1
 801e12a:	4631      	mov	r1, r6
 801e12c:	4628      	mov	r0, r5
 801e12e:	47b8      	blx	r7
 801e130:	3001      	adds	r0, #1
 801e132:	d10c      	bne.n	801e14e <_printf_float+0x412>
 801e134:	e65d      	b.n	801ddf2 <_printf_float+0xb6>
 801e136:	2301      	movs	r3, #1
 801e138:	465a      	mov	r2, fp
 801e13a:	4631      	mov	r1, r6
 801e13c:	4628      	mov	r0, r5
 801e13e:	47b8      	blx	r7
 801e140:	3001      	adds	r0, #1
 801e142:	f43f ae56 	beq.w	801ddf2 <_printf_float+0xb6>
 801e146:	f108 0801 	add.w	r8, r8, #1
 801e14a:	45d0      	cmp	r8, sl
 801e14c:	dbf3      	blt.n	801e136 <_printf_float+0x3fa>
 801e14e:	464b      	mov	r3, r9
 801e150:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801e154:	e6df      	b.n	801df16 <_printf_float+0x1da>
 801e156:	f04f 0800 	mov.w	r8, #0
 801e15a:	f104 0b1a 	add.w	fp, r4, #26
 801e15e:	e7f4      	b.n	801e14a <_printf_float+0x40e>
 801e160:	2301      	movs	r3, #1
 801e162:	4642      	mov	r2, r8
 801e164:	e7e1      	b.n	801e12a <_printf_float+0x3ee>
 801e166:	2301      	movs	r3, #1
 801e168:	464a      	mov	r2, r9
 801e16a:	4631      	mov	r1, r6
 801e16c:	4628      	mov	r0, r5
 801e16e:	47b8      	blx	r7
 801e170:	3001      	adds	r0, #1
 801e172:	f43f ae3e 	beq.w	801ddf2 <_printf_float+0xb6>
 801e176:	f108 0801 	add.w	r8, r8, #1
 801e17a:	68e3      	ldr	r3, [r4, #12]
 801e17c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801e17e:	1a5b      	subs	r3, r3, r1
 801e180:	4543      	cmp	r3, r8
 801e182:	dcf0      	bgt.n	801e166 <_printf_float+0x42a>
 801e184:	e6fc      	b.n	801df80 <_printf_float+0x244>
 801e186:	f04f 0800 	mov.w	r8, #0
 801e18a:	f104 0919 	add.w	r9, r4, #25
 801e18e:	e7f4      	b.n	801e17a <_printf_float+0x43e>

0801e190 <_printf_common>:
 801e190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e194:	4616      	mov	r6, r2
 801e196:	4698      	mov	r8, r3
 801e198:	688a      	ldr	r2, [r1, #8]
 801e19a:	4607      	mov	r7, r0
 801e19c:	690b      	ldr	r3, [r1, #16]
 801e19e:	460c      	mov	r4, r1
 801e1a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801e1a4:	4293      	cmp	r3, r2
 801e1a6:	bfb8      	it	lt
 801e1a8:	4613      	movlt	r3, r2
 801e1aa:	6033      	str	r3, [r6, #0]
 801e1ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801e1b0:	b10a      	cbz	r2, 801e1b6 <_printf_common+0x26>
 801e1b2:	3301      	adds	r3, #1
 801e1b4:	6033      	str	r3, [r6, #0]
 801e1b6:	6823      	ldr	r3, [r4, #0]
 801e1b8:	0699      	lsls	r1, r3, #26
 801e1ba:	bf42      	ittt	mi
 801e1bc:	6833      	ldrmi	r3, [r6, #0]
 801e1be:	3302      	addmi	r3, #2
 801e1c0:	6033      	strmi	r3, [r6, #0]
 801e1c2:	6825      	ldr	r5, [r4, #0]
 801e1c4:	f015 0506 	ands.w	r5, r5, #6
 801e1c8:	d106      	bne.n	801e1d8 <_printf_common+0x48>
 801e1ca:	f104 0a19 	add.w	sl, r4, #25
 801e1ce:	68e3      	ldr	r3, [r4, #12]
 801e1d0:	6832      	ldr	r2, [r6, #0]
 801e1d2:	1a9b      	subs	r3, r3, r2
 801e1d4:	42ab      	cmp	r3, r5
 801e1d6:	dc2b      	bgt.n	801e230 <_printf_common+0xa0>
 801e1d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801e1dc:	6822      	ldr	r2, [r4, #0]
 801e1de:	3b00      	subs	r3, #0
 801e1e0:	bf18      	it	ne
 801e1e2:	2301      	movne	r3, #1
 801e1e4:	0692      	lsls	r2, r2, #26
 801e1e6:	d430      	bmi.n	801e24a <_printf_common+0xba>
 801e1e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801e1ec:	4641      	mov	r1, r8
 801e1ee:	4638      	mov	r0, r7
 801e1f0:	47c8      	blx	r9
 801e1f2:	3001      	adds	r0, #1
 801e1f4:	d023      	beq.n	801e23e <_printf_common+0xae>
 801e1f6:	6823      	ldr	r3, [r4, #0]
 801e1f8:	341a      	adds	r4, #26
 801e1fa:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 801e1fe:	f003 0306 	and.w	r3, r3, #6
 801e202:	2b04      	cmp	r3, #4
 801e204:	bf0a      	itet	eq
 801e206:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 801e20a:	2500      	movne	r5, #0
 801e20c:	6833      	ldreq	r3, [r6, #0]
 801e20e:	f04f 0600 	mov.w	r6, #0
 801e212:	bf08      	it	eq
 801e214:	1aed      	subeq	r5, r5, r3
 801e216:	f854 3c12 	ldr.w	r3, [r4, #-18]
 801e21a:	bf08      	it	eq
 801e21c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801e220:	4293      	cmp	r3, r2
 801e222:	bfc4      	itt	gt
 801e224:	1a9b      	subgt	r3, r3, r2
 801e226:	18ed      	addgt	r5, r5, r3
 801e228:	42b5      	cmp	r5, r6
 801e22a:	d11a      	bne.n	801e262 <_printf_common+0xd2>
 801e22c:	2000      	movs	r0, #0
 801e22e:	e008      	b.n	801e242 <_printf_common+0xb2>
 801e230:	2301      	movs	r3, #1
 801e232:	4652      	mov	r2, sl
 801e234:	4641      	mov	r1, r8
 801e236:	4638      	mov	r0, r7
 801e238:	47c8      	blx	r9
 801e23a:	3001      	adds	r0, #1
 801e23c:	d103      	bne.n	801e246 <_printf_common+0xb6>
 801e23e:	f04f 30ff 	mov.w	r0, #4294967295
 801e242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e246:	3501      	adds	r5, #1
 801e248:	e7c1      	b.n	801e1ce <_printf_common+0x3e>
 801e24a:	18e1      	adds	r1, r4, r3
 801e24c:	1c5a      	adds	r2, r3, #1
 801e24e:	2030      	movs	r0, #48	@ 0x30
 801e250:	3302      	adds	r3, #2
 801e252:	4422      	add	r2, r4
 801e254:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801e258:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801e25c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801e260:	e7c2      	b.n	801e1e8 <_printf_common+0x58>
 801e262:	2301      	movs	r3, #1
 801e264:	4622      	mov	r2, r4
 801e266:	4641      	mov	r1, r8
 801e268:	4638      	mov	r0, r7
 801e26a:	47c8      	blx	r9
 801e26c:	3001      	adds	r0, #1
 801e26e:	d0e6      	beq.n	801e23e <_printf_common+0xae>
 801e270:	3601      	adds	r6, #1
 801e272:	e7d9      	b.n	801e228 <_printf_common+0x98>

0801e274 <_printf_i>:
 801e274:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801e278:	7e0f      	ldrb	r7, [r1, #24]
 801e27a:	4691      	mov	r9, r2
 801e27c:	4680      	mov	r8, r0
 801e27e:	460c      	mov	r4, r1
 801e280:	2f78      	cmp	r7, #120	@ 0x78
 801e282:	469a      	mov	sl, r3
 801e284:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801e286:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801e28a:	d807      	bhi.n	801e29c <_printf_i+0x28>
 801e28c:	2f62      	cmp	r7, #98	@ 0x62
 801e28e:	d80a      	bhi.n	801e2a6 <_printf_i+0x32>
 801e290:	2f00      	cmp	r7, #0
 801e292:	f000 80d2 	beq.w	801e43a <_printf_i+0x1c6>
 801e296:	2f58      	cmp	r7, #88	@ 0x58
 801e298:	f000 80b9 	beq.w	801e40e <_printf_i+0x19a>
 801e29c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801e2a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801e2a4:	e03a      	b.n	801e31c <_printf_i+0xa8>
 801e2a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801e2aa:	2b15      	cmp	r3, #21
 801e2ac:	d8f6      	bhi.n	801e29c <_printf_i+0x28>
 801e2ae:	a101      	add	r1, pc, #4	@ (adr r1, 801e2b4 <_printf_i+0x40>)
 801e2b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801e2b4:	0801e30d 	.word	0x0801e30d
 801e2b8:	0801e321 	.word	0x0801e321
 801e2bc:	0801e29d 	.word	0x0801e29d
 801e2c0:	0801e29d 	.word	0x0801e29d
 801e2c4:	0801e29d 	.word	0x0801e29d
 801e2c8:	0801e29d 	.word	0x0801e29d
 801e2cc:	0801e321 	.word	0x0801e321
 801e2d0:	0801e29d 	.word	0x0801e29d
 801e2d4:	0801e29d 	.word	0x0801e29d
 801e2d8:	0801e29d 	.word	0x0801e29d
 801e2dc:	0801e29d 	.word	0x0801e29d
 801e2e0:	0801e421 	.word	0x0801e421
 801e2e4:	0801e34b 	.word	0x0801e34b
 801e2e8:	0801e3db 	.word	0x0801e3db
 801e2ec:	0801e29d 	.word	0x0801e29d
 801e2f0:	0801e29d 	.word	0x0801e29d
 801e2f4:	0801e443 	.word	0x0801e443
 801e2f8:	0801e29d 	.word	0x0801e29d
 801e2fc:	0801e34b 	.word	0x0801e34b
 801e300:	0801e29d 	.word	0x0801e29d
 801e304:	0801e29d 	.word	0x0801e29d
 801e308:	0801e3e3 	.word	0x0801e3e3
 801e30c:	6833      	ldr	r3, [r6, #0]
 801e30e:	1d1a      	adds	r2, r3, #4
 801e310:	681b      	ldr	r3, [r3, #0]
 801e312:	6032      	str	r2, [r6, #0]
 801e314:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801e318:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801e31c:	2301      	movs	r3, #1
 801e31e:	e09d      	b.n	801e45c <_printf_i+0x1e8>
 801e320:	6833      	ldr	r3, [r6, #0]
 801e322:	6820      	ldr	r0, [r4, #0]
 801e324:	1d19      	adds	r1, r3, #4
 801e326:	6031      	str	r1, [r6, #0]
 801e328:	0606      	lsls	r6, r0, #24
 801e32a:	d501      	bpl.n	801e330 <_printf_i+0xbc>
 801e32c:	681d      	ldr	r5, [r3, #0]
 801e32e:	e003      	b.n	801e338 <_printf_i+0xc4>
 801e330:	0645      	lsls	r5, r0, #25
 801e332:	d5fb      	bpl.n	801e32c <_printf_i+0xb8>
 801e334:	f9b3 5000 	ldrsh.w	r5, [r3]
 801e338:	2d00      	cmp	r5, #0
 801e33a:	da03      	bge.n	801e344 <_printf_i+0xd0>
 801e33c:	232d      	movs	r3, #45	@ 0x2d
 801e33e:	426d      	negs	r5, r5
 801e340:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801e344:	4859      	ldr	r0, [pc, #356]	@ (801e4ac <_printf_i+0x238>)
 801e346:	230a      	movs	r3, #10
 801e348:	e011      	b.n	801e36e <_printf_i+0xfa>
 801e34a:	6821      	ldr	r1, [r4, #0]
 801e34c:	6833      	ldr	r3, [r6, #0]
 801e34e:	0608      	lsls	r0, r1, #24
 801e350:	f853 5b04 	ldr.w	r5, [r3], #4
 801e354:	d402      	bmi.n	801e35c <_printf_i+0xe8>
 801e356:	0649      	lsls	r1, r1, #25
 801e358:	bf48      	it	mi
 801e35a:	b2ad      	uxthmi	r5, r5
 801e35c:	2f6f      	cmp	r7, #111	@ 0x6f
 801e35e:	6033      	str	r3, [r6, #0]
 801e360:	4852      	ldr	r0, [pc, #328]	@ (801e4ac <_printf_i+0x238>)
 801e362:	bf14      	ite	ne
 801e364:	230a      	movne	r3, #10
 801e366:	2308      	moveq	r3, #8
 801e368:	2100      	movs	r1, #0
 801e36a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801e36e:	6866      	ldr	r6, [r4, #4]
 801e370:	2e00      	cmp	r6, #0
 801e372:	60a6      	str	r6, [r4, #8]
 801e374:	bfa2      	ittt	ge
 801e376:	6821      	ldrge	r1, [r4, #0]
 801e378:	f021 0104 	bicge.w	r1, r1, #4
 801e37c:	6021      	strge	r1, [r4, #0]
 801e37e:	b90d      	cbnz	r5, 801e384 <_printf_i+0x110>
 801e380:	2e00      	cmp	r6, #0
 801e382:	d04b      	beq.n	801e41c <_printf_i+0x1a8>
 801e384:	4616      	mov	r6, r2
 801e386:	fbb5 f1f3 	udiv	r1, r5, r3
 801e38a:	fb03 5711 	mls	r7, r3, r1, r5
 801e38e:	5dc7      	ldrb	r7, [r0, r7]
 801e390:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801e394:	462f      	mov	r7, r5
 801e396:	460d      	mov	r5, r1
 801e398:	42bb      	cmp	r3, r7
 801e39a:	d9f4      	bls.n	801e386 <_printf_i+0x112>
 801e39c:	2b08      	cmp	r3, #8
 801e39e:	d10b      	bne.n	801e3b8 <_printf_i+0x144>
 801e3a0:	6823      	ldr	r3, [r4, #0]
 801e3a2:	07df      	lsls	r7, r3, #31
 801e3a4:	d508      	bpl.n	801e3b8 <_printf_i+0x144>
 801e3a6:	6923      	ldr	r3, [r4, #16]
 801e3a8:	6861      	ldr	r1, [r4, #4]
 801e3aa:	4299      	cmp	r1, r3
 801e3ac:	bfde      	ittt	le
 801e3ae:	2330      	movle	r3, #48	@ 0x30
 801e3b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 801e3b4:	f106 36ff 	addle.w	r6, r6, #4294967295
 801e3b8:	1b92      	subs	r2, r2, r6
 801e3ba:	6122      	str	r2, [r4, #16]
 801e3bc:	464b      	mov	r3, r9
 801e3be:	aa03      	add	r2, sp, #12
 801e3c0:	4621      	mov	r1, r4
 801e3c2:	4640      	mov	r0, r8
 801e3c4:	f8cd a000 	str.w	sl, [sp]
 801e3c8:	f7ff fee2 	bl	801e190 <_printf_common>
 801e3cc:	3001      	adds	r0, #1
 801e3ce:	d14a      	bne.n	801e466 <_printf_i+0x1f2>
 801e3d0:	f04f 30ff 	mov.w	r0, #4294967295
 801e3d4:	b004      	add	sp, #16
 801e3d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e3da:	6823      	ldr	r3, [r4, #0]
 801e3dc:	f043 0320 	orr.w	r3, r3, #32
 801e3e0:	6023      	str	r3, [r4, #0]
 801e3e2:	2778      	movs	r7, #120	@ 0x78
 801e3e4:	4832      	ldr	r0, [pc, #200]	@ (801e4b0 <_printf_i+0x23c>)
 801e3e6:	6823      	ldr	r3, [r4, #0]
 801e3e8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801e3ec:	061f      	lsls	r7, r3, #24
 801e3ee:	6831      	ldr	r1, [r6, #0]
 801e3f0:	f851 5b04 	ldr.w	r5, [r1], #4
 801e3f4:	d402      	bmi.n	801e3fc <_printf_i+0x188>
 801e3f6:	065f      	lsls	r7, r3, #25
 801e3f8:	bf48      	it	mi
 801e3fa:	b2ad      	uxthmi	r5, r5
 801e3fc:	6031      	str	r1, [r6, #0]
 801e3fe:	07d9      	lsls	r1, r3, #31
 801e400:	bf44      	itt	mi
 801e402:	f043 0320 	orrmi.w	r3, r3, #32
 801e406:	6023      	strmi	r3, [r4, #0]
 801e408:	b11d      	cbz	r5, 801e412 <_printf_i+0x19e>
 801e40a:	2310      	movs	r3, #16
 801e40c:	e7ac      	b.n	801e368 <_printf_i+0xf4>
 801e40e:	4827      	ldr	r0, [pc, #156]	@ (801e4ac <_printf_i+0x238>)
 801e410:	e7e9      	b.n	801e3e6 <_printf_i+0x172>
 801e412:	6823      	ldr	r3, [r4, #0]
 801e414:	f023 0320 	bic.w	r3, r3, #32
 801e418:	6023      	str	r3, [r4, #0]
 801e41a:	e7f6      	b.n	801e40a <_printf_i+0x196>
 801e41c:	4616      	mov	r6, r2
 801e41e:	e7bd      	b.n	801e39c <_printf_i+0x128>
 801e420:	6833      	ldr	r3, [r6, #0]
 801e422:	6825      	ldr	r5, [r4, #0]
 801e424:	1d18      	adds	r0, r3, #4
 801e426:	6961      	ldr	r1, [r4, #20]
 801e428:	6030      	str	r0, [r6, #0]
 801e42a:	062e      	lsls	r6, r5, #24
 801e42c:	681b      	ldr	r3, [r3, #0]
 801e42e:	d501      	bpl.n	801e434 <_printf_i+0x1c0>
 801e430:	6019      	str	r1, [r3, #0]
 801e432:	e002      	b.n	801e43a <_printf_i+0x1c6>
 801e434:	0668      	lsls	r0, r5, #25
 801e436:	d5fb      	bpl.n	801e430 <_printf_i+0x1bc>
 801e438:	8019      	strh	r1, [r3, #0]
 801e43a:	2300      	movs	r3, #0
 801e43c:	4616      	mov	r6, r2
 801e43e:	6123      	str	r3, [r4, #16]
 801e440:	e7bc      	b.n	801e3bc <_printf_i+0x148>
 801e442:	6833      	ldr	r3, [r6, #0]
 801e444:	2100      	movs	r1, #0
 801e446:	1d1a      	adds	r2, r3, #4
 801e448:	6032      	str	r2, [r6, #0]
 801e44a:	681e      	ldr	r6, [r3, #0]
 801e44c:	6862      	ldr	r2, [r4, #4]
 801e44e:	4630      	mov	r0, r6
 801e450:	f000 fe53 	bl	801f0fa <memchr>
 801e454:	b108      	cbz	r0, 801e45a <_printf_i+0x1e6>
 801e456:	1b80      	subs	r0, r0, r6
 801e458:	6060      	str	r0, [r4, #4]
 801e45a:	6863      	ldr	r3, [r4, #4]
 801e45c:	6123      	str	r3, [r4, #16]
 801e45e:	2300      	movs	r3, #0
 801e460:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801e464:	e7aa      	b.n	801e3bc <_printf_i+0x148>
 801e466:	6923      	ldr	r3, [r4, #16]
 801e468:	4632      	mov	r2, r6
 801e46a:	4649      	mov	r1, r9
 801e46c:	4640      	mov	r0, r8
 801e46e:	47d0      	blx	sl
 801e470:	3001      	adds	r0, #1
 801e472:	d0ad      	beq.n	801e3d0 <_printf_i+0x15c>
 801e474:	6823      	ldr	r3, [r4, #0]
 801e476:	079b      	lsls	r3, r3, #30
 801e478:	d413      	bmi.n	801e4a2 <_printf_i+0x22e>
 801e47a:	68e0      	ldr	r0, [r4, #12]
 801e47c:	9b03      	ldr	r3, [sp, #12]
 801e47e:	4298      	cmp	r0, r3
 801e480:	bfb8      	it	lt
 801e482:	4618      	movlt	r0, r3
 801e484:	e7a6      	b.n	801e3d4 <_printf_i+0x160>
 801e486:	2301      	movs	r3, #1
 801e488:	4632      	mov	r2, r6
 801e48a:	4649      	mov	r1, r9
 801e48c:	4640      	mov	r0, r8
 801e48e:	47d0      	blx	sl
 801e490:	3001      	adds	r0, #1
 801e492:	d09d      	beq.n	801e3d0 <_printf_i+0x15c>
 801e494:	3501      	adds	r5, #1
 801e496:	68e3      	ldr	r3, [r4, #12]
 801e498:	9903      	ldr	r1, [sp, #12]
 801e49a:	1a5b      	subs	r3, r3, r1
 801e49c:	42ab      	cmp	r3, r5
 801e49e:	dcf2      	bgt.n	801e486 <_printf_i+0x212>
 801e4a0:	e7eb      	b.n	801e47a <_printf_i+0x206>
 801e4a2:	2500      	movs	r5, #0
 801e4a4:	f104 0619 	add.w	r6, r4, #25
 801e4a8:	e7f5      	b.n	801e496 <_printf_i+0x222>
 801e4aa:	bf00      	nop
 801e4ac:	08024501 	.word	0x08024501
 801e4b0:	08024512 	.word	0x08024512

0801e4b4 <_scanf_float>:
 801e4b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e4b8:	b087      	sub	sp, #28
 801e4ba:	4617      	mov	r7, r2
 801e4bc:	4680      	mov	r8, r0
 801e4be:	460c      	mov	r4, r1
 801e4c0:	9303      	str	r3, [sp, #12]
 801e4c2:	688b      	ldr	r3, [r1, #8]
 801e4c4:	1e5a      	subs	r2, r3, #1
 801e4c6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801e4ca:	460a      	mov	r2, r1
 801e4cc:	bf89      	itett	hi
 801e4ce:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801e4d2:	f04f 0b00 	movls.w	fp, #0
 801e4d6:	eb03 0b05 	addhi.w	fp, r3, r5
 801e4da:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801e4de:	f04f 0500 	mov.w	r5, #0
 801e4e2:	bf88      	it	hi
 801e4e4:	608b      	strhi	r3, [r1, #8]
 801e4e6:	680b      	ldr	r3, [r1, #0]
 801e4e8:	46aa      	mov	sl, r5
 801e4ea:	46a9      	mov	r9, r5
 801e4ec:	9502      	str	r5, [sp, #8]
 801e4ee:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 801e4f2:	f842 3b1c 	str.w	r3, [r2], #28
 801e4f6:	4616      	mov	r6, r2
 801e4f8:	9201      	str	r2, [sp, #4]
 801e4fa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801e4fe:	68a2      	ldr	r2, [r4, #8]
 801e500:	b152      	cbz	r2, 801e518 <_scanf_float+0x64>
 801e502:	683b      	ldr	r3, [r7, #0]
 801e504:	781b      	ldrb	r3, [r3, #0]
 801e506:	2b4e      	cmp	r3, #78	@ 0x4e
 801e508:	d864      	bhi.n	801e5d4 <_scanf_float+0x120>
 801e50a:	2b40      	cmp	r3, #64	@ 0x40
 801e50c:	d83c      	bhi.n	801e588 <_scanf_float+0xd4>
 801e50e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 801e512:	b2c8      	uxtb	r0, r1
 801e514:	280e      	cmp	r0, #14
 801e516:	d93a      	bls.n	801e58e <_scanf_float+0xda>
 801e518:	f1b9 0f00 	cmp.w	r9, #0
 801e51c:	d003      	beq.n	801e526 <_scanf_float+0x72>
 801e51e:	6823      	ldr	r3, [r4, #0]
 801e520:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801e524:	6023      	str	r3, [r4, #0]
 801e526:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e52a:	f1ba 0f01 	cmp.w	sl, #1
 801e52e:	f200 8117 	bhi.w	801e760 <_scanf_float+0x2ac>
 801e532:	9b01      	ldr	r3, [sp, #4]
 801e534:	429e      	cmp	r6, r3
 801e536:	f200 8108 	bhi.w	801e74a <_scanf_float+0x296>
 801e53a:	2001      	movs	r0, #1
 801e53c:	b007      	add	sp, #28
 801e53e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e542:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 801e546:	2a0d      	cmp	r2, #13
 801e548:	d8e6      	bhi.n	801e518 <_scanf_float+0x64>
 801e54a:	a101      	add	r1, pc, #4	@ (adr r1, 801e550 <_scanf_float+0x9c>)
 801e54c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801e550:	0801e697 	.word	0x0801e697
 801e554:	0801e519 	.word	0x0801e519
 801e558:	0801e519 	.word	0x0801e519
 801e55c:	0801e519 	.word	0x0801e519
 801e560:	0801e6f7 	.word	0x0801e6f7
 801e564:	0801e6cf 	.word	0x0801e6cf
 801e568:	0801e519 	.word	0x0801e519
 801e56c:	0801e519 	.word	0x0801e519
 801e570:	0801e6a5 	.word	0x0801e6a5
 801e574:	0801e519 	.word	0x0801e519
 801e578:	0801e519 	.word	0x0801e519
 801e57c:	0801e519 	.word	0x0801e519
 801e580:	0801e519 	.word	0x0801e519
 801e584:	0801e65d 	.word	0x0801e65d
 801e588:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 801e58c:	e7db      	b.n	801e546 <_scanf_float+0x92>
 801e58e:	290e      	cmp	r1, #14
 801e590:	d8c2      	bhi.n	801e518 <_scanf_float+0x64>
 801e592:	a001      	add	r0, pc, #4	@ (adr r0, 801e598 <_scanf_float+0xe4>)
 801e594:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801e598:	0801e64d 	.word	0x0801e64d
 801e59c:	0801e519 	.word	0x0801e519
 801e5a0:	0801e64d 	.word	0x0801e64d
 801e5a4:	0801e6e3 	.word	0x0801e6e3
 801e5a8:	0801e519 	.word	0x0801e519
 801e5ac:	0801e5f5 	.word	0x0801e5f5
 801e5b0:	0801e633 	.word	0x0801e633
 801e5b4:	0801e633 	.word	0x0801e633
 801e5b8:	0801e633 	.word	0x0801e633
 801e5bc:	0801e633 	.word	0x0801e633
 801e5c0:	0801e633 	.word	0x0801e633
 801e5c4:	0801e633 	.word	0x0801e633
 801e5c8:	0801e633 	.word	0x0801e633
 801e5cc:	0801e633 	.word	0x0801e633
 801e5d0:	0801e633 	.word	0x0801e633
 801e5d4:	2b6e      	cmp	r3, #110	@ 0x6e
 801e5d6:	d809      	bhi.n	801e5ec <_scanf_float+0x138>
 801e5d8:	2b60      	cmp	r3, #96	@ 0x60
 801e5da:	d8b2      	bhi.n	801e542 <_scanf_float+0x8e>
 801e5dc:	2b54      	cmp	r3, #84	@ 0x54
 801e5de:	d07b      	beq.n	801e6d8 <_scanf_float+0x224>
 801e5e0:	2b59      	cmp	r3, #89	@ 0x59
 801e5e2:	d199      	bne.n	801e518 <_scanf_float+0x64>
 801e5e4:	2d07      	cmp	r5, #7
 801e5e6:	d197      	bne.n	801e518 <_scanf_float+0x64>
 801e5e8:	2508      	movs	r5, #8
 801e5ea:	e02c      	b.n	801e646 <_scanf_float+0x192>
 801e5ec:	2b74      	cmp	r3, #116	@ 0x74
 801e5ee:	d073      	beq.n	801e6d8 <_scanf_float+0x224>
 801e5f0:	2b79      	cmp	r3, #121	@ 0x79
 801e5f2:	e7f6      	b.n	801e5e2 <_scanf_float+0x12e>
 801e5f4:	6821      	ldr	r1, [r4, #0]
 801e5f6:	05c8      	lsls	r0, r1, #23
 801e5f8:	d51b      	bpl.n	801e632 <_scanf_float+0x17e>
 801e5fa:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 801e5fe:	f109 0901 	add.w	r9, r9, #1
 801e602:	6021      	str	r1, [r4, #0]
 801e604:	f1bb 0f00 	cmp.w	fp, #0
 801e608:	d003      	beq.n	801e612 <_scanf_float+0x15e>
 801e60a:	3201      	adds	r2, #1
 801e60c:	f10b 3bff 	add.w	fp, fp, #4294967295
 801e610:	60a2      	str	r2, [r4, #8]
 801e612:	68a3      	ldr	r3, [r4, #8]
 801e614:	3b01      	subs	r3, #1
 801e616:	60a3      	str	r3, [r4, #8]
 801e618:	6923      	ldr	r3, [r4, #16]
 801e61a:	3301      	adds	r3, #1
 801e61c:	6123      	str	r3, [r4, #16]
 801e61e:	687b      	ldr	r3, [r7, #4]
 801e620:	3b01      	subs	r3, #1
 801e622:	2b00      	cmp	r3, #0
 801e624:	607b      	str	r3, [r7, #4]
 801e626:	f340 8087 	ble.w	801e738 <_scanf_float+0x284>
 801e62a:	683b      	ldr	r3, [r7, #0]
 801e62c:	3301      	adds	r3, #1
 801e62e:	603b      	str	r3, [r7, #0]
 801e630:	e765      	b.n	801e4fe <_scanf_float+0x4a>
 801e632:	eb1a 0105 	adds.w	r1, sl, r5
 801e636:	f47f af6f 	bne.w	801e518 <_scanf_float+0x64>
 801e63a:	6822      	ldr	r2, [r4, #0]
 801e63c:	460d      	mov	r5, r1
 801e63e:	468a      	mov	sl, r1
 801e640:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 801e644:	6022      	str	r2, [r4, #0]
 801e646:	f806 3b01 	strb.w	r3, [r6], #1
 801e64a:	e7e2      	b.n	801e612 <_scanf_float+0x15e>
 801e64c:	6822      	ldr	r2, [r4, #0]
 801e64e:	0610      	lsls	r0, r2, #24
 801e650:	f57f af62 	bpl.w	801e518 <_scanf_float+0x64>
 801e654:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801e658:	6022      	str	r2, [r4, #0]
 801e65a:	e7f4      	b.n	801e646 <_scanf_float+0x192>
 801e65c:	f1ba 0f00 	cmp.w	sl, #0
 801e660:	d10e      	bne.n	801e680 <_scanf_float+0x1cc>
 801e662:	f1b9 0f00 	cmp.w	r9, #0
 801e666:	d10e      	bne.n	801e686 <_scanf_float+0x1d2>
 801e668:	6822      	ldr	r2, [r4, #0]
 801e66a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801e66e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801e672:	d108      	bne.n	801e686 <_scanf_float+0x1d2>
 801e674:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801e678:	f04f 0a01 	mov.w	sl, #1
 801e67c:	6022      	str	r2, [r4, #0]
 801e67e:	e7e2      	b.n	801e646 <_scanf_float+0x192>
 801e680:	f1ba 0f02 	cmp.w	sl, #2
 801e684:	d055      	beq.n	801e732 <_scanf_float+0x27e>
 801e686:	2d01      	cmp	r5, #1
 801e688:	d002      	beq.n	801e690 <_scanf_float+0x1dc>
 801e68a:	2d04      	cmp	r5, #4
 801e68c:	f47f af44 	bne.w	801e518 <_scanf_float+0x64>
 801e690:	3501      	adds	r5, #1
 801e692:	b2ed      	uxtb	r5, r5
 801e694:	e7d7      	b.n	801e646 <_scanf_float+0x192>
 801e696:	f1ba 0f01 	cmp.w	sl, #1
 801e69a:	f47f af3d 	bne.w	801e518 <_scanf_float+0x64>
 801e69e:	f04f 0a02 	mov.w	sl, #2
 801e6a2:	e7d0      	b.n	801e646 <_scanf_float+0x192>
 801e6a4:	b97d      	cbnz	r5, 801e6c6 <_scanf_float+0x212>
 801e6a6:	f1b9 0f00 	cmp.w	r9, #0
 801e6aa:	f47f af38 	bne.w	801e51e <_scanf_float+0x6a>
 801e6ae:	6822      	ldr	r2, [r4, #0]
 801e6b0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801e6b4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801e6b8:	f040 8107 	bne.w	801e8ca <_scanf_float+0x416>
 801e6bc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801e6c0:	2501      	movs	r5, #1
 801e6c2:	6022      	str	r2, [r4, #0]
 801e6c4:	e7bf      	b.n	801e646 <_scanf_float+0x192>
 801e6c6:	2d03      	cmp	r5, #3
 801e6c8:	d0e2      	beq.n	801e690 <_scanf_float+0x1dc>
 801e6ca:	2d05      	cmp	r5, #5
 801e6cc:	e7de      	b.n	801e68c <_scanf_float+0x1d8>
 801e6ce:	2d02      	cmp	r5, #2
 801e6d0:	f47f af22 	bne.w	801e518 <_scanf_float+0x64>
 801e6d4:	2503      	movs	r5, #3
 801e6d6:	e7b6      	b.n	801e646 <_scanf_float+0x192>
 801e6d8:	2d06      	cmp	r5, #6
 801e6da:	f47f af1d 	bne.w	801e518 <_scanf_float+0x64>
 801e6de:	2507      	movs	r5, #7
 801e6e0:	e7b1      	b.n	801e646 <_scanf_float+0x192>
 801e6e2:	6822      	ldr	r2, [r4, #0]
 801e6e4:	0591      	lsls	r1, r2, #22
 801e6e6:	f57f af17 	bpl.w	801e518 <_scanf_float+0x64>
 801e6ea:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 801e6ee:	f8cd 9008 	str.w	r9, [sp, #8]
 801e6f2:	6022      	str	r2, [r4, #0]
 801e6f4:	e7a7      	b.n	801e646 <_scanf_float+0x192>
 801e6f6:	6822      	ldr	r2, [r4, #0]
 801e6f8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 801e6fc:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801e700:	d006      	beq.n	801e710 <_scanf_float+0x25c>
 801e702:	0550      	lsls	r0, r2, #21
 801e704:	f57f af08 	bpl.w	801e518 <_scanf_float+0x64>
 801e708:	f1b9 0f00 	cmp.w	r9, #0
 801e70c:	f000 80dd 	beq.w	801e8ca <_scanf_float+0x416>
 801e710:	0591      	lsls	r1, r2, #22
 801e712:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801e716:	bf58      	it	pl
 801e718:	9902      	ldrpl	r1, [sp, #8]
 801e71a:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 801e71e:	bf58      	it	pl
 801e720:	eba9 0101 	subpl.w	r1, r9, r1
 801e724:	6022      	str	r2, [r4, #0]
 801e726:	f04f 0900 	mov.w	r9, #0
 801e72a:	bf58      	it	pl
 801e72c:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801e730:	e789      	b.n	801e646 <_scanf_float+0x192>
 801e732:	f04f 0a03 	mov.w	sl, #3
 801e736:	e786      	b.n	801e646 <_scanf_float+0x192>
 801e738:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801e73c:	4639      	mov	r1, r7
 801e73e:	4640      	mov	r0, r8
 801e740:	4798      	blx	r3
 801e742:	2800      	cmp	r0, #0
 801e744:	f43f aedb 	beq.w	801e4fe <_scanf_float+0x4a>
 801e748:	e6e6      	b.n	801e518 <_scanf_float+0x64>
 801e74a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801e74e:	463a      	mov	r2, r7
 801e750:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801e754:	4640      	mov	r0, r8
 801e756:	4798      	blx	r3
 801e758:	6923      	ldr	r3, [r4, #16]
 801e75a:	3b01      	subs	r3, #1
 801e75c:	6123      	str	r3, [r4, #16]
 801e75e:	e6e8      	b.n	801e532 <_scanf_float+0x7e>
 801e760:	1e6b      	subs	r3, r5, #1
 801e762:	2b06      	cmp	r3, #6
 801e764:	d824      	bhi.n	801e7b0 <_scanf_float+0x2fc>
 801e766:	2d02      	cmp	r5, #2
 801e768:	d836      	bhi.n	801e7d8 <_scanf_float+0x324>
 801e76a:	9b01      	ldr	r3, [sp, #4]
 801e76c:	429e      	cmp	r6, r3
 801e76e:	f67f aee4 	bls.w	801e53a <_scanf_float+0x86>
 801e772:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801e776:	463a      	mov	r2, r7
 801e778:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801e77c:	4640      	mov	r0, r8
 801e77e:	4798      	blx	r3
 801e780:	6923      	ldr	r3, [r4, #16]
 801e782:	3b01      	subs	r3, #1
 801e784:	6123      	str	r3, [r4, #16]
 801e786:	e7f0      	b.n	801e76a <_scanf_float+0x2b6>
 801e788:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801e78c:	463a      	mov	r2, r7
 801e78e:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 801e792:	4640      	mov	r0, r8
 801e794:	4798      	blx	r3
 801e796:	6923      	ldr	r3, [r4, #16]
 801e798:	3b01      	subs	r3, #1
 801e79a:	6123      	str	r3, [r4, #16]
 801e79c:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e7a0:	fa5f fa8a 	uxtb.w	sl, sl
 801e7a4:	f1ba 0f02 	cmp.w	sl, #2
 801e7a8:	d1ee      	bne.n	801e788 <_scanf_float+0x2d4>
 801e7aa:	3d03      	subs	r5, #3
 801e7ac:	b2ed      	uxtb	r5, r5
 801e7ae:	1b76      	subs	r6, r6, r5
 801e7b0:	6823      	ldr	r3, [r4, #0]
 801e7b2:	05da      	lsls	r2, r3, #23
 801e7b4:	d52f      	bpl.n	801e816 <_scanf_float+0x362>
 801e7b6:	055b      	lsls	r3, r3, #21
 801e7b8:	d511      	bpl.n	801e7de <_scanf_float+0x32a>
 801e7ba:	9b01      	ldr	r3, [sp, #4]
 801e7bc:	429e      	cmp	r6, r3
 801e7be:	f67f aebc 	bls.w	801e53a <_scanf_float+0x86>
 801e7c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801e7c6:	463a      	mov	r2, r7
 801e7c8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801e7cc:	4640      	mov	r0, r8
 801e7ce:	4798      	blx	r3
 801e7d0:	6923      	ldr	r3, [r4, #16]
 801e7d2:	3b01      	subs	r3, #1
 801e7d4:	6123      	str	r3, [r4, #16]
 801e7d6:	e7f0      	b.n	801e7ba <_scanf_float+0x306>
 801e7d8:	46aa      	mov	sl, r5
 801e7da:	46b3      	mov	fp, r6
 801e7dc:	e7de      	b.n	801e79c <_scanf_float+0x2e8>
 801e7de:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801e7e2:	1e75      	subs	r5, r6, #1
 801e7e4:	6923      	ldr	r3, [r4, #16]
 801e7e6:	2965      	cmp	r1, #101	@ 0x65
 801e7e8:	f103 33ff 	add.w	r3, r3, #4294967295
 801e7ec:	6123      	str	r3, [r4, #16]
 801e7ee:	d00c      	beq.n	801e80a <_scanf_float+0x356>
 801e7f0:	2945      	cmp	r1, #69	@ 0x45
 801e7f2:	d00a      	beq.n	801e80a <_scanf_float+0x356>
 801e7f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801e7f8:	463a      	mov	r2, r7
 801e7fa:	4640      	mov	r0, r8
 801e7fc:	1eb5      	subs	r5, r6, #2
 801e7fe:	4798      	blx	r3
 801e800:	6923      	ldr	r3, [r4, #16]
 801e802:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801e806:	3b01      	subs	r3, #1
 801e808:	6123      	str	r3, [r4, #16]
 801e80a:	462e      	mov	r6, r5
 801e80c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801e810:	463a      	mov	r2, r7
 801e812:	4640      	mov	r0, r8
 801e814:	4798      	blx	r3
 801e816:	6822      	ldr	r2, [r4, #0]
 801e818:	f012 0210 	ands.w	r2, r2, #16
 801e81c:	d001      	beq.n	801e822 <_scanf_float+0x36e>
 801e81e:	2000      	movs	r0, #0
 801e820:	e68c      	b.n	801e53c <_scanf_float+0x88>
 801e822:	7032      	strb	r2, [r6, #0]
 801e824:	6823      	ldr	r3, [r4, #0]
 801e826:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 801e82a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801e82e:	d11c      	bne.n	801e86a <_scanf_float+0x3b6>
 801e830:	9b02      	ldr	r3, [sp, #8]
 801e832:	454b      	cmp	r3, r9
 801e834:	eba3 0209 	sub.w	r2, r3, r9
 801e838:	d123      	bne.n	801e882 <_scanf_float+0x3ce>
 801e83a:	2200      	movs	r2, #0
 801e83c:	9901      	ldr	r1, [sp, #4]
 801e83e:	4640      	mov	r0, r8
 801e840:	f7ff f946 	bl	801dad0 <_strtod_r>
 801e844:	6821      	ldr	r1, [r4, #0]
 801e846:	9b03      	ldr	r3, [sp, #12]
 801e848:	f011 0f02 	tst.w	r1, #2
 801e84c:	681b      	ldr	r3, [r3, #0]
 801e84e:	ec57 6b10 	vmov	r6, r7, d0
 801e852:	f103 0204 	add.w	r2, r3, #4
 801e856:	d01f      	beq.n	801e898 <_scanf_float+0x3e4>
 801e858:	9903      	ldr	r1, [sp, #12]
 801e85a:	600a      	str	r2, [r1, #0]
 801e85c:	681b      	ldr	r3, [r3, #0]
 801e85e:	e9c3 6700 	strd	r6, r7, [r3]
 801e862:	68e3      	ldr	r3, [r4, #12]
 801e864:	3301      	adds	r3, #1
 801e866:	60e3      	str	r3, [r4, #12]
 801e868:	e7d9      	b.n	801e81e <_scanf_float+0x36a>
 801e86a:	9b04      	ldr	r3, [sp, #16]
 801e86c:	2b00      	cmp	r3, #0
 801e86e:	d0e4      	beq.n	801e83a <_scanf_float+0x386>
 801e870:	9905      	ldr	r1, [sp, #20]
 801e872:	230a      	movs	r3, #10
 801e874:	4640      	mov	r0, r8
 801e876:	3101      	adds	r1, #1
 801e878:	f7ff f9b6 	bl	801dbe8 <_strtol_r>
 801e87c:	9b04      	ldr	r3, [sp, #16]
 801e87e:	9e05      	ldr	r6, [sp, #20]
 801e880:	1ac2      	subs	r2, r0, r3
 801e882:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 801e886:	4912      	ldr	r1, [pc, #72]	@ (801e8d0 <_scanf_float+0x41c>)
 801e888:	429e      	cmp	r6, r3
 801e88a:	bf28      	it	cs
 801e88c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 801e890:	4630      	mov	r0, r6
 801e892:	f000 f971 	bl	801eb78 <siprintf>
 801e896:	e7d0      	b.n	801e83a <_scanf_float+0x386>
 801e898:	f011 0f04 	tst.w	r1, #4
 801e89c:	9903      	ldr	r1, [sp, #12]
 801e89e:	600a      	str	r2, [r1, #0]
 801e8a0:	d1dc      	bne.n	801e85c <_scanf_float+0x3a8>
 801e8a2:	681d      	ldr	r5, [r3, #0]
 801e8a4:	4632      	mov	r2, r6
 801e8a6:	463b      	mov	r3, r7
 801e8a8:	4630      	mov	r0, r6
 801e8aa:	4639      	mov	r1, r7
 801e8ac:	f7e2 f958 	bl	8000b60 <__aeabi_dcmpun>
 801e8b0:	b128      	cbz	r0, 801e8be <_scanf_float+0x40a>
 801e8b2:	4808      	ldr	r0, [pc, #32]	@ (801e8d4 <_scanf_float+0x420>)
 801e8b4:	f000 fc44 	bl	801f140 <nanf>
 801e8b8:	ed85 0a00 	vstr	s0, [r5]
 801e8bc:	e7d1      	b.n	801e862 <_scanf_float+0x3ae>
 801e8be:	4630      	mov	r0, r6
 801e8c0:	4639      	mov	r1, r7
 801e8c2:	f7e2 f9ab 	bl	8000c1c <__aeabi_d2f>
 801e8c6:	6028      	str	r0, [r5, #0]
 801e8c8:	e7cb      	b.n	801e862 <_scanf_float+0x3ae>
 801e8ca:	f04f 0900 	mov.w	r9, #0
 801e8ce:	e62a      	b.n	801e526 <_scanf_float+0x72>
 801e8d0:	08024523 	.word	0x08024523
 801e8d4:	080245dc 	.word	0x080245dc

0801e8d8 <std>:
 801e8d8:	2300      	movs	r3, #0
 801e8da:	b510      	push	{r4, lr}
 801e8dc:	4604      	mov	r4, r0
 801e8de:	6083      	str	r3, [r0, #8]
 801e8e0:	8181      	strh	r1, [r0, #12]
 801e8e2:	4619      	mov	r1, r3
 801e8e4:	6643      	str	r3, [r0, #100]	@ 0x64
 801e8e6:	81c2      	strh	r2, [r0, #14]
 801e8e8:	2208      	movs	r2, #8
 801e8ea:	6183      	str	r3, [r0, #24]
 801e8ec:	e9c0 3300 	strd	r3, r3, [r0]
 801e8f0:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801e8f4:	305c      	adds	r0, #92	@ 0x5c
 801e8f6:	f000 fa9b 	bl	801ee30 <memset>
 801e8fa:	4b0d      	ldr	r3, [pc, #52]	@ (801e930 <std+0x58>)
 801e8fc:	6224      	str	r4, [r4, #32]
 801e8fe:	6263      	str	r3, [r4, #36]	@ 0x24
 801e900:	4b0c      	ldr	r3, [pc, #48]	@ (801e934 <std+0x5c>)
 801e902:	62a3      	str	r3, [r4, #40]	@ 0x28
 801e904:	4b0c      	ldr	r3, [pc, #48]	@ (801e938 <std+0x60>)
 801e906:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801e908:	4b0c      	ldr	r3, [pc, #48]	@ (801e93c <std+0x64>)
 801e90a:	6323      	str	r3, [r4, #48]	@ 0x30
 801e90c:	4b0c      	ldr	r3, [pc, #48]	@ (801e940 <std+0x68>)
 801e90e:	429c      	cmp	r4, r3
 801e910:	d006      	beq.n	801e920 <std+0x48>
 801e912:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801e916:	4294      	cmp	r4, r2
 801e918:	d002      	beq.n	801e920 <std+0x48>
 801e91a:	33d0      	adds	r3, #208	@ 0xd0
 801e91c:	429c      	cmp	r4, r3
 801e91e:	d105      	bne.n	801e92c <std+0x54>
 801e920:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801e924:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e928:	f000 bbdc 	b.w	801f0e4 <__retarget_lock_init_recursive>
 801e92c:	bd10      	pop	{r4, pc}
 801e92e:	bf00      	nop
 801e930:	0801ec0d 	.word	0x0801ec0d
 801e934:	0801ec33 	.word	0x0801ec33
 801e938:	0801ec6b 	.word	0x0801ec6b
 801e93c:	0801ec8f 	.word	0x0801ec8f
 801e940:	20015698 	.word	0x20015698

0801e944 <stdio_exit_handler>:
 801e944:	4a02      	ldr	r2, [pc, #8]	@ (801e950 <stdio_exit_handler+0xc>)
 801e946:	4903      	ldr	r1, [pc, #12]	@ (801e954 <stdio_exit_handler+0x10>)
 801e948:	4803      	ldr	r0, [pc, #12]	@ (801e958 <stdio_exit_handler+0x14>)
 801e94a:	f000 b869 	b.w	801ea20 <_fwalk_sglue>
 801e94e:	bf00      	nop
 801e950:	200000ac 	.word	0x200000ac
 801e954:	08021b51 	.word	0x08021b51
 801e958:	20000228 	.word	0x20000228

0801e95c <cleanup_stdio>:
 801e95c:	6841      	ldr	r1, [r0, #4]
 801e95e:	4b0c      	ldr	r3, [pc, #48]	@ (801e990 <cleanup_stdio+0x34>)
 801e960:	4299      	cmp	r1, r3
 801e962:	b510      	push	{r4, lr}
 801e964:	4604      	mov	r4, r0
 801e966:	d001      	beq.n	801e96c <cleanup_stdio+0x10>
 801e968:	f003 f8f2 	bl	8021b50 <_fflush_r>
 801e96c:	68a1      	ldr	r1, [r4, #8]
 801e96e:	4b09      	ldr	r3, [pc, #36]	@ (801e994 <cleanup_stdio+0x38>)
 801e970:	4299      	cmp	r1, r3
 801e972:	d002      	beq.n	801e97a <cleanup_stdio+0x1e>
 801e974:	4620      	mov	r0, r4
 801e976:	f003 f8eb 	bl	8021b50 <_fflush_r>
 801e97a:	68e1      	ldr	r1, [r4, #12]
 801e97c:	4b06      	ldr	r3, [pc, #24]	@ (801e998 <cleanup_stdio+0x3c>)
 801e97e:	4299      	cmp	r1, r3
 801e980:	d004      	beq.n	801e98c <cleanup_stdio+0x30>
 801e982:	4620      	mov	r0, r4
 801e984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e988:	f003 b8e2 	b.w	8021b50 <_fflush_r>
 801e98c:	bd10      	pop	{r4, pc}
 801e98e:	bf00      	nop
 801e990:	20015698 	.word	0x20015698
 801e994:	20015700 	.word	0x20015700
 801e998:	20015768 	.word	0x20015768

0801e99c <global_stdio_init.part.0>:
 801e99c:	b510      	push	{r4, lr}
 801e99e:	4b0b      	ldr	r3, [pc, #44]	@ (801e9cc <global_stdio_init.part.0+0x30>)
 801e9a0:	2104      	movs	r1, #4
 801e9a2:	4c0b      	ldr	r4, [pc, #44]	@ (801e9d0 <global_stdio_init.part.0+0x34>)
 801e9a4:	4a0b      	ldr	r2, [pc, #44]	@ (801e9d4 <global_stdio_init.part.0+0x38>)
 801e9a6:	4620      	mov	r0, r4
 801e9a8:	601a      	str	r2, [r3, #0]
 801e9aa:	2200      	movs	r2, #0
 801e9ac:	f7ff ff94 	bl	801e8d8 <std>
 801e9b0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801e9b4:	2201      	movs	r2, #1
 801e9b6:	2109      	movs	r1, #9
 801e9b8:	f7ff ff8e 	bl	801e8d8 <std>
 801e9bc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801e9c0:	2202      	movs	r2, #2
 801e9c2:	2112      	movs	r1, #18
 801e9c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e9c8:	f7ff bf86 	b.w	801e8d8 <std>
 801e9cc:	200157d0 	.word	0x200157d0
 801e9d0:	20015698 	.word	0x20015698
 801e9d4:	0801e945 	.word	0x0801e945

0801e9d8 <__sfp_lock_acquire>:
 801e9d8:	4801      	ldr	r0, [pc, #4]	@ (801e9e0 <__sfp_lock_acquire+0x8>)
 801e9da:	f000 bb84 	b.w	801f0e6 <__retarget_lock_acquire_recursive>
 801e9de:	bf00      	nop
 801e9e0:	200157d9 	.word	0x200157d9

0801e9e4 <__sfp_lock_release>:
 801e9e4:	4801      	ldr	r0, [pc, #4]	@ (801e9ec <__sfp_lock_release+0x8>)
 801e9e6:	f000 bb7f 	b.w	801f0e8 <__retarget_lock_release_recursive>
 801e9ea:	bf00      	nop
 801e9ec:	200157d9 	.word	0x200157d9

0801e9f0 <__sinit>:
 801e9f0:	b510      	push	{r4, lr}
 801e9f2:	4604      	mov	r4, r0
 801e9f4:	f7ff fff0 	bl	801e9d8 <__sfp_lock_acquire>
 801e9f8:	6a23      	ldr	r3, [r4, #32]
 801e9fa:	b11b      	cbz	r3, 801ea04 <__sinit+0x14>
 801e9fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ea00:	f7ff bff0 	b.w	801e9e4 <__sfp_lock_release>
 801ea04:	4b04      	ldr	r3, [pc, #16]	@ (801ea18 <__sinit+0x28>)
 801ea06:	6223      	str	r3, [r4, #32]
 801ea08:	4b04      	ldr	r3, [pc, #16]	@ (801ea1c <__sinit+0x2c>)
 801ea0a:	681b      	ldr	r3, [r3, #0]
 801ea0c:	2b00      	cmp	r3, #0
 801ea0e:	d1f5      	bne.n	801e9fc <__sinit+0xc>
 801ea10:	f7ff ffc4 	bl	801e99c <global_stdio_init.part.0>
 801ea14:	e7f2      	b.n	801e9fc <__sinit+0xc>
 801ea16:	bf00      	nop
 801ea18:	0801e95d 	.word	0x0801e95d
 801ea1c:	200157d0 	.word	0x200157d0

0801ea20 <_fwalk_sglue>:
 801ea20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ea24:	4607      	mov	r7, r0
 801ea26:	4688      	mov	r8, r1
 801ea28:	4614      	mov	r4, r2
 801ea2a:	2600      	movs	r6, #0
 801ea2c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801ea30:	f1b9 0901 	subs.w	r9, r9, #1
 801ea34:	d505      	bpl.n	801ea42 <_fwalk_sglue+0x22>
 801ea36:	6824      	ldr	r4, [r4, #0]
 801ea38:	2c00      	cmp	r4, #0
 801ea3a:	d1f7      	bne.n	801ea2c <_fwalk_sglue+0xc>
 801ea3c:	4630      	mov	r0, r6
 801ea3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ea42:	89ab      	ldrh	r3, [r5, #12]
 801ea44:	2b01      	cmp	r3, #1
 801ea46:	d907      	bls.n	801ea58 <_fwalk_sglue+0x38>
 801ea48:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801ea4c:	3301      	adds	r3, #1
 801ea4e:	d003      	beq.n	801ea58 <_fwalk_sglue+0x38>
 801ea50:	4629      	mov	r1, r5
 801ea52:	4638      	mov	r0, r7
 801ea54:	47c0      	blx	r8
 801ea56:	4306      	orrs	r6, r0
 801ea58:	3568      	adds	r5, #104	@ 0x68
 801ea5a:	e7e9      	b.n	801ea30 <_fwalk_sglue+0x10>

0801ea5c <_fwrite_r>:
 801ea5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ea60:	9c08      	ldr	r4, [sp, #32]
 801ea62:	468a      	mov	sl, r1
 801ea64:	4690      	mov	r8, r2
 801ea66:	fb02 f903 	mul.w	r9, r2, r3
 801ea6a:	4606      	mov	r6, r0
 801ea6c:	b118      	cbz	r0, 801ea76 <_fwrite_r+0x1a>
 801ea6e:	6a03      	ldr	r3, [r0, #32]
 801ea70:	b90b      	cbnz	r3, 801ea76 <_fwrite_r+0x1a>
 801ea72:	f7ff ffbd 	bl	801e9f0 <__sinit>
 801ea76:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801ea78:	07dd      	lsls	r5, r3, #31
 801ea7a:	d405      	bmi.n	801ea88 <_fwrite_r+0x2c>
 801ea7c:	89a3      	ldrh	r3, [r4, #12]
 801ea7e:	0598      	lsls	r0, r3, #22
 801ea80:	d402      	bmi.n	801ea88 <_fwrite_r+0x2c>
 801ea82:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ea84:	f000 fb2f 	bl	801f0e6 <__retarget_lock_acquire_recursive>
 801ea88:	89a3      	ldrh	r3, [r4, #12]
 801ea8a:	0719      	lsls	r1, r3, #28
 801ea8c:	d516      	bpl.n	801eabc <_fwrite_r+0x60>
 801ea8e:	6923      	ldr	r3, [r4, #16]
 801ea90:	b1a3      	cbz	r3, 801eabc <_fwrite_r+0x60>
 801ea92:	2500      	movs	r5, #0
 801ea94:	454d      	cmp	r5, r9
 801ea96:	d01f      	beq.n	801ead8 <_fwrite_r+0x7c>
 801ea98:	68a7      	ldr	r7, [r4, #8]
 801ea9a:	f81a 1005 	ldrb.w	r1, [sl, r5]
 801ea9e:	3f01      	subs	r7, #1
 801eaa0:	2f00      	cmp	r7, #0
 801eaa2:	60a7      	str	r7, [r4, #8]
 801eaa4:	da04      	bge.n	801eab0 <_fwrite_r+0x54>
 801eaa6:	69a3      	ldr	r3, [r4, #24]
 801eaa8:	429f      	cmp	r7, r3
 801eaaa:	db0f      	blt.n	801eacc <_fwrite_r+0x70>
 801eaac:	290a      	cmp	r1, #10
 801eaae:	d00d      	beq.n	801eacc <_fwrite_r+0x70>
 801eab0:	6823      	ldr	r3, [r4, #0]
 801eab2:	1c5a      	adds	r2, r3, #1
 801eab4:	6022      	str	r2, [r4, #0]
 801eab6:	7019      	strb	r1, [r3, #0]
 801eab8:	3501      	adds	r5, #1
 801eaba:	e7eb      	b.n	801ea94 <_fwrite_r+0x38>
 801eabc:	4621      	mov	r1, r4
 801eabe:	4630      	mov	r0, r6
 801eac0:	f000 f960 	bl	801ed84 <__swsetup_r>
 801eac4:	2800      	cmp	r0, #0
 801eac6:	d0e4      	beq.n	801ea92 <_fwrite_r+0x36>
 801eac8:	2500      	movs	r5, #0
 801eaca:	e005      	b.n	801ead8 <_fwrite_r+0x7c>
 801eacc:	4622      	mov	r2, r4
 801eace:	4630      	mov	r0, r6
 801ead0:	f000 f91a 	bl	801ed08 <__swbuf_r>
 801ead4:	3001      	adds	r0, #1
 801ead6:	d1ef      	bne.n	801eab8 <_fwrite_r+0x5c>
 801ead8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801eada:	07da      	lsls	r2, r3, #31
 801eadc:	d405      	bmi.n	801eaea <_fwrite_r+0x8e>
 801eade:	89a3      	ldrh	r3, [r4, #12]
 801eae0:	059b      	lsls	r3, r3, #22
 801eae2:	d402      	bmi.n	801eaea <_fwrite_r+0x8e>
 801eae4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801eae6:	f000 faff 	bl	801f0e8 <__retarget_lock_release_recursive>
 801eaea:	fbb5 f0f8 	udiv	r0, r5, r8
 801eaee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801eaf4 <fwrite>:
 801eaf4:	b507      	push	{r0, r1, r2, lr}
 801eaf6:	9300      	str	r3, [sp, #0]
 801eaf8:	4613      	mov	r3, r2
 801eafa:	460a      	mov	r2, r1
 801eafc:	4601      	mov	r1, r0
 801eafe:	4803      	ldr	r0, [pc, #12]	@ (801eb0c <fwrite+0x18>)
 801eb00:	6800      	ldr	r0, [r0, #0]
 801eb02:	f7ff ffab 	bl	801ea5c <_fwrite_r>
 801eb06:	b003      	add	sp, #12
 801eb08:	f85d fb04 	ldr.w	pc, [sp], #4
 801eb0c:	20000224 	.word	0x20000224

0801eb10 <sniprintf>:
 801eb10:	b40c      	push	{r2, r3}
 801eb12:	4b18      	ldr	r3, [pc, #96]	@ (801eb74 <sniprintf+0x64>)
 801eb14:	b530      	push	{r4, r5, lr}
 801eb16:	1e0c      	subs	r4, r1, #0
 801eb18:	b09d      	sub	sp, #116	@ 0x74
 801eb1a:	681d      	ldr	r5, [r3, #0]
 801eb1c:	da08      	bge.n	801eb30 <sniprintf+0x20>
 801eb1e:	238b      	movs	r3, #139	@ 0x8b
 801eb20:	f04f 30ff 	mov.w	r0, #4294967295
 801eb24:	602b      	str	r3, [r5, #0]
 801eb26:	b01d      	add	sp, #116	@ 0x74
 801eb28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801eb2c:	b002      	add	sp, #8
 801eb2e:	4770      	bx	lr
 801eb30:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801eb34:	9002      	str	r0, [sp, #8]
 801eb36:	9006      	str	r0, [sp, #24]
 801eb38:	a902      	add	r1, sp, #8
 801eb3a:	f8ad 3014 	strh.w	r3, [sp, #20]
 801eb3e:	bf14      	ite	ne
 801eb40:	f104 33ff 	addne.w	r3, r4, #4294967295
 801eb44:	4623      	moveq	r3, r4
 801eb46:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801eb48:	4628      	mov	r0, r5
 801eb4a:	9304      	str	r3, [sp, #16]
 801eb4c:	9307      	str	r3, [sp, #28]
 801eb4e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801eb52:	f8ad 3016 	strh.w	r3, [sp, #22]
 801eb56:	ab21      	add	r3, sp, #132	@ 0x84
 801eb58:	9301      	str	r3, [sp, #4]
 801eb5a:	f002 fa1f 	bl	8020f9c <_svfiprintf_r>
 801eb5e:	1c43      	adds	r3, r0, #1
 801eb60:	bfbc      	itt	lt
 801eb62:	238b      	movlt	r3, #139	@ 0x8b
 801eb64:	602b      	strlt	r3, [r5, #0]
 801eb66:	2c00      	cmp	r4, #0
 801eb68:	d0dd      	beq.n	801eb26 <sniprintf+0x16>
 801eb6a:	9b02      	ldr	r3, [sp, #8]
 801eb6c:	2200      	movs	r2, #0
 801eb6e:	701a      	strb	r2, [r3, #0]
 801eb70:	e7d9      	b.n	801eb26 <sniprintf+0x16>
 801eb72:	bf00      	nop
 801eb74:	20000224 	.word	0x20000224

0801eb78 <siprintf>:
 801eb78:	b40e      	push	{r1, r2, r3}
 801eb7a:	b500      	push	{lr}
 801eb7c:	b09c      	sub	sp, #112	@ 0x70
 801eb7e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801eb82:	ab1d      	add	r3, sp, #116	@ 0x74
 801eb84:	9002      	str	r0, [sp, #8]
 801eb86:	9006      	str	r0, [sp, #24]
 801eb88:	9107      	str	r1, [sp, #28]
 801eb8a:	9104      	str	r1, [sp, #16]
 801eb8c:	4808      	ldr	r0, [pc, #32]	@ (801ebb0 <siprintf+0x38>)
 801eb8e:	4909      	ldr	r1, [pc, #36]	@ (801ebb4 <siprintf+0x3c>)
 801eb90:	f853 2b04 	ldr.w	r2, [r3], #4
 801eb94:	9105      	str	r1, [sp, #20]
 801eb96:	a902      	add	r1, sp, #8
 801eb98:	6800      	ldr	r0, [r0, #0]
 801eb9a:	9301      	str	r3, [sp, #4]
 801eb9c:	f002 f9fe 	bl	8020f9c <_svfiprintf_r>
 801eba0:	9b02      	ldr	r3, [sp, #8]
 801eba2:	2200      	movs	r2, #0
 801eba4:	701a      	strb	r2, [r3, #0]
 801eba6:	b01c      	add	sp, #112	@ 0x70
 801eba8:	f85d eb04 	ldr.w	lr, [sp], #4
 801ebac:	b003      	add	sp, #12
 801ebae:	4770      	bx	lr
 801ebb0:	20000224 	.word	0x20000224
 801ebb4:	ffff0208 	.word	0xffff0208

0801ebb8 <siscanf>:
 801ebb8:	b40e      	push	{r1, r2, r3}
 801ebba:	b530      	push	{r4, r5, lr}
 801ebbc:	b09c      	sub	sp, #112	@ 0x70
 801ebbe:	f44f 7201 	mov.w	r2, #516	@ 0x204
 801ebc2:	ac1f      	add	r4, sp, #124	@ 0x7c
 801ebc4:	f8ad 2014 	strh.w	r2, [sp, #20]
 801ebc8:	9002      	str	r0, [sp, #8]
 801ebca:	f854 5b04 	ldr.w	r5, [r4], #4
 801ebce:	9006      	str	r0, [sp, #24]
 801ebd0:	f7e1 fb68 	bl	80002a4 <strlen>
 801ebd4:	4b0b      	ldr	r3, [pc, #44]	@ (801ec04 <siscanf+0x4c>)
 801ebd6:	462a      	mov	r2, r5
 801ebd8:	9003      	str	r0, [sp, #12]
 801ebda:	a902      	add	r1, sp, #8
 801ebdc:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ebde:	2300      	movs	r3, #0
 801ebe0:	9007      	str	r0, [sp, #28]
 801ebe2:	930f      	str	r3, [sp, #60]	@ 0x3c
 801ebe4:	9314      	str	r3, [sp, #80]	@ 0x50
 801ebe6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801ebea:	4807      	ldr	r0, [pc, #28]	@ (801ec08 <siscanf+0x50>)
 801ebec:	f8ad 3016 	strh.w	r3, [sp, #22]
 801ebf0:	4623      	mov	r3, r4
 801ebf2:	6800      	ldr	r0, [r0, #0]
 801ebf4:	9401      	str	r4, [sp, #4]
 801ebf6:	f002 fb25 	bl	8021244 <__ssvfiscanf_r>
 801ebfa:	b01c      	add	sp, #112	@ 0x70
 801ebfc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ec00:	b003      	add	sp, #12
 801ec02:	4770      	bx	lr
 801ec04:	0801ec2f 	.word	0x0801ec2f
 801ec08:	20000224 	.word	0x20000224

0801ec0c <__sread>:
 801ec0c:	b510      	push	{r4, lr}
 801ec0e:	460c      	mov	r4, r1
 801ec10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ec14:	f000 fa08 	bl	801f028 <_read_r>
 801ec18:	2800      	cmp	r0, #0
 801ec1a:	bfab      	itete	ge
 801ec1c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801ec1e:	89a3      	ldrhlt	r3, [r4, #12]
 801ec20:	181b      	addge	r3, r3, r0
 801ec22:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801ec26:	bfac      	ite	ge
 801ec28:	6563      	strge	r3, [r4, #84]	@ 0x54
 801ec2a:	81a3      	strhlt	r3, [r4, #12]
 801ec2c:	bd10      	pop	{r4, pc}

0801ec2e <__seofread>:
 801ec2e:	2000      	movs	r0, #0
 801ec30:	4770      	bx	lr

0801ec32 <__swrite>:
 801ec32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ec36:	461f      	mov	r7, r3
 801ec38:	898b      	ldrh	r3, [r1, #12]
 801ec3a:	4605      	mov	r5, r0
 801ec3c:	460c      	mov	r4, r1
 801ec3e:	05db      	lsls	r3, r3, #23
 801ec40:	4616      	mov	r6, r2
 801ec42:	d505      	bpl.n	801ec50 <__swrite+0x1e>
 801ec44:	2302      	movs	r3, #2
 801ec46:	2200      	movs	r2, #0
 801ec48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ec4c:	f000 f9da 	bl	801f004 <_lseek_r>
 801ec50:	89a3      	ldrh	r3, [r4, #12]
 801ec52:	4632      	mov	r2, r6
 801ec54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ec58:	4628      	mov	r0, r5
 801ec5a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801ec5e:	81a3      	strh	r3, [r4, #12]
 801ec60:	463b      	mov	r3, r7
 801ec62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ec66:	f000 ba01 	b.w	801f06c <_write_r>

0801ec6a <__sseek>:
 801ec6a:	b510      	push	{r4, lr}
 801ec6c:	460c      	mov	r4, r1
 801ec6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ec72:	f000 f9c7 	bl	801f004 <_lseek_r>
 801ec76:	1c43      	adds	r3, r0, #1
 801ec78:	89a3      	ldrh	r3, [r4, #12]
 801ec7a:	bf15      	itete	ne
 801ec7c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801ec7e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801ec82:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801ec86:	81a3      	strheq	r3, [r4, #12]
 801ec88:	bf18      	it	ne
 801ec8a:	81a3      	strhne	r3, [r4, #12]
 801ec8c:	bd10      	pop	{r4, pc}

0801ec8e <__sclose>:
 801ec8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ec92:	f000 b9a7 	b.w	801efe4 <_close_r>

0801ec96 <_vsniprintf_r>:
 801ec96:	b530      	push	{r4, r5, lr}
 801ec98:	4614      	mov	r4, r2
 801ec9a:	b09b      	sub	sp, #108	@ 0x6c
 801ec9c:	4605      	mov	r5, r0
 801ec9e:	461a      	mov	r2, r3
 801eca0:	2c00      	cmp	r4, #0
 801eca2:	da05      	bge.n	801ecb0 <_vsniprintf_r+0x1a>
 801eca4:	238b      	movs	r3, #139	@ 0x8b
 801eca6:	6003      	str	r3, [r0, #0]
 801eca8:	f04f 30ff 	mov.w	r0, #4294967295
 801ecac:	b01b      	add	sp, #108	@ 0x6c
 801ecae:	bd30      	pop	{r4, r5, pc}
 801ecb0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801ecb4:	9100      	str	r1, [sp, #0]
 801ecb6:	9104      	str	r1, [sp, #16]
 801ecb8:	4669      	mov	r1, sp
 801ecba:	f8ad 300c 	strh.w	r3, [sp, #12]
 801ecbe:	bf14      	ite	ne
 801ecc0:	f104 33ff 	addne.w	r3, r4, #4294967295
 801ecc4:	4623      	moveq	r3, r4
 801ecc6:	9302      	str	r3, [sp, #8]
 801ecc8:	9305      	str	r3, [sp, #20]
 801ecca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801ecce:	f8ad 300e 	strh.w	r3, [sp, #14]
 801ecd2:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801ecd4:	f002 f962 	bl	8020f9c <_svfiprintf_r>
 801ecd8:	1c43      	adds	r3, r0, #1
 801ecda:	bfbc      	itt	lt
 801ecdc:	238b      	movlt	r3, #139	@ 0x8b
 801ecde:	602b      	strlt	r3, [r5, #0]
 801ece0:	2c00      	cmp	r4, #0
 801ece2:	d0e3      	beq.n	801ecac <_vsniprintf_r+0x16>
 801ece4:	9b00      	ldr	r3, [sp, #0]
 801ece6:	2200      	movs	r2, #0
 801ece8:	701a      	strb	r2, [r3, #0]
 801ecea:	e7df      	b.n	801ecac <_vsniprintf_r+0x16>

0801ecec <vsniprintf>:
 801ecec:	b507      	push	{r0, r1, r2, lr}
 801ecee:	9300      	str	r3, [sp, #0]
 801ecf0:	4613      	mov	r3, r2
 801ecf2:	460a      	mov	r2, r1
 801ecf4:	4601      	mov	r1, r0
 801ecf6:	4803      	ldr	r0, [pc, #12]	@ (801ed04 <vsniprintf+0x18>)
 801ecf8:	6800      	ldr	r0, [r0, #0]
 801ecfa:	f7ff ffcc 	bl	801ec96 <_vsniprintf_r>
 801ecfe:	b003      	add	sp, #12
 801ed00:	f85d fb04 	ldr.w	pc, [sp], #4
 801ed04:	20000224 	.word	0x20000224

0801ed08 <__swbuf_r>:
 801ed08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ed0a:	460e      	mov	r6, r1
 801ed0c:	4614      	mov	r4, r2
 801ed0e:	4605      	mov	r5, r0
 801ed10:	b118      	cbz	r0, 801ed1a <__swbuf_r+0x12>
 801ed12:	6a03      	ldr	r3, [r0, #32]
 801ed14:	b90b      	cbnz	r3, 801ed1a <__swbuf_r+0x12>
 801ed16:	f7ff fe6b 	bl	801e9f0 <__sinit>
 801ed1a:	69a3      	ldr	r3, [r4, #24]
 801ed1c:	60a3      	str	r3, [r4, #8]
 801ed1e:	89a3      	ldrh	r3, [r4, #12]
 801ed20:	071a      	lsls	r2, r3, #28
 801ed22:	d501      	bpl.n	801ed28 <__swbuf_r+0x20>
 801ed24:	6923      	ldr	r3, [r4, #16]
 801ed26:	b943      	cbnz	r3, 801ed3a <__swbuf_r+0x32>
 801ed28:	4621      	mov	r1, r4
 801ed2a:	4628      	mov	r0, r5
 801ed2c:	f000 f82a 	bl	801ed84 <__swsetup_r>
 801ed30:	b118      	cbz	r0, 801ed3a <__swbuf_r+0x32>
 801ed32:	f04f 37ff 	mov.w	r7, #4294967295
 801ed36:	4638      	mov	r0, r7
 801ed38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ed3a:	6823      	ldr	r3, [r4, #0]
 801ed3c:	b2f6      	uxtb	r6, r6
 801ed3e:	6922      	ldr	r2, [r4, #16]
 801ed40:	4637      	mov	r7, r6
 801ed42:	1a98      	subs	r0, r3, r2
 801ed44:	6963      	ldr	r3, [r4, #20]
 801ed46:	4283      	cmp	r3, r0
 801ed48:	dc05      	bgt.n	801ed56 <__swbuf_r+0x4e>
 801ed4a:	4621      	mov	r1, r4
 801ed4c:	4628      	mov	r0, r5
 801ed4e:	f002 feff 	bl	8021b50 <_fflush_r>
 801ed52:	2800      	cmp	r0, #0
 801ed54:	d1ed      	bne.n	801ed32 <__swbuf_r+0x2a>
 801ed56:	68a3      	ldr	r3, [r4, #8]
 801ed58:	3b01      	subs	r3, #1
 801ed5a:	60a3      	str	r3, [r4, #8]
 801ed5c:	6823      	ldr	r3, [r4, #0]
 801ed5e:	1c5a      	adds	r2, r3, #1
 801ed60:	6022      	str	r2, [r4, #0]
 801ed62:	701e      	strb	r6, [r3, #0]
 801ed64:	1c43      	adds	r3, r0, #1
 801ed66:	6962      	ldr	r2, [r4, #20]
 801ed68:	429a      	cmp	r2, r3
 801ed6a:	d004      	beq.n	801ed76 <__swbuf_r+0x6e>
 801ed6c:	89a3      	ldrh	r3, [r4, #12]
 801ed6e:	07db      	lsls	r3, r3, #31
 801ed70:	d5e1      	bpl.n	801ed36 <__swbuf_r+0x2e>
 801ed72:	2e0a      	cmp	r6, #10
 801ed74:	d1df      	bne.n	801ed36 <__swbuf_r+0x2e>
 801ed76:	4621      	mov	r1, r4
 801ed78:	4628      	mov	r0, r5
 801ed7a:	f002 fee9 	bl	8021b50 <_fflush_r>
 801ed7e:	2800      	cmp	r0, #0
 801ed80:	d0d9      	beq.n	801ed36 <__swbuf_r+0x2e>
 801ed82:	e7d6      	b.n	801ed32 <__swbuf_r+0x2a>

0801ed84 <__swsetup_r>:
 801ed84:	b538      	push	{r3, r4, r5, lr}
 801ed86:	4b29      	ldr	r3, [pc, #164]	@ (801ee2c <__swsetup_r+0xa8>)
 801ed88:	4605      	mov	r5, r0
 801ed8a:	460c      	mov	r4, r1
 801ed8c:	6818      	ldr	r0, [r3, #0]
 801ed8e:	b118      	cbz	r0, 801ed98 <__swsetup_r+0x14>
 801ed90:	6a03      	ldr	r3, [r0, #32]
 801ed92:	b90b      	cbnz	r3, 801ed98 <__swsetup_r+0x14>
 801ed94:	f7ff fe2c 	bl	801e9f0 <__sinit>
 801ed98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ed9c:	0719      	lsls	r1, r3, #28
 801ed9e:	d422      	bmi.n	801ede6 <__swsetup_r+0x62>
 801eda0:	06da      	lsls	r2, r3, #27
 801eda2:	d407      	bmi.n	801edb4 <__swsetup_r+0x30>
 801eda4:	2209      	movs	r2, #9
 801eda6:	602a      	str	r2, [r5, #0]
 801eda8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801edac:	f04f 30ff 	mov.w	r0, #4294967295
 801edb0:	81a3      	strh	r3, [r4, #12]
 801edb2:	e033      	b.n	801ee1c <__swsetup_r+0x98>
 801edb4:	0758      	lsls	r0, r3, #29
 801edb6:	d512      	bpl.n	801edde <__swsetup_r+0x5a>
 801edb8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801edba:	b141      	cbz	r1, 801edce <__swsetup_r+0x4a>
 801edbc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801edc0:	4299      	cmp	r1, r3
 801edc2:	d002      	beq.n	801edca <__swsetup_r+0x46>
 801edc4:	4628      	mov	r0, r5
 801edc6:	f001 f833 	bl	801fe30 <_free_r>
 801edca:	2300      	movs	r3, #0
 801edcc:	6363      	str	r3, [r4, #52]	@ 0x34
 801edce:	89a3      	ldrh	r3, [r4, #12]
 801edd0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801edd4:	81a3      	strh	r3, [r4, #12]
 801edd6:	2300      	movs	r3, #0
 801edd8:	6063      	str	r3, [r4, #4]
 801edda:	6923      	ldr	r3, [r4, #16]
 801eddc:	6023      	str	r3, [r4, #0]
 801edde:	89a3      	ldrh	r3, [r4, #12]
 801ede0:	f043 0308 	orr.w	r3, r3, #8
 801ede4:	81a3      	strh	r3, [r4, #12]
 801ede6:	6923      	ldr	r3, [r4, #16]
 801ede8:	b94b      	cbnz	r3, 801edfe <__swsetup_r+0x7a>
 801edea:	89a3      	ldrh	r3, [r4, #12]
 801edec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801edf0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801edf4:	d003      	beq.n	801edfe <__swsetup_r+0x7a>
 801edf6:	4621      	mov	r1, r4
 801edf8:	4628      	mov	r0, r5
 801edfa:	f002 ff08 	bl	8021c0e <__smakebuf_r>
 801edfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ee02:	f013 0201 	ands.w	r2, r3, #1
 801ee06:	d00a      	beq.n	801ee1e <__swsetup_r+0x9a>
 801ee08:	2200      	movs	r2, #0
 801ee0a:	60a2      	str	r2, [r4, #8]
 801ee0c:	6962      	ldr	r2, [r4, #20]
 801ee0e:	4252      	negs	r2, r2
 801ee10:	61a2      	str	r2, [r4, #24]
 801ee12:	6922      	ldr	r2, [r4, #16]
 801ee14:	b942      	cbnz	r2, 801ee28 <__swsetup_r+0xa4>
 801ee16:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801ee1a:	d1c5      	bne.n	801eda8 <__swsetup_r+0x24>
 801ee1c:	bd38      	pop	{r3, r4, r5, pc}
 801ee1e:	0799      	lsls	r1, r3, #30
 801ee20:	bf58      	it	pl
 801ee22:	6962      	ldrpl	r2, [r4, #20]
 801ee24:	60a2      	str	r2, [r4, #8]
 801ee26:	e7f4      	b.n	801ee12 <__swsetup_r+0x8e>
 801ee28:	2000      	movs	r0, #0
 801ee2a:	e7f7      	b.n	801ee1c <__swsetup_r+0x98>
 801ee2c:	20000224 	.word	0x20000224

0801ee30 <memset>:
 801ee30:	4402      	add	r2, r0
 801ee32:	4603      	mov	r3, r0
 801ee34:	4293      	cmp	r3, r2
 801ee36:	d100      	bne.n	801ee3a <memset+0xa>
 801ee38:	4770      	bx	lr
 801ee3a:	f803 1b01 	strb.w	r1, [r3], #1
 801ee3e:	e7f9      	b.n	801ee34 <memset+0x4>

0801ee40 <strcat>:
 801ee40:	4602      	mov	r2, r0
 801ee42:	b510      	push	{r4, lr}
 801ee44:	7814      	ldrb	r4, [r2, #0]
 801ee46:	4613      	mov	r3, r2
 801ee48:	3201      	adds	r2, #1
 801ee4a:	2c00      	cmp	r4, #0
 801ee4c:	d1fa      	bne.n	801ee44 <strcat+0x4>
 801ee4e:	3b01      	subs	r3, #1
 801ee50:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ee54:	f803 2f01 	strb.w	r2, [r3, #1]!
 801ee58:	2a00      	cmp	r2, #0
 801ee5a:	d1f9      	bne.n	801ee50 <strcat+0x10>
 801ee5c:	bd10      	pop	{r4, pc}

0801ee5e <strchr>:
 801ee5e:	b2c9      	uxtb	r1, r1
 801ee60:	4603      	mov	r3, r0
 801ee62:	4618      	mov	r0, r3
 801ee64:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ee68:	b112      	cbz	r2, 801ee70 <strchr+0x12>
 801ee6a:	428a      	cmp	r2, r1
 801ee6c:	d1f9      	bne.n	801ee62 <strchr+0x4>
 801ee6e:	4770      	bx	lr
 801ee70:	2900      	cmp	r1, #0
 801ee72:	bf18      	it	ne
 801ee74:	2000      	movne	r0, #0
 801ee76:	4770      	bx	lr

0801ee78 <strdup>:
 801ee78:	4b02      	ldr	r3, [pc, #8]	@ (801ee84 <strdup+0xc>)
 801ee7a:	4601      	mov	r1, r0
 801ee7c:	6818      	ldr	r0, [r3, #0]
 801ee7e:	f000 b803 	b.w	801ee88 <_strdup_r>
 801ee82:	bf00      	nop
 801ee84:	20000224 	.word	0x20000224

0801ee88 <_strdup_r>:
 801ee88:	b570      	push	{r4, r5, r6, lr}
 801ee8a:	4604      	mov	r4, r0
 801ee8c:	4608      	mov	r0, r1
 801ee8e:	460d      	mov	r5, r1
 801ee90:	f7e1 fa08 	bl	80002a4 <strlen>
 801ee94:	1c46      	adds	r6, r0, #1
 801ee96:	4620      	mov	r0, r4
 801ee98:	4631      	mov	r1, r6
 801ee9a:	f7fd ff8b 	bl	801cdb4 <_malloc_r>
 801ee9e:	4604      	mov	r4, r0
 801eea0:	b118      	cbz	r0, 801eeaa <_strdup_r+0x22>
 801eea2:	4632      	mov	r2, r6
 801eea4:	4629      	mov	r1, r5
 801eea6:	f000 f936 	bl	801f116 <memcpy>
 801eeaa:	4620      	mov	r0, r4
 801eeac:	bd70      	pop	{r4, r5, r6, pc}

0801eeae <strncmp>:
 801eeae:	b510      	push	{r4, lr}
 801eeb0:	b16a      	cbz	r2, 801eece <strncmp+0x20>
 801eeb2:	3901      	subs	r1, #1
 801eeb4:	1884      	adds	r4, r0, r2
 801eeb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801eeba:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801eebe:	429a      	cmp	r2, r3
 801eec0:	d103      	bne.n	801eeca <strncmp+0x1c>
 801eec2:	42a0      	cmp	r0, r4
 801eec4:	d001      	beq.n	801eeca <strncmp+0x1c>
 801eec6:	2a00      	cmp	r2, #0
 801eec8:	d1f5      	bne.n	801eeb6 <strncmp+0x8>
 801eeca:	1ad0      	subs	r0, r2, r3
 801eecc:	bd10      	pop	{r4, pc}
 801eece:	4610      	mov	r0, r2
 801eed0:	e7fc      	b.n	801eecc <strncmp+0x1e>

0801eed2 <strncpy>:
 801eed2:	3901      	subs	r1, #1
 801eed4:	4603      	mov	r3, r0
 801eed6:	b510      	push	{r4, lr}
 801eed8:	b132      	cbz	r2, 801eee8 <strncpy+0x16>
 801eeda:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801eede:	3a01      	subs	r2, #1
 801eee0:	f803 4b01 	strb.w	r4, [r3], #1
 801eee4:	2c00      	cmp	r4, #0
 801eee6:	d1f7      	bne.n	801eed8 <strncpy+0x6>
 801eee8:	441a      	add	r2, r3
 801eeea:	2100      	movs	r1, #0
 801eeec:	4293      	cmp	r3, r2
 801eeee:	d100      	bne.n	801eef2 <strncpy+0x20>
 801eef0:	bd10      	pop	{r4, pc}
 801eef2:	f803 1b01 	strb.w	r1, [r3], #1
 801eef6:	e7f9      	b.n	801eeec <strncpy+0x1a>

0801eef8 <strtok>:
 801eef8:	4b16      	ldr	r3, [pc, #88]	@ (801ef54 <strtok+0x5c>)
 801eefa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801eefe:	681f      	ldr	r7, [r3, #0]
 801ef00:	4605      	mov	r5, r0
 801ef02:	460e      	mov	r6, r1
 801ef04:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 801ef06:	b9ec      	cbnz	r4, 801ef44 <strtok+0x4c>
 801ef08:	2050      	movs	r0, #80	@ 0x50
 801ef0a:	f7fd ff21 	bl	801cd50 <malloc>
 801ef0e:	4602      	mov	r2, r0
 801ef10:	6478      	str	r0, [r7, #68]	@ 0x44
 801ef12:	b920      	cbnz	r0, 801ef1e <strtok+0x26>
 801ef14:	4b10      	ldr	r3, [pc, #64]	@ (801ef58 <strtok+0x60>)
 801ef16:	215b      	movs	r1, #91	@ 0x5b
 801ef18:	4810      	ldr	r0, [pc, #64]	@ (801ef5c <strtok+0x64>)
 801ef1a:	f000 f917 	bl	801f14c <__assert_func>
 801ef1e:	e9c0 4400 	strd	r4, r4, [r0]
 801ef22:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801ef26:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801ef2a:	6184      	str	r4, [r0, #24]
 801ef2c:	7704      	strb	r4, [r0, #28]
 801ef2e:	6244      	str	r4, [r0, #36]	@ 0x24
 801ef30:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 801ef34:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 801ef38:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 801ef3c:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 801ef40:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 801ef44:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801ef46:	4631      	mov	r1, r6
 801ef48:	4628      	mov	r0, r5
 801ef4a:	2301      	movs	r3, #1
 801ef4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ef50:	f000 b806 	b.w	801ef60 <__strtok_r>
 801ef54:	20000224 	.word	0x20000224
 801ef58:	08024528 	.word	0x08024528
 801ef5c:	0802453f 	.word	0x0802453f

0801ef60 <__strtok_r>:
 801ef60:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ef62:	4604      	mov	r4, r0
 801ef64:	b908      	cbnz	r0, 801ef6a <__strtok_r+0xa>
 801ef66:	6814      	ldr	r4, [r2, #0]
 801ef68:	b144      	cbz	r4, 801ef7c <__strtok_r+0x1c>
 801ef6a:	4620      	mov	r0, r4
 801ef6c:	460f      	mov	r7, r1
 801ef6e:	f814 5b01 	ldrb.w	r5, [r4], #1
 801ef72:	f817 6b01 	ldrb.w	r6, [r7], #1
 801ef76:	b91e      	cbnz	r6, 801ef80 <__strtok_r+0x20>
 801ef78:	b965      	cbnz	r5, 801ef94 <__strtok_r+0x34>
 801ef7a:	6015      	str	r5, [r2, #0]
 801ef7c:	2000      	movs	r0, #0
 801ef7e:	e005      	b.n	801ef8c <__strtok_r+0x2c>
 801ef80:	42b5      	cmp	r5, r6
 801ef82:	d1f6      	bne.n	801ef72 <__strtok_r+0x12>
 801ef84:	2b00      	cmp	r3, #0
 801ef86:	d1f0      	bne.n	801ef6a <__strtok_r+0xa>
 801ef88:	6014      	str	r4, [r2, #0]
 801ef8a:	7003      	strb	r3, [r0, #0]
 801ef8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ef8e:	461c      	mov	r4, r3
 801ef90:	e00c      	b.n	801efac <__strtok_r+0x4c>
 801ef92:	b915      	cbnz	r5, 801ef9a <__strtok_r+0x3a>
 801ef94:	f814 3b01 	ldrb.w	r3, [r4], #1
 801ef98:	460e      	mov	r6, r1
 801ef9a:	f816 5b01 	ldrb.w	r5, [r6], #1
 801ef9e:	42ab      	cmp	r3, r5
 801efa0:	d1f7      	bne.n	801ef92 <__strtok_r+0x32>
 801efa2:	2b00      	cmp	r3, #0
 801efa4:	d0f3      	beq.n	801ef8e <__strtok_r+0x2e>
 801efa6:	2300      	movs	r3, #0
 801efa8:	f804 3c01 	strb.w	r3, [r4, #-1]
 801efac:	6014      	str	r4, [r2, #0]
 801efae:	e7ed      	b.n	801ef8c <__strtok_r+0x2c>

0801efb0 <strstr>:
 801efb0:	780a      	ldrb	r2, [r1, #0]
 801efb2:	b570      	push	{r4, r5, r6, lr}
 801efb4:	b96a      	cbnz	r2, 801efd2 <strstr+0x22>
 801efb6:	bd70      	pop	{r4, r5, r6, pc}
 801efb8:	429a      	cmp	r2, r3
 801efba:	d109      	bne.n	801efd0 <strstr+0x20>
 801efbc:	460c      	mov	r4, r1
 801efbe:	4605      	mov	r5, r0
 801efc0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801efc4:	2b00      	cmp	r3, #0
 801efc6:	d0f6      	beq.n	801efb6 <strstr+0x6>
 801efc8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801efcc:	429e      	cmp	r6, r3
 801efce:	d0f7      	beq.n	801efc0 <strstr+0x10>
 801efd0:	3001      	adds	r0, #1
 801efd2:	7803      	ldrb	r3, [r0, #0]
 801efd4:	2b00      	cmp	r3, #0
 801efd6:	d1ef      	bne.n	801efb8 <strstr+0x8>
 801efd8:	4618      	mov	r0, r3
 801efda:	e7ec      	b.n	801efb6 <strstr+0x6>

0801efdc <_localeconv_r>:
 801efdc:	4800      	ldr	r0, [pc, #0]	@ (801efe0 <_localeconv_r+0x4>)
 801efde:	4770      	bx	lr
 801efe0:	200001a8 	.word	0x200001a8

0801efe4 <_close_r>:
 801efe4:	b538      	push	{r3, r4, r5, lr}
 801efe6:	2300      	movs	r3, #0
 801efe8:	4d05      	ldr	r5, [pc, #20]	@ (801f000 <_close_r+0x1c>)
 801efea:	4604      	mov	r4, r0
 801efec:	4608      	mov	r0, r1
 801efee:	602b      	str	r3, [r5, #0]
 801eff0:	f7e5 ffca 	bl	8004f88 <_close>
 801eff4:	1c43      	adds	r3, r0, #1
 801eff6:	d102      	bne.n	801effe <_close_r+0x1a>
 801eff8:	682b      	ldr	r3, [r5, #0]
 801effa:	b103      	cbz	r3, 801effe <_close_r+0x1a>
 801effc:	6023      	str	r3, [r4, #0]
 801effe:	bd38      	pop	{r3, r4, r5, pc}
 801f000:	200157d4 	.word	0x200157d4

0801f004 <_lseek_r>:
 801f004:	b538      	push	{r3, r4, r5, lr}
 801f006:	4604      	mov	r4, r0
 801f008:	4d06      	ldr	r5, [pc, #24]	@ (801f024 <_lseek_r+0x20>)
 801f00a:	4608      	mov	r0, r1
 801f00c:	4611      	mov	r1, r2
 801f00e:	2200      	movs	r2, #0
 801f010:	602a      	str	r2, [r5, #0]
 801f012:	461a      	mov	r2, r3
 801f014:	f7e5 ffdf 	bl	8004fd6 <_lseek>
 801f018:	1c43      	adds	r3, r0, #1
 801f01a:	d102      	bne.n	801f022 <_lseek_r+0x1e>
 801f01c:	682b      	ldr	r3, [r5, #0]
 801f01e:	b103      	cbz	r3, 801f022 <_lseek_r+0x1e>
 801f020:	6023      	str	r3, [r4, #0]
 801f022:	bd38      	pop	{r3, r4, r5, pc}
 801f024:	200157d4 	.word	0x200157d4

0801f028 <_read_r>:
 801f028:	b538      	push	{r3, r4, r5, lr}
 801f02a:	4604      	mov	r4, r0
 801f02c:	4d06      	ldr	r5, [pc, #24]	@ (801f048 <_read_r+0x20>)
 801f02e:	4608      	mov	r0, r1
 801f030:	4611      	mov	r1, r2
 801f032:	2200      	movs	r2, #0
 801f034:	602a      	str	r2, [r5, #0]
 801f036:	461a      	mov	r2, r3
 801f038:	f7e5 ff6d 	bl	8004f16 <_read>
 801f03c:	1c43      	adds	r3, r0, #1
 801f03e:	d102      	bne.n	801f046 <_read_r+0x1e>
 801f040:	682b      	ldr	r3, [r5, #0]
 801f042:	b103      	cbz	r3, 801f046 <_read_r+0x1e>
 801f044:	6023      	str	r3, [r4, #0]
 801f046:	bd38      	pop	{r3, r4, r5, pc}
 801f048:	200157d4 	.word	0x200157d4

0801f04c <_sbrk_r>:
 801f04c:	b538      	push	{r3, r4, r5, lr}
 801f04e:	2300      	movs	r3, #0
 801f050:	4d05      	ldr	r5, [pc, #20]	@ (801f068 <_sbrk_r+0x1c>)
 801f052:	4604      	mov	r4, r0
 801f054:	4608      	mov	r0, r1
 801f056:	602b      	str	r3, [r5, #0]
 801f058:	f7e5 ffca 	bl	8004ff0 <_sbrk>
 801f05c:	1c43      	adds	r3, r0, #1
 801f05e:	d102      	bne.n	801f066 <_sbrk_r+0x1a>
 801f060:	682b      	ldr	r3, [r5, #0]
 801f062:	b103      	cbz	r3, 801f066 <_sbrk_r+0x1a>
 801f064:	6023      	str	r3, [r4, #0]
 801f066:	bd38      	pop	{r3, r4, r5, pc}
 801f068:	200157d4 	.word	0x200157d4

0801f06c <_write_r>:
 801f06c:	b538      	push	{r3, r4, r5, lr}
 801f06e:	4604      	mov	r4, r0
 801f070:	4d06      	ldr	r5, [pc, #24]	@ (801f08c <_write_r+0x20>)
 801f072:	4608      	mov	r0, r1
 801f074:	4611      	mov	r1, r2
 801f076:	2200      	movs	r2, #0
 801f078:	602a      	str	r2, [r5, #0]
 801f07a:	461a      	mov	r2, r3
 801f07c:	f7e5 ff68 	bl	8004f50 <_write>
 801f080:	1c43      	adds	r3, r0, #1
 801f082:	d102      	bne.n	801f08a <_write_r+0x1e>
 801f084:	682b      	ldr	r3, [r5, #0]
 801f086:	b103      	cbz	r3, 801f08a <_write_r+0x1e>
 801f088:	6023      	str	r3, [r4, #0]
 801f08a:	bd38      	pop	{r3, r4, r5, pc}
 801f08c:	200157d4 	.word	0x200157d4

0801f090 <__errno>:
 801f090:	4b01      	ldr	r3, [pc, #4]	@ (801f098 <__errno+0x8>)
 801f092:	6818      	ldr	r0, [r3, #0]
 801f094:	4770      	bx	lr
 801f096:	bf00      	nop
 801f098:	20000224 	.word	0x20000224

0801f09c <__libc_init_array>:
 801f09c:	b570      	push	{r4, r5, r6, lr}
 801f09e:	4d0d      	ldr	r5, [pc, #52]	@ (801f0d4 <__libc_init_array+0x38>)
 801f0a0:	2600      	movs	r6, #0
 801f0a2:	4c0d      	ldr	r4, [pc, #52]	@ (801f0d8 <__libc_init_array+0x3c>)
 801f0a4:	1b64      	subs	r4, r4, r5
 801f0a6:	10a4      	asrs	r4, r4, #2
 801f0a8:	42a6      	cmp	r6, r4
 801f0aa:	d109      	bne.n	801f0c0 <__libc_init_array+0x24>
 801f0ac:	4d0b      	ldr	r5, [pc, #44]	@ (801f0dc <__libc_init_array+0x40>)
 801f0ae:	2600      	movs	r6, #0
 801f0b0:	4c0b      	ldr	r4, [pc, #44]	@ (801f0e0 <__libc_init_array+0x44>)
 801f0b2:	f003 f8d3 	bl	802225c <_init>
 801f0b6:	1b64      	subs	r4, r4, r5
 801f0b8:	10a4      	asrs	r4, r4, #2
 801f0ba:	42a6      	cmp	r6, r4
 801f0bc:	d105      	bne.n	801f0ca <__libc_init_array+0x2e>
 801f0be:	bd70      	pop	{r4, r5, r6, pc}
 801f0c0:	f855 3b04 	ldr.w	r3, [r5], #4
 801f0c4:	3601      	adds	r6, #1
 801f0c6:	4798      	blx	r3
 801f0c8:	e7ee      	b.n	801f0a8 <__libc_init_array+0xc>
 801f0ca:	f855 3b04 	ldr.w	r3, [r5], #4
 801f0ce:	3601      	adds	r6, #1
 801f0d0:	4798      	blx	r3
 801f0d2:	e7f2      	b.n	801f0ba <__libc_init_array+0x1e>
 801f0d4:	08024850 	.word	0x08024850
 801f0d8:	08024850 	.word	0x08024850
 801f0dc:	08024850 	.word	0x08024850
 801f0e0:	08024854 	.word	0x08024854

0801f0e4 <__retarget_lock_init_recursive>:
 801f0e4:	4770      	bx	lr

0801f0e6 <__retarget_lock_acquire_recursive>:
 801f0e6:	4770      	bx	lr

0801f0e8 <__retarget_lock_release_recursive>:
 801f0e8:	4770      	bx	lr

0801f0ea <strcpy>:
 801f0ea:	4603      	mov	r3, r0
 801f0ec:	f811 2b01 	ldrb.w	r2, [r1], #1
 801f0f0:	f803 2b01 	strb.w	r2, [r3], #1
 801f0f4:	2a00      	cmp	r2, #0
 801f0f6:	d1f9      	bne.n	801f0ec <strcpy+0x2>
 801f0f8:	4770      	bx	lr

0801f0fa <memchr>:
 801f0fa:	b2c9      	uxtb	r1, r1
 801f0fc:	4603      	mov	r3, r0
 801f0fe:	4402      	add	r2, r0
 801f100:	b510      	push	{r4, lr}
 801f102:	4293      	cmp	r3, r2
 801f104:	4618      	mov	r0, r3
 801f106:	d101      	bne.n	801f10c <memchr+0x12>
 801f108:	2000      	movs	r0, #0
 801f10a:	e003      	b.n	801f114 <memchr+0x1a>
 801f10c:	7804      	ldrb	r4, [r0, #0]
 801f10e:	3301      	adds	r3, #1
 801f110:	428c      	cmp	r4, r1
 801f112:	d1f6      	bne.n	801f102 <memchr+0x8>
 801f114:	bd10      	pop	{r4, pc}

0801f116 <memcpy>:
 801f116:	440a      	add	r2, r1
 801f118:	1e43      	subs	r3, r0, #1
 801f11a:	4291      	cmp	r1, r2
 801f11c:	d100      	bne.n	801f120 <memcpy+0xa>
 801f11e:	4770      	bx	lr
 801f120:	b510      	push	{r4, lr}
 801f122:	f811 4b01 	ldrb.w	r4, [r1], #1
 801f126:	4291      	cmp	r1, r2
 801f128:	f803 4f01 	strb.w	r4, [r3, #1]!
 801f12c:	d1f9      	bne.n	801f122 <memcpy+0xc>
 801f12e:	bd10      	pop	{r4, pc}

0801f130 <nan>:
 801f130:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801f138 <nan+0x8>
 801f134:	4770      	bx	lr
 801f136:	bf00      	nop
 801f138:	00000000 	.word	0x00000000
 801f13c:	7ff80000 	.word	0x7ff80000

0801f140 <nanf>:
 801f140:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801f148 <nanf+0x8>
 801f144:	4770      	bx	lr
 801f146:	bf00      	nop
 801f148:	7fc00000 	.word	0x7fc00000

0801f14c <__assert_func>:
 801f14c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801f14e:	4614      	mov	r4, r2
 801f150:	461a      	mov	r2, r3
 801f152:	4b09      	ldr	r3, [pc, #36]	@ (801f178 <__assert_func+0x2c>)
 801f154:	4605      	mov	r5, r0
 801f156:	681b      	ldr	r3, [r3, #0]
 801f158:	68d8      	ldr	r0, [r3, #12]
 801f15a:	b954      	cbnz	r4, 801f172 <__assert_func+0x26>
 801f15c:	4b07      	ldr	r3, [pc, #28]	@ (801f17c <__assert_func+0x30>)
 801f15e:	461c      	mov	r4, r3
 801f160:	9100      	str	r1, [sp, #0]
 801f162:	4907      	ldr	r1, [pc, #28]	@ (801f180 <__assert_func+0x34>)
 801f164:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801f168:	462b      	mov	r3, r5
 801f16a:	f002 fd19 	bl	8021ba0 <fiprintf>
 801f16e:	f002 fe37 	bl	8021de0 <abort>
 801f172:	4b04      	ldr	r3, [pc, #16]	@ (801f184 <__assert_func+0x38>)
 801f174:	e7f4      	b.n	801f160 <__assert_func+0x14>
 801f176:	bf00      	nop
 801f178:	20000224 	.word	0x20000224
 801f17c:	080245dc 	.word	0x080245dc
 801f180:	080245ae 	.word	0x080245ae
 801f184:	080245a1 	.word	0x080245a1

0801f188 <quorem>:
 801f188:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f18c:	6903      	ldr	r3, [r0, #16]
 801f18e:	4607      	mov	r7, r0
 801f190:	690c      	ldr	r4, [r1, #16]
 801f192:	42a3      	cmp	r3, r4
 801f194:	f2c0 8083 	blt.w	801f29e <quorem+0x116>
 801f198:	3c01      	subs	r4, #1
 801f19a:	f100 0514 	add.w	r5, r0, #20
 801f19e:	f101 0814 	add.w	r8, r1, #20
 801f1a2:	00a3      	lsls	r3, r4, #2
 801f1a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801f1a8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801f1ac:	9300      	str	r3, [sp, #0]
 801f1ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801f1b2:	9301      	str	r3, [sp, #4]
 801f1b4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801f1b8:	3301      	adds	r3, #1
 801f1ba:	429a      	cmp	r2, r3
 801f1bc:	fbb2 f6f3 	udiv	r6, r2, r3
 801f1c0:	d331      	bcc.n	801f226 <quorem+0x9e>
 801f1c2:	f04f 0a00 	mov.w	sl, #0
 801f1c6:	46c4      	mov	ip, r8
 801f1c8:	46ae      	mov	lr, r5
 801f1ca:	46d3      	mov	fp, sl
 801f1cc:	f85c 3b04 	ldr.w	r3, [ip], #4
 801f1d0:	b298      	uxth	r0, r3
 801f1d2:	45e1      	cmp	r9, ip
 801f1d4:	ea4f 4313 	mov.w	r3, r3, lsr #16
 801f1d8:	fb06 a000 	mla	r0, r6, r0, sl
 801f1dc:	ea4f 4210 	mov.w	r2, r0, lsr #16
 801f1e0:	b280      	uxth	r0, r0
 801f1e2:	fb06 2303 	mla	r3, r6, r3, r2
 801f1e6:	f8de 2000 	ldr.w	r2, [lr]
 801f1ea:	b292      	uxth	r2, r2
 801f1ec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801f1f0:	eba2 0200 	sub.w	r2, r2, r0
 801f1f4:	b29b      	uxth	r3, r3
 801f1f6:	f8de 0000 	ldr.w	r0, [lr]
 801f1fa:	445a      	add	r2, fp
 801f1fc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801f200:	b292      	uxth	r2, r2
 801f202:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801f206:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801f20a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801f20e:	f84e 2b04 	str.w	r2, [lr], #4
 801f212:	d2db      	bcs.n	801f1cc <quorem+0x44>
 801f214:	9b00      	ldr	r3, [sp, #0]
 801f216:	58eb      	ldr	r3, [r5, r3]
 801f218:	b92b      	cbnz	r3, 801f226 <quorem+0x9e>
 801f21a:	9b01      	ldr	r3, [sp, #4]
 801f21c:	3b04      	subs	r3, #4
 801f21e:	429d      	cmp	r5, r3
 801f220:	461a      	mov	r2, r3
 801f222:	d330      	bcc.n	801f286 <quorem+0xfe>
 801f224:	613c      	str	r4, [r7, #16]
 801f226:	4638      	mov	r0, r7
 801f228:	f001 fc5a 	bl	8020ae0 <__mcmp>
 801f22c:	2800      	cmp	r0, #0
 801f22e:	db26      	blt.n	801f27e <quorem+0xf6>
 801f230:	4629      	mov	r1, r5
 801f232:	2000      	movs	r0, #0
 801f234:	f858 2b04 	ldr.w	r2, [r8], #4
 801f238:	f8d1 c000 	ldr.w	ip, [r1]
 801f23c:	fa1f fe82 	uxth.w	lr, r2
 801f240:	45c1      	cmp	r9, r8
 801f242:	fa1f f38c 	uxth.w	r3, ip
 801f246:	ea4f 4212 	mov.w	r2, r2, lsr #16
 801f24a:	eba3 030e 	sub.w	r3, r3, lr
 801f24e:	4403      	add	r3, r0
 801f250:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801f254:	b29b      	uxth	r3, r3
 801f256:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801f25a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801f25e:	ea4f 4022 	mov.w	r0, r2, asr #16
 801f262:	f841 3b04 	str.w	r3, [r1], #4
 801f266:	d2e5      	bcs.n	801f234 <quorem+0xac>
 801f268:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801f26c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801f270:	b922      	cbnz	r2, 801f27c <quorem+0xf4>
 801f272:	3b04      	subs	r3, #4
 801f274:	429d      	cmp	r5, r3
 801f276:	461a      	mov	r2, r3
 801f278:	d30b      	bcc.n	801f292 <quorem+0x10a>
 801f27a:	613c      	str	r4, [r7, #16]
 801f27c:	3601      	adds	r6, #1
 801f27e:	4630      	mov	r0, r6
 801f280:	b003      	add	sp, #12
 801f282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f286:	6812      	ldr	r2, [r2, #0]
 801f288:	3b04      	subs	r3, #4
 801f28a:	2a00      	cmp	r2, #0
 801f28c:	d1ca      	bne.n	801f224 <quorem+0x9c>
 801f28e:	3c01      	subs	r4, #1
 801f290:	e7c5      	b.n	801f21e <quorem+0x96>
 801f292:	6812      	ldr	r2, [r2, #0]
 801f294:	3b04      	subs	r3, #4
 801f296:	2a00      	cmp	r2, #0
 801f298:	d1ef      	bne.n	801f27a <quorem+0xf2>
 801f29a:	3c01      	subs	r4, #1
 801f29c:	e7ea      	b.n	801f274 <quorem+0xec>
 801f29e:	2000      	movs	r0, #0
 801f2a0:	e7ee      	b.n	801f280 <quorem+0xf8>
 801f2a2:	0000      	movs	r0, r0
 801f2a4:	0000      	movs	r0, r0
	...

0801f2a8 <_dtoa_r>:
 801f2a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f2ac:	69c7      	ldr	r7, [r0, #28]
 801f2ae:	b099      	sub	sp, #100	@ 0x64
 801f2b0:	4683      	mov	fp, r0
 801f2b2:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801f2b4:	9109      	str	r1, [sp, #36]	@ 0x24
 801f2b6:	920e      	str	r2, [sp, #56]	@ 0x38
 801f2b8:	9313      	str	r3, [sp, #76]	@ 0x4c
 801f2ba:	ec55 4b10 	vmov	r4, r5, d0
 801f2be:	ed8d 0b02 	vstr	d0, [sp, #8]
 801f2c2:	b97f      	cbnz	r7, 801f2e4 <_dtoa_r+0x3c>
 801f2c4:	2010      	movs	r0, #16
 801f2c6:	f7fd fd43 	bl	801cd50 <malloc>
 801f2ca:	4602      	mov	r2, r0
 801f2cc:	f8cb 001c 	str.w	r0, [fp, #28]
 801f2d0:	b920      	cbnz	r0, 801f2dc <_dtoa_r+0x34>
 801f2d2:	4ba7      	ldr	r3, [pc, #668]	@ (801f570 <_dtoa_r+0x2c8>)
 801f2d4:	21ef      	movs	r1, #239	@ 0xef
 801f2d6:	48a7      	ldr	r0, [pc, #668]	@ (801f574 <_dtoa_r+0x2cc>)
 801f2d8:	f7ff ff38 	bl	801f14c <__assert_func>
 801f2dc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801f2e0:	6007      	str	r7, [r0, #0]
 801f2e2:	60c7      	str	r7, [r0, #12]
 801f2e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 801f2e8:	6819      	ldr	r1, [r3, #0]
 801f2ea:	b159      	cbz	r1, 801f304 <_dtoa_r+0x5c>
 801f2ec:	685a      	ldr	r2, [r3, #4]
 801f2ee:	2301      	movs	r3, #1
 801f2f0:	4658      	mov	r0, fp
 801f2f2:	4093      	lsls	r3, r2
 801f2f4:	604a      	str	r2, [r1, #4]
 801f2f6:	608b      	str	r3, [r1, #8]
 801f2f8:	f001 f96c 	bl	80205d4 <_Bfree>
 801f2fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 801f300:	2200      	movs	r2, #0
 801f302:	601a      	str	r2, [r3, #0]
 801f304:	1e2b      	subs	r3, r5, #0
 801f306:	bfb7      	itett	lt
 801f308:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801f30c:	2300      	movge	r3, #0
 801f30e:	2201      	movlt	r2, #1
 801f310:	9303      	strlt	r3, [sp, #12]
 801f312:	bfa8      	it	ge
 801f314:	6033      	strge	r3, [r6, #0]
 801f316:	9f03      	ldr	r7, [sp, #12]
 801f318:	4b97      	ldr	r3, [pc, #604]	@ (801f578 <_dtoa_r+0x2d0>)
 801f31a:	bfb8      	it	lt
 801f31c:	6032      	strlt	r2, [r6, #0]
 801f31e:	43bb      	bics	r3, r7
 801f320:	d112      	bne.n	801f348 <_dtoa_r+0xa0>
 801f322:	f242 730f 	movw	r3, #9999	@ 0x270f
 801f326:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801f328:	6013      	str	r3, [r2, #0]
 801f32a:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801f32e:	4323      	orrs	r3, r4
 801f330:	f000 854c 	beq.w	801fdcc <_dtoa_r+0xb24>
 801f334:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801f336:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801f58c <_dtoa_r+0x2e4>
 801f33a:	2b00      	cmp	r3, #0
 801f33c:	f000 854e 	beq.w	801fddc <_dtoa_r+0xb34>
 801f340:	f10a 0303 	add.w	r3, sl, #3
 801f344:	f000 bd48 	b.w	801fdd8 <_dtoa_r+0xb30>
 801f348:	ed9d 7b02 	vldr	d7, [sp, #8]
 801f34c:	2200      	movs	r2, #0
 801f34e:	2300      	movs	r3, #0
 801f350:	ec51 0b17 	vmov	r0, r1, d7
 801f354:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801f358:	f7e1 fbd0 	bl	8000afc <__aeabi_dcmpeq>
 801f35c:	4680      	mov	r8, r0
 801f35e:	b158      	cbz	r0, 801f378 <_dtoa_r+0xd0>
 801f360:	2301      	movs	r3, #1
 801f362:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801f364:	6013      	str	r3, [r2, #0]
 801f366:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801f368:	b113      	cbz	r3, 801f370 <_dtoa_r+0xc8>
 801f36a:	4b84      	ldr	r3, [pc, #528]	@ (801f57c <_dtoa_r+0x2d4>)
 801f36c:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801f36e:	6013      	str	r3, [r2, #0]
 801f370:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 801f590 <_dtoa_r+0x2e8>
 801f374:	f000 bd32 	b.w	801fddc <_dtoa_r+0xb34>
 801f378:	f3c7 560a 	ubfx	r6, r7, #20, #11
 801f37c:	aa16      	add	r2, sp, #88	@ 0x58
 801f37e:	a917      	add	r1, sp, #92	@ 0x5c
 801f380:	4658      	mov	r0, fp
 801f382:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801f386:	f001 fcd3 	bl	8020d30 <__d2b>
 801f38a:	4681      	mov	r9, r0
 801f38c:	2e00      	cmp	r6, #0
 801f38e:	d075      	beq.n	801f47c <_dtoa_r+0x1d4>
 801f390:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f392:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801f396:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801f39a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801f39e:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801f3a2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801f3a6:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801f3aa:	4619      	mov	r1, r3
 801f3ac:	2200      	movs	r2, #0
 801f3ae:	4b74      	ldr	r3, [pc, #464]	@ (801f580 <_dtoa_r+0x2d8>)
 801f3b0:	f7e0 ff84 	bl	80002bc <__aeabi_dsub>
 801f3b4:	a368      	add	r3, pc, #416	@ (adr r3, 801f558 <_dtoa_r+0x2b0>)
 801f3b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f3ba:	f7e1 f937 	bl	800062c <__aeabi_dmul>
 801f3be:	a368      	add	r3, pc, #416	@ (adr r3, 801f560 <_dtoa_r+0x2b8>)
 801f3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f3c4:	f7e0 ff7c 	bl	80002c0 <__adddf3>
 801f3c8:	4604      	mov	r4, r0
 801f3ca:	460d      	mov	r5, r1
 801f3cc:	4630      	mov	r0, r6
 801f3ce:	f7e1 f8c3 	bl	8000558 <__aeabi_i2d>
 801f3d2:	a365      	add	r3, pc, #404	@ (adr r3, 801f568 <_dtoa_r+0x2c0>)
 801f3d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f3d8:	f7e1 f928 	bl	800062c <__aeabi_dmul>
 801f3dc:	4602      	mov	r2, r0
 801f3de:	460b      	mov	r3, r1
 801f3e0:	4620      	mov	r0, r4
 801f3e2:	4629      	mov	r1, r5
 801f3e4:	f7e0 ff6c 	bl	80002c0 <__adddf3>
 801f3e8:	4604      	mov	r4, r0
 801f3ea:	460d      	mov	r5, r1
 801f3ec:	f7e1 fbce 	bl	8000b8c <__aeabi_d2iz>
 801f3f0:	2200      	movs	r2, #0
 801f3f2:	4607      	mov	r7, r0
 801f3f4:	2300      	movs	r3, #0
 801f3f6:	4620      	mov	r0, r4
 801f3f8:	4629      	mov	r1, r5
 801f3fa:	f7e1 fb89 	bl	8000b10 <__aeabi_dcmplt>
 801f3fe:	b140      	cbz	r0, 801f412 <_dtoa_r+0x16a>
 801f400:	4638      	mov	r0, r7
 801f402:	f7e1 f8a9 	bl	8000558 <__aeabi_i2d>
 801f406:	4622      	mov	r2, r4
 801f408:	462b      	mov	r3, r5
 801f40a:	f7e1 fb77 	bl	8000afc <__aeabi_dcmpeq>
 801f40e:	b900      	cbnz	r0, 801f412 <_dtoa_r+0x16a>
 801f410:	3f01      	subs	r7, #1
 801f412:	2f16      	cmp	r7, #22
 801f414:	d851      	bhi.n	801f4ba <_dtoa_r+0x212>
 801f416:	4b5b      	ldr	r3, [pc, #364]	@ (801f584 <_dtoa_r+0x2dc>)
 801f418:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801f41c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801f420:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f424:	f7e1 fb74 	bl	8000b10 <__aeabi_dcmplt>
 801f428:	2800      	cmp	r0, #0
 801f42a:	d048      	beq.n	801f4be <_dtoa_r+0x216>
 801f42c:	3f01      	subs	r7, #1
 801f42e:	2300      	movs	r3, #0
 801f430:	9312      	str	r3, [sp, #72]	@ 0x48
 801f432:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801f434:	1b9b      	subs	r3, r3, r6
 801f436:	1e5a      	subs	r2, r3, #1
 801f438:	bf46      	itte	mi
 801f43a:	f1c3 0801 	rsbmi	r8, r3, #1
 801f43e:	2300      	movmi	r3, #0
 801f440:	f04f 0800 	movpl.w	r8, #0
 801f444:	9208      	str	r2, [sp, #32]
 801f446:	bf48      	it	mi
 801f448:	9308      	strmi	r3, [sp, #32]
 801f44a:	2f00      	cmp	r7, #0
 801f44c:	db39      	blt.n	801f4c2 <_dtoa_r+0x21a>
 801f44e:	9b08      	ldr	r3, [sp, #32]
 801f450:	970f      	str	r7, [sp, #60]	@ 0x3c
 801f452:	443b      	add	r3, r7
 801f454:	9308      	str	r3, [sp, #32]
 801f456:	2300      	movs	r3, #0
 801f458:	930a      	str	r3, [sp, #40]	@ 0x28
 801f45a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f45c:	2b09      	cmp	r3, #9
 801f45e:	d864      	bhi.n	801f52a <_dtoa_r+0x282>
 801f460:	2b05      	cmp	r3, #5
 801f462:	bfc5      	ittet	gt
 801f464:	3b04      	subgt	r3, #4
 801f466:	2400      	movgt	r4, #0
 801f468:	2401      	movle	r4, #1
 801f46a:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801f46c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f46e:	3b02      	subs	r3, #2
 801f470:	2b03      	cmp	r3, #3
 801f472:	d865      	bhi.n	801f540 <_dtoa_r+0x298>
 801f474:	e8df f003 	tbb	[pc, r3]
 801f478:	5737392c 	.word	0x5737392c
 801f47c:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801f480:	441e      	add	r6, r3
 801f482:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801f486:	2b20      	cmp	r3, #32
 801f488:	bfc9      	itett	gt
 801f48a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801f48e:	f1c3 0320 	rsble	r3, r3, #32
 801f492:	409f      	lslgt	r7, r3
 801f494:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801f498:	bfd8      	it	le
 801f49a:	fa04 f003 	lslle.w	r0, r4, r3
 801f49e:	f106 36ff 	add.w	r6, r6, #4294967295
 801f4a2:	bfc4      	itt	gt
 801f4a4:	fa24 f303 	lsrgt.w	r3, r4, r3
 801f4a8:	ea47 0003 	orrgt.w	r0, r7, r3
 801f4ac:	f7e1 f844 	bl	8000538 <__aeabi_ui2d>
 801f4b0:	2201      	movs	r2, #1
 801f4b2:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801f4b6:	9214      	str	r2, [sp, #80]	@ 0x50
 801f4b8:	e777      	b.n	801f3aa <_dtoa_r+0x102>
 801f4ba:	2301      	movs	r3, #1
 801f4bc:	e7b8      	b.n	801f430 <_dtoa_r+0x188>
 801f4be:	9012      	str	r0, [sp, #72]	@ 0x48
 801f4c0:	e7b7      	b.n	801f432 <_dtoa_r+0x18a>
 801f4c2:	427b      	negs	r3, r7
 801f4c4:	eba8 0807 	sub.w	r8, r8, r7
 801f4c8:	930a      	str	r3, [sp, #40]	@ 0x28
 801f4ca:	2300      	movs	r3, #0
 801f4cc:	930f      	str	r3, [sp, #60]	@ 0x3c
 801f4ce:	e7c4      	b.n	801f45a <_dtoa_r+0x1b2>
 801f4d0:	2300      	movs	r3, #0
 801f4d2:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f4d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f4d6:	2b00      	cmp	r3, #0
 801f4d8:	dc35      	bgt.n	801f546 <_dtoa_r+0x29e>
 801f4da:	2301      	movs	r3, #1
 801f4dc:	461a      	mov	r2, r3
 801f4de:	9300      	str	r3, [sp, #0]
 801f4e0:	9307      	str	r3, [sp, #28]
 801f4e2:	920e      	str	r2, [sp, #56]	@ 0x38
 801f4e4:	e00b      	b.n	801f4fe <_dtoa_r+0x256>
 801f4e6:	2301      	movs	r3, #1
 801f4e8:	e7f3      	b.n	801f4d2 <_dtoa_r+0x22a>
 801f4ea:	2300      	movs	r3, #0
 801f4ec:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f4ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f4f0:	18fb      	adds	r3, r7, r3
 801f4f2:	9300      	str	r3, [sp, #0]
 801f4f4:	3301      	adds	r3, #1
 801f4f6:	2b01      	cmp	r3, #1
 801f4f8:	9307      	str	r3, [sp, #28]
 801f4fa:	bfb8      	it	lt
 801f4fc:	2301      	movlt	r3, #1
 801f4fe:	f8db 001c 	ldr.w	r0, [fp, #28]
 801f502:	2100      	movs	r1, #0
 801f504:	2204      	movs	r2, #4
 801f506:	f102 0514 	add.w	r5, r2, #20
 801f50a:	429d      	cmp	r5, r3
 801f50c:	d91f      	bls.n	801f54e <_dtoa_r+0x2a6>
 801f50e:	6041      	str	r1, [r0, #4]
 801f510:	4658      	mov	r0, fp
 801f512:	f001 f81f 	bl	8020554 <_Balloc>
 801f516:	4682      	mov	sl, r0
 801f518:	2800      	cmp	r0, #0
 801f51a:	d13b      	bne.n	801f594 <_dtoa_r+0x2ec>
 801f51c:	4b1a      	ldr	r3, [pc, #104]	@ (801f588 <_dtoa_r+0x2e0>)
 801f51e:	4602      	mov	r2, r0
 801f520:	f240 11af 	movw	r1, #431	@ 0x1af
 801f524:	e6d7      	b.n	801f2d6 <_dtoa_r+0x2e>
 801f526:	2301      	movs	r3, #1
 801f528:	e7e0      	b.n	801f4ec <_dtoa_r+0x244>
 801f52a:	2401      	movs	r4, #1
 801f52c:	2300      	movs	r3, #0
 801f52e:	940b      	str	r4, [sp, #44]	@ 0x2c
 801f530:	9309      	str	r3, [sp, #36]	@ 0x24
 801f532:	f04f 33ff 	mov.w	r3, #4294967295
 801f536:	2200      	movs	r2, #0
 801f538:	9300      	str	r3, [sp, #0]
 801f53a:	9307      	str	r3, [sp, #28]
 801f53c:	2312      	movs	r3, #18
 801f53e:	e7d0      	b.n	801f4e2 <_dtoa_r+0x23a>
 801f540:	2301      	movs	r3, #1
 801f542:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f544:	e7f5      	b.n	801f532 <_dtoa_r+0x28a>
 801f546:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f548:	9300      	str	r3, [sp, #0]
 801f54a:	9307      	str	r3, [sp, #28]
 801f54c:	e7d7      	b.n	801f4fe <_dtoa_r+0x256>
 801f54e:	3101      	adds	r1, #1
 801f550:	0052      	lsls	r2, r2, #1
 801f552:	e7d8      	b.n	801f506 <_dtoa_r+0x25e>
 801f554:	f3af 8000 	nop.w
 801f558:	636f4361 	.word	0x636f4361
 801f55c:	3fd287a7 	.word	0x3fd287a7
 801f560:	8b60c8b3 	.word	0x8b60c8b3
 801f564:	3fc68a28 	.word	0x3fc68a28
 801f568:	509f79fb 	.word	0x509f79fb
 801f56c:	3fd34413 	.word	0x3fd34413
 801f570:	08024528 	.word	0x08024528
 801f574:	080245ea 	.word	0x080245ea
 801f578:	7ff00000 	.word	0x7ff00000
 801f57c:	08024830 	.word	0x08024830
 801f580:	3ff80000 	.word	0x3ff80000
 801f584:	08024740 	.word	0x08024740
 801f588:	08024642 	.word	0x08024642
 801f58c:	080245e6 	.word	0x080245e6
 801f590:	0802482f 	.word	0x0802482f
 801f594:	f8db 301c 	ldr.w	r3, [fp, #28]
 801f598:	6018      	str	r0, [r3, #0]
 801f59a:	9b07      	ldr	r3, [sp, #28]
 801f59c:	2b0e      	cmp	r3, #14
 801f59e:	f200 80a4 	bhi.w	801f6ea <_dtoa_r+0x442>
 801f5a2:	2c00      	cmp	r4, #0
 801f5a4:	f000 80a1 	beq.w	801f6ea <_dtoa_r+0x442>
 801f5a8:	2f00      	cmp	r7, #0
 801f5aa:	dd33      	ble.n	801f614 <_dtoa_r+0x36c>
 801f5ac:	f007 020f 	and.w	r2, r7, #15
 801f5b0:	4bac      	ldr	r3, [pc, #688]	@ (801f864 <_dtoa_r+0x5bc>)
 801f5b2:	05f8      	lsls	r0, r7, #23
 801f5b4:	ea4f 1427 	mov.w	r4, r7, asr #4
 801f5b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801f5bc:	ed93 7b00 	vldr	d7, [r3]
 801f5c0:	ed8d 7b04 	vstr	d7, [sp, #16]
 801f5c4:	d516      	bpl.n	801f5f4 <_dtoa_r+0x34c>
 801f5c6:	4ba8      	ldr	r3, [pc, #672]	@ (801f868 <_dtoa_r+0x5c0>)
 801f5c8:	f004 040f 	and.w	r4, r4, #15
 801f5cc:	2603      	movs	r6, #3
 801f5ce:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801f5d2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801f5d6:	f7e1 f953 	bl	8000880 <__aeabi_ddiv>
 801f5da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f5de:	4da2      	ldr	r5, [pc, #648]	@ (801f868 <_dtoa_r+0x5c0>)
 801f5e0:	b954      	cbnz	r4, 801f5f8 <_dtoa_r+0x350>
 801f5e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801f5e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f5ea:	f7e1 f949 	bl	8000880 <__aeabi_ddiv>
 801f5ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f5f2:	e028      	b.n	801f646 <_dtoa_r+0x39e>
 801f5f4:	2602      	movs	r6, #2
 801f5f6:	e7f2      	b.n	801f5de <_dtoa_r+0x336>
 801f5f8:	07e1      	lsls	r1, r4, #31
 801f5fa:	d508      	bpl.n	801f60e <_dtoa_r+0x366>
 801f5fc:	3601      	adds	r6, #1
 801f5fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801f602:	e9d5 2300 	ldrd	r2, r3, [r5]
 801f606:	f7e1 f811 	bl	800062c <__aeabi_dmul>
 801f60a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801f60e:	1064      	asrs	r4, r4, #1
 801f610:	3508      	adds	r5, #8
 801f612:	e7e5      	b.n	801f5e0 <_dtoa_r+0x338>
 801f614:	f000 80d2 	beq.w	801f7bc <_dtoa_r+0x514>
 801f618:	427c      	negs	r4, r7
 801f61a:	4b92      	ldr	r3, [pc, #584]	@ (801f864 <_dtoa_r+0x5bc>)
 801f61c:	4d92      	ldr	r5, [pc, #584]	@ (801f868 <_dtoa_r+0x5c0>)
 801f61e:	2602      	movs	r6, #2
 801f620:	f004 020f 	and.w	r2, r4, #15
 801f624:	1124      	asrs	r4, r4, #4
 801f626:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801f62a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801f62e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f632:	f7e0 fffb 	bl	800062c <__aeabi_dmul>
 801f636:	2300      	movs	r3, #0
 801f638:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f63c:	2c00      	cmp	r4, #0
 801f63e:	f040 80b2 	bne.w	801f7a6 <_dtoa_r+0x4fe>
 801f642:	2b00      	cmp	r3, #0
 801f644:	d1d3      	bne.n	801f5ee <_dtoa_r+0x346>
 801f646:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801f648:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801f64c:	2b00      	cmp	r3, #0
 801f64e:	f000 80b7 	beq.w	801f7c0 <_dtoa_r+0x518>
 801f652:	2200      	movs	r2, #0
 801f654:	4b85      	ldr	r3, [pc, #532]	@ (801f86c <_dtoa_r+0x5c4>)
 801f656:	4620      	mov	r0, r4
 801f658:	4629      	mov	r1, r5
 801f65a:	f7e1 fa59 	bl	8000b10 <__aeabi_dcmplt>
 801f65e:	2800      	cmp	r0, #0
 801f660:	f000 80ae 	beq.w	801f7c0 <_dtoa_r+0x518>
 801f664:	9b07      	ldr	r3, [sp, #28]
 801f666:	2b00      	cmp	r3, #0
 801f668:	f000 80aa 	beq.w	801f7c0 <_dtoa_r+0x518>
 801f66c:	9b00      	ldr	r3, [sp, #0]
 801f66e:	2b00      	cmp	r3, #0
 801f670:	dd37      	ble.n	801f6e2 <_dtoa_r+0x43a>
 801f672:	1e7b      	subs	r3, r7, #1
 801f674:	4620      	mov	r0, r4
 801f676:	2200      	movs	r2, #0
 801f678:	4629      	mov	r1, r5
 801f67a:	9304      	str	r3, [sp, #16]
 801f67c:	3601      	adds	r6, #1
 801f67e:	4b7c      	ldr	r3, [pc, #496]	@ (801f870 <_dtoa_r+0x5c8>)
 801f680:	f7e0 ffd4 	bl	800062c <__aeabi_dmul>
 801f684:	9c00      	ldr	r4, [sp, #0]
 801f686:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f68a:	4630      	mov	r0, r6
 801f68c:	f7e0 ff64 	bl	8000558 <__aeabi_i2d>
 801f690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801f694:	f7e0 ffca 	bl	800062c <__aeabi_dmul>
 801f698:	2200      	movs	r2, #0
 801f69a:	4b76      	ldr	r3, [pc, #472]	@ (801f874 <_dtoa_r+0x5cc>)
 801f69c:	f7e0 fe10 	bl	80002c0 <__adddf3>
 801f6a0:	4605      	mov	r5, r0
 801f6a2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801f6a6:	2c00      	cmp	r4, #0
 801f6a8:	f040 808d 	bne.w	801f7c6 <_dtoa_r+0x51e>
 801f6ac:	2200      	movs	r2, #0
 801f6ae:	4b72      	ldr	r3, [pc, #456]	@ (801f878 <_dtoa_r+0x5d0>)
 801f6b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f6b4:	f7e0 fe02 	bl	80002bc <__aeabi_dsub>
 801f6b8:	4602      	mov	r2, r0
 801f6ba:	460b      	mov	r3, r1
 801f6bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801f6c0:	462a      	mov	r2, r5
 801f6c2:	4633      	mov	r3, r6
 801f6c4:	f7e1 fa42 	bl	8000b4c <__aeabi_dcmpgt>
 801f6c8:	2800      	cmp	r0, #0
 801f6ca:	f040 828b 	bne.w	801fbe4 <_dtoa_r+0x93c>
 801f6ce:	462a      	mov	r2, r5
 801f6d0:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801f6d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f6d8:	f7e1 fa1a 	bl	8000b10 <__aeabi_dcmplt>
 801f6dc:	2800      	cmp	r0, #0
 801f6de:	f040 8128 	bne.w	801f932 <_dtoa_r+0x68a>
 801f6e2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801f6e6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801f6ea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801f6ec:	2b00      	cmp	r3, #0
 801f6ee:	f2c0 815a 	blt.w	801f9a6 <_dtoa_r+0x6fe>
 801f6f2:	2f0e      	cmp	r7, #14
 801f6f4:	f300 8157 	bgt.w	801f9a6 <_dtoa_r+0x6fe>
 801f6f8:	4b5a      	ldr	r3, [pc, #360]	@ (801f864 <_dtoa_r+0x5bc>)
 801f6fa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801f6fe:	ed93 7b00 	vldr	d7, [r3]
 801f702:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f704:	2b00      	cmp	r3, #0
 801f706:	ed8d 7b00 	vstr	d7, [sp]
 801f70a:	da03      	bge.n	801f714 <_dtoa_r+0x46c>
 801f70c:	9b07      	ldr	r3, [sp, #28]
 801f70e:	2b00      	cmp	r3, #0
 801f710:	f340 8101 	ble.w	801f916 <_dtoa_r+0x66e>
 801f714:	4656      	mov	r6, sl
 801f716:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801f71a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f71e:	4620      	mov	r0, r4
 801f720:	4629      	mov	r1, r5
 801f722:	f7e1 f8ad 	bl	8000880 <__aeabi_ddiv>
 801f726:	f7e1 fa31 	bl	8000b8c <__aeabi_d2iz>
 801f72a:	4680      	mov	r8, r0
 801f72c:	f7e0 ff14 	bl	8000558 <__aeabi_i2d>
 801f730:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f734:	f7e0 ff7a 	bl	800062c <__aeabi_dmul>
 801f738:	4602      	mov	r2, r0
 801f73a:	4620      	mov	r0, r4
 801f73c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801f740:	460b      	mov	r3, r1
 801f742:	4629      	mov	r1, r5
 801f744:	f7e0 fdba 	bl	80002bc <__aeabi_dsub>
 801f748:	9d07      	ldr	r5, [sp, #28]
 801f74a:	f806 4b01 	strb.w	r4, [r6], #1
 801f74e:	eba6 040a 	sub.w	r4, r6, sl
 801f752:	4602      	mov	r2, r0
 801f754:	460b      	mov	r3, r1
 801f756:	42a5      	cmp	r5, r4
 801f758:	f040 8117 	bne.w	801f98a <_dtoa_r+0x6e2>
 801f75c:	f7e0 fdb0 	bl	80002c0 <__adddf3>
 801f760:	4604      	mov	r4, r0
 801f762:	460d      	mov	r5, r1
 801f764:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f768:	f7e1 f9f0 	bl	8000b4c <__aeabi_dcmpgt>
 801f76c:	2800      	cmp	r0, #0
 801f76e:	f040 80f9 	bne.w	801f964 <_dtoa_r+0x6bc>
 801f772:	4620      	mov	r0, r4
 801f774:	4629      	mov	r1, r5
 801f776:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f77a:	f7e1 f9bf 	bl	8000afc <__aeabi_dcmpeq>
 801f77e:	b118      	cbz	r0, 801f788 <_dtoa_r+0x4e0>
 801f780:	f018 0f01 	tst.w	r8, #1
 801f784:	f040 80ee 	bne.w	801f964 <_dtoa_r+0x6bc>
 801f788:	4649      	mov	r1, r9
 801f78a:	4658      	mov	r0, fp
 801f78c:	f000 ff22 	bl	80205d4 <_Bfree>
 801f790:	2300      	movs	r3, #0
 801f792:	3701      	adds	r7, #1
 801f794:	7033      	strb	r3, [r6, #0]
 801f796:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f798:	601f      	str	r7, [r3, #0]
 801f79a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801f79c:	2b00      	cmp	r3, #0
 801f79e:	f000 831d 	beq.w	801fddc <_dtoa_r+0xb34>
 801f7a2:	601e      	str	r6, [r3, #0]
 801f7a4:	e31a      	b.n	801fddc <_dtoa_r+0xb34>
 801f7a6:	07e2      	lsls	r2, r4, #31
 801f7a8:	d505      	bpl.n	801f7b6 <_dtoa_r+0x50e>
 801f7aa:	3601      	adds	r6, #1
 801f7ac:	e9d5 2300 	ldrd	r2, r3, [r5]
 801f7b0:	f7e0 ff3c 	bl	800062c <__aeabi_dmul>
 801f7b4:	2301      	movs	r3, #1
 801f7b6:	1064      	asrs	r4, r4, #1
 801f7b8:	3508      	adds	r5, #8
 801f7ba:	e73f      	b.n	801f63c <_dtoa_r+0x394>
 801f7bc:	2602      	movs	r6, #2
 801f7be:	e742      	b.n	801f646 <_dtoa_r+0x39e>
 801f7c0:	9c07      	ldr	r4, [sp, #28]
 801f7c2:	9704      	str	r7, [sp, #16]
 801f7c4:	e761      	b.n	801f68a <_dtoa_r+0x3e2>
 801f7c6:	4b27      	ldr	r3, [pc, #156]	@ (801f864 <_dtoa_r+0x5bc>)
 801f7c8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801f7ca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801f7ce:	4454      	add	r4, sl
 801f7d0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801f7d4:	2900      	cmp	r1, #0
 801f7d6:	d053      	beq.n	801f880 <_dtoa_r+0x5d8>
 801f7d8:	2000      	movs	r0, #0
 801f7da:	4928      	ldr	r1, [pc, #160]	@ (801f87c <_dtoa_r+0x5d4>)
 801f7dc:	f7e1 f850 	bl	8000880 <__aeabi_ddiv>
 801f7e0:	4633      	mov	r3, r6
 801f7e2:	4656      	mov	r6, sl
 801f7e4:	462a      	mov	r2, r5
 801f7e6:	f7e0 fd69 	bl	80002bc <__aeabi_dsub>
 801f7ea:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801f7ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f7f2:	f7e1 f9cb 	bl	8000b8c <__aeabi_d2iz>
 801f7f6:	4605      	mov	r5, r0
 801f7f8:	f7e0 feae 	bl	8000558 <__aeabi_i2d>
 801f7fc:	4602      	mov	r2, r0
 801f7fe:	460b      	mov	r3, r1
 801f800:	3530      	adds	r5, #48	@ 0x30
 801f802:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f806:	f7e0 fd59 	bl	80002bc <__aeabi_dsub>
 801f80a:	4602      	mov	r2, r0
 801f80c:	460b      	mov	r3, r1
 801f80e:	f806 5b01 	strb.w	r5, [r6], #1
 801f812:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801f816:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801f81a:	f7e1 f979 	bl	8000b10 <__aeabi_dcmplt>
 801f81e:	2800      	cmp	r0, #0
 801f820:	d171      	bne.n	801f906 <_dtoa_r+0x65e>
 801f822:	2000      	movs	r0, #0
 801f824:	4911      	ldr	r1, [pc, #68]	@ (801f86c <_dtoa_r+0x5c4>)
 801f826:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801f82a:	f7e0 fd47 	bl	80002bc <__aeabi_dsub>
 801f82e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801f832:	f7e1 f96d 	bl	8000b10 <__aeabi_dcmplt>
 801f836:	2800      	cmp	r0, #0
 801f838:	f040 8095 	bne.w	801f966 <_dtoa_r+0x6be>
 801f83c:	42a6      	cmp	r6, r4
 801f83e:	f43f af50 	beq.w	801f6e2 <_dtoa_r+0x43a>
 801f842:	2200      	movs	r2, #0
 801f844:	4b0a      	ldr	r3, [pc, #40]	@ (801f870 <_dtoa_r+0x5c8>)
 801f846:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801f84a:	f7e0 feef 	bl	800062c <__aeabi_dmul>
 801f84e:	2200      	movs	r2, #0
 801f850:	4b07      	ldr	r3, [pc, #28]	@ (801f870 <_dtoa_r+0x5c8>)
 801f852:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801f856:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f85a:	f7e0 fee7 	bl	800062c <__aeabi_dmul>
 801f85e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f862:	e7c4      	b.n	801f7ee <_dtoa_r+0x546>
 801f864:	08024740 	.word	0x08024740
 801f868:	08024718 	.word	0x08024718
 801f86c:	3ff00000 	.word	0x3ff00000
 801f870:	40240000 	.word	0x40240000
 801f874:	401c0000 	.word	0x401c0000
 801f878:	40140000 	.word	0x40140000
 801f87c:	3fe00000 	.word	0x3fe00000
 801f880:	4631      	mov	r1, r6
 801f882:	4656      	mov	r6, sl
 801f884:	4628      	mov	r0, r5
 801f886:	f7e0 fed1 	bl	800062c <__aeabi_dmul>
 801f88a:	9415      	str	r4, [sp, #84]	@ 0x54
 801f88c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801f890:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f894:	f7e1 f97a 	bl	8000b8c <__aeabi_d2iz>
 801f898:	4605      	mov	r5, r0
 801f89a:	f7e0 fe5d 	bl	8000558 <__aeabi_i2d>
 801f89e:	4602      	mov	r2, r0
 801f8a0:	3530      	adds	r5, #48	@ 0x30
 801f8a2:	460b      	mov	r3, r1
 801f8a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f8a8:	f7e0 fd08 	bl	80002bc <__aeabi_dsub>
 801f8ac:	f806 5b01 	strb.w	r5, [r6], #1
 801f8b0:	4602      	mov	r2, r0
 801f8b2:	460b      	mov	r3, r1
 801f8b4:	42a6      	cmp	r6, r4
 801f8b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801f8ba:	f04f 0200 	mov.w	r2, #0
 801f8be:	d124      	bne.n	801f90a <_dtoa_r+0x662>
 801f8c0:	4bac      	ldr	r3, [pc, #688]	@ (801fb74 <_dtoa_r+0x8cc>)
 801f8c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801f8c6:	f7e0 fcfb 	bl	80002c0 <__adddf3>
 801f8ca:	4602      	mov	r2, r0
 801f8cc:	460b      	mov	r3, r1
 801f8ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f8d2:	f7e1 f93b 	bl	8000b4c <__aeabi_dcmpgt>
 801f8d6:	2800      	cmp	r0, #0
 801f8d8:	d145      	bne.n	801f966 <_dtoa_r+0x6be>
 801f8da:	2000      	movs	r0, #0
 801f8dc:	49a5      	ldr	r1, [pc, #660]	@ (801fb74 <_dtoa_r+0x8cc>)
 801f8de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801f8e2:	f7e0 fceb 	bl	80002bc <__aeabi_dsub>
 801f8e6:	4602      	mov	r2, r0
 801f8e8:	460b      	mov	r3, r1
 801f8ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f8ee:	f7e1 f90f 	bl	8000b10 <__aeabi_dcmplt>
 801f8f2:	2800      	cmp	r0, #0
 801f8f4:	f43f aef5 	beq.w	801f6e2 <_dtoa_r+0x43a>
 801f8f8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801f8fa:	1e73      	subs	r3, r6, #1
 801f8fc:	9315      	str	r3, [sp, #84]	@ 0x54
 801f8fe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801f902:	2b30      	cmp	r3, #48	@ 0x30
 801f904:	d0f8      	beq.n	801f8f8 <_dtoa_r+0x650>
 801f906:	9f04      	ldr	r7, [sp, #16]
 801f908:	e73e      	b.n	801f788 <_dtoa_r+0x4e0>
 801f90a:	4b9b      	ldr	r3, [pc, #620]	@ (801fb78 <_dtoa_r+0x8d0>)
 801f90c:	f7e0 fe8e 	bl	800062c <__aeabi_dmul>
 801f910:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f914:	e7bc      	b.n	801f890 <_dtoa_r+0x5e8>
 801f916:	d10c      	bne.n	801f932 <_dtoa_r+0x68a>
 801f918:	2200      	movs	r2, #0
 801f91a:	4b98      	ldr	r3, [pc, #608]	@ (801fb7c <_dtoa_r+0x8d4>)
 801f91c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801f920:	f7e0 fe84 	bl	800062c <__aeabi_dmul>
 801f924:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801f928:	f7e1 f906 	bl	8000b38 <__aeabi_dcmpge>
 801f92c:	2800      	cmp	r0, #0
 801f92e:	f000 8157 	beq.w	801fbe0 <_dtoa_r+0x938>
 801f932:	2400      	movs	r4, #0
 801f934:	4625      	mov	r5, r4
 801f936:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f938:	4656      	mov	r6, sl
 801f93a:	43db      	mvns	r3, r3
 801f93c:	9304      	str	r3, [sp, #16]
 801f93e:	2700      	movs	r7, #0
 801f940:	4621      	mov	r1, r4
 801f942:	4658      	mov	r0, fp
 801f944:	f000 fe46 	bl	80205d4 <_Bfree>
 801f948:	2d00      	cmp	r5, #0
 801f94a:	d0dc      	beq.n	801f906 <_dtoa_r+0x65e>
 801f94c:	b12f      	cbz	r7, 801f95a <_dtoa_r+0x6b2>
 801f94e:	42af      	cmp	r7, r5
 801f950:	d003      	beq.n	801f95a <_dtoa_r+0x6b2>
 801f952:	4639      	mov	r1, r7
 801f954:	4658      	mov	r0, fp
 801f956:	f000 fe3d 	bl	80205d4 <_Bfree>
 801f95a:	4629      	mov	r1, r5
 801f95c:	4658      	mov	r0, fp
 801f95e:	f000 fe39 	bl	80205d4 <_Bfree>
 801f962:	e7d0      	b.n	801f906 <_dtoa_r+0x65e>
 801f964:	9704      	str	r7, [sp, #16]
 801f966:	4633      	mov	r3, r6
 801f968:	461e      	mov	r6, r3
 801f96a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801f96e:	2a39      	cmp	r2, #57	@ 0x39
 801f970:	d107      	bne.n	801f982 <_dtoa_r+0x6da>
 801f972:	459a      	cmp	sl, r3
 801f974:	d1f8      	bne.n	801f968 <_dtoa_r+0x6c0>
 801f976:	9a04      	ldr	r2, [sp, #16]
 801f978:	3201      	adds	r2, #1
 801f97a:	9204      	str	r2, [sp, #16]
 801f97c:	2230      	movs	r2, #48	@ 0x30
 801f97e:	f88a 2000 	strb.w	r2, [sl]
 801f982:	781a      	ldrb	r2, [r3, #0]
 801f984:	3201      	adds	r2, #1
 801f986:	701a      	strb	r2, [r3, #0]
 801f988:	e7bd      	b.n	801f906 <_dtoa_r+0x65e>
 801f98a:	2200      	movs	r2, #0
 801f98c:	4b7a      	ldr	r3, [pc, #488]	@ (801fb78 <_dtoa_r+0x8d0>)
 801f98e:	f7e0 fe4d 	bl	800062c <__aeabi_dmul>
 801f992:	2200      	movs	r2, #0
 801f994:	2300      	movs	r3, #0
 801f996:	4604      	mov	r4, r0
 801f998:	460d      	mov	r5, r1
 801f99a:	f7e1 f8af 	bl	8000afc <__aeabi_dcmpeq>
 801f99e:	2800      	cmp	r0, #0
 801f9a0:	f43f aebb 	beq.w	801f71a <_dtoa_r+0x472>
 801f9a4:	e6f0      	b.n	801f788 <_dtoa_r+0x4e0>
 801f9a6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801f9a8:	2a00      	cmp	r2, #0
 801f9aa:	f000 80db 	beq.w	801fb64 <_dtoa_r+0x8bc>
 801f9ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f9b0:	2a01      	cmp	r2, #1
 801f9b2:	f300 80bf 	bgt.w	801fb34 <_dtoa_r+0x88c>
 801f9b6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801f9b8:	2a00      	cmp	r2, #0
 801f9ba:	f000 80b7 	beq.w	801fb2c <_dtoa_r+0x884>
 801f9be:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801f9c2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801f9c4:	4646      	mov	r6, r8
 801f9c6:	9a08      	ldr	r2, [sp, #32]
 801f9c8:	2101      	movs	r1, #1
 801f9ca:	4658      	mov	r0, fp
 801f9cc:	4498      	add	r8, r3
 801f9ce:	441a      	add	r2, r3
 801f9d0:	9208      	str	r2, [sp, #32]
 801f9d2:	f000 feff 	bl	80207d4 <__i2b>
 801f9d6:	4605      	mov	r5, r0
 801f9d8:	b15e      	cbz	r6, 801f9f2 <_dtoa_r+0x74a>
 801f9da:	9b08      	ldr	r3, [sp, #32]
 801f9dc:	2b00      	cmp	r3, #0
 801f9de:	dd08      	ble.n	801f9f2 <_dtoa_r+0x74a>
 801f9e0:	42b3      	cmp	r3, r6
 801f9e2:	9a08      	ldr	r2, [sp, #32]
 801f9e4:	bfa8      	it	ge
 801f9e6:	4633      	movge	r3, r6
 801f9e8:	eba8 0803 	sub.w	r8, r8, r3
 801f9ec:	1af6      	subs	r6, r6, r3
 801f9ee:	1ad3      	subs	r3, r2, r3
 801f9f0:	9308      	str	r3, [sp, #32]
 801f9f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f9f4:	b1f3      	cbz	r3, 801fa34 <_dtoa_r+0x78c>
 801f9f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f9f8:	2b00      	cmp	r3, #0
 801f9fa:	f000 80b7 	beq.w	801fb6c <_dtoa_r+0x8c4>
 801f9fe:	b18c      	cbz	r4, 801fa24 <_dtoa_r+0x77c>
 801fa00:	4629      	mov	r1, r5
 801fa02:	4622      	mov	r2, r4
 801fa04:	4658      	mov	r0, fp
 801fa06:	f000 ffa5 	bl	8020954 <__pow5mult>
 801fa0a:	464a      	mov	r2, r9
 801fa0c:	4601      	mov	r1, r0
 801fa0e:	4605      	mov	r5, r0
 801fa10:	4658      	mov	r0, fp
 801fa12:	f000 fef5 	bl	8020800 <__multiply>
 801fa16:	4649      	mov	r1, r9
 801fa18:	9004      	str	r0, [sp, #16]
 801fa1a:	4658      	mov	r0, fp
 801fa1c:	f000 fdda 	bl	80205d4 <_Bfree>
 801fa20:	9b04      	ldr	r3, [sp, #16]
 801fa22:	4699      	mov	r9, r3
 801fa24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801fa26:	1b1a      	subs	r2, r3, r4
 801fa28:	d004      	beq.n	801fa34 <_dtoa_r+0x78c>
 801fa2a:	4649      	mov	r1, r9
 801fa2c:	4658      	mov	r0, fp
 801fa2e:	f000 ff91 	bl	8020954 <__pow5mult>
 801fa32:	4681      	mov	r9, r0
 801fa34:	2101      	movs	r1, #1
 801fa36:	4658      	mov	r0, fp
 801fa38:	f000 fecc 	bl	80207d4 <__i2b>
 801fa3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801fa3e:	4604      	mov	r4, r0
 801fa40:	2b00      	cmp	r3, #0
 801fa42:	f000 81cf 	beq.w	801fde4 <_dtoa_r+0xb3c>
 801fa46:	461a      	mov	r2, r3
 801fa48:	4601      	mov	r1, r0
 801fa4a:	4658      	mov	r0, fp
 801fa4c:	f000 ff82 	bl	8020954 <__pow5mult>
 801fa50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fa52:	4604      	mov	r4, r0
 801fa54:	2b01      	cmp	r3, #1
 801fa56:	f300 8095 	bgt.w	801fb84 <_dtoa_r+0x8dc>
 801fa5a:	9b02      	ldr	r3, [sp, #8]
 801fa5c:	2b00      	cmp	r3, #0
 801fa5e:	f040 8087 	bne.w	801fb70 <_dtoa_r+0x8c8>
 801fa62:	9b03      	ldr	r3, [sp, #12]
 801fa64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801fa68:	2b00      	cmp	r3, #0
 801fa6a:	f040 8089 	bne.w	801fb80 <_dtoa_r+0x8d8>
 801fa6e:	9b03      	ldr	r3, [sp, #12]
 801fa70:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801fa74:	0d1b      	lsrs	r3, r3, #20
 801fa76:	051b      	lsls	r3, r3, #20
 801fa78:	b12b      	cbz	r3, 801fa86 <_dtoa_r+0x7de>
 801fa7a:	9b08      	ldr	r3, [sp, #32]
 801fa7c:	f108 0801 	add.w	r8, r8, #1
 801fa80:	3301      	adds	r3, #1
 801fa82:	9308      	str	r3, [sp, #32]
 801fa84:	2301      	movs	r3, #1
 801fa86:	930a      	str	r3, [sp, #40]	@ 0x28
 801fa88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801fa8a:	2b00      	cmp	r3, #0
 801fa8c:	f000 81b0 	beq.w	801fdf0 <_dtoa_r+0xb48>
 801fa90:	6923      	ldr	r3, [r4, #16]
 801fa92:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801fa96:	6918      	ldr	r0, [r3, #16]
 801fa98:	f000 fe50 	bl	802073c <__hi0bits>
 801fa9c:	f1c0 0020 	rsb	r0, r0, #32
 801faa0:	9b08      	ldr	r3, [sp, #32]
 801faa2:	4418      	add	r0, r3
 801faa4:	f010 001f 	ands.w	r0, r0, #31
 801faa8:	d077      	beq.n	801fb9a <_dtoa_r+0x8f2>
 801faaa:	f1c0 0320 	rsb	r3, r0, #32
 801faae:	2b04      	cmp	r3, #4
 801fab0:	dd6b      	ble.n	801fb8a <_dtoa_r+0x8e2>
 801fab2:	f1c0 001c 	rsb	r0, r0, #28
 801fab6:	9b08      	ldr	r3, [sp, #32]
 801fab8:	4480      	add	r8, r0
 801faba:	4403      	add	r3, r0
 801fabc:	4406      	add	r6, r0
 801fabe:	9308      	str	r3, [sp, #32]
 801fac0:	f1b8 0f00 	cmp.w	r8, #0
 801fac4:	dd05      	ble.n	801fad2 <_dtoa_r+0x82a>
 801fac6:	4649      	mov	r1, r9
 801fac8:	4642      	mov	r2, r8
 801faca:	4658      	mov	r0, fp
 801facc:	f000 ff9c 	bl	8020a08 <__lshift>
 801fad0:	4681      	mov	r9, r0
 801fad2:	9b08      	ldr	r3, [sp, #32]
 801fad4:	2b00      	cmp	r3, #0
 801fad6:	dd05      	ble.n	801fae4 <_dtoa_r+0x83c>
 801fad8:	4621      	mov	r1, r4
 801fada:	461a      	mov	r2, r3
 801fadc:	4658      	mov	r0, fp
 801fade:	f000 ff93 	bl	8020a08 <__lshift>
 801fae2:	4604      	mov	r4, r0
 801fae4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801fae6:	2b00      	cmp	r3, #0
 801fae8:	d059      	beq.n	801fb9e <_dtoa_r+0x8f6>
 801faea:	4621      	mov	r1, r4
 801faec:	4648      	mov	r0, r9
 801faee:	f000 fff7 	bl	8020ae0 <__mcmp>
 801faf2:	2800      	cmp	r0, #0
 801faf4:	da53      	bge.n	801fb9e <_dtoa_r+0x8f6>
 801faf6:	1e7b      	subs	r3, r7, #1
 801faf8:	4649      	mov	r1, r9
 801fafa:	220a      	movs	r2, #10
 801fafc:	4658      	mov	r0, fp
 801fafe:	9304      	str	r3, [sp, #16]
 801fb00:	2300      	movs	r3, #0
 801fb02:	f000 fd89 	bl	8020618 <__multadd>
 801fb06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801fb08:	4681      	mov	r9, r0
 801fb0a:	2b00      	cmp	r3, #0
 801fb0c:	f000 8172 	beq.w	801fdf4 <_dtoa_r+0xb4c>
 801fb10:	2300      	movs	r3, #0
 801fb12:	4629      	mov	r1, r5
 801fb14:	220a      	movs	r2, #10
 801fb16:	4658      	mov	r0, fp
 801fb18:	f000 fd7e 	bl	8020618 <__multadd>
 801fb1c:	9b00      	ldr	r3, [sp, #0]
 801fb1e:	4605      	mov	r5, r0
 801fb20:	2b00      	cmp	r3, #0
 801fb22:	dc67      	bgt.n	801fbf4 <_dtoa_r+0x94c>
 801fb24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fb26:	2b02      	cmp	r3, #2
 801fb28:	dc41      	bgt.n	801fbae <_dtoa_r+0x906>
 801fb2a:	e063      	b.n	801fbf4 <_dtoa_r+0x94c>
 801fb2c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801fb2e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801fb32:	e746      	b.n	801f9c2 <_dtoa_r+0x71a>
 801fb34:	9b07      	ldr	r3, [sp, #28]
 801fb36:	1e5c      	subs	r4, r3, #1
 801fb38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801fb3a:	42a3      	cmp	r3, r4
 801fb3c:	bfb7      	itett	lt
 801fb3e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801fb40:	1b1c      	subge	r4, r3, r4
 801fb42:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801fb44:	1ae3      	sublt	r3, r4, r3
 801fb46:	bfbe      	ittt	lt
 801fb48:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801fb4a:	2400      	movlt	r4, #0
 801fb4c:	18d2      	addlt	r2, r2, r3
 801fb4e:	9b07      	ldr	r3, [sp, #28]
 801fb50:	bfb8      	it	lt
 801fb52:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801fb54:	2b00      	cmp	r3, #0
 801fb56:	bfb5      	itete	lt
 801fb58:	eba8 0603 	sublt.w	r6, r8, r3
 801fb5c:	4646      	movge	r6, r8
 801fb5e:	2300      	movlt	r3, #0
 801fb60:	9b07      	ldrge	r3, [sp, #28]
 801fb62:	e730      	b.n	801f9c6 <_dtoa_r+0x71e>
 801fb64:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801fb66:	4646      	mov	r6, r8
 801fb68:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801fb6a:	e735      	b.n	801f9d8 <_dtoa_r+0x730>
 801fb6c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801fb6e:	e75c      	b.n	801fa2a <_dtoa_r+0x782>
 801fb70:	2300      	movs	r3, #0
 801fb72:	e788      	b.n	801fa86 <_dtoa_r+0x7de>
 801fb74:	3fe00000 	.word	0x3fe00000
 801fb78:	40240000 	.word	0x40240000
 801fb7c:	40140000 	.word	0x40140000
 801fb80:	9b02      	ldr	r3, [sp, #8]
 801fb82:	e780      	b.n	801fa86 <_dtoa_r+0x7de>
 801fb84:	2300      	movs	r3, #0
 801fb86:	930a      	str	r3, [sp, #40]	@ 0x28
 801fb88:	e782      	b.n	801fa90 <_dtoa_r+0x7e8>
 801fb8a:	d099      	beq.n	801fac0 <_dtoa_r+0x818>
 801fb8c:	331c      	adds	r3, #28
 801fb8e:	9a08      	ldr	r2, [sp, #32]
 801fb90:	441a      	add	r2, r3
 801fb92:	4498      	add	r8, r3
 801fb94:	441e      	add	r6, r3
 801fb96:	9208      	str	r2, [sp, #32]
 801fb98:	e792      	b.n	801fac0 <_dtoa_r+0x818>
 801fb9a:	4603      	mov	r3, r0
 801fb9c:	e7f6      	b.n	801fb8c <_dtoa_r+0x8e4>
 801fb9e:	9b07      	ldr	r3, [sp, #28]
 801fba0:	9704      	str	r7, [sp, #16]
 801fba2:	2b00      	cmp	r3, #0
 801fba4:	dc20      	bgt.n	801fbe8 <_dtoa_r+0x940>
 801fba6:	9300      	str	r3, [sp, #0]
 801fba8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fbaa:	2b02      	cmp	r3, #2
 801fbac:	dd1e      	ble.n	801fbec <_dtoa_r+0x944>
 801fbae:	9b00      	ldr	r3, [sp, #0]
 801fbb0:	2b00      	cmp	r3, #0
 801fbb2:	f47f aec0 	bne.w	801f936 <_dtoa_r+0x68e>
 801fbb6:	4621      	mov	r1, r4
 801fbb8:	2205      	movs	r2, #5
 801fbba:	4658      	mov	r0, fp
 801fbbc:	f000 fd2c 	bl	8020618 <__multadd>
 801fbc0:	4601      	mov	r1, r0
 801fbc2:	4604      	mov	r4, r0
 801fbc4:	4648      	mov	r0, r9
 801fbc6:	f000 ff8b 	bl	8020ae0 <__mcmp>
 801fbca:	2800      	cmp	r0, #0
 801fbcc:	f77f aeb3 	ble.w	801f936 <_dtoa_r+0x68e>
 801fbd0:	2331      	movs	r3, #49	@ 0x31
 801fbd2:	4656      	mov	r6, sl
 801fbd4:	f806 3b01 	strb.w	r3, [r6], #1
 801fbd8:	9b04      	ldr	r3, [sp, #16]
 801fbda:	3301      	adds	r3, #1
 801fbdc:	9304      	str	r3, [sp, #16]
 801fbde:	e6ae      	b.n	801f93e <_dtoa_r+0x696>
 801fbe0:	9c07      	ldr	r4, [sp, #28]
 801fbe2:	9704      	str	r7, [sp, #16]
 801fbe4:	4625      	mov	r5, r4
 801fbe6:	e7f3      	b.n	801fbd0 <_dtoa_r+0x928>
 801fbe8:	9b07      	ldr	r3, [sp, #28]
 801fbea:	9300      	str	r3, [sp, #0]
 801fbec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801fbee:	2b00      	cmp	r3, #0
 801fbf0:	f000 8104 	beq.w	801fdfc <_dtoa_r+0xb54>
 801fbf4:	2e00      	cmp	r6, #0
 801fbf6:	dd05      	ble.n	801fc04 <_dtoa_r+0x95c>
 801fbf8:	4629      	mov	r1, r5
 801fbfa:	4632      	mov	r2, r6
 801fbfc:	4658      	mov	r0, fp
 801fbfe:	f000 ff03 	bl	8020a08 <__lshift>
 801fc02:	4605      	mov	r5, r0
 801fc04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801fc06:	2b00      	cmp	r3, #0
 801fc08:	d05a      	beq.n	801fcc0 <_dtoa_r+0xa18>
 801fc0a:	6869      	ldr	r1, [r5, #4]
 801fc0c:	4658      	mov	r0, fp
 801fc0e:	f000 fca1 	bl	8020554 <_Balloc>
 801fc12:	4606      	mov	r6, r0
 801fc14:	b928      	cbnz	r0, 801fc22 <_dtoa_r+0x97a>
 801fc16:	4b84      	ldr	r3, [pc, #528]	@ (801fe28 <_dtoa_r+0xb80>)
 801fc18:	4602      	mov	r2, r0
 801fc1a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801fc1e:	f7ff bb5a 	b.w	801f2d6 <_dtoa_r+0x2e>
 801fc22:	692a      	ldr	r2, [r5, #16]
 801fc24:	f105 010c 	add.w	r1, r5, #12
 801fc28:	300c      	adds	r0, #12
 801fc2a:	3202      	adds	r2, #2
 801fc2c:	0092      	lsls	r2, r2, #2
 801fc2e:	f7ff fa72 	bl	801f116 <memcpy>
 801fc32:	2201      	movs	r2, #1
 801fc34:	4631      	mov	r1, r6
 801fc36:	4658      	mov	r0, fp
 801fc38:	f000 fee6 	bl	8020a08 <__lshift>
 801fc3c:	f10a 0301 	add.w	r3, sl, #1
 801fc40:	462f      	mov	r7, r5
 801fc42:	4605      	mov	r5, r0
 801fc44:	9307      	str	r3, [sp, #28]
 801fc46:	9b00      	ldr	r3, [sp, #0]
 801fc48:	4453      	add	r3, sl
 801fc4a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801fc4c:	9b02      	ldr	r3, [sp, #8]
 801fc4e:	f003 0301 	and.w	r3, r3, #1
 801fc52:	930a      	str	r3, [sp, #40]	@ 0x28
 801fc54:	9b07      	ldr	r3, [sp, #28]
 801fc56:	4621      	mov	r1, r4
 801fc58:	4648      	mov	r0, r9
 801fc5a:	3b01      	subs	r3, #1
 801fc5c:	9300      	str	r3, [sp, #0]
 801fc5e:	f7ff fa93 	bl	801f188 <quorem>
 801fc62:	4639      	mov	r1, r7
 801fc64:	9002      	str	r0, [sp, #8]
 801fc66:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801fc6a:	4648      	mov	r0, r9
 801fc6c:	f000 ff38 	bl	8020ae0 <__mcmp>
 801fc70:	462a      	mov	r2, r5
 801fc72:	9008      	str	r0, [sp, #32]
 801fc74:	4621      	mov	r1, r4
 801fc76:	4658      	mov	r0, fp
 801fc78:	f000 ff4e 	bl	8020b18 <__mdiff>
 801fc7c:	68c2      	ldr	r2, [r0, #12]
 801fc7e:	4606      	mov	r6, r0
 801fc80:	bb02      	cbnz	r2, 801fcc4 <_dtoa_r+0xa1c>
 801fc82:	4601      	mov	r1, r0
 801fc84:	4648      	mov	r0, r9
 801fc86:	f000 ff2b 	bl	8020ae0 <__mcmp>
 801fc8a:	4602      	mov	r2, r0
 801fc8c:	4631      	mov	r1, r6
 801fc8e:	4658      	mov	r0, fp
 801fc90:	920e      	str	r2, [sp, #56]	@ 0x38
 801fc92:	f000 fc9f 	bl	80205d4 <_Bfree>
 801fc96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fc98:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801fc9a:	9e07      	ldr	r6, [sp, #28]
 801fc9c:	ea43 0102 	orr.w	r1, r3, r2
 801fca0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801fca2:	4319      	orrs	r1, r3
 801fca4:	d110      	bne.n	801fcc8 <_dtoa_r+0xa20>
 801fca6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801fcaa:	d029      	beq.n	801fd00 <_dtoa_r+0xa58>
 801fcac:	9b08      	ldr	r3, [sp, #32]
 801fcae:	2b00      	cmp	r3, #0
 801fcb0:	dd02      	ble.n	801fcb8 <_dtoa_r+0xa10>
 801fcb2:	9b02      	ldr	r3, [sp, #8]
 801fcb4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 801fcb8:	9b00      	ldr	r3, [sp, #0]
 801fcba:	f883 8000 	strb.w	r8, [r3]
 801fcbe:	e63f      	b.n	801f940 <_dtoa_r+0x698>
 801fcc0:	4628      	mov	r0, r5
 801fcc2:	e7bb      	b.n	801fc3c <_dtoa_r+0x994>
 801fcc4:	2201      	movs	r2, #1
 801fcc6:	e7e1      	b.n	801fc8c <_dtoa_r+0x9e4>
 801fcc8:	9b08      	ldr	r3, [sp, #32]
 801fcca:	2b00      	cmp	r3, #0
 801fccc:	db04      	blt.n	801fcd8 <_dtoa_r+0xa30>
 801fcce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801fcd0:	430b      	orrs	r3, r1
 801fcd2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fcd4:	430b      	orrs	r3, r1
 801fcd6:	d120      	bne.n	801fd1a <_dtoa_r+0xa72>
 801fcd8:	2a00      	cmp	r2, #0
 801fcda:	dded      	ble.n	801fcb8 <_dtoa_r+0xa10>
 801fcdc:	4649      	mov	r1, r9
 801fcde:	2201      	movs	r2, #1
 801fce0:	4658      	mov	r0, fp
 801fce2:	f000 fe91 	bl	8020a08 <__lshift>
 801fce6:	4621      	mov	r1, r4
 801fce8:	4681      	mov	r9, r0
 801fcea:	f000 fef9 	bl	8020ae0 <__mcmp>
 801fcee:	2800      	cmp	r0, #0
 801fcf0:	dc03      	bgt.n	801fcfa <_dtoa_r+0xa52>
 801fcf2:	d1e1      	bne.n	801fcb8 <_dtoa_r+0xa10>
 801fcf4:	f018 0f01 	tst.w	r8, #1
 801fcf8:	d0de      	beq.n	801fcb8 <_dtoa_r+0xa10>
 801fcfa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801fcfe:	d1d8      	bne.n	801fcb2 <_dtoa_r+0xa0a>
 801fd00:	2339      	movs	r3, #57	@ 0x39
 801fd02:	9a00      	ldr	r2, [sp, #0]
 801fd04:	7013      	strb	r3, [r2, #0]
 801fd06:	4633      	mov	r3, r6
 801fd08:	461e      	mov	r6, r3
 801fd0a:	3b01      	subs	r3, #1
 801fd0c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801fd10:	2a39      	cmp	r2, #57	@ 0x39
 801fd12:	d052      	beq.n	801fdba <_dtoa_r+0xb12>
 801fd14:	3201      	adds	r2, #1
 801fd16:	701a      	strb	r2, [r3, #0]
 801fd18:	e612      	b.n	801f940 <_dtoa_r+0x698>
 801fd1a:	2a00      	cmp	r2, #0
 801fd1c:	dd07      	ble.n	801fd2e <_dtoa_r+0xa86>
 801fd1e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801fd22:	d0ed      	beq.n	801fd00 <_dtoa_r+0xa58>
 801fd24:	f108 0301 	add.w	r3, r8, #1
 801fd28:	9a00      	ldr	r2, [sp, #0]
 801fd2a:	7013      	strb	r3, [r2, #0]
 801fd2c:	e608      	b.n	801f940 <_dtoa_r+0x698>
 801fd2e:	9b07      	ldr	r3, [sp, #28]
 801fd30:	9a07      	ldr	r2, [sp, #28]
 801fd32:	f803 8c01 	strb.w	r8, [r3, #-1]
 801fd36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801fd38:	4293      	cmp	r3, r2
 801fd3a:	d028      	beq.n	801fd8e <_dtoa_r+0xae6>
 801fd3c:	4649      	mov	r1, r9
 801fd3e:	2300      	movs	r3, #0
 801fd40:	220a      	movs	r2, #10
 801fd42:	4658      	mov	r0, fp
 801fd44:	f000 fc68 	bl	8020618 <__multadd>
 801fd48:	42af      	cmp	r7, r5
 801fd4a:	4681      	mov	r9, r0
 801fd4c:	f04f 0300 	mov.w	r3, #0
 801fd50:	f04f 020a 	mov.w	r2, #10
 801fd54:	4639      	mov	r1, r7
 801fd56:	4658      	mov	r0, fp
 801fd58:	d107      	bne.n	801fd6a <_dtoa_r+0xac2>
 801fd5a:	f000 fc5d 	bl	8020618 <__multadd>
 801fd5e:	4607      	mov	r7, r0
 801fd60:	4605      	mov	r5, r0
 801fd62:	9b07      	ldr	r3, [sp, #28]
 801fd64:	3301      	adds	r3, #1
 801fd66:	9307      	str	r3, [sp, #28]
 801fd68:	e774      	b.n	801fc54 <_dtoa_r+0x9ac>
 801fd6a:	f000 fc55 	bl	8020618 <__multadd>
 801fd6e:	4629      	mov	r1, r5
 801fd70:	4607      	mov	r7, r0
 801fd72:	2300      	movs	r3, #0
 801fd74:	220a      	movs	r2, #10
 801fd76:	4658      	mov	r0, fp
 801fd78:	f000 fc4e 	bl	8020618 <__multadd>
 801fd7c:	4605      	mov	r5, r0
 801fd7e:	e7f0      	b.n	801fd62 <_dtoa_r+0xaba>
 801fd80:	9b00      	ldr	r3, [sp, #0]
 801fd82:	2700      	movs	r7, #0
 801fd84:	2b00      	cmp	r3, #0
 801fd86:	bfcc      	ite	gt
 801fd88:	461e      	movgt	r6, r3
 801fd8a:	2601      	movle	r6, #1
 801fd8c:	4456      	add	r6, sl
 801fd8e:	4649      	mov	r1, r9
 801fd90:	2201      	movs	r2, #1
 801fd92:	4658      	mov	r0, fp
 801fd94:	f000 fe38 	bl	8020a08 <__lshift>
 801fd98:	4621      	mov	r1, r4
 801fd9a:	4681      	mov	r9, r0
 801fd9c:	f000 fea0 	bl	8020ae0 <__mcmp>
 801fda0:	2800      	cmp	r0, #0
 801fda2:	dcb0      	bgt.n	801fd06 <_dtoa_r+0xa5e>
 801fda4:	d102      	bne.n	801fdac <_dtoa_r+0xb04>
 801fda6:	f018 0f01 	tst.w	r8, #1
 801fdaa:	d1ac      	bne.n	801fd06 <_dtoa_r+0xa5e>
 801fdac:	4633      	mov	r3, r6
 801fdae:	461e      	mov	r6, r3
 801fdb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801fdb4:	2a30      	cmp	r2, #48	@ 0x30
 801fdb6:	d0fa      	beq.n	801fdae <_dtoa_r+0xb06>
 801fdb8:	e5c2      	b.n	801f940 <_dtoa_r+0x698>
 801fdba:	459a      	cmp	sl, r3
 801fdbc:	d1a4      	bne.n	801fd08 <_dtoa_r+0xa60>
 801fdbe:	9b04      	ldr	r3, [sp, #16]
 801fdc0:	3301      	adds	r3, #1
 801fdc2:	9304      	str	r3, [sp, #16]
 801fdc4:	2331      	movs	r3, #49	@ 0x31
 801fdc6:	f88a 3000 	strb.w	r3, [sl]
 801fdca:	e5b9      	b.n	801f940 <_dtoa_r+0x698>
 801fdcc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801fdce:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801fe2c <_dtoa_r+0xb84>
 801fdd2:	b11b      	cbz	r3, 801fddc <_dtoa_r+0xb34>
 801fdd4:	f10a 0308 	add.w	r3, sl, #8
 801fdd8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801fdda:	6013      	str	r3, [r2, #0]
 801fddc:	4650      	mov	r0, sl
 801fdde:	b019      	add	sp, #100	@ 0x64
 801fde0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fde4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fde6:	2b01      	cmp	r3, #1
 801fde8:	f77f ae37 	ble.w	801fa5a <_dtoa_r+0x7b2>
 801fdec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801fdee:	930a      	str	r3, [sp, #40]	@ 0x28
 801fdf0:	2001      	movs	r0, #1
 801fdf2:	e655      	b.n	801faa0 <_dtoa_r+0x7f8>
 801fdf4:	9b00      	ldr	r3, [sp, #0]
 801fdf6:	2b00      	cmp	r3, #0
 801fdf8:	f77f aed6 	ble.w	801fba8 <_dtoa_r+0x900>
 801fdfc:	4656      	mov	r6, sl
 801fdfe:	4621      	mov	r1, r4
 801fe00:	4648      	mov	r0, r9
 801fe02:	f7ff f9c1 	bl	801f188 <quorem>
 801fe06:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801fe0a:	9b00      	ldr	r3, [sp, #0]
 801fe0c:	f806 8b01 	strb.w	r8, [r6], #1
 801fe10:	eba6 020a 	sub.w	r2, r6, sl
 801fe14:	4293      	cmp	r3, r2
 801fe16:	ddb3      	ble.n	801fd80 <_dtoa_r+0xad8>
 801fe18:	4649      	mov	r1, r9
 801fe1a:	2300      	movs	r3, #0
 801fe1c:	220a      	movs	r2, #10
 801fe1e:	4658      	mov	r0, fp
 801fe20:	f000 fbfa 	bl	8020618 <__multadd>
 801fe24:	4681      	mov	r9, r0
 801fe26:	e7ea      	b.n	801fdfe <_dtoa_r+0xb56>
 801fe28:	08024642 	.word	0x08024642
 801fe2c:	080245dd 	.word	0x080245dd

0801fe30 <_free_r>:
 801fe30:	b538      	push	{r3, r4, r5, lr}
 801fe32:	4605      	mov	r5, r0
 801fe34:	2900      	cmp	r1, #0
 801fe36:	d041      	beq.n	801febc <_free_r+0x8c>
 801fe38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801fe3c:	1f0c      	subs	r4, r1, #4
 801fe3e:	2b00      	cmp	r3, #0
 801fe40:	bfb8      	it	lt
 801fe42:	18e4      	addlt	r4, r4, r3
 801fe44:	f7fd f836 	bl	801ceb4 <__malloc_lock>
 801fe48:	4a1d      	ldr	r2, [pc, #116]	@ (801fec0 <_free_r+0x90>)
 801fe4a:	6813      	ldr	r3, [r2, #0]
 801fe4c:	b933      	cbnz	r3, 801fe5c <_free_r+0x2c>
 801fe4e:	6063      	str	r3, [r4, #4]
 801fe50:	6014      	str	r4, [r2, #0]
 801fe52:	4628      	mov	r0, r5
 801fe54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801fe58:	f7fd b832 	b.w	801cec0 <__malloc_unlock>
 801fe5c:	42a3      	cmp	r3, r4
 801fe5e:	d908      	bls.n	801fe72 <_free_r+0x42>
 801fe60:	6820      	ldr	r0, [r4, #0]
 801fe62:	1821      	adds	r1, r4, r0
 801fe64:	428b      	cmp	r3, r1
 801fe66:	bf01      	itttt	eq
 801fe68:	6819      	ldreq	r1, [r3, #0]
 801fe6a:	685b      	ldreq	r3, [r3, #4]
 801fe6c:	1809      	addeq	r1, r1, r0
 801fe6e:	6021      	streq	r1, [r4, #0]
 801fe70:	e7ed      	b.n	801fe4e <_free_r+0x1e>
 801fe72:	461a      	mov	r2, r3
 801fe74:	685b      	ldr	r3, [r3, #4]
 801fe76:	b10b      	cbz	r3, 801fe7c <_free_r+0x4c>
 801fe78:	42a3      	cmp	r3, r4
 801fe7a:	d9fa      	bls.n	801fe72 <_free_r+0x42>
 801fe7c:	6811      	ldr	r1, [r2, #0]
 801fe7e:	1850      	adds	r0, r2, r1
 801fe80:	42a0      	cmp	r0, r4
 801fe82:	d10b      	bne.n	801fe9c <_free_r+0x6c>
 801fe84:	6820      	ldr	r0, [r4, #0]
 801fe86:	4401      	add	r1, r0
 801fe88:	1850      	adds	r0, r2, r1
 801fe8a:	6011      	str	r1, [r2, #0]
 801fe8c:	4283      	cmp	r3, r0
 801fe8e:	d1e0      	bne.n	801fe52 <_free_r+0x22>
 801fe90:	6818      	ldr	r0, [r3, #0]
 801fe92:	685b      	ldr	r3, [r3, #4]
 801fe94:	4408      	add	r0, r1
 801fe96:	6053      	str	r3, [r2, #4]
 801fe98:	6010      	str	r0, [r2, #0]
 801fe9a:	e7da      	b.n	801fe52 <_free_r+0x22>
 801fe9c:	d902      	bls.n	801fea4 <_free_r+0x74>
 801fe9e:	230c      	movs	r3, #12
 801fea0:	602b      	str	r3, [r5, #0]
 801fea2:	e7d6      	b.n	801fe52 <_free_r+0x22>
 801fea4:	6820      	ldr	r0, [r4, #0]
 801fea6:	1821      	adds	r1, r4, r0
 801fea8:	428b      	cmp	r3, r1
 801feaa:	bf02      	ittt	eq
 801feac:	6819      	ldreq	r1, [r3, #0]
 801feae:	685b      	ldreq	r3, [r3, #4]
 801feb0:	1809      	addeq	r1, r1, r0
 801feb2:	6063      	str	r3, [r4, #4]
 801feb4:	bf08      	it	eq
 801feb6:	6021      	streq	r1, [r4, #0]
 801feb8:	6054      	str	r4, [r2, #4]
 801feba:	e7ca      	b.n	801fe52 <_free_r+0x22>
 801febc:	bd38      	pop	{r3, r4, r5, pc}
 801febe:	bf00      	nop
 801fec0:	20015694 	.word	0x20015694

0801fec4 <rshift>:
 801fec4:	6903      	ldr	r3, [r0, #16]
 801fec6:	114a      	asrs	r2, r1, #5
 801fec8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801fecc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801fed0:	f100 0414 	add.w	r4, r0, #20
 801fed4:	dd45      	ble.n	801ff62 <rshift+0x9e>
 801fed6:	f011 011f 	ands.w	r1, r1, #31
 801feda:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801fede:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801fee2:	d10c      	bne.n	801fefe <rshift+0x3a>
 801fee4:	f100 0710 	add.w	r7, r0, #16
 801fee8:	4629      	mov	r1, r5
 801feea:	42b1      	cmp	r1, r6
 801feec:	d334      	bcc.n	801ff58 <rshift+0x94>
 801feee:	1a9b      	subs	r3, r3, r2
 801fef0:	1eea      	subs	r2, r5, #3
 801fef2:	009b      	lsls	r3, r3, #2
 801fef4:	4296      	cmp	r6, r2
 801fef6:	bf38      	it	cc
 801fef8:	2300      	movcc	r3, #0
 801fefa:	4423      	add	r3, r4
 801fefc:	e015      	b.n	801ff2a <rshift+0x66>
 801fefe:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801ff02:	f1c1 0820 	rsb	r8, r1, #32
 801ff06:	f105 0e04 	add.w	lr, r5, #4
 801ff0a:	46a1      	mov	r9, r4
 801ff0c:	40cf      	lsrs	r7, r1
 801ff0e:	4576      	cmp	r6, lr
 801ff10:	46f4      	mov	ip, lr
 801ff12:	d815      	bhi.n	801ff40 <rshift+0x7c>
 801ff14:	1a9a      	subs	r2, r3, r2
 801ff16:	3501      	adds	r5, #1
 801ff18:	0092      	lsls	r2, r2, #2
 801ff1a:	3a04      	subs	r2, #4
 801ff1c:	42ae      	cmp	r6, r5
 801ff1e:	bf38      	it	cc
 801ff20:	2200      	movcc	r2, #0
 801ff22:	18a3      	adds	r3, r4, r2
 801ff24:	50a7      	str	r7, [r4, r2]
 801ff26:	b107      	cbz	r7, 801ff2a <rshift+0x66>
 801ff28:	3304      	adds	r3, #4
 801ff2a:	1b1a      	subs	r2, r3, r4
 801ff2c:	42a3      	cmp	r3, r4
 801ff2e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801ff32:	bf08      	it	eq
 801ff34:	2300      	moveq	r3, #0
 801ff36:	6102      	str	r2, [r0, #16]
 801ff38:	bf08      	it	eq
 801ff3a:	6143      	streq	r3, [r0, #20]
 801ff3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ff40:	f8dc c000 	ldr.w	ip, [ip]
 801ff44:	fa0c fc08 	lsl.w	ip, ip, r8
 801ff48:	ea4c 0707 	orr.w	r7, ip, r7
 801ff4c:	f849 7b04 	str.w	r7, [r9], #4
 801ff50:	f85e 7b04 	ldr.w	r7, [lr], #4
 801ff54:	40cf      	lsrs	r7, r1
 801ff56:	e7da      	b.n	801ff0e <rshift+0x4a>
 801ff58:	f851 cb04 	ldr.w	ip, [r1], #4
 801ff5c:	f847 cf04 	str.w	ip, [r7, #4]!
 801ff60:	e7c3      	b.n	801feea <rshift+0x26>
 801ff62:	4623      	mov	r3, r4
 801ff64:	e7e1      	b.n	801ff2a <rshift+0x66>

0801ff66 <__hexdig_fun>:
 801ff66:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801ff6a:	2b09      	cmp	r3, #9
 801ff6c:	d802      	bhi.n	801ff74 <__hexdig_fun+0xe>
 801ff6e:	3820      	subs	r0, #32
 801ff70:	b2c0      	uxtb	r0, r0
 801ff72:	4770      	bx	lr
 801ff74:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801ff78:	2b05      	cmp	r3, #5
 801ff7a:	d801      	bhi.n	801ff80 <__hexdig_fun+0x1a>
 801ff7c:	3847      	subs	r0, #71	@ 0x47
 801ff7e:	e7f7      	b.n	801ff70 <__hexdig_fun+0xa>
 801ff80:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801ff84:	2b05      	cmp	r3, #5
 801ff86:	d801      	bhi.n	801ff8c <__hexdig_fun+0x26>
 801ff88:	3827      	subs	r0, #39	@ 0x27
 801ff8a:	e7f1      	b.n	801ff70 <__hexdig_fun+0xa>
 801ff8c:	2000      	movs	r0, #0
 801ff8e:	4770      	bx	lr

0801ff90 <__gethex>:
 801ff90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ff94:	b085      	sub	sp, #20
 801ff96:	468a      	mov	sl, r1
 801ff98:	4690      	mov	r8, r2
 801ff9a:	9302      	str	r3, [sp, #8]
 801ff9c:	680b      	ldr	r3, [r1, #0]
 801ff9e:	9001      	str	r0, [sp, #4]
 801ffa0:	1c9c      	adds	r4, r3, #2
 801ffa2:	46a1      	mov	r9, r4
 801ffa4:	f814 0b01 	ldrb.w	r0, [r4], #1
 801ffa8:	2830      	cmp	r0, #48	@ 0x30
 801ffaa:	d0fa      	beq.n	801ffa2 <__gethex+0x12>
 801ffac:	eba9 0303 	sub.w	r3, r9, r3
 801ffb0:	f1a3 0b02 	sub.w	fp, r3, #2
 801ffb4:	f7ff ffd7 	bl	801ff66 <__hexdig_fun>
 801ffb8:	4605      	mov	r5, r0
 801ffba:	2800      	cmp	r0, #0
 801ffbc:	d166      	bne.n	802008c <__gethex+0xfc>
 801ffbe:	2201      	movs	r2, #1
 801ffc0:	499e      	ldr	r1, [pc, #632]	@ (802023c <__gethex+0x2ac>)
 801ffc2:	4648      	mov	r0, r9
 801ffc4:	f7fe ff73 	bl	801eeae <strncmp>
 801ffc8:	4607      	mov	r7, r0
 801ffca:	2800      	cmp	r0, #0
 801ffcc:	d165      	bne.n	802009a <__gethex+0x10a>
 801ffce:	f899 0001 	ldrb.w	r0, [r9, #1]
 801ffd2:	4626      	mov	r6, r4
 801ffd4:	f7ff ffc7 	bl	801ff66 <__hexdig_fun>
 801ffd8:	2800      	cmp	r0, #0
 801ffda:	d060      	beq.n	802009e <__gethex+0x10e>
 801ffdc:	4623      	mov	r3, r4
 801ffde:	7818      	ldrb	r0, [r3, #0]
 801ffe0:	4699      	mov	r9, r3
 801ffe2:	3301      	adds	r3, #1
 801ffe4:	2830      	cmp	r0, #48	@ 0x30
 801ffe6:	d0fa      	beq.n	801ffde <__gethex+0x4e>
 801ffe8:	f7ff ffbd 	bl	801ff66 <__hexdig_fun>
 801ffec:	fab0 f580 	clz	r5, r0
 801fff0:	f04f 0b01 	mov.w	fp, #1
 801fff4:	096d      	lsrs	r5, r5, #5
 801fff6:	464a      	mov	r2, r9
 801fff8:	4616      	mov	r6, r2
 801fffa:	3201      	adds	r2, #1
 801fffc:	7830      	ldrb	r0, [r6, #0]
 801fffe:	f7ff ffb2 	bl	801ff66 <__hexdig_fun>
 8020002:	2800      	cmp	r0, #0
 8020004:	d1f8      	bne.n	801fff8 <__gethex+0x68>
 8020006:	2201      	movs	r2, #1
 8020008:	498c      	ldr	r1, [pc, #560]	@ (802023c <__gethex+0x2ac>)
 802000a:	4630      	mov	r0, r6
 802000c:	f7fe ff4f 	bl	801eeae <strncmp>
 8020010:	2800      	cmp	r0, #0
 8020012:	d13e      	bne.n	8020092 <__gethex+0x102>
 8020014:	b944      	cbnz	r4, 8020028 <__gethex+0x98>
 8020016:	1c74      	adds	r4, r6, #1
 8020018:	4622      	mov	r2, r4
 802001a:	4616      	mov	r6, r2
 802001c:	3201      	adds	r2, #1
 802001e:	7830      	ldrb	r0, [r6, #0]
 8020020:	f7ff ffa1 	bl	801ff66 <__hexdig_fun>
 8020024:	2800      	cmp	r0, #0
 8020026:	d1f8      	bne.n	802001a <__gethex+0x8a>
 8020028:	1ba4      	subs	r4, r4, r6
 802002a:	00a7      	lsls	r7, r4, #2
 802002c:	7833      	ldrb	r3, [r6, #0]
 802002e:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8020032:	2b50      	cmp	r3, #80	@ 0x50
 8020034:	d13d      	bne.n	80200b2 <__gethex+0x122>
 8020036:	7873      	ldrb	r3, [r6, #1]
 8020038:	2b2b      	cmp	r3, #43	@ 0x2b
 802003a:	d032      	beq.n	80200a2 <__gethex+0x112>
 802003c:	2b2d      	cmp	r3, #45	@ 0x2d
 802003e:	d033      	beq.n	80200a8 <__gethex+0x118>
 8020040:	1c71      	adds	r1, r6, #1
 8020042:	2400      	movs	r4, #0
 8020044:	7808      	ldrb	r0, [r1, #0]
 8020046:	f7ff ff8e 	bl	801ff66 <__hexdig_fun>
 802004a:	1e43      	subs	r3, r0, #1
 802004c:	b2db      	uxtb	r3, r3
 802004e:	2b18      	cmp	r3, #24
 8020050:	d82f      	bhi.n	80200b2 <__gethex+0x122>
 8020052:	f1a0 0210 	sub.w	r2, r0, #16
 8020056:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 802005a:	f7ff ff84 	bl	801ff66 <__hexdig_fun>
 802005e:	f100 3cff 	add.w	ip, r0, #4294967295
 8020062:	230a      	movs	r3, #10
 8020064:	fa5f fc8c 	uxtb.w	ip, ip
 8020068:	f1bc 0f18 	cmp.w	ip, #24
 802006c:	d91e      	bls.n	80200ac <__gethex+0x11c>
 802006e:	b104      	cbz	r4, 8020072 <__gethex+0xe2>
 8020070:	4252      	negs	r2, r2
 8020072:	4417      	add	r7, r2
 8020074:	f8ca 1000 	str.w	r1, [sl]
 8020078:	b1ed      	cbz	r5, 80200b6 <__gethex+0x126>
 802007a:	f1bb 0f00 	cmp.w	fp, #0
 802007e:	bf0c      	ite	eq
 8020080:	2506      	moveq	r5, #6
 8020082:	2500      	movne	r5, #0
 8020084:	4628      	mov	r0, r5
 8020086:	b005      	add	sp, #20
 8020088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802008c:	2500      	movs	r5, #0
 802008e:	462c      	mov	r4, r5
 8020090:	e7b1      	b.n	801fff6 <__gethex+0x66>
 8020092:	2c00      	cmp	r4, #0
 8020094:	d1c8      	bne.n	8020028 <__gethex+0x98>
 8020096:	4627      	mov	r7, r4
 8020098:	e7c8      	b.n	802002c <__gethex+0x9c>
 802009a:	464e      	mov	r6, r9
 802009c:	462f      	mov	r7, r5
 802009e:	2501      	movs	r5, #1
 80200a0:	e7c4      	b.n	802002c <__gethex+0x9c>
 80200a2:	2400      	movs	r4, #0
 80200a4:	1cb1      	adds	r1, r6, #2
 80200a6:	e7cd      	b.n	8020044 <__gethex+0xb4>
 80200a8:	2401      	movs	r4, #1
 80200aa:	e7fb      	b.n	80200a4 <__gethex+0x114>
 80200ac:	fb03 0002 	mla	r0, r3, r2, r0
 80200b0:	e7cf      	b.n	8020052 <__gethex+0xc2>
 80200b2:	4631      	mov	r1, r6
 80200b4:	e7de      	b.n	8020074 <__gethex+0xe4>
 80200b6:	eba6 0309 	sub.w	r3, r6, r9
 80200ba:	4629      	mov	r1, r5
 80200bc:	3b01      	subs	r3, #1
 80200be:	2b07      	cmp	r3, #7
 80200c0:	dc0a      	bgt.n	80200d8 <__gethex+0x148>
 80200c2:	9801      	ldr	r0, [sp, #4]
 80200c4:	f000 fa46 	bl	8020554 <_Balloc>
 80200c8:	4604      	mov	r4, r0
 80200ca:	b940      	cbnz	r0, 80200de <__gethex+0x14e>
 80200cc:	4b5c      	ldr	r3, [pc, #368]	@ (8020240 <__gethex+0x2b0>)
 80200ce:	4602      	mov	r2, r0
 80200d0:	21e4      	movs	r1, #228	@ 0xe4
 80200d2:	485c      	ldr	r0, [pc, #368]	@ (8020244 <__gethex+0x2b4>)
 80200d4:	f7ff f83a 	bl	801f14c <__assert_func>
 80200d8:	3101      	adds	r1, #1
 80200da:	105b      	asrs	r3, r3, #1
 80200dc:	e7ef      	b.n	80200be <__gethex+0x12e>
 80200de:	f100 0a14 	add.w	sl, r0, #20
 80200e2:	2300      	movs	r3, #0
 80200e4:	4655      	mov	r5, sl
 80200e6:	469b      	mov	fp, r3
 80200e8:	45b1      	cmp	r9, r6
 80200ea:	d337      	bcc.n	802015c <__gethex+0x1cc>
 80200ec:	f845 bb04 	str.w	fp, [r5], #4
 80200f0:	eba5 050a 	sub.w	r5, r5, sl
 80200f4:	4658      	mov	r0, fp
 80200f6:	10ad      	asrs	r5, r5, #2
 80200f8:	6125      	str	r5, [r4, #16]
 80200fa:	016d      	lsls	r5, r5, #5
 80200fc:	f000 fb1e 	bl	802073c <__hi0bits>
 8020100:	f8d8 6000 	ldr.w	r6, [r8]
 8020104:	1a2d      	subs	r5, r5, r0
 8020106:	42b5      	cmp	r5, r6
 8020108:	dd54      	ble.n	80201b4 <__gethex+0x224>
 802010a:	1bad      	subs	r5, r5, r6
 802010c:	4620      	mov	r0, r4
 802010e:	4629      	mov	r1, r5
 8020110:	f000 febb 	bl	8020e8a <__any_on>
 8020114:	4681      	mov	r9, r0
 8020116:	b178      	cbz	r0, 8020138 <__gethex+0x1a8>
 8020118:	1e6b      	subs	r3, r5, #1
 802011a:	f04f 0901 	mov.w	r9, #1
 802011e:	1159      	asrs	r1, r3, #5
 8020120:	f003 021f 	and.w	r2, r3, #31
 8020124:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8020128:	fa09 f202 	lsl.w	r2, r9, r2
 802012c:	420a      	tst	r2, r1
 802012e:	d003      	beq.n	8020138 <__gethex+0x1a8>
 8020130:	454b      	cmp	r3, r9
 8020132:	dc36      	bgt.n	80201a2 <__gethex+0x212>
 8020134:	f04f 0902 	mov.w	r9, #2
 8020138:	442f      	add	r7, r5
 802013a:	4629      	mov	r1, r5
 802013c:	4620      	mov	r0, r4
 802013e:	f7ff fec1 	bl	801fec4 <rshift>
 8020142:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8020146:	42bb      	cmp	r3, r7
 8020148:	da42      	bge.n	80201d0 <__gethex+0x240>
 802014a:	4621      	mov	r1, r4
 802014c:	9801      	ldr	r0, [sp, #4]
 802014e:	f000 fa41 	bl	80205d4 <_Bfree>
 8020152:	2300      	movs	r3, #0
 8020154:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020156:	25a3      	movs	r5, #163	@ 0xa3
 8020158:	6013      	str	r3, [r2, #0]
 802015a:	e793      	b.n	8020084 <__gethex+0xf4>
 802015c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8020160:	2a2e      	cmp	r2, #46	@ 0x2e
 8020162:	d012      	beq.n	802018a <__gethex+0x1fa>
 8020164:	2b20      	cmp	r3, #32
 8020166:	d104      	bne.n	8020172 <__gethex+0x1e2>
 8020168:	f845 bb04 	str.w	fp, [r5], #4
 802016c:	f04f 0b00 	mov.w	fp, #0
 8020170:	465b      	mov	r3, fp
 8020172:	7830      	ldrb	r0, [r6, #0]
 8020174:	9303      	str	r3, [sp, #12]
 8020176:	f7ff fef6 	bl	801ff66 <__hexdig_fun>
 802017a:	9b03      	ldr	r3, [sp, #12]
 802017c:	f000 000f 	and.w	r0, r0, #15
 8020180:	4098      	lsls	r0, r3
 8020182:	3304      	adds	r3, #4
 8020184:	ea4b 0b00 	orr.w	fp, fp, r0
 8020188:	e7ae      	b.n	80200e8 <__gethex+0x158>
 802018a:	45b1      	cmp	r9, r6
 802018c:	d8ea      	bhi.n	8020164 <__gethex+0x1d4>
 802018e:	2201      	movs	r2, #1
 8020190:	492a      	ldr	r1, [pc, #168]	@ (802023c <__gethex+0x2ac>)
 8020192:	4630      	mov	r0, r6
 8020194:	9303      	str	r3, [sp, #12]
 8020196:	f7fe fe8a 	bl	801eeae <strncmp>
 802019a:	9b03      	ldr	r3, [sp, #12]
 802019c:	2800      	cmp	r0, #0
 802019e:	d1e1      	bne.n	8020164 <__gethex+0x1d4>
 80201a0:	e7a2      	b.n	80200e8 <__gethex+0x158>
 80201a2:	1ea9      	subs	r1, r5, #2
 80201a4:	4620      	mov	r0, r4
 80201a6:	f000 fe70 	bl	8020e8a <__any_on>
 80201aa:	2800      	cmp	r0, #0
 80201ac:	d0c2      	beq.n	8020134 <__gethex+0x1a4>
 80201ae:	f04f 0903 	mov.w	r9, #3
 80201b2:	e7c1      	b.n	8020138 <__gethex+0x1a8>
 80201b4:	da09      	bge.n	80201ca <__gethex+0x23a>
 80201b6:	1b75      	subs	r5, r6, r5
 80201b8:	4621      	mov	r1, r4
 80201ba:	9801      	ldr	r0, [sp, #4]
 80201bc:	462a      	mov	r2, r5
 80201be:	1b7f      	subs	r7, r7, r5
 80201c0:	f000 fc22 	bl	8020a08 <__lshift>
 80201c4:	4604      	mov	r4, r0
 80201c6:	f100 0a14 	add.w	sl, r0, #20
 80201ca:	f04f 0900 	mov.w	r9, #0
 80201ce:	e7b8      	b.n	8020142 <__gethex+0x1b2>
 80201d0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80201d4:	42bd      	cmp	r5, r7
 80201d6:	dd6f      	ble.n	80202b8 <__gethex+0x328>
 80201d8:	1bed      	subs	r5, r5, r7
 80201da:	42ae      	cmp	r6, r5
 80201dc:	dc34      	bgt.n	8020248 <__gethex+0x2b8>
 80201de:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80201e2:	2b02      	cmp	r3, #2
 80201e4:	d022      	beq.n	802022c <__gethex+0x29c>
 80201e6:	2b03      	cmp	r3, #3
 80201e8:	d024      	beq.n	8020234 <__gethex+0x2a4>
 80201ea:	2b01      	cmp	r3, #1
 80201ec:	d115      	bne.n	802021a <__gethex+0x28a>
 80201ee:	42ae      	cmp	r6, r5
 80201f0:	d113      	bne.n	802021a <__gethex+0x28a>
 80201f2:	2e01      	cmp	r6, #1
 80201f4:	d10b      	bne.n	802020e <__gethex+0x27e>
 80201f6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80201fa:	2562      	movs	r5, #98	@ 0x62
 80201fc:	9a02      	ldr	r2, [sp, #8]
 80201fe:	6013      	str	r3, [r2, #0]
 8020200:	2301      	movs	r3, #1
 8020202:	6123      	str	r3, [r4, #16]
 8020204:	f8ca 3000 	str.w	r3, [sl]
 8020208:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802020a:	601c      	str	r4, [r3, #0]
 802020c:	e73a      	b.n	8020084 <__gethex+0xf4>
 802020e:	1e71      	subs	r1, r6, #1
 8020210:	4620      	mov	r0, r4
 8020212:	f000 fe3a 	bl	8020e8a <__any_on>
 8020216:	2800      	cmp	r0, #0
 8020218:	d1ed      	bne.n	80201f6 <__gethex+0x266>
 802021a:	4621      	mov	r1, r4
 802021c:	9801      	ldr	r0, [sp, #4]
 802021e:	f000 f9d9 	bl	80205d4 <_Bfree>
 8020222:	2300      	movs	r3, #0
 8020224:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020226:	2550      	movs	r5, #80	@ 0x50
 8020228:	6013      	str	r3, [r2, #0]
 802022a:	e72b      	b.n	8020084 <__gethex+0xf4>
 802022c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802022e:	2b00      	cmp	r3, #0
 8020230:	d1f3      	bne.n	802021a <__gethex+0x28a>
 8020232:	e7e0      	b.n	80201f6 <__gethex+0x266>
 8020234:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020236:	2b00      	cmp	r3, #0
 8020238:	d1dd      	bne.n	80201f6 <__gethex+0x266>
 802023a:	e7ee      	b.n	802021a <__gethex+0x28a>
 802023c:	0802439c 	.word	0x0802439c
 8020240:	08024642 	.word	0x08024642
 8020244:	08024653 	.word	0x08024653
 8020248:	1e6f      	subs	r7, r5, #1
 802024a:	f1b9 0f00 	cmp.w	r9, #0
 802024e:	d130      	bne.n	80202b2 <__gethex+0x322>
 8020250:	b127      	cbz	r7, 802025c <__gethex+0x2cc>
 8020252:	4639      	mov	r1, r7
 8020254:	4620      	mov	r0, r4
 8020256:	f000 fe18 	bl	8020e8a <__any_on>
 802025a:	4681      	mov	r9, r0
 802025c:	117a      	asrs	r2, r7, #5
 802025e:	2301      	movs	r3, #1
 8020260:	f007 071f 	and.w	r7, r7, #31
 8020264:	4629      	mov	r1, r5
 8020266:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 802026a:	4620      	mov	r0, r4
 802026c:	40bb      	lsls	r3, r7
 802026e:	1b76      	subs	r6, r6, r5
 8020270:	2502      	movs	r5, #2
 8020272:	4213      	tst	r3, r2
 8020274:	bf18      	it	ne
 8020276:	f049 0902 	orrne.w	r9, r9, #2
 802027a:	f7ff fe23 	bl	801fec4 <rshift>
 802027e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8020282:	f1b9 0f00 	cmp.w	r9, #0
 8020286:	d047      	beq.n	8020318 <__gethex+0x388>
 8020288:	f8d8 300c 	ldr.w	r3, [r8, #12]
 802028c:	2b02      	cmp	r3, #2
 802028e:	d015      	beq.n	80202bc <__gethex+0x32c>
 8020290:	2b03      	cmp	r3, #3
 8020292:	d017      	beq.n	80202c4 <__gethex+0x334>
 8020294:	2b01      	cmp	r3, #1
 8020296:	d109      	bne.n	80202ac <__gethex+0x31c>
 8020298:	f019 0f02 	tst.w	r9, #2
 802029c:	d006      	beq.n	80202ac <__gethex+0x31c>
 802029e:	f8da 3000 	ldr.w	r3, [sl]
 80202a2:	ea49 0903 	orr.w	r9, r9, r3
 80202a6:	f019 0f01 	tst.w	r9, #1
 80202aa:	d10e      	bne.n	80202ca <__gethex+0x33a>
 80202ac:	f045 0510 	orr.w	r5, r5, #16
 80202b0:	e032      	b.n	8020318 <__gethex+0x388>
 80202b2:	f04f 0901 	mov.w	r9, #1
 80202b6:	e7d1      	b.n	802025c <__gethex+0x2cc>
 80202b8:	2501      	movs	r5, #1
 80202ba:	e7e2      	b.n	8020282 <__gethex+0x2f2>
 80202bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80202be:	f1c3 0301 	rsb	r3, r3, #1
 80202c2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80202c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80202c6:	2b00      	cmp	r3, #0
 80202c8:	d0f0      	beq.n	80202ac <__gethex+0x31c>
 80202ca:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80202ce:	f104 0314 	add.w	r3, r4, #20
 80202d2:	f04f 0c00 	mov.w	ip, #0
 80202d6:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80202da:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80202de:	4618      	mov	r0, r3
 80202e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80202e4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80202e8:	d01b      	beq.n	8020322 <__gethex+0x392>
 80202ea:	3201      	adds	r2, #1
 80202ec:	6002      	str	r2, [r0, #0]
 80202ee:	2d02      	cmp	r5, #2
 80202f0:	f104 0314 	add.w	r3, r4, #20
 80202f4:	d13c      	bne.n	8020370 <__gethex+0x3e0>
 80202f6:	f8d8 2000 	ldr.w	r2, [r8]
 80202fa:	3a01      	subs	r2, #1
 80202fc:	42b2      	cmp	r2, r6
 80202fe:	d109      	bne.n	8020314 <__gethex+0x384>
 8020300:	1171      	asrs	r1, r6, #5
 8020302:	2201      	movs	r2, #1
 8020304:	f006 061f 	and.w	r6, r6, #31
 8020308:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 802030c:	fa02 f606 	lsl.w	r6, r2, r6
 8020310:	421e      	tst	r6, r3
 8020312:	d13a      	bne.n	802038a <__gethex+0x3fa>
 8020314:	f045 0520 	orr.w	r5, r5, #32
 8020318:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802031a:	601c      	str	r4, [r3, #0]
 802031c:	9b02      	ldr	r3, [sp, #8]
 802031e:	601f      	str	r7, [r3, #0]
 8020320:	e6b0      	b.n	8020084 <__gethex+0xf4>
 8020322:	4299      	cmp	r1, r3
 8020324:	f843 cc04 	str.w	ip, [r3, #-4]
 8020328:	d8d9      	bhi.n	80202de <__gethex+0x34e>
 802032a:	68a3      	ldr	r3, [r4, #8]
 802032c:	459b      	cmp	fp, r3
 802032e:	db17      	blt.n	8020360 <__gethex+0x3d0>
 8020330:	6861      	ldr	r1, [r4, #4]
 8020332:	9801      	ldr	r0, [sp, #4]
 8020334:	3101      	adds	r1, #1
 8020336:	f000 f90d 	bl	8020554 <_Balloc>
 802033a:	4681      	mov	r9, r0
 802033c:	b918      	cbnz	r0, 8020346 <__gethex+0x3b6>
 802033e:	4b1a      	ldr	r3, [pc, #104]	@ (80203a8 <__gethex+0x418>)
 8020340:	4602      	mov	r2, r0
 8020342:	2184      	movs	r1, #132	@ 0x84
 8020344:	e6c5      	b.n	80200d2 <__gethex+0x142>
 8020346:	6922      	ldr	r2, [r4, #16]
 8020348:	f104 010c 	add.w	r1, r4, #12
 802034c:	300c      	adds	r0, #12
 802034e:	3202      	adds	r2, #2
 8020350:	0092      	lsls	r2, r2, #2
 8020352:	f7fe fee0 	bl	801f116 <memcpy>
 8020356:	4621      	mov	r1, r4
 8020358:	464c      	mov	r4, r9
 802035a:	9801      	ldr	r0, [sp, #4]
 802035c:	f000 f93a 	bl	80205d4 <_Bfree>
 8020360:	6923      	ldr	r3, [r4, #16]
 8020362:	1c5a      	adds	r2, r3, #1
 8020364:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8020368:	6122      	str	r2, [r4, #16]
 802036a:	2201      	movs	r2, #1
 802036c:	615a      	str	r2, [r3, #20]
 802036e:	e7be      	b.n	80202ee <__gethex+0x35e>
 8020370:	6922      	ldr	r2, [r4, #16]
 8020372:	455a      	cmp	r2, fp
 8020374:	dd0b      	ble.n	802038e <__gethex+0x3fe>
 8020376:	2101      	movs	r1, #1
 8020378:	4620      	mov	r0, r4
 802037a:	f7ff fda3 	bl	801fec4 <rshift>
 802037e:	3701      	adds	r7, #1
 8020380:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8020384:	42bb      	cmp	r3, r7
 8020386:	f6ff aee0 	blt.w	802014a <__gethex+0x1ba>
 802038a:	2501      	movs	r5, #1
 802038c:	e7c2      	b.n	8020314 <__gethex+0x384>
 802038e:	f016 061f 	ands.w	r6, r6, #31
 8020392:	d0fa      	beq.n	802038a <__gethex+0x3fa>
 8020394:	4453      	add	r3, sl
 8020396:	f1c6 0620 	rsb	r6, r6, #32
 802039a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 802039e:	f000 f9cd 	bl	802073c <__hi0bits>
 80203a2:	42b0      	cmp	r0, r6
 80203a4:	dbe7      	blt.n	8020376 <__gethex+0x3e6>
 80203a6:	e7f0      	b.n	802038a <__gethex+0x3fa>
 80203a8:	08024642 	.word	0x08024642

080203ac <L_shift>:
 80203ac:	f1c2 0208 	rsb	r2, r2, #8
 80203b0:	0092      	lsls	r2, r2, #2
 80203b2:	b570      	push	{r4, r5, r6, lr}
 80203b4:	f1c2 0620 	rsb	r6, r2, #32
 80203b8:	6843      	ldr	r3, [r0, #4]
 80203ba:	6804      	ldr	r4, [r0, #0]
 80203bc:	fa03 f506 	lsl.w	r5, r3, r6
 80203c0:	40d3      	lsrs	r3, r2
 80203c2:	432c      	orrs	r4, r5
 80203c4:	6004      	str	r4, [r0, #0]
 80203c6:	f840 3f04 	str.w	r3, [r0, #4]!
 80203ca:	4288      	cmp	r0, r1
 80203cc:	d3f4      	bcc.n	80203b8 <L_shift+0xc>
 80203ce:	bd70      	pop	{r4, r5, r6, pc}

080203d0 <__match>:
 80203d0:	6803      	ldr	r3, [r0, #0]
 80203d2:	3301      	adds	r3, #1
 80203d4:	b530      	push	{r4, r5, lr}
 80203d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80203da:	b914      	cbnz	r4, 80203e2 <__match+0x12>
 80203dc:	6003      	str	r3, [r0, #0]
 80203de:	2001      	movs	r0, #1
 80203e0:	bd30      	pop	{r4, r5, pc}
 80203e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80203e6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80203ea:	2d19      	cmp	r5, #25
 80203ec:	bf98      	it	ls
 80203ee:	3220      	addls	r2, #32
 80203f0:	42a2      	cmp	r2, r4
 80203f2:	d0f0      	beq.n	80203d6 <__match+0x6>
 80203f4:	2000      	movs	r0, #0
 80203f6:	e7f3      	b.n	80203e0 <__match+0x10>

080203f8 <__hexnan>:
 80203f8:	680b      	ldr	r3, [r1, #0]
 80203fa:	6801      	ldr	r1, [r0, #0]
 80203fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020400:	115e      	asrs	r6, r3, #5
 8020402:	f013 031f 	ands.w	r3, r3, #31
 8020406:	f04f 0500 	mov.w	r5, #0
 802040a:	b087      	sub	sp, #28
 802040c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8020410:	4682      	mov	sl, r0
 8020412:	4690      	mov	r8, r2
 8020414:	46ab      	mov	fp, r5
 8020416:	bf18      	it	ne
 8020418:	3604      	addne	r6, #4
 802041a:	9301      	str	r3, [sp, #4]
 802041c:	9502      	str	r5, [sp, #8]
 802041e:	1f37      	subs	r7, r6, #4
 8020420:	f846 5c04 	str.w	r5, [r6, #-4]
 8020424:	46b9      	mov	r9, r7
 8020426:	463c      	mov	r4, r7
 8020428:	1c4b      	adds	r3, r1, #1
 802042a:	784a      	ldrb	r2, [r1, #1]
 802042c:	9303      	str	r3, [sp, #12]
 802042e:	b342      	cbz	r2, 8020482 <__hexnan+0x8a>
 8020430:	4610      	mov	r0, r2
 8020432:	9105      	str	r1, [sp, #20]
 8020434:	9204      	str	r2, [sp, #16]
 8020436:	f7ff fd96 	bl	801ff66 <__hexdig_fun>
 802043a:	2800      	cmp	r0, #0
 802043c:	d151      	bne.n	80204e2 <__hexnan+0xea>
 802043e:	9a04      	ldr	r2, [sp, #16]
 8020440:	9905      	ldr	r1, [sp, #20]
 8020442:	2a20      	cmp	r2, #32
 8020444:	d818      	bhi.n	8020478 <__hexnan+0x80>
 8020446:	9b02      	ldr	r3, [sp, #8]
 8020448:	459b      	cmp	fp, r3
 802044a:	dd13      	ble.n	8020474 <__hexnan+0x7c>
 802044c:	454c      	cmp	r4, r9
 802044e:	d206      	bcs.n	802045e <__hexnan+0x66>
 8020450:	2d07      	cmp	r5, #7
 8020452:	dc04      	bgt.n	802045e <__hexnan+0x66>
 8020454:	462a      	mov	r2, r5
 8020456:	4649      	mov	r1, r9
 8020458:	4620      	mov	r0, r4
 802045a:	f7ff ffa7 	bl	80203ac <L_shift>
 802045e:	4544      	cmp	r4, r8
 8020460:	d951      	bls.n	8020506 <__hexnan+0x10e>
 8020462:	2300      	movs	r3, #0
 8020464:	f1a4 0904 	sub.w	r9, r4, #4
 8020468:	f8cd b008 	str.w	fp, [sp, #8]
 802046c:	f844 3c04 	str.w	r3, [r4, #-4]
 8020470:	461d      	mov	r5, r3
 8020472:	464c      	mov	r4, r9
 8020474:	9903      	ldr	r1, [sp, #12]
 8020476:	e7d7      	b.n	8020428 <__hexnan+0x30>
 8020478:	2a29      	cmp	r2, #41	@ 0x29
 802047a:	d156      	bne.n	802052a <__hexnan+0x132>
 802047c:	3102      	adds	r1, #2
 802047e:	f8ca 1000 	str.w	r1, [sl]
 8020482:	f1bb 0f00 	cmp.w	fp, #0
 8020486:	d050      	beq.n	802052a <__hexnan+0x132>
 8020488:	454c      	cmp	r4, r9
 802048a:	d206      	bcs.n	802049a <__hexnan+0xa2>
 802048c:	2d07      	cmp	r5, #7
 802048e:	dc04      	bgt.n	802049a <__hexnan+0xa2>
 8020490:	462a      	mov	r2, r5
 8020492:	4649      	mov	r1, r9
 8020494:	4620      	mov	r0, r4
 8020496:	f7ff ff89 	bl	80203ac <L_shift>
 802049a:	4544      	cmp	r4, r8
 802049c:	d935      	bls.n	802050a <__hexnan+0x112>
 802049e:	f1a8 0204 	sub.w	r2, r8, #4
 80204a2:	4623      	mov	r3, r4
 80204a4:	f853 1b04 	ldr.w	r1, [r3], #4
 80204a8:	429f      	cmp	r7, r3
 80204aa:	f842 1f04 	str.w	r1, [r2, #4]!
 80204ae:	d2f9      	bcs.n	80204a4 <__hexnan+0xac>
 80204b0:	1b3b      	subs	r3, r7, r4
 80204b2:	3e03      	subs	r6, #3
 80204b4:	3401      	adds	r4, #1
 80204b6:	2200      	movs	r2, #0
 80204b8:	f023 0303 	bic.w	r3, r3, #3
 80204bc:	3304      	adds	r3, #4
 80204be:	42b4      	cmp	r4, r6
 80204c0:	bf88      	it	hi
 80204c2:	2304      	movhi	r3, #4
 80204c4:	4443      	add	r3, r8
 80204c6:	f843 2b04 	str.w	r2, [r3], #4
 80204ca:	429f      	cmp	r7, r3
 80204cc:	d2fb      	bcs.n	80204c6 <__hexnan+0xce>
 80204ce:	683b      	ldr	r3, [r7, #0]
 80204d0:	b91b      	cbnz	r3, 80204da <__hexnan+0xe2>
 80204d2:	4547      	cmp	r7, r8
 80204d4:	d127      	bne.n	8020526 <__hexnan+0x12e>
 80204d6:	2301      	movs	r3, #1
 80204d8:	603b      	str	r3, [r7, #0]
 80204da:	2005      	movs	r0, #5
 80204dc:	b007      	add	sp, #28
 80204de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80204e2:	3501      	adds	r5, #1
 80204e4:	f10b 0b01 	add.w	fp, fp, #1
 80204e8:	2d08      	cmp	r5, #8
 80204ea:	dd05      	ble.n	80204f8 <__hexnan+0x100>
 80204ec:	4544      	cmp	r4, r8
 80204ee:	d9c1      	bls.n	8020474 <__hexnan+0x7c>
 80204f0:	2300      	movs	r3, #0
 80204f2:	3c04      	subs	r4, #4
 80204f4:	2501      	movs	r5, #1
 80204f6:	6023      	str	r3, [r4, #0]
 80204f8:	6822      	ldr	r2, [r4, #0]
 80204fa:	f000 000f 	and.w	r0, r0, #15
 80204fe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8020502:	6020      	str	r0, [r4, #0]
 8020504:	e7b6      	b.n	8020474 <__hexnan+0x7c>
 8020506:	2508      	movs	r5, #8
 8020508:	e7b4      	b.n	8020474 <__hexnan+0x7c>
 802050a:	9b01      	ldr	r3, [sp, #4]
 802050c:	2b00      	cmp	r3, #0
 802050e:	d0de      	beq.n	80204ce <__hexnan+0xd6>
 8020510:	f1c3 0320 	rsb	r3, r3, #32
 8020514:	f04f 32ff 	mov.w	r2, #4294967295
 8020518:	40da      	lsrs	r2, r3
 802051a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 802051e:	4013      	ands	r3, r2
 8020520:	f846 3c04 	str.w	r3, [r6, #-4]
 8020524:	e7d3      	b.n	80204ce <__hexnan+0xd6>
 8020526:	3f04      	subs	r7, #4
 8020528:	e7d1      	b.n	80204ce <__hexnan+0xd6>
 802052a:	2004      	movs	r0, #4
 802052c:	e7d6      	b.n	80204dc <__hexnan+0xe4>

0802052e <__ascii_mbtowc>:
 802052e:	b082      	sub	sp, #8
 8020530:	b901      	cbnz	r1, 8020534 <__ascii_mbtowc+0x6>
 8020532:	a901      	add	r1, sp, #4
 8020534:	b142      	cbz	r2, 8020548 <__ascii_mbtowc+0x1a>
 8020536:	b14b      	cbz	r3, 802054c <__ascii_mbtowc+0x1e>
 8020538:	7813      	ldrb	r3, [r2, #0]
 802053a:	600b      	str	r3, [r1, #0]
 802053c:	7812      	ldrb	r2, [r2, #0]
 802053e:	1e10      	subs	r0, r2, #0
 8020540:	bf18      	it	ne
 8020542:	2001      	movne	r0, #1
 8020544:	b002      	add	sp, #8
 8020546:	4770      	bx	lr
 8020548:	4610      	mov	r0, r2
 802054a:	e7fb      	b.n	8020544 <__ascii_mbtowc+0x16>
 802054c:	f06f 0001 	mvn.w	r0, #1
 8020550:	e7f8      	b.n	8020544 <__ascii_mbtowc+0x16>
	...

08020554 <_Balloc>:
 8020554:	b570      	push	{r4, r5, r6, lr}
 8020556:	69c6      	ldr	r6, [r0, #28]
 8020558:	4604      	mov	r4, r0
 802055a:	460d      	mov	r5, r1
 802055c:	b976      	cbnz	r6, 802057c <_Balloc+0x28>
 802055e:	2010      	movs	r0, #16
 8020560:	f7fc fbf6 	bl	801cd50 <malloc>
 8020564:	4602      	mov	r2, r0
 8020566:	61e0      	str	r0, [r4, #28]
 8020568:	b920      	cbnz	r0, 8020574 <_Balloc+0x20>
 802056a:	4b18      	ldr	r3, [pc, #96]	@ (80205cc <_Balloc+0x78>)
 802056c:	216b      	movs	r1, #107	@ 0x6b
 802056e:	4818      	ldr	r0, [pc, #96]	@ (80205d0 <_Balloc+0x7c>)
 8020570:	f7fe fdec 	bl	801f14c <__assert_func>
 8020574:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8020578:	6006      	str	r6, [r0, #0]
 802057a:	60c6      	str	r6, [r0, #12]
 802057c:	69e6      	ldr	r6, [r4, #28]
 802057e:	68f3      	ldr	r3, [r6, #12]
 8020580:	b183      	cbz	r3, 80205a4 <_Balloc+0x50>
 8020582:	69e3      	ldr	r3, [r4, #28]
 8020584:	68db      	ldr	r3, [r3, #12]
 8020586:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 802058a:	b9b8      	cbnz	r0, 80205bc <_Balloc+0x68>
 802058c:	2101      	movs	r1, #1
 802058e:	4620      	mov	r0, r4
 8020590:	fa01 f605 	lsl.w	r6, r1, r5
 8020594:	1d72      	adds	r2, r6, #5
 8020596:	0092      	lsls	r2, r2, #2
 8020598:	f001 fc29 	bl	8021dee <_calloc_r>
 802059c:	b160      	cbz	r0, 80205b8 <_Balloc+0x64>
 802059e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80205a2:	e00e      	b.n	80205c2 <_Balloc+0x6e>
 80205a4:	2221      	movs	r2, #33	@ 0x21
 80205a6:	2104      	movs	r1, #4
 80205a8:	4620      	mov	r0, r4
 80205aa:	f001 fc20 	bl	8021dee <_calloc_r>
 80205ae:	69e3      	ldr	r3, [r4, #28]
 80205b0:	60f0      	str	r0, [r6, #12]
 80205b2:	68db      	ldr	r3, [r3, #12]
 80205b4:	2b00      	cmp	r3, #0
 80205b6:	d1e4      	bne.n	8020582 <_Balloc+0x2e>
 80205b8:	2000      	movs	r0, #0
 80205ba:	bd70      	pop	{r4, r5, r6, pc}
 80205bc:	6802      	ldr	r2, [r0, #0]
 80205be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80205c2:	2300      	movs	r3, #0
 80205c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80205c8:	e7f7      	b.n	80205ba <_Balloc+0x66>
 80205ca:	bf00      	nop
 80205cc:	08024528 	.word	0x08024528
 80205d0:	080246b3 	.word	0x080246b3

080205d4 <_Bfree>:
 80205d4:	b570      	push	{r4, r5, r6, lr}
 80205d6:	69c6      	ldr	r6, [r0, #28]
 80205d8:	4605      	mov	r5, r0
 80205da:	460c      	mov	r4, r1
 80205dc:	b976      	cbnz	r6, 80205fc <_Bfree+0x28>
 80205de:	2010      	movs	r0, #16
 80205e0:	f7fc fbb6 	bl	801cd50 <malloc>
 80205e4:	4602      	mov	r2, r0
 80205e6:	61e8      	str	r0, [r5, #28]
 80205e8:	b920      	cbnz	r0, 80205f4 <_Bfree+0x20>
 80205ea:	4b09      	ldr	r3, [pc, #36]	@ (8020610 <_Bfree+0x3c>)
 80205ec:	218f      	movs	r1, #143	@ 0x8f
 80205ee:	4809      	ldr	r0, [pc, #36]	@ (8020614 <_Bfree+0x40>)
 80205f0:	f7fe fdac 	bl	801f14c <__assert_func>
 80205f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80205f8:	6006      	str	r6, [r0, #0]
 80205fa:	60c6      	str	r6, [r0, #12]
 80205fc:	b13c      	cbz	r4, 802060e <_Bfree+0x3a>
 80205fe:	69eb      	ldr	r3, [r5, #28]
 8020600:	6862      	ldr	r2, [r4, #4]
 8020602:	68db      	ldr	r3, [r3, #12]
 8020604:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8020608:	6021      	str	r1, [r4, #0]
 802060a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 802060e:	bd70      	pop	{r4, r5, r6, pc}
 8020610:	08024528 	.word	0x08024528
 8020614:	080246b3 	.word	0x080246b3

08020618 <__multadd>:
 8020618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802061c:	f101 0c14 	add.w	ip, r1, #20
 8020620:	4607      	mov	r7, r0
 8020622:	460c      	mov	r4, r1
 8020624:	461e      	mov	r6, r3
 8020626:	690d      	ldr	r5, [r1, #16]
 8020628:	2000      	movs	r0, #0
 802062a:	f8dc 3000 	ldr.w	r3, [ip]
 802062e:	3001      	adds	r0, #1
 8020630:	b299      	uxth	r1, r3
 8020632:	4285      	cmp	r5, r0
 8020634:	fb02 6101 	mla	r1, r2, r1, r6
 8020638:	ea4f 4613 	mov.w	r6, r3, lsr #16
 802063c:	ea4f 4311 	mov.w	r3, r1, lsr #16
 8020640:	b289      	uxth	r1, r1
 8020642:	fb02 3306 	mla	r3, r2, r6, r3
 8020646:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 802064a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 802064e:	f84c 1b04 	str.w	r1, [ip], #4
 8020652:	dcea      	bgt.n	802062a <__multadd+0x12>
 8020654:	b30e      	cbz	r6, 802069a <__multadd+0x82>
 8020656:	68a3      	ldr	r3, [r4, #8]
 8020658:	42ab      	cmp	r3, r5
 802065a:	dc19      	bgt.n	8020690 <__multadd+0x78>
 802065c:	6861      	ldr	r1, [r4, #4]
 802065e:	4638      	mov	r0, r7
 8020660:	3101      	adds	r1, #1
 8020662:	f7ff ff77 	bl	8020554 <_Balloc>
 8020666:	4680      	mov	r8, r0
 8020668:	b928      	cbnz	r0, 8020676 <__multadd+0x5e>
 802066a:	4602      	mov	r2, r0
 802066c:	4b0c      	ldr	r3, [pc, #48]	@ (80206a0 <__multadd+0x88>)
 802066e:	21ba      	movs	r1, #186	@ 0xba
 8020670:	480c      	ldr	r0, [pc, #48]	@ (80206a4 <__multadd+0x8c>)
 8020672:	f7fe fd6b 	bl	801f14c <__assert_func>
 8020676:	6922      	ldr	r2, [r4, #16]
 8020678:	f104 010c 	add.w	r1, r4, #12
 802067c:	300c      	adds	r0, #12
 802067e:	3202      	adds	r2, #2
 8020680:	0092      	lsls	r2, r2, #2
 8020682:	f7fe fd48 	bl	801f116 <memcpy>
 8020686:	4621      	mov	r1, r4
 8020688:	4644      	mov	r4, r8
 802068a:	4638      	mov	r0, r7
 802068c:	f7ff ffa2 	bl	80205d4 <_Bfree>
 8020690:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8020694:	3501      	adds	r5, #1
 8020696:	615e      	str	r6, [r3, #20]
 8020698:	6125      	str	r5, [r4, #16]
 802069a:	4620      	mov	r0, r4
 802069c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80206a0:	08024642 	.word	0x08024642
 80206a4:	080246b3 	.word	0x080246b3

080206a8 <__s2b>:
 80206a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80206ac:	4615      	mov	r5, r2
 80206ae:	461f      	mov	r7, r3
 80206b0:	2209      	movs	r2, #9
 80206b2:	3308      	adds	r3, #8
 80206b4:	460c      	mov	r4, r1
 80206b6:	4606      	mov	r6, r0
 80206b8:	2100      	movs	r1, #0
 80206ba:	fb93 f3f2 	sdiv	r3, r3, r2
 80206be:	2201      	movs	r2, #1
 80206c0:	429a      	cmp	r2, r3
 80206c2:	db09      	blt.n	80206d8 <__s2b+0x30>
 80206c4:	4630      	mov	r0, r6
 80206c6:	f7ff ff45 	bl	8020554 <_Balloc>
 80206ca:	b940      	cbnz	r0, 80206de <__s2b+0x36>
 80206cc:	4602      	mov	r2, r0
 80206ce:	4b19      	ldr	r3, [pc, #100]	@ (8020734 <__s2b+0x8c>)
 80206d0:	21d3      	movs	r1, #211	@ 0xd3
 80206d2:	4819      	ldr	r0, [pc, #100]	@ (8020738 <__s2b+0x90>)
 80206d4:	f7fe fd3a 	bl	801f14c <__assert_func>
 80206d8:	0052      	lsls	r2, r2, #1
 80206da:	3101      	adds	r1, #1
 80206dc:	e7f0      	b.n	80206c0 <__s2b+0x18>
 80206de:	9b08      	ldr	r3, [sp, #32]
 80206e0:	2d09      	cmp	r5, #9
 80206e2:	6143      	str	r3, [r0, #20]
 80206e4:	f04f 0301 	mov.w	r3, #1
 80206e8:	6103      	str	r3, [r0, #16]
 80206ea:	dd16      	ble.n	802071a <__s2b+0x72>
 80206ec:	f104 0909 	add.w	r9, r4, #9
 80206f0:	442c      	add	r4, r5
 80206f2:	46c8      	mov	r8, r9
 80206f4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80206f8:	4601      	mov	r1, r0
 80206fa:	220a      	movs	r2, #10
 80206fc:	4630      	mov	r0, r6
 80206fe:	3b30      	subs	r3, #48	@ 0x30
 8020700:	f7ff ff8a 	bl	8020618 <__multadd>
 8020704:	45a0      	cmp	r8, r4
 8020706:	d1f5      	bne.n	80206f4 <__s2b+0x4c>
 8020708:	f1a5 0408 	sub.w	r4, r5, #8
 802070c:	444c      	add	r4, r9
 802070e:	1b2d      	subs	r5, r5, r4
 8020710:	1963      	adds	r3, r4, r5
 8020712:	42bb      	cmp	r3, r7
 8020714:	db04      	blt.n	8020720 <__s2b+0x78>
 8020716:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802071a:	340a      	adds	r4, #10
 802071c:	2509      	movs	r5, #9
 802071e:	e7f6      	b.n	802070e <__s2b+0x66>
 8020720:	f814 3b01 	ldrb.w	r3, [r4], #1
 8020724:	4601      	mov	r1, r0
 8020726:	220a      	movs	r2, #10
 8020728:	4630      	mov	r0, r6
 802072a:	3b30      	subs	r3, #48	@ 0x30
 802072c:	f7ff ff74 	bl	8020618 <__multadd>
 8020730:	e7ee      	b.n	8020710 <__s2b+0x68>
 8020732:	bf00      	nop
 8020734:	08024642 	.word	0x08024642
 8020738:	080246b3 	.word	0x080246b3

0802073c <__hi0bits>:
 802073c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8020740:	4603      	mov	r3, r0
 8020742:	bf36      	itet	cc
 8020744:	0403      	lslcc	r3, r0, #16
 8020746:	2000      	movcs	r0, #0
 8020748:	2010      	movcc	r0, #16
 802074a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 802074e:	bf3c      	itt	cc
 8020750:	021b      	lslcc	r3, r3, #8
 8020752:	3008      	addcc	r0, #8
 8020754:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8020758:	bf3c      	itt	cc
 802075a:	011b      	lslcc	r3, r3, #4
 802075c:	3004      	addcc	r0, #4
 802075e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8020762:	bf3c      	itt	cc
 8020764:	009b      	lslcc	r3, r3, #2
 8020766:	3002      	addcc	r0, #2
 8020768:	2b00      	cmp	r3, #0
 802076a:	db05      	blt.n	8020778 <__hi0bits+0x3c>
 802076c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8020770:	f100 0001 	add.w	r0, r0, #1
 8020774:	bf08      	it	eq
 8020776:	2020      	moveq	r0, #32
 8020778:	4770      	bx	lr

0802077a <__lo0bits>:
 802077a:	6803      	ldr	r3, [r0, #0]
 802077c:	4602      	mov	r2, r0
 802077e:	f013 0007 	ands.w	r0, r3, #7
 8020782:	d00b      	beq.n	802079c <__lo0bits+0x22>
 8020784:	07d9      	lsls	r1, r3, #31
 8020786:	d421      	bmi.n	80207cc <__lo0bits+0x52>
 8020788:	0798      	lsls	r0, r3, #30
 802078a:	bf47      	ittee	mi
 802078c:	085b      	lsrmi	r3, r3, #1
 802078e:	2001      	movmi	r0, #1
 8020790:	089b      	lsrpl	r3, r3, #2
 8020792:	2002      	movpl	r0, #2
 8020794:	bf4c      	ite	mi
 8020796:	6013      	strmi	r3, [r2, #0]
 8020798:	6013      	strpl	r3, [r2, #0]
 802079a:	4770      	bx	lr
 802079c:	b299      	uxth	r1, r3
 802079e:	b909      	cbnz	r1, 80207a4 <__lo0bits+0x2a>
 80207a0:	0c1b      	lsrs	r3, r3, #16
 80207a2:	2010      	movs	r0, #16
 80207a4:	b2d9      	uxtb	r1, r3
 80207a6:	b909      	cbnz	r1, 80207ac <__lo0bits+0x32>
 80207a8:	3008      	adds	r0, #8
 80207aa:	0a1b      	lsrs	r3, r3, #8
 80207ac:	0719      	lsls	r1, r3, #28
 80207ae:	bf04      	itt	eq
 80207b0:	091b      	lsreq	r3, r3, #4
 80207b2:	3004      	addeq	r0, #4
 80207b4:	0799      	lsls	r1, r3, #30
 80207b6:	bf04      	itt	eq
 80207b8:	089b      	lsreq	r3, r3, #2
 80207ba:	3002      	addeq	r0, #2
 80207bc:	07d9      	lsls	r1, r3, #31
 80207be:	d403      	bmi.n	80207c8 <__lo0bits+0x4e>
 80207c0:	085b      	lsrs	r3, r3, #1
 80207c2:	f100 0001 	add.w	r0, r0, #1
 80207c6:	d003      	beq.n	80207d0 <__lo0bits+0x56>
 80207c8:	6013      	str	r3, [r2, #0]
 80207ca:	4770      	bx	lr
 80207cc:	2000      	movs	r0, #0
 80207ce:	4770      	bx	lr
 80207d0:	2020      	movs	r0, #32
 80207d2:	4770      	bx	lr

080207d4 <__i2b>:
 80207d4:	b510      	push	{r4, lr}
 80207d6:	460c      	mov	r4, r1
 80207d8:	2101      	movs	r1, #1
 80207da:	f7ff febb 	bl	8020554 <_Balloc>
 80207de:	4602      	mov	r2, r0
 80207e0:	b928      	cbnz	r0, 80207ee <__i2b+0x1a>
 80207e2:	4b05      	ldr	r3, [pc, #20]	@ (80207f8 <__i2b+0x24>)
 80207e4:	f240 1145 	movw	r1, #325	@ 0x145
 80207e8:	4804      	ldr	r0, [pc, #16]	@ (80207fc <__i2b+0x28>)
 80207ea:	f7fe fcaf 	bl	801f14c <__assert_func>
 80207ee:	2301      	movs	r3, #1
 80207f0:	6144      	str	r4, [r0, #20]
 80207f2:	6103      	str	r3, [r0, #16]
 80207f4:	bd10      	pop	{r4, pc}
 80207f6:	bf00      	nop
 80207f8:	08024642 	.word	0x08024642
 80207fc:	080246b3 	.word	0x080246b3

08020800 <__multiply>:
 8020800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020804:	4614      	mov	r4, r2
 8020806:	690a      	ldr	r2, [r1, #16]
 8020808:	460f      	mov	r7, r1
 802080a:	b085      	sub	sp, #20
 802080c:	6923      	ldr	r3, [r4, #16]
 802080e:	429a      	cmp	r2, r3
 8020810:	bfa2      	ittt	ge
 8020812:	4623      	movge	r3, r4
 8020814:	460c      	movge	r4, r1
 8020816:	461f      	movge	r7, r3
 8020818:	f8d4 a010 	ldr.w	sl, [r4, #16]
 802081c:	68a3      	ldr	r3, [r4, #8]
 802081e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8020822:	6861      	ldr	r1, [r4, #4]
 8020824:	eb0a 0609 	add.w	r6, sl, r9
 8020828:	42b3      	cmp	r3, r6
 802082a:	bfb8      	it	lt
 802082c:	3101      	addlt	r1, #1
 802082e:	f7ff fe91 	bl	8020554 <_Balloc>
 8020832:	b930      	cbnz	r0, 8020842 <__multiply+0x42>
 8020834:	4602      	mov	r2, r0
 8020836:	4b45      	ldr	r3, [pc, #276]	@ (802094c <__multiply+0x14c>)
 8020838:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 802083c:	4844      	ldr	r0, [pc, #272]	@ (8020950 <__multiply+0x150>)
 802083e:	f7fe fc85 	bl	801f14c <__assert_func>
 8020842:	f100 0514 	add.w	r5, r0, #20
 8020846:	2200      	movs	r2, #0
 8020848:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 802084c:	462b      	mov	r3, r5
 802084e:	4543      	cmp	r3, r8
 8020850:	d321      	bcc.n	8020896 <__multiply+0x96>
 8020852:	f107 0114 	add.w	r1, r7, #20
 8020856:	f104 0214 	add.w	r2, r4, #20
 802085a:	f104 0715 	add.w	r7, r4, #21
 802085e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8020862:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8020866:	9302      	str	r3, [sp, #8]
 8020868:	1b13      	subs	r3, r2, r4
 802086a:	3b15      	subs	r3, #21
 802086c:	f023 0303 	bic.w	r3, r3, #3
 8020870:	3304      	adds	r3, #4
 8020872:	42ba      	cmp	r2, r7
 8020874:	bf38      	it	cc
 8020876:	2304      	movcc	r3, #4
 8020878:	9301      	str	r3, [sp, #4]
 802087a:	9b02      	ldr	r3, [sp, #8]
 802087c:	9103      	str	r1, [sp, #12]
 802087e:	428b      	cmp	r3, r1
 8020880:	d80c      	bhi.n	802089c <__multiply+0x9c>
 8020882:	2e00      	cmp	r6, #0
 8020884:	dd03      	ble.n	802088e <__multiply+0x8e>
 8020886:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 802088a:	2b00      	cmp	r3, #0
 802088c:	d05b      	beq.n	8020946 <__multiply+0x146>
 802088e:	6106      	str	r6, [r0, #16]
 8020890:	b005      	add	sp, #20
 8020892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020896:	f843 2b04 	str.w	r2, [r3], #4
 802089a:	e7d8      	b.n	802084e <__multiply+0x4e>
 802089c:	f8b1 a000 	ldrh.w	sl, [r1]
 80208a0:	f1ba 0f00 	cmp.w	sl, #0
 80208a4:	d024      	beq.n	80208f0 <__multiply+0xf0>
 80208a6:	f104 0e14 	add.w	lr, r4, #20
 80208aa:	46a9      	mov	r9, r5
 80208ac:	f04f 0c00 	mov.w	ip, #0
 80208b0:	f85e 7b04 	ldr.w	r7, [lr], #4
 80208b4:	f8d9 3000 	ldr.w	r3, [r9]
 80208b8:	fa1f fb87 	uxth.w	fp, r7
 80208bc:	4572      	cmp	r2, lr
 80208be:	b29b      	uxth	r3, r3
 80208c0:	fb0a 330b 	mla	r3, sl, fp, r3
 80208c4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80208c8:	f8d9 7000 	ldr.w	r7, [r9]
 80208cc:	4463      	add	r3, ip
 80208ce:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80208d2:	fb0a c70b 	mla	r7, sl, fp, ip
 80208d6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80208da:	b29b      	uxth	r3, r3
 80208dc:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80208e0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80208e4:	f849 3b04 	str.w	r3, [r9], #4
 80208e8:	d8e2      	bhi.n	80208b0 <__multiply+0xb0>
 80208ea:	9b01      	ldr	r3, [sp, #4]
 80208ec:	f845 c003 	str.w	ip, [r5, r3]
 80208f0:	9b03      	ldr	r3, [sp, #12]
 80208f2:	3104      	adds	r1, #4
 80208f4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80208f8:	f1b9 0f00 	cmp.w	r9, #0
 80208fc:	d021      	beq.n	8020942 <__multiply+0x142>
 80208fe:	682b      	ldr	r3, [r5, #0]
 8020900:	f104 0c14 	add.w	ip, r4, #20
 8020904:	46ae      	mov	lr, r5
 8020906:	f04f 0a00 	mov.w	sl, #0
 802090a:	f8bc b000 	ldrh.w	fp, [ip]
 802090e:	b29b      	uxth	r3, r3
 8020910:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8020914:	fb09 770b 	mla	r7, r9, fp, r7
 8020918:	4457      	add	r7, sl
 802091a:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 802091e:	f84e 3b04 	str.w	r3, [lr], #4
 8020922:	f85c 3b04 	ldr.w	r3, [ip], #4
 8020926:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802092a:	f8be 3000 	ldrh.w	r3, [lr]
 802092e:	4562      	cmp	r2, ip
 8020930:	fb09 330a 	mla	r3, r9, sl, r3
 8020934:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8020938:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802093c:	d8e5      	bhi.n	802090a <__multiply+0x10a>
 802093e:	9f01      	ldr	r7, [sp, #4]
 8020940:	51eb      	str	r3, [r5, r7]
 8020942:	3504      	adds	r5, #4
 8020944:	e799      	b.n	802087a <__multiply+0x7a>
 8020946:	3e01      	subs	r6, #1
 8020948:	e79b      	b.n	8020882 <__multiply+0x82>
 802094a:	bf00      	nop
 802094c:	08024642 	.word	0x08024642
 8020950:	080246b3 	.word	0x080246b3

08020954 <__pow5mult>:
 8020954:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020958:	4615      	mov	r5, r2
 802095a:	f012 0203 	ands.w	r2, r2, #3
 802095e:	4607      	mov	r7, r0
 8020960:	460e      	mov	r6, r1
 8020962:	d007      	beq.n	8020974 <__pow5mult+0x20>
 8020964:	3a01      	subs	r2, #1
 8020966:	4c25      	ldr	r4, [pc, #148]	@ (80209fc <__pow5mult+0xa8>)
 8020968:	2300      	movs	r3, #0
 802096a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802096e:	f7ff fe53 	bl	8020618 <__multadd>
 8020972:	4606      	mov	r6, r0
 8020974:	10ad      	asrs	r5, r5, #2
 8020976:	d03d      	beq.n	80209f4 <__pow5mult+0xa0>
 8020978:	69fc      	ldr	r4, [r7, #28]
 802097a:	b97c      	cbnz	r4, 802099c <__pow5mult+0x48>
 802097c:	2010      	movs	r0, #16
 802097e:	f7fc f9e7 	bl	801cd50 <malloc>
 8020982:	4602      	mov	r2, r0
 8020984:	61f8      	str	r0, [r7, #28]
 8020986:	b928      	cbnz	r0, 8020994 <__pow5mult+0x40>
 8020988:	4b1d      	ldr	r3, [pc, #116]	@ (8020a00 <__pow5mult+0xac>)
 802098a:	f240 11b3 	movw	r1, #435	@ 0x1b3
 802098e:	481d      	ldr	r0, [pc, #116]	@ (8020a04 <__pow5mult+0xb0>)
 8020990:	f7fe fbdc 	bl	801f14c <__assert_func>
 8020994:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8020998:	6004      	str	r4, [r0, #0]
 802099a:	60c4      	str	r4, [r0, #12]
 802099c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80209a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80209a4:	b94c      	cbnz	r4, 80209ba <__pow5mult+0x66>
 80209a6:	f240 2171 	movw	r1, #625	@ 0x271
 80209aa:	4638      	mov	r0, r7
 80209ac:	f7ff ff12 	bl	80207d4 <__i2b>
 80209b0:	2300      	movs	r3, #0
 80209b2:	4604      	mov	r4, r0
 80209b4:	f8c8 0008 	str.w	r0, [r8, #8]
 80209b8:	6003      	str	r3, [r0, #0]
 80209ba:	f04f 0900 	mov.w	r9, #0
 80209be:	07eb      	lsls	r3, r5, #31
 80209c0:	d50a      	bpl.n	80209d8 <__pow5mult+0x84>
 80209c2:	4631      	mov	r1, r6
 80209c4:	4622      	mov	r2, r4
 80209c6:	4638      	mov	r0, r7
 80209c8:	f7ff ff1a 	bl	8020800 <__multiply>
 80209cc:	4680      	mov	r8, r0
 80209ce:	4631      	mov	r1, r6
 80209d0:	4638      	mov	r0, r7
 80209d2:	4646      	mov	r6, r8
 80209d4:	f7ff fdfe 	bl	80205d4 <_Bfree>
 80209d8:	106d      	asrs	r5, r5, #1
 80209da:	d00b      	beq.n	80209f4 <__pow5mult+0xa0>
 80209dc:	6820      	ldr	r0, [r4, #0]
 80209de:	b938      	cbnz	r0, 80209f0 <__pow5mult+0x9c>
 80209e0:	4622      	mov	r2, r4
 80209e2:	4621      	mov	r1, r4
 80209e4:	4638      	mov	r0, r7
 80209e6:	f7ff ff0b 	bl	8020800 <__multiply>
 80209ea:	6020      	str	r0, [r4, #0]
 80209ec:	f8c0 9000 	str.w	r9, [r0]
 80209f0:	4604      	mov	r4, r0
 80209f2:	e7e4      	b.n	80209be <__pow5mult+0x6a>
 80209f4:	4630      	mov	r0, r6
 80209f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80209fa:	bf00      	nop
 80209fc:	0802470c 	.word	0x0802470c
 8020a00:	08024528 	.word	0x08024528
 8020a04:	080246b3 	.word	0x080246b3

08020a08 <__lshift>:
 8020a08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020a0c:	460c      	mov	r4, r1
 8020a0e:	4607      	mov	r7, r0
 8020a10:	4691      	mov	r9, r2
 8020a12:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8020a16:	6923      	ldr	r3, [r4, #16]
 8020a18:	6849      	ldr	r1, [r1, #4]
 8020a1a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8020a1e:	68a3      	ldr	r3, [r4, #8]
 8020a20:	f108 0601 	add.w	r6, r8, #1
 8020a24:	42b3      	cmp	r3, r6
 8020a26:	db0b      	blt.n	8020a40 <__lshift+0x38>
 8020a28:	4638      	mov	r0, r7
 8020a2a:	f7ff fd93 	bl	8020554 <_Balloc>
 8020a2e:	4605      	mov	r5, r0
 8020a30:	b948      	cbnz	r0, 8020a46 <__lshift+0x3e>
 8020a32:	4602      	mov	r2, r0
 8020a34:	4b28      	ldr	r3, [pc, #160]	@ (8020ad8 <__lshift+0xd0>)
 8020a36:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8020a3a:	4828      	ldr	r0, [pc, #160]	@ (8020adc <__lshift+0xd4>)
 8020a3c:	f7fe fb86 	bl	801f14c <__assert_func>
 8020a40:	3101      	adds	r1, #1
 8020a42:	005b      	lsls	r3, r3, #1
 8020a44:	e7ee      	b.n	8020a24 <__lshift+0x1c>
 8020a46:	2300      	movs	r3, #0
 8020a48:	f100 0114 	add.w	r1, r0, #20
 8020a4c:	f100 0210 	add.w	r2, r0, #16
 8020a50:	4618      	mov	r0, r3
 8020a52:	4553      	cmp	r3, sl
 8020a54:	db33      	blt.n	8020abe <__lshift+0xb6>
 8020a56:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8020a5a:	f104 0314 	add.w	r3, r4, #20
 8020a5e:	6920      	ldr	r0, [r4, #16]
 8020a60:	f019 091f 	ands.w	r9, r9, #31
 8020a64:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8020a68:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8020a6c:	d02b      	beq.n	8020ac6 <__lshift+0xbe>
 8020a6e:	f1c9 0e20 	rsb	lr, r9, #32
 8020a72:	468a      	mov	sl, r1
 8020a74:	2200      	movs	r2, #0
 8020a76:	6818      	ldr	r0, [r3, #0]
 8020a78:	fa00 f009 	lsl.w	r0, r0, r9
 8020a7c:	4310      	orrs	r0, r2
 8020a7e:	f84a 0b04 	str.w	r0, [sl], #4
 8020a82:	f853 2b04 	ldr.w	r2, [r3], #4
 8020a86:	459c      	cmp	ip, r3
 8020a88:	fa22 f20e 	lsr.w	r2, r2, lr
 8020a8c:	d8f3      	bhi.n	8020a76 <__lshift+0x6e>
 8020a8e:	ebac 0304 	sub.w	r3, ip, r4
 8020a92:	f104 0015 	add.w	r0, r4, #21
 8020a96:	3b15      	subs	r3, #21
 8020a98:	f023 0303 	bic.w	r3, r3, #3
 8020a9c:	3304      	adds	r3, #4
 8020a9e:	4584      	cmp	ip, r0
 8020aa0:	bf38      	it	cc
 8020aa2:	2304      	movcc	r3, #4
 8020aa4:	50ca      	str	r2, [r1, r3]
 8020aa6:	b10a      	cbz	r2, 8020aac <__lshift+0xa4>
 8020aa8:	f108 0602 	add.w	r6, r8, #2
 8020aac:	3e01      	subs	r6, #1
 8020aae:	4638      	mov	r0, r7
 8020ab0:	4621      	mov	r1, r4
 8020ab2:	612e      	str	r6, [r5, #16]
 8020ab4:	f7ff fd8e 	bl	80205d4 <_Bfree>
 8020ab8:	4628      	mov	r0, r5
 8020aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020abe:	3301      	adds	r3, #1
 8020ac0:	f842 0f04 	str.w	r0, [r2, #4]!
 8020ac4:	e7c5      	b.n	8020a52 <__lshift+0x4a>
 8020ac6:	3904      	subs	r1, #4
 8020ac8:	f853 2b04 	ldr.w	r2, [r3], #4
 8020acc:	459c      	cmp	ip, r3
 8020ace:	f841 2f04 	str.w	r2, [r1, #4]!
 8020ad2:	d8f9      	bhi.n	8020ac8 <__lshift+0xc0>
 8020ad4:	e7ea      	b.n	8020aac <__lshift+0xa4>
 8020ad6:	bf00      	nop
 8020ad8:	08024642 	.word	0x08024642
 8020adc:	080246b3 	.word	0x080246b3

08020ae0 <__mcmp>:
 8020ae0:	4603      	mov	r3, r0
 8020ae2:	690a      	ldr	r2, [r1, #16]
 8020ae4:	6900      	ldr	r0, [r0, #16]
 8020ae6:	1a80      	subs	r0, r0, r2
 8020ae8:	b530      	push	{r4, r5, lr}
 8020aea:	d10e      	bne.n	8020b0a <__mcmp+0x2a>
 8020aec:	3314      	adds	r3, #20
 8020aee:	3114      	adds	r1, #20
 8020af0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8020af4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8020af8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8020afc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8020b00:	4295      	cmp	r5, r2
 8020b02:	d003      	beq.n	8020b0c <__mcmp+0x2c>
 8020b04:	d205      	bcs.n	8020b12 <__mcmp+0x32>
 8020b06:	f04f 30ff 	mov.w	r0, #4294967295
 8020b0a:	bd30      	pop	{r4, r5, pc}
 8020b0c:	42a3      	cmp	r3, r4
 8020b0e:	d3f3      	bcc.n	8020af8 <__mcmp+0x18>
 8020b10:	e7fb      	b.n	8020b0a <__mcmp+0x2a>
 8020b12:	2001      	movs	r0, #1
 8020b14:	e7f9      	b.n	8020b0a <__mcmp+0x2a>
	...

08020b18 <__mdiff>:
 8020b18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020b1c:	4689      	mov	r9, r1
 8020b1e:	4606      	mov	r6, r0
 8020b20:	4611      	mov	r1, r2
 8020b22:	4614      	mov	r4, r2
 8020b24:	4648      	mov	r0, r9
 8020b26:	f7ff ffdb 	bl	8020ae0 <__mcmp>
 8020b2a:	1e05      	subs	r5, r0, #0
 8020b2c:	d112      	bne.n	8020b54 <__mdiff+0x3c>
 8020b2e:	4629      	mov	r1, r5
 8020b30:	4630      	mov	r0, r6
 8020b32:	f7ff fd0f 	bl	8020554 <_Balloc>
 8020b36:	4602      	mov	r2, r0
 8020b38:	b928      	cbnz	r0, 8020b46 <__mdiff+0x2e>
 8020b3a:	4b41      	ldr	r3, [pc, #260]	@ (8020c40 <__mdiff+0x128>)
 8020b3c:	f240 2137 	movw	r1, #567	@ 0x237
 8020b40:	4840      	ldr	r0, [pc, #256]	@ (8020c44 <__mdiff+0x12c>)
 8020b42:	f7fe fb03 	bl	801f14c <__assert_func>
 8020b46:	2301      	movs	r3, #1
 8020b48:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8020b4c:	4610      	mov	r0, r2
 8020b4e:	b003      	add	sp, #12
 8020b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020b54:	bfbc      	itt	lt
 8020b56:	464b      	movlt	r3, r9
 8020b58:	46a1      	movlt	r9, r4
 8020b5a:	4630      	mov	r0, r6
 8020b5c:	bfb8      	it	lt
 8020b5e:	2501      	movlt	r5, #1
 8020b60:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8020b64:	bfb4      	ite	lt
 8020b66:	461c      	movlt	r4, r3
 8020b68:	2500      	movge	r5, #0
 8020b6a:	f7ff fcf3 	bl	8020554 <_Balloc>
 8020b6e:	4602      	mov	r2, r0
 8020b70:	b918      	cbnz	r0, 8020b7a <__mdiff+0x62>
 8020b72:	4b33      	ldr	r3, [pc, #204]	@ (8020c40 <__mdiff+0x128>)
 8020b74:	f240 2145 	movw	r1, #581	@ 0x245
 8020b78:	e7e2      	b.n	8020b40 <__mdiff+0x28>
 8020b7a:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8020b7e:	f104 0e14 	add.w	lr, r4, #20
 8020b82:	6926      	ldr	r6, [r4, #16]
 8020b84:	f100 0b14 	add.w	fp, r0, #20
 8020b88:	60c5      	str	r5, [r0, #12]
 8020b8a:	f109 0514 	add.w	r5, r9, #20
 8020b8e:	f109 0310 	add.w	r3, r9, #16
 8020b92:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8020b96:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8020b9a:	46d9      	mov	r9, fp
 8020b9c:	f04f 0c00 	mov.w	ip, #0
 8020ba0:	9301      	str	r3, [sp, #4]
 8020ba2:	9b01      	ldr	r3, [sp, #4]
 8020ba4:	f85e 0b04 	ldr.w	r0, [lr], #4
 8020ba8:	f853 af04 	ldr.w	sl, [r3, #4]!
 8020bac:	4576      	cmp	r6, lr
 8020bae:	9301      	str	r3, [sp, #4]
 8020bb0:	fa1f f38a 	uxth.w	r3, sl
 8020bb4:	4619      	mov	r1, r3
 8020bb6:	b283      	uxth	r3, r0
 8020bb8:	ea4f 4010 	mov.w	r0, r0, lsr #16
 8020bbc:	eba1 0303 	sub.w	r3, r1, r3
 8020bc0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8020bc4:	4463      	add	r3, ip
 8020bc6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8020bca:	b29b      	uxth	r3, r3
 8020bcc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8020bd0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8020bd4:	f849 3b04 	str.w	r3, [r9], #4
 8020bd8:	d8e3      	bhi.n	8020ba2 <__mdiff+0x8a>
 8020bda:	1b33      	subs	r3, r6, r4
 8020bdc:	3415      	adds	r4, #21
 8020bde:	3b15      	subs	r3, #21
 8020be0:	f023 0303 	bic.w	r3, r3, #3
 8020be4:	3304      	adds	r3, #4
 8020be6:	42a6      	cmp	r6, r4
 8020be8:	bf38      	it	cc
 8020bea:	2304      	movcc	r3, #4
 8020bec:	441d      	add	r5, r3
 8020bee:	445b      	add	r3, fp
 8020bf0:	462c      	mov	r4, r5
 8020bf2:	461e      	mov	r6, r3
 8020bf4:	4544      	cmp	r4, r8
 8020bf6:	d30e      	bcc.n	8020c16 <__mdiff+0xfe>
 8020bf8:	f108 0103 	add.w	r1, r8, #3
 8020bfc:	1b49      	subs	r1, r1, r5
 8020bfe:	3d03      	subs	r5, #3
 8020c00:	f021 0103 	bic.w	r1, r1, #3
 8020c04:	45a8      	cmp	r8, r5
 8020c06:	bf38      	it	cc
 8020c08:	2100      	movcc	r1, #0
 8020c0a:	440b      	add	r3, r1
 8020c0c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8020c10:	b199      	cbz	r1, 8020c3a <__mdiff+0x122>
 8020c12:	6117      	str	r7, [r2, #16]
 8020c14:	e79a      	b.n	8020b4c <__mdiff+0x34>
 8020c16:	f854 1b04 	ldr.w	r1, [r4], #4
 8020c1a:	46e6      	mov	lr, ip
 8020c1c:	fa1f fc81 	uxth.w	ip, r1
 8020c20:	0c08      	lsrs	r0, r1, #16
 8020c22:	4471      	add	r1, lr
 8020c24:	44f4      	add	ip, lr
 8020c26:	b289      	uxth	r1, r1
 8020c28:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8020c2c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8020c30:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8020c34:	f846 1b04 	str.w	r1, [r6], #4
 8020c38:	e7dc      	b.n	8020bf4 <__mdiff+0xdc>
 8020c3a:	3f01      	subs	r7, #1
 8020c3c:	e7e6      	b.n	8020c0c <__mdiff+0xf4>
 8020c3e:	bf00      	nop
 8020c40:	08024642 	.word	0x08024642
 8020c44:	080246b3 	.word	0x080246b3

08020c48 <__ulp>:
 8020c48:	b082      	sub	sp, #8
 8020c4a:	4b11      	ldr	r3, [pc, #68]	@ (8020c90 <__ulp+0x48>)
 8020c4c:	ed8d 0b00 	vstr	d0, [sp]
 8020c50:	9a01      	ldr	r2, [sp, #4]
 8020c52:	4013      	ands	r3, r2
 8020c54:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8020c58:	2b00      	cmp	r3, #0
 8020c5a:	dc08      	bgt.n	8020c6e <__ulp+0x26>
 8020c5c:	425b      	negs	r3, r3
 8020c5e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8020c62:	ea4f 5223 	mov.w	r2, r3, asr #20
 8020c66:	da04      	bge.n	8020c72 <__ulp+0x2a>
 8020c68:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8020c6c:	4113      	asrs	r3, r2
 8020c6e:	2200      	movs	r2, #0
 8020c70:	e008      	b.n	8020c84 <__ulp+0x3c>
 8020c72:	f1a2 0314 	sub.w	r3, r2, #20
 8020c76:	2b1e      	cmp	r3, #30
 8020c78:	bfd6      	itet	le
 8020c7a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8020c7e:	2201      	movgt	r2, #1
 8020c80:	40da      	lsrle	r2, r3
 8020c82:	2300      	movs	r3, #0
 8020c84:	4619      	mov	r1, r3
 8020c86:	4610      	mov	r0, r2
 8020c88:	ec41 0b10 	vmov	d0, r0, r1
 8020c8c:	b002      	add	sp, #8
 8020c8e:	4770      	bx	lr
 8020c90:	7ff00000 	.word	0x7ff00000

08020c94 <__b2d>:
 8020c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020c98:	6906      	ldr	r6, [r0, #16]
 8020c9a:	f100 0814 	add.w	r8, r0, #20
 8020c9e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8020ca2:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8020ca6:	1f37      	subs	r7, r6, #4
 8020ca8:	4610      	mov	r0, r2
 8020caa:	f7ff fd47 	bl	802073c <__hi0bits>
 8020cae:	f1c0 0320 	rsb	r3, r0, #32
 8020cb2:	280a      	cmp	r0, #10
 8020cb4:	600b      	str	r3, [r1, #0]
 8020cb6:	491d      	ldr	r1, [pc, #116]	@ (8020d2c <__b2d+0x98>)
 8020cb8:	dc16      	bgt.n	8020ce8 <__b2d+0x54>
 8020cba:	f1c0 0c0b 	rsb	ip, r0, #11
 8020cbe:	45b8      	cmp	r8, r7
 8020cc0:	f100 0015 	add.w	r0, r0, #21
 8020cc4:	fa22 f30c 	lsr.w	r3, r2, ip
 8020cc8:	fa02 f000 	lsl.w	r0, r2, r0
 8020ccc:	ea43 0501 	orr.w	r5, r3, r1
 8020cd0:	bf34      	ite	cc
 8020cd2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8020cd6:	2300      	movcs	r3, #0
 8020cd8:	fa23 f30c 	lsr.w	r3, r3, ip
 8020cdc:	4303      	orrs	r3, r0
 8020cde:	461c      	mov	r4, r3
 8020ce0:	ec45 4b10 	vmov	d0, r4, r5
 8020ce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020ce8:	45b8      	cmp	r8, r7
 8020cea:	bf3a      	itte	cc
 8020cec:	f1a6 0708 	subcc.w	r7, r6, #8
 8020cf0:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8020cf4:	2300      	movcs	r3, #0
 8020cf6:	380b      	subs	r0, #11
 8020cf8:	d014      	beq.n	8020d24 <__b2d+0x90>
 8020cfa:	f1c0 0120 	rsb	r1, r0, #32
 8020cfe:	4082      	lsls	r2, r0
 8020d00:	4547      	cmp	r7, r8
 8020d02:	fa23 f401 	lsr.w	r4, r3, r1
 8020d06:	fa03 f300 	lsl.w	r3, r3, r0
 8020d0a:	ea42 0204 	orr.w	r2, r2, r4
 8020d0e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8020d12:	bf8c      	ite	hi
 8020d14:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8020d18:	2200      	movls	r2, #0
 8020d1a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8020d1e:	40ca      	lsrs	r2, r1
 8020d20:	4313      	orrs	r3, r2
 8020d22:	e7dc      	b.n	8020cde <__b2d+0x4a>
 8020d24:	ea42 0501 	orr.w	r5, r2, r1
 8020d28:	e7d9      	b.n	8020cde <__b2d+0x4a>
 8020d2a:	bf00      	nop
 8020d2c:	3ff00000 	.word	0x3ff00000

08020d30 <__d2b>:
 8020d30:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8020d34:	460f      	mov	r7, r1
 8020d36:	2101      	movs	r1, #1
 8020d38:	4616      	mov	r6, r2
 8020d3a:	ec59 8b10 	vmov	r8, r9, d0
 8020d3e:	f7ff fc09 	bl	8020554 <_Balloc>
 8020d42:	4604      	mov	r4, r0
 8020d44:	b930      	cbnz	r0, 8020d54 <__d2b+0x24>
 8020d46:	4602      	mov	r2, r0
 8020d48:	4b23      	ldr	r3, [pc, #140]	@ (8020dd8 <__d2b+0xa8>)
 8020d4a:	f240 310f 	movw	r1, #783	@ 0x30f
 8020d4e:	4823      	ldr	r0, [pc, #140]	@ (8020ddc <__d2b+0xac>)
 8020d50:	f7fe f9fc 	bl	801f14c <__assert_func>
 8020d54:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8020d58:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8020d5c:	b10d      	cbz	r5, 8020d62 <__d2b+0x32>
 8020d5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8020d62:	9301      	str	r3, [sp, #4]
 8020d64:	f1b8 0300 	subs.w	r3, r8, #0
 8020d68:	d023      	beq.n	8020db2 <__d2b+0x82>
 8020d6a:	4668      	mov	r0, sp
 8020d6c:	9300      	str	r3, [sp, #0]
 8020d6e:	f7ff fd04 	bl	802077a <__lo0bits>
 8020d72:	e9dd 1200 	ldrd	r1, r2, [sp]
 8020d76:	b1d0      	cbz	r0, 8020dae <__d2b+0x7e>
 8020d78:	f1c0 0320 	rsb	r3, r0, #32
 8020d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8020d80:	40c2      	lsrs	r2, r0
 8020d82:	430b      	orrs	r3, r1
 8020d84:	9201      	str	r2, [sp, #4]
 8020d86:	6163      	str	r3, [r4, #20]
 8020d88:	9b01      	ldr	r3, [sp, #4]
 8020d8a:	2b00      	cmp	r3, #0
 8020d8c:	61a3      	str	r3, [r4, #24]
 8020d8e:	bf0c      	ite	eq
 8020d90:	2201      	moveq	r2, #1
 8020d92:	2202      	movne	r2, #2
 8020d94:	6122      	str	r2, [r4, #16]
 8020d96:	b1a5      	cbz	r5, 8020dc2 <__d2b+0x92>
 8020d98:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8020d9c:	4405      	add	r5, r0
 8020d9e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8020da2:	603d      	str	r5, [r7, #0]
 8020da4:	6030      	str	r0, [r6, #0]
 8020da6:	4620      	mov	r0, r4
 8020da8:	b003      	add	sp, #12
 8020daa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020dae:	6161      	str	r1, [r4, #20]
 8020db0:	e7ea      	b.n	8020d88 <__d2b+0x58>
 8020db2:	a801      	add	r0, sp, #4
 8020db4:	f7ff fce1 	bl	802077a <__lo0bits>
 8020db8:	9b01      	ldr	r3, [sp, #4]
 8020dba:	3020      	adds	r0, #32
 8020dbc:	2201      	movs	r2, #1
 8020dbe:	6163      	str	r3, [r4, #20]
 8020dc0:	e7e8      	b.n	8020d94 <__d2b+0x64>
 8020dc2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8020dc6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8020dca:	6038      	str	r0, [r7, #0]
 8020dcc:	6918      	ldr	r0, [r3, #16]
 8020dce:	f7ff fcb5 	bl	802073c <__hi0bits>
 8020dd2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8020dd6:	e7e5      	b.n	8020da4 <__d2b+0x74>
 8020dd8:	08024642 	.word	0x08024642
 8020ddc:	080246b3 	.word	0x080246b3

08020de0 <__ratio>:
 8020de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020de4:	b085      	sub	sp, #20
 8020de6:	e9cd 1000 	strd	r1, r0, [sp]
 8020dea:	a902      	add	r1, sp, #8
 8020dec:	f7ff ff52 	bl	8020c94 <__b2d>
 8020df0:	a903      	add	r1, sp, #12
 8020df2:	9800      	ldr	r0, [sp, #0]
 8020df4:	ec55 4b10 	vmov	r4, r5, d0
 8020df8:	f7ff ff4c 	bl	8020c94 <__b2d>
 8020dfc:	9b01      	ldr	r3, [sp, #4]
 8020dfe:	462f      	mov	r7, r5
 8020e00:	4620      	mov	r0, r4
 8020e02:	6919      	ldr	r1, [r3, #16]
 8020e04:	9b00      	ldr	r3, [sp, #0]
 8020e06:	691b      	ldr	r3, [r3, #16]
 8020e08:	1ac9      	subs	r1, r1, r3
 8020e0a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8020e0e:	ec5b ab10 	vmov	sl, fp, d0
 8020e12:	1a9b      	subs	r3, r3, r2
 8020e14:	46d9      	mov	r9, fp
 8020e16:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8020e1a:	2b00      	cmp	r3, #0
 8020e1c:	bfcd      	iteet	gt
 8020e1e:	462a      	movgt	r2, r5
 8020e20:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8020e24:	465a      	movle	r2, fp
 8020e26:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8020e2a:	bfd8      	it	le
 8020e2c:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8020e30:	4652      	mov	r2, sl
 8020e32:	4639      	mov	r1, r7
 8020e34:	464b      	mov	r3, r9
 8020e36:	f7df fd23 	bl	8000880 <__aeabi_ddiv>
 8020e3a:	ec41 0b10 	vmov	d0, r0, r1
 8020e3e:	b005      	add	sp, #20
 8020e40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020e44 <__copybits>:
 8020e44:	3901      	subs	r1, #1
 8020e46:	f102 0314 	add.w	r3, r2, #20
 8020e4a:	1149      	asrs	r1, r1, #5
 8020e4c:	b570      	push	{r4, r5, r6, lr}
 8020e4e:	3101      	adds	r1, #1
 8020e50:	6914      	ldr	r4, [r2, #16]
 8020e52:	1f05      	subs	r5, r0, #4
 8020e54:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8020e58:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8020e5c:	42a3      	cmp	r3, r4
 8020e5e:	d30c      	bcc.n	8020e7a <__copybits+0x36>
 8020e60:	1aa3      	subs	r3, r4, r2
 8020e62:	3211      	adds	r2, #17
 8020e64:	3b11      	subs	r3, #17
 8020e66:	f023 0303 	bic.w	r3, r3, #3
 8020e6a:	42a2      	cmp	r2, r4
 8020e6c:	bf88      	it	hi
 8020e6e:	2300      	movhi	r3, #0
 8020e70:	4418      	add	r0, r3
 8020e72:	2300      	movs	r3, #0
 8020e74:	4288      	cmp	r0, r1
 8020e76:	d305      	bcc.n	8020e84 <__copybits+0x40>
 8020e78:	bd70      	pop	{r4, r5, r6, pc}
 8020e7a:	f853 6b04 	ldr.w	r6, [r3], #4
 8020e7e:	f845 6f04 	str.w	r6, [r5, #4]!
 8020e82:	e7eb      	b.n	8020e5c <__copybits+0x18>
 8020e84:	f840 3b04 	str.w	r3, [r0], #4
 8020e88:	e7f4      	b.n	8020e74 <__copybits+0x30>

08020e8a <__any_on>:
 8020e8a:	f100 0214 	add.w	r2, r0, #20
 8020e8e:	114b      	asrs	r3, r1, #5
 8020e90:	6900      	ldr	r0, [r0, #16]
 8020e92:	4298      	cmp	r0, r3
 8020e94:	b510      	push	{r4, lr}
 8020e96:	db11      	blt.n	8020ebc <__any_on+0x32>
 8020e98:	dd0a      	ble.n	8020eb0 <__any_on+0x26>
 8020e9a:	f011 011f 	ands.w	r1, r1, #31
 8020e9e:	d007      	beq.n	8020eb0 <__any_on+0x26>
 8020ea0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8020ea4:	fa24 f001 	lsr.w	r0, r4, r1
 8020ea8:	fa00 f101 	lsl.w	r1, r0, r1
 8020eac:	428c      	cmp	r4, r1
 8020eae:	d10b      	bne.n	8020ec8 <__any_on+0x3e>
 8020eb0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8020eb4:	4293      	cmp	r3, r2
 8020eb6:	d803      	bhi.n	8020ec0 <__any_on+0x36>
 8020eb8:	2000      	movs	r0, #0
 8020eba:	bd10      	pop	{r4, pc}
 8020ebc:	4603      	mov	r3, r0
 8020ebe:	e7f7      	b.n	8020eb0 <__any_on+0x26>
 8020ec0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8020ec4:	2900      	cmp	r1, #0
 8020ec6:	d0f5      	beq.n	8020eb4 <__any_on+0x2a>
 8020ec8:	2001      	movs	r0, #1
 8020eca:	e7f6      	b.n	8020eba <__any_on+0x30>

08020ecc <__ascii_wctomb>:
 8020ecc:	4603      	mov	r3, r0
 8020ece:	4608      	mov	r0, r1
 8020ed0:	b141      	cbz	r1, 8020ee4 <__ascii_wctomb+0x18>
 8020ed2:	2aff      	cmp	r2, #255	@ 0xff
 8020ed4:	d904      	bls.n	8020ee0 <__ascii_wctomb+0x14>
 8020ed6:	228a      	movs	r2, #138	@ 0x8a
 8020ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8020edc:	601a      	str	r2, [r3, #0]
 8020ede:	4770      	bx	lr
 8020ee0:	2001      	movs	r0, #1
 8020ee2:	700a      	strb	r2, [r1, #0]
 8020ee4:	4770      	bx	lr

08020ee6 <__ssputs_r>:
 8020ee6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020eea:	461f      	mov	r7, r3
 8020eec:	688e      	ldr	r6, [r1, #8]
 8020eee:	4682      	mov	sl, r0
 8020ef0:	460c      	mov	r4, r1
 8020ef2:	42be      	cmp	r6, r7
 8020ef4:	4690      	mov	r8, r2
 8020ef6:	680b      	ldr	r3, [r1, #0]
 8020ef8:	d82d      	bhi.n	8020f56 <__ssputs_r+0x70>
 8020efa:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8020efe:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8020f02:	d026      	beq.n	8020f52 <__ssputs_r+0x6c>
 8020f04:	6965      	ldr	r5, [r4, #20]
 8020f06:	6909      	ldr	r1, [r1, #16]
 8020f08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020f0c:	eba3 0901 	sub.w	r9, r3, r1
 8020f10:	1c7b      	adds	r3, r7, #1
 8020f12:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8020f16:	444b      	add	r3, r9
 8020f18:	106d      	asrs	r5, r5, #1
 8020f1a:	429d      	cmp	r5, r3
 8020f1c:	bf38      	it	cc
 8020f1e:	461d      	movcc	r5, r3
 8020f20:	0553      	lsls	r3, r2, #21
 8020f22:	d527      	bpl.n	8020f74 <__ssputs_r+0x8e>
 8020f24:	4629      	mov	r1, r5
 8020f26:	f7fb ff45 	bl	801cdb4 <_malloc_r>
 8020f2a:	4606      	mov	r6, r0
 8020f2c:	b360      	cbz	r0, 8020f88 <__ssputs_r+0xa2>
 8020f2e:	464a      	mov	r2, r9
 8020f30:	6921      	ldr	r1, [r4, #16]
 8020f32:	f7fe f8f0 	bl	801f116 <memcpy>
 8020f36:	89a3      	ldrh	r3, [r4, #12]
 8020f38:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8020f3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8020f40:	81a3      	strh	r3, [r4, #12]
 8020f42:	6126      	str	r6, [r4, #16]
 8020f44:	444e      	add	r6, r9
 8020f46:	6165      	str	r5, [r4, #20]
 8020f48:	eba5 0509 	sub.w	r5, r5, r9
 8020f4c:	6026      	str	r6, [r4, #0]
 8020f4e:	463e      	mov	r6, r7
 8020f50:	60a5      	str	r5, [r4, #8]
 8020f52:	42be      	cmp	r6, r7
 8020f54:	d900      	bls.n	8020f58 <__ssputs_r+0x72>
 8020f56:	463e      	mov	r6, r7
 8020f58:	4632      	mov	r2, r6
 8020f5a:	4641      	mov	r1, r8
 8020f5c:	6820      	ldr	r0, [r4, #0]
 8020f5e:	f000 ff02 	bl	8021d66 <memmove>
 8020f62:	68a3      	ldr	r3, [r4, #8]
 8020f64:	2000      	movs	r0, #0
 8020f66:	1b9b      	subs	r3, r3, r6
 8020f68:	60a3      	str	r3, [r4, #8]
 8020f6a:	6823      	ldr	r3, [r4, #0]
 8020f6c:	4433      	add	r3, r6
 8020f6e:	6023      	str	r3, [r4, #0]
 8020f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020f74:	462a      	mov	r2, r5
 8020f76:	f000 ff4e 	bl	8021e16 <_realloc_r>
 8020f7a:	4606      	mov	r6, r0
 8020f7c:	2800      	cmp	r0, #0
 8020f7e:	d1e0      	bne.n	8020f42 <__ssputs_r+0x5c>
 8020f80:	6921      	ldr	r1, [r4, #16]
 8020f82:	4650      	mov	r0, sl
 8020f84:	f7fe ff54 	bl	801fe30 <_free_r>
 8020f88:	230c      	movs	r3, #12
 8020f8a:	f04f 30ff 	mov.w	r0, #4294967295
 8020f8e:	f8ca 3000 	str.w	r3, [sl]
 8020f92:	89a3      	ldrh	r3, [r4, #12]
 8020f94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8020f98:	81a3      	strh	r3, [r4, #12]
 8020f9a:	e7e9      	b.n	8020f70 <__ssputs_r+0x8a>

08020f9c <_svfiprintf_r>:
 8020f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020fa0:	4698      	mov	r8, r3
 8020fa2:	898b      	ldrh	r3, [r1, #12]
 8020fa4:	b09d      	sub	sp, #116	@ 0x74
 8020fa6:	4607      	mov	r7, r0
 8020fa8:	061b      	lsls	r3, r3, #24
 8020faa:	460d      	mov	r5, r1
 8020fac:	4614      	mov	r4, r2
 8020fae:	d510      	bpl.n	8020fd2 <_svfiprintf_r+0x36>
 8020fb0:	690b      	ldr	r3, [r1, #16]
 8020fb2:	b973      	cbnz	r3, 8020fd2 <_svfiprintf_r+0x36>
 8020fb4:	2140      	movs	r1, #64	@ 0x40
 8020fb6:	f7fb fefd 	bl	801cdb4 <_malloc_r>
 8020fba:	6028      	str	r0, [r5, #0]
 8020fbc:	6128      	str	r0, [r5, #16]
 8020fbe:	b930      	cbnz	r0, 8020fce <_svfiprintf_r+0x32>
 8020fc0:	230c      	movs	r3, #12
 8020fc2:	603b      	str	r3, [r7, #0]
 8020fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8020fc8:	b01d      	add	sp, #116	@ 0x74
 8020fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020fce:	2340      	movs	r3, #64	@ 0x40
 8020fd0:	616b      	str	r3, [r5, #20]
 8020fd2:	2300      	movs	r3, #0
 8020fd4:	f8cd 800c 	str.w	r8, [sp, #12]
 8020fd8:	f04f 0901 	mov.w	r9, #1
 8020fdc:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 8021180 <_svfiprintf_r+0x1e4>
 8020fe0:	9309      	str	r3, [sp, #36]	@ 0x24
 8020fe2:	2320      	movs	r3, #32
 8020fe4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8020fe8:	2330      	movs	r3, #48	@ 0x30
 8020fea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8020fee:	4623      	mov	r3, r4
 8020ff0:	469a      	mov	sl, r3
 8020ff2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020ff6:	b10a      	cbz	r2, 8020ffc <_svfiprintf_r+0x60>
 8020ff8:	2a25      	cmp	r2, #37	@ 0x25
 8020ffa:	d1f9      	bne.n	8020ff0 <_svfiprintf_r+0x54>
 8020ffc:	ebba 0b04 	subs.w	fp, sl, r4
 8021000:	d00b      	beq.n	802101a <_svfiprintf_r+0x7e>
 8021002:	465b      	mov	r3, fp
 8021004:	4622      	mov	r2, r4
 8021006:	4629      	mov	r1, r5
 8021008:	4638      	mov	r0, r7
 802100a:	f7ff ff6c 	bl	8020ee6 <__ssputs_r>
 802100e:	3001      	adds	r0, #1
 8021010:	f000 80a7 	beq.w	8021162 <_svfiprintf_r+0x1c6>
 8021014:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021016:	445a      	add	r2, fp
 8021018:	9209      	str	r2, [sp, #36]	@ 0x24
 802101a:	f89a 3000 	ldrb.w	r3, [sl]
 802101e:	2b00      	cmp	r3, #0
 8021020:	f000 809f 	beq.w	8021162 <_svfiprintf_r+0x1c6>
 8021024:	2300      	movs	r3, #0
 8021026:	f04f 32ff 	mov.w	r2, #4294967295
 802102a:	f10a 0a01 	add.w	sl, sl, #1
 802102e:	9304      	str	r3, [sp, #16]
 8021030:	9307      	str	r3, [sp, #28]
 8021032:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8021036:	931a      	str	r3, [sp, #104]	@ 0x68
 8021038:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802103c:	4654      	mov	r4, sl
 802103e:	2205      	movs	r2, #5
 8021040:	484f      	ldr	r0, [pc, #316]	@ (8021180 <_svfiprintf_r+0x1e4>)
 8021042:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021046:	f7fe f858 	bl	801f0fa <memchr>
 802104a:	9a04      	ldr	r2, [sp, #16]
 802104c:	b9d8      	cbnz	r0, 8021086 <_svfiprintf_r+0xea>
 802104e:	06d0      	lsls	r0, r2, #27
 8021050:	bf44      	itt	mi
 8021052:	2320      	movmi	r3, #32
 8021054:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8021058:	0711      	lsls	r1, r2, #28
 802105a:	bf44      	itt	mi
 802105c:	232b      	movmi	r3, #43	@ 0x2b
 802105e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8021062:	f89a 3000 	ldrb.w	r3, [sl]
 8021066:	2b2a      	cmp	r3, #42	@ 0x2a
 8021068:	d015      	beq.n	8021096 <_svfiprintf_r+0xfa>
 802106a:	9a07      	ldr	r2, [sp, #28]
 802106c:	4654      	mov	r4, sl
 802106e:	2000      	movs	r0, #0
 8021070:	f04f 0c0a 	mov.w	ip, #10
 8021074:	4621      	mov	r1, r4
 8021076:	f811 3b01 	ldrb.w	r3, [r1], #1
 802107a:	3b30      	subs	r3, #48	@ 0x30
 802107c:	2b09      	cmp	r3, #9
 802107e:	d94b      	bls.n	8021118 <_svfiprintf_r+0x17c>
 8021080:	b1b0      	cbz	r0, 80210b0 <_svfiprintf_r+0x114>
 8021082:	9207      	str	r2, [sp, #28]
 8021084:	e014      	b.n	80210b0 <_svfiprintf_r+0x114>
 8021086:	eba0 0308 	sub.w	r3, r0, r8
 802108a:	46a2      	mov	sl, r4
 802108c:	fa09 f303 	lsl.w	r3, r9, r3
 8021090:	4313      	orrs	r3, r2
 8021092:	9304      	str	r3, [sp, #16]
 8021094:	e7d2      	b.n	802103c <_svfiprintf_r+0xa0>
 8021096:	9b03      	ldr	r3, [sp, #12]
 8021098:	1d19      	adds	r1, r3, #4
 802109a:	681b      	ldr	r3, [r3, #0]
 802109c:	2b00      	cmp	r3, #0
 802109e:	9103      	str	r1, [sp, #12]
 80210a0:	bfbb      	ittet	lt
 80210a2:	425b      	neglt	r3, r3
 80210a4:	f042 0202 	orrlt.w	r2, r2, #2
 80210a8:	9307      	strge	r3, [sp, #28]
 80210aa:	9307      	strlt	r3, [sp, #28]
 80210ac:	bfb8      	it	lt
 80210ae:	9204      	strlt	r2, [sp, #16]
 80210b0:	7823      	ldrb	r3, [r4, #0]
 80210b2:	2b2e      	cmp	r3, #46	@ 0x2e
 80210b4:	d10a      	bne.n	80210cc <_svfiprintf_r+0x130>
 80210b6:	7863      	ldrb	r3, [r4, #1]
 80210b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80210ba:	d132      	bne.n	8021122 <_svfiprintf_r+0x186>
 80210bc:	9b03      	ldr	r3, [sp, #12]
 80210be:	3402      	adds	r4, #2
 80210c0:	1d1a      	adds	r2, r3, #4
 80210c2:	681b      	ldr	r3, [r3, #0]
 80210c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80210c8:	9203      	str	r2, [sp, #12]
 80210ca:	9305      	str	r3, [sp, #20]
 80210cc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8021190 <_svfiprintf_r+0x1f4>
 80210d0:	2203      	movs	r2, #3
 80210d2:	7821      	ldrb	r1, [r4, #0]
 80210d4:	4650      	mov	r0, sl
 80210d6:	f7fe f810 	bl	801f0fa <memchr>
 80210da:	b138      	cbz	r0, 80210ec <_svfiprintf_r+0x150>
 80210dc:	eba0 000a 	sub.w	r0, r0, sl
 80210e0:	2240      	movs	r2, #64	@ 0x40
 80210e2:	9b04      	ldr	r3, [sp, #16]
 80210e4:	3401      	adds	r4, #1
 80210e6:	4082      	lsls	r2, r0
 80210e8:	4313      	orrs	r3, r2
 80210ea:	9304      	str	r3, [sp, #16]
 80210ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80210f0:	2206      	movs	r2, #6
 80210f2:	4824      	ldr	r0, [pc, #144]	@ (8021184 <_svfiprintf_r+0x1e8>)
 80210f4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80210f8:	f7fd ffff 	bl	801f0fa <memchr>
 80210fc:	2800      	cmp	r0, #0
 80210fe:	d036      	beq.n	802116e <_svfiprintf_r+0x1d2>
 8021100:	4b21      	ldr	r3, [pc, #132]	@ (8021188 <_svfiprintf_r+0x1ec>)
 8021102:	bb1b      	cbnz	r3, 802114c <_svfiprintf_r+0x1b0>
 8021104:	9b03      	ldr	r3, [sp, #12]
 8021106:	3307      	adds	r3, #7
 8021108:	f023 0307 	bic.w	r3, r3, #7
 802110c:	3308      	adds	r3, #8
 802110e:	9303      	str	r3, [sp, #12]
 8021110:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021112:	4433      	add	r3, r6
 8021114:	9309      	str	r3, [sp, #36]	@ 0x24
 8021116:	e76a      	b.n	8020fee <_svfiprintf_r+0x52>
 8021118:	fb0c 3202 	mla	r2, ip, r2, r3
 802111c:	460c      	mov	r4, r1
 802111e:	2001      	movs	r0, #1
 8021120:	e7a8      	b.n	8021074 <_svfiprintf_r+0xd8>
 8021122:	2300      	movs	r3, #0
 8021124:	3401      	adds	r4, #1
 8021126:	f04f 0c0a 	mov.w	ip, #10
 802112a:	4619      	mov	r1, r3
 802112c:	9305      	str	r3, [sp, #20]
 802112e:	4620      	mov	r0, r4
 8021130:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021134:	3a30      	subs	r2, #48	@ 0x30
 8021136:	2a09      	cmp	r2, #9
 8021138:	d903      	bls.n	8021142 <_svfiprintf_r+0x1a6>
 802113a:	2b00      	cmp	r3, #0
 802113c:	d0c6      	beq.n	80210cc <_svfiprintf_r+0x130>
 802113e:	9105      	str	r1, [sp, #20]
 8021140:	e7c4      	b.n	80210cc <_svfiprintf_r+0x130>
 8021142:	fb0c 2101 	mla	r1, ip, r1, r2
 8021146:	4604      	mov	r4, r0
 8021148:	2301      	movs	r3, #1
 802114a:	e7f0      	b.n	802112e <_svfiprintf_r+0x192>
 802114c:	ab03      	add	r3, sp, #12
 802114e:	462a      	mov	r2, r5
 8021150:	a904      	add	r1, sp, #16
 8021152:	4638      	mov	r0, r7
 8021154:	9300      	str	r3, [sp, #0]
 8021156:	4b0d      	ldr	r3, [pc, #52]	@ (802118c <_svfiprintf_r+0x1f0>)
 8021158:	f7fc fdf0 	bl	801dd3c <_printf_float>
 802115c:	1c42      	adds	r2, r0, #1
 802115e:	4606      	mov	r6, r0
 8021160:	d1d6      	bne.n	8021110 <_svfiprintf_r+0x174>
 8021162:	89ab      	ldrh	r3, [r5, #12]
 8021164:	065b      	lsls	r3, r3, #25
 8021166:	f53f af2d 	bmi.w	8020fc4 <_svfiprintf_r+0x28>
 802116a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802116c:	e72c      	b.n	8020fc8 <_svfiprintf_r+0x2c>
 802116e:	ab03      	add	r3, sp, #12
 8021170:	462a      	mov	r2, r5
 8021172:	a904      	add	r1, sp, #16
 8021174:	4638      	mov	r0, r7
 8021176:	9300      	str	r3, [sp, #0]
 8021178:	4b04      	ldr	r3, [pc, #16]	@ (802118c <_svfiprintf_r+0x1f0>)
 802117a:	f7fd f87b 	bl	801e274 <_printf_i>
 802117e:	e7ed      	b.n	802115c <_svfiprintf_r+0x1c0>
 8021180:	08024808 	.word	0x08024808
 8021184:	08024812 	.word	0x08024812
 8021188:	0801dd3d 	.word	0x0801dd3d
 802118c:	08020ee7 	.word	0x08020ee7
 8021190:	0802480e 	.word	0x0802480e

08021194 <_sungetc_r>:
 8021194:	b538      	push	{r3, r4, r5, lr}
 8021196:	1c4b      	adds	r3, r1, #1
 8021198:	4614      	mov	r4, r2
 802119a:	d103      	bne.n	80211a4 <_sungetc_r+0x10>
 802119c:	f04f 35ff 	mov.w	r5, #4294967295
 80211a0:	4628      	mov	r0, r5
 80211a2:	bd38      	pop	{r3, r4, r5, pc}
 80211a4:	8993      	ldrh	r3, [r2, #12]
 80211a6:	b2cd      	uxtb	r5, r1
 80211a8:	f023 0320 	bic.w	r3, r3, #32
 80211ac:	8193      	strh	r3, [r2, #12]
 80211ae:	6853      	ldr	r3, [r2, #4]
 80211b0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80211b2:	b18a      	cbz	r2, 80211d8 <_sungetc_r+0x44>
 80211b4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80211b6:	429a      	cmp	r2, r3
 80211b8:	dd08      	ble.n	80211cc <_sungetc_r+0x38>
 80211ba:	6823      	ldr	r3, [r4, #0]
 80211bc:	1e5a      	subs	r2, r3, #1
 80211be:	6022      	str	r2, [r4, #0]
 80211c0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80211c4:	6863      	ldr	r3, [r4, #4]
 80211c6:	3301      	adds	r3, #1
 80211c8:	6063      	str	r3, [r4, #4]
 80211ca:	e7e9      	b.n	80211a0 <_sungetc_r+0xc>
 80211cc:	4621      	mov	r1, r4
 80211ce:	f000 fd93 	bl	8021cf8 <__submore>
 80211d2:	2800      	cmp	r0, #0
 80211d4:	d0f1      	beq.n	80211ba <_sungetc_r+0x26>
 80211d6:	e7e1      	b.n	802119c <_sungetc_r+0x8>
 80211d8:	6921      	ldr	r1, [r4, #16]
 80211da:	6822      	ldr	r2, [r4, #0]
 80211dc:	b141      	cbz	r1, 80211f0 <_sungetc_r+0x5c>
 80211de:	4291      	cmp	r1, r2
 80211e0:	d206      	bcs.n	80211f0 <_sungetc_r+0x5c>
 80211e2:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80211e6:	42a9      	cmp	r1, r5
 80211e8:	d102      	bne.n	80211f0 <_sungetc_r+0x5c>
 80211ea:	3a01      	subs	r2, #1
 80211ec:	6022      	str	r2, [r4, #0]
 80211ee:	e7ea      	b.n	80211c6 <_sungetc_r+0x32>
 80211f0:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 80211f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80211f8:	6363      	str	r3, [r4, #52]	@ 0x34
 80211fa:	2303      	movs	r3, #3
 80211fc:	63a3      	str	r3, [r4, #56]	@ 0x38
 80211fe:	4623      	mov	r3, r4
 8021200:	f803 5f46 	strb.w	r5, [r3, #70]!
 8021204:	6023      	str	r3, [r4, #0]
 8021206:	2301      	movs	r3, #1
 8021208:	e7de      	b.n	80211c8 <_sungetc_r+0x34>

0802120a <__ssrefill_r>:
 802120a:	b510      	push	{r4, lr}
 802120c:	460c      	mov	r4, r1
 802120e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8021210:	b169      	cbz	r1, 802122e <__ssrefill_r+0x24>
 8021212:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8021216:	4299      	cmp	r1, r3
 8021218:	d001      	beq.n	802121e <__ssrefill_r+0x14>
 802121a:	f7fe fe09 	bl	801fe30 <_free_r>
 802121e:	2000      	movs	r0, #0
 8021220:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8021222:	6360      	str	r0, [r4, #52]	@ 0x34
 8021224:	6063      	str	r3, [r4, #4]
 8021226:	b113      	cbz	r3, 802122e <__ssrefill_r+0x24>
 8021228:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 802122a:	6023      	str	r3, [r4, #0]
 802122c:	bd10      	pop	{r4, pc}
 802122e:	6923      	ldr	r3, [r4, #16]
 8021230:	f04f 30ff 	mov.w	r0, #4294967295
 8021234:	6023      	str	r3, [r4, #0]
 8021236:	2300      	movs	r3, #0
 8021238:	6063      	str	r3, [r4, #4]
 802123a:	89a3      	ldrh	r3, [r4, #12]
 802123c:	f043 0320 	orr.w	r3, r3, #32
 8021240:	81a3      	strh	r3, [r4, #12]
 8021242:	e7f3      	b.n	802122c <__ssrefill_r+0x22>

08021244 <__ssvfiscanf_r>:
 8021244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021248:	460c      	mov	r4, r1
 802124a:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 802124e:	2100      	movs	r1, #0
 8021250:	4606      	mov	r6, r0
 8021252:	f10d 0804 	add.w	r8, sp, #4
 8021256:	4fa5      	ldr	r7, [pc, #660]	@ (80214ec <__ssvfiscanf_r+0x2a8>)
 8021258:	9300      	str	r3, [sp, #0]
 802125a:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 802125e:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8021262:	49a3      	ldr	r1, [pc, #652]	@ (80214f0 <__ssvfiscanf_r+0x2ac>)
 8021264:	91a0      	str	r1, [sp, #640]	@ 0x280
 8021266:	49a3      	ldr	r1, [pc, #652]	@ (80214f4 <__ssvfiscanf_r+0x2b0>)
 8021268:	91a1      	str	r1, [sp, #644]	@ 0x284
 802126a:	7813      	ldrb	r3, [r2, #0]
 802126c:	2b00      	cmp	r3, #0
 802126e:	f000 8158 	beq.w	8021522 <__ssvfiscanf_r+0x2de>
 8021272:	5cf9      	ldrb	r1, [r7, r3]
 8021274:	1c55      	adds	r5, r2, #1
 8021276:	f011 0108 	ands.w	r1, r1, #8
 802127a:	d019      	beq.n	80212b0 <__ssvfiscanf_r+0x6c>
 802127c:	6863      	ldr	r3, [r4, #4]
 802127e:	2b00      	cmp	r3, #0
 8021280:	dd0f      	ble.n	80212a2 <__ssvfiscanf_r+0x5e>
 8021282:	6823      	ldr	r3, [r4, #0]
 8021284:	781a      	ldrb	r2, [r3, #0]
 8021286:	5cba      	ldrb	r2, [r7, r2]
 8021288:	0712      	lsls	r2, r2, #28
 802128a:	d401      	bmi.n	8021290 <__ssvfiscanf_r+0x4c>
 802128c:	462a      	mov	r2, r5
 802128e:	e7ec      	b.n	802126a <__ssvfiscanf_r+0x26>
 8021290:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8021292:	3301      	adds	r3, #1
 8021294:	3201      	adds	r2, #1
 8021296:	6023      	str	r3, [r4, #0]
 8021298:	9245      	str	r2, [sp, #276]	@ 0x114
 802129a:	6862      	ldr	r2, [r4, #4]
 802129c:	3a01      	subs	r2, #1
 802129e:	6062      	str	r2, [r4, #4]
 80212a0:	e7ec      	b.n	802127c <__ssvfiscanf_r+0x38>
 80212a2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80212a4:	4621      	mov	r1, r4
 80212a6:	4630      	mov	r0, r6
 80212a8:	4798      	blx	r3
 80212aa:	2800      	cmp	r0, #0
 80212ac:	d0e9      	beq.n	8021282 <__ssvfiscanf_r+0x3e>
 80212ae:	e7ed      	b.n	802128c <__ssvfiscanf_r+0x48>
 80212b0:	2b25      	cmp	r3, #37	@ 0x25
 80212b2:	d012      	beq.n	80212da <__ssvfiscanf_r+0x96>
 80212b4:	4699      	mov	r9, r3
 80212b6:	6863      	ldr	r3, [r4, #4]
 80212b8:	2b00      	cmp	r3, #0
 80212ba:	f340 8094 	ble.w	80213e6 <__ssvfiscanf_r+0x1a2>
 80212be:	6822      	ldr	r2, [r4, #0]
 80212c0:	7813      	ldrb	r3, [r2, #0]
 80212c2:	454b      	cmp	r3, r9
 80212c4:	f040 812d 	bne.w	8021522 <__ssvfiscanf_r+0x2de>
 80212c8:	6863      	ldr	r3, [r4, #4]
 80212ca:	3201      	adds	r2, #1
 80212cc:	3b01      	subs	r3, #1
 80212ce:	6022      	str	r2, [r4, #0]
 80212d0:	6063      	str	r3, [r4, #4]
 80212d2:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80212d4:	3301      	adds	r3, #1
 80212d6:	9345      	str	r3, [sp, #276]	@ 0x114
 80212d8:	e7d8      	b.n	802128c <__ssvfiscanf_r+0x48>
 80212da:	9141      	str	r1, [sp, #260]	@ 0x104
 80212dc:	9143      	str	r1, [sp, #268]	@ 0x10c
 80212de:	7853      	ldrb	r3, [r2, #1]
 80212e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80212e2:	bf04      	itt	eq
 80212e4:	2310      	moveq	r3, #16
 80212e6:	1c95      	addeq	r5, r2, #2
 80212e8:	f04f 020a 	mov.w	r2, #10
 80212ec:	bf08      	it	eq
 80212ee:	9341      	streq	r3, [sp, #260]	@ 0x104
 80212f0:	46a9      	mov	r9, r5
 80212f2:	f819 1b01 	ldrb.w	r1, [r9], #1
 80212f6:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80212fa:	2b09      	cmp	r3, #9
 80212fc:	d91e      	bls.n	802133c <__ssvfiscanf_r+0xf8>
 80212fe:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 80214f8 <__ssvfiscanf_r+0x2b4>
 8021302:	2203      	movs	r2, #3
 8021304:	4650      	mov	r0, sl
 8021306:	f7fd fef8 	bl	801f0fa <memchr>
 802130a:	b138      	cbz	r0, 802131c <__ssvfiscanf_r+0xd8>
 802130c:	eba0 000a 	sub.w	r0, r0, sl
 8021310:	2301      	movs	r3, #1
 8021312:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8021314:	464d      	mov	r5, r9
 8021316:	4083      	lsls	r3, r0
 8021318:	4313      	orrs	r3, r2
 802131a:	9341      	str	r3, [sp, #260]	@ 0x104
 802131c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8021320:	2b78      	cmp	r3, #120	@ 0x78
 8021322:	d806      	bhi.n	8021332 <__ssvfiscanf_r+0xee>
 8021324:	2b57      	cmp	r3, #87	@ 0x57
 8021326:	d810      	bhi.n	802134a <__ssvfiscanf_r+0x106>
 8021328:	2b25      	cmp	r3, #37	@ 0x25
 802132a:	d0c3      	beq.n	80212b4 <__ssvfiscanf_r+0x70>
 802132c:	d856      	bhi.n	80213dc <__ssvfiscanf_r+0x198>
 802132e:	2b00      	cmp	r3, #0
 8021330:	d064      	beq.n	80213fc <__ssvfiscanf_r+0x1b8>
 8021332:	2303      	movs	r3, #3
 8021334:	9347      	str	r3, [sp, #284]	@ 0x11c
 8021336:	230a      	movs	r3, #10
 8021338:	9342      	str	r3, [sp, #264]	@ 0x108
 802133a:	e077      	b.n	802142c <__ssvfiscanf_r+0x1e8>
 802133c:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 802133e:	464d      	mov	r5, r9
 8021340:	fb02 1103 	mla	r1, r2, r3, r1
 8021344:	3930      	subs	r1, #48	@ 0x30
 8021346:	9143      	str	r1, [sp, #268]	@ 0x10c
 8021348:	e7d2      	b.n	80212f0 <__ssvfiscanf_r+0xac>
 802134a:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 802134e:	2a20      	cmp	r2, #32
 8021350:	d8ef      	bhi.n	8021332 <__ssvfiscanf_r+0xee>
 8021352:	a101      	add	r1, pc, #4	@ (adr r1, 8021358 <__ssvfiscanf_r+0x114>)
 8021354:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8021358:	0802140b 	.word	0x0802140b
 802135c:	08021333 	.word	0x08021333
 8021360:	08021333 	.word	0x08021333
 8021364:	08021465 	.word	0x08021465
 8021368:	08021333 	.word	0x08021333
 802136c:	08021333 	.word	0x08021333
 8021370:	08021333 	.word	0x08021333
 8021374:	08021333 	.word	0x08021333
 8021378:	08021333 	.word	0x08021333
 802137c:	08021333 	.word	0x08021333
 8021380:	08021333 	.word	0x08021333
 8021384:	0802147b 	.word	0x0802147b
 8021388:	08021461 	.word	0x08021461
 802138c:	080213e3 	.word	0x080213e3
 8021390:	080213e3 	.word	0x080213e3
 8021394:	080213e3 	.word	0x080213e3
 8021398:	08021333 	.word	0x08021333
 802139c:	0802141d 	.word	0x0802141d
 80213a0:	08021333 	.word	0x08021333
 80213a4:	08021333 	.word	0x08021333
 80213a8:	08021333 	.word	0x08021333
 80213ac:	08021333 	.word	0x08021333
 80213b0:	0802148b 	.word	0x0802148b
 80213b4:	08021425 	.word	0x08021425
 80213b8:	08021403 	.word	0x08021403
 80213bc:	08021333 	.word	0x08021333
 80213c0:	08021333 	.word	0x08021333
 80213c4:	08021487 	.word	0x08021487
 80213c8:	08021333 	.word	0x08021333
 80213cc:	08021461 	.word	0x08021461
 80213d0:	08021333 	.word	0x08021333
 80213d4:	08021333 	.word	0x08021333
 80213d8:	0802140b 	.word	0x0802140b
 80213dc:	3b45      	subs	r3, #69	@ 0x45
 80213de:	2b02      	cmp	r3, #2
 80213e0:	d8a7      	bhi.n	8021332 <__ssvfiscanf_r+0xee>
 80213e2:	2305      	movs	r3, #5
 80213e4:	e021      	b.n	802142a <__ssvfiscanf_r+0x1e6>
 80213e6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80213e8:	4621      	mov	r1, r4
 80213ea:	4630      	mov	r0, r6
 80213ec:	4798      	blx	r3
 80213ee:	2800      	cmp	r0, #0
 80213f0:	f43f af65 	beq.w	80212be <__ssvfiscanf_r+0x7a>
 80213f4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80213f6:	2800      	cmp	r0, #0
 80213f8:	f040 808b 	bne.w	8021512 <__ssvfiscanf_r+0x2ce>
 80213fc:	f04f 30ff 	mov.w	r0, #4294967295
 8021400:	e08b      	b.n	802151a <__ssvfiscanf_r+0x2d6>
 8021402:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8021404:	f042 0220 	orr.w	r2, r2, #32
 8021408:	9241      	str	r2, [sp, #260]	@ 0x104
 802140a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 802140c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8021410:	9241      	str	r2, [sp, #260]	@ 0x104
 8021412:	2210      	movs	r2, #16
 8021414:	2b6e      	cmp	r3, #110	@ 0x6e
 8021416:	9242      	str	r2, [sp, #264]	@ 0x108
 8021418:	d902      	bls.n	8021420 <__ssvfiscanf_r+0x1dc>
 802141a:	e005      	b.n	8021428 <__ssvfiscanf_r+0x1e4>
 802141c:	2300      	movs	r3, #0
 802141e:	9342      	str	r3, [sp, #264]	@ 0x108
 8021420:	2303      	movs	r3, #3
 8021422:	e002      	b.n	802142a <__ssvfiscanf_r+0x1e6>
 8021424:	2308      	movs	r3, #8
 8021426:	9342      	str	r3, [sp, #264]	@ 0x108
 8021428:	2304      	movs	r3, #4
 802142a:	9347      	str	r3, [sp, #284]	@ 0x11c
 802142c:	6863      	ldr	r3, [r4, #4]
 802142e:	2b00      	cmp	r3, #0
 8021430:	dd3a      	ble.n	80214a8 <__ssvfiscanf_r+0x264>
 8021432:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8021434:	0659      	lsls	r1, r3, #25
 8021436:	d404      	bmi.n	8021442 <__ssvfiscanf_r+0x1fe>
 8021438:	6823      	ldr	r3, [r4, #0]
 802143a:	781a      	ldrb	r2, [r3, #0]
 802143c:	5cba      	ldrb	r2, [r7, r2]
 802143e:	0712      	lsls	r2, r2, #28
 8021440:	d439      	bmi.n	80214b6 <__ssvfiscanf_r+0x272>
 8021442:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8021444:	2b02      	cmp	r3, #2
 8021446:	dc48      	bgt.n	80214da <__ssvfiscanf_r+0x296>
 8021448:	466b      	mov	r3, sp
 802144a:	4622      	mov	r2, r4
 802144c:	a941      	add	r1, sp, #260	@ 0x104
 802144e:	4630      	mov	r0, r6
 8021450:	f000 f9ae 	bl	80217b0 <_scanf_chars>
 8021454:	2801      	cmp	r0, #1
 8021456:	d064      	beq.n	8021522 <__ssvfiscanf_r+0x2de>
 8021458:	2802      	cmp	r0, #2
 802145a:	f47f af17 	bne.w	802128c <__ssvfiscanf_r+0x48>
 802145e:	e7c9      	b.n	80213f4 <__ssvfiscanf_r+0x1b0>
 8021460:	220a      	movs	r2, #10
 8021462:	e7d7      	b.n	8021414 <__ssvfiscanf_r+0x1d0>
 8021464:	4629      	mov	r1, r5
 8021466:	4640      	mov	r0, r8
 8021468:	f000 fc0d 	bl	8021c86 <__sccl>
 802146c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 802146e:	4605      	mov	r5, r0
 8021470:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8021474:	9341      	str	r3, [sp, #260]	@ 0x104
 8021476:	2301      	movs	r3, #1
 8021478:	e7d7      	b.n	802142a <__ssvfiscanf_r+0x1e6>
 802147a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 802147c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8021480:	9341      	str	r3, [sp, #260]	@ 0x104
 8021482:	2300      	movs	r3, #0
 8021484:	e7d1      	b.n	802142a <__ssvfiscanf_r+0x1e6>
 8021486:	2302      	movs	r3, #2
 8021488:	e7cf      	b.n	802142a <__ssvfiscanf_r+0x1e6>
 802148a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 802148c:	06c3      	lsls	r3, r0, #27
 802148e:	f53f aefd 	bmi.w	802128c <__ssvfiscanf_r+0x48>
 8021492:	9b00      	ldr	r3, [sp, #0]
 8021494:	07c0      	lsls	r0, r0, #31
 8021496:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8021498:	f103 0104 	add.w	r1, r3, #4
 802149c:	9100      	str	r1, [sp, #0]
 802149e:	681b      	ldr	r3, [r3, #0]
 80214a0:	bf4c      	ite	mi
 80214a2:	801a      	strhmi	r2, [r3, #0]
 80214a4:	601a      	strpl	r2, [r3, #0]
 80214a6:	e6f1      	b.n	802128c <__ssvfiscanf_r+0x48>
 80214a8:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80214aa:	4621      	mov	r1, r4
 80214ac:	4630      	mov	r0, r6
 80214ae:	4798      	blx	r3
 80214b0:	2800      	cmp	r0, #0
 80214b2:	d0be      	beq.n	8021432 <__ssvfiscanf_r+0x1ee>
 80214b4:	e79e      	b.n	80213f4 <__ssvfiscanf_r+0x1b0>
 80214b6:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80214b8:	3201      	adds	r2, #1
 80214ba:	9245      	str	r2, [sp, #276]	@ 0x114
 80214bc:	6862      	ldr	r2, [r4, #4]
 80214be:	3a01      	subs	r2, #1
 80214c0:	2a00      	cmp	r2, #0
 80214c2:	6062      	str	r2, [r4, #4]
 80214c4:	dd02      	ble.n	80214cc <__ssvfiscanf_r+0x288>
 80214c6:	3301      	adds	r3, #1
 80214c8:	6023      	str	r3, [r4, #0]
 80214ca:	e7b5      	b.n	8021438 <__ssvfiscanf_r+0x1f4>
 80214cc:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80214ce:	4621      	mov	r1, r4
 80214d0:	4630      	mov	r0, r6
 80214d2:	4798      	blx	r3
 80214d4:	2800      	cmp	r0, #0
 80214d6:	d0af      	beq.n	8021438 <__ssvfiscanf_r+0x1f4>
 80214d8:	e78c      	b.n	80213f4 <__ssvfiscanf_r+0x1b0>
 80214da:	2b04      	cmp	r3, #4
 80214dc:	dc0e      	bgt.n	80214fc <__ssvfiscanf_r+0x2b8>
 80214de:	466b      	mov	r3, sp
 80214e0:	4622      	mov	r2, r4
 80214e2:	a941      	add	r1, sp, #260	@ 0x104
 80214e4:	4630      	mov	r0, r6
 80214e6:	f000 f9bd 	bl	8021864 <_scanf_i>
 80214ea:	e7b3      	b.n	8021454 <__ssvfiscanf_r+0x210>
 80214ec:	080243f1 	.word	0x080243f1
 80214f0:	08021195 	.word	0x08021195
 80214f4:	0802120b 	.word	0x0802120b
 80214f8:	0802480e 	.word	0x0802480e
 80214fc:	4b0a      	ldr	r3, [pc, #40]	@ (8021528 <__ssvfiscanf_r+0x2e4>)
 80214fe:	2b00      	cmp	r3, #0
 8021500:	f43f aec4 	beq.w	802128c <__ssvfiscanf_r+0x48>
 8021504:	466b      	mov	r3, sp
 8021506:	4622      	mov	r2, r4
 8021508:	a941      	add	r1, sp, #260	@ 0x104
 802150a:	4630      	mov	r0, r6
 802150c:	f7fc ffd2 	bl	801e4b4 <_scanf_float>
 8021510:	e7a0      	b.n	8021454 <__ssvfiscanf_r+0x210>
 8021512:	89a3      	ldrh	r3, [r4, #12]
 8021514:	065b      	lsls	r3, r3, #25
 8021516:	f53f af71 	bmi.w	80213fc <__ssvfiscanf_r+0x1b8>
 802151a:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 802151e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021522:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8021524:	e7f9      	b.n	802151a <__ssvfiscanf_r+0x2d6>
 8021526:	bf00      	nop
 8021528:	0801e4b5 	.word	0x0801e4b5

0802152c <__sfputc_r>:
 802152c:	6893      	ldr	r3, [r2, #8]
 802152e:	3b01      	subs	r3, #1
 8021530:	2b00      	cmp	r3, #0
 8021532:	6093      	str	r3, [r2, #8]
 8021534:	b410      	push	{r4}
 8021536:	da08      	bge.n	802154a <__sfputc_r+0x1e>
 8021538:	6994      	ldr	r4, [r2, #24]
 802153a:	42a3      	cmp	r3, r4
 802153c:	db01      	blt.n	8021542 <__sfputc_r+0x16>
 802153e:	290a      	cmp	r1, #10
 8021540:	d103      	bne.n	802154a <__sfputc_r+0x1e>
 8021542:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021546:	f7fd bbdf 	b.w	801ed08 <__swbuf_r>
 802154a:	6813      	ldr	r3, [r2, #0]
 802154c:	1c58      	adds	r0, r3, #1
 802154e:	6010      	str	r0, [r2, #0]
 8021550:	4608      	mov	r0, r1
 8021552:	7019      	strb	r1, [r3, #0]
 8021554:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021558:	4770      	bx	lr

0802155a <__sfputs_r>:
 802155a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802155c:	4606      	mov	r6, r0
 802155e:	460f      	mov	r7, r1
 8021560:	4614      	mov	r4, r2
 8021562:	18d5      	adds	r5, r2, r3
 8021564:	42ac      	cmp	r4, r5
 8021566:	d101      	bne.n	802156c <__sfputs_r+0x12>
 8021568:	2000      	movs	r0, #0
 802156a:	e007      	b.n	802157c <__sfputs_r+0x22>
 802156c:	463a      	mov	r2, r7
 802156e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021572:	4630      	mov	r0, r6
 8021574:	f7ff ffda 	bl	802152c <__sfputc_r>
 8021578:	1c43      	adds	r3, r0, #1
 802157a:	d1f3      	bne.n	8021564 <__sfputs_r+0xa>
 802157c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08021580 <_vfiprintf_r>:
 8021580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021584:	460d      	mov	r5, r1
 8021586:	b09d      	sub	sp, #116	@ 0x74
 8021588:	4614      	mov	r4, r2
 802158a:	4698      	mov	r8, r3
 802158c:	4606      	mov	r6, r0
 802158e:	b118      	cbz	r0, 8021598 <_vfiprintf_r+0x18>
 8021590:	6a03      	ldr	r3, [r0, #32]
 8021592:	b90b      	cbnz	r3, 8021598 <_vfiprintf_r+0x18>
 8021594:	f7fd fa2c 	bl	801e9f0 <__sinit>
 8021598:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802159a:	07d9      	lsls	r1, r3, #31
 802159c:	d405      	bmi.n	80215aa <_vfiprintf_r+0x2a>
 802159e:	89ab      	ldrh	r3, [r5, #12]
 80215a0:	059a      	lsls	r2, r3, #22
 80215a2:	d402      	bmi.n	80215aa <_vfiprintf_r+0x2a>
 80215a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80215a6:	f7fd fd9e 	bl	801f0e6 <__retarget_lock_acquire_recursive>
 80215aa:	89ab      	ldrh	r3, [r5, #12]
 80215ac:	071b      	lsls	r3, r3, #28
 80215ae:	d501      	bpl.n	80215b4 <_vfiprintf_r+0x34>
 80215b0:	692b      	ldr	r3, [r5, #16]
 80215b2:	b99b      	cbnz	r3, 80215dc <_vfiprintf_r+0x5c>
 80215b4:	4629      	mov	r1, r5
 80215b6:	4630      	mov	r0, r6
 80215b8:	f7fd fbe4 	bl	801ed84 <__swsetup_r>
 80215bc:	b170      	cbz	r0, 80215dc <_vfiprintf_r+0x5c>
 80215be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80215c0:	07dc      	lsls	r4, r3, #31
 80215c2:	d504      	bpl.n	80215ce <_vfiprintf_r+0x4e>
 80215c4:	f04f 30ff 	mov.w	r0, #4294967295
 80215c8:	b01d      	add	sp, #116	@ 0x74
 80215ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80215ce:	89ab      	ldrh	r3, [r5, #12]
 80215d0:	0598      	lsls	r0, r3, #22
 80215d2:	d4f7      	bmi.n	80215c4 <_vfiprintf_r+0x44>
 80215d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80215d6:	f7fd fd87 	bl	801f0e8 <__retarget_lock_release_recursive>
 80215da:	e7f3      	b.n	80215c4 <_vfiprintf_r+0x44>
 80215dc:	2300      	movs	r3, #0
 80215de:	f8cd 800c 	str.w	r8, [sp, #12]
 80215e2:	f04f 0901 	mov.w	r9, #1
 80215e6:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 802179c <_vfiprintf_r+0x21c>
 80215ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80215ec:	2320      	movs	r3, #32
 80215ee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80215f2:	2330      	movs	r3, #48	@ 0x30
 80215f4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80215f8:	4623      	mov	r3, r4
 80215fa:	469a      	mov	sl, r3
 80215fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021600:	b10a      	cbz	r2, 8021606 <_vfiprintf_r+0x86>
 8021602:	2a25      	cmp	r2, #37	@ 0x25
 8021604:	d1f9      	bne.n	80215fa <_vfiprintf_r+0x7a>
 8021606:	ebba 0b04 	subs.w	fp, sl, r4
 802160a:	d00b      	beq.n	8021624 <_vfiprintf_r+0xa4>
 802160c:	465b      	mov	r3, fp
 802160e:	4622      	mov	r2, r4
 8021610:	4629      	mov	r1, r5
 8021612:	4630      	mov	r0, r6
 8021614:	f7ff ffa1 	bl	802155a <__sfputs_r>
 8021618:	3001      	adds	r0, #1
 802161a:	f000 80a7 	beq.w	802176c <_vfiprintf_r+0x1ec>
 802161e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021620:	445a      	add	r2, fp
 8021622:	9209      	str	r2, [sp, #36]	@ 0x24
 8021624:	f89a 3000 	ldrb.w	r3, [sl]
 8021628:	2b00      	cmp	r3, #0
 802162a:	f000 809f 	beq.w	802176c <_vfiprintf_r+0x1ec>
 802162e:	2300      	movs	r3, #0
 8021630:	f04f 32ff 	mov.w	r2, #4294967295
 8021634:	f10a 0a01 	add.w	sl, sl, #1
 8021638:	9304      	str	r3, [sp, #16]
 802163a:	9307      	str	r3, [sp, #28]
 802163c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8021640:	931a      	str	r3, [sp, #104]	@ 0x68
 8021642:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021646:	4654      	mov	r4, sl
 8021648:	2205      	movs	r2, #5
 802164a:	4854      	ldr	r0, [pc, #336]	@ (802179c <_vfiprintf_r+0x21c>)
 802164c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021650:	f7fd fd53 	bl	801f0fa <memchr>
 8021654:	9a04      	ldr	r2, [sp, #16]
 8021656:	b9d8      	cbnz	r0, 8021690 <_vfiprintf_r+0x110>
 8021658:	06d1      	lsls	r1, r2, #27
 802165a:	bf44      	itt	mi
 802165c:	2320      	movmi	r3, #32
 802165e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8021662:	0713      	lsls	r3, r2, #28
 8021664:	bf44      	itt	mi
 8021666:	232b      	movmi	r3, #43	@ 0x2b
 8021668:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802166c:	f89a 3000 	ldrb.w	r3, [sl]
 8021670:	2b2a      	cmp	r3, #42	@ 0x2a
 8021672:	d015      	beq.n	80216a0 <_vfiprintf_r+0x120>
 8021674:	9a07      	ldr	r2, [sp, #28]
 8021676:	4654      	mov	r4, sl
 8021678:	2000      	movs	r0, #0
 802167a:	f04f 0c0a 	mov.w	ip, #10
 802167e:	4621      	mov	r1, r4
 8021680:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021684:	3b30      	subs	r3, #48	@ 0x30
 8021686:	2b09      	cmp	r3, #9
 8021688:	d94b      	bls.n	8021722 <_vfiprintf_r+0x1a2>
 802168a:	b1b0      	cbz	r0, 80216ba <_vfiprintf_r+0x13a>
 802168c:	9207      	str	r2, [sp, #28]
 802168e:	e014      	b.n	80216ba <_vfiprintf_r+0x13a>
 8021690:	eba0 0308 	sub.w	r3, r0, r8
 8021694:	46a2      	mov	sl, r4
 8021696:	fa09 f303 	lsl.w	r3, r9, r3
 802169a:	4313      	orrs	r3, r2
 802169c:	9304      	str	r3, [sp, #16]
 802169e:	e7d2      	b.n	8021646 <_vfiprintf_r+0xc6>
 80216a0:	9b03      	ldr	r3, [sp, #12]
 80216a2:	1d19      	adds	r1, r3, #4
 80216a4:	681b      	ldr	r3, [r3, #0]
 80216a6:	2b00      	cmp	r3, #0
 80216a8:	9103      	str	r1, [sp, #12]
 80216aa:	bfbb      	ittet	lt
 80216ac:	425b      	neglt	r3, r3
 80216ae:	f042 0202 	orrlt.w	r2, r2, #2
 80216b2:	9307      	strge	r3, [sp, #28]
 80216b4:	9307      	strlt	r3, [sp, #28]
 80216b6:	bfb8      	it	lt
 80216b8:	9204      	strlt	r2, [sp, #16]
 80216ba:	7823      	ldrb	r3, [r4, #0]
 80216bc:	2b2e      	cmp	r3, #46	@ 0x2e
 80216be:	d10a      	bne.n	80216d6 <_vfiprintf_r+0x156>
 80216c0:	7863      	ldrb	r3, [r4, #1]
 80216c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80216c4:	d132      	bne.n	802172c <_vfiprintf_r+0x1ac>
 80216c6:	9b03      	ldr	r3, [sp, #12]
 80216c8:	3402      	adds	r4, #2
 80216ca:	1d1a      	adds	r2, r3, #4
 80216cc:	681b      	ldr	r3, [r3, #0]
 80216ce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80216d2:	9203      	str	r2, [sp, #12]
 80216d4:	9305      	str	r3, [sp, #20]
 80216d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80217ac <_vfiprintf_r+0x22c>
 80216da:	2203      	movs	r2, #3
 80216dc:	7821      	ldrb	r1, [r4, #0]
 80216de:	4650      	mov	r0, sl
 80216e0:	f7fd fd0b 	bl	801f0fa <memchr>
 80216e4:	b138      	cbz	r0, 80216f6 <_vfiprintf_r+0x176>
 80216e6:	eba0 000a 	sub.w	r0, r0, sl
 80216ea:	2240      	movs	r2, #64	@ 0x40
 80216ec:	9b04      	ldr	r3, [sp, #16]
 80216ee:	3401      	adds	r4, #1
 80216f0:	4082      	lsls	r2, r0
 80216f2:	4313      	orrs	r3, r2
 80216f4:	9304      	str	r3, [sp, #16]
 80216f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80216fa:	2206      	movs	r2, #6
 80216fc:	4828      	ldr	r0, [pc, #160]	@ (80217a0 <_vfiprintf_r+0x220>)
 80216fe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8021702:	f7fd fcfa 	bl	801f0fa <memchr>
 8021706:	2800      	cmp	r0, #0
 8021708:	d03f      	beq.n	802178a <_vfiprintf_r+0x20a>
 802170a:	4b26      	ldr	r3, [pc, #152]	@ (80217a4 <_vfiprintf_r+0x224>)
 802170c:	bb1b      	cbnz	r3, 8021756 <_vfiprintf_r+0x1d6>
 802170e:	9b03      	ldr	r3, [sp, #12]
 8021710:	3307      	adds	r3, #7
 8021712:	f023 0307 	bic.w	r3, r3, #7
 8021716:	3308      	adds	r3, #8
 8021718:	9303      	str	r3, [sp, #12]
 802171a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802171c:	443b      	add	r3, r7
 802171e:	9309      	str	r3, [sp, #36]	@ 0x24
 8021720:	e76a      	b.n	80215f8 <_vfiprintf_r+0x78>
 8021722:	fb0c 3202 	mla	r2, ip, r2, r3
 8021726:	460c      	mov	r4, r1
 8021728:	2001      	movs	r0, #1
 802172a:	e7a8      	b.n	802167e <_vfiprintf_r+0xfe>
 802172c:	2300      	movs	r3, #0
 802172e:	3401      	adds	r4, #1
 8021730:	f04f 0c0a 	mov.w	ip, #10
 8021734:	4619      	mov	r1, r3
 8021736:	9305      	str	r3, [sp, #20]
 8021738:	4620      	mov	r0, r4
 802173a:	f810 2b01 	ldrb.w	r2, [r0], #1
 802173e:	3a30      	subs	r2, #48	@ 0x30
 8021740:	2a09      	cmp	r2, #9
 8021742:	d903      	bls.n	802174c <_vfiprintf_r+0x1cc>
 8021744:	2b00      	cmp	r3, #0
 8021746:	d0c6      	beq.n	80216d6 <_vfiprintf_r+0x156>
 8021748:	9105      	str	r1, [sp, #20]
 802174a:	e7c4      	b.n	80216d6 <_vfiprintf_r+0x156>
 802174c:	fb0c 2101 	mla	r1, ip, r1, r2
 8021750:	4604      	mov	r4, r0
 8021752:	2301      	movs	r3, #1
 8021754:	e7f0      	b.n	8021738 <_vfiprintf_r+0x1b8>
 8021756:	ab03      	add	r3, sp, #12
 8021758:	462a      	mov	r2, r5
 802175a:	a904      	add	r1, sp, #16
 802175c:	4630      	mov	r0, r6
 802175e:	9300      	str	r3, [sp, #0]
 8021760:	4b11      	ldr	r3, [pc, #68]	@ (80217a8 <_vfiprintf_r+0x228>)
 8021762:	f7fc faeb 	bl	801dd3c <_printf_float>
 8021766:	4607      	mov	r7, r0
 8021768:	1c78      	adds	r0, r7, #1
 802176a:	d1d6      	bne.n	802171a <_vfiprintf_r+0x19a>
 802176c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802176e:	07d9      	lsls	r1, r3, #31
 8021770:	d405      	bmi.n	802177e <_vfiprintf_r+0x1fe>
 8021772:	89ab      	ldrh	r3, [r5, #12]
 8021774:	059a      	lsls	r2, r3, #22
 8021776:	d402      	bmi.n	802177e <_vfiprintf_r+0x1fe>
 8021778:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802177a:	f7fd fcb5 	bl	801f0e8 <__retarget_lock_release_recursive>
 802177e:	89ab      	ldrh	r3, [r5, #12]
 8021780:	065b      	lsls	r3, r3, #25
 8021782:	f53f af1f 	bmi.w	80215c4 <_vfiprintf_r+0x44>
 8021786:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8021788:	e71e      	b.n	80215c8 <_vfiprintf_r+0x48>
 802178a:	ab03      	add	r3, sp, #12
 802178c:	462a      	mov	r2, r5
 802178e:	a904      	add	r1, sp, #16
 8021790:	4630      	mov	r0, r6
 8021792:	9300      	str	r3, [sp, #0]
 8021794:	4b04      	ldr	r3, [pc, #16]	@ (80217a8 <_vfiprintf_r+0x228>)
 8021796:	f7fc fd6d 	bl	801e274 <_printf_i>
 802179a:	e7e4      	b.n	8021766 <_vfiprintf_r+0x1e6>
 802179c:	08024808 	.word	0x08024808
 80217a0:	08024812 	.word	0x08024812
 80217a4:	0801dd3d 	.word	0x0801dd3d
 80217a8:	0802155b 	.word	0x0802155b
 80217ac:	0802480e 	.word	0x0802480e

080217b0 <_scanf_chars>:
 80217b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80217b4:	4615      	mov	r5, r2
 80217b6:	688a      	ldr	r2, [r1, #8]
 80217b8:	4680      	mov	r8, r0
 80217ba:	460c      	mov	r4, r1
 80217bc:	b932      	cbnz	r2, 80217cc <_scanf_chars+0x1c>
 80217be:	698a      	ldr	r2, [r1, #24]
 80217c0:	2a00      	cmp	r2, #0
 80217c2:	bf14      	ite	ne
 80217c4:	f04f 32ff 	movne.w	r2, #4294967295
 80217c8:	2201      	moveq	r2, #1
 80217ca:	608a      	str	r2, [r1, #8]
 80217cc:	6822      	ldr	r2, [r4, #0]
 80217ce:	2700      	movs	r7, #0
 80217d0:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 8021860 <_scanf_chars+0xb0>
 80217d4:	06d1      	lsls	r1, r2, #27
 80217d6:	bf5f      	itttt	pl
 80217d8:	681a      	ldrpl	r2, [r3, #0]
 80217da:	1d11      	addpl	r1, r2, #4
 80217dc:	6019      	strpl	r1, [r3, #0]
 80217de:	6816      	ldrpl	r6, [r2, #0]
 80217e0:	69a0      	ldr	r0, [r4, #24]
 80217e2:	b188      	cbz	r0, 8021808 <_scanf_chars+0x58>
 80217e4:	2801      	cmp	r0, #1
 80217e6:	d107      	bne.n	80217f8 <_scanf_chars+0x48>
 80217e8:	682b      	ldr	r3, [r5, #0]
 80217ea:	781a      	ldrb	r2, [r3, #0]
 80217ec:	6963      	ldr	r3, [r4, #20]
 80217ee:	5c9b      	ldrb	r3, [r3, r2]
 80217f0:	b953      	cbnz	r3, 8021808 <_scanf_chars+0x58>
 80217f2:	2f00      	cmp	r7, #0
 80217f4:	d031      	beq.n	802185a <_scanf_chars+0xaa>
 80217f6:	e022      	b.n	802183e <_scanf_chars+0x8e>
 80217f8:	2802      	cmp	r0, #2
 80217fa:	d120      	bne.n	802183e <_scanf_chars+0x8e>
 80217fc:	682b      	ldr	r3, [r5, #0]
 80217fe:	781b      	ldrb	r3, [r3, #0]
 8021800:	f819 3003 	ldrb.w	r3, [r9, r3]
 8021804:	071b      	lsls	r3, r3, #28
 8021806:	d41a      	bmi.n	802183e <_scanf_chars+0x8e>
 8021808:	6823      	ldr	r3, [r4, #0]
 802180a:	3701      	adds	r7, #1
 802180c:	06da      	lsls	r2, r3, #27
 802180e:	bf5e      	ittt	pl
 8021810:	682b      	ldrpl	r3, [r5, #0]
 8021812:	781b      	ldrbpl	r3, [r3, #0]
 8021814:	f806 3b01 	strbpl.w	r3, [r6], #1
 8021818:	682a      	ldr	r2, [r5, #0]
 802181a:	686b      	ldr	r3, [r5, #4]
 802181c:	3201      	adds	r2, #1
 802181e:	3b01      	subs	r3, #1
 8021820:	602a      	str	r2, [r5, #0]
 8021822:	68a2      	ldr	r2, [r4, #8]
 8021824:	606b      	str	r3, [r5, #4]
 8021826:	3a01      	subs	r2, #1
 8021828:	60a2      	str	r2, [r4, #8]
 802182a:	b142      	cbz	r2, 802183e <_scanf_chars+0x8e>
 802182c:	2b00      	cmp	r3, #0
 802182e:	dcd7      	bgt.n	80217e0 <_scanf_chars+0x30>
 8021830:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8021834:	4629      	mov	r1, r5
 8021836:	4640      	mov	r0, r8
 8021838:	4798      	blx	r3
 802183a:	2800      	cmp	r0, #0
 802183c:	d0d0      	beq.n	80217e0 <_scanf_chars+0x30>
 802183e:	6823      	ldr	r3, [r4, #0]
 8021840:	f013 0310 	ands.w	r3, r3, #16
 8021844:	d105      	bne.n	8021852 <_scanf_chars+0xa2>
 8021846:	68e2      	ldr	r2, [r4, #12]
 8021848:	3201      	adds	r2, #1
 802184a:	60e2      	str	r2, [r4, #12]
 802184c:	69a2      	ldr	r2, [r4, #24]
 802184e:	b102      	cbz	r2, 8021852 <_scanf_chars+0xa2>
 8021850:	7033      	strb	r3, [r6, #0]
 8021852:	6923      	ldr	r3, [r4, #16]
 8021854:	2000      	movs	r0, #0
 8021856:	443b      	add	r3, r7
 8021858:	6123      	str	r3, [r4, #16]
 802185a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802185e:	bf00      	nop
 8021860:	080243f1 	.word	0x080243f1

08021864 <_scanf_i>:
 8021864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021868:	4698      	mov	r8, r3
 802186a:	b087      	sub	sp, #28
 802186c:	4b72      	ldr	r3, [pc, #456]	@ (8021a38 <_scanf_i+0x1d4>)
 802186e:	460c      	mov	r4, r1
 8021870:	4682      	mov	sl, r0
 8021872:	4616      	mov	r6, r2
 8021874:	4627      	mov	r7, r4
 8021876:	f04f 0b00 	mov.w	fp, #0
 802187a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 802187e:	ab03      	add	r3, sp, #12
 8021880:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8021884:	4b6d      	ldr	r3, [pc, #436]	@ (8021a3c <_scanf_i+0x1d8>)
 8021886:	69a1      	ldr	r1, [r4, #24]
 8021888:	4a6d      	ldr	r2, [pc, #436]	@ (8021a40 <_scanf_i+0x1dc>)
 802188a:	2903      	cmp	r1, #3
 802188c:	bf08      	it	eq
 802188e:	461a      	moveq	r2, r3
 8021890:	68a3      	ldr	r3, [r4, #8]
 8021892:	9201      	str	r2, [sp, #4]
 8021894:	1e5a      	subs	r2, r3, #1
 8021896:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 802189a:	bf89      	itett	hi
 802189c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80218a0:	f04f 0900 	movls.w	r9, #0
 80218a4:	eb03 0905 	addhi.w	r9, r3, r5
 80218a8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80218ac:	bf88      	it	hi
 80218ae:	60a3      	strhi	r3, [r4, #8]
 80218b0:	f857 3b1c 	ldr.w	r3, [r7], #28
 80218b4:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 80218b8:	463d      	mov	r5, r7
 80218ba:	6023      	str	r3, [r4, #0]
 80218bc:	6831      	ldr	r1, [r6, #0]
 80218be:	ab03      	add	r3, sp, #12
 80218c0:	2202      	movs	r2, #2
 80218c2:	7809      	ldrb	r1, [r1, #0]
 80218c4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80218c8:	f7fd fc17 	bl	801f0fa <memchr>
 80218cc:	b328      	cbz	r0, 802191a <_scanf_i+0xb6>
 80218ce:	f1bb 0f01 	cmp.w	fp, #1
 80218d2:	d159      	bne.n	8021988 <_scanf_i+0x124>
 80218d4:	6862      	ldr	r2, [r4, #4]
 80218d6:	b92a      	cbnz	r2, 80218e4 <_scanf_i+0x80>
 80218d8:	6822      	ldr	r2, [r4, #0]
 80218da:	2108      	movs	r1, #8
 80218dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80218e0:	6061      	str	r1, [r4, #4]
 80218e2:	6022      	str	r2, [r4, #0]
 80218e4:	6822      	ldr	r2, [r4, #0]
 80218e6:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 80218ea:	6022      	str	r2, [r4, #0]
 80218ec:	68a2      	ldr	r2, [r4, #8]
 80218ee:	1e51      	subs	r1, r2, #1
 80218f0:	60a1      	str	r1, [r4, #8]
 80218f2:	b192      	cbz	r2, 802191a <_scanf_i+0xb6>
 80218f4:	6832      	ldr	r2, [r6, #0]
 80218f6:	1c51      	adds	r1, r2, #1
 80218f8:	6031      	str	r1, [r6, #0]
 80218fa:	7812      	ldrb	r2, [r2, #0]
 80218fc:	f805 2b01 	strb.w	r2, [r5], #1
 8021900:	6872      	ldr	r2, [r6, #4]
 8021902:	3a01      	subs	r2, #1
 8021904:	2a00      	cmp	r2, #0
 8021906:	6072      	str	r2, [r6, #4]
 8021908:	dc07      	bgt.n	802191a <_scanf_i+0xb6>
 802190a:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 802190e:	4631      	mov	r1, r6
 8021910:	4650      	mov	r0, sl
 8021912:	4790      	blx	r2
 8021914:	2800      	cmp	r0, #0
 8021916:	f040 8085 	bne.w	8021a24 <_scanf_i+0x1c0>
 802191a:	f10b 0b01 	add.w	fp, fp, #1
 802191e:	f1bb 0f03 	cmp.w	fp, #3
 8021922:	d1cb      	bne.n	80218bc <_scanf_i+0x58>
 8021924:	6863      	ldr	r3, [r4, #4]
 8021926:	b90b      	cbnz	r3, 802192c <_scanf_i+0xc8>
 8021928:	230a      	movs	r3, #10
 802192a:	6063      	str	r3, [r4, #4]
 802192c:	6863      	ldr	r3, [r4, #4]
 802192e:	f04f 0b00 	mov.w	fp, #0
 8021932:	4944      	ldr	r1, [pc, #272]	@ (8021a44 <_scanf_i+0x1e0>)
 8021934:	6960      	ldr	r0, [r4, #20]
 8021936:	1ac9      	subs	r1, r1, r3
 8021938:	f000 f9a5 	bl	8021c86 <__sccl>
 802193c:	68a3      	ldr	r3, [r4, #8]
 802193e:	6822      	ldr	r2, [r4, #0]
 8021940:	2b00      	cmp	r3, #0
 8021942:	d03d      	beq.n	80219c0 <_scanf_i+0x15c>
 8021944:	6831      	ldr	r1, [r6, #0]
 8021946:	6960      	ldr	r0, [r4, #20]
 8021948:	f891 c000 	ldrb.w	ip, [r1]
 802194c:	f810 000c 	ldrb.w	r0, [r0, ip]
 8021950:	2800      	cmp	r0, #0
 8021952:	d035      	beq.n	80219c0 <_scanf_i+0x15c>
 8021954:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8021958:	d124      	bne.n	80219a4 <_scanf_i+0x140>
 802195a:	0510      	lsls	r0, r2, #20
 802195c:	d522      	bpl.n	80219a4 <_scanf_i+0x140>
 802195e:	f10b 0b01 	add.w	fp, fp, #1
 8021962:	f1b9 0f00 	cmp.w	r9, #0
 8021966:	d003      	beq.n	8021970 <_scanf_i+0x10c>
 8021968:	3301      	adds	r3, #1
 802196a:	f109 39ff 	add.w	r9, r9, #4294967295
 802196e:	60a3      	str	r3, [r4, #8]
 8021970:	6873      	ldr	r3, [r6, #4]
 8021972:	3b01      	subs	r3, #1
 8021974:	2b00      	cmp	r3, #0
 8021976:	6073      	str	r3, [r6, #4]
 8021978:	dd1b      	ble.n	80219b2 <_scanf_i+0x14e>
 802197a:	6833      	ldr	r3, [r6, #0]
 802197c:	3301      	adds	r3, #1
 802197e:	6033      	str	r3, [r6, #0]
 8021980:	68a3      	ldr	r3, [r4, #8]
 8021982:	3b01      	subs	r3, #1
 8021984:	60a3      	str	r3, [r4, #8]
 8021986:	e7d9      	b.n	802193c <_scanf_i+0xd8>
 8021988:	f1bb 0f02 	cmp.w	fp, #2
 802198c:	d1ae      	bne.n	80218ec <_scanf_i+0x88>
 802198e:	6822      	ldr	r2, [r4, #0]
 8021990:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8021994:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8021998:	d1bf      	bne.n	802191a <_scanf_i+0xb6>
 802199a:	2110      	movs	r1, #16
 802199c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80219a0:	6061      	str	r1, [r4, #4]
 80219a2:	e7a2      	b.n	80218ea <_scanf_i+0x86>
 80219a4:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80219a8:	6022      	str	r2, [r4, #0]
 80219aa:	780b      	ldrb	r3, [r1, #0]
 80219ac:	f805 3b01 	strb.w	r3, [r5], #1
 80219b0:	e7de      	b.n	8021970 <_scanf_i+0x10c>
 80219b2:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80219b6:	4631      	mov	r1, r6
 80219b8:	4650      	mov	r0, sl
 80219ba:	4798      	blx	r3
 80219bc:	2800      	cmp	r0, #0
 80219be:	d0df      	beq.n	8021980 <_scanf_i+0x11c>
 80219c0:	6823      	ldr	r3, [r4, #0]
 80219c2:	05d9      	lsls	r1, r3, #23
 80219c4:	d50d      	bpl.n	80219e2 <_scanf_i+0x17e>
 80219c6:	42bd      	cmp	r5, r7
 80219c8:	d909      	bls.n	80219de <_scanf_i+0x17a>
 80219ca:	f105 39ff 	add.w	r9, r5, #4294967295
 80219ce:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80219d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80219d6:	4632      	mov	r2, r6
 80219d8:	464d      	mov	r5, r9
 80219da:	4650      	mov	r0, sl
 80219dc:	4798      	blx	r3
 80219de:	42bd      	cmp	r5, r7
 80219e0:	d028      	beq.n	8021a34 <_scanf_i+0x1d0>
 80219e2:	6822      	ldr	r2, [r4, #0]
 80219e4:	f012 0210 	ands.w	r2, r2, #16
 80219e8:	d113      	bne.n	8021a12 <_scanf_i+0x1ae>
 80219ea:	702a      	strb	r2, [r5, #0]
 80219ec:	4639      	mov	r1, r7
 80219ee:	6863      	ldr	r3, [r4, #4]
 80219f0:	4650      	mov	r0, sl
 80219f2:	9e01      	ldr	r6, [sp, #4]
 80219f4:	47b0      	blx	r6
 80219f6:	f8d8 3000 	ldr.w	r3, [r8]
 80219fa:	6821      	ldr	r1, [r4, #0]
 80219fc:	1d1a      	adds	r2, r3, #4
 80219fe:	f011 0f20 	tst.w	r1, #32
 8021a02:	f8c8 2000 	str.w	r2, [r8]
 8021a06:	681b      	ldr	r3, [r3, #0]
 8021a08:	d00f      	beq.n	8021a2a <_scanf_i+0x1c6>
 8021a0a:	6018      	str	r0, [r3, #0]
 8021a0c:	68e3      	ldr	r3, [r4, #12]
 8021a0e:	3301      	adds	r3, #1
 8021a10:	60e3      	str	r3, [r4, #12]
 8021a12:	1bed      	subs	r5, r5, r7
 8021a14:	6923      	ldr	r3, [r4, #16]
 8021a16:	2000      	movs	r0, #0
 8021a18:	445d      	add	r5, fp
 8021a1a:	442b      	add	r3, r5
 8021a1c:	6123      	str	r3, [r4, #16]
 8021a1e:	b007      	add	sp, #28
 8021a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021a24:	f04f 0b00 	mov.w	fp, #0
 8021a28:	e7ca      	b.n	80219c0 <_scanf_i+0x15c>
 8021a2a:	07ca      	lsls	r2, r1, #31
 8021a2c:	bf4c      	ite	mi
 8021a2e:	8018      	strhmi	r0, [r3, #0]
 8021a30:	6018      	strpl	r0, [r3, #0]
 8021a32:	e7eb      	b.n	8021a0c <_scanf_i+0x1a8>
 8021a34:	2001      	movs	r0, #1
 8021a36:	e7f2      	b.n	8021a1e <_scanf_i+0x1ba>
 8021a38:	08024340 	.word	0x08024340
 8021a3c:	0801dbe9 	.word	0x0801dbe9
 8021a40:	08021f51 	.word	0x08021f51
 8021a44:	08024829 	.word	0x08024829

08021a48 <__sflush_r>:
 8021a48:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8021a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021a50:	0716      	lsls	r6, r2, #28
 8021a52:	4605      	mov	r5, r0
 8021a54:	460c      	mov	r4, r1
 8021a56:	d454      	bmi.n	8021b02 <__sflush_r+0xba>
 8021a58:	684b      	ldr	r3, [r1, #4]
 8021a5a:	2b00      	cmp	r3, #0
 8021a5c:	dc02      	bgt.n	8021a64 <__sflush_r+0x1c>
 8021a5e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8021a60:	2b00      	cmp	r3, #0
 8021a62:	dd48      	ble.n	8021af6 <__sflush_r+0xae>
 8021a64:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8021a66:	2e00      	cmp	r6, #0
 8021a68:	d045      	beq.n	8021af6 <__sflush_r+0xae>
 8021a6a:	2300      	movs	r3, #0
 8021a6c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8021a70:	682f      	ldr	r7, [r5, #0]
 8021a72:	6a21      	ldr	r1, [r4, #32]
 8021a74:	602b      	str	r3, [r5, #0]
 8021a76:	d030      	beq.n	8021ada <__sflush_r+0x92>
 8021a78:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8021a7a:	89a3      	ldrh	r3, [r4, #12]
 8021a7c:	0759      	lsls	r1, r3, #29
 8021a7e:	d505      	bpl.n	8021a8c <__sflush_r+0x44>
 8021a80:	6863      	ldr	r3, [r4, #4]
 8021a82:	1ad2      	subs	r2, r2, r3
 8021a84:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8021a86:	b10b      	cbz	r3, 8021a8c <__sflush_r+0x44>
 8021a88:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8021a8a:	1ad2      	subs	r2, r2, r3
 8021a8c:	2300      	movs	r3, #0
 8021a8e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8021a90:	6a21      	ldr	r1, [r4, #32]
 8021a92:	4628      	mov	r0, r5
 8021a94:	47b0      	blx	r6
 8021a96:	1c43      	adds	r3, r0, #1
 8021a98:	89a3      	ldrh	r3, [r4, #12]
 8021a9a:	d106      	bne.n	8021aaa <__sflush_r+0x62>
 8021a9c:	6829      	ldr	r1, [r5, #0]
 8021a9e:	291d      	cmp	r1, #29
 8021aa0:	d82b      	bhi.n	8021afa <__sflush_r+0xb2>
 8021aa2:	4a2a      	ldr	r2, [pc, #168]	@ (8021b4c <__sflush_r+0x104>)
 8021aa4:	410a      	asrs	r2, r1
 8021aa6:	07d6      	lsls	r6, r2, #31
 8021aa8:	d427      	bmi.n	8021afa <__sflush_r+0xb2>
 8021aaa:	2200      	movs	r2, #0
 8021aac:	04d9      	lsls	r1, r3, #19
 8021aae:	6062      	str	r2, [r4, #4]
 8021ab0:	6922      	ldr	r2, [r4, #16]
 8021ab2:	6022      	str	r2, [r4, #0]
 8021ab4:	d504      	bpl.n	8021ac0 <__sflush_r+0x78>
 8021ab6:	1c42      	adds	r2, r0, #1
 8021ab8:	d101      	bne.n	8021abe <__sflush_r+0x76>
 8021aba:	682b      	ldr	r3, [r5, #0]
 8021abc:	b903      	cbnz	r3, 8021ac0 <__sflush_r+0x78>
 8021abe:	6560      	str	r0, [r4, #84]	@ 0x54
 8021ac0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8021ac2:	602f      	str	r7, [r5, #0]
 8021ac4:	b1b9      	cbz	r1, 8021af6 <__sflush_r+0xae>
 8021ac6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8021aca:	4299      	cmp	r1, r3
 8021acc:	d002      	beq.n	8021ad4 <__sflush_r+0x8c>
 8021ace:	4628      	mov	r0, r5
 8021ad0:	f7fe f9ae 	bl	801fe30 <_free_r>
 8021ad4:	2300      	movs	r3, #0
 8021ad6:	6363      	str	r3, [r4, #52]	@ 0x34
 8021ad8:	e00d      	b.n	8021af6 <__sflush_r+0xae>
 8021ada:	2301      	movs	r3, #1
 8021adc:	4628      	mov	r0, r5
 8021ade:	47b0      	blx	r6
 8021ae0:	4602      	mov	r2, r0
 8021ae2:	1c50      	adds	r0, r2, #1
 8021ae4:	d1c9      	bne.n	8021a7a <__sflush_r+0x32>
 8021ae6:	682b      	ldr	r3, [r5, #0]
 8021ae8:	2b00      	cmp	r3, #0
 8021aea:	d0c6      	beq.n	8021a7a <__sflush_r+0x32>
 8021aec:	2b1d      	cmp	r3, #29
 8021aee:	d001      	beq.n	8021af4 <__sflush_r+0xac>
 8021af0:	2b16      	cmp	r3, #22
 8021af2:	d11d      	bne.n	8021b30 <__sflush_r+0xe8>
 8021af4:	602f      	str	r7, [r5, #0]
 8021af6:	2000      	movs	r0, #0
 8021af8:	e021      	b.n	8021b3e <__sflush_r+0xf6>
 8021afa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8021afe:	b21b      	sxth	r3, r3
 8021b00:	e01a      	b.n	8021b38 <__sflush_r+0xf0>
 8021b02:	690f      	ldr	r7, [r1, #16]
 8021b04:	2f00      	cmp	r7, #0
 8021b06:	d0f6      	beq.n	8021af6 <__sflush_r+0xae>
 8021b08:	0793      	lsls	r3, r2, #30
 8021b0a:	680e      	ldr	r6, [r1, #0]
 8021b0c:	600f      	str	r7, [r1, #0]
 8021b0e:	bf0c      	ite	eq
 8021b10:	694b      	ldreq	r3, [r1, #20]
 8021b12:	2300      	movne	r3, #0
 8021b14:	eba6 0807 	sub.w	r8, r6, r7
 8021b18:	608b      	str	r3, [r1, #8]
 8021b1a:	f1b8 0f00 	cmp.w	r8, #0
 8021b1e:	ddea      	ble.n	8021af6 <__sflush_r+0xae>
 8021b20:	4643      	mov	r3, r8
 8021b22:	463a      	mov	r2, r7
 8021b24:	6a21      	ldr	r1, [r4, #32]
 8021b26:	4628      	mov	r0, r5
 8021b28:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8021b2a:	47b0      	blx	r6
 8021b2c:	2800      	cmp	r0, #0
 8021b2e:	dc08      	bgt.n	8021b42 <__sflush_r+0xfa>
 8021b30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021b34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8021b38:	f04f 30ff 	mov.w	r0, #4294967295
 8021b3c:	81a3      	strh	r3, [r4, #12]
 8021b3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021b42:	4407      	add	r7, r0
 8021b44:	eba8 0800 	sub.w	r8, r8, r0
 8021b48:	e7e7      	b.n	8021b1a <__sflush_r+0xd2>
 8021b4a:	bf00      	nop
 8021b4c:	dfbffffe 	.word	0xdfbffffe

08021b50 <_fflush_r>:
 8021b50:	b538      	push	{r3, r4, r5, lr}
 8021b52:	690b      	ldr	r3, [r1, #16]
 8021b54:	4605      	mov	r5, r0
 8021b56:	460c      	mov	r4, r1
 8021b58:	b913      	cbnz	r3, 8021b60 <_fflush_r+0x10>
 8021b5a:	2500      	movs	r5, #0
 8021b5c:	4628      	mov	r0, r5
 8021b5e:	bd38      	pop	{r3, r4, r5, pc}
 8021b60:	b118      	cbz	r0, 8021b6a <_fflush_r+0x1a>
 8021b62:	6a03      	ldr	r3, [r0, #32]
 8021b64:	b90b      	cbnz	r3, 8021b6a <_fflush_r+0x1a>
 8021b66:	f7fc ff43 	bl	801e9f0 <__sinit>
 8021b6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021b6e:	2b00      	cmp	r3, #0
 8021b70:	d0f3      	beq.n	8021b5a <_fflush_r+0xa>
 8021b72:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8021b74:	07d0      	lsls	r0, r2, #31
 8021b76:	d404      	bmi.n	8021b82 <_fflush_r+0x32>
 8021b78:	0599      	lsls	r1, r3, #22
 8021b7a:	d402      	bmi.n	8021b82 <_fflush_r+0x32>
 8021b7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8021b7e:	f7fd fab2 	bl	801f0e6 <__retarget_lock_acquire_recursive>
 8021b82:	4628      	mov	r0, r5
 8021b84:	4621      	mov	r1, r4
 8021b86:	f7ff ff5f 	bl	8021a48 <__sflush_r>
 8021b8a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8021b8c:	4605      	mov	r5, r0
 8021b8e:	07da      	lsls	r2, r3, #31
 8021b90:	d4e4      	bmi.n	8021b5c <_fflush_r+0xc>
 8021b92:	89a3      	ldrh	r3, [r4, #12]
 8021b94:	059b      	lsls	r3, r3, #22
 8021b96:	d4e1      	bmi.n	8021b5c <_fflush_r+0xc>
 8021b98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8021b9a:	f7fd faa5 	bl	801f0e8 <__retarget_lock_release_recursive>
 8021b9e:	e7dd      	b.n	8021b5c <_fflush_r+0xc>

08021ba0 <fiprintf>:
 8021ba0:	b40e      	push	{r1, r2, r3}
 8021ba2:	b503      	push	{r0, r1, lr}
 8021ba4:	ab03      	add	r3, sp, #12
 8021ba6:	4601      	mov	r1, r0
 8021ba8:	4805      	ldr	r0, [pc, #20]	@ (8021bc0 <fiprintf+0x20>)
 8021baa:	f853 2b04 	ldr.w	r2, [r3], #4
 8021bae:	6800      	ldr	r0, [r0, #0]
 8021bb0:	9301      	str	r3, [sp, #4]
 8021bb2:	f7ff fce5 	bl	8021580 <_vfiprintf_r>
 8021bb6:	b002      	add	sp, #8
 8021bb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8021bbc:	b003      	add	sp, #12
 8021bbe:	4770      	bx	lr
 8021bc0:	20000224 	.word	0x20000224

08021bc4 <__swhatbuf_r>:
 8021bc4:	b570      	push	{r4, r5, r6, lr}
 8021bc6:	460c      	mov	r4, r1
 8021bc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021bcc:	b096      	sub	sp, #88	@ 0x58
 8021bce:	4615      	mov	r5, r2
 8021bd0:	2900      	cmp	r1, #0
 8021bd2:	461e      	mov	r6, r3
 8021bd4:	da0c      	bge.n	8021bf0 <__swhatbuf_r+0x2c>
 8021bd6:	89a3      	ldrh	r3, [r4, #12]
 8021bd8:	2100      	movs	r1, #0
 8021bda:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8021bde:	bf14      	ite	ne
 8021be0:	2340      	movne	r3, #64	@ 0x40
 8021be2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8021be6:	2000      	movs	r0, #0
 8021be8:	6031      	str	r1, [r6, #0]
 8021bea:	602b      	str	r3, [r5, #0]
 8021bec:	b016      	add	sp, #88	@ 0x58
 8021bee:	bd70      	pop	{r4, r5, r6, pc}
 8021bf0:	466a      	mov	r2, sp
 8021bf2:	f000 f8d3 	bl	8021d9c <_fstat_r>
 8021bf6:	2800      	cmp	r0, #0
 8021bf8:	dbed      	blt.n	8021bd6 <__swhatbuf_r+0x12>
 8021bfa:	9901      	ldr	r1, [sp, #4]
 8021bfc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8021c00:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8021c04:	4259      	negs	r1, r3
 8021c06:	4159      	adcs	r1, r3
 8021c08:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8021c0c:	e7eb      	b.n	8021be6 <__swhatbuf_r+0x22>

08021c0e <__smakebuf_r>:
 8021c0e:	898b      	ldrh	r3, [r1, #12]
 8021c10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021c12:	079d      	lsls	r5, r3, #30
 8021c14:	4606      	mov	r6, r0
 8021c16:	460c      	mov	r4, r1
 8021c18:	d507      	bpl.n	8021c2a <__smakebuf_r+0x1c>
 8021c1a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8021c1e:	6023      	str	r3, [r4, #0]
 8021c20:	6123      	str	r3, [r4, #16]
 8021c22:	2301      	movs	r3, #1
 8021c24:	6163      	str	r3, [r4, #20]
 8021c26:	b003      	add	sp, #12
 8021c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021c2a:	ab01      	add	r3, sp, #4
 8021c2c:	466a      	mov	r2, sp
 8021c2e:	f7ff ffc9 	bl	8021bc4 <__swhatbuf_r>
 8021c32:	9f00      	ldr	r7, [sp, #0]
 8021c34:	4605      	mov	r5, r0
 8021c36:	4630      	mov	r0, r6
 8021c38:	4639      	mov	r1, r7
 8021c3a:	f7fb f8bb 	bl	801cdb4 <_malloc_r>
 8021c3e:	b948      	cbnz	r0, 8021c54 <__smakebuf_r+0x46>
 8021c40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021c44:	059a      	lsls	r2, r3, #22
 8021c46:	d4ee      	bmi.n	8021c26 <__smakebuf_r+0x18>
 8021c48:	f023 0303 	bic.w	r3, r3, #3
 8021c4c:	f043 0302 	orr.w	r3, r3, #2
 8021c50:	81a3      	strh	r3, [r4, #12]
 8021c52:	e7e2      	b.n	8021c1a <__smakebuf_r+0xc>
 8021c54:	89a3      	ldrh	r3, [r4, #12]
 8021c56:	6020      	str	r0, [r4, #0]
 8021c58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8021c5c:	81a3      	strh	r3, [r4, #12]
 8021c5e:	9b01      	ldr	r3, [sp, #4]
 8021c60:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8021c64:	b15b      	cbz	r3, 8021c7e <__smakebuf_r+0x70>
 8021c66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8021c6a:	4630      	mov	r0, r6
 8021c6c:	f000 f8a8 	bl	8021dc0 <_isatty_r>
 8021c70:	b128      	cbz	r0, 8021c7e <__smakebuf_r+0x70>
 8021c72:	89a3      	ldrh	r3, [r4, #12]
 8021c74:	f023 0303 	bic.w	r3, r3, #3
 8021c78:	f043 0301 	orr.w	r3, r3, #1
 8021c7c:	81a3      	strh	r3, [r4, #12]
 8021c7e:	89a3      	ldrh	r3, [r4, #12]
 8021c80:	431d      	orrs	r5, r3
 8021c82:	81a5      	strh	r5, [r4, #12]
 8021c84:	e7cf      	b.n	8021c26 <__smakebuf_r+0x18>

08021c86 <__sccl>:
 8021c86:	b570      	push	{r4, r5, r6, lr}
 8021c88:	780b      	ldrb	r3, [r1, #0]
 8021c8a:	4604      	mov	r4, r0
 8021c8c:	3801      	subs	r0, #1
 8021c8e:	2b5e      	cmp	r3, #94	@ 0x5e
 8021c90:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8021c94:	bf13      	iteet	ne
 8021c96:	1c4a      	addne	r2, r1, #1
 8021c98:	1c8a      	addeq	r2, r1, #2
 8021c9a:	784b      	ldrbeq	r3, [r1, #1]
 8021c9c:	2100      	movne	r1, #0
 8021c9e:	bf08      	it	eq
 8021ca0:	2101      	moveq	r1, #1
 8021ca2:	f800 1f01 	strb.w	r1, [r0, #1]!
 8021ca6:	42a8      	cmp	r0, r5
 8021ca8:	d1fb      	bne.n	8021ca2 <__sccl+0x1c>
 8021caa:	b90b      	cbnz	r3, 8021cb0 <__sccl+0x2a>
 8021cac:	1e50      	subs	r0, r2, #1
 8021cae:	bd70      	pop	{r4, r5, r6, pc}
 8021cb0:	f081 0101 	eor.w	r1, r1, #1
 8021cb4:	4610      	mov	r0, r2
 8021cb6:	54e1      	strb	r1, [r4, r3]
 8021cb8:	4602      	mov	r2, r0
 8021cba:	f812 5b01 	ldrb.w	r5, [r2], #1
 8021cbe:	2d2d      	cmp	r5, #45	@ 0x2d
 8021cc0:	d005      	beq.n	8021cce <__sccl+0x48>
 8021cc2:	2d5d      	cmp	r5, #93	@ 0x5d
 8021cc4:	d016      	beq.n	8021cf4 <__sccl+0x6e>
 8021cc6:	2d00      	cmp	r5, #0
 8021cc8:	d0f1      	beq.n	8021cae <__sccl+0x28>
 8021cca:	462b      	mov	r3, r5
 8021ccc:	e7f2      	b.n	8021cb4 <__sccl+0x2e>
 8021cce:	7846      	ldrb	r6, [r0, #1]
 8021cd0:	2e5d      	cmp	r6, #93	@ 0x5d
 8021cd2:	d0fa      	beq.n	8021cca <__sccl+0x44>
 8021cd4:	42b3      	cmp	r3, r6
 8021cd6:	dcf8      	bgt.n	8021cca <__sccl+0x44>
 8021cd8:	3002      	adds	r0, #2
 8021cda:	461a      	mov	r2, r3
 8021cdc:	3201      	adds	r2, #1
 8021cde:	4296      	cmp	r6, r2
 8021ce0:	54a1      	strb	r1, [r4, r2]
 8021ce2:	dcfb      	bgt.n	8021cdc <__sccl+0x56>
 8021ce4:	1af2      	subs	r2, r6, r3
 8021ce6:	1c5d      	adds	r5, r3, #1
 8021ce8:	3a01      	subs	r2, #1
 8021cea:	42b3      	cmp	r3, r6
 8021cec:	bfa8      	it	ge
 8021cee:	2200      	movge	r2, #0
 8021cf0:	18ab      	adds	r3, r5, r2
 8021cf2:	e7e1      	b.n	8021cb8 <__sccl+0x32>
 8021cf4:	4610      	mov	r0, r2
 8021cf6:	e7da      	b.n	8021cae <__sccl+0x28>

08021cf8 <__submore>:
 8021cf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021cfc:	460c      	mov	r4, r1
 8021cfe:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8021d00:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8021d04:	4299      	cmp	r1, r3
 8021d06:	d11a      	bne.n	8021d3e <__submore+0x46>
 8021d08:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8021d0c:	f7fb f852 	bl	801cdb4 <_malloc_r>
 8021d10:	b918      	cbnz	r0, 8021d1a <__submore+0x22>
 8021d12:	f04f 30ff 	mov.w	r0, #4294967295
 8021d16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021d1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8021d1e:	6360      	str	r0, [r4, #52]	@ 0x34
 8021d20:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8021d24:	63a3      	str	r3, [r4, #56]	@ 0x38
 8021d26:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8021d2a:	7083      	strb	r3, [r0, #2]
 8021d2c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8021d30:	7043      	strb	r3, [r0, #1]
 8021d32:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8021d36:	7003      	strb	r3, [r0, #0]
 8021d38:	6020      	str	r0, [r4, #0]
 8021d3a:	2000      	movs	r0, #0
 8021d3c:	e7eb      	b.n	8021d16 <__submore+0x1e>
 8021d3e:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8021d40:	0077      	lsls	r7, r6, #1
 8021d42:	463a      	mov	r2, r7
 8021d44:	f000 f867 	bl	8021e16 <_realloc_r>
 8021d48:	4605      	mov	r5, r0
 8021d4a:	2800      	cmp	r0, #0
 8021d4c:	d0e1      	beq.n	8021d12 <__submore+0x1a>
 8021d4e:	eb00 0806 	add.w	r8, r0, r6
 8021d52:	4601      	mov	r1, r0
 8021d54:	4632      	mov	r2, r6
 8021d56:	4640      	mov	r0, r8
 8021d58:	f7fd f9dd 	bl	801f116 <memcpy>
 8021d5c:	f8c4 8000 	str.w	r8, [r4]
 8021d60:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8021d64:	e7e9      	b.n	8021d3a <__submore+0x42>

08021d66 <memmove>:
 8021d66:	4288      	cmp	r0, r1
 8021d68:	b510      	push	{r4, lr}
 8021d6a:	eb01 0402 	add.w	r4, r1, r2
 8021d6e:	d902      	bls.n	8021d76 <memmove+0x10>
 8021d70:	4284      	cmp	r4, r0
 8021d72:	4623      	mov	r3, r4
 8021d74:	d807      	bhi.n	8021d86 <memmove+0x20>
 8021d76:	1e43      	subs	r3, r0, #1
 8021d78:	42a1      	cmp	r1, r4
 8021d7a:	d008      	beq.n	8021d8e <memmove+0x28>
 8021d7c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8021d80:	f803 2f01 	strb.w	r2, [r3, #1]!
 8021d84:	e7f8      	b.n	8021d78 <memmove+0x12>
 8021d86:	4402      	add	r2, r0
 8021d88:	4601      	mov	r1, r0
 8021d8a:	428a      	cmp	r2, r1
 8021d8c:	d100      	bne.n	8021d90 <memmove+0x2a>
 8021d8e:	bd10      	pop	{r4, pc}
 8021d90:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8021d94:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8021d98:	e7f7      	b.n	8021d8a <memmove+0x24>
	...

08021d9c <_fstat_r>:
 8021d9c:	b538      	push	{r3, r4, r5, lr}
 8021d9e:	2300      	movs	r3, #0
 8021da0:	4d06      	ldr	r5, [pc, #24]	@ (8021dbc <_fstat_r+0x20>)
 8021da2:	4604      	mov	r4, r0
 8021da4:	4608      	mov	r0, r1
 8021da6:	4611      	mov	r1, r2
 8021da8:	602b      	str	r3, [r5, #0]
 8021daa:	f7e3 f8f9 	bl	8004fa0 <_fstat>
 8021dae:	1c43      	adds	r3, r0, #1
 8021db0:	d102      	bne.n	8021db8 <_fstat_r+0x1c>
 8021db2:	682b      	ldr	r3, [r5, #0]
 8021db4:	b103      	cbz	r3, 8021db8 <_fstat_r+0x1c>
 8021db6:	6023      	str	r3, [r4, #0]
 8021db8:	bd38      	pop	{r3, r4, r5, pc}
 8021dba:	bf00      	nop
 8021dbc:	200157d4 	.word	0x200157d4

08021dc0 <_isatty_r>:
 8021dc0:	b538      	push	{r3, r4, r5, lr}
 8021dc2:	2300      	movs	r3, #0
 8021dc4:	4d05      	ldr	r5, [pc, #20]	@ (8021ddc <_isatty_r+0x1c>)
 8021dc6:	4604      	mov	r4, r0
 8021dc8:	4608      	mov	r0, r1
 8021dca:	602b      	str	r3, [r5, #0]
 8021dcc:	f7e3 f8f8 	bl	8004fc0 <_isatty>
 8021dd0:	1c43      	adds	r3, r0, #1
 8021dd2:	d102      	bne.n	8021dda <_isatty_r+0x1a>
 8021dd4:	682b      	ldr	r3, [r5, #0]
 8021dd6:	b103      	cbz	r3, 8021dda <_isatty_r+0x1a>
 8021dd8:	6023      	str	r3, [r4, #0]
 8021dda:	bd38      	pop	{r3, r4, r5, pc}
 8021ddc:	200157d4 	.word	0x200157d4

08021de0 <abort>:
 8021de0:	2006      	movs	r0, #6
 8021de2:	b508      	push	{r3, lr}
 8021de4:	f000 f8de 	bl	8021fa4 <raise>
 8021de8:	2001      	movs	r0, #1
 8021dea:	f7e3 f889 	bl	8004f00 <_exit>

08021dee <_calloc_r>:
 8021dee:	b570      	push	{r4, r5, r6, lr}
 8021df0:	fba1 5402 	umull	r5, r4, r1, r2
 8021df4:	b93c      	cbnz	r4, 8021e06 <_calloc_r+0x18>
 8021df6:	4629      	mov	r1, r5
 8021df8:	f7fa ffdc 	bl	801cdb4 <_malloc_r>
 8021dfc:	4606      	mov	r6, r0
 8021dfe:	b928      	cbnz	r0, 8021e0c <_calloc_r+0x1e>
 8021e00:	2600      	movs	r6, #0
 8021e02:	4630      	mov	r0, r6
 8021e04:	bd70      	pop	{r4, r5, r6, pc}
 8021e06:	220c      	movs	r2, #12
 8021e08:	6002      	str	r2, [r0, #0]
 8021e0a:	e7f9      	b.n	8021e00 <_calloc_r+0x12>
 8021e0c:	462a      	mov	r2, r5
 8021e0e:	4621      	mov	r1, r4
 8021e10:	f7fd f80e 	bl	801ee30 <memset>
 8021e14:	e7f5      	b.n	8021e02 <_calloc_r+0x14>

08021e16 <_realloc_r>:
 8021e16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021e1a:	4680      	mov	r8, r0
 8021e1c:	4615      	mov	r5, r2
 8021e1e:	460c      	mov	r4, r1
 8021e20:	b921      	cbnz	r1, 8021e2c <_realloc_r+0x16>
 8021e22:	4611      	mov	r1, r2
 8021e24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021e28:	f7fa bfc4 	b.w	801cdb4 <_malloc_r>
 8021e2c:	b92a      	cbnz	r2, 8021e3a <_realloc_r+0x24>
 8021e2e:	f7fd ffff 	bl	801fe30 <_free_r>
 8021e32:	2400      	movs	r4, #0
 8021e34:	4620      	mov	r0, r4
 8021e36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021e3a:	f000 f8cf 	bl	8021fdc <_malloc_usable_size_r>
 8021e3e:	4285      	cmp	r5, r0
 8021e40:	4606      	mov	r6, r0
 8021e42:	d802      	bhi.n	8021e4a <_realloc_r+0x34>
 8021e44:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8021e48:	d8f4      	bhi.n	8021e34 <_realloc_r+0x1e>
 8021e4a:	4629      	mov	r1, r5
 8021e4c:	4640      	mov	r0, r8
 8021e4e:	f7fa ffb1 	bl	801cdb4 <_malloc_r>
 8021e52:	4607      	mov	r7, r0
 8021e54:	2800      	cmp	r0, #0
 8021e56:	d0ec      	beq.n	8021e32 <_realloc_r+0x1c>
 8021e58:	42b5      	cmp	r5, r6
 8021e5a:	462a      	mov	r2, r5
 8021e5c:	4621      	mov	r1, r4
 8021e5e:	bf28      	it	cs
 8021e60:	4632      	movcs	r2, r6
 8021e62:	f7fd f958 	bl	801f116 <memcpy>
 8021e66:	4621      	mov	r1, r4
 8021e68:	4640      	mov	r0, r8
 8021e6a:	463c      	mov	r4, r7
 8021e6c:	f7fd ffe0 	bl	801fe30 <_free_r>
 8021e70:	e7e0      	b.n	8021e34 <_realloc_r+0x1e>
	...

08021e74 <_strtoul_l.constprop.0>:
 8021e74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021e78:	4686      	mov	lr, r0
 8021e7a:	460d      	mov	r5, r1
 8021e7c:	4e33      	ldr	r6, [pc, #204]	@ (8021f4c <_strtoul_l.constprop.0+0xd8>)
 8021e7e:	4628      	mov	r0, r5
 8021e80:	f815 4b01 	ldrb.w	r4, [r5], #1
 8021e84:	5d37      	ldrb	r7, [r6, r4]
 8021e86:	f017 0708 	ands.w	r7, r7, #8
 8021e8a:	d1f8      	bne.n	8021e7e <_strtoul_l.constprop.0+0xa>
 8021e8c:	2c2d      	cmp	r4, #45	@ 0x2d
 8021e8e:	d12f      	bne.n	8021ef0 <_strtoul_l.constprop.0+0x7c>
 8021e90:	782c      	ldrb	r4, [r5, #0]
 8021e92:	2701      	movs	r7, #1
 8021e94:	1c85      	adds	r5, r0, #2
 8021e96:	f033 0010 	bics.w	r0, r3, #16
 8021e9a:	d109      	bne.n	8021eb0 <_strtoul_l.constprop.0+0x3c>
 8021e9c:	2c30      	cmp	r4, #48	@ 0x30
 8021e9e:	d12c      	bne.n	8021efa <_strtoul_l.constprop.0+0x86>
 8021ea0:	7828      	ldrb	r0, [r5, #0]
 8021ea2:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8021ea6:	2858      	cmp	r0, #88	@ 0x58
 8021ea8:	d127      	bne.n	8021efa <_strtoul_l.constprop.0+0x86>
 8021eaa:	786c      	ldrb	r4, [r5, #1]
 8021eac:	2310      	movs	r3, #16
 8021eae:	3502      	adds	r5, #2
 8021eb0:	f04f 38ff 	mov.w	r8, #4294967295
 8021eb4:	2600      	movs	r6, #0
 8021eb6:	fbb8 f8f3 	udiv	r8, r8, r3
 8021eba:	fb03 f908 	mul.w	r9, r3, r8
 8021ebe:	4630      	mov	r0, r6
 8021ec0:	ea6f 0909 	mvn.w	r9, r9
 8021ec4:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8021ec8:	f1bc 0f09 	cmp.w	ip, #9
 8021ecc:	d81c      	bhi.n	8021f08 <_strtoul_l.constprop.0+0x94>
 8021ece:	4664      	mov	r4, ip
 8021ed0:	42a3      	cmp	r3, r4
 8021ed2:	dd2a      	ble.n	8021f2a <_strtoul_l.constprop.0+0xb6>
 8021ed4:	f1b6 3fff 	cmp.w	r6, #4294967295
 8021ed8:	d007      	beq.n	8021eea <_strtoul_l.constprop.0+0x76>
 8021eda:	4580      	cmp	r8, r0
 8021edc:	d322      	bcc.n	8021f24 <_strtoul_l.constprop.0+0xb0>
 8021ede:	d101      	bne.n	8021ee4 <_strtoul_l.constprop.0+0x70>
 8021ee0:	45a1      	cmp	r9, r4
 8021ee2:	db1f      	blt.n	8021f24 <_strtoul_l.constprop.0+0xb0>
 8021ee4:	fb00 4003 	mla	r0, r0, r3, r4
 8021ee8:	2601      	movs	r6, #1
 8021eea:	f815 4b01 	ldrb.w	r4, [r5], #1
 8021eee:	e7e9      	b.n	8021ec4 <_strtoul_l.constprop.0+0x50>
 8021ef0:	2c2b      	cmp	r4, #43	@ 0x2b
 8021ef2:	bf04      	itt	eq
 8021ef4:	782c      	ldrbeq	r4, [r5, #0]
 8021ef6:	1c85      	addeq	r5, r0, #2
 8021ef8:	e7cd      	b.n	8021e96 <_strtoul_l.constprop.0+0x22>
 8021efa:	2b00      	cmp	r3, #0
 8021efc:	d1d8      	bne.n	8021eb0 <_strtoul_l.constprop.0+0x3c>
 8021efe:	2c30      	cmp	r4, #48	@ 0x30
 8021f00:	bf0c      	ite	eq
 8021f02:	2308      	moveq	r3, #8
 8021f04:	230a      	movne	r3, #10
 8021f06:	e7d3      	b.n	8021eb0 <_strtoul_l.constprop.0+0x3c>
 8021f08:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8021f0c:	f1bc 0f19 	cmp.w	ip, #25
 8021f10:	d801      	bhi.n	8021f16 <_strtoul_l.constprop.0+0xa2>
 8021f12:	3c37      	subs	r4, #55	@ 0x37
 8021f14:	e7dc      	b.n	8021ed0 <_strtoul_l.constprop.0+0x5c>
 8021f16:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8021f1a:	f1bc 0f19 	cmp.w	ip, #25
 8021f1e:	d804      	bhi.n	8021f2a <_strtoul_l.constprop.0+0xb6>
 8021f20:	3c57      	subs	r4, #87	@ 0x57
 8021f22:	e7d5      	b.n	8021ed0 <_strtoul_l.constprop.0+0x5c>
 8021f24:	f04f 36ff 	mov.w	r6, #4294967295
 8021f28:	e7df      	b.n	8021eea <_strtoul_l.constprop.0+0x76>
 8021f2a:	1c73      	adds	r3, r6, #1
 8021f2c:	d106      	bne.n	8021f3c <_strtoul_l.constprop.0+0xc8>
 8021f2e:	2322      	movs	r3, #34	@ 0x22
 8021f30:	4630      	mov	r0, r6
 8021f32:	f8ce 3000 	str.w	r3, [lr]
 8021f36:	b932      	cbnz	r2, 8021f46 <_strtoul_l.constprop.0+0xd2>
 8021f38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021f3c:	b107      	cbz	r7, 8021f40 <_strtoul_l.constprop.0+0xcc>
 8021f3e:	4240      	negs	r0, r0
 8021f40:	2a00      	cmp	r2, #0
 8021f42:	d0f9      	beq.n	8021f38 <_strtoul_l.constprop.0+0xc4>
 8021f44:	b106      	cbz	r6, 8021f48 <_strtoul_l.constprop.0+0xd4>
 8021f46:	1e69      	subs	r1, r5, #1
 8021f48:	6011      	str	r1, [r2, #0]
 8021f4a:	e7f5      	b.n	8021f38 <_strtoul_l.constprop.0+0xc4>
 8021f4c:	080243f1 	.word	0x080243f1

08021f50 <_strtoul_r>:
 8021f50:	f7ff bf90 	b.w	8021e74 <_strtoul_l.constprop.0>

08021f54 <_raise_r>:
 8021f54:	291f      	cmp	r1, #31
 8021f56:	b538      	push	{r3, r4, r5, lr}
 8021f58:	4605      	mov	r5, r0
 8021f5a:	460c      	mov	r4, r1
 8021f5c:	d904      	bls.n	8021f68 <_raise_r+0x14>
 8021f5e:	2316      	movs	r3, #22
 8021f60:	6003      	str	r3, [r0, #0]
 8021f62:	f04f 30ff 	mov.w	r0, #4294967295
 8021f66:	bd38      	pop	{r3, r4, r5, pc}
 8021f68:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8021f6a:	b112      	cbz	r2, 8021f72 <_raise_r+0x1e>
 8021f6c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8021f70:	b94b      	cbnz	r3, 8021f86 <_raise_r+0x32>
 8021f72:	4628      	mov	r0, r5
 8021f74:	f000 f830 	bl	8021fd8 <_getpid_r>
 8021f78:	4622      	mov	r2, r4
 8021f7a:	4601      	mov	r1, r0
 8021f7c:	4628      	mov	r0, r5
 8021f7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021f82:	f000 b817 	b.w	8021fb4 <_kill_r>
 8021f86:	2b01      	cmp	r3, #1
 8021f88:	d00a      	beq.n	8021fa0 <_raise_r+0x4c>
 8021f8a:	1c59      	adds	r1, r3, #1
 8021f8c:	d103      	bne.n	8021f96 <_raise_r+0x42>
 8021f8e:	2316      	movs	r3, #22
 8021f90:	6003      	str	r3, [r0, #0]
 8021f92:	2001      	movs	r0, #1
 8021f94:	e7e7      	b.n	8021f66 <_raise_r+0x12>
 8021f96:	2100      	movs	r1, #0
 8021f98:	4620      	mov	r0, r4
 8021f9a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8021f9e:	4798      	blx	r3
 8021fa0:	2000      	movs	r0, #0
 8021fa2:	e7e0      	b.n	8021f66 <_raise_r+0x12>

08021fa4 <raise>:
 8021fa4:	4b02      	ldr	r3, [pc, #8]	@ (8021fb0 <raise+0xc>)
 8021fa6:	4601      	mov	r1, r0
 8021fa8:	6818      	ldr	r0, [r3, #0]
 8021faa:	f7ff bfd3 	b.w	8021f54 <_raise_r>
 8021fae:	bf00      	nop
 8021fb0:	20000224 	.word	0x20000224

08021fb4 <_kill_r>:
 8021fb4:	b538      	push	{r3, r4, r5, lr}
 8021fb6:	2300      	movs	r3, #0
 8021fb8:	4d06      	ldr	r5, [pc, #24]	@ (8021fd4 <_kill_r+0x20>)
 8021fba:	4604      	mov	r4, r0
 8021fbc:	4608      	mov	r0, r1
 8021fbe:	4611      	mov	r1, r2
 8021fc0:	602b      	str	r3, [r5, #0]
 8021fc2:	f7e2 ff8d 	bl	8004ee0 <_kill>
 8021fc6:	1c43      	adds	r3, r0, #1
 8021fc8:	d102      	bne.n	8021fd0 <_kill_r+0x1c>
 8021fca:	682b      	ldr	r3, [r5, #0]
 8021fcc:	b103      	cbz	r3, 8021fd0 <_kill_r+0x1c>
 8021fce:	6023      	str	r3, [r4, #0]
 8021fd0:	bd38      	pop	{r3, r4, r5, pc}
 8021fd2:	bf00      	nop
 8021fd4:	200157d4 	.word	0x200157d4

08021fd8 <_getpid_r>:
 8021fd8:	f7e2 bf7a 	b.w	8004ed0 <_getpid>

08021fdc <_malloc_usable_size_r>:
 8021fdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8021fe0:	1f18      	subs	r0, r3, #4
 8021fe2:	2b00      	cmp	r3, #0
 8021fe4:	bfbc      	itt	lt
 8021fe6:	580b      	ldrlt	r3, [r1, r0]
 8021fe8:	18c0      	addlt	r0, r0, r3
 8021fea:	4770      	bx	lr

08021fec <fmod>:
 8021fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021fee:	ec57 6b10 	vmov	r6, r7, d0
 8021ff2:	ec55 4b11 	vmov	r4, r5, d1
 8021ff6:	ed2d 8b02 	vpush	{d8}
 8021ffa:	f000 f825 	bl	8022048 <__ieee754_fmod>
 8021ffe:	4622      	mov	r2, r4
 8022000:	462b      	mov	r3, r5
 8022002:	4630      	mov	r0, r6
 8022004:	4639      	mov	r1, r7
 8022006:	eeb0 8a40 	vmov.f32	s16, s0
 802200a:	eef0 8a60 	vmov.f32	s17, s1
 802200e:	f7de fda7 	bl	8000b60 <__aeabi_dcmpun>
 8022012:	b990      	cbnz	r0, 802203a <fmod+0x4e>
 8022014:	2200      	movs	r2, #0
 8022016:	2300      	movs	r3, #0
 8022018:	4620      	mov	r0, r4
 802201a:	4629      	mov	r1, r5
 802201c:	f7de fd6e 	bl	8000afc <__aeabi_dcmpeq>
 8022020:	b158      	cbz	r0, 802203a <fmod+0x4e>
 8022022:	f7fd f835 	bl	801f090 <__errno>
 8022026:	2321      	movs	r3, #33	@ 0x21
 8022028:	2200      	movs	r2, #0
 802202a:	6003      	str	r3, [r0, #0]
 802202c:	2300      	movs	r3, #0
 802202e:	4610      	mov	r0, r2
 8022030:	4619      	mov	r1, r3
 8022032:	f7de fc25 	bl	8000880 <__aeabi_ddiv>
 8022036:	ec41 0b18 	vmov	d8, r0, r1
 802203a:	eeb0 0a48 	vmov.f32	s0, s16
 802203e:	eef0 0a68 	vmov.f32	s1, s17
 8022042:	ecbd 8b02 	vpop	{d8}
 8022046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08022048 <__ieee754_fmod>:
 8022048:	ec53 2b11 	vmov	r2, r3, d1
 802204c:	f023 4c00 	bic.w	ip, r3, #2147483648	@ 0x80000000
 8022050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022054:	ea52 040c 	orrs.w	r4, r2, ip
 8022058:	461e      	mov	r6, r3
 802205a:	4617      	mov	r7, r2
 802205c:	4696      	mov	lr, r2
 802205e:	ec51 0b10 	vmov	r0, r1, d0
 8022062:	d00c      	beq.n	802207e <__ieee754_fmod+0x36>
 8022064:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 8022068:	4c76      	ldr	r4, [pc, #472]	@ (8022244 <__ieee754_fmod+0x1fc>)
 802206a:	4689      	mov	r9, r1
 802206c:	45a0      	cmp	r8, r4
 802206e:	d806      	bhi.n	802207e <__ieee754_fmod+0x36>
 8022070:	4254      	negs	r4, r2
 8022072:	4d75      	ldr	r5, [pc, #468]	@ (8022248 <__ieee754_fmod+0x200>)
 8022074:	4314      	orrs	r4, r2
 8022076:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 802207a:	42ac      	cmp	r4, r5
 802207c:	d909      	bls.n	8022092 <__ieee754_fmod+0x4a>
 802207e:	f7de fad5 	bl	800062c <__aeabi_dmul>
 8022082:	4602      	mov	r2, r0
 8022084:	460b      	mov	r3, r1
 8022086:	f7de fbfb 	bl	8000880 <__aeabi_ddiv>
 802208a:	ec41 0b10 	vmov	d0, r0, r1
 802208e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022092:	45e0      	cmp	r8, ip
 8022094:	4682      	mov	sl, r0
 8022096:	4604      	mov	r4, r0
 8022098:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 802209c:	dc09      	bgt.n	80220b2 <__ieee754_fmod+0x6a>
 802209e:	dbf4      	blt.n	802208a <__ieee754_fmod+0x42>
 80220a0:	4282      	cmp	r2, r0
 80220a2:	d8f2      	bhi.n	802208a <__ieee754_fmod+0x42>
 80220a4:	d105      	bne.n	80220b2 <__ieee754_fmod+0x6a>
 80220a6:	4b69      	ldr	r3, [pc, #420]	@ (802224c <__ieee754_fmod+0x204>)
 80220a8:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 80220ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80220b0:	e7eb      	b.n	802208a <__ieee754_fmod+0x42>
 80220b2:	4a65      	ldr	r2, [pc, #404]	@ (8022248 <__ieee754_fmod+0x200>)
 80220b4:	ea19 0f02 	tst.w	r9, r2
 80220b8:	d148      	bne.n	802214c <__ieee754_fmod+0x104>
 80220ba:	f1b8 0f00 	cmp.w	r8, #0
 80220be:	d13d      	bne.n	802213c <__ieee754_fmod+0xf4>
 80220c0:	4653      	mov	r3, sl
 80220c2:	4963      	ldr	r1, [pc, #396]	@ (8022250 <__ieee754_fmod+0x208>)
 80220c4:	2b00      	cmp	r3, #0
 80220c6:	dc36      	bgt.n	8022136 <__ieee754_fmod+0xee>
 80220c8:	4216      	tst	r6, r2
 80220ca:	d14f      	bne.n	802216c <__ieee754_fmod+0x124>
 80220cc:	f1bc 0f00 	cmp.w	ip, #0
 80220d0:	d144      	bne.n	802215c <__ieee754_fmod+0x114>
 80220d2:	463b      	mov	r3, r7
 80220d4:	4a5e      	ldr	r2, [pc, #376]	@ (8022250 <__ieee754_fmod+0x208>)
 80220d6:	2b00      	cmp	r3, #0
 80220d8:	dc3d      	bgt.n	8022156 <__ieee754_fmod+0x10e>
 80220da:	485e      	ldr	r0, [pc, #376]	@ (8022254 <__ieee754_fmod+0x20c>)
 80220dc:	4281      	cmp	r1, r0
 80220de:	db4a      	blt.n	8022176 <__ieee754_fmod+0x12e>
 80220e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80220e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80220e8:	485a      	ldr	r0, [pc, #360]	@ (8022254 <__ieee754_fmod+0x20c>)
 80220ea:	4282      	cmp	r2, r0
 80220ec:	db57      	blt.n	802219e <__ieee754_fmod+0x156>
 80220ee:	f3c6 0613 	ubfx	r6, r6, #0, #20
 80220f2:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 80220f6:	1a89      	subs	r1, r1, r2
 80220f8:	1b98      	subs	r0, r3, r6
 80220fa:	eba4 070e 	sub.w	r7, r4, lr
 80220fe:	2900      	cmp	r1, #0
 8022100:	d162      	bne.n	80221c8 <__ieee754_fmod+0x180>
 8022102:	4574      	cmp	r4, lr
 8022104:	bf38      	it	cc
 8022106:	f100 30ff 	addcc.w	r0, r0, #4294967295
 802210a:	2800      	cmp	r0, #0
 802210c:	bfa4      	itt	ge
 802210e:	463c      	movge	r4, r7
 8022110:	4603      	movge	r3, r0
 8022112:	ea53 0104 	orrs.w	r1, r3, r4
 8022116:	d0c6      	beq.n	80220a6 <__ieee754_fmod+0x5e>
 8022118:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 802211c:	db69      	blt.n	80221f2 <__ieee754_fmod+0x1aa>
 802211e:	494d      	ldr	r1, [pc, #308]	@ (8022254 <__ieee754_fmod+0x20c>)
 8022120:	428a      	cmp	r2, r1
 8022122:	db6c      	blt.n	80221fe <__ieee754_fmod+0x1b6>
 8022124:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8022128:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 802212c:	4620      	mov	r0, r4
 802212e:	432b      	orrs	r3, r5
 8022130:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8022134:	e7a9      	b.n	802208a <__ieee754_fmod+0x42>
 8022136:	3901      	subs	r1, #1
 8022138:	005b      	lsls	r3, r3, #1
 802213a:	e7c3      	b.n	80220c4 <__ieee754_fmod+0x7c>
 802213c:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8022140:	4944      	ldr	r1, [pc, #272]	@ (8022254 <__ieee754_fmod+0x20c>)
 8022142:	2b00      	cmp	r3, #0
 8022144:	ddc0      	ble.n	80220c8 <__ieee754_fmod+0x80>
 8022146:	3901      	subs	r1, #1
 8022148:	005b      	lsls	r3, r3, #1
 802214a:	e7fa      	b.n	8022142 <__ieee754_fmod+0xfa>
 802214c:	ea4f 5128 	mov.w	r1, r8, asr #20
 8022150:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8022154:	e7b8      	b.n	80220c8 <__ieee754_fmod+0x80>
 8022156:	3a01      	subs	r2, #1
 8022158:	005b      	lsls	r3, r3, #1
 802215a:	e7bc      	b.n	80220d6 <__ieee754_fmod+0x8e>
 802215c:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 8022160:	4a3c      	ldr	r2, [pc, #240]	@ (8022254 <__ieee754_fmod+0x20c>)
 8022162:	2b00      	cmp	r3, #0
 8022164:	ddb9      	ble.n	80220da <__ieee754_fmod+0x92>
 8022166:	3a01      	subs	r2, #1
 8022168:	005b      	lsls	r3, r3, #1
 802216a:	e7fa      	b.n	8022162 <__ieee754_fmod+0x11a>
 802216c:	ea4f 522c 	mov.w	r2, ip, asr #20
 8022170:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8022174:	e7b1      	b.n	80220da <__ieee754_fmod+0x92>
 8022176:	1a40      	subs	r0, r0, r1
 8022178:	281f      	cmp	r0, #31
 802217a:	dc0a      	bgt.n	8022192 <__ieee754_fmod+0x14a>
 802217c:	f201 431e 	addw	r3, r1, #1054	@ 0x41e
 8022180:	fa08 f800 	lsl.w	r8, r8, r0
 8022184:	fa0a f400 	lsl.w	r4, sl, r0
 8022188:	fa2a f303 	lsr.w	r3, sl, r3
 802218c:	ea43 0308 	orr.w	r3, r3, r8
 8022190:	e7aa      	b.n	80220e8 <__ieee754_fmod+0xa0>
 8022192:	4b31      	ldr	r3, [pc, #196]	@ (8022258 <__ieee754_fmod+0x210>)
 8022194:	2400      	movs	r4, #0
 8022196:	1a5b      	subs	r3, r3, r1
 8022198:	fa0a f303 	lsl.w	r3, sl, r3
 802219c:	e7a4      	b.n	80220e8 <__ieee754_fmod+0xa0>
 802219e:	1a80      	subs	r0, r0, r2
 80221a0:	281f      	cmp	r0, #31
 80221a2:	dc0a      	bgt.n	80221ba <__ieee754_fmod+0x172>
 80221a4:	f202 461e 	addw	r6, r2, #1054	@ 0x41e
 80221a8:	fa0c fc00 	lsl.w	ip, ip, r0
 80221ac:	fa07 fe00 	lsl.w	lr, r7, r0
 80221b0:	fa27 f606 	lsr.w	r6, r7, r6
 80221b4:	ea46 060c 	orr.w	r6, r6, ip
 80221b8:	e79d      	b.n	80220f6 <__ieee754_fmod+0xae>
 80221ba:	4e27      	ldr	r6, [pc, #156]	@ (8022258 <__ieee754_fmod+0x210>)
 80221bc:	f04f 0e00 	mov.w	lr, #0
 80221c0:	1ab6      	subs	r6, r6, r2
 80221c2:	fa07 f606 	lsl.w	r6, r7, r6
 80221c6:	e796      	b.n	80220f6 <__ieee754_fmod+0xae>
 80221c8:	4574      	cmp	r4, lr
 80221ca:	bf38      	it	cc
 80221cc:	f100 30ff 	addcc.w	r0, r0, #4294967295
 80221d0:	2800      	cmp	r0, #0
 80221d2:	da05      	bge.n	80221e0 <__ieee754_fmod+0x198>
 80221d4:	0fe0      	lsrs	r0, r4, #31
 80221d6:	0064      	lsls	r4, r4, #1
 80221d8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80221dc:	3901      	subs	r1, #1
 80221de:	e78b      	b.n	80220f8 <__ieee754_fmod+0xb0>
 80221e0:	ea50 0307 	orrs.w	r3, r0, r7
 80221e4:	f43f af5f 	beq.w	80220a6 <__ieee754_fmod+0x5e>
 80221e8:	0ffb      	lsrs	r3, r7, #31
 80221ea:	007c      	lsls	r4, r7, #1
 80221ec:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80221f0:	e7f4      	b.n	80221dc <__ieee754_fmod+0x194>
 80221f2:	0fe1      	lsrs	r1, r4, #31
 80221f4:	3a01      	subs	r2, #1
 80221f6:	0064      	lsls	r4, r4, #1
 80221f8:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80221fc:	e78c      	b.n	8022118 <__ieee754_fmod+0xd0>
 80221fe:	1a89      	subs	r1, r1, r2
 8022200:	2914      	cmp	r1, #20
 8022202:	dc0a      	bgt.n	802221a <__ieee754_fmod+0x1d2>
 8022204:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8022208:	40cc      	lsrs	r4, r1
 802220a:	fa03 f202 	lsl.w	r2, r3, r2
 802220e:	410b      	asrs	r3, r1
 8022210:	4322      	orrs	r2, r4
 8022212:	ea43 0105 	orr.w	r1, r3, r5
 8022216:	4610      	mov	r0, r2
 8022218:	e737      	b.n	802208a <__ieee754_fmod+0x42>
 802221a:	291f      	cmp	r1, #31
 802221c:	dc07      	bgt.n	802222e <__ieee754_fmod+0x1e6>
 802221e:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8022222:	40cc      	lsrs	r4, r1
 8022224:	fa03 f202 	lsl.w	r2, r3, r2
 8022228:	4322      	orrs	r2, r4
 802222a:	462b      	mov	r3, r5
 802222c:	e7f1      	b.n	8022212 <__ieee754_fmod+0x1ca>
 802222e:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 8022232:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 8022236:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 802223a:	32e2      	adds	r2, #226	@ 0xe2
 802223c:	fa43 f202 	asr.w	r2, r3, r2
 8022240:	e7f3      	b.n	802222a <__ieee754_fmod+0x1e2>
 8022242:	bf00      	nop
 8022244:	7fefffff 	.word	0x7fefffff
 8022248:	7ff00000 	.word	0x7ff00000
 802224c:	08024838 	.word	0x08024838
 8022250:	fffffbed 	.word	0xfffffbed
 8022254:	fffffc02 	.word	0xfffffc02
 8022258:	fffffbe2 	.word	0xfffffbe2

0802225c <_init>:
 802225c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802225e:	bf00      	nop
 8022260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022262:	bc08      	pop	{r3}
 8022264:	469e      	mov	lr, r3
 8022266:	4770      	bx	lr

08022268 <_fini>:
 8022268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802226a:	bf00      	nop
 802226c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802226e:	bc08      	pop	{r3}
 8022270:	469e      	mov	lr, r3
 8022272:	4770      	bx	lr
